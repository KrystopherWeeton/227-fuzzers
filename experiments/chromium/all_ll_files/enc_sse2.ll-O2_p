; ModuleID = '../../third_party/libwebp/src/dsp/enc_sse2.c'
source_filename = "../../third_party/libwebp/src/dsp/enc_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP8Histogram = type { i32, i32 }
%struct.VP8Matrix = type { [16 x i16], [16 x i16], [16 x i32], [16 x i32], [16 x i16] }

@VP8CollectHistogram = external local_unnamed_addr global void (i8*, i8*, i32, i32, %struct.VP8Histogram*)*, align 8
@VP8EncPredLuma16 = external local_unnamed_addr global void (i8*, i8*, i8*)*, align 8
@VP8EncPredChroma8 = external local_unnamed_addr global void (i8*, i8*, i8*)*, align 8
@VP8EncPredLuma4 = external local_unnamed_addr global void (i8*, i8*)*, align 8
@VP8EncQuantizeBlock = external local_unnamed_addr global i32 (i16*, i16*, %struct.VP8Matrix*)*, align 8
@VP8EncQuantize2Blocks = external local_unnamed_addr global i32 (i16*, i16*, %struct.VP8Matrix*)*, align 8
@VP8EncQuantizeBlockWHT = external local_unnamed_addr global i32 (i16*, i16*, %struct.VP8Matrix*)*, align 8
@VP8ITransform = external local_unnamed_addr global void (i8*, i16*, i8*, i32)*, align 8
@VP8FTransform = external local_unnamed_addr global void (i8*, i8*, i16*)*, align 8
@VP8FTransform2 = external local_unnamed_addr global void (i8*, i8*, i16*)*, align 8
@VP8FTransformWHT = external local_unnamed_addr global void (i16*, i16*)*, align 8
@VP8SSE16x16 = external local_unnamed_addr global i32 (i8*, i8*)*, align 8
@VP8SSE16x8 = external local_unnamed_addr global i32 (i8*, i8*)*, align 8
@VP8SSE8x8 = external local_unnamed_addr global i32 (i8*, i8*)*, align 8
@VP8SSE4x4 = external local_unnamed_addr global i32 (i8*, i8*)*, align 8
@VP8TDisto4x4 = external local_unnamed_addr global i32 (i8*, i8*, i16*)*, align 8
@VP8TDisto16x16 = external local_unnamed_addr global i32 (i8*, i8*, i16*)*, align 8
@VP8Mean16x4 = external local_unnamed_addr global void (i8*, i32*)*, align 8
@VP8DspScan = external local_unnamed_addr constant [24 x i32], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @VP8EncDspInitSSE2() local_unnamed_addr #0 {
  store void (i8*, i8*, i32, i32, %struct.VP8Histogram*)* @CollectHistogram_SSE2, void (i8*, i8*, i32, i32, %struct.VP8Histogram*)** @VP8CollectHistogram, align 8
  store void (i8*, i8*, i8*)* @Intra16Preds_SSE2, void (i8*, i8*, i8*)** @VP8EncPredLuma16, align 8
  store void (i8*, i8*, i8*)* @IntraChromaPreds_SSE2, void (i8*, i8*, i8*)** @VP8EncPredChroma8, align 8
  store void (i8*, i8*)* @Intra4Preds_SSE2, void (i8*, i8*)** @VP8EncPredLuma4, align 8
  store i32 (i16*, i16*, %struct.VP8Matrix*)* @QuantizeBlock_SSE2, i32 (i16*, i16*, %struct.VP8Matrix*)** @VP8EncQuantizeBlock, align 8
  store i32 (i16*, i16*, %struct.VP8Matrix*)* @Quantize2Blocks_SSE2, i32 (i16*, i16*, %struct.VP8Matrix*)** @VP8EncQuantize2Blocks, align 8
  store i32 (i16*, i16*, %struct.VP8Matrix*)* @QuantizeBlockWHT_SSE2, i32 (i16*, i16*, %struct.VP8Matrix*)** @VP8EncQuantizeBlockWHT, align 8
  store void (i8*, i16*, i8*, i32)* @ITransform_SSE2, void (i8*, i16*, i8*, i32)** @VP8ITransform, align 8
  store void (i8*, i8*, i16*)* @FTransform_SSE2, void (i8*, i8*, i16*)** @VP8FTransform, align 8
  store void (i8*, i8*, i16*)* @FTransform2_SSE2, void (i8*, i8*, i16*)** @VP8FTransform2, align 8
  store void (i16*, i16*)* @FTransformWHT_SSE2, void (i16*, i16*)** @VP8FTransformWHT, align 8
  store i32 (i8*, i8*)* @SSE16x16_SSE2, i32 (i8*, i8*)** @VP8SSE16x16, align 8
  store i32 (i8*, i8*)* @SSE16x8_SSE2, i32 (i8*, i8*)** @VP8SSE16x8, align 8
  store i32 (i8*, i8*)* @SSE8x8_SSE2, i32 (i8*, i8*)** @VP8SSE8x8, align 8
  store i32 (i8*, i8*)* @SSE4x4_SSE2, i32 (i8*, i8*)** @VP8SSE4x4, align 8
  store i32 (i8*, i8*, i16*)* @Disto4x4_SSE2, i32 (i8*, i8*, i16*)** @VP8TDisto4x4, align 8
  store i32 (i8*, i8*, i16*)* @Disto16x16_SSE2, i32 (i8*, i8*, i16*)** @VP8TDisto16x16, align 8
  store void (i8*, i32*)* @Mean16x4_SSE2, void (i8*, i32*)** @VP8Mean16x4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @CollectHistogram_SSE2(i8* nocapture readonly, i8* nocapture readonly, i32, i32, %struct.VP8Histogram*) #1 {
  %6 = alloca [32 x i32], align 16
  %7 = alloca [16 x i16], align 16
  %8 = bitcast [32 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 128, i1 false)
  %9 = icmp slt i32 %2, %3
  br i1 %9, label %10, label %244

10:                                               ; preds = %5
  %11 = bitcast [16 x i16]* %7 to i8*
  %12 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 8
  %13 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 13
  %14 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 14
  %15 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 15
  %16 = bitcast [16 x i16]* %7 to <8 x i16>*
  %17 = bitcast i16* %12 to <8 x i16>*
  %18 = sext i32 %2 to i64
  %19 = sext i32 %3 to i64
  %20 = bitcast [16 x i16]* %7 to i8*
  br label %21

21:                                               ; preds = %21, %10
  %22 = phi i64 [ %18, %10 ], [ %242, %21 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #8
  %23 = getelementptr inbounds [24 x i32], [24 x i32]* @VP8DspScan, i64 0, i64 %22
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 32, i1 false)
  %24 = load i32, i32* %23, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %0, i64 %25
  %27 = getelementptr inbounds i8, i8* %1, i64 %25
  %28 = bitcast i8* %26 to i64*
  %29 = load i64, i64* %28, align 1
  %30 = insertelement <2 x i64> undef, i64 %29, i32 0
  %31 = getelementptr inbounds i8, i8* %26, i64 32
  %32 = bitcast i8* %31 to i64*
  %33 = load i64, i64* %32, align 1
  %34 = insertelement <2 x i64> undef, i64 %33, i32 0
  %35 = getelementptr inbounds i8, i8* %26, i64 64
  %36 = bitcast i8* %35 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = getelementptr inbounds i8, i8* %26, i64 96
  %40 = bitcast i8* %39 to i64*
  %41 = load i64, i64* %40, align 1
  %42 = insertelement <2 x i64> undef, i64 %41, i32 0
  %43 = bitcast <2 x i64> %30 to <8 x i16>
  %44 = bitcast <2 x i64> %34 to <8 x i16>
  %45 = shufflevector <8 x i16> %43, <8 x i16> %44, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = bitcast <2 x i64> %38 to <8 x i16>
  %47 = bitcast <2 x i64> %42 to <8 x i16>
  %48 = shufflevector <8 x i16> %46, <8 x i16> %47, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = bitcast i8* %27 to i64*
  %50 = load i64, i64* %49, align 1
  %51 = insertelement <2 x i64> undef, i64 %50, i32 0
  %52 = getelementptr inbounds i8, i8* %27, i64 32
  %53 = bitcast i8* %52 to i64*
  %54 = load i64, i64* %53, align 1
  %55 = insertelement <2 x i64> undef, i64 %54, i32 0
  %56 = getelementptr inbounds i8, i8* %27, i64 64
  %57 = bitcast i8* %56 to i64*
  %58 = load i64, i64* %57, align 1
  %59 = insertelement <2 x i64> undef, i64 %58, i32 0
  %60 = getelementptr inbounds i8, i8* %27, i64 96
  %61 = bitcast i8* %60 to i64*
  %62 = load i64, i64* %61, align 1
  %63 = insertelement <2 x i64> undef, i64 %62, i32 0
  %64 = bitcast <2 x i64> %51 to <8 x i16>
  %65 = bitcast <2 x i64> %55 to <8 x i16>
  %66 = shufflevector <8 x i16> %64, <8 x i16> %65, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 undef, i32 undef, i32 undef, i32 undef>
  %67 = bitcast <2 x i64> %59 to <8 x i16>
  %68 = bitcast <2 x i64> %63 to <8 x i16>
  %69 = shufflevector <8 x i16> %67, <8 x i16> %68, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 undef, i32 undef, i32 undef, i32 undef>
  %70 = bitcast <8 x i16> %45 to <16 x i8>
  %71 = shufflevector <16 x i8> %70, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %72 = bitcast <8 x i16> %48 to <16 x i8>
  %73 = shufflevector <16 x i8> %72, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %74 = bitcast <8 x i16> %66 to <16 x i8>
  %75 = shufflevector <16 x i8> %74, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %76 = bitcast <8 x i16> %69 to <16 x i8>
  %77 = shufflevector <16 x i8> %76, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %78 = bitcast <16 x i8> %71 to <8 x i16>
  %79 = bitcast <16 x i8> %75 to <8 x i16>
  %80 = sub <8 x i16> %78, %79
  %81 = bitcast <16 x i8> %73 to <8 x i16>
  %82 = bitcast <16 x i8> %77 to <8 x i16>
  %83 = sub <8 x i16> %81, %82
  %84 = shufflevector <8 x i16> %80, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %85 = bitcast <8 x i16> %84 to <2 x i64>
  %86 = shufflevector <8 x i16> %83, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %87 = bitcast <8 x i16> %86 to <2 x i64>
  %88 = shufflevector <2 x i64> %85, <2 x i64> %87, <2 x i32> <i32 0, i32 2>
  %89 = shufflevector <2 x i64> %85, <2 x i64> %87, <2 x i32> <i32 1, i32 3>
  %90 = bitcast <2 x i64> %88 to <8 x i16>
  %91 = bitcast <2 x i64> %89 to <8 x i16>
  %92 = add <8 x i16> %91, %90
  %93 = sub <8 x i16> %90, %91
  %94 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %92, <8 x i16> <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>) #8
  %95 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %92, <8 x i16> <i16 8, i16 -8, i16 8, i16 -8, i16 8, i16 -8, i16 8, i16 -8>) #8
  %96 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %93, <8 x i16> <i16 5352, i16 2217, i16 5352, i16 2217, i16 5352, i16 2217, i16 5352, i16 2217>) #8
  %97 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %93, <8 x i16> <i16 2217, i16 -5352, i16 2217, i16 -5352, i16 2217, i16 -5352, i16 2217, i16 -5352>) #8
  %98 = add <4 x i32> %96, <i32 1812, i32 1812, i32 1812, i32 1812>
  %99 = add <4 x i32> %97, <i32 937, i32 937, i32 937, i32 937>
  %100 = ashr <4 x i32> %98, <i32 9, i32 9, i32 9, i32 9>
  %101 = ashr <4 x i32> %99, <i32 9, i32 9, i32 9, i32 9>
  %102 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %94, <4 x i32> %95) #8
  %103 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %100, <4 x i32> %101) #8
  %104 = shufflevector <8 x i16> %102, <8 x i16> %103, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %105 = shufflevector <8 x i16> %102, <8 x i16> %103, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %106 = bitcast <8 x i16> %104 to <4 x i32>
  %107 = bitcast <8 x i16> %105 to <4 x i32>
  %108 = shufflevector <4 x i32> %106, <4 x i32> %107, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %109 = shufflevector <4 x i32> %106, <4 x i32> %107, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %110 = shufflevector <4 x i32> %108, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %111 = bitcast <4 x i32> %109 to <8 x i16>
  %112 = bitcast <4 x i32> %110 to <8 x i16>
  %113 = sub <8 x i16> %111, %112
  %114 = bitcast <8 x i16> %113 to <2 x i64>
  %115 = shufflevector <2 x i64> %114, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %116 = bitcast <2 x i64> %115 to <8 x i16>
  %117 = shufflevector <8 x i16> %116, <8 x i16> %113, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %118 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %117, <8 x i16> <i16 2217, i16 5352, i16 2217, i16 5352, i16 2217, i16 5352, i16 2217, i16 5352>) #8
  %119 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %117, <8 x i16> <i16 -5352, i16 2217, i16 -5352, i16 2217, i16 -5352, i16 2217, i16 -5352, i16 2217>) #8
  %120 = add <4 x i32> %118, <i32 77536, i32 77536, i32 77536, i32 77536>
  %121 = add <4 x i32> %119, <i32 51000, i32 51000, i32 51000, i32 51000>
  %122 = ashr <4 x i32> %120, <i32 16, i32 16, i32 16, i32 16>
  %123 = ashr <4 x i32> %121, <i32 16, i32 16, i32 16, i32 16>
  %124 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %122, <4 x i32> undef) #8
  %125 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %123, <4 x i32> undef) #8
  %126 = bitcast <8 x i16> %125 to <2 x i64>
  %127 = icmp eq <8 x i16> %113, zeroinitializer
  %128 = zext <8 x i1> %127 to <8 x i16>
  %129 = sub <8 x i16> %124, %128
  %130 = bitcast <8 x i16> %129 to <2 x i64>
  %131 = add <8 x i16> %112, %111
  %132 = bitcast <8 x i16> %131 to <2 x i64>
  %133 = add <8 x i16> %131, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %134 = shufflevector <2 x i64> %132, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %135 = bitcast <2 x i64> %134 to <8 x i16>
  %136 = add <8 x i16> %133, %135
  %137 = sub <8 x i16> %133, %135
  %138 = ashr <8 x i16> %136, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %139 = bitcast <8 x i16> %138 to <2 x i64>
  %140 = ashr <8 x i16> %137, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %141 = bitcast <8 x i16> %140 to <2 x i64>
  %142 = shufflevector <2 x i64> %139, <2 x i64> %130, <2 x i32> <i32 0, i32 2>
  %143 = shufflevector <2 x i64> %141, <2 x i64> %126, <2 x i32> <i32 0, i32 2>
  %144 = bitcast <2 x i64> %142 to <8 x i16>
  %145 = bitcast <2 x i64> %143 to <8 x i16>
  %146 = sub <8 x i16> zeroinitializer, %144
  %147 = sub <8 x i16> zeroinitializer, %145
  %148 = icmp sgt <8 x i16> %144, %146
  %149 = select <8 x i1> %148, <8 x i16> %144, <8 x i16> %146
  %150 = icmp sgt <8 x i16> %145, %147
  %151 = select <8 x i1> %150, <8 x i16> %145, <8 x i16> %147
  %152 = ashr <8 x i16> %149, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %153 = ashr <8 x i16> %151, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %154 = icmp slt <8 x i16> %152, <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  %155 = select <8 x i1> %154, <8 x i16> %152, <8 x i16> <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  %156 = icmp slt <8 x i16> %153, <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  %157 = select <8 x i1> %156, <8 x i16> %153, <8 x i16> <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  store <8 x i16> %155, <8 x i16>* %16, align 16
  store <8 x i16> %157, <8 x i16>* %17, align 16
  %158 = bitcast <8 x i16> %155 to <2 x i64>
  %159 = extractelement <2 x i64> %158, i32 0
  %160 = shl i64 %159, 48
  %161 = ashr exact i64 %160, 48
  %162 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %161
  %163 = load i32, i32* %162, align 4
  %164 = add nsw i32 %163, 1
  store i32 %164, i32* %162, align 4
  %165 = extractelement <8 x i16> %155, i32 1
  %166 = sext i16 %165 to i64
  %167 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %166
  %168 = load i32, i32* %167, align 4
  %169 = add nsw i32 %168, 1
  store i32 %169, i32* %167, align 4
  %170 = extractelement <8 x i16> %155, i32 2
  %171 = sext i16 %170 to i64
  %172 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %171
  %173 = load i32, i32* %172, align 4
  %174 = add nsw i32 %173, 1
  store i32 %174, i32* %172, align 4
  %175 = extractelement <8 x i16> %155, i32 3
  %176 = sext i16 %175 to i64
  %177 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %176
  %178 = load i32, i32* %177, align 4
  %179 = add nsw i32 %178, 1
  store i32 %179, i32* %177, align 4
  %180 = extractelement <8 x i16> %155, i32 4
  %181 = sext i16 %180 to i64
  %182 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %181
  %183 = load i32, i32* %182, align 4
  %184 = add nsw i32 %183, 1
  store i32 %184, i32* %182, align 4
  %185 = extractelement <8 x i16> %155, i32 5
  %186 = sext i16 %185 to i64
  %187 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %186
  %188 = load i32, i32* %187, align 4
  %189 = add nsw i32 %188, 1
  store i32 %189, i32* %187, align 4
  %190 = extractelement <8 x i16> %155, i32 6
  %191 = sext i16 %190 to i64
  %192 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %191
  %193 = load i32, i32* %192, align 4
  %194 = add nsw i32 %193, 1
  store i32 %194, i32* %192, align 4
  %195 = extractelement <8 x i16> %155, i32 7
  %196 = sext i16 %195 to i64
  %197 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %196
  %198 = load i32, i32* %197, align 4
  %199 = add nsw i32 %198, 1
  store i32 %199, i32* %197, align 4
  %200 = bitcast <8 x i16> %157 to <2 x i64>
  %201 = extractelement <2 x i64> %200, i32 0
  %202 = shl i64 %201, 48
  %203 = ashr exact i64 %202, 48
  %204 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %203
  %205 = load i32, i32* %204, align 4
  %206 = add nsw i32 %205, 1
  store i32 %206, i32* %204, align 4
  %207 = extractelement <8 x i16> %157, i32 1
  %208 = sext i16 %207 to i64
  %209 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %208
  %210 = load i32, i32* %209, align 4
  %211 = add nsw i32 %210, 1
  store i32 %211, i32* %209, align 4
  %212 = extractelement <8 x i16> %157, i32 2
  %213 = sext i16 %212 to i64
  %214 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %213
  %215 = load i32, i32* %214, align 4
  %216 = add nsw i32 %215, 1
  store i32 %216, i32* %214, align 4
  %217 = extractelement <8 x i16> %157, i32 3
  %218 = sext i16 %217 to i64
  %219 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %218
  %220 = load i32, i32* %219, align 4
  %221 = add nsw i32 %220, 1
  store i32 %221, i32* %219, align 4
  %222 = extractelement <8 x i16> %157, i32 4
  %223 = sext i16 %222 to i64
  %224 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %223
  %225 = load i32, i32* %224, align 4
  %226 = add nsw i32 %225, 1
  store i32 %226, i32* %224, align 4
  %227 = load i16, i16* %13, align 2
  %228 = sext i16 %227 to i64
  %229 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %228
  %230 = load i32, i32* %229, align 4
  %231 = add nsw i32 %230, 1
  store i32 %231, i32* %229, align 4
  %232 = load i16, i16* %14, align 4
  %233 = sext i16 %232 to i64
  %234 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %233
  %235 = load i32, i32* %234, align 4
  %236 = add nsw i32 %235, 1
  store i32 %236, i32* %234, align 4
  %237 = load i16, i16* %15, align 2
  %238 = sext i16 %237 to i64
  %239 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 %238
  %240 = load i32, i32* %239, align 4
  %241 = add nsw i32 %240, 1
  store i32 %241, i32* %239, align 4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #8
  %242 = add nsw i64 %22, 1
  %243 = icmp eq i64 %242, %19
  br i1 %243, label %244, label %21

244:                                              ; preds = %21, %5
  %245 = getelementptr inbounds [32 x i32], [32 x i32]* %6, i64 0, i64 0
  call void @VP8SetHistogramData(i32* nonnull %245, %struct.VP8Histogram* %4) #8
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #8
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @Intra16Preds_SSE2(i8*, i8* readonly, i8* readonly) #2 {
  %4 = icmp eq i8* %2, null
  %5 = icmp ne i8* %1, null
  br i1 %4, label %31, label %6

6:                                                ; preds = %3
  %7 = bitcast i8* %2 to <16 x i8>*
  %8 = load <16 x i8>, <16 x i8>* %7, align 16
  br i1 %5, label %9, label %24

9:                                                ; preds = %6
  %10 = bitcast i8* %1 to <16 x i8>*
  %11 = load <16 x i8>, <16 x i8>* %10, align 16
  %12 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %8, <16 x i8> zeroinitializer) #8
  %13 = bitcast <2 x i64> %12 to <4 x i32>
  %14 = shufflevector <4 x i32> %13, <4 x i32> undef, <4 x i32> <i32 2, i32 undef, i32 undef, i32 undef>
  %15 = add <4 x i32> %14, %13
  %16 = extractelement <4 x i32> %15, i32 0
  %17 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %11, <16 x i8> zeroinitializer) #8
  %18 = bitcast <2 x i64> %17 to <4 x i32>
  %19 = shufflevector <4 x i32> %18, <4 x i32> undef, <4 x i32> <i32 2, i32 undef, i32 undef, i32 undef>
  %20 = add <4 x i32> %19, %18
  %21 = extractelement <4 x i32> %20, i32 0
  %22 = add i32 %16, 16
  %23 = add i32 %22, %21
  br label %45

24:                                               ; preds = %6
  %25 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %8, <16 x i8> zeroinitializer) #8
  %26 = bitcast <2 x i64> %25 to <4 x i32>
  %27 = shufflevector <4 x i32> %26, <4 x i32> undef, <4 x i32> <i32 2, i32 undef, i32 undef, i32 undef>
  %28 = add <4 x i32> %27, %26
  %29 = extractelement <4 x i32> %28, i32 0
  %30 = add nsw i32 %29, 8
  br label %45

31:                                               ; preds = %3
  br i1 %5, label %32, label %117

32:                                               ; preds = %31
  %33 = bitcast i8* %1 to <16 x i8>*
  %34 = load <16 x i8>, <16 x i8>* %33, align 16
  %35 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %34, <16 x i8> zeroinitializer) #8
  %36 = bitcast <2 x i64> %35 to <4 x i32>
  %37 = shufflevector <4 x i32> %36, <4 x i32> undef, <4 x i32> <i32 2, i32 undef, i32 undef, i32 undef>
  %38 = add <4 x i32> %37, %36
  %39 = extractelement <4 x i32> %38, i32 0
  %40 = add nsw i32 %39, 8
  %41 = lshr i32 %40, 4
  %42 = trunc i32 %41 to i8
  %43 = insertelement <16 x i8> undef, i8 %42, i32 0
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> zeroinitializer
  br label %117

45:                                               ; preds = %24, %9
  %46 = phi i32 [ 4, %24 ], [ 5, %9 ]
  %47 = phi i32 [ %30, %24 ], [ %23, %9 ]
  %48 = lshr i32 %47, %46
  %49 = trunc i32 %48 to i8
  %50 = insertelement <16 x i8> undef, i8 %49, i32 0
  %51 = shufflevector <16 x i8> %50, <16 x i8> undef, <16 x i32> zeroinitializer
  %52 = bitcast i8* %0 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %52, align 16
  %53 = getelementptr inbounds i8, i8* %0, i64 32
  %54 = bitcast i8* %53 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %54, align 16
  %55 = getelementptr inbounds i8, i8* %0, i64 64
  %56 = bitcast i8* %55 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %56, align 16
  %57 = getelementptr inbounds i8, i8* %0, i64 96
  %58 = bitcast i8* %57 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %58, align 16
  %59 = getelementptr inbounds i8, i8* %0, i64 128
  %60 = bitcast i8* %59 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %60, align 16
  %61 = getelementptr inbounds i8, i8* %0, i64 160
  %62 = bitcast i8* %61 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %62, align 16
  %63 = getelementptr inbounds i8, i8* %0, i64 192
  %64 = bitcast i8* %63 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %64, align 16
  %65 = getelementptr inbounds i8, i8* %0, i64 224
  %66 = bitcast i8* %65 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %66, align 16
  %67 = getelementptr inbounds i8, i8* %0, i64 256
  %68 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %68, align 16
  %69 = getelementptr inbounds i8, i8* %0, i64 288
  %70 = bitcast i8* %69 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %70, align 16
  %71 = getelementptr inbounds i8, i8* %0, i64 320
  %72 = bitcast i8* %71 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %72, align 16
  %73 = getelementptr inbounds i8, i8* %0, i64 352
  %74 = bitcast i8* %73 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %74, align 16
  %75 = getelementptr inbounds i8, i8* %0, i64 384
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %76, align 16
  %77 = getelementptr inbounds i8, i8* %0, i64 416
  %78 = bitcast i8* %77 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %78, align 16
  %79 = getelementptr inbounds i8, i8* %0, i64 448
  %80 = bitcast i8* %79 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %80, align 16
  %81 = getelementptr inbounds i8, i8* %0, i64 480
  %82 = bitcast i8* %81 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %82, align 16
  %83 = getelementptr inbounds i8, i8* %0, i64 512
  %84 = bitcast i8* %2 to <2 x i64>*
  %85 = load <2 x i64>, <2 x i64>* %84, align 16
  %86 = bitcast i8* %83 to <2 x i64>*
  store <2 x i64> %85, <2 x i64>* %86, align 16
  %87 = getelementptr inbounds i8, i8* %0, i64 544
  %88 = bitcast i8* %87 to <2 x i64>*
  store <2 x i64> %85, <2 x i64>* %88, align 16
  %89 = getelementptr inbounds i8, i8* %0, i64 576
  %90 = bitcast i8* %89 to <2 x i64>*
  store <2 x i64> %85, <2 x i64>* %90, align 16
  %91 = getelementptr inbounds i8, i8* %0, i64 608
  %92 = bitcast i8* %91 to <2 x i64>*
  store <2 x i64> %85, <2 x i64>* %92, align 16
  %93 = getelementptr inbounds i8, i8* %0, i64 640
  %94 = bitcast i8* %93 to <2 x i64>*
  store <2 x i64> %85, <2 x i64>* %94, align 16
  %95 = getelementptr inbounds i8, i8* %0, i64 672
  %96 = bitcast i8* %95 to <2 x i64>*
  store <2 x i64> %85, <2 x i64>* %96, align 16
  %97 = getelementptr inbounds i8, i8* %0, i64 704
  %98 = bitcast i8* %97 to <2 x i64>*
  store <2 x i64> %85, <2 x i64>* %98, align 16
  %99 = getelementptr inbounds i8, i8* %0, i64 736
  %100 = bitcast i8* %99 to <2 x i64>*
  store <2 x i64> %85, <2 x i64>* %100, align 16
  %101 = getelementptr inbounds i8, i8* %0, i64 768
  %102 = bitcast i8* %101 to <2 x i64>*
  store <2 x i64> %85, <2 x i64>* %102, align 16
  %103 = getelementptr inbounds i8, i8* %0, i64 800
  %104 = bitcast i8* %103 to <2 x i64>*
  store <2 x i64> %85, <2 x i64>* %104, align 16
  %105 = getelementptr inbounds i8, i8* %0, i64 832
  %106 = bitcast i8* %105 to <2 x i64>*
  store <2 x i64> %85, <2 x i64>* %106, align 16
  %107 = getelementptr inbounds i8, i8* %0, i64 864
  %108 = bitcast i8* %107 to <2 x i64>*
  store <2 x i64> %85, <2 x i64>* %108, align 16
  %109 = getelementptr inbounds i8, i8* %0, i64 896
  %110 = bitcast i8* %109 to <2 x i64>*
  store <2 x i64> %85, <2 x i64>* %110, align 16
  %111 = getelementptr inbounds i8, i8* %0, i64 928
  %112 = bitcast i8* %111 to <2 x i64>*
  store <2 x i64> %85, <2 x i64>* %112, align 16
  %113 = getelementptr inbounds i8, i8* %0, i64 960
  %114 = bitcast i8* %113 to <2 x i64>*
  store <2 x i64> %85, <2 x i64>* %114, align 16
  %115 = getelementptr inbounds i8, i8* %0, i64 992
  %116 = bitcast i8* %115 to <2 x i64>*
  store <2 x i64> %85, <2 x i64>* %116, align 16
  br label %182

117:                                              ; preds = %31, %32
  %118 = phi <16 x i8> [ %44, %32 ], [ <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>, %31 ]
  %119 = bitcast i8* %0 to <16 x i8>*
  store <16 x i8> %118, <16 x i8>* %119, align 16
  %120 = getelementptr inbounds i8, i8* %0, i64 32
  %121 = bitcast i8* %120 to <16 x i8>*
  store <16 x i8> %118, <16 x i8>* %121, align 16
  %122 = getelementptr inbounds i8, i8* %0, i64 64
  %123 = bitcast i8* %122 to <16 x i8>*
  store <16 x i8> %118, <16 x i8>* %123, align 16
  %124 = getelementptr inbounds i8, i8* %0, i64 96
  %125 = bitcast i8* %124 to <16 x i8>*
  store <16 x i8> %118, <16 x i8>* %125, align 16
  %126 = getelementptr inbounds i8, i8* %0, i64 128
  %127 = bitcast i8* %126 to <16 x i8>*
  store <16 x i8> %118, <16 x i8>* %127, align 16
  %128 = getelementptr inbounds i8, i8* %0, i64 160
  %129 = bitcast i8* %128 to <16 x i8>*
  store <16 x i8> %118, <16 x i8>* %129, align 16
  %130 = getelementptr inbounds i8, i8* %0, i64 192
  %131 = bitcast i8* %130 to <16 x i8>*
  store <16 x i8> %118, <16 x i8>* %131, align 16
  %132 = getelementptr inbounds i8, i8* %0, i64 224
  %133 = bitcast i8* %132 to <16 x i8>*
  store <16 x i8> %118, <16 x i8>* %133, align 16
  %134 = getelementptr inbounds i8, i8* %0, i64 256
  %135 = bitcast i8* %134 to <16 x i8>*
  store <16 x i8> %118, <16 x i8>* %135, align 16
  %136 = getelementptr inbounds i8, i8* %0, i64 288
  %137 = bitcast i8* %136 to <16 x i8>*
  store <16 x i8> %118, <16 x i8>* %137, align 16
  %138 = getelementptr inbounds i8, i8* %0, i64 320
  %139 = bitcast i8* %138 to <16 x i8>*
  store <16 x i8> %118, <16 x i8>* %139, align 16
  %140 = getelementptr inbounds i8, i8* %0, i64 352
  %141 = bitcast i8* %140 to <16 x i8>*
  store <16 x i8> %118, <16 x i8>* %141, align 16
  %142 = getelementptr inbounds i8, i8* %0, i64 384
  %143 = bitcast i8* %142 to <16 x i8>*
  store <16 x i8> %118, <16 x i8>* %143, align 16
  %144 = getelementptr inbounds i8, i8* %0, i64 416
  %145 = bitcast i8* %144 to <16 x i8>*
  store <16 x i8> %118, <16 x i8>* %145, align 16
  %146 = getelementptr inbounds i8, i8* %0, i64 448
  %147 = bitcast i8* %146 to <16 x i8>*
  store <16 x i8> %118, <16 x i8>* %147, align 16
  %148 = getelementptr inbounds i8, i8* %0, i64 480
  %149 = bitcast i8* %148 to <16 x i8>*
  store <16 x i8> %118, <16 x i8>* %149, align 16
  %150 = getelementptr inbounds i8, i8* %0, i64 512
  %151 = bitcast i8* %150 to <16 x i8>*
  store <16 x i8> <i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127>, <16 x i8>* %151, align 16
  %152 = getelementptr inbounds i8, i8* %0, i64 544
  %153 = bitcast i8* %152 to <16 x i8>*
  store <16 x i8> <i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127>, <16 x i8>* %153, align 16
  %154 = getelementptr inbounds i8, i8* %0, i64 576
  %155 = bitcast i8* %154 to <16 x i8>*
  store <16 x i8> <i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127>, <16 x i8>* %155, align 16
  %156 = getelementptr inbounds i8, i8* %0, i64 608
  %157 = bitcast i8* %156 to <16 x i8>*
  store <16 x i8> <i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127>, <16 x i8>* %157, align 16
  %158 = getelementptr inbounds i8, i8* %0, i64 640
  %159 = bitcast i8* %158 to <16 x i8>*
  store <16 x i8> <i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127>, <16 x i8>* %159, align 16
  %160 = getelementptr inbounds i8, i8* %0, i64 672
  %161 = bitcast i8* %160 to <16 x i8>*
  store <16 x i8> <i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127>, <16 x i8>* %161, align 16
  %162 = getelementptr inbounds i8, i8* %0, i64 704
  %163 = bitcast i8* %162 to <16 x i8>*
  store <16 x i8> <i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127>, <16 x i8>* %163, align 16
  %164 = getelementptr inbounds i8, i8* %0, i64 736
  %165 = bitcast i8* %164 to <16 x i8>*
  store <16 x i8> <i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127>, <16 x i8>* %165, align 16
  %166 = getelementptr inbounds i8, i8* %0, i64 768
  %167 = bitcast i8* %166 to <16 x i8>*
  store <16 x i8> <i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127>, <16 x i8>* %167, align 16
  %168 = getelementptr inbounds i8, i8* %0, i64 800
  %169 = bitcast i8* %168 to <16 x i8>*
  store <16 x i8> <i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127>, <16 x i8>* %169, align 16
  %170 = getelementptr inbounds i8, i8* %0, i64 832
  %171 = bitcast i8* %170 to <16 x i8>*
  store <16 x i8> <i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127>, <16 x i8>* %171, align 16
  %172 = getelementptr inbounds i8, i8* %0, i64 864
  %173 = bitcast i8* %172 to <16 x i8>*
  store <16 x i8> <i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127>, <16 x i8>* %173, align 16
  %174 = getelementptr inbounds i8, i8* %0, i64 896
  %175 = bitcast i8* %174 to <16 x i8>*
  store <16 x i8> <i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127>, <16 x i8>* %175, align 16
  %176 = getelementptr inbounds i8, i8* %0, i64 928
  %177 = bitcast i8* %176 to <16 x i8>*
  store <16 x i8> <i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127>, <16 x i8>* %177, align 16
  %178 = getelementptr inbounds i8, i8* %0, i64 960
  %179 = bitcast i8* %178 to <16 x i8>*
  store <16 x i8> <i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127>, <16 x i8>* %179, align 16
  %180 = getelementptr inbounds i8, i8* %0, i64 992
  %181 = bitcast i8* %180 to <16 x i8>*
  store <16 x i8> <i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127, i8 127>, <16 x i8>* %181, align 16
  br label %182

182:                                              ; preds = %45, %117
  %183 = getelementptr inbounds i8, i8* %0, i64 528
  %184 = icmp eq i8* %1, null
  br i1 %184, label %401, label %185

185:                                              ; preds = %182
  %186 = load i8, i8* %1, align 1
  %187 = insertelement <16 x i8> undef, i8 %186, i32 0
  %188 = shufflevector <16 x i8> %187, <16 x i8> undef, <16 x i32> zeroinitializer
  %189 = bitcast i8* %183 to <16 x i8>*
  store <16 x i8> %188, <16 x i8>* %189, align 16
  %190 = getelementptr inbounds i8, i8* %0, i64 560
  %191 = getelementptr inbounds i8, i8* %1, i64 1
  %192 = load i8, i8* %191, align 1
  %193 = insertelement <16 x i8> undef, i8 %192, i32 0
  %194 = shufflevector <16 x i8> %193, <16 x i8> undef, <16 x i32> zeroinitializer
  %195 = bitcast i8* %190 to <16 x i8>*
  store <16 x i8> %194, <16 x i8>* %195, align 16
  %196 = getelementptr inbounds i8, i8* %0, i64 592
  %197 = getelementptr inbounds i8, i8* %1, i64 2
  %198 = load i8, i8* %197, align 1
  %199 = insertelement <16 x i8> undef, i8 %198, i32 0
  %200 = shufflevector <16 x i8> %199, <16 x i8> undef, <16 x i32> zeroinitializer
  %201 = bitcast i8* %196 to <16 x i8>*
  store <16 x i8> %200, <16 x i8>* %201, align 16
  %202 = getelementptr inbounds i8, i8* %0, i64 624
  %203 = getelementptr inbounds i8, i8* %1, i64 3
  %204 = load i8, i8* %203, align 1
  %205 = insertelement <16 x i8> undef, i8 %204, i32 0
  %206 = shufflevector <16 x i8> %205, <16 x i8> undef, <16 x i32> zeroinitializer
  %207 = bitcast i8* %202 to <16 x i8>*
  store <16 x i8> %206, <16 x i8>* %207, align 16
  %208 = getelementptr inbounds i8, i8* %0, i64 656
  %209 = getelementptr inbounds i8, i8* %1, i64 4
  %210 = load i8, i8* %209, align 1
  %211 = insertelement <16 x i8> undef, i8 %210, i32 0
  %212 = shufflevector <16 x i8> %211, <16 x i8> undef, <16 x i32> zeroinitializer
  %213 = bitcast i8* %208 to <16 x i8>*
  store <16 x i8> %212, <16 x i8>* %213, align 16
  %214 = getelementptr inbounds i8, i8* %0, i64 688
  %215 = getelementptr inbounds i8, i8* %1, i64 5
  %216 = load i8, i8* %215, align 1
  %217 = insertelement <16 x i8> undef, i8 %216, i32 0
  %218 = shufflevector <16 x i8> %217, <16 x i8> undef, <16 x i32> zeroinitializer
  %219 = bitcast i8* %214 to <16 x i8>*
  store <16 x i8> %218, <16 x i8>* %219, align 16
  %220 = getelementptr inbounds i8, i8* %0, i64 720
  %221 = getelementptr inbounds i8, i8* %1, i64 6
  %222 = load i8, i8* %221, align 1
  %223 = insertelement <16 x i8> undef, i8 %222, i32 0
  %224 = shufflevector <16 x i8> %223, <16 x i8> undef, <16 x i32> zeroinitializer
  %225 = bitcast i8* %220 to <16 x i8>*
  store <16 x i8> %224, <16 x i8>* %225, align 16
  %226 = getelementptr inbounds i8, i8* %0, i64 752
  %227 = getelementptr inbounds i8, i8* %1, i64 7
  %228 = load i8, i8* %227, align 1
  %229 = insertelement <16 x i8> undef, i8 %228, i32 0
  %230 = shufflevector <16 x i8> %229, <16 x i8> undef, <16 x i32> zeroinitializer
  %231 = bitcast i8* %226 to <16 x i8>*
  store <16 x i8> %230, <16 x i8>* %231, align 16
  %232 = getelementptr inbounds i8, i8* %0, i64 784
  %233 = getelementptr inbounds i8, i8* %1, i64 8
  %234 = load i8, i8* %233, align 1
  %235 = insertelement <16 x i8> undef, i8 %234, i32 0
  %236 = shufflevector <16 x i8> %235, <16 x i8> undef, <16 x i32> zeroinitializer
  %237 = bitcast i8* %232 to <16 x i8>*
  store <16 x i8> %236, <16 x i8>* %237, align 16
  %238 = getelementptr inbounds i8, i8* %0, i64 816
  %239 = getelementptr inbounds i8, i8* %1, i64 9
  %240 = load i8, i8* %239, align 1
  %241 = insertelement <16 x i8> undef, i8 %240, i32 0
  %242 = shufflevector <16 x i8> %241, <16 x i8> undef, <16 x i32> zeroinitializer
  %243 = bitcast i8* %238 to <16 x i8>*
  store <16 x i8> %242, <16 x i8>* %243, align 16
  %244 = getelementptr inbounds i8, i8* %0, i64 848
  %245 = getelementptr inbounds i8, i8* %1, i64 10
  %246 = load i8, i8* %245, align 1
  %247 = insertelement <16 x i8> undef, i8 %246, i32 0
  %248 = shufflevector <16 x i8> %247, <16 x i8> undef, <16 x i32> zeroinitializer
  %249 = bitcast i8* %244 to <16 x i8>*
  store <16 x i8> %248, <16 x i8>* %249, align 16
  %250 = getelementptr inbounds i8, i8* %0, i64 880
  %251 = getelementptr inbounds i8, i8* %1, i64 11
  %252 = load i8, i8* %251, align 1
  %253 = insertelement <16 x i8> undef, i8 %252, i32 0
  %254 = shufflevector <16 x i8> %253, <16 x i8> undef, <16 x i32> zeroinitializer
  %255 = bitcast i8* %250 to <16 x i8>*
  store <16 x i8> %254, <16 x i8>* %255, align 16
  %256 = getelementptr inbounds i8, i8* %0, i64 912
  %257 = getelementptr inbounds i8, i8* %1, i64 12
  %258 = load i8, i8* %257, align 1
  %259 = insertelement <16 x i8> undef, i8 %258, i32 0
  %260 = shufflevector <16 x i8> %259, <16 x i8> undef, <16 x i32> zeroinitializer
  %261 = bitcast i8* %256 to <16 x i8>*
  store <16 x i8> %260, <16 x i8>* %261, align 16
  %262 = getelementptr inbounds i8, i8* %0, i64 944
  %263 = getelementptr inbounds i8, i8* %1, i64 13
  %264 = load i8, i8* %263, align 1
  %265 = insertelement <16 x i8> undef, i8 %264, i32 0
  %266 = shufflevector <16 x i8> %265, <16 x i8> undef, <16 x i32> zeroinitializer
  %267 = bitcast i8* %262 to <16 x i8>*
  store <16 x i8> %266, <16 x i8>* %267, align 16
  %268 = getelementptr inbounds i8, i8* %0, i64 976
  %269 = getelementptr inbounds i8, i8* %1, i64 14
  %270 = load i8, i8* %269, align 1
  %271 = insertelement <16 x i8> undef, i8 %270, i32 0
  %272 = shufflevector <16 x i8> %271, <16 x i8> undef, <16 x i32> zeroinitializer
  %273 = bitcast i8* %268 to <16 x i8>*
  store <16 x i8> %272, <16 x i8>* %273, align 16
  %274 = getelementptr inbounds i8, i8* %0, i64 1008
  %275 = getelementptr inbounds i8, i8* %1, i64 15
  %276 = load i8, i8* %275, align 1
  %277 = insertelement <16 x i8> undef, i8 %276, i32 0
  %278 = shufflevector <16 x i8> %277, <16 x i8> undef, <16 x i32> zeroinitializer
  %279 = bitcast i8* %274 to <16 x i8>*
  store <16 x i8> %278, <16 x i8>* %279, align 16
  %280 = getelementptr inbounds i8, i8* %0, i64 16
  br i1 %4, label %321, label %281

281:                                              ; preds = %185
  %282 = bitcast i8* %2 to <16 x i8>*
  %283 = load <16 x i8>, <16 x i8>* %282, align 16
  %284 = shufflevector <16 x i8> %283, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %285 = shufflevector <16 x i8> %283, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %286 = getelementptr inbounds i8, i8* %1, i64 -1
  %287 = bitcast <16 x i8> %284 to <8 x i16>
  %288 = bitcast <16 x i8> %285 to <8 x i16>
  br label %289

289:                                              ; preds = %289, %281
  %290 = phi i64 [ 0, %281 ], [ %318, %289 ]
  %291 = phi i8* [ %280, %281 ], [ %319, %289 ]
  %292 = getelementptr inbounds i8, i8* %1, i64 %290
  %293 = load i8, i8* %292, align 1
  %294 = zext i8 %293 to i16
  %295 = load i8, i8* %286, align 1
  %296 = zext i8 %295 to i16
  %297 = sub nsw i16 %294, %296
  %298 = insertelement <8 x i16> undef, i16 %297, i32 0
  %299 = shufflevector <8 x i16> %298, <8 x i16> undef, <8 x i32> zeroinitializer
  %300 = add <8 x i16> %299, %287
  %301 = add <8 x i16> %299, %288
  %302 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %300, <8 x i16> %301) #8
  %303 = bitcast i8* %291 to <16 x i8>*
  store <16 x i8> %302, <16 x i8>* %303, align 16
  %304 = or i64 %290, 1
  %305 = getelementptr inbounds i8, i8* %291, i64 32
  %306 = getelementptr inbounds i8, i8* %1, i64 %304
  %307 = load i8, i8* %306, align 1
  %308 = zext i8 %307 to i16
  %309 = load i8, i8* %286, align 1
  %310 = zext i8 %309 to i16
  %311 = sub nsw i16 %308, %310
  %312 = insertelement <8 x i16> undef, i16 %311, i32 0
  %313 = shufflevector <8 x i16> %312, <8 x i16> undef, <8 x i32> zeroinitializer
  %314 = add <8 x i16> %313, %287
  %315 = add <8 x i16> %313, %288
  %316 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %314, <8 x i16> %315) #8
  %317 = bitcast i8* %305 to <16 x i8>*
  store <16 x i8> %316, <16 x i8>* %317, align 16
  %318 = add nuw nsw i64 %290, 2
  %319 = getelementptr inbounds i8, i8* %291, i64 64
  %320 = icmp eq i64 %318, 16
  br i1 %320, label %500, label %289

321:                                              ; preds = %185
  %322 = load i8, i8* %1, align 1
  %323 = insertelement <16 x i8> undef, i8 %322, i32 0
  %324 = shufflevector <16 x i8> %323, <16 x i8> undef, <16 x i32> zeroinitializer
  %325 = bitcast i8* %280 to <16 x i8>*
  store <16 x i8> %324, <16 x i8>* %325, align 16
  %326 = getelementptr inbounds i8, i8* %0, i64 48
  %327 = load i8, i8* %191, align 1
  %328 = insertelement <16 x i8> undef, i8 %327, i32 0
  %329 = shufflevector <16 x i8> %328, <16 x i8> undef, <16 x i32> zeroinitializer
  %330 = bitcast i8* %326 to <16 x i8>*
  store <16 x i8> %329, <16 x i8>* %330, align 16
  %331 = getelementptr inbounds i8, i8* %0, i64 80
  %332 = load i8, i8* %197, align 1
  %333 = insertelement <16 x i8> undef, i8 %332, i32 0
  %334 = shufflevector <16 x i8> %333, <16 x i8> undef, <16 x i32> zeroinitializer
  %335 = bitcast i8* %331 to <16 x i8>*
  store <16 x i8> %334, <16 x i8>* %335, align 16
  %336 = getelementptr inbounds i8, i8* %0, i64 112
  %337 = load i8, i8* %203, align 1
  %338 = insertelement <16 x i8> undef, i8 %337, i32 0
  %339 = shufflevector <16 x i8> %338, <16 x i8> undef, <16 x i32> zeroinitializer
  %340 = bitcast i8* %336 to <16 x i8>*
  store <16 x i8> %339, <16 x i8>* %340, align 16
  %341 = getelementptr inbounds i8, i8* %0, i64 144
  %342 = load i8, i8* %209, align 1
  %343 = insertelement <16 x i8> undef, i8 %342, i32 0
  %344 = shufflevector <16 x i8> %343, <16 x i8> undef, <16 x i32> zeroinitializer
  %345 = bitcast i8* %341 to <16 x i8>*
  store <16 x i8> %344, <16 x i8>* %345, align 16
  %346 = getelementptr inbounds i8, i8* %0, i64 176
  %347 = load i8, i8* %215, align 1
  %348 = insertelement <16 x i8> undef, i8 %347, i32 0
  %349 = shufflevector <16 x i8> %348, <16 x i8> undef, <16 x i32> zeroinitializer
  %350 = bitcast i8* %346 to <16 x i8>*
  store <16 x i8> %349, <16 x i8>* %350, align 16
  %351 = getelementptr inbounds i8, i8* %0, i64 208
  %352 = load i8, i8* %221, align 1
  %353 = insertelement <16 x i8> undef, i8 %352, i32 0
  %354 = shufflevector <16 x i8> %353, <16 x i8> undef, <16 x i32> zeroinitializer
  %355 = bitcast i8* %351 to <16 x i8>*
  store <16 x i8> %354, <16 x i8>* %355, align 16
  %356 = getelementptr inbounds i8, i8* %0, i64 240
  %357 = load i8, i8* %227, align 1
  %358 = insertelement <16 x i8> undef, i8 %357, i32 0
  %359 = shufflevector <16 x i8> %358, <16 x i8> undef, <16 x i32> zeroinitializer
  %360 = bitcast i8* %356 to <16 x i8>*
  store <16 x i8> %359, <16 x i8>* %360, align 16
  %361 = getelementptr inbounds i8, i8* %0, i64 272
  %362 = load i8, i8* %233, align 1
  %363 = insertelement <16 x i8> undef, i8 %362, i32 0
  %364 = shufflevector <16 x i8> %363, <16 x i8> undef, <16 x i32> zeroinitializer
  %365 = bitcast i8* %361 to <16 x i8>*
  store <16 x i8> %364, <16 x i8>* %365, align 16
  %366 = getelementptr inbounds i8, i8* %0, i64 304
  %367 = load i8, i8* %239, align 1
  %368 = insertelement <16 x i8> undef, i8 %367, i32 0
  %369 = shufflevector <16 x i8> %368, <16 x i8> undef, <16 x i32> zeroinitializer
  %370 = bitcast i8* %366 to <16 x i8>*
  store <16 x i8> %369, <16 x i8>* %370, align 16
  %371 = getelementptr inbounds i8, i8* %0, i64 336
  %372 = load i8, i8* %245, align 1
  %373 = insertelement <16 x i8> undef, i8 %372, i32 0
  %374 = shufflevector <16 x i8> %373, <16 x i8> undef, <16 x i32> zeroinitializer
  %375 = bitcast i8* %371 to <16 x i8>*
  store <16 x i8> %374, <16 x i8>* %375, align 16
  %376 = getelementptr inbounds i8, i8* %0, i64 368
  %377 = load i8, i8* %251, align 1
  %378 = insertelement <16 x i8> undef, i8 %377, i32 0
  %379 = shufflevector <16 x i8> %378, <16 x i8> undef, <16 x i32> zeroinitializer
  %380 = bitcast i8* %376 to <16 x i8>*
  store <16 x i8> %379, <16 x i8>* %380, align 16
  %381 = getelementptr inbounds i8, i8* %0, i64 400
  %382 = load i8, i8* %257, align 1
  %383 = insertelement <16 x i8> undef, i8 %382, i32 0
  %384 = shufflevector <16 x i8> %383, <16 x i8> undef, <16 x i32> zeroinitializer
  %385 = bitcast i8* %381 to <16 x i8>*
  store <16 x i8> %384, <16 x i8>* %385, align 16
  %386 = getelementptr inbounds i8, i8* %0, i64 432
  %387 = load i8, i8* %263, align 1
  %388 = insertelement <16 x i8> undef, i8 %387, i32 0
  %389 = shufflevector <16 x i8> %388, <16 x i8> undef, <16 x i32> zeroinitializer
  %390 = bitcast i8* %386 to <16 x i8>*
  store <16 x i8> %389, <16 x i8>* %390, align 16
  %391 = getelementptr inbounds i8, i8* %0, i64 464
  %392 = load i8, i8* %269, align 1
  %393 = insertelement <16 x i8> undef, i8 %392, i32 0
  %394 = shufflevector <16 x i8> %393, <16 x i8> undef, <16 x i32> zeroinitializer
  %395 = bitcast i8* %391 to <16 x i8>*
  store <16 x i8> %394, <16 x i8>* %395, align 16
  %396 = getelementptr inbounds i8, i8* %0, i64 496
  %397 = load i8, i8* %275, align 1
  %398 = insertelement <16 x i8> undef, i8 %397, i32 0
  %399 = shufflevector <16 x i8> %398, <16 x i8> undef, <16 x i32> zeroinitializer
  %400 = bitcast i8* %396 to <16 x i8>*
  store <16 x i8> %399, <16 x i8>* %400, align 16
  br label %500

401:                                              ; preds = %182
  %402 = bitcast i8* %183 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %402, align 16
  %403 = getelementptr inbounds i8, i8* %0, i64 560
  %404 = bitcast i8* %403 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %404, align 16
  %405 = getelementptr inbounds i8, i8* %0, i64 592
  %406 = bitcast i8* %405 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %406, align 16
  %407 = getelementptr inbounds i8, i8* %0, i64 624
  %408 = bitcast i8* %407 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %408, align 16
  %409 = getelementptr inbounds i8, i8* %0, i64 656
  %410 = bitcast i8* %409 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %410, align 16
  %411 = getelementptr inbounds i8, i8* %0, i64 688
  %412 = bitcast i8* %411 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %412, align 16
  %413 = getelementptr inbounds i8, i8* %0, i64 720
  %414 = bitcast i8* %413 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %414, align 16
  %415 = getelementptr inbounds i8, i8* %0, i64 752
  %416 = bitcast i8* %415 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %416, align 16
  %417 = getelementptr inbounds i8, i8* %0, i64 784
  %418 = bitcast i8* %417 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %418, align 16
  %419 = getelementptr inbounds i8, i8* %0, i64 816
  %420 = bitcast i8* %419 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %420, align 16
  %421 = getelementptr inbounds i8, i8* %0, i64 848
  %422 = bitcast i8* %421 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %422, align 16
  %423 = getelementptr inbounds i8, i8* %0, i64 880
  %424 = bitcast i8* %423 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %424, align 16
  %425 = getelementptr inbounds i8, i8* %0, i64 912
  %426 = bitcast i8* %425 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %426, align 16
  %427 = getelementptr inbounds i8, i8* %0, i64 944
  %428 = bitcast i8* %427 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %428, align 16
  %429 = getelementptr inbounds i8, i8* %0, i64 976
  %430 = bitcast i8* %429 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %430, align 16
  %431 = getelementptr inbounds i8, i8* %0, i64 1008
  %432 = bitcast i8* %431 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %432, align 16
  %433 = getelementptr inbounds i8, i8* %0, i64 16
  br i1 %4, label %468, label %434

434:                                              ; preds = %401
  %435 = bitcast i8* %2 to <2 x i64>*
  %436 = load <2 x i64>, <2 x i64>* %435, align 16
  %437 = bitcast i8* %433 to <2 x i64>*
  store <2 x i64> %436, <2 x i64>* %437, align 16
  %438 = getelementptr inbounds i8, i8* %0, i64 48
  %439 = bitcast i8* %438 to <2 x i64>*
  store <2 x i64> %436, <2 x i64>* %439, align 16
  %440 = getelementptr inbounds i8, i8* %0, i64 80
  %441 = bitcast i8* %440 to <2 x i64>*
  store <2 x i64> %436, <2 x i64>* %441, align 16
  %442 = getelementptr inbounds i8, i8* %0, i64 112
  %443 = bitcast i8* %442 to <2 x i64>*
  store <2 x i64> %436, <2 x i64>* %443, align 16
  %444 = getelementptr inbounds i8, i8* %0, i64 144
  %445 = bitcast i8* %444 to <2 x i64>*
  store <2 x i64> %436, <2 x i64>* %445, align 16
  %446 = getelementptr inbounds i8, i8* %0, i64 176
  %447 = bitcast i8* %446 to <2 x i64>*
  store <2 x i64> %436, <2 x i64>* %447, align 16
  %448 = getelementptr inbounds i8, i8* %0, i64 208
  %449 = bitcast i8* %448 to <2 x i64>*
  store <2 x i64> %436, <2 x i64>* %449, align 16
  %450 = getelementptr inbounds i8, i8* %0, i64 240
  %451 = bitcast i8* %450 to <2 x i64>*
  store <2 x i64> %436, <2 x i64>* %451, align 16
  %452 = getelementptr inbounds i8, i8* %0, i64 272
  %453 = bitcast i8* %452 to <2 x i64>*
  store <2 x i64> %436, <2 x i64>* %453, align 16
  %454 = getelementptr inbounds i8, i8* %0, i64 304
  %455 = bitcast i8* %454 to <2 x i64>*
  store <2 x i64> %436, <2 x i64>* %455, align 16
  %456 = getelementptr inbounds i8, i8* %0, i64 336
  %457 = bitcast i8* %456 to <2 x i64>*
  store <2 x i64> %436, <2 x i64>* %457, align 16
  %458 = getelementptr inbounds i8, i8* %0, i64 368
  %459 = bitcast i8* %458 to <2 x i64>*
  store <2 x i64> %436, <2 x i64>* %459, align 16
  %460 = getelementptr inbounds i8, i8* %0, i64 400
  %461 = bitcast i8* %460 to <2 x i64>*
  store <2 x i64> %436, <2 x i64>* %461, align 16
  %462 = getelementptr inbounds i8, i8* %0, i64 432
  %463 = bitcast i8* %462 to <2 x i64>*
  store <2 x i64> %436, <2 x i64>* %463, align 16
  %464 = getelementptr inbounds i8, i8* %0, i64 464
  %465 = bitcast i8* %464 to <2 x i64>*
  store <2 x i64> %436, <2 x i64>* %465, align 16
  %466 = getelementptr inbounds i8, i8* %0, i64 496
  %467 = bitcast i8* %466 to <2 x i64>*
  store <2 x i64> %436, <2 x i64>* %467, align 16
  br label %500

468:                                              ; preds = %401
  %469 = bitcast i8* %433 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %469, align 16
  %470 = getelementptr inbounds i8, i8* %0, i64 48
  %471 = bitcast i8* %470 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %471, align 16
  %472 = getelementptr inbounds i8, i8* %0, i64 80
  %473 = bitcast i8* %472 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %473, align 16
  %474 = getelementptr inbounds i8, i8* %0, i64 112
  %475 = bitcast i8* %474 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %475, align 16
  %476 = getelementptr inbounds i8, i8* %0, i64 144
  %477 = bitcast i8* %476 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %477, align 16
  %478 = getelementptr inbounds i8, i8* %0, i64 176
  %479 = bitcast i8* %478 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %479, align 16
  %480 = getelementptr inbounds i8, i8* %0, i64 208
  %481 = bitcast i8* %480 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %481, align 16
  %482 = getelementptr inbounds i8, i8* %0, i64 240
  %483 = bitcast i8* %482 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %483, align 16
  %484 = getelementptr inbounds i8, i8* %0, i64 272
  %485 = bitcast i8* %484 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %485, align 16
  %486 = getelementptr inbounds i8, i8* %0, i64 304
  %487 = bitcast i8* %486 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %487, align 16
  %488 = getelementptr inbounds i8, i8* %0, i64 336
  %489 = bitcast i8* %488 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %489, align 16
  %490 = getelementptr inbounds i8, i8* %0, i64 368
  %491 = bitcast i8* %490 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %491, align 16
  %492 = getelementptr inbounds i8, i8* %0, i64 400
  %493 = bitcast i8* %492 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %493, align 16
  %494 = getelementptr inbounds i8, i8* %0, i64 432
  %495 = bitcast i8* %494 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %495, align 16
  %496 = getelementptr inbounds i8, i8* %0, i64 464
  %497 = bitcast i8* %496 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %497, align 16
  %498 = getelementptr inbounds i8, i8* %0, i64 496
  %499 = bitcast i8* %498 to <16 x i8>*
  store <16 x i8> <i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127, i8 -127>, <16 x i8>* %499, align 16
  br label %500

500:                                              ; preds = %289, %321, %434, %468
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @IntraChromaPreds_SSE2(i8*, i8* readonly, i8* readonly) #2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 1024
  %5 = icmp eq i8* %2, null
  %6 = icmp ne i8* %1, null
  br i1 %5, label %25, label %7

7:                                                ; preds = %3
  %8 = bitcast i8* %2 to i64*
  %9 = load i64, i64* %8, align 1
  br i1 %6, label %10, label %20

10:                                               ; preds = %7
  %11 = insertelement <2 x i64> undef, i64 %9, i32 0
  %12 = bitcast i8* %1 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = insertelement <2 x i64> %11, i64 %13, i32 1
  %15 = bitcast <2 x i64> %14 to <16 x i8>
  %16 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %15, <16 x i8> zeroinitializer) #8
  %17 = bitcast <2 x i64> %16 to <4 x i32>
  %18 = shufflevector <4 x i32> %17, <4 x i32> undef, <4 x i32> <i32 2, i32 undef, i32 undef, i32 undef>
  %19 = add <4 x i32> %18, %17
  br label %41

20:                                               ; preds = %7
  %21 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %9, i32 0
  %22 = bitcast <2 x i64> %21 to <16 x i8>
  %23 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %22, <16 x i8> zeroinitializer) #8
  %24 = bitcast <2 x i64> %23 to <4 x i32>
  br label %41

25:                                               ; preds = %3
  br i1 %6, label %26, label %69

26:                                               ; preds = %25
  %27 = bitcast i8* %1 to i64*
  %28 = load i64, i64* %27, align 1
  %29 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %28, i32 0
  %30 = bitcast <2 x i64> %29 to <16 x i8>
  %31 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %30, <16 x i8> zeroinitializer) #8
  %32 = bitcast <2 x i64> %31 to <4 x i32>
  %33 = extractelement <4 x i32> %32, i32 0
  %34 = add nsw i32 %33, 4
  %35 = lshr i32 %34, 3
  %36 = trunc i32 %35 to i8
  %37 = insertelement <16 x i8> undef, i8 %36, i32 0
  %38 = shufflevector <16 x i8> %37, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %39 = bitcast <16 x i8> %38 to <2 x i64>
  %40 = extractelement <2 x i64> %39, i32 0
  br label %69

41:                                               ; preds = %20, %10
  %42 = phi <4 x i32> [ %24, %20 ], [ %19, %10 ]
  %43 = phi i32 [ 4, %20 ], [ 8, %10 ]
  %44 = phi i32 [ 3, %20 ], [ 4, %10 ]
  %45 = extractelement <4 x i32> %42, i32 0
  %46 = add nsw i32 %45, %43
  %47 = lshr i32 %46, %44
  %48 = trunc i32 %47 to i8
  %49 = insertelement <16 x i8> undef, i8 %48, i32 0
  %50 = shufflevector <16 x i8> %49, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %51 = bitcast <16 x i8> %50 to <2 x i64>
  %52 = extractelement <2 x i64> %51, i32 0
  %53 = bitcast i8* %4 to i64*
  store i64 %52, i64* %53, align 1
  %54 = getelementptr inbounds i8, i8* %0, i64 1056
  %55 = bitcast i8* %54 to i64*
  store i64 %52, i64* %55, align 1
  %56 = getelementptr inbounds i8, i8* %0, i64 1088
  %57 = bitcast i8* %56 to i64*
  store i64 %52, i64* %57, align 1
  %58 = getelementptr inbounds i8, i8* %0, i64 1120
  %59 = bitcast i8* %58 to i64*
  store i64 %52, i64* %59, align 1
  %60 = getelementptr inbounds i8, i8* %0, i64 1152
  %61 = bitcast i8* %60 to i64*
  store i64 %52, i64* %61, align 1
  %62 = getelementptr inbounds i8, i8* %0, i64 1184
  %63 = bitcast i8* %62 to i64*
  store i64 %52, i64* %63, align 1
  %64 = getelementptr inbounds i8, i8* %0, i64 1216
  %65 = bitcast i8* %64 to i64*
  store i64 %52, i64* %65, align 1
  %66 = getelementptr inbounds i8, i8* %0, i64 1248
  %67 = bitcast i8* %66 to i64*
  store i64 %52, i64* %67, align 1
  %68 = load i64, i64* %8, align 1
  br label %86

69:                                               ; preds = %25, %26
  %70 = phi i64 [ %40, %26 ], [ -9187201950435737472, %25 ]
  %71 = bitcast i8* %4 to i64*
  store i64 %70, i64* %71, align 1
  %72 = getelementptr inbounds i8, i8* %0, i64 1056
  %73 = bitcast i8* %72 to i64*
  store i64 %70, i64* %73, align 1
  %74 = getelementptr inbounds i8, i8* %0, i64 1088
  %75 = bitcast i8* %74 to i64*
  store i64 %70, i64* %75, align 1
  %76 = getelementptr inbounds i8, i8* %0, i64 1120
  %77 = bitcast i8* %76 to i64*
  store i64 %70, i64* %77, align 1
  %78 = getelementptr inbounds i8, i8* %0, i64 1152
  %79 = bitcast i8* %78 to i64*
  store i64 %70, i64* %79, align 1
  %80 = getelementptr inbounds i8, i8* %0, i64 1184
  %81 = bitcast i8* %80 to i64*
  store i64 %70, i64* %81, align 1
  %82 = getelementptr inbounds i8, i8* %0, i64 1216
  %83 = bitcast i8* %82 to i64*
  store i64 %70, i64* %83, align 1
  %84 = getelementptr inbounds i8, i8* %0, i64 1248
  %85 = bitcast i8* %84 to i64*
  store i64 %70, i64* %85, align 1
  br label %86

86:                                               ; preds = %41, %69
  %87 = phi i64 [ %68, %41 ], [ 9187201950435737471, %69 ]
  %88 = getelementptr inbounds i8, i8* %0, i64 1280
  %89 = bitcast i8* %88 to i64*
  store i64 %87, i64* %89, align 1
  %90 = getelementptr inbounds i8, i8* %0, i64 1312
  %91 = bitcast i8* %90 to i64*
  store i64 %87, i64* %91, align 1
  %92 = getelementptr inbounds i8, i8* %0, i64 1344
  %93 = bitcast i8* %92 to i64*
  store i64 %87, i64* %93, align 1
  %94 = getelementptr inbounds i8, i8* %0, i64 1376
  %95 = bitcast i8* %94 to i64*
  store i64 %87, i64* %95, align 1
  %96 = getelementptr inbounds i8, i8* %0, i64 1408
  %97 = bitcast i8* %96 to i64*
  store i64 %87, i64* %97, align 1
  %98 = getelementptr inbounds i8, i8* %0, i64 1440
  %99 = bitcast i8* %98 to i64*
  store i64 %87, i64* %99, align 1
  %100 = getelementptr inbounds i8, i8* %0, i64 1472
  %101 = bitcast i8* %100 to i64*
  store i64 %87, i64* %101, align 1
  %102 = getelementptr inbounds i8, i8* %0, i64 1504
  %103 = bitcast i8* %102 to i64*
  store i64 %87, i64* %103, align 1
  %104 = getelementptr inbounds i8, i8* %0, i64 1296
  %105 = icmp eq i8* %1, null
  br i1 %105, label %333, label %106

106:                                              ; preds = %86
  %107 = load i8, i8* %1, align 1
  %108 = insertelement <16 x i8> undef, i8 %107, i32 0
  %109 = shufflevector <16 x i8> %108, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %110 = bitcast <16 x i8> %109 to <2 x i64>
  %111 = extractelement <2 x i64> %110, i32 0
  %112 = bitcast i8* %104 to i64*
  store i64 %111, i64* %112, align 1
  %113 = getelementptr inbounds i8, i8* %0, i64 1328
  %114 = getelementptr inbounds i8, i8* %1, i64 1
  %115 = load i8, i8* %114, align 1
  %116 = insertelement <16 x i8> undef, i8 %115, i32 0
  %117 = shufflevector <16 x i8> %116, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %118 = bitcast <16 x i8> %117 to <2 x i64>
  %119 = extractelement <2 x i64> %118, i32 0
  %120 = bitcast i8* %113 to i64*
  store i64 %119, i64* %120, align 1
  %121 = getelementptr inbounds i8, i8* %0, i64 1360
  %122 = getelementptr inbounds i8, i8* %1, i64 2
  %123 = load i8, i8* %122, align 1
  %124 = insertelement <16 x i8> undef, i8 %123, i32 0
  %125 = shufflevector <16 x i8> %124, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %126 = bitcast <16 x i8> %125 to <2 x i64>
  %127 = extractelement <2 x i64> %126, i32 0
  %128 = bitcast i8* %121 to i64*
  store i64 %127, i64* %128, align 1
  %129 = getelementptr inbounds i8, i8* %0, i64 1392
  %130 = getelementptr inbounds i8, i8* %1, i64 3
  %131 = load i8, i8* %130, align 1
  %132 = insertelement <16 x i8> undef, i8 %131, i32 0
  %133 = shufflevector <16 x i8> %132, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %134 = bitcast <16 x i8> %133 to <2 x i64>
  %135 = extractelement <2 x i64> %134, i32 0
  %136 = bitcast i8* %129 to i64*
  store i64 %135, i64* %136, align 1
  %137 = getelementptr inbounds i8, i8* %0, i64 1424
  %138 = getelementptr inbounds i8, i8* %1, i64 4
  %139 = load i8, i8* %138, align 1
  %140 = insertelement <16 x i8> undef, i8 %139, i32 0
  %141 = shufflevector <16 x i8> %140, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %142 = bitcast <16 x i8> %141 to <2 x i64>
  %143 = extractelement <2 x i64> %142, i32 0
  %144 = bitcast i8* %137 to i64*
  store i64 %143, i64* %144, align 1
  %145 = getelementptr inbounds i8, i8* %0, i64 1456
  %146 = getelementptr inbounds i8, i8* %1, i64 5
  %147 = load i8, i8* %146, align 1
  %148 = insertelement <16 x i8> undef, i8 %147, i32 0
  %149 = shufflevector <16 x i8> %148, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %150 = bitcast <16 x i8> %149 to <2 x i64>
  %151 = extractelement <2 x i64> %150, i32 0
  %152 = bitcast i8* %145 to i64*
  store i64 %151, i64* %152, align 1
  %153 = getelementptr inbounds i8, i8* %0, i64 1488
  %154 = getelementptr inbounds i8, i8* %1, i64 6
  %155 = load i8, i8* %154, align 1
  %156 = insertelement <16 x i8> undef, i8 %155, i32 0
  %157 = shufflevector <16 x i8> %156, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %158 = bitcast <16 x i8> %157 to <2 x i64>
  %159 = extractelement <2 x i64> %158, i32 0
  %160 = bitcast i8* %153 to i64*
  store i64 %159, i64* %160, align 1
  %161 = getelementptr inbounds i8, i8* %0, i64 1520
  %162 = getelementptr inbounds i8, i8* %1, i64 7
  %163 = load i8, i8* %162, align 1
  %164 = insertelement <16 x i8> undef, i8 %163, i32 0
  %165 = shufflevector <16 x i8> %164, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %166 = bitcast <16 x i8> %165 to <2 x i64>
  %167 = extractelement <2 x i64> %166, i32 0
  %168 = bitcast i8* %161 to i64*
  store i64 %167, i64* %168, align 1
  %169 = getelementptr inbounds i8, i8* %0, i64 1040
  br i1 %5, label %279, label %170

170:                                              ; preds = %106
  %171 = bitcast i8* %2 to i64*
  %172 = load i64, i64* %171, align 1
  %173 = insertelement <2 x i64> undef, i64 %172, i32 0
  %174 = bitcast <2 x i64> %173 to <16 x i8>
  %175 = shufflevector <16 x i8> %174, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %176 = getelementptr inbounds i8, i8* %1, i64 -1
  %177 = bitcast <16 x i8> %175 to <8 x i16>
  %178 = load i8, i8* %1, align 1
  %179 = zext i8 %178 to i16
  %180 = load i8, i8* %176, align 1
  %181 = zext i8 %180 to i16
  %182 = sub nsw i16 %179, %181
  %183 = insertelement <8 x i16> undef, i16 %182, i32 0
  %184 = shufflevector <8 x i16> %183, <8 x i16> undef, <8 x i32> zeroinitializer
  %185 = add <8 x i16> %184, %177
  %186 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %185, <8 x i16> undef) #8
  %187 = bitcast <16 x i8> %186 to <2 x i64>
  %188 = extractelement <2 x i64> %187, i32 0
  %189 = bitcast i8* %169 to i64*
  store i64 %188, i64* %189, align 1
  %190 = getelementptr inbounds i8, i8* %0, i64 1072
  %191 = load i8, i8* %114, align 1
  %192 = zext i8 %191 to i16
  %193 = load i8, i8* %176, align 1
  %194 = zext i8 %193 to i16
  %195 = sub nsw i16 %192, %194
  %196 = insertelement <8 x i16> undef, i16 %195, i32 0
  %197 = shufflevector <8 x i16> %196, <8 x i16> undef, <8 x i32> zeroinitializer
  %198 = add <8 x i16> %197, %177
  %199 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %198, <8 x i16> undef) #8
  %200 = bitcast <16 x i8> %199 to <2 x i64>
  %201 = extractelement <2 x i64> %200, i32 0
  %202 = bitcast i8* %190 to i64*
  store i64 %201, i64* %202, align 1
  %203 = getelementptr inbounds i8, i8* %0, i64 1104
  %204 = load i8, i8* %122, align 1
  %205 = zext i8 %204 to i16
  %206 = load i8, i8* %176, align 1
  %207 = zext i8 %206 to i16
  %208 = sub nsw i16 %205, %207
  %209 = insertelement <8 x i16> undef, i16 %208, i32 0
  %210 = shufflevector <8 x i16> %209, <8 x i16> undef, <8 x i32> zeroinitializer
  %211 = add <8 x i16> %210, %177
  %212 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %211, <8 x i16> undef) #8
  %213 = bitcast <16 x i8> %212 to <2 x i64>
  %214 = extractelement <2 x i64> %213, i32 0
  %215 = bitcast i8* %203 to i64*
  store i64 %214, i64* %215, align 1
  %216 = getelementptr inbounds i8, i8* %0, i64 1136
  %217 = load i8, i8* %130, align 1
  %218 = zext i8 %217 to i16
  %219 = load i8, i8* %176, align 1
  %220 = zext i8 %219 to i16
  %221 = sub nsw i16 %218, %220
  %222 = insertelement <8 x i16> undef, i16 %221, i32 0
  %223 = shufflevector <8 x i16> %222, <8 x i16> undef, <8 x i32> zeroinitializer
  %224 = add <8 x i16> %223, %177
  %225 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %224, <8 x i16> undef) #8
  %226 = bitcast <16 x i8> %225 to <2 x i64>
  %227 = extractelement <2 x i64> %226, i32 0
  %228 = bitcast i8* %216 to i64*
  store i64 %227, i64* %228, align 1
  %229 = getelementptr inbounds i8, i8* %0, i64 1168
  %230 = load i8, i8* %138, align 1
  %231 = zext i8 %230 to i16
  %232 = load i8, i8* %176, align 1
  %233 = zext i8 %232 to i16
  %234 = sub nsw i16 %231, %233
  %235 = insertelement <8 x i16> undef, i16 %234, i32 0
  %236 = shufflevector <8 x i16> %235, <8 x i16> undef, <8 x i32> zeroinitializer
  %237 = add <8 x i16> %236, %177
  %238 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %237, <8 x i16> undef) #8
  %239 = bitcast <16 x i8> %238 to <2 x i64>
  %240 = extractelement <2 x i64> %239, i32 0
  %241 = bitcast i8* %229 to i64*
  store i64 %240, i64* %241, align 1
  %242 = getelementptr inbounds i8, i8* %0, i64 1200
  %243 = load i8, i8* %146, align 1
  %244 = zext i8 %243 to i16
  %245 = load i8, i8* %176, align 1
  %246 = zext i8 %245 to i16
  %247 = sub nsw i16 %244, %246
  %248 = insertelement <8 x i16> undef, i16 %247, i32 0
  %249 = shufflevector <8 x i16> %248, <8 x i16> undef, <8 x i32> zeroinitializer
  %250 = add <8 x i16> %249, %177
  %251 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %250, <8 x i16> undef) #8
  %252 = bitcast <16 x i8> %251 to <2 x i64>
  %253 = extractelement <2 x i64> %252, i32 0
  %254 = bitcast i8* %242 to i64*
  store i64 %253, i64* %254, align 1
  %255 = getelementptr inbounds i8, i8* %0, i64 1232
  %256 = load i8, i8* %154, align 1
  %257 = zext i8 %256 to i16
  %258 = load i8, i8* %176, align 1
  %259 = zext i8 %258 to i16
  %260 = sub nsw i16 %257, %259
  %261 = insertelement <8 x i16> undef, i16 %260, i32 0
  %262 = shufflevector <8 x i16> %261, <8 x i16> undef, <8 x i32> zeroinitializer
  %263 = add <8 x i16> %262, %177
  %264 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %263, <8 x i16> undef) #8
  %265 = bitcast <16 x i8> %264 to <2 x i64>
  %266 = extractelement <2 x i64> %265, i32 0
  %267 = bitcast i8* %255 to i64*
  store i64 %266, i64* %267, align 1
  %268 = load i8, i8* %162, align 1
  %269 = zext i8 %268 to i16
  %270 = load i8, i8* %176, align 1
  %271 = zext i8 %270 to i16
  %272 = sub nsw i16 %269, %271
  %273 = insertelement <8 x i16> undef, i16 %272, i32 0
  %274 = shufflevector <8 x i16> %273, <8 x i16> undef, <8 x i32> zeroinitializer
  %275 = add <8 x i16> %274, %177
  %276 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %275, <8 x i16> undef) #8
  %277 = bitcast <16 x i8> %276 to <2 x i64>
  %278 = extractelement <2 x i64> %277, i32 0
  br label %380

279:                                              ; preds = %106
  %280 = load i8, i8* %1, align 1
  %281 = insertelement <16 x i8> undef, i8 %280, i32 0
  %282 = shufflevector <16 x i8> %281, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %283 = bitcast <16 x i8> %282 to <2 x i64>
  %284 = extractelement <2 x i64> %283, i32 0
  %285 = bitcast i8* %169 to i64*
  store i64 %284, i64* %285, align 1
  %286 = getelementptr inbounds i8, i8* %0, i64 1072
  %287 = load i8, i8* %114, align 1
  %288 = insertelement <16 x i8> undef, i8 %287, i32 0
  %289 = shufflevector <16 x i8> %288, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %290 = bitcast <16 x i8> %289 to <2 x i64>
  %291 = extractelement <2 x i64> %290, i32 0
  %292 = bitcast i8* %286 to i64*
  store i64 %291, i64* %292, align 1
  %293 = getelementptr inbounds i8, i8* %0, i64 1104
  %294 = load i8, i8* %122, align 1
  %295 = insertelement <16 x i8> undef, i8 %294, i32 0
  %296 = shufflevector <16 x i8> %295, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %297 = bitcast <16 x i8> %296 to <2 x i64>
  %298 = extractelement <2 x i64> %297, i32 0
  %299 = bitcast i8* %293 to i64*
  store i64 %298, i64* %299, align 1
  %300 = getelementptr inbounds i8, i8* %0, i64 1136
  %301 = load i8, i8* %130, align 1
  %302 = insertelement <16 x i8> undef, i8 %301, i32 0
  %303 = shufflevector <16 x i8> %302, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %304 = bitcast <16 x i8> %303 to <2 x i64>
  %305 = extractelement <2 x i64> %304, i32 0
  %306 = bitcast i8* %300 to i64*
  store i64 %305, i64* %306, align 1
  %307 = getelementptr inbounds i8, i8* %0, i64 1168
  %308 = load i8, i8* %138, align 1
  %309 = insertelement <16 x i8> undef, i8 %308, i32 0
  %310 = shufflevector <16 x i8> %309, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %311 = bitcast <16 x i8> %310 to <2 x i64>
  %312 = extractelement <2 x i64> %311, i32 0
  %313 = bitcast i8* %307 to i64*
  store i64 %312, i64* %313, align 1
  %314 = getelementptr inbounds i8, i8* %0, i64 1200
  %315 = load i8, i8* %146, align 1
  %316 = insertelement <16 x i8> undef, i8 %315, i32 0
  %317 = shufflevector <16 x i8> %316, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %318 = bitcast <16 x i8> %317 to <2 x i64>
  %319 = extractelement <2 x i64> %318, i32 0
  %320 = bitcast i8* %314 to i64*
  store i64 %319, i64* %320, align 1
  %321 = getelementptr inbounds i8, i8* %0, i64 1232
  %322 = load i8, i8* %154, align 1
  %323 = insertelement <16 x i8> undef, i8 %322, i32 0
  %324 = shufflevector <16 x i8> %323, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %325 = bitcast <16 x i8> %324 to <2 x i64>
  %326 = extractelement <2 x i64> %325, i32 0
  %327 = bitcast i8* %321 to i64*
  store i64 %326, i64* %327, align 1
  %328 = load i8, i8* %162, align 1
  %329 = insertelement <16 x i8> undef, i8 %328, i32 0
  %330 = shufflevector <16 x i8> %329, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %331 = bitcast <16 x i8> %330 to <2 x i64>
  %332 = extractelement <2 x i64> %331, i32 0
  br label %380

333:                                              ; preds = %86
  %334 = bitcast i8* %104 to i64*
  store i64 -9114861777597660799, i64* %334, align 1
  %335 = getelementptr inbounds i8, i8* %0, i64 1328
  %336 = bitcast i8* %335 to i64*
  store i64 -9114861777597660799, i64* %336, align 1
  %337 = getelementptr inbounds i8, i8* %0, i64 1360
  %338 = bitcast i8* %337 to i64*
  store i64 -9114861777597660799, i64* %338, align 1
  %339 = getelementptr inbounds i8, i8* %0, i64 1392
  %340 = bitcast i8* %339 to i64*
  store i64 -9114861777597660799, i64* %340, align 1
  %341 = getelementptr inbounds i8, i8* %0, i64 1424
  %342 = bitcast i8* %341 to i64*
  store i64 -9114861777597660799, i64* %342, align 1
  %343 = getelementptr inbounds i8, i8* %0, i64 1456
  %344 = bitcast i8* %343 to i64*
  store i64 -9114861777597660799, i64* %344, align 1
  %345 = getelementptr inbounds i8, i8* %0, i64 1488
  %346 = bitcast i8* %345 to i64*
  store i64 -9114861777597660799, i64* %346, align 1
  %347 = getelementptr inbounds i8, i8* %0, i64 1520
  %348 = bitcast i8* %347 to i64*
  store i64 -9114861777597660799, i64* %348, align 1
  %349 = getelementptr inbounds i8, i8* %0, i64 1040
  br i1 %5, label %366, label %350

350:                                              ; preds = %333
  %351 = bitcast i8* %2 to i64*
  %352 = load i64, i64* %351, align 1
  %353 = bitcast i8* %349 to i64*
  store i64 %352, i64* %353, align 1
  %354 = getelementptr inbounds i8, i8* %0, i64 1072
  %355 = bitcast i8* %354 to i64*
  store i64 %352, i64* %355, align 1
  %356 = getelementptr inbounds i8, i8* %0, i64 1104
  %357 = bitcast i8* %356 to i64*
  store i64 %352, i64* %357, align 1
  %358 = getelementptr inbounds i8, i8* %0, i64 1136
  %359 = bitcast i8* %358 to i64*
  store i64 %352, i64* %359, align 1
  %360 = getelementptr inbounds i8, i8* %0, i64 1168
  %361 = bitcast i8* %360 to i64*
  store i64 %352, i64* %361, align 1
  %362 = getelementptr inbounds i8, i8* %0, i64 1200
  %363 = bitcast i8* %362 to i64*
  store i64 %352, i64* %363, align 1
  %364 = getelementptr inbounds i8, i8* %0, i64 1232
  %365 = bitcast i8* %364 to i64*
  store i64 %352, i64* %365, align 1
  br label %380

366:                                              ; preds = %333
  %367 = bitcast i8* %349 to i64*
  store i64 -9114861777597660799, i64* %367, align 1
  %368 = getelementptr inbounds i8, i8* %0, i64 1072
  %369 = bitcast i8* %368 to i64*
  store i64 -9114861777597660799, i64* %369, align 1
  %370 = getelementptr inbounds i8, i8* %0, i64 1104
  %371 = bitcast i8* %370 to i64*
  store i64 -9114861777597660799, i64* %371, align 1
  %372 = getelementptr inbounds i8, i8* %0, i64 1136
  %373 = bitcast i8* %372 to i64*
  store i64 -9114861777597660799, i64* %373, align 1
  %374 = getelementptr inbounds i8, i8* %0, i64 1168
  %375 = bitcast i8* %374 to i64*
  store i64 -9114861777597660799, i64* %375, align 1
  %376 = getelementptr inbounds i8, i8* %0, i64 1200
  %377 = bitcast i8* %376 to i64*
  store i64 -9114861777597660799, i64* %377, align 1
  %378 = getelementptr inbounds i8, i8* %0, i64 1232
  %379 = bitcast i8* %378 to i64*
  store i64 -9114861777597660799, i64* %379, align 1
  br label %380

380:                                              ; preds = %170, %279, %350, %366
  %381 = phi i64 [ %278, %170 ], [ %332, %279 ], [ %352, %350 ], [ -9114861777597660799, %366 ]
  %382 = getelementptr inbounds i8, i8* %0, i64 1264
  %383 = bitcast i8* %382 to i64*
  store i64 %381, i64* %383, align 1
  %384 = getelementptr inbounds i8, i8* %2, i64 8
  %385 = select i1 %5, i8* null, i8* %384
  %386 = getelementptr inbounds i8, i8* %1, i64 16
  %387 = select i1 %105, i8* null, i8* %386
  %388 = getelementptr inbounds i8, i8* %0, i64 1032
  %389 = icmp eq i8* %385, null
  %390 = icmp ne i8* %387, null
  br i1 %389, label %409, label %391

391:                                              ; preds = %380
  %392 = bitcast i8* %385 to i64*
  %393 = load i64, i64* %392, align 1
  br i1 %390, label %394, label %404

394:                                              ; preds = %391
  %395 = insertelement <2 x i64> undef, i64 %393, i32 0
  %396 = bitcast i8* %387 to i64*
  %397 = load i64, i64* %396, align 1
  %398 = insertelement <2 x i64> %395, i64 %397, i32 1
  %399 = bitcast <2 x i64> %398 to <16 x i8>
  %400 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %399, <16 x i8> zeroinitializer) #8
  %401 = bitcast <2 x i64> %400 to <4 x i32>
  %402 = shufflevector <4 x i32> %401, <4 x i32> undef, <4 x i32> <i32 2, i32 undef, i32 undef, i32 undef>
  %403 = add <4 x i32> %402, %401
  br label %425

404:                                              ; preds = %391
  %405 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %393, i32 0
  %406 = bitcast <2 x i64> %405 to <16 x i8>
  %407 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %406, <16 x i8> zeroinitializer) #8
  %408 = bitcast <2 x i64> %407 to <4 x i32>
  br label %425

409:                                              ; preds = %380
  br i1 %390, label %410, label %453

410:                                              ; preds = %409
  %411 = bitcast i8* %387 to i64*
  %412 = load i64, i64* %411, align 1
  %413 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %412, i32 0
  %414 = bitcast <2 x i64> %413 to <16 x i8>
  %415 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %414, <16 x i8> zeroinitializer) #8
  %416 = bitcast <2 x i64> %415 to <4 x i32>
  %417 = extractelement <4 x i32> %416, i32 0
  %418 = add nsw i32 %417, 4
  %419 = lshr i32 %418, 3
  %420 = trunc i32 %419 to i8
  %421 = insertelement <16 x i8> undef, i8 %420, i32 0
  %422 = shufflevector <16 x i8> %421, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %423 = bitcast <16 x i8> %422 to <2 x i64>
  %424 = extractelement <2 x i64> %423, i32 0
  br label %453

425:                                              ; preds = %404, %394
  %426 = phi <4 x i32> [ %408, %404 ], [ %403, %394 ]
  %427 = phi i32 [ 4, %404 ], [ 8, %394 ]
  %428 = phi i32 [ 3, %404 ], [ 4, %394 ]
  %429 = extractelement <4 x i32> %426, i32 0
  %430 = add nsw i32 %429, %427
  %431 = lshr i32 %430, %428
  %432 = trunc i32 %431 to i8
  %433 = insertelement <16 x i8> undef, i8 %432, i32 0
  %434 = shufflevector <16 x i8> %433, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %435 = bitcast <16 x i8> %434 to <2 x i64>
  %436 = extractelement <2 x i64> %435, i32 0
  %437 = bitcast i8* %388 to i64*
  store i64 %436, i64* %437, align 1
  %438 = getelementptr inbounds i8, i8* %0, i64 1064
  %439 = bitcast i8* %438 to i64*
  store i64 %436, i64* %439, align 1
  %440 = getelementptr inbounds i8, i8* %0, i64 1096
  %441 = bitcast i8* %440 to i64*
  store i64 %436, i64* %441, align 1
  %442 = getelementptr inbounds i8, i8* %0, i64 1128
  %443 = bitcast i8* %442 to i64*
  store i64 %436, i64* %443, align 1
  %444 = getelementptr inbounds i8, i8* %0, i64 1160
  %445 = bitcast i8* %444 to i64*
  store i64 %436, i64* %445, align 1
  %446 = getelementptr inbounds i8, i8* %0, i64 1192
  %447 = bitcast i8* %446 to i64*
  store i64 %436, i64* %447, align 1
  %448 = getelementptr inbounds i8, i8* %0, i64 1224
  %449 = bitcast i8* %448 to i64*
  store i64 %436, i64* %449, align 1
  %450 = getelementptr inbounds i8, i8* %0, i64 1256
  %451 = bitcast i8* %450 to i64*
  store i64 %436, i64* %451, align 1
  %452 = load i64, i64* %392, align 1
  br label %470

453:                                              ; preds = %409, %410
  %454 = phi i64 [ %424, %410 ], [ -9187201950435737472, %409 ]
  %455 = bitcast i8* %388 to i64*
  store i64 %454, i64* %455, align 1
  %456 = getelementptr inbounds i8, i8* %0, i64 1064
  %457 = bitcast i8* %456 to i64*
  store i64 %454, i64* %457, align 1
  %458 = getelementptr inbounds i8, i8* %0, i64 1096
  %459 = bitcast i8* %458 to i64*
  store i64 %454, i64* %459, align 1
  %460 = getelementptr inbounds i8, i8* %0, i64 1128
  %461 = bitcast i8* %460 to i64*
  store i64 %454, i64* %461, align 1
  %462 = getelementptr inbounds i8, i8* %0, i64 1160
  %463 = bitcast i8* %462 to i64*
  store i64 %454, i64* %463, align 1
  %464 = getelementptr inbounds i8, i8* %0, i64 1192
  %465 = bitcast i8* %464 to i64*
  store i64 %454, i64* %465, align 1
  %466 = getelementptr inbounds i8, i8* %0, i64 1224
  %467 = bitcast i8* %466 to i64*
  store i64 %454, i64* %467, align 1
  %468 = getelementptr inbounds i8, i8* %0, i64 1256
  %469 = bitcast i8* %468 to i64*
  store i64 %454, i64* %469, align 1
  br label %470

470:                                              ; preds = %425, %453
  %471 = phi i64 [ %452, %425 ], [ 9187201950435737471, %453 ]
  %472 = getelementptr inbounds i8, i8* %0, i64 1288
  %473 = bitcast i8* %472 to i64*
  store i64 %471, i64* %473, align 1
  %474 = getelementptr inbounds i8, i8* %0, i64 1320
  %475 = bitcast i8* %474 to i64*
  store i64 %471, i64* %475, align 1
  %476 = getelementptr inbounds i8, i8* %0, i64 1352
  %477 = bitcast i8* %476 to i64*
  store i64 %471, i64* %477, align 1
  %478 = getelementptr inbounds i8, i8* %0, i64 1384
  %479 = bitcast i8* %478 to i64*
  store i64 %471, i64* %479, align 1
  %480 = getelementptr inbounds i8, i8* %0, i64 1416
  %481 = bitcast i8* %480 to i64*
  store i64 %471, i64* %481, align 1
  %482 = getelementptr inbounds i8, i8* %0, i64 1448
  %483 = bitcast i8* %482 to i64*
  store i64 %471, i64* %483, align 1
  %484 = getelementptr inbounds i8, i8* %0, i64 1480
  %485 = bitcast i8* %484 to i64*
  store i64 %471, i64* %485, align 1
  %486 = getelementptr inbounds i8, i8* %0, i64 1512
  %487 = bitcast i8* %486 to i64*
  store i64 %471, i64* %487, align 1
  %488 = getelementptr inbounds i8, i8* %0, i64 1304
  %489 = icmp eq i8* %387, null
  br i1 %489, label %717, label %490

490:                                              ; preds = %470
  %491 = load i8, i8* %387, align 1
  %492 = insertelement <16 x i8> undef, i8 %491, i32 0
  %493 = shufflevector <16 x i8> %492, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %494 = bitcast <16 x i8> %493 to <2 x i64>
  %495 = extractelement <2 x i64> %494, i32 0
  %496 = bitcast i8* %488 to i64*
  store i64 %495, i64* %496, align 1
  %497 = getelementptr inbounds i8, i8* %0, i64 1336
  %498 = getelementptr inbounds i8, i8* %387, i64 1
  %499 = load i8, i8* %498, align 1
  %500 = insertelement <16 x i8> undef, i8 %499, i32 0
  %501 = shufflevector <16 x i8> %500, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %502 = bitcast <16 x i8> %501 to <2 x i64>
  %503 = extractelement <2 x i64> %502, i32 0
  %504 = bitcast i8* %497 to i64*
  store i64 %503, i64* %504, align 1
  %505 = getelementptr inbounds i8, i8* %0, i64 1368
  %506 = getelementptr inbounds i8, i8* %387, i64 2
  %507 = load i8, i8* %506, align 1
  %508 = insertelement <16 x i8> undef, i8 %507, i32 0
  %509 = shufflevector <16 x i8> %508, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %510 = bitcast <16 x i8> %509 to <2 x i64>
  %511 = extractelement <2 x i64> %510, i32 0
  %512 = bitcast i8* %505 to i64*
  store i64 %511, i64* %512, align 1
  %513 = getelementptr inbounds i8, i8* %0, i64 1400
  %514 = getelementptr inbounds i8, i8* %387, i64 3
  %515 = load i8, i8* %514, align 1
  %516 = insertelement <16 x i8> undef, i8 %515, i32 0
  %517 = shufflevector <16 x i8> %516, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %518 = bitcast <16 x i8> %517 to <2 x i64>
  %519 = extractelement <2 x i64> %518, i32 0
  %520 = bitcast i8* %513 to i64*
  store i64 %519, i64* %520, align 1
  %521 = getelementptr inbounds i8, i8* %0, i64 1432
  %522 = getelementptr inbounds i8, i8* %387, i64 4
  %523 = load i8, i8* %522, align 1
  %524 = insertelement <16 x i8> undef, i8 %523, i32 0
  %525 = shufflevector <16 x i8> %524, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %526 = bitcast <16 x i8> %525 to <2 x i64>
  %527 = extractelement <2 x i64> %526, i32 0
  %528 = bitcast i8* %521 to i64*
  store i64 %527, i64* %528, align 1
  %529 = getelementptr inbounds i8, i8* %0, i64 1464
  %530 = getelementptr inbounds i8, i8* %387, i64 5
  %531 = load i8, i8* %530, align 1
  %532 = insertelement <16 x i8> undef, i8 %531, i32 0
  %533 = shufflevector <16 x i8> %532, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %534 = bitcast <16 x i8> %533 to <2 x i64>
  %535 = extractelement <2 x i64> %534, i32 0
  %536 = bitcast i8* %529 to i64*
  store i64 %535, i64* %536, align 1
  %537 = getelementptr inbounds i8, i8* %0, i64 1496
  %538 = getelementptr inbounds i8, i8* %387, i64 6
  %539 = load i8, i8* %538, align 1
  %540 = insertelement <16 x i8> undef, i8 %539, i32 0
  %541 = shufflevector <16 x i8> %540, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %542 = bitcast <16 x i8> %541 to <2 x i64>
  %543 = extractelement <2 x i64> %542, i32 0
  %544 = bitcast i8* %537 to i64*
  store i64 %543, i64* %544, align 1
  %545 = getelementptr inbounds i8, i8* %0, i64 1528
  %546 = getelementptr inbounds i8, i8* %387, i64 7
  %547 = load i8, i8* %546, align 1
  %548 = insertelement <16 x i8> undef, i8 %547, i32 0
  %549 = shufflevector <16 x i8> %548, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %550 = bitcast <16 x i8> %549 to <2 x i64>
  %551 = extractelement <2 x i64> %550, i32 0
  %552 = bitcast i8* %545 to i64*
  store i64 %551, i64* %552, align 1
  %553 = getelementptr inbounds i8, i8* %0, i64 1048
  br i1 %389, label %663, label %554

554:                                              ; preds = %490
  %555 = bitcast i8* %385 to i64*
  %556 = load i64, i64* %555, align 1
  %557 = insertelement <2 x i64> undef, i64 %556, i32 0
  %558 = bitcast <2 x i64> %557 to <16 x i8>
  %559 = shufflevector <16 x i8> %558, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %560 = getelementptr inbounds i8, i8* %387, i64 -1
  %561 = bitcast <16 x i8> %559 to <8 x i16>
  %562 = load i8, i8* %387, align 1
  %563 = zext i8 %562 to i16
  %564 = load i8, i8* %560, align 1
  %565 = zext i8 %564 to i16
  %566 = sub nsw i16 %563, %565
  %567 = insertelement <8 x i16> undef, i16 %566, i32 0
  %568 = shufflevector <8 x i16> %567, <8 x i16> undef, <8 x i32> zeroinitializer
  %569 = add <8 x i16> %568, %561
  %570 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %569, <8 x i16> undef) #8
  %571 = bitcast <16 x i8> %570 to <2 x i64>
  %572 = extractelement <2 x i64> %571, i32 0
  %573 = bitcast i8* %553 to i64*
  store i64 %572, i64* %573, align 1
  %574 = getelementptr inbounds i8, i8* %0, i64 1080
  %575 = load i8, i8* %498, align 1
  %576 = zext i8 %575 to i16
  %577 = load i8, i8* %560, align 1
  %578 = zext i8 %577 to i16
  %579 = sub nsw i16 %576, %578
  %580 = insertelement <8 x i16> undef, i16 %579, i32 0
  %581 = shufflevector <8 x i16> %580, <8 x i16> undef, <8 x i32> zeroinitializer
  %582 = add <8 x i16> %581, %561
  %583 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %582, <8 x i16> undef) #8
  %584 = bitcast <16 x i8> %583 to <2 x i64>
  %585 = extractelement <2 x i64> %584, i32 0
  %586 = bitcast i8* %574 to i64*
  store i64 %585, i64* %586, align 1
  %587 = getelementptr inbounds i8, i8* %0, i64 1112
  %588 = load i8, i8* %506, align 1
  %589 = zext i8 %588 to i16
  %590 = load i8, i8* %560, align 1
  %591 = zext i8 %590 to i16
  %592 = sub nsw i16 %589, %591
  %593 = insertelement <8 x i16> undef, i16 %592, i32 0
  %594 = shufflevector <8 x i16> %593, <8 x i16> undef, <8 x i32> zeroinitializer
  %595 = add <8 x i16> %594, %561
  %596 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %595, <8 x i16> undef) #8
  %597 = bitcast <16 x i8> %596 to <2 x i64>
  %598 = extractelement <2 x i64> %597, i32 0
  %599 = bitcast i8* %587 to i64*
  store i64 %598, i64* %599, align 1
  %600 = getelementptr inbounds i8, i8* %0, i64 1144
  %601 = load i8, i8* %514, align 1
  %602 = zext i8 %601 to i16
  %603 = load i8, i8* %560, align 1
  %604 = zext i8 %603 to i16
  %605 = sub nsw i16 %602, %604
  %606 = insertelement <8 x i16> undef, i16 %605, i32 0
  %607 = shufflevector <8 x i16> %606, <8 x i16> undef, <8 x i32> zeroinitializer
  %608 = add <8 x i16> %607, %561
  %609 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %608, <8 x i16> undef) #8
  %610 = bitcast <16 x i8> %609 to <2 x i64>
  %611 = extractelement <2 x i64> %610, i32 0
  %612 = bitcast i8* %600 to i64*
  store i64 %611, i64* %612, align 1
  %613 = getelementptr inbounds i8, i8* %0, i64 1176
  %614 = load i8, i8* %522, align 1
  %615 = zext i8 %614 to i16
  %616 = load i8, i8* %560, align 1
  %617 = zext i8 %616 to i16
  %618 = sub nsw i16 %615, %617
  %619 = insertelement <8 x i16> undef, i16 %618, i32 0
  %620 = shufflevector <8 x i16> %619, <8 x i16> undef, <8 x i32> zeroinitializer
  %621 = add <8 x i16> %620, %561
  %622 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %621, <8 x i16> undef) #8
  %623 = bitcast <16 x i8> %622 to <2 x i64>
  %624 = extractelement <2 x i64> %623, i32 0
  %625 = bitcast i8* %613 to i64*
  store i64 %624, i64* %625, align 1
  %626 = getelementptr inbounds i8, i8* %0, i64 1208
  %627 = load i8, i8* %530, align 1
  %628 = zext i8 %627 to i16
  %629 = load i8, i8* %560, align 1
  %630 = zext i8 %629 to i16
  %631 = sub nsw i16 %628, %630
  %632 = insertelement <8 x i16> undef, i16 %631, i32 0
  %633 = shufflevector <8 x i16> %632, <8 x i16> undef, <8 x i32> zeroinitializer
  %634 = add <8 x i16> %633, %561
  %635 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %634, <8 x i16> undef) #8
  %636 = bitcast <16 x i8> %635 to <2 x i64>
  %637 = extractelement <2 x i64> %636, i32 0
  %638 = bitcast i8* %626 to i64*
  store i64 %637, i64* %638, align 1
  %639 = getelementptr inbounds i8, i8* %0, i64 1240
  %640 = load i8, i8* %538, align 1
  %641 = zext i8 %640 to i16
  %642 = load i8, i8* %560, align 1
  %643 = zext i8 %642 to i16
  %644 = sub nsw i16 %641, %643
  %645 = insertelement <8 x i16> undef, i16 %644, i32 0
  %646 = shufflevector <8 x i16> %645, <8 x i16> undef, <8 x i32> zeroinitializer
  %647 = add <8 x i16> %646, %561
  %648 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %647, <8 x i16> undef) #8
  %649 = bitcast <16 x i8> %648 to <2 x i64>
  %650 = extractelement <2 x i64> %649, i32 0
  %651 = bitcast i8* %639 to i64*
  store i64 %650, i64* %651, align 1
  %652 = load i8, i8* %546, align 1
  %653 = zext i8 %652 to i16
  %654 = load i8, i8* %560, align 1
  %655 = zext i8 %654 to i16
  %656 = sub nsw i16 %653, %655
  %657 = insertelement <8 x i16> undef, i16 %656, i32 0
  %658 = shufflevector <8 x i16> %657, <8 x i16> undef, <8 x i32> zeroinitializer
  %659 = add <8 x i16> %658, %561
  %660 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %659, <8 x i16> undef) #8
  %661 = bitcast <16 x i8> %660 to <2 x i64>
  %662 = extractelement <2 x i64> %661, i32 0
  br label %764

663:                                              ; preds = %490
  %664 = load i8, i8* %387, align 1
  %665 = insertelement <16 x i8> undef, i8 %664, i32 0
  %666 = shufflevector <16 x i8> %665, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %667 = bitcast <16 x i8> %666 to <2 x i64>
  %668 = extractelement <2 x i64> %667, i32 0
  %669 = bitcast i8* %553 to i64*
  store i64 %668, i64* %669, align 1
  %670 = getelementptr inbounds i8, i8* %0, i64 1080
  %671 = load i8, i8* %498, align 1
  %672 = insertelement <16 x i8> undef, i8 %671, i32 0
  %673 = shufflevector <16 x i8> %672, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %674 = bitcast <16 x i8> %673 to <2 x i64>
  %675 = extractelement <2 x i64> %674, i32 0
  %676 = bitcast i8* %670 to i64*
  store i64 %675, i64* %676, align 1
  %677 = getelementptr inbounds i8, i8* %0, i64 1112
  %678 = load i8, i8* %506, align 1
  %679 = insertelement <16 x i8> undef, i8 %678, i32 0
  %680 = shufflevector <16 x i8> %679, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %681 = bitcast <16 x i8> %680 to <2 x i64>
  %682 = extractelement <2 x i64> %681, i32 0
  %683 = bitcast i8* %677 to i64*
  store i64 %682, i64* %683, align 1
  %684 = getelementptr inbounds i8, i8* %0, i64 1144
  %685 = load i8, i8* %514, align 1
  %686 = insertelement <16 x i8> undef, i8 %685, i32 0
  %687 = shufflevector <16 x i8> %686, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %688 = bitcast <16 x i8> %687 to <2 x i64>
  %689 = extractelement <2 x i64> %688, i32 0
  %690 = bitcast i8* %684 to i64*
  store i64 %689, i64* %690, align 1
  %691 = getelementptr inbounds i8, i8* %0, i64 1176
  %692 = load i8, i8* %522, align 1
  %693 = insertelement <16 x i8> undef, i8 %692, i32 0
  %694 = shufflevector <16 x i8> %693, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %695 = bitcast <16 x i8> %694 to <2 x i64>
  %696 = extractelement <2 x i64> %695, i32 0
  %697 = bitcast i8* %691 to i64*
  store i64 %696, i64* %697, align 1
  %698 = getelementptr inbounds i8, i8* %0, i64 1208
  %699 = load i8, i8* %530, align 1
  %700 = insertelement <16 x i8> undef, i8 %699, i32 0
  %701 = shufflevector <16 x i8> %700, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %702 = bitcast <16 x i8> %701 to <2 x i64>
  %703 = extractelement <2 x i64> %702, i32 0
  %704 = bitcast i8* %698 to i64*
  store i64 %703, i64* %704, align 1
  %705 = getelementptr inbounds i8, i8* %0, i64 1240
  %706 = load i8, i8* %538, align 1
  %707 = insertelement <16 x i8> undef, i8 %706, i32 0
  %708 = shufflevector <16 x i8> %707, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %709 = bitcast <16 x i8> %708 to <2 x i64>
  %710 = extractelement <2 x i64> %709, i32 0
  %711 = bitcast i8* %705 to i64*
  store i64 %710, i64* %711, align 1
  %712 = load i8, i8* %546, align 1
  %713 = insertelement <16 x i8> undef, i8 %712, i32 0
  %714 = shufflevector <16 x i8> %713, <16 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %715 = bitcast <16 x i8> %714 to <2 x i64>
  %716 = extractelement <2 x i64> %715, i32 0
  br label %764

717:                                              ; preds = %470
  %718 = bitcast i8* %488 to i64*
  store i64 -9114861777597660799, i64* %718, align 1
  %719 = getelementptr inbounds i8, i8* %0, i64 1336
  %720 = bitcast i8* %719 to i64*
  store i64 -9114861777597660799, i64* %720, align 1
  %721 = getelementptr inbounds i8, i8* %0, i64 1368
  %722 = bitcast i8* %721 to i64*
  store i64 -9114861777597660799, i64* %722, align 1
  %723 = getelementptr inbounds i8, i8* %0, i64 1400
  %724 = bitcast i8* %723 to i64*
  store i64 -9114861777597660799, i64* %724, align 1
  %725 = getelementptr inbounds i8, i8* %0, i64 1432
  %726 = bitcast i8* %725 to i64*
  store i64 -9114861777597660799, i64* %726, align 1
  %727 = getelementptr inbounds i8, i8* %0, i64 1464
  %728 = bitcast i8* %727 to i64*
  store i64 -9114861777597660799, i64* %728, align 1
  %729 = getelementptr inbounds i8, i8* %0, i64 1496
  %730 = bitcast i8* %729 to i64*
  store i64 -9114861777597660799, i64* %730, align 1
  %731 = getelementptr inbounds i8, i8* %0, i64 1528
  %732 = bitcast i8* %731 to i64*
  store i64 -9114861777597660799, i64* %732, align 1
  %733 = getelementptr inbounds i8, i8* %0, i64 1048
  br i1 %389, label %750, label %734

734:                                              ; preds = %717
  %735 = bitcast i8* %385 to i64*
  %736 = load i64, i64* %735, align 1
  %737 = bitcast i8* %733 to i64*
  store i64 %736, i64* %737, align 1
  %738 = getelementptr inbounds i8, i8* %0, i64 1080
  %739 = bitcast i8* %738 to i64*
  store i64 %736, i64* %739, align 1
  %740 = getelementptr inbounds i8, i8* %0, i64 1112
  %741 = bitcast i8* %740 to i64*
  store i64 %736, i64* %741, align 1
  %742 = getelementptr inbounds i8, i8* %0, i64 1144
  %743 = bitcast i8* %742 to i64*
  store i64 %736, i64* %743, align 1
  %744 = getelementptr inbounds i8, i8* %0, i64 1176
  %745 = bitcast i8* %744 to i64*
  store i64 %736, i64* %745, align 1
  %746 = getelementptr inbounds i8, i8* %0, i64 1208
  %747 = bitcast i8* %746 to i64*
  store i64 %736, i64* %747, align 1
  %748 = getelementptr inbounds i8, i8* %0, i64 1240
  %749 = bitcast i8* %748 to i64*
  store i64 %736, i64* %749, align 1
  br label %764

750:                                              ; preds = %717
  %751 = bitcast i8* %733 to i64*
  store i64 -9114861777597660799, i64* %751, align 1
  %752 = getelementptr inbounds i8, i8* %0, i64 1080
  %753 = bitcast i8* %752 to i64*
  store i64 -9114861777597660799, i64* %753, align 1
  %754 = getelementptr inbounds i8, i8* %0, i64 1112
  %755 = bitcast i8* %754 to i64*
  store i64 -9114861777597660799, i64* %755, align 1
  %756 = getelementptr inbounds i8, i8* %0, i64 1144
  %757 = bitcast i8* %756 to i64*
  store i64 -9114861777597660799, i64* %757, align 1
  %758 = getelementptr inbounds i8, i8* %0, i64 1176
  %759 = bitcast i8* %758 to i64*
  store i64 -9114861777597660799, i64* %759, align 1
  %760 = getelementptr inbounds i8, i8* %0, i64 1208
  %761 = bitcast i8* %760 to i64*
  store i64 -9114861777597660799, i64* %761, align 1
  %762 = getelementptr inbounds i8, i8* %0, i64 1240
  %763 = bitcast i8* %762 to i64*
  store i64 -9114861777597660799, i64* %763, align 1
  br label %764

764:                                              ; preds = %554, %663, %734, %750
  %765 = phi i64 [ %662, %554 ], [ %716, %663 ], [ %736, %734 ], [ -9114861777597660799, %750 ]
  %766 = getelementptr inbounds i8, i8* %0, i64 1272
  %767 = bitcast i8* %766 to i64*
  store i64 %765, i64* %767, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @Intra4Preds_SSE2(i8* nocapture, i8* readonly) #1 {
  %3 = getelementptr inbounds i8, i8* %0, i64 1536
  %4 = load i8, i8* %1, align 1
  %5 = zext i8 %4 to i32
  %6 = getelementptr inbounds i8, i8* %1, i64 -5
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = add nuw nsw i32 %5, 4
  %10 = add nuw nsw i32 %9, %8
  %11 = getelementptr inbounds i8, i8* %1, i64 1
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = getelementptr inbounds i8, i8* %1, i64 -4
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = add nuw nsw i32 %10, %13
  %18 = add nuw nsw i32 %17, %16
  %19 = getelementptr inbounds i8, i8* %1, i64 2
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = getelementptr inbounds i8, i8* %1, i64 -3
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = add nuw nsw i32 %18, %21
  %26 = add nuw nsw i32 %25, %24
  %27 = getelementptr inbounds i8, i8* %1, i64 3
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = getelementptr inbounds i8, i8* %1, i64 -2
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = add nuw nsw i32 %26, %29
  %34 = add nuw nsw i32 %33, %32
  %35 = lshr i32 %34, 3
  %36 = trunc i32 %35 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %3, i8 %36, i64 4, i1 false) #8
  %37 = getelementptr inbounds i8, i8* %0, i64 1568
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 %36, i64 4, i1 false) #8
  %38 = getelementptr inbounds i8, i8* %0, i64 1600
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %38, i8 %36, i64 4, i1 false) #8
  %39 = getelementptr inbounds i8, i8* %0, i64 1632
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 %36, i64 4, i1 false) #8
  %40 = getelementptr inbounds i8, i8* %0, i64 1540
  %41 = bitcast i8* %1 to i32*
  %42 = load i32, i32* %41, align 1
  %43 = insertelement <4 x i32> undef, i32 %42, i32 0
  %44 = bitcast <4 x i32> %43 to <16 x i8>
  %45 = shufflevector <16 x i8> %44, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = getelementptr inbounds i8, i8* %1, i64 -1
  %47 = bitcast <16 x i8> %45 to <8 x i16>
  %48 = load i8, i8* %30, align 1
  %49 = zext i8 %48 to i16
  %50 = load i8, i8* %46, align 1
  %51 = zext i8 %50 to i16
  %52 = sub nsw i16 %49, %51
  %53 = insertelement <8 x i16> undef, i16 %52, i32 0
  %54 = shufflevector <8 x i16> %53, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = add <8 x i16> %54, %47
  %56 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %55, <8 x i16> undef) #8
  %57 = bitcast <16 x i8> %56 to <4 x i32>
  %58 = extractelement <4 x i32> %57, i32 0
  %59 = bitcast i8* %40 to i32*
  store i32 %58, i32* %59, align 1
  %60 = getelementptr inbounds i8, i8* %0, i64 1572
  %61 = load i8, i8* %22, align 1
  %62 = zext i8 %61 to i16
  %63 = load i8, i8* %46, align 1
  %64 = zext i8 %63 to i16
  %65 = sub nsw i16 %62, %64
  %66 = insertelement <8 x i16> undef, i16 %65, i32 0
  %67 = shufflevector <8 x i16> %66, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = add <8 x i16> %67, %47
  %69 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %68, <8 x i16> undef) #8
  %70 = bitcast <16 x i8> %69 to <4 x i32>
  %71 = extractelement <4 x i32> %70, i32 0
  %72 = bitcast i8* %60 to i32*
  store i32 %71, i32* %72, align 1
  %73 = getelementptr inbounds i8, i8* %0, i64 1604
  %74 = load i8, i8* %14, align 1
  %75 = zext i8 %74 to i16
  %76 = load i8, i8* %46, align 1
  %77 = zext i8 %76 to i16
  %78 = sub nsw i16 %75, %77
  %79 = insertelement <8 x i16> undef, i16 %78, i32 0
  %80 = shufflevector <8 x i16> %79, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %81 = add <8 x i16> %80, %47
  %82 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %81, <8 x i16> undef) #8
  %83 = bitcast <16 x i8> %82 to <4 x i32>
  %84 = extractelement <4 x i32> %83, i32 0
  %85 = bitcast i8* %73 to i32*
  store i32 %84, i32* %85, align 1
  %86 = getelementptr inbounds i8, i8* %0, i64 1636
  %87 = load i8, i8* %6, align 1
  %88 = zext i8 %87 to i16
  %89 = load i8, i8* %46, align 1
  %90 = zext i8 %89 to i16
  %91 = sub nsw i16 %88, %90
  %92 = insertelement <8 x i16> undef, i16 %91, i32 0
  %93 = shufflevector <8 x i16> %92, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef>
  %94 = add <8 x i16> %93, %47
  %95 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %94, <8 x i16> undef) #8
  %96 = bitcast <16 x i8> %95 to <4 x i32>
  %97 = extractelement <4 x i32> %96, i32 0
  %98 = bitcast i8* %86 to i32*
  store i32 %97, i32* %98, align 1
  %99 = getelementptr inbounds i8, i8* %0, i64 1544
  %100 = bitcast i8* %46 to i64*
  %101 = load i64, i64* %100, align 1
  %102 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %101, i32 0
  %103 = bitcast <2 x i64> %102 to <16 x i8>
  %104 = shufflevector <16 x i8> %103, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %105 = shufflevector <16 x i8> %103, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %106 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %103, <16 x i8> %105) #8
  %107 = xor <16 x i8> %105, %103
  %108 = and <16 x i8> %107, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %109 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %106, <16 x i8> %108) #8
  %110 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %109, <16 x i8> %104) #8
  %111 = bitcast <16 x i8> %110 to <4 x i32>
  %112 = extractelement <4 x i32> %111, i32 0
  %113 = bitcast i8* %99 to i32*
  store i32 %112, i32* %113, align 1
  %114 = getelementptr inbounds i8, i8* %0, i64 1576
  %115 = bitcast i8* %114 to i32*
  store i32 %112, i32* %115, align 1
  %116 = getelementptr inbounds i8, i8* %0, i64 1608
  %117 = bitcast i8* %116 to i32*
  store i32 %112, i32* %117, align 1
  %118 = getelementptr inbounds i8, i8* %0, i64 1640
  %119 = bitcast i8* %118 to i32*
  store i32 %112, i32* %119, align 1
  %120 = getelementptr inbounds i8, i8* %0, i64 1548
  %121 = load i8, i8* %46, align 1
  %122 = zext i8 %121 to i32
  %123 = load i8, i8* %30, align 1
  %124 = zext i8 %123 to i32
  %125 = load i8, i8* %22, align 1
  %126 = zext i8 %125 to i32
  %127 = load i8, i8* %14, align 1
  %128 = zext i8 %127 to i32
  %129 = load i8, i8* %6, align 1
  %130 = zext i8 %129 to i32
  %131 = shl nuw nsw i32 %124, 1
  %132 = add nuw nsw i32 %126, 2
  %133 = add nuw nsw i32 %131, %122
  %134 = add nuw nsw i32 %133, %132
  %135 = lshr i32 %134, 2
  %136 = mul i32 %135, 16843009
  %137 = bitcast i8* %120 to i32*
  store i32 %136, i32* %137, align 1
  %138 = getelementptr inbounds i8, i8* %0, i64 1580
  %139 = shl nuw nsw i32 %126, 1
  %140 = add nuw nsw i32 %128, 2
  %141 = add nuw nsw i32 %139, %124
  %142 = add nuw nsw i32 %141, %140
  %143 = lshr i32 %142, 2
  %144 = mul i32 %143, 16843009
  %145 = bitcast i8* %138 to i32*
  store i32 %144, i32* %145, align 1
  %146 = getelementptr inbounds i8, i8* %0, i64 1612
  %147 = shl nuw nsw i32 %128, 1
  %148 = add nuw nsw i32 %147, %132
  %149 = add nuw nsw i32 %148, %130
  %150 = lshr i32 %149, 2
  %151 = mul i32 %150, 16843009
  %152 = bitcast i8* %146 to i32*
  store i32 %151, i32* %152, align 1
  %153 = getelementptr inbounds i8, i8* %0, i64 1644
  %154 = shl nuw nsw i32 %130, 1
  %155 = add nuw nsw i32 %140, %130
  %156 = add nuw nsw i32 %155, %154
  %157 = lshr i32 %156, 2
  %158 = mul i32 %157, 16843009
  %159 = bitcast i8* %153 to i32*
  store i32 %158, i32* %159, align 1
  %160 = getelementptr inbounds i8, i8* %0, i64 1552
  %161 = bitcast i8* %6 to i64*
  %162 = load i64, i64* %161, align 1
  %163 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %162, i32 0
  %164 = bitcast <2 x i64> %163 to <8 x i16>
  %165 = load i8, i8* %27, align 1
  %166 = zext i8 %165 to i16
  %167 = insertelement <8 x i16> %164, i16 %166, i64 4
  %168 = bitcast <8 x i16> %167 to <16 x i8>
  %169 = shufflevector <16 x i8> %168, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %170 = shufflevector <16 x i8> %168, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %171 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %170, <16 x i8> %168) #8
  %172 = xor <16 x i8> %170, %168
  %173 = and <16 x i8> %172, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %174 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %171, <16 x i8> %173) #8
  %175 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %174, <16 x i8> %169) #8
  %176 = getelementptr inbounds i8, i8* %0, i64 1648
  %177 = bitcast <16 x i8> %175 to <4 x i32>
  %178 = extractelement <4 x i32> %177, i32 0
  %179 = bitcast i8* %176 to i32*
  store i32 %178, i32* %179, align 1
  %180 = getelementptr inbounds i8, i8* %0, i64 1616
  %181 = shufflevector <16 x i8> %175, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %182 = bitcast <16 x i8> %181 to <4 x i32>
  %183 = extractelement <4 x i32> %182, i32 0
  %184 = bitcast i8* %180 to i32*
  store i32 %183, i32* %184, align 1
  %185 = getelementptr inbounds i8, i8* %0, i64 1584
  %186 = shufflevector <16 x i8> %175, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %187 = bitcast <16 x i8> %186 to <4 x i32>
  %188 = extractelement <4 x i32> %187, i32 0
  %189 = bitcast i8* %185 to i32*
  store i32 %188, i32* %189, align 1
  %190 = shufflevector <16 x i8> %175, <16 x i8> undef, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %191 = bitcast <16 x i8> %190 to <4 x i32>
  %192 = extractelement <4 x i32> %191, i32 0
  %193 = bitcast i8* %160 to i32*
  store i32 %192, i32* %193, align 1
  %194 = getelementptr inbounds i8, i8* %0, i64 1556
  %195 = load i8, i8* %30, align 1
  %196 = zext i8 %195 to i32
  %197 = load i8, i8* %22, align 1
  %198 = zext i8 %197 to i32
  %199 = load i8, i8* %14, align 1
  %200 = zext i8 %199 to i32
  %201 = load i8, i8* %46, align 1
  %202 = zext i8 %201 to i32
  %203 = load i64, i64* %100, align 1
  %204 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %203, i32 0
  %205 = bitcast <2 x i64> %204 to <16 x i8>
  %206 = shufflevector <16 x i8> %205, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %207 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %205, <16 x i8> %206) #8
  %208 = shufflevector <16 x i8> %205, <16 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %209 = bitcast <16 x i8> %208 to <8 x i16>
  %210 = shl nuw nsw i32 %202, 8
  %211 = or i32 %210, %196
  %212 = trunc i32 %211 to i16
  %213 = insertelement <8 x i16> %209, i16 %212, i64 0
  %214 = bitcast <8 x i16> %213 to <16 x i8>
  %215 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %214, <16 x i8> %206) #8
  %216 = xor <16 x i8> %206, %214
  %217 = and <16 x i8> %216, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %218 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %215, <16 x i8> %217) #8
  %219 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %218, <16 x i8> %205) #8
  %220 = bitcast <16 x i8> %207 to <4 x i32>
  %221 = extractelement <4 x i32> %220, i32 0
  %222 = bitcast i8* %194 to i32*
  store i32 %221, i32* %222, align 1
  %223 = getelementptr inbounds i8, i8* %0, i64 1588
  %224 = bitcast <16 x i8> %219 to <4 x i32>
  %225 = extractelement <4 x i32> %224, i32 0
  %226 = bitcast i8* %223 to i32*
  store i32 %225, i32* %226, align 1
  %227 = getelementptr inbounds i8, i8* %0, i64 1620
  %228 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0>, <16 x i8> %207, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %229 = bitcast <16 x i8> %228 to <4 x i32>
  %230 = extractelement <4 x i32> %229, i32 0
  %231 = bitcast i8* %227 to i32*
  store i32 %230, i32* %231, align 1
  %232 = getelementptr inbounds i8, i8* %0, i64 1652
  %233 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0>, <16 x i8> %219, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %234 = bitcast <16 x i8> %233 to <4 x i32>
  %235 = extractelement <4 x i32> %234, i32 0
  %236 = bitcast i8* %232 to i32*
  store i32 %235, i32* %236, align 1
  %237 = shl nuw nsw i32 %196, 1
  %238 = add nuw nsw i32 %198, 2
  %239 = add nuw nsw i32 %238, %237
  %240 = add nuw nsw i32 %239, %202
  %241 = lshr i32 %240, 2
  %242 = trunc i32 %241 to i8
  store i8 %242, i8* %227, align 1
  %243 = shl nuw nsw i32 %198, 1
  %244 = add nuw nsw i32 %196, 2
  %245 = add nuw nsw i32 %244, %200
  %246 = add nuw nsw i32 %245, %243
  %247 = lshr i32 %246, 2
  %248 = trunc i32 %247 to i8
  store i8 %248, i8* %232, align 1
  %249 = getelementptr inbounds i8, i8* %0, i64 1560
  %250 = bitcast i8* %1 to i64*
  %251 = load i64, i64* %250, align 1
  %252 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %251, i32 0
  %253 = bitcast <2 x i64> %252 to <16 x i8>
  %254 = shufflevector <16 x i8> %253, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %255 = shufflevector <16 x i8> %253, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %256 = bitcast <16 x i8> %255 to <8 x i16>
  %257 = getelementptr inbounds i8, i8* %1, i64 7
  %258 = load i8, i8* %257, align 1
  %259 = zext i8 %258 to i16
  %260 = insertelement <8 x i16> %256, i16 %259, i64 3
  %261 = bitcast <8 x i16> %260 to <2 x i64>
  %262 = bitcast <8 x i16> %260 to <16 x i8>
  %263 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %253, <16 x i8> %262) #8
  %264 = xor <2 x i64> %252, %261
  %265 = bitcast <2 x i64> %264 to <16 x i8>
  %266 = and <16 x i8> %265, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %267 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %263, <16 x i8> %266) #8
  %268 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %267, <16 x i8> %254) #8
  %269 = bitcast <16 x i8> %268 to <4 x i32>
  %270 = extractelement <4 x i32> %269, i32 0
  %271 = bitcast i8* %249 to i32*
  store i32 %270, i32* %271, align 1
  %272 = getelementptr inbounds i8, i8* %0, i64 1592
  %273 = shufflevector <16 x i8> %268, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %274 = bitcast <16 x i8> %273 to <4 x i32>
  %275 = extractelement <4 x i32> %274, i32 0
  %276 = bitcast i8* %272 to i32*
  store i32 %275, i32* %276, align 1
  %277 = getelementptr inbounds i8, i8* %0, i64 1624
  %278 = shufflevector <16 x i8> %268, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %279 = bitcast <16 x i8> %278 to <4 x i32>
  %280 = extractelement <4 x i32> %279, i32 0
  %281 = bitcast i8* %277 to i32*
  store i32 %280, i32* %281, align 1
  %282 = getelementptr inbounds i8, i8* %0, i64 1656
  %283 = shufflevector <16 x i8> %268, <16 x i8> undef, <16 x i32> <i32 3, i32 4, i32 5, i32 6, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %284 = bitcast <16 x i8> %283 to <4 x i32>
  %285 = extractelement <4 x i32> %284, i32 0
  %286 = bitcast i8* %282 to i32*
  store i32 %285, i32* %286, align 1
  %287 = getelementptr inbounds i8, i8* %0, i64 1564
  %288 = load i64, i64* %250, align 1
  %289 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %288, i32 0
  %290 = bitcast <2 x i64> %289 to <16 x i8>
  %291 = shufflevector <16 x i8> %290, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %292 = bitcast <16 x i8> %291 to <2 x i64>
  %293 = shufflevector <16 x i8> %290, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %294 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %290, <16 x i8> %291) #8
  %295 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %293, <16 x i8> %291) #8
  %296 = tail call <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8> %294, <16 x i8> %295) #8
  %297 = xor <16 x i8> %295, %294
  %298 = bitcast <16 x i8> %297 to <2 x i64>
  %299 = and <2 x i64> %298, <i64 72340172838076673, i64 72340172838076673>
  %300 = xor <2 x i64> %289, %292
  %301 = xor <16 x i8> %291, %293
  %302 = bitcast <16 x i8> %301 to <2 x i64>
  %303 = or <2 x i64> %300, %302
  %304 = and <2 x i64> %299, %303
  %305 = bitcast <2 x i64> %304 to <16 x i8>
  %306 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %296, <16 x i8> %305) #8
  %307 = shufflevector <16 x i8> %306, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %308 = bitcast <16 x i8> %307 to <4 x i32>
  %309 = extractelement <4 x i32> %308, i32 0
  %310 = bitcast <16 x i8> %294 to <4 x i32>
  %311 = extractelement <4 x i32> %310, i32 0
  %312 = bitcast i8* %287 to i32*
  store i32 %311, i32* %312, align 1
  %313 = getelementptr inbounds i8, i8* %0, i64 1596
  %314 = bitcast <16 x i8> %306 to <4 x i32>
  %315 = extractelement <4 x i32> %314, i32 0
  %316 = bitcast i8* %313 to i32*
  store i32 %315, i32* %316, align 1
  %317 = getelementptr inbounds i8, i8* %0, i64 1628
  %318 = shufflevector <16 x i8> %294, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %319 = bitcast <16 x i8> %318 to <4 x i32>
  %320 = extractelement <4 x i32> %319, i32 0
  %321 = bitcast i8* %317 to i32*
  store i32 %320, i32* %321, align 1
  %322 = getelementptr inbounds i8, i8* %0, i64 1660
  %323 = shufflevector <16 x i8> %306, <16 x i8> undef, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %324 = bitcast <16 x i8> %323 to <4 x i32>
  %325 = extractelement <4 x i32> %324, i32 0
  %326 = bitcast i8* %322 to i32*
  store i32 %325, i32* %326, align 1
  %327 = trunc i32 %309 to i8
  %328 = getelementptr inbounds i8, i8* %0, i64 1631
  store i8 %327, i8* %328, align 1
  %329 = lshr i32 %309, 8
  %330 = trunc i32 %329 to i8
  %331 = getelementptr inbounds i8, i8* %0, i64 1663
  store i8 %330, i8* %331, align 1
  %332 = getelementptr inbounds i8, i8* %0, i64 1664
  %333 = load i8, i8* %46, align 1
  %334 = zext i8 %333 to i32
  %335 = load i8, i8* %30, align 1
  %336 = zext i8 %335 to i32
  %337 = load i8, i8* %22, align 1
  %338 = zext i8 %337 to i32
  %339 = load i8, i8* %14, align 1
  %340 = zext i8 %339 to i32
  %341 = load i8, i8* %6, align 1
  %342 = zext i8 %341 to i32
  %343 = load i8, i8* %1, align 1
  %344 = zext i8 %343 to i32
  %345 = load i8, i8* %11, align 1
  %346 = zext i8 %345 to i32
  %347 = load i8, i8* %19, align 1
  %348 = zext i8 %347 to i32
  %349 = add nuw nsw i32 %336, 1
  %350 = add nuw nsw i32 %349, %334
  %351 = lshr i32 %350, 1
  %352 = trunc i32 %351 to i8
  %353 = getelementptr inbounds i8, i8* %0, i64 1698
  store i8 %352, i8* %353, align 1
  store i8 %352, i8* %332, align 1
  %354 = add nuw nsw i32 %349, %338
  %355 = lshr i32 %354, 1
  %356 = trunc i32 %355 to i8
  %357 = getelementptr inbounds i8, i8* %0, i64 1730
  store i8 %356, i8* %357, align 1
  %358 = getelementptr inbounds i8, i8* %0, i64 1696
  store i8 %356, i8* %358, align 1
  %359 = add nuw nsw i32 %340, 1
  %360 = add nuw nsw i32 %359, %338
  %361 = lshr i32 %360, 1
  %362 = trunc i32 %361 to i8
  %363 = getelementptr inbounds i8, i8* %0, i64 1762
  store i8 %362, i8* %363, align 1
  %364 = getelementptr inbounds i8, i8* %0, i64 1728
  store i8 %362, i8* %364, align 1
  %365 = add nuw nsw i32 %359, %342
  %366 = lshr i32 %365, 1
  %367 = trunc i32 %366 to i8
  %368 = getelementptr inbounds i8, i8* %0, i64 1760
  store i8 %367, i8* %368, align 1
  %369 = shl nuw nsw i32 %346, 1
  %370 = add nuw nsw i32 %344, 2
  %371 = add nuw nsw i32 %370, %369
  %372 = add nuw nsw i32 %371, %348
  %373 = lshr i32 %372, 2
  %374 = trunc i32 %373 to i8
  %375 = getelementptr inbounds i8, i8* %0, i64 1667
  store i8 %374, i8* %375, align 1
  %376 = shl nuw nsw i32 %344, 1
  %377 = add nuw nsw i32 %334, 2
  %378 = add nuw nsw i32 %376, %377
  %379 = add nuw nsw i32 %378, %346
  %380 = lshr i32 %379, 2
  %381 = trunc i32 %380 to i8
  %382 = getelementptr inbounds i8, i8* %0, i64 1666
  store i8 %381, i8* %382, align 1
  %383 = shl nuw nsw i32 %334, 1
  %384 = add nuw nsw i32 %336, 2
  %385 = add nuw nsw i32 %384, %383
  %386 = add nuw nsw i32 %385, %344
  %387 = lshr i32 %386, 2
  %388 = trunc i32 %387 to i8
  %389 = getelementptr inbounds i8, i8* %0, i64 1699
  store i8 %388, i8* %389, align 1
  %390 = getelementptr inbounds i8, i8* %0, i64 1665
  store i8 %388, i8* %390, align 1
  %391 = shl nuw nsw i32 %336, 1
  %392 = add nuw nsw i32 %377, %338
  %393 = add nuw nsw i32 %392, %391
  %394 = lshr i32 %393, 2
  %395 = trunc i32 %394 to i8
  %396 = getelementptr inbounds i8, i8* %0, i64 1731
  store i8 %395, i8* %396, align 1
  %397 = getelementptr inbounds i8, i8* %0, i64 1697
  store i8 %395, i8* %397, align 1
  %398 = shl nuw nsw i32 %338, 1
  %399 = add nuw nsw i32 %384, %340
  %400 = add nuw nsw i32 %399, %398
  %401 = lshr i32 %400, 2
  %402 = trunc i32 %401 to i8
  %403 = getelementptr inbounds i8, i8* %0, i64 1763
  store i8 %402, i8* %403, align 1
  %404 = getelementptr inbounds i8, i8* %0, i64 1729
  store i8 %402, i8* %404, align 1
  %405 = shl nuw nsw i32 %340, 1
  %406 = add nuw nsw i32 %338, 2
  %407 = add nuw nsw i32 %406, %342
  %408 = add nuw nsw i32 %407, %405
  %409 = lshr i32 %408, 2
  %410 = trunc i32 %409 to i8
  %411 = getelementptr inbounds i8, i8* %0, i64 1761
  store i8 %410, i8* %411, align 1
  %412 = getelementptr inbounds i8, i8* %0, i64 1668
  %413 = load i8, i8* %30, align 1
  %414 = zext i8 %413 to i32
  %415 = load i8, i8* %22, align 1
  %416 = zext i8 %415 to i32
  %417 = load i8, i8* %14, align 1
  %418 = zext i8 %417 to i32
  %419 = load i8, i8* %6, align 1
  %420 = zext i8 %419 to i32
  %421 = add nuw nsw i32 %416, 1
  %422 = add nuw nsw i32 %421, %414
  %423 = lshr i32 %422, 1
  %424 = trunc i32 %423 to i8
  store i8 %424, i8* %412, align 1
  %425 = add nuw nsw i32 %421, %418
  %426 = lshr i32 %425, 1
  %427 = trunc i32 %426 to i8
  %428 = getelementptr inbounds i8, i8* %0, i64 1700
  store i8 %427, i8* %428, align 1
  %429 = getelementptr inbounds i8, i8* %0, i64 1670
  store i8 %427, i8* %429, align 1
  %430 = add nuw nsw i32 %418, 1
  %431 = add nuw nsw i32 %430, %420
  %432 = lshr i32 %431, 1
  %433 = trunc i32 %432 to i8
  %434 = getelementptr inbounds i8, i8* %0, i64 1732
  store i8 %433, i8* %434, align 1
  %435 = getelementptr inbounds i8, i8* %0, i64 1702
  store i8 %433, i8* %435, align 1
  %436 = shl nuw nsw i32 %416, 1
  %437 = add nuw nsw i32 %418, 2
  %438 = add nuw nsw i32 %436, %414
  %439 = add nuw nsw i32 %438, %437
  %440 = lshr i32 %439, 2
  %441 = trunc i32 %440 to i8
  %442 = getelementptr inbounds i8, i8* %0, i64 1669
  store i8 %441, i8* %442, align 1
  %443 = shl nuw nsw i32 %418, 1
  %444 = add nuw nsw i32 %416, 2
  %445 = add nuw nsw i32 %444, %420
  %446 = add nuw nsw i32 %445, %443
  %447 = lshr i32 %446, 2
  %448 = trunc i32 %447 to i8
  %449 = getelementptr inbounds i8, i8* %0, i64 1701
  store i8 %448, i8* %449, align 1
  %450 = getelementptr inbounds i8, i8* %0, i64 1671
  store i8 %448, i8* %450, align 1
  %451 = shl nuw nsw i32 %420, 1
  %452 = add nuw nsw i32 %437, %420
  %453 = add nuw nsw i32 %452, %451
  %454 = lshr i32 %453, 2
  %455 = trunc i32 %454 to i8
  %456 = getelementptr inbounds i8, i8* %0, i64 1733
  store i8 %455, i8* %456, align 1
  %457 = getelementptr inbounds i8, i8* %0, i64 1703
  store i8 %455, i8* %457, align 1
  %458 = getelementptr inbounds i8, i8* %0, i64 1764
  %459 = getelementptr inbounds i8, i8* %0, i64 1734
  store i8 %419, i8* %459, align 1
  %460 = getelementptr inbounds i8, i8* %0, i64 1735
  store i8 %419, i8* %460, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %458, i8 %419, i64 4, i1 false) #8
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal i32 @QuantizeBlock_SSE2(i16* nocapture, i16* nocapture, %struct.VP8Matrix* readonly) #2 {
  %4 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 4, i64 0
  %5 = bitcast i16* %0 to <8 x i16>*
  %6 = load <8 x i16>, <8 x i16>* %5, align 1
  %7 = getelementptr inbounds i16, i16* %0, i64 8
  %8 = bitcast i16* %7 to <8 x i16>*
  %9 = load <8 x i16>, <8 x i16>* %8, align 1
  %10 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 1
  %11 = bitcast [16 x i16]* %10 to <8 x i16>*
  %12 = load <8 x i16>, <8 x i16>* %11, align 1
  %13 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 1, i64 8
  %14 = bitcast i16* %13 to <8 x i16>*
  %15 = load <8 x i16>, <8 x i16>* %14, align 1
  %16 = bitcast %struct.VP8Matrix* %2 to <8 x i16>*
  %17 = load <8 x i16>, <8 x i16>* %16, align 1
  %18 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 0, i64 8
  %19 = bitcast i16* %18 to <8 x i16>*
  %20 = load <8 x i16>, <8 x i16>* %19, align 1
  %21 = ashr <8 x i16> %6, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %22 = ashr <8 x i16> %9, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %23 = xor <8 x i16> %21, %6
  %24 = sub <8 x i16> %23, %21
  %25 = xor <8 x i16> %22, %9
  %26 = sub <8 x i16> %25, %22
  %27 = icmp eq i16* %4, null
  br i1 %27, label %36, label %28

28:                                               ; preds = %3
  %29 = bitcast i16* %4 to <8 x i16>*
  %30 = load <8 x i16>, <8 x i16>* %29, align 1
  %31 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 4, i64 8
  %32 = bitcast i16* %31 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = add <8 x i16> %30, %24
  %35 = add <8 x i16> %33, %26
  br label %36

36:                                               ; preds = %3, %28
  %37 = phi <8 x i16> [ %35, %28 ], [ %26, %3 ]
  %38 = phi <8 x i16> [ %34, %28 ], [ %24, %3 ]
  %39 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %38, <8 x i16> %12) #8
  %40 = mul <8 x i16> %38, %12
  %41 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %37, <8 x i16> %15) #8
  %42 = mul <8 x i16> %37, %15
  %43 = shufflevector <8 x i16> %40, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %44 = shufflevector <8 x i16> %40, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %45 = shufflevector <8 x i16> %42, <8 x i16> %41, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %46 = shufflevector <8 x i16> %42, <8 x i16> %41, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %47 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2
  %48 = bitcast [16 x i32]* %47 to <4 x i32>*
  %49 = load <4 x i32>, <4 x i32>* %48, align 1
  %50 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2, i64 4
  %51 = bitcast i32* %50 to <4 x i32>*
  %52 = load <4 x i32>, <4 x i32>* %51, align 1
  %53 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2, i64 8
  %54 = bitcast i32* %53 to <4 x i32>*
  %55 = load <4 x i32>, <4 x i32>* %54, align 1
  %56 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2, i64 12
  %57 = bitcast i32* %56 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 1
  %59 = bitcast <8 x i16> %43 to <4 x i32>
  %60 = add <4 x i32> %49, %59
  %61 = bitcast <8 x i16> %44 to <4 x i32>
  %62 = add <4 x i32> %52, %61
  %63 = bitcast <8 x i16> %45 to <4 x i32>
  %64 = add <4 x i32> %55, %63
  %65 = bitcast <8 x i16> %46 to <4 x i32>
  %66 = add <4 x i32> %58, %65
  %67 = ashr <4 x i32> %60, <i32 17, i32 17, i32 17, i32 17>
  %68 = ashr <4 x i32> %62, <i32 17, i32 17, i32 17, i32 17>
  %69 = ashr <4 x i32> %64, <i32 17, i32 17, i32 17, i32 17>
  %70 = ashr <4 x i32> %66, <i32 17, i32 17, i32 17, i32 17>
  %71 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %67, <4 x i32> %68) #8
  %72 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %69, <4 x i32> %70) #8
  %73 = icmp slt <8 x i16> %71, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %74 = select <8 x i1> %73, <8 x i16> %71, <8 x i16> <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %75 = icmp slt <8 x i16> %72, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %76 = select <8 x i1> %75, <8 x i16> %72, <8 x i16> <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %77 = xor <8 x i16> %74, %21
  %78 = xor <8 x i16> %76, %22
  %79 = sub <8 x i16> %77, %21
  %80 = sub <8 x i16> %78, %22
  %81 = mul <8 x i16> %79, %17
  %82 = mul <8 x i16> %80, %20
  store <8 x i16> %81, <8 x i16>* %5, align 1
  store <8 x i16> %82, <8 x i16>* %8, align 1
  %83 = shufflevector <8 x i16> %79, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 7, i32 5, i32 6>
  %84 = bitcast <8 x i16> %83 to <4 x i32>
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %86 = bitcast <4 x i32> %85 to <8 x i16>
  %87 = shufflevector <8 x i16> %86, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 6, i32 4, i32 5, i32 7>
  %88 = shufflevector <8 x i16> %80, <8 x i16> undef, <8 x i32> <i32 1, i32 2, i32 0, i32 3, i32 4, i32 5, i32 6, i32 7>
  %89 = bitcast <8 x i16> %88 to <4 x i32>
  %90 = shufflevector <4 x i32> %89, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %91 = bitcast <4 x i32> %90 to <8 x i16>
  %92 = shufflevector <8 x i16> %91, <8 x i16> undef, <8 x i32> <i32 0, i32 2, i32 3, i32 1, i32 4, i32 5, i32 6, i32 7>
  %93 = bitcast i16* %1 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %93, align 1
  %94 = getelementptr inbounds i16, i16* %1, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %95, align 1
  %96 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %87, <8 x i16> %92) #8
  %97 = getelementptr inbounds i16, i16* %1, i64 12
  %98 = extractelement <8 x i16> %91, i32 4
  %99 = getelementptr inbounds i16, i16* %1, i64 3
  %100 = extractelement <8 x i16> %86, i32 3
  store i16 %98, i16* %99, align 2
  store i16 %100, i16* %97, align 2
  %101 = icmp eq <16 x i8> %96, zeroinitializer
  %102 = bitcast <16 x i1> %101 to i16
  %103 = icmp ne i16 %102, -1
  %104 = zext i1 %103 to i32
  ret i32 %104
}

; Function Attrs: nofree nounwind ssp uwtable
define internal i32 @Quantize2Blocks_SSE2(i16* nocapture, i16* nocapture, %struct.VP8Matrix* readonly) #2 {
  %4 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 4, i64 0
  %5 = bitcast i16* %0 to <8 x i16>*
  %6 = load <8 x i16>, <8 x i16>* %5, align 1
  %7 = getelementptr inbounds i16, i16* %0, i64 8
  %8 = bitcast i16* %7 to <8 x i16>*
  %9 = load <8 x i16>, <8 x i16>* %8, align 1
  %10 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 1
  %11 = bitcast [16 x i16]* %10 to <8 x i16>*
  %12 = load <8 x i16>, <8 x i16>* %11, align 1
  %13 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 1, i64 8
  %14 = bitcast i16* %13 to <8 x i16>*
  %15 = load <8 x i16>, <8 x i16>* %14, align 1
  %16 = bitcast %struct.VP8Matrix* %2 to <8 x i16>*
  %17 = load <8 x i16>, <8 x i16>* %16, align 1
  %18 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 0, i64 8
  %19 = bitcast i16* %18 to <8 x i16>*
  %20 = load <8 x i16>, <8 x i16>* %19, align 1
  %21 = ashr <8 x i16> %6, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %22 = ashr <8 x i16> %9, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %23 = xor <8 x i16> %21, %6
  %24 = sub <8 x i16> %23, %21
  %25 = xor <8 x i16> %22, %9
  %26 = sub <8 x i16> %25, %22
  %27 = icmp eq i16* %4, null
  br i1 %27, label %36, label %28

28:                                               ; preds = %3
  %29 = bitcast i16* %4 to <8 x i16>*
  %30 = load <8 x i16>, <8 x i16>* %29, align 1
  %31 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 4, i64 8
  %32 = bitcast i16* %31 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = add <8 x i16> %30, %24
  %35 = add <8 x i16> %33, %26
  br label %36

36:                                               ; preds = %3, %28
  %37 = phi <8 x i16> [ %35, %28 ], [ %26, %3 ]
  %38 = phi <8 x i16> [ %34, %28 ], [ %24, %3 ]
  %39 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %38, <8 x i16> %12) #8
  %40 = mul <8 x i16> %38, %12
  %41 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %37, <8 x i16> %15) #8
  %42 = mul <8 x i16> %37, %15
  %43 = shufflevector <8 x i16> %40, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %44 = shufflevector <8 x i16> %40, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %45 = shufflevector <8 x i16> %42, <8 x i16> %41, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %46 = shufflevector <8 x i16> %42, <8 x i16> %41, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %47 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2
  %48 = bitcast [16 x i32]* %47 to <4 x i32>*
  %49 = load <4 x i32>, <4 x i32>* %48, align 1
  %50 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2, i64 4
  %51 = bitcast i32* %50 to <4 x i32>*
  %52 = load <4 x i32>, <4 x i32>* %51, align 1
  %53 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2, i64 8
  %54 = bitcast i32* %53 to <4 x i32>*
  %55 = load <4 x i32>, <4 x i32>* %54, align 1
  %56 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2, i64 12
  %57 = bitcast i32* %56 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 1
  %59 = bitcast <8 x i16> %43 to <4 x i32>
  %60 = add <4 x i32> %49, %59
  %61 = bitcast <8 x i16> %44 to <4 x i32>
  %62 = add <4 x i32> %52, %61
  %63 = bitcast <8 x i16> %45 to <4 x i32>
  %64 = add <4 x i32> %55, %63
  %65 = bitcast <8 x i16> %46 to <4 x i32>
  %66 = add <4 x i32> %58, %65
  %67 = ashr <4 x i32> %60, <i32 17, i32 17, i32 17, i32 17>
  %68 = ashr <4 x i32> %62, <i32 17, i32 17, i32 17, i32 17>
  %69 = ashr <4 x i32> %64, <i32 17, i32 17, i32 17, i32 17>
  %70 = ashr <4 x i32> %66, <i32 17, i32 17, i32 17, i32 17>
  %71 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %67, <4 x i32> %68) #8
  %72 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %69, <4 x i32> %70) #8
  %73 = icmp slt <8 x i16> %71, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %74 = select <8 x i1> %73, <8 x i16> %71, <8 x i16> <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %75 = icmp slt <8 x i16> %72, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %76 = select <8 x i1> %75, <8 x i16> %72, <8 x i16> <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %77 = xor <8 x i16> %74, %21
  %78 = xor <8 x i16> %76, %22
  %79 = sub <8 x i16> %77, %21
  %80 = sub <8 x i16> %78, %22
  %81 = mul <8 x i16> %79, %17
  %82 = mul <8 x i16> %80, %20
  store <8 x i16> %81, <8 x i16>* %5, align 1
  store <8 x i16> %82, <8 x i16>* %8, align 1
  %83 = shufflevector <8 x i16> %79, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 7, i32 5, i32 6>
  %84 = bitcast <8 x i16> %83 to <4 x i32>
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %86 = bitcast <4 x i32> %85 to <8 x i16>
  %87 = shufflevector <8 x i16> %86, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 6, i32 4, i32 5, i32 7>
  %88 = shufflevector <8 x i16> %80, <8 x i16> undef, <8 x i32> <i32 1, i32 2, i32 0, i32 3, i32 4, i32 5, i32 6, i32 7>
  %89 = bitcast <8 x i16> %88 to <4 x i32>
  %90 = shufflevector <4 x i32> %89, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %91 = bitcast <4 x i32> %90 to <8 x i16>
  %92 = shufflevector <8 x i16> %91, <8 x i16> undef, <8 x i32> <i32 0, i32 2, i32 3, i32 1, i32 4, i32 5, i32 6, i32 7>
  %93 = bitcast i16* %1 to <8 x i16>*
  store <8 x i16> %87, <8 x i16>* %93, align 1
  %94 = getelementptr inbounds i16, i16* %1, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %95, align 1
  %96 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %87, <8 x i16> %92) #8
  %97 = getelementptr inbounds i16, i16* %1, i64 12
  %98 = extractelement <8 x i16> %91, i32 4
  %99 = getelementptr inbounds i16, i16* %1, i64 3
  %100 = extractelement <8 x i16> %86, i32 3
  store i16 %98, i16* %99, align 2
  store i16 %100, i16* %97, align 2
  %101 = icmp eq <16 x i8> %96, zeroinitializer
  %102 = bitcast <16 x i1> %101 to i16
  %103 = icmp ne i16 %102, -1
  %104 = zext i1 %103 to i32
  %105 = getelementptr inbounds i16, i16* %0, i64 16
  %106 = getelementptr inbounds i16, i16* %1, i64 16
  %107 = bitcast i16* %105 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 1
  %109 = getelementptr inbounds i16, i16* %0, i64 24
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 1
  %112 = load <8 x i16>, <8 x i16>* %11, align 1
  %113 = load <8 x i16>, <8 x i16>* %14, align 1
  %114 = load <8 x i16>, <8 x i16>* %16, align 1
  %115 = load <8 x i16>, <8 x i16>* %19, align 1
  %116 = ashr <8 x i16> %108, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %117 = ashr <8 x i16> %111, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %118 = xor <8 x i16> %116, %108
  %119 = sub <8 x i16> %118, %116
  %120 = xor <8 x i16> %117, %111
  %121 = sub <8 x i16> %120, %117
  br i1 %27, label %130, label %122

122:                                              ; preds = %36
  %123 = bitcast i16* %4 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 1
  %125 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 4, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 1
  %128 = add <8 x i16> %124, %119
  %129 = add <8 x i16> %127, %121
  br label %130

130:                                              ; preds = %36, %122
  %131 = phi <8 x i16> [ %129, %122 ], [ %121, %36 ]
  %132 = phi <8 x i16> [ %128, %122 ], [ %119, %36 ]
  %133 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %132, <8 x i16> %112) #8
  %134 = mul <8 x i16> %132, %112
  %135 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %131, <8 x i16> %113) #8
  %136 = mul <8 x i16> %131, %113
  %137 = shufflevector <8 x i16> %134, <8 x i16> %133, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %138 = shufflevector <8 x i16> %134, <8 x i16> %133, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %139 = shufflevector <8 x i16> %136, <8 x i16> %135, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %140 = shufflevector <8 x i16> %136, <8 x i16> %135, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %141 = load <4 x i32>, <4 x i32>* %48, align 1
  %142 = load <4 x i32>, <4 x i32>* %51, align 1
  %143 = load <4 x i32>, <4 x i32>* %54, align 1
  %144 = load <4 x i32>, <4 x i32>* %57, align 1
  %145 = bitcast <8 x i16> %137 to <4 x i32>
  %146 = add <4 x i32> %141, %145
  %147 = bitcast <8 x i16> %138 to <4 x i32>
  %148 = add <4 x i32> %142, %147
  %149 = bitcast <8 x i16> %139 to <4 x i32>
  %150 = add <4 x i32> %143, %149
  %151 = bitcast <8 x i16> %140 to <4 x i32>
  %152 = add <4 x i32> %144, %151
  %153 = ashr <4 x i32> %146, <i32 17, i32 17, i32 17, i32 17>
  %154 = ashr <4 x i32> %148, <i32 17, i32 17, i32 17, i32 17>
  %155 = ashr <4 x i32> %150, <i32 17, i32 17, i32 17, i32 17>
  %156 = ashr <4 x i32> %152, <i32 17, i32 17, i32 17, i32 17>
  %157 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %153, <4 x i32> %154) #8
  %158 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %155, <4 x i32> %156) #8
  %159 = icmp slt <8 x i16> %157, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %160 = select <8 x i1> %159, <8 x i16> %157, <8 x i16> <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %161 = icmp slt <8 x i16> %158, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %162 = select <8 x i1> %161, <8 x i16> %158, <8 x i16> <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %163 = xor <8 x i16> %160, %116
  %164 = xor <8 x i16> %162, %117
  %165 = sub <8 x i16> %163, %116
  %166 = sub <8 x i16> %164, %117
  %167 = mul <8 x i16> %165, %114
  %168 = mul <8 x i16> %166, %115
  store <8 x i16> %167, <8 x i16>* %107, align 1
  store <8 x i16> %168, <8 x i16>* %110, align 1
  %169 = shufflevector <8 x i16> %165, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 7, i32 5, i32 6>
  %170 = bitcast <8 x i16> %169 to <4 x i32>
  %171 = shufflevector <4 x i32> %170, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %172 = bitcast <4 x i32> %171 to <8 x i16>
  %173 = shufflevector <8 x i16> %172, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 6, i32 4, i32 5, i32 7>
  %174 = shufflevector <8 x i16> %166, <8 x i16> undef, <8 x i32> <i32 1, i32 2, i32 0, i32 3, i32 4, i32 5, i32 6, i32 7>
  %175 = bitcast <8 x i16> %174 to <4 x i32>
  %176 = shufflevector <4 x i32> %175, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %177 = bitcast <4 x i32> %176 to <8 x i16>
  %178 = shufflevector <8 x i16> %177, <8 x i16> undef, <8 x i32> <i32 0, i32 2, i32 3, i32 1, i32 4, i32 5, i32 6, i32 7>
  %179 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %173, <8 x i16>* %179, align 1
  %180 = getelementptr inbounds i16, i16* %1, i64 24
  %181 = bitcast i16* %180 to <8 x i16>*
  store <8 x i16> %178, <8 x i16>* %181, align 1
  %182 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %173, <8 x i16> %178) #8
  %183 = getelementptr inbounds i16, i16* %1, i64 28
  %184 = extractelement <8 x i16> %177, i32 4
  %185 = getelementptr inbounds i16, i16* %1, i64 19
  %186 = extractelement <8 x i16> %172, i32 3
  store i16 %184, i16* %185, align 2
  store i16 %186, i16* %183, align 2
  %187 = icmp eq <16 x i8> %182, zeroinitializer
  %188 = bitcast <16 x i1> %187 to i16
  %189 = icmp ne i16 %188, -1
  %190 = zext i1 %189 to i32
  %191 = shl nuw nsw i32 %190, 1
  %192 = or i32 %191, %104
  ret i32 %192
}

; Function Attrs: nofree nounwind ssp uwtable
define internal i32 @QuantizeBlockWHT_SSE2(i16* nocapture, i16* nocapture, %struct.VP8Matrix* nocapture readonly) #2 {
  %4 = bitcast i16* %0 to <8 x i16>*
  %5 = load <8 x i16>, <8 x i16>* %4, align 1
  %6 = getelementptr inbounds i16, i16* %0, i64 8
  %7 = bitcast i16* %6 to <8 x i16>*
  %8 = load <8 x i16>, <8 x i16>* %7, align 1
  %9 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 1
  %10 = bitcast [16 x i16]* %9 to <8 x i16>*
  %11 = load <8 x i16>, <8 x i16>* %10, align 1
  %12 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 1, i64 8
  %13 = bitcast i16* %12 to <8 x i16>*
  %14 = load <8 x i16>, <8 x i16>* %13, align 1
  %15 = bitcast %struct.VP8Matrix* %2 to <8 x i16>*
  %16 = load <8 x i16>, <8 x i16>* %15, align 1
  %17 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 0, i64 8
  %18 = bitcast i16* %17 to <8 x i16>*
  %19 = load <8 x i16>, <8 x i16>* %18, align 1
  %20 = ashr <8 x i16> %5, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %21 = ashr <8 x i16> %8, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %22 = xor <8 x i16> %20, %5
  %23 = sub <8 x i16> %22, %20
  %24 = xor <8 x i16> %21, %8
  %25 = sub <8 x i16> %24, %21
  %26 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %23, <8 x i16> %11) #8
  %27 = mul <8 x i16> %23, %11
  %28 = tail call <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16> %25, <8 x i16> %14) #8
  %29 = mul <8 x i16> %25, %14
  %30 = shufflevector <8 x i16> %27, <8 x i16> %26, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %31 = shufflevector <8 x i16> %27, <8 x i16> %26, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %32 = shufflevector <8 x i16> %29, <8 x i16> %28, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %33 = shufflevector <8 x i16> %29, <8 x i16> %28, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %34 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2
  %35 = bitcast [16 x i32]* %34 to <4 x i32>*
  %36 = load <4 x i32>, <4 x i32>* %35, align 1
  %37 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2, i64 4
  %38 = bitcast i32* %37 to <4 x i32>*
  %39 = load <4 x i32>, <4 x i32>* %38, align 1
  %40 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2, i64 8
  %41 = bitcast i32* %40 to <4 x i32>*
  %42 = load <4 x i32>, <4 x i32>* %41, align 1
  %43 = getelementptr inbounds %struct.VP8Matrix, %struct.VP8Matrix* %2, i64 0, i32 2, i64 12
  %44 = bitcast i32* %43 to <4 x i32>*
  %45 = load <4 x i32>, <4 x i32>* %44, align 1
  %46 = bitcast <8 x i16> %30 to <4 x i32>
  %47 = add <4 x i32> %36, %46
  %48 = bitcast <8 x i16> %31 to <4 x i32>
  %49 = add <4 x i32> %39, %48
  %50 = bitcast <8 x i16> %32 to <4 x i32>
  %51 = add <4 x i32> %42, %50
  %52 = bitcast <8 x i16> %33 to <4 x i32>
  %53 = add <4 x i32> %45, %52
  %54 = ashr <4 x i32> %47, <i32 17, i32 17, i32 17, i32 17>
  %55 = ashr <4 x i32> %49, <i32 17, i32 17, i32 17, i32 17>
  %56 = ashr <4 x i32> %51, <i32 17, i32 17, i32 17, i32 17>
  %57 = ashr <4 x i32> %53, <i32 17, i32 17, i32 17, i32 17>
  %58 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %54, <4 x i32> %55) #8
  %59 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %56, <4 x i32> %57) #8
  %60 = icmp slt <8 x i16> %58, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %61 = select <8 x i1> %60, <8 x i16> %58, <8 x i16> <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %62 = icmp slt <8 x i16> %59, <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %63 = select <8 x i1> %62, <8 x i16> %59, <8 x i16> <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>
  %64 = xor <8 x i16> %61, %20
  %65 = xor <8 x i16> %63, %21
  %66 = sub <8 x i16> %64, %20
  %67 = sub <8 x i16> %65, %21
  %68 = mul <8 x i16> %66, %16
  %69 = mul <8 x i16> %67, %19
  store <8 x i16> %68, <8 x i16>* %4, align 1
  store <8 x i16> %69, <8 x i16>* %7, align 1
  %70 = shufflevector <8 x i16> %66, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 7, i32 5, i32 6>
  %71 = bitcast <8 x i16> %70 to <4 x i32>
  %72 = shufflevector <4 x i32> %71, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %73 = bitcast <4 x i32> %72 to <8 x i16>
  %74 = shufflevector <8 x i16> %73, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 6, i32 4, i32 5, i32 7>
  %75 = shufflevector <8 x i16> %67, <8 x i16> undef, <8 x i32> <i32 1, i32 2, i32 0, i32 3, i32 4, i32 5, i32 6, i32 7>
  %76 = bitcast <8 x i16> %75 to <4 x i32>
  %77 = shufflevector <4 x i32> %76, <4 x i32> undef, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %78 = bitcast <4 x i32> %77 to <8 x i16>
  %79 = shufflevector <8 x i16> %78, <8 x i16> undef, <8 x i32> <i32 0, i32 2, i32 3, i32 1, i32 4, i32 5, i32 6, i32 7>
  %80 = bitcast i16* %1 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %80, align 1
  %81 = getelementptr inbounds i16, i16* %1, i64 8
  %82 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %79, <8 x i16>* %82, align 1
  %83 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %74, <8 x i16> %79) #8
  %84 = getelementptr inbounds i16, i16* %1, i64 12
  %85 = extractelement <8 x i16> %78, i32 4
  %86 = getelementptr inbounds i16, i16* %1, i64 3
  %87 = extractelement <8 x i16> %73, i32 3
  store i16 %85, i16* %86, align 2
  store i16 %87, i16* %84, align 2
  %88 = icmp eq <16 x i8> %83, zeroinitializer
  %89 = bitcast <16 x i1> %88 to i16
  %90 = icmp ne i16 %89, -1
  %91 = zext i1 %90 to i32
  ret i32 %91
}

; Function Attrs: nounwind ssp uwtable
define internal void @ITransform_SSE2(i8* nocapture readonly, i16* nocapture readonly, i8* nocapture, i32) #1 {
  %5 = bitcast i16* %1 to i64*
  %6 = load i64, i64* %5, align 1
  %7 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %6, i32 0
  %8 = getelementptr inbounds i16, i16* %1, i64 4
  %9 = bitcast i16* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %10, i32 0
  %12 = getelementptr inbounds i16, i16* %1, i64 8
  %13 = bitcast i16* %12 to i64*
  %14 = load i64, i64* %13, align 1
  %15 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %14, i32 0
  %16 = getelementptr inbounds i16, i16* %1, i64 12
  %17 = bitcast i16* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %18, i32 0
  %20 = icmp ne i32 %3, 0
  br i1 %20, label %21, label %38

21:                                               ; preds = %4
  %22 = getelementptr inbounds i16, i16* %1, i64 16
  %23 = bitcast i16* %22 to i64*
  %24 = load i64, i64* %23, align 1
  %25 = getelementptr inbounds i16, i16* %1, i64 20
  %26 = bitcast i16* %25 to i64*
  %27 = load i64, i64* %26, align 1
  %28 = getelementptr inbounds i16, i16* %1, i64 24
  %29 = bitcast i16* %28 to i64*
  %30 = load i64, i64* %29, align 1
  %31 = getelementptr inbounds i16, i16* %1, i64 28
  %32 = bitcast i16* %31 to i64*
  %33 = load i64, i64* %32, align 1
  %34 = insertelement <2 x i64> %7, i64 %24, i32 1
  %35 = insertelement <2 x i64> %11, i64 %27, i32 1
  %36 = insertelement <2 x i64> %15, i64 %30, i32 1
  %37 = insertelement <2 x i64> %19, i64 %33, i32 1
  br label %38

38:                                               ; preds = %21, %4
  %39 = phi <2 x i64> [ %37, %21 ], [ %19, %4 ]
  %40 = phi <2 x i64> [ %36, %21 ], [ %15, %4 ]
  %41 = phi <2 x i64> [ %35, %21 ], [ %11, %4 ]
  %42 = phi <2 x i64> [ %34, %21 ], [ %7, %4 ]
  %43 = bitcast <2 x i64> %42 to <8 x i16>
  %44 = bitcast <2 x i64> %40 to <8 x i16>
  %45 = add <8 x i16> %43, %44
  %46 = sub <8 x i16> %43, %44
  %47 = bitcast <2 x i64> %41 to <8 x i16>
  %48 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %47, <8 x i16> <i16 -30068, i16 -30068, i16 -30068, i16 -30068, i16 -30068, i16 -30068, i16 -30068, i16 -30068>) #8
  %49 = bitcast <2 x i64> %39 to <8 x i16>
  %50 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %49, <8 x i16> <i16 20091, i16 20091, i16 20091, i16 20091, i16 20091, i16 20091, i16 20091, i16 20091>) #8
  %51 = sub <8 x i16> %47, %49
  %52 = sub <8 x i16> %48, %50
  %53 = add <8 x i16> %52, %51
  %54 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %47, <8 x i16> <i16 20091, i16 20091, i16 20091, i16 20091, i16 20091, i16 20091, i16 20091, i16 20091>) #8
  %55 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %49, <8 x i16> <i16 -30068, i16 -30068, i16 -30068, i16 -30068, i16 -30068, i16 -30068, i16 -30068, i16 -30068>) #8
  %56 = add <8 x i16> %47, %49
  %57 = add <8 x i16> %56, %54
  %58 = add <8 x i16> %57, %55
  %59 = add <8 x i16> %58, %45
  %60 = add <8 x i16> %53, %46
  %61 = sub <8 x i16> %46, %53
  %62 = sub <8 x i16> %45, %58
  %63 = shufflevector <8 x i16> %59, <8 x i16> %60, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %64 = shufflevector <8 x i16> %61, <8 x i16> %62, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %65 = shufflevector <8 x i16> %59, <8 x i16> %60, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %66 = shufflevector <8 x i16> %61, <8 x i16> %62, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %67 = bitcast <8 x i16> %63 to <4 x i32>
  %68 = bitcast <8 x i16> %64 to <4 x i32>
  %69 = shufflevector <4 x i32> %67, <4 x i32> %68, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %70 = bitcast <4 x i32> %69 to <2 x i64>
  %71 = bitcast <8 x i16> %65 to <4 x i32>
  %72 = bitcast <8 x i16> %66 to <4 x i32>
  %73 = shufflevector <4 x i32> %71, <4 x i32> %72, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %74 = bitcast <4 x i32> %73 to <2 x i64>
  %75 = shufflevector <4 x i32> %67, <4 x i32> %68, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %76 = bitcast <4 x i32> %75 to <2 x i64>
  %77 = shufflevector <4 x i32> %71, <4 x i32> %72, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %78 = bitcast <4 x i32> %77 to <2 x i64>
  %79 = shufflevector <2 x i64> %70, <2 x i64> %74, <2 x i32> <i32 0, i32 2>
  %80 = shufflevector <2 x i64> %70, <2 x i64> %74, <2 x i32> <i32 1, i32 3>
  %81 = shufflevector <2 x i64> %76, <2 x i64> %78, <2 x i32> <i32 0, i32 2>
  %82 = shufflevector <2 x i64> %76, <2 x i64> %78, <2 x i32> <i32 1, i32 3>
  %83 = bitcast <2 x i64> %79 to <8 x i16>
  %84 = add <8 x i16> %83, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %85 = bitcast <2 x i64> %81 to <8 x i16>
  %86 = add <8 x i16> %84, %85
  %87 = sub <8 x i16> %84, %85
  %88 = bitcast <2 x i64> %80 to <8 x i16>
  %89 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %88, <8 x i16> <i16 -30068, i16 -30068, i16 -30068, i16 -30068, i16 -30068, i16 -30068, i16 -30068, i16 -30068>) #8
  %90 = bitcast <2 x i64> %82 to <8 x i16>
  %91 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %90, <8 x i16> <i16 20091, i16 20091, i16 20091, i16 20091, i16 20091, i16 20091, i16 20091, i16 20091>) #8
  %92 = sub <8 x i16> %88, %90
  %93 = sub <8 x i16> %89, %91
  %94 = add <8 x i16> %92, %93
  %95 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %88, <8 x i16> <i16 20091, i16 20091, i16 20091, i16 20091, i16 20091, i16 20091, i16 20091, i16 20091>) #8
  %96 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %90, <8 x i16> <i16 -30068, i16 -30068, i16 -30068, i16 -30068, i16 -30068, i16 -30068, i16 -30068, i16 -30068>) #8
  %97 = add <8 x i16> %96, %95
  %98 = add <8 x i16> %97, %88
  %99 = add <8 x i16> %98, %90
  %100 = add <8 x i16> %86, %99
  %101 = add <8 x i16> %94, %87
  %102 = sub <8 x i16> %87, %94
  %103 = sub <8 x i16> %86, %99
  %104 = ashr <8 x i16> %100, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %105 = ashr <8 x i16> %101, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %106 = ashr <8 x i16> %102, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %107 = ashr <8 x i16> %103, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %108 = shufflevector <8 x i16> %104, <8 x i16> %105, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %109 = shufflevector <8 x i16> %106, <8 x i16> %107, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %110 = shufflevector <8 x i16> %104, <8 x i16> %105, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %111 = shufflevector <8 x i16> %106, <8 x i16> %107, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %112 = bitcast <8 x i16> %108 to <4 x i32>
  %113 = bitcast <8 x i16> %109 to <4 x i32>
  %114 = shufflevector <4 x i32> %112, <4 x i32> %113, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %115 = bitcast <4 x i32> %114 to <2 x i64>
  %116 = bitcast <8 x i16> %110 to <4 x i32>
  %117 = bitcast <8 x i16> %111 to <4 x i32>
  %118 = shufflevector <4 x i32> %116, <4 x i32> %117, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %119 = bitcast <4 x i32> %118 to <2 x i64>
  %120 = shufflevector <4 x i32> %112, <4 x i32> %113, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %121 = bitcast <4 x i32> %120 to <2 x i64>
  %122 = shufflevector <4 x i32> %116, <4 x i32> %117, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %123 = bitcast <4 x i32> %122 to <2 x i64>
  %124 = shufflevector <2 x i64> %115, <2 x i64> %119, <2 x i32> <i32 0, i32 2>
  %125 = shufflevector <2 x i64> %115, <2 x i64> %119, <2 x i32> <i32 1, i32 3>
  %126 = shufflevector <2 x i64> %121, <2 x i64> %123, <2 x i32> <i32 0, i32 2>
  %127 = shufflevector <2 x i64> %121, <2 x i64> %123, <2 x i32> <i32 1, i32 3>
  br i1 %20, label %128, label %144

128:                                              ; preds = %38
  %129 = bitcast i8* %0 to i64*
  %130 = load i64, i64* %129, align 1
  %131 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %130, i32 0
  %132 = getelementptr inbounds i8, i8* %0, i64 32
  %133 = bitcast i8* %132 to i64*
  %134 = load i64, i64* %133, align 1
  %135 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %134, i32 0
  %136 = getelementptr inbounds i8, i8* %0, i64 64
  %137 = bitcast i8* %136 to i64*
  %138 = load i64, i64* %137, align 1
  %139 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %138, i32 0
  %140 = getelementptr inbounds i8, i8* %0, i64 96
  %141 = bitcast i8* %140 to i64*
  %142 = load i64, i64* %141, align 1
  %143 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %142, i32 0
  br label %164

144:                                              ; preds = %38
  %145 = bitcast i8* %0 to i32*
  %146 = load i32, i32* %145, align 1
  %147 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %146, i32 0
  %148 = bitcast <4 x i32> %147 to <2 x i64>
  %149 = getelementptr inbounds i8, i8* %0, i64 32
  %150 = bitcast i8* %149 to i32*
  %151 = load i32, i32* %150, align 1
  %152 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %151, i32 0
  %153 = bitcast <4 x i32> %152 to <2 x i64>
  %154 = getelementptr inbounds i8, i8* %0, i64 64
  %155 = bitcast i8* %154 to i32*
  %156 = load i32, i32* %155, align 1
  %157 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %156, i32 0
  %158 = bitcast <4 x i32> %157 to <2 x i64>
  %159 = getelementptr inbounds i8, i8* %0, i64 96
  %160 = bitcast i8* %159 to i32*
  %161 = load i32, i32* %160, align 1
  %162 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %161, i32 0
  %163 = bitcast <4 x i32> %162 to <2 x i64>
  br label %164

164:                                              ; preds = %144, %128
  %165 = phi <2 x i64> [ %131, %128 ], [ %148, %144 ]
  %166 = phi <2 x i64> [ %135, %128 ], [ %153, %144 ]
  %167 = phi <2 x i64> [ %139, %128 ], [ %158, %144 ]
  %168 = phi <2 x i64> [ %143, %128 ], [ %163, %144 ]
  %169 = bitcast <2 x i64> %165 to <16 x i8>
  %170 = shufflevector <16 x i8> %169, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %171 = bitcast <2 x i64> %166 to <16 x i8>
  %172 = shufflevector <16 x i8> %171, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %173 = bitcast <2 x i64> %167 to <16 x i8>
  %174 = shufflevector <16 x i8> %173, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %175 = bitcast <2 x i64> %168 to <16 x i8>
  %176 = shufflevector <16 x i8> %175, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %177 = bitcast <16 x i8> %170 to <8 x i16>
  %178 = bitcast <2 x i64> %124 to <8 x i16>
  %179 = add <8 x i16> %177, %178
  %180 = bitcast <16 x i8> %172 to <8 x i16>
  %181 = bitcast <2 x i64> %125 to <8 x i16>
  %182 = add <8 x i16> %180, %181
  %183 = bitcast <16 x i8> %174 to <8 x i16>
  %184 = bitcast <2 x i64> %126 to <8 x i16>
  %185 = add <8 x i16> %183, %184
  %186 = bitcast <16 x i8> %176 to <8 x i16>
  %187 = bitcast <2 x i64> %127 to <8 x i16>
  %188 = add <8 x i16> %186, %187
  %189 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %179, <8 x i16> %179) #8
  %190 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %182, <8 x i16> %182) #8
  %191 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %185, <8 x i16> %185) #8
  %192 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %188, <8 x i16> %188) #8
  br i1 %20, label %193, label %209

193:                                              ; preds = %164
  %194 = bitcast <16 x i8> %192 to <2 x i64>
  %195 = bitcast <16 x i8> %191 to <2 x i64>
  %196 = bitcast <16 x i8> %190 to <2 x i64>
  %197 = bitcast <16 x i8> %189 to <2 x i64>
  %198 = extractelement <2 x i64> %197, i32 0
  %199 = bitcast i8* %2 to i64*
  store i64 %198, i64* %199, align 1
  %200 = getelementptr inbounds i8, i8* %2, i64 32
  %201 = extractelement <2 x i64> %196, i32 0
  %202 = bitcast i8* %200 to i64*
  store i64 %201, i64* %202, align 1
  %203 = getelementptr inbounds i8, i8* %2, i64 64
  %204 = extractelement <2 x i64> %195, i32 0
  %205 = bitcast i8* %203 to i64*
  store i64 %204, i64* %205, align 1
  %206 = getelementptr inbounds i8, i8* %2, i64 96
  %207 = extractelement <2 x i64> %194, i32 0
  %208 = bitcast i8* %206 to i64*
  store i64 %207, i64* %208, align 1
  br label %225

209:                                              ; preds = %164
  %210 = bitcast <16 x i8> %189 to <4 x i32>
  %211 = extractelement <4 x i32> %210, i32 0
  %212 = bitcast i8* %2 to i32*
  store i32 %211, i32* %212, align 1
  %213 = getelementptr inbounds i8, i8* %2, i64 32
  %214 = bitcast <16 x i8> %190 to <4 x i32>
  %215 = extractelement <4 x i32> %214, i32 0
  %216 = bitcast i8* %213 to i32*
  store i32 %215, i32* %216, align 1
  %217 = getelementptr inbounds i8, i8* %2, i64 64
  %218 = bitcast <16 x i8> %191 to <4 x i32>
  %219 = extractelement <4 x i32> %218, i32 0
  %220 = bitcast i8* %217 to i32*
  store i32 %219, i32* %220, align 1
  %221 = getelementptr inbounds i8, i8* %2, i64 96
  %222 = bitcast <16 x i8> %192 to <4 x i32>
  %223 = extractelement <4 x i32> %222, i32 0
  %224 = bitcast i8* %221 to i32*
  store i32 %223, i32* %224, align 1
  br label %225

225:                                              ; preds = %209, %193
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @FTransform_SSE2(i8* nocapture readonly, i8* nocapture readonly, i16* nocapture) #1 {
  %4 = bitcast i8* %0 to i64*
  %5 = load i64, i64* %4, align 1
  %6 = insertelement <2 x i64> undef, i64 %5, i32 0
  %7 = getelementptr inbounds i8, i8* %0, i64 32
  %8 = bitcast i8* %7 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = insertelement <2 x i64> undef, i64 %9, i32 0
  %11 = getelementptr inbounds i8, i8* %0, i64 64
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = insertelement <2 x i64> undef, i64 %13, i32 0
  %15 = getelementptr inbounds i8, i8* %0, i64 96
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 1
  %18 = insertelement <2 x i64> undef, i64 %17, i32 0
  %19 = bitcast <2 x i64> %6 to <8 x i16>
  %20 = bitcast <2 x i64> %10 to <8 x i16>
  %21 = shufflevector <8 x i16> %19, <8 x i16> %20, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 undef, i32 undef, i32 undef, i32 undef>
  %22 = bitcast <2 x i64> %14 to <8 x i16>
  %23 = bitcast <2 x i64> %18 to <8 x i16>
  %24 = shufflevector <8 x i16> %22, <8 x i16> %23, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 undef, i32 undef, i32 undef, i32 undef>
  %25 = bitcast i8* %1 to i64*
  %26 = load i64, i64* %25, align 1
  %27 = insertelement <2 x i64> undef, i64 %26, i32 0
  %28 = getelementptr inbounds i8, i8* %1, i64 32
  %29 = bitcast i8* %28 to i64*
  %30 = load i64, i64* %29, align 1
  %31 = insertelement <2 x i64> undef, i64 %30, i32 0
  %32 = getelementptr inbounds i8, i8* %1, i64 64
  %33 = bitcast i8* %32 to i64*
  %34 = load i64, i64* %33, align 1
  %35 = insertelement <2 x i64> undef, i64 %34, i32 0
  %36 = getelementptr inbounds i8, i8* %1, i64 96
  %37 = bitcast i8* %36 to i64*
  %38 = load i64, i64* %37, align 1
  %39 = insertelement <2 x i64> undef, i64 %38, i32 0
  %40 = bitcast <2 x i64> %27 to <8 x i16>
  %41 = bitcast <2 x i64> %31 to <8 x i16>
  %42 = shufflevector <8 x i16> %40, <8 x i16> %41, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 undef, i32 undef, i32 undef, i32 undef>
  %43 = bitcast <2 x i64> %35 to <8 x i16>
  %44 = bitcast <2 x i64> %39 to <8 x i16>
  %45 = shufflevector <8 x i16> %43, <8 x i16> %44, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = bitcast <8 x i16> %21 to <16 x i8>
  %47 = shufflevector <16 x i8> %46, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %48 = bitcast <8 x i16> %24 to <16 x i8>
  %49 = shufflevector <16 x i8> %48, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %50 = bitcast <8 x i16> %42 to <16 x i8>
  %51 = shufflevector <16 x i8> %50, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %52 = bitcast <8 x i16> %45 to <16 x i8>
  %53 = shufflevector <16 x i8> %52, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %54 = bitcast <16 x i8> %47 to <8 x i16>
  %55 = bitcast <16 x i8> %51 to <8 x i16>
  %56 = sub <8 x i16> %54, %55
  %57 = bitcast <16 x i8> %49 to <8 x i16>
  %58 = bitcast <16 x i8> %53 to <8 x i16>
  %59 = sub <8 x i16> %57, %58
  %60 = shufflevector <8 x i16> %56, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %61 = bitcast <8 x i16> %60 to <2 x i64>
  %62 = shufflevector <8 x i16> %59, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %63 = bitcast <8 x i16> %62 to <2 x i64>
  %64 = shufflevector <2 x i64> %61, <2 x i64> %63, <2 x i32> <i32 0, i32 2>
  %65 = shufflevector <2 x i64> %61, <2 x i64> %63, <2 x i32> <i32 1, i32 3>
  %66 = bitcast <2 x i64> %64 to <8 x i16>
  %67 = bitcast <2 x i64> %65 to <8 x i16>
  %68 = add <8 x i16> %67, %66
  %69 = sub <8 x i16> %66, %67
  %70 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %68, <8 x i16> <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>) #8
  %71 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %68, <8 x i16> <i16 8, i16 -8, i16 8, i16 -8, i16 8, i16 -8, i16 8, i16 -8>) #8
  %72 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %69, <8 x i16> <i16 5352, i16 2217, i16 5352, i16 2217, i16 5352, i16 2217, i16 5352, i16 2217>) #8
  %73 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %69, <8 x i16> <i16 2217, i16 -5352, i16 2217, i16 -5352, i16 2217, i16 -5352, i16 2217, i16 -5352>) #8
  %74 = add <4 x i32> %72, <i32 1812, i32 1812, i32 1812, i32 1812>
  %75 = add <4 x i32> %73, <i32 937, i32 937, i32 937, i32 937>
  %76 = ashr <4 x i32> %74, <i32 9, i32 9, i32 9, i32 9>
  %77 = ashr <4 x i32> %75, <i32 9, i32 9, i32 9, i32 9>
  %78 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %70, <4 x i32> %71) #8
  %79 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %76, <4 x i32> %77) #8
  %80 = shufflevector <8 x i16> %78, <8 x i16> %79, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %81 = shufflevector <8 x i16> %78, <8 x i16> %79, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %82 = bitcast <8 x i16> %80 to <4 x i32>
  %83 = bitcast <8 x i16> %81 to <4 x i32>
  %84 = shufflevector <4 x i32> %82, <4 x i32> %83, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %85 = shufflevector <4 x i32> %82, <4 x i32> %83, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %86 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %87 = bitcast <4 x i32> %85 to <8 x i16>
  %88 = bitcast <4 x i32> %86 to <8 x i16>
  %89 = sub <8 x i16> %87, %88
  %90 = bitcast <8 x i16> %89 to <2 x i64>
  %91 = shufflevector <2 x i64> %90, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %92 = bitcast <2 x i64> %91 to <8 x i16>
  %93 = shufflevector <8 x i16> %92, <8 x i16> %89, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %94 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %93, <8 x i16> <i16 2217, i16 5352, i16 2217, i16 5352, i16 2217, i16 5352, i16 2217, i16 5352>) #8
  %95 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %93, <8 x i16> <i16 -5352, i16 2217, i16 -5352, i16 2217, i16 -5352, i16 2217, i16 -5352, i16 2217>) #8
  %96 = add <4 x i32> %94, <i32 77536, i32 77536, i32 77536, i32 77536>
  %97 = add <4 x i32> %95, <i32 51000, i32 51000, i32 51000, i32 51000>
  %98 = ashr <4 x i32> %96, <i32 16, i32 16, i32 16, i32 16>
  %99 = ashr <4 x i32> %97, <i32 16, i32 16, i32 16, i32 16>
  %100 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %98, <4 x i32> undef) #8
  %101 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %99, <4 x i32> undef) #8
  %102 = bitcast <8 x i16> %101 to <2 x i64>
  %103 = icmp eq <8 x i16> %89, zeroinitializer
  %104 = zext <8 x i1> %103 to <8 x i16>
  %105 = sub <8 x i16> %100, %104
  %106 = bitcast <8 x i16> %105 to <2 x i64>
  %107 = add <8 x i16> %88, %87
  %108 = bitcast <8 x i16> %107 to <2 x i64>
  %109 = add <8 x i16> %107, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %110 = shufflevector <2 x i64> %108, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %111 = bitcast <2 x i64> %110 to <8 x i16>
  %112 = add <8 x i16> %109, %111
  %113 = sub <8 x i16> %109, %111
  %114 = ashr <8 x i16> %112, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %115 = bitcast <8 x i16> %114 to <2 x i64>
  %116 = ashr <8 x i16> %113, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %117 = bitcast <8 x i16> %116 to <2 x i64>
  %118 = shufflevector <2 x i64> %115, <2 x i64> %106, <2 x i32> <i32 0, i32 2>
  %119 = shufflevector <2 x i64> %117, <2 x i64> %102, <2 x i32> <i32 0, i32 2>
  %120 = bitcast i16* %2 to <2 x i64>*
  store <2 x i64> %118, <2 x i64>* %120, align 1
  %121 = getelementptr inbounds i16, i16* %2, i64 8
  %122 = bitcast i16* %121 to <2 x i64>*
  store <2 x i64> %119, <2 x i64>* %122, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @FTransform2_SSE2(i8* nocapture readonly, i8* nocapture readonly, i16* nocapture) #1 {
  %4 = bitcast i8* %0 to i64*
  %5 = load i64, i64* %4, align 1
  %6 = insertelement <2 x i64> undef, i64 %5, i32 0
  %7 = getelementptr inbounds i8, i8* %0, i64 32
  %8 = bitcast i8* %7 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = insertelement <2 x i64> undef, i64 %9, i32 0
  %11 = getelementptr inbounds i8, i8* %0, i64 64
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = insertelement <2 x i64> undef, i64 %13, i32 0
  %15 = getelementptr inbounds i8, i8* %0, i64 96
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 1
  %18 = insertelement <2 x i64> undef, i64 %17, i32 0
  %19 = bitcast <2 x i64> %6 to <16 x i8>
  %20 = shufflevector <16 x i8> %19, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %21 = bitcast <2 x i64> %10 to <16 x i8>
  %22 = shufflevector <16 x i8> %21, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %23 = bitcast <2 x i64> %14 to <16 x i8>
  %24 = shufflevector <16 x i8> %23, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %25 = bitcast <2 x i64> %18 to <16 x i8>
  %26 = shufflevector <16 x i8> %25, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %27 = bitcast i8* %1 to i64*
  %28 = load i64, i64* %27, align 1
  %29 = insertelement <2 x i64> undef, i64 %28, i32 0
  %30 = getelementptr inbounds i8, i8* %1, i64 32
  %31 = bitcast i8* %30 to i64*
  %32 = load i64, i64* %31, align 1
  %33 = insertelement <2 x i64> undef, i64 %32, i32 0
  %34 = getelementptr inbounds i8, i8* %1, i64 64
  %35 = bitcast i8* %34 to i64*
  %36 = load i64, i64* %35, align 1
  %37 = insertelement <2 x i64> undef, i64 %36, i32 0
  %38 = getelementptr inbounds i8, i8* %1, i64 96
  %39 = bitcast i8* %38 to i64*
  %40 = load i64, i64* %39, align 1
  %41 = insertelement <2 x i64> undef, i64 %40, i32 0
  %42 = bitcast <2 x i64> %29 to <16 x i8>
  %43 = shufflevector <16 x i8> %42, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %44 = bitcast <2 x i64> %33 to <16 x i8>
  %45 = shufflevector <16 x i8> %44, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %46 = bitcast <2 x i64> %37 to <16 x i8>
  %47 = shufflevector <16 x i8> %46, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %48 = bitcast <2 x i64> %41 to <16 x i8>
  %49 = shufflevector <16 x i8> %48, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %50 = bitcast <16 x i8> %20 to <8 x i16>
  %51 = bitcast <16 x i8> %43 to <8 x i16>
  %52 = sub <8 x i16> %50, %51
  %53 = bitcast <16 x i8> %22 to <8 x i16>
  %54 = bitcast <16 x i8> %45 to <8 x i16>
  %55 = sub <8 x i16> %53, %54
  %56 = bitcast <16 x i8> %24 to <8 x i16>
  %57 = bitcast <16 x i8> %47 to <8 x i16>
  %58 = sub <8 x i16> %56, %57
  %59 = bitcast <16 x i8> %26 to <8 x i16>
  %60 = bitcast <16 x i8> %49 to <8 x i16>
  %61 = sub <8 x i16> %59, %60
  %62 = bitcast <8 x i16> %52 to <4 x i32>
  %63 = bitcast <8 x i16> %55 to <4 x i32>
  %64 = shufflevector <4 x i32> %62, <4 x i32> %63, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %65 = bitcast <8 x i16> %58 to <4 x i32>
  %66 = bitcast <8 x i16> %61 to <4 x i32>
  %67 = shufflevector <4 x i32> %65, <4 x i32> %66, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %68 = shufflevector <4 x i32> %62, <4 x i32> %63, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %69 = shufflevector <4 x i32> %65, <4 x i32> %66, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %70 = bitcast <4 x i32> %64 to <8 x i16>
  %71 = shufflevector <8 x i16> %70, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %72 = bitcast <8 x i16> %71 to <2 x i64>
  %73 = bitcast <4 x i32> %67 to <8 x i16>
  %74 = shufflevector <8 x i16> %73, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %75 = bitcast <8 x i16> %74 to <2 x i64>
  %76 = shufflevector <2 x i64> %72, <2 x i64> %75, <2 x i32> <i32 0, i32 2>
  %77 = shufflevector <2 x i64> %72, <2 x i64> %75, <2 x i32> <i32 1, i32 3>
  %78 = bitcast <2 x i64> %76 to <8 x i16>
  %79 = bitcast <2 x i64> %77 to <8 x i16>
  %80 = add <8 x i16> %79, %78
  %81 = sub <8 x i16> %78, %79
  %82 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %80, <8 x i16> <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>) #8
  %83 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %80, <8 x i16> <i16 8, i16 -8, i16 8, i16 -8, i16 8, i16 -8, i16 8, i16 -8>) #8
  %84 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %81, <8 x i16> <i16 5352, i16 2217, i16 5352, i16 2217, i16 5352, i16 2217, i16 5352, i16 2217>) #8
  %85 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %81, <8 x i16> <i16 2217, i16 -5352, i16 2217, i16 -5352, i16 2217, i16 -5352, i16 2217, i16 -5352>) #8
  %86 = add <4 x i32> %84, <i32 1812, i32 1812, i32 1812, i32 1812>
  %87 = add <4 x i32> %85, <i32 937, i32 937, i32 937, i32 937>
  %88 = ashr <4 x i32> %86, <i32 9, i32 9, i32 9, i32 9>
  %89 = ashr <4 x i32> %87, <i32 9, i32 9, i32 9, i32 9>
  %90 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %82, <4 x i32> %83) #8
  %91 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %88, <4 x i32> %89) #8
  %92 = shufflevector <8 x i16> %90, <8 x i16> %91, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %93 = shufflevector <8 x i16> %90, <8 x i16> %91, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %94 = bitcast <8 x i16> %92 to <4 x i32>
  %95 = bitcast <8 x i16> %93 to <4 x i32>
  %96 = shufflevector <4 x i32> %94, <4 x i32> %95, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %97 = shufflevector <4 x i32> %94, <4 x i32> %95, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %98 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %99 = bitcast <4 x i32> %68 to <8 x i16>
  %100 = shufflevector <8 x i16> %99, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %101 = bitcast <8 x i16> %100 to <2 x i64>
  %102 = bitcast <4 x i32> %69 to <8 x i16>
  %103 = shufflevector <8 x i16> %102, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 4, i32 7, i32 6>
  %104 = bitcast <8 x i16> %103 to <2 x i64>
  %105 = shufflevector <2 x i64> %101, <2 x i64> %104, <2 x i32> <i32 0, i32 2>
  %106 = shufflevector <2 x i64> %101, <2 x i64> %104, <2 x i32> <i32 1, i32 3>
  %107 = bitcast <2 x i64> %105 to <8 x i16>
  %108 = bitcast <2 x i64> %106 to <8 x i16>
  %109 = add <8 x i16> %108, %107
  %110 = sub <8 x i16> %107, %108
  %111 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %109, <8 x i16> <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>) #8
  %112 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %109, <8 x i16> <i16 8, i16 -8, i16 8, i16 -8, i16 8, i16 -8, i16 8, i16 -8>) #8
  %113 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %110, <8 x i16> <i16 5352, i16 2217, i16 5352, i16 2217, i16 5352, i16 2217, i16 5352, i16 2217>) #8
  %114 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %110, <8 x i16> <i16 2217, i16 -5352, i16 2217, i16 -5352, i16 2217, i16 -5352, i16 2217, i16 -5352>) #8
  %115 = add <4 x i32> %113, <i32 1812, i32 1812, i32 1812, i32 1812>
  %116 = add <4 x i32> %114, <i32 937, i32 937, i32 937, i32 937>
  %117 = ashr <4 x i32> %115, <i32 9, i32 9, i32 9, i32 9>
  %118 = ashr <4 x i32> %116, <i32 9, i32 9, i32 9, i32 9>
  %119 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %111, <4 x i32> %112) #8
  %120 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %117, <4 x i32> %118) #8
  %121 = shufflevector <8 x i16> %119, <8 x i16> %120, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %122 = shufflevector <8 x i16> %119, <8 x i16> %120, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %123 = bitcast <8 x i16> %121 to <4 x i32>
  %124 = bitcast <8 x i16> %122 to <4 x i32>
  %125 = shufflevector <4 x i32> %123, <4 x i32> %124, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %126 = shufflevector <4 x i32> %123, <4 x i32> %124, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %127 = shufflevector <4 x i32> %125, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %128 = bitcast <4 x i32> %97 to <8 x i16>
  %129 = bitcast <4 x i32> %98 to <8 x i16>
  %130 = sub <8 x i16> %128, %129
  %131 = bitcast <8 x i16> %130 to <2 x i64>
  %132 = shufflevector <2 x i64> %131, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %133 = bitcast <2 x i64> %132 to <8 x i16>
  %134 = shufflevector <8 x i16> %133, <8 x i16> %130, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %135 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %134, <8 x i16> <i16 2217, i16 5352, i16 2217, i16 5352, i16 2217, i16 5352, i16 2217, i16 5352>) #8
  %136 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %134, <8 x i16> <i16 -5352, i16 2217, i16 -5352, i16 2217, i16 -5352, i16 2217, i16 -5352, i16 2217>) #8
  %137 = add <4 x i32> %135, <i32 77536, i32 77536, i32 77536, i32 77536>
  %138 = add <4 x i32> %136, <i32 51000, i32 51000, i32 51000, i32 51000>
  %139 = ashr <4 x i32> %137, <i32 16, i32 16, i32 16, i32 16>
  %140 = ashr <4 x i32> %138, <i32 16, i32 16, i32 16, i32 16>
  %141 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %139, <4 x i32> undef) #8
  %142 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %140, <4 x i32> undef) #8
  %143 = bitcast <8 x i16> %142 to <2 x i64>
  %144 = icmp eq <8 x i16> %130, zeroinitializer
  %145 = zext <8 x i1> %144 to <8 x i16>
  %146 = sub <8 x i16> %141, %145
  %147 = bitcast <8 x i16> %146 to <2 x i64>
  %148 = add <8 x i16> %129, %128
  %149 = bitcast <8 x i16> %148 to <2 x i64>
  %150 = add <8 x i16> %148, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %151 = shufflevector <2 x i64> %149, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %152 = bitcast <2 x i64> %151 to <8 x i16>
  %153 = add <8 x i16> %150, %152
  %154 = sub <8 x i16> %150, %152
  %155 = ashr <8 x i16> %153, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %156 = bitcast <8 x i16> %155 to <2 x i64>
  %157 = ashr <8 x i16> %154, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %158 = bitcast <8 x i16> %157 to <2 x i64>
  %159 = shufflevector <2 x i64> %156, <2 x i64> %147, <2 x i32> <i32 0, i32 2>
  %160 = shufflevector <2 x i64> %158, <2 x i64> %143, <2 x i32> <i32 0, i32 2>
  %161 = bitcast i16* %2 to <2 x i64>*
  store <2 x i64> %159, <2 x i64>* %161, align 1
  %162 = getelementptr inbounds i16, i16* %2, i64 8
  %163 = bitcast i16* %162 to <2 x i64>*
  store <2 x i64> %160, <2 x i64>* %163, align 1
  %164 = getelementptr inbounds i16, i16* %2, i64 16
  %165 = bitcast <4 x i32> %126 to <8 x i16>
  %166 = bitcast <4 x i32> %127 to <8 x i16>
  %167 = sub <8 x i16> %165, %166
  %168 = bitcast <8 x i16> %167 to <2 x i64>
  %169 = shufflevector <2 x i64> %168, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %170 = bitcast <2 x i64> %169 to <8 x i16>
  %171 = shufflevector <8 x i16> %170, <8 x i16> %167, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %172 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %171, <8 x i16> <i16 2217, i16 5352, i16 2217, i16 5352, i16 2217, i16 5352, i16 2217, i16 5352>) #8
  %173 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %171, <8 x i16> <i16 -5352, i16 2217, i16 -5352, i16 2217, i16 -5352, i16 2217, i16 -5352, i16 2217>) #8
  %174 = add <4 x i32> %172, <i32 77536, i32 77536, i32 77536, i32 77536>
  %175 = add <4 x i32> %173, <i32 51000, i32 51000, i32 51000, i32 51000>
  %176 = ashr <4 x i32> %174, <i32 16, i32 16, i32 16, i32 16>
  %177 = ashr <4 x i32> %175, <i32 16, i32 16, i32 16, i32 16>
  %178 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %176, <4 x i32> undef) #8
  %179 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %177, <4 x i32> undef) #8
  %180 = bitcast <8 x i16> %179 to <2 x i64>
  %181 = icmp eq <8 x i16> %167, zeroinitializer
  %182 = zext <8 x i1> %181 to <8 x i16>
  %183 = sub <8 x i16> %178, %182
  %184 = bitcast <8 x i16> %183 to <2 x i64>
  %185 = add <8 x i16> %166, %165
  %186 = bitcast <8 x i16> %185 to <2 x i64>
  %187 = add <8 x i16> %185, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %188 = shufflevector <2 x i64> %186, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %189 = bitcast <2 x i64> %188 to <8 x i16>
  %190 = add <8 x i16> %187, %189
  %191 = sub <8 x i16> %187, %189
  %192 = ashr <8 x i16> %190, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %193 = bitcast <8 x i16> %192 to <2 x i64>
  %194 = ashr <8 x i16> %191, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %195 = bitcast <8 x i16> %194 to <2 x i64>
  %196 = shufflevector <2 x i64> %193, <2 x i64> %184, <2 x i32> <i32 0, i32 2>
  %197 = shufflevector <2 x i64> %195, <2 x i64> %180, <2 x i32> <i32 0, i32 2>
  %198 = bitcast i16* %164 to <2 x i64>*
  store <2 x i64> %196, <2 x i64>* %198, align 1
  %199 = getelementptr inbounds i16, i16* %2, i64 24
  %200 = bitcast i16* %199 to <2 x i64>*
  store <2 x i64> %197, <2 x i64>* %200, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @FTransformWHT_SSE2(i16* nocapture readonly, i16* nocapture) #1 {
  %3 = bitcast i16* %0 to i64*
  %4 = load i64, i64* %3, align 1
  %5 = insertelement <2 x i64> undef, i64 %4, i32 0
  %6 = getelementptr inbounds i16, i16* %0, i64 16
  %7 = bitcast i16* %6 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = insertelement <2 x i64> undef, i64 %8, i32 0
  %10 = getelementptr inbounds i16, i16* %0, i64 32
  %11 = bitcast i16* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = insertelement <2 x i64> undef, i64 %12, i32 0
  %14 = getelementptr inbounds i16, i16* %0, i64 48
  %15 = bitcast i16* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = insertelement <2 x i64> undef, i64 %16, i32 0
  %18 = bitcast <2 x i64> %5 to <8 x i16>
  %19 = bitcast <2 x i64> %9 to <8 x i16>
  %20 = shufflevector <8 x i16> %18, <8 x i16> %19, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %21 = bitcast <2 x i64> %13 to <8 x i16>
  %22 = bitcast <2 x i64> %17 to <8 x i16>
  %23 = shufflevector <8 x i16> %21, <8 x i16> %22, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %24 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %20, <8 x i16> %23) #8
  %25 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %20, <8 x i16> %23) #8
  %26 = bitcast <8 x i16> %24 to <4 x i32>
  %27 = bitcast <8 x i16> %25 to <4 x i32>
  %28 = shufflevector <4 x i32> %26, <4 x i32> %27, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %29 = bitcast <4 x i32> %28 to <2 x i64>
  %30 = shufflevector <4 x i32> %27, <4 x i32> %26, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %31 = bitcast <4 x i32> %30 to <2 x i64>
  %32 = shufflevector <2 x i64> %29, <2 x i64> %31, <2 x i32> <i32 0, i32 2>
  %33 = bitcast <2 x i64> %32 to <8 x i16>
  %34 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %33, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 -1, i16 1, i16 -1>) #8
  %35 = getelementptr inbounds i16, i16* %0, i64 64
  %36 = bitcast i16* %35 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = getelementptr inbounds i16, i16* %0, i64 80
  %40 = bitcast i16* %39 to i64*
  %41 = load i64, i64* %40, align 1
  %42 = insertelement <2 x i64> undef, i64 %41, i32 0
  %43 = getelementptr inbounds i16, i16* %0, i64 96
  %44 = bitcast i16* %43 to i64*
  %45 = load i64, i64* %44, align 1
  %46 = insertelement <2 x i64> undef, i64 %45, i32 0
  %47 = getelementptr inbounds i16, i16* %0, i64 112
  %48 = bitcast i16* %47 to i64*
  %49 = load i64, i64* %48, align 1
  %50 = insertelement <2 x i64> undef, i64 %49, i32 0
  %51 = bitcast <2 x i64> %38 to <8 x i16>
  %52 = bitcast <2 x i64> %42 to <8 x i16>
  %53 = shufflevector <8 x i16> %51, <8 x i16> %52, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %54 = bitcast <2 x i64> %46 to <8 x i16>
  %55 = bitcast <2 x i64> %50 to <8 x i16>
  %56 = shufflevector <8 x i16> %54, <8 x i16> %55, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %57 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %53, <8 x i16> %56) #8
  %58 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %53, <8 x i16> %56) #8
  %59 = bitcast <8 x i16> %57 to <4 x i32>
  %60 = bitcast <8 x i16> %58 to <4 x i32>
  %61 = shufflevector <4 x i32> %59, <4 x i32> %60, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %62 = bitcast <4 x i32> %61 to <2 x i64>
  %63 = shufflevector <4 x i32> %60, <4 x i32> %59, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %64 = bitcast <4 x i32> %63 to <2 x i64>
  %65 = shufflevector <2 x i64> %62, <2 x i64> %64, <2 x i32> <i32 0, i32 2>
  %66 = bitcast <2 x i64> %65 to <8 x i16>
  %67 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %66, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 -1, i16 1, i16 -1>) #8
  %68 = getelementptr inbounds i16, i16* %0, i64 128
  %69 = bitcast i16* %68 to i64*
  %70 = load i64, i64* %69, align 1
  %71 = insertelement <2 x i64> undef, i64 %70, i32 0
  %72 = getelementptr inbounds i16, i16* %0, i64 144
  %73 = bitcast i16* %72 to i64*
  %74 = load i64, i64* %73, align 1
  %75 = insertelement <2 x i64> undef, i64 %74, i32 0
  %76 = getelementptr inbounds i16, i16* %0, i64 160
  %77 = bitcast i16* %76 to i64*
  %78 = load i64, i64* %77, align 1
  %79 = insertelement <2 x i64> undef, i64 %78, i32 0
  %80 = getelementptr inbounds i16, i16* %0, i64 176
  %81 = bitcast i16* %80 to i64*
  %82 = load i64, i64* %81, align 1
  %83 = insertelement <2 x i64> undef, i64 %82, i32 0
  %84 = bitcast <2 x i64> %71 to <8 x i16>
  %85 = bitcast <2 x i64> %75 to <8 x i16>
  %86 = shufflevector <8 x i16> %84, <8 x i16> %85, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %87 = bitcast <2 x i64> %79 to <8 x i16>
  %88 = bitcast <2 x i64> %83 to <8 x i16>
  %89 = shufflevector <8 x i16> %87, <8 x i16> %88, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %90 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %86, <8 x i16> %89) #8
  %91 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %86, <8 x i16> %89) #8
  %92 = bitcast <8 x i16> %90 to <4 x i32>
  %93 = bitcast <8 x i16> %91 to <4 x i32>
  %94 = shufflevector <4 x i32> %92, <4 x i32> %93, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %95 = bitcast <4 x i32> %94 to <2 x i64>
  %96 = shufflevector <4 x i32> %93, <4 x i32> %92, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %97 = bitcast <4 x i32> %96 to <2 x i64>
  %98 = shufflevector <2 x i64> %95, <2 x i64> %97, <2 x i32> <i32 0, i32 2>
  %99 = bitcast <2 x i64> %98 to <8 x i16>
  %100 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %99, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 -1, i16 1, i16 -1>) #8
  %101 = getelementptr inbounds i16, i16* %0, i64 192
  %102 = bitcast i16* %101 to i64*
  %103 = load i64, i64* %102, align 1
  %104 = insertelement <2 x i64> undef, i64 %103, i32 0
  %105 = getelementptr inbounds i16, i16* %0, i64 208
  %106 = bitcast i16* %105 to i64*
  %107 = load i64, i64* %106, align 1
  %108 = insertelement <2 x i64> undef, i64 %107, i32 0
  %109 = getelementptr inbounds i16, i16* %0, i64 224
  %110 = bitcast i16* %109 to i64*
  %111 = load i64, i64* %110, align 1
  %112 = insertelement <2 x i64> undef, i64 %111, i32 0
  %113 = getelementptr inbounds i16, i16* %0, i64 240
  %114 = bitcast i16* %113 to i64*
  %115 = load i64, i64* %114, align 1
  %116 = insertelement <2 x i64> undef, i64 %115, i32 0
  %117 = bitcast <2 x i64> %104 to <8 x i16>
  %118 = bitcast <2 x i64> %108 to <8 x i16>
  %119 = shufflevector <8 x i16> %117, <8 x i16> %118, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %120 = bitcast <2 x i64> %112 to <8 x i16>
  %121 = bitcast <2 x i64> %116 to <8 x i16>
  %122 = shufflevector <8 x i16> %120, <8 x i16> %121, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %123 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %119, <8 x i16> %122) #8
  %124 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %119, <8 x i16> %122) #8
  %125 = bitcast <8 x i16> %123 to <4 x i32>
  %126 = bitcast <8 x i16> %124 to <4 x i32>
  %127 = shufflevector <4 x i32> %125, <4 x i32> %126, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %128 = bitcast <4 x i32> %127 to <2 x i64>
  %129 = shufflevector <4 x i32> %126, <4 x i32> %125, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %130 = bitcast <4 x i32> %129 to <2 x i64>
  %131 = shufflevector <2 x i64> %128, <2 x i64> %130, <2 x i32> <i32 0, i32 2>
  %132 = bitcast <2 x i64> %131 to <8 x i16>
  %133 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %132, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 -1, i16 1, i16 -1>) #8
  %134 = add <4 x i32> %100, %34
  %135 = add <4 x i32> %133, %67
  %136 = sub <4 x i32> %67, %133
  %137 = sub <4 x i32> %34, %100
  %138 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %134, <4 x i32> %137) #8
  %139 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %135, <4 x i32> %136) #8
  %140 = add <8 x i16> %139, %138
  %141 = sub <8 x i16> %138, %139
  %142 = bitcast <8 x i16> %141 to <2 x i64>
  %143 = shufflevector <2 x i64> %142, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %144 = shufflevector <2 x i64> %143, <2 x i64> %142, <2 x i32> <i32 0, i32 2>
  %145 = ashr <8 x i16> %140, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %146 = bitcast i16* %1 to <8 x i16>*
  store <8 x i16> %145, <8 x i16>* %146, align 1
  %147 = getelementptr inbounds i16, i16* %1, i64 8
  %148 = bitcast <2 x i64> %144 to <8 x i16>
  %149 = ashr <8 x i16> %148, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %150 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %149, <8 x i16>* %150, align 1
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @SSE16x16_SSE2(i8* nocapture readonly, i8* nocapture readonly) #3 {
  br label %3

3:                                                ; preds = %3, %2
  %4 = phi i8* [ %40, %3 ], [ %0, %2 ]
  %5 = phi i8* [ %41, %3 ], [ %1, %2 ]
  %6 = phi <4 x i32> [ %39, %3 ], [ zeroinitializer, %2 ]
  %7 = phi i32 [ %42, %3 ], [ 0, %2 ]
  %8 = bitcast i8* %4 to <16 x i8>*
  %9 = load <16 x i8>, <16 x i8>* %8, align 1
  %10 = bitcast i8* %5 to <16 x i8>*
  %11 = load <16 x i8>, <16 x i8>* %10, align 1
  %12 = getelementptr inbounds i8, i8* %4, i64 32
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = getelementptr inbounds i8, i8* %5, i64 32
  %16 = bitcast i8* %15 to <16 x i8>*
  %17 = load <16 x i8>, <16 x i8>* %16, align 1
  %18 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %9, <16 x i8> %11) #8
  %19 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %11, <16 x i8> %9) #8
  %20 = or <16 x i8> %19, %18
  %21 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %22 = shufflevector <16 x i8> %20, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %23 = bitcast <16 x i8> %21 to <8 x i16>
  %24 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %23, <8 x i16> %23) #8
  %25 = bitcast <16 x i8> %22 to <8 x i16>
  %26 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %25, <8 x i16> %25) #8
  %27 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %14, <16 x i8> %17) #8
  %28 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %17, <16 x i8> %14) #8
  %29 = or <16 x i8> %28, %27
  %30 = shufflevector <16 x i8> %29, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %31 = shufflevector <16 x i8> %29, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %32 = bitcast <16 x i8> %30 to <8 x i16>
  %33 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %32, <8 x i16> %32) #8
  %34 = bitcast <16 x i8> %31 to <8 x i16>
  %35 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %34, <8 x i16> %34) #8
  %36 = add <4 x i32> %24, %6
  %37 = add <4 x i32> %36, %26
  %38 = add <4 x i32> %37, %33
  %39 = add <4 x i32> %38, %35
  %40 = getelementptr inbounds i8, i8* %4, i64 64
  %41 = getelementptr inbounds i8, i8* %5, i64 64
  %42 = add nuw nsw i32 %7, 1
  %43 = icmp eq i32 %42, 8
  br i1 %43, label %44, label %3

44:                                               ; preds = %3
  %45 = shufflevector <4 x i32> %39, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %46 = add nsw <4 x i32> %39, %45
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %48 = add nsw <4 x i32> %46, %47
  %49 = extractelement <4 x i32> %48, i32 0
  ret i32 %49
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @SSE16x8_SSE2(i8* nocapture readonly, i8* nocapture readonly) #3 {
  %3 = bitcast i8* %0 to <16 x i8>*
  %4 = load <16 x i8>, <16 x i8>* %3, align 1
  %5 = bitcast i8* %1 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 1
  %7 = getelementptr inbounds i8, i8* %0, i64 32
  %8 = bitcast i8* %7 to <16 x i8>*
  %9 = load <16 x i8>, <16 x i8>* %8, align 1
  %10 = getelementptr inbounds i8, i8* %1, i64 32
  %11 = bitcast i8* %10 to <16 x i8>*
  %12 = load <16 x i8>, <16 x i8>* %11, align 1
  %13 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %4, <16 x i8> %6) #8
  %14 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %6, <16 x i8> %4) #8
  %15 = or <16 x i8> %14, %13
  %16 = shufflevector <16 x i8> %15, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %17 = shufflevector <16 x i8> %15, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %18 = bitcast <16 x i8> %16 to <8 x i16>
  %19 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %18, <8 x i16> %18) #8
  %20 = bitcast <16 x i8> %17 to <8 x i16>
  %21 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %20, <8 x i16> %20) #8
  %22 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %9, <16 x i8> %12) #8
  %23 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %12, <16 x i8> %9) #8
  %24 = or <16 x i8> %23, %22
  %25 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %26 = shufflevector <16 x i8> %24, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %27 = bitcast <16 x i8> %25 to <8 x i16>
  %28 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %27, <8 x i16> %27) #8
  %29 = bitcast <16 x i8> %26 to <8 x i16>
  %30 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %29, <8 x i16> %29) #8
  %31 = add <4 x i32> %19, %21
  %32 = add <4 x i32> %31, %28
  %33 = add <4 x i32> %32, %30
  %34 = getelementptr inbounds i8, i8* %0, i64 64
  %35 = getelementptr inbounds i8, i8* %1, i64 64
  %36 = bitcast i8* %34 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1
  %38 = bitcast i8* %35 to <16 x i8>*
  %39 = load <16 x i8>, <16 x i8>* %38, align 1
  %40 = getelementptr inbounds i8, i8* %0, i64 96
  %41 = bitcast i8* %40 to <16 x i8>*
  %42 = load <16 x i8>, <16 x i8>* %41, align 1
  %43 = getelementptr inbounds i8, i8* %1, i64 96
  %44 = bitcast i8* %43 to <16 x i8>*
  %45 = load <16 x i8>, <16 x i8>* %44, align 1
  %46 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %37, <16 x i8> %39) #8
  %47 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %39, <16 x i8> %37) #8
  %48 = or <16 x i8> %47, %46
  %49 = shufflevector <16 x i8> %48, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %50 = shufflevector <16 x i8> %48, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %51 = bitcast <16 x i8> %49 to <8 x i16>
  %52 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %51, <8 x i16> %51) #8
  %53 = bitcast <16 x i8> %50 to <8 x i16>
  %54 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %53, <8 x i16> %53) #8
  %55 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %42, <16 x i8> %45) #8
  %56 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %45, <16 x i8> %42) #8
  %57 = or <16 x i8> %56, %55
  %58 = shufflevector <16 x i8> %57, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %59 = shufflevector <16 x i8> %57, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %60 = bitcast <16 x i8> %58 to <8 x i16>
  %61 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %60, <8 x i16> %60) #8
  %62 = bitcast <16 x i8> %59 to <8 x i16>
  %63 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %62, <8 x i16> %62) #8
  %64 = add <4 x i32> %52, %33
  %65 = add <4 x i32> %64, %54
  %66 = add <4 x i32> %65, %61
  %67 = add <4 x i32> %66, %63
  %68 = getelementptr inbounds i8, i8* %0, i64 128
  %69 = getelementptr inbounds i8, i8* %1, i64 128
  %70 = bitcast i8* %68 to <16 x i8>*
  %71 = load <16 x i8>, <16 x i8>* %70, align 1
  %72 = bitcast i8* %69 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1
  %74 = getelementptr inbounds i8, i8* %0, i64 160
  %75 = bitcast i8* %74 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 1
  %77 = getelementptr inbounds i8, i8* %1, i64 160
  %78 = bitcast i8* %77 to <16 x i8>*
  %79 = load <16 x i8>, <16 x i8>* %78, align 1
  %80 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %71, <16 x i8> %73) #8
  %81 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %73, <16 x i8> %71) #8
  %82 = or <16 x i8> %81, %80
  %83 = shufflevector <16 x i8> %82, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %84 = shufflevector <16 x i8> %82, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %85 = bitcast <16 x i8> %83 to <8 x i16>
  %86 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %85, <8 x i16> %85) #8
  %87 = bitcast <16 x i8> %84 to <8 x i16>
  %88 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %87, <8 x i16> %87) #8
  %89 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %76, <16 x i8> %79) #8
  %90 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %79, <16 x i8> %76) #8
  %91 = or <16 x i8> %90, %89
  %92 = shufflevector <16 x i8> %91, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %93 = shufflevector <16 x i8> %91, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %94 = bitcast <16 x i8> %92 to <8 x i16>
  %95 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %94, <8 x i16> %94) #8
  %96 = bitcast <16 x i8> %93 to <8 x i16>
  %97 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %96, <8 x i16> %96) #8
  %98 = add <4 x i32> %86, %67
  %99 = add <4 x i32> %98, %88
  %100 = add <4 x i32> %99, %95
  %101 = add <4 x i32> %100, %97
  %102 = getelementptr inbounds i8, i8* %0, i64 192
  %103 = getelementptr inbounds i8, i8* %1, i64 192
  %104 = bitcast i8* %102 to <16 x i8>*
  %105 = load <16 x i8>, <16 x i8>* %104, align 1
  %106 = bitcast i8* %103 to <16 x i8>*
  %107 = load <16 x i8>, <16 x i8>* %106, align 1
  %108 = getelementptr inbounds i8, i8* %0, i64 224
  %109 = bitcast i8* %108 to <16 x i8>*
  %110 = load <16 x i8>, <16 x i8>* %109, align 1
  %111 = getelementptr inbounds i8, i8* %1, i64 224
  %112 = bitcast i8* %111 to <16 x i8>*
  %113 = load <16 x i8>, <16 x i8>* %112, align 1
  %114 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %105, <16 x i8> %107) #8
  %115 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %107, <16 x i8> %105) #8
  %116 = or <16 x i8> %115, %114
  %117 = shufflevector <16 x i8> %116, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %118 = shufflevector <16 x i8> %116, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %119 = bitcast <16 x i8> %117 to <8 x i16>
  %120 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %119, <8 x i16> %119) #8
  %121 = bitcast <16 x i8> %118 to <8 x i16>
  %122 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %121, <8 x i16> %121) #8
  %123 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %110, <16 x i8> %113) #8
  %124 = tail call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %113, <16 x i8> %110) #8
  %125 = or <16 x i8> %124, %123
  %126 = shufflevector <16 x i8> %125, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %127 = shufflevector <16 x i8> %125, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %128 = bitcast <16 x i8> %126 to <8 x i16>
  %129 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %128, <8 x i16> %128) #8
  %130 = bitcast <16 x i8> %127 to <8 x i16>
  %131 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %130, <8 x i16> %130) #8
  %132 = add <4 x i32> %120, %101
  %133 = add <4 x i32> %132, %122
  %134 = add <4 x i32> %133, %129
  %135 = add <4 x i32> %134, %131
  %136 = shufflevector <4 x i32> %135, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %137 = add nsw <4 x i32> %135, %136
  %138 = shufflevector <4 x i32> %137, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %139 = add nsw <4 x i32> %137, %138
  %140 = extractelement <4 x i32> %139, i32 0
  ret i32 %140
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @SSE8x8_SSE2(i8* nocapture readonly, i8* nocapture readonly) #3 {
  %3 = bitcast i8* %0 to i64*
  %4 = load i64, i64* %3, align 1
  %5 = insertelement <2 x i64> undef, i64 %4, i32 0
  %6 = bitcast <2 x i64> %5 to <16 x i8>
  %7 = shufflevector <16 x i8> %6, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %8 = getelementptr inbounds i8, i8* %0, i64 32
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 1
  %11 = insertelement <2 x i64> undef, i64 %10, i32 0
  %12 = bitcast <2 x i64> %11 to <16 x i8>
  %13 = shufflevector <16 x i8> %12, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %14 = bitcast i8* %1 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = insertelement <2 x i64> undef, i64 %15, i32 0
  %17 = bitcast <2 x i64> %16 to <16 x i8>
  %18 = shufflevector <16 x i8> %17, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %19 = getelementptr inbounds i8, i8* %1, i64 32
  %20 = bitcast i8* %19 to i64*
  %21 = load i64, i64* %20, align 1
  %22 = insertelement <2 x i64> undef, i64 %21, i32 0
  %23 = bitcast <2 x i64> %22 to <16 x i8>
  %24 = shufflevector <16 x i8> %23, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %25 = bitcast <16 x i8> %7 to <8 x i16>
  %26 = bitcast <16 x i8> %18 to <8 x i16>
  %27 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %25, <8 x i16> %26) #8
  %28 = bitcast <16 x i8> %13 to <8 x i16>
  %29 = bitcast <16 x i8> %24 to <8 x i16>
  %30 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %28, <8 x i16> %29) #8
  %31 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %27, <8 x i16> %27) #8
  %32 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %30, <8 x i16> %30) #8
  %33 = add <4 x i32> %31, %32
  %34 = getelementptr inbounds i8, i8* %0, i64 64
  %35 = getelementptr inbounds i8, i8* %1, i64 64
  %36 = bitcast i8* %34 to i64*
  %37 = load i64, i64* %36, align 1
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = bitcast <2 x i64> %38 to <16 x i8>
  %40 = shufflevector <16 x i8> %39, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %41 = getelementptr inbounds i8, i8* %0, i64 96
  %42 = bitcast i8* %41 to i64*
  %43 = load i64, i64* %42, align 1
  %44 = insertelement <2 x i64> undef, i64 %43, i32 0
  %45 = bitcast <2 x i64> %44 to <16 x i8>
  %46 = shufflevector <16 x i8> %45, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %47 = bitcast i8* %35 to i64*
  %48 = load i64, i64* %47, align 1
  %49 = insertelement <2 x i64> undef, i64 %48, i32 0
  %50 = bitcast <2 x i64> %49 to <16 x i8>
  %51 = shufflevector <16 x i8> %50, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %52 = getelementptr inbounds i8, i8* %1, i64 96
  %53 = bitcast i8* %52 to i64*
  %54 = load i64, i64* %53, align 1
  %55 = insertelement <2 x i64> undef, i64 %54, i32 0
  %56 = bitcast <2 x i64> %55 to <16 x i8>
  %57 = shufflevector <16 x i8> %56, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %58 = bitcast <16 x i8> %40 to <8 x i16>
  %59 = bitcast <16 x i8> %51 to <8 x i16>
  %60 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %58, <8 x i16> %59) #8
  %61 = bitcast <16 x i8> %46 to <8 x i16>
  %62 = bitcast <16 x i8> %57 to <8 x i16>
  %63 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %61, <8 x i16> %62) #8
  %64 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %60, <8 x i16> %60) #8
  %65 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %63, <8 x i16> %63) #8
  %66 = add <4 x i32> %64, %33
  %67 = add <4 x i32> %66, %65
  %68 = getelementptr inbounds i8, i8* %0, i64 128
  %69 = getelementptr inbounds i8, i8* %1, i64 128
  %70 = bitcast i8* %68 to i64*
  %71 = load i64, i64* %70, align 1
  %72 = insertelement <2 x i64> undef, i64 %71, i32 0
  %73 = bitcast <2 x i64> %72 to <16 x i8>
  %74 = shufflevector <16 x i8> %73, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %75 = getelementptr inbounds i8, i8* %0, i64 160
  %76 = bitcast i8* %75 to i64*
  %77 = load i64, i64* %76, align 1
  %78 = insertelement <2 x i64> undef, i64 %77, i32 0
  %79 = bitcast <2 x i64> %78 to <16 x i8>
  %80 = shufflevector <16 x i8> %79, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %81 = bitcast i8* %69 to i64*
  %82 = load i64, i64* %81, align 1
  %83 = insertelement <2 x i64> undef, i64 %82, i32 0
  %84 = bitcast <2 x i64> %83 to <16 x i8>
  %85 = shufflevector <16 x i8> %84, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %86 = getelementptr inbounds i8, i8* %1, i64 160
  %87 = bitcast i8* %86 to i64*
  %88 = load i64, i64* %87, align 1
  %89 = insertelement <2 x i64> undef, i64 %88, i32 0
  %90 = bitcast <2 x i64> %89 to <16 x i8>
  %91 = shufflevector <16 x i8> %90, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %92 = bitcast <16 x i8> %74 to <8 x i16>
  %93 = bitcast <16 x i8> %85 to <8 x i16>
  %94 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %92, <8 x i16> %93) #8
  %95 = bitcast <16 x i8> %80 to <8 x i16>
  %96 = bitcast <16 x i8> %91 to <8 x i16>
  %97 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %95, <8 x i16> %96) #8
  %98 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %94, <8 x i16> %94) #8
  %99 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %97, <8 x i16> %97) #8
  %100 = add <4 x i32> %98, %67
  %101 = add <4 x i32> %100, %99
  %102 = getelementptr inbounds i8, i8* %0, i64 192
  %103 = getelementptr inbounds i8, i8* %1, i64 192
  %104 = bitcast i8* %102 to i64*
  %105 = load i64, i64* %104, align 1
  %106 = insertelement <2 x i64> undef, i64 %105, i32 0
  %107 = bitcast <2 x i64> %106 to <16 x i8>
  %108 = shufflevector <16 x i8> %107, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %109 = getelementptr inbounds i8, i8* %0, i64 224
  %110 = bitcast i8* %109 to i64*
  %111 = load i64, i64* %110, align 1
  %112 = insertelement <2 x i64> undef, i64 %111, i32 0
  %113 = bitcast <2 x i64> %112 to <16 x i8>
  %114 = shufflevector <16 x i8> %113, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %115 = bitcast i8* %103 to i64*
  %116 = load i64, i64* %115, align 1
  %117 = insertelement <2 x i64> undef, i64 %116, i32 0
  %118 = bitcast <2 x i64> %117 to <16 x i8>
  %119 = shufflevector <16 x i8> %118, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %120 = getelementptr inbounds i8, i8* %1, i64 224
  %121 = bitcast i8* %120 to i64*
  %122 = load i64, i64* %121, align 1
  %123 = insertelement <2 x i64> undef, i64 %122, i32 0
  %124 = bitcast <2 x i64> %123 to <16 x i8>
  %125 = shufflevector <16 x i8> %124, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %126 = bitcast <16 x i8> %108 to <8 x i16>
  %127 = bitcast <16 x i8> %119 to <8 x i16>
  %128 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %126, <8 x i16> %127) #8
  %129 = bitcast <16 x i8> %114 to <8 x i16>
  %130 = bitcast <16 x i8> %125 to <8 x i16>
  %131 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %129, <8 x i16> %130) #8
  %132 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %128, <8 x i16> %128) #8
  %133 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %131, <8 x i16> %131) #8
  %134 = add <4 x i32> %132, %101
  %135 = add <4 x i32> %134, %133
  %136 = shufflevector <4 x i32> %135, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %137 = add nsw <4 x i32> %135, %136
  %138 = shufflevector <4 x i32> %137, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %139 = add nsw <4 x i32> %137, %138
  %140 = extractelement <4 x i32> %139, i32 0
  ret i32 %140
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @SSE4x4_SSE2(i8* nocapture readonly, i8* nocapture readonly) #3 {
  %3 = bitcast i8* %0 to i64*
  %4 = load i64, i64* %3, align 1
  %5 = insertelement <2 x i64> undef, i64 %4, i32 0
  %6 = getelementptr inbounds i8, i8* %0, i64 32
  %7 = bitcast i8* %6 to i64*
  %8 = load i64, i64* %7, align 1
  %9 = insertelement <2 x i64> undef, i64 %8, i32 0
  %10 = getelementptr inbounds i8, i8* %0, i64 64
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = insertelement <2 x i64> undef, i64 %12, i32 0
  %14 = getelementptr inbounds i8, i8* %0, i64 96
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 1
  %17 = insertelement <2 x i64> undef, i64 %16, i32 0
  %18 = bitcast i8* %1 to i64*
  %19 = load i64, i64* %18, align 1
  %20 = insertelement <2 x i64> undef, i64 %19, i32 0
  %21 = getelementptr inbounds i8, i8* %1, i64 32
  %22 = bitcast i8* %21 to i64*
  %23 = load i64, i64* %22, align 1
  %24 = insertelement <2 x i64> undef, i64 %23, i32 0
  %25 = getelementptr inbounds i8, i8* %1, i64 64
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 1
  %28 = insertelement <2 x i64> undef, i64 %27, i32 0
  %29 = getelementptr inbounds i8, i8* %1, i64 96
  %30 = bitcast i8* %29 to i64*
  %31 = load i64, i64* %30, align 1
  %32 = insertelement <2 x i64> undef, i64 %31, i32 0
  %33 = bitcast <2 x i64> %5 to <4 x i32>
  %34 = bitcast <2 x i64> %9 to <4 x i32>
  %35 = shufflevector <4 x i32> %33, <4 x i32> %34, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %36 = bitcast <2 x i64> %13 to <4 x i32>
  %37 = bitcast <2 x i64> %17 to <4 x i32>
  %38 = shufflevector <4 x i32> %36, <4 x i32> %37, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %39 = bitcast <2 x i64> %20 to <4 x i32>
  %40 = bitcast <2 x i64> %24 to <4 x i32>
  %41 = shufflevector <4 x i32> %39, <4 x i32> %40, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %42 = bitcast <2 x i64> %28 to <4 x i32>
  %43 = bitcast <2 x i64> %32 to <4 x i32>
  %44 = shufflevector <4 x i32> %42, <4 x i32> %43, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %45 = bitcast <4 x i32> %35 to <16 x i8>
  %46 = shufflevector <16 x i8> %45, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %47 = bitcast <4 x i32> %38 to <16 x i8>
  %48 = shufflevector <16 x i8> %47, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %49 = bitcast <4 x i32> %41 to <16 x i8>
  %50 = shufflevector <16 x i8> %49, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %51 = bitcast <4 x i32> %44 to <16 x i8>
  %52 = shufflevector <16 x i8> %51, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %53 = bitcast <16 x i8> %46 to <8 x i16>
  %54 = bitcast <16 x i8> %50 to <8 x i16>
  %55 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %53, <8 x i16> %54) #8
  %56 = bitcast <16 x i8> %48 to <8 x i16>
  %57 = bitcast <16 x i8> %52 to <8 x i16>
  %58 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %56, <8 x i16> %57) #8
  %59 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %55, <8 x i16> %55) #8
  %60 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %58, <8 x i16> %58) #8
  %61 = add <4 x i32> %60, %59
  %62 = shufflevector <4 x i32> %61, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %63 = add nsw <4 x i32> %61, %62
  %64 = shufflevector <4 x i32> %63, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %65 = add nsw <4 x i32> %63, %64
  %66 = extractelement <4 x i32> %65, i32 0
  ret i32 %66
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @Disto4x4_SSE2(i8* nocapture readonly, i8* nocapture readonly, i16* nocapture readonly) #3 {
  %4 = bitcast i8* %0 to i64*
  %5 = load i64, i64* %4, align 1
  %6 = insertelement <2 x i64> undef, i64 %5, i32 0
  %7 = getelementptr inbounds i8, i8* %0, i64 32
  %8 = bitcast i8* %7 to i64*
  %9 = load i64, i64* %8, align 1
  %10 = insertelement <2 x i64> undef, i64 %9, i32 0
  %11 = getelementptr inbounds i8, i8* %0, i64 64
  %12 = bitcast i8* %11 to i64*
  %13 = load i64, i64* %12, align 1
  %14 = insertelement <2 x i64> undef, i64 %13, i32 0
  %15 = getelementptr inbounds i8, i8* %0, i64 96
  %16 = bitcast i8* %15 to i64*
  %17 = load i64, i64* %16, align 1
  %18 = insertelement <2 x i64> undef, i64 %17, i32 0
  %19 = bitcast i8* %1 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = insertelement <2 x i64> undef, i64 %20, i32 0
  %22 = getelementptr inbounds i8, i8* %1, i64 32
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 1
  %25 = insertelement <2 x i64> undef, i64 %24, i32 0
  %26 = getelementptr inbounds i8, i8* %1, i64 64
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %27, align 1
  %29 = insertelement <2 x i64> undef, i64 %28, i32 0
  %30 = getelementptr inbounds i8, i8* %1, i64 96
  %31 = bitcast i8* %30 to i64*
  %32 = load i64, i64* %31, align 1
  %33 = insertelement <2 x i64> undef, i64 %32, i32 0
  %34 = bitcast <2 x i64> %6 to <4 x i32>
  %35 = bitcast <2 x i64> %21 to <4 x i32>
  %36 = shufflevector <4 x i32> %34, <4 x i32> %35, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %37 = bitcast <2 x i64> %10 to <4 x i32>
  %38 = bitcast <2 x i64> %25 to <4 x i32>
  %39 = shufflevector <4 x i32> %37, <4 x i32> %38, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %40 = bitcast <2 x i64> %14 to <4 x i32>
  %41 = bitcast <2 x i64> %29 to <4 x i32>
  %42 = shufflevector <4 x i32> %40, <4 x i32> %41, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %43 = bitcast <2 x i64> %18 to <4 x i32>
  %44 = bitcast <2 x i64> %33 to <4 x i32>
  %45 = shufflevector <4 x i32> %43, <4 x i32> %44, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %46 = bitcast <4 x i32> %36 to <16 x i8>
  %47 = shufflevector <16 x i8> %46, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %48 = bitcast <4 x i32> %39 to <16 x i8>
  %49 = shufflevector <16 x i8> %48, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %50 = bitcast <4 x i32> %42 to <16 x i8>
  %51 = shufflevector <16 x i8> %50, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %52 = bitcast <4 x i32> %45 to <16 x i8>
  %53 = shufflevector <16 x i8> %52, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %54 = bitcast <16 x i8> %47 to <8 x i16>
  %55 = bitcast <16 x i8> %51 to <8 x i16>
  %56 = add <8 x i16> %55, %54
  %57 = bitcast <16 x i8> %49 to <8 x i16>
  %58 = bitcast <16 x i8> %53 to <8 x i16>
  %59 = add <8 x i16> %58, %57
  %60 = sub <8 x i16> %57, %58
  %61 = sub <8 x i16> %54, %55
  %62 = add <8 x i16> %59, %56
  %63 = add <8 x i16> %60, %61
  %64 = sub <8 x i16> %61, %60
  %65 = sub <8 x i16> %56, %59
  %66 = shufflevector <8 x i16> %62, <8 x i16> %63, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %67 = shufflevector <8 x i16> %64, <8 x i16> %65, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %68 = shufflevector <8 x i16> %62, <8 x i16> %63, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %69 = shufflevector <8 x i16> %64, <8 x i16> %65, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %70 = bitcast <8 x i16> %66 to <4 x i32>
  %71 = bitcast <8 x i16> %67 to <4 x i32>
  %72 = shufflevector <4 x i32> %70, <4 x i32> %71, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %73 = bitcast <4 x i32> %72 to <2 x i64>
  %74 = bitcast <8 x i16> %68 to <4 x i32>
  %75 = bitcast <8 x i16> %69 to <4 x i32>
  %76 = shufflevector <4 x i32> %74, <4 x i32> %75, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %77 = bitcast <4 x i32> %76 to <2 x i64>
  %78 = shufflevector <4 x i32> %70, <4 x i32> %71, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %79 = bitcast <4 x i32> %78 to <2 x i64>
  %80 = shufflevector <4 x i32> %74, <4 x i32> %75, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %81 = bitcast <4 x i32> %80 to <2 x i64>
  %82 = shufflevector <2 x i64> %73, <2 x i64> %77, <2 x i32> <i32 0, i32 2>
  %83 = shufflevector <2 x i64> %73, <2 x i64> %77, <2 x i32> <i32 1, i32 3>
  %84 = shufflevector <2 x i64> %79, <2 x i64> %81, <2 x i32> <i32 0, i32 2>
  %85 = shufflevector <2 x i64> %79, <2 x i64> %81, <2 x i32> <i32 1, i32 3>
  %86 = bitcast i16* %2 to <8 x i16>*
  %87 = load <8 x i16>, <8 x i16>* %86, align 1
  %88 = getelementptr inbounds i16, i16* %2, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 1
  %91 = bitcast <2 x i64> %82 to <8 x i16>
  %92 = bitcast <2 x i64> %84 to <8 x i16>
  %93 = add <8 x i16> %92, %91
  %94 = bitcast <2 x i64> %83 to <8 x i16>
  %95 = bitcast <2 x i64> %85 to <8 x i16>
  %96 = add <8 x i16> %95, %94
  %97 = sub <8 x i16> %94, %95
  %98 = sub <8 x i16> %91, %92
  %99 = add <8 x i16> %96, %93
  %100 = bitcast <8 x i16> %99 to <2 x i64>
  %101 = add <8 x i16> %97, %98
  %102 = bitcast <8 x i16> %101 to <2 x i64>
  %103 = sub <8 x i16> %98, %97
  %104 = bitcast <8 x i16> %103 to <2 x i64>
  %105 = sub <8 x i16> %93, %96
  %106 = bitcast <8 x i16> %105 to <2 x i64>
  %107 = shufflevector <2 x i64> %100, <2 x i64> %102, <2 x i32> <i32 0, i32 2>
  %108 = shufflevector <2 x i64> %104, <2 x i64> %106, <2 x i32> <i32 0, i32 2>
  %109 = shufflevector <2 x i64> %100, <2 x i64> %102, <2 x i32> <i32 1, i32 3>
  %110 = shufflevector <2 x i64> %104, <2 x i64> %106, <2 x i32> <i32 1, i32 3>
  %111 = bitcast <2 x i64> %107 to <8 x i16>
  %112 = sub <8 x i16> zeroinitializer, %111
  %113 = bitcast <2 x i64> %108 to <8 x i16>
  %114 = sub <8 x i16> zeroinitializer, %113
  %115 = bitcast <2 x i64> %109 to <8 x i16>
  %116 = sub <8 x i16> zeroinitializer, %115
  %117 = bitcast <2 x i64> %110 to <8 x i16>
  %118 = sub <8 x i16> zeroinitializer, %117
  %119 = icmp sgt <8 x i16> %111, %112
  %120 = select <8 x i1> %119, <8 x i16> %111, <8 x i16> %112
  %121 = icmp sgt <8 x i16> %113, %114
  %122 = select <8 x i1> %121, <8 x i16> %113, <8 x i16> %114
  %123 = icmp sgt <8 x i16> %115, %116
  %124 = select <8 x i1> %123, <8 x i16> %115, <8 x i16> %116
  %125 = icmp sgt <8 x i16> %117, %118
  %126 = select <8 x i1> %125, <8 x i16> %117, <8 x i16> %118
  %127 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %120, <8 x i16> %87) #8
  %128 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %122, <8 x i16> %90) #8
  %129 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %124, <8 x i16> %87) #8
  %130 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %126, <8 x i16> %90) #8
  %131 = add <4 x i32> %128, %127
  %132 = sub <4 x i32> %131, %129
  %133 = sub <4 x i32> %132, %130
  %134 = shufflevector <4 x i32> %133, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %135 = add nsw <4 x i32> %133, %134
  %136 = shufflevector <4 x i32> %135, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %137 = add nsw <4 x i32> %135, %136
  %138 = extractelement <4 x i32> %137, i32 0
  %139 = icmp slt i32 %138, 0
  %140 = sub nsw i32 0, %138
  %141 = select i1 %139, i32 %140, i32 %138
  %142 = lshr i32 %141, 5
  ret i32 %142
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @Disto16x16_SSE2(i8* nocapture readonly, i8* nocapture readonly, i16* nocapture readonly) #3 {
  %4 = bitcast i16* %2 to <8 x i16>*
  %5 = load <8 x i16>, <8 x i16>* %4, align 1
  %6 = getelementptr inbounds i16, i16* %2, i64 8
  %7 = bitcast i16* %6 to <8 x i16>*
  %8 = load <8 x i16>, <8 x i16>* %7, align 1
  br label %9

9:                                                ; preds = %3, %156
  %10 = phi i64 [ 0, %3 ], [ %157, %156 ]
  %11 = phi i32 [ 0, %3 ], [ %153, %156 ]
  %12 = getelementptr inbounds i8, i8* %0, i64 %10
  %13 = getelementptr inbounds i8, i8* %1, i64 %10
  br label %14

14:                                               ; preds = %9, %14
  %15 = phi i64 [ 0, %9 ], [ %154, %14 ]
  %16 = phi i32 [ %11, %9 ], [ %153, %14 ]
  %17 = getelementptr inbounds i8, i8* %12, i64 %15
  %18 = getelementptr inbounds i8, i8* %13, i64 %15
  %19 = bitcast i8* %17 to i64*
  %20 = load i64, i64* %19, align 1
  %21 = insertelement <2 x i64> undef, i64 %20, i32 0
  %22 = getelementptr inbounds i8, i8* %17, i64 32
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 1
  %25 = insertelement <2 x i64> undef, i64 %24, i32 0
  %26 = getelementptr inbounds i8, i8* %17, i64 64
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %27, align 1
  %29 = insertelement <2 x i64> undef, i64 %28, i32 0
  %30 = getelementptr inbounds i8, i8* %17, i64 96
  %31 = bitcast i8* %30 to i64*
  %32 = load i64, i64* %31, align 1
  %33 = insertelement <2 x i64> undef, i64 %32, i32 0
  %34 = bitcast i8* %18 to i64*
  %35 = load i64, i64* %34, align 1
  %36 = insertelement <2 x i64> undef, i64 %35, i32 0
  %37 = getelementptr inbounds i8, i8* %18, i64 32
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 1
  %40 = insertelement <2 x i64> undef, i64 %39, i32 0
  %41 = getelementptr inbounds i8, i8* %18, i64 64
  %42 = bitcast i8* %41 to i64*
  %43 = load i64, i64* %42, align 1
  %44 = insertelement <2 x i64> undef, i64 %43, i32 0
  %45 = getelementptr inbounds i8, i8* %18, i64 96
  %46 = bitcast i8* %45 to i64*
  %47 = load i64, i64* %46, align 1
  %48 = insertelement <2 x i64> undef, i64 %47, i32 0
  %49 = bitcast <2 x i64> %21 to <4 x i32>
  %50 = bitcast <2 x i64> %36 to <4 x i32>
  %51 = shufflevector <4 x i32> %49, <4 x i32> %50, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %52 = bitcast <2 x i64> %25 to <4 x i32>
  %53 = bitcast <2 x i64> %40 to <4 x i32>
  %54 = shufflevector <4 x i32> %52, <4 x i32> %53, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %55 = bitcast <2 x i64> %29 to <4 x i32>
  %56 = bitcast <2 x i64> %44 to <4 x i32>
  %57 = shufflevector <4 x i32> %55, <4 x i32> %56, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %58 = bitcast <2 x i64> %33 to <4 x i32>
  %59 = bitcast <2 x i64> %48 to <4 x i32>
  %60 = shufflevector <4 x i32> %58, <4 x i32> %59, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %61 = bitcast <4 x i32> %51 to <16 x i8>
  %62 = shufflevector <16 x i8> %61, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %63 = bitcast <4 x i32> %54 to <16 x i8>
  %64 = shufflevector <16 x i8> %63, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %65 = bitcast <4 x i32> %57 to <16 x i8>
  %66 = shufflevector <16 x i8> %65, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %67 = bitcast <4 x i32> %60 to <16 x i8>
  %68 = shufflevector <16 x i8> %67, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %69 = bitcast <16 x i8> %62 to <8 x i16>
  %70 = bitcast <16 x i8> %66 to <8 x i16>
  %71 = add <8 x i16> %70, %69
  %72 = bitcast <16 x i8> %64 to <8 x i16>
  %73 = bitcast <16 x i8> %68 to <8 x i16>
  %74 = add <8 x i16> %73, %72
  %75 = sub <8 x i16> %72, %73
  %76 = sub <8 x i16> %69, %70
  %77 = add <8 x i16> %74, %71
  %78 = add <8 x i16> %75, %76
  %79 = sub <8 x i16> %76, %75
  %80 = sub <8 x i16> %71, %74
  %81 = shufflevector <8 x i16> %77, <8 x i16> %78, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %82 = shufflevector <8 x i16> %79, <8 x i16> %80, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %83 = shufflevector <8 x i16> %77, <8 x i16> %78, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %84 = shufflevector <8 x i16> %79, <8 x i16> %80, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %85 = bitcast <8 x i16> %81 to <4 x i32>
  %86 = bitcast <8 x i16> %82 to <4 x i32>
  %87 = shufflevector <4 x i32> %85, <4 x i32> %86, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %88 = bitcast <4 x i32> %87 to <2 x i64>
  %89 = bitcast <8 x i16> %83 to <4 x i32>
  %90 = bitcast <8 x i16> %84 to <4 x i32>
  %91 = shufflevector <4 x i32> %89, <4 x i32> %90, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %92 = bitcast <4 x i32> %91 to <2 x i64>
  %93 = shufflevector <4 x i32> %85, <4 x i32> %86, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %94 = bitcast <4 x i32> %93 to <2 x i64>
  %95 = shufflevector <4 x i32> %89, <4 x i32> %90, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %96 = bitcast <4 x i32> %95 to <2 x i64>
  %97 = shufflevector <2 x i64> %88, <2 x i64> %92, <2 x i32> <i32 0, i32 2>
  %98 = shufflevector <2 x i64> %88, <2 x i64> %92, <2 x i32> <i32 1, i32 3>
  %99 = shufflevector <2 x i64> %94, <2 x i64> %96, <2 x i32> <i32 0, i32 2>
  %100 = shufflevector <2 x i64> %94, <2 x i64> %96, <2 x i32> <i32 1, i32 3>
  %101 = bitcast <2 x i64> %97 to <8 x i16>
  %102 = bitcast <2 x i64> %99 to <8 x i16>
  %103 = add <8 x i16> %102, %101
  %104 = bitcast <2 x i64> %98 to <8 x i16>
  %105 = bitcast <2 x i64> %100 to <8 x i16>
  %106 = add <8 x i16> %105, %104
  %107 = sub <8 x i16> %104, %105
  %108 = sub <8 x i16> %101, %102
  %109 = add <8 x i16> %106, %103
  %110 = bitcast <8 x i16> %109 to <2 x i64>
  %111 = add <8 x i16> %107, %108
  %112 = bitcast <8 x i16> %111 to <2 x i64>
  %113 = sub <8 x i16> %108, %107
  %114 = bitcast <8 x i16> %113 to <2 x i64>
  %115 = sub <8 x i16> %103, %106
  %116 = bitcast <8 x i16> %115 to <2 x i64>
  %117 = shufflevector <2 x i64> %110, <2 x i64> %112, <2 x i32> <i32 0, i32 2>
  %118 = shufflevector <2 x i64> %114, <2 x i64> %116, <2 x i32> <i32 0, i32 2>
  %119 = shufflevector <2 x i64> %110, <2 x i64> %112, <2 x i32> <i32 1, i32 3>
  %120 = shufflevector <2 x i64> %114, <2 x i64> %116, <2 x i32> <i32 1, i32 3>
  %121 = bitcast <2 x i64> %117 to <8 x i16>
  %122 = sub <8 x i16> zeroinitializer, %121
  %123 = bitcast <2 x i64> %118 to <8 x i16>
  %124 = sub <8 x i16> zeroinitializer, %123
  %125 = bitcast <2 x i64> %119 to <8 x i16>
  %126 = sub <8 x i16> zeroinitializer, %125
  %127 = bitcast <2 x i64> %120 to <8 x i16>
  %128 = sub <8 x i16> zeroinitializer, %127
  %129 = icmp sgt <8 x i16> %121, %122
  %130 = select <8 x i1> %129, <8 x i16> %121, <8 x i16> %122
  %131 = icmp sgt <8 x i16> %123, %124
  %132 = select <8 x i1> %131, <8 x i16> %123, <8 x i16> %124
  %133 = icmp sgt <8 x i16> %125, %126
  %134 = select <8 x i1> %133, <8 x i16> %125, <8 x i16> %126
  %135 = icmp sgt <8 x i16> %127, %128
  %136 = select <8 x i1> %135, <8 x i16> %127, <8 x i16> %128
  %137 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %130, <8 x i16> %5) #8
  %138 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %132, <8 x i16> %8) #8
  %139 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %134, <8 x i16> %5) #8
  %140 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %136, <8 x i16> %8) #8
  %141 = add <4 x i32> %138, %137
  %142 = sub <4 x i32> %141, %139
  %143 = sub <4 x i32> %142, %140
  %144 = shufflevector <4 x i32> %143, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %145 = add nsw <4 x i32> %143, %144
  %146 = shufflevector <4 x i32> %145, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %147 = add nsw <4 x i32> %145, %146
  %148 = extractelement <4 x i32> %147, i32 0
  %149 = icmp slt i32 %148, 0
  %150 = sub nsw i32 0, %148
  %151 = select i1 %149, i32 %150, i32 %148
  %152 = lshr i32 %151, 5
  %153 = add nsw i32 %152, %16
  %154 = add nuw nsw i64 %15, 4
  %155 = icmp ult i64 %154, 16
  br i1 %155, label %14, label %156

156:                                              ; preds = %14
  %157 = add nuw nsw i64 %10, 128
  %158 = icmp ult i64 %157, 512
  br i1 %158, label %9, label %159

159:                                              ; preds = %156
  ret i32 %153
}

; Function Attrs: nounwind ssp uwtable
define internal void @Mean16x4_SSE2(i8* nocapture readonly, i32* nocapture) #1 {
  %3 = bitcast i8* %0 to <2 x i64>*
  %4 = load <2 x i64>, <2 x i64>* %3, align 1
  %5 = getelementptr inbounds i8, i8* %0, i64 32
  %6 = bitcast i8* %5 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 1
  %8 = getelementptr inbounds i8, i8* %0, i64 64
  %9 = bitcast i8* %8 to <2 x i64>*
  %10 = load <2 x i64>, <2 x i64>* %9, align 1
  %11 = getelementptr inbounds i8, i8* %0, i64 96
  %12 = bitcast i8* %11 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 1
  %14 = bitcast <2 x i64> %4 to <8 x i16>
  %15 = lshr <8 x i16> %14, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %16 = bitcast <2 x i64> %7 to <8 x i16>
  %17 = lshr <8 x i16> %16, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %18 = bitcast <2 x i64> %10 to <8 x i16>
  %19 = lshr <8 x i16> %18, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %20 = bitcast <2 x i64> %13 to <8 x i16>
  %21 = lshr <8 x i16> %20, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %22 = bitcast <8 x i16> %15 to <4 x i32>
  %23 = bitcast <2 x i64> %4 to <4 x i32>
  %24 = and <4 x i32> %23, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %25 = bitcast <8 x i16> %17 to <4 x i32>
  %26 = bitcast <2 x i64> %7 to <4 x i32>
  %27 = and <4 x i32> %26, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %28 = bitcast <8 x i16> %19 to <4 x i32>
  %29 = bitcast <2 x i64> %10 to <4 x i32>
  %30 = and <4 x i32> %29, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %31 = bitcast <8 x i16> %21 to <4 x i32>
  %32 = bitcast <2 x i64> %13 to <4 x i32>
  %33 = and <4 x i32> %32, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %34 = add <4 x i32> %24, %22
  %35 = add <4 x i32> %34, %27
  %36 = add <4 x i32> %35, %25
  %37 = add <4 x i32> %36, %30
  %38 = add <4 x i32> %37, %28
  %39 = add <4 x i32> %38, %33
  %40 = add <4 x i32> %39, %31
  %41 = extractelement <4 x i32> %40, i32 0
  %42 = and i32 %41, 65535
  %43 = bitcast <4 x i32> %40 to <8 x i16>
  %44 = extractelement <8 x i16> %43, i32 1
  %45 = bitcast <4 x i32> %40 to <8 x i16>
  %46 = extractelement <8 x i16> %45, i32 2
  %47 = bitcast <4 x i32> %40 to <8 x i16>
  %48 = extractelement <8 x i16> %47, i32 3
  %49 = zext i16 %48 to i32
  %50 = bitcast <4 x i32> %40 to <8 x i16>
  %51 = extractelement <8 x i16> %50, i32 4
  %52 = bitcast <4 x i32> %40 to <8 x i16>
  %53 = extractelement <8 x i16> %52, i32 5
  %54 = zext i16 %53 to i32
  %55 = bitcast <4 x i32> %40 to <8 x i16>
  %56 = extractelement <8 x i16> %55, i32 6
  %57 = insertelement <4 x i16> undef, i16 %44, i32 0
  %58 = insertelement <4 x i16> %57, i16 %46, i32 1
  %59 = insertelement <4 x i16> %58, i16 %51, i32 2
  %60 = insertelement <4 x i16> %59, i16 %56, i32 3
  %61 = zext <4 x i16> %60 to <4 x i32>
  %62 = bitcast <4 x i32> %40 to <8 x i16>
  %63 = extractelement <8 x i16> %62, i32 7
  %64 = zext i16 %63 to i32
  %65 = insertelement <4 x i32> undef, i32 %42, i32 0
  %66 = insertelement <4 x i32> %65, i32 %49, i32 1
  %67 = insertelement <4 x i32> %66, i32 %54, i32 2
  %68 = insertelement <4 x i32> %67, i32 %64, i32 3
  %69 = add nuw nsw <4 x i32> %68, %61
  %70 = bitcast i32* %1 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %70, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare void @VP8SetHistogramData(i32*, %struct.VP8Histogram*) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8>, <16 x i8>) #6

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #6

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.pavg.b(<16 x i8>, <16 x i8>) #6

; Function Attrs: nounwind readnone speculatable
declare <16 x i8> @llvm.usub.sat.v16i8(<16 x i8>, <16 x i8>) #7

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulhu.w(<8 x i16>, <8 x i16>) #6

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #6

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16>, <8 x i16>) #6

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16>, <8 x i16>) #6

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #6

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #7

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16>, <8 x i16>) #7

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
