; ModuleID = '../../third_party/libjxl/src/lib/jxl/modular/encoding/enc_encoding.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/modular/encoding/enc_encoding.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::ModularOptions" = type <{ i64, float, i32, %"class.std::__1::vector.18", float, [4 x i8], i64, i32, i32, float, i32, i8, [3 x i8], i32, i8, [7 x i8] }>
%"class.std::__1::vector.18" = type { %"class.std::__1::__vector_base.19" }
%"class.std::__1::__vector_base.19" = type { i32*, i32*, %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { i32* }
%"class.jxl::Image" = type <{ %"class.std::__1::vector", %"class.std::__1::vector.4", i64, i64, i32, i32, i64, i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.jxl::Channel"*, %"class.jxl::Channel"*, %"class.std::__1::__compressed_pair.1" }
%"class.jxl::Channel" = type { %"class.jxl::Plane", i64, i64, i32, i32, i32, i32 }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.jxl::Channel"* }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { %"class.jxl::Transform"*, %"class.jxl::Transform"*, %"class.std::__1::__compressed_pair.13" }
%"class.jxl::Transform" = type <{ %"class.jxl::Fields", i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.6", i32, i32, i8, i8, [6 x i8] }>
%"class.jxl::Fields" = type { i32 (...)** }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"*, %"class.std::__1::__compressed_pair.8" }
%"struct.jxl::SqueezeParams" = type <{ %"class.jxl::Fields", i8, i8, [2 x i8], i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.jxl::SqueezeParams"* }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.jxl::Transform"* }
%"struct.jxl::weighted::Header" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32, i32, i32, [4 x i32] }
%"struct.jxl::TreeSamples" = type { %"class.std::__1::vector.25", %"class.std::__1::vector.39", %"class.std::__1::vector.46", %"class.std::__1::vector.59", %"class.std::__1::vector.18", %"class.std::__1::vector.73", %"class.std::__1::vector.46", i64, %"class.std::__1::vector.18" }
%"class.std::__1::vector.25" = type { %"class.std::__1::__vector_base.26" }
%"class.std::__1::__vector_base.26" = type { %"class.std::__1::vector.27"*, %"class.std::__1::vector.27"*, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::vector.27" = type { %"class.std::__1::__vector_base.28" }
%"class.std::__1::__vector_base.28" = type { %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"*, %"class.std::__1::__compressed_pair.29" }
%"struct.jxl::TreeSamples::ResidualToken" = type { i8, i8 }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"struct.jxl::TreeSamples::ResidualToken"* }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.std::__1::vector.27"* }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { i16*, i16*, %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { i16* }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { %"class.std::__1::vector.61"*, %"class.std::__1::vector.61"*, %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::vector.61" = type { %"class.std::__1::__vector_base.62" }
%"class.std::__1::__vector_base.62" = type { i32*, i32*, %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { i32* }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.std::__1::vector.61"* }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { i32*, i32*, %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { i32* }
%"class.std::__1::vector.46" = type { %"class.std::__1::__vector_base.47" }
%"class.std::__1::__vector_base.47" = type { %"class.std::__1::vector.48"*, %"class.std::__1::vector.48"*, %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::vector.48" = type { %"class.std::__1::__vector_base.49" }
%"class.std::__1::__vector_base.49" = type { i8*, i8*, %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"class.std::__1::vector.48"* }
%"struct.jxl::PredictionResult" = type { i32, i64, i32, i32 }
%"struct.jxl::weighted::State" = type { [4 x i64], i64, [4 x %"class.std::__1::vector.18"], %"class.std::__1::vector.61", %"struct.jxl::weighted::Header", [64 x i32] }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.jxl::MATreeLookup" = type { %"class.std::__1::vector.202"* }
%"class.std::__1::vector.202" = type { %"class.std::__1::__vector_base.203" }
%"class.std::__1::__vector_base.203" = type { %"struct.jxl::FlatDecisionNode"*, %"struct.jxl::FlatDecisionNode"*, %"class.std::__1::__compressed_pair.207" }
%"struct.jxl::FlatDecisionNode" = type { i32, %union.anon.204, i32, %union.anon.205, %union.anon.206 }
%union.anon.204 = type { i32 }
%union.anon.205 = type { [2 x i32] }
%union.anon.206 = type { i64 }
%"class.std::__1::__compressed_pair.207" = type { %"struct.std::__1::__compressed_pair_elem.208" }
%"struct.std::__1::__compressed_pair_elem.208" = type { %"struct.jxl::FlatDecisionNode"* }
%"class.std::__1::vector.89" = type { %"class.std::__1::__vector_base.90" }
%"class.std::__1::__vector_base.90" = type { %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"*, %"class.std::__1::__compressed_pair.91" }
%"struct.jxl::PropertyDecisionNode" = type <{ i32, i16, [2 x i8], i32, i32, i32, [4 x i8], i64, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.92" = type { %"struct.jxl::PropertyDecisionNode"* }
%"class.std::__1::vector.80" = type { %"class.std::__1::__vector_base.81" }
%"class.std::__1::__vector_base.81" = type { %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"*, %"class.std::__1::__compressed_pair.84" }
%"struct.jxl::ModularMultiplierInfo" = type { %"struct.std::__1::array.82", i32 }
%"struct.std::__1::array.82" = type { [2 x %"struct.std::__1::array.83"] }
%"struct.std::__1::array.83" = type { [2 x i32] }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.85" = type { %"struct.jxl::ModularMultiplierInfo"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.101" = type { %"class.std::__1::__vector_base.102" }
%"class.std::__1::__vector_base.102" = type { %"struct.jxl::Token"*, %"struct.jxl::Token"*, %"class.std::__1::__compressed_pair.103" }
%"struct.jxl::Token" = type { i32, i32 }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"struct.jxl::Token"* }
%"struct.jxl::AuxOut" = type { %"struct.std::__1::array.108", i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array.109", %"struct.std::__1::array.109", i32, %"class.std::__1::basic_string", i64, %"class.std::__1::function", %"class.std::__1::function.111" }
%"struct.std::__1::array.108" = type { [21 x %"struct.jxl::AuxOut::LayerTotals"] }
%"struct.jxl::AuxOut::LayerTotals" = type { i64, i64, i64, i64, double }
%"struct.std::__1::array.109" = type { [8 x i32] }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)* }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane.110"] }
%"class.jxl::Plane.110" = type { %"struct.jxl::PlaneBase" }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::function.111" = type { %"class.std::__1::__function::__policy_func.115" }
%"class.std::__1::__function::__policy_func.115" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.116", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.116" = type { i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)* }
%"class.jxl::CodecInOut" = type { %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", %"struct.jxl::CodecMetadata", %"class.jxl::ImageBundle", %"class.std::__1::vector.195", i8, i64 }
%"struct.jxl::SizeConstraints" = type { i32, i32, i64 }
%"class.jxl::DecoderHints" = type { %"class.std::__1::vector.117" }
%"class.std::__1::vector.117" = type { %"class.std::__1::__vector_base.118" }
%"class.std::__1::__vector_base.118" = type { %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"*, %"class.std::__1::__compressed_pair.119" }
%"struct.jxl::DecoderHints::KeyValue" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { %"struct.jxl::DecoderHints::KeyValue"* }
%"struct.jxl::Blobs" = type { %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes" }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.124", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.124" = type { %"class.std::__1::__vector_base.125" }
%"class.std::__1::__vector_base.125" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.126" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.131", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.188", i64 }
%"class.std::__1::unique_ptr.131" = type { %"class.std::__1::__compressed_pair.132" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.46", %"class.std::__1::vector.134", %"class.std::__1::vector.46", %"class.std::__1::vector.141", %"class.std::__1::vector.149", %"class.std::__1::vector.158", %"class.std::__1::vector.172", %"class.std::__1::vector.48", %"class.std::__1::vector.46", %"class.std::__1::vector.48", i32, i8, %"class.std::__1::vector.48" }
%"class.std::__1::vector.134" = type { %"class.std::__1::__vector_base.135" }
%"class.std::__1::__vector_base.135" = type { i32*, i32*, %"class.std::__1::__compressed_pair.136" }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.137" }
%"struct.std::__1::__compressed_pair_elem.137" = type { i32* }
%"class.std::__1::vector.141" = type { %"class.std::__1::__vector_base.142" }
%"class.std::__1::__vector_base.142" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.144" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array.143", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array.143" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.149" = type { %"class.std::__1::__vector_base.150" }
%"class.std::__1::__vector_base.150" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.153" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.151", %"struct.std::__1::array.152", i32, i8, [3 x i8] }>
%"struct.std::__1::array.151" = type { [17 x i32] }
%"struct.std::__1::array.152" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.153" = type { %"struct.std::__1::__compressed_pair_elem.154" }
%"struct.std::__1::__compressed_pair_elem.154" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.158" = type { %"class.std::__1::__vector_base.159" }
%"class.std::__1::__vector_base.159" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.167" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.160" }
%"class.std::__1::vector.160" = type { %"class.std::__1::__vector_base.161" }
%"class.std::__1::__vector_base.161" = type { i16*, i16*, %"class.std::__1::__compressed_pair.162" }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.163" = type { i16* }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.172" = type { %"class.std::__1::__vector_base.173" }
%"class.std::__1::__vector_base.173" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.182" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.174", i32, %"class.std::__1::vector.18", %"class.std::__1::vector.175" }
%"struct.std::__1::array.174" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.175" = type { %"class.std::__1::__vector_base.176" }
%"class.std::__1::__vector_base.176" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.177" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.177" = type { %"struct.std::__1::__compressed_pair_elem.178" }
%"struct.std::__1::__compressed_pair_elem.178" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.182" = type { %"struct.std::__1::__compressed_pair_elem.183" }
%"struct.std::__1::__compressed_pair_elem.183" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"class.std::__1::vector.188" = type { %"class.std::__1::__vector_base.189" }
%"class.std::__1::__vector_base.189" = type { %"class.jxl::Plane.110"*, %"class.jxl::Plane.110"*, %"class.std::__1::__compressed_pair.190" }
%"class.std::__1::__compressed_pair.190" = type { %"struct.std::__1::__compressed_pair_elem.191" }
%"struct.std::__1::__compressed_pair_elem.191" = type { %"class.jxl::Plane.110"* }
%"class.std::__1::vector.195" = type { %"class.std::__1::__vector_base.196" }
%"class.std::__1::__vector_base.196" = type { %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*, %"class.std::__1::__compressed_pair.197" }
%"class.std::__1::__compressed_pair.197" = type { %"struct.std::__1::__compressed_pair_elem.198" }
%"struct.std::__1::__compressed_pair_elem.198" = type { %"class.jxl::ImageBundle"* }
%"struct.std::__1::array" = type { [2 x i32] }
%"class.std::__1::vector.267" = type { %"class.std::__1::__vector_base.268" }
%"class.std::__1::__vector_base.268" = type { %struct.TreeRange*, %struct.TreeRange*, %"class.std::__1::__compressed_pair.269" }
%struct.TreeRange = type { i32, i32, i64 }
%"class.std::__1::__compressed_pair.269" = type { %"struct.std::__1::__compressed_pair_elem.270" }
%"struct.std::__1::__compressed_pair_elem.270" = type { %struct.TreeRange* }
%"struct.jxl::BitWriter" = type { i64, %"class.jxl::PaddedBytes", %"class.jxl::BitWriter::Allotment"* }
%"class.jxl::BitWriter::Allotment" = type { i64, i64, i64, i8, %"class.jxl::BitWriter::Allotment"* }
%"struct.jxl::GroupHeader" = type { %"class.jxl::Fields", i8, %"struct.jxl::weighted::Header", %"class.std::__1::vector.4" }
%"class.std::__1::vector.213" = type { %"class.std::__1::__vector_base.214" }
%"class.std::__1::__vector_base.214" = type { %"class.std::__1::vector.101"*, %"class.std::__1::vector.101"*, %"class.std::__1::__compressed_pair.215" }
%"class.std::__1::__compressed_pair.215" = type { %"struct.std::__1::__compressed_pair_elem.216" }
%"struct.std::__1::__compressed_pair_elem.216" = type { %"class.std::__1::vector.101"* }
%"struct.jxl::EntropyEncodingData" = type { %"class.std::__1::vector.220", i8, %"class.std::__1::vector.228", %"struct.jxl::LZ77Params" }
%"class.std::__1::vector.220" = type { %"class.std::__1::__vector_base.221" }
%"class.std::__1::__vector_base.221" = type { %"class.std::__1::vector.222"*, %"class.std::__1::vector.222"*, %"class.std::__1::__compressed_pair.223" }
%"class.std::__1::vector.222" = type { %"class.std::__1::__vector_base.242" }
%"class.std::__1::__vector_base.242" = type { %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"*, %"class.std::__1::__compressed_pair.243" }
%"struct.jxl::ANSEncSymbolInfo" = type <{ i16, [6 x i8], %"class.std::__1::vector.39", i64, i8, i8, i16, [4 x i8] }>
%"class.std::__1::__compressed_pair.243" = type { %"struct.std::__1::__compressed_pair_elem.244" }
%"struct.std::__1::__compressed_pair_elem.244" = type { %"struct.jxl::ANSEncSymbolInfo"* }
%"class.std::__1::__compressed_pair.223" = type { %"struct.std::__1::__compressed_pair_elem.224" }
%"struct.std::__1::__compressed_pair_elem.224" = type { %"class.std::__1::vector.222"* }
%"class.std::__1::vector.228" = type { %"class.std::__1::__vector_base.229" }
%"class.std::__1::__vector_base.229" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.230" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.230" = type { %"struct.std::__1::__compressed_pair_elem.231" }
%"struct.std::__1::__compressed_pair_elem.231" = type { %"struct.jxl::HybridUintConfig"* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"struct.jxl::HistogramParams" = type <{ i32, i32, i32, i32, %"class.std::__1::vector.235", i64, i8, [7 x i8] }>
%"class.std::__1::vector.235" = type { %"class.std::__1::__vector_base.236" }
%"class.std::__1::__vector_base.236" = type { i64*, i64*, %"class.std::__1::__compressed_pair.237" }
%"class.std::__1::__compressed_pair.237" = type { %"struct.std::__1::__compressed_pair_elem.238" }
%"struct.std::__1::__compressed_pair_elem.238" = type { i64* }
%"class.jxl::Visitor" = type { i32 (...)** }

$_ZN3jxl8weighted5StateC2ENS0_6HeaderEmm = comdat any

$_ZN3jxl20PrecomputeReferencesERKNS_7ChannelEmRKNS_5ImageEjPS0_ = comdat any

$_ZN3jxl17TreeToLookupTableItEEbRKNSt3__16vectorINS_16FlatDecisionNodeENS1_9allocatorIS3_EEEEPT_PaSB_ = comdat any

$_ZN3jxl11TreeSamplesD2Ev = comdat any

$_ZN3jxl11GroupHeaderD2Ev = comdat any

$_ZN3jxl8weighted6HeaderD0Ev = comdat any

$_ZNK3jxl8weighted6Header4NameEv = comdat any

$_ZN3jxl8weighted6Header11VisitFieldsEPNS_7VisitorE = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm = comdat any

$_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm = comdat any

$_ZN3jxl6detail7PredictILi14EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl = comdat any

$_ZN3jxl6detail7PredictILi6EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl = comdat any

$_ZN3jxl6detail7PredictILi0EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl = comdat any

$_ZN3jxl6detail7PredictILi1EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl = comdat any

$_ZN3jxl6detail7PredictILi3EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl = comdat any

$_ZN3jxl6FieldsD2Ev = comdat any

$_ZN3jxl11GroupHeaderD0Ev = comdat any

$_ZNK3jxl11GroupHeader4NameEv = comdat any

$_ZN3jxl11GroupHeader11VisitFieldsEPNS_7VisitorE = comdat any

$_ZNSt3__16vectorIN3jxl9TransformENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZN3jxl9TransformD2Ev = comdat any

$_ZN3jxl9TransformD0Ev = comdat any

$_ZNK3jxl9Transform4NameEv = comdat any

$_ZN3jxl9Transform11VisitFieldsEPNS_7VisitorE = comdat any

$_ZNSt3__16vectorIN3jxl13SqueezeParamsENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZN3jxl13SqueezeParamsD0Ev = comdat any

$_ZNK3jxl13SqueezeParams4NameEv = comdat any

$_ZN3jxl13SqueezeParams11VisitFieldsEPNS_7VisitorE = comdat any

$_ZNSt3__16vectorIN3jxl9TransformENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_ = comdat any

$_ZNSt3__16vectorIN3jxl13SqueezeParamsENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_ = comdat any

$_ZNSt3__16vectorIN3jxl5TokenENS_9allocatorIS2_EEE8__appendEmRKS2_ = comdat any

$_ZTVN3jxl8weighted6HeaderE = comdat any

$_ZTVN3jxl11GroupHeaderE = comdat any

$_ZTVN3jxl9TransformE = comdat any

$_ZTVN3jxl13SqueezeParamsE = comdat any

@.str = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [70 x i8] c"../../third_party/libjxl/src/lib/jxl/modular/encoding/enc_encoding.cc\00", align 1
@.str.2 = private unnamed_addr constant [33 x i8] c"channel.w != 0 && channel.h != 0\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"residual % res.multiplier == 0\00", align 1
@.str.10 = private unnamed_addr constant [41 x i8] c"(tree == nullptr) == (tokens == nullptr)\00", align 1
@.str.11 = private unnamed_addr constant [36 x i8] c"tree->size() == decoded_tree.size()\00", align 1
@__const._ZN3jxl22ModularGenericCompressERNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSC_9allocatorISE_EEEEPNS_11GroupHeaderEPNSD_INS_5TokenENSF_ISM_EEEESB_.options = private unnamed_addr constant %"struct.jxl::ModularOptions" <{ i64 -6148914691236517206, float 0xFFFFFFFFE0000000, i32 -1431655766, %"class.std::__1::vector.18" { %"class.std::__1::__vector_base.19" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.20" { %"struct.std::__1::__compressed_pair_elem.21" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, i32 -1431655766, i32 -1431655766, float 0xFFFFFFFFE0000000, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, align 8
@_ZTVN3jxl8weighted6HeaderE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::weighted::Header"*)* @_ZN3jxl8weighted6HeaderD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::weighted::Header"*)* @_ZNK3jxl8weighted6Header4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::weighted::Header"*, %"class.jxl::Visitor"*)* @_ZN3jxl8weighted6Header11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@.str.14 = private unnamed_addr constant [24 x i8] c"WeightedPredictorHeader\00", align 1
@_ZTVN3jxl11GroupHeaderE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"struct.jxl::GroupHeader"*)* @_ZN3jxl11GroupHeaderD2Ev to i8*), i8* bitcast (void (%"struct.jxl::GroupHeader"*)* @_ZN3jxl11GroupHeaderD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::GroupHeader"*)* @_ZNK3jxl11GroupHeader4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::GroupHeader"*, %"class.jxl::Visitor"*)* @_ZN3jxl11GroupHeader11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@.str.16 = private unnamed_addr constant [12 x i8] c"GroupHeader\00", align 1
@_ZTVN3jxl9TransformE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Transform"*)* @_ZN3jxl9TransformD2Ev to i8*), i8* bitcast (void (%"class.jxl::Transform"*)* @_ZN3jxl9TransformD0Ev to i8*), i8* bitcast (i8* (%"class.jxl::Transform"*)* @_ZNK3jxl9Transform4NameEv to i8*), i8* bitcast (i32 (%"class.jxl::Transform"*, %"class.jxl::Visitor"*)* @_ZN3jxl9Transform11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@.str.17 = private unnamed_addr constant [10 x i8] c"Transform\00", align 1
@_ZTVN3jxl13SqueezeParamsE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::SqueezeParams"*)* @_ZN3jxl13SqueezeParamsD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::SqueezeParams"*)* @_ZNK3jxl13SqueezeParams4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::SqueezeParams"*, %"class.jxl::Visitor"*)* @_ZN3jxl13SqueezeParams11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@.str.22 = private unnamed_addr constant [14 x i8] c"SqueezeParams\00", align 1
@switch.table._ZN3jxl25EncodeModularChannelMAANSERKNS_5ImageEiRKNS_8weighted6HeaderERKNSt3__16vectorINS_20PropertyDecisionNodeENS7_9allocatorIS9_EEEEPNS8_INS_5TokenENSA_ISF_EEEEPNS_6AuxOutEmb = private unnamed_addr constant [14 x float] [float 0.000000e+00, float 2.550000e+02, float 0.000000e+00, float 0.000000e+00, float 2.550000e+02, float 2.550000e+02, float 0.000000e+00, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 1.920000e+02], align 4
@switch.table._ZN3jxl25EncodeModularChannelMAANSERKNS_5ImageEiRKNS_8weighted6HeaderERKNSt3__16vectorINS_20PropertyDecisionNodeENS7_9allocatorIS9_EEEEPNS8_INS_5TokenENSA_ISF_EEEEPNS_6AuxOutEmb.23 = private unnamed_addr constant [14 x float] [float 0.000000e+00, float 0.000000e+00, float 2.550000e+02, float 0.000000e+00, float 2.550000e+02, float 0.000000e+00, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 1.280000e+02], align 4
@switch.table._ZN3jxl25EncodeModularChannelMAANSERKNS_5ImageEiRKNS_8weighted6HeaderERKNSt3__16vectorINS_20PropertyDecisionNodeENS7_9allocatorIS9_EEEEPNS8_INS_5TokenENSA_ISF_EEEEPNS_6AuxOutEmb.24 = private unnamed_addr constant [14 x float] [float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 2.550000e+02, float 0.000000e+00, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 1.280000e+02], align 4
@switch.table._ZN3jxl13ModularEncodeERKNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSD_9allocatorISF_EEEEPNS_11GroupHeaderEPNSE_INS_5TokenENSG_ISN_EEEESC_ = private unnamed_addr constant [4 x i32] [i32 12, i32 12, i32 12, i32 13], align 4
@switch.table._ZN3jxl13ModularEncodeERKNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSD_9allocatorISF_EEEEPNS_11GroupHeaderEPNSE_INS_5TokenENSG_ISN_EEEESC_.25 = private unnamed_addr constant [4 x i32] [i32 12, i32 12, i32 13, i32 12], align 4
@switch.table._ZN3jxl13ModularEncodeERKNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSD_9allocatorISF_EEEEPNS_11GroupHeaderEPNSE_INS_5TokenENSG_ISN_EEEESC_.26 = private unnamed_addr constant [4 x i32] [i32 12, i32 11, i32 12, i32 12], align 4
@switch.table._ZN3jxl13ModularEncodeERKNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSD_9allocatorISF_EEEEPNS_11GroupHeaderEPNSE_INS_5TokenENSG_ISN_EEEESC_.27 = private unnamed_addr constant [4 x i32] [i32 16, i32 8, i32 10, i32 16], align 4
@switch.table._ZN3jxl13ModularEncodeERKNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSD_9allocatorISF_EEEEPNS_11GroupHeaderEPNSE_INS_5TokenENSG_ISN_EEEESC_.28 = private unnamed_addr constant [4 x i32] [i32 10, i32 8, i32 9, i32 8], align 4
@switch.table._ZN3jxl13ModularEncodeERKNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSD_9allocatorISF_EEEEPNS_11GroupHeaderEPNSE_INS_5TokenENSG_ISN_EEEESC_.29 = private unnamed_addr constant [4 x i32] [i32 7, i32 4, i32 7, i32 0], align 4
@switch.table._ZN3jxl13ModularEncodeERKNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSD_9allocatorISF_EEEEPNS_11GroupHeaderEPNSE_INS_5TokenENSG_ISN_EEEESC_.30 = private unnamed_addr constant [4 x i32] [i32 7, i32 0, i32 0, i32 16], align 4
@switch.table._ZN3jxl13ModularEncodeERKNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSD_9allocatorISF_EEEEPNS_11GroupHeaderEPNSE_INS_5TokenENSG_ISN_EEEESC_.31 = private unnamed_addr constant [4 x i32] [i32 7, i32 3, i32 0, i32 0], align 4
@switch.table._ZN3jxl13ModularEncodeERKNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSD_9allocatorISF_EEEEPNS_11GroupHeaderEPNSE_INS_5TokenENSG_ISN_EEEESC_.32 = private unnamed_addr constant [4 x i32] [i32 0, i32 23, i32 16, i32 23], align 4
@switch.table._ZN3jxl13ModularEncodeERKNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSD_9allocatorISF_EEEEPNS_11GroupHeaderEPNSE_INS_5TokenENSG_ISN_EEEESC_.33 = private unnamed_addr constant [4 x i32] [i32 0, i32 2, i32 9, i32 0], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl14GatherTreeDataERKNS_5ImageEimRKNS_8weighted6HeaderERKNS_14ModularOptionsERNS_11TreeSamplesEPm(%"class.jxl::Image"* dereferenceable(104), i32, i64, %"struct.jxl::weighted::Header"* nocapture readonly dereferenceable(56), %"struct.jxl::ModularOptions"* nocapture readonly dereferenceable(88), %"struct.jxl::TreeSamples"* dereferenceable(200), i64* nocapture) local_unnamed_addr #0 {
  %8 = alloca %"struct.jxl::PredictionResult", align 8
  %9 = alloca %"class.std::__1::vector.61", align 8
  %10 = alloca %"class.jxl::Channel", align 8
  %11 = alloca %"struct.jxl::weighted::State", align 8
  %12 = alloca %"struct.jxl::weighted::Header", align 8
  %13 = alloca [14 x i64], align 16
  %14 = alloca %"struct.jxl::PredictionResult", align 8
  %15 = sext i32 %1 to i64
  %16 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %16, align 8
  %18 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %17, i64 %15
  %19 = trunc i64 %2 to i32
  %20 = bitcast %"class.std::__1::vector.61"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #9
  %21 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %9, i64 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %9, i64 0, i32 0, i32 1
  %23 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  %24 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %4, i64 0, i32 2
  %25 = load i32, i32* %24, align 4
  %26 = sext i32 %25 to i64
  %27 = shl nsw i64 %26, 2
  %28 = add nsw i64 %27, 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 24, i1 false) #9
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %49, label %30

30:                                               ; preds = %7
  %31 = icmp ugt i64 %28, 4611686018427387903
  br i1 %31, label %32, label %34

32:                                               ; preds = %30
  %33 = bitcast %"class.std::__1::vector.61"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %33) #11
  unreachable

34:                                               ; preds = %30
  %35 = shl nsw i64 %28, 2
  %36 = tail call i8* @_Znwm(i64 %35) #12
  %37 = bitcast i8* %36 to i32*
  %38 = bitcast %"class.std::__1::vector.61"* %9 to i8**
  store i8* %36, i8** %38, align 8
  %39 = getelementptr inbounds i32, i32* %37, i64 %28
  store i32* %39, i32** %23, align 8
  %40 = bitcast i32** %22 to i64*
  %41 = ptrtoint i8* %36 to i64
  %42 = add nsw i64 %27, 15
  %43 = getelementptr i32, i32* %37, i64 %42
  %44 = ptrtoint i32* %43 to i64
  %45 = sub i64 4, %41
  %46 = add i64 %45, %44
  %47 = and i64 %46, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %36, i8 0, i64 %47, i1 false) #9
  %48 = ptrtoint i32* %39 to i64
  store i64 %48, i64* %40, align 8
  br label %49

49:                                               ; preds = %7, %34
  %50 = phi i64 [ 0, %7 ], [ %41, %34 ]
  %51 = phi i64 [ 0, %7 ], [ %48, %34 ]
  %52 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %4, i64 0, i32 1
  %53 = load float, float* %52, align 4
  %54 = fcmp olt float %53, 1.000000e+00
  %55 = select i1 %54, float %53, float 1.000000e+00
  %56 = fpext float %55 to double
  %57 = fcmp ogt float %55, 0.000000e+00
  br i1 %57, label %58, label %70

58:                                               ; preds = %49
  %59 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %17, i64 %15, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %17, i64 %15, i32 2
  %62 = load i64, i64* %61, align 8
  %63 = mul i64 %62, %60
  %64 = uitofp i64 %63 to double
  %65 = fdiv double 1.024000e+03, %64
  %66 = fcmp olt double %65, 1.000000e+00
  %67 = select i1 %66, double %65, double 1.000000e+00
  %68 = fcmp ogt double %67, %56
  %69 = select i1 %68, double %67, double %56
  br label %70

70:                                               ; preds = %58, %49
  %71 = phi double [ %69, %58 ], [ %56, %49 ]
  %72 = fmul double %71, 0x41EFFFFFFFE00000
  %73 = fptoui double %72 to i64
  %74 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %17, i64 %15, i32 0, i32 0, i32 4
  %75 = load i64, i64* %74, align 8
  %76 = lshr i64 %75, 2
  %77 = bitcast %"class.jxl::Channel"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %77) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %77, i8 -86, i64 64, i1 false)
  %78 = bitcast i32** %22 to i64*
  %79 = sub i64 %51, %50
  %80 = ashr exact i64 %79, 2
  %81 = add nsw i64 %80, -16
  %82 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %17, i64 %15, i32 1
  %83 = load i64, i64* %82, align 8
  %84 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %10, i64 0, i32 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %84, i64 %81, i64 %83, i64 4) #9
  %85 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %10, i64 0, i32 1
  store i64 %81, i64* %85, align 8
  %86 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %10, i64 0, i32 2
  store i64 %83, i64* %86, align 8
  %87 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %10, i64 0, i32 3
  %88 = bitcast %"struct.jxl::weighted::State"* %11 to i8*
  %89 = bitcast i32* %87 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %89, i8 0, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 472, i8* nonnull %88) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %88, i8 -86, i64 472, i1 false)
  %90 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %12, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %90, align 8
  %91 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %12, i64 0, i32 1
  %92 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %3, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* align 8 %92, i64 48, i1 false) #9
  %93 = load i64, i64* %82, align 8
  %94 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %17, i64 %15, i32 2
  %95 = load i64, i64* %94, align 8
  call void @_ZN3jxl8weighted5StateC2ENS0_6HeaderEmm(%"struct.jxl::weighted::State"* nonnull %11, %"struct.jxl::weighted::Header"* nonnull %12, i64 %93, i64 %95)
  %96 = load i64, i64* %94, align 8
  %97 = uitofp i64 %96 to double
  %98 = fmul double %71, %97
  %99 = load i64, i64* %82, align 8
  %100 = uitofp i64 %99 to double
  %101 = fmul double %98, %100
  %102 = fadd double %101, 6.400000e+01
  %103 = fptoui double %102 to i64
  call void @_ZN3jxl11TreeSamples17PrepareForSamplesEm(%"struct.jxl::TreeSamples"* %5, i64 %103) #9
  %104 = load i64, i64* %94, align 8
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %128, label %106

106:                                              ; preds = %70
  %107 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %17, i64 %15, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %108 = bitcast [14 x i64]* %13 to i8*
  %109 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %5, i64 0, i32 5
  %110 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %5, i64 0, i32 5, i32 0, i32 1
  %111 = bitcast i32** %110 to i64*
  %112 = bitcast %"class.std::__1::vector.73"* %109 to i64*
  %113 = getelementptr inbounds [14 x i64], [14 x i64]* %13, i64 0, i64 0
  %114 = bitcast %"struct.jxl::PredictionResult"* %8 to i8*
  %115 = bitcast %"struct.jxl::PredictionResult"* %14 to i8*
  %116 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %5, i64 0, i32 5, i32 0, i32 0
  %117 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %14, i64 0, i32 1
  %118 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 1
  %119 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 3, i32 0, i32 0
  %120 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 0, i64 0
  %121 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 2, i64 0, i32 0, i32 0
  %122 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 0, i64 1
  %123 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 2, i64 1, i32 0, i32 0
  %124 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 0, i64 2
  %125 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 2, i64 2, i32 0, i32 0
  %126 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 0, i64 3
  %127 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 2, i64 3, i32 0, i32 0
  br label %185

128:                                              ; preds = %211, %70
  %129 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 3, i32 0, i32 0
  %130 = load i32*, i32** %129, align 8
  %131 = icmp eq i32* %130, null
  br i1 %131, label %137, label %132

132:                                              ; preds = %128
  %133 = ptrtoint i32* %130 to i64
  %134 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 3, i32 0, i32 1
  %135 = bitcast i32** %134 to i64*
  store i64 %133, i64* %135, align 8
  %136 = bitcast i32* %130 to i8*
  call void @_ZdlPv(i8* %136) #12
  br label %137

137:                                              ; preds = %132, %128
  %138 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 2, i64 3, i32 0, i32 0
  %139 = load i32*, i32** %138, align 8
  %140 = icmp eq i32* %139, null
  br i1 %140, label %146, label %141

141:                                              ; preds = %137
  %142 = ptrtoint i32* %139 to i64
  %143 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 2, i64 3, i32 0, i32 1
  %144 = bitcast i32** %143 to i64*
  store i64 %142, i64* %144, align 8
  %145 = bitcast i32* %139 to i8*
  call void @_ZdlPv(i8* %145) #12
  br label %146

146:                                              ; preds = %141, %137
  %147 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 2, i64 2, i32 0, i32 0
  %148 = load i32*, i32** %147, align 8
  %149 = icmp eq i32* %148, null
  br i1 %149, label %155, label %150

150:                                              ; preds = %146
  %151 = ptrtoint i32* %148 to i64
  %152 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 2, i64 2, i32 0, i32 1
  %153 = bitcast i32** %152 to i64*
  store i64 %151, i64* %153, align 8
  %154 = bitcast i32* %148 to i8*
  call void @_ZdlPv(i8* %154) #12
  br label %155

155:                                              ; preds = %150, %146
  %156 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 2, i64 1, i32 0, i32 0
  %157 = load i32*, i32** %156, align 8
  %158 = icmp eq i32* %157, null
  br i1 %158, label %164, label %159

159:                                              ; preds = %155
  %160 = ptrtoint i32* %157 to i64
  %161 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 2, i64 1, i32 0, i32 1
  %162 = bitcast i32** %161 to i64*
  store i64 %160, i64* %162, align 8
  %163 = bitcast i32* %157 to i8*
  call void @_ZdlPv(i8* %163) #12
  br label %164

164:                                              ; preds = %159, %155
  %165 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 2, i64 0, i32 0, i32 0
  %166 = load i32*, i32** %165, align 8
  %167 = icmp eq i32* %166, null
  br i1 %167, label %173, label %168

168:                                              ; preds = %164
  %169 = ptrtoint i32* %166 to i64
  %170 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %11, i64 0, i32 2, i64 0, i32 0, i32 1
  %171 = bitcast i32** %170 to i64*
  store i64 %169, i64* %171, align 8
  %172 = bitcast i32* %166 to i8*
  call void @_ZdlPv(i8* %172) #12
  br label %173

173:                                              ; preds = %164, %168
  call void @llvm.lifetime.end.p0i8(i64 472, i8* nonnull %88) #9
  %174 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %10, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %175 = load i8*, i8** %174, align 8
  store i8* null, i8** %174, align 8
  %176 = icmp eq i8* %175, null
  br i1 %176, label %178, label %177

177:                                              ; preds = %173
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %175) #9
  br label %178

178:                                              ; preds = %173, %177
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %77) #9
  %179 = load i32*, i32** %21, align 8
  %180 = icmp eq i32* %179, null
  br i1 %180, label %184, label %181

181:                                              ; preds = %178
  %182 = ptrtoint i32* %179 to i64
  store i64 %182, i64* %78, align 8
  %183 = bitcast i32* %179 to i8*
  call void @_ZdlPv(i8* %183) #12
  br label %184

184:                                              ; preds = %178, %181
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #9
  ret void

185:                                              ; preds = %106, %211
  %186 = phi i64 [ 0, %106 ], [ %214, %211 ]
  %187 = phi i64 [ -7723592293110705685, %106 ], [ %213, %211 ]
  %188 = phi i64 [ -4658895280553007687, %106 ], [ %212, %211 ]
  %189 = load i8*, i8** %107, align 8
  %190 = load i64, i64* %74, align 8
  %191 = mul i64 %190, %186
  %192 = getelementptr inbounds i8, i8* %189, i64 %191
  %193 = ptrtoint i8* %192 to i64
  %194 = and i64 %193, 63
  %195 = icmp eq i64 %194, 0
  call void @llvm.assume(i1 %195) #9
  %196 = bitcast i8* %192 to i32*
  call void @_ZN3jxl20PrecomputeReferencesERKNS_7ChannelEmRKNS_5ImageEjPS0_(%"class.jxl::Channel"* dereferenceable(64) %18, i64 %186, %"class.jxl::Image"* dereferenceable(104) %0, i32 %1, %"class.jxl::Channel"* nonnull %10)
  %197 = trunc i64 %186 to i32
  %198 = load i32*, i32** %21, align 8
  store i32 %1, i32* %198, align 4
  %199 = load i32*, i32** %21, align 8
  %200 = getelementptr inbounds i32, i32* %199, i64 1
  store i32 %19, i32* %200, align 4
  %201 = load i32*, i32** %21, align 8
  %202 = getelementptr inbounds i32, i32* %201, i64 2
  store i32 %197, i32* %202, align 4
  %203 = getelementptr inbounds i32, i32* %201, i64 9
  store i32 0, i32* %203, align 4
  %204 = load i64, i64* %82, align 8
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %211, label %206

206:                                              ; preds = %185
  %207 = shl i64 %186, 32
  %208 = ashr exact i64 %207, 32
  %209 = and i64 %186, 1
  %210 = icmp ne i64 %209, 0
  br label %217

211:                                              ; preds = %260, %185
  %212 = phi i64 [ %188, %185 ], [ %253, %260 ]
  %213 = phi i64 [ %187, %185 ], [ %220, %260 ]
  %214 = add nuw i64 %186, 1
  %215 = load i64, i64* %94, align 8
  %216 = icmp ult i64 %214, %215
  br i1 %216, label %185, label %128

217:                                              ; preds = %206, %260
  %218 = phi i64 [ 0, %206 ], [ %279, %260 ]
  %219 = phi i64 [ %187, %206 ], [ %220, %260 ]
  %220 = phi i64 [ %188, %206 ], [ %253, %260 ]
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %108) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %108, i8 -86, i64 112, i1 false)
  %221 = load i64, i64* %111, align 8
  %222 = load i64, i64* %112, align 8
  %223 = sub i64 %221, %222
  %224 = icmp eq i64 %223, 4
  br i1 %224, label %230, label %225

225:                                              ; preds = %217
  %226 = load i64, i64* %82, align 8
  %227 = getelementptr inbounds i32, i32* %196, i64 %218
  %228 = shl i64 %218, 32
  %229 = ashr exact i64 %228, 32
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %114) #9, !noalias !2
  call void @_ZN3jxl6detail7PredictILi14EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl(%"struct.jxl::PredictionResult"* nonnull sret %8, %"class.std::__1::vector.61"* nonnull %9, i64 %226, i32* %227, i64 %76, i64 %229, i64 %208, i32 0, %"class.jxl::MATreeLookup"* null, %"class.jxl::Channel"* nonnull %10, %"struct.jxl::weighted::State"* nonnull %11, i64* nonnull %113) #9
  br label %242

230:                                              ; preds = %217
  %231 = inttoptr i64 %222 to i32*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %115) #9
  %232 = load i64, i64* %82, align 8
  %233 = getelementptr inbounds i32, i32* %196, i64 %218
  %234 = load i32, i32* %231, align 4
  %235 = shl i64 %218, 32
  %236 = ashr exact i64 %235, 32
  call void @_ZN3jxl6detail7PredictILi6EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl(%"struct.jxl::PredictionResult"* nonnull sret %14, %"class.std::__1::vector.61"* nonnull %9, i64 %232, i32* %233, i64 %76, i64 %236, i64 %208, i32 %234, %"class.jxl::MATreeLookup"* null, %"class.jxl::Channel"* nonnull %10, %"struct.jxl::weighted::State"* nonnull %11, i64* null) #9
  %237 = load i64, i64* %117, align 8
  %238 = load i32*, i32** %116, align 8
  %239 = load i32, i32* %238, align 4
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds [14 x i64], [14 x i64]* %13, i64 0, i64 %240
  store i64 %237, i64* %241, align 8
  br label %242

242:                                              ; preds = %230, %225
  %243 = phi i8* [ %115, %230 ], [ %114, %225 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %243) #9
  %244 = load i64, i64* %6, align 8
  %245 = add i64 %244, 1
  store i64 %245, i64* %6, align 8
  %246 = add i64 %219, %220
  %247 = shl i64 %219, 23
  %248 = xor i64 %247, %219
  %249 = lshr i64 %248, 18
  %250 = lshr i64 %220, 5
  %251 = xor i64 %250, %220
  %252 = xor i64 %251, %248
  %253 = xor i64 %252, %249
  %254 = lshr i64 %246, 32
  %255 = icmp ugt i64 %254, %73
  br i1 %255, label %260, label %256

256:                                              ; preds = %242
  %257 = getelementptr inbounds i32, i32* %196, i64 %218
  %258 = load i32, i32* %257, align 4
  %259 = sext i32 %258 to i64
  call void @_ZN3jxl11TreeSamples9AddSampleElRKNSt3__16vectorIiNS1_9allocatorIiEEEEPKl(%"struct.jxl::TreeSamples"* %5, i64 %259, %"class.std::__1::vector.61"* nonnull dereferenceable(24) %9, i64* nonnull %113) #9
  br label %260

260:                                              ; preds = %242, %256
  %261 = getelementptr inbounds i32, i32* %196, i64 %218
  %262 = load i32, i32* %261, align 4
  %263 = sext i32 %262 to i64
  %264 = load i64, i64* %82, align 8
  %265 = add i64 %264, 2
  %266 = select i1 %210, i64 0, i64 %265
  %267 = select i1 %210, i64 %265, i64 0
  %268 = shl nsw i64 %263, 3
  %269 = load i64, i64* %118, align 8
  %270 = sub nsw i64 %269, %268
  %271 = icmp slt i64 %270, 2147483647
  %272 = select i1 %271, i64 %270, i64 2147483647
  %273 = icmp sgt i64 %272, -2147483648
  %274 = select i1 %273, i64 %272, i64 -2147483648
  %275 = trunc i64 %274 to i32
  %276 = add i64 %266, %218
  %277 = load i32*, i32** %119, align 8
  %278 = getelementptr inbounds i32, i32* %277, i64 %276
  store i32 %275, i32* %278, align 4
  %279 = add nuw i64 %218, 1
  %280 = add i64 %267, %279
  %281 = load i64, i64* %120, align 8
  %282 = sub nsw i64 %281, %268
  %283 = sub nsw i64 0, %282
  %284 = icmp slt i64 %282, 0
  %285 = select i1 %284, i64 %283, i64 %282
  %286 = add nuw nsw i64 %285, 3
  %287 = lshr i64 %286, 3
  %288 = trunc i64 %287 to i32
  %289 = load i32*, i32** %121, align 8
  %290 = getelementptr inbounds i32, i32* %289, i64 %276
  store i32 %288, i32* %290, align 4
  %291 = load i32*, i32** %121, align 8
  %292 = getelementptr inbounds i32, i32* %291, i64 %280
  %293 = load i32, i32* %292, align 4
  %294 = add i32 %293, %288
  store i32 %294, i32* %292, align 4
  %295 = load i64, i64* %122, align 8
  %296 = sub nsw i64 %295, %268
  %297 = sub nsw i64 0, %296
  %298 = icmp slt i64 %296, 0
  %299 = select i1 %298, i64 %297, i64 %296
  %300 = add nuw nsw i64 %299, 3
  %301 = lshr i64 %300, 3
  %302 = trunc i64 %301 to i32
  %303 = load i32*, i32** %123, align 8
  %304 = getelementptr inbounds i32, i32* %303, i64 %276
  store i32 %302, i32* %304, align 4
  %305 = load i32*, i32** %123, align 8
  %306 = getelementptr inbounds i32, i32* %305, i64 %280
  %307 = load i32, i32* %306, align 4
  %308 = add i32 %307, %302
  store i32 %308, i32* %306, align 4
  %309 = load i64, i64* %124, align 8
  %310 = sub nsw i64 %309, %268
  %311 = sub nsw i64 0, %310
  %312 = icmp slt i64 %310, 0
  %313 = select i1 %312, i64 %311, i64 %310
  %314 = add nuw nsw i64 %313, 3
  %315 = lshr i64 %314, 3
  %316 = trunc i64 %315 to i32
  %317 = load i32*, i32** %125, align 8
  %318 = getelementptr inbounds i32, i32* %317, i64 %276
  store i32 %316, i32* %318, align 4
  %319 = load i32*, i32** %125, align 8
  %320 = getelementptr inbounds i32, i32* %319, i64 %280
  %321 = load i32, i32* %320, align 4
  %322 = add i32 %321, %316
  store i32 %322, i32* %320, align 4
  %323 = load i64, i64* %126, align 8
  %324 = sub nsw i64 %323, %268
  %325 = sub nsw i64 0, %324
  %326 = icmp slt i64 %324, 0
  %327 = select i1 %326, i64 %325, i64 %324
  %328 = add nuw nsw i64 %327, 3
  %329 = lshr i64 %328, 3
  %330 = trunc i64 %329 to i32
  %331 = load i32*, i32** %127, align 8
  %332 = getelementptr inbounds i32, i32* %331, i64 %276
  store i32 %330, i32* %332, align 4
  %333 = load i32*, i32** %127, align 8
  %334 = getelementptr inbounds i32, i32* %333, i64 %280
  %335 = load i32, i32* %334, align 4
  %336 = add i32 %335, %330
  store i32 %336, i32* %334, align 4
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %108) #9
  %337 = load i64, i64* %82, align 8
  %338 = icmp ult i64 %279, %337
  br i1 %338, label %217, label %211
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8weighted5StateC2ENS0_6HeaderEmm(%"struct.jxl::weighted::State"*, %"struct.jxl::weighted::Header"*, i64, i64) unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 3
  %6 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 4, i32 0, i32 0
  %7 = bitcast %"struct.jxl::weighted::State"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 160, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %8 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 4, i32 1
  %9 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %1, i64 0, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 48, i1 false) #9
  %10 = shl i64 %2, 1
  %11 = add i64 %10, 4
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %28, label %20

13:                                               ; preds = %89
  %14 = sub i64 %11, %96
  tail call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.61"* %5, i64 %14) #9
  br label %19

15:                                               ; preds = %89
  %16 = icmp ult i64 %11, %96
  br i1 %16, label %17, label %19

17:                                               ; preds = %15
  %18 = getelementptr inbounds i32, i32* %98, i64 %11
  store i32* %18, i32** %90, align 8
  br label %19

19:                                               ; preds = %13, %15, %17
  br label %37

20:                                               ; preds = %4
  %21 = getelementptr %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 2, i64 0
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.18"* %21, i64 %11) #9
  %22 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 2, i64 1, i32 0, i32 1
  %23 = bitcast i32** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 2, i64 1
  %26 = bitcast %"class.std::__1::vector.18"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  br label %28

28:                                               ; preds = %4, %20
  %29 = phi i64 [ %27, %20 ], [ 0, %4 ]
  %30 = phi i64 [ %24, %20 ], [ 0, %4 ]
  %31 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 2, i64 1, i32 0, i32 1
  %32 = sub i64 %30, %29
  %33 = ashr exact i64 %32, 2
  %34 = icmp ugt i64 %11, %33
  %35 = inttoptr i64 %29 to i32*
  br i1 %34, label %52, label %48

36:                                               ; preds = %37
  ret void

37:                                               ; preds = %37, %19
  %38 = phi i64 [ 0, %19 ], [ %43, %37 ]
  %39 = or i64 %38, 1
  %40 = trunc i64 %39 to i32
  %41 = udiv i32 16777216, %40
  %42 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 5, i64 %38
  store i32 %41, i32* %42, align 4
  %43 = add nuw nsw i64 %38, 2
  %44 = trunc i64 %43 to i32
  %45 = udiv i32 16777216, %44
  %46 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 5, i64 %39
  store i32 %45, i32* %46, align 4
  %47 = icmp eq i64 %43, 64
  br i1 %47, label %36, label %37

48:                                               ; preds = %28
  %49 = icmp ult i64 %11, %33
  br i1 %49, label %50, label %55

50:                                               ; preds = %48
  %51 = getelementptr inbounds i32, i32* %35, i64 %11
  store i32* %51, i32** %31, align 8
  br label %55

52:                                               ; preds = %28
  %53 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 2, i64 1
  %54 = sub i64 %11, %33
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.18"* %53, i64 %54) #9
  br label %55

55:                                               ; preds = %52, %50, %48
  %56 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 2, i64 2
  %57 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 2, i64 2, i32 0, i32 1
  %58 = bitcast i32** %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = bitcast %"class.std::__1::vector.18"* %56 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = sub i64 %59, %61
  %63 = ashr exact i64 %62, 2
  %64 = icmp ugt i64 %11, %63
  %65 = inttoptr i64 %61 to i32*
  br i1 %64, label %70, label %66

66:                                               ; preds = %55
  %67 = icmp ult i64 %11, %63
  br i1 %67, label %68, label %72

68:                                               ; preds = %66
  %69 = getelementptr inbounds i32, i32* %65, i64 %11
  store i32* %69, i32** %57, align 8
  br label %72

70:                                               ; preds = %55
  %71 = sub i64 %11, %63
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.18"* %56, i64 %71) #9
  br label %72

72:                                               ; preds = %70, %68, %66
  %73 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 2, i64 3
  %74 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 2, i64 3, i32 0, i32 1
  %75 = bitcast i32** %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = bitcast %"class.std::__1::vector.18"* %73 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = sub i64 %76, %78
  %80 = ashr exact i64 %79, 2
  %81 = icmp ugt i64 %11, %80
  %82 = inttoptr i64 %78 to i32*
  br i1 %81, label %87, label %83

83:                                               ; preds = %72
  %84 = icmp ult i64 %11, %80
  br i1 %84, label %85, label %89

85:                                               ; preds = %83
  %86 = getelementptr inbounds i32, i32* %82, i64 %11
  store i32* %86, i32** %74, align 8
  br label %89

87:                                               ; preds = %72
  %88 = sub i64 %11, %80
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.18"* %73, i64 %88) #9
  br label %89

89:                                               ; preds = %87, %85, %83
  %90 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %0, i64 0, i32 3, i32 0, i32 1
  %91 = bitcast i32** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = bitcast %"class.std::__1::vector.61"* %5 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = sub i64 %92, %94
  %96 = ashr exact i64 %95, 2
  %97 = icmp ugt i64 %11, %96
  %98 = inttoptr i64 %94 to i32*
  br i1 %97, label %13, label %15
}

declare void @_ZN3jxl11TreeSamples17PrepareForSamplesEm(%"struct.jxl::TreeSamples"*, i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl20PrecomputeReferencesERKNS_7ChannelEmRKNS_5ImageEjPS0_(%"class.jxl::Channel"* dereferenceable(64), i64, %"class.jxl::Image"* dereferenceable(104), i32, %"class.jxl::Channel"*) local_unnamed_addr #3 comdat {
  %6 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %4, i64 0, i32 0, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %40, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %4, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %40, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %4, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %4, i64 0, i32 0, i32 0, i32 4
  %16 = load i8*, i8** %14, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = and i64 %17, 63
  %19 = icmp eq i64 %18, 0
  tail call void @llvm.assume(i1 %19) #9
  %20 = zext i32 %7 to i64
  %21 = shl nuw nsw i64 %20, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %16, i8 0, i64 %21, i1 false) #9
  %22 = load i32, i32* %10, align 4
  %23 = icmp ugt i32 %22, 1
  br i1 %23, label %24, label %40

24:                                               ; preds = %13, %24
  %25 = phi i64 [ %36, %24 ], [ 1, %13 ]
  %26 = load i32, i32* %6, align 8
  %27 = load i8*, i8** %14, align 8
  %28 = load i64, i64* %15, align 8
  %29 = mul i64 %28, %25
  %30 = getelementptr inbounds i8, i8* %27, i64 %29
  %31 = ptrtoint i8* %30 to i64
  %32 = and i64 %31, 63
  %33 = icmp eq i64 %32, 0
  tail call void @llvm.assume(i1 %33) #9
  %34 = zext i32 %26 to i64
  %35 = shl nuw nsw i64 %34, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 64 %30, i8 0, i64 %35, i1 false) #9
  %36 = add nuw nsw i64 %25, 1
  %37 = load i32, i32* %10, align 4
  %38 = zext i32 %37 to i64
  %39 = icmp ult i64 %36, %38
  br i1 %39, label %24, label %40

40:                                               ; preds = %24, %13, %5, %9
  %41 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %4, i64 0, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %4, i64 0, i32 0, i32 0, i32 4
  %44 = load i64, i64* %43, align 8
  %45 = lshr i64 %44, 2
  %46 = icmp sgt i32 %3, 0
  br i1 %46, label %47, label %62

47:                                               ; preds = %40
  %48 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %2, i64 0, i32 0, i32 0, i32 0
  %49 = zext i32 %3 to i64
  %50 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %4, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %51 = icmp ne i64 %1, 0
  %52 = add i64 %1, -1
  %53 = select i1 %51, i64 %52, i64 0
  %54 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %0, i64 0, i32 1
  %55 = sext i32 %3 to i64
  br label %56

56:                                               ; preds = %47, %166
  %57 = phi i64 [ %55, %47 ], [ %59, %166 ]
  %58 = phi i32 [ 0, %47 ], [ %167, %166 ]
  %59 = add nsw i64 %57, -1
  %60 = zext i32 %58 to i64
  %61 = icmp ugt i64 %42, %60
  br i1 %61, label %63, label %62

62:                                               ; preds = %56, %166, %40
  ret void

63:                                               ; preds = %56
  %64 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %48, align 8
  %65 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %64, i64 %59, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %64, i64 %49, i32 1
  %68 = load i64, i64* %67, align 8
  %69 = icmp eq i64 %66, %68
  br i1 %69, label %70, label %166

70:                                               ; preds = %63
  %71 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %64, i64 %59, i32 2
  %72 = load i64, i64* %71, align 8
  %73 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %64, i64 %49, i32 2
  %74 = load i64, i64* %73, align 8
  %75 = icmp eq i64 %72, %74
  br i1 %75, label %76, label %166

76:                                               ; preds = %70
  %77 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %64, i64 %59, i32 3
  %78 = load i32, i32* %77, align 8
  %79 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %64, i64 %49, i32 3
  %80 = load i32, i32* %79, align 8
  %81 = icmp eq i32 %78, %80
  br i1 %81, label %82, label %166

82:                                               ; preds = %76
  %83 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %64, i64 %59, i32 4
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %64, i64 %49, i32 4
  %86 = load i32, i32* %85, align 4
  %87 = icmp eq i32 %84, %86
  br i1 %87, label %88, label %166

88:                                               ; preds = %82
  %89 = load i8*, i8** %50, align 8
  %90 = ptrtoint i8* %89 to i64
  %91 = and i64 %90, 63
  %92 = icmp eq i64 %91, 0
  tail call void @llvm.assume(i1 %92) #9
  %93 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %64, i64 %59, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %94 = load i8*, i8** %93, align 8
  %95 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %64, i64 %59, i32 0, i32 0, i32 4
  %96 = load i64, i64* %95, align 8
  %97 = mul i64 %96, %1
  %98 = getelementptr inbounds i8, i8* %94, i64 %97
  %99 = ptrtoint i8* %98 to i64
  %100 = and i64 %99, 63
  %101 = icmp eq i64 %100, 0
  tail call void @llvm.assume(i1 %101) #9
  %102 = bitcast i8* %98 to i32*
  %103 = mul i64 %96, %53
  %104 = getelementptr inbounds i8, i8* %94, i64 %103
  %105 = ptrtoint i8* %104 to i64
  %106 = and i64 %105, 63
  %107 = icmp eq i64 %106, 0
  tail call void @llvm.assume(i1 %107) #9
  %108 = bitcast i8* %104 to i32*
  %109 = load i64, i64* %54, align 8
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %114, label %111

111:                                              ; preds = %88
  %112 = bitcast i8* %89 to i32*
  %113 = getelementptr inbounds i32, i32* %112, i64 %60
  br label %116

114:                                              ; preds = %140, %88
  %115 = add i32 %58, 4
  br label %166

116:                                              ; preds = %111, %140
  %117 = phi i64 [ %162, %140 ], [ 0, %111 ]
  %118 = phi i32* [ %163, %140 ], [ %113, %111 ]
  %119 = getelementptr inbounds i32, i32* %102, i64 %117
  %120 = load i32, i32* %119, align 4
  %121 = sext i32 %120 to i64
  %122 = sub i32 0, %120
  %123 = icmp slt i32 %120, 0
  %124 = select i1 %123, i32 %122, i32 %120
  store i32 %124, i32* %118, align 4
  %125 = getelementptr inbounds i32, i32* %118, i64 1
  store i32 %120, i32* %125, align 4
  %126 = icmp ne i64 %117, 0
  br i1 %126, label %127, label %131

127:                                              ; preds = %116
  %128 = add i64 %117, -1
  %129 = getelementptr inbounds i32, i32* %102, i64 %128
  %130 = load i32, i32* %129, align 4
  br label %131

131:                                              ; preds = %116, %127
  %132 = phi i32 [ %130, %127 ], [ 0, %116 ]
  br i1 %51, label %133, label %140

133:                                              ; preds = %131
  %134 = getelementptr inbounds i32, i32* %108, i64 %117
  %135 = load i32, i32* %134, align 4
  br i1 %126, label %136, label %140

136:                                              ; preds = %133
  %137 = add i64 %117, -1
  %138 = getelementptr inbounds i32, i32* %108, i64 %137
  %139 = load i32, i32* %138, align 4
  br label %140

140:                                              ; preds = %131, %133, %136
  %141 = phi i32 [ %135, %136 ], [ %135, %133 ], [ %132, %131 ]
  %142 = phi i32 [ %139, %136 ], [ %132, %133 ], [ %132, %131 ]
  %143 = icmp slt i32 %141, %132
  %144 = select i1 %143, i32 %141, i32 %132
  %145 = icmp slt i32 %132, %141
  %146 = select i1 %145, i32 %141, i32 %132
  %147 = add i32 %141, %132
  %148 = sub i32 %147, %142
  %149 = icmp sgt i32 %144, %142
  %150 = select i1 %149, i32 %146, i32 %148
  %151 = icmp slt i32 %146, %142
  %152 = select i1 %151, i32 %144, i32 %150
  %153 = sext i32 %152 to i64
  %154 = sub nsw i64 %121, %153
  %155 = sub nsw i64 0, %154
  %156 = icmp slt i64 %154, 0
  %157 = select i1 %156, i64 %155, i64 %154
  %158 = trunc i64 %157 to i32
  %159 = getelementptr inbounds i32, i32* %118, i64 2
  store i32 %158, i32* %159, align 4
  %160 = trunc i64 %154 to i32
  %161 = getelementptr inbounds i32, i32* %118, i64 3
  store i32 %160, i32* %161, align 4
  %162 = add nuw i64 %117, 1
  %163 = getelementptr inbounds i32, i32* %118, i64 %45
  %164 = load i64, i64* %54, align 8
  %165 = icmp ult i64 %162, %164
  br i1 %165, label %116, label %114

166:                                              ; preds = %82, %76, %70, %63, %114
  %167 = phi i32 [ %58, %63 ], [ %58, %70 ], [ %58, %76 ], [ %58, %82 ], [ %115, %114 ]
  %168 = icmp sgt i64 %59, 0
  br i1 %168, label %56, label %62
}

declare void @_ZN3jxl11TreeSamples9AddSampleElRKNSt3__16vectorIiNS1_9allocatorIiEEEEPKl(%"struct.jxl::TreeSamples"*, i64, %"class.std::__1::vector.61"* dereferenceable(24), i64*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl9LearnTreeEONS_11TreeSamplesEmRKNS_14ModularOptionsERKNSt3__16vectorINS_21ModularMultiplierInfoENS5_9allocatorIS7_EEEENS5_5arrayINSD_IjLm2EEELm2EEE(%"class.std::__1::vector.89"* noalias sret, %"struct.jxl::TreeSamples"* dereferenceable(200), i64, %"struct.jxl::ModularOptions"* nocapture readonly dereferenceable(88), %"class.std::__1::vector.80"* dereferenceable(24), %"struct.std::__1::array.82"* nocapture byval(%"struct.std::__1::array.82") align 8) local_unnamed_addr #0 {
  %7 = alloca %"class.std::__1::vector.89", align 16
  %8 = getelementptr inbounds %"struct.std::__1::array.82", %"struct.std::__1::array.82"* %5, i64 0, i32 0, i64 0, i32 0, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %17, label %18

11:                                               ; preds = %99
  %12 = getelementptr inbounds %"class.std::__1::vector.27", %"class.std::__1::vector.27"* %101, i64 0, i32 0, i32 0
  %13 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %12, align 8
  %14 = getelementptr inbounds %"class.std::__1::vector.27", %"class.std::__1::vector.27"* %101, i64 0, i32 0, i32 1
  %15 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %14, align 8
  %16 = icmp eq %"struct.jxl::TreeSamples::ResidualToken"* %13, %15
  br i1 %16, label %22, label %54

17:                                               ; preds = %6
  store i32 -1, i32* %8, align 4
  br label %18

18:                                               ; preds = %6, %17
  %19 = getelementptr inbounds %"struct.std::__1::array.82", %"struct.std::__1::array.82"* %5, i64 0, i32 0, i64 1, i32 0, i64 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %98, label %99

22:                                               ; preds = %11, %99
  %23 = getelementptr inbounds %"class.std::__1::vector.89", %"class.std::__1::vector.89"* %0, i64 0, i32 0, i32 1
  %24 = getelementptr inbounds %"class.std::__1::vector.89", %"class.std::__1::vector.89"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %25 = bitcast %"struct.jxl::PropertyDecisionNode"** %23 to i64*
  %26 = bitcast %"class.std::__1::vector.89"* %0 to i64*
  %27 = bitcast %"struct.jxl::PropertyDecisionNode"** %24 to i64*
  %28 = tail call i8* @_Znwm(i64 40) #12
  %29 = getelementptr inbounds i8, i8* %28, i64 40
  %30 = ptrtoint i8* %29 to i64
  %31 = bitcast i8* %28 to i32*
  store i32 0, i32* %31, align 8
  %32 = getelementptr inbounds i8, i8* %28, i64 4
  %33 = bitcast i8* %32 to i16*
  store i16 -1, i16* %33, align 4
  %34 = getelementptr inbounds i8, i8* %28, i64 8
  %35 = bitcast i8* %34 to i32*
  store i32 0, i32* %35, align 8
  %36 = getelementptr inbounds i8, i8* %28, i64 12
  %37 = bitcast i8* %36 to i32*
  store i32 0, i32* %37, align 4
  %38 = getelementptr inbounds i8, i8* %28, i64 16
  %39 = bitcast i8* %38 to i32*
  store i32 0, i32* %39, align 8
  %40 = getelementptr inbounds i8, i8* %28, i64 24
  %41 = bitcast i8* %40 to i64*
  store i64 0, i64* %41, align 8
  %42 = getelementptr inbounds i8, i8* %28, i64 32
  %43 = bitcast i8* %42 to i32*
  store i32 1, i32* %43, align 8
  %44 = ptrtoint i8* %28 to i64
  store i64 %44, i64* %26, align 8
  store i64 %30, i64* %25, align 8
  store i64 %30, i64* %27, align 8
  %45 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %1, i64 0, i32 5, i32 0, i32 0
  %46 = load i32*, i32** %45, align 8
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds i8, i8* %28, i64 16
  %49 = bitcast i8* %48 to i32*
  store i32 %47, i32* %49, align 8
  %50 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %23, align 8
  %51 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %50, i64 -1, i32 1
  store i16 -1, i16* %51, align 4
  %52 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %50, i64 -1, i32 7
  store i64 0, i64* %52, align 8
  %53 = getelementptr inbounds %"struct.jxl::PropertyDecisionNode", %"struct.jxl::PropertyDecisionNode"* %50, i64 -1, i32 8
  store i32 1, i32* %53, align 8
  br label %97

54:                                               ; preds = %11
  %55 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %1, i64 0, i32 7
  %56 = load i64, i64* %55, align 8
  %57 = uitofp i64 %56 to float
  %58 = uitofp i64 %2 to float
  %59 = fdiv float %57, %58
  %60 = fpext float %59 to double
  %61 = fmul double %60, 9.000000e-01
  %62 = fadd double %61, 1.000000e-01
  %63 = fptrunc double %62 to float
  %64 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %1, i64 0, i32 8
  %65 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %64, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = icmp eq i32* %66, null
  br i1 %67, label %68, label %70

68:                                               ; preds = %54
  %69 = bitcast %"class.std::__1::vector.18"* %64 to i8*
  br label %76

70:                                               ; preds = %54
  %71 = ptrtoint i32* %66 to i64
  %72 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %1, i64 0, i32 8, i32 0, i32 1
  %73 = bitcast i32** %72 to i64*
  store i64 %71, i64* %73, align 8
  %74 = bitcast i32* %66 to i8*
  tail call void @_ZdlPv(i8* %74) #12
  %75 = bitcast %"class.std::__1::vector.18"* %64 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %75, i8 0, i64 24, i1 false) #9
  br label %76

76:                                               ; preds = %70, %68
  %77 = phi i8* [ %69, %68 ], [ %75, %70 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %77, i8 0, i64 24, i1 false) #9
  %78 = bitcast %"class.std::__1::vector.89"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %78) #9
  %79 = getelementptr inbounds %"class.std::__1::vector.89", %"class.std::__1::vector.89"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %78, i8 0, i64 24, i1 false) #9
  %80 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %3, i64 0, i32 4
  %81 = load float, float* %80, align 8
  %82 = fmul float %81, %63
  %83 = bitcast %"struct.std::__1::array.82"* %5 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds %"struct.std::__1::array.82", %"struct.std::__1::array.82"* %5, i64 0, i32 0, i64 1
  %86 = bitcast %"struct.std::__1::array.83"* %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %3, i64 0, i32 9
  %89 = load float, float* %88, align 8
  call void @_ZN3jxl15ComputeBestTreeERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS2_9allocatorIS4_EEEENS2_5arrayINSA_IjLm2EEELm2EEEfPNS3_INS_20PropertyDecisionNodeENS5_ISD_EEEE(%"struct.jxl::TreeSamples"* dereferenceable(200) %1, float %82, %"class.std::__1::vector.80"* dereferenceable(24) %4, i64 %84, i64 %87, float %89, %"class.std::__1::vector.89"* nonnull %7) #9
  %90 = bitcast %"class.std::__1::vector.89"* %7 to <2 x i64>*
  %91 = load <2 x i64>, <2 x i64>* %90, align 16
  %92 = bitcast %"class.std::__1::vector.89"* %0 to <2 x i64>*
  store <2 x i64> %91, <2 x i64>* %92, align 8
  %93 = bitcast %"struct.jxl::PropertyDecisionNode"** %79 to i64*
  %94 = load i64, i64* %93, align 16
  %95 = getelementptr inbounds %"class.std::__1::vector.89", %"class.std::__1::vector.89"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %96 = bitcast %"struct.jxl::PropertyDecisionNode"** %95 to i64*
  store i64 %94, i64* %96, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %78) #9
  br label %97

97:                                               ; preds = %22, %76
  ret void

98:                                               ; preds = %18
  store i32 -1, i32* %19, align 4
  br label %99

99:                                               ; preds = %98, %18
  %100 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %1, i64 0, i32 0, i32 0, i32 0
  %101 = load %"class.std::__1::vector.27"*, %"class.std::__1::vector.27"** %100, align 8
  %102 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %1, i64 0, i32 0, i32 0, i32 1
  %103 = load %"class.std::__1::vector.27"*, %"class.std::__1::vector.27"** %102, align 8
  %104 = icmp eq %"class.std::__1::vector.27"* %101, %103
  br i1 %104, label %22, label %11
}

declare void @_ZN3jxl15ComputeBestTreeERNS_11TreeSamplesEfRKNSt3__16vectorINS_21ModularMultiplierInfoENS2_9allocatorIS4_EEEENS2_5arrayINSA_IjLm2EEELm2EEEfPNS3_INS_20PropertyDecisionNodeENS5_ISD_EEEE(%"struct.jxl::TreeSamples"* dereferenceable(200), float, %"class.std::__1::vector.80"* dereferenceable(24), i64, i64, float, %"class.std::__1::vector.89"*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3jxl9PrintTreeERKNSt3__16vectorINS_20PropertyDecisionNodeENS0_9allocatorIS2_EEEERKNS0_12basic_stringIcNS0_11char_traitsIcEENS3_IcEEEE(%"class.std::__1::vector.89"* nocapture dereferenceable(24), %"class.std::__1::basic_string"* nocapture dereferenceable(24)) local_unnamed_addr #4 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl25EncodeModularChannelMAANSERKNS_5ImageEiRKNS_8weighted6HeaderERKNSt3__16vectorINS_20PropertyDecisionNodeENS7_9allocatorIS9_EEEEPNS8_INS_5TokenENSA_ISF_EEEEPNS_6AuxOutEmb(%"class.jxl::Image"* dereferenceable(104), i32, %"struct.jxl::weighted::Header"* nocapture readonly dereferenceable(56), %"class.std::__1::vector.89"* dereferenceable(24), %"class.std::__1::vector.101"*, %"struct.jxl::AuxOut"* nocapture readnone, i64, i1 zeroext) local_unnamed_addr #0 {
  %9 = alloca %"class.jxl::Image3", align 8
  %10 = alloca %"struct.std::__1::array", align 4
  %11 = alloca i8, align 1
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i64, align 8
  %15 = alloca %"class.std::__1::vector.202", align 8
  %16 = alloca %"class.std::__1::vector.61", align 8
  %17 = alloca %"class.jxl::MATreeLookup", align 8
  %18 = alloca [1024 x i16], align 16
  %19 = alloca [1024 x i8], align 16
  %20 = alloca %"struct.jxl::weighted::State", align 8
  %21 = alloca %"struct.jxl::weighted::Header", align 8
  %22 = alloca i32, align 4
  %23 = alloca %"struct.jxl::PredictionResult", align 8
  %24 = alloca %"class.jxl::Channel", align 8
  %25 = alloca %"struct.jxl::PredictionResult", align 8
  %26 = alloca %"class.jxl::Channel", align 8
  %27 = alloca %"struct.jxl::weighted::State", align 8
  %28 = alloca %"struct.jxl::weighted::Header", align 8
  %29 = alloca %"struct.jxl::PredictionResult", align 8
  %30 = sext i32 %1 to i64
  %31 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %31, align 8
  %33 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %32, i64 %30
  %34 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %32, i64 %30, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %41, label %37

37:                                               ; preds = %8
  %38 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %32, i64 %30, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %37, %8
  %42 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 184, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0)) #9
  %43 = tail call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

44:                                               ; preds = %37
  %45 = bitcast %"class.jxl::Image3"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %45) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %45, i8 0, i64 96, i1 false) #9
  %46 = bitcast %"struct.std::__1::array"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #9
  %47 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %10, i64 0, i32 0, i64 0
  %48 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %10, i64 0, i32 0, i64 1
  store i32 %1, i32* %47, align 4
  %49 = trunc i64 %6 to i32
  store i32 %49, i32* %48, align 4
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %11) #9
  store i8 -86, i8* %11, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %12) #9
  store i8 -86, i8* %12, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %13) #9
  store i8 -86, i8* %13, align 1
  %50 = bitcast i64* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %50) #9
  store i64 -6148914691236517206, i64* %14, align 8
  %51 = bitcast %"class.std::__1::vector.202"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %51) #9
  %52 = getelementptr inbounds %"class.std::__1::vector.202", %"class.std::__1::vector.202"* %15, i64 0, i32 0, i32 0
  %53 = getelementptr inbounds %"class.std::__1::vector.202", %"class.std::__1::vector.202"* %15, i64 0, i32 0, i32 1
  %54 = bitcast %"class.std::__1::vector.202"* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %54, i8 -86, i64 24, i1 false)
  call void @_ZN3jxl10FilterTreeERKNSt3__16vectorINS_20PropertyDecisionNodeENS0_9allocatorIS2_EEEERNS0_5arrayIiLm2EEEPmPbSC_SC_(%"class.std::__1::vector.202"* nonnull sret %15, %"class.std::__1::vector.89"* dereferenceable(24) %3, %"struct.std::__1::array"* nonnull dereferenceable(8) %10, i64* nonnull %14, i8* nonnull %11, i8* nonnull %12, i8* nonnull %13) #9
  %55 = bitcast %"class.std::__1::vector.61"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %55) #9
  %56 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %16, i64 0, i32 0, i32 0
  %57 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %16, i64 0, i32 0, i32 1
  %58 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %16, i64 0, i32 0, i32 2, i32 0, i32 0
  %59 = load i64, i64* %14, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %55, i8 0, i64 24, i1 false) #9
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %80, label %61

61:                                               ; preds = %44
  %62 = icmp ugt i64 %59, 4611686018427387903
  br i1 %62, label %63, label %65

63:                                               ; preds = %61
  %64 = bitcast %"class.std::__1::vector.61"* %16 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %64) #11
  unreachable

65:                                               ; preds = %61
  %66 = shl i64 %59, 2
  %67 = call i8* @_Znwm(i64 %66) #12
  %68 = bitcast i8* %67 to i32*
  %69 = bitcast %"class.std::__1::vector.61"* %16 to i8**
  store i8* %67, i8** %69, align 8
  %70 = getelementptr inbounds i32, i32* %68, i64 %59
  store i32* %70, i32** %58, align 8
  %71 = bitcast i32** %57 to i64*
  %72 = ptrtoint i8* %67 to i64
  %73 = add nsw i64 %59, -1
  %74 = getelementptr i32, i32* %68, i64 %73
  %75 = ptrtoint i32* %74 to i64
  %76 = sub i64 4, %72
  %77 = add i64 %76, %75
  %78 = and i64 %77, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %67, i8 0, i64 %78, i1 false) #9
  %79 = ptrtoint i32* %70 to i64
  store i64 %79, i64* %71, align 8
  br label %80

80:                                               ; preds = %44, %65
  %81 = bitcast %"class.jxl::MATreeLookup"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %81) #9
  %82 = getelementptr inbounds %"class.jxl::MATreeLookup", %"class.jxl::MATreeLookup"* %17, i64 0, i32 0
  store %"class.std::__1::vector.202"* %15, %"class.std::__1::vector.202"** %82, align 8
  %83 = bitcast [1024 x i16]* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %83) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %83, i8 0, i64 2048, i1 false)
  %84 = getelementptr inbounds [1024 x i8], [1024 x i8]* %19, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %84) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %84, i8 0, i64 1024, i1 false)
  %85 = load i8, i8* %12, align 1, !range !5
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %91, label %87

87:                                               ; preds = %80
  %88 = getelementptr inbounds [1024 x i16], [1024 x i16]* %18, i64 0, i64 0
  %89 = call zeroext i1 @_ZN3jxl17TreeToLookupTableItEEbRKNSt3__16vectorINS_16FlatDecisionNodeENS1_9allocatorIS3_EEEEPT_PaSB_(%"class.std::__1::vector.202"* nonnull dereferenceable(24) %15, i16* nonnull %88, i8* nonnull %84, i8* null)
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %12, align 1
  br label %91

91:                                               ; preds = %80, %87
  %92 = phi i8 [ 0, %80 ], [ %90, %87 ]
  %93 = getelementptr inbounds %"class.std::__1::vector.101", %"class.std::__1::vector.101"* %4, i64 0, i32 0, i32 1
  %94 = bitcast %"struct.jxl::Token"** %93 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = bitcast %"class.std::__1::vector.101"* %4 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = sub i64 %95, %97
  %99 = ashr exact i64 %98, 3
  %100 = load i64, i64* %34, align 8
  %101 = load i64, i64* %38, align 8
  %102 = mul i64 %101, %100
  %103 = add i64 %102, %99
  %104 = getelementptr inbounds %"class.std::__1::vector.101", %"class.std::__1::vector.101"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %105 = bitcast %"struct.jxl::Token"** %104 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = sub i64 %106, %97
  %108 = ashr exact i64 %107, 3
  %109 = icmp ult i64 %108, %103
  br i1 %109, label %110, label %130

110:                                              ; preds = %91
  %111 = icmp ugt i64 %103, 2305843009213693951
  br i1 %111, label %112, label %113

112:                                              ; preds = %110
  call void @abort() #11
  unreachable

113:                                              ; preds = %110
  %114 = shl i64 %103, 3
  %115 = call i8* @_Znwm(i64 %114) #12
  %116 = bitcast i8* %115 to %"struct.jxl::Token"*
  %117 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %116, i64 %99
  %118 = ptrtoint %"struct.jxl::Token"* %117 to i64
  %119 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %116, i64 %103
  %120 = ptrtoint %"struct.jxl::Token"* %119 to i64
  %121 = ptrtoint i8* %115 to i64
  %122 = icmp sgt i64 %98, 0
  br i1 %122, label %123, label %125

123:                                              ; preds = %113
  %124 = inttoptr i64 %97 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %115, i8* align 4 %124, i64 %98, i1 false) #9
  br label %125

125:                                              ; preds = %123, %113
  store i64 %121, i64* %96, align 8
  store i64 %118, i64* %94, align 8
  store i64 %120, i64* %105, align 8
  %126 = icmp eq i64 %97, 0
  br i1 %126, label %130, label %127

127:                                              ; preds = %125
  %128 = inttoptr i64 %97 to i8*
  call void @_ZdlPv(i8* %128) #12
  %129 = load i8, i8* %12, align 1, !range !5
  br label %130

130:                                              ; preds = %91, %125, %127
  %131 = phi i8 [ %92, %91 ], [ %92, %125 ], [ %129, %127 ]
  %132 = icmp eq i8 %131, 0
  %133 = or i1 %132, %7
  br i1 %133, label %816, label %134

134:                                              ; preds = %130
  %135 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 1
  %136 = load i32, i32* %135, align 4
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %269, label %166

138:                                              ; preds = %2464
  %139 = lshr i64 %2466, 2
  %140 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %32, i64 %30, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %141 = sub nsw i64 0, %139
  %142 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 2, i64 0, i32 0, i32 0
  %143 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 4, i32 9, i64 0
  %144 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 2, i64 1, i32 0, i32 0
  %145 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 4, i32 9, i64 1
  %146 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 2, i64 2, i32 0, i32 0
  %147 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 4, i32 9, i64 2
  %148 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 2, i64 3, i32 0, i32 0
  %149 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 4, i32 9, i64 3
  %150 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 3, i32 0, i32 0
  %151 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 0, i64 0
  %152 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 4, i32 2
  %153 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 0, i64 1
  %154 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 4, i32 3
  %155 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 0, i64 2
  %156 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 4, i32 4
  %157 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 4, i32 5
  %158 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 4, i32 6
  %159 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 4, i32 7
  %160 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 4, i32 8
  %161 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 0, i64 3
  %162 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 1
  %163 = bitcast i32* %22 to i8*
  %164 = getelementptr inbounds %"class.std::__1::vector.101", %"class.std::__1::vector.101"* %4, i64 0, i32 0, i32 0
  %165 = load i64, i64* %34, align 8
  br label %319

166:                                              ; preds = %134
  %167 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %168 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 4
  %169 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 0
  %170 = load i32, i32* %169, align 8
  %171 = load i8*, i8** %167, align 8
  %172 = load i64, i64* %168, align 8
  %173 = zext i32 %170 to i64
  %174 = zext i32 %136 to i64
  %175 = icmp ugt i64 %173, 1
  %176 = select i1 %175, i64 %173, i64 1
  %177 = and i64 %176, 4294967288
  %178 = add nsw i64 %177, -8
  %179 = lshr exact i64 %178, 3
  %180 = add nuw nsw i64 %179, 1
  %181 = icmp ult i64 %176, 8
  %182 = and i64 %176, 4294967288
  %183 = and i64 %180, 7
  %184 = icmp ult i64 %178, 56
  %185 = sub nsw i64 %180, %183
  %186 = icmp eq i64 %183, 0
  %187 = icmp eq i64 %176, %182
  br label %188

188:                                              ; preds = %260, %166
  %189 = phi i32 [ %170, %166 ], [ %261, %260 ]
  %190 = phi i64 [ 0, %166 ], [ %262, %260 ]
  %191 = mul i64 %172, %190
  %192 = getelementptr inbounds i8, i8* %171, i64 %191
  %193 = ptrtoint i8* %192 to i64
  %194 = and i64 %193, 63
  %195 = icmp eq i64 %194, 0
  call void @llvm.assume(i1 %195) #9
  %196 = bitcast i8* %192 to float*
  %197 = icmp eq i32 %189, 0
  br i1 %197, label %260, label %198

198:                                              ; preds = %188
  br i1 %181, label %199, label %201

199:                                              ; preds = %259, %198
  %200 = phi i64 [ 0, %198 ], [ %182, %259 ]
  br label %264

201:                                              ; preds = %198
  br i1 %184, label %247, label %202

202:                                              ; preds = %201, %202
  %203 = phi i64 [ %244, %202 ], [ 0, %201 ]
  %204 = phi i64 [ %245, %202 ], [ %185, %201 ]
  %205 = getelementptr inbounds float, float* %196, i64 %203
  %206 = bitcast float* %205 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %206, align 64
  %207 = getelementptr inbounds float, float* %205, i64 4
  %208 = bitcast float* %207 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %208, align 16
  %209 = or i64 %203, 8
  %210 = getelementptr inbounds float, float* %196, i64 %209
  %211 = bitcast float* %210 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %211, align 32
  %212 = getelementptr inbounds float, float* %210, i64 4
  %213 = bitcast float* %212 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %213, align 16
  %214 = or i64 %203, 16
  %215 = getelementptr inbounds float, float* %196, i64 %214
  %216 = bitcast float* %215 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %216, align 64
  %217 = getelementptr inbounds float, float* %215, i64 4
  %218 = bitcast float* %217 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %218, align 16
  %219 = or i64 %203, 24
  %220 = getelementptr inbounds float, float* %196, i64 %219
  %221 = bitcast float* %220 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %221, align 32
  %222 = getelementptr inbounds float, float* %220, i64 4
  %223 = bitcast float* %222 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %223, align 16
  %224 = or i64 %203, 32
  %225 = getelementptr inbounds float, float* %196, i64 %224
  %226 = bitcast float* %225 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %226, align 64
  %227 = getelementptr inbounds float, float* %225, i64 4
  %228 = bitcast float* %227 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %228, align 16
  %229 = or i64 %203, 40
  %230 = getelementptr inbounds float, float* %196, i64 %229
  %231 = bitcast float* %230 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %231, align 32
  %232 = getelementptr inbounds float, float* %230, i64 4
  %233 = bitcast float* %232 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %233, align 16
  %234 = or i64 %203, 48
  %235 = getelementptr inbounds float, float* %196, i64 %234
  %236 = bitcast float* %235 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %236, align 64
  %237 = getelementptr inbounds float, float* %235, i64 4
  %238 = bitcast float* %237 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %238, align 16
  %239 = or i64 %203, 56
  %240 = getelementptr inbounds float, float* %196, i64 %239
  %241 = bitcast float* %240 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %241, align 32
  %242 = getelementptr inbounds float, float* %240, i64 4
  %243 = bitcast float* %242 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %243, align 16
  %244 = add i64 %203, 64
  %245 = add i64 %204, -8
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %247, label %202, !llvm.loop !6

247:                                              ; preds = %202, %201
  %248 = phi i64 [ 0, %201 ], [ %244, %202 ]
  br i1 %186, label %259, label %249

249:                                              ; preds = %247, %249
  %250 = phi i64 [ %256, %249 ], [ %248, %247 ]
  %251 = phi i64 [ %257, %249 ], [ %183, %247 ]
  %252 = getelementptr inbounds float, float* %196, i64 %250
  %253 = bitcast float* %252 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %253, align 32
  %254 = getelementptr inbounds float, float* %252, i64 4
  %255 = bitcast float* %254 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %255, align 16
  %256 = add i64 %250, 8
  %257 = add i64 %251, -1
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %259, label %249, !llvm.loop !8

259:                                              ; preds = %249, %247
  br i1 %187, label %260, label %199

260:                                              ; preds = %264, %259, %188
  %261 = phi i32 [ 0, %188 ], [ %170, %259 ], [ %170, %264 ]
  %262 = add nuw nsw i64 %190, 1
  %263 = icmp eq i64 %262, %174
  br i1 %263, label %269, label %188

264:                                              ; preds = %199, %264
  %265 = phi i64 [ %267, %264 ], [ %200, %199 ]
  %266 = getelementptr inbounds float, float* %196, i64 %265
  store float 0.000000e+00, float* %266, align 4
  %267 = add nuw nsw i64 %265, 1
  %268 = icmp ult i64 %267, %173
  br i1 %268, label %264, label %260, !llvm.loop !10

269:                                              ; preds = %260, %134
  %270 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 1
  %271 = load i32, i32* %270, align 4
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %2357, label %2254

273:                                              ; preds = %347, %2464
  call void @_ZdlPv(i8* nonnull %2473) #12
  %274 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 3, i32 0, i32 0
  %275 = load i32*, i32** %274, align 8
  %276 = icmp eq i32* %275, null
  br i1 %276, label %282, label %277

277:                                              ; preds = %273
  %278 = ptrtoint i32* %275 to i64
  %279 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 3, i32 0, i32 1
  %280 = bitcast i32** %279 to i64*
  store i64 %278, i64* %280, align 8
  %281 = bitcast i32* %275 to i8*
  call void @_ZdlPv(i8* %281) #12
  br label %282

282:                                              ; preds = %277, %273
  %283 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 2, i64 3, i32 0, i32 0
  %284 = load i32*, i32** %283, align 8
  %285 = icmp eq i32* %284, null
  br i1 %285, label %291, label %286

286:                                              ; preds = %282
  %287 = ptrtoint i32* %284 to i64
  %288 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 2, i64 3, i32 0, i32 1
  %289 = bitcast i32** %288 to i64*
  store i64 %287, i64* %289, align 8
  %290 = bitcast i32* %284 to i8*
  call void @_ZdlPv(i8* %290) #12
  br label %291

291:                                              ; preds = %286, %282
  %292 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 2, i64 2, i32 0, i32 0
  %293 = load i32*, i32** %292, align 8
  %294 = icmp eq i32* %293, null
  br i1 %294, label %300, label %295

295:                                              ; preds = %291
  %296 = ptrtoint i32* %293 to i64
  %297 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 2, i64 2, i32 0, i32 1
  %298 = bitcast i32** %297 to i64*
  store i64 %296, i64* %298, align 8
  %299 = bitcast i32* %293 to i8*
  call void @_ZdlPv(i8* %299) #12
  br label %300

300:                                              ; preds = %295, %291
  %301 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 2, i64 1, i32 0, i32 0
  %302 = load i32*, i32** %301, align 8
  %303 = icmp eq i32* %302, null
  br i1 %303, label %309, label %304

304:                                              ; preds = %300
  %305 = ptrtoint i32* %302 to i64
  %306 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 2, i64 1, i32 0, i32 1
  %307 = bitcast i32** %306 to i64*
  store i64 %305, i64* %307, align 8
  %308 = bitcast i32* %302 to i8*
  call void @_ZdlPv(i8* %308) #12
  br label %309

309:                                              ; preds = %304, %300
  %310 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 2, i64 0, i32 0, i32 0
  %311 = load i32*, i32** %310, align 8
  %312 = icmp eq i32* %311, null
  br i1 %312, label %318, label %313

313:                                              ; preds = %309
  %314 = ptrtoint i32* %311 to i64
  %315 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 2, i64 0, i32 0, i32 1
  %316 = bitcast i32** %315 to i64*
  store i64 %314, i64* %316, align 8
  %317 = bitcast i32* %311 to i8*
  call void @_ZdlPv(i8* %317) #12
  br label %318

318:                                              ; preds = %309, %313
  call void @llvm.lifetime.end.p0i8(i64 472, i8* nonnull %2467) #9
  br label %1758

319:                                              ; preds = %138, %347
  %320 = phi i64 [ %2475, %138 ], [ %348, %347 ]
  %321 = phi i64 [ %165, %138 ], [ %349, %347 ]
  %322 = phi i64 [ 0, %138 ], [ %350, %347 ]
  %323 = load i8*, i8** %140, align 8
  %324 = load i64, i64* %2465, align 8
  %325 = mul i64 %324, %322
  %326 = getelementptr inbounds i8, i8* %323, i64 %325
  %327 = ptrtoint i8* %326 to i64
  %328 = and i64 %327, 63
  %329 = icmp eq i64 %328, 0
  call void @llvm.assume(i1 %329) #9
  %330 = bitcast i8* %326 to i32*
  %331 = icmp eq i64 %321, 0
  br i1 %331, label %347, label %332

332:                                              ; preds = %319
  %333 = icmp eq i64 %322, 0
  %334 = getelementptr inbounds i32, i32* %330, i64 %141
  %335 = getelementptr inbounds i8, i8* %326, i64 -4
  %336 = bitcast i8* %335 to i32*
  %337 = getelementptr inbounds i8, i8* %326, i64 4
  %338 = bitcast i8* %337 to i32*
  %339 = icmp ugt i64 %322, 1
  %340 = and i64 %322, 1
  %341 = icmp ne i64 %340, 0
  %342 = getelementptr inbounds i32, i32* %336, i64 %141
  %343 = getelementptr inbounds i32, i32* %338, i64 %141
  %344 = getelementptr inbounds i32, i32* %334, i64 %141
  br label %352

345:                                              ; preds = %739
  %346 = load i64, i64* %38, align 8
  br label %347

347:                                              ; preds = %345, %319
  %348 = phi i64 [ %346, %345 ], [ %320, %319 ]
  %349 = phi i64 [ %814, %345 ], [ 0, %319 ]
  %350 = add nuw i64 %322, 1
  %351 = icmp ult i64 %350, %348
  br i1 %351, label %319, label %273

352:                                              ; preds = %332, %739
  %353 = phi i64 [ %321, %332 ], [ %814, %739 ]
  %354 = phi i64 [ 0, %332 ], [ %399, %739 ]
  %355 = icmp ne i64 %354, 0
  br i1 %355, label %360, label %356

356:                                              ; preds = %352
  br i1 %333, label %384, label %357

357:                                              ; preds = %356
  %358 = load i32, i32* %334, align 4
  %359 = sext i32 %358 to i64
  br label %374

360:                                              ; preds = %352
  %361 = add i64 %354, -1
  %362 = getelementptr inbounds i32, i32* %330, i64 %361
  %363 = load i32, i32* %362, align 4
  %364 = sext i32 %363 to i64
  br i1 %333, label %365, label %367

365:                                              ; preds = %360
  %366 = add nuw i64 %354, 1
  br label %394

367:                                              ; preds = %360
  %368 = getelementptr inbounds i32, i32* %334, i64 %354
  %369 = load i32, i32* %368, align 4
  %370 = sext i32 %369 to i64
  %371 = getelementptr inbounds i32, i32* %342, i64 %354
  %372 = load i32, i32* %371, align 4
  %373 = sext i32 %372 to i64
  br label %374

374:                                              ; preds = %357, %367
  %375 = phi i64 [ %370, %367 ], [ %359, %357 ]
  %376 = phi i64 [ %364, %367 ], [ %359, %357 ]
  %377 = phi i64 [ %373, %367 ], [ %359, %357 ]
  %378 = add nuw i64 %354, 1
  %379 = icmp ult i64 %378, %353
  br i1 %379, label %380, label %384

380:                                              ; preds = %374
  %381 = getelementptr inbounds i32, i32* %343, i64 %354
  %382 = load i32, i32* %381, align 4
  %383 = sext i32 %382 to i64
  br label %384

384:                                              ; preds = %356, %374, %380
  %385 = phi i64 [ %378, %380 ], [ %378, %374 ], [ 1, %356 ]
  %386 = phi i64 [ %377, %380 ], [ %377, %374 ], [ 0, %356 ]
  %387 = phi i64 [ %376, %380 ], [ %376, %374 ], [ 0, %356 ]
  %388 = phi i64 [ %375, %380 ], [ %375, %374 ], [ 0, %356 ]
  %389 = phi i64 [ %383, %380 ], [ %375, %374 ], [ 0, %356 ]
  br i1 %339, label %390, label %394

390:                                              ; preds = %384
  %391 = getelementptr inbounds i32, i32* %344, i64 %354
  %392 = load i32, i32* %391, align 4
  %393 = sext i32 %392 to i64
  br label %394

394:                                              ; preds = %365, %384, %390
  %395 = phi i64 [ %389, %390 ], [ %389, %384 ], [ %364, %365 ]
  %396 = phi i64 [ %388, %390 ], [ %388, %384 ], [ %364, %365 ]
  %397 = phi i64 [ %387, %390 ], [ %387, %384 ], [ %364, %365 ]
  %398 = phi i64 [ %386, %390 ], [ %386, %384 ], [ %364, %365 ]
  %399 = phi i64 [ %385, %390 ], [ %385, %384 ], [ %366, %365 ]
  %400 = phi i64 [ %393, %390 ], [ %388, %384 ], [ %364, %365 ]
  %401 = add i64 %353, 2
  %402 = select i1 %341, i64 %401, i64 0
  %403 = add i64 %402, %354
  %404 = add i64 %353, -1
  %405 = icmp ugt i64 %404, %354
  %406 = zext i1 %405 to i64
  %407 = add i64 %403, %406
  %408 = zext i1 %355 to i64
  %409 = sub i64 %403, %408
  %410 = load i32*, i32** %142, align 8
  %411 = getelementptr inbounds i32, i32* %410, i64 %403
  %412 = load i32, i32* %411, align 4
  %413 = getelementptr inbounds i32, i32* %410, i64 %407
  %414 = load i32, i32* %413, align 4
  %415 = add i32 %414, %412
  %416 = getelementptr inbounds i32, i32* %410, i64 %409
  %417 = load i32, i32* %416, align 4
  %418 = add i32 %415, %417
  %419 = zext i32 %418 to i64
  %420 = load i32, i32* %143, align 8
  %421 = add nuw nsw i64 %419, 1
  %422 = call i64 @llvm.ctlz.i64(i64 %421, i1 true) #9, !range !12
  %423 = trunc i64 %422 to i32
  %424 = sub nsw i32 58, %423
  %425 = icmp sgt i32 %424, 0
  %426 = select i1 %425, i32 %424, i32 0
  %427 = zext i32 %426 to i64
  %428 = lshr i64 %419, %427
  %429 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 5, i64 %428
  %430 = load i32, i32* %429, align 4
  %431 = mul i32 %430, %420
  %432 = lshr i32 %431, %426
  %433 = add i32 %432, 4
  %434 = load i32*, i32** %144, align 8
  %435 = getelementptr inbounds i32, i32* %434, i64 %403
  %436 = load i32, i32* %435, align 4
  %437 = getelementptr inbounds i32, i32* %434, i64 %407
  %438 = load i32, i32* %437, align 4
  %439 = add i32 %438, %436
  %440 = getelementptr inbounds i32, i32* %434, i64 %409
  %441 = load i32, i32* %440, align 4
  %442 = add i32 %439, %441
  %443 = zext i32 %442 to i64
  %444 = load i32, i32* %145, align 4
  %445 = add nuw nsw i64 %443, 1
  %446 = call i64 @llvm.ctlz.i64(i64 %445, i1 true) #9, !range !12
  %447 = trunc i64 %446 to i32
  %448 = sub nsw i32 58, %447
  %449 = icmp sgt i32 %448, 0
  %450 = select i1 %449, i32 %448, i32 0
  %451 = zext i32 %450 to i64
  %452 = lshr i64 %443, %451
  %453 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 5, i64 %452
  %454 = load i32, i32* %453, align 4
  %455 = mul i32 %454, %444
  %456 = lshr i32 %455, %450
  %457 = add i32 %456, 4
  %458 = load i32*, i32** %146, align 8
  %459 = getelementptr inbounds i32, i32* %458, i64 %403
  %460 = load i32, i32* %459, align 4
  %461 = getelementptr inbounds i32, i32* %458, i64 %407
  %462 = load i32, i32* %461, align 4
  %463 = add i32 %462, %460
  %464 = getelementptr inbounds i32, i32* %458, i64 %409
  %465 = load i32, i32* %464, align 4
  %466 = add i32 %463, %465
  %467 = zext i32 %466 to i64
  %468 = load i32, i32* %147, align 8
  %469 = add nuw nsw i64 %467, 1
  %470 = call i64 @llvm.ctlz.i64(i64 %469, i1 true) #9, !range !12
  %471 = trunc i64 %470 to i32
  %472 = sub nsw i32 58, %471
  %473 = icmp sgt i32 %472, 0
  %474 = select i1 %473, i32 %472, i32 0
  %475 = zext i32 %474 to i64
  %476 = lshr i64 %467, %475
  %477 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 5, i64 %476
  %478 = load i32, i32* %477, align 4
  %479 = mul i32 %478, %468
  %480 = lshr i32 %479, %474
  %481 = add i32 %480, 4
  %482 = load i32*, i32** %148, align 8
  %483 = getelementptr inbounds i32, i32* %482, i64 %403
  %484 = load i32, i32* %483, align 4
  %485 = getelementptr inbounds i32, i32* %482, i64 %407
  %486 = load i32, i32* %485, align 4
  %487 = add i32 %486, %484
  %488 = getelementptr inbounds i32, i32* %482, i64 %409
  %489 = load i32, i32* %488, align 4
  %490 = add i32 %487, %489
  %491 = zext i32 %490 to i64
  %492 = load i32, i32* %149, align 4
  %493 = add nuw nsw i64 %491, 1
  %494 = call i64 @llvm.ctlz.i64(i64 %493, i1 true) #9, !range !12
  %495 = trunc i64 %494 to i32
  %496 = sub nsw i32 58, %495
  %497 = icmp sgt i32 %496, 0
  %498 = select i1 %497, i32 %496, i32 0
  %499 = zext i32 %498 to i64
  %500 = lshr i64 %491, %499
  %501 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 5, i64 %500
  %502 = load i32, i32* %501, align 4
  %503 = mul i32 %502, %492
  %504 = lshr i32 %503, %498
  %505 = add i32 %504, 4
  %506 = shl nsw i64 %396, 3
  %507 = shl nsw i64 %397, 3
  %508 = shl nsw i64 %395, 3
  %509 = shl nsw i64 %398, 3
  %510 = shl nsw i64 %400, 3
  %511 = icmp eq i64 %354, 0
  br i1 %511, label %512, label %514

512:                                              ; preds = %394
  %513 = load i32*, i32** %150, align 8
  br label %522

514:                                              ; preds = %394
  %515 = select i1 %341, i64 0, i64 %401
  %516 = add i64 %354, -1
  %517 = add i64 %516, %515
  %518 = load i32*, i32** %150, align 8
  %519 = getelementptr inbounds i32, i32* %518, i64 %517
  %520 = load i32, i32* %519, align 4
  %521 = sext i32 %520 to i64
  br label %522

522:                                              ; preds = %514, %512
  %523 = phi i32* [ %518, %514 ], [ %513, %512 ]
  %524 = phi i64 [ %521, %514 ], [ 0, %512 ]
  %525 = getelementptr inbounds i32, i32* %523, i64 %403
  %526 = load i32, i32* %525, align 4
  %527 = sext i32 %526 to i64
  %528 = getelementptr inbounds i32, i32* %523, i64 %409
  %529 = load i32, i32* %528, align 4
  %530 = sext i32 %529 to i64
  %531 = add nsw i64 %524, %527
  %532 = getelementptr inbounds i32, i32* %523, i64 %407
  %533 = load i32, i32* %532, align 4
  %534 = sext i32 %533 to i64
  %535 = sub nsw i64 0, %527
  %536 = icmp slt i64 %527, 0
  %537 = select i1 %536, i64 %535, i64 %527
  %538 = sub nsw i64 0, %524
  %539 = icmp slt i64 %524, 0
  %540 = select i1 %539, i64 %538, i64 %524
  %541 = icmp sgt i64 %537, %540
  %542 = select i1 %541, i64 %527, i64 %524
  %543 = sub nsw i64 0, %530
  %544 = icmp slt i64 %530, 0
  %545 = select i1 %544, i64 %543, i64 %530
  %546 = sub nsw i64 0, %542
  %547 = icmp slt i64 %542, 0
  %548 = select i1 %547, i64 %546, i64 %542
  %549 = icmp sgt i64 %545, %548
  %550 = select i1 %549, i64 %530, i64 %542
  %551 = sub nsw i64 0, %534
  %552 = icmp slt i64 %534, 0
  %553 = select i1 %552, i64 %551, i64 %534
  %554 = sub nsw i64 0, %550
  %555 = icmp slt i64 %550, 0
  %556 = select i1 %555, i64 %554, i64 %550
  %557 = icmp sgt i64 %553, %556
  %558 = select i1 %557, i64 %534, i64 %550
  %559 = trunc i64 %558 to i32
  store i32 %559, i32* %2474, align 4
  %560 = sub nsw i64 %507, %506
  %561 = add nsw i64 %560, %508
  store i64 %561, i64* %151, align 8
  %562 = add nsw i64 %531, %534
  %563 = load i32, i32* %152, align 4
  %564 = sext i32 %563 to i64
  %565 = mul nsw i64 %562, %564
  %566 = ashr i64 %565, 5
  %567 = sub nsw i64 %506, %566
  store i64 %567, i64* %153, align 8
  %568 = add nsw i64 %531, %530
  %569 = load i32, i32* %154, align 8
  %570 = sext i32 %569 to i64
  %571 = mul nsw i64 %568, %570
  %572 = ashr i64 %571, 5
  %573 = sub nsw i64 %507, %572
  store i64 %573, i64* %155, align 8
  %574 = load i32, i32* %156, align 4
  %575 = sext i32 %574 to i64
  %576 = mul nsw i64 %575, %530
  %577 = load i32, i32* %157, align 8
  %578 = sext i32 %577 to i64
  %579 = mul nsw i64 %578, %527
  %580 = add nsw i64 %579, %576
  %581 = load i32, i32* %158, align 4
  %582 = sext i32 %581 to i64
  %583 = mul nsw i64 %582, %534
  %584 = add nsw i64 %580, %583
  %585 = sub nsw i64 %510, %506
  %586 = load i32, i32* %159, align 8
  %587 = sext i32 %586 to i64
  %588 = mul nsw i64 %585, %587
  %589 = add nsw i64 %584, %588
  %590 = sub nsw i64 %509, %507
  %591 = load i32, i32* %160, align 4
  %592 = sext i32 %591 to i64
  %593 = mul nsw i64 %590, %592
  %594 = add nsw i64 %589, %593
  %595 = ashr i64 %594, 5
  %596 = sub nsw i64 %506, %595
  store i64 %596, i64* %161, align 8
  %597 = add i32 %457, %433
  %598 = add i32 %597, %481
  %599 = add i32 %598, %505
  %600 = call i32 @llvm.ctlz.i32(i32 %599, i1 true) #9, !range !13
  %601 = sub nsw i32 27, %600
  %602 = lshr i32 %433, %601
  %603 = lshr i32 %457, %601
  %604 = add i32 %603, %602
  %605 = lshr i32 %481, %601
  %606 = add i32 %604, %605
  %607 = lshr i32 %505, %601
  %608 = add i32 %606, %607
  %609 = lshr i32 %608, 1
  %610 = add nsw i32 %609, -1
  %611 = zext i32 %610 to i64
  %612 = zext i32 %602 to i64
  %613 = mul nsw i64 %561, %612
  %614 = zext i32 %603 to i64
  %615 = mul nsw i64 %567, %614
  %616 = zext i32 %605 to i64
  %617 = mul nsw i64 %573, %616
  %618 = zext i32 %607 to i64
  %619 = mul nsw i64 %596, %618
  %620 = add i64 %613, %611
  %621 = add i64 %620, %615
  %622 = add i64 %621, %617
  %623 = add i64 %622, %619
  %624 = add i32 %608, -1
  %625 = zext i32 %624 to i64
  %626 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %20, i64 0, i32 5, i64 %625
  %627 = load i32, i32* %626, align 4, !noalias !14
  %628 = zext i32 %627 to i64
  %629 = mul nsw i64 %623, %628
  %630 = ashr i64 %629, 24
  %631 = xor i64 %524, %527
  %632 = xor i32 %529, %526
  %633 = sext i32 %632 to i64
  %634 = or i64 %631, %633
  %635 = icmp sgt i64 %634, 0
  br i1 %635, label %649, label %636

636:                                              ; preds = %522
  %637 = icmp slt i64 %508, %506
  %638 = select i1 %637, i64 %506, i64 %508
  %639 = icmp slt i64 %507, %638
  %640 = select i1 %639, i64 %638, i64 %507
  %641 = icmp slt i64 %506, %508
  %642 = select i1 %641, i64 %506, i64 %508
  %643 = icmp slt i64 %642, %507
  %644 = select i1 %643, i64 %642, i64 %507
  %645 = icmp slt i64 %630, %640
  %646 = select i1 %645, i64 %630, i64 %640
  %647 = icmp slt i64 %644, %646
  %648 = select i1 %647, i64 %646, i64 %644
  br label %649

649:                                              ; preds = %522, %636
  %650 = phi i64 [ %648, %636 ], [ %630, %522 ]
  store i64 %650, i64* %162, align 8
  %651 = add nsw i64 %650, 3
  %652 = lshr i64 %651, 3
  %653 = trunc i64 %652 to i32
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %163)
  store i32 -512, i32* %22, align 4
  %654 = icmp sgt i32 %559, -512
  %655 = select i1 %654, i32* %2474, i32* %22
  %656 = load i32, i32* %655, align 4
  %657 = icmp slt i32 %656, 511
  %658 = select i1 %657, i32 %656, i32 511
  %659 = add nsw i32 %658, 512
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %163)
  %660 = zext i32 %659 to i64
  %661 = getelementptr inbounds [1024 x i16], [1024 x i16]* %18, i64 0, i64 %660
  %662 = load i16, i16* %661, align 2
  %663 = zext i16 %662 to i32
  %664 = getelementptr inbounds i32, i32* %330, i64 %354
  %665 = load i32, i32* %664, align 4
  %666 = sub nsw i32 %665, %653
  %667 = getelementptr inbounds [1024 x i8], [1024 x i8]* %19, i64 0, i64 %660
  %668 = load i8, i8* %667, align 1
  %669 = sext i8 %668 to i32
  %670 = sub i32 %666, %669
  %671 = shl i32 %670, 1
  %672 = ashr i32 %670, 31
  %673 = xor i32 %671, %672
  %674 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %93, align 8
  %675 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %104, align 8
  %676 = icmp ult %"struct.jxl::Token"* %674, %675
  %677 = ptrtoint %"struct.jxl::Token"* %675 to i64
  br i1 %676, label %678, label %684

678:                                              ; preds = %649
  %679 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %674, i64 0, i32 0
  %680 = shl nuw nsw i32 %663, 1
  store i32 %680, i32* %679, align 4
  %681 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %674, i64 0, i32 1
  store i32 %673, i32* %681, align 4
  %682 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %674, i64 1
  %683 = ptrtoint %"struct.jxl::Token"* %682 to i64
  store i64 %683, i64* %94, align 8
  br label %739

684:                                              ; preds = %649
  %685 = ptrtoint %"struct.jxl::Token"* %674 to i64
  %686 = load i64, i64* %96, align 8
  %687 = sub i64 %685, %686
  %688 = ashr exact i64 %687, 3
  %689 = add nsw i64 %688, 1
  %690 = icmp ugt i64 %689, 2305843009213693951
  br i1 %690, label %691, label %693

691:                                              ; preds = %684
  %692 = bitcast %"class.std::__1::vector.101"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %692) #11
  unreachable

693:                                              ; preds = %684
  %694 = sub i64 %677, %686
  %695 = ashr exact i64 %694, 3
  %696 = icmp ult i64 %695, 1152921504606846975
  br i1 %696, label %697, label %705

697:                                              ; preds = %693
  %698 = ashr exact i64 %694, 2
  %699 = icmp ult i64 %698, %689
  %700 = select i1 %699, i64 %689, i64 %698
  %701 = icmp eq i64 %700, 0
  br i1 %701, label %710, label %702

702:                                              ; preds = %697
  %703 = icmp ugt i64 %700, 2305843009213693951
  br i1 %703, label %704, label %705

704:                                              ; preds = %702
  call void @abort() #11
  unreachable

705:                                              ; preds = %702, %693
  %706 = phi i64 [ %700, %702 ], [ 2305843009213693951, %693 ]
  %707 = shl i64 %706, 3
  %708 = call i8* @_Znwm(i64 %707) #12
  %709 = bitcast i8* %708 to %"struct.jxl::Token"*
  br label %710

710:                                              ; preds = %705, %697
  %711 = phi i64 [ %706, %705 ], [ 0, %697 ]
  %712 = phi %"struct.jxl::Token"* [ %709, %705 ], [ null, %697 ]
  %713 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %712, i64 %688
  %714 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %712, i64 %711
  %715 = ptrtoint %"struct.jxl::Token"* %714 to i64
  %716 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %713, i64 0, i32 0
  %717 = shl nuw nsw i32 %663, 1
  store i32 %717, i32* %716, align 4
  %718 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %712, i64 %688, i32 1
  store i32 %673, i32* %718, align 4
  %719 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %713, i64 1
  %720 = ptrtoint %"struct.jxl::Token"* %719 to i64
  %721 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %164, align 8
  %722 = load i64, i64* %94, align 8
  %723 = ptrtoint %"struct.jxl::Token"* %721 to i64
  %724 = sub i64 %722, %723
  %725 = ashr exact i64 %724, 3
  %726 = sub nsw i64 0, %725
  %727 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %713, i64 %726
  %728 = ptrtoint %"struct.jxl::Token"* %727 to i64
  %729 = icmp sgt i64 %724, 0
  br i1 %729, label %730, label %734

730:                                              ; preds = %710
  %731 = bitcast %"struct.jxl::Token"* %727 to i8*
  %732 = bitcast %"struct.jxl::Token"* %721 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %731, i8* align 4 %732, i64 %724, i1 false) #9
  %733 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %164, align 8
  br label %734

734:                                              ; preds = %730, %710
  %735 = phi %"struct.jxl::Token"* [ %721, %710 ], [ %733, %730 ]
  store i64 %728, i64* %96, align 8
  store i64 %720, i64* %94, align 8
  store i64 %715, i64* %105, align 8
  %736 = icmp eq %"struct.jxl::Token"* %735, null
  br i1 %736, label %739, label %737

737:                                              ; preds = %734
  %738 = bitcast %"struct.jxl::Token"* %735 to i8*
  call void @_ZdlPv(i8* %738) #12
  br label %739

739:                                              ; preds = %678, %734, %737
  %740 = load i32, i32* %664, align 4
  %741 = sext i32 %740 to i64
  %742 = load i64, i64* %34, align 8
  %743 = add i64 %742, 2
  %744 = select i1 %341, i64 0, i64 %743
  %745 = select i1 %341, i64 %743, i64 0
  %746 = shl nsw i64 %741, 3
  %747 = load i64, i64* %162, align 8
  %748 = sub nsw i64 %747, %746
  %749 = icmp slt i64 %748, 2147483647
  %750 = select i1 %749, i64 %748, i64 2147483647
  %751 = icmp sgt i64 %750, -2147483648
  %752 = select i1 %751, i64 %750, i64 -2147483648
  %753 = trunc i64 %752 to i32
  %754 = add i64 %744, %354
  %755 = load i32*, i32** %150, align 8
  %756 = getelementptr inbounds i32, i32* %755, i64 %754
  store i32 %753, i32* %756, align 4
  %757 = add i64 %745, %399
  %758 = load i64, i64* %151, align 8
  %759 = sub nsw i64 %758, %746
  %760 = sub nsw i64 0, %759
  %761 = icmp slt i64 %759, 0
  %762 = select i1 %761, i64 %760, i64 %759
  %763 = add nuw nsw i64 %762, 3
  %764 = lshr i64 %763, 3
  %765 = trunc i64 %764 to i32
  %766 = load i32*, i32** %142, align 8
  %767 = getelementptr inbounds i32, i32* %766, i64 %754
  store i32 %765, i32* %767, align 4
  %768 = load i32*, i32** %142, align 8
  %769 = getelementptr inbounds i32, i32* %768, i64 %757
  %770 = load i32, i32* %769, align 4
  %771 = add i32 %770, %765
  store i32 %771, i32* %769, align 4
  %772 = load i64, i64* %153, align 8
  %773 = sub nsw i64 %772, %746
  %774 = sub nsw i64 0, %773
  %775 = icmp slt i64 %773, 0
  %776 = select i1 %775, i64 %774, i64 %773
  %777 = add nuw nsw i64 %776, 3
  %778 = lshr i64 %777, 3
  %779 = trunc i64 %778 to i32
  %780 = load i32*, i32** %144, align 8
  %781 = getelementptr inbounds i32, i32* %780, i64 %754
  store i32 %779, i32* %781, align 4
  %782 = load i32*, i32** %144, align 8
  %783 = getelementptr inbounds i32, i32* %782, i64 %757
  %784 = load i32, i32* %783, align 4
  %785 = add i32 %784, %779
  store i32 %785, i32* %783, align 4
  %786 = load i64, i64* %155, align 8
  %787 = sub nsw i64 %786, %746
  %788 = sub nsw i64 0, %787
  %789 = icmp slt i64 %787, 0
  %790 = select i1 %789, i64 %788, i64 %787
  %791 = add nuw nsw i64 %790, 3
  %792 = lshr i64 %791, 3
  %793 = trunc i64 %792 to i32
  %794 = load i32*, i32** %146, align 8
  %795 = getelementptr inbounds i32, i32* %794, i64 %754
  store i32 %793, i32* %795, align 4
  %796 = load i32*, i32** %146, align 8
  %797 = getelementptr inbounds i32, i32* %796, i64 %757
  %798 = load i32, i32* %797, align 4
  %799 = add i32 %798, %793
  store i32 %799, i32* %797, align 4
  %800 = load i64, i64* %161, align 8
  %801 = sub nsw i64 %800, %746
  %802 = sub nsw i64 0, %801
  %803 = icmp slt i64 %801, 0
  %804 = select i1 %803, i64 %802, i64 %801
  %805 = add nuw nsw i64 %804, 3
  %806 = lshr i64 %805, 3
  %807 = trunc i64 %806 to i32
  %808 = load i32*, i32** %148, align 8
  %809 = getelementptr inbounds i32, i32* %808, i64 %754
  store i32 %807, i32* %809, align 4
  %810 = load i32*, i32** %148, align 8
  %811 = getelementptr inbounds i32, i32* %810, i64 %757
  %812 = load i32, i32* %811, align 4
  %813 = add i32 %812, %807
  store i32 %813, i32* %811, align 4
  %814 = load i64, i64* %34, align 8
  %815 = icmp ult i64 %399, %814
  br i1 %815, label %352, label %345

816:                                              ; preds = %130
  %817 = bitcast %"struct.jxl::FlatDecisionNode"** %53 to i64*
  %818 = load i64, i64* %817, align 8
  %819 = bitcast %"class.std::__1::vector.202"* %15 to i64*
  %820 = load i64, i64* %819, align 8
  %821 = sub i64 %818, %820
  %822 = icmp eq i64 %821, 32
  %823 = inttoptr i64 %820 to %"struct.jxl::FlatDecisionNode"*
  br i1 %822, label %824, label %1310

824:                                              ; preds = %816
  %825 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %823, i64 0, i32 1, i32 0
  %826 = load i32, i32* %825, align 4
  switch i32 %826, label %1052 [
    i32 0, label %827
    i32 6, label %1310
  ]

827:                                              ; preds = %824
  %828 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %823, i64 0, i32 3, i32 0, i64 0
  %829 = load i32, i32* %828, align 4
  %830 = icmp eq i32 %829, 1
  br i1 %830, label %831, label %1052

831:                                              ; preds = %827
  %832 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %823, i64 0, i32 4, i32 0
  %833 = load i64, i64* %832, align 8
  %834 = icmp ne i64 %833, 0
  %835 = or i1 %834, %7
  br i1 %835, label %1052, label %836

836:                                              ; preds = %831
  %837 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 1
  %838 = load i32, i32* %837, align 4
  %839 = icmp eq i32 %838, 0
  br i1 %839, label %948, label %845

840:                                              ; preds = %2251
  %841 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %32, i64 %30, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %842 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %32, i64 %30, i32 0, i32 0, i32 4
  %843 = getelementptr inbounds %"class.std::__1::vector.101", %"class.std::__1::vector.101"* %4, i64 0, i32 0, i32 0
  %844 = load i64, i64* %34, align 8
  br label %952

845:                                              ; preds = %836
  %846 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %847 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 4
  %848 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 0
  %849 = load i32, i32* %848, align 8
  %850 = load i8*, i8** %846, align 8
  %851 = load i64, i64* %847, align 8
  %852 = zext i32 %849 to i64
  %853 = zext i32 %838 to i64
  %854 = icmp ugt i64 %852, 1
  %855 = select i1 %854, i64 %852, i64 1
  %856 = and i64 %855, 4294967288
  %857 = add nsw i64 %856, -8
  %858 = lshr exact i64 %857, 3
  %859 = add nuw nsw i64 %858, 1
  %860 = icmp ult i64 %855, 8
  %861 = and i64 %855, 4294967288
  %862 = and i64 %859, 7
  %863 = icmp ult i64 %857, 56
  %864 = sub nsw i64 %859, %862
  %865 = icmp eq i64 %862, 0
  %866 = icmp eq i64 %855, %861
  br label %867

867:                                              ; preds = %939, %845
  %868 = phi i32 [ %849, %845 ], [ %940, %939 ]
  %869 = phi i64 [ 0, %845 ], [ %941, %939 ]
  %870 = mul i64 %851, %869
  %871 = getelementptr inbounds i8, i8* %850, i64 %870
  %872 = ptrtoint i8* %871 to i64
  %873 = and i64 %872, 63
  %874 = icmp eq i64 %873, 0
  call void @llvm.assume(i1 %874) #9
  %875 = bitcast i8* %871 to float*
  %876 = icmp eq i32 %868, 0
  br i1 %876, label %939, label %877

877:                                              ; preds = %867
  br i1 %860, label %878, label %880

878:                                              ; preds = %938, %877
  %879 = phi i64 [ 0, %877 ], [ %861, %938 ]
  br label %943

880:                                              ; preds = %877
  br i1 %863, label %926, label %881

881:                                              ; preds = %880, %881
  %882 = phi i64 [ %923, %881 ], [ 0, %880 ]
  %883 = phi i64 [ %924, %881 ], [ %864, %880 ]
  %884 = getelementptr inbounds float, float* %875, i64 %882
  %885 = bitcast float* %884 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %885, align 64
  %886 = getelementptr inbounds float, float* %884, i64 4
  %887 = bitcast float* %886 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %887, align 16
  %888 = or i64 %882, 8
  %889 = getelementptr inbounds float, float* %875, i64 %888
  %890 = bitcast float* %889 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %890, align 32
  %891 = getelementptr inbounds float, float* %889, i64 4
  %892 = bitcast float* %891 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %892, align 16
  %893 = or i64 %882, 16
  %894 = getelementptr inbounds float, float* %875, i64 %893
  %895 = bitcast float* %894 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %895, align 64
  %896 = getelementptr inbounds float, float* %894, i64 4
  %897 = bitcast float* %896 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %897, align 16
  %898 = or i64 %882, 24
  %899 = getelementptr inbounds float, float* %875, i64 %898
  %900 = bitcast float* %899 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %900, align 32
  %901 = getelementptr inbounds float, float* %899, i64 4
  %902 = bitcast float* %901 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %902, align 16
  %903 = or i64 %882, 32
  %904 = getelementptr inbounds float, float* %875, i64 %903
  %905 = bitcast float* %904 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %905, align 64
  %906 = getelementptr inbounds float, float* %904, i64 4
  %907 = bitcast float* %906 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %907, align 16
  %908 = or i64 %882, 40
  %909 = getelementptr inbounds float, float* %875, i64 %908
  %910 = bitcast float* %909 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %910, align 32
  %911 = getelementptr inbounds float, float* %909, i64 4
  %912 = bitcast float* %911 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %912, align 16
  %913 = or i64 %882, 48
  %914 = getelementptr inbounds float, float* %875, i64 %913
  %915 = bitcast float* %914 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %915, align 64
  %916 = getelementptr inbounds float, float* %914, i64 4
  %917 = bitcast float* %916 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %917, align 16
  %918 = or i64 %882, 56
  %919 = getelementptr inbounds float, float* %875, i64 %918
  %920 = bitcast float* %919 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %920, align 32
  %921 = getelementptr inbounds float, float* %919, i64 4
  %922 = bitcast float* %921 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %922, align 16
  %923 = add i64 %882, 64
  %924 = add i64 %883, -8
  %925 = icmp eq i64 %924, 0
  br i1 %925, label %926, label %881, !llvm.loop !17

926:                                              ; preds = %881, %880
  %927 = phi i64 [ 0, %880 ], [ %923, %881 ]
  br i1 %865, label %938, label %928

928:                                              ; preds = %926, %928
  %929 = phi i64 [ %935, %928 ], [ %927, %926 ]
  %930 = phi i64 [ %936, %928 ], [ %862, %926 ]
  %931 = getelementptr inbounds float, float* %875, i64 %929
  %932 = bitcast float* %931 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %932, align 32
  %933 = getelementptr inbounds float, float* %931, i64 4
  %934 = bitcast float* %933 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %934, align 16
  %935 = add i64 %929, 8
  %936 = add i64 %930, -1
  %937 = icmp eq i64 %936, 0
  br i1 %937, label %938, label %928, !llvm.loop !18

938:                                              ; preds = %928, %926
  br i1 %866, label %939, label %878

939:                                              ; preds = %943, %938, %867
  %940 = phi i32 [ 0, %867 ], [ %849, %938 ], [ %849, %943 ]
  %941 = add nuw nsw i64 %869, 1
  %942 = icmp eq i64 %941, %853
  br i1 %942, label %948, label %867

943:                                              ; preds = %878, %943
  %944 = phi i64 [ %946, %943 ], [ %879, %878 ]
  %945 = getelementptr inbounds float, float* %875, i64 %944
  store float 0.000000e+00, float* %945, align 4
  %946 = add nuw nsw i64 %944, 1
  %947 = icmp ult i64 %946, %852
  br i1 %947, label %943, label %939, !llvm.loop !19

948:                                              ; preds = %939, %836
  %949 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 1
  %950 = load i32, i32* %949, align 4
  %951 = icmp eq i32 %950, 0
  br i1 %951, label %2144, label %2041

952:                                              ; preds = %840, %967
  %953 = phi i64 [ %2252, %840 ], [ %968, %967 ]
  %954 = phi i64 [ %844, %840 ], [ %969, %967 ]
  %955 = phi i64 [ 0, %840 ], [ %970, %967 ]
  %956 = load i8*, i8** %841, align 8
  %957 = load i64, i64* %842, align 8
  %958 = mul i64 %957, %955
  %959 = getelementptr inbounds i8, i8* %956, i64 %958
  %960 = ptrtoint i8* %959 to i64
  %961 = and i64 %960, 63
  %962 = icmp eq i64 %961, 0
  call void @llvm.assume(i1 %962) #9
  %963 = bitcast i8* %959 to i32*
  %964 = icmp eq i64 %954, 0
  br i1 %964, label %967, label %972

965:                                              ; preds = %1048
  %966 = load i64, i64* %38, align 8
  br label %967

967:                                              ; preds = %965, %952
  %968 = phi i64 [ %966, %965 ], [ %953, %952 ]
  %969 = phi i64 [ %1050, %965 ], [ 0, %952 ]
  %970 = add nuw i64 %955, 1
  %971 = icmp ult i64 %970, %968
  br i1 %971, label %952, label %1758

972:                                              ; preds = %952, %1048
  %973 = phi i64 [ %1049, %1048 ], [ 0, %952 ]
  %974 = load %"struct.jxl::FlatDecisionNode"*, %"struct.jxl::FlatDecisionNode"** %52, align 8
  %975 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %974, i64 0, i32 2
  %976 = getelementptr inbounds i32, i32* %963, i64 %973
  %977 = load i32, i32* %976, align 4
  %978 = shl i32 %977, 1
  %979 = ashr i32 %977, 31
  %980 = xor i32 %978, %979
  %981 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %93, align 8
  %982 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %104, align 8
  %983 = icmp ult %"struct.jxl::Token"* %981, %982
  %984 = ptrtoint %"struct.jxl::Token"* %982 to i64
  br i1 %983, label %985, label %992

985:                                              ; preds = %972
  %986 = load i32, i32* %975, align 4
  %987 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %981, i64 0, i32 0
  %988 = shl i32 %986, 1
  store i32 %988, i32* %987, align 4
  %989 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %981, i64 0, i32 1
  store i32 %980, i32* %989, align 4
  %990 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %981, i64 1
  %991 = ptrtoint %"struct.jxl::Token"* %990 to i64
  store i64 %991, i64* %94, align 8
  br label %1048

992:                                              ; preds = %972
  %993 = ptrtoint %"struct.jxl::Token"* %981 to i64
  %994 = load i64, i64* %96, align 8
  %995 = sub i64 %993, %994
  %996 = ashr exact i64 %995, 3
  %997 = add nsw i64 %996, 1
  %998 = icmp ugt i64 %997, 2305843009213693951
  br i1 %998, label %999, label %1001

999:                                              ; preds = %992
  %1000 = bitcast %"class.std::__1::vector.101"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1000) #11
  unreachable

1001:                                             ; preds = %992
  %1002 = sub i64 %984, %994
  %1003 = ashr exact i64 %1002, 3
  %1004 = icmp ult i64 %1003, 1152921504606846975
  br i1 %1004, label %1005, label %1013

1005:                                             ; preds = %1001
  %1006 = ashr exact i64 %1002, 2
  %1007 = icmp ult i64 %1006, %997
  %1008 = select i1 %1007, i64 %997, i64 %1006
  %1009 = icmp eq i64 %1008, 0
  br i1 %1009, label %1018, label %1010

1010:                                             ; preds = %1005
  %1011 = icmp ugt i64 %1008, 2305843009213693951
  br i1 %1011, label %1012, label %1013

1012:                                             ; preds = %1010
  call void @abort() #11
  unreachable

1013:                                             ; preds = %1010, %1001
  %1014 = phi i64 [ %1008, %1010 ], [ 2305843009213693951, %1001 ]
  %1015 = shl i64 %1014, 3
  %1016 = call i8* @_Znwm(i64 %1015) #12
  %1017 = bitcast i8* %1016 to %"struct.jxl::Token"*
  br label %1018

1018:                                             ; preds = %1013, %1005
  %1019 = phi i64 [ %1014, %1013 ], [ 0, %1005 ]
  %1020 = phi %"struct.jxl::Token"* [ %1017, %1013 ], [ null, %1005 ]
  %1021 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1020, i64 %996
  %1022 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1020, i64 %1019
  %1023 = ptrtoint %"struct.jxl::Token"* %1022 to i64
  %1024 = load i32, i32* %975, align 4
  %1025 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1021, i64 0, i32 0
  %1026 = shl i32 %1024, 1
  store i32 %1026, i32* %1025, align 4
  %1027 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1020, i64 %996, i32 1
  store i32 %980, i32* %1027, align 4
  %1028 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1021, i64 1
  %1029 = ptrtoint %"struct.jxl::Token"* %1028 to i64
  %1030 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %843, align 8
  %1031 = load i64, i64* %94, align 8
  %1032 = ptrtoint %"struct.jxl::Token"* %1030 to i64
  %1033 = sub i64 %1031, %1032
  %1034 = ashr exact i64 %1033, 3
  %1035 = sub nsw i64 0, %1034
  %1036 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1021, i64 %1035
  %1037 = ptrtoint %"struct.jxl::Token"* %1036 to i64
  %1038 = icmp sgt i64 %1033, 0
  br i1 %1038, label %1039, label %1043

1039:                                             ; preds = %1018
  %1040 = bitcast %"struct.jxl::Token"* %1036 to i8*
  %1041 = bitcast %"struct.jxl::Token"* %1030 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1040, i8* align 4 %1041, i64 %1033, i1 false) #9
  %1042 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %843, align 8
  br label %1043

1043:                                             ; preds = %1039, %1018
  %1044 = phi %"struct.jxl::Token"* [ %1030, %1018 ], [ %1042, %1039 ]
  store i64 %1037, i64* %96, align 8
  store i64 %1029, i64* %94, align 8
  store i64 %1023, i64* %105, align 8
  %1045 = icmp eq %"struct.jxl::Token"* %1044, null
  br i1 %1045, label %1048, label %1046

1046:                                             ; preds = %1043
  %1047 = bitcast %"struct.jxl::Token"* %1044 to i8*
  call void @_ZdlPv(i8* %1047) #12
  br label %1048

1048:                                             ; preds = %985, %1043, %1046
  %1049 = add nuw i64 %973, 1
  %1050 = load i64, i64* %34, align 8
  %1051 = icmp ult i64 %1049, %1050
  br i1 %1051, label %972, label %965

1052:                                             ; preds = %824, %827, %831
  %1053 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %823, i64 0, i32 3, i32 0, i64 0
  %1054 = load i32, i32* %1053, align 4
  %1055 = call i32 @llvm.ctpop.i32(i32 %1054), !range !13
  %1056 = icmp ult i32 %1055, 2
  br i1 %1056, label %1057, label %1310

1057:                                             ; preds = %1052
  %1058 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %823, i64 0, i32 4, i32 0
  %1059 = load i64, i64* %1058, align 8
  %1060 = icmp ne i64 %1059, 0
  %1061 = or i1 %1060, %7
  br i1 %1061, label %1310, label %1062

1062:                                             ; preds = %1057
  %1063 = icmp ult i32 %826, 14
  br i1 %1063, label %1070, label %1074

1064:                                             ; preds = %2029
  %1065 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %32, i64 %30, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1066 = bitcast %"struct.jxl::PredictionResult"* %23 to i8*
  %1067 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %23, i64 0, i32 1
  %1068 = getelementptr inbounds %"class.std::__1::vector.101", %"class.std::__1::vector.101"* %4, i64 0, i32 0, i32 0
  %1069 = load i64, i64* %34, align 8
  br label %1194

1070:                                             ; preds = %1062
  %1071 = sext i32 %826 to i64
  %1072 = getelementptr inbounds [14 x float], [14 x float]* @switch.table._ZN3jxl25EncodeModularChannelMAANSERKNS_5ImageEiRKNS_8weighted6HeaderERKNSt3__16vectorINS_20PropertyDecisionNodeENS7_9allocatorIS9_EEEEPNS8_INS_5TokenENSA_ISF_EEEEPNS_6AuxOutEmb, i64 0, i64 %1071
  %1073 = load float, float* %1072, align 4
  br label %1074

1074:                                             ; preds = %1062, %1070
  %1075 = phi float [ %1073, %1070 ], [ 2.550000e+02, %1062 ]
  %1076 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 1
  %1077 = load i32, i32* %1076, align 4
  %1078 = icmp eq i32 %1077, 0
  br i1 %1078, label %1190, label %1079

1079:                                             ; preds = %1074
  %1080 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1081 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 4
  %1082 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 0
  %1083 = load i32, i32* %1082, align 8
  %1084 = load i8*, i8** %1080, align 8
  %1085 = load i64, i64* %1081, align 8
  %1086 = zext i32 %1083 to i64
  %1087 = zext i32 %1077 to i64
  %1088 = icmp ugt i64 %1086, 1
  %1089 = select i1 %1088, i64 %1086, i64 1
  %1090 = and i64 %1089, 4294967288
  %1091 = add nsw i64 %1090, -8
  %1092 = lshr exact i64 %1091, 3
  %1093 = add nuw nsw i64 %1092, 1
  %1094 = icmp ult i64 %1089, 8
  %1095 = and i64 %1089, 4294967288
  %1096 = insertelement <4 x float> undef, float %1075, i32 0
  %1097 = shufflevector <4 x float> %1096, <4 x float> undef, <4 x i32> zeroinitializer
  %1098 = insertelement <4 x float> undef, float %1075, i32 0
  %1099 = shufflevector <4 x float> %1098, <4 x float> undef, <4 x i32> zeroinitializer
  %1100 = and i64 %1093, 7
  %1101 = icmp ult i64 %1091, 56
  %1102 = sub nsw i64 %1093, %1100
  %1103 = icmp eq i64 %1100, 0
  %1104 = icmp eq i64 %1089, %1095
  br label %1105

1105:                                             ; preds = %1177, %1079
  %1106 = phi i32 [ %1083, %1079 ], [ %1178, %1177 ]
  %1107 = phi i64 [ 0, %1079 ], [ %1179, %1177 ]
  %1108 = mul i64 %1085, %1107
  %1109 = getelementptr inbounds i8, i8* %1084, i64 %1108
  %1110 = ptrtoint i8* %1109 to i64
  %1111 = and i64 %1110, 63
  %1112 = icmp eq i64 %1111, 0
  call void @llvm.assume(i1 %1112) #9
  %1113 = bitcast i8* %1109 to float*
  %1114 = icmp eq i32 %1106, 0
  br i1 %1114, label %1177, label %1115

1115:                                             ; preds = %1105
  br i1 %1094, label %1116, label %1118

1116:                                             ; preds = %1176, %1115
  %1117 = phi i64 [ 0, %1115 ], [ %1095, %1176 ]
  br label %1181

1118:                                             ; preds = %1115
  br i1 %1101, label %1164, label %1119

1119:                                             ; preds = %1118, %1119
  %1120 = phi i64 [ %1161, %1119 ], [ 0, %1118 ]
  %1121 = phi i64 [ %1162, %1119 ], [ %1102, %1118 ]
  %1122 = getelementptr inbounds float, float* %1113, i64 %1120
  %1123 = bitcast float* %1122 to <4 x float>*
  store <4 x float> %1097, <4 x float>* %1123, align 64
  %1124 = getelementptr inbounds float, float* %1122, i64 4
  %1125 = bitcast float* %1124 to <4 x float>*
  store <4 x float> %1099, <4 x float>* %1125, align 16
  %1126 = or i64 %1120, 8
  %1127 = getelementptr inbounds float, float* %1113, i64 %1126
  %1128 = bitcast float* %1127 to <4 x float>*
  store <4 x float> %1097, <4 x float>* %1128, align 32
  %1129 = getelementptr inbounds float, float* %1127, i64 4
  %1130 = bitcast float* %1129 to <4 x float>*
  store <4 x float> %1099, <4 x float>* %1130, align 16
  %1131 = or i64 %1120, 16
  %1132 = getelementptr inbounds float, float* %1113, i64 %1131
  %1133 = bitcast float* %1132 to <4 x float>*
  store <4 x float> %1097, <4 x float>* %1133, align 64
  %1134 = getelementptr inbounds float, float* %1132, i64 4
  %1135 = bitcast float* %1134 to <4 x float>*
  store <4 x float> %1099, <4 x float>* %1135, align 16
  %1136 = or i64 %1120, 24
  %1137 = getelementptr inbounds float, float* %1113, i64 %1136
  %1138 = bitcast float* %1137 to <4 x float>*
  store <4 x float> %1097, <4 x float>* %1138, align 32
  %1139 = getelementptr inbounds float, float* %1137, i64 4
  %1140 = bitcast float* %1139 to <4 x float>*
  store <4 x float> %1099, <4 x float>* %1140, align 16
  %1141 = or i64 %1120, 32
  %1142 = getelementptr inbounds float, float* %1113, i64 %1141
  %1143 = bitcast float* %1142 to <4 x float>*
  store <4 x float> %1097, <4 x float>* %1143, align 64
  %1144 = getelementptr inbounds float, float* %1142, i64 4
  %1145 = bitcast float* %1144 to <4 x float>*
  store <4 x float> %1099, <4 x float>* %1145, align 16
  %1146 = or i64 %1120, 40
  %1147 = getelementptr inbounds float, float* %1113, i64 %1146
  %1148 = bitcast float* %1147 to <4 x float>*
  store <4 x float> %1097, <4 x float>* %1148, align 32
  %1149 = getelementptr inbounds float, float* %1147, i64 4
  %1150 = bitcast float* %1149 to <4 x float>*
  store <4 x float> %1099, <4 x float>* %1150, align 16
  %1151 = or i64 %1120, 48
  %1152 = getelementptr inbounds float, float* %1113, i64 %1151
  %1153 = bitcast float* %1152 to <4 x float>*
  store <4 x float> %1097, <4 x float>* %1153, align 64
  %1154 = getelementptr inbounds float, float* %1152, i64 4
  %1155 = bitcast float* %1154 to <4 x float>*
  store <4 x float> %1099, <4 x float>* %1155, align 16
  %1156 = or i64 %1120, 56
  %1157 = getelementptr inbounds float, float* %1113, i64 %1156
  %1158 = bitcast float* %1157 to <4 x float>*
  store <4 x float> %1097, <4 x float>* %1158, align 32
  %1159 = getelementptr inbounds float, float* %1157, i64 4
  %1160 = bitcast float* %1159 to <4 x float>*
  store <4 x float> %1099, <4 x float>* %1160, align 16
  %1161 = add i64 %1120, 64
  %1162 = add i64 %1121, -8
  %1163 = icmp eq i64 %1162, 0
  br i1 %1163, label %1164, label %1119, !llvm.loop !20

1164:                                             ; preds = %1119, %1118
  %1165 = phi i64 [ 0, %1118 ], [ %1161, %1119 ]
  br i1 %1103, label %1176, label %1166

1166:                                             ; preds = %1164, %1166
  %1167 = phi i64 [ %1173, %1166 ], [ %1165, %1164 ]
  %1168 = phi i64 [ %1174, %1166 ], [ %1100, %1164 ]
  %1169 = getelementptr inbounds float, float* %1113, i64 %1167
  %1170 = bitcast float* %1169 to <4 x float>*
  store <4 x float> %1097, <4 x float>* %1170, align 32
  %1171 = getelementptr inbounds float, float* %1169, i64 4
  %1172 = bitcast float* %1171 to <4 x float>*
  store <4 x float> %1099, <4 x float>* %1172, align 16
  %1173 = add i64 %1167, 8
  %1174 = add i64 %1168, -1
  %1175 = icmp eq i64 %1174, 0
  br i1 %1175, label %1176, label %1166, !llvm.loop !21

1176:                                             ; preds = %1166, %1164
  br i1 %1104, label %1177, label %1116

1177:                                             ; preds = %1181, %1176, %1105
  %1178 = phi i32 [ 0, %1105 ], [ %1083, %1176 ], [ %1083, %1181 ]
  %1179 = add nuw nsw i64 %1107, 1
  %1180 = icmp eq i64 %1179, %1087
  br i1 %1180, label %1186, label %1105

1181:                                             ; preds = %1116, %1181
  %1182 = phi i64 [ %1184, %1181 ], [ %1117, %1116 ]
  %1183 = getelementptr inbounds float, float* %1113, i64 %1182
  store float %1075, float* %1183, align 4
  %1184 = add nuw nsw i64 %1182, 1
  %1185 = icmp ult i64 %1184, %1086
  br i1 %1185, label %1181, label %1177, !llvm.loop !22

1186:                                             ; preds = %1177
  %1187 = load %"struct.jxl::FlatDecisionNode"*, %"struct.jxl::FlatDecisionNode"** %52, align 8
  %1188 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %1187, i64 0, i32 1, i32 0
  %1189 = load i32, i32* %1188, align 4
  br label %1190

1190:                                             ; preds = %1186, %1074
  %1191 = phi i32 [ %1189, %1186 ], [ %826, %1074 ]
  %1192 = phi %"struct.jxl::FlatDecisionNode"* [ %1187, %1186 ], [ %823, %1074 ]
  %1193 = icmp ult i32 %1191, 14
  br i1 %1193, label %1788, label %1792

1194:                                             ; preds = %1217, %1064
  %1195 = phi i64 [ %2039, %1064 ], [ %1213, %1217 ]
  %1196 = phi i64 [ %1069, %1064 ], [ %1214, %1217 ]
  %1197 = phi i64 [ %2037, %1064 ], [ %1218, %1217 ]
  %1198 = phi i64 [ 0, %1064 ], [ %1215, %1217 ]
  %1199 = load i8*, i8** %1065, align 8
  %1200 = mul i64 %1197, %1198
  %1201 = getelementptr inbounds i8, i8* %1199, i64 %1200
  %1202 = ptrtoint i8* %1201 to i64
  %1203 = and i64 %1202, 63
  %1204 = icmp eq i64 %1203, 0
  call void @llvm.assume(i1 %1204) #9
  %1205 = bitcast i8* %1201 to i32*
  %1206 = icmp eq i64 %1196, 0
  br i1 %1206, label %1212, label %1207

1207:                                             ; preds = %1194
  %1208 = shl i64 %1198, 32
  %1209 = ashr exact i64 %1208, 32
  br label %1219

1210:                                             ; preds = %1306
  %1211 = load i64, i64* %38, align 8
  br label %1212

1212:                                             ; preds = %1210, %1194
  %1213 = phi i64 [ %1211, %1210 ], [ %1195, %1194 ]
  %1214 = phi i64 [ %1308, %1210 ], [ 0, %1194 ]
  %1215 = add nuw i64 %1198, 1
  %1216 = icmp ult i64 %1215, %1213
  br i1 %1216, label %1217, label %1758

1217:                                             ; preds = %1212
  %1218 = load i64, i64* %2036, align 8
  br label %1194

1219:                                             ; preds = %1207, %1306
  %1220 = phi i64 [ 0, %1207 ], [ %1307, %1306 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1066) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1066, i8 -86, i64 24, i1 false)
  %1221 = load i64, i64* %34, align 8
  %1222 = getelementptr inbounds i32, i32* %1205, i64 %1220
  %1223 = load %"struct.jxl::FlatDecisionNode"*, %"struct.jxl::FlatDecisionNode"** %52, align 8
  %1224 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %1223, i64 0, i32 1, i32 0
  %1225 = load i32, i32* %1224, align 4
  %1226 = shl i64 %1220, 32
  %1227 = ashr exact i64 %1226, 32
  call void @_ZN3jxl6detail7PredictILi0EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl(%"struct.jxl::PredictionResult"* nonnull sret %23, %"class.std::__1::vector.61"* null, i64 %1221, i32* %1222, i64 %2038, i64 %1227, i64 %1209, i32 %1225, %"class.jxl::MATreeLookup"* null, %"class.jxl::Channel"* null, %"struct.jxl::weighted::State"* null, i64* null) #9
  %1228 = load i32, i32* %1222, align 4
  %1229 = sext i32 %1228 to i64
  %1230 = load i64, i64* %1067, align 8
  %1231 = sub nsw i64 %1229, %1230
  %1232 = load %"struct.jxl::FlatDecisionNode"*, %"struct.jxl::FlatDecisionNode"** %52, align 8
  %1233 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %1232, i64 0, i32 2
  %1234 = ashr i64 %1231, %2035
  %1235 = trunc i64 %1234 to i32
  %1236 = shl i32 %1235, 1
  %1237 = ashr i32 %1235, 31
  %1238 = xor i32 %1236, %1237
  %1239 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %93, align 8
  %1240 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %104, align 8
  %1241 = icmp ult %"struct.jxl::Token"* %1239, %1240
  %1242 = ptrtoint %"struct.jxl::Token"* %1240 to i64
  br i1 %1241, label %1243, label %1250

1243:                                             ; preds = %1219
  %1244 = load i32, i32* %1233, align 4
  %1245 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1239, i64 0, i32 0
  %1246 = shl i32 %1244, 1
  store i32 %1246, i32* %1245, align 4
  %1247 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1239, i64 0, i32 1
  store i32 %1238, i32* %1247, align 4
  %1248 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1239, i64 1
  %1249 = ptrtoint %"struct.jxl::Token"* %1248 to i64
  store i64 %1249, i64* %94, align 8
  br label %1306

1250:                                             ; preds = %1219
  %1251 = ptrtoint %"struct.jxl::Token"* %1239 to i64
  %1252 = load i64, i64* %96, align 8
  %1253 = sub i64 %1251, %1252
  %1254 = ashr exact i64 %1253, 3
  %1255 = add nsw i64 %1254, 1
  %1256 = icmp ugt i64 %1255, 2305843009213693951
  br i1 %1256, label %1257, label %1259

1257:                                             ; preds = %1250
  %1258 = bitcast %"class.std::__1::vector.101"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1258) #11
  unreachable

1259:                                             ; preds = %1250
  %1260 = sub i64 %1242, %1252
  %1261 = ashr exact i64 %1260, 3
  %1262 = icmp ult i64 %1261, 1152921504606846975
  br i1 %1262, label %1263, label %1271

1263:                                             ; preds = %1259
  %1264 = ashr exact i64 %1260, 2
  %1265 = icmp ult i64 %1264, %1255
  %1266 = select i1 %1265, i64 %1255, i64 %1264
  %1267 = icmp eq i64 %1266, 0
  br i1 %1267, label %1276, label %1268

1268:                                             ; preds = %1263
  %1269 = icmp ugt i64 %1266, 2305843009213693951
  br i1 %1269, label %1270, label %1271

1270:                                             ; preds = %1268
  call void @abort() #11
  unreachable

1271:                                             ; preds = %1268, %1259
  %1272 = phi i64 [ %1266, %1268 ], [ 2305843009213693951, %1259 ]
  %1273 = shl i64 %1272, 3
  %1274 = call i8* @_Znwm(i64 %1273) #12
  %1275 = bitcast i8* %1274 to %"struct.jxl::Token"*
  br label %1276

1276:                                             ; preds = %1271, %1263
  %1277 = phi i64 [ %1272, %1271 ], [ 0, %1263 ]
  %1278 = phi %"struct.jxl::Token"* [ %1275, %1271 ], [ null, %1263 ]
  %1279 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1278, i64 %1254
  %1280 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1278, i64 %1277
  %1281 = ptrtoint %"struct.jxl::Token"* %1280 to i64
  %1282 = load i32, i32* %1233, align 4
  %1283 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1279, i64 0, i32 0
  %1284 = shl i32 %1282, 1
  store i32 %1284, i32* %1283, align 4
  %1285 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1278, i64 %1254, i32 1
  store i32 %1238, i32* %1285, align 4
  %1286 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1279, i64 1
  %1287 = ptrtoint %"struct.jxl::Token"* %1286 to i64
  %1288 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %1068, align 8
  %1289 = load i64, i64* %94, align 8
  %1290 = ptrtoint %"struct.jxl::Token"* %1288 to i64
  %1291 = sub i64 %1289, %1290
  %1292 = ashr exact i64 %1291, 3
  %1293 = sub nsw i64 0, %1292
  %1294 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1279, i64 %1293
  %1295 = ptrtoint %"struct.jxl::Token"* %1294 to i64
  %1296 = icmp sgt i64 %1291, 0
  br i1 %1296, label %1297, label %1301

1297:                                             ; preds = %1276
  %1298 = bitcast %"struct.jxl::Token"* %1294 to i8*
  %1299 = bitcast %"struct.jxl::Token"* %1288 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1298, i8* align 4 %1299, i64 %1291, i1 false) #9
  %1300 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %1068, align 8
  br label %1301

1301:                                             ; preds = %1297, %1276
  %1302 = phi %"struct.jxl::Token"* [ %1288, %1276 ], [ %1300, %1297 ]
  store i64 %1295, i64* %96, align 8
  store i64 %1287, i64* %94, align 8
  store i64 %1281, i64* %105, align 8
  %1303 = icmp eq %"struct.jxl::Token"* %1302, null
  br i1 %1303, label %1306, label %1304

1304:                                             ; preds = %1301
  %1305 = bitcast %"struct.jxl::Token"* %1302 to i8*
  call void @_ZdlPv(i8* %1305) #12
  br label %1306

1306:                                             ; preds = %1243, %1301, %1304
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1066) #9
  %1307 = add nuw i64 %1220, 1
  %1308 = load i64, i64* %34, align 8
  %1309 = icmp ult i64 %1307, %1308
  br i1 %1309, label %1219, label %1210

1310:                                             ; preds = %824, %816, %1057, %1052
  %1311 = load i8, i8* %11, align 1, !range !5
  %1312 = icmp ne i8 %1311, 0
  %1313 = or i1 %1312, %7
  %1314 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %32, i64 %30, i32 0, i32 0, i32 4
  %1315 = load i64, i64* %1314, align 8
  %1316 = lshr i64 %1315, 2
  br i1 %1313, label %1469, label %1317

1317:                                             ; preds = %1310
  %1318 = bitcast %"class.jxl::Channel"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1318) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1318, i8 -86, i64 64, i1 false)
  %1319 = bitcast i32** %57 to i64*
  %1320 = load i64, i64* %1319, align 8
  %1321 = bitcast %"class.std::__1::vector.61"* %16 to i64*
  %1322 = load i64, i64* %1321, align 8
  %1323 = sub i64 %1320, %1322
  %1324 = ashr exact i64 %1323, 2
  %1325 = add nsw i64 %1324, -16
  %1326 = load i64, i64* %34, align 8
  %1327 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %24, i64 0, i32 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %1327, i64 %1325, i64 %1326, i64 4) #9
  %1328 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %24, i64 0, i32 1
  store i64 %1325, i64* %1328, align 8
  %1329 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %24, i64 0, i32 2
  store i64 %1326, i64* %1329, align 8
  %1330 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %24, i64 0, i32 3
  %1331 = bitcast i32* %1330 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1331, i8 0, i64 16, i1 false)
  %1332 = load i64, i64* %38, align 8
  %1333 = icmp eq i64 %1332, 0
  br i1 %1333, label %1341, label %1334

1334:                                             ; preds = %1317
  %1335 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %32, i64 %30, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1336 = bitcast %"struct.jxl::PredictionResult"* %25 to i8*
  %1337 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %25, i64 0, i32 1
  %1338 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %25, i64 0, i32 3
  %1339 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %25, i64 0, i32 0
  %1340 = getelementptr inbounds %"class.std::__1::vector.101", %"class.std::__1::vector.101"* %4, i64 0, i32 0, i32 0
  br label %1347

1341:                                             ; preds = %1371, %1317
  %1342 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %24, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1343 = load i8*, i8** %1342, align 8
  store i8* null, i8** %1342, align 8
  %1344 = icmp eq i8* %1343, null
  br i1 %1344, label %1346, label %1345

1345:                                             ; preds = %1341
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1343) #9
  br label %1346

1346:                                             ; preds = %1341, %1345
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1318) #9
  br label %1758

1347:                                             ; preds = %1334, %1371
  %1348 = phi i64 [ 0, %1334 ], [ %1372, %1371 ]
  %1349 = load i8*, i8** %1335, align 8
  %1350 = load i64, i64* %1314, align 8
  %1351 = mul i64 %1350, %1348
  %1352 = getelementptr inbounds i8, i8* %1349, i64 %1351
  %1353 = ptrtoint i8* %1352 to i64
  %1354 = and i64 %1353, 63
  %1355 = icmp eq i64 %1354, 0
  call void @llvm.assume(i1 %1355) #9
  %1356 = bitcast i8* %1352 to i32*
  call void @_ZN3jxl20PrecomputeReferencesERKNS_7ChannelEmRKNS_5ImageEjPS0_(%"class.jxl::Channel"* dereferenceable(64) %33, i64 %1348, %"class.jxl::Image"* dereferenceable(104) %0, i32 %1, %"class.jxl::Channel"* nonnull %24)
  %1357 = trunc i64 %1348 to i32
  %1358 = load i32, i32* %47, align 4
  %1359 = load i32*, i32** %56, align 8
  store i32 %1358, i32* %1359, align 4
  %1360 = load i32, i32* %48, align 4
  %1361 = load i32*, i32** %56, align 8
  %1362 = getelementptr inbounds i32, i32* %1361, i64 1
  store i32 %1360, i32* %1362, align 4
  %1363 = load i32*, i32** %56, align 8
  %1364 = getelementptr inbounds i32, i32* %1363, i64 2
  store i32 %1357, i32* %1364, align 4
  %1365 = getelementptr inbounds i32, i32* %1363, i64 9
  store i32 0, i32* %1365, align 4
  %1366 = load i64, i64* %34, align 8
  %1367 = icmp eq i64 %1366, 0
  br i1 %1367, label %1371, label %1368

1368:                                             ; preds = %1347
  %1369 = shl i64 %1348, 32
  %1370 = ashr exact i64 %1369, 32
  br label %1375

1371:                                             ; preds = %1465, %1347
  %1372 = add nuw i64 %1348, 1
  %1373 = load i64, i64* %38, align 8
  %1374 = icmp ult i64 %1372, %1373
  br i1 %1374, label %1347, label %1341

1375:                                             ; preds = %1368, %1465
  %1376 = phi i64 [ 0, %1368 ], [ %1466, %1465 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1336) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1336, i8 -86, i64 24, i1 false)
  %1377 = load i64, i64* %34, align 8
  %1378 = getelementptr inbounds i32, i32* %1356, i64 %1376
  %1379 = shl i64 %1376, 32
  %1380 = ashr exact i64 %1379, 32
  call void @_ZN3jxl6detail7PredictILi1EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl(%"struct.jxl::PredictionResult"* nonnull sret %25, %"class.std::__1::vector.61"* nonnull %16, i64 %1377, i32* %1378, i64 %1316, i64 %1380, i64 %1370, i32 0, %"class.jxl::MATreeLookup"* nonnull %17, %"class.jxl::Channel"* nonnull %24, %"struct.jxl::weighted::State"* null, i64* null) #9
  %1381 = load i32, i32* %1378, align 4
  %1382 = sext i32 %1381 to i64
  %1383 = load i64, i64* %1337, align 8
  %1384 = sub nsw i64 %1382, %1383
  %1385 = load i32, i32* %1338, align 4
  %1386 = sext i32 %1385 to i64
  %1387 = srem i64 %1384, %1386
  %1388 = sdiv i64 %1384, %1386
  %1389 = icmp eq i64 %1387, 0
  br i1 %1389, label %1393, label %1390

1390:                                             ; preds = %1375
  %1391 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 304, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0)) #9
  %1392 = call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

1393:                                             ; preds = %1375
  %1394 = trunc i64 %1388 to i32
  %1395 = shl i32 %1394, 1
  %1396 = ashr i32 %1394, 31
  %1397 = xor i32 %1395, %1396
  %1398 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %93, align 8
  %1399 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %104, align 8
  %1400 = icmp ult %"struct.jxl::Token"* %1398, %1399
  %1401 = ptrtoint %"struct.jxl::Token"* %1399 to i64
  br i1 %1400, label %1402, label %1409

1402:                                             ; preds = %1393
  %1403 = load i32, i32* %1339, align 8
  %1404 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1398, i64 0, i32 0
  %1405 = shl i32 %1403, 1
  store i32 %1405, i32* %1404, align 4
  %1406 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1398, i64 0, i32 1
  store i32 %1397, i32* %1406, align 4
  %1407 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1398, i64 1
  %1408 = ptrtoint %"struct.jxl::Token"* %1407 to i64
  store i64 %1408, i64* %94, align 8
  br label %1465

1409:                                             ; preds = %1393
  %1410 = ptrtoint %"struct.jxl::Token"* %1398 to i64
  %1411 = load i64, i64* %96, align 8
  %1412 = sub i64 %1410, %1411
  %1413 = ashr exact i64 %1412, 3
  %1414 = add nsw i64 %1413, 1
  %1415 = icmp ugt i64 %1414, 2305843009213693951
  br i1 %1415, label %1416, label %1418

1416:                                             ; preds = %1409
  %1417 = bitcast %"class.std::__1::vector.101"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1417) #11
  unreachable

1418:                                             ; preds = %1409
  %1419 = sub i64 %1401, %1411
  %1420 = ashr exact i64 %1419, 3
  %1421 = icmp ult i64 %1420, 1152921504606846975
  br i1 %1421, label %1422, label %1430

1422:                                             ; preds = %1418
  %1423 = ashr exact i64 %1419, 2
  %1424 = icmp ult i64 %1423, %1414
  %1425 = select i1 %1424, i64 %1414, i64 %1423
  %1426 = icmp eq i64 %1425, 0
  br i1 %1426, label %1435, label %1427

1427:                                             ; preds = %1422
  %1428 = icmp ugt i64 %1425, 2305843009213693951
  br i1 %1428, label %1429, label %1430

1429:                                             ; preds = %1427
  call void @abort() #11
  unreachable

1430:                                             ; preds = %1427, %1418
  %1431 = phi i64 [ %1425, %1427 ], [ 2305843009213693951, %1418 ]
  %1432 = shl i64 %1431, 3
  %1433 = call i8* @_Znwm(i64 %1432) #12
  %1434 = bitcast i8* %1433 to %"struct.jxl::Token"*
  br label %1435

1435:                                             ; preds = %1430, %1422
  %1436 = phi i64 [ %1431, %1430 ], [ 0, %1422 ]
  %1437 = phi %"struct.jxl::Token"* [ %1434, %1430 ], [ null, %1422 ]
  %1438 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1437, i64 %1413
  %1439 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1437, i64 %1436
  %1440 = ptrtoint %"struct.jxl::Token"* %1439 to i64
  %1441 = load i32, i32* %1339, align 8
  %1442 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1438, i64 0, i32 0
  %1443 = shl i32 %1441, 1
  store i32 %1443, i32* %1442, align 4
  %1444 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1437, i64 %1413, i32 1
  store i32 %1397, i32* %1444, align 4
  %1445 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1438, i64 1
  %1446 = ptrtoint %"struct.jxl::Token"* %1445 to i64
  %1447 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %1340, align 8
  %1448 = load i64, i64* %94, align 8
  %1449 = ptrtoint %"struct.jxl::Token"* %1447 to i64
  %1450 = sub i64 %1448, %1449
  %1451 = ashr exact i64 %1450, 3
  %1452 = sub nsw i64 0, %1451
  %1453 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1438, i64 %1452
  %1454 = ptrtoint %"struct.jxl::Token"* %1453 to i64
  %1455 = icmp sgt i64 %1450, 0
  br i1 %1455, label %1456, label %1460

1456:                                             ; preds = %1435
  %1457 = bitcast %"struct.jxl::Token"* %1453 to i8*
  %1458 = bitcast %"struct.jxl::Token"* %1447 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1457, i8* align 4 %1458, i64 %1450, i1 false) #9
  %1459 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %1340, align 8
  br label %1460

1460:                                             ; preds = %1456, %1435
  %1461 = phi %"struct.jxl::Token"* [ %1447, %1435 ], [ %1459, %1456 ]
  store i64 %1454, i64* %96, align 8
  store i64 %1446, i64* %94, align 8
  store i64 %1440, i64* %105, align 8
  %1462 = icmp eq %"struct.jxl::Token"* %1461, null
  br i1 %1462, label %1465, label %1463

1463:                                             ; preds = %1460
  %1464 = bitcast %"struct.jxl::Token"* %1461 to i8*
  call void @_ZdlPv(i8* %1464) #12
  br label %1465

1465:                                             ; preds = %1463, %1460, %1402
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1336) #9
  %1466 = add nuw i64 %1376, 1
  %1467 = load i64, i64* %34, align 8
  %1468 = icmp ult i64 %1466, %1467
  br i1 %1468, label %1375, label %1371

1469:                                             ; preds = %1310
  %1470 = bitcast %"class.jxl::Channel"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1470) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1470, i8 -86, i64 64, i1 false)
  %1471 = bitcast i32** %57 to i64*
  %1472 = load i64, i64* %1471, align 8
  %1473 = bitcast %"class.std::__1::vector.61"* %16 to i64*
  %1474 = load i64, i64* %1473, align 8
  %1475 = sub i64 %1472, %1474
  %1476 = ashr exact i64 %1475, 2
  %1477 = add nsw i64 %1476, -16
  %1478 = load i64, i64* %34, align 8
  %1479 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %26, i64 0, i32 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %1479, i64 %1477, i64 %1478, i64 4) #9
  %1480 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %26, i64 0, i32 1
  store i64 %1477, i64* %1480, align 8
  %1481 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %26, i64 0, i32 2
  store i64 %1478, i64* %1481, align 8
  %1482 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %26, i64 0, i32 3
  %1483 = bitcast %"struct.jxl::weighted::State"* %27 to i8*
  %1484 = bitcast i32* %1482 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1484, i8 0, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 472, i8* nonnull %1483) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1483, i8 -86, i64 472, i1 false)
  %1485 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %28, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1485, align 8
  %1486 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %28, i64 0, i32 1
  %1487 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %2, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1486, i8* align 8 %1487, i64 48, i1 false) #9
  %1488 = load i64, i64* %34, align 8
  %1489 = load i64, i64* %38, align 8
  call void @_ZN3jxl8weighted5StateC2ENS0_6HeaderEmm(%"struct.jxl::weighted::State"* nonnull %27, %"struct.jxl::weighted::Header"* nonnull %28, i64 %1488, i64 %1489)
  %1490 = load i64, i64* %38, align 8
  %1491 = icmp eq i64 %1490, 0
  br i1 %1491, label %1509, label %1492

1492:                                             ; preds = %1469
  %1493 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %32, i64 %30, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1494 = bitcast %"struct.jxl::PredictionResult"* %29 to i8*
  %1495 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %29, i64 0, i32 1
  %1496 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %29, i64 0, i32 3
  %1497 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %29, i64 0, i32 0
  %1498 = getelementptr inbounds %"class.std::__1::vector.101", %"class.std::__1::vector.101"* %4, i64 0, i32 0, i32 0
  %1499 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %27, i64 0, i32 1
  %1500 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %27, i64 0, i32 3, i32 0, i32 0
  %1501 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %27, i64 0, i32 0, i64 0
  %1502 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %27, i64 0, i32 2, i64 0, i32 0, i32 0
  %1503 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %27, i64 0, i32 0, i64 1
  %1504 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %27, i64 0, i32 2, i64 1, i32 0, i32 0
  %1505 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %27, i64 0, i32 0, i64 2
  %1506 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %27, i64 0, i32 2, i64 2, i32 0, i32 0
  %1507 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %27, i64 0, i32 0, i64 3
  %1508 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %27, i64 0, i32 2, i64 3, i32 0, i32 0
  br label %1560

1509:                                             ; preds = %1586, %1469
  %1510 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %27, i64 0, i32 3, i32 0, i32 0
  %1511 = load i32*, i32** %1510, align 8
  %1512 = icmp eq i32* %1511, null
  br i1 %1512, label %1518, label %1513

1513:                                             ; preds = %1509
  %1514 = ptrtoint i32* %1511 to i64
  %1515 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %27, i64 0, i32 3, i32 0, i32 1
  %1516 = bitcast i32** %1515 to i64*
  store i64 %1514, i64* %1516, align 8
  %1517 = bitcast i32* %1511 to i8*
  call void @_ZdlPv(i8* %1517) #12
  br label %1518

1518:                                             ; preds = %1513, %1509
  %1519 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %27, i64 0, i32 2, i64 3, i32 0, i32 0
  %1520 = load i32*, i32** %1519, align 8
  %1521 = icmp eq i32* %1520, null
  br i1 %1521, label %1527, label %1522

1522:                                             ; preds = %1518
  %1523 = ptrtoint i32* %1520 to i64
  %1524 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %27, i64 0, i32 2, i64 3, i32 0, i32 1
  %1525 = bitcast i32** %1524 to i64*
  store i64 %1523, i64* %1525, align 8
  %1526 = bitcast i32* %1520 to i8*
  call void @_ZdlPv(i8* %1526) #12
  br label %1527

1527:                                             ; preds = %1522, %1518
  %1528 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %27, i64 0, i32 2, i64 2, i32 0, i32 0
  %1529 = load i32*, i32** %1528, align 8
  %1530 = icmp eq i32* %1529, null
  br i1 %1530, label %1536, label %1531

1531:                                             ; preds = %1527
  %1532 = ptrtoint i32* %1529 to i64
  %1533 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %27, i64 0, i32 2, i64 2, i32 0, i32 1
  %1534 = bitcast i32** %1533 to i64*
  store i64 %1532, i64* %1534, align 8
  %1535 = bitcast i32* %1529 to i8*
  call void @_ZdlPv(i8* %1535) #12
  br label %1536

1536:                                             ; preds = %1531, %1527
  %1537 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %27, i64 0, i32 2, i64 1, i32 0, i32 0
  %1538 = load i32*, i32** %1537, align 8
  %1539 = icmp eq i32* %1538, null
  br i1 %1539, label %1545, label %1540

1540:                                             ; preds = %1536
  %1541 = ptrtoint i32* %1538 to i64
  %1542 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %27, i64 0, i32 2, i64 1, i32 0, i32 1
  %1543 = bitcast i32** %1542 to i64*
  store i64 %1541, i64* %1543, align 8
  %1544 = bitcast i32* %1538 to i8*
  call void @_ZdlPv(i8* %1544) #12
  br label %1545

1545:                                             ; preds = %1540, %1536
  %1546 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %27, i64 0, i32 2, i64 0, i32 0, i32 0
  %1547 = load i32*, i32** %1546, align 8
  %1548 = icmp eq i32* %1547, null
  br i1 %1548, label %1554, label %1549

1549:                                             ; preds = %1545
  %1550 = ptrtoint i32* %1547 to i64
  %1551 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %27, i64 0, i32 2, i64 0, i32 0, i32 1
  %1552 = bitcast i32** %1551 to i64*
  store i64 %1550, i64* %1552, align 8
  %1553 = bitcast i32* %1547 to i8*
  call void @_ZdlPv(i8* %1553) #12
  br label %1554

1554:                                             ; preds = %1545, %1549
  call void @llvm.lifetime.end.p0i8(i64 472, i8* nonnull %1483) #9
  %1555 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %26, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1556 = load i8*, i8** %1555, align 8
  store i8* null, i8** %1555, align 8
  %1557 = icmp eq i8* %1556, null
  br i1 %1557, label %1559, label %1558

1558:                                             ; preds = %1554
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1556) #9
  br label %1559

1559:                                             ; preds = %1554, %1558
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1470) #9
  br label %1758

1560:                                             ; preds = %1492, %1586
  %1561 = phi i64 [ 0, %1492 ], [ %1587, %1586 ]
  %1562 = load i8*, i8** %1493, align 8
  %1563 = load i64, i64* %1314, align 8
  %1564 = mul i64 %1563, %1561
  %1565 = getelementptr inbounds i8, i8* %1562, i64 %1564
  %1566 = ptrtoint i8* %1565 to i64
  %1567 = and i64 %1566, 63
  %1568 = icmp eq i64 %1567, 0
  call void @llvm.assume(i1 %1568) #9
  %1569 = bitcast i8* %1565 to i32*
  call void @_ZN3jxl20PrecomputeReferencesERKNS_7ChannelEmRKNS_5ImageEjPS0_(%"class.jxl::Channel"* dereferenceable(64) %33, i64 %1561, %"class.jxl::Image"* dereferenceable(104) %0, i32 %1, %"class.jxl::Channel"* nonnull %26)
  %1570 = trunc i64 %1561 to i32
  %1571 = load i32, i32* %47, align 4
  %1572 = load i32*, i32** %56, align 8
  store i32 %1571, i32* %1572, align 4
  %1573 = load i32, i32* %48, align 4
  %1574 = load i32*, i32** %56, align 8
  %1575 = getelementptr inbounds i32, i32* %1574, i64 1
  store i32 %1573, i32* %1575, align 4
  %1576 = load i32*, i32** %56, align 8
  %1577 = getelementptr inbounds i32, i32* %1576, i64 2
  store i32 %1570, i32* %1577, align 4
  %1578 = getelementptr inbounds i32, i32* %1576, i64 9
  store i32 0, i32* %1578, align 4
  %1579 = load i64, i64* %34, align 8
  %1580 = icmp eq i64 %1579, 0
  br i1 %1580, label %1586, label %1581

1581:                                             ; preds = %1560
  %1582 = shl i64 %1561, 32
  %1583 = ashr exact i64 %1582, 32
  %1584 = and i64 %1561, 1
  %1585 = icmp ne i64 %1584, 0
  br label %1590

1586:                                             ; preds = %1680, %1560
  %1587 = add nuw i64 %1561, 1
  %1588 = load i64, i64* %38, align 8
  %1589 = icmp ult i64 %1587, %1588
  br i1 %1589, label %1560, label %1509

1590:                                             ; preds = %1581, %1680
  %1591 = phi i64 [ 0, %1581 ], [ %1698, %1680 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1494) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1494, i8 -86, i64 24, i1 false)
  %1592 = load i64, i64* %34, align 8
  %1593 = getelementptr inbounds i32, i32* %1569, i64 %1591
  %1594 = shl i64 %1591, 32
  %1595 = ashr exact i64 %1594, 32
  call void @_ZN3jxl6detail7PredictILi3EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl(%"struct.jxl::PredictionResult"* nonnull sret %29, %"class.std::__1::vector.61"* nonnull %16, i64 %1592, i32* %1593, i64 %1316, i64 %1595, i64 %1583, i32 0, %"class.jxl::MATreeLookup"* nonnull %17, %"class.jxl::Channel"* nonnull %26, %"struct.jxl::weighted::State"* nonnull %27, i64* null) #9
  %1596 = load i32, i32* %1593, align 4
  %1597 = sext i32 %1596 to i64
  %1598 = load i64, i64* %1495, align 8
  %1599 = sub nsw i64 %1597, %1598
  %1600 = load i32, i32* %1496, align 4
  %1601 = sext i32 %1600 to i64
  %1602 = srem i64 %1599, %1601
  %1603 = sdiv i64 %1599, %1601
  %1604 = icmp eq i64 %1602, 0
  br i1 %1604, label %1608, label %1605

1605:                                             ; preds = %1590
  %1606 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 333, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0)) #9
  %1607 = call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

1608:                                             ; preds = %1590
  %1609 = trunc i64 %1603 to i32
  %1610 = shl i32 %1609, 1
  %1611 = ashr i32 %1609, 31
  %1612 = xor i32 %1610, %1611
  %1613 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %93, align 8
  %1614 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %104, align 8
  %1615 = icmp ult %"struct.jxl::Token"* %1613, %1614
  %1616 = ptrtoint %"struct.jxl::Token"* %1614 to i64
  br i1 %1615, label %1617, label %1624

1617:                                             ; preds = %1608
  %1618 = load i32, i32* %1497, align 8
  %1619 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1613, i64 0, i32 0
  %1620 = shl i32 %1618, 1
  store i32 %1620, i32* %1619, align 4
  %1621 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1613, i64 0, i32 1
  store i32 %1612, i32* %1621, align 4
  %1622 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1613, i64 1
  %1623 = ptrtoint %"struct.jxl::Token"* %1622 to i64
  store i64 %1623, i64* %94, align 8
  br label %1680

1624:                                             ; preds = %1608
  %1625 = ptrtoint %"struct.jxl::Token"* %1613 to i64
  %1626 = load i64, i64* %96, align 8
  %1627 = sub i64 %1625, %1626
  %1628 = ashr exact i64 %1627, 3
  %1629 = add nsw i64 %1628, 1
  %1630 = icmp ugt i64 %1629, 2305843009213693951
  br i1 %1630, label %1631, label %1633

1631:                                             ; preds = %1624
  %1632 = bitcast %"class.std::__1::vector.101"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1632) #11
  unreachable

1633:                                             ; preds = %1624
  %1634 = sub i64 %1616, %1626
  %1635 = ashr exact i64 %1634, 3
  %1636 = icmp ult i64 %1635, 1152921504606846975
  br i1 %1636, label %1637, label %1645

1637:                                             ; preds = %1633
  %1638 = ashr exact i64 %1634, 2
  %1639 = icmp ult i64 %1638, %1629
  %1640 = select i1 %1639, i64 %1629, i64 %1638
  %1641 = icmp eq i64 %1640, 0
  br i1 %1641, label %1650, label %1642

1642:                                             ; preds = %1637
  %1643 = icmp ugt i64 %1640, 2305843009213693951
  br i1 %1643, label %1644, label %1645

1644:                                             ; preds = %1642
  call void @abort() #11
  unreachable

1645:                                             ; preds = %1642, %1633
  %1646 = phi i64 [ %1640, %1642 ], [ 2305843009213693951, %1633 ]
  %1647 = shl i64 %1646, 3
  %1648 = call i8* @_Znwm(i64 %1647) #12
  %1649 = bitcast i8* %1648 to %"struct.jxl::Token"*
  br label %1650

1650:                                             ; preds = %1645, %1637
  %1651 = phi i64 [ %1646, %1645 ], [ 0, %1637 ]
  %1652 = phi %"struct.jxl::Token"* [ %1649, %1645 ], [ null, %1637 ]
  %1653 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1652, i64 %1628
  %1654 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1652, i64 %1651
  %1655 = ptrtoint %"struct.jxl::Token"* %1654 to i64
  %1656 = load i32, i32* %1497, align 8
  %1657 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1653, i64 0, i32 0
  %1658 = shl i32 %1656, 1
  store i32 %1658, i32* %1657, align 4
  %1659 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1652, i64 %1628, i32 1
  store i32 %1612, i32* %1659, align 4
  %1660 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1653, i64 1
  %1661 = ptrtoint %"struct.jxl::Token"* %1660 to i64
  %1662 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %1498, align 8
  %1663 = load i64, i64* %94, align 8
  %1664 = ptrtoint %"struct.jxl::Token"* %1662 to i64
  %1665 = sub i64 %1663, %1664
  %1666 = ashr exact i64 %1665, 3
  %1667 = sub nsw i64 0, %1666
  %1668 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %1653, i64 %1667
  %1669 = ptrtoint %"struct.jxl::Token"* %1668 to i64
  %1670 = icmp sgt i64 %1665, 0
  br i1 %1670, label %1671, label %1675

1671:                                             ; preds = %1650
  %1672 = bitcast %"struct.jxl::Token"* %1668 to i8*
  %1673 = bitcast %"struct.jxl::Token"* %1662 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1672, i8* align 4 %1673, i64 %1665, i1 false) #9
  %1674 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %1498, align 8
  br label %1675

1675:                                             ; preds = %1671, %1650
  %1676 = phi %"struct.jxl::Token"* [ %1662, %1650 ], [ %1674, %1671 ]
  store i64 %1669, i64* %96, align 8
  store i64 %1661, i64* %94, align 8
  store i64 %1655, i64* %105, align 8
  %1677 = icmp eq %"struct.jxl::Token"* %1676, null
  br i1 %1677, label %1680, label %1678

1678:                                             ; preds = %1675
  %1679 = bitcast %"struct.jxl::Token"* %1676 to i8*
  call void @_ZdlPv(i8* %1679) #12
  br label %1680

1680:                                             ; preds = %1678, %1675, %1617
  %1681 = load i32, i32* %1593, align 4
  %1682 = sext i32 %1681 to i64
  %1683 = load i64, i64* %34, align 8
  %1684 = add i64 %1683, 2
  %1685 = select i1 %1585, i64 0, i64 %1684
  %1686 = select i1 %1585, i64 %1684, i64 0
  %1687 = shl nsw i64 %1682, 3
  %1688 = load i64, i64* %1499, align 8
  %1689 = sub nsw i64 %1688, %1687
  %1690 = icmp slt i64 %1689, 2147483647
  %1691 = select i1 %1690, i64 %1689, i64 2147483647
  %1692 = icmp sgt i64 %1691, -2147483648
  %1693 = select i1 %1692, i64 %1691, i64 -2147483648
  %1694 = trunc i64 %1693 to i32
  %1695 = add i64 %1685, %1591
  %1696 = load i32*, i32** %1500, align 8
  %1697 = getelementptr inbounds i32, i32* %1696, i64 %1695
  store i32 %1694, i32* %1697, align 4
  %1698 = add nuw i64 %1591, 1
  %1699 = add i64 %1686, %1698
  %1700 = load i64, i64* %1501, align 8
  %1701 = sub nsw i64 %1700, %1687
  %1702 = sub nsw i64 0, %1701
  %1703 = icmp slt i64 %1701, 0
  %1704 = select i1 %1703, i64 %1702, i64 %1701
  %1705 = add nuw nsw i64 %1704, 3
  %1706 = lshr i64 %1705, 3
  %1707 = trunc i64 %1706 to i32
  %1708 = load i32*, i32** %1502, align 8
  %1709 = getelementptr inbounds i32, i32* %1708, i64 %1695
  store i32 %1707, i32* %1709, align 4
  %1710 = load i32*, i32** %1502, align 8
  %1711 = getelementptr inbounds i32, i32* %1710, i64 %1699
  %1712 = load i32, i32* %1711, align 4
  %1713 = add i32 %1712, %1707
  store i32 %1713, i32* %1711, align 4
  %1714 = load i64, i64* %1503, align 8
  %1715 = sub nsw i64 %1714, %1687
  %1716 = sub nsw i64 0, %1715
  %1717 = icmp slt i64 %1715, 0
  %1718 = select i1 %1717, i64 %1716, i64 %1715
  %1719 = add nuw nsw i64 %1718, 3
  %1720 = lshr i64 %1719, 3
  %1721 = trunc i64 %1720 to i32
  %1722 = load i32*, i32** %1504, align 8
  %1723 = getelementptr inbounds i32, i32* %1722, i64 %1695
  store i32 %1721, i32* %1723, align 4
  %1724 = load i32*, i32** %1504, align 8
  %1725 = getelementptr inbounds i32, i32* %1724, i64 %1699
  %1726 = load i32, i32* %1725, align 4
  %1727 = add i32 %1726, %1721
  store i32 %1727, i32* %1725, align 4
  %1728 = load i64, i64* %1505, align 8
  %1729 = sub nsw i64 %1728, %1687
  %1730 = sub nsw i64 0, %1729
  %1731 = icmp slt i64 %1729, 0
  %1732 = select i1 %1731, i64 %1730, i64 %1729
  %1733 = add nuw nsw i64 %1732, 3
  %1734 = lshr i64 %1733, 3
  %1735 = trunc i64 %1734 to i32
  %1736 = load i32*, i32** %1506, align 8
  %1737 = getelementptr inbounds i32, i32* %1736, i64 %1695
  store i32 %1735, i32* %1737, align 4
  %1738 = load i32*, i32** %1506, align 8
  %1739 = getelementptr inbounds i32, i32* %1738, i64 %1699
  %1740 = load i32, i32* %1739, align 4
  %1741 = add i32 %1740, %1735
  store i32 %1741, i32* %1739, align 4
  %1742 = load i64, i64* %1507, align 8
  %1743 = sub nsw i64 %1742, %1687
  %1744 = sub nsw i64 0, %1743
  %1745 = icmp slt i64 %1743, 0
  %1746 = select i1 %1745, i64 %1744, i64 %1743
  %1747 = add nuw nsw i64 %1746, 3
  %1748 = lshr i64 %1747, 3
  %1749 = trunc i64 %1748 to i32
  %1750 = load i32*, i32** %1508, align 8
  %1751 = getelementptr inbounds i32, i32* %1750, i64 %1695
  store i32 %1749, i32* %1751, align 4
  %1752 = load i32*, i32** %1508, align 8
  %1753 = getelementptr inbounds i32, i32* %1752, i64 %1699
  %1754 = load i32, i32* %1753, align 4
  %1755 = add i32 %1754, %1749
  store i32 %1755, i32* %1753, align 4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1494) #9
  %1756 = load i64, i64* %34, align 8
  %1757 = icmp ult i64 %1698, %1756
  br i1 %1757, label %1590, label %1586

1758:                                             ; preds = %967, %1212, %2251, %2029, %1346, %1559, %318
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %84) #9
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %83) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %81) #9
  %1759 = load i32*, i32** %56, align 8
  %1760 = icmp eq i32* %1759, null
  br i1 %1760, label %1765, label %1761

1761:                                             ; preds = %1758
  %1762 = ptrtoint i32* %1759 to i64
  %1763 = bitcast i32** %57 to i64*
  store i64 %1762, i64* %1763, align 8
  %1764 = bitcast i32* %1759 to i8*
  call void @_ZdlPv(i8* %1764) #12
  br label %1765

1765:                                             ; preds = %1758, %1761
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %55) #9
  %1766 = load %"struct.jxl::FlatDecisionNode"*, %"struct.jxl::FlatDecisionNode"** %52, align 8
  %1767 = icmp eq %"struct.jxl::FlatDecisionNode"* %1766, null
  br i1 %1767, label %1772, label %1768

1768:                                             ; preds = %1765
  %1769 = ptrtoint %"struct.jxl::FlatDecisionNode"* %1766 to i64
  %1770 = bitcast %"struct.jxl::FlatDecisionNode"** %53 to i64*
  store i64 %1769, i64* %1770, align 8
  %1771 = bitcast %"struct.jxl::FlatDecisionNode"* %1766 to i8*
  call void @_ZdlPv(i8* %1771) #12
  br label %1772

1772:                                             ; preds = %1765, %1768
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %51) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %50) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %13) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %12) #9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %11) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #9
  %1773 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1774 = load i8*, i8** %1773, align 8
  store i8* null, i8** %1773, align 8
  %1775 = icmp eq i8* %1774, null
  br i1 %1775, label %1777, label %1776

1776:                                             ; preds = %1772
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1774) #9
  br label %1777

1777:                                             ; preds = %1776, %1772
  %1778 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1779 = load i8*, i8** %1778, align 8
  store i8* null, i8** %1778, align 8
  %1780 = icmp eq i8* %1779, null
  br i1 %1780, label %1782, label %1781

1781:                                             ; preds = %1777
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1779) #9
  br label %1782

1782:                                             ; preds = %1781, %1777
  %1783 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1784 = load i8*, i8** %1783, align 8
  store i8* null, i8** %1783, align 8
  %1785 = icmp eq i8* %1784, null
  br i1 %1785, label %1787, label %1786

1786:                                             ; preds = %1782
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1784) #9
  br label %1787

1787:                                             ; preds = %1782, %1786
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %45) #9
  ret i32 0

1788:                                             ; preds = %1190
  %1789 = sext i32 %1191 to i64
  %1790 = getelementptr inbounds [14 x float], [14 x float]* @switch.table._ZN3jxl25EncodeModularChannelMAANSERKNS_5ImageEiRKNS_8weighted6HeaderERKNSt3__16vectorINS_20PropertyDecisionNodeENS7_9allocatorIS9_EEEEPNS8_INS_5TokenENSA_ISF_EEEEPNS_6AuxOutEmb.23, i64 0, i64 %1789
  %1791 = load float, float* %1790, align 4
  br label %1792

1792:                                             ; preds = %1190, %1788
  %1793 = phi float [ %1791, %1788 ], [ 2.550000e+02, %1190 ]
  %1794 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 1
  %1795 = load i32, i32* %1794, align 4
  %1796 = icmp eq i32 %1795, 0
  br i1 %1796, label %1906, label %1797

1797:                                             ; preds = %1792
  %1798 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1799 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 4
  %1800 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 0
  %1801 = load i32, i32* %1800, align 8
  %1802 = load i8*, i8** %1798, align 8
  %1803 = load i64, i64* %1799, align 8
  %1804 = zext i32 %1801 to i64
  %1805 = zext i32 %1795 to i64
  %1806 = icmp ugt i64 %1804, 1
  %1807 = select i1 %1806, i64 %1804, i64 1
  %1808 = and i64 %1807, 4294967288
  %1809 = add nsw i64 %1808, -8
  %1810 = lshr exact i64 %1809, 3
  %1811 = add nuw nsw i64 %1810, 1
  %1812 = icmp ult i64 %1807, 8
  %1813 = and i64 %1807, 4294967288
  %1814 = insertelement <4 x float> undef, float %1793, i32 0
  %1815 = shufflevector <4 x float> %1814, <4 x float> undef, <4 x i32> zeroinitializer
  %1816 = insertelement <4 x float> undef, float %1793, i32 0
  %1817 = shufflevector <4 x float> %1816, <4 x float> undef, <4 x i32> zeroinitializer
  %1818 = and i64 %1811, 7
  %1819 = icmp ult i64 %1809, 56
  %1820 = sub nsw i64 %1811, %1818
  %1821 = icmp eq i64 %1818, 0
  %1822 = icmp eq i64 %1807, %1813
  br label %1823

1823:                                             ; preds = %1900, %1797
  %1824 = phi i32 [ %1801, %1797 ], [ %1901, %1900 ]
  %1825 = phi i64 [ 0, %1797 ], [ %1902, %1900 ]
  %1826 = mul i64 %1803, %1825
  %1827 = getelementptr inbounds i8, i8* %1802, i64 %1826
  %1828 = ptrtoint i8* %1827 to i64
  %1829 = and i64 %1828, 63
  %1830 = icmp eq i64 %1829, 0
  call void @llvm.assume(i1 %1830) #9
  %1831 = bitcast i8* %1827 to float*
  %1832 = icmp eq i32 %1824, 0
  br i1 %1832, label %1900, label %1833

1833:                                             ; preds = %1823
  br i1 %1812, label %1893, label %1834

1834:                                             ; preds = %1833
  br i1 %1819, label %1880, label %1835

1835:                                             ; preds = %1834, %1835
  %1836 = phi i64 [ %1877, %1835 ], [ 0, %1834 ]
  %1837 = phi i64 [ %1878, %1835 ], [ %1820, %1834 ]
  %1838 = getelementptr inbounds float, float* %1831, i64 %1836
  %1839 = bitcast float* %1838 to <4 x float>*
  store <4 x float> %1815, <4 x float>* %1839, align 64
  %1840 = getelementptr inbounds float, float* %1838, i64 4
  %1841 = bitcast float* %1840 to <4 x float>*
  store <4 x float> %1817, <4 x float>* %1841, align 16
  %1842 = or i64 %1836, 8
  %1843 = getelementptr inbounds float, float* %1831, i64 %1842
  %1844 = bitcast float* %1843 to <4 x float>*
  store <4 x float> %1815, <4 x float>* %1844, align 32
  %1845 = getelementptr inbounds float, float* %1843, i64 4
  %1846 = bitcast float* %1845 to <4 x float>*
  store <4 x float> %1817, <4 x float>* %1846, align 16
  %1847 = or i64 %1836, 16
  %1848 = getelementptr inbounds float, float* %1831, i64 %1847
  %1849 = bitcast float* %1848 to <4 x float>*
  store <4 x float> %1815, <4 x float>* %1849, align 64
  %1850 = getelementptr inbounds float, float* %1848, i64 4
  %1851 = bitcast float* %1850 to <4 x float>*
  store <4 x float> %1817, <4 x float>* %1851, align 16
  %1852 = or i64 %1836, 24
  %1853 = getelementptr inbounds float, float* %1831, i64 %1852
  %1854 = bitcast float* %1853 to <4 x float>*
  store <4 x float> %1815, <4 x float>* %1854, align 32
  %1855 = getelementptr inbounds float, float* %1853, i64 4
  %1856 = bitcast float* %1855 to <4 x float>*
  store <4 x float> %1817, <4 x float>* %1856, align 16
  %1857 = or i64 %1836, 32
  %1858 = getelementptr inbounds float, float* %1831, i64 %1857
  %1859 = bitcast float* %1858 to <4 x float>*
  store <4 x float> %1815, <4 x float>* %1859, align 64
  %1860 = getelementptr inbounds float, float* %1858, i64 4
  %1861 = bitcast float* %1860 to <4 x float>*
  store <4 x float> %1817, <4 x float>* %1861, align 16
  %1862 = or i64 %1836, 40
  %1863 = getelementptr inbounds float, float* %1831, i64 %1862
  %1864 = bitcast float* %1863 to <4 x float>*
  store <4 x float> %1815, <4 x float>* %1864, align 32
  %1865 = getelementptr inbounds float, float* %1863, i64 4
  %1866 = bitcast float* %1865 to <4 x float>*
  store <4 x float> %1817, <4 x float>* %1866, align 16
  %1867 = or i64 %1836, 48
  %1868 = getelementptr inbounds float, float* %1831, i64 %1867
  %1869 = bitcast float* %1868 to <4 x float>*
  store <4 x float> %1815, <4 x float>* %1869, align 64
  %1870 = getelementptr inbounds float, float* %1868, i64 4
  %1871 = bitcast float* %1870 to <4 x float>*
  store <4 x float> %1817, <4 x float>* %1871, align 16
  %1872 = or i64 %1836, 56
  %1873 = getelementptr inbounds float, float* %1831, i64 %1872
  %1874 = bitcast float* %1873 to <4 x float>*
  store <4 x float> %1815, <4 x float>* %1874, align 32
  %1875 = getelementptr inbounds float, float* %1873, i64 4
  %1876 = bitcast float* %1875 to <4 x float>*
  store <4 x float> %1817, <4 x float>* %1876, align 16
  %1877 = add i64 %1836, 64
  %1878 = add i64 %1837, -8
  %1879 = icmp eq i64 %1878, 0
  br i1 %1879, label %1880, label %1835, !llvm.loop !23

1880:                                             ; preds = %1835, %1834
  %1881 = phi i64 [ 0, %1834 ], [ %1877, %1835 ]
  br i1 %1821, label %1892, label %1882

1882:                                             ; preds = %1880, %1882
  %1883 = phi i64 [ %1889, %1882 ], [ %1881, %1880 ]
  %1884 = phi i64 [ %1890, %1882 ], [ %1818, %1880 ]
  %1885 = getelementptr inbounds float, float* %1831, i64 %1883
  %1886 = bitcast float* %1885 to <4 x float>*
  store <4 x float> %1815, <4 x float>* %1886, align 32
  %1887 = getelementptr inbounds float, float* %1885, i64 4
  %1888 = bitcast float* %1887 to <4 x float>*
  store <4 x float> %1817, <4 x float>* %1888, align 16
  %1889 = add i64 %1883, 8
  %1890 = add i64 %1884, -1
  %1891 = icmp eq i64 %1890, 0
  br i1 %1891, label %1892, label %1882, !llvm.loop !24

1892:                                             ; preds = %1882, %1880
  br i1 %1822, label %1900, label %1893

1893:                                             ; preds = %1892, %1833
  %1894 = phi i64 [ 0, %1833 ], [ %1813, %1892 ]
  br label %1895

1895:                                             ; preds = %1893, %1895
  %1896 = phi i64 [ %1898, %1895 ], [ %1894, %1893 ]
  %1897 = getelementptr inbounds float, float* %1831, i64 %1896
  store float %1793, float* %1897, align 4
  %1898 = add nuw nsw i64 %1896, 1
  %1899 = icmp ult i64 %1898, %1804
  br i1 %1899, label %1895, label %1900, !llvm.loop !25

1900:                                             ; preds = %1895, %1892, %1823
  %1901 = phi i32 [ 0, %1823 ], [ %1801, %1892 ], [ %1801, %1895 ]
  %1902 = add nuw nsw i64 %1825, 1
  %1903 = icmp eq i64 %1902, %1805
  br i1 %1903, label %1904, label %1823

1904:                                             ; preds = %1900
  %1905 = load %"struct.jxl::FlatDecisionNode"*, %"struct.jxl::FlatDecisionNode"** %52, align 8
  br label %1906

1906:                                             ; preds = %1904, %1792
  %1907 = phi %"struct.jxl::FlatDecisionNode"* [ %1905, %1904 ], [ %1192, %1792 ]
  %1908 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %1907, i64 0, i32 1, i32 0
  %1909 = load i32, i32* %1908, align 4
  %1910 = icmp ult i32 %1909, 14
  br i1 %1910, label %1911, label %1915

1911:                                             ; preds = %1906
  %1912 = sext i32 %1909 to i64
  %1913 = getelementptr inbounds [14 x float], [14 x float]* @switch.table._ZN3jxl25EncodeModularChannelMAANSERKNS_5ImageEiRKNS_8weighted6HeaderERKNSt3__16vectorINS_20PropertyDecisionNodeENS7_9allocatorIS9_EEEEPNS8_INS_5TokenENSA_ISF_EEEEPNS_6AuxOutEmb.24, i64 0, i64 %1912
  %1914 = load float, float* %1913, align 4
  br label %1915

1915:                                             ; preds = %1906, %1911
  %1916 = phi float [ %1914, %1911 ], [ 2.550000e+02, %1906 ]
  %1917 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 1
  %1918 = load i32, i32* %1917, align 4
  %1919 = icmp eq i32 %1918, 0
  br i1 %1919, label %2029, label %1920

1920:                                             ; preds = %1915
  %1921 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1922 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 4
  %1923 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 0
  %1924 = load i32, i32* %1923, align 8
  %1925 = load i8*, i8** %1921, align 8
  %1926 = load i64, i64* %1922, align 8
  %1927 = zext i32 %1924 to i64
  %1928 = zext i32 %1918 to i64
  %1929 = icmp ugt i64 %1927, 1
  %1930 = select i1 %1929, i64 %1927, i64 1
  %1931 = and i64 %1930, 4294967288
  %1932 = add nsw i64 %1931, -8
  %1933 = lshr exact i64 %1932, 3
  %1934 = add nuw nsw i64 %1933, 1
  %1935 = icmp ult i64 %1930, 8
  %1936 = and i64 %1930, 4294967288
  %1937 = insertelement <4 x float> undef, float %1916, i32 0
  %1938 = shufflevector <4 x float> %1937, <4 x float> undef, <4 x i32> zeroinitializer
  %1939 = insertelement <4 x float> undef, float %1916, i32 0
  %1940 = shufflevector <4 x float> %1939, <4 x float> undef, <4 x i32> zeroinitializer
  %1941 = and i64 %1934, 7
  %1942 = icmp ult i64 %1932, 56
  %1943 = sub nsw i64 %1934, %1941
  %1944 = icmp eq i64 %1941, 0
  %1945 = icmp eq i64 %1930, %1936
  br label %1946

1946:                                             ; preds = %2023, %1920
  %1947 = phi i32 [ %1924, %1920 ], [ %2024, %2023 ]
  %1948 = phi i64 [ 0, %1920 ], [ %2025, %2023 ]
  %1949 = mul i64 %1926, %1948
  %1950 = getelementptr inbounds i8, i8* %1925, i64 %1949
  %1951 = ptrtoint i8* %1950 to i64
  %1952 = and i64 %1951, 63
  %1953 = icmp eq i64 %1952, 0
  call void @llvm.assume(i1 %1953) #9
  %1954 = bitcast i8* %1950 to float*
  %1955 = icmp eq i32 %1947, 0
  br i1 %1955, label %2023, label %1956

1956:                                             ; preds = %1946
  br i1 %1935, label %2016, label %1957

1957:                                             ; preds = %1956
  br i1 %1942, label %2003, label %1958

1958:                                             ; preds = %1957, %1958
  %1959 = phi i64 [ %2000, %1958 ], [ 0, %1957 ]
  %1960 = phi i64 [ %2001, %1958 ], [ %1943, %1957 ]
  %1961 = getelementptr inbounds float, float* %1954, i64 %1959
  %1962 = bitcast float* %1961 to <4 x float>*
  store <4 x float> %1938, <4 x float>* %1962, align 64
  %1963 = getelementptr inbounds float, float* %1961, i64 4
  %1964 = bitcast float* %1963 to <4 x float>*
  store <4 x float> %1940, <4 x float>* %1964, align 16
  %1965 = or i64 %1959, 8
  %1966 = getelementptr inbounds float, float* %1954, i64 %1965
  %1967 = bitcast float* %1966 to <4 x float>*
  store <4 x float> %1938, <4 x float>* %1967, align 32
  %1968 = getelementptr inbounds float, float* %1966, i64 4
  %1969 = bitcast float* %1968 to <4 x float>*
  store <4 x float> %1940, <4 x float>* %1969, align 16
  %1970 = or i64 %1959, 16
  %1971 = getelementptr inbounds float, float* %1954, i64 %1970
  %1972 = bitcast float* %1971 to <4 x float>*
  store <4 x float> %1938, <4 x float>* %1972, align 64
  %1973 = getelementptr inbounds float, float* %1971, i64 4
  %1974 = bitcast float* %1973 to <4 x float>*
  store <4 x float> %1940, <4 x float>* %1974, align 16
  %1975 = or i64 %1959, 24
  %1976 = getelementptr inbounds float, float* %1954, i64 %1975
  %1977 = bitcast float* %1976 to <4 x float>*
  store <4 x float> %1938, <4 x float>* %1977, align 32
  %1978 = getelementptr inbounds float, float* %1976, i64 4
  %1979 = bitcast float* %1978 to <4 x float>*
  store <4 x float> %1940, <4 x float>* %1979, align 16
  %1980 = or i64 %1959, 32
  %1981 = getelementptr inbounds float, float* %1954, i64 %1980
  %1982 = bitcast float* %1981 to <4 x float>*
  store <4 x float> %1938, <4 x float>* %1982, align 64
  %1983 = getelementptr inbounds float, float* %1981, i64 4
  %1984 = bitcast float* %1983 to <4 x float>*
  store <4 x float> %1940, <4 x float>* %1984, align 16
  %1985 = or i64 %1959, 40
  %1986 = getelementptr inbounds float, float* %1954, i64 %1985
  %1987 = bitcast float* %1986 to <4 x float>*
  store <4 x float> %1938, <4 x float>* %1987, align 32
  %1988 = getelementptr inbounds float, float* %1986, i64 4
  %1989 = bitcast float* %1988 to <4 x float>*
  store <4 x float> %1940, <4 x float>* %1989, align 16
  %1990 = or i64 %1959, 48
  %1991 = getelementptr inbounds float, float* %1954, i64 %1990
  %1992 = bitcast float* %1991 to <4 x float>*
  store <4 x float> %1938, <4 x float>* %1992, align 64
  %1993 = getelementptr inbounds float, float* %1991, i64 4
  %1994 = bitcast float* %1993 to <4 x float>*
  store <4 x float> %1940, <4 x float>* %1994, align 16
  %1995 = or i64 %1959, 56
  %1996 = getelementptr inbounds float, float* %1954, i64 %1995
  %1997 = bitcast float* %1996 to <4 x float>*
  store <4 x float> %1938, <4 x float>* %1997, align 32
  %1998 = getelementptr inbounds float, float* %1996, i64 4
  %1999 = bitcast float* %1998 to <4 x float>*
  store <4 x float> %1940, <4 x float>* %1999, align 16
  %2000 = add i64 %1959, 64
  %2001 = add i64 %1960, -8
  %2002 = icmp eq i64 %2001, 0
  br i1 %2002, label %2003, label %1958, !llvm.loop !26

2003:                                             ; preds = %1958, %1957
  %2004 = phi i64 [ 0, %1957 ], [ %2000, %1958 ]
  br i1 %1944, label %2015, label %2005

2005:                                             ; preds = %2003, %2005
  %2006 = phi i64 [ %2012, %2005 ], [ %2004, %2003 ]
  %2007 = phi i64 [ %2013, %2005 ], [ %1941, %2003 ]
  %2008 = getelementptr inbounds float, float* %1954, i64 %2006
  %2009 = bitcast float* %2008 to <4 x float>*
  store <4 x float> %1938, <4 x float>* %2009, align 32
  %2010 = getelementptr inbounds float, float* %2008, i64 4
  %2011 = bitcast float* %2010 to <4 x float>*
  store <4 x float> %1940, <4 x float>* %2011, align 16
  %2012 = add i64 %2006, 8
  %2013 = add i64 %2007, -1
  %2014 = icmp eq i64 %2013, 0
  br i1 %2014, label %2015, label %2005, !llvm.loop !27

2015:                                             ; preds = %2005, %2003
  br i1 %1945, label %2023, label %2016

2016:                                             ; preds = %2015, %1956
  %2017 = phi i64 [ 0, %1956 ], [ %1936, %2015 ]
  br label %2018

2018:                                             ; preds = %2016, %2018
  %2019 = phi i64 [ %2021, %2018 ], [ %2017, %2016 ]
  %2020 = getelementptr inbounds float, float* %1954, i64 %2019
  store float %1916, float* %2020, align 4
  %2021 = add nuw nsw i64 %2019, 1
  %2022 = icmp ult i64 %2021, %1927
  br i1 %2022, label %2018, label %2023, !llvm.loop !28

2023:                                             ; preds = %2018, %2015, %1946
  %2024 = phi i32 [ 0, %1946 ], [ %1924, %2015 ], [ %1924, %2018 ]
  %2025 = add nuw nsw i64 %1948, 1
  %2026 = icmp eq i64 %2025, %1928
  br i1 %2026, label %2027, label %1946

2027:                                             ; preds = %2023
  %2028 = load %"struct.jxl::FlatDecisionNode"*, %"struct.jxl::FlatDecisionNode"** %52, align 8
  br label %2029

2029:                                             ; preds = %2027, %1915
  %2030 = phi %"struct.jxl::FlatDecisionNode"* [ %2028, %2027 ], [ %1907, %1915 ]
  %2031 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %2030, i64 0, i32 3, i32 0, i64 0
  %2032 = load i32, i32* %2031, align 4
  %2033 = call i32 @llvm.ctlz.i32(i32 %2032, i1 true) #9, !range !13
  %2034 = xor i32 %2033, 31
  %2035 = zext i32 %2034 to i64
  %2036 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %32, i64 %30, i32 0, i32 0, i32 4
  %2037 = load i64, i64* %2036, align 8
  %2038 = lshr i64 %2037, 2
  %2039 = load i64, i64* %38, align 8
  %2040 = icmp eq i64 %2039, 0
  br i1 %2040, label %1758, label %1064

2041:                                             ; preds = %948
  %2042 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %2043 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 4
  %2044 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 0
  %2045 = load i32, i32* %2044, align 8
  %2046 = load i8*, i8** %2042, align 8
  %2047 = load i64, i64* %2043, align 8
  %2048 = zext i32 %2045 to i64
  %2049 = zext i32 %950 to i64
  %2050 = icmp ugt i64 %2048, 1
  %2051 = select i1 %2050, i64 %2048, i64 1
  %2052 = and i64 %2051, 4294967288
  %2053 = add nsw i64 %2052, -8
  %2054 = lshr exact i64 %2053, 3
  %2055 = add nuw nsw i64 %2054, 1
  %2056 = icmp ult i64 %2051, 8
  %2057 = and i64 %2051, 4294967288
  %2058 = and i64 %2055, 7
  %2059 = icmp ult i64 %2053, 56
  %2060 = sub nsw i64 %2055, %2058
  %2061 = icmp eq i64 %2058, 0
  %2062 = icmp eq i64 %2051, %2057
  br label %2063

2063:                                             ; preds = %2140, %2041
  %2064 = phi i32 [ %2045, %2041 ], [ %2141, %2140 ]
  %2065 = phi i64 [ 0, %2041 ], [ %2142, %2140 ]
  %2066 = mul i64 %2047, %2065
  %2067 = getelementptr inbounds i8, i8* %2046, i64 %2066
  %2068 = ptrtoint i8* %2067 to i64
  %2069 = and i64 %2068, 63
  %2070 = icmp eq i64 %2069, 0
  call void @llvm.assume(i1 %2070) #9
  %2071 = bitcast i8* %2067 to float*
  %2072 = icmp eq i32 %2064, 0
  br i1 %2072, label %2140, label %2073

2073:                                             ; preds = %2063
  br i1 %2056, label %2133, label %2074

2074:                                             ; preds = %2073
  br i1 %2059, label %2120, label %2075

2075:                                             ; preds = %2074, %2075
  %2076 = phi i64 [ %2117, %2075 ], [ 0, %2074 ]
  %2077 = phi i64 [ %2118, %2075 ], [ %2060, %2074 ]
  %2078 = getelementptr inbounds float, float* %2071, i64 %2076
  %2079 = bitcast float* %2078 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2079, align 64
  %2080 = getelementptr inbounds float, float* %2078, i64 4
  %2081 = bitcast float* %2080 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2081, align 16
  %2082 = or i64 %2076, 8
  %2083 = getelementptr inbounds float, float* %2071, i64 %2082
  %2084 = bitcast float* %2083 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2084, align 32
  %2085 = getelementptr inbounds float, float* %2083, i64 4
  %2086 = bitcast float* %2085 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2086, align 16
  %2087 = or i64 %2076, 16
  %2088 = getelementptr inbounds float, float* %2071, i64 %2087
  %2089 = bitcast float* %2088 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2089, align 64
  %2090 = getelementptr inbounds float, float* %2088, i64 4
  %2091 = bitcast float* %2090 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2091, align 16
  %2092 = or i64 %2076, 24
  %2093 = getelementptr inbounds float, float* %2071, i64 %2092
  %2094 = bitcast float* %2093 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2094, align 32
  %2095 = getelementptr inbounds float, float* %2093, i64 4
  %2096 = bitcast float* %2095 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2096, align 16
  %2097 = or i64 %2076, 32
  %2098 = getelementptr inbounds float, float* %2071, i64 %2097
  %2099 = bitcast float* %2098 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2099, align 64
  %2100 = getelementptr inbounds float, float* %2098, i64 4
  %2101 = bitcast float* %2100 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2101, align 16
  %2102 = or i64 %2076, 40
  %2103 = getelementptr inbounds float, float* %2071, i64 %2102
  %2104 = bitcast float* %2103 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2104, align 32
  %2105 = getelementptr inbounds float, float* %2103, i64 4
  %2106 = bitcast float* %2105 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2106, align 16
  %2107 = or i64 %2076, 48
  %2108 = getelementptr inbounds float, float* %2071, i64 %2107
  %2109 = bitcast float* %2108 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2109, align 64
  %2110 = getelementptr inbounds float, float* %2108, i64 4
  %2111 = bitcast float* %2110 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2111, align 16
  %2112 = or i64 %2076, 56
  %2113 = getelementptr inbounds float, float* %2071, i64 %2112
  %2114 = bitcast float* %2113 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2114, align 32
  %2115 = getelementptr inbounds float, float* %2113, i64 4
  %2116 = bitcast float* %2115 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2116, align 16
  %2117 = add i64 %2076, 64
  %2118 = add i64 %2077, -8
  %2119 = icmp eq i64 %2118, 0
  br i1 %2119, label %2120, label %2075, !llvm.loop !29

2120:                                             ; preds = %2075, %2074
  %2121 = phi i64 [ 0, %2074 ], [ %2117, %2075 ]
  br i1 %2061, label %2132, label %2122

2122:                                             ; preds = %2120, %2122
  %2123 = phi i64 [ %2129, %2122 ], [ %2121, %2120 ]
  %2124 = phi i64 [ %2130, %2122 ], [ %2058, %2120 ]
  %2125 = getelementptr inbounds float, float* %2071, i64 %2123
  %2126 = bitcast float* %2125 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2126, align 32
  %2127 = getelementptr inbounds float, float* %2125, i64 4
  %2128 = bitcast float* %2127 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2128, align 16
  %2129 = add i64 %2123, 8
  %2130 = add i64 %2124, -1
  %2131 = icmp eq i64 %2130, 0
  br i1 %2131, label %2132, label %2122, !llvm.loop !30

2132:                                             ; preds = %2122, %2120
  br i1 %2062, label %2140, label %2133

2133:                                             ; preds = %2132, %2073
  %2134 = phi i64 [ 0, %2073 ], [ %2057, %2132 ]
  br label %2135

2135:                                             ; preds = %2133, %2135
  %2136 = phi i64 [ %2138, %2135 ], [ %2134, %2133 ]
  %2137 = getelementptr inbounds float, float* %2071, i64 %2136
  store float 0.000000e+00, float* %2137, align 4
  %2138 = add nuw nsw i64 %2136, 1
  %2139 = icmp ult i64 %2138, %2048
  br i1 %2139, label %2135, label %2140, !llvm.loop !31

2140:                                             ; preds = %2135, %2132, %2063
  %2141 = phi i32 [ 0, %2063 ], [ %2045, %2132 ], [ %2045, %2135 ]
  %2142 = add nuw nsw i64 %2065, 1
  %2143 = icmp eq i64 %2142, %2049
  br i1 %2143, label %2144, label %2063

2144:                                             ; preds = %2140, %948
  %2145 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 1
  %2146 = load i32, i32* %2145, align 4
  %2147 = icmp eq i32 %2146, 0
  br i1 %2147, label %2251, label %2148

2148:                                             ; preds = %2144
  %2149 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %2150 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 4
  %2151 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 0
  %2152 = load i32, i32* %2151, align 8
  %2153 = load i8*, i8** %2149, align 8
  %2154 = load i64, i64* %2150, align 8
  %2155 = zext i32 %2152 to i64
  %2156 = zext i32 %2146 to i64
  %2157 = icmp ugt i64 %2155, 1
  %2158 = select i1 %2157, i64 %2155, i64 1
  %2159 = and i64 %2158, 4294967288
  %2160 = add nsw i64 %2159, -8
  %2161 = lshr exact i64 %2160, 3
  %2162 = add nuw nsw i64 %2161, 1
  %2163 = icmp ult i64 %2158, 8
  %2164 = and i64 %2158, 4294967288
  %2165 = and i64 %2162, 7
  %2166 = icmp ult i64 %2160, 56
  %2167 = sub nsw i64 %2162, %2165
  %2168 = icmp eq i64 %2165, 0
  %2169 = icmp eq i64 %2158, %2164
  br label %2170

2170:                                             ; preds = %2247, %2148
  %2171 = phi i32 [ %2152, %2148 ], [ %2248, %2247 ]
  %2172 = phi i64 [ 0, %2148 ], [ %2249, %2247 ]
  %2173 = mul i64 %2154, %2172
  %2174 = getelementptr inbounds i8, i8* %2153, i64 %2173
  %2175 = ptrtoint i8* %2174 to i64
  %2176 = and i64 %2175, 63
  %2177 = icmp eq i64 %2176, 0
  call void @llvm.assume(i1 %2177) #9
  %2178 = bitcast i8* %2174 to float*
  %2179 = icmp eq i32 %2171, 0
  br i1 %2179, label %2247, label %2180

2180:                                             ; preds = %2170
  br i1 %2163, label %2240, label %2181

2181:                                             ; preds = %2180
  br i1 %2166, label %2227, label %2182

2182:                                             ; preds = %2181, %2182
  %2183 = phi i64 [ %2224, %2182 ], [ 0, %2181 ]
  %2184 = phi i64 [ %2225, %2182 ], [ %2167, %2181 ]
  %2185 = getelementptr inbounds float, float* %2178, i64 %2183
  %2186 = bitcast float* %2185 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2186, align 64
  %2187 = getelementptr inbounds float, float* %2185, i64 4
  %2188 = bitcast float* %2187 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2188, align 16
  %2189 = or i64 %2183, 8
  %2190 = getelementptr inbounds float, float* %2178, i64 %2189
  %2191 = bitcast float* %2190 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2191, align 32
  %2192 = getelementptr inbounds float, float* %2190, i64 4
  %2193 = bitcast float* %2192 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2193, align 16
  %2194 = or i64 %2183, 16
  %2195 = getelementptr inbounds float, float* %2178, i64 %2194
  %2196 = bitcast float* %2195 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2196, align 64
  %2197 = getelementptr inbounds float, float* %2195, i64 4
  %2198 = bitcast float* %2197 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2198, align 16
  %2199 = or i64 %2183, 24
  %2200 = getelementptr inbounds float, float* %2178, i64 %2199
  %2201 = bitcast float* %2200 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2201, align 32
  %2202 = getelementptr inbounds float, float* %2200, i64 4
  %2203 = bitcast float* %2202 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2203, align 16
  %2204 = or i64 %2183, 32
  %2205 = getelementptr inbounds float, float* %2178, i64 %2204
  %2206 = bitcast float* %2205 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2206, align 64
  %2207 = getelementptr inbounds float, float* %2205, i64 4
  %2208 = bitcast float* %2207 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2208, align 16
  %2209 = or i64 %2183, 40
  %2210 = getelementptr inbounds float, float* %2178, i64 %2209
  %2211 = bitcast float* %2210 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2211, align 32
  %2212 = getelementptr inbounds float, float* %2210, i64 4
  %2213 = bitcast float* %2212 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2213, align 16
  %2214 = or i64 %2183, 48
  %2215 = getelementptr inbounds float, float* %2178, i64 %2214
  %2216 = bitcast float* %2215 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2216, align 64
  %2217 = getelementptr inbounds float, float* %2215, i64 4
  %2218 = bitcast float* %2217 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2218, align 16
  %2219 = or i64 %2183, 56
  %2220 = getelementptr inbounds float, float* %2178, i64 %2219
  %2221 = bitcast float* %2220 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2221, align 32
  %2222 = getelementptr inbounds float, float* %2220, i64 4
  %2223 = bitcast float* %2222 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2223, align 16
  %2224 = add i64 %2183, 64
  %2225 = add i64 %2184, -8
  %2226 = icmp eq i64 %2225, 0
  br i1 %2226, label %2227, label %2182, !llvm.loop !32

2227:                                             ; preds = %2182, %2181
  %2228 = phi i64 [ 0, %2181 ], [ %2224, %2182 ]
  br i1 %2168, label %2239, label %2229

2229:                                             ; preds = %2227, %2229
  %2230 = phi i64 [ %2236, %2229 ], [ %2228, %2227 ]
  %2231 = phi i64 [ %2237, %2229 ], [ %2165, %2227 ]
  %2232 = getelementptr inbounds float, float* %2178, i64 %2230
  %2233 = bitcast float* %2232 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2233, align 32
  %2234 = getelementptr inbounds float, float* %2232, i64 4
  %2235 = bitcast float* %2234 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %2235, align 16
  %2236 = add i64 %2230, 8
  %2237 = add i64 %2231, -1
  %2238 = icmp eq i64 %2237, 0
  br i1 %2238, label %2239, label %2229, !llvm.loop !33

2239:                                             ; preds = %2229, %2227
  br i1 %2169, label %2247, label %2240

2240:                                             ; preds = %2239, %2180
  %2241 = phi i64 [ 0, %2180 ], [ %2164, %2239 ]
  br label %2242

2242:                                             ; preds = %2240, %2242
  %2243 = phi i64 [ %2245, %2242 ], [ %2241, %2240 ]
  %2244 = getelementptr inbounds float, float* %2178, i64 %2243
  store float 0.000000e+00, float* %2244, align 4
  %2245 = add nuw nsw i64 %2243, 1
  %2246 = icmp ult i64 %2245, %2155
  br i1 %2246, label %2242, label %2247, !llvm.loop !34

2247:                                             ; preds = %2242, %2239, %2170
  %2248 = phi i32 [ 0, %2170 ], [ %2152, %2239 ], [ %2152, %2242 ]
  %2249 = add nuw nsw i64 %2172, 1
  %2250 = icmp eq i64 %2249, %2156
  br i1 %2250, label %2251, label %2170

2251:                                             ; preds = %2247, %2144
  %2252 = load i64, i64* %38, align 8
  %2253 = icmp eq i64 %2252, 0
  br i1 %2253, label %1758, label %840

2254:                                             ; preds = %269
  %2255 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %2256 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 4
  %2257 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 0
  %2258 = load i32, i32* %2257, align 8
  %2259 = load i8*, i8** %2255, align 8
  %2260 = load i64, i64* %2256, align 8
  %2261 = zext i32 %2258 to i64
  %2262 = zext i32 %271 to i64
  %2263 = icmp ugt i64 %2261, 1
  %2264 = select i1 %2263, i64 %2261, i64 1
  %2265 = and i64 %2264, 4294967288
  %2266 = add nsw i64 %2265, -8
  %2267 = lshr exact i64 %2266, 3
  %2268 = add nuw nsw i64 %2267, 1
  %2269 = icmp ult i64 %2264, 8
  %2270 = and i64 %2264, 4294967288
  %2271 = and i64 %2268, 7
  %2272 = icmp ult i64 %2266, 56
  %2273 = sub nsw i64 %2268, %2271
  %2274 = icmp eq i64 %2271, 0
  %2275 = icmp eq i64 %2264, %2270
  br label %2276

2276:                                             ; preds = %2353, %2254
  %2277 = phi i32 [ %2258, %2254 ], [ %2354, %2353 ]
  %2278 = phi i64 [ 0, %2254 ], [ %2355, %2353 ]
  %2279 = mul i64 %2260, %2278
  %2280 = getelementptr inbounds i8, i8* %2259, i64 %2279
  %2281 = ptrtoint i8* %2280 to i64
  %2282 = and i64 %2281, 63
  %2283 = icmp eq i64 %2282, 0
  call void @llvm.assume(i1 %2283) #9
  %2284 = bitcast i8* %2280 to float*
  %2285 = icmp eq i32 %2277, 0
  br i1 %2285, label %2353, label %2286

2286:                                             ; preds = %2276
  br i1 %2269, label %2346, label %2287

2287:                                             ; preds = %2286
  br i1 %2272, label %2333, label %2288

2288:                                             ; preds = %2287, %2288
  %2289 = phi i64 [ %2330, %2288 ], [ 0, %2287 ]
  %2290 = phi i64 [ %2331, %2288 ], [ %2273, %2287 ]
  %2291 = getelementptr inbounds float, float* %2284, i64 %2289
  %2292 = bitcast float* %2291 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2292, align 64
  %2293 = getelementptr inbounds float, float* %2291, i64 4
  %2294 = bitcast float* %2293 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2294, align 16
  %2295 = or i64 %2289, 8
  %2296 = getelementptr inbounds float, float* %2284, i64 %2295
  %2297 = bitcast float* %2296 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2297, align 32
  %2298 = getelementptr inbounds float, float* %2296, i64 4
  %2299 = bitcast float* %2298 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2299, align 16
  %2300 = or i64 %2289, 16
  %2301 = getelementptr inbounds float, float* %2284, i64 %2300
  %2302 = bitcast float* %2301 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2302, align 64
  %2303 = getelementptr inbounds float, float* %2301, i64 4
  %2304 = bitcast float* %2303 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2304, align 16
  %2305 = or i64 %2289, 24
  %2306 = getelementptr inbounds float, float* %2284, i64 %2305
  %2307 = bitcast float* %2306 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2307, align 32
  %2308 = getelementptr inbounds float, float* %2306, i64 4
  %2309 = bitcast float* %2308 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2309, align 16
  %2310 = or i64 %2289, 32
  %2311 = getelementptr inbounds float, float* %2284, i64 %2310
  %2312 = bitcast float* %2311 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2312, align 64
  %2313 = getelementptr inbounds float, float* %2311, i64 4
  %2314 = bitcast float* %2313 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2314, align 16
  %2315 = or i64 %2289, 40
  %2316 = getelementptr inbounds float, float* %2284, i64 %2315
  %2317 = bitcast float* %2316 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2317, align 32
  %2318 = getelementptr inbounds float, float* %2316, i64 4
  %2319 = bitcast float* %2318 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2319, align 16
  %2320 = or i64 %2289, 48
  %2321 = getelementptr inbounds float, float* %2284, i64 %2320
  %2322 = bitcast float* %2321 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2322, align 64
  %2323 = getelementptr inbounds float, float* %2321, i64 4
  %2324 = bitcast float* %2323 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2324, align 16
  %2325 = or i64 %2289, 56
  %2326 = getelementptr inbounds float, float* %2284, i64 %2325
  %2327 = bitcast float* %2326 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2327, align 32
  %2328 = getelementptr inbounds float, float* %2326, i64 4
  %2329 = bitcast float* %2328 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2329, align 16
  %2330 = add i64 %2289, 64
  %2331 = add i64 %2290, -8
  %2332 = icmp eq i64 %2331, 0
  br i1 %2332, label %2333, label %2288, !llvm.loop !35

2333:                                             ; preds = %2288, %2287
  %2334 = phi i64 [ 0, %2287 ], [ %2330, %2288 ]
  br i1 %2274, label %2345, label %2335

2335:                                             ; preds = %2333, %2335
  %2336 = phi i64 [ %2342, %2335 ], [ %2334, %2333 ]
  %2337 = phi i64 [ %2343, %2335 ], [ %2271, %2333 ]
  %2338 = getelementptr inbounds float, float* %2284, i64 %2336
  %2339 = bitcast float* %2338 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2339, align 32
  %2340 = getelementptr inbounds float, float* %2338, i64 4
  %2341 = bitcast float* %2340 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2341, align 16
  %2342 = add i64 %2336, 8
  %2343 = add i64 %2337, -1
  %2344 = icmp eq i64 %2343, 0
  br i1 %2344, label %2345, label %2335, !llvm.loop !36

2345:                                             ; preds = %2335, %2333
  br i1 %2275, label %2353, label %2346

2346:                                             ; preds = %2345, %2286
  %2347 = phi i64 [ 0, %2286 ], [ %2270, %2345 ]
  br label %2348

2348:                                             ; preds = %2346, %2348
  %2349 = phi i64 [ %2351, %2348 ], [ %2347, %2346 ]
  %2350 = getelementptr inbounds float, float* %2284, i64 %2349
  store float 2.550000e+02, float* %2350, align 4
  %2351 = add nuw nsw i64 %2349, 1
  %2352 = icmp ult i64 %2351, %2261
  br i1 %2352, label %2348, label %2353, !llvm.loop !37

2353:                                             ; preds = %2348, %2345, %2276
  %2354 = phi i32 [ 0, %2276 ], [ %2258, %2345 ], [ %2258, %2348 ]
  %2355 = add nuw nsw i64 %2278, 1
  %2356 = icmp eq i64 %2355, %2262
  br i1 %2356, label %2357, label %2276

2357:                                             ; preds = %2353, %269
  %2358 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 1
  %2359 = load i32, i32* %2358, align 4
  %2360 = icmp eq i32 %2359, 0
  br i1 %2360, label %2464, label %2361

2361:                                             ; preds = %2357
  %2362 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %2363 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 4
  %2364 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 0
  %2365 = load i32, i32* %2364, align 8
  %2366 = load i8*, i8** %2362, align 8
  %2367 = load i64, i64* %2363, align 8
  %2368 = zext i32 %2365 to i64
  %2369 = zext i32 %2359 to i64
  %2370 = icmp ugt i64 %2368, 1
  %2371 = select i1 %2370, i64 %2368, i64 1
  %2372 = and i64 %2371, 4294967288
  %2373 = add nsw i64 %2372, -8
  %2374 = lshr exact i64 %2373, 3
  %2375 = add nuw nsw i64 %2374, 1
  %2376 = icmp ult i64 %2371, 8
  %2377 = and i64 %2371, 4294967288
  %2378 = and i64 %2375, 7
  %2379 = icmp ult i64 %2373, 56
  %2380 = sub nsw i64 %2375, %2378
  %2381 = icmp eq i64 %2378, 0
  %2382 = icmp eq i64 %2371, %2377
  br label %2383

2383:                                             ; preds = %2460, %2361
  %2384 = phi i32 [ %2365, %2361 ], [ %2461, %2460 ]
  %2385 = phi i64 [ 0, %2361 ], [ %2462, %2460 ]
  %2386 = mul i64 %2367, %2385
  %2387 = getelementptr inbounds i8, i8* %2366, i64 %2386
  %2388 = ptrtoint i8* %2387 to i64
  %2389 = and i64 %2388, 63
  %2390 = icmp eq i64 %2389, 0
  call void @llvm.assume(i1 %2390) #9
  %2391 = bitcast i8* %2387 to float*
  %2392 = icmp eq i32 %2384, 0
  br i1 %2392, label %2460, label %2393

2393:                                             ; preds = %2383
  br i1 %2376, label %2453, label %2394

2394:                                             ; preds = %2393
  br i1 %2379, label %2440, label %2395

2395:                                             ; preds = %2394, %2395
  %2396 = phi i64 [ %2437, %2395 ], [ 0, %2394 ]
  %2397 = phi i64 [ %2438, %2395 ], [ %2380, %2394 ]
  %2398 = getelementptr inbounds float, float* %2391, i64 %2396
  %2399 = bitcast float* %2398 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2399, align 64
  %2400 = getelementptr inbounds float, float* %2398, i64 4
  %2401 = bitcast float* %2400 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2401, align 16
  %2402 = or i64 %2396, 8
  %2403 = getelementptr inbounds float, float* %2391, i64 %2402
  %2404 = bitcast float* %2403 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2404, align 32
  %2405 = getelementptr inbounds float, float* %2403, i64 4
  %2406 = bitcast float* %2405 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2406, align 16
  %2407 = or i64 %2396, 16
  %2408 = getelementptr inbounds float, float* %2391, i64 %2407
  %2409 = bitcast float* %2408 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2409, align 64
  %2410 = getelementptr inbounds float, float* %2408, i64 4
  %2411 = bitcast float* %2410 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2411, align 16
  %2412 = or i64 %2396, 24
  %2413 = getelementptr inbounds float, float* %2391, i64 %2412
  %2414 = bitcast float* %2413 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2414, align 32
  %2415 = getelementptr inbounds float, float* %2413, i64 4
  %2416 = bitcast float* %2415 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2416, align 16
  %2417 = or i64 %2396, 32
  %2418 = getelementptr inbounds float, float* %2391, i64 %2417
  %2419 = bitcast float* %2418 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2419, align 64
  %2420 = getelementptr inbounds float, float* %2418, i64 4
  %2421 = bitcast float* %2420 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2421, align 16
  %2422 = or i64 %2396, 40
  %2423 = getelementptr inbounds float, float* %2391, i64 %2422
  %2424 = bitcast float* %2423 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2424, align 32
  %2425 = getelementptr inbounds float, float* %2423, i64 4
  %2426 = bitcast float* %2425 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2426, align 16
  %2427 = or i64 %2396, 48
  %2428 = getelementptr inbounds float, float* %2391, i64 %2427
  %2429 = bitcast float* %2428 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2429, align 64
  %2430 = getelementptr inbounds float, float* %2428, i64 4
  %2431 = bitcast float* %2430 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2431, align 16
  %2432 = or i64 %2396, 56
  %2433 = getelementptr inbounds float, float* %2391, i64 %2432
  %2434 = bitcast float* %2433 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2434, align 32
  %2435 = getelementptr inbounds float, float* %2433, i64 4
  %2436 = bitcast float* %2435 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2436, align 16
  %2437 = add i64 %2396, 64
  %2438 = add i64 %2397, -8
  %2439 = icmp eq i64 %2438, 0
  br i1 %2439, label %2440, label %2395, !llvm.loop !38

2440:                                             ; preds = %2395, %2394
  %2441 = phi i64 [ 0, %2394 ], [ %2437, %2395 ]
  br i1 %2381, label %2452, label %2442

2442:                                             ; preds = %2440, %2442
  %2443 = phi i64 [ %2449, %2442 ], [ %2441, %2440 ]
  %2444 = phi i64 [ %2450, %2442 ], [ %2378, %2440 ]
  %2445 = getelementptr inbounds float, float* %2391, i64 %2443
  %2446 = bitcast float* %2445 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2446, align 32
  %2447 = getelementptr inbounds float, float* %2445, i64 4
  %2448 = bitcast float* %2447 to <4 x float>*
  store <4 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>, <4 x float>* %2448, align 16
  %2449 = add i64 %2443, 8
  %2450 = add i64 %2444, -1
  %2451 = icmp eq i64 %2450, 0
  br i1 %2451, label %2452, label %2442, !llvm.loop !39

2452:                                             ; preds = %2442, %2440
  br i1 %2382, label %2460, label %2453

2453:                                             ; preds = %2452, %2393
  %2454 = phi i64 [ 0, %2393 ], [ %2377, %2452 ]
  br label %2455

2455:                                             ; preds = %2453, %2455
  %2456 = phi i64 [ %2458, %2455 ], [ %2454, %2453 ]
  %2457 = getelementptr inbounds float, float* %2391, i64 %2456
  store float 2.550000e+02, float* %2457, align 4
  %2458 = add nuw nsw i64 %2456, 1
  %2459 = icmp ult i64 %2458, %2368
  br i1 %2459, label %2455, label %2460, !llvm.loop !40

2460:                                             ; preds = %2455, %2452, %2383
  %2461 = phi i32 [ 0, %2383 ], [ %2365, %2452 ], [ %2365, %2455 ]
  %2462 = add nuw nsw i64 %2385, 1
  %2463 = icmp eq i64 %2462, %2369
  br i1 %2463, label %2464, label %2383

2464:                                             ; preds = %2460, %2357
  %2465 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %32, i64 %30, i32 0, i32 0, i32 4
  %2466 = load i64, i64* %2465, align 8
  %2467 = bitcast %"struct.jxl::weighted::State"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 472, i8* nonnull %2467) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2467, i8 -86, i64 472, i1 false)
  %2468 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %21, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8weighted6HeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2468, align 8
  %2469 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %21, i64 0, i32 1
  %2470 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %2, i64 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2469, i8* align 8 %2470, i64 48, i1 false) #9
  %2471 = load i64, i64* %34, align 8
  %2472 = load i64, i64* %38, align 8
  call void @_ZN3jxl8weighted5StateC2ENS0_6HeaderEmm(%"struct.jxl::weighted::State"* nonnull %20, %"struct.jxl::weighted::Header"* nonnull %21, i64 %2471, i64 %2472)
  %2473 = call i8* @_Znwm(i64 4) #12
  %2474 = bitcast i8* %2473 to i32*
  store i32 0, i32* %2474, align 4
  %2475 = load i64, i64* %38, align 8
  %2476 = icmp eq i64 %2475, 0
  br i1 %2476, label %273, label %138
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #5

declare void @_ZN3jxl10FilterTreeERKNSt3__16vectorINS_20PropertyDecisionNodeENS0_9allocatorIS2_EEEERNS0_5arrayIiLm2EEEPmPbSC_SC_(%"class.std::__1::vector.202"* sret, %"class.std::__1::vector.89"* dereferenceable(24), %"struct.std::__1::array"* dereferenceable(8), i64*, i8*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3jxl17TreeToLookupTableItEEbRKNSt3__16vectorINS_16FlatDecisionNodeENS1_9allocatorIS3_EEEEPT_PaSB_(%"class.std::__1::vector.202"* dereferenceable(24), i16*, i8*, i8*) local_unnamed_addr #0 comdat {
  %5 = alloca %"class.std::__1::vector.267", align 8
  %6 = bitcast %"class.std::__1::vector.267"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.std::__1::vector.267", %"class.std::__1::vector.267"* %5, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::vector.267", %"class.std::__1::vector.267"* %5, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.std::__1::vector.267", %"class.std::__1::vector.267"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = bitcast %struct.TreeRange** %8 to i64*
  %11 = bitcast %"class.std::__1::vector.267"* %5 to i64*
  %12 = bitcast %struct.TreeRange** %9 to i64*
  %13 = tail call i8* @_Znwm(i64 16) #12
  %14 = getelementptr inbounds i8, i8* %13, i64 16
  %15 = ptrtoint i8* %14 to i64
  %16 = bitcast i8* %13 to i32*
  store i32 -513, i32* %16, align 8
  %17 = getelementptr inbounds i8, i8* %13, i64 4
  %18 = bitcast i8* %17 to i32*
  store i32 511, i32* %18, align 4
  %19 = getelementptr inbounds i8, i8* %13, i64 8
  %20 = bitcast i8* %19 to i64*
  store i64 0, i64* %20, align 8
  %21 = ptrtoint i8* %13 to i64
  store i64 %21, i64* %11, align 8
  store i64 %15, i64* %10, align 8
  store i64 %15, i64* %12, align 8
  %22 = bitcast i8* %14 to %struct.TreeRange*
  %23 = bitcast i8* %13 to %struct.TreeRange*
  %24 = getelementptr inbounds %"class.std::__1::vector.202", %"class.std::__1::vector.202"* %0, i64 0, i32 0, i32 0
  %25 = bitcast %struct.TreeRange** %8 to i64*
  %26 = bitcast %"class.std::__1::vector.267"* %5 to i64*
  %27 = bitcast %struct.TreeRange** %9 to i64*
  %28 = icmp ne i8* %3, null
  %29 = icmp eq i8* %3, null
  br label %30

30:                                               ; preds = %4, %515
  %31 = phi %struct.TreeRange* [ %23, %4 ], [ %517, %515 ]
  %32 = phi i64 [ %21, %4 ], [ %519, %515 ]
  %33 = phi %struct.TreeRange* [ %22, %4 ], [ %516, %515 ]
  %34 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %33, i64 -1
  %35 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %34, i64 0, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %33, i64 -1, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %33, i64 -1, i32 2
  %40 = load i64, i64* %39, align 8
  store %struct.TreeRange* %34, %struct.TreeRange** %8, align 8
  %41 = add i32 %36, 513
  %42 = icmp ugt i32 %41, 1023
  %43 = icmp sgt i32 %38, 511
  %44 = or i1 %42, %43
  %45 = ptrtoint %struct.TreeRange* %34 to i64
  br i1 %44, label %520, label %46

46:                                               ; preds = %30
  %47 = load %"struct.jxl::FlatDecisionNode"*, %"struct.jxl::FlatDecisionNode"** %24, align 8
  %48 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %47, i64 %40, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %49, -1
  %51 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %47, i64 %40, i32 4
  br i1 %50, label %52, label %112

52:                                               ; preds = %46
  %53 = getelementptr inbounds %union.anon.206, %union.anon.206* %51, i64 0, i32 0
  %54 = load i64, i64* %53, align 8
  %55 = add i64 %54, 128
  %56 = icmp ugt i64 %55, 255
  br i1 %56, label %520, label %57

57:                                               ; preds = %52
  %58 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %47, i64 %40, i32 3, i32 0, i64 0
  %59 = load i32, i32* %58, align 4
  %60 = add i32 %59, 128
  %61 = icmp ult i32 %60, 256
  %62 = icmp eq i32 %59, 1
  %63 = or i1 %28, %62
  %64 = and i1 %61, %63
  br i1 %64, label %65, label %520

65:                                               ; preds = %57
  %66 = icmp slt i32 %36, %38
  br i1 %66, label %67, label %515

67:                                               ; preds = %65
  %68 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %47, i64 %40, i32 2
  %69 = sext i32 %36 to i64
  %70 = sext i32 %38 to i64
  %71 = sub nsw i64 %70, %69
  %72 = xor i64 %69, -1
  %73 = and i64 %71, 1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %89, label %75

75:                                               ; preds = %67
  %76 = add nsw i64 %69, 1
  %77 = load i32, i32* %68, align 8
  %78 = trunc i32 %77 to i16
  %79 = add nsw i64 %69, 513
  %80 = getelementptr inbounds i16, i16* %1, i64 %79
  store i16 %78, i16* %80, align 2
  br i1 %29, label %85, label %81

81:                                               ; preds = %75
  %82 = load i32, i32* %58, align 4
  %83 = trunc i32 %82 to i8
  %84 = getelementptr inbounds i8, i8* %3, i64 %79
  store i8 %83, i8* %84, align 1
  br label %85

85:                                               ; preds = %81, %75
  %86 = load i64, i64* %53, align 8
  %87 = trunc i64 %86 to i8
  %88 = getelementptr inbounds i8, i8* %2, i64 %79
  store i8 %87, i8* %88, align 1
  br label %89

89:                                               ; preds = %85, %67
  %90 = phi i64 [ %76, %85 ], [ %69, %67 ]
  %91 = sub nsw i64 0, %70
  %92 = icmp eq i64 %72, %91
  br i1 %92, label %515, label %93

93:                                               ; preds = %89, %533
  %94 = phi i64 [ %107, %533 ], [ %90, %89 ]
  %95 = load i32, i32* %68, align 8
  %96 = trunc i32 %95 to i16
  %97 = add nsw i64 %94, 513
  %98 = getelementptr inbounds i16, i16* %1, i64 %97
  store i16 %96, i16* %98, align 2
  br i1 %29, label %103, label %99

99:                                               ; preds = %93
  %100 = load i32, i32* %58, align 4
  %101 = trunc i32 %100 to i8
  %102 = getelementptr inbounds i8, i8* %3, i64 %97
  store i8 %101, i8* %102, align 1
  br label %103

103:                                              ; preds = %93, %99
  %104 = load i64, i64* %53, align 8
  %105 = trunc i64 %104 to i8
  %106 = getelementptr inbounds i8, i8* %2, i64 %97
  store i8 %105, i8* %106, align 1
  %107 = add nsw i64 %94, 2
  %108 = load i32, i32* %68, align 8
  %109 = trunc i32 %108 to i16
  %110 = add nsw i64 %94, 514
  %111 = getelementptr inbounds i16, i16* %1, i64 %110
  store i16 %109, i16* %111, align 2
  br i1 %29, label %533, label %529

112:                                              ; preds = %46
  %113 = bitcast %union.anon.206* %51 to [2 x i32]*
  %114 = bitcast %union.anon.206* %51 to i32*
  %115 = load i32, i32* %114, align 8
  %116 = icmp sgt i32 %115, 1
  br i1 %116, label %117, label %247

117:                                              ; preds = %112
  %118 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %47, i64 %40, i32 3, i32 0, i64 0
  %119 = load i32, i32* %118, align 4
  %120 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %47, i64 %40, i32 2
  %121 = load i32, i32* %120, align 8
  %122 = zext i32 %121 to i64
  %123 = load %struct.TreeRange*, %struct.TreeRange** %9, align 8
  %124 = icmp ult %struct.TreeRange* %34, %123
  %125 = ptrtoint %struct.TreeRange* %123 to i64
  br i1 %124, label %126, label %130

126:                                              ; preds = %117
  store i32 %119, i32* %35, align 8
  store i32 %38, i32* %37, align 4
  store i64 %122, i64* %39, align 8
  %127 = ptrtoint %struct.TreeRange* %33 to i64
  store i64 %127, i64* %25, align 8
  %128 = load %struct.TreeRange*, %struct.TreeRange** %9, align 8
  %129 = ptrtoint %struct.TreeRange* %128 to i64
  br label %179

130:                                              ; preds = %117
  %131 = sub i64 %45, %32
  %132 = ashr exact i64 %131, 4
  %133 = add nsw i64 %132, 1
  %134 = icmp ugt i64 %133, 1152921504606846975
  br i1 %134, label %135, label %137

135:                                              ; preds = %130
  %136 = bitcast %"class.std::__1::vector.267"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %136) #11
  unreachable

137:                                              ; preds = %130
  %138 = sub i64 %125, %32
  %139 = ashr exact i64 %138, 4
  %140 = icmp ult i64 %139, 576460752303423487
  br i1 %140, label %141, label %149

141:                                              ; preds = %137
  %142 = ashr exact i64 %138, 3
  %143 = icmp ult i64 %142, %133
  %144 = select i1 %143, i64 %133, i64 %142
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %154, label %146

146:                                              ; preds = %141
  %147 = icmp ugt i64 %144, 1152921504606846975
  br i1 %147, label %148, label %149

148:                                              ; preds = %146
  tail call void @abort() #11
  unreachable

149:                                              ; preds = %146, %137
  %150 = phi i64 [ %144, %146 ], [ 1152921504606846975, %137 ]
  %151 = shl i64 %150, 4
  %152 = tail call i8* @_Znwm(i64 %151) #12
  %153 = bitcast i8* %152 to %struct.TreeRange*
  br label %154

154:                                              ; preds = %149, %141
  %155 = phi i64 [ %150, %149 ], [ 0, %141 ]
  %156 = phi %struct.TreeRange* [ %153, %149 ], [ null, %141 ]
  %157 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %156, i64 %132
  %158 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %156, i64 %155
  %159 = ptrtoint %struct.TreeRange* %158 to i64
  %160 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %157, i64 0, i32 0
  store i32 %119, i32* %160, align 8
  %161 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %156, i64 %132, i32 1
  store i32 %38, i32* %161, align 4
  %162 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %156, i64 %132, i32 2
  store i64 %122, i64* %162, align 8
  %163 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %157, i64 1
  %164 = ptrtoint %struct.TreeRange* %163 to i64
  %165 = ptrtoint %struct.TreeRange* %31 to i64
  %166 = sub i64 %45, %165
  %167 = ashr exact i64 %166, 4
  %168 = sub nsw i64 0, %167
  %169 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %157, i64 %168
  %170 = ptrtoint %struct.TreeRange* %169 to i64
  %171 = icmp sgt i64 %166, 0
  br i1 %171, label %172, label %175

172:                                              ; preds = %154
  %173 = bitcast %struct.TreeRange* %169 to i8*
  %174 = bitcast %struct.TreeRange* %31 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %173, i8* align 8 %174, i64 %166, i1 false) #9
  br label %175

175:                                              ; preds = %172, %154
  store i64 %170, i64* %26, align 8
  store i64 %164, i64* %25, align 8
  store i64 %159, i64* %27, align 8
  %176 = icmp eq %struct.TreeRange* %31, null
  br i1 %176, label %179, label %177

177:                                              ; preds = %175
  %178 = bitcast %struct.TreeRange* %31 to i8*
  tail call void @_ZdlPv(i8* %178) #12
  br label %179

179:                                              ; preds = %126, %175, %177
  %180 = phi i64 [ %129, %126 ], [ %159, %175 ], [ %159, %177 ]
  %181 = phi i64 [ %127, %126 ], [ %164, %175 ], [ %164, %177 ]
  %182 = phi %struct.TreeRange* [ %128, %126 ], [ %158, %175 ], [ %158, %177 ]
  %183 = phi %struct.TreeRange* [ %33, %126 ], [ %163, %175 ], [ %163, %177 ]
  %184 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %47, i64 %40, i32 1, i32 0
  %185 = load i32, i32* %184, align 4
  %186 = load i32, i32* %118, align 4
  %187 = load i32, i32* %120, align 8
  %188 = add i32 %187, 1
  %189 = zext i32 %188 to i64
  %190 = icmp ult %struct.TreeRange* %183, %182
  br i1 %190, label %191, label %197

191:                                              ; preds = %179
  %192 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %183, i64 0, i32 0
  store i32 %185, i32* %192, align 8
  %193 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %183, i64 0, i32 1
  store i32 %186, i32* %193, align 4
  %194 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %183, i64 0, i32 2
  store i64 %189, i64* %194, align 8
  %195 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %183, i64 1
  %196 = ptrtoint %struct.TreeRange* %195 to i64
  store i64 %196, i64* %25, align 8
  br label %307

197:                                              ; preds = %179
  %198 = ptrtoint %struct.TreeRange* %183 to i64
  %199 = load i64, i64* %26, align 8
  %200 = sub i64 %198, %199
  %201 = ashr exact i64 %200, 4
  %202 = add nsw i64 %201, 1
  %203 = icmp ugt i64 %202, 1152921504606846975
  br i1 %203, label %204, label %206

204:                                              ; preds = %197
  %205 = bitcast %"class.std::__1::vector.267"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %205) #11
  unreachable

206:                                              ; preds = %197
  %207 = sub i64 %180, %199
  %208 = ashr exact i64 %207, 4
  %209 = icmp ult i64 %208, 576460752303423487
  br i1 %209, label %210, label %218

210:                                              ; preds = %206
  %211 = ashr exact i64 %207, 3
  %212 = icmp ult i64 %211, %202
  %213 = select i1 %212, i64 %202, i64 %211
  %214 = icmp eq i64 %213, 0
  br i1 %214, label %223, label %215

215:                                              ; preds = %210
  %216 = icmp ugt i64 %213, 1152921504606846975
  br i1 %216, label %217, label %218

217:                                              ; preds = %215
  tail call void @abort() #11
  unreachable

218:                                              ; preds = %215, %206
  %219 = phi i64 [ %213, %215 ], [ 1152921504606846975, %206 ]
  %220 = shl i64 %219, 4
  %221 = tail call i8* @_Znwm(i64 %220) #12
  %222 = bitcast i8* %221 to %struct.TreeRange*
  br label %223

223:                                              ; preds = %218, %210
  %224 = phi i64 [ %219, %218 ], [ 0, %210 ]
  %225 = phi %struct.TreeRange* [ %222, %218 ], [ null, %210 ]
  %226 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %225, i64 %201
  %227 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %225, i64 %224
  %228 = ptrtoint %struct.TreeRange* %227 to i64
  %229 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %226, i64 0, i32 0
  store i32 %185, i32* %229, align 8
  %230 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %225, i64 %201, i32 1
  store i32 %186, i32* %230, align 4
  %231 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %225, i64 %201, i32 2
  store i64 %189, i64* %231, align 8
  %232 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %226, i64 1
  %233 = ptrtoint %struct.TreeRange* %232 to i64
  %234 = sub i64 %181, %199
  %235 = ashr exact i64 %234, 4
  %236 = sub nsw i64 0, %235
  %237 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %226, i64 %236
  %238 = ptrtoint %struct.TreeRange* %237 to i64
  %239 = icmp sgt i64 %234, 0
  br i1 %239, label %240, label %243

240:                                              ; preds = %223
  %241 = bitcast %struct.TreeRange* %237 to i8*
  %242 = inttoptr i64 %199 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %241, i8* align 8 %242, i64 %234, i1 false) #9
  br label %243

243:                                              ; preds = %240, %223
  store i64 %238, i64* %26, align 8
  store i64 %233, i64* %25, align 8
  store i64 %228, i64* %27, align 8
  %244 = icmp eq i64 %199, 0
  br i1 %244, label %307, label %245

245:                                              ; preds = %243
  %246 = inttoptr i64 %199 to i8*
  tail call void @_ZdlPv(i8* %246) #12
  br label %307

247:                                              ; preds = %112
  %248 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %47, i64 %40, i32 1, i32 0
  %249 = load i32, i32* %248, align 4
  %250 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %47, i64 %40, i32 2
  %251 = load i32, i32* %250, align 8
  %252 = zext i32 %251 to i64
  %253 = load %struct.TreeRange*, %struct.TreeRange** %9, align 8
  %254 = icmp ult %struct.TreeRange* %34, %253
  %255 = ptrtoint %struct.TreeRange* %253 to i64
  br i1 %254, label %256, label %258

256:                                              ; preds = %247
  store i32 %249, i32* %35, align 8
  store i32 %38, i32* %37, align 4
  store i64 %252, i64* %39, align 8
  %257 = ptrtoint %struct.TreeRange* %33 to i64
  store i64 %257, i64* %25, align 8
  br label %307

258:                                              ; preds = %247
  %259 = sub i64 %45, %32
  %260 = ashr exact i64 %259, 4
  %261 = add nsw i64 %260, 1
  %262 = icmp ugt i64 %261, 1152921504606846975
  br i1 %262, label %263, label %265

263:                                              ; preds = %258
  %264 = bitcast %"class.std::__1::vector.267"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %264) #11
  unreachable

265:                                              ; preds = %258
  %266 = sub i64 %255, %32
  %267 = ashr exact i64 %266, 4
  %268 = icmp ult i64 %267, 576460752303423487
  br i1 %268, label %269, label %277

269:                                              ; preds = %265
  %270 = ashr exact i64 %266, 3
  %271 = icmp ult i64 %270, %261
  %272 = select i1 %271, i64 %261, i64 %270
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %282, label %274

274:                                              ; preds = %269
  %275 = icmp ugt i64 %272, 1152921504606846975
  br i1 %275, label %276, label %277

276:                                              ; preds = %274
  tail call void @abort() #11
  unreachable

277:                                              ; preds = %274, %265
  %278 = phi i64 [ %272, %274 ], [ 1152921504606846975, %265 ]
  %279 = shl i64 %278, 4
  %280 = tail call i8* @_Znwm(i64 %279) #12
  %281 = bitcast i8* %280 to %struct.TreeRange*
  br label %282

282:                                              ; preds = %277, %269
  %283 = phi i64 [ %278, %277 ], [ 0, %269 ]
  %284 = phi %struct.TreeRange* [ %281, %277 ], [ null, %269 ]
  %285 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %284, i64 %260
  %286 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %284, i64 %283
  %287 = ptrtoint %struct.TreeRange* %286 to i64
  %288 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %285, i64 0, i32 0
  store i32 %249, i32* %288, align 8
  %289 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %284, i64 %260, i32 1
  store i32 %38, i32* %289, align 4
  %290 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %284, i64 %260, i32 2
  store i64 %252, i64* %290, align 8
  %291 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %285, i64 1
  %292 = ptrtoint %struct.TreeRange* %291 to i64
  %293 = ptrtoint %struct.TreeRange* %31 to i64
  %294 = sub i64 %45, %293
  %295 = ashr exact i64 %294, 4
  %296 = sub nsw i64 0, %295
  %297 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %285, i64 %296
  %298 = ptrtoint %struct.TreeRange* %297 to i64
  %299 = icmp sgt i64 %294, 0
  br i1 %299, label %300, label %303

300:                                              ; preds = %282
  %301 = bitcast %struct.TreeRange* %297 to i8*
  %302 = bitcast %struct.TreeRange* %31 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %301, i8* align 8 %302, i64 %294, i1 false) #9
  br label %303

303:                                              ; preds = %300, %282
  store i64 %298, i64* %26, align 8
  store i64 %292, i64* %25, align 8
  store i64 %287, i64* %27, align 8
  %304 = icmp eq %struct.TreeRange* %31, null
  br i1 %304, label %307, label %305

305:                                              ; preds = %303
  %306 = bitcast %struct.TreeRange* %31 to i8*
  tail call void @_ZdlPv(i8* %306) #12
  br label %307

307:                                              ; preds = %305, %303, %256, %245, %243, %191
  %308 = phi %struct.TreeRange* [ %291, %305 ], [ %291, %303 ], [ %33, %256 ], [ %232, %245 ], [ %232, %243 ], [ %195, %191 ]
  %309 = phi i64 [ %292, %305 ], [ %292, %303 ], [ %257, %256 ], [ %233, %245 ], [ %233, %243 ], [ %196, %191 ]
  %310 = getelementptr inbounds [2 x i32], [2 x i32]* %113, i64 0, i64 1
  %311 = load i32, i32* %310, align 4
  %312 = icmp sgt i32 %311, 1
  br i1 %312, label %313, label %449

313:                                              ; preds = %307
  %314 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %47, i64 %40, i32 3, i32 0, i64 1
  %315 = load i32, i32* %314, align 4
  %316 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %47, i64 %40, i32 1, i32 0
  %317 = load i32, i32* %316, align 4
  %318 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %47, i64 %40, i32 2
  %319 = load i32, i32* %318, align 8
  %320 = add i32 %319, 2
  %321 = zext i32 %320 to i64
  %322 = load %struct.TreeRange*, %struct.TreeRange** %9, align 8
  %323 = icmp ult %struct.TreeRange* %308, %322
  %324 = ptrtoint %struct.TreeRange* %322 to i64
  br i1 %323, label %325, label %333

325:                                              ; preds = %313
  %326 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %308, i64 0, i32 0
  store i32 %315, i32* %326, align 8
  %327 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %308, i64 0, i32 1
  store i32 %317, i32* %327, align 4
  %328 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %308, i64 0, i32 2
  store i64 %321, i64* %328, align 8
  %329 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %308, i64 1
  %330 = ptrtoint %struct.TreeRange* %329 to i64
  store i64 %330, i64* %25, align 8
  %331 = load %struct.TreeRange*, %struct.TreeRange** %9, align 8
  %332 = ptrtoint %struct.TreeRange* %331 to i64
  br label %383

333:                                              ; preds = %313
  %334 = ptrtoint %struct.TreeRange* %308 to i64
  %335 = load i64, i64* %26, align 8
  %336 = sub i64 %334, %335
  %337 = ashr exact i64 %336, 4
  %338 = add nsw i64 %337, 1
  %339 = icmp ugt i64 %338, 1152921504606846975
  br i1 %339, label %340, label %342

340:                                              ; preds = %333
  %341 = bitcast %"class.std::__1::vector.267"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %341) #11
  unreachable

342:                                              ; preds = %333
  %343 = sub i64 %324, %335
  %344 = ashr exact i64 %343, 4
  %345 = icmp ult i64 %344, 576460752303423487
  br i1 %345, label %346, label %354

346:                                              ; preds = %342
  %347 = ashr exact i64 %343, 3
  %348 = icmp ult i64 %347, %338
  %349 = select i1 %348, i64 %338, i64 %347
  %350 = icmp eq i64 %349, 0
  br i1 %350, label %359, label %351

351:                                              ; preds = %346
  %352 = icmp ugt i64 %349, 1152921504606846975
  br i1 %352, label %353, label %354

353:                                              ; preds = %351
  tail call void @abort() #11
  unreachable

354:                                              ; preds = %351, %342
  %355 = phi i64 [ %349, %351 ], [ 1152921504606846975, %342 ]
  %356 = shl i64 %355, 4
  %357 = tail call i8* @_Znwm(i64 %356) #12
  %358 = bitcast i8* %357 to %struct.TreeRange*
  br label %359

359:                                              ; preds = %354, %346
  %360 = phi i64 [ %355, %354 ], [ 0, %346 ]
  %361 = phi %struct.TreeRange* [ %358, %354 ], [ null, %346 ]
  %362 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %361, i64 %337
  %363 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %361, i64 %360
  %364 = ptrtoint %struct.TreeRange* %363 to i64
  %365 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %362, i64 0, i32 0
  store i32 %315, i32* %365, align 8
  %366 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %361, i64 %337, i32 1
  store i32 %317, i32* %366, align 4
  %367 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %361, i64 %337, i32 2
  store i64 %321, i64* %367, align 8
  %368 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %362, i64 1
  %369 = ptrtoint %struct.TreeRange* %368 to i64
  %370 = sub i64 %309, %335
  %371 = ashr exact i64 %370, 4
  %372 = sub nsw i64 0, %371
  %373 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %362, i64 %372
  %374 = ptrtoint %struct.TreeRange* %373 to i64
  %375 = icmp sgt i64 %370, 0
  br i1 %375, label %376, label %379

376:                                              ; preds = %359
  %377 = bitcast %struct.TreeRange* %373 to i8*
  %378 = inttoptr i64 %335 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %377, i8* align 8 %378, i64 %370, i1 false) #9
  br label %379

379:                                              ; preds = %376, %359
  store i64 %374, i64* %26, align 8
  store i64 %369, i64* %25, align 8
  store i64 %364, i64* %27, align 8
  %380 = icmp eq i64 %335, 0
  br i1 %380, label %383, label %381

381:                                              ; preds = %379
  %382 = inttoptr i64 %335 to i8*
  tail call void @_ZdlPv(i8* %382) #12
  br label %383

383:                                              ; preds = %325, %379, %381
  %384 = phi i64 [ %332, %325 ], [ %364, %379 ], [ %364, %381 ]
  %385 = phi i64 [ %330, %325 ], [ %369, %379 ], [ %369, %381 ]
  %386 = phi %struct.TreeRange* [ %331, %325 ], [ %363, %379 ], [ %363, %381 ]
  %387 = phi %struct.TreeRange* [ %329, %325 ], [ %368, %379 ], [ %368, %381 ]
  %388 = load i32, i32* %314, align 4
  %389 = load i32, i32* %318, align 8
  %390 = add i32 %389, 3
  %391 = zext i32 %390 to i64
  %392 = icmp ult %struct.TreeRange* %387, %386
  br i1 %392, label %393, label %399

393:                                              ; preds = %383
  %394 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %387, i64 0, i32 0
  store i32 %36, i32* %394, align 8
  %395 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %387, i64 0, i32 1
  store i32 %388, i32* %395, align 4
  %396 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %387, i64 0, i32 2
  store i64 %391, i64* %396, align 8
  %397 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %387, i64 1
  %398 = ptrtoint %struct.TreeRange* %397 to i64
  store i64 %398, i64* %25, align 8
  br label %515

399:                                              ; preds = %383
  %400 = ptrtoint %struct.TreeRange* %387 to i64
  %401 = load i64, i64* %26, align 8
  %402 = sub i64 %400, %401
  %403 = ashr exact i64 %402, 4
  %404 = add nsw i64 %403, 1
  %405 = icmp ugt i64 %404, 1152921504606846975
  br i1 %405, label %406, label %408

406:                                              ; preds = %399
  %407 = bitcast %"class.std::__1::vector.267"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %407) #11
  unreachable

408:                                              ; preds = %399
  %409 = sub i64 %384, %401
  %410 = ashr exact i64 %409, 4
  %411 = icmp ult i64 %410, 576460752303423487
  br i1 %411, label %412, label %420

412:                                              ; preds = %408
  %413 = ashr exact i64 %409, 3
  %414 = icmp ult i64 %413, %404
  %415 = select i1 %414, i64 %404, i64 %413
  %416 = icmp eq i64 %415, 0
  br i1 %416, label %425, label %417

417:                                              ; preds = %412
  %418 = icmp ugt i64 %415, 1152921504606846975
  br i1 %418, label %419, label %420

419:                                              ; preds = %417
  tail call void @abort() #11
  unreachable

420:                                              ; preds = %417, %408
  %421 = phi i64 [ %415, %417 ], [ 1152921504606846975, %408 ]
  %422 = shl i64 %421, 4
  %423 = tail call i8* @_Znwm(i64 %422) #12
  %424 = bitcast i8* %423 to %struct.TreeRange*
  br label %425

425:                                              ; preds = %420, %412
  %426 = phi i64 [ %421, %420 ], [ 0, %412 ]
  %427 = phi %struct.TreeRange* [ %424, %420 ], [ null, %412 ]
  %428 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %427, i64 %403
  %429 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %427, i64 %426
  %430 = ptrtoint %struct.TreeRange* %429 to i64
  %431 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %428, i64 0, i32 0
  store i32 %36, i32* %431, align 8
  %432 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %427, i64 %403, i32 1
  store i32 %388, i32* %432, align 4
  %433 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %427, i64 %403, i32 2
  store i64 %391, i64* %433, align 8
  %434 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %428, i64 1
  %435 = ptrtoint %struct.TreeRange* %434 to i64
  %436 = sub i64 %385, %401
  %437 = ashr exact i64 %436, 4
  %438 = sub nsw i64 0, %437
  %439 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %428, i64 %438
  %440 = ptrtoint %struct.TreeRange* %439 to i64
  %441 = icmp sgt i64 %436, 0
  br i1 %441, label %442, label %445

442:                                              ; preds = %425
  %443 = bitcast %struct.TreeRange* %439 to i8*
  %444 = inttoptr i64 %401 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %443, i8* align 8 %444, i64 %436, i1 false) #9
  br label %445

445:                                              ; preds = %442, %425
  store i64 %440, i64* %26, align 8
  store i64 %435, i64* %25, align 8
  store i64 %430, i64* %27, align 8
  %446 = icmp eq i64 %401, 0
  br i1 %446, label %515, label %447

447:                                              ; preds = %445
  %448 = inttoptr i64 %401 to i8*
  tail call void @_ZdlPv(i8* %448) #12
  br label %515

449:                                              ; preds = %307
  %450 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %47, i64 %40, i32 1, i32 0
  %451 = load i32, i32* %450, align 4
  %452 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %47, i64 %40, i32 2
  %453 = load i32, i32* %452, align 8
  %454 = add i32 %453, 2
  %455 = zext i32 %454 to i64
  %456 = load %struct.TreeRange*, %struct.TreeRange** %9, align 8
  %457 = icmp ult %struct.TreeRange* %308, %456
  %458 = ptrtoint %struct.TreeRange* %456 to i64
  br i1 %457, label %459, label %465

459:                                              ; preds = %449
  %460 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %308, i64 0, i32 0
  store i32 %36, i32* %460, align 8
  %461 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %308, i64 0, i32 1
  store i32 %451, i32* %461, align 4
  %462 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %308, i64 0, i32 2
  store i64 %455, i64* %462, align 8
  %463 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %308, i64 1
  %464 = ptrtoint %struct.TreeRange* %463 to i64
  store i64 %464, i64* %25, align 8
  br label %515

465:                                              ; preds = %449
  %466 = ptrtoint %struct.TreeRange* %308 to i64
  %467 = load i64, i64* %26, align 8
  %468 = sub i64 %466, %467
  %469 = ashr exact i64 %468, 4
  %470 = add nsw i64 %469, 1
  %471 = icmp ugt i64 %470, 1152921504606846975
  br i1 %471, label %472, label %474

472:                                              ; preds = %465
  %473 = bitcast %"class.std::__1::vector.267"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %473) #11
  unreachable

474:                                              ; preds = %465
  %475 = sub i64 %458, %467
  %476 = ashr exact i64 %475, 4
  %477 = icmp ult i64 %476, 576460752303423487
  br i1 %477, label %478, label %486

478:                                              ; preds = %474
  %479 = ashr exact i64 %475, 3
  %480 = icmp ult i64 %479, %470
  %481 = select i1 %480, i64 %470, i64 %479
  %482 = icmp eq i64 %481, 0
  br i1 %482, label %491, label %483

483:                                              ; preds = %478
  %484 = icmp ugt i64 %481, 1152921504606846975
  br i1 %484, label %485, label %486

485:                                              ; preds = %483
  tail call void @abort() #11
  unreachable

486:                                              ; preds = %483, %474
  %487 = phi i64 [ %481, %483 ], [ 1152921504606846975, %474 ]
  %488 = shl i64 %487, 4
  %489 = tail call i8* @_Znwm(i64 %488) #12
  %490 = bitcast i8* %489 to %struct.TreeRange*
  br label %491

491:                                              ; preds = %486, %478
  %492 = phi i64 [ %487, %486 ], [ 0, %478 ]
  %493 = phi %struct.TreeRange* [ %490, %486 ], [ null, %478 ]
  %494 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %493, i64 %469
  %495 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %493, i64 %492
  %496 = ptrtoint %struct.TreeRange* %495 to i64
  %497 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %494, i64 0, i32 0
  store i32 %36, i32* %497, align 8
  %498 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %493, i64 %469, i32 1
  store i32 %451, i32* %498, align 4
  %499 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %493, i64 %469, i32 2
  store i64 %455, i64* %499, align 8
  %500 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %494, i64 1
  %501 = ptrtoint %struct.TreeRange* %500 to i64
  %502 = sub i64 %309, %467
  %503 = ashr exact i64 %502, 4
  %504 = sub nsw i64 0, %503
  %505 = getelementptr inbounds %struct.TreeRange, %struct.TreeRange* %494, i64 %504
  %506 = ptrtoint %struct.TreeRange* %505 to i64
  %507 = icmp sgt i64 %502, 0
  br i1 %507, label %508, label %511

508:                                              ; preds = %491
  %509 = bitcast %struct.TreeRange* %505 to i8*
  %510 = inttoptr i64 %467 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %509, i8* align 8 %510, i64 %502, i1 false) #9
  br label %511

511:                                              ; preds = %508, %491
  store i64 %506, i64* %26, align 8
  store i64 %501, i64* %25, align 8
  store i64 %496, i64* %27, align 8
  %512 = icmp eq i64 %467, 0
  br i1 %512, label %515, label %513

513:                                              ; preds = %511
  %514 = inttoptr i64 %467 to i8*
  tail call void @_ZdlPv(i8* %514) #12
  br label %515

515:                                              ; preds = %89, %533, %65, %513, %511, %459, %447, %445, %393
  %516 = phi %struct.TreeRange* [ %34, %65 ], [ %500, %513 ], [ %500, %511 ], [ %463, %459 ], [ %434, %447 ], [ %434, %445 ], [ %397, %393 ], [ %34, %533 ], [ %34, %89 ]
  %517 = load %struct.TreeRange*, %struct.TreeRange** %7, align 8
  %518 = icmp eq %struct.TreeRange* %517, %516
  %519 = ptrtoint %struct.TreeRange* %517 to i64
  br i1 %518, label %520, label %30

520:                                              ; preds = %515, %52, %30, %57
  %521 = phi %struct.TreeRange* [ %516, %515 ], [ %31, %52 ], [ %31, %30 ], [ %31, %57 ]
  %522 = phi i1 [ true, %515 ], [ false, %52 ], [ false, %30 ], [ false, %57 ]
  %523 = icmp eq %struct.TreeRange* %521, null
  br i1 %523, label %528, label %524

524:                                              ; preds = %520
  %525 = ptrtoint %struct.TreeRange* %521 to i64
  %526 = bitcast %struct.TreeRange** %8 to i64*
  store i64 %525, i64* %526, align 8
  %527 = bitcast %struct.TreeRange* %521 to i8*
  tail call void @_ZdlPv(i8* %527) #12
  br label %528

528:                                              ; preds = %520, %524
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #9
  ret i1 %522

529:                                              ; preds = %103
  %530 = load i32, i32* %58, align 4
  %531 = trunc i32 %530 to i8
  %532 = getelementptr inbounds i8, i8* %3, i64 %110
  store i8 %531, i8* %532, align 1
  br label %533

533:                                              ; preds = %529, %103
  %534 = load i64, i64* %53, align 8
  %535 = trunc i64 %534 to i8
  %536 = getelementptr inbounds i8, i8* %2, i64 %110
  store i8 %535, i8* %536, align 1
  %537 = icmp eq i64 %107, %70
  br i1 %537, label %515, label %93
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl13ModularEncodeERKNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSD_9allocatorISF_EEEEPNS_11GroupHeaderEPNSE_INS_5TokenENSG_ISN_EEEESC_(%"class.jxl::Image"* dereferenceable(104), %"struct.jxl::ModularOptions"* dereferenceable(88), %"struct.jxl::BitWriter"*, %"struct.jxl::AuxOut"*, i64, i64, %"struct.jxl::TreeSamples"*, i64*, %"class.std::__1::vector.89"*, %"struct.jxl::GroupHeader"*, %"class.std::__1::vector.101"*, i64* nocapture) local_unnamed_addr #0 {
  %13 = alloca %"struct.jxl::GroupHeader", align 8
  %14 = alloca %"struct.jxl::TreeSamples", align 8
  %15 = alloca i64, align 8
  %16 = alloca %"class.std::__1::vector.61", align 8
  %17 = alloca %"class.std::__1::vector.61", align 8
  %18 = alloca %"class.std::__1::vector.18", align 8
  %19 = alloca %"class.std::__1::vector.18", align 8
  %20 = alloca %"class.std::__1::vector.80", align 8
  %21 = alloca %"struct.std::__1::array.82", align 4
  %22 = alloca %"class.std::__1::vector.89", align 8
  %23 = alloca %"class.std::__1::vector.213", align 8
  %24 = alloca %"struct.jxl::EntropyEncodingData", align 8
  %25 = alloca %"class.std::__1::vector.48", align 8
  %26 = alloca %"class.std::__1::vector.213", align 8
  %27 = alloca %"class.std::__1::vector.89", align 8
  %28 = alloca %"class.std::__1::vector.80", align 8
  %29 = alloca %"struct.std::__1::array.82", align 8
  %30 = bitcast %"struct.std::__1::array.82"* %29 to i8*
  %31 = alloca %"class.std::__1::vector.89", align 8
  %32 = alloca %"struct.jxl::HistogramParams", align 16
  %33 = alloca %"struct.jxl::Token", align 4
  %34 = alloca %"struct.jxl::EntropyEncodingData", align 8
  %35 = alloca %"class.std::__1::vector.48", align 8
  %36 = alloca %"struct.jxl::HistogramParams", align 16
  %37 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 9
  %38 = load i8, i8* %37, align 8, !range !5
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %40, label %691

40:                                               ; preds = %12
  %41 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 0, i32 0, i32 1
  %42 = bitcast %"class.jxl::Channel"** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = bitcast %"class.jxl::Image"* %0 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = sub i64 %43, %45
  %47 = ashr exact i64 %46, 6
  %48 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 5
  %49 = load i32, i32* %48, align 4
  %50 = icmp sgt i32 %49, 1
  br i1 %50, label %51, label %56

51:                                               ; preds = %40, %51
  %52 = phi i32 [ %54, %51 ], [ 1, %40 ]
  %53 = shl nsw i32 %52, 1
  %54 = or i32 %53, 1
  %55 = icmp slt i32 %54, %49
  br i1 %55, label %51, label %56

56:                                               ; preds = %51, %40
  %57 = icmp eq i64 %46, 0
  br i1 %57, label %691, label %58

58:                                               ; preds = %56
  %59 = bitcast %"struct.jxl::GroupHeader"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %59) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %59, i8 -86, i64 96, i1 false)
  call void @_ZN3jxl11GroupHeaderC1Ev(%"struct.jxl::GroupHeader"* nonnull %13) #9
  %60 = icmp eq %"struct.jxl::GroupHeader"* %9, null
  %61 = select i1 %60, %"struct.jxl::GroupHeader"* %13, %"struct.jxl::GroupHeader"* %9
  %62 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %61, i64 0, i32 0
  call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %62) #9
  %63 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1, i64 0, i32 7
  %64 = load i32, i32* %63, align 8
  %65 = icmp eq i32 %64, 6
  br i1 %65, label %66, label %123

66:                                               ; preds = %58
  %67 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1, i64 0, i32 8
  %68 = load i32, i32* %67, align 4
  %69 = icmp ult i32 %68, 4
  br i1 %69, label %70, label %101

70:                                               ; preds = %66
  %71 = sext i32 %68 to i64
  %72 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZN3jxl13ModularEncodeERKNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSD_9allocatorISF_EEEEPNS_11GroupHeaderEPNSE_INS_5TokenENSG_ISN_EEEESC_, i64 0, i64 %71
  %73 = load i32, i32* %72, align 4
  %74 = sext i32 %68 to i64
  %75 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZN3jxl13ModularEncodeERKNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSD_9allocatorISF_EEEEPNS_11GroupHeaderEPNSE_INS_5TokenENSG_ISN_EEEESC_.25, i64 0, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = sext i32 %68 to i64
  %78 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZN3jxl13ModularEncodeERKNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSD_9allocatorISF_EEEEPNS_11GroupHeaderEPNSE_INS_5TokenENSG_ISN_EEEESC_.26, i64 0, i64 %77
  %79 = load i32, i32* %78, align 4
  %80 = sext i32 %68 to i64
  %81 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZN3jxl13ModularEncodeERKNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSD_9allocatorISF_EEEEPNS_11GroupHeaderEPNSE_INS_5TokenENSG_ISN_EEEESC_.27, i64 0, i64 %80
  %82 = load i32, i32* %81, align 4
  %83 = sext i32 %68 to i64
  %84 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZN3jxl13ModularEncodeERKNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSD_9allocatorISF_EEEEPNS_11GroupHeaderEPNSE_INS_5TokenENSG_ISN_EEEESC_.28, i64 0, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = sext i32 %68 to i64
  %87 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZN3jxl13ModularEncodeERKNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSD_9allocatorISF_EEEEPNS_11GroupHeaderEPNSE_INS_5TokenENSG_ISN_EEEESC_.29, i64 0, i64 %86
  %88 = load i32, i32* %87, align 4
  %89 = sext i32 %68 to i64
  %90 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZN3jxl13ModularEncodeERKNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSD_9allocatorISF_EEEEPNS_11GroupHeaderEPNSE_INS_5TokenENSG_ISN_EEEESC_.30, i64 0, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = sext i32 %68 to i64
  %93 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZN3jxl13ModularEncodeERKNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSD_9allocatorISF_EEEEPNS_11GroupHeaderEPNSE_INS_5TokenENSG_ISN_EEEESC_.31, i64 0, i64 %92
  %94 = load i32, i32* %93, align 4
  %95 = sext i32 %68 to i64
  %96 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZN3jxl13ModularEncodeERKNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSD_9allocatorISF_EEEEPNS_11GroupHeaderEPNSE_INS_5TokenENSG_ISN_EEEESC_.32, i64 0, i64 %95
  %97 = load i32, i32* %96, align 4
  %98 = sext i32 %68 to i64
  %99 = getelementptr inbounds [4 x i32], [4 x i32]* @switch.table._ZN3jxl13ModularEncodeERKNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSD_9allocatorISF_EEEEPNS_11GroupHeaderEPNSE_INS_5TokenENSG_ISN_EEEESC_.33, i64 0, i64 %98
  %100 = load i32, i32* %99, align 4
  br label %101

101:                                              ; preds = %66, %70
  %102 = phi i32 [ %73, %70 ], [ 12, %66 ]
  %103 = phi i32 [ %76, %70 ], [ 12, %66 ]
  %104 = phi i32 [ %79, %70 ], [ 12, %66 ]
  %105 = phi i32 [ %82, %70 ], [ 10, %66 ]
  %106 = phi i32 [ %85, %70 ], [ 10, %66 ]
  %107 = phi i32 [ %88, %70 ], [ 5, %66 ]
  %108 = phi i32 [ %91, %70 ], [ 5, %66 ]
  %109 = phi i32 [ %94, %70 ], [ 5, %66 ]
  %110 = phi i32 [ %97, %70 ], [ 12, %66 ]
  %111 = phi i32 [ %100, %70 ], [ 4, %66 ]
  %112 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %61, i64 0, i32 2, i32 9, i64 0
  store i32 13, i32* %112, align 8
  %113 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %61, i64 0, i32 2, i32 9, i64 1
  store i32 %102, i32* %113, align 4
  %114 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %61, i64 0, i32 2, i32 9, i64 2
  store i32 %103, i32* %114, align 8
  %115 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %61, i64 0, i32 2, i32 9, i64 3
  store i32 %104, i32* %115, align 4
  %116 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %61, i64 0, i32 2, i32 2
  store i32 %105, i32* %116, align 4
  %117 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %61, i64 0, i32 2, i32 3
  store i32 %106, i32* %117, align 8
  %118 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %61, i64 0, i32 2, i32 4
  store i32 %107, i32* %118, align 4
  %119 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %61, i64 0, i32 2, i32 5
  store i32 %108, i32* %119, align 8
  %120 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %61, i64 0, i32 2, i32 6
  store i32 %109, i32* %120, align 4
  %121 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %61, i64 0, i32 2, i32 7
  store i32 %110, i32* %121, align 8
  %122 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %61, i64 0, i32 2, i32 8
  store i32 %111, i32* %122, align 4
  br label %123

123:                                              ; preds = %101, %58
  %124 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 1
  %125 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %61, i64 0, i32 3
  %126 = icmp eq %"class.std::__1::vector.4"* %125, %124
  br i1 %126, label %132, label %127

127:                                              ; preds = %123
  %128 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %124, i64 0, i32 0, i32 0
  %129 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %128, align 8
  %130 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 1, i32 0, i32 1
  %131 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %130, align 8
  call void @_ZNSt3__16vectorIN3jxl9TransformENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.4"* %125, %"class.jxl::Transform"* %129, %"class.jxl::Transform"* %131) #9
  br label %132

132:                                              ; preds = %123, %127
  %133 = icmp eq %"class.std::__1::vector.89"* %8, null
  br i1 %133, label %137, label %134

134:                                              ; preds = %132
  %135 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %61, i64 0, i32 1
  store i8 1, i8* %135, align 8
  %136 = icmp eq %"struct.jxl::TreeSamples"* %6, null
  br label %142

137:                                              ; preds = %132
  %138 = icmp eq %"struct.jxl::TreeSamples"* %6, null
  br i1 %138, label %139, label %142

139:                                              ; preds = %137
  %140 = call i32 @_ZN3jxl6Bundle5WriteERKNS_6FieldsEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::Fields"* dereferenceable(8) %62, %"struct.jxl::BitWriter"* %2, i64 %4, %"struct.jxl::AuxOut"* %3) #9
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %666

142:                                              ; preds = %134, %139, %137
  %143 = phi i1 [ %136, %134 ], [ true, %139 ], [ false, %137 ]
  %144 = bitcast %"struct.jxl::TreeSamples"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %144) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %144, i8 0, i64 200, i1 false) #9
  %145 = bitcast i64* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %145) #9
  store i64 0, i64* %15, align 8
  %146 = icmp eq i64* %7, null
  %147 = select i1 %146, i64* %15, i64* %7
  br i1 %133, label %148, label %246

148:                                              ; preds = %142
  %149 = icmp ne %"struct.jxl::TreeSamples"* %6, null
  br i1 %143, label %150, label %216

150:                                              ; preds = %148
  %151 = load i32, i32* %63, align 8
  %152 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1, i64 0, i32 10
  %153 = load i32, i32* %152, align 4
  %154 = call i32 @_ZN3jxl11TreeSamples12SetPredictorENS_9PredictorENS_14ModularOptions10WPTreeModeE(%"struct.jxl::TreeSamples"* nonnull %14, i32 %151, i32 %153) #9
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %156, label %664

156:                                              ; preds = %150
  %157 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1, i64 0, i32 3
  %158 = load i32, i32* %152, align 4
  %159 = call i32 @_ZN3jxl11TreeSamples13SetPropertiesERKNSt3__16vectorIjNS1_9allocatorIjEEEENS_14ModularOptions10WPTreeModeE(%"struct.jxl::TreeSamples"* nonnull %14, %"class.std::__1::vector.18"* dereferenceable(24) %157, i32 %158) #9
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %664

161:                                              ; preds = %156
  %162 = bitcast %"class.std::__1::vector.61"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %162) #9
  %163 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %16, i64 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %16, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %162, i8 0, i64 24, i1 false) #9
  %165 = bitcast %"class.std::__1::vector.61"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %165) #9
  %166 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %17, i64 0, i32 0, i32 0
  %167 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %17, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %165, i8 0, i64 24, i1 false) #9
  %168 = bitcast %"class.std::__1::vector.18"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %168) #9
  %169 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %18, i64 0, i32 0, i32 0
  %170 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %18, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %168, i8 0, i64 24, i1 false) #9
  %171 = bitcast %"class.std::__1::vector.18"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %171) #9
  %172 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %19, i64 0, i32 0, i32 0
  %173 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %19, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %171, i8 0, i64 24, i1 false) #9
  call void @_ZN3jxl19CollectPixelSamplesERKNS_5ImageERKNS_14ModularOptionsEmRNSt3__16vectorIjNS6_9allocatorIjEEEESB_RNS7_IiNS8_IiEEEESE_(%"class.jxl::Image"* dereferenceable(104) %0, %"struct.jxl::ModularOptions"* dereferenceable(88) %1, i64 0, %"class.std::__1::vector.18"* nonnull dereferenceable(24) %18, %"class.std::__1::vector.18"* nonnull dereferenceable(24) %19, %"class.std::__1::vector.61"* nonnull dereferenceable(24) %16, %"class.std::__1::vector.61"* nonnull dereferenceable(24) %17) #9
  %174 = bitcast %"class.std::__1::vector.80"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %174) #9
  %175 = getelementptr inbounds %"class.std::__1::vector.80", %"class.std::__1::vector.80"* %20, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %174, i8 0, i64 24, i1 false) #9
  %176 = bitcast %"struct.std::__1::array.82"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %176) #9
  %177 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1, i64 0, i32 6
  %178 = bitcast %"struct.std::__1::array.82"* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %178, i8 -86, i64 16, i1 false)
  %179 = load i64, i64* %177, align 8
  call void @_ZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_m(%"struct.jxl::TreeSamples"* nonnull %14, %"struct.std::__1::array.82"* nonnull dereferenceable(16) %21, %"class.std::__1::vector.80"* nonnull dereferenceable(24) %20, %"class.std::__1::vector.18"* nonnull dereferenceable(24) %18, %"class.std::__1::vector.18"* nonnull dereferenceable(24) %19, %"class.std::__1::vector.61"* nonnull dereferenceable(24) %16, %"class.std::__1::vector.61"* nonnull dereferenceable(24) %17, i64 %179) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %176) #9
  %180 = load %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"** %175, align 8
  %181 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %180, null
  br i1 %181, label %187, label %182

182:                                              ; preds = %161
  %183 = getelementptr inbounds %"class.std::__1::vector.80", %"class.std::__1::vector.80"* %20, i64 0, i32 0, i32 1
  %184 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %180 to i64
  %185 = bitcast %"struct.jxl::ModularMultiplierInfo"** %183 to i64*
  store i64 %184, i64* %185, align 8
  %186 = bitcast %"struct.jxl::ModularMultiplierInfo"* %180 to i8*
  call void @_ZdlPv(i8* %186) #12
  br label %187

187:                                              ; preds = %161, %182
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %174) #9
  %188 = load i32*, i32** %172, align 8
  %189 = icmp eq i32* %188, null
  br i1 %189, label %194, label %190

190:                                              ; preds = %187
  %191 = ptrtoint i32* %188 to i64
  %192 = bitcast i32** %173 to i64*
  store i64 %191, i64* %192, align 8
  %193 = bitcast i32* %188 to i8*
  call void @_ZdlPv(i8* %193) #12
  br label %194

194:                                              ; preds = %187, %190
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %171) #9
  %195 = load i32*, i32** %169, align 8
  %196 = icmp eq i32* %195, null
  br i1 %196, label %201, label %197

197:                                              ; preds = %194
  %198 = ptrtoint i32* %195 to i64
  %199 = bitcast i32** %170 to i64*
  store i64 %198, i64* %199, align 8
  %200 = bitcast i32* %195 to i8*
  call void @_ZdlPv(i8* %200) #12
  br label %201

201:                                              ; preds = %194, %197
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %168) #9
  %202 = load i32*, i32** %166, align 8
  %203 = icmp eq i32* %202, null
  br i1 %203, label %208, label %204

204:                                              ; preds = %201
  %205 = ptrtoint i32* %202 to i64
  %206 = bitcast i32** %167 to i64*
  store i64 %205, i64* %206, align 8
  %207 = bitcast i32* %202 to i8*
  call void @_ZdlPv(i8* %207) #12
  br label %208

208:                                              ; preds = %201, %204
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %165) #9
  %209 = load i32*, i32** %163, align 8
  %210 = icmp eq i32* %209, null
  br i1 %210, label %215, label %211

211:                                              ; preds = %208
  %212 = ptrtoint i32* %209 to i64
  %213 = bitcast i32** %164 to i64*
  store i64 %212, i64* %213, align 8
  %214 = bitcast i32* %209 to i8*
  call void @_ZdlPv(i8* %214) #12
  br label %215

215:                                              ; preds = %208, %211
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %162) #9
  br label %216

216:                                              ; preds = %148, %215
  %217 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 0, i32 0, i32 0
  %218 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 8
  %219 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1, i64 0, i32 0
  %220 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %61, i64 0, i32 2
  %221 = select i1 %149, %"struct.jxl::TreeSamples"* %6, %"struct.jxl::TreeSamples"* %14
  br label %222

222:                                              ; preds = %216, %242
  %223 = phi i64 [ 0, %216 ], [ %243, %242 ]
  %224 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %217, align 8
  %225 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %224, i64 %223, i32 1
  %226 = load i64, i64* %225, align 8
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %242, label %228

228:                                              ; preds = %222
  %229 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %224, i64 %223, i32 2
  %230 = load i64, i64* %229, align 8
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %242, label %232

232:                                              ; preds = %228
  %233 = load i64, i64* %218, align 8
  %234 = icmp ult i64 %223, %233
  br i1 %234, label %240, label %235

235:                                              ; preds = %232
  %236 = load i64, i64* %219, align 8
  %237 = icmp ugt i64 %226, %236
  %238 = icmp ugt i64 %230, %236
  %239 = or i1 %237, %238
  br i1 %239, label %245, label %240

240:                                              ; preds = %235, %232
  %241 = trunc i64 %223 to i32
  call void @_ZN3jxl14GatherTreeDataERKNS_5ImageEimRKNS_8weighted6HeaderERKNS_14ModularOptionsERNS_11TreeSamplesEPm(%"class.jxl::Image"* dereferenceable(104) %0, i32 %241, i64 %5, %"struct.jxl::weighted::Header"* dereferenceable(56) %220, %"struct.jxl::ModularOptions"* dereferenceable(88) %1, %"struct.jxl::TreeSamples"* dereferenceable(200) %221, i64* %147)
  br label %242

242:                                              ; preds = %228, %222, %240
  %243 = add nuw i64 %223, 1
  %244 = icmp ult i64 %243, %47
  br i1 %244, label %222, label %245

245:                                              ; preds = %242, %235
  br i1 %149, label %664, label %246

246:                                              ; preds = %245, %142
  %247 = icmp ne %"class.std::__1::vector.101"* %10, null
  %248 = xor i1 %133, %247
  br i1 %248, label %252, label %249

249:                                              ; preds = %246
  %250 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 423, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.10, i64 0, i64 0)) #9
  %251 = call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

252:                                              ; preds = %246
  %253 = bitcast %"class.std::__1::vector.89"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %253) #9
  %254 = getelementptr inbounds %"class.std::__1::vector.89", %"class.std::__1::vector.89"* %22, i64 0, i32 0, i32 0
  %255 = getelementptr inbounds %"class.std::__1::vector.89", %"class.std::__1::vector.89"* %22, i64 0, i32 0, i32 1
  %256 = getelementptr inbounds %"class.std::__1::vector.89", %"class.std::__1::vector.89"* %22, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %253, i8 0, i64 24, i1 false) #9
  %257 = bitcast %"class.std::__1::vector.213"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %257) #9
  %258 = getelementptr inbounds %"class.std::__1::vector.213", %"class.std::__1::vector.213"* %23, i64 0, i32 0, i32 0
  %259 = getelementptr inbounds %"class.std::__1::vector.213", %"class.std::__1::vector.213"* %23, i64 0, i32 0, i32 1
  %260 = getelementptr inbounds %"class.std::__1::vector.213", %"class.std::__1::vector.213"* %23, i64 0, i32 0, i32 2, i32 0, i32 0
  %261 = call i8* @_Znwm(i64 24) #12
  %262 = bitcast %"class.std::__1::vector.213"* %23 to i8**
  store i8* %261, i8** %262, align 8
  %263 = getelementptr inbounds i8, i8* %261, i64 24
  %264 = bitcast %"class.std::__1::vector.101"** %260 to i8**
  store i8* %263, i8** %264, align 8
  %265 = bitcast %"class.std::__1::vector.101"** %259 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %261, i8 0, i64 24, i1 false) #9
  %266 = ptrtoint i8* %263 to i64
  store i64 %266, i64* %265, align 8
  br i1 %133, label %267, label %454

267:                                              ; preds = %252
  %268 = bitcast %"struct.jxl::EntropyEncodingData"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %268) #9
  %269 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %24, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %269, i8 -86, i64 80, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %268, i8 0, i64 24, i1 false) #9
  %270 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %24, i64 0, i32 2
  %271 = bitcast %"class.std::__1::vector.228"* %270 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %271, i8 0, i64 24, i1 false) #9
  %272 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %24, i64 0, i32 3
  call void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"* %272) #9
  %273 = bitcast %"class.std::__1::vector.48"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %273) #9
  %274 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %25, i64 0, i32 0, i32 0
  %275 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %25, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %273, i8 0, i64 24, i1 false) #9
  %276 = bitcast %"class.std::__1::vector.213"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %276) #9
  %277 = getelementptr inbounds %"class.std::__1::vector.213", %"class.std::__1::vector.213"* %26, i64 0, i32 0, i32 0
  %278 = getelementptr inbounds %"class.std::__1::vector.213", %"class.std::__1::vector.213"* %26, i64 0, i32 0, i32 1
  %279 = getelementptr inbounds %"class.std::__1::vector.213", %"class.std::__1::vector.213"* %26, i64 0, i32 0, i32 2, i32 0, i32 0
  %280 = call i8* @_Znwm(i64 24) #12
  %281 = bitcast %"class.std::__1::vector.213"* %26 to i8**
  store i8* %280, i8** %281, align 8
  %282 = getelementptr inbounds i8, i8* %280, i64 24
  %283 = bitcast %"class.std::__1::vector.101"** %279 to i8**
  store i8* %282, i8** %283, align 8
  %284 = bitcast %"class.std::__1::vector.101"** %278 to i64*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %280, i8 0, i64 24, i1 false) #9
  %285 = ptrtoint i8* %282 to i64
  store i64 %285, i64* %284, align 8
  %286 = bitcast %"class.std::__1::vector.89"* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %286) #9
  %287 = load i64, i64* %147, align 8
  %288 = bitcast %"class.std::__1::vector.80"* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %288) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %288, i8 0, i64 24, i1 false) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 0, i64 16, i1 false)
  call void @_ZN3jxl9LearnTreeEONS_11TreeSamplesEmRKNS_14ModularOptionsERKNSt3__16vectorINS_21ModularMultiplierInfoENS5_9allocatorIS7_EEEENS5_5arrayINSD_IjLm2EEELm2EEE(%"class.std::__1::vector.89"* nonnull sret %27, %"struct.jxl::TreeSamples"* nonnull dereferenceable(200) %14, i64 %287, %"struct.jxl::ModularOptions"* dereferenceable(88) %1, %"class.std::__1::vector.80"* nonnull dereferenceable(24) %28, %"struct.std::__1::array.82"* nonnull byval(%"struct.std::__1::array.82") align 8 %29)
  %289 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %254, align 8
  %290 = icmp eq %"struct.jxl::PropertyDecisionNode"* %289, null
  br i1 %290, label %291, label %293

291:                                              ; preds = %267
  %292 = bitcast %"struct.jxl::PropertyDecisionNode"** %255 to i64*
  br label %297

293:                                              ; preds = %267
  %294 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %289 to i64
  %295 = bitcast %"struct.jxl::PropertyDecisionNode"** %255 to i64*
  store i64 %294, i64* %295, align 8
  %296 = bitcast %"struct.jxl::PropertyDecisionNode"* %289 to i8*
  call void @_ZdlPv(i8* %296) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %253, i8 0, i64 24, i1 false) #9
  br label %297

297:                                              ; preds = %291, %293
  %298 = phi i64* [ %292, %291 ], [ %295, %293 ]
  %299 = bitcast %"class.std::__1::vector.89"* %27 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = bitcast %"class.std::__1::vector.89"* %22 to i64*
  store i64 %300, i64* %301, align 8
  %302 = getelementptr inbounds %"class.std::__1::vector.89", %"class.std::__1::vector.89"* %27, i64 0, i32 0, i32 1
  %303 = bitcast %"struct.jxl::PropertyDecisionNode"** %302 to i64*
  %304 = load i64, i64* %303, align 8
  store i64 %304, i64* %298, align 8
  %305 = getelementptr inbounds %"class.std::__1::vector.89", %"class.std::__1::vector.89"* %27, i64 0, i32 0, i32 2, i32 0, i32 0
  %306 = bitcast %"struct.jxl::PropertyDecisionNode"** %305 to i64*
  %307 = load i64, i64* %306, align 8
  %308 = bitcast %"struct.jxl::PropertyDecisionNode"** %256 to i64*
  store i64 %307, i64* %308, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %286, i8 0, i64 24, i1 false) #9
  %309 = getelementptr inbounds %"class.std::__1::vector.80", %"class.std::__1::vector.80"* %28, i64 0, i32 0, i32 0
  %310 = load %"struct.jxl::ModularMultiplierInfo"*, %"struct.jxl::ModularMultiplierInfo"** %309, align 8
  %311 = icmp eq %"struct.jxl::ModularMultiplierInfo"* %310, null
  br i1 %311, label %317, label %312

312:                                              ; preds = %297
  %313 = bitcast %"struct.jxl::ModularMultiplierInfo"* %310 to i8*
  %314 = ptrtoint %"struct.jxl::ModularMultiplierInfo"* %310 to i64
  %315 = getelementptr inbounds %"class.std::__1::vector.80", %"class.std::__1::vector.80"* %28, i64 0, i32 0, i32 1
  %316 = bitcast %"struct.jxl::ModularMultiplierInfo"** %315 to i64*
  store i64 %314, i64* %316, align 8
  call void @_ZdlPv(i8* %313) #12
  br label %317

317:                                              ; preds = %297, %312
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %288) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %286) #9
  %318 = load %"class.std::__1::vector.101"*, %"class.std::__1::vector.101"** %258, align 8
  %319 = bitcast %"class.std::__1::vector.89"* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %319) #9
  %320 = getelementptr inbounds %"class.std::__1::vector.89", %"class.std::__1::vector.89"* %31, i64 0, i32 0, i32 0
  %321 = getelementptr inbounds %"class.std::__1::vector.89", %"class.std::__1::vector.89"* %31, i64 0, i32 0, i32 1
  %322 = getelementptr inbounds %"class.std::__1::vector.89", %"class.std::__1::vector.89"* %31, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %319, i8 0, i64 24, i1 false) #9
  %323 = load %"class.std::__1::vector.101"*, %"class.std::__1::vector.101"** %277, align 8
  call void @_ZN3jxl12TokenizeTreeERKNSt3__16vectorINS_20PropertyDecisionNodeENS0_9allocatorIS2_EEEEPNS1_INS_5TokenENS3_IS8_EEEEPS5_(%"class.std::__1::vector.89"* nonnull dereferenceable(24) %22, %"class.std::__1::vector.101"* %323, %"class.std::__1::vector.89"* nonnull %31) #9
  %324 = load i64, i64* %298, align 8
  %325 = load i64, i64* %301, align 8
  %326 = sub i64 %324, %325
  %327 = bitcast %"struct.jxl::PropertyDecisionNode"** %321 to i64*
  %328 = load i64, i64* %327, align 8
  %329 = bitcast %"class.std::__1::vector.89"* %31 to i64*
  %330 = load i64, i64* %329, align 8
  %331 = sub i64 %328, %330
  %332 = icmp eq i64 %326, %331
  br i1 %332, label %336, label %333

333:                                              ; preds = %317
  %334 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 440, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.11, i64 0, i64 0)) #9
  %335 = call zeroext i1 @_ZN3jxl5AbortEv() #11
  unreachable

336:                                              ; preds = %317
  %337 = icmp eq i64 %325, 0
  br i1 %337, label %342, label %338

338:                                              ; preds = %336
  store i64 %325, i64* %298, align 8
  %339 = inttoptr i64 %325 to i8*
  call void @_ZdlPv(i8* %339) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %253, i8 0, i64 24, i1 false) #9
  %340 = load i64, i64* %329, align 8
  %341 = load i64, i64* %327, align 8
  br label %342

342:                                              ; preds = %336, %338
  %343 = phi i64 [ %328, %336 ], [ %341, %338 ]
  %344 = phi i64 [ %330, %336 ], [ %340, %338 ]
  store i64 %344, i64* %301, align 8
  store i64 %343, i64* %298, align 8
  %345 = bitcast %"struct.jxl::PropertyDecisionNode"** %322 to i64*
  %346 = load i64, i64* %345, align 8
  store i64 %346, i64* %308, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %319, i8 0, i64 24, i1 false) #9
  %347 = bitcast %"struct.jxl::HistogramParams"* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %347) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %347, i8 0, i64 56, i1 false)
  %348 = bitcast %"struct.jxl::HistogramParams"* %32 to <4 x i32>*
  store <4 x i32> <i32 2, i32 3, i32 1, i32 2>, <4 x i32>* %348, align 16
  %349 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %32, i64 0, i32 4
  %350 = bitcast %"class.std::__1::vector.235"* %349 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %350, i8 0, i64 24, i1 false) #9
  %351 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %32, i64 0, i32 5
  store i64 -1, i64* %351, align 8
  %352 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %32, i64 0, i32 6
  store i8 0, i8* %352, align 16
  %353 = call i64 @_ZN3jxl24BuildAndEncodeHistogramsERKNS_15HistogramParamsEmRNSt3__16vectorINS4_INS_5TokenENS3_9allocatorIS5_EEEENS6_IS8_EEEEPNS_19EntropyEncodingDataEPNS4_IhNS6_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::HistogramParams"* nonnull dereferenceable(56) %32, i64 6, %"class.std::__1::vector.213"* nonnull dereferenceable(24) %26, %"struct.jxl::EntropyEncodingData"* nonnull %24, %"class.std::__1::vector.48"* nonnull %25, %"struct.jxl::BitWriter"* %2, i64 17, %"struct.jxl::AuxOut"* %3) #9
  %354 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %32, i64 0, i32 4, i32 0, i32 0
  %355 = load i64*, i64** %354, align 16
  %356 = icmp eq i64* %355, null
  br i1 %356, label %362, label %357

357:                                              ; preds = %342
  %358 = ptrtoint i64* %355 to i64
  %359 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %32, i64 0, i32 4, i32 0, i32 1
  %360 = bitcast i64** %359 to i64*
  store i64 %358, i64* %360, align 8
  %361 = bitcast i64* %355 to i8*
  call void @_ZdlPv(i8* %361) #12
  br label %362

362:                                              ; preds = %342, %357
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %347) #9
  %363 = load %"class.std::__1::vector.101"*, %"class.std::__1::vector.101"** %277, align 8
  call void @_ZN3jxl11WriteTokensERKNSt3__16vectorINS_5TokenENS0_9allocatorIS2_EEEERKNS_19EntropyEncodingDataERKNS1_IhNS3_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"class.std::__1::vector.101"* dereferenceable(24) %363, %"struct.jxl::EntropyEncodingData"* nonnull dereferenceable(104) %24, %"class.std::__1::vector.48"* nonnull dereferenceable(24) %25, %"struct.jxl::BitWriter"* %2, i64 17, %"struct.jxl::AuxOut"* %3) #9
  %364 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %320, align 8
  %365 = icmp eq %"struct.jxl::PropertyDecisionNode"* %364, null
  br i1 %365, label %369, label %366

366:                                              ; preds = %362
  %367 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %364 to i64
  store i64 %367, i64* %327, align 8
  %368 = bitcast %"struct.jxl::PropertyDecisionNode"* %364 to i8*
  call void @_ZdlPv(i8* %368) #12
  br label %369

369:                                              ; preds = %362, %366
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %319) #9
  %370 = load %"class.std::__1::vector.101"*, %"class.std::__1::vector.101"** %277, align 8
  %371 = icmp eq %"class.std::__1::vector.101"* %370, null
  br i1 %371, label %393, label %372

372:                                              ; preds = %369
  %373 = bitcast %"class.std::__1::vector.101"* %370 to i8*
  %374 = load %"class.std::__1::vector.101"*, %"class.std::__1::vector.101"** %278, align 8
  %375 = icmp eq %"class.std::__1::vector.101"* %374, %370
  br i1 %375, label %391, label %376

376:                                              ; preds = %372, %387
  %377 = phi %"class.std::__1::vector.101"* [ %378, %387 ], [ %374, %372 ]
  %378 = getelementptr inbounds %"class.std::__1::vector.101", %"class.std::__1::vector.101"* %377, i64 -1
  %379 = getelementptr inbounds %"class.std::__1::vector.101", %"class.std::__1::vector.101"* %378, i64 0, i32 0, i32 0
  %380 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %379, align 8
  %381 = icmp eq %"struct.jxl::Token"* %380, null
  br i1 %381, label %387, label %382

382:                                              ; preds = %376
  %383 = ptrtoint %"struct.jxl::Token"* %380 to i64
  %384 = getelementptr inbounds %"class.std::__1::vector.101", %"class.std::__1::vector.101"* %377, i64 -1, i32 0, i32 1
  %385 = bitcast %"struct.jxl::Token"** %384 to i64*
  store i64 %383, i64* %385, align 8
  %386 = bitcast %"struct.jxl::Token"* %380 to i8*
  call void @_ZdlPv(i8* %386) #12
  br label %387

387:                                              ; preds = %382, %376
  %388 = icmp eq %"class.std::__1::vector.101"* %378, %370
  br i1 %388, label %389, label %376

389:                                              ; preds = %387
  %390 = load i8*, i8** %281, align 8
  br label %391

391:                                              ; preds = %389, %372
  %392 = phi i8* [ %390, %389 ], [ %373, %372 ]
  store %"class.std::__1::vector.101"* %370, %"class.std::__1::vector.101"** %278, align 8
  call void @_ZdlPv(i8* %392) #12
  br label %393

393:                                              ; preds = %369, %391
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %276) #9
  %394 = load i8*, i8** %274, align 8
  %395 = icmp eq i8* %394, null
  br i1 %395, label %399, label %396

396:                                              ; preds = %393
  %397 = ptrtoint i8* %394 to i64
  %398 = bitcast i8** %275 to i64*
  store i64 %397, i64* %398, align 8
  call void @_ZdlPv(i8* nonnull %394) #12
  br label %399

399:                                              ; preds = %393, %396
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %273) #9
  %400 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %24, i64 0, i32 2, i32 0, i32 0
  %401 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %400, align 8
  %402 = icmp eq %"struct.jxl::HybridUintConfig"* %401, null
  br i1 %402, label %408, label %403

403:                                              ; preds = %399
  %404 = ptrtoint %"struct.jxl::HybridUintConfig"* %401 to i64
  %405 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %24, i64 0, i32 2, i32 0, i32 1
  %406 = bitcast %"struct.jxl::HybridUintConfig"** %405 to i64*
  store i64 %404, i64* %406, align 8
  %407 = bitcast %"struct.jxl::HybridUintConfig"* %401 to i8*
  call void @_ZdlPv(i8* %407) #12
  br label %408

408:                                              ; preds = %403, %399
  %409 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %24, i64 0, i32 0, i32 0, i32 0
  %410 = load %"class.std::__1::vector.222"*, %"class.std::__1::vector.222"** %409, align 8
  %411 = icmp eq %"class.std::__1::vector.222"* %410, null
  br i1 %411, label %453, label %412

412:                                              ; preds = %408
  %413 = bitcast %"class.std::__1::vector.222"* %410 to i8*
  %414 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %24, i64 0, i32 0, i32 0, i32 1
  %415 = load %"class.std::__1::vector.222"*, %"class.std::__1::vector.222"** %414, align 8
  %416 = icmp eq %"class.std::__1::vector.222"* %415, %410
  br i1 %416, label %451, label %417

417:                                              ; preds = %412, %446
  %418 = phi %"class.std::__1::vector.222"* [ %419, %446 ], [ %415, %412 ]
  %419 = getelementptr inbounds %"class.std::__1::vector.222", %"class.std::__1::vector.222"* %418, i64 -1
  %420 = getelementptr inbounds %"class.std::__1::vector.222", %"class.std::__1::vector.222"* %419, i64 0, i32 0, i32 0
  %421 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %420, align 8
  %422 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %421, null
  br i1 %422, label %446, label %423

423:                                              ; preds = %417
  %424 = bitcast %"struct.jxl::ANSEncSymbolInfo"* %421 to i8*
  %425 = getelementptr inbounds %"class.std::__1::vector.222", %"class.std::__1::vector.222"* %418, i64 -1, i32 0, i32 1
  %426 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %425, align 8
  %427 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %426, %421
  br i1 %427, label %444, label %428

428:                                              ; preds = %423, %439
  %429 = phi %"struct.jxl::ANSEncSymbolInfo"* [ %430, %439 ], [ %426, %423 ]
  %430 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %429, i64 -1
  %431 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %429, i64 -1, i32 2, i32 0, i32 0
  %432 = load i16*, i16** %431, align 8
  %433 = icmp eq i16* %432, null
  br i1 %433, label %439, label %434

434:                                              ; preds = %428
  %435 = ptrtoint i16* %432 to i64
  %436 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %429, i64 -1, i32 2, i32 0, i32 1
  %437 = bitcast i16** %436 to i64*
  store i64 %435, i64* %437, align 8
  %438 = bitcast i16* %432 to i8*
  call void @_ZdlPv(i8* %438) #12
  br label %439

439:                                              ; preds = %434, %428
  %440 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %430, %421
  br i1 %440, label %441, label %428

441:                                              ; preds = %439
  %442 = bitcast %"class.std::__1::vector.222"* %419 to i8**
  %443 = load i8*, i8** %442, align 8
  br label %444

444:                                              ; preds = %441, %423
  %445 = phi i8* [ %443, %441 ], [ %424, %423 ]
  store %"struct.jxl::ANSEncSymbolInfo"* %421, %"struct.jxl::ANSEncSymbolInfo"** %425, align 8
  call void @_ZdlPv(i8* %445) #12
  br label %446

446:                                              ; preds = %444, %417
  %447 = icmp eq %"class.std::__1::vector.222"* %419, %410
  br i1 %447, label %448, label %417

448:                                              ; preds = %446
  %449 = bitcast %"struct.jxl::EntropyEncodingData"* %24 to i8**
  %450 = load i8*, i8** %449, align 8
  br label %451

451:                                              ; preds = %448, %412
  %452 = phi i8* [ %450, %448 ], [ %413, %412 ]
  store %"class.std::__1::vector.222"* %410, %"class.std::__1::vector.222"** %414, align 8
  call void @_ZdlPv(i8* %452) #12
  br label %453

453:                                              ; preds = %408, %451
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %268) #9
  br label %454

454:                                              ; preds = %252, %453
  %455 = phi %"class.std::__1::vector.101"* [ %318, %453 ], [ %10, %252 ]
  %456 = phi %"class.std::__1::vector.89"* [ %22, %453 ], [ %8, %252 ]
  %457 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 0, i32 0, i32 0
  %458 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 8
  %459 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1, i64 0, i32 0
  %460 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1, i64 0, i32 14
  %461 = getelementptr inbounds %"class.std::__1::vector.101", %"class.std::__1::vector.101"* %455, i64 0, i32 0, i32 1
  %462 = bitcast %"struct.jxl::Token"** %461 to i64*
  %463 = bitcast %"class.std::__1::vector.101"* %455 to i64*
  %464 = bitcast %"struct.jxl::Token"* %33 to i8*
  %465 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %33, i64 0, i32 0
  %466 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %33, i64 0, i32 1
  %467 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %61, i64 0, i32 2
  %468 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1, i64 0, i32 11
  br label %469

469:                                              ; preds = %454, %518
  %470 = phi i64 [ 0, %454 ], [ %520, %518 ]
  %471 = phi i64 [ 0, %454 ], [ %519, %518 ]
  %472 = load %"class.jxl::Channel"*, %"class.jxl::Channel"** %457, align 8
  %473 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %472, i64 %470, i32 1
  %474 = load i64, i64* %473, align 8
  %475 = icmp eq i64 %474, 0
  br i1 %475, label %518, label %476

476:                                              ; preds = %469
  %477 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %472, i64 %470, i32 2
  %478 = load i64, i64* %477, align 8
  %479 = icmp eq i64 %478, 0
  br i1 %479, label %518, label %480

480:                                              ; preds = %476
  %481 = load i64, i64* %458, align 8
  %482 = icmp ult i64 %470, %481
  br i1 %482, label %488, label %483

483:                                              ; preds = %480
  %484 = load i64, i64* %459, align 8
  %485 = icmp ugt i64 %474, %484
  %486 = icmp ugt i64 %478, %484
  %487 = or i1 %485, %486
  br i1 %487, label %522, label %488

488:                                              ; preds = %483, %480
  %489 = icmp ugt i64 %474, %471
  %490 = select i1 %489, i64 %474, i64 %471
  %491 = load i8, i8* %460, align 8, !range !5
  %492 = icmp eq i8 %491, 0
  br i1 %492, label %512, label %493

493:                                              ; preds = %488
  %494 = load i64, i64* %462, align 8
  %495 = load i64, i64* %463, align 8
  %496 = sub i64 %494, %495
  %497 = ashr exact i64 %496, 3
  %498 = mul i64 %478, %474
  %499 = add i64 %497, %498
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %464) #9
  store i32 0, i32* %465, align 4
  store i32 0, i32* %466, align 4
  %500 = load i64, i64* %463, align 8
  %501 = sub i64 %494, %500
  %502 = ashr exact i64 %501, 3
  %503 = icmp ugt i64 %499, %502
  %504 = inttoptr i64 %500 to %"struct.jxl::Token"*
  br i1 %503, label %505, label %507

505:                                              ; preds = %493
  %506 = sub i64 %499, %502
  call void @_ZNSt3__16vectorIN3jxl5TokenENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.101"* %455, i64 %506, %"struct.jxl::Token"* nonnull dereferenceable(8) %33) #9
  br label %511

507:                                              ; preds = %493
  %508 = icmp ult i64 %499, %502
  br i1 %508, label %509, label %511

509:                                              ; preds = %507
  %510 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %504, i64 %499
  store %"struct.jxl::Token"* %510, %"struct.jxl::Token"** %461, align 8
  br label %511

511:                                              ; preds = %505, %507, %509
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %464) #9
  br label %518

512:                                              ; preds = %488
  %513 = trunc i64 %470 to i32
  %514 = load i8, i8* %468, align 8, !range !5
  %515 = icmp ne i8 %514, 0
  %516 = call i32 @_ZN3jxl25EncodeModularChannelMAANSERKNS_5ImageEiRKNS_8weighted6HeaderERKNSt3__16vectorINS_20PropertyDecisionNodeENS7_9allocatorIS9_EEEEPNS8_INS_5TokenENSA_ISF_EEEEPNS_6AuxOutEmb(%"class.jxl::Image"* dereferenceable(104) %0, i32 %513, %"struct.jxl::weighted::Header"* dereferenceable(56) %467, %"class.std::__1::vector.89"* dereferenceable(24) %456, %"class.std::__1::vector.101"* %455, %"struct.jxl::AuxOut"* undef, i64 %5, i1 zeroext %515)
  %517 = icmp eq i32 %516, 0
  br i1 %517, label %518, label %631

518:                                              ; preds = %476, %469, %511, %512
  %519 = phi i64 [ %471, %469 ], [ %471, %476 ], [ %490, %512 ], [ %490, %511 ]
  %520 = add nuw i64 %470, 1
  %521 = icmp ult i64 %520, %47
  br i1 %521, label %469, label %522

522:                                              ; preds = %483, %518
  %523 = phi i64 [ %471, %483 ], [ %519, %518 ]
  %524 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %61, i64 0, i32 1
  %525 = load i8, i8* %524, align 8, !range !5
  %526 = icmp eq i8 %525, 0
  br i1 %526, label %527, label %630

527:                                              ; preds = %522
  %528 = bitcast %"struct.jxl::EntropyEncodingData"* %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %528) #9
  %529 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %34, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %529, i8 -86, i64 80, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %528, i8 0, i64 24, i1 false) #9
  %530 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %34, i64 0, i32 2
  %531 = bitcast %"class.std::__1::vector.228"* %530 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %531, i8 0, i64 24, i1 false) #9
  %532 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %34, i64 0, i32 3
  call void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"* %532) #9
  %533 = bitcast %"class.std::__1::vector.48"* %35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %533) #9
  %534 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %35, i64 0, i32 0, i32 0
  %535 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %35, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %533, i8 0, i64 24, i1 false) #9
  %536 = bitcast %"struct.jxl::HistogramParams"* %36 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %536) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %536, i8 -86, i64 56, i1 false)
  %537 = bitcast %"struct.jxl::HistogramParams"* %36 to <4 x i32>*
  store <4 x i32> <i32 2, i32 3, i32 1, i32 2>, <4 x i32>* %537, align 16
  %538 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %36, i64 0, i32 4
  %539 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %36, i64 0, i32 5
  store i64 -1, i64* %539, align 8
  %540 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %36, i64 0, i32 6
  store i8 0, i8* %540, align 16
  %541 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %36, i64 0, i32 4, i32 0, i32 1
  %542 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %36, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %543 = bitcast i64** %541 to i64*
  %544 = bitcast %"class.std::__1::vector.235"* %538 to i64*
  %545 = bitcast i64** %542 to i64*
  %546 = call i8* @_Znwm(i64 8) #12
  %547 = bitcast i8* %546 to i64*
  %548 = getelementptr inbounds i8, i8* %546, i64 8
  %549 = ptrtoint i8* %548 to i64
  store i64 %523, i64* %547, align 8
  %550 = ptrtoint i8* %546 to i64
  store i64 %550, i64* %544, align 16
  store i64 %549, i64* %543, align 8
  store i64 %549, i64* %545, align 16
  %551 = getelementptr inbounds %"class.std::__1::vector.89", %"class.std::__1::vector.89"* %456, i64 0, i32 0, i32 1
  %552 = bitcast %"struct.jxl::PropertyDecisionNode"** %551 to i64*
  %553 = load i64, i64* %552, align 8
  %554 = bitcast %"class.std::__1::vector.89"* %456 to i64*
  %555 = load i64, i64* %554, align 8
  %556 = sub i64 %553, %555
  %557 = sdiv exact i64 %556, 40
  %558 = add nsw i64 %557, 1
  %559 = lshr i64 %558, 1
  %560 = call i64 @_ZN3jxl24BuildAndEncodeHistogramsERKNS_15HistogramParamsEmRNSt3__16vectorINS4_INS_5TokenENS3_9allocatorIS5_EEEENS6_IS8_EEEEPNS_19EntropyEncodingDataEPNS4_IhNS6_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::HistogramParams"* nonnull dereferenceable(56) %36, i64 %559, %"class.std::__1::vector.213"* nonnull dereferenceable(24) %23, %"struct.jxl::EntropyEncodingData"* nonnull %34, %"class.std::__1::vector.48"* nonnull %35, %"struct.jxl::BitWriter"* %2, i64 %4, %"struct.jxl::AuxOut"* %3) #9
  %561 = load %"class.std::__1::vector.101"*, %"class.std::__1::vector.101"** %258, align 8
  call void @_ZN3jxl11WriteTokensERKNSt3__16vectorINS_5TokenENS0_9allocatorIS2_EEEERKNS_19EntropyEncodingDataERKNS1_IhNS3_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"class.std::__1::vector.101"* dereferenceable(24) %561, %"struct.jxl::EntropyEncodingData"* nonnull dereferenceable(104) %34, %"class.std::__1::vector.48"* nonnull dereferenceable(24) %35, %"struct.jxl::BitWriter"* %2, i64 %4, %"struct.jxl::AuxOut"* %3) #9
  %562 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %36, i64 0, i32 4, i32 0, i32 0
  %563 = load i64*, i64** %562, align 16
  %564 = icmp eq i64* %563, null
  br i1 %564, label %569, label %565

565:                                              ; preds = %527
  %566 = ptrtoint i64* %563 to i64
  %567 = bitcast i64** %541 to i64*
  store i64 %566, i64* %567, align 8
  %568 = bitcast i64* %563 to i8*
  call void @_ZdlPv(i8* %568) #12
  br label %569

569:                                              ; preds = %527, %565
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %536) #9
  %570 = load i8*, i8** %534, align 8
  %571 = icmp eq i8* %570, null
  br i1 %571, label %575, label %572

572:                                              ; preds = %569
  %573 = ptrtoint i8* %570 to i64
  %574 = bitcast i8** %535 to i64*
  store i64 %573, i64* %574, align 8
  call void @_ZdlPv(i8* nonnull %570) #12
  br label %575

575:                                              ; preds = %569, %572
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %533) #9
  %576 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %34, i64 0, i32 2, i32 0, i32 0
  %577 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %576, align 8
  %578 = icmp eq %"struct.jxl::HybridUintConfig"* %577, null
  br i1 %578, label %584, label %579

579:                                              ; preds = %575
  %580 = ptrtoint %"struct.jxl::HybridUintConfig"* %577 to i64
  %581 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %34, i64 0, i32 2, i32 0, i32 1
  %582 = bitcast %"struct.jxl::HybridUintConfig"** %581 to i64*
  store i64 %580, i64* %582, align 8
  %583 = bitcast %"struct.jxl::HybridUintConfig"* %577 to i8*
  call void @_ZdlPv(i8* %583) #12
  br label %584

584:                                              ; preds = %579, %575
  %585 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %34, i64 0, i32 0, i32 0, i32 0
  %586 = load %"class.std::__1::vector.222"*, %"class.std::__1::vector.222"** %585, align 8
  %587 = icmp eq %"class.std::__1::vector.222"* %586, null
  br i1 %587, label %629, label %588

588:                                              ; preds = %584
  %589 = bitcast %"class.std::__1::vector.222"* %586 to i8*
  %590 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %34, i64 0, i32 0, i32 0, i32 1
  %591 = load %"class.std::__1::vector.222"*, %"class.std::__1::vector.222"** %590, align 8
  %592 = icmp eq %"class.std::__1::vector.222"* %591, %586
  br i1 %592, label %627, label %593

593:                                              ; preds = %588, %622
  %594 = phi %"class.std::__1::vector.222"* [ %595, %622 ], [ %591, %588 ]
  %595 = getelementptr inbounds %"class.std::__1::vector.222", %"class.std::__1::vector.222"* %594, i64 -1
  %596 = getelementptr inbounds %"class.std::__1::vector.222", %"class.std::__1::vector.222"* %595, i64 0, i32 0, i32 0
  %597 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %596, align 8
  %598 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %597, null
  br i1 %598, label %622, label %599

599:                                              ; preds = %593
  %600 = bitcast %"struct.jxl::ANSEncSymbolInfo"* %597 to i8*
  %601 = getelementptr inbounds %"class.std::__1::vector.222", %"class.std::__1::vector.222"* %594, i64 -1, i32 0, i32 1
  %602 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %601, align 8
  %603 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %602, %597
  br i1 %603, label %620, label %604

604:                                              ; preds = %599, %615
  %605 = phi %"struct.jxl::ANSEncSymbolInfo"* [ %606, %615 ], [ %602, %599 ]
  %606 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %605, i64 -1
  %607 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %605, i64 -1, i32 2, i32 0, i32 0
  %608 = load i16*, i16** %607, align 8
  %609 = icmp eq i16* %608, null
  br i1 %609, label %615, label %610

610:                                              ; preds = %604
  %611 = ptrtoint i16* %608 to i64
  %612 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %605, i64 -1, i32 2, i32 0, i32 1
  %613 = bitcast i16** %612 to i64*
  store i64 %611, i64* %613, align 8
  %614 = bitcast i16* %608 to i8*
  call void @_ZdlPv(i8* %614) #12
  br label %615

615:                                              ; preds = %610, %604
  %616 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %606, %597
  br i1 %616, label %617, label %604

617:                                              ; preds = %615
  %618 = bitcast %"class.std::__1::vector.222"* %595 to i8**
  %619 = load i8*, i8** %618, align 8
  br label %620

620:                                              ; preds = %617, %599
  %621 = phi i8* [ %619, %617 ], [ %600, %599 ]
  store %"struct.jxl::ANSEncSymbolInfo"* %597, %"struct.jxl::ANSEncSymbolInfo"** %601, align 8
  call void @_ZdlPv(i8* %621) #12
  br label %622

622:                                              ; preds = %620, %593
  %623 = icmp eq %"class.std::__1::vector.222"* %595, %586
  br i1 %623, label %624, label %593

624:                                              ; preds = %622
  %625 = bitcast %"struct.jxl::EntropyEncodingData"* %34 to i8**
  %626 = load i8*, i8** %625, align 8
  br label %627

627:                                              ; preds = %624, %588
  %628 = phi i8* [ %626, %624 ], [ %589, %588 ]
  store %"class.std::__1::vector.222"* %586, %"class.std::__1::vector.222"** %590, align 8
  call void @_ZdlPv(i8* %628) #12
  br label %629

629:                                              ; preds = %584, %627
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %528) #9
  br label %631

630:                                              ; preds = %522
  store i64 %523, i64* %11, align 8
  br label %631

631:                                              ; preds = %512, %629, %630
  %632 = phi i32 [ 0, %630 ], [ 0, %629 ], [ %516, %512 ]
  %633 = load %"class.std::__1::vector.101"*, %"class.std::__1::vector.101"** %258, align 8
  %634 = icmp eq %"class.std::__1::vector.101"* %633, null
  br i1 %634, label %656, label %635

635:                                              ; preds = %631
  %636 = bitcast %"class.std::__1::vector.101"* %633 to i8*
  %637 = load %"class.std::__1::vector.101"*, %"class.std::__1::vector.101"** %259, align 8
  %638 = icmp eq %"class.std::__1::vector.101"* %637, %633
  br i1 %638, label %654, label %639

639:                                              ; preds = %635, %650
  %640 = phi %"class.std::__1::vector.101"* [ %641, %650 ], [ %637, %635 ]
  %641 = getelementptr inbounds %"class.std::__1::vector.101", %"class.std::__1::vector.101"* %640, i64 -1
  %642 = getelementptr inbounds %"class.std::__1::vector.101", %"class.std::__1::vector.101"* %641, i64 0, i32 0, i32 0
  %643 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %642, align 8
  %644 = icmp eq %"struct.jxl::Token"* %643, null
  br i1 %644, label %650, label %645

645:                                              ; preds = %639
  %646 = ptrtoint %"struct.jxl::Token"* %643 to i64
  %647 = getelementptr inbounds %"class.std::__1::vector.101", %"class.std::__1::vector.101"* %640, i64 -1, i32 0, i32 1
  %648 = bitcast %"struct.jxl::Token"** %647 to i64*
  store i64 %646, i64* %648, align 8
  %649 = bitcast %"struct.jxl::Token"* %643 to i8*
  call void @_ZdlPv(i8* %649) #12
  br label %650

650:                                              ; preds = %645, %639
  %651 = icmp eq %"class.std::__1::vector.101"* %641, %633
  br i1 %651, label %652, label %639

652:                                              ; preds = %650
  %653 = load i8*, i8** %262, align 8
  br label %654

654:                                              ; preds = %652, %635
  %655 = phi i8* [ %653, %652 ], [ %636, %635 ]
  store %"class.std::__1::vector.101"* %633, %"class.std::__1::vector.101"** %259, align 8
  call void @_ZdlPv(i8* %655) #12
  br label %656

656:                                              ; preds = %631, %654
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %257) #9
  %657 = load %"struct.jxl::PropertyDecisionNode"*, %"struct.jxl::PropertyDecisionNode"** %254, align 8
  %658 = icmp eq %"struct.jxl::PropertyDecisionNode"* %657, null
  br i1 %658, label %663, label %659

659:                                              ; preds = %656
  %660 = ptrtoint %"struct.jxl::PropertyDecisionNode"* %657 to i64
  %661 = bitcast %"struct.jxl::PropertyDecisionNode"** %255 to i64*
  store i64 %660, i64* %661, align 8
  %662 = bitcast %"struct.jxl::PropertyDecisionNode"* %657 to i8*
  call void @_ZdlPv(i8* %662) #12
  br label %663

663:                                              ; preds = %656, %659
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %253) #9
  br label %664

664:                                              ; preds = %245, %156, %150, %663
  %665 = phi i32 [ %632, %663 ], [ %154, %150 ], [ %159, %156 ], [ 0, %245 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %145) #9
  call void @_ZN3jxl11TreeSamplesD2Ev(%"struct.jxl::TreeSamples"* nonnull %14) #9
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %144) #9
  br label %666

666:                                              ; preds = %139, %664
  %667 = phi i32 [ %665, %664 ], [ %140, %139 ]
  %668 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %13, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl11GroupHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %668, align 8
  %669 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %13, i64 0, i32 3
  %670 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %669, i64 0, i32 0, i32 0
  %671 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %670, align 8
  %672 = icmp eq %"class.jxl::Transform"* %671, null
  br i1 %672, label %690, label %673

673:                                              ; preds = %666
  %674 = bitcast %"class.jxl::Transform"* %671 to i8*
  %675 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %13, i64 0, i32 3, i32 0, i32 1
  %676 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %675, align 8
  %677 = icmp eq %"class.jxl::Transform"* %676, %671
  br i1 %677, label %688, label %678

678:                                              ; preds = %673, %678
  %679 = phi %"class.jxl::Transform"* [ %680, %678 ], [ %676, %673 ]
  %680 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %679, i64 -1
  %681 = bitcast %"class.jxl::Transform"* %680 to void (%"class.jxl::Transform"*)***
  %682 = load void (%"class.jxl::Transform"*)**, void (%"class.jxl::Transform"*)*** %681, align 8
  %683 = load void (%"class.jxl::Transform"*)*, void (%"class.jxl::Transform"*)** %682, align 8
  call void %683(%"class.jxl::Transform"* %680) #9
  %684 = icmp eq %"class.jxl::Transform"* %680, %671
  br i1 %684, label %685, label %678

685:                                              ; preds = %678
  %686 = bitcast %"class.std::__1::vector.4"* %669 to i8**
  %687 = load i8*, i8** %686, align 8
  br label %688

688:                                              ; preds = %685, %673
  %689 = phi i8* [ %687, %685 ], [ %674, %673 ]
  store %"class.jxl::Transform"* %671, %"class.jxl::Transform"** %675, align 8
  call void @_ZdlPv(i8* %689) #12
  br label %690

690:                                              ; preds = %666, %688
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %59) #9
  br label %691

691:                                              ; preds = %56, %12, %690
  %692 = phi i32 [ %667, %690 ], [ 1, %12 ], [ 0, %56 ]
  ret i32 %692
}

declare void @_ZN3jxl11GroupHeaderC1Ev(%"struct.jxl::GroupHeader"*) unnamed_addr #2

declare void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"*) local_unnamed_addr #2

declare i32 @_ZN3jxl6Bundle5WriteERKNS_6FieldsEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::Fields"* dereferenceable(8), %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

declare i32 @_ZN3jxl11TreeSamples12SetPredictorENS_9PredictorENS_14ModularOptions10WPTreeModeE(%"struct.jxl::TreeSamples"*, i32, i32) local_unnamed_addr #2

declare i32 @_ZN3jxl11TreeSamples13SetPropertiesERKNSt3__16vectorIjNS1_9allocatorIjEEEENS_14ModularOptions10WPTreeModeE(%"struct.jxl::TreeSamples"*, %"class.std::__1::vector.18"* dereferenceable(24), i32) local_unnamed_addr #2

declare void @_ZN3jxl19CollectPixelSamplesERKNS_5ImageERKNS_14ModularOptionsEmRNSt3__16vectorIjNS6_9allocatorIjEEEESB_RNS7_IiNS8_IiEEEESE_(%"class.jxl::Image"* dereferenceable(104), %"struct.jxl::ModularOptions"* dereferenceable(88), i64, %"class.std::__1::vector.18"* dereferenceable(24), %"class.std::__1::vector.18"* dereferenceable(24), %"class.std::__1::vector.61"* dereferenceable(24), %"class.std::__1::vector.61"* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZN3jxl11TreeSamples21PreQuantizePropertiesERKNSt3__15arrayINS2_IjLm2EEELm2EEERKNS1_6vectorINS_21ModularMultiplierInfoENS1_9allocatorIS8_EEEERKNS7_IjNS9_IjEEEESH_RNS7_IiNS9_IiEEEESK_m(%"struct.jxl::TreeSamples"*, %"struct.std::__1::array.82"* dereferenceable(16), %"class.std::__1::vector.80"* dereferenceable(24), %"class.std::__1::vector.18"* dereferenceable(24), %"class.std::__1::vector.18"* dereferenceable(24), %"class.std::__1::vector.61"* dereferenceable(24), %"class.std::__1::vector.61"* dereferenceable(24), i64) local_unnamed_addr #2

declare void @_ZN3jxl12TokenizeTreeERKNSt3__16vectorINS_20PropertyDecisionNodeENS0_9allocatorIS2_EEEEPNS1_INS_5TokenENS3_IS8_EEEEPS5_(%"class.std::__1::vector.89"* dereferenceable(24), %"class.std::__1::vector.101"*, %"class.std::__1::vector.89"*) local_unnamed_addr #2

declare i64 @_ZN3jxl24BuildAndEncodeHistogramsERKNS_15HistogramParamsEmRNSt3__16vectorINS4_INS_5TokenENS3_9allocatorIS5_EEEENS6_IS8_EEEEPNS_19EntropyEncodingDataEPNS4_IhNS6_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::HistogramParams"* dereferenceable(56), i64, %"class.std::__1::vector.213"* dereferenceable(24), %"struct.jxl::EntropyEncodingData"*, %"class.std::__1::vector.48"*, %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

declare void @_ZN3jxl11WriteTokensERKNSt3__16vectorINS_5TokenENS0_9allocatorIS2_EEEERKNS_19EntropyEncodingDataERKNS1_IhNS3_IhEEEEPNS_9BitWriterEmPNS_6AuxOutE(%"class.std::__1::vector.101"* dereferenceable(24), %"struct.jxl::EntropyEncodingData"* dereferenceable(104), %"class.std::__1::vector.48"* dereferenceable(24), %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11TreeSamplesD2Ev(%"struct.jxl::TreeSamples"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 8, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = icmp eq i32* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i32* %3 to i64
  %7 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 8, i32 0, i32 1
  %8 = bitcast i32** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast i32* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #12
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 6
  %12 = getelementptr inbounds %"class.std::__1::vector.46", %"class.std::__1::vector.46"* %11, i64 0, i32 0, i32 0
  %13 = load %"class.std::__1::vector.48"*, %"class.std::__1::vector.48"** %12, align 8
  %14 = icmp eq %"class.std::__1::vector.48"* %13, null
  br i1 %14, label %37, label %15

15:                                               ; preds = %10
  %16 = bitcast %"class.std::__1::vector.48"* %13 to i8*
  %17 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 6, i32 0, i32 1
  %18 = load %"class.std::__1::vector.48"*, %"class.std::__1::vector.48"** %17, align 8
  %19 = icmp eq %"class.std::__1::vector.48"* %18, %13
  br i1 %19, label %35, label %20

20:                                               ; preds = %15, %30
  %21 = phi %"class.std::__1::vector.48"* [ %22, %30 ], [ %18, %15 ]
  %22 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %21, i64 -1
  %23 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %22, i64 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %30, label %26

26:                                               ; preds = %20
  %27 = ptrtoint i8* %24 to i64
  %28 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %21, i64 -1, i32 0, i32 1
  %29 = bitcast i8** %28 to i64*
  store i64 %27, i64* %29, align 8
  tail call void @_ZdlPv(i8* nonnull %24) #12
  br label %30

30:                                               ; preds = %26, %20
  %31 = icmp eq %"class.std::__1::vector.48"* %22, %13
  br i1 %31, label %32, label %20

32:                                               ; preds = %30
  %33 = bitcast %"class.std::__1::vector.46"* %11 to i8**
  %34 = load i8*, i8** %33, align 8
  br label %35

35:                                               ; preds = %32, %15
  %36 = phi i8* [ %34, %32 ], [ %16, %15 ]
  store %"class.std::__1::vector.48"* %13, %"class.std::__1::vector.48"** %17, align 8
  tail call void @_ZdlPv(i8* %36) #12
  br label %37

37:                                               ; preds = %10, %35
  %38 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5, i32 0, i32 0
  %39 = load i32*, i32** %38, align 8
  %40 = icmp eq i32* %39, null
  br i1 %40, label %46, label %41

41:                                               ; preds = %37
  %42 = ptrtoint i32* %39 to i64
  %43 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 5, i32 0, i32 1
  %44 = bitcast i32** %43 to i64*
  store i64 %42, i64* %44, align 8
  %45 = bitcast i32* %39 to i8*
  tail call void @_ZdlPv(i8* %45) #12
  br label %46

46:                                               ; preds = %37, %41
  %47 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4, i32 0, i32 0
  %48 = load i32*, i32** %47, align 8
  %49 = icmp eq i32* %48, null
  br i1 %49, label %55, label %50

50:                                               ; preds = %46
  %51 = ptrtoint i32* %48 to i64
  %52 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 4, i32 0, i32 1
  %53 = bitcast i32** %52 to i64*
  store i64 %51, i64* %53, align 8
  %54 = bitcast i32* %48 to i8*
  tail call void @_ZdlPv(i8* %54) #12
  br label %55

55:                                               ; preds = %46, %50
  %56 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 3
  %57 = getelementptr inbounds %"class.std::__1::vector.59", %"class.std::__1::vector.59"* %56, i64 0, i32 0, i32 0
  %58 = load %"class.std::__1::vector.61"*, %"class.std::__1::vector.61"** %57, align 8
  %59 = icmp eq %"class.std::__1::vector.61"* %58, null
  br i1 %59, label %83, label %60

60:                                               ; preds = %55
  %61 = bitcast %"class.std::__1::vector.61"* %58 to i8*
  %62 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 3, i32 0, i32 1
  %63 = load %"class.std::__1::vector.61"*, %"class.std::__1::vector.61"** %62, align 8
  %64 = icmp eq %"class.std::__1::vector.61"* %63, %58
  br i1 %64, label %81, label %65

65:                                               ; preds = %60, %76
  %66 = phi %"class.std::__1::vector.61"* [ %67, %76 ], [ %63, %60 ]
  %67 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %66, i64 -1
  %68 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %67, i64 0, i32 0, i32 0
  %69 = load i32*, i32** %68, align 8
  %70 = icmp eq i32* %69, null
  br i1 %70, label %76, label %71

71:                                               ; preds = %65
  %72 = ptrtoint i32* %69 to i64
  %73 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %66, i64 -1, i32 0, i32 1
  %74 = bitcast i32** %73 to i64*
  store i64 %72, i64* %74, align 8
  %75 = bitcast i32* %69 to i8*
  tail call void @_ZdlPv(i8* %75) #12
  br label %76

76:                                               ; preds = %71, %65
  %77 = icmp eq %"class.std::__1::vector.61"* %67, %58
  br i1 %77, label %78, label %65

78:                                               ; preds = %76
  %79 = bitcast %"class.std::__1::vector.59"* %56 to i8**
  %80 = load i8*, i8** %79, align 8
  br label %81

81:                                               ; preds = %78, %60
  %82 = phi i8* [ %80, %78 ], [ %61, %60 ]
  store %"class.std::__1::vector.61"* %58, %"class.std::__1::vector.61"** %62, align 8
  tail call void @_ZdlPv(i8* %82) #12
  br label %83

83:                                               ; preds = %55, %81
  %84 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2
  %85 = getelementptr inbounds %"class.std::__1::vector.46", %"class.std::__1::vector.46"* %84, i64 0, i32 0, i32 0
  %86 = load %"class.std::__1::vector.48"*, %"class.std::__1::vector.48"** %85, align 8
  %87 = icmp eq %"class.std::__1::vector.48"* %86, null
  br i1 %87, label %110, label %88

88:                                               ; preds = %83
  %89 = bitcast %"class.std::__1::vector.48"* %86 to i8*
  %90 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 2, i32 0, i32 1
  %91 = load %"class.std::__1::vector.48"*, %"class.std::__1::vector.48"** %90, align 8
  %92 = icmp eq %"class.std::__1::vector.48"* %91, %86
  br i1 %92, label %108, label %93

93:                                               ; preds = %88, %103
  %94 = phi %"class.std::__1::vector.48"* [ %95, %103 ], [ %91, %88 ]
  %95 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %94, i64 -1
  %96 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %95, i64 0, i32 0, i32 0
  %97 = load i8*, i8** %96, align 8
  %98 = icmp eq i8* %97, null
  br i1 %98, label %103, label %99

99:                                               ; preds = %93
  %100 = ptrtoint i8* %97 to i64
  %101 = getelementptr inbounds %"class.std::__1::vector.48", %"class.std::__1::vector.48"* %94, i64 -1, i32 0, i32 1
  %102 = bitcast i8** %101 to i64*
  store i64 %100, i64* %102, align 8
  tail call void @_ZdlPv(i8* nonnull %97) #12
  br label %103

103:                                              ; preds = %99, %93
  %104 = icmp eq %"class.std::__1::vector.48"* %95, %86
  br i1 %104, label %105, label %93

105:                                              ; preds = %103
  %106 = bitcast %"class.std::__1::vector.46"* %84 to i8**
  %107 = load i8*, i8** %106, align 8
  br label %108

108:                                              ; preds = %105, %88
  %109 = phi i8* [ %107, %105 ], [ %89, %88 ]
  store %"class.std::__1::vector.48"* %86, %"class.std::__1::vector.48"** %90, align 8
  tail call void @_ZdlPv(i8* %109) #12
  br label %110

110:                                              ; preds = %83, %108
  %111 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 0
  %112 = load i16*, i16** %111, align 8
  %113 = icmp eq i16* %112, null
  br i1 %113, label %119, label %114

114:                                              ; preds = %110
  %115 = ptrtoint i16* %112 to i64
  %116 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 1, i32 0, i32 1
  %117 = bitcast i16** %116 to i64*
  store i64 %115, i64* %117, align 8
  %118 = bitcast i16* %112 to i8*
  tail call void @_ZdlPv(i8* %118) #12
  br label %119

119:                                              ; preds = %110, %114
  %120 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 0
  %121 = load %"class.std::__1::vector.27"*, %"class.std::__1::vector.27"** %120, align 8
  %122 = icmp eq %"class.std::__1::vector.27"* %121, null
  br i1 %122, label %146, label %123

123:                                              ; preds = %119
  %124 = bitcast %"class.std::__1::vector.27"* %121 to i8*
  %125 = getelementptr inbounds %"struct.jxl::TreeSamples", %"struct.jxl::TreeSamples"* %0, i64 0, i32 0, i32 0, i32 1
  %126 = load %"class.std::__1::vector.27"*, %"class.std::__1::vector.27"** %125, align 8
  %127 = icmp eq %"class.std::__1::vector.27"* %126, %121
  br i1 %127, label %144, label %128

128:                                              ; preds = %123, %139
  %129 = phi %"class.std::__1::vector.27"* [ %130, %139 ], [ %126, %123 ]
  %130 = getelementptr inbounds %"class.std::__1::vector.27", %"class.std::__1::vector.27"* %129, i64 -1
  %131 = getelementptr inbounds %"class.std::__1::vector.27", %"class.std::__1::vector.27"* %130, i64 0, i32 0, i32 0
  %132 = load %"struct.jxl::TreeSamples::ResidualToken"*, %"struct.jxl::TreeSamples::ResidualToken"** %131, align 8
  %133 = icmp eq %"struct.jxl::TreeSamples::ResidualToken"* %132, null
  br i1 %133, label %139, label %134

134:                                              ; preds = %128
  %135 = ptrtoint %"struct.jxl::TreeSamples::ResidualToken"* %132 to i64
  %136 = getelementptr inbounds %"class.std::__1::vector.27", %"class.std::__1::vector.27"* %129, i64 -1, i32 0, i32 1
  %137 = bitcast %"struct.jxl::TreeSamples::ResidualToken"** %136 to i64*
  store i64 %135, i64* %137, align 8
  %138 = getelementptr inbounds %"struct.jxl::TreeSamples::ResidualToken", %"struct.jxl::TreeSamples::ResidualToken"* %132, i64 0, i32 0
  tail call void @_ZdlPv(i8* %138) #12
  br label %139

139:                                              ; preds = %134, %128
  %140 = icmp eq %"class.std::__1::vector.27"* %130, %121
  br i1 %140, label %141, label %128

141:                                              ; preds = %139
  %142 = bitcast %"struct.jxl::TreeSamples"* %0 to i8**
  %143 = load i8*, i8** %142, align 8
  br label %144

144:                                              ; preds = %141, %123
  %145 = phi i8* [ %143, %141 ], [ %124, %123 ]
  store %"class.std::__1::vector.27"* %121, %"class.std::__1::vector.27"** %125, align 8
  tail call void @_ZdlPv(i8* %145) #12
  br label %146

146:                                              ; preds = %119, %144
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11GroupHeaderD2Ev(%"struct.jxl::GroupHeader"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl11GroupHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 3
  %4 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %4, align 8
  %6 = icmp eq %"class.jxl::Transform"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.jxl::Transform"* %5 to i8*
  %9 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 3, i32 0, i32 1
  %10 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %9, align 8
  %11 = icmp eq %"class.jxl::Transform"* %10, %5
  br i1 %11, label %22, label %12

12:                                               ; preds = %7, %12
  %13 = phi %"class.jxl::Transform"* [ %14, %12 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %13, i64 -1
  %15 = bitcast %"class.jxl::Transform"* %14 to void (%"class.jxl::Transform"*)***
  %16 = load void (%"class.jxl::Transform"*)**, void (%"class.jxl::Transform"*)*** %15, align 8
  %17 = load void (%"class.jxl::Transform"*)*, void (%"class.jxl::Transform"*)** %16, align 8
  tail call void %17(%"class.jxl::Transform"* %14) #9
  %18 = icmp eq %"class.jxl::Transform"* %14, %5
  br i1 %18, label %19, label %12

19:                                               ; preds = %12
  %20 = bitcast %"class.std::__1::vector.4"* %3 to i8**
  %21 = load i8*, i8** %20, align 8
  br label %22

22:                                               ; preds = %19, %7
  %23 = phi i8* [ %21, %19 ], [ %8, %7 ]
  store %"class.jxl::Transform"* %5, %"class.jxl::Transform"** %9, align 8
  tail call void @_ZdlPv(i8* %23) #12
  br label %24

24:                                               ; preds = %1, %22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl22ModularGenericCompressERNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSC_9allocatorISE_EEEEPNS_11GroupHeaderEPNSD_INS_5TokenENSF_ISM_EEEESB_(%"class.jxl::Image"* dereferenceable(104), %"struct.jxl::ModularOptions"* nocapture readonly dereferenceable(88), %"struct.jxl::BitWriter"*, %"struct.jxl::AuxOut"*, i64, i64, %"struct.jxl::TreeSamples"*, i64*, %"class.std::__1::vector.89"*, %"struct.jxl::GroupHeader"*, %"class.std::__1::vector.101"*, i64* nocapture) local_unnamed_addr #0 {
  %13 = alloca %"struct.jxl::ModularOptions", align 8
  %14 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %77, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.jxl::Image", %"class.jxl::Image"* %0, i64 0, i32 3
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %77, label %21

21:                                               ; preds = %17
  %22 = bitcast %"struct.jxl::ModularOptions"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %22) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %22, i8* align 8 bitcast (%"struct.jxl::ModularOptions"* @__const._ZN3jxl22ModularGenericCompressERNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSC_9allocatorISE_EEEEPNS_11GroupHeaderEPNSD_INS_5TokenENSF_ISM_EEEESB_.options to i8*), i64 88, i1 false)
  %23 = bitcast %"struct.jxl::ModularOptions"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %22, i8* align 8 %23, i64 16, i1 false) #9
  %24 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %13, i64 0, i32 3
  %25 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1, i64 0, i32 3
  %26 = bitcast %"class.std::__1::vector.18"* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 24, i1 false) #9
  %27 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1, i64 0, i32 3, i32 0, i32 1
  %28 = bitcast i32** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast %"class.std::__1::vector.18"* %25 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %29, %31
  %33 = ashr exact i64 %32, 2
  %34 = icmp eq i64 %32, 0
  br i1 %34, label %57, label %35

35:                                               ; preds = %21
  %36 = icmp ugt i64 %33, 4611686018427387903
  br i1 %36, label %37, label %39

37:                                               ; preds = %35
  %38 = bitcast %"class.std::__1::vector.18"* %24 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #11
  unreachable

39:                                               ; preds = %35
  %40 = tail call i8* @_Znwm(i64 %32) #12
  %41 = bitcast i8* %40 to i32*
  %42 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %13, i64 0, i32 3, i32 0, i32 1
  %43 = bitcast i32** %42 to i8**
  store i8* %40, i8** %43, align 8
  %44 = bitcast %"class.std::__1::vector.18"* %24 to i8**
  store i8* %40, i8** %44, align 8
  %45 = getelementptr inbounds i32, i32* %41, i64 %33
  %46 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %13, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  store i32* %45, i32** %46, align 8
  %47 = bitcast i32** %42 to i64*
  %48 = ptrtoint i8* %40 to i64
  %49 = icmp sgt i64 %32, 0
  br i1 %49, label %50, label %55

50:                                               ; preds = %39
  %51 = lshr exact i64 %32, 2
  %52 = inttoptr i64 %31 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %40, i8* align 4 %52, i64 %32, i1 false) #9
  %53 = getelementptr inbounds i32, i32* %41, i64 %51
  %54 = ptrtoint i32* %53 to i64
  br label %55

55:                                               ; preds = %50, %39
  %56 = phi i64 [ %54, %50 ], [ %48, %39 ]
  store i64 %56, i64* %47, align 8
  br label %57

57:                                               ; preds = %21, %55
  %58 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %13, i64 0, i32 4
  %59 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %1, i64 0, i32 4
  %60 = bitcast float* %58 to i8*
  %61 = bitcast float* %59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 41, i1 false) #9
  %62 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %13, i64 0, i32 7
  %63 = load i32, i32* %62, align 8
  %64 = icmp eq i32 %63, -1
  br i1 %64, label %65, label %66

65:                                               ; preds = %57
  store i32 5, i32* %62, align 8
  br label %66

66:                                               ; preds = %65, %57
  %67 = call i32 @_ZN3jxl13ModularEncodeERKNS_5ImageERKNS_14ModularOptionsEPNS_9BitWriterEPNS_6AuxOutEmmPNS_11TreeSamplesEPmPKNSt3__16vectorINS_20PropertyDecisionNodeENSD_9allocatorISF_EEEEPNS_11GroupHeaderEPNSE_INS_5TokenENSG_ISN_EEEESC_(%"class.jxl::Image"* dereferenceable(104) %0, %"struct.jxl::ModularOptions"* nonnull dereferenceable(88) %13, %"struct.jxl::BitWriter"* %2, %"struct.jxl::AuxOut"* %3, i64 %4, i64 %5, %"struct.jxl::TreeSamples"* %6, i64* %7, %"class.std::__1::vector.89"* %8, %"struct.jxl::GroupHeader"* %9, %"class.std::__1::vector.101"* %10, i64* %11)
  %68 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %13, i64 0, i32 3, i32 0, i32 0
  %69 = load i32*, i32** %68, align 8
  %70 = icmp eq i32* %69, null
  br i1 %70, label %76, label %71

71:                                               ; preds = %66
  %72 = ptrtoint i32* %69 to i64
  %73 = getelementptr inbounds %"struct.jxl::ModularOptions", %"struct.jxl::ModularOptions"* %13, i64 0, i32 3, i32 0, i32 1
  %74 = bitcast i32** %73 to i64*
  store i64 %72, i64* %74, align 8
  %75 = bitcast i32* %69 to i8*
  call void @_ZdlPv(i8* %75) #12
  br label %76

76:                                               ; preds = %66, %71
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %22) #9
  br label %77

77:                                               ; preds = %12, %17, %76
  %78 = phi i32 [ %67, %76 ], [ 0, %17 ], [ 0, %12 ]
  ret i32 %78
}

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl8weighted6HeaderD0Ev(%"struct.jxl::weighted::Header"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"struct.jxl::weighted::Header"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl8weighted6Header4NameEv(%"struct.jxl::weighted::Header"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl8weighted6Header11VisitFieldsEPNS_7VisitorE(%"struct.jxl::weighted::Header"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 comdat align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 0
  %11 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 1
  %12 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)***
  %13 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*** %12, align 8
  %14 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)** %13, i64 9
  %15 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)** %14, align 8
  %16 = tail call i32 %15(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* dereferenceable(8) %10, i8* %11) #9
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %23

18:                                               ; preds = %2
  %19 = bitcast %"class.jxl::Visitor"* %1 to void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  %20 = load void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %20, i64 10
  %22 = load void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %21, align 8
  tail call void %22(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %10) #9
  br label %128

23:                                               ; preds = %2
  %24 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 2
  %25 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25) #9
  %26 = load i32, i32* %24, align 4
  store i32 %26, i32* %9, align 4
  %27 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %28 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %27, align 8
  %29 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %28, i64 5
  %30 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %29, align 8
  %31 = call i32 %30(%"class.jxl::Visitor"* %1, i64 5, i32 16, i32* nonnull %9) #9
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %34, label %33

33:                                               ; preds = %23
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25) #9
  br label %128

34:                                               ; preds = %23
  %35 = load i32, i32* %9, align 4
  store i32 %35, i32* %24, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25) #9
  %36 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 3
  %37 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %37) #9
  %38 = load i32, i32* %36, align 4
  store i32 %38, i32* %8, align 4
  %39 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %27, align 8
  %40 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %39, i64 5
  %41 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %40, align 8
  %42 = call i32 %41(%"class.jxl::Visitor"* %1, i64 5, i32 10, i32* nonnull %8) #9
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %45, label %44

44:                                               ; preds = %34
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %37) #9
  br label %128

45:                                               ; preds = %34
  %46 = load i32, i32* %8, align 4
  store i32 %46, i32* %36, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %37) #9
  %47 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 4
  %48 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %48) #9
  %49 = load i32, i32* %47, align 4
  store i32 %49, i32* %7, align 4
  %50 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %27, align 8
  %51 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %50, i64 5
  %52 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %51, align 8
  %53 = call i32 %52(%"class.jxl::Visitor"* %1, i64 5, i32 7, i32* nonnull %7) #9
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %56, label %55

55:                                               ; preds = %45
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %48) #9
  br label %128

56:                                               ; preds = %45
  %57 = load i32, i32* %7, align 4
  store i32 %57, i32* %47, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %48) #9
  %58 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 5
  %59 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %59) #9
  %60 = load i32, i32* %58, align 4
  store i32 %60, i32* %5, align 4
  %61 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %27, align 8
  %62 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %61, i64 5
  %63 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %62, align 8
  %64 = call i32 %63(%"class.jxl::Visitor"* %1, i64 5, i32 7, i32* nonnull %5) #9
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %67, label %66

66:                                               ; preds = %56
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %59) #9
  br label %128

67:                                               ; preds = %56
  %68 = load i32, i32* %5, align 4
  store i32 %68, i32* %58, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %59) #9
  %69 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 6
  %70 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %70) #9
  %71 = load i32, i32* %69, align 4
  store i32 %71, i32* %3, align 4
  %72 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %27, align 8
  %73 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %72, i64 5
  %74 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %73, align 8
  %75 = call i32 %74(%"class.jxl::Visitor"* %1, i64 5, i32 7, i32* nonnull %3) #9
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %78, label %77

77:                                               ; preds = %67
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %70) #9
  br label %128

78:                                               ; preds = %67
  %79 = load i32, i32* %3, align 4
  store i32 %79, i32* %69, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %70) #9
  %80 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 7
  %81 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %81) #9
  %82 = load i32, i32* %80, align 4
  store i32 %82, i32* %4, align 4
  %83 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %27, align 8
  %84 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %83, i64 5
  %85 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %84, align 8
  %86 = call i32 %85(%"class.jxl::Visitor"* %1, i64 5, i32 0, i32* nonnull %4) #9
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %89, label %88

88:                                               ; preds = %78
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %81) #9
  br label %128

89:                                               ; preds = %78
  %90 = load i32, i32* %4, align 4
  store i32 %90, i32* %80, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %81) #9
  %91 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 8
  %92 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %92) #9
  %93 = load i32, i32* %91, align 4
  store i32 %93, i32* %6, align 4
  %94 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %27, align 8
  %95 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %94, i64 5
  %96 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %95, align 8
  %97 = call i32 %96(%"class.jxl::Visitor"* %1, i64 5, i32 0, i32* nonnull %6) #9
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %100, label %99

99:                                               ; preds = %89
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %92) #9
  br label %128

100:                                              ; preds = %89
  %101 = load i32, i32* %6, align 4
  store i32 %101, i32* %91, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %92) #9
  %102 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 9, i64 0
  %103 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %27, align 8
  %104 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %103, i64 5
  %105 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %104, align 8
  %106 = call i32 %105(%"class.jxl::Visitor"* %1, i64 4, i32 13, i32* %102) #9
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %128

108:                                              ; preds = %100
  %109 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 9, i64 1
  %110 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %27, align 8
  %111 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %110, i64 5
  %112 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %111, align 8
  %113 = call i32 %112(%"class.jxl::Visitor"* %1, i64 4, i32 12, i32* %109) #9
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %128

115:                                              ; preds = %108
  %116 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 9, i64 2
  %117 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %27, align 8
  %118 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %117, i64 5
  %119 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %118, align 8
  %120 = call i32 %119(%"class.jxl::Visitor"* %1, i64 4, i32 12, i32* %116) #9
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %128

122:                                              ; preds = %115
  %123 = getelementptr inbounds %"struct.jxl::weighted::Header", %"struct.jxl::weighted::Header"* %0, i64 0, i32 9, i64 3
  %124 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %27, align 8
  %125 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %124, i64 5
  %126 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %125, align 8
  %127 = call i32 %126(%"class.jxl::Visitor"* %1, i64 4, i32 12, i32* %123) #9
  ret i32 %127

128:                                              ; preds = %100, %108, %115, %33, %44, %55, %66, %77, %88, %99, %18
  %129 = phi i32 [ 0, %18 ], [ %120, %115 ], [ %113, %108 ], [ %106, %100 ], [ %97, %99 ], [ %86, %88 ], [ %75, %77 ], [ %64, %66 ], [ %53, %55 ], [ %42, %44 ], [ %31, %33 ]
  ret i32 %129
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.18"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #9
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.18"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.18"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #11
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #11
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #12
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #9
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #9
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #12
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.61"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #9
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.61"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.61"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #11
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #11
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #12
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #9
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #9
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #12
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #9

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6detail7PredictILi14EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl(%"struct.jxl::PredictionResult"* noalias sret, %"class.std::__1::vector.61"*, i64, i32* noalias, i64, i64, i64, i32, %"class.jxl::MATreeLookup"*, %"class.jxl::Channel"*, %"struct.jxl::weighted::State"*, i64*) local_unnamed_addr #3 comdat {
  %13 = sub i64 0, %4
  %14 = icmp ne i64 %5, 0
  br i1 %14, label %21, label %15

15:                                               ; preds = %12
  %16 = icmp eq i64 %6, 0
  br i1 %16, label %77, label %17

17:                                               ; preds = %15
  %18 = getelementptr inbounds i32, i32* %3, i64 %13
  %19 = load i32, i32* %18, align 4
  %20 = sext i32 %19 to i64
  br label %34

21:                                               ; preds = %12
  %22 = getelementptr inbounds i32, i32* %3, i64 -1
  %23 = load i32, i32* %22, align 4
  %24 = sext i32 %23 to i64
  %25 = icmp eq i64 %6, 0
  br i1 %25, label %46, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds i32, i32* %3, i64 %13
  %28 = load i32, i32* %27, align 4
  %29 = sext i32 %28 to i64
  %30 = xor i64 %4, -1
  %31 = getelementptr inbounds i32, i32* %3, i64 %30
  %32 = load i32, i32* %31, align 4
  %33 = sext i32 %32 to i64
  br label %34

34:                                               ; preds = %17, %26
  %35 = phi i64 [ %29, %26 ], [ %20, %17 ]
  %36 = phi i32 [ %23, %26 ], [ %19, %17 ]
  %37 = phi i64 [ %24, %26 ], [ %20, %17 ]
  %38 = phi i64 [ %33, %26 ], [ %20, %17 ]
  %39 = add i64 %5, 1
  %40 = icmp ult i64 %39, %2
  br i1 %40, label %41, label %46

41:                                               ; preds = %34
  %42 = sub nsw i64 1, %4
  %43 = getelementptr inbounds i32, i32* %3, i64 %42
  %44 = load i32, i32* %43, align 4
  %45 = sext i32 %44 to i64
  br label %46

46:                                               ; preds = %21, %34, %41
  %47 = phi i64 [ %38, %41 ], [ %38, %34 ], [ %24, %21 ]
  %48 = phi i1 [ true, %41 ], [ true, %34 ], [ false, %21 ]
  %49 = phi i64 [ %37, %41 ], [ %37, %34 ], [ %24, %21 ]
  %50 = phi i32 [ %36, %41 ], [ %36, %34 ], [ %23, %21 ]
  %51 = phi i64 [ %35, %41 ], [ %35, %34 ], [ %24, %21 ]
  %52 = phi i64 [ %45, %41 ], [ %35, %34 ], [ %24, %21 ]
  %53 = icmp ugt i64 %5, 1
  br i1 %53, label %54, label %58

54:                                               ; preds = %46
  %55 = getelementptr inbounds i32, i32* %3, i64 -2
  %56 = load i32, i32* %55, align 4
  %57 = sext i32 %56 to i64
  br label %58

58:                                               ; preds = %46, %54
  %59 = phi i64 [ %57, %54 ], [ %49, %46 ]
  %60 = icmp ugt i64 %6, 1
  br i1 %60, label %61, label %67

61:                                               ; preds = %58
  %62 = shl i64 %4, 1
  %63 = sub i64 0, %62
  %64 = getelementptr inbounds i32, i32* %3, i64 %63
  %65 = load i32, i32* %64, align 4
  %66 = sext i32 %65 to i64
  br label %67

67:                                               ; preds = %58, %61
  %68 = phi i64 [ %66, %61 ], [ %51, %58 ]
  %69 = add i64 %5, 2
  %70 = icmp ult i64 %69, %2
  %71 = and i1 %70, %48
  br i1 %71, label %72, label %77

72:                                               ; preds = %67
  %73 = sub nsw i64 2, %4
  %74 = getelementptr inbounds i32, i32* %3, i64 %73
  %75 = load i32, i32* %74, align 4
  %76 = sext i32 %75 to i64
  br label %77

77:                                               ; preds = %15, %67, %72
  %78 = phi i64 [ %68, %72 ], [ %68, %67 ], [ 0, %15 ]
  %79 = phi i64 [ %52, %72 ], [ %52, %67 ], [ 0, %15 ]
  %80 = phi i64 [ %51, %72 ], [ %51, %67 ], [ 0, %15 ]
  %81 = phi i32 [ %50, %72 ], [ %50, %67 ], [ 0, %15 ]
  %82 = phi i64 [ %49, %72 ], [ %49, %67 ], [ 0, %15 ]
  %83 = phi i64 [ %47, %72 ], [ %47, %67 ], [ 0, %15 ]
  %84 = phi i64 [ %59, %72 ], [ %59, %67 ], [ 0, %15 ]
  %85 = phi i64 [ %76, %72 ], [ %52, %67 ], [ 0, %15 ]
  %86 = trunc i64 %5 to i32
  %87 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %1, i64 0, i32 0, i32 0
  %88 = load i32*, i32** %87, align 8
  %89 = getelementptr inbounds i32, i32* %88, i64 3
  store i32 %86, i32* %89, align 4
  %90 = sub nsw i64 0, %80
  %91 = icmp slt i64 %80, 0
  %92 = select i1 %91, i64 %90, i64 %80
  %93 = trunc i64 %92 to i32
  %94 = load i32*, i32** %87, align 8
  %95 = getelementptr inbounds i32, i32* %94, i64 4
  store i32 %93, i32* %95, align 4
  %96 = sub nsw i64 0, %82
  %97 = icmp slt i64 %82, 0
  %98 = select i1 %97, i64 %96, i64 %82
  %99 = trunc i64 %98 to i32
  %100 = load i32*, i32** %87, align 8
  %101 = getelementptr inbounds i32, i32* %100, i64 5
  store i32 %99, i32* %101, align 4
  %102 = trunc i64 %80 to i32
  %103 = load i32*, i32** %87, align 8
  %104 = getelementptr inbounds i32, i32* %103, i64 6
  store i32 %102, i32* %104, align 4
  %105 = load i32*, i32** %87, align 8
  %106 = getelementptr inbounds i32, i32* %105, i64 7
  store i32 %81, i32* %106, align 4
  %107 = load i32*, i32** %87, align 8
  %108 = getelementptr inbounds i32, i32* %107, i64 9
  %109 = load i32, i32* %108, align 4
  %110 = sub i32 %81, %109
  %111 = getelementptr inbounds i32, i32* %107, i64 8
  store i32 %110, i32* %111, align 4
  %112 = add nsw i64 %80, %82
  %113 = sub nsw i64 %112, %83
  %114 = trunc i64 %113 to i32
  %115 = load i32*, i32** %87, align 8
  %116 = getelementptr inbounds i32, i32* %115, i64 9
  store i32 %114, i32* %116, align 4
  %117 = trunc i64 %83 to i32
  %118 = sub i32 %81, %117
  %119 = load i32*, i32** %87, align 8
  %120 = getelementptr inbounds i32, i32* %119, i64 10
  store i32 %118, i32* %120, align 4
  %121 = sub nsw i64 %83, %80
  %122 = trunc i64 %121 to i32
  %123 = load i32*, i32** %87, align 8
  %124 = getelementptr inbounds i32, i32* %123, i64 11
  store i32 %122, i32* %124, align 4
  %125 = sub nsw i64 %80, %79
  %126 = trunc i64 %125 to i32
  %127 = load i32*, i32** %87, align 8
  %128 = getelementptr inbounds i32, i32* %127, i64 12
  store i32 %126, i32* %128, align 4
  %129 = sub nsw i64 %80, %78
  %130 = trunc i64 %129 to i32
  %131 = load i32*, i32** %87, align 8
  %132 = getelementptr inbounds i32, i32* %131, i64 13
  store i32 %130, i32* %132, align 4
  %133 = trunc i64 %84 to i32
  %134 = sub i32 %81, %133
  %135 = load i32*, i32** %87, align 8
  %136 = getelementptr inbounds i32, i32* %135, i64 14
  store i32 %134, i32* %136, align 4
  %137 = and i64 %6, 1
  %138 = icmp ne i64 %137, 0
  %139 = add i64 %2, 2
  %140 = select i1 %138, i64 %139, i64 0
  %141 = add i64 %140, %5
  %142 = add i64 %2, -1
  %143 = icmp ugt i64 %142, %5
  %144 = zext i1 %143 to i64
  %145 = add i64 %141, %144
  %146 = zext i1 %14 to i64
  %147 = sub i64 %141, %146
  %148 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 2, i64 0, i32 0, i32 0
  %149 = load i32*, i32** %148, align 8
  %150 = getelementptr inbounds i32, i32* %149, i64 %141
  %151 = load i32, i32* %150, align 4
  %152 = getelementptr inbounds i32, i32* %149, i64 %145
  %153 = load i32, i32* %152, align 4
  %154 = add i32 %153, %151
  %155 = getelementptr inbounds i32, i32* %149, i64 %147
  %156 = load i32, i32* %155, align 4
  %157 = add i32 %154, %156
  %158 = zext i32 %157 to i64
  %159 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 9, i64 0
  %160 = load i32, i32* %159, align 4
  %161 = add nuw nsw i64 %158, 1
  %162 = tail call i64 @llvm.ctlz.i64(i64 %161, i1 true) #9, !range !12
  %163 = trunc i64 %162 to i32
  %164 = sub nsw i32 58, %163
  %165 = icmp sgt i32 %164, 0
  %166 = select i1 %165, i32 %164, i32 0
  %167 = zext i32 %166 to i64
  %168 = lshr i64 %158, %167
  %169 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 5, i64 %168
  %170 = load i32, i32* %169, align 4
  %171 = mul i32 %170, %160
  %172 = lshr i32 %171, %166
  %173 = add i32 %172, 4
  %174 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 2, i64 1, i32 0, i32 0
  %175 = load i32*, i32** %174, align 8
  %176 = getelementptr inbounds i32, i32* %175, i64 %141
  %177 = load i32, i32* %176, align 4
  %178 = getelementptr inbounds i32, i32* %175, i64 %145
  %179 = load i32, i32* %178, align 4
  %180 = add i32 %179, %177
  %181 = getelementptr inbounds i32, i32* %175, i64 %147
  %182 = load i32, i32* %181, align 4
  %183 = add i32 %180, %182
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 9, i64 1
  %186 = load i32, i32* %185, align 4
  %187 = add nuw nsw i64 %184, 1
  %188 = tail call i64 @llvm.ctlz.i64(i64 %187, i1 true) #9, !range !12
  %189 = trunc i64 %188 to i32
  %190 = sub nsw i32 58, %189
  %191 = icmp sgt i32 %190, 0
  %192 = select i1 %191, i32 %190, i32 0
  %193 = zext i32 %192 to i64
  %194 = lshr i64 %184, %193
  %195 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 5, i64 %194
  %196 = load i32, i32* %195, align 4
  %197 = mul i32 %196, %186
  %198 = lshr i32 %197, %192
  %199 = add i32 %198, 4
  %200 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 2, i64 2, i32 0, i32 0
  %201 = load i32*, i32** %200, align 8
  %202 = getelementptr inbounds i32, i32* %201, i64 %141
  %203 = load i32, i32* %202, align 4
  %204 = getelementptr inbounds i32, i32* %201, i64 %145
  %205 = load i32, i32* %204, align 4
  %206 = add i32 %205, %203
  %207 = getelementptr inbounds i32, i32* %201, i64 %147
  %208 = load i32, i32* %207, align 4
  %209 = add i32 %206, %208
  %210 = zext i32 %209 to i64
  %211 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 9, i64 2
  %212 = load i32, i32* %211, align 4
  %213 = add nuw nsw i64 %210, 1
  %214 = tail call i64 @llvm.ctlz.i64(i64 %213, i1 true) #9, !range !12
  %215 = trunc i64 %214 to i32
  %216 = sub nsw i32 58, %215
  %217 = icmp sgt i32 %216, 0
  %218 = select i1 %217, i32 %216, i32 0
  %219 = zext i32 %218 to i64
  %220 = lshr i64 %210, %219
  %221 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 5, i64 %220
  %222 = load i32, i32* %221, align 4
  %223 = mul i32 %222, %212
  %224 = lshr i32 %223, %218
  %225 = add i32 %224, 4
  %226 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 2, i64 3, i32 0, i32 0
  %227 = load i32*, i32** %226, align 8
  %228 = getelementptr inbounds i32, i32* %227, i64 %141
  %229 = load i32, i32* %228, align 4
  %230 = getelementptr inbounds i32, i32* %227, i64 %145
  %231 = load i32, i32* %230, align 4
  %232 = add i32 %231, %229
  %233 = getelementptr inbounds i32, i32* %227, i64 %147
  %234 = load i32, i32* %233, align 4
  %235 = add i32 %232, %234
  %236 = zext i32 %235 to i64
  %237 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 9, i64 3
  %238 = load i32, i32* %237, align 4
  %239 = add nuw nsw i64 %236, 1
  %240 = tail call i64 @llvm.ctlz.i64(i64 %239, i1 true) #9, !range !12
  %241 = trunc i64 %240 to i32
  %242 = sub nsw i32 58, %241
  %243 = icmp sgt i32 %242, 0
  %244 = select i1 %243, i32 %242, i32 0
  %245 = zext i32 %244 to i64
  %246 = lshr i64 %236, %245
  %247 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 5, i64 %246
  %248 = load i32, i32* %247, align 4
  %249 = mul i32 %248, %238
  %250 = lshr i32 %249, %244
  %251 = add i32 %250, 4
  %252 = shl nsw i64 %80, 3
  %253 = shl nsw i64 %82, 3
  %254 = shl nsw i64 %79, 3
  %255 = shl nsw i64 %83, 3
  %256 = shl nsw i64 %78, 3
  %257 = icmp eq i64 %5, 0
  br i1 %257, label %258, label %261

258:                                              ; preds = %77
  %259 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 3, i32 0, i32 0
  %260 = load i32*, i32** %259, align 8
  br label %270

261:                                              ; preds = %77
  %262 = select i1 %138, i64 0, i64 %139
  %263 = add i64 %5, -1
  %264 = add i64 %263, %262
  %265 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 3, i32 0, i32 0
  %266 = load i32*, i32** %265, align 8
  %267 = getelementptr inbounds i32, i32* %266, i64 %264
  %268 = load i32, i32* %267, align 4
  %269 = sext i32 %268 to i64
  br label %270

270:                                              ; preds = %261, %258
  %271 = phi i32* [ %266, %261 ], [ %260, %258 ]
  %272 = phi i64 [ %269, %261 ], [ 0, %258 ]
  %273 = getelementptr inbounds i32, i32* %271, i64 %141
  %274 = load i32, i32* %273, align 4
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds i32, i32* %271, i64 %147
  %277 = load i32, i32* %276, align 4
  %278 = sext i32 %277 to i64
  %279 = add nsw i64 %272, %275
  %280 = getelementptr inbounds i32, i32* %271, i64 %145
  %281 = load i32, i32* %280, align 4
  %282 = sext i32 %281 to i64
  %283 = sub nsw i64 0, %275
  %284 = icmp slt i64 %275, 0
  %285 = select i1 %284, i64 %283, i64 %275
  %286 = sub nsw i64 0, %272
  %287 = icmp slt i64 %272, 0
  %288 = select i1 %287, i64 %286, i64 %272
  %289 = icmp sgt i64 %285, %288
  %290 = select i1 %289, i64 %275, i64 %272
  %291 = sub nsw i64 0, %278
  %292 = icmp slt i64 %278, 0
  %293 = select i1 %292, i64 %291, i64 %278
  %294 = sub nsw i64 0, %290
  %295 = icmp slt i64 %290, 0
  %296 = select i1 %295, i64 %294, i64 %290
  %297 = icmp sgt i64 %293, %296
  %298 = select i1 %297, i64 %278, i64 %290
  %299 = sub nsw i64 0, %282
  %300 = icmp slt i64 %282, 0
  %301 = select i1 %300, i64 %299, i64 %282
  %302 = sub nsw i64 0, %298
  %303 = icmp slt i64 %298, 0
  %304 = select i1 %303, i64 %302, i64 %298
  %305 = icmp sgt i64 %301, %304
  %306 = select i1 %305, i64 %282, i64 %298
  %307 = trunc i64 %306 to i32
  %308 = load i32*, i32** %87, align 8
  %309 = getelementptr inbounds i32, i32* %308, i64 15
  store i32 %307, i32* %309, align 4
  %310 = sub nsw i64 %253, %252
  %311 = add nsw i64 %310, %254
  %312 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 0, i64 0
  store i64 %311, i64* %312, align 8
  %313 = add nsw i64 %279, %282
  %314 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 2
  %315 = load i32, i32* %314, align 4
  %316 = sext i32 %315 to i64
  %317 = mul nsw i64 %313, %316
  %318 = ashr i64 %317, 5
  %319 = sub nsw i64 %252, %318
  %320 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 0, i64 1
  store i64 %319, i64* %320, align 8
  %321 = add nsw i64 %279, %278
  %322 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 3
  %323 = load i32, i32* %322, align 8
  %324 = sext i32 %323 to i64
  %325 = mul nsw i64 %321, %324
  %326 = ashr i64 %325, 5
  %327 = sub nsw i64 %253, %326
  %328 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 0, i64 2
  store i64 %327, i64* %328, align 8
  %329 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 4
  %330 = load i32, i32* %329, align 4
  %331 = sext i32 %330 to i64
  %332 = mul nsw i64 %331, %278
  %333 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 5
  %334 = load i32, i32* %333, align 8
  %335 = sext i32 %334 to i64
  %336 = mul nsw i64 %335, %275
  %337 = add nsw i64 %336, %332
  %338 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 6
  %339 = load i32, i32* %338, align 4
  %340 = sext i32 %339 to i64
  %341 = mul nsw i64 %340, %282
  %342 = add nsw i64 %337, %341
  %343 = sub nsw i64 %256, %252
  %344 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 7
  %345 = load i32, i32* %344, align 8
  %346 = sext i32 %345 to i64
  %347 = mul nsw i64 %343, %346
  %348 = add nsw i64 %342, %347
  %349 = sub nsw i64 %255, %253
  %350 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 8
  %351 = load i32, i32* %350, align 4
  %352 = sext i32 %351 to i64
  %353 = mul nsw i64 %349, %352
  %354 = add nsw i64 %348, %353
  %355 = ashr i64 %354, 5
  %356 = sub nsw i64 %252, %355
  %357 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 0, i64 3
  store i64 %356, i64* %357, align 8
  %358 = add i32 %199, %173
  %359 = add i32 %358, %225
  %360 = add i32 %359, %251
  %361 = tail call i32 @llvm.ctlz.i32(i32 %360, i1 true) #9, !range !13
  %362 = sub nsw i32 27, %361
  %363 = lshr i32 %173, %362
  %364 = lshr i32 %199, %362
  %365 = add i32 %364, %363
  %366 = lshr i32 %225, %362
  %367 = add i32 %365, %366
  %368 = lshr i32 %251, %362
  %369 = add i32 %367, %368
  %370 = lshr i32 %369, 1
  %371 = add nsw i32 %370, -1
  %372 = zext i32 %371 to i64
  %373 = zext i32 %363 to i64
  %374 = mul nsw i64 %311, %373
  %375 = zext i32 %364 to i64
  %376 = mul nsw i64 %319, %375
  %377 = zext i32 %366 to i64
  %378 = mul nsw i64 %327, %377
  %379 = zext i32 %368 to i64
  %380 = mul nsw i64 %356, %379
  %381 = add i64 %374, %372
  %382 = add i64 %381, %376
  %383 = add i64 %382, %378
  %384 = add i64 %383, %380
  %385 = add i32 %369, -1
  %386 = zext i32 %385 to i64
  %387 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 5, i64 %386
  %388 = load i32, i32* %387, align 4, !noalias !41
  %389 = zext i32 %388 to i64
  %390 = mul nsw i64 %384, %389
  %391 = ashr i64 %390, 24
  %392 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 1
  %393 = xor i64 %272, %275
  %394 = xor i32 %277, %274
  %395 = sext i32 %394 to i64
  %396 = or i64 %393, %395
  %397 = icmp sgt i64 %396, 0
  br i1 %397, label %411, label %398

398:                                              ; preds = %270
  %399 = icmp slt i64 %254, %252
  %400 = select i1 %399, i64 %252, i64 %254
  %401 = icmp slt i64 %253, %400
  %402 = select i1 %401, i64 %400, i64 %253
  %403 = icmp slt i64 %252, %254
  %404 = select i1 %403, i64 %252, i64 %254
  %405 = icmp slt i64 %404, %253
  %406 = select i1 %405, i64 %404, i64 %253
  %407 = icmp slt i64 %391, %402
  %408 = select i1 %407, i64 %391, i64 %402
  %409 = icmp slt i64 %406, %408
  %410 = select i1 %409, i64 %408, i64 %406
  br label %411

411:                                              ; preds = %270, %398
  %412 = phi i64 [ %410, %398 ], [ %391, %270 ]
  store i64 %412, i64* %392, align 8
  %413 = add nsw i64 %412, 3
  %414 = ashr i64 %413, 3
  %415 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %416 = load i8*, i8** %415, align 8
  %417 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 0, i32 0, i32 4
  %418 = load i64, i64* %417, align 8
  %419 = mul i64 %418, %5
  %420 = getelementptr inbounds i8, i8* %416, i64 %419
  %421 = ptrtoint i8* %420 to i64
  %422 = and i64 %421, 63
  %423 = icmp eq i64 %422, 0
  tail call void @llvm.assume(i1 %423) #9
  %424 = bitcast i8* %420 to i32*
  %425 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 1
  %426 = load i64, i64* %425, align 8
  %427 = icmp eq i64 %426, 0
  br i1 %427, label %428, label %487

428:                                              ; preds = %487, %411
  %429 = bitcast %"struct.jxl::PredictionResult"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %429, i8 -86, i64 24, i1 false)
  %430 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %0, i64 0, i32 0
  store i32 0, i32* %430, align 8
  %431 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %0, i64 0, i32 1
  store i64 0, i64* %11, align 8
  %432 = getelementptr inbounds i64, i64* %11, i64 1
  store i64 %82, i64* %432, align 8
  %433 = getelementptr inbounds i64, i64* %11, i64 2
  store i64 %80, i64* %433, align 8
  %434 = sub nsw i64 %113, %82
  %435 = sub nsw i64 0, %434
  %436 = icmp slt i64 %434, 0
  %437 = select i1 %436, i64 %435, i64 %434
  %438 = sub nsw i64 %113, %80
  %439 = sub nsw i64 0, %438
  %440 = icmp slt i64 %438, 0
  %441 = select i1 %440, i64 %439, i64 %438
  %442 = icmp slt i64 %437, %441
  %443 = select i1 %442, i64 %82, i64 %80
  %444 = getelementptr inbounds i64, i64* %11, i64 4
  store i64 %443, i64* %444, align 8
  %445 = getelementptr inbounds i64, i64* %11, i64 6
  store i64 %414, i64* %445, align 8
  %446 = icmp sgt i32 %81, %102
  %447 = select i1 %446, i32 %102, i32 %81
  %448 = icmp slt i32 %81, %102
  %449 = select i1 %448, i32 %102, i32 %81
  %450 = add i32 %118, %102
  %451 = icmp sgt i32 %447, %117
  %452 = select i1 %451, i32 %449, i32 %450
  %453 = icmp slt i32 %449, %117
  %454 = select i1 %453, i32 %447, i32 %452
  %455 = sext i32 %454 to i64
  %456 = getelementptr inbounds i64, i64* %11, i64 5
  store i64 %455, i64* %456, align 8
  %457 = getelementptr inbounds i64, i64* %11, i64 8
  store i64 %83, i64* %457, align 8
  %458 = getelementptr inbounds i64, i64* %11, i64 7
  store i64 %79, i64* %458, align 8
  %459 = getelementptr inbounds i64, i64* %11, i64 9
  store i64 %84, i64* %459, align 8
  %460 = sdiv i64 %112, 2
  %461 = getelementptr inbounds i64, i64* %11, i64 3
  store i64 %460, i64* %461, align 8
  %462 = add nsw i64 %82, %83
  %463 = sdiv i64 %462, 2
  %464 = getelementptr inbounds i64, i64* %11, i64 10
  store i64 %463, i64* %464, align 8
  %465 = add nsw i64 %80, %83
  %466 = sdiv i64 %465, 2
  %467 = getelementptr inbounds i64, i64* %11, i64 11
  store i64 %466, i64* %467, align 8
  %468 = add nsw i64 %79, %80
  %469 = sdiv i64 %468, 2
  %470 = getelementptr inbounds i64, i64* %11, i64 12
  store i64 %469, i64* %470, align 8
  %471 = mul nsw i64 %80, 6
  %472 = shl nsw i64 %78, 1
  %473 = mul nsw i64 %82, 7
  %474 = mul nsw i64 %79, 3
  %475 = add nsw i64 %473, 8
  %476 = add nsw i64 %475, %471
  %477 = add nsw i64 %476, %474
  %478 = add i64 %477, %84
  %479 = sub i64 %478, %472
  %480 = add i64 %479, %85
  %481 = sdiv i64 %480, 16
  %482 = getelementptr inbounds i64, i64* %11, i64 13
  store i64 %481, i64* %482, align 8
  %483 = sext i32 %7 to i64
  %484 = getelementptr inbounds i64, i64* %11, i64 %483
  %485 = load i64, i64* %484, align 8
  store i64 %485, i64* %431, align 8
  %486 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %0, i64 0, i32 2
  store i32 %7, i32* %486, align 8
  ret void

487:                                              ; preds = %411, %487
  %488 = phi i64 [ %495, %487 ], [ 0, %411 ]
  %489 = phi i64 [ %492, %487 ], [ 16, %411 ]
  %490 = getelementptr inbounds i32, i32* %424, i64 %488
  %491 = load i32, i32* %490, align 4
  %492 = add i64 %489, 1
  %493 = load i32*, i32** %87, align 8
  %494 = getelementptr inbounds i32, i32* %493, i64 %489
  store i32 %491, i32* %494, align 4
  %495 = add nuw i64 %488, 1
  %496 = load i64, i64* %425, align 8
  %497 = icmp ult i64 %495, %496
  br i1 %497, label %487, label %428
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6detail7PredictILi6EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl(%"struct.jxl::PredictionResult"* noalias sret, %"class.std::__1::vector.61"*, i64, i32* noalias, i64, i64, i64, i32, %"class.jxl::MATreeLookup"*, %"class.jxl::Channel"*, %"struct.jxl::weighted::State"*, i64*) local_unnamed_addr #3 comdat {
  %13 = sub i64 0, %4
  %14 = alloca [14 x i64], align 16
  %15 = icmp ne i64 %5, 0
  br i1 %15, label %22, label %16

16:                                               ; preds = %12
  %17 = icmp eq i64 %6, 0
  br i1 %17, label %78, label %18

18:                                               ; preds = %16
  %19 = getelementptr inbounds i32, i32* %3, i64 %13
  %20 = load i32, i32* %19, align 4
  %21 = sext i32 %20 to i64
  br label %35

22:                                               ; preds = %12
  %23 = getelementptr inbounds i32, i32* %3, i64 -1
  %24 = load i32, i32* %23, align 4
  %25 = sext i32 %24 to i64
  %26 = icmp eq i64 %6, 0
  br i1 %26, label %47, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds i32, i32* %3, i64 %13
  %29 = load i32, i32* %28, align 4
  %30 = sext i32 %29 to i64
  %31 = xor i64 %4, -1
  %32 = getelementptr inbounds i32, i32* %3, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = sext i32 %33 to i64
  br label %35

35:                                               ; preds = %18, %27
  %36 = phi i64 [ %30, %27 ], [ %21, %18 ]
  %37 = phi i32 [ %24, %27 ], [ %20, %18 ]
  %38 = phi i64 [ %25, %27 ], [ %21, %18 ]
  %39 = phi i64 [ %34, %27 ], [ %21, %18 ]
  %40 = add i64 %5, 1
  %41 = icmp ult i64 %40, %2
  br i1 %41, label %42, label %47

42:                                               ; preds = %35
  %43 = sub nsw i64 1, %4
  %44 = getelementptr inbounds i32, i32* %3, i64 %43
  %45 = load i32, i32* %44, align 4
  %46 = sext i32 %45 to i64
  br label %47

47:                                               ; preds = %22, %35, %42
  %48 = phi i64 [ %39, %42 ], [ %39, %35 ], [ %25, %22 ]
  %49 = phi i1 [ true, %42 ], [ true, %35 ], [ false, %22 ]
  %50 = phi i64 [ %38, %42 ], [ %38, %35 ], [ %25, %22 ]
  %51 = phi i32 [ %37, %42 ], [ %37, %35 ], [ %24, %22 ]
  %52 = phi i64 [ %36, %42 ], [ %36, %35 ], [ %25, %22 ]
  %53 = phi i64 [ %46, %42 ], [ %36, %35 ], [ %25, %22 ]
  %54 = icmp ugt i64 %5, 1
  br i1 %54, label %55, label %59

55:                                               ; preds = %47
  %56 = getelementptr inbounds i32, i32* %3, i64 -2
  %57 = load i32, i32* %56, align 4
  %58 = sext i32 %57 to i64
  br label %59

59:                                               ; preds = %47, %55
  %60 = phi i64 [ %58, %55 ], [ %50, %47 ]
  %61 = icmp ugt i64 %6, 1
  br i1 %61, label %62, label %68

62:                                               ; preds = %59
  %63 = shl i64 %4, 1
  %64 = sub i64 0, %63
  %65 = getelementptr inbounds i32, i32* %3, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = sext i32 %66 to i64
  br label %68

68:                                               ; preds = %59, %62
  %69 = phi i64 [ %67, %62 ], [ %52, %59 ]
  %70 = add i64 %5, 2
  %71 = icmp ult i64 %70, %2
  %72 = and i1 %71, %49
  br i1 %72, label %73, label %78

73:                                               ; preds = %68
  %74 = sub nsw i64 2, %4
  %75 = getelementptr inbounds i32, i32* %3, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = sext i32 %76 to i64
  br label %78

78:                                               ; preds = %16, %68, %73
  %79 = phi i64 [ %69, %73 ], [ %69, %68 ], [ 0, %16 ]
  %80 = phi i64 [ %53, %73 ], [ %53, %68 ], [ 0, %16 ]
  %81 = phi i64 [ %52, %73 ], [ %52, %68 ], [ 0, %16 ]
  %82 = phi i32 [ %51, %73 ], [ %51, %68 ], [ 0, %16 ]
  %83 = phi i64 [ %50, %73 ], [ %50, %68 ], [ 0, %16 ]
  %84 = phi i64 [ %48, %73 ], [ %48, %68 ], [ 0, %16 ]
  %85 = phi i64 [ %60, %73 ], [ %60, %68 ], [ 0, %16 ]
  %86 = phi i64 [ %77, %73 ], [ %53, %68 ], [ 0, %16 ]
  %87 = trunc i64 %5 to i32
  %88 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %1, i64 0, i32 0, i32 0
  %89 = load i32*, i32** %88, align 8
  %90 = getelementptr inbounds i32, i32* %89, i64 3
  store i32 %87, i32* %90, align 4
  %91 = sub nsw i64 0, %81
  %92 = icmp slt i64 %81, 0
  %93 = select i1 %92, i64 %91, i64 %81
  %94 = trunc i64 %93 to i32
  %95 = load i32*, i32** %88, align 8
  %96 = getelementptr inbounds i32, i32* %95, i64 4
  store i32 %94, i32* %96, align 4
  %97 = sub nsw i64 0, %83
  %98 = icmp slt i64 %83, 0
  %99 = select i1 %98, i64 %97, i64 %83
  %100 = trunc i64 %99 to i32
  %101 = load i32*, i32** %88, align 8
  %102 = getelementptr inbounds i32, i32* %101, i64 5
  store i32 %100, i32* %102, align 4
  %103 = trunc i64 %81 to i32
  %104 = load i32*, i32** %88, align 8
  %105 = getelementptr inbounds i32, i32* %104, i64 6
  store i32 %103, i32* %105, align 4
  %106 = load i32*, i32** %88, align 8
  %107 = getelementptr inbounds i32, i32* %106, i64 7
  store i32 %82, i32* %107, align 4
  %108 = load i32*, i32** %88, align 8
  %109 = getelementptr inbounds i32, i32* %108, i64 9
  %110 = load i32, i32* %109, align 4
  %111 = sub i32 %82, %110
  %112 = getelementptr inbounds i32, i32* %108, i64 8
  store i32 %111, i32* %112, align 4
  %113 = add nsw i64 %81, %83
  %114 = sub nsw i64 %113, %84
  %115 = trunc i64 %114 to i32
  %116 = load i32*, i32** %88, align 8
  %117 = getelementptr inbounds i32, i32* %116, i64 9
  store i32 %115, i32* %117, align 4
  %118 = trunc i64 %84 to i32
  %119 = sub i32 %82, %118
  %120 = load i32*, i32** %88, align 8
  %121 = getelementptr inbounds i32, i32* %120, i64 10
  store i32 %119, i32* %121, align 4
  %122 = sub nsw i64 %84, %81
  %123 = trunc i64 %122 to i32
  %124 = load i32*, i32** %88, align 8
  %125 = getelementptr inbounds i32, i32* %124, i64 11
  store i32 %123, i32* %125, align 4
  %126 = sub nsw i64 %81, %80
  %127 = trunc i64 %126 to i32
  %128 = load i32*, i32** %88, align 8
  %129 = getelementptr inbounds i32, i32* %128, i64 12
  store i32 %127, i32* %129, align 4
  %130 = sub nsw i64 %81, %79
  %131 = trunc i64 %130 to i32
  %132 = load i32*, i32** %88, align 8
  %133 = getelementptr inbounds i32, i32* %132, i64 13
  store i32 %131, i32* %133, align 4
  %134 = trunc i64 %85 to i32
  %135 = sub i32 %82, %134
  %136 = load i32*, i32** %88, align 8
  %137 = getelementptr inbounds i32, i32* %136, i64 14
  store i32 %135, i32* %137, align 4
  %138 = and i64 %6, 1
  %139 = icmp ne i64 %138, 0
  %140 = add i64 %2, 2
  %141 = select i1 %139, i64 %140, i64 0
  %142 = add i64 %141, %5
  %143 = add i64 %2, -1
  %144 = icmp ugt i64 %143, %5
  %145 = zext i1 %144 to i64
  %146 = add i64 %142, %145
  %147 = zext i1 %15 to i64
  %148 = sub i64 %142, %147
  %149 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 2, i64 0, i32 0, i32 0
  %150 = load i32*, i32** %149, align 8
  %151 = getelementptr inbounds i32, i32* %150, i64 %142
  %152 = load i32, i32* %151, align 4
  %153 = getelementptr inbounds i32, i32* %150, i64 %146
  %154 = load i32, i32* %153, align 4
  %155 = add i32 %154, %152
  %156 = getelementptr inbounds i32, i32* %150, i64 %148
  %157 = load i32, i32* %156, align 4
  %158 = add i32 %155, %157
  %159 = zext i32 %158 to i64
  %160 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 9, i64 0
  %161 = load i32, i32* %160, align 4
  %162 = add nuw nsw i64 %159, 1
  %163 = tail call i64 @llvm.ctlz.i64(i64 %162, i1 true) #9, !range !12
  %164 = trunc i64 %163 to i32
  %165 = sub nsw i32 58, %164
  %166 = icmp sgt i32 %165, 0
  %167 = select i1 %166, i32 %165, i32 0
  %168 = zext i32 %167 to i64
  %169 = lshr i64 %159, %168
  %170 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 5, i64 %169
  %171 = load i32, i32* %170, align 4
  %172 = mul i32 %171, %161
  %173 = lshr i32 %172, %167
  %174 = add i32 %173, 4
  %175 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 2, i64 1, i32 0, i32 0
  %176 = load i32*, i32** %175, align 8
  %177 = getelementptr inbounds i32, i32* %176, i64 %142
  %178 = load i32, i32* %177, align 4
  %179 = getelementptr inbounds i32, i32* %176, i64 %146
  %180 = load i32, i32* %179, align 4
  %181 = add i32 %180, %178
  %182 = getelementptr inbounds i32, i32* %176, i64 %148
  %183 = load i32, i32* %182, align 4
  %184 = add i32 %181, %183
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 9, i64 1
  %187 = load i32, i32* %186, align 4
  %188 = add nuw nsw i64 %185, 1
  %189 = tail call i64 @llvm.ctlz.i64(i64 %188, i1 true) #9, !range !12
  %190 = trunc i64 %189 to i32
  %191 = sub nsw i32 58, %190
  %192 = icmp sgt i32 %191, 0
  %193 = select i1 %192, i32 %191, i32 0
  %194 = zext i32 %193 to i64
  %195 = lshr i64 %185, %194
  %196 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 5, i64 %195
  %197 = load i32, i32* %196, align 4
  %198 = mul i32 %197, %187
  %199 = lshr i32 %198, %193
  %200 = add i32 %199, 4
  %201 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 2, i64 2, i32 0, i32 0
  %202 = load i32*, i32** %201, align 8
  %203 = getelementptr inbounds i32, i32* %202, i64 %142
  %204 = load i32, i32* %203, align 4
  %205 = getelementptr inbounds i32, i32* %202, i64 %146
  %206 = load i32, i32* %205, align 4
  %207 = add i32 %206, %204
  %208 = getelementptr inbounds i32, i32* %202, i64 %148
  %209 = load i32, i32* %208, align 4
  %210 = add i32 %207, %209
  %211 = zext i32 %210 to i64
  %212 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 9, i64 2
  %213 = load i32, i32* %212, align 4
  %214 = add nuw nsw i64 %211, 1
  %215 = tail call i64 @llvm.ctlz.i64(i64 %214, i1 true) #9, !range !12
  %216 = trunc i64 %215 to i32
  %217 = sub nsw i32 58, %216
  %218 = icmp sgt i32 %217, 0
  %219 = select i1 %218, i32 %217, i32 0
  %220 = zext i32 %219 to i64
  %221 = lshr i64 %211, %220
  %222 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 5, i64 %221
  %223 = load i32, i32* %222, align 4
  %224 = mul i32 %223, %213
  %225 = lshr i32 %224, %219
  %226 = add i32 %225, 4
  %227 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 2, i64 3, i32 0, i32 0
  %228 = load i32*, i32** %227, align 8
  %229 = getelementptr inbounds i32, i32* %228, i64 %142
  %230 = load i32, i32* %229, align 4
  %231 = getelementptr inbounds i32, i32* %228, i64 %146
  %232 = load i32, i32* %231, align 4
  %233 = add i32 %232, %230
  %234 = getelementptr inbounds i32, i32* %228, i64 %148
  %235 = load i32, i32* %234, align 4
  %236 = add i32 %233, %235
  %237 = zext i32 %236 to i64
  %238 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 9, i64 3
  %239 = load i32, i32* %238, align 4
  %240 = add nuw nsw i64 %237, 1
  %241 = tail call i64 @llvm.ctlz.i64(i64 %240, i1 true) #9, !range !12
  %242 = trunc i64 %241 to i32
  %243 = sub nsw i32 58, %242
  %244 = icmp sgt i32 %243, 0
  %245 = select i1 %244, i32 %243, i32 0
  %246 = zext i32 %245 to i64
  %247 = lshr i64 %237, %246
  %248 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 5, i64 %247
  %249 = load i32, i32* %248, align 4
  %250 = mul i32 %249, %239
  %251 = lshr i32 %250, %245
  %252 = add i32 %251, 4
  %253 = shl nsw i64 %81, 3
  %254 = shl nsw i64 %83, 3
  %255 = shl nsw i64 %80, 3
  %256 = shl nsw i64 %84, 3
  %257 = shl nsw i64 %79, 3
  %258 = icmp eq i64 %5, 0
  br i1 %258, label %259, label %262

259:                                              ; preds = %78
  %260 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 3, i32 0, i32 0
  %261 = load i32*, i32** %260, align 8
  br label %271

262:                                              ; preds = %78
  %263 = select i1 %139, i64 0, i64 %140
  %264 = add i64 %5, -1
  %265 = add i64 %264, %263
  %266 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 3, i32 0, i32 0
  %267 = load i32*, i32** %266, align 8
  %268 = getelementptr inbounds i32, i32* %267, i64 %265
  %269 = load i32, i32* %268, align 4
  %270 = sext i32 %269 to i64
  br label %271

271:                                              ; preds = %262, %259
  %272 = phi i32* [ %267, %262 ], [ %261, %259 ]
  %273 = phi i64 [ %270, %262 ], [ 0, %259 ]
  %274 = getelementptr inbounds i32, i32* %272, i64 %142
  %275 = load i32, i32* %274, align 4
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds i32, i32* %272, i64 %148
  %278 = load i32, i32* %277, align 4
  %279 = sext i32 %278 to i64
  %280 = add nsw i64 %273, %276
  %281 = getelementptr inbounds i32, i32* %272, i64 %146
  %282 = load i32, i32* %281, align 4
  %283 = sext i32 %282 to i64
  %284 = sub nsw i64 0, %276
  %285 = icmp slt i64 %276, 0
  %286 = select i1 %285, i64 %284, i64 %276
  %287 = sub nsw i64 0, %273
  %288 = icmp slt i64 %273, 0
  %289 = select i1 %288, i64 %287, i64 %273
  %290 = icmp sgt i64 %286, %289
  %291 = select i1 %290, i64 %276, i64 %273
  %292 = sub nsw i64 0, %279
  %293 = icmp slt i64 %279, 0
  %294 = select i1 %293, i64 %292, i64 %279
  %295 = sub nsw i64 0, %291
  %296 = icmp slt i64 %291, 0
  %297 = select i1 %296, i64 %295, i64 %291
  %298 = icmp sgt i64 %294, %297
  %299 = select i1 %298, i64 %279, i64 %291
  %300 = sub nsw i64 0, %283
  %301 = icmp slt i64 %283, 0
  %302 = select i1 %301, i64 %300, i64 %283
  %303 = sub nsw i64 0, %299
  %304 = icmp slt i64 %299, 0
  %305 = select i1 %304, i64 %303, i64 %299
  %306 = icmp sgt i64 %302, %305
  %307 = select i1 %306, i64 %283, i64 %299
  %308 = trunc i64 %307 to i32
  %309 = load i32*, i32** %88, align 8
  %310 = getelementptr inbounds i32, i32* %309, i64 15
  store i32 %308, i32* %310, align 4
  %311 = sub nsw i64 %254, %253
  %312 = add nsw i64 %311, %255
  %313 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 0, i64 0
  store i64 %312, i64* %313, align 8
  %314 = add nsw i64 %280, %283
  %315 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 2
  %316 = load i32, i32* %315, align 4
  %317 = sext i32 %316 to i64
  %318 = mul nsw i64 %314, %317
  %319 = ashr i64 %318, 5
  %320 = sub nsw i64 %253, %319
  %321 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 0, i64 1
  store i64 %320, i64* %321, align 8
  %322 = add nsw i64 %280, %279
  %323 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 3
  %324 = load i32, i32* %323, align 8
  %325 = sext i32 %324 to i64
  %326 = mul nsw i64 %322, %325
  %327 = ashr i64 %326, 5
  %328 = sub nsw i64 %254, %327
  %329 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 0, i64 2
  store i64 %328, i64* %329, align 8
  %330 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 4
  %331 = load i32, i32* %330, align 4
  %332 = sext i32 %331 to i64
  %333 = mul nsw i64 %332, %279
  %334 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 5
  %335 = load i32, i32* %334, align 8
  %336 = sext i32 %335 to i64
  %337 = mul nsw i64 %336, %276
  %338 = add nsw i64 %337, %333
  %339 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 6
  %340 = load i32, i32* %339, align 4
  %341 = sext i32 %340 to i64
  %342 = mul nsw i64 %341, %283
  %343 = add nsw i64 %338, %342
  %344 = sub nsw i64 %257, %253
  %345 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 7
  %346 = load i32, i32* %345, align 8
  %347 = sext i32 %346 to i64
  %348 = mul nsw i64 %344, %347
  %349 = add nsw i64 %343, %348
  %350 = sub nsw i64 %256, %254
  %351 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 8
  %352 = load i32, i32* %351, align 4
  %353 = sext i32 %352 to i64
  %354 = mul nsw i64 %350, %353
  %355 = add nsw i64 %349, %354
  %356 = ashr i64 %355, 5
  %357 = sub nsw i64 %253, %356
  %358 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 0, i64 3
  store i64 %357, i64* %358, align 8
  %359 = add i32 %200, %174
  %360 = add i32 %359, %226
  %361 = add i32 %360, %252
  %362 = tail call i32 @llvm.ctlz.i32(i32 %361, i1 true) #9, !range !13
  %363 = sub nsw i32 27, %362
  %364 = lshr i32 %174, %363
  %365 = lshr i32 %200, %363
  %366 = add i32 %365, %364
  %367 = lshr i32 %226, %363
  %368 = add i32 %366, %367
  %369 = lshr i32 %252, %363
  %370 = add i32 %368, %369
  %371 = lshr i32 %370, 1
  %372 = add nsw i32 %371, -1
  %373 = zext i32 %372 to i64
  %374 = zext i32 %364 to i64
  %375 = mul nsw i64 %312, %374
  %376 = zext i32 %365 to i64
  %377 = mul nsw i64 %320, %376
  %378 = zext i32 %367 to i64
  %379 = mul nsw i64 %328, %378
  %380 = zext i32 %369 to i64
  %381 = mul nsw i64 %357, %380
  %382 = add i64 %375, %373
  %383 = add i64 %382, %377
  %384 = add i64 %383, %379
  %385 = add i64 %384, %381
  %386 = add i32 %370, -1
  %387 = zext i32 %386 to i64
  %388 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 5, i64 %387
  %389 = load i32, i32* %388, align 4, !noalias !44
  %390 = zext i32 %389 to i64
  %391 = mul nsw i64 %385, %390
  %392 = ashr i64 %391, 24
  %393 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 1
  %394 = xor i64 %273, %276
  %395 = xor i32 %278, %275
  %396 = sext i32 %395 to i64
  %397 = or i64 %394, %396
  %398 = icmp sgt i64 %397, 0
  br i1 %398, label %412, label %399

399:                                              ; preds = %271
  %400 = icmp slt i64 %255, %253
  %401 = select i1 %400, i64 %253, i64 %255
  %402 = icmp slt i64 %254, %401
  %403 = select i1 %402, i64 %401, i64 %254
  %404 = icmp slt i64 %253, %255
  %405 = select i1 %404, i64 %253, i64 %255
  %406 = icmp slt i64 %405, %254
  %407 = select i1 %406, i64 %405, i64 %254
  %408 = icmp slt i64 %392, %403
  %409 = select i1 %408, i64 %392, i64 %403
  %410 = icmp slt i64 %407, %409
  %411 = select i1 %410, i64 %409, i64 %407
  br label %412

412:                                              ; preds = %271, %399
  %413 = phi i64 [ %411, %399 ], [ %392, %271 ]
  store i64 %413, i64* %393, align 8
  %414 = add nsw i64 %413, 3
  %415 = ashr i64 %414, 3
  %416 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %417 = load i8*, i8** %416, align 8
  %418 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 0, i32 0, i32 4
  %419 = load i64, i64* %418, align 8
  %420 = mul i64 %419, %5
  %421 = getelementptr inbounds i8, i8* %417, i64 %420
  %422 = ptrtoint i8* %421 to i64
  %423 = and i64 %422, 63
  %424 = icmp eq i64 %423, 0
  tail call void @llvm.assume(i1 %424) #9
  %425 = bitcast i8* %421 to i32*
  %426 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 1
  %427 = load i64, i64* %426, align 8
  %428 = icmp eq i64 %427, 0
  br i1 %428, label %429, label %490

429:                                              ; preds = %490, %412
  %430 = bitcast %"struct.jxl::PredictionResult"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %430, i8 -86, i64 24, i1 false)
  %431 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %0, i64 0, i32 0
  store i32 0, i32* %431, align 8
  %432 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %0, i64 0, i32 1
  %433 = bitcast [14 x i64]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %433) #9
  %434 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 0
  store i64 0, i64* %434, align 16
  %435 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 1
  store i64 %83, i64* %435, align 8
  %436 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 2
  store i64 %81, i64* %436, align 16
  %437 = sub nsw i64 %114, %83
  %438 = sub nsw i64 0, %437
  %439 = icmp slt i64 %437, 0
  %440 = select i1 %439, i64 %438, i64 %437
  %441 = sub nsw i64 %114, %81
  %442 = sub nsw i64 0, %441
  %443 = icmp slt i64 %441, 0
  %444 = select i1 %443, i64 %442, i64 %441
  %445 = icmp slt i64 %440, %444
  %446 = select i1 %445, i64 %83, i64 %81
  %447 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 4
  store i64 %446, i64* %447, align 16
  %448 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 6
  store i64 %415, i64* %448, align 16
  %449 = icmp sgt i32 %82, %103
  %450 = select i1 %449, i32 %103, i32 %82
  %451 = icmp slt i32 %82, %103
  %452 = select i1 %451, i32 %103, i32 %82
  %453 = add i32 %119, %103
  %454 = icmp sgt i32 %450, %118
  %455 = select i1 %454, i32 %452, i32 %453
  %456 = icmp slt i32 %452, %118
  %457 = select i1 %456, i32 %450, i32 %455
  %458 = sext i32 %457 to i64
  %459 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 5
  store i64 %458, i64* %459, align 8
  %460 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 8
  store i64 %84, i64* %460, align 16
  %461 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 7
  store i64 %80, i64* %461, align 8
  %462 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 9
  store i64 %85, i64* %462, align 8
  %463 = sdiv i64 %113, 2
  %464 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 3
  store i64 %463, i64* %464, align 8
  %465 = add nsw i64 %83, %84
  %466 = sdiv i64 %465, 2
  %467 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 10
  store i64 %466, i64* %467, align 16
  %468 = add nsw i64 %81, %84
  %469 = sdiv i64 %468, 2
  %470 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 11
  store i64 %469, i64* %470, align 8
  %471 = add nsw i64 %80, %81
  %472 = sdiv i64 %471, 2
  %473 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 12
  store i64 %472, i64* %473, align 16
  %474 = mul nsw i64 %81, 6
  %475 = shl nsw i64 %79, 1
  %476 = mul nsw i64 %83, 7
  %477 = mul nsw i64 %80, 3
  %478 = add nsw i64 %476, 8
  %479 = add nsw i64 %478, %474
  %480 = add nsw i64 %479, %477
  %481 = add i64 %480, %85
  %482 = sub i64 %481, %475
  %483 = add i64 %482, %86
  %484 = sdiv i64 %483, 16
  %485 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 13
  store i64 %484, i64* %485, align 8
  %486 = sext i32 %7 to i64
  %487 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 %486
  %488 = load i64, i64* %487, align 8
  store i64 %488, i64* %432, align 8
  %489 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %0, i64 0, i32 2
  store i32 %7, i32* %489, align 8
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %433) #9
  ret void

490:                                              ; preds = %412, %490
  %491 = phi i64 [ %498, %490 ], [ 0, %412 ]
  %492 = phi i64 [ %495, %490 ], [ 16, %412 ]
  %493 = getelementptr inbounds i32, i32* %425, i64 %491
  %494 = load i32, i32* %493, align 4
  %495 = add i64 %492, 1
  %496 = load i32*, i32** %88, align 8
  %497 = getelementptr inbounds i32, i32* %496, i64 %492
  store i32 %494, i32* %497, align 4
  %498 = add nuw i64 %491, 1
  %499 = load i64, i64* %426, align 8
  %500 = icmp ult i64 %498, %499
  br i1 %500, label %490, label %429
}

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6detail7PredictILi0EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl(%"struct.jxl::PredictionResult"* noalias sret, %"class.std::__1::vector.61"*, i64, i32* noalias, i64, i64, i64, i32, %"class.jxl::MATreeLookup"*, %"class.jxl::Channel"*, %"struct.jxl::weighted::State"*, i64*) local_unnamed_addr #3 comdat {
  %13 = sub i64 0, %4
  %14 = alloca [14 x i64], align 16
  %15 = icmp eq i64 %5, 0
  br i1 %15, label %16, label %22

16:                                               ; preds = %12
  %17 = icmp eq i64 %6, 0
  br i1 %17, label %78, label %18

18:                                               ; preds = %16
  %19 = getelementptr inbounds i32, i32* %3, i64 %13
  %20 = load i32, i32* %19, align 4
  %21 = sext i32 %20 to i64
  br label %35

22:                                               ; preds = %12
  %23 = getelementptr inbounds i32, i32* %3, i64 -1
  %24 = load i32, i32* %23, align 4
  %25 = sext i32 %24 to i64
  %26 = icmp eq i64 %6, 0
  br i1 %26, label %47, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds i32, i32* %3, i64 %13
  %29 = load i32, i32* %28, align 4
  %30 = sext i32 %29 to i64
  %31 = xor i64 %4, -1
  %32 = getelementptr inbounds i32, i32* %3, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = sext i32 %33 to i64
  br label %35

35:                                               ; preds = %18, %27
  %36 = phi i64 [ %30, %27 ], [ %21, %18 ]
  %37 = phi i32 [ %24, %27 ], [ %20, %18 ]
  %38 = phi i64 [ %25, %27 ], [ %21, %18 ]
  %39 = phi i64 [ %34, %27 ], [ %21, %18 ]
  %40 = add i64 %5, 1
  %41 = icmp ult i64 %40, %2
  br i1 %41, label %42, label %47

42:                                               ; preds = %35
  %43 = sub nsw i64 1, %4
  %44 = getelementptr inbounds i32, i32* %3, i64 %43
  %45 = load i32, i32* %44, align 4
  %46 = sext i32 %45 to i64
  br label %47

47:                                               ; preds = %22, %35, %42
  %48 = phi i64 [ %39, %42 ], [ %39, %35 ], [ %25, %22 ]
  %49 = phi i1 [ true, %42 ], [ true, %35 ], [ false, %22 ]
  %50 = phi i64 [ %38, %42 ], [ %38, %35 ], [ %25, %22 ]
  %51 = phi i32 [ %37, %42 ], [ %37, %35 ], [ %24, %22 ]
  %52 = phi i64 [ %36, %42 ], [ %36, %35 ], [ %25, %22 ]
  %53 = phi i64 [ %46, %42 ], [ %36, %35 ], [ %25, %22 ]
  %54 = icmp ugt i64 %5, 1
  br i1 %54, label %55, label %59

55:                                               ; preds = %47
  %56 = getelementptr inbounds i32, i32* %3, i64 -2
  %57 = load i32, i32* %56, align 4
  %58 = sext i32 %57 to i64
  br label %59

59:                                               ; preds = %47, %55
  %60 = phi i64 [ %58, %55 ], [ %50, %47 ]
  %61 = icmp ugt i64 %6, 1
  br i1 %61, label %62, label %68

62:                                               ; preds = %59
  %63 = shl i64 %4, 1
  %64 = sub i64 0, %63
  %65 = getelementptr inbounds i32, i32* %3, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = sext i32 %66 to i64
  br label %68

68:                                               ; preds = %59, %62
  %69 = phi i64 [ %67, %62 ], [ %52, %59 ]
  %70 = add i64 %5, 2
  %71 = icmp ult i64 %70, %2
  %72 = and i1 %71, %49
  br i1 %72, label %73, label %78

73:                                               ; preds = %68
  %74 = sub nsw i64 2, %4
  %75 = getelementptr inbounds i32, i32* %3, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = sext i32 %76 to i64
  br label %78

78:                                               ; preds = %16, %68, %73
  %79 = phi i64 [ %69, %73 ], [ %69, %68 ], [ 0, %16 ]
  %80 = phi i64 [ %53, %73 ], [ %53, %68 ], [ 0, %16 ]
  %81 = phi i64 [ %52, %73 ], [ %52, %68 ], [ 0, %16 ]
  %82 = phi i32 [ %51, %73 ], [ %51, %68 ], [ 0, %16 ]
  %83 = phi i64 [ %50, %73 ], [ %50, %68 ], [ 0, %16 ]
  %84 = phi i64 [ %48, %73 ], [ %48, %68 ], [ 0, %16 ]
  %85 = phi i64 [ %60, %73 ], [ %60, %68 ], [ 0, %16 ]
  %86 = phi i64 [ %77, %73 ], [ %53, %68 ], [ 0, %16 ]
  %87 = bitcast %"struct.jxl::PredictionResult"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %87, i8 -86, i64 24, i1 false)
  %88 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %0, i64 0, i32 0
  store i32 0, i32* %88, align 8
  %89 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %0, i64 0, i32 1
  %90 = bitcast [14 x i64]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %90) #9
  %91 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 0
  store i64 0, i64* %91, align 16
  %92 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 1
  store i64 %83, i64* %92, align 8
  %93 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 2
  store i64 %81, i64* %93, align 16
  %94 = add nsw i64 %81, %83
  %95 = sub nsw i64 %94, %84
  %96 = sub nsw i64 %95, %83
  %97 = sub nsw i64 0, %96
  %98 = icmp slt i64 %96, 0
  %99 = select i1 %98, i64 %97, i64 %96
  %100 = sub nsw i64 %95, %81
  %101 = sub nsw i64 0, %100
  %102 = icmp slt i64 %100, 0
  %103 = select i1 %102, i64 %101, i64 %100
  %104 = icmp slt i64 %99, %103
  %105 = select i1 %104, i64 %83, i64 %81
  %106 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 4
  store i64 %105, i64* %106, align 16
  %107 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 6
  store i64 0, i64* %107, align 16
  %108 = trunc i64 %81 to i32
  %109 = trunc i64 %84 to i32
  %110 = icmp sgt i32 %82, %108
  %111 = select i1 %110, i32 %108, i32 %82
  %112 = icmp slt i32 %82, %108
  %113 = select i1 %112, i32 %108, i32 %82
  %114 = sub i32 %82, %109
  %115 = add i32 %114, %108
  %116 = icmp sgt i32 %111, %109
  %117 = select i1 %116, i32 %113, i32 %115
  %118 = icmp slt i32 %113, %109
  %119 = select i1 %118, i32 %111, i32 %117
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 5
  store i64 %120, i64* %121, align 8
  %122 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 8
  store i64 %84, i64* %122, align 16
  %123 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 7
  store i64 %80, i64* %123, align 8
  %124 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 9
  store i64 %85, i64* %124, align 8
  %125 = sdiv i64 %94, 2
  %126 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 3
  store i64 %125, i64* %126, align 8
  %127 = add nsw i64 %83, %84
  %128 = sdiv i64 %127, 2
  %129 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 10
  store i64 %128, i64* %129, align 16
  %130 = add nsw i64 %81, %84
  %131 = sdiv i64 %130, 2
  %132 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 11
  store i64 %131, i64* %132, align 8
  %133 = add nsw i64 %80, %81
  %134 = sdiv i64 %133, 2
  %135 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 12
  store i64 %134, i64* %135, align 16
  %136 = mul nsw i64 %81, 6
  %137 = shl nsw i64 %79, 1
  %138 = mul nsw i64 %83, 7
  %139 = mul nsw i64 %80, 3
  %140 = add nsw i64 %138, 8
  %141 = add nsw i64 %140, %136
  %142 = add nsw i64 %141, %139
  %143 = add nsw i64 %142, %85
  %144 = sub i64 %143, %137
  %145 = add i64 %144, %86
  %146 = sdiv i64 %145, 16
  %147 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 13
  store i64 %146, i64* %147, align 8
  %148 = sext i32 %7 to i64
  %149 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 %148
  %150 = load i64, i64* %149, align 8
  store i64 %150, i64* %89, align 8
  %151 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %0, i64 0, i32 2
  store i32 %7, i32* %151, align 8
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %90) #9
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6detail7PredictILi1EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl(%"struct.jxl::PredictionResult"* noalias sret, %"class.std::__1::vector.61"*, i64, i32* noalias, i64, i64, i64, i32, %"class.jxl::MATreeLookup"*, %"class.jxl::Channel"*, %"struct.jxl::weighted::State"*, i64*) local_unnamed_addr #3 comdat {
  %13 = sub i64 0, %4
  %14 = alloca [14 x i64], align 16
  %15 = icmp eq i64 %5, 0
  br i1 %15, label %16, label %22

16:                                               ; preds = %12
  %17 = icmp eq i64 %6, 0
  br i1 %17, label %78, label %18

18:                                               ; preds = %16
  %19 = getelementptr inbounds i32, i32* %3, i64 %13
  %20 = load i32, i32* %19, align 4
  %21 = sext i32 %20 to i64
  br label %35

22:                                               ; preds = %12
  %23 = getelementptr inbounds i32, i32* %3, i64 -1
  %24 = load i32, i32* %23, align 4
  %25 = sext i32 %24 to i64
  %26 = icmp eq i64 %6, 0
  br i1 %26, label %47, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds i32, i32* %3, i64 %13
  %29 = load i32, i32* %28, align 4
  %30 = sext i32 %29 to i64
  %31 = xor i64 %4, -1
  %32 = getelementptr inbounds i32, i32* %3, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = sext i32 %33 to i64
  br label %35

35:                                               ; preds = %18, %27
  %36 = phi i64 [ %30, %27 ], [ %21, %18 ]
  %37 = phi i32 [ %24, %27 ], [ %20, %18 ]
  %38 = phi i64 [ %25, %27 ], [ %21, %18 ]
  %39 = phi i64 [ %34, %27 ], [ %21, %18 ]
  %40 = add i64 %5, 1
  %41 = icmp ult i64 %40, %2
  br i1 %41, label %42, label %47

42:                                               ; preds = %35
  %43 = sub nsw i64 1, %4
  %44 = getelementptr inbounds i32, i32* %3, i64 %43
  %45 = load i32, i32* %44, align 4
  %46 = sext i32 %45 to i64
  br label %47

47:                                               ; preds = %22, %35, %42
  %48 = phi i64 [ %39, %42 ], [ %39, %35 ], [ %25, %22 ]
  %49 = phi i1 [ true, %42 ], [ true, %35 ], [ false, %22 ]
  %50 = phi i64 [ %38, %42 ], [ %38, %35 ], [ %25, %22 ]
  %51 = phi i32 [ %37, %42 ], [ %37, %35 ], [ %24, %22 ]
  %52 = phi i64 [ %36, %42 ], [ %36, %35 ], [ %25, %22 ]
  %53 = phi i64 [ %46, %42 ], [ %36, %35 ], [ %25, %22 ]
  %54 = icmp ugt i64 %5, 1
  br i1 %54, label %55, label %59

55:                                               ; preds = %47
  %56 = getelementptr inbounds i32, i32* %3, i64 -2
  %57 = load i32, i32* %56, align 4
  %58 = sext i32 %57 to i64
  br label %59

59:                                               ; preds = %47, %55
  %60 = phi i64 [ %58, %55 ], [ %50, %47 ]
  %61 = icmp ugt i64 %6, 1
  br i1 %61, label %62, label %68

62:                                               ; preds = %59
  %63 = shl i64 %4, 1
  %64 = sub i64 0, %63
  %65 = getelementptr inbounds i32, i32* %3, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = sext i32 %66 to i64
  br label %68

68:                                               ; preds = %59, %62
  %69 = phi i64 [ %67, %62 ], [ %52, %59 ]
  %70 = add i64 %5, 2
  %71 = icmp ult i64 %70, %2
  %72 = and i1 %71, %49
  br i1 %72, label %73, label %78

73:                                               ; preds = %68
  %74 = sub nsw i64 2, %4
  %75 = getelementptr inbounds i32, i32* %3, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = sext i32 %76 to i64
  br label %78

78:                                               ; preds = %16, %68, %73
  %79 = phi i64 [ %69, %73 ], [ %69, %68 ], [ 0, %16 ]
  %80 = phi i64 [ %53, %73 ], [ %53, %68 ], [ 0, %16 ]
  %81 = phi i64 [ %52, %73 ], [ %52, %68 ], [ 0, %16 ]
  %82 = phi i32 [ %51, %73 ], [ %51, %68 ], [ 0, %16 ]
  %83 = phi i64 [ %50, %73 ], [ %50, %68 ], [ 0, %16 ]
  %84 = phi i64 [ %48, %73 ], [ %48, %68 ], [ 0, %16 ]
  %85 = phi i64 [ %60, %73 ], [ %60, %68 ], [ 0, %16 ]
  %86 = phi i64 [ %77, %73 ], [ %53, %68 ], [ 0, %16 ]
  %87 = trunc i64 %5 to i32
  %88 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %1, i64 0, i32 0, i32 0
  %89 = load i32*, i32** %88, align 8
  %90 = getelementptr inbounds i32, i32* %89, i64 3
  store i32 %87, i32* %90, align 4
  %91 = sub nsw i64 0, %81
  %92 = icmp slt i64 %81, 0
  %93 = select i1 %92, i64 %91, i64 %81
  %94 = trunc i64 %93 to i32
  %95 = load i32*, i32** %88, align 8
  %96 = getelementptr inbounds i32, i32* %95, i64 4
  store i32 %94, i32* %96, align 4
  %97 = sub nsw i64 0, %83
  %98 = icmp slt i64 %83, 0
  %99 = select i1 %98, i64 %97, i64 %83
  %100 = trunc i64 %99 to i32
  %101 = load i32*, i32** %88, align 8
  %102 = getelementptr inbounds i32, i32* %101, i64 5
  store i32 %100, i32* %102, align 4
  %103 = trunc i64 %81 to i32
  %104 = load i32*, i32** %88, align 8
  %105 = getelementptr inbounds i32, i32* %104, i64 6
  store i32 %103, i32* %105, align 4
  %106 = load i32*, i32** %88, align 8
  %107 = getelementptr inbounds i32, i32* %106, i64 7
  store i32 %82, i32* %107, align 4
  %108 = load i32*, i32** %88, align 8
  %109 = getelementptr inbounds i32, i32* %108, i64 9
  %110 = load i32, i32* %109, align 4
  %111 = sub i32 %82, %110
  %112 = getelementptr inbounds i32, i32* %108, i64 8
  store i32 %111, i32* %112, align 4
  %113 = add nsw i64 %81, %83
  %114 = sub nsw i64 %113, %84
  %115 = trunc i64 %114 to i32
  %116 = load i32*, i32** %88, align 8
  %117 = getelementptr inbounds i32, i32* %116, i64 9
  store i32 %115, i32* %117, align 4
  %118 = trunc i64 %84 to i32
  %119 = sub i32 %82, %118
  %120 = load i32*, i32** %88, align 8
  %121 = getelementptr inbounds i32, i32* %120, i64 10
  store i32 %119, i32* %121, align 4
  %122 = sub nsw i64 %84, %81
  %123 = trunc i64 %122 to i32
  %124 = load i32*, i32** %88, align 8
  %125 = getelementptr inbounds i32, i32* %124, i64 11
  store i32 %123, i32* %125, align 4
  %126 = sub nsw i64 %81, %80
  %127 = trunc i64 %126 to i32
  %128 = load i32*, i32** %88, align 8
  %129 = getelementptr inbounds i32, i32* %128, i64 12
  store i32 %127, i32* %129, align 4
  %130 = sub nsw i64 %81, %79
  %131 = trunc i64 %130 to i32
  %132 = load i32*, i32** %88, align 8
  %133 = getelementptr inbounds i32, i32* %132, i64 13
  store i32 %131, i32* %133, align 4
  %134 = trunc i64 %85 to i32
  %135 = sub i32 %82, %134
  %136 = load i32*, i32** %88, align 8
  %137 = getelementptr inbounds i32, i32* %136, i64 14
  store i32 %135, i32* %137, align 4
  %138 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %139 = load i8*, i8** %138, align 8
  %140 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 0, i32 0, i32 4
  %141 = load i64, i64* %140, align 8
  %142 = mul i64 %141, %5
  %143 = getelementptr inbounds i8, i8* %139, i64 %142
  %144 = ptrtoint i8* %143 to i64
  %145 = and i64 %144, 63
  %146 = icmp eq i64 %145, 0
  tail call void @llvm.assume(i1 %146) #9
  %147 = bitcast i8* %143 to i32*
  %148 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 1
  %149 = load i64, i64* %148, align 8
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %151, label %273

151:                                              ; preds = %273, %78
  %152 = bitcast %"struct.jxl::PredictionResult"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %152, i8 -86, i64 24, i1 false)
  %153 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %0, i64 0, i32 0
  store i32 0, i32* %153, align 8
  %154 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %0, i64 0, i32 1
  store i64 0, i64* %154, align 8
  %155 = getelementptr inbounds %"class.jxl::MATreeLookup", %"class.jxl::MATreeLookup"* %8, i64 0, i32 0
  %156 = load %"class.std::__1::vector.202"*, %"class.std::__1::vector.202"** %155, align 8, !noalias !47
  %157 = getelementptr inbounds %"class.std::__1::vector.202", %"class.std::__1::vector.202"* %156, i64 0, i32 0, i32 0
  %158 = load %"struct.jxl::FlatDecisionNode"*, %"struct.jxl::FlatDecisionNode"** %157, align 8, !noalias !47
  %159 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %158, i64 0, i32 0
  %160 = load i32, i32* %159, align 8, !noalias !47
  %161 = icmp slt i32 %160, 0
  br i1 %161, label %204, label %162

162:                                              ; preds = %151
  %163 = load i32*, i32** %88, align 8, !noalias !47
  br label %164

164:                                              ; preds = %164, %162
  %165 = phi i32 [ %160, %162 ], [ %200, %164 ]
  %166 = phi i64 [ 0, %162 ], [ %198, %164 ]
  %167 = sext i32 %165 to i64
  %168 = getelementptr inbounds i32, i32* %163, i64 %167
  %169 = load i32, i32* %168, align 4, !noalias !47
  %170 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %158, i64 %166, i32 1, i32 0
  %171 = load i32, i32* %170, align 4, !noalias !47
  %172 = icmp sgt i32 %169, %171
  %173 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %158, i64 %166, i32 4
  %174 = bitcast %union.anon.206* %173 to [2 x i32]*
  %175 = bitcast %union.anon.206* %173 to i32*
  %176 = load i32, i32* %175, align 8, !noalias !47
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds i32, i32* %163, i64 %177
  %179 = load i32, i32* %178, align 4, !noalias !47
  %180 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %158, i64 %166, i32 3, i32 0, i64 0
  %181 = load i32, i32* %180, align 4, !noalias !47
  %182 = icmp sle i32 %179, %181
  %183 = zext i1 %182 to i32
  %184 = getelementptr inbounds [2 x i32], [2 x i32]* %174, i64 0, i64 1
  %185 = load i32, i32* %184, align 4, !noalias !47
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds i32, i32* %163, i64 %186
  %188 = load i32, i32* %187, align 4, !noalias !47
  %189 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %158, i64 %166, i32 3, i32 0, i64 1
  %190 = load i32, i32* %189, align 4, !noalias !47
  %191 = icmp sle i32 %188, %190
  %192 = zext i1 %191 to i32
  %193 = or i32 %192, 2
  %194 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %158, i64 %166, i32 2
  %195 = load i32, i32* %194, align 8, !noalias !47
  %196 = select i1 %172, i32 %183, i32 %193
  %197 = add i32 %196, %195
  %198 = zext i32 %197 to i64
  %199 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %158, i64 %198, i32 0
  %200 = load i32, i32* %199, align 8, !noalias !47
  %201 = icmp slt i32 %200, 0
  br i1 %201, label %202, label %164

202:                                              ; preds = %164
  %203 = zext i32 %197 to i64
  br label %204

204:                                              ; preds = %202, %151
  %205 = phi i64 [ 0, %151 ], [ %203, %202 ]
  %206 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %158, i64 %205, i32 2
  %207 = load i32, i32* %206, align 8, !noalias !47
  %208 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %158, i64 %205, i32 1, i32 0
  %209 = load i32, i32* %208, align 4, !noalias !47
  %210 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %158, i64 %205, i32 4, i32 0
  %211 = load i64, i64* %210, align 8, !noalias !47
  %212 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %158, i64 %205, i32 3, i32 0, i64 0
  %213 = load i32, i32* %212, align 4, !noalias !47
  store i32 %207, i32* %153, align 8
  %214 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %0, i64 0, i32 3
  store i32 %213, i32* %214, align 4
  %215 = bitcast [14 x i64]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %215) #9
  %216 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 0
  store i64 0, i64* %216, align 16
  %217 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 1
  store i64 %83, i64* %217, align 8
  %218 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 2
  store i64 %81, i64* %218, align 16
  %219 = sub nsw i64 %114, %83
  %220 = sub nsw i64 0, %219
  %221 = icmp slt i64 %219, 0
  %222 = select i1 %221, i64 %220, i64 %219
  %223 = sub nsw i64 %114, %81
  %224 = sub nsw i64 0, %223
  %225 = icmp slt i64 %223, 0
  %226 = select i1 %225, i64 %224, i64 %223
  %227 = icmp slt i64 %222, %226
  %228 = select i1 %227, i64 %83, i64 %81
  %229 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 4
  store i64 %228, i64* %229, align 16
  %230 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 6
  store i64 0, i64* %230, align 16
  %231 = icmp sgt i32 %82, %103
  %232 = select i1 %231, i32 %103, i32 %82
  %233 = icmp slt i32 %82, %103
  %234 = select i1 %233, i32 %103, i32 %82
  %235 = add i32 %119, %103
  %236 = icmp sgt i32 %232, %118
  %237 = select i1 %236, i32 %234, i32 %235
  %238 = icmp slt i32 %234, %118
  %239 = select i1 %238, i32 %232, i32 %237
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 5
  store i64 %240, i64* %241, align 8
  %242 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 8
  store i64 %84, i64* %242, align 16
  %243 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 7
  store i64 %80, i64* %243, align 8
  %244 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 9
  store i64 %85, i64* %244, align 8
  %245 = sdiv i64 %113, 2
  %246 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 3
  store i64 %245, i64* %246, align 8
  %247 = add nsw i64 %83, %84
  %248 = sdiv i64 %247, 2
  %249 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 10
  store i64 %248, i64* %249, align 16
  %250 = add nsw i64 %81, %84
  %251 = sdiv i64 %250, 2
  %252 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 11
  store i64 %251, i64* %252, align 8
  %253 = add nsw i64 %80, %81
  %254 = sdiv i64 %253, 2
  %255 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 12
  store i64 %254, i64* %255, align 16
  %256 = mul nsw i64 %81, 6
  %257 = shl nsw i64 %79, 1
  %258 = mul nsw i64 %83, 7
  %259 = mul nsw i64 %80, 3
  %260 = add nsw i64 %258, 8
  %261 = add nsw i64 %260, %256
  %262 = add nsw i64 %261, %259
  %263 = add i64 %262, %85
  %264 = sub i64 %263, %257
  %265 = add i64 %264, %86
  %266 = sdiv i64 %265, 16
  %267 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 13
  store i64 %266, i64* %267, align 8
  %268 = sext i32 %209 to i64
  %269 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 %268
  %270 = load i64, i64* %269, align 8
  %271 = add nsw i64 %270, %211
  store i64 %271, i64* %154, align 8
  %272 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %0, i64 0, i32 2
  store i32 %209, i32* %272, align 8
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %215) #9
  ret void

273:                                              ; preds = %78, %273
  %274 = phi i64 [ %281, %273 ], [ 0, %78 ]
  %275 = phi i64 [ %278, %273 ], [ 16, %78 ]
  %276 = getelementptr inbounds i32, i32* %147, i64 %274
  %277 = load i32, i32* %276, align 4
  %278 = add i64 %275, 1
  %279 = load i32*, i32** %88, align 8
  %280 = getelementptr inbounds i32, i32* %279, i64 %275
  store i32 %277, i32* %280, align 4
  %281 = add nuw i64 %274, 1
  %282 = load i64, i64* %148, align 8
  %283 = icmp ult i64 %281, %282
  br i1 %283, label %273, label %151
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6detail7PredictILi3EEENS_16PredictionResultEPNSt3__16vectorIiNS3_9allocatorIiEEEEmPKilmmNS_9PredictorEPKNS_12MATreeLookupEPKNS_7ChannelEPNS_8weighted5StateEPl(%"struct.jxl::PredictionResult"* noalias sret, %"class.std::__1::vector.61"*, i64, i32* noalias, i64, i64, i64, i32, %"class.jxl::MATreeLookup"*, %"class.jxl::Channel"*, %"struct.jxl::weighted::State"*, i64*) local_unnamed_addr #3 comdat {
  %13 = sub i64 0, %4
  %14 = alloca [14 x i64], align 16
  %15 = icmp ne i64 %5, 0
  br i1 %15, label %22, label %16

16:                                               ; preds = %12
  %17 = icmp eq i64 %6, 0
  br i1 %17, label %78, label %18

18:                                               ; preds = %16
  %19 = getelementptr inbounds i32, i32* %3, i64 %13
  %20 = load i32, i32* %19, align 4
  %21 = sext i32 %20 to i64
  br label %35

22:                                               ; preds = %12
  %23 = getelementptr inbounds i32, i32* %3, i64 -1
  %24 = load i32, i32* %23, align 4
  %25 = sext i32 %24 to i64
  %26 = icmp eq i64 %6, 0
  br i1 %26, label %47, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds i32, i32* %3, i64 %13
  %29 = load i32, i32* %28, align 4
  %30 = sext i32 %29 to i64
  %31 = xor i64 %4, -1
  %32 = getelementptr inbounds i32, i32* %3, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = sext i32 %33 to i64
  br label %35

35:                                               ; preds = %18, %27
  %36 = phi i64 [ %30, %27 ], [ %21, %18 ]
  %37 = phi i32 [ %24, %27 ], [ %20, %18 ]
  %38 = phi i64 [ %25, %27 ], [ %21, %18 ]
  %39 = phi i64 [ %34, %27 ], [ %21, %18 ]
  %40 = add i64 %5, 1
  %41 = icmp ult i64 %40, %2
  br i1 %41, label %42, label %47

42:                                               ; preds = %35
  %43 = sub nsw i64 1, %4
  %44 = getelementptr inbounds i32, i32* %3, i64 %43
  %45 = load i32, i32* %44, align 4
  %46 = sext i32 %45 to i64
  br label %47

47:                                               ; preds = %22, %35, %42
  %48 = phi i64 [ %39, %42 ], [ %39, %35 ], [ %25, %22 ]
  %49 = phi i1 [ true, %42 ], [ true, %35 ], [ false, %22 ]
  %50 = phi i64 [ %38, %42 ], [ %38, %35 ], [ %25, %22 ]
  %51 = phi i32 [ %37, %42 ], [ %37, %35 ], [ %24, %22 ]
  %52 = phi i64 [ %36, %42 ], [ %36, %35 ], [ %25, %22 ]
  %53 = phi i64 [ %46, %42 ], [ %36, %35 ], [ %25, %22 ]
  %54 = icmp ugt i64 %5, 1
  br i1 %54, label %55, label %59

55:                                               ; preds = %47
  %56 = getelementptr inbounds i32, i32* %3, i64 -2
  %57 = load i32, i32* %56, align 4
  %58 = sext i32 %57 to i64
  br label %59

59:                                               ; preds = %47, %55
  %60 = phi i64 [ %58, %55 ], [ %50, %47 ]
  %61 = icmp ugt i64 %6, 1
  br i1 %61, label %62, label %68

62:                                               ; preds = %59
  %63 = shl i64 %4, 1
  %64 = sub i64 0, %63
  %65 = getelementptr inbounds i32, i32* %3, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = sext i32 %66 to i64
  br label %68

68:                                               ; preds = %59, %62
  %69 = phi i64 [ %67, %62 ], [ %52, %59 ]
  %70 = add i64 %5, 2
  %71 = icmp ult i64 %70, %2
  %72 = and i1 %71, %49
  br i1 %72, label %73, label %78

73:                                               ; preds = %68
  %74 = sub nsw i64 2, %4
  %75 = getelementptr inbounds i32, i32* %3, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = sext i32 %76 to i64
  br label %78

78:                                               ; preds = %16, %68, %73
  %79 = phi i64 [ %69, %73 ], [ %69, %68 ], [ 0, %16 ]
  %80 = phi i64 [ %53, %73 ], [ %53, %68 ], [ 0, %16 ]
  %81 = phi i64 [ %52, %73 ], [ %52, %68 ], [ 0, %16 ]
  %82 = phi i32 [ %51, %73 ], [ %51, %68 ], [ 0, %16 ]
  %83 = phi i64 [ %50, %73 ], [ %50, %68 ], [ 0, %16 ]
  %84 = phi i64 [ %48, %73 ], [ %48, %68 ], [ 0, %16 ]
  %85 = phi i64 [ %60, %73 ], [ %60, %68 ], [ 0, %16 ]
  %86 = phi i64 [ %77, %73 ], [ %53, %68 ], [ 0, %16 ]
  %87 = trunc i64 %5 to i32
  %88 = getelementptr inbounds %"class.std::__1::vector.61", %"class.std::__1::vector.61"* %1, i64 0, i32 0, i32 0
  %89 = load i32*, i32** %88, align 8
  %90 = getelementptr inbounds i32, i32* %89, i64 3
  store i32 %87, i32* %90, align 4
  %91 = sub nsw i64 0, %81
  %92 = icmp slt i64 %81, 0
  %93 = select i1 %92, i64 %91, i64 %81
  %94 = trunc i64 %93 to i32
  %95 = load i32*, i32** %88, align 8
  %96 = getelementptr inbounds i32, i32* %95, i64 4
  store i32 %94, i32* %96, align 4
  %97 = sub nsw i64 0, %83
  %98 = icmp slt i64 %83, 0
  %99 = select i1 %98, i64 %97, i64 %83
  %100 = trunc i64 %99 to i32
  %101 = load i32*, i32** %88, align 8
  %102 = getelementptr inbounds i32, i32* %101, i64 5
  store i32 %100, i32* %102, align 4
  %103 = trunc i64 %81 to i32
  %104 = load i32*, i32** %88, align 8
  %105 = getelementptr inbounds i32, i32* %104, i64 6
  store i32 %103, i32* %105, align 4
  %106 = load i32*, i32** %88, align 8
  %107 = getelementptr inbounds i32, i32* %106, i64 7
  store i32 %82, i32* %107, align 4
  %108 = load i32*, i32** %88, align 8
  %109 = getelementptr inbounds i32, i32* %108, i64 9
  %110 = load i32, i32* %109, align 4
  %111 = sub i32 %82, %110
  %112 = getelementptr inbounds i32, i32* %108, i64 8
  store i32 %111, i32* %112, align 4
  %113 = add nsw i64 %81, %83
  %114 = sub nsw i64 %113, %84
  %115 = trunc i64 %114 to i32
  %116 = load i32*, i32** %88, align 8
  %117 = getelementptr inbounds i32, i32* %116, i64 9
  store i32 %115, i32* %117, align 4
  %118 = trunc i64 %84 to i32
  %119 = sub i32 %82, %118
  %120 = load i32*, i32** %88, align 8
  %121 = getelementptr inbounds i32, i32* %120, i64 10
  store i32 %119, i32* %121, align 4
  %122 = sub nsw i64 %84, %81
  %123 = trunc i64 %122 to i32
  %124 = load i32*, i32** %88, align 8
  %125 = getelementptr inbounds i32, i32* %124, i64 11
  store i32 %123, i32* %125, align 4
  %126 = sub nsw i64 %81, %80
  %127 = trunc i64 %126 to i32
  %128 = load i32*, i32** %88, align 8
  %129 = getelementptr inbounds i32, i32* %128, i64 12
  store i32 %127, i32* %129, align 4
  %130 = sub nsw i64 %81, %79
  %131 = trunc i64 %130 to i32
  %132 = load i32*, i32** %88, align 8
  %133 = getelementptr inbounds i32, i32* %132, i64 13
  store i32 %131, i32* %133, align 4
  %134 = trunc i64 %85 to i32
  %135 = sub i32 %82, %134
  %136 = load i32*, i32** %88, align 8
  %137 = getelementptr inbounds i32, i32* %136, i64 14
  store i32 %135, i32* %137, align 4
  %138 = and i64 %6, 1
  %139 = icmp ne i64 %138, 0
  %140 = add i64 %2, 2
  %141 = select i1 %139, i64 %140, i64 0
  %142 = add i64 %141, %5
  %143 = add i64 %2, -1
  %144 = icmp ugt i64 %143, %5
  %145 = zext i1 %144 to i64
  %146 = add i64 %142, %145
  %147 = zext i1 %15 to i64
  %148 = sub i64 %142, %147
  %149 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 2, i64 0, i32 0, i32 0
  %150 = load i32*, i32** %149, align 8
  %151 = getelementptr inbounds i32, i32* %150, i64 %142
  %152 = load i32, i32* %151, align 4
  %153 = getelementptr inbounds i32, i32* %150, i64 %146
  %154 = load i32, i32* %153, align 4
  %155 = add i32 %154, %152
  %156 = getelementptr inbounds i32, i32* %150, i64 %148
  %157 = load i32, i32* %156, align 4
  %158 = add i32 %155, %157
  %159 = zext i32 %158 to i64
  %160 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 9, i64 0
  %161 = load i32, i32* %160, align 4
  %162 = add nuw nsw i64 %159, 1
  %163 = tail call i64 @llvm.ctlz.i64(i64 %162, i1 true) #9, !range !12
  %164 = trunc i64 %163 to i32
  %165 = sub nsw i32 58, %164
  %166 = icmp sgt i32 %165, 0
  %167 = select i1 %166, i32 %165, i32 0
  %168 = zext i32 %167 to i64
  %169 = lshr i64 %159, %168
  %170 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 5, i64 %169
  %171 = load i32, i32* %170, align 4
  %172 = mul i32 %171, %161
  %173 = lshr i32 %172, %167
  %174 = add i32 %173, 4
  %175 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 2, i64 1, i32 0, i32 0
  %176 = load i32*, i32** %175, align 8
  %177 = getelementptr inbounds i32, i32* %176, i64 %142
  %178 = load i32, i32* %177, align 4
  %179 = getelementptr inbounds i32, i32* %176, i64 %146
  %180 = load i32, i32* %179, align 4
  %181 = add i32 %180, %178
  %182 = getelementptr inbounds i32, i32* %176, i64 %148
  %183 = load i32, i32* %182, align 4
  %184 = add i32 %181, %183
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 9, i64 1
  %187 = load i32, i32* %186, align 4
  %188 = add nuw nsw i64 %185, 1
  %189 = tail call i64 @llvm.ctlz.i64(i64 %188, i1 true) #9, !range !12
  %190 = trunc i64 %189 to i32
  %191 = sub nsw i32 58, %190
  %192 = icmp sgt i32 %191, 0
  %193 = select i1 %192, i32 %191, i32 0
  %194 = zext i32 %193 to i64
  %195 = lshr i64 %185, %194
  %196 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 5, i64 %195
  %197 = load i32, i32* %196, align 4
  %198 = mul i32 %197, %187
  %199 = lshr i32 %198, %193
  %200 = add i32 %199, 4
  %201 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 2, i64 2, i32 0, i32 0
  %202 = load i32*, i32** %201, align 8
  %203 = getelementptr inbounds i32, i32* %202, i64 %142
  %204 = load i32, i32* %203, align 4
  %205 = getelementptr inbounds i32, i32* %202, i64 %146
  %206 = load i32, i32* %205, align 4
  %207 = add i32 %206, %204
  %208 = getelementptr inbounds i32, i32* %202, i64 %148
  %209 = load i32, i32* %208, align 4
  %210 = add i32 %207, %209
  %211 = zext i32 %210 to i64
  %212 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 9, i64 2
  %213 = load i32, i32* %212, align 4
  %214 = add nuw nsw i64 %211, 1
  %215 = tail call i64 @llvm.ctlz.i64(i64 %214, i1 true) #9, !range !12
  %216 = trunc i64 %215 to i32
  %217 = sub nsw i32 58, %216
  %218 = icmp sgt i32 %217, 0
  %219 = select i1 %218, i32 %217, i32 0
  %220 = zext i32 %219 to i64
  %221 = lshr i64 %211, %220
  %222 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 5, i64 %221
  %223 = load i32, i32* %222, align 4
  %224 = mul i32 %223, %213
  %225 = lshr i32 %224, %219
  %226 = add i32 %225, 4
  %227 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 2, i64 3, i32 0, i32 0
  %228 = load i32*, i32** %227, align 8
  %229 = getelementptr inbounds i32, i32* %228, i64 %142
  %230 = load i32, i32* %229, align 4
  %231 = getelementptr inbounds i32, i32* %228, i64 %146
  %232 = load i32, i32* %231, align 4
  %233 = add i32 %232, %230
  %234 = getelementptr inbounds i32, i32* %228, i64 %148
  %235 = load i32, i32* %234, align 4
  %236 = add i32 %233, %235
  %237 = zext i32 %236 to i64
  %238 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 9, i64 3
  %239 = load i32, i32* %238, align 4
  %240 = add nuw nsw i64 %237, 1
  %241 = tail call i64 @llvm.ctlz.i64(i64 %240, i1 true) #9, !range !12
  %242 = trunc i64 %241 to i32
  %243 = sub nsw i32 58, %242
  %244 = icmp sgt i32 %243, 0
  %245 = select i1 %244, i32 %243, i32 0
  %246 = zext i32 %245 to i64
  %247 = lshr i64 %237, %246
  %248 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 5, i64 %247
  %249 = load i32, i32* %248, align 4
  %250 = mul i32 %249, %239
  %251 = lshr i32 %250, %245
  %252 = add i32 %251, 4
  %253 = shl nsw i64 %81, 3
  %254 = shl nsw i64 %83, 3
  %255 = shl nsw i64 %80, 3
  %256 = shl nsw i64 %84, 3
  %257 = shl nsw i64 %79, 3
  %258 = icmp eq i64 %5, 0
  br i1 %258, label %259, label %262

259:                                              ; preds = %78
  %260 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 3, i32 0, i32 0
  %261 = load i32*, i32** %260, align 8
  br label %271

262:                                              ; preds = %78
  %263 = select i1 %139, i64 0, i64 %140
  %264 = add i64 %5, -1
  %265 = add i64 %264, %263
  %266 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 3, i32 0, i32 0
  %267 = load i32*, i32** %266, align 8
  %268 = getelementptr inbounds i32, i32* %267, i64 %265
  %269 = load i32, i32* %268, align 4
  %270 = sext i32 %269 to i64
  br label %271

271:                                              ; preds = %262, %259
  %272 = phi i32* [ %267, %262 ], [ %261, %259 ]
  %273 = phi i64 [ %270, %262 ], [ 0, %259 ]
  %274 = getelementptr inbounds i32, i32* %272, i64 %142
  %275 = load i32, i32* %274, align 4
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds i32, i32* %272, i64 %148
  %278 = load i32, i32* %277, align 4
  %279 = sext i32 %278 to i64
  %280 = add nsw i64 %273, %276
  %281 = getelementptr inbounds i32, i32* %272, i64 %146
  %282 = load i32, i32* %281, align 4
  %283 = sext i32 %282 to i64
  %284 = sub nsw i64 0, %276
  %285 = icmp slt i64 %276, 0
  %286 = select i1 %285, i64 %284, i64 %276
  %287 = sub nsw i64 0, %273
  %288 = icmp slt i64 %273, 0
  %289 = select i1 %288, i64 %287, i64 %273
  %290 = icmp sgt i64 %286, %289
  %291 = select i1 %290, i64 %276, i64 %273
  %292 = sub nsw i64 0, %279
  %293 = icmp slt i64 %279, 0
  %294 = select i1 %293, i64 %292, i64 %279
  %295 = sub nsw i64 0, %291
  %296 = icmp slt i64 %291, 0
  %297 = select i1 %296, i64 %295, i64 %291
  %298 = icmp sgt i64 %294, %297
  %299 = select i1 %298, i64 %279, i64 %291
  %300 = sub nsw i64 0, %283
  %301 = icmp slt i64 %283, 0
  %302 = select i1 %301, i64 %300, i64 %283
  %303 = sub nsw i64 0, %299
  %304 = icmp slt i64 %299, 0
  %305 = select i1 %304, i64 %303, i64 %299
  %306 = icmp sgt i64 %302, %305
  %307 = select i1 %306, i64 %283, i64 %299
  %308 = trunc i64 %307 to i32
  %309 = load i32*, i32** %88, align 8
  %310 = getelementptr inbounds i32, i32* %309, i64 15
  store i32 %308, i32* %310, align 4
  %311 = sub nsw i64 %254, %253
  %312 = add nsw i64 %311, %255
  %313 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 0, i64 0
  store i64 %312, i64* %313, align 8
  %314 = add nsw i64 %280, %283
  %315 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 2
  %316 = load i32, i32* %315, align 4
  %317 = sext i32 %316 to i64
  %318 = mul nsw i64 %314, %317
  %319 = ashr i64 %318, 5
  %320 = sub nsw i64 %253, %319
  %321 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 0, i64 1
  store i64 %320, i64* %321, align 8
  %322 = add nsw i64 %280, %279
  %323 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 3
  %324 = load i32, i32* %323, align 8
  %325 = sext i32 %324 to i64
  %326 = mul nsw i64 %322, %325
  %327 = ashr i64 %326, 5
  %328 = sub nsw i64 %254, %327
  %329 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 0, i64 2
  store i64 %328, i64* %329, align 8
  %330 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 4
  %331 = load i32, i32* %330, align 4
  %332 = sext i32 %331 to i64
  %333 = mul nsw i64 %332, %279
  %334 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 5
  %335 = load i32, i32* %334, align 8
  %336 = sext i32 %335 to i64
  %337 = mul nsw i64 %336, %276
  %338 = add nsw i64 %337, %333
  %339 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 6
  %340 = load i32, i32* %339, align 4
  %341 = sext i32 %340 to i64
  %342 = mul nsw i64 %341, %283
  %343 = add nsw i64 %338, %342
  %344 = sub nsw i64 %257, %253
  %345 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 7
  %346 = load i32, i32* %345, align 8
  %347 = sext i32 %346 to i64
  %348 = mul nsw i64 %344, %347
  %349 = add nsw i64 %343, %348
  %350 = sub nsw i64 %256, %254
  %351 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 4, i32 8
  %352 = load i32, i32* %351, align 4
  %353 = sext i32 %352 to i64
  %354 = mul nsw i64 %350, %353
  %355 = add nsw i64 %349, %354
  %356 = ashr i64 %355, 5
  %357 = sub nsw i64 %253, %356
  %358 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 0, i64 3
  store i64 %357, i64* %358, align 8
  %359 = add i32 %200, %174
  %360 = add i32 %359, %226
  %361 = add i32 %360, %252
  %362 = tail call i32 @llvm.ctlz.i32(i32 %361, i1 true) #9, !range !13
  %363 = sub nsw i32 27, %362
  %364 = lshr i32 %174, %363
  %365 = lshr i32 %200, %363
  %366 = add i32 %365, %364
  %367 = lshr i32 %226, %363
  %368 = add i32 %366, %367
  %369 = lshr i32 %252, %363
  %370 = add i32 %368, %369
  %371 = lshr i32 %370, 1
  %372 = add nsw i32 %371, -1
  %373 = zext i32 %372 to i64
  %374 = zext i32 %364 to i64
  %375 = mul nsw i64 %312, %374
  %376 = zext i32 %365 to i64
  %377 = mul nsw i64 %320, %376
  %378 = zext i32 %367 to i64
  %379 = mul nsw i64 %328, %378
  %380 = zext i32 %369 to i64
  %381 = mul nsw i64 %357, %380
  %382 = add i64 %375, %373
  %383 = add i64 %382, %377
  %384 = add i64 %383, %379
  %385 = add i64 %384, %381
  %386 = add i32 %370, -1
  %387 = zext i32 %386 to i64
  %388 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 5, i64 %387
  %389 = load i32, i32* %388, align 4, !noalias !50
  %390 = zext i32 %389 to i64
  %391 = mul nsw i64 %385, %390
  %392 = ashr i64 %391, 24
  %393 = getelementptr inbounds %"struct.jxl::weighted::State", %"struct.jxl::weighted::State"* %10, i64 0, i32 1
  %394 = xor i64 %273, %276
  %395 = xor i32 %278, %275
  %396 = sext i32 %395 to i64
  %397 = or i64 %394, %396
  %398 = icmp sgt i64 %397, 0
  br i1 %398, label %412, label %399

399:                                              ; preds = %271
  %400 = icmp slt i64 %255, %253
  %401 = select i1 %400, i64 %253, i64 %255
  %402 = icmp slt i64 %254, %401
  %403 = select i1 %402, i64 %401, i64 %254
  %404 = icmp slt i64 %253, %255
  %405 = select i1 %404, i64 %253, i64 %255
  %406 = icmp slt i64 %405, %254
  %407 = select i1 %406, i64 %405, i64 %254
  %408 = icmp slt i64 %392, %403
  %409 = select i1 %408, i64 %392, i64 %403
  %410 = icmp slt i64 %407, %409
  %411 = select i1 %410, i64 %409, i64 %407
  br label %412

412:                                              ; preds = %271, %399
  %413 = phi i64 [ %411, %399 ], [ %392, %271 ]
  store i64 %413, i64* %393, align 8
  %414 = add nsw i64 %413, 3
  %415 = ashr i64 %414, 3
  %416 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %417 = load i8*, i8** %416, align 8
  %418 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 0, i32 0, i32 4
  %419 = load i64, i64* %418, align 8
  %420 = mul i64 %419, %5
  %421 = getelementptr inbounds i8, i8* %417, i64 %420
  %422 = ptrtoint i8* %421 to i64
  %423 = and i64 %422, 63
  %424 = icmp eq i64 %423, 0
  tail call void @llvm.assume(i1 %424) #9
  %425 = bitcast i8* %421 to i32*
  %426 = getelementptr inbounds %"class.jxl::Channel", %"class.jxl::Channel"* %9, i64 0, i32 1
  %427 = load i64, i64* %426, align 8
  %428 = icmp eq i64 %427, 0
  br i1 %428, label %429, label %551

429:                                              ; preds = %551, %412
  %430 = bitcast %"struct.jxl::PredictionResult"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %430, i8 -86, i64 24, i1 false)
  %431 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %0, i64 0, i32 0
  store i32 0, i32* %431, align 8
  %432 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %0, i64 0, i32 1
  store i64 0, i64* %432, align 8
  %433 = getelementptr inbounds %"class.jxl::MATreeLookup", %"class.jxl::MATreeLookup"* %8, i64 0, i32 0
  %434 = load %"class.std::__1::vector.202"*, %"class.std::__1::vector.202"** %433, align 8, !noalias !53
  %435 = getelementptr inbounds %"class.std::__1::vector.202", %"class.std::__1::vector.202"* %434, i64 0, i32 0, i32 0
  %436 = load %"struct.jxl::FlatDecisionNode"*, %"struct.jxl::FlatDecisionNode"** %435, align 8, !noalias !53
  %437 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %436, i64 0, i32 0
  %438 = load i32, i32* %437, align 8, !noalias !53
  %439 = icmp slt i32 %438, 0
  br i1 %439, label %482, label %440

440:                                              ; preds = %429
  %441 = load i32*, i32** %88, align 8, !noalias !53
  br label %442

442:                                              ; preds = %442, %440
  %443 = phi i32 [ %438, %440 ], [ %478, %442 ]
  %444 = phi i64 [ 0, %440 ], [ %476, %442 ]
  %445 = sext i32 %443 to i64
  %446 = getelementptr inbounds i32, i32* %441, i64 %445
  %447 = load i32, i32* %446, align 4, !noalias !53
  %448 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %436, i64 %444, i32 1, i32 0
  %449 = load i32, i32* %448, align 4, !noalias !53
  %450 = icmp sgt i32 %447, %449
  %451 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %436, i64 %444, i32 4
  %452 = bitcast %union.anon.206* %451 to [2 x i32]*
  %453 = bitcast %union.anon.206* %451 to i32*
  %454 = load i32, i32* %453, align 8, !noalias !53
  %455 = sext i32 %454 to i64
  %456 = getelementptr inbounds i32, i32* %441, i64 %455
  %457 = load i32, i32* %456, align 4, !noalias !53
  %458 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %436, i64 %444, i32 3, i32 0, i64 0
  %459 = load i32, i32* %458, align 4, !noalias !53
  %460 = icmp sle i32 %457, %459
  %461 = zext i1 %460 to i32
  %462 = getelementptr inbounds [2 x i32], [2 x i32]* %452, i64 0, i64 1
  %463 = load i32, i32* %462, align 4, !noalias !53
  %464 = sext i32 %463 to i64
  %465 = getelementptr inbounds i32, i32* %441, i64 %464
  %466 = load i32, i32* %465, align 4, !noalias !53
  %467 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %436, i64 %444, i32 3, i32 0, i64 1
  %468 = load i32, i32* %467, align 4, !noalias !53
  %469 = icmp sle i32 %466, %468
  %470 = zext i1 %469 to i32
  %471 = or i32 %470, 2
  %472 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %436, i64 %444, i32 2
  %473 = load i32, i32* %472, align 8, !noalias !53
  %474 = select i1 %450, i32 %461, i32 %471
  %475 = add i32 %474, %473
  %476 = zext i32 %475 to i64
  %477 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %436, i64 %476, i32 0
  %478 = load i32, i32* %477, align 8, !noalias !53
  %479 = icmp slt i32 %478, 0
  br i1 %479, label %480, label %442

480:                                              ; preds = %442
  %481 = zext i32 %475 to i64
  br label %482

482:                                              ; preds = %480, %429
  %483 = phi i64 [ 0, %429 ], [ %481, %480 ]
  %484 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %436, i64 %483, i32 2
  %485 = load i32, i32* %484, align 8, !noalias !53
  %486 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %436, i64 %483, i32 1, i32 0
  %487 = load i32, i32* %486, align 4, !noalias !53
  %488 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %436, i64 %483, i32 4, i32 0
  %489 = load i64, i64* %488, align 8, !noalias !53
  %490 = getelementptr inbounds %"struct.jxl::FlatDecisionNode", %"struct.jxl::FlatDecisionNode"* %436, i64 %483, i32 3, i32 0, i64 0
  %491 = load i32, i32* %490, align 4, !noalias !53
  store i32 %485, i32* %431, align 8
  %492 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %0, i64 0, i32 3
  store i32 %491, i32* %492, align 4
  %493 = bitcast [14 x i64]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %493) #9
  %494 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 0
  store i64 0, i64* %494, align 16
  %495 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 1
  store i64 %83, i64* %495, align 8
  %496 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 2
  store i64 %81, i64* %496, align 16
  %497 = sub nsw i64 %114, %83
  %498 = sub nsw i64 0, %497
  %499 = icmp slt i64 %497, 0
  %500 = select i1 %499, i64 %498, i64 %497
  %501 = sub nsw i64 %114, %81
  %502 = sub nsw i64 0, %501
  %503 = icmp slt i64 %501, 0
  %504 = select i1 %503, i64 %502, i64 %501
  %505 = icmp slt i64 %500, %504
  %506 = select i1 %505, i64 %83, i64 %81
  %507 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 4
  store i64 %506, i64* %507, align 16
  %508 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 6
  store i64 %415, i64* %508, align 16
  %509 = icmp sgt i32 %82, %103
  %510 = select i1 %509, i32 %103, i32 %82
  %511 = icmp slt i32 %82, %103
  %512 = select i1 %511, i32 %103, i32 %82
  %513 = add i32 %119, %103
  %514 = icmp sgt i32 %510, %118
  %515 = select i1 %514, i32 %512, i32 %513
  %516 = icmp slt i32 %512, %118
  %517 = select i1 %516, i32 %510, i32 %515
  %518 = sext i32 %517 to i64
  %519 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 5
  store i64 %518, i64* %519, align 8
  %520 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 8
  store i64 %84, i64* %520, align 16
  %521 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 7
  store i64 %80, i64* %521, align 8
  %522 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 9
  store i64 %85, i64* %522, align 8
  %523 = sdiv i64 %113, 2
  %524 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 3
  store i64 %523, i64* %524, align 8
  %525 = add nsw i64 %83, %84
  %526 = sdiv i64 %525, 2
  %527 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 10
  store i64 %526, i64* %527, align 16
  %528 = add nsw i64 %81, %84
  %529 = sdiv i64 %528, 2
  %530 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 11
  store i64 %529, i64* %530, align 8
  %531 = add nsw i64 %80, %81
  %532 = sdiv i64 %531, 2
  %533 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 12
  store i64 %532, i64* %533, align 16
  %534 = mul nsw i64 %81, 6
  %535 = shl nsw i64 %79, 1
  %536 = mul nsw i64 %83, 7
  %537 = mul nsw i64 %80, 3
  %538 = add nsw i64 %536, 8
  %539 = add nsw i64 %538, %534
  %540 = add nsw i64 %539, %537
  %541 = add i64 %540, %85
  %542 = sub i64 %541, %535
  %543 = add i64 %542, %86
  %544 = sdiv i64 %543, 16
  %545 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 13
  store i64 %544, i64* %545, align 8
  %546 = sext i32 %487 to i64
  %547 = getelementptr inbounds [14 x i64], [14 x i64]* %14, i64 0, i64 %546
  %548 = load i64, i64* %547, align 8
  %549 = add nsw i64 %548, %489
  store i64 %549, i64* %432, align 8
  %550 = getelementptr inbounds %"struct.jxl::PredictionResult", %"struct.jxl::PredictionResult"* %0, i64 0, i32 2
  store i32 %487, i32* %550, align 8
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %493) #9
  ret void

551:                                              ; preds = %412, %551
  %552 = phi i64 [ %559, %551 ], [ 0, %412 ]
  %553 = phi i64 [ %556, %551 ], [ 16, %412 ]
  %554 = getelementptr inbounds i32, i32* %425, i64 %552
  %555 = load i32, i32* %554, align 4
  %556 = add i64 %553, 1
  %557 = load i32*, i32** %88, align 8
  %558 = getelementptr inbounds i32, i32* %557, i64 %553
  store i32 %555, i32* %558, align 4
  %559 = add nuw i64 %552, 1
  %560 = load i64, i64* %426, align 8
  %561 = icmp ult i64 %559, %560
  br i1 %561, label %551, label %429
}

declare void @_ZN3jxl10LZ77ParamsC1Ev(%"struct.jxl::LZ77Params"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6FieldsD2Ev(%"class.jxl::Fields"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11GroupHeaderD0Ev(%"struct.jxl::GroupHeader"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl11GroupHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 3
  %4 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %4, align 8
  %6 = icmp eq %"class.jxl::Transform"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.jxl::Transform"* %5 to i8*
  %9 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 3, i32 0, i32 1
  %10 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %9, align 8
  %11 = icmp eq %"class.jxl::Transform"* %10, %5
  br i1 %11, label %22, label %12

12:                                               ; preds = %7, %12
  %13 = phi %"class.jxl::Transform"* [ %14, %12 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %13, i64 -1
  %15 = bitcast %"class.jxl::Transform"* %14 to void (%"class.jxl::Transform"*)***
  %16 = load void (%"class.jxl::Transform"*)**, void (%"class.jxl::Transform"*)*** %15, align 8
  %17 = load void (%"class.jxl::Transform"*)*, void (%"class.jxl::Transform"*)** %16, align 8
  tail call void %17(%"class.jxl::Transform"* %14) #9
  %18 = icmp eq %"class.jxl::Transform"* %14, %5
  br i1 %18, label %19, label %12

19:                                               ; preds = %12
  %20 = bitcast %"class.std::__1::vector.4"* %3 to i8**
  %21 = load i8*, i8** %20, align 8
  br label %22

22:                                               ; preds = %19, %7
  %23 = phi i8* [ %21, %19 ], [ %8, %7 ]
  store %"class.jxl::Transform"* %5, %"class.jxl::Transform"** %9, align 8
  tail call void @_ZdlPv(i8* %23) #12
  br label %24

24:                                               ; preds = %1, %22
  %25 = bitcast %"struct.jxl::GroupHeader"* %0 to i8*
  tail call void @_ZdlPv(i8* %25) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl11GroupHeader4NameEv(%"struct.jxl::GroupHeader"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl11GroupHeader11VisitFieldsEPNS_7VisitorE(%"struct.jxl::GroupHeader"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 comdat align 2 {
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 1
  %5 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1, i8*)***
  %6 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %5, align 8
  %7 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %6, i64 3
  %8 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %7, align 8
  %9 = tail call i32 %8(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* %4) #9
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %87

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 2, i32 0
  %13 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  %14 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %13, align 8
  %15 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %14, i64 11
  %16 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %15, align 8
  %17 = tail call i32 %16(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %12) #9
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %87

19:                                               ; preds = %11
  %20 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #9
  %21 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 3
  %22 = getelementptr inbounds %"struct.jxl::GroupHeader", %"struct.jxl::GroupHeader"* %0, i64 0, i32 3, i32 0, i32 1
  %23 = bitcast %"class.jxl::Transform"** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast %"class.std::__1::vector.4"* %21 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %24, %26
  %28 = sdiv exact i64 %27, 72
  %29 = trunc i64 %28 to i32
  store i32 %29, i32* %3, align 4
  %30 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)***
  %31 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %30, align 8, !noalias !56
  %32 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %31, i64 4
  %33 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %32, align 8, !noalias !56
  %34 = call i32 %33(%"class.jxl::Visitor"* %1, i64 -9223372030412324864, i64 2503965933635, i32 0, i32* nonnull %3) #9
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %85

36:                                               ; preds = %19
  %37 = bitcast %"class.jxl::Visitor"* %1 to i1 (%"class.jxl::Visitor"*)***
  %38 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %37, align 8
  %39 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %38, i64 12
  %40 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %39, align 8
  %41 = call zeroext i1 %40(%"class.jxl::Visitor"* %1) #9
  br i1 %41, label %42, label %67

42:                                               ; preds = %36
  %43 = load i32, i32* %3, align 4
  %44 = zext i32 %43 to i64
  %45 = load i64, i64* %23, align 8
  %46 = load i64, i64* %25, align 8
  %47 = sub i64 %45, %46
  %48 = sdiv exact i64 %47, 72
  %49 = icmp ult i64 %48, %44
  %50 = inttoptr i64 %46 to %"class.jxl::Transform"*
  %51 = inttoptr i64 %45 to %"class.jxl::Transform"*
  br i1 %49, label %52, label %54

52:                                               ; preds = %42
  %53 = sub nsw i64 %44, %48
  call void @_ZNSt3__16vectorIN3jxl9TransformENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.4"* %21, i64 %53) #9
  br label %67

54:                                               ; preds = %42
  %55 = icmp ugt i64 %48, %44
  br i1 %55, label %56, label %67

56:                                               ; preds = %54
  %57 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %50, i64 %44
  %58 = icmp eq %"class.jxl::Transform"* %57, %51
  br i1 %58, label %66, label %59

59:                                               ; preds = %56, %59
  %60 = phi %"class.jxl::Transform"* [ %61, %59 ], [ %51, %56 ]
  %61 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %60, i64 -1
  %62 = bitcast %"class.jxl::Transform"* %61 to void (%"class.jxl::Transform"*)***
  %63 = load void (%"class.jxl::Transform"*)**, void (%"class.jxl::Transform"*)*** %62, align 8
  %64 = load void (%"class.jxl::Transform"*)*, void (%"class.jxl::Transform"*)** %63, align 8
  call void %64(%"class.jxl::Transform"* %61) #9
  %65 = icmp eq %"class.jxl::Transform"* %61, %57
  br i1 %65, label %66, label %59

66:                                               ; preds = %59, %56
  store %"class.jxl::Transform"* %57, %"class.jxl::Transform"** %22, align 8
  br label %67

67:                                               ; preds = %66, %54, %52, %36
  %68 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %21, i64 0, i32 0, i32 0
  %69 = load i32, i32* %3, align 4
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %85, label %75

71:                                               ; preds = %75
  %72 = load i32, i32* %3, align 4
  %73 = zext i32 %72 to i64
  %74 = icmp ult i64 %84, %73
  br i1 %74, label %75, label %85

75:                                               ; preds = %67, %71
  %76 = phi i64 [ %84, %71 ], [ 0, %67 ]
  %77 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %68, align 8
  %78 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %77, i64 %76, i32 0
  %79 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %13, align 8
  %80 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %79, i64 11
  %81 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %80, align 8
  %82 = call i32 %81(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %78) #9
  %83 = icmp eq i32 %82, 0
  %84 = add nuw nsw i64 %76, 1
  br i1 %83, label %71, label %85

85:                                               ; preds = %75, %71, %67, %19
  %86 = phi i32 [ %34, %19 ], [ 0, %67 ], [ %82, %75 ], [ 0, %71 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #9
  br label %87

87:                                               ; preds = %11, %2, %85
  %88 = phi i32 [ %86, %85 ], [ %17, %11 ], [ %9, %2 ]
  ret i32 %88
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl9TransformENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.4"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.jxl::Transform"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.jxl::Transform"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 72
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %24, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.jxl::Transform"*
  %14 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %22, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %"class.jxl::Transform"* %14 to i64
  br label %22

18:                                               ; preds = %12, %18
  %19 = phi %"class.jxl::Transform"* [ %20, %18 ], [ %13, %12 ]
  tail call void @_ZN3jxl9TransformC2ENS_11TransformIdE(%"class.jxl::Transform"* %19, i32 5) #9
  %20 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %19, i64 1
  %21 = icmp eq %"class.jxl::Transform"* %20, %14
  br i1 %21, label %16, label %18

22:                                               ; preds = %12, %16
  %23 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %23, i64* %7, align 8
  br label %119

24:                                               ; preds = %2
  %25 = bitcast %"class.std::__1::vector.4"* %0 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %8, %26
  %28 = sdiv exact i64 %27, 72
  %29 = add i64 %28, %1
  %30 = icmp ugt i64 %29, 256204778801521550
  br i1 %30, label %31, label %33

31:                                               ; preds = %24
  %32 = bitcast %"class.std::__1::vector.4"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %32) #11
  unreachable

33:                                               ; preds = %24
  %34 = sub i64 %5, %26
  %35 = sdiv exact i64 %34, 72
  %36 = icmp ult i64 %35, 128102389400760775
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = shl nsw i64 %35, 1
  %39 = icmp ult i64 %38, %29
  %40 = select i1 %39, i64 %29, i64 %38
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %47, label %42

42:                                               ; preds = %33, %37
  %43 = phi i64 [ %40, %37 ], [ 256204778801521550, %33 ]
  %44 = mul i64 %43, 72
  %45 = tail call i8* @_Znwm(i64 %44) #12
  %46 = bitcast i8* %45 to %"class.jxl::Transform"*
  br label %47

47:                                               ; preds = %37, %42
  %48 = phi i64 [ %43, %42 ], [ 0, %37 ]
  %49 = phi %"class.jxl::Transform"* [ %46, %42 ], [ null, %37 ]
  %50 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %49, i64 %28
  %51 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %49, i64 %48
  %52 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %50, i64 %1
  br label %53

53:                                               ; preds = %47, %53
  %54 = phi %"class.jxl::Transform"* [ %55, %53 ], [ %50, %47 ]
  tail call void @_ZN3jxl9TransformC2ENS_11TransformIdE(%"class.jxl::Transform"* %54, i32 5) #9
  %55 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %54, i64 1
  %56 = icmp eq %"class.jxl::Transform"* %52, %55
  br i1 %56, label %57, label %53

57:                                               ; preds = %53
  %58 = ptrtoint %"class.jxl::Transform"* %51 to i64
  %59 = ptrtoint %"class.jxl::Transform"* %52 to i64
  %60 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 0
  %61 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %60, align 8
  %62 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %6, align 8
  %63 = icmp eq %"class.jxl::Transform"* %62, %61
  br i1 %63, label %64, label %66

64:                                               ; preds = %57
  %65 = ptrtoint %"class.jxl::Transform"* %61 to i64
  br label %101

66:                                               ; preds = %57, %66
  %67 = phi %"class.jxl::Transform"* [ %96, %66 ], [ %50, %57 ]
  %68 = phi %"class.jxl::Transform"* [ %69, %66 ], [ %62, %57 ]
  %69 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %68, i64 -1
  %70 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %67, i64 -1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %70, align 8
  %71 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %67, i64 -1, i32 1
  %72 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %68, i64 -1, i32 1
  %73 = bitcast i32* %71 to i8*
  %74 = bitcast i32* %72 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %73, i8* align 8 %74, i64 24, i1 false) #9
  %75 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %67, i64 -1, i32 7
  %76 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %68, i64 -1, i32 7
  %77 = bitcast %"class.std::__1::vector.6"* %75 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %77, i8 0, i64 24, i1 false) #9
  %78 = bitcast %"class.std::__1::vector.6"* %76 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = bitcast %"class.std::__1::vector.6"* %75 to i64*
  store i64 %79, i64* %80, align 8
  %81 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %68, i64 -1, i32 7, i32 0, i32 1
  %82 = bitcast %"struct.jxl::SqueezeParams"** %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %67, i64 -1, i32 7, i32 0, i32 1
  %85 = bitcast %"struct.jxl::SqueezeParams"** %84 to i64*
  store i64 %83, i64* %85, align 8
  %86 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %68, i64 -1, i32 7, i32 0, i32 2, i32 0, i32 0
  %87 = bitcast %"struct.jxl::SqueezeParams"** %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %67, i64 -1, i32 7, i32 0, i32 2, i32 0, i32 0
  %90 = bitcast %"struct.jxl::SqueezeParams"** %89 to i64*
  store i64 %88, i64* %90, align 8
  %91 = bitcast %"class.std::__1::vector.6"* %76 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %91, i8 0, i64 24, i1 false) #9
  %92 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %67, i64 -1, i32 8
  %93 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %68, i64 -1, i32 8
  %94 = bitcast i32* %92 to i8*
  %95 = bitcast i32* %93 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 10, i1 false) #9
  %96 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %67, i64 -1
  %97 = icmp eq %"class.jxl::Transform"* %69, %61
  br i1 %97, label %98, label %66

98:                                               ; preds = %66
  %99 = load i64, i64* %25, align 8
  %100 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %6, align 8
  br label %101

101:                                              ; preds = %64, %98
  %102 = phi %"class.jxl::Transform"* [ %61, %64 ], [ %100, %98 ]
  %103 = phi %"class.jxl::Transform"* [ %50, %64 ], [ %96, %98 ]
  %104 = phi i64 [ %65, %64 ], [ %99, %98 ]
  %105 = ptrtoint %"class.jxl::Transform"* %103 to i64
  store i64 %105, i64* %25, align 8
  store i64 %59, i64* %7, align 8
  store i64 %58, i64* %4, align 8
  %106 = inttoptr i64 %104 to %"class.jxl::Transform"*
  %107 = icmp eq %"class.jxl::Transform"* %102, %106
  br i1 %107, label %115, label %108

108:                                              ; preds = %101, %108
  %109 = phi %"class.jxl::Transform"* [ %110, %108 ], [ %102, %101 ]
  %110 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %109, i64 -1
  %111 = bitcast %"class.jxl::Transform"* %110 to void (%"class.jxl::Transform"*)***
  %112 = load void (%"class.jxl::Transform"*)**, void (%"class.jxl::Transform"*)*** %111, align 8
  %113 = load void (%"class.jxl::Transform"*)*, void (%"class.jxl::Transform"*)** %112, align 8
  tail call void %113(%"class.jxl::Transform"* %110) #9
  %114 = icmp eq %"class.jxl::Transform"* %110, %106
  br i1 %114, label %115, label %108

115:                                              ; preds = %108, %101
  %116 = icmp eq i64 %104, 0
  br i1 %116, label %119, label %117

117:                                              ; preds = %115
  %118 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %118) #12
  br label %119

119:                                              ; preds = %117, %115, %22
  ret void
}

declare void @_ZN3jxl9TransformC2ENS_11TransformIdE(%"class.jxl::Transform"*, i32) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9TransformD2Ev(%"class.jxl::Transform"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7
  %4 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %3, i64 0, i32 0, i32 0
  %5 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %4, align 8
  %6 = icmp eq %"struct.jxl::SqueezeParams"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = bitcast %"struct.jxl::SqueezeParams"* %5 to i8*
  %9 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7, i32 0, i32 1
  %10 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %9, align 8
  %11 = icmp eq %"struct.jxl::SqueezeParams"* %10, %5
  br i1 %11, label %22, label %12

12:                                               ; preds = %7, %12
  %13 = phi %"struct.jxl::SqueezeParams"* [ %14, %12 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %13, i64 -1
  %15 = bitcast %"struct.jxl::SqueezeParams"* %14 to void (%"struct.jxl::SqueezeParams"*)***
  %16 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %15, align 8
  %17 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %16, align 8
  tail call void %17(%"struct.jxl::SqueezeParams"* %14) #9
  %18 = icmp eq %"struct.jxl::SqueezeParams"* %14, %5
  br i1 %18, label %19, label %12

19:                                               ; preds = %12
  %20 = bitcast %"class.std::__1::vector.6"* %3 to i8**
  %21 = load i8*, i8** %20, align 8
  br label %22

22:                                               ; preds = %19, %7
  %23 = phi i8* [ %21, %19 ], [ %8, %7 ]
  store %"struct.jxl::SqueezeParams"* %5, %"struct.jxl::SqueezeParams"** %9, align 8
  tail call void @_ZdlPv(i8* %23) #12
  br label %24

24:                                               ; preds = %1, %22
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9TransformD0Ev(%"class.jxl::Transform"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7
  %4 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %3, i64 0, i32 0, i32 0
  %5 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %4, align 8
  %6 = icmp eq %"struct.jxl::SqueezeParams"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = bitcast %"struct.jxl::SqueezeParams"* %5 to i8*
  %9 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7, i32 0, i32 1
  %10 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %9, align 8
  %11 = icmp eq %"struct.jxl::SqueezeParams"* %10, %5
  br i1 %11, label %22, label %12

12:                                               ; preds = %7, %12
  %13 = phi %"struct.jxl::SqueezeParams"* [ %14, %12 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %13, i64 -1
  %15 = bitcast %"struct.jxl::SqueezeParams"* %14 to void (%"struct.jxl::SqueezeParams"*)***
  %16 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %15, align 8
  %17 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %16, align 8
  tail call void %17(%"struct.jxl::SqueezeParams"* %14) #9
  %18 = icmp eq %"struct.jxl::SqueezeParams"* %14, %5
  br i1 %18, label %19, label %12

19:                                               ; preds = %12
  %20 = bitcast %"class.std::__1::vector.6"* %3 to i8**
  %21 = load i8*, i8** %20, align 8
  br label %22

22:                                               ; preds = %19, %7
  %23 = phi i8* [ %21, %19 ], [ %8, %7 ]
  store %"struct.jxl::SqueezeParams"* %5, %"struct.jxl::SqueezeParams"** %9, align 8
  tail call void @_ZdlPv(i8* %23) #12
  br label %24

24:                                               ; preds = %1, %22
  %25 = bitcast %"class.jxl::Transform"* %0 to i8*
  tail call void @_ZdlPv(i8* %25) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl9Transform4NameEv(%"class.jxl::Transform"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.17, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl9Transform11VisitFieldsEPNS_7VisitorE(%"class.jxl::Transform"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 comdat align 2 {
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 1
  %5 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)***
  %6 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !59
  %7 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %6, i64 4
  %8 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %7, align 8, !noalias !59
  %9 = tail call i32 %8(%"class.jxl::Visitor"* %1, i64 -9223372030412324864, i64 -9223372021822390270, i32 0, i32* %4) #9
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %165

11:                                               ; preds = %2
  %12 = load i32, i32* %4, align 8
  %13 = icmp eq i32 %12, 3
  br i1 %13, label %165, label %14

14:                                               ; preds = %11
  %15 = icmp ult i32 %12, 2
  %16 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1)***
  %17 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %16, align 8
  %18 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %17, i64 8
  %19 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %18, align 8
  %20 = tail call i32 %19(%"class.jxl::Visitor"* %1, i1 zeroext %15) #9
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %29

22:                                               ; preds = %14
  %23 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 2
  %24 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !62
  %25 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %24, i64 4
  %26 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %25, align 8, !noalias !62
  %27 = tail call i32 %26(%"class.jxl::Visitor"* %1, i64 1120986464258, i64 150684632615177, i32 0, i32* %23) #9
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %165

29:                                               ; preds = %22, %14
  %30 = load i32, i32* %4, align 8
  %31 = icmp eq i32 %30, 0
  %32 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %16, align 8
  %33 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %32, i64 8
  %34 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %33, align 8
  %35 = tail call i32 %34(%"class.jxl::Visitor"* %1, i1 zeroext %31) #9
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %47

37:                                               ; preds = %29
  %38 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 3
  %39 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !65
  %40 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %39, i64 4
  %41 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %40, align 8, !noalias !65
  %42 = tail call i32 %41(%"class.jxl::Visitor"* %1, i64 6442450950, i64 1395864371267, i32 6, i32* %38) #9
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %165

44:                                               ; preds = %37
  %45 = load i32, i32* %38, align 8
  %46 = icmp ugt i32 %45, 41
  br i1 %46, label %165, label %47

47:                                               ; preds = %44, %29
  %48 = load i32, i32* %4, align 8
  %49 = icmp eq i32 %48, 1
  %50 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %16, align 8
  %51 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %50, i64 8
  %52 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %51, align 8
  %53 = tail call i32 %52(%"class.jxl::Visitor"* %1, i1 zeroext %49) #9
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %87

55:                                               ; preds = %47
  %56 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 4
  %57 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !68
  %58 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %57, i64 4
  %59 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %58, align 8, !noalias !68
  %60 = tail call i32 %59(%"class.jxl::Visitor"* %1, i64 -9223372021822390271, i64 191126044676, i32 3, i32* %56) #9
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %165

62:                                               ; preds = %55
  %63 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 5
  %64 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !71
  %65 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %64, i64 4
  %66 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %65, align 8, !noalias !71
  %67 = tail call i32 %66(%"class.jxl::Visitor"* %1, i64 35223026794503, i64 738936238415883, i32 256, i32* %63) #9
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %165

69:                                               ; preds = %62
  %70 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 6
  %71 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !74
  %72 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %71, i64 4
  %73 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %72, align 8, !noalias !74
  %74 = tail call i32 %73(%"class.jxl::Visitor"* %1, i64 169651208192, i64 176123723915305, i32 0, i32* %70) #9
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %165

76:                                               ; preds = %69
  %77 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 9
  %78 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %79 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %78, align 8
  %80 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %79, i64 5
  %81 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %80, align 8
  %82 = tail call i32 %81(%"class.jxl::Visitor"* %1, i64 4, i32 0, i32* %77) #9
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %165

84:                                               ; preds = %76
  %85 = load i32, i32* %77, align 4
  %86 = icmp ugt i32 %85, 13
  br i1 %86, label %165, label %87

87:                                               ; preds = %84, %47
  %88 = load i32, i32* %4, align 8
  %89 = icmp eq i32 %88, 2
  %90 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %16, align 8
  %91 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %90, i64 8
  %92 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %91, align 8
  %93 = tail call i32 %92(%"class.jxl::Visitor"* %1, i1 zeroext %89) #9
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %165

95:                                               ; preds = %87
  %96 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %96) #9
  %97 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7
  %98 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %0, i64 0, i32 7, i32 0, i32 1
  %99 = bitcast %"struct.jxl::SqueezeParams"** %98 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = bitcast %"class.std::__1::vector.6"* %97 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = sub i64 %100, %102
  %104 = sdiv exact i64 %103, 24
  %105 = trunc i64 %104 to i32
  store i32 %105, i32* %3, align 4
  %106 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %5, align 8, !noalias !77
  %107 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %106, i64 4
  %108 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %107, align 8, !noalias !77
  %109 = call i32 %108(%"class.jxl::Visitor"* %1, i64 152471339008, i64 5665061863717, i32 0, i32* nonnull %3) #9
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %164

111:                                              ; preds = %95
  %112 = bitcast %"class.jxl::Visitor"* %1 to i1 (%"class.jxl::Visitor"*)***
  %113 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %112, align 8
  %114 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %113, i64 12
  %115 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %114, align 8
  %116 = call zeroext i1 %115(%"class.jxl::Visitor"* %1) #9
  br i1 %116, label %117, label %142

117:                                              ; preds = %111
  %118 = load i32, i32* %3, align 4
  %119 = zext i32 %118 to i64
  %120 = load i64, i64* %99, align 8
  %121 = load i64, i64* %101, align 8
  %122 = sub i64 %120, %121
  %123 = sdiv exact i64 %122, 24
  %124 = icmp ult i64 %123, %119
  %125 = inttoptr i64 %121 to %"struct.jxl::SqueezeParams"*
  %126 = inttoptr i64 %120 to %"struct.jxl::SqueezeParams"*
  br i1 %124, label %127, label %129

127:                                              ; preds = %117
  %128 = sub nsw i64 %119, %123
  call void @_ZNSt3__16vectorIN3jxl13SqueezeParamsENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.6"* %97, i64 %128) #9
  br label %142

129:                                              ; preds = %117
  %130 = icmp ugt i64 %123, %119
  br i1 %130, label %131, label %142

131:                                              ; preds = %129
  %132 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %125, i64 %119
  %133 = icmp eq %"struct.jxl::SqueezeParams"* %132, %126
  br i1 %133, label %141, label %134

134:                                              ; preds = %131, %134
  %135 = phi %"struct.jxl::SqueezeParams"* [ %136, %134 ], [ %126, %131 ]
  %136 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %135, i64 -1
  %137 = bitcast %"struct.jxl::SqueezeParams"* %136 to void (%"struct.jxl::SqueezeParams"*)***
  %138 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %137, align 8
  %139 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %138, align 8
  call void %139(%"struct.jxl::SqueezeParams"* %136) #9
  %140 = icmp eq %"struct.jxl::SqueezeParams"* %136, %132
  br i1 %140, label %141, label %134

141:                                              ; preds = %134, %131
  store %"struct.jxl::SqueezeParams"* %132, %"struct.jxl::SqueezeParams"** %98, align 8
  br label %142

142:                                              ; preds = %141, %129, %127, %111
  %143 = load i32, i32* %3, align 4
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %152, label %145

145:                                              ; preds = %142
  %146 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %97, i64 0, i32 0, i32 0
  %147 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  br label %153

148:                                              ; preds = %153
  %149 = load i32, i32* %3, align 4
  %150 = zext i32 %149 to i64
  %151 = icmp ult i64 %162, %150
  br i1 %151, label %153, label %152

152:                                              ; preds = %148, %142
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %96) #9
  br label %165

153:                                              ; preds = %145, %148
  %154 = phi i64 [ 0, %145 ], [ %162, %148 ]
  %155 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %146, align 8
  %156 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %155, i64 %154, i32 0
  %157 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %147, align 8
  %158 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %157, i64 11
  %159 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %158, align 8
  %160 = call i32 %159(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %156) #9
  %161 = icmp eq i32 %160, 0
  %162 = add nuw nsw i64 %154, 1
  br i1 %161, label %148, label %163

163:                                              ; preds = %153
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %96) #9
  br label %165

164:                                              ; preds = %95
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %96) #9
  br label %165

165:                                              ; preds = %87, %152, %163, %84, %44, %11, %164, %76, %69, %62, %55, %37, %22, %2
  %166 = phi i32 [ %160, %163 ], [ %109, %164 ], [ %82, %76 ], [ %74, %69 ], [ %67, %62 ], [ %60, %55 ], [ %42, %37 ], [ %27, %22 ], [ %9, %2 ], [ 1, %11 ], [ 1, %44 ], [ 1, %84 ], [ 0, %152 ], [ 0, %87 ]
  ret i32 %166
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl13SqueezeParamsENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.6"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::SqueezeParams"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::SqueezeParams"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %24, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::SqueezeParams"*
  %14 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %22, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %"struct.jxl::SqueezeParams"* %14 to i64
  br label %22

18:                                               ; preds = %12, %18
  %19 = phi %"struct.jxl::SqueezeParams"* [ %20, %18 ], [ %13, %12 ]
  tail call void @_ZN3jxl13SqueezeParamsC1Ev(%"struct.jxl::SqueezeParams"* %19) #9
  %20 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %19, i64 1
  %21 = icmp eq %"struct.jxl::SqueezeParams"* %20, %14
  br i1 %21, label %16, label %18

22:                                               ; preds = %12, %16
  %23 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %23, i64* %7, align 8
  br label %96

24:                                               ; preds = %2
  %25 = bitcast %"class.std::__1::vector.6"* %0 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %8, %26
  %28 = sdiv exact i64 %27, 24
  %29 = add i64 %28, %1
  %30 = icmp ugt i64 %29, 768614336404564650
  br i1 %30, label %31, label %33

31:                                               ; preds = %24
  %32 = bitcast %"class.std::__1::vector.6"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %32) #11
  unreachable

33:                                               ; preds = %24
  %34 = sub i64 %5, %26
  %35 = sdiv exact i64 %34, 24
  %36 = icmp ult i64 %35, 384307168202282325
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = shl nsw i64 %35, 1
  %39 = icmp ult i64 %38, %29
  %40 = select i1 %39, i64 %29, i64 %38
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %47, label %42

42:                                               ; preds = %33, %37
  %43 = phi i64 [ %40, %37 ], [ 768614336404564650, %33 ]
  %44 = mul i64 %43, 24
  %45 = tail call i8* @_Znwm(i64 %44) #12
  %46 = bitcast i8* %45 to %"struct.jxl::SqueezeParams"*
  br label %47

47:                                               ; preds = %37, %42
  %48 = phi i64 [ %43, %42 ], [ 0, %37 ]
  %49 = phi %"struct.jxl::SqueezeParams"* [ %46, %42 ], [ null, %37 ]
  %50 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %49, i64 %28
  %51 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %49, i64 %48
  %52 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %50, i64 %1
  br label %53

53:                                               ; preds = %47, %53
  %54 = phi %"struct.jxl::SqueezeParams"* [ %55, %53 ], [ %50, %47 ]
  tail call void @_ZN3jxl13SqueezeParamsC1Ev(%"struct.jxl::SqueezeParams"* %54) #9
  %55 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %54, i64 1
  %56 = icmp eq %"struct.jxl::SqueezeParams"* %52, %55
  br i1 %56, label %57, label %53

57:                                               ; preds = %53
  %58 = ptrtoint %"struct.jxl::SqueezeParams"* %51 to i64
  %59 = ptrtoint %"struct.jxl::SqueezeParams"* %52 to i64
  %60 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 0
  %61 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %60, align 8
  %62 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %6, align 8
  %63 = icmp eq %"struct.jxl::SqueezeParams"* %62, %61
  br i1 %63, label %64, label %66

64:                                               ; preds = %57
  %65 = ptrtoint %"struct.jxl::SqueezeParams"* %61 to i64
  br label %78

66:                                               ; preds = %57, %66
  %67 = phi %"struct.jxl::SqueezeParams"* [ %73, %66 ], [ %50, %57 ]
  %68 = phi %"struct.jxl::SqueezeParams"* [ %69, %66 ], [ %62, %57 ]
  %69 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %68, i64 -1
  %70 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %67, i64 -1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13SqueezeParamsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %70, align 8
  %71 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %67, i64 -1, i32 1
  %72 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %68, i64 -1, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %71, i8* align 8 %72, i64 12, i1 false) #9
  %73 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %67, i64 -1
  %74 = icmp eq %"struct.jxl::SqueezeParams"* %69, %61
  br i1 %74, label %75, label %66

75:                                               ; preds = %66
  %76 = load i64, i64* %25, align 8
  %77 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %6, align 8
  br label %78

78:                                               ; preds = %64, %75
  %79 = phi %"struct.jxl::SqueezeParams"* [ %61, %64 ], [ %77, %75 ]
  %80 = phi %"struct.jxl::SqueezeParams"* [ %50, %64 ], [ %73, %75 ]
  %81 = phi i64 [ %65, %64 ], [ %76, %75 ]
  %82 = ptrtoint %"struct.jxl::SqueezeParams"* %80 to i64
  store i64 %82, i64* %25, align 8
  store i64 %59, i64* %7, align 8
  store i64 %58, i64* %4, align 8
  %83 = inttoptr i64 %81 to %"struct.jxl::SqueezeParams"*
  %84 = icmp eq %"struct.jxl::SqueezeParams"* %79, %83
  br i1 %84, label %92, label %85

85:                                               ; preds = %78, %85
  %86 = phi %"struct.jxl::SqueezeParams"* [ %87, %85 ], [ %79, %78 ]
  %87 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %86, i64 -1
  %88 = bitcast %"struct.jxl::SqueezeParams"* %87 to void (%"struct.jxl::SqueezeParams"*)***
  %89 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %88, align 8
  %90 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %89, align 8
  tail call void %90(%"struct.jxl::SqueezeParams"* %87) #9
  %91 = icmp eq %"struct.jxl::SqueezeParams"* %87, %83
  br i1 %91, label %92, label %85

92:                                               ; preds = %85, %78
  %93 = icmp eq i64 %81, 0
  br i1 %93, label %96, label %94

94:                                               ; preds = %92
  %95 = inttoptr i64 %81 to i8*
  tail call void @_ZdlPv(i8* %95) #12
  br label %96

96:                                               ; preds = %94, %92, %22
  ret void
}

declare void @_ZN3jxl13SqueezeParamsC1Ev(%"struct.jxl::SqueezeParams"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl13SqueezeParamsD0Ev(%"struct.jxl::SqueezeParams"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"struct.jxl::SqueezeParams"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl13SqueezeParams4NameEv(%"struct.jxl::SqueezeParams"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.22, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl13SqueezeParams11VisitFieldsEPNS_7VisitorE(%"struct.jxl::SqueezeParams"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %0, i64 0, i32 1
  %4 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1, i8*)***
  %5 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %4, align 8
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %5, i64 3
  %7 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %6, align 8
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* %3) #9
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %31

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %0, i64 0, i32 2
  %12 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %4, align 8
  %13 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %12, i64 3
  %14 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %13, align 8
  %15 = tail call i32 %14(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* %11) #9
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %31

17:                                               ; preds = %10
  %18 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %0, i64 0, i32 4
  %19 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)***
  %20 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %19, align 8, !noalias !80
  %21 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %20, i64 4
  %22 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %21, align 8, !noalias !80
  %23 = tail call i32 %22(%"class.jxl::Visitor"* %1, i64 1120986464258, i64 150684632615177, i32 0, i32* %18) #9
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %31

25:                                               ; preds = %17
  %26 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %0, i64 0, i32 5
  %27 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %19, align 8, !noalias !83
  %28 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %27, i64 4
  %29 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %28, align 8, !noalias !83
  %30 = tail call i32 %29(%"class.jxl::Visitor"* %1, i64 -9223372026117357567, i64 564788199427, i32 2, i32* %26) #9
  ret i32 %30

31:                                               ; preds = %17, %10, %2
  %32 = phi i32 [ %23, %17 ], [ %15, %10 ], [ %8, %2 ]
  ret i32 %32
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #10

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl9TransformENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.4"*, %"class.jxl::Transform"*, %"class.jxl::Transform"*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"class.jxl::Transform"* %2 to i64
  %5 = ptrtoint %"class.jxl::Transform"* %1 to i64
  %6 = sub i64 %4, %5
  %7 = sdiv exact i64 %6, 72
  %8 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %"class.jxl::Transform"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.4"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = sdiv exact i64 %13, 72
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to %"class.jxl::Transform"*
  br i1 %15, label %129, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %"class.jxl::Transform"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = sdiv exact i64 %21, 72
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %1, i64 %22
  %25 = select i1 %23, %"class.jxl::Transform"* %24, %"class.jxl::Transform"* %2
  %26 = icmp eq %"class.jxl::Transform"* %25, %1
  br i1 %26, label %49, label %27

27:                                               ; preds = %17, %41
  %28 = phi %"class.jxl::Transform"* [ %47, %41 ], [ %16, %17 ]
  %29 = phi %"class.jxl::Transform"* [ %46, %41 ], [ %1, %17 ]
  %30 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %28, i64 0, i32 1
  %31 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %29, i64 0, i32 1
  %32 = bitcast i32* %30 to i8*
  %33 = bitcast i32* %31 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 24, i1 false) #9
  %34 = icmp eq %"class.jxl::Transform"* %28, %29
  br i1 %34, label %41, label %35

35:                                               ; preds = %27
  %36 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %28, i64 0, i32 7
  %37 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %29, i64 0, i32 7, i32 0, i32 0
  %38 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %37, align 8
  %39 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %29, i64 0, i32 7, i32 0, i32 1
  %40 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %39, align 8
  tail call void @_ZNSt3__16vectorIN3jxl13SqueezeParamsENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.6"* %36, %"struct.jxl::SqueezeParams"* %38, %"struct.jxl::SqueezeParams"* %40) #9
  br label %41

41:                                               ; preds = %35, %27
  %42 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %28, i64 0, i32 8
  %43 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %29, i64 0, i32 8
  %44 = bitcast i32* %42 to i8*
  %45 = bitcast i32* %43 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %44, i8* align 8 %45, i64 10, i1 false) #9
  %46 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %29, i64 1
  %47 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %28, i64 1
  %48 = icmp eq %"class.jxl::Transform"* %46, %25
  br i1 %48, label %49, label %27

49:                                               ; preds = %41, %17
  %50 = phi %"class.jxl::Transform"* [ %16, %17 ], [ %47, %41 ]
  br i1 %23, label %51, label %118

51:                                               ; preds = %49
  %52 = load i64, i64* %19, align 8
  %53 = icmp eq %"class.jxl::Transform"* %25, %2
  br i1 %53, label %116, label %54

54:                                               ; preds = %51
  %55 = inttoptr i64 %52 to %"class.jxl::Transform"*
  br label %56

56:                                               ; preds = %106, %54
  %57 = phi %"class.jxl::Transform"* [ %112, %106 ], [ %55, %54 ]
  %58 = phi %"class.jxl::Transform"* [ %111, %106 ], [ %24, %54 ]
  %59 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %57, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %59, align 8
  %60 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %57, i64 0, i32 1
  %61 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %58, i64 0, i32 1
  %62 = bitcast i32* %60 to i8*
  %63 = bitcast i32* %61 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %62, i8* align 8 %63, i64 24, i1 false) #9
  %64 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %57, i64 0, i32 7
  %65 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %58, i64 0, i32 7
  %66 = bitcast %"class.std::__1::vector.6"* %64 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %66, i8 0, i64 24, i1 false) #9
  %67 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %58, i64 0, i32 7, i32 0, i32 1
  %68 = bitcast %"struct.jxl::SqueezeParams"** %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = bitcast %"class.std::__1::vector.6"* %65 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = sub i64 %69, %71
  %73 = sdiv exact i64 %72, 24
  %74 = icmp eq i64 %72, 0
  br i1 %74, label %106, label %75

75:                                               ; preds = %56
  %76 = icmp ugt i64 %73, 768614336404564650
  br i1 %76, label %77, label %79

77:                                               ; preds = %75
  %78 = bitcast %"class.std::__1::vector.6"* %64 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %78) #11
  unreachable

79:                                               ; preds = %75
  %80 = tail call i8* @_Znwm(i64 %72) #12
  %81 = bitcast i8* %80 to %"struct.jxl::SqueezeParams"*
  %82 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %57, i64 0, i32 7, i32 0, i32 1
  %83 = bitcast %"struct.jxl::SqueezeParams"** %82 to i8**
  store i8* %80, i8** %83, align 8
  %84 = bitcast %"class.std::__1::vector.6"* %64 to i8**
  store i8* %80, i8** %84, align 8
  %85 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %81, i64 %73
  %86 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %57, i64 0, i32 7, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::SqueezeParams"* %85, %"struct.jxl::SqueezeParams"** %86, align 8
  %87 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %65, i64 0, i32 0, i32 0
  %88 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %87, align 8
  %89 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %67, align 8
  %90 = bitcast %"struct.jxl::SqueezeParams"** %82 to i64*
  %91 = ptrtoint i8* %80 to i64
  %92 = icmp eq %"struct.jxl::SqueezeParams"* %88, %89
  br i1 %92, label %104, label %93

93:                                               ; preds = %79, %93
  %94 = phi %"struct.jxl::SqueezeParams"* [ %100, %93 ], [ %81, %79 ]
  %95 = phi %"struct.jxl::SqueezeParams"* [ %99, %93 ], [ %88, %79 ]
  %96 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %94, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13SqueezeParamsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %96, align 8
  %97 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %94, i64 0, i32 1
  %98 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %95, i64 0, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %97, i8* align 8 %98, i64 12, i1 false) #9
  %99 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %95, i64 1
  %100 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %94, i64 1
  %101 = icmp eq %"struct.jxl::SqueezeParams"* %99, %89
  br i1 %101, label %102, label %93

102:                                              ; preds = %93
  %103 = ptrtoint %"struct.jxl::SqueezeParams"* %100 to i64
  br label %104

104:                                              ; preds = %102, %79
  %105 = phi i64 [ %91, %79 ], [ %103, %102 ]
  store i64 %105, i64* %90, align 8
  br label %106

106:                                              ; preds = %104, %56
  %107 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %57, i64 0, i32 8
  %108 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %58, i64 0, i32 8
  %109 = bitcast i32* %107 to i8*
  %110 = bitcast i32* %108 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %109, i8* align 8 %110, i64 10, i1 false) #9
  %111 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %58, i64 1
  %112 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %57, i64 1
  %113 = icmp eq %"class.jxl::Transform"* %111, %2
  br i1 %113, label %114, label %56

114:                                              ; preds = %106
  %115 = ptrtoint %"class.jxl::Transform"* %112 to i64
  br label %116

116:                                              ; preds = %51, %114
  %117 = phi i64 [ %52, %51 ], [ %115, %114 ]
  store i64 %117, i64* %19, align 8
  br label %235

118:                                              ; preds = %49
  %119 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %18, align 8
  %120 = icmp eq %"class.jxl::Transform"* %119, %50
  br i1 %120, label %128, label %121

121:                                              ; preds = %118, %121
  %122 = phi %"class.jxl::Transform"* [ %123, %121 ], [ %119, %118 ]
  %123 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %122, i64 -1
  %124 = bitcast %"class.jxl::Transform"* %123 to void (%"class.jxl::Transform"*)***
  %125 = load void (%"class.jxl::Transform"*)**, void (%"class.jxl::Transform"*)*** %124, align 8
  %126 = load void (%"class.jxl::Transform"*)*, void (%"class.jxl::Transform"*)** %125, align 8
  tail call void %126(%"class.jxl::Transform"* %123) #9
  %127 = icmp eq %"class.jxl::Transform"* %123, %50
  br i1 %127, label %128, label %121

128:                                              ; preds = %121, %118
  store %"class.jxl::Transform"* %50, %"class.jxl::Transform"** %18, align 8
  br label %235

129:                                              ; preds = %3
  %130 = icmp eq i64 %12, 0
  br i1 %130, label %149, label %131

131:                                              ; preds = %129
  %132 = inttoptr i64 %12 to i8*
  %133 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 1
  %134 = load %"class.jxl::Transform"*, %"class.jxl::Transform"** %133, align 8
  %135 = icmp eq %"class.jxl::Transform"* %134, %16
  br i1 %135, label %146, label %136

136:                                              ; preds = %131, %136
  %137 = phi %"class.jxl::Transform"* [ %138, %136 ], [ %134, %131 ]
  %138 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %137, i64 -1
  %139 = bitcast %"class.jxl::Transform"* %138 to void (%"class.jxl::Transform"*)***
  %140 = load void (%"class.jxl::Transform"*)**, void (%"class.jxl::Transform"*)*** %139, align 8
  %141 = load void (%"class.jxl::Transform"*)*, void (%"class.jxl::Transform"*)** %140, align 8
  tail call void %141(%"class.jxl::Transform"* %138) #9
  %142 = icmp eq %"class.jxl::Transform"* %138, %16
  br i1 %142, label %143, label %136

143:                                              ; preds = %136
  %144 = bitcast %"class.std::__1::vector.4"* %0 to i8**
  %145 = load i8*, i8** %144, align 8
  br label %146

146:                                              ; preds = %143, %131
  %147 = phi i8* [ %145, %143 ], [ %132, %131 ]
  store %"class.jxl::Transform"* %16, %"class.jxl::Transform"** %133, align 8
  tail call void @_ZdlPv(i8* %147) #12
  %148 = bitcast %"class.std::__1::vector.4"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %148, i8 0, i64 24, i1 false) #9
  br label %149

149:                                              ; preds = %129, %146
  %150 = phi i64 [ %10, %129 ], [ 0, %146 ]
  %151 = icmp ugt i64 %7, 256204778801521550
  br i1 %151, label %152, label %154

152:                                              ; preds = %149
  %153 = bitcast %"class.std::__1::vector.4"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %153) #11
  unreachable

154:                                              ; preds = %149
  %155 = sdiv exact i64 %150, 72
  %156 = icmp ult i64 %155, 128102389400760775
  br i1 %156, label %157, label %161

157:                                              ; preds = %154
  %158 = shl nsw i64 %155, 1
  %159 = icmp ult i64 %158, %7
  %160 = select i1 %159, i64 %7, i64 %158
  br label %161

161:                                              ; preds = %157, %154
  %162 = phi i64 [ %160, %157 ], [ 256204778801521550, %154 ]
  %163 = mul i64 %162, 72
  %164 = tail call i8* @_Znwm(i64 %163) #12
  %165 = bitcast i8* %164 to %"class.jxl::Transform"*
  %166 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 1
  %167 = bitcast %"class.jxl::Transform"** %166 to i8**
  store i8* %164, i8** %167, align 8
  %168 = bitcast %"class.std::__1::vector.4"* %0 to i8**
  store i8* %164, i8** %168, align 8
  %169 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %165, i64 %162
  store %"class.jxl::Transform"* %169, %"class.jxl::Transform"** %8, align 8
  %170 = bitcast %"class.jxl::Transform"** %166 to i64*
  %171 = ptrtoint i8* %164 to i64
  %172 = icmp eq %"class.jxl::Transform"* %1, %2
  br i1 %172, label %233, label %173

173:                                              ; preds = %161, %223
  %174 = phi %"class.jxl::Transform"* [ %229, %223 ], [ %165, %161 ]
  %175 = phi %"class.jxl::Transform"* [ %228, %223 ], [ %1, %161 ]
  %176 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %174, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %176, align 8
  %177 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %174, i64 0, i32 1
  %178 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %175, i64 0, i32 1
  %179 = bitcast i32* %177 to i8*
  %180 = bitcast i32* %178 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %179, i8* align 8 %180, i64 24, i1 false) #9
  %181 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %174, i64 0, i32 7
  %182 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %175, i64 0, i32 7
  %183 = bitcast %"class.std::__1::vector.6"* %181 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %183, i8 0, i64 24, i1 false) #9
  %184 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %175, i64 0, i32 7, i32 0, i32 1
  %185 = bitcast %"struct.jxl::SqueezeParams"** %184 to i64*
  %186 = load i64, i64* %185, align 8
  %187 = bitcast %"class.std::__1::vector.6"* %182 to i64*
  %188 = load i64, i64* %187, align 8
  %189 = sub i64 %186, %188
  %190 = sdiv exact i64 %189, 24
  %191 = icmp eq i64 %189, 0
  br i1 %191, label %223, label %192

192:                                              ; preds = %173
  %193 = icmp ugt i64 %190, 768614336404564650
  br i1 %193, label %194, label %196

194:                                              ; preds = %192
  %195 = bitcast %"class.std::__1::vector.6"* %181 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %195) #11
  unreachable

196:                                              ; preds = %192
  %197 = tail call i8* @_Znwm(i64 %189) #12
  %198 = bitcast i8* %197 to %"struct.jxl::SqueezeParams"*
  %199 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %174, i64 0, i32 7, i32 0, i32 1
  %200 = bitcast %"struct.jxl::SqueezeParams"** %199 to i8**
  store i8* %197, i8** %200, align 8
  %201 = bitcast %"class.std::__1::vector.6"* %181 to i8**
  store i8* %197, i8** %201, align 8
  %202 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %198, i64 %190
  %203 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %174, i64 0, i32 7, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::SqueezeParams"* %202, %"struct.jxl::SqueezeParams"** %203, align 8
  %204 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %182, i64 0, i32 0, i32 0
  %205 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %204, align 8
  %206 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %184, align 8
  %207 = bitcast %"struct.jxl::SqueezeParams"** %199 to i64*
  %208 = ptrtoint i8* %197 to i64
  %209 = icmp eq %"struct.jxl::SqueezeParams"* %205, %206
  br i1 %209, label %221, label %210

210:                                              ; preds = %196, %210
  %211 = phi %"struct.jxl::SqueezeParams"* [ %217, %210 ], [ %198, %196 ]
  %212 = phi %"struct.jxl::SqueezeParams"* [ %216, %210 ], [ %205, %196 ]
  %213 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %211, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13SqueezeParamsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %213, align 8
  %214 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %211, i64 0, i32 1
  %215 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %212, i64 0, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %214, i8* align 8 %215, i64 12, i1 false) #9
  %216 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %212, i64 1
  %217 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %211, i64 1
  %218 = icmp eq %"struct.jxl::SqueezeParams"* %216, %206
  br i1 %218, label %219, label %210

219:                                              ; preds = %210
  %220 = ptrtoint %"struct.jxl::SqueezeParams"* %217 to i64
  br label %221

221:                                              ; preds = %219, %196
  %222 = phi i64 [ %208, %196 ], [ %220, %219 ]
  store i64 %222, i64* %207, align 8
  br label %223

223:                                              ; preds = %221, %173
  %224 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %174, i64 0, i32 8
  %225 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %175, i64 0, i32 8
  %226 = bitcast i32* %224 to i8*
  %227 = bitcast i32* %225 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %226, i8* align 8 %227, i64 10, i1 false) #9
  %228 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %175, i64 1
  %229 = getelementptr inbounds %"class.jxl::Transform", %"class.jxl::Transform"* %174, i64 1
  %230 = icmp eq %"class.jxl::Transform"* %228, %2
  br i1 %230, label %231, label %173

231:                                              ; preds = %223
  %232 = ptrtoint %"class.jxl::Transform"* %229 to i64
  br label %233

233:                                              ; preds = %161, %231
  %234 = phi i64 [ %171, %161 ], [ %232, %231 ]
  store i64 %234, i64* %170, align 8
  br label %235

235:                                              ; preds = %116, %128, %233
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl13SqueezeParamsENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.6"*, %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"struct.jxl::SqueezeParams"* %2 to i64
  %5 = ptrtoint %"struct.jxl::SqueezeParams"* %1 to i64
  %6 = sub i64 %4, %5
  %7 = sdiv exact i64 %6, 24
  %8 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %"struct.jxl::SqueezeParams"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.6"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = sdiv exact i64 %13, 24
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to %"struct.jxl::SqueezeParams"*
  br i1 %15, label %66, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %"struct.jxl::SqueezeParams"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = sdiv exact i64 %21, 24
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %1, i64 %22
  %25 = select i1 %23, %"struct.jxl::SqueezeParams"* %24, %"struct.jxl::SqueezeParams"* %2
  %26 = icmp eq %"struct.jxl::SqueezeParams"* %25, %1
  br i1 %26, label %35, label %27

27:                                               ; preds = %17, %27
  %28 = phi %"struct.jxl::SqueezeParams"* [ %33, %27 ], [ %16, %17 ]
  %29 = phi %"struct.jxl::SqueezeParams"* [ %32, %27 ], [ %1, %17 ]
  %30 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %28, i64 0, i32 1
  %31 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %29, i64 0, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 12, i1 false) #9
  %32 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %29, i64 1
  %33 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %28, i64 1
  %34 = icmp eq %"struct.jxl::SqueezeParams"* %32, %25
  br i1 %34, label %35, label %27

35:                                               ; preds = %27, %17
  %36 = phi %"struct.jxl::SqueezeParams"* [ %16, %17 ], [ %33, %27 ]
  br i1 %23, label %37, label %55

37:                                               ; preds = %35
  %38 = load i64, i64* %19, align 8
  %39 = icmp eq %"struct.jxl::SqueezeParams"* %25, %2
  br i1 %39, label %53, label %40

40:                                               ; preds = %37
  %41 = inttoptr i64 %38 to %"struct.jxl::SqueezeParams"*
  br label %42

42:                                               ; preds = %42, %40
  %43 = phi %"struct.jxl::SqueezeParams"* [ %49, %42 ], [ %41, %40 ]
  %44 = phi %"struct.jxl::SqueezeParams"* [ %48, %42 ], [ %24, %40 ]
  %45 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %43, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13SqueezeParamsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %45, align 8
  %46 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %43, i64 0, i32 1
  %47 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %44, i64 0, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 12, i1 false) #9
  %48 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %44, i64 1
  %49 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %43, i64 1
  %50 = icmp eq %"struct.jxl::SqueezeParams"* %48, %2
  br i1 %50, label %51, label %42

51:                                               ; preds = %42
  %52 = ptrtoint %"struct.jxl::SqueezeParams"* %49 to i64
  br label %53

53:                                               ; preds = %37, %51
  %54 = phi i64 [ %38, %37 ], [ %52, %51 ]
  store i64 %54, i64* %19, align 8
  br label %123

55:                                               ; preds = %35
  %56 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %18, align 8
  %57 = icmp eq %"struct.jxl::SqueezeParams"* %56, %36
  br i1 %57, label %65, label %58

58:                                               ; preds = %55, %58
  %59 = phi %"struct.jxl::SqueezeParams"* [ %60, %58 ], [ %56, %55 ]
  %60 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %59, i64 -1
  %61 = bitcast %"struct.jxl::SqueezeParams"* %60 to void (%"struct.jxl::SqueezeParams"*)***
  %62 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %61, align 8
  %63 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %62, align 8
  tail call void %63(%"struct.jxl::SqueezeParams"* %60) #9
  %64 = icmp eq %"struct.jxl::SqueezeParams"* %60, %36
  br i1 %64, label %65, label %58

65:                                               ; preds = %58, %55
  store %"struct.jxl::SqueezeParams"* %36, %"struct.jxl::SqueezeParams"** %18, align 8
  br label %123

66:                                               ; preds = %3
  %67 = icmp eq i64 %12, 0
  br i1 %67, label %86, label %68

68:                                               ; preds = %66
  %69 = inttoptr i64 %12 to i8*
  %70 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %71 = load %"struct.jxl::SqueezeParams"*, %"struct.jxl::SqueezeParams"** %70, align 8
  %72 = icmp eq %"struct.jxl::SqueezeParams"* %71, %16
  br i1 %72, label %83, label %73

73:                                               ; preds = %68, %73
  %74 = phi %"struct.jxl::SqueezeParams"* [ %75, %73 ], [ %71, %68 ]
  %75 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %74, i64 -1
  %76 = bitcast %"struct.jxl::SqueezeParams"* %75 to void (%"struct.jxl::SqueezeParams"*)***
  %77 = load void (%"struct.jxl::SqueezeParams"*)**, void (%"struct.jxl::SqueezeParams"*)*** %76, align 8
  %78 = load void (%"struct.jxl::SqueezeParams"*)*, void (%"struct.jxl::SqueezeParams"*)** %77, align 8
  tail call void %78(%"struct.jxl::SqueezeParams"* %75) #9
  %79 = icmp eq %"struct.jxl::SqueezeParams"* %75, %16
  br i1 %79, label %80, label %73

80:                                               ; preds = %73
  %81 = bitcast %"class.std::__1::vector.6"* %0 to i8**
  %82 = load i8*, i8** %81, align 8
  br label %83

83:                                               ; preds = %80, %68
  %84 = phi i8* [ %82, %80 ], [ %69, %68 ]
  store %"struct.jxl::SqueezeParams"* %16, %"struct.jxl::SqueezeParams"** %70, align 8
  tail call void @_ZdlPv(i8* %84) #12
  %85 = bitcast %"class.std::__1::vector.6"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %85, i8 0, i64 24, i1 false) #9
  br label %86

86:                                               ; preds = %66, %83
  %87 = phi i64 [ %10, %66 ], [ 0, %83 ]
  %88 = icmp ugt i64 %7, 768614336404564650
  br i1 %88, label %89, label %91

89:                                               ; preds = %86
  %90 = bitcast %"class.std::__1::vector.6"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %90) #11
  unreachable

91:                                               ; preds = %86
  %92 = sdiv exact i64 %87, 24
  %93 = icmp ult i64 %92, 384307168202282325
  br i1 %93, label %94, label %98

94:                                               ; preds = %91
  %95 = shl nsw i64 %92, 1
  %96 = icmp ult i64 %95, %7
  %97 = select i1 %96, i64 %7, i64 %95
  br label %98

98:                                               ; preds = %94, %91
  %99 = phi i64 [ %97, %94 ], [ 768614336404564650, %91 ]
  %100 = mul i64 %99, 24
  %101 = tail call i8* @_Znwm(i64 %100) #12
  %102 = bitcast i8* %101 to %"struct.jxl::SqueezeParams"*
  %103 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %104 = bitcast %"struct.jxl::SqueezeParams"** %103 to i8**
  store i8* %101, i8** %104, align 8
  %105 = bitcast %"class.std::__1::vector.6"* %0 to i8**
  store i8* %101, i8** %105, align 8
  %106 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %102, i64 %99
  store %"struct.jxl::SqueezeParams"* %106, %"struct.jxl::SqueezeParams"** %8, align 8
  %107 = bitcast %"struct.jxl::SqueezeParams"** %103 to i64*
  %108 = ptrtoint i8* %101 to i64
  %109 = icmp eq %"struct.jxl::SqueezeParams"* %1, %2
  br i1 %109, label %121, label %110

110:                                              ; preds = %98, %110
  %111 = phi %"struct.jxl::SqueezeParams"* [ %117, %110 ], [ %102, %98 ]
  %112 = phi %"struct.jxl::SqueezeParams"* [ %116, %110 ], [ %1, %98 ]
  %113 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %111, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13SqueezeParamsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %113, align 8
  %114 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %111, i64 0, i32 1
  %115 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %112, i64 0, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %114, i8* align 8 %115, i64 12, i1 false) #9
  %116 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %112, i64 1
  %117 = getelementptr inbounds %"struct.jxl::SqueezeParams", %"struct.jxl::SqueezeParams"* %111, i64 1
  %118 = icmp eq %"struct.jxl::SqueezeParams"* %116, %2
  br i1 %118, label %119, label %110

119:                                              ; preds = %110
  %120 = ptrtoint %"struct.jxl::SqueezeParams"* %117 to i64
  br label %121

121:                                              ; preds = %98, %119
  %122 = phi i64 [ %108, %98 ], [ %120, %119 ]
  store i64 %122, i64* %107, align 8
  br label %123

123:                                              ; preds = %53, %65, %121
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5TokenENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.101"*, i64, %"struct.jxl::Token"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector.101", %"class.std::__1::vector.101"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"struct.jxl::Token"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.101", %"class.std::__1::vector.101"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"struct.jxl::Token"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = ashr exact i64 %10, 3
  %12 = icmp ult i64 %11, %1
  br i1 %12, label %139, label %13

13:                                               ; preds = %3
  %14 = inttoptr i64 %9 to %"struct.jxl::Token"*
  %15 = inttoptr i64 %9 to i8*
  %16 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %14, i64 %1
  %17 = icmp eq i64 %1, 0
  br i1 %17, label %137, label %18

18:                                               ; preds = %13
  %19 = bitcast %"struct.jxl::Token"* %2 to i64*
  %20 = shl nsw i64 %1, 3
  %21 = add i64 %20, -8
  %22 = lshr exact i64 %21, 3
  %23 = add nuw nsw i64 %22, 1
  %24 = icmp ult i64 %23, 4
  br i1 %24, label %25, label %47

25:                                               ; preds = %106, %47, %18
  %26 = phi %"struct.jxl::Token"* [ %14, %47 ], [ %14, %18 ], [ %60, %106 ]
  %27 = ptrtoint %"struct.jxl::Token"* %26 to i64
  %28 = add i64 %1, -1
  %29 = getelementptr %"struct.jxl::Token", %"struct.jxl::Token"* %14, i64 %28, i32 0
  %30 = ptrtoint i32* %29 to i64
  %31 = sub i64 %30, %27
  %32 = lshr i64 %31, 3
  %33 = add nuw nsw i64 %32, 1
  %34 = and i64 %33, 7
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %44, label %36

36:                                               ; preds = %25, %36
  %37 = phi %"struct.jxl::Token"* [ %41, %36 ], [ %26, %25 ]
  %38 = phi i64 [ %42, %36 ], [ %34, %25 ]
  %39 = bitcast %"struct.jxl::Token"* %37 to i64*
  %40 = load i64, i64* %19, align 4
  store i64 %40, i64* %39, align 4
  %41 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %37, i64 1
  %42 = add i64 %38, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %36, !llvm.loop !86

44:                                               ; preds = %36, %25
  %45 = phi %"struct.jxl::Token"* [ %26, %25 ], [ %41, %36 ]
  %46 = icmp ult i64 %31, 56
  br i1 %46, label %108, label %110

47:                                               ; preds = %18
  %48 = shl nsw i64 %1, 3
  %49 = add i64 %48, -8
  %50 = lshr exact i64 %49, 3
  %51 = add nuw nsw i64 %50, 1
  %52 = getelementptr %"struct.jxl::Token", %"struct.jxl::Token"* %14, i64 %51
  %53 = bitcast %"struct.jxl::Token"* %2 to i8*
  %54 = getelementptr i8, i8* %53, i64 1
  %55 = icmp ugt i8* %54, %15
  %56 = icmp ugt %"struct.jxl::Token"* %52, %2
  %57 = and i1 %55, %56
  br i1 %57, label %25, label %58

58:                                               ; preds = %47
  %59 = and i64 %23, 4611686018427387900
  %60 = getelementptr %"struct.jxl::Token", %"struct.jxl::Token"* %14, i64 %59
  %61 = add nsw i64 %59, -4
  %62 = lshr exact i64 %61, 2
  %63 = add nuw nsw i64 %62, 1
  %64 = and i64 %63, 1
  %65 = icmp eq i64 %61, 0
  br i1 %65, label %93, label %66

66:                                               ; preds = %58
  %67 = sub nuw nsw i64 %63, %64
  %68 = load i64, i64* %19, align 4, !alias.scope !87
  %69 = insertelement <2 x i64> undef, i64 %68, i32 0
  %70 = shufflevector <2 x i64> %69, <2 x i64> undef, <2 x i32> zeroinitializer
  %71 = insertelement <2 x i64> undef, i64 %68, i32 0
  %72 = shufflevector <2 x i64> %71, <2 x i64> undef, <2 x i32> zeroinitializer
  %73 = load i64, i64* %19, align 4, !alias.scope !87
  %74 = insertelement <2 x i64> undef, i64 %73, i32 0
  %75 = shufflevector <2 x i64> %74, <2 x i64> undef, <2 x i32> zeroinitializer
  %76 = insertelement <2 x i64> undef, i64 %73, i32 0
  %77 = shufflevector <2 x i64> %76, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %78

78:                                               ; preds = %78, %66
  %79 = phi i64 [ 0, %66 ], [ %90, %78 ]
  %80 = phi i64 [ %67, %66 ], [ %91, %78 ]
  %81 = getelementptr %"struct.jxl::Token", %"struct.jxl::Token"* %14, i64 %79
  %82 = bitcast %"struct.jxl::Token"* %81 to <2 x i64>*
  store <2 x i64> %70, <2 x i64>* %82, align 4, !alias.scope !90, !noalias !87
  %83 = getelementptr %"struct.jxl::Token", %"struct.jxl::Token"* %81, i64 2
  %84 = bitcast %"struct.jxl::Token"* %83 to <2 x i64>*
  store <2 x i64> %72, <2 x i64>* %84, align 4, !alias.scope !90, !noalias !87
  %85 = or i64 %79, 4
  %86 = getelementptr %"struct.jxl::Token", %"struct.jxl::Token"* %14, i64 %85
  %87 = bitcast %"struct.jxl::Token"* %86 to <2 x i64>*
  store <2 x i64> %75, <2 x i64>* %87, align 4, !alias.scope !90, !noalias !87
  %88 = getelementptr %"struct.jxl::Token", %"struct.jxl::Token"* %86, i64 2
  %89 = bitcast %"struct.jxl::Token"* %88 to <2 x i64>*
  store <2 x i64> %77, <2 x i64>* %89, align 4, !alias.scope !90, !noalias !87
  %90 = add i64 %79, 8
  %91 = add i64 %80, -2
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %78, !llvm.loop !92

93:                                               ; preds = %78, %58
  %94 = phi i64 [ 0, %58 ], [ %90, %78 ]
  %95 = icmp eq i64 %64, 0
  br i1 %95, label %106, label %96

96:                                               ; preds = %93
  %97 = getelementptr %"struct.jxl::Token", %"struct.jxl::Token"* %14, i64 %94
  %98 = load i64, i64* %19, align 4, !alias.scope !87
  %99 = insertelement <2 x i64> undef, i64 %98, i32 0
  %100 = shufflevector <2 x i64> %99, <2 x i64> undef, <2 x i32> zeroinitializer
  %101 = insertelement <2 x i64> undef, i64 %98, i32 0
  %102 = shufflevector <2 x i64> %101, <2 x i64> undef, <2 x i32> zeroinitializer
  %103 = bitcast %"struct.jxl::Token"* %97 to <2 x i64>*
  store <2 x i64> %100, <2 x i64>* %103, align 4, !alias.scope !90, !noalias !87
  %104 = getelementptr %"struct.jxl::Token", %"struct.jxl::Token"* %97, i64 2
  %105 = bitcast %"struct.jxl::Token"* %104 to <2 x i64>*
  store <2 x i64> %102, <2 x i64>* %105, align 4, !alias.scope !90, !noalias !87
  br label %106

106:                                              ; preds = %93, %96
  %107 = icmp eq i64 %23, %59
  br i1 %107, label %108, label %25

108:                                              ; preds = %44, %110, %106
  %109 = ptrtoint %"struct.jxl::Token"* %16 to i64
  br label %137

110:                                              ; preds = %44, %110
  %111 = phi %"struct.jxl::Token"* [ %135, %110 ], [ %45, %44 ]
  %112 = bitcast %"struct.jxl::Token"* %111 to i64*
  %113 = load i64, i64* %19, align 4
  store i64 %113, i64* %112, align 4
  %114 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %111, i64 1
  %115 = bitcast %"struct.jxl::Token"* %114 to i64*
  %116 = load i64, i64* %19, align 4
  store i64 %116, i64* %115, align 4
  %117 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %111, i64 2
  %118 = bitcast %"struct.jxl::Token"* %117 to i64*
  %119 = load i64, i64* %19, align 4
  store i64 %119, i64* %118, align 4
  %120 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %111, i64 3
  %121 = bitcast %"struct.jxl::Token"* %120 to i64*
  %122 = load i64, i64* %19, align 4
  store i64 %122, i64* %121, align 4
  %123 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %111, i64 4
  %124 = bitcast %"struct.jxl::Token"* %123 to i64*
  %125 = load i64, i64* %19, align 4
  store i64 %125, i64* %124, align 4
  %126 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %111, i64 5
  %127 = bitcast %"struct.jxl::Token"* %126 to i64*
  %128 = load i64, i64* %19, align 4
  store i64 %128, i64* %127, align 4
  %129 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %111, i64 6
  %130 = bitcast %"struct.jxl::Token"* %129 to i64*
  %131 = load i64, i64* %19, align 4
  store i64 %131, i64* %130, align 4
  %132 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %111, i64 7
  %133 = bitcast %"struct.jxl::Token"* %132 to i64*
  %134 = load i64, i64* %19, align 4
  store i64 %134, i64* %133, align 4
  %135 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %111, i64 8
  %136 = icmp eq %"struct.jxl::Token"* %135, %16
  br i1 %136, label %108, label %110, !llvm.loop !93

137:                                              ; preds = %13, %108
  %138 = phi i64 [ %109, %108 ], [ %9, %13 ]
  store i64 %138, i64* %8, align 8
  br label %312

139:                                              ; preds = %3
  %140 = bitcast %"class.std::__1::vector.101"* %0 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = sub i64 %9, %141
  %143 = ashr exact i64 %142, 3
  %144 = add i64 %143, %1
  %145 = icmp ugt i64 %144, 2305843009213693951
  br i1 %145, label %146, label %148

146:                                              ; preds = %139
  %147 = bitcast %"class.std::__1::vector.101"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %147) #11
  unreachable

148:                                              ; preds = %139
  %149 = sub i64 %6, %141
  %150 = ashr exact i64 %149, 3
  %151 = icmp ult i64 %150, 1152921504606846975
  br i1 %151, label %152, label %160

152:                                              ; preds = %148
  %153 = ashr exact i64 %149, 2
  %154 = icmp ult i64 %153, %144
  %155 = select i1 %154, i64 %144, i64 %153
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %165, label %157

157:                                              ; preds = %152
  %158 = icmp ugt i64 %155, 2305843009213693951
  br i1 %158, label %159, label %160

159:                                              ; preds = %157
  tail call void @abort() #11
  unreachable

160:                                              ; preds = %148, %157
  %161 = phi i64 [ %155, %157 ], [ 2305843009213693951, %148 ]
  %162 = shl i64 %161, 3
  %163 = tail call i8* @_Znwm(i64 %162) #12
  %164 = bitcast i8* %163 to %"struct.jxl::Token"*
  br label %165

165:                                              ; preds = %160, %152
  %166 = phi i64 [ %161, %160 ], [ 0, %152 ]
  %167 = phi %"struct.jxl::Token"* [ %164, %160 ], [ null, %152 ]
  %168 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %167, i64 %143
  %169 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %167, i64 %166
  %170 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %168, i64 %1
  %171 = bitcast %"struct.jxl::Token"* %2 to i64*
  %172 = shl nsw i64 %1, 3
  %173 = add i64 %172, -8
  %174 = lshr exact i64 %173, 3
  %175 = add nuw nsw i64 %174, 1
  %176 = icmp ult i64 %175, 4
  br i1 %176, label %240, label %177

177:                                              ; preds = %165
  %178 = bitcast %"struct.jxl::Token"* %168 to i8*
  %179 = shl nsw i64 %1, 3
  %180 = add i64 %179, -8
  %181 = lshr exact i64 %180, 3
  %182 = add nsw i64 %143, %181
  %183 = add nsw i64 %182, 1
  %184 = getelementptr %"struct.jxl::Token", %"struct.jxl::Token"* %167, i64 %183
  %185 = bitcast %"struct.jxl::Token"* %2 to i8*
  %186 = getelementptr i8, i8* %185, i64 1
  %187 = icmp ugt i8* %186, %178
  %188 = icmp ugt %"struct.jxl::Token"* %184, %2
  %189 = and i1 %187, %188
  br i1 %189, label %240, label %190

190:                                              ; preds = %177
  %191 = and i64 %175, 4611686018427387900
  %192 = getelementptr %"struct.jxl::Token", %"struct.jxl::Token"* %168, i64 %191
  %193 = add nsw i64 %191, -4
  %194 = lshr exact i64 %193, 2
  %195 = add nuw nsw i64 %194, 1
  %196 = and i64 %195, 1
  %197 = icmp eq i64 %193, 0
  br i1 %197, label %225, label %198

198:                                              ; preds = %190
  %199 = sub nuw nsw i64 %195, %196
  %200 = load i64, i64* %171, align 4, !alias.scope !94
  %201 = insertelement <2 x i64> undef, i64 %200, i32 0
  %202 = shufflevector <2 x i64> %201, <2 x i64> undef, <2 x i32> zeroinitializer
  %203 = insertelement <2 x i64> undef, i64 %200, i32 0
  %204 = shufflevector <2 x i64> %203, <2 x i64> undef, <2 x i32> zeroinitializer
  %205 = load i64, i64* %171, align 4, !alias.scope !94
  %206 = insertelement <2 x i64> undef, i64 %205, i32 0
  %207 = shufflevector <2 x i64> %206, <2 x i64> undef, <2 x i32> zeroinitializer
  %208 = insertelement <2 x i64> undef, i64 %205, i32 0
  %209 = shufflevector <2 x i64> %208, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %210

210:                                              ; preds = %210, %198
  %211 = phi i64 [ 0, %198 ], [ %222, %210 ]
  %212 = phi i64 [ %199, %198 ], [ %223, %210 ]
  %213 = getelementptr %"struct.jxl::Token", %"struct.jxl::Token"* %168, i64 %211
  %214 = bitcast %"struct.jxl::Token"* %213 to <2 x i64>*
  store <2 x i64> %202, <2 x i64>* %214, align 4, !alias.scope !97, !noalias !94
  %215 = getelementptr %"struct.jxl::Token", %"struct.jxl::Token"* %213, i64 2
  %216 = bitcast %"struct.jxl::Token"* %215 to <2 x i64>*
  store <2 x i64> %204, <2 x i64>* %216, align 4, !alias.scope !97, !noalias !94
  %217 = or i64 %211, 4
  %218 = getelementptr %"struct.jxl::Token", %"struct.jxl::Token"* %168, i64 %217
  %219 = bitcast %"struct.jxl::Token"* %218 to <2 x i64>*
  store <2 x i64> %207, <2 x i64>* %219, align 4, !alias.scope !97, !noalias !94
  %220 = getelementptr %"struct.jxl::Token", %"struct.jxl::Token"* %218, i64 2
  %221 = bitcast %"struct.jxl::Token"* %220 to <2 x i64>*
  store <2 x i64> %209, <2 x i64>* %221, align 4, !alias.scope !97, !noalias !94
  %222 = add i64 %211, 8
  %223 = add i64 %212, -2
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %225, label %210, !llvm.loop !99

225:                                              ; preds = %210, %190
  %226 = phi i64 [ 0, %190 ], [ %222, %210 ]
  %227 = icmp eq i64 %196, 0
  br i1 %227, label %238, label %228

228:                                              ; preds = %225
  %229 = getelementptr %"struct.jxl::Token", %"struct.jxl::Token"* %168, i64 %226
  %230 = load i64, i64* %171, align 4, !alias.scope !94
  %231 = insertelement <2 x i64> undef, i64 %230, i32 0
  %232 = shufflevector <2 x i64> %231, <2 x i64> undef, <2 x i32> zeroinitializer
  %233 = insertelement <2 x i64> undef, i64 %230, i32 0
  %234 = shufflevector <2 x i64> %233, <2 x i64> undef, <2 x i32> zeroinitializer
  %235 = bitcast %"struct.jxl::Token"* %229 to <2 x i64>*
  store <2 x i64> %232, <2 x i64>* %235, align 4, !alias.scope !97, !noalias !94
  %236 = getelementptr %"struct.jxl::Token", %"struct.jxl::Token"* %229, i64 2
  %237 = bitcast %"struct.jxl::Token"* %236 to <2 x i64>*
  store <2 x i64> %234, <2 x i64>* %237, align 4, !alias.scope !97, !noalias !94
  br label %238

238:                                              ; preds = %225, %228
  %239 = icmp eq i64 %175, %191
  br i1 %239, label %290, label %240

240:                                              ; preds = %238, %177, %165
  %241 = phi %"struct.jxl::Token"* [ %168, %177 ], [ %168, %165 ], [ %192, %238 ]
  %242 = ptrtoint %"struct.jxl::Token"* %241 to i64
  %243 = add i64 %143, %1
  %244 = add i64 %243, -1
  %245 = getelementptr %"struct.jxl::Token", %"struct.jxl::Token"* %167, i64 %244, i32 0
  %246 = ptrtoint i32* %245 to i64
  %247 = sub i64 %246, %242
  %248 = lshr i64 %247, 3
  %249 = add nuw nsw i64 %248, 1
  %250 = and i64 %249, 7
  %251 = icmp eq i64 %250, 0
  br i1 %251, label %260, label %252

252:                                              ; preds = %240, %252
  %253 = phi %"struct.jxl::Token"* [ %257, %252 ], [ %241, %240 ]
  %254 = phi i64 [ %258, %252 ], [ %250, %240 ]
  %255 = bitcast %"struct.jxl::Token"* %253 to i64*
  %256 = load i64, i64* %171, align 4
  store i64 %256, i64* %255, align 4
  %257 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %253, i64 1
  %258 = add i64 %254, -1
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %260, label %252, !llvm.loop !100

260:                                              ; preds = %252, %240
  %261 = phi %"struct.jxl::Token"* [ %241, %240 ], [ %257, %252 ]
  %262 = icmp ult i64 %247, 56
  br i1 %262, label %290, label %263

263:                                              ; preds = %260, %263
  %264 = phi %"struct.jxl::Token"* [ %288, %263 ], [ %261, %260 ]
  %265 = bitcast %"struct.jxl::Token"* %264 to i64*
  %266 = load i64, i64* %171, align 4
  store i64 %266, i64* %265, align 4
  %267 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %264, i64 1
  %268 = bitcast %"struct.jxl::Token"* %267 to i64*
  %269 = load i64, i64* %171, align 4
  store i64 %269, i64* %268, align 4
  %270 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %264, i64 2
  %271 = bitcast %"struct.jxl::Token"* %270 to i64*
  %272 = load i64, i64* %171, align 4
  store i64 %272, i64* %271, align 4
  %273 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %264, i64 3
  %274 = bitcast %"struct.jxl::Token"* %273 to i64*
  %275 = load i64, i64* %171, align 4
  store i64 %275, i64* %274, align 4
  %276 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %264, i64 4
  %277 = bitcast %"struct.jxl::Token"* %276 to i64*
  %278 = load i64, i64* %171, align 4
  store i64 %278, i64* %277, align 4
  %279 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %264, i64 5
  %280 = bitcast %"struct.jxl::Token"* %279 to i64*
  %281 = load i64, i64* %171, align 4
  store i64 %281, i64* %280, align 4
  %282 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %264, i64 6
  %283 = bitcast %"struct.jxl::Token"* %282 to i64*
  %284 = load i64, i64* %171, align 4
  store i64 %284, i64* %283, align 4
  %285 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %264, i64 7
  %286 = bitcast %"struct.jxl::Token"* %285 to i64*
  %287 = load i64, i64* %171, align 4
  store i64 %287, i64* %286, align 4
  %288 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %264, i64 8
  %289 = icmp eq %"struct.jxl::Token"* %170, %288
  br i1 %289, label %290, label %263, !llvm.loop !101

290:                                              ; preds = %260, %263, %238
  %291 = ptrtoint %"struct.jxl::Token"* %169 to i64
  %292 = ptrtoint %"struct.jxl::Token"* %170 to i64
  %293 = getelementptr inbounds %"class.std::__1::vector.101", %"class.std::__1::vector.101"* %0, i64 0, i32 0, i32 0
  %294 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %293, align 8
  %295 = load i64, i64* %8, align 8
  %296 = ptrtoint %"struct.jxl::Token"* %294 to i64
  %297 = sub i64 %295, %296
  %298 = ashr exact i64 %297, 3
  %299 = sub nsw i64 0, %298
  %300 = getelementptr inbounds %"struct.jxl::Token", %"struct.jxl::Token"* %168, i64 %299
  %301 = ptrtoint %"struct.jxl::Token"* %300 to i64
  %302 = icmp sgt i64 %297, 0
  br i1 %302, label %303, label %307

303:                                              ; preds = %290
  %304 = bitcast %"struct.jxl::Token"* %300 to i8*
  %305 = bitcast %"struct.jxl::Token"* %294 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %304, i8* align 4 %305, i64 %297, i1 false) #9
  %306 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %293, align 8
  br label %307

307:                                              ; preds = %290, %303
  %308 = phi %"struct.jxl::Token"* [ %294, %290 ], [ %306, %303 ]
  store i64 %301, i64* %140, align 8
  store i64 %292, i64* %8, align 8
  store i64 %291, i64* %5, align 8
  %309 = icmp eq %"struct.jxl::Token"* %308, null
  br i1 %309, label %312, label %310

310:                                              ; preds = %307
  %311 = bitcast %"struct.jxl::Token"* %308 to i8*
  tail call void @_ZdlPv(i8* %311) #12
  br label %312

312:                                              ; preds = %310, %307, %137
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctpop.i32(i32) #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { noreturn nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3jxl15PredictLearnAllEPNSt3__16vectorIiNS0_9allocatorIiEEEEmPKiliiRKNS_7ChannelEPNS_8weighted5StateEPl: argument 0"}
!4 = distinct !{!4, !"_ZN3jxl15PredictLearnAllEPNSt3__16vectorIiNS0_9allocatorIiEEEEmPKiliiRKNS_7ChannelEPNS_8weighted5StateEPl"}
!5 = !{i8 0, i8 2}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.isvectorized", i32 1}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.unroll.disable"}
!10 = distinct !{!10, !11, !7}
!11 = !{!"llvm.loop.unroll.runtime.disable"}
!12 = !{i64 0, i64 65}
!13 = !{i32 0, i32 33}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZNK3jxl8weighted5State15WeightedAverageEPKlNSt3__15arrayIjLm4EEE: argument 0"}
!16 = distinct !{!16, !"_ZNK3jxl8weighted5State15WeightedAverageEPKlNSt3__15arrayIjLm4EEE"}
!17 = distinct !{!17, !7}
!18 = distinct !{!18, !9}
!19 = distinct !{!19, !11, !7}
!20 = distinct !{!20, !7}
!21 = distinct !{!21, !9}
!22 = distinct !{!22, !11, !7}
!23 = distinct !{!23, !7}
!24 = distinct !{!24, !9}
!25 = distinct !{!25, !11, !7}
!26 = distinct !{!26, !7}
!27 = distinct !{!27, !9}
!28 = distinct !{!28, !11, !7}
!29 = distinct !{!29, !7}
!30 = distinct !{!30, !9}
!31 = distinct !{!31, !11, !7}
!32 = distinct !{!32, !7}
!33 = distinct !{!33, !9}
!34 = distinct !{!34, !11, !7}
!35 = distinct !{!35, !7}
!36 = distinct !{!36, !9}
!37 = distinct !{!37, !11, !7}
!38 = distinct !{!38, !7}
!39 = distinct !{!39, !9}
!40 = distinct !{!40, !11, !7}
!41 = !{!42}
!42 = distinct !{!42, !43, !"_ZNK3jxl8weighted5State15WeightedAverageEPKlNSt3__15arrayIjLm4EEE: argument 0"}
!43 = distinct !{!43, !"_ZNK3jxl8weighted5State15WeightedAverageEPKlNSt3__15arrayIjLm4EEE"}
!44 = !{!45}
!45 = distinct !{!45, !46, !"_ZNK3jxl8weighted5State15WeightedAverageEPKlNSt3__15arrayIjLm4EEE: argument 0"}
!46 = distinct !{!46, !"_ZNK3jxl8weighted5State15WeightedAverageEPKlNSt3__15arrayIjLm4EEE"}
!47 = !{!48}
!48 = distinct !{!48, !49, !"_ZNK3jxl12MATreeLookup6LookupERKNSt3__16vectorIiNS1_9allocatorIiEEEE: argument 0"}
!49 = distinct !{!49, !"_ZNK3jxl12MATreeLookup6LookupERKNSt3__16vectorIiNS1_9allocatorIiEEEE"}
!50 = !{!51}
!51 = distinct !{!51, !52, !"_ZNK3jxl8weighted5State15WeightedAverageEPKlNSt3__15arrayIjLm4EEE: argument 0"}
!52 = distinct !{!52, !"_ZNK3jxl8weighted5State15WeightedAverageEPKlNSt3__15arrayIjLm4EEE"}
!53 = !{!54}
!54 = distinct !{!54, !55, !"_ZNK3jxl12MATreeLookup6LookupERKNSt3__16vectorIiNS1_9allocatorIiEEEE: argument 0"}
!55 = distinct !{!55, !"_ZNK3jxl12MATreeLookup6LookupERKNSt3__16vectorIiNS1_9allocatorIiEEEE"}
!56 = !{!57}
!57 = distinct !{!57, !58, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!58 = distinct !{!58, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!59 = !{!60}
!60 = distinct !{!60, !61, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!61 = distinct !{!61, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!62 = !{!63}
!63 = distinct !{!63, !64, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!64 = distinct !{!64, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!65 = !{!66}
!66 = distinct !{!66, !67, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!67 = distinct !{!67, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!68 = !{!69}
!69 = distinct !{!69, !70, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!70 = distinct !{!70, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!71 = !{!72}
!72 = distinct !{!72, !73, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!73 = distinct !{!73, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!74 = !{!75}
!75 = distinct !{!75, !76, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!76 = distinct !{!76, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!77 = !{!78}
!78 = distinct !{!78, !79, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!79 = distinct !{!79, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!80 = !{!81}
!81 = distinct !{!81, !82, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!82 = distinct !{!82, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!83 = !{!84}
!84 = distinct !{!84, !85, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!85 = distinct !{!85, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!86 = distinct !{!86, !9}
!87 = !{!88}
!88 = distinct !{!88, !89}
!89 = distinct !{!89, !"LVerDomain"}
!90 = !{!91}
!91 = distinct !{!91, !89}
!92 = distinct !{!92, !7}
!93 = distinct !{!93, !7}
!94 = !{!95}
!95 = distinct !{!95, !96}
!96 = distinct !{!96, !"LVerDomain"}
!97 = !{!98}
!98 = distinct !{!98, !96}
!99 = distinct !{!99, !7}
!100 = distinct !{!100, !9}
!101 = distinct !{!101, !7}
