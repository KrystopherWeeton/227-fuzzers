; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_quantize.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_quantize.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.macroblock = type { [3 x %struct.macroblock_plane], %struct.macroblockd, %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, [4 x i32], [4 x i32], i32, [4 x i32], [4 x i32], [4 x i32], [2 x i32*], [2 x i32*], i32**, [4 x i32], [2 x i32*], [2 x i32*], i32**, i32, i32, %struct.MvLimits, [4 x [256 x i8]], [4 x i32], i32, i32, [4 x [2 x [2 x [6 x [2 x [6 x [12 x i32]]]]]]], i32, i32, i32, i32, i32, [12 x i8], [12 x i64], [4 x %struct.mv], [2 x i8], i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, [25 x i8], i8, i8, void (i16*, i32*, i32)*, void (i32*, i8*, i32, i32)*, void (i32*, i16*, i32, i32, i32)*, [8 x i8], [4096 x i8], %struct.scale_factors*, [8 x i8] }
%struct.macroblock_plane = type { [4096 x i16], i32*, i32*, i16*, %struct.buf_2d, [8 x i8], [8 x i16], i16*, i16*, i16*, i16*, i16*, [2 x i64], [8 x i8] }
%struct.buf_2d = type { i8*, i32 }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%union.int_mv = type { i32 }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.MB_MODE_INFO_EXT = type { [4 x [2 x %union.int_mv]], [4 x i8] }
%struct.MvLimits = type { i32, i32, i32, i32 }
%struct.mv = type { i16, i16 }
%struct.VP9_COMP = type { %struct.FRAME_INFO, [8 x i8], %struct.QUANTS, %struct.ThreadData, %struct.MB_MODE_INFO_EXT*, [8 x i8], [256 x [8 x i16]], [256 x [8 x i16]], %struct.VP9Common, %struct.VP9EncoderConfig, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i8, [50 x %struct.TplDepFrame], [8 x %struct.yv12_buffer_config*], [8 x %struct.EncFrameBuf], %union.pthread_mutex_t, i32, %struct.KMEANS_DATA*, i32, i32, [8 x double], [8 x double], [8 x i32], i32, %struct.TileDataEnc*, i32, i32, [3 x i32], i32, i32, i32, [8 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64*, i32, i32, double*, %struct.yv12_buffer_config, [4 x [64 x %struct.TOKENEXTRA*]], [4 x [64 x %struct.TOKENLIST*]], i64, %struct.RD_OPT, %struct.CODING_CONTEXT, [2 x i32*], [2 x i32*], [2 x i32*], [2 x i32*], i64, i64, i64, %struct.RATE_CONTROL, double, [8 x [4 x i32]], %struct.vpx_codec_pkt_list*, [25 x %struct.MBGRAPH_FRAME_STATS], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i32, i32, i32, i8*, i8*, [8 x i32], %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i32 (%struct.macroblock*, %struct.mv*, %struct.mv*, i32, i32, %struct.vp9_variance_vtable*, i32, i32, i32*, i32*, i32**, i32*, i32*, i8*, i32, i32, i32)*, %struct.scale_factors, i32 (%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*)*, [13 x %struct.vp9_variance_vtable], i64, i64, i64, i64, %struct.TWO_PASS, i8, %struct.yv12_buffer_config, %struct.ALT_REF_AQ*, i32, i32, i32, i32, i32, i32, %struct.SVC, %struct.diff*, i32, i32, i32, %struct.search_site_config, [10 x i32], [7 x [4 x i32]], [2 x [10 x [10 x i32]]], [10 x [10 x [10 x i32]]], [4 x [3 x i32]], [16 x [4 x i32]], [3 x [2 x [4 x i32]]], %struct.vp9_denoiser, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.noise_estimate, i8*, [4 x i64], i64, i64, i64, i8, i32, %struct.VPxWorker*, %struct.EncWorkerData*, %struct.VP9LfSyncData, %struct.VP9BitstreamWorkerData*, i32, %struct.Vp9LevelInfo, %struct.MultiThreadHandle, void (%struct.VP9RowMTSyncData*, i32, i32)*, void (%struct.VP9RowMTSyncData*, i32, i32, i32)*, %struct.ARNRFilterData, i32, i32, i8*, i8*, i8*, i8*, i8, i8, i8*, i32, %struct.LevelConstraint, i8*, i8*, i32, %struct.vpx_roi_map, i32, %struct.EXT_RATECTRL, [8 x i8] }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PICK_MODE_CONTEXT*, %struct.PC_TREE*, %struct.PC_TREE*, [8 x i8] }
%struct.RD_COUNTS = type { [4 x [2 x [2 x [6 x [6 x [12 x i32]]]]]], [3 x i64], [4 x i64] }
%struct.PICK_MODE_CONTEXT = type { %struct.MODE_INFO, %struct.MB_MODE_INFO_EXT, i8*, [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], i32, i32, i32, i32, i32, [12 x i8], i32, i32, i32, i32, [4 x i64], i32, i64, i64, i32, i32, i32, i8, %union.int_mv, i8, i8, i32, [4 x %struct.mv], i8, i32, i8 }
%struct.PC_TREE = type { i32, i32, i8, %struct.PICK_MODE_CONTEXT, [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT], %union.anon, %struct.mv }
%union.anon = type { [4 x %struct.PC_TREE*] }
%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.VP9EncoderConfig = type { i32, i32, i32, i32, i32, double, %struct.vpx_rational, %struct.vpx_rational64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [12 x i32], [5 x i32], [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_rational = type { i32, i32 }
%struct.vpx_rational64 = type { i64, i32 }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.lookahead_ctx = type { i32, i32, i32, i32, i32, %struct.lookahead_entry* }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, i32, i32, i32, i32, i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, i64, i32, %union.int_mv }
%struct.EncFrameBuf = type { i32, i32, %struct.yv12_buffer_config }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.KMEANS_DATA = type { double, i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [13 x [30 x i32]], [13 x [30 x i8]], %struct.FIRSTPASS_DATA, %struct.VP9RowMTSyncData, i32* }
%struct.FIRSTPASS_DATA = type { double, double, i64, i64, i64, i64, i32, i32, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32 }
%struct.VP9RowMTSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.0, %union.anon.1, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.0 = type { i64 }
%union.anon.1 = type { i64 }
%struct.TOKENEXTRA = type { i8*, i16, i32 }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA*, i32 }
%struct.RD_OPT = type { [30 x i32], [6 x i32], [8 x [13 x [30 x i32]]], [4 x [3 x i64]], [4 x [4 x i64]], i32, i32, double }
%struct.CODING_CONTEXT = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [3 x i8], i8*, [4 x i8], [2 x i8], %struct.frame_contexts }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, [2 x i32], i32, i32, i32, i32, i32, [5 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [2 x i32], [5 x i32], i32, i32, [25 x i64], i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, [5 x i32], double, i32, i32, i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon.3 }
%union.anon.3 = type { %struct.anon.4, [40 x i8] }
%struct.anon.4 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.MBGRAPH_FRAME_STATS = type { %struct.MBGRAPH_MB_STATS* }
%struct.MBGRAPH_MB_STATS = type { [4 x %struct.anon.5] }
%struct.anon.5 = type { i32, %union.anon.6 }
%union.anon.6 = type { %union.int_mv }
%struct.SPEED_FEATURES = type { %struct.MV_SPEED_FEATURES, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i8, i32, i32, i8, i8, i8, i32, i32, i32, i32, i32, i32, [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], [4 x i32], [13 x i32], i32, i32, i32, i32, i32, [13 x i32], i32, i32, i32, i8, i32, i32, i32, i8, i32, i32, i32, %struct.PARTITION_SEARCH_BREAKOUT_THR, %struct.anon.7, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, %struct.ADAPT_SUBPEL_FORCE_STOP, i32 }
%struct.ADAPT_SUBPEL_FORCE_STOP = type { i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.PARTITION_SEARCH_BREAKOUT_THR = type { i64, i32 }
%struct.anon.7 = type { i32, [3 x float], i32, i32, [4 x i32] }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, double, [3 x i32], i32, double, i32, i32, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.vp9_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)* }
%struct.TWO_PASS = type { i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRST_PASS_INFO, %struct.FIRSTPASS_STATS, i32, i64, double, double, double, double, %struct.FP_MB_FLOAT_STATS*, i32, i64, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x i32], %struct.GF_GROUP }
%struct.FIRST_PASS_INFO = type { %struct.FIRSTPASS_STATS*, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64 }
%struct.FP_MB_FLOAT_STATS = type { double, double, double }
%struct.GF_GROUP = type { i8, [252 x i32], [252 x i32], [252 x i8], [252 x i8], [252 x i8], [252 x i32], [252 x i32], i32, i32, [50 x i32], i32, i32, i32, i32, i32, i32 }
%struct.ALT_REF_AQ = type opaque
%struct.SVC = type { i32, i32, i32, i32, i32, i32, %struct.lookahead_entry, i32, [25 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, i32, i32, [12 x %struct.LAYER_CONTEXT], i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [2 x %struct.BUFFER_LONGTERM_REF], i32, i32, i32, i32, [5 x i8], [5 x i32], i8*, [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, i32, i32, [5 x i32], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i32], [8 x i8], [8 x i8], [5 x i32], i8, i8, i8, [8 x i8], i32, [5 x i32], i32, [5 x i64], i64, i64, [5 x i64], i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, %struct.TWO_PASS, %struct.vpx_fixed_buf, i32, i32, i32, i32, %struct.lookahead_entry*, i32, i32, i32, i64, i32, i8*, i8*, i8*, i32, i32, i32, i8, i32 }
%struct.BUFFER_LONGTERM_REF = type { i32, i32 }
%struct.diff = type { i32, i32, i32 }
%struct.search_site_config = type { [88 x %struct.mv], [88 x i64], i32, i32 }
%struct.vp9_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VPxWorker = type { %struct.VPxWorkerImpl*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VPxWorkerImpl = type opaque
%struct.EncWorkerData = type { %struct.VP9_COMP*, %struct.ThreadData*, i32, i32, [64 x i32] }
%struct.VP9LfSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, %struct.LoopFilterWorkerData*, i32, i32, %union.pthread_mutex_t*, %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.VP9Common*, [3 x %struct.macroblockd_plane], i32, i32, i32 }
%struct.VP9BitstreamWorkerData = type opaque
%struct.Vp9LevelInfo = type { %struct.Vp9LevelStats, %struct.Vp9LevelSpec }
%struct.Vp9LevelStats = type { i8, i32, i64, i64, double, %struct.FrameWindowBuffer, i32 }
%struct.FrameWindowBuffer = type { [128 x %struct.FrameRecord], i8, i8 }
%struct.FrameRecord = type { i64, i32, i32 }
%struct.Vp9LevelSpec = type { i32, i64, i32, i32, double, double, double, i8, i32, i8 }
%struct.MultiThreadHandle = type { i32, i32, i32, [4 x i32], %struct.JobQueue*, i32, [64 x %struct.RowMTInfo], [80 x i32] }
%struct.JobQueue = type { i8*, %struct.JobNode }
%struct.JobNode = type { i32, i32, i32 }
%struct.RowMTInfo = type { %struct.JobQueueHandle, %union.pthread_mutex_t }
%struct.JobQueueHandle = type { i8*, i32 }
%struct.ARNRFilterData = type { [25 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors }
%struct.LevelConstraint = type { i8, i8, i32, double }
%struct.vpx_roi_map = type { i8, i8*, i32, i32, [8 x i32], [8 x i32], [8 x i32], [8 x i32], [4 x i32] }
%struct.EXT_RATECTRL = type { i32, i8*, %struct.vpx_rc_funcs, %struct.vpx_rc_config, %struct.vpx_rc_firstpass_stats }
%struct.vpx_rc_funcs = type { i32 (i8*, %struct.vpx_rc_config*, i8**)*, i32 (i8*, %struct.vpx_rc_firstpass_stats*)*, i32 (i8*, %struct.vpx_rc_encodeframe_info*, %struct.vpx_rc_encodeframe_decision*)*, i32 (i8*, %struct.vpx_rc_encodeframe_result*)*, i32 (i8*)*, i8* }
%struct.vpx_rc_encodeframe_info = type { i32, i32, i32, i32, [3 x i32], [3 x i32] }
%struct.vpx_rc_encodeframe_decision = type { i32 }
%struct.vpx_rc_encodeframe_result = type { i64, i64, i64 }
%struct.vpx_rc_config = type { i32, i32, i32, i32, i32, i32 }
%struct.vpx_rc_firstpass_stats = type { %struct.vpx_rc_frame_stats*, i32 }
%struct.vpx_rc_frame_stats = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }

@vpx_quantize_b = external local_unnamed_addr global void (i32*, i64, i32, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)*, align 8
@quantizer_to_qindex = internal unnamed_addr constant [64 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60, i32 64, i32 68, i32 72, i32 76, i32 80, i32 84, i32 88, i32 92, i32 96, i32 100, i32 104, i32 108, i32 112, i32 116, i32 120, i32 124, i32 128, i32 132, i32 136, i32 140, i32 144, i32 148, i32 152, i32 156, i32 160, i32 164, i32 168, i32 172, i32 176, i32 180, i32 184, i32 188, i32 192, i32 196, i32 200, i32 204, i32 208, i32 212, i32 216, i32 220, i32 224, i32 228, i32 232, i32 236, i32 240, i32 244, i32 249, i32 255], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_quantize_fp_c(i32* nocapture readonly, i64, i32, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readonly, i16* nocapture readnone) local_unnamed_addr #0 {
  %12 = bitcast i32* %5 to i8*
  %13 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 0, i64 %13, i1 false)
  %14 = bitcast i32* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %14, i8 0, i64 %13, i1 false)
  %15 = icmp sgt i64 %1, 0
  br i1 %15, label %16, label %58

16:                                               ; preds = %11, %16
  %17 = phi i64 [ %53, %16 ], [ 0, %11 ]
  %18 = phi i32 [ %52, %16 ], [ -1, %11 ]
  %19 = getelementptr inbounds i16, i16* %9, i64 %17
  %20 = load i16, i16* %19, align 2
  %21 = sext i16 %20 to i64
  %22 = getelementptr inbounds i32, i32* %0, i64 %21
  %23 = load i32, i32* %22, align 4
  %24 = ashr i32 %23, 31
  %25 = xor i32 %24, %23
  %26 = sub nsw i32 %25, %24
  %27 = icmp ne i16 %20, 0
  %28 = zext i1 %27 to i64
  %29 = getelementptr inbounds i16, i16* %3, i64 %28
  %30 = load i16, i16* %29, align 2
  %31 = sext i16 %30 to i32
  %32 = add nsw i32 %26, %31
  %33 = icmp slt i32 %32, 32767
  %34 = select i1 %33, i32 %32, i32 32767
  %35 = icmp sgt i32 %34, -32768
  %36 = select i1 %35, i32 %34, i32 -32768
  %37 = getelementptr inbounds i16, i16* %4, i64 %28
  %38 = load i16, i16* %37, align 2
  %39 = sext i16 %38 to i32
  %40 = mul nsw i32 %36, %39
  %41 = ashr i32 %40, 16
  %42 = xor i32 %41, %24
  %43 = sub nsw i32 %42, %24
  %44 = getelementptr inbounds i32, i32* %5, i64 %21
  store i32 %43, i32* %44, align 4
  %45 = getelementptr inbounds i16, i16* %7, i64 %28
  %46 = load i16, i16* %45, align 2
  %47 = sext i16 %46 to i32
  %48 = mul nsw i32 %43, %47
  %49 = getelementptr inbounds i32, i32* %6, i64 %21
  store i32 %48, i32* %49, align 4
  %50 = icmp eq i32 %41, 0
  %51 = trunc i64 %17 to i32
  %52 = select i1 %50, i32 %18, i32 %51
  %53 = add nuw nsw i64 %17, 1
  %54 = icmp eq i64 %53, %1
  br i1 %54, label %55, label %16

55:                                               ; preds = %16
  %56 = trunc i32 %52 to i16
  %57 = add i16 %56, 1
  br label %58

58:                                               ; preds = %55, %11
  %59 = phi i16 [ 0, %11 ], [ %57, %55 ]
  store i16 %59, i16* %8, align 2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_highbd_quantize_fp_c(i32* nocapture readonly, i64, i32, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readonly, i16* nocapture readnone) local_unnamed_addr #0 {
  %12 = bitcast i32* %5 to i8*
  %13 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 0, i64 %13, i1 false)
  %14 = bitcast i32* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %14, i8 0, i64 %13, i1 false)
  %15 = icmp sgt i64 %1, 0
  br i1 %15, label %16, label %57

16:                                               ; preds = %11, %16
  %17 = phi i64 [ %52, %16 ], [ 0, %11 ]
  %18 = phi i32 [ %51, %16 ], [ -1, %11 ]
  %19 = getelementptr inbounds i16, i16* %9, i64 %17
  %20 = load i16, i16* %19, align 2
  %21 = sext i16 %20 to i64
  %22 = getelementptr inbounds i32, i32* %0, i64 %21
  %23 = load i32, i32* %22, align 4
  %24 = ashr i32 %23, 31
  %25 = xor i32 %24, %23
  %26 = lshr i32 %23, 31
  %27 = add i32 %25, %26
  %28 = icmp ne i16 %20, 0
  %29 = zext i1 %28 to i64
  %30 = getelementptr inbounds i16, i16* %3, i64 %29
  %31 = load i16, i16* %30, align 2
  %32 = sext i16 %31 to i32
  %33 = add nsw i32 %27, %32
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i16, i16* %4, i64 %29
  %36 = load i16, i16* %35, align 2
  %37 = sext i16 %36 to i64
  %38 = mul nsw i64 %34, %37
  %39 = lshr i64 %38, 16
  %40 = trunc i64 %39 to i32
  %41 = xor i32 %24, %40
  %42 = sub nsw i32 %41, %24
  %43 = getelementptr inbounds i32, i32* %5, i64 %21
  store i32 %42, i32* %43, align 4
  %44 = getelementptr inbounds i16, i16* %7, i64 %29
  %45 = load i16, i16* %44, align 2
  %46 = sext i16 %45 to i32
  %47 = mul nsw i32 %42, %46
  %48 = getelementptr inbounds i32, i32* %6, i64 %21
  store i32 %47, i32* %48, align 4
  %49 = icmp eq i32 %40, 0
  %50 = trunc i64 %17 to i32
  %51 = select i1 %49, i32 %18, i32 %50
  %52 = add nuw nsw i64 %17, 1
  %53 = icmp eq i64 %52, %1
  br i1 %53, label %54, label %16

54:                                               ; preds = %16
  %55 = trunc i32 %51 to i16
  %56 = add i16 %55, 1
  br label %57

57:                                               ; preds = %54, %11
  %58 = phi i16 [ 0, %11 ], [ %56, %54 ]
  store i16 %58, i16* %8, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_quantize_fp_32x32_c(i32* nocapture readonly, i64, i32, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readonly, i16* nocapture readnone) local_unnamed_addr #0 {
  %12 = bitcast i32* %5 to i8*
  %13 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 0, i64 %13, i1 false)
  %14 = bitcast i32* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %14, i8 0, i64 %13, i1 false)
  %15 = icmp sgt i64 %1, 0
  br i1 %15, label %16, label %65

16:                                               ; preds = %11, %61
  %17 = phi i64 [ %63, %61 ], [ 0, %11 ]
  %18 = phi i32 [ %62, %61 ], [ -1, %11 ]
  %19 = getelementptr inbounds i16, i16* %9, i64 %17
  %20 = load i16, i16* %19, align 2
  %21 = sext i16 %20 to i64
  %22 = getelementptr inbounds i32, i32* %0, i64 %21
  %23 = load i32, i32* %22, align 4
  %24 = ashr i32 %23, 31
  %25 = xor i32 %24, %23
  %26 = sub nsw i32 %25, %24
  %27 = icmp ne i16 %20, 0
  %28 = zext i1 %27 to i64
  %29 = getelementptr inbounds i16, i16* %7, i64 %28
  %30 = load i16, i16* %29, align 2
  %31 = ashr i16 %30, 2
  %32 = sext i16 %31 to i32
  %33 = icmp slt i32 %26, %32
  br i1 %33, label %60, label %34

34:                                               ; preds = %16
  %35 = getelementptr inbounds i16, i16* %3, i64 %28
  %36 = load i16, i16* %35, align 2
  %37 = sext i16 %36 to i32
  %38 = add nsw i32 %37, 1
  %39 = ashr i32 %38, 1
  %40 = add nsw i32 %39, %26
  %41 = icmp slt i32 %40, 32767
  %42 = select i1 %41, i32 %40, i32 32767
  %43 = icmp sgt i32 %42, -32768
  %44 = select i1 %43, i32 %42, i32 -32768
  %45 = getelementptr inbounds i16, i16* %4, i64 %28
  %46 = load i16, i16* %45, align 2
  %47 = sext i16 %46 to i32
  %48 = mul nsw i32 %44, %47
  %49 = ashr i32 %48, 15
  %50 = xor i32 %49, %24
  %51 = sub nsw i32 %50, %24
  %52 = getelementptr inbounds i32, i32* %5, i64 %21
  store i32 %51, i32* %52, align 4
  %53 = load i16, i16* %29, align 2
  %54 = sext i16 %53 to i32
  %55 = mul nsw i32 %51, %54
  %56 = sdiv i32 %55, 2
  %57 = getelementptr inbounds i32, i32* %6, i64 %21
  store i32 %56, i32* %57, align 4
  %58 = icmp eq i32 %49, 0
  %59 = trunc i64 %17 to i32
  br i1 %58, label %60, label %61

60:                                               ; preds = %16, %34
  br label %61

61:                                               ; preds = %34, %60
  %62 = phi i32 [ %18, %60 ], [ %59, %34 ]
  %63 = add nuw nsw i64 %17, 1
  %64 = icmp eq i64 %63, %1
  br i1 %64, label %65, label %16

65:                                               ; preds = %61, %11
  %66 = phi i32 [ -1, %11 ], [ %62, %61 ]
  %67 = trunc i32 %66 to i16
  %68 = add i16 %67, 1
  store i16 %68, i16* %8, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_highbd_quantize_fp_32x32_c(i32* nocapture readonly, i64, i32, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readonly, i16* nocapture readnone) local_unnamed_addr #0 {
  %12 = bitcast i32* %5 to i8*
  %13 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 0, i64 %13, i1 false)
  %14 = bitcast i32* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %14, i8 0, i64 %13, i1 false)
  %15 = icmp sgt i64 %1, 0
  br i1 %15, label %16, label %63

16:                                               ; preds = %11, %59
  %17 = phi i64 [ %61, %59 ], [ 0, %11 ]
  %18 = phi i32 [ %60, %59 ], [ -1, %11 ]
  %19 = getelementptr inbounds i16, i16* %9, i64 %17
  %20 = load i16, i16* %19, align 2
  %21 = sext i16 %20 to i64
  %22 = getelementptr inbounds i32, i32* %0, i64 %21
  %23 = load i32, i32* %22, align 4
  %24 = ashr i32 %23, 31
  %25 = xor i32 %24, %23
  %26 = sub nsw i32 %25, %24
  %27 = icmp ne i16 %20, 0
  %28 = zext i1 %27 to i64
  %29 = getelementptr inbounds i16, i16* %7, i64 %28
  %30 = load i16, i16* %29, align 2
  %31 = ashr i16 %30, 2
  %32 = sext i16 %31 to i32
  %33 = icmp slt i32 %26, %32
  br i1 %33, label %58, label %34

34:                                               ; preds = %16
  %35 = getelementptr inbounds i16, i16* %3, i64 %28
  %36 = load i16, i16* %35, align 2
  %37 = sext i16 %36 to i32
  %38 = add nsw i32 %37, 1
  %39 = ashr i32 %38, 1
  %40 = add nsw i32 %39, %26
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i16, i16* %4, i64 %28
  %43 = load i16, i16* %42, align 2
  %44 = sext i16 %43 to i64
  %45 = mul nsw i64 %41, %44
  %46 = lshr i64 %45, 15
  %47 = trunc i64 %46 to i32
  %48 = xor i32 %24, %47
  %49 = sub nsw i32 %48, %24
  %50 = getelementptr inbounds i32, i32* %5, i64 %21
  store i32 %49, i32* %50, align 4
  %51 = load i16, i16* %29, align 2
  %52 = sext i16 %51 to i32
  %53 = mul nsw i32 %49, %52
  %54 = sdiv i32 %53, 2
  %55 = getelementptr inbounds i32, i32* %6, i64 %21
  store i32 %54, i32* %55, align 4
  %56 = icmp eq i32 %47, 0
  %57 = trunc i64 %17 to i32
  br i1 %56, label %58, label %59

58:                                               ; preds = %16, %34
  br label %59

59:                                               ; preds = %34, %58
  %60 = phi i32 [ %18, %58 ], [ %57, %34 ]
  %61 = add nuw nsw i64 %17, 1
  %62 = icmp eq i64 %61, %1
  br i1 %62, label %63, label %16

63:                                               ; preds = %59, %11
  %64 = phi i32 [ -1, %11 ], [ %60, %59 ]
  %65 = trunc i32 %64 to i16
  %66 = add i16 %65, 1
  store i16 %66, i16* %8, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_regular_quantize_b_4x4(%struct.macroblock* nocapture readonly, i32, i32, i16*, i16*) local_unnamed_addr #0 {
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %6, i32 1
  %8 = load i32*, i32** %7, align 16
  %9 = shl nsw i32 %2, 4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i32, i32* %8, i64 %10
  %12 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i32 0, i64 %6, i32 0
  %13 = load i32*, i32** %12, align 8
  %14 = getelementptr inbounds i32, i32* %13, i64 %10
  %15 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4
  %16 = load i32, i32* %15, align 16
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %5
  %19 = bitcast i32* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 64, i1 false)
  %20 = bitcast i32* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %20, i8 0, i64 64, i1 false)
  br label %65

21:                                               ; preds = %5
  %22 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i32 18
  %23 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %22, align 8
  %24 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %23, i64 0, i32 29
  %25 = load i32, i32* %24, align 8
  %26 = and i32 %25, 8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %46, label %28

28:                                               ; preds = %21
  %29 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %6, i32 2
  %30 = load i32*, i32** %29, align 8
  %31 = getelementptr inbounds i32, i32* %30, i64 %10
  %32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %6, i32 10
  %33 = load i16*, i16** %32, align 8
  %34 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %6, i32 11
  %35 = load i16*, i16** %34, align 16
  %36 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %6, i32 8
  %37 = load i16*, i16** %36, align 8
  %38 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %6, i32 9
  %39 = load i16*, i16** %38, align 16
  %40 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i32 0, i64 %6, i32 12
  %41 = load i16*, i16** %40, align 8
  %42 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %6, i32 3
  %43 = load i16*, i16** %42, align 16
  %44 = sext i32 %2 to i64
  %45 = getelementptr inbounds i16, i16* %43, i64 %44
  tail call void @vpx_highbd_quantize_b_sse2(i32* %31, i64 16, i32 0, i16* %33, i16* %35, i16* %37, i16* %39, i32* %11, i32* %14, i16* %41, i16* %45, i16* %3, i16* %4) #4
  br label %65

46:                                               ; preds = %21
  %47 = load void (i32*, i64, i32, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)*, void (i32*, i64, i32, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)** @vpx_quantize_b, align 8
  %48 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %6, i32 2
  %49 = load i32*, i32** %48, align 8
  %50 = getelementptr inbounds i32, i32* %49, i64 %10
  %51 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %6, i32 10
  %52 = load i16*, i16** %51, align 8
  %53 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %6, i32 11
  %54 = load i16*, i16** %53, align 16
  %55 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %6, i32 8
  %56 = load i16*, i16** %55, align 8
  %57 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %6, i32 9
  %58 = load i16*, i16** %57, align 16
  %59 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i32 0, i64 %6, i32 12
  %60 = load i16*, i16** %59, align 8
  %61 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 %6, i32 3
  %62 = load i16*, i16** %61, align 16
  %63 = sext i32 %2 to i64
  %64 = getelementptr inbounds i16, i16* %62, i64 %63
  tail call void %47(i32* %50, i64 16, i32 0, i16* %52, i16* %54, i16* %56, i16* %58, i32* %11, i32* %14, i16* %60, i16* %64, i16* %3, i16* %4) #4
  br label %65

65:                                               ; preds = %46, %28, %18
  ret void
}

declare void @vpx_highbd_quantize_b_sse2(i32*, i64, i32, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_init_quantizer(%struct.VP9_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 80
  %3 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 10
  %4 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 39
  %5 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 41
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 40
  br label %7

7:                                                ; preds = %183, %1
  %8 = phi i64 [ 0, %1 ], [ %184, %183 ]
  %9 = load i32, i32* %2, align 16
  %10 = trunc i64 %8 to i32
  %11 = tail call signext i16 @vp9_dc_quant(i32 %10, i32 0, i32 %9) #4
  %12 = icmp eq i32 %9, 10
  %13 = select i1 %12, i16 592, i16 2368
  %14 = icmp eq i32 %9, 8
  %15 = select i1 %14, i16 148, i16 %13
  %16 = icmp eq i64 %8, 0
  %17 = icmp slt i16 %11, %15
  %18 = select i1 %17, i32 84, i32 80
  %19 = select i1 %16, i32 64, i32 %18
  %20 = icmp eq i64 %8, 0
  %21 = select i1 %20, i32 64, i32 48
  %22 = load i32, i32* %3, align 4
  %23 = shl i32 %22, 4
  %24 = sub i32 112, %23
  %25 = sdiv i32 %24, 7
  %26 = icmp sgt i32 %22, 0
  %27 = icmp ne i64 %8, 0
  %28 = and i1 %27, %26
  %29 = add nsw i32 %25, 64
  %30 = sub nsw i32 64, %25
  %31 = select i1 %28, i32 %29, i32 %19
  %32 = select i1 %28, i32 %30, i32 %21
  br label %48

33:                                               ; preds = %121
  %34 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 0, i64 %8, i64 1
  %35 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 4, i64 %8, i64 1
  %36 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 6, i64 %8, i64 1
  %37 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 1, i64 %8, i64 1
  %38 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 2, i64 %8, i64 1
  %39 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 3, i64 %8, i64 1
  %40 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 6, i64 %8, i64 1
  %41 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 8, i64 %8, i64 1
  %42 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 5, i64 %8, i64 1
  %43 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 7, i64 %8, i64 1
  %44 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 9, i64 %8, i64 1
  %45 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 10, i64 %8, i64 1
  %46 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 11, i64 %8, i64 1
  %47 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 7, i64 %8, i64 1
  br label %151

48:                                               ; preds = %149, %7
  %49 = phi i32 [ %22, %7 ], [ %150, %149 ]
  %50 = phi i64 [ 0, %7 ], [ %147, %149 ]
  %51 = icmp eq i64 %50, 0
  %52 = select i1 %51, i32 48, i32 42
  %53 = select i1 %20, i32 64, i32 %52
  %54 = icmp sgt i32 %49, 0
  %55 = select i1 %54, i32 %30, i32 %53
  br i1 %51, label %56, label %60

56:                                               ; preds = %48
  %57 = load i32, i32* %4, align 8
  %58 = load i32, i32* %2, align 16
  %59 = tail call signext i16 @vp9_dc_quant(i32 %10, i32 %57, i32 %58) #4
  br label %63

60:                                               ; preds = %48
  %61 = load i32, i32* %2, align 16
  %62 = tail call signext i16 @vp9_ac_quant(i32 %10, i32 0, i32 %61) #4
  br label %63

63:                                               ; preds = %60, %56
  %64 = phi i16 [ %59, %56 ], [ %62, %60 ]
  %65 = sext i16 %64 to i32
  %66 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 0, i64 %8, i64 %50
  %67 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 1, i64 %8, i64 %50
  %68 = icmp ugt i16 %64, 1
  br i1 %68, label %69, label %75

69:                                               ; preds = %63, %69
  %70 = phi i32 [ %73, %69 ], [ 0, %63 ]
  %71 = phi i32 [ %72, %69 ], [ %65, %63 ]
  %72 = lshr i32 %71, 1
  %73 = add nuw nsw i32 %70, 1
  %74 = icmp ugt i32 %71, 3
  br i1 %74, label %69, label %75

75:                                               ; preds = %69, %63
  %76 = phi i32 [ 0, %63 ], [ %73, %69 ]
  %77 = shl i32 65536, %76
  %78 = sdiv i32 %77, %65
  %79 = trunc i32 %78 to i16
  %80 = add i16 %79, 1
  store i16 %80, i16* %66, align 2
  %81 = sub nsw i32 16, %76
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i16
  store i16 %83, i16* %67, align 2
  %84 = sdiv i32 65536, %65
  %85 = trunc i32 %84 to i16
  %86 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 4, i64 %8, i64 %50
  store i16 %85, i16* %86, align 2
  %87 = mul nsw i32 %55, %65
  %88 = lshr i32 %87, 7
  %89 = trunc i32 %88 to i16
  %90 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 6, i64 %8, i64 %50
  store i16 %89, i16* %90, align 2
  %91 = mul nsw i32 %31, %65
  %92 = add nsw i32 %91, 64
  %93 = lshr i32 %92, 7
  %94 = trunc i32 %93 to i16
  %95 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 2, i64 %8, i64 %50
  store i16 %94, i16* %95, align 2
  %96 = mul nsw i32 %32, %65
  %97 = lshr i32 %96, 7
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 3, i64 %8, i64 %50
  store i16 %98, i16* %99, align 2
  %100 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 6, i64 %8, i64 %50
  store i16 %64, i16* %100, align 2
  br i1 %51, label %101, label %105

101:                                              ; preds = %75
  %102 = load i32, i32* %6, align 4
  %103 = load i32, i32* %2, align 16
  %104 = tail call signext i16 @vp9_dc_quant(i32 %10, i32 %102, i32 %103) #4
  br label %109

105:                                              ; preds = %75
  %106 = load i32, i32* %5, align 16
  %107 = load i32, i32* %2, align 16
  %108 = tail call signext i16 @vp9_ac_quant(i32 %10, i32 %106, i32 %107) #4
  br label %109

109:                                              ; preds = %105, %101
  %110 = phi i16 [ %104, %101 ], [ %108, %105 ]
  %111 = sext i16 %110 to i32
  %112 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 8, i64 %8, i64 %50
  %113 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 9, i64 %8, i64 %50
  %114 = icmp ugt i16 %110, 1
  br i1 %114, label %115, label %121

115:                                              ; preds = %109, %115
  %116 = phi i32 [ %119, %115 ], [ 0, %109 ]
  %117 = phi i32 [ %118, %115 ], [ %111, %109 ]
  %118 = lshr i32 %117, 1
  %119 = add nuw nsw i32 %116, 1
  %120 = icmp ugt i32 %117, 3
  br i1 %120, label %115, label %121

121:                                              ; preds = %115, %109
  %122 = phi i32 [ 0, %109 ], [ %119, %115 ]
  %123 = shl i32 65536, %122
  %124 = sdiv i32 %123, %111
  %125 = trunc i32 %124 to i16
  %126 = add i16 %125, 1
  store i16 %126, i16* %112, align 2
  %127 = sub nsw i32 16, %122
  %128 = shl i32 1, %127
  %129 = trunc i32 %128 to i16
  store i16 %129, i16* %113, align 2
  %130 = sdiv i32 65536, %111
  %131 = trunc i32 %130 to i16
  %132 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 5, i64 %8, i64 %50
  store i16 %131, i16* %132, align 2
  %133 = mul nsw i32 %55, %111
  %134 = lshr i32 %133, 7
  %135 = trunc i32 %134 to i16
  %136 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 7, i64 %8, i64 %50
  store i16 %135, i16* %136, align 2
  %137 = mul nsw i32 %31, %111
  %138 = add nsw i32 %137, 64
  %139 = lshr i32 %138, 7
  %140 = trunc i32 %139 to i16
  %141 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 10, i64 %8, i64 %50
  store i16 %140, i16* %141, align 2
  %142 = mul nsw i32 %32, %111
  %143 = lshr i32 %142, 7
  %144 = trunc i32 %143 to i16
  %145 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 11, i64 %8, i64 %50
  store i16 %144, i16* %145, align 2
  %146 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 7, i64 %8, i64 %50
  store i16 %110, i16* %146, align 2
  %147 = add nuw nsw i64 %50, 1
  %148 = icmp eq i64 %147, 2
  br i1 %148, label %33, label %149

149:                                              ; preds = %121
  %150 = load i32, i32* %3, align 4
  br label %48

151:                                              ; preds = %151, %33
  %152 = phi i64 [ 2, %33 ], [ %181, %151 ]
  %153 = load i16, i16* %34, align 2
  %154 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 0, i64 %8, i64 %152
  store i16 %153, i16* %154, align 2
  %155 = load i16, i16* %35, align 2
  %156 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 4, i64 %8, i64 %152
  store i16 %155, i16* %156, align 2
  %157 = load i16, i16* %36, align 2
  %158 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 6, i64 %8, i64 %152
  store i16 %157, i16* %158, align 2
  %159 = load i16, i16* %37, align 2
  %160 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 1, i64 %8, i64 %152
  store i16 %159, i16* %160, align 2
  %161 = load i16, i16* %38, align 2
  %162 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 2, i64 %8, i64 %152
  store i16 %161, i16* %162, align 2
  %163 = load i16, i16* %39, align 2
  %164 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 3, i64 %8, i64 %152
  store i16 %163, i16* %164, align 2
  %165 = load i16, i16* %40, align 2
  %166 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 6, i64 %8, i64 %152
  store i16 %165, i16* %166, align 2
  %167 = load i16, i16* %41, align 2
  %168 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 8, i64 %8, i64 %152
  store i16 %167, i16* %168, align 2
  %169 = load i16, i16* %42, align 2
  %170 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 5, i64 %8, i64 %152
  store i16 %169, i16* %170, align 2
  %171 = load i16, i16* %43, align 2
  %172 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 7, i64 %8, i64 %152
  store i16 %171, i16* %172, align 2
  %173 = load i16, i16* %44, align 2
  %174 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 9, i64 %8, i64 %152
  store i16 %173, i16* %174, align 2
  %175 = load i16, i16* %45, align 2
  %176 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 10, i64 %8, i64 %152
  store i16 %175, i16* %176, align 2
  %177 = load i16, i16* %46, align 2
  %178 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 11, i64 %8, i64 %152
  store i16 %177, i16* %178, align 2
  %179 = load i16, i16* %47, align 2
  %180 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 7, i64 %8, i64 %152
  store i16 %179, i16* %180, align 2
  %181 = add nuw nsw i64 %152, 1
  %182 = icmp eq i64 %181, 8
  br i1 %182, label %183, label %151

183:                                              ; preds = %151
  %184 = add nuw nsw i64 %8, 1
  %185 = icmp eq i64 %184, 256
  br i1 %185, label %186, label %7

186:                                              ; preds = %183
  ret void
}

declare signext i16 @vp9_dc_quant(i32, i32, i32) local_unnamed_addr #2

declare signext i16 @vp9_ac_quant(i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_init_plane_quantizers(%struct.VP9_COMP*, %struct.macroblock*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 6
  %4 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %3, align 8
  %5 = load %struct.MODE_INFO*, %struct.MODE_INFO** %4, align 8
  %6 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %5, i64 0, i32 4
  %7 = load i8, i8* %6, align 4
  %8 = sext i8 %7 to i32
  %9 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69
  %10 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 38
  %11 = load i32, i32* %10, align 4
  %12 = tail call i32 @vp9_get_qindex(%struct.segmentation* %9, i32 %8, i32 %11) #4
  %13 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 39
  %14 = load i32, i32* %13, align 8
  %15 = add nsw i32 %14, %12
  %16 = tail call i32 @vp9_compute_rd_mult(%struct.VP9_COMP* %0, i32 %15) #4
  %17 = sext i32 %12 to i64
  %18 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 0, i64 %17, i64 0
  %19 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 8
  store i16* %18, i16** %19, align 8
  %20 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 4, i64 %17, i64 0
  %21 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 7
  store i16* %20, i16** %21, align 16
  %22 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 6, i64 0
  %23 = bitcast i16* %22 to i8*
  %24 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 6, i64 %17, i64 0
  %25 = bitcast i16* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %23, i8* align 16 %25, i64 16, i1 false)
  %26 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 1, i64 %17, i64 0
  %27 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 9
  store i16* %26, i16** %27, align 16
  %28 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 2, i64 %17, i64 0
  %29 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 10
  store i16* %28, i16** %29, align 8
  %30 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 3, i64 %17, i64 0
  %31 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 11
  store i16* %30, i16** %31, align 16
  %32 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 6, i64 %17, i64 0
  %33 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 0, i32 12
  store i16* %32, i16** %33, align 8
  %34 = load i16, i16* %28, align 2
  %35 = sext i16 %34 to i32
  %36 = mul nsw i32 %35, %35
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 12, i64 0
  store i64 %37, i64* %38, align 8
  %39 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 2, i64 %17, i64 1
  %40 = load i16, i16* %39, align 2
  %41 = sext i16 %40 to i32
  %42 = mul nsw i32 %41, %41
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 12, i64 1
  store i64 %43, i64* %44, align 8
  %45 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 8, i64 %17, i64 0
  %46 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 5, i64 %17, i64 0
  %47 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 7, i64 %17, i64 0
  %48 = bitcast i16* %47 to i8*
  %49 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 9, i64 %17, i64 0
  %50 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 10, i64 %17, i64 0
  %51 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 11, i64 %17, i64 0
  %52 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 7, i64 %17, i64 0
  %53 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 8
  store i16* %45, i16** %53, align 8
  %54 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 7
  store i16* %46, i16** %54, align 16
  %55 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 6, i64 0
  %56 = bitcast i16* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %56, i8* align 16 %48, i64 16, i1 false)
  %57 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 9
  store i16* %49, i16** %57, align 16
  %58 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 10
  store i16* %50, i16** %58, align 8
  %59 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 11
  store i16* %51, i16** %59, align 16
  %60 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 1, i32 12
  store i16* %52, i16** %60, align 8
  %61 = load i16, i16* %50, align 2
  %62 = sext i16 %61 to i32
  %63 = mul nsw i32 %62, %62
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 12, i64 0
  store i64 %64, i64* %65, align 8
  %66 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 2, i32 10, i64 %17, i64 1
  %67 = load i16, i16* %66, align 2
  %68 = sext i16 %67 to i32
  %69 = mul nsw i32 %68, %68
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 12, i64 1
  store i64 %70, i64* %71, align 8
  %72 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 8
  store i16* %45, i16** %72, align 8
  %73 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 7
  store i16* %46, i16** %73, align 16
  %74 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 6, i64 0
  %75 = bitcast i16* %74 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %75, i8* align 16 %48, i64 16, i1 false)
  %76 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 9
  store i16* %49, i16** %76, align 16
  %77 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 10
  store i16* %50, i16** %77, align 8
  %78 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 11
  store i16* %51, i16** %78, align 16
  %79 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 1, i32 0, i64 2, i32 12
  store i16* %52, i16** %79, align 8
  %80 = load i16, i16* %50, align 2
  %81 = sext i16 %80 to i32
  %82 = mul nsw i32 %81, %81
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 12, i64 0
  store i64 %83, i64* %84, align 8
  %85 = load i16, i16* %66, align 2
  %86 = sext i16 %85 to i32
  %87 = mul nsw i32 %86, %86
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 12, i64 1
  store i64 %88, i64* %89, align 8
  %90 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %9, i64 0, i32 0
  %91 = load i8, i8* %90, align 4
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %99, label %93

93:                                               ; preds = %2
  %94 = sext i8 %7 to i64
  %95 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 8, i64 %94
  %96 = load i32, i32* %95, align 4
  %97 = lshr i32 %96, 3
  %98 = and i32 %97, 1
  br label %99

99:                                               ; preds = %2, %93
  %100 = phi i32 [ 0, %2 ], [ %98, %93 ]
  %101 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4
  store i32 %100, i32* %101, align 16
  %102 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 8
  store i32 %12, i32* %102, align 16
  %103 = ashr i32 %16, 6
  %104 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 11
  %105 = icmp eq i32 %103, 0
  %106 = zext i1 %105 to i32
  %107 = add nsw i32 %103, %106
  store i32 %107, i32* %104, align 4
  tail call void @vp9_initialize_me_consts(%struct.VP9_COMP* %0, %struct.macroblock* %1, i32 %12) #4
  ret void
}

declare i32 @vp9_get_qindex(%struct.segmentation*, i32, i32) local_unnamed_addr #2

declare i32 @vp9_compute_rd_mult(%struct.VP9_COMP*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @vp9_initialize_me_consts(%struct.VP9_COMP*, %struct.macroblock*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_frame_init_quantizer(%struct.VP9_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 0
  tail call void @vp9_init_plane_quantizers(%struct.VP9_COMP* %0, %struct.macroblock* %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_set_quantizer(%struct.VP9_COMP*, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 38
  store i32 %1, i32* %3, align 4
  %4 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 39
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 40
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 41
  store i32 0, i32* %6, align 16
  %7 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 71
  %8 = load i32, i32* %7, align 16
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %11, label %10

10:                                               ; preds = %2
  store i32 %8, i32* %6, align 16
  store i32 %8, i32* %5, align 4
  tail call void @vp9_init_quantizer(%struct.VP9_COMP* %0)
  br label %11

11:                                               ; preds = %2, %10
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @vp9_quantizer_to_qindex(i32) local_unnamed_addr #3 {
  %2 = sext i32 %0 to i64
  %3 = getelementptr inbounds [64 x i32], [64 x i32]* @quantizer_to_qindex, i64 0, i64 %2
  %4 = load i32, i32* %3, align 4
  ret i32 %4
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @vp9_qindex_to_quantizer(i32) local_unnamed_addr #3 {
  br label %2

2:                                                ; preds = %25, %1
  %3 = phi i64 [ 0, %1 ], [ %26, %25 ]
  %4 = getelementptr inbounds [64 x i32], [64 x i32]* @quantizer_to_qindex, i64 0, i64 %3
  %5 = load i32, i32* %4, align 16
  %6 = icmp slt i32 %5, %0
  br i1 %6, label %7, label %12

7:                                                ; preds = %2
  %8 = or i64 %3, 1
  %9 = getelementptr inbounds [64 x i32], [64 x i32]* @quantizer_to_qindex, i64 0, i64 %8
  %10 = load i32, i32* %9, align 4
  %11 = icmp slt i32 %10, %0
  br i1 %11, label %15, label %12

12:                                               ; preds = %25, %20, %15, %7, %2
  %13 = phi i64 [ %3, %2 ], [ %8, %7 ], [ %16, %15 ], [ %21, %20 ], [ %21, %25 ]
  %14 = trunc i64 %13 to i32
  ret i32 %14

15:                                               ; preds = %7
  %16 = or i64 %3, 2
  %17 = getelementptr inbounds [64 x i32], [64 x i32]* @quantizer_to_qindex, i64 0, i64 %16
  %18 = load i32, i32* %17, align 8
  %19 = icmp slt i32 %18, %0
  br i1 %19, label %20, label %12

20:                                               ; preds = %15
  %21 = or i64 %3, 3
  %22 = getelementptr inbounds [64 x i32], [64 x i32]* @quantizer_to_qindex, i64 0, i64 %21
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %23, %0
  br i1 %24, label %25, label %12

25:                                               ; preds = %20
  %26 = add nuw nsw i64 %3, 4
  %27 = icmp eq i64 %26, 64
  br i1 %27, label %12, label %2
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
