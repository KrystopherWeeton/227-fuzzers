; ModuleID = '../../components/zoom/page_zoom_constants.cc'
source_filename = "../../components/zoom/page_zoom_constants.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.1" }
%"union.absl::variant_internal::DestructibleUnionImpl.1" = type { %"union.absl::variant_internal::DestructibleUnionImpl.2" }
%"union.absl::variant_internal::DestructibleUnionImpl.2" = type { %"union.absl::variant_internal::DestructibleUnionImpl.3" }
%"union.absl::variant_internal::DestructibleUnionImpl.3" = type { %"union.absl::variant_internal::DestructibleUnionImpl.4" }
%"union.absl::variant_internal::DestructibleUnionImpl.4" = type { %"class.std::__1::basic_string" }

@_ZN4zoom18kPresetZoomFactorsE = hidden local_unnamed_addr constant [17 x double] [double 2.500000e-01, double 0x3FD5555555555555, double 5.000000e-01, double 0x3FE5555555555555, double 7.500000e-01, double 8.000000e-01, double 9.000000e-01, double 1.000000e+00, double 1.100000e+00, double 1.250000e+00, double 1.500000e+00, double 1.750000e+00, double 2.000000e+00, double 2.500000e+00, double 3.000000e+00, double 4.000000e+00, double 5.000000e+00], align 16
@_ZN4zoom22kPresetZoomFactorsSizeE = hidden local_unnamed_addr constant i64 17, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4zoom26GetPresetZoomFactorsAsJSONEv(%"class.std::__1::basic_string"* noalias sret) local_unnamed_addr #0 {
  %2 = alloca %"class.base::Value", align 8
  %3 = bitcast %"class.base::Value"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3) #4
  %4 = bitcast %"class.base::Value"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 32, i1 false)
  call void @_ZN4base5ValueC1ENS0_4TypeE(%"class.base::Value"* nonnull %2, i8 zeroext 7) #4
  call void @_ZN4base5Value6AppendEd(%"class.base::Value"* nonnull %2, double 2.500000e-01) #4
  call void @_ZN4base5Value6AppendEd(%"class.base::Value"* nonnull %2, double 0x3FD5555555555555) #4
  call void @_ZN4base5Value6AppendEd(%"class.base::Value"* nonnull %2, double 5.000000e-01) #4
  call void @_ZN4base5Value6AppendEd(%"class.base::Value"* nonnull %2, double 0x3FE5555555555555) #4
  call void @_ZN4base5Value6AppendEd(%"class.base::Value"* nonnull %2, double 7.500000e-01) #4
  call void @_ZN4base5Value6AppendEd(%"class.base::Value"* nonnull %2, double 8.000000e-01) #4
  call void @_ZN4base5Value6AppendEd(%"class.base::Value"* nonnull %2, double 9.000000e-01) #4
  call void @_ZN4base5Value6AppendEd(%"class.base::Value"* nonnull %2, double 1.000000e+00) #4
  call void @_ZN4base5Value6AppendEd(%"class.base::Value"* nonnull %2, double 1.100000e+00) #4
  call void @_ZN4base5Value6AppendEd(%"class.base::Value"* nonnull %2, double 1.250000e+00) #4
  call void @_ZN4base5Value6AppendEd(%"class.base::Value"* nonnull %2, double 1.500000e+00) #4
  call void @_ZN4base5Value6AppendEd(%"class.base::Value"* nonnull %2, double 1.750000e+00) #4
  call void @_ZN4base5Value6AppendEd(%"class.base::Value"* nonnull %2, double 2.000000e+00) #4
  call void @_ZN4base5Value6AppendEd(%"class.base::Value"* nonnull %2, double 2.500000e+00) #4
  call void @_ZN4base5Value6AppendEd(%"class.base::Value"* nonnull %2, double 3.000000e+00) #4
  call void @_ZN4base5Value6AppendEd(%"class.base::Value"* nonnull %2, double 4.000000e+00) #4
  call void @_ZN4base5Value6AppendEd(%"class.base::Value"* nonnull %2, double 5.000000e+00) #4
  %5 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #4
  %6 = call zeroext i1 @_ZN4base10JSONWriter5WriteERKNS_5ValueEPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEm(%"class.base::Value"* nonnull dereferenceable(32) %2, %"class.std::__1::basic_string"* %0, i64 200) #4
  call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %2) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN4base5ValueC1ENS0_4TypeE(%"class.base::Value"*, i8 zeroext) unnamed_addr #2

declare void @_ZN4base5Value6AppendEd(%"class.base::Value"*, double) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN4base10JSONWriter5WriteERKNS_5ValueEPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEm(%"class.base::Value"* dereferenceable(32), %"class.std::__1::basic_string"*, i64) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4base5ValueD1Ev(%"class.base::Value"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
