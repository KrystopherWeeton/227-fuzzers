; ModuleID = '../../native_client/src/trusted/service_runtime/sel_addrspace.c'
source_filename = "../../native_client/src/trusted/service_runtime/sel_addrspace.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.NaClApp = type { i8, i64, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, %struct.NaClMutex, %struct.NaClCondVar, [151 x %struct.NaClSyscallTableEntry], %struct.NaClResourceNaClApp, i32, i32, %struct.NaClVmmap, %struct.NaClIntervalMultiset*, %struct.NaClDescEffector*, i32, i32, %struct.NaClDesc*, %struct.NaClMutex, i8*, %struct.NaClDynamicRegion*, i32, i32, i32, i32, i64, i32, i32, i32, %struct.NaClCPUFeaturesAbstract*, %struct.NaClValidationCache*, i32, i32, i32, i32, i32, i64, %struct.NaClMutex, %struct.DynArray, i32, %struct.NaClFastMutex, %struct.DynArray, %struct.NaClDebugCallbacks*, %struct.NaClDesc*, %struct.NaClDesc*, %struct.NaClMutex, i32, i32, i32, i32, i32, i32, i32, %struct.NaClValidatorInterface* }
%struct.NaClCondVar = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.0, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.0 = type { i64 }
%struct.NaClSyscallTableEntry = type { i32 (%struct.NaClAppThread*)* }
%struct.NaClAppThread = type opaque
%struct.NaClResourceNaClApp = type { %struct.NaClResource, %struct.NaClApp* }
%struct.NaClResource = type { %struct.NaClResourceSchemes*, i64 }
%struct.NaClResourceSchemes = type { i8*, i32, %struct.NaClDesc* (%struct.NaClResource*, i8*, i32, i32, i32)* }
%struct.NaClVmmap = type { %struct.NaClVmmapEntry**, i64, i64, i32 }
%struct.NaClVmmapEntry = type { i64, i64, i32, i32, i32, %struct.NaClDesc*, i64, i64 }
%struct.NaClIntervalMultiset = type { %struct.NaClIntervalMultisetVtbl* }
%struct.NaClIntervalMultisetVtbl = type { void (%struct.NaClIntervalMultiset*)*, void (%struct.NaClIntervalMultiset*, i32, i32)*, void (%struct.NaClIntervalMultiset*, i32, i32)*, i32 (%struct.NaClIntervalMultiset*, i32, i32)* }
%struct.NaClDescEffector = type opaque
%struct.NaClDynamicRegion = type opaque
%struct.NaClCPUFeaturesAbstract = type opaque
%struct.NaClValidationCache = type opaque
%struct.NaClFastMutex = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.DynArray = type { i64, i8**, i64, i32*, i64 }
%struct.NaClDebugCallbacks = type { void (%struct.NaClAppThread*)*, void (%struct.NaClAppThread*)*, void ()* }
%struct.NaClDesc = type opaque
%struct.NaClMutex = type { %union.pthread_mutex_t, i32 }
%struct.NaClValidatorInterface = type { i32, i32, i32, i32 (i64, i8*, i64, i32, i32, i32, %struct.NaClCPUFeaturesAbstract*, %struct.NaClValidationMetadata*, %struct.NaClValidationCache*)*, i32 (i64, i8*, i8*, i64, %struct.NaClCPUFeaturesAbstract*, i32 (i8*, i8*, i8)*)*, i32 (i64, i8*, i8*, i64, %struct.NaClCPUFeaturesAbstract*)*, i64, void (%struct.NaClCPUFeaturesAbstract*)*, void (%struct.NaClCPUFeaturesAbstract*)*, i32 (i64, i64, i8*, i64, %struct.NaClCPUFeaturesAbstract*)* }
%struct.NaClValidationMetadata = type opaque

@.str = private unnamed_addr constant [59 x i8] c"NaClAllocAddrSpace: calling NaClAllocateSpace(*,0x%016lx)\0A\00", align 1
@.str.1 = private unnamed_addr constant [62 x i8] c"Native Client module will be loaded at base address 0x%016lx\0A\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"NaClAllocAddrSpace: stack too large!\00", align 1
@.str.3 = private unnamed_addr constant [87 x i8] c"NaClAllocAddrSpace: hole between end of data and the beginning of stack is zero size.\0A\00", align 1
@.str.4 = private unnamed_addr constant [43 x i8] c"madvising 0x%08lx, 0x%08lx, MADV_DONTNEED\0A\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"madvise, errno %d\0A\00", align 1
@.str.6 = private unnamed_addr constant [41 x i8] c"mprotecting 0x%08lx, 0x%08lx, PROT_NONE\0A\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"mprotect, errno %d\0A\00", align 1
@.str.8 = private unnamed_addr constant [36 x i8] c"Protecting guard pages for 0x%08lx\0A\00", align 1
@.str.9 = private unnamed_addr constant [65 x i8] c"Trampoline/text region start 0x%08lx, size 0x%08lx, end 0x%08lx\0A\00", align 1
@.str.10 = private unnamed_addr constant [97 x i8] c"NaClMemoryProtection: NaClMprotect(0x%08lx, 0x%08lx, 0x%x) failed, error %d (trampoline + code)\0A\00", align 1
@.str.11 = private unnamed_addr constant [57 x i8] c"shm txt region start 0x%08lx, size 0x%08lx, end 0x%08lx\0A\00", align 1
@.str.12 = private unnamed_addr constant [57 x i8] c"RO data region start 0x%08lx, size 0x%08lx, end 0x%08lx\0A\00", align 1
@.str.13 = private unnamed_addr constant [86 x i8] c"NaClMemoryProtection: NaClMprotect(0x%08lx, 0x%08lx, 0x%x) failed, error %d (rodata)\0A\00", align 1
@.str.14 = private unnamed_addr constant [57 x i8] c"RW data region start 0x%08lx, size 0x%08lx, end 0x%08lx\0A\00", align 1
@.str.15 = private unnamed_addr constant [84 x i8] c"NaClMemoryProtection: NaClMprotect(0x%08lx, 0x%08lx, 0x%x) failed, error %d (data)\0A\00", align 1
@.str.16 = private unnamed_addr constant [58 x i8] c"RW stack region start 0x%08lx, size 0x%08lx, end 0x%08lx\0A\00", align 1
@.str.17 = private unnamed_addr constant [88 x i8] c"NaClMemoryProtection: NaClSysMmapIntern(nap,0x%08lx, 0x%08lx) failed, error %d (stack)\0A\00", align 1
@.str.18 = private unnamed_addr constant [71 x i8] c"NaClSysToUser: sysaddr 0x%08lx, mem_start 0x%08lx, addr space %d bits\0A\00", align 1
@.str.19 = private unnamed_addr constant [50 x i8] c"NaClUserToSys: uaddr 0x%08lx, addr space %d bits\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClAllocAddrSpaceAslr(%struct.NaClApp* nocapture, i32) local_unnamed_addr #0 {
  %3 = alloca i8*, align 8
  %4 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %3, align 8
  %5 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 0
  %6 = load i8, i8* %5, align 8
  %7 = zext i8 %6 to i64
  %8 = shl i64 1, %7
  tail call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i64 %8) #4
  %9 = load i8, i8* %5, align 8
  %10 = zext i8 %9 to i64
  %11 = shl i64 1, %10
  %12 = call i32 @NaClAllocateSpaceAslr(i8** nonnull %3, i64 %11, i32 %1) #4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %65

14:                                               ; preds = %2
  %15 = bitcast i8** %3 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 3
  store i64 %16, i64* %17, align 8
  call void (i32, i8*, ...) @NaClLog(i32 -1, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i64 %16) #4
  %18 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 12
  %19 = load i64, i64* %18, align 8
  %20 = add i64 %19, 65535
  %21 = and i64 %20, -65536
  %22 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = load i8, i8* %5, align 8
  %25 = zext i8 %24 to i64
  %26 = lshr i64 %23, %25
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %14
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0)) #4
  %29 = load i8, i8* %5, align 8
  %30 = load i64, i64* %22, align 8
  %31 = zext i8 %29 to i64
  br label %32

32:                                               ; preds = %14, %28
  %33 = phi i64 [ %25, %14 ], [ %31, %28 ]
  %34 = phi i64 [ %23, %14 ], [ %30, %28 ]
  %35 = shl i64 1, %33
  %36 = sub i64 %35, %34
  %37 = and i64 %36, -65536
  %38 = icmp ult i64 %37, %21
  br i1 %38, label %65, label %39

39:                                               ; preds = %32
  %40 = sub i64 %37, %21
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %39
  call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.3, i64 0, i64 0)) #4
  br label %65

43:                                               ; preds = %39
  %44 = load i64, i64* %17, align 8
  %45 = add i64 %44, %21
  call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.4, i64 0, i64 0), i64 %45, i64 %40) #4
  %46 = load i64, i64* %17, align 8
  %47 = add i64 %46, %21
  %48 = inttoptr i64 %47 to i8*
  %49 = call i32 @NaClMadvise(i8* %48, i64 %40, i32 4) #4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %54, label %51

51:                                               ; preds = %43
  %52 = tail call i32* @__errno_location() #5
  %53 = load i32, i32* %52, align 4
  call void (i32, i8*, ...) @NaClLog(i32 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0), i32 %53) #4
  br label %65

54:                                               ; preds = %43
  %55 = load i64, i64* %17, align 8
  %56 = add i64 %55, %21
  call void (i32, i8*, ...) @NaClLog(i32 2, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.6, i64 0, i64 0), i64 %56, i64 %40) #4
  %57 = load i64, i64* %17, align 8
  %58 = add i64 %57, %21
  %59 = inttoptr i64 %58 to i8*
  %60 = call i32 @NaClMprotect(i8* %59, i64 %40, i32 0) #4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %65, label %62

62:                                               ; preds = %54
  %63 = tail call i32* @__errno_location() #5
  %64 = load i32, i32* %63, align 4
  call void (i32, i8*, ...) @NaClLog(i32 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i64 0, i64 0), i32 %64) #4
  br label %65

65:                                               ; preds = %42, %54, %32, %2, %62, %51
  %66 = phi i32 [ 37, %51 ], [ 36, %62 ], [ %12, %2 ], [ 24, %32 ], [ 0, %54 ], [ 0, %42 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #4
  ret i32 %66
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @NaClLog(i32, i8*, ...) local_unnamed_addr #2

declare i32 @NaClAllocateSpaceAslr(i8**, i64, i32) local_unnamed_addr #2

declare i32 @NaClMadvise(i8*, i64, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #3

declare i32 @NaClMprotect(i8*, i64, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClAllocAddrSpace(%struct.NaClApp* nocapture) local_unnamed_addr #0 {
  %2 = tail call i32 @NaClAllocAddrSpaceAslr(%struct.NaClApp* %0, i32 1)
  ret i32 %2
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClMemoryProtection(%struct.NaClApp*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 3
  %3 = load i64, i64* %2, align 8
  tail call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.8, i64 0, i64 0), i64 %3) #4
  %4 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 23
  tail call void @NaClVmmapAdd(%struct.NaClVmmap* %4, i64 0, i64 16, i32 0, i32 2, %struct.NaClDesc* null, i64 0, i64 0) #4
  %5 = load i64, i64* %2, align 8
  %6 = add i64 %5, 65536
  %7 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 7
  %8 = load i64, i64* %7, align 8
  %9 = add i64 %8, -61441
  %10 = and i64 %9, -4096
  %11 = add i64 %10, %6
  tail call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.9, i64 0, i64 0), i64 %6, i64 %10, i64 %11) #4
  %12 = inttoptr i64 %6 to i8*
  %13 = tail call i32 @NaClMprotect(i8* %12, i64 %10, i32 5) #4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %16, label %15

15:                                               ; preds = %1
  tail call void (i32, i8*, ...) @NaClLog(i32 -3, i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.10, i64 0, i64 0), i64 %6, i64 %10, i32 5, i32 %13) #4
  br label %213

16:                                               ; preds = %1
  %17 = load i64, i64* %2, align 8
  %18 = icmp ugt i64 %17, %6
  %19 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 0
  %20 = load i8, i8* %19, align 8
  br i1 %18, label %26, label %21

21:                                               ; preds = %16
  %22 = zext i8 %20 to i64
  %23 = shl i64 1, %22
  %24 = add i64 %23, %17
  %25 = icmp ugt i64 %24, %6
  br i1 %25, label %29, label %26

26:                                               ; preds = %21, %16
  %27 = zext i8 %20 to i32
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.18, i64 0, i64 0), i64 %6, i64 %17, i32 %27) #4
  %28 = load i64, i64* %2, align 8
  br label %29

29:                                               ; preds = %21, %26
  %30 = phi i64 [ %17, %21 ], [ %28, %26 ]
  %31 = sub i64 %6, %30
  %32 = lshr i64 %31, 12
  %33 = lshr i64 %9, 12
  tail call void @NaClVmmapAdd(%struct.NaClVmmap* %4, i64 %32, i64 %33, i32 5, i32 2, %struct.NaClDesc* null, i64 0, i64 0) #4
  %34 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 8
  %35 = load i64, i64* %34, align 8
  %36 = icmp eq i64 %35, 0
  %37 = load i8, i8* %19, align 8
  br i1 %36, label %42, label %38

38:                                               ; preds = %29
  %39 = zext i8 %37 to i64
  %40 = lshr i64 %35, %39
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %45, label %42

42:                                               ; preds = %38, %29
  %43 = zext i8 %37 to i32
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.19, i64 0, i64 0), i64 %35, i32 %43) #4
  %44 = load i64, i64* %34, align 8
  br label %45

45:                                               ; preds = %38, %42
  %46 = phi i64 [ %35, %38 ], [ %44, %42 ]
  %47 = load i64, i64* %2, align 8
  %48 = add i64 %47, %35
  %49 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 9
  %50 = load i64, i64* %49, align 8
  %51 = sub i64 %50, %46
  %52 = add i64 %51, %48
  tail call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.11, i64 0, i64 0), i64 %48, i64 %51, i64 %52) #4
  %53 = icmp eq i64 %51, 0
  br i1 %53, label %73, label %54

54:                                               ; preds = %45
  %55 = load i64, i64* %2, align 8
  %56 = icmp ugt i64 %55, %48
  %57 = load i8, i8* %19, align 8
  br i1 %56, label %63, label %58

58:                                               ; preds = %54
  %59 = zext i8 %57 to i64
  %60 = shl i64 1, %59
  %61 = add i64 %60, %55
  %62 = icmp ugt i64 %61, %48
  br i1 %62, label %66, label %63

63:                                               ; preds = %58, %54
  %64 = zext i8 %57 to i32
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.18, i64 0, i64 0), i64 %48, i64 %55, i32 %64) #4
  %65 = load i64, i64* %2, align 8
  br label %66

66:                                               ; preds = %58, %63
  %67 = phi i64 [ %55, %58 ], [ %65, %63 ]
  %68 = sub i64 %48, %67
  %69 = lshr i64 %68, 12
  %70 = lshr i64 %51, 12
  %71 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 28
  %72 = load %struct.NaClDesc*, %struct.NaClDesc** %71, align 8
  tail call void @NaClVmmapAdd(%struct.NaClVmmap* %4, i64 %69, i64 %70, i32 5, i32 2, %struct.NaClDesc* %72, i64 0, i64 %51) #4
  br label %73

73:                                               ; preds = %45, %66
  %74 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 10
  %75 = load i64, i64* %74, align 8
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %138, label %77

77:                                               ; preds = %73
  %78 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 11
  %79 = load i64, i64* %78, align 8
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %83, label %81

81:                                               ; preds = %77
  %82 = and i64 %79, -65536
  br label %86

83:                                               ; preds = %77
  %84 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 47
  %85 = load i64, i64* %84, align 8
  br label %86

86:                                               ; preds = %81, %83
  %87 = phi i64 [ %82, %81 ], [ %85, %83 ]
  %88 = load i8, i8* %19, align 8
  %89 = zext i8 %88 to i64
  %90 = lshr i64 %75, %89
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %95, label %92

92:                                               ; preds = %86
  %93 = zext i8 %88 to i32
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.19, i64 0, i64 0), i64 %75, i32 %93) #4
  %94 = load i8, i8* %19, align 8
  br label %95

95:                                               ; preds = %86, %92
  %96 = phi i8 [ %88, %86 ], [ %94, %92 ]
  %97 = load i64, i64* %2, align 8
  %98 = add i64 %97, %75
  %99 = add i64 %87, 65535
  %100 = and i64 %99, -65536
  %101 = icmp ugt i64 %97, %98
  br i1 %101, label %107, label %102

102:                                              ; preds = %95
  %103 = zext i8 %96 to i64
  %104 = shl i64 1, %103
  %105 = add i64 %104, %97
  %106 = icmp ugt i64 %105, %98
  br i1 %106, label %110, label %107

107:                                              ; preds = %102, %95
  %108 = zext i8 %96 to i32
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.18, i64 0, i64 0), i64 %98, i64 %97, i32 %108) #4
  %109 = load i64, i64* %2, align 8
  br label %110

110:                                              ; preds = %102, %107
  %111 = phi i64 [ %97, %102 ], [ %109, %107 ]
  %112 = or i64 %100, 4095
  %113 = sub i64 %112, %98
  %114 = add i64 %113, %111
  %115 = and i64 %114, -4096
  %116 = add i64 %115, %98
  tail call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.12, i64 0, i64 0), i64 %98, i64 %115, i64 %116) #4
  %117 = inttoptr i64 %98 to i8*
  %118 = tail call i32 @NaClMprotect(i8* %117, i64 %115, i32 1) #4
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %121, label %120

120:                                              ; preds = %110
  tail call void (i32, i8*, ...) @NaClLog(i32 -3, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @.str.13, i64 0, i64 0), i64 %98, i64 %115, i32 1, i32 %118) #4
  br label %213

121:                                              ; preds = %110
  %122 = load i64, i64* %2, align 8
  %123 = icmp ugt i64 %122, %98
  %124 = load i8, i8* %19, align 8
  br i1 %123, label %130, label %125

125:                                              ; preds = %121
  %126 = zext i8 %124 to i64
  %127 = shl i64 1, %126
  %128 = add i64 %127, %122
  %129 = icmp ugt i64 %128, %98
  br i1 %129, label %133, label %130

130:                                              ; preds = %125, %121
  %131 = zext i8 %124 to i32
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.18, i64 0, i64 0), i64 %98, i64 %122, i32 %131) #4
  %132 = load i64, i64* %2, align 8
  br label %133

133:                                              ; preds = %125, %130
  %134 = phi i64 [ %122, %125 ], [ %132, %130 ]
  %135 = sub i64 %98, %134
  %136 = lshr i64 %135, 12
  %137 = lshr i64 %114, 12
  tail call void @NaClVmmapAdd(%struct.NaClVmmap* %4, i64 %136, i64 %137, i32 1, i32 2, %struct.NaClDesc* null, i64 0, i64 0) #4
  br label %138

138:                                              ; preds = %133, %73
  %139 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 11
  %140 = load i64, i64* %139, align 8
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %198, label %142

142:                                              ; preds = %138
  %143 = and i64 %140, -65536
  %144 = icmp eq i64 %143, 0
  %145 = load i8, i8* %19, align 8
  br i1 %144, label %150, label %146

146:                                              ; preds = %142
  %147 = zext i8 %145 to i64
  %148 = lshr i64 %143, %147
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %153, label %150

150:                                              ; preds = %146, %142
  %151 = zext i8 %145 to i32
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.19, i64 0, i64 0), i64 %143, i32 %151) #4
  %152 = load i8, i8* %19, align 8
  br label %153

153:                                              ; preds = %146, %150
  %154 = phi i8 [ %145, %146 ], [ %152, %150 ]
  %155 = load i64, i64* %2, align 8
  %156 = add i64 %155, %143
  %157 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 12
  %158 = load i64, i64* %157, align 8
  %159 = add i64 %158, 65535
  %160 = and i64 %159, -65536
  %161 = icmp ugt i64 %155, %156
  br i1 %161, label %167, label %162

162:                                              ; preds = %153
  %163 = zext i8 %154 to i64
  %164 = shl i64 1, %163
  %165 = add i64 %164, %155
  %166 = icmp ugt i64 %165, %156
  br i1 %166, label %170, label %167

167:                                              ; preds = %162, %153
  %168 = zext i8 %154 to i32
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.18, i64 0, i64 0), i64 %156, i64 %155, i32 %168) #4
  %169 = load i64, i64* %2, align 8
  br label %170

170:                                              ; preds = %162, %167
  %171 = phi i64 [ %155, %162 ], [ %169, %167 ]
  %172 = sub i64 4095, %156
  %173 = add i64 %172, %160
  %174 = add i64 %173, %171
  %175 = and i64 %174, -4096
  %176 = add i64 %175, %156
  tail call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.14, i64 0, i64 0), i64 %156, i64 %175, i64 %176) #4
  %177 = inttoptr i64 %156 to i8*
  %178 = tail call i32 @NaClMprotect(i8* %177, i64 %175, i32 3) #4
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %181, label %180

180:                                              ; preds = %170
  tail call void (i32, i8*, ...) @NaClLog(i32 -3, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.15, i64 0, i64 0), i64 %156, i64 %175, i32 3, i32 %178) #4
  br label %213

181:                                              ; preds = %170
  %182 = load i64, i64* %2, align 8
  %183 = icmp ugt i64 %182, %156
  %184 = load i8, i8* %19, align 8
  br i1 %183, label %190, label %185

185:                                              ; preds = %181
  %186 = zext i8 %184 to i64
  %187 = shl i64 1, %186
  %188 = add i64 %187, %182
  %189 = icmp ugt i64 %188, %156
  br i1 %189, label %193, label %190

190:                                              ; preds = %185, %181
  %191 = zext i8 %184 to i32
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.18, i64 0, i64 0), i64 %156, i64 %182, i32 %191) #4
  %192 = load i64, i64* %2, align 8
  br label %193

193:                                              ; preds = %185, %190
  %194 = phi i64 [ %182, %185 ], [ %192, %190 ]
  %195 = sub i64 %156, %194
  %196 = lshr i64 %195, 12
  %197 = lshr i64 %174, 12
  tail call void @NaClVmmapAdd(%struct.NaClVmmap* %4, i64 %196, i64 %197, i32 3, i32 2, %struct.NaClDesc* null, i64 0, i64 0) #4
  br label %198

198:                                              ; preds = %138, %193
  %199 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 1
  %200 = load i64, i64* %199, align 8
  %201 = load i8, i8* %19, align 8
  %202 = zext i8 %201 to i64
  %203 = shl i64 1, %202
  %204 = sub i64 %203, %200
  %205 = and i64 %204, -65536
  %206 = add i64 %205, %200
  tail call void (i32, i8*, ...) @NaClLog(i32 3, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.16, i64 0, i64 0), i64 %205, i64 %200, i64 %206) #4
  %207 = getelementptr inbounds %struct.NaClApp, %struct.NaClApp* %0, i64 0, i32 17
  tail call void @NaClXMutexUnlock(%struct.NaClMutex* %207) #4
  %208 = trunc i64 %205 to i32
  %209 = inttoptr i64 %205 to i8*
  %210 = tail call i32 @NaClSysMmapIntern(%struct.NaClApp* %0, i8* %209, i64 %200, i32 3, i32 50, i32 -1, i64 0) #4
  %211 = icmp eq i32 %210, %208
  tail call void @NaClXMutexLock(%struct.NaClMutex* %207) #4
  br i1 %211, label %213, label %212

212:                                              ; preds = %198
  tail call void (i32, i8*, ...) @NaClLog(i32 -3, i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.17, i64 0, i64 0), i64 %205, i64 %200, i32 %210) #4
  br label %213

213:                                              ; preds = %198, %120, %212, %180, %15
  %214 = phi i32 [ 36, %15 ], [ 36, %180 ], [ 36, %212 ], [ 36, %120 ], [ 0, %198 ]
  ret i32 %214
}

declare void @NaClVmmapAdd(%struct.NaClVmmap*, i64, i64, i32, i32, %struct.NaClDesc*, i64, i64) local_unnamed_addr #2

declare void @NaClXMutexUnlock(%struct.NaClMutex*) local_unnamed_addr #2

declare i32 @NaClSysMmapIntern(%struct.NaClApp*, i8*, i64, i32, i32, i32, i64) local_unnamed_addr #2

declare void @NaClXMutexLock(%struct.NaClMutex*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NaClAllocateSpace(i8**, i64) local_unnamed_addr #0 {
  %3 = tail call i32 @NaClAllocateSpaceAslr(i8** %0, i64 %1, i32 1) #4
  ret i32 %3
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
