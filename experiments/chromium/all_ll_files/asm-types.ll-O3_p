; ModuleID = '../../v8/src/asmjs/asm-types.cc'
source_filename = "../../v8/src/asmjs/asm-types.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::wasm::AsmCallableType" = type { i32 (...)** }
%"class.v8::internal::wasm::AsmType" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.v8::internal::wasm::AsmFunctionType" = type { %"class.v8::internal::wasm::AsmCallableType", %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::ZoneVector" }
%"class.v8::internal::ZoneVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.v8::internal::wasm::AsmType"**, %"class.v8::internal::wasm::AsmType"**, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2", %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.v8::internal::wasm::AsmType"** }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.v8::internal::ZoneAllocator" }
%"class.v8::internal::ZoneAllocator" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.8" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type opaque
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::wasm::(anonymous namespace)::AsmFroundType" = type { %"class.v8::internal::wasm::AsmCallableType" }
%"class.v8::internal::wasm::(anonymous namespace)::AsmMinMaxType" = type { %"class.v8::internal::wasm::AsmCallableType", %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"* }
%"class.v8::internal::wasm::AsmOverloadedFunctionType" = type { %"class.v8::internal::wasm::AsmCallableType", %"class.v8::internal::ZoneVector" }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN2v88internal4wasm15AsmCallableType14AsFunctionTypeEv = comdat any

$_ZN2v88internal4wasm15AsmCallableType24AsOverloadedFunctionTypeEv = comdat any

$_ZN2v88internal4wasm15AsmCallableTypeD0Ev = comdat any

$_ZN2v88internal4wasm15AsmFunctionType14AsFunctionTypeEv = comdat any

$_ZN2v88internal4wasm15AsmFunctionTypeD2Ev = comdat any

$_ZN2v88internal4wasm15AsmFunctionTypeD0Ev = comdat any

$_ZN2v88internal4wasm25AsmOverloadedFunctionType24AsOverloadedFunctionTypeEv = comdat any

$_ZN2v88internal4wasm25AsmOverloadedFunctionTypeD2Ev = comdat any

$_ZN2v88internal4wasm25AsmOverloadedFunctionTypeD0Ev = comdat any

$_ZN2v88internal4wasm15AsmCallableTypeD2Ev = comdat any

@.str.1 = private unnamed_addr constant [17 x i8] c"floatish|double?\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"float?|double?\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"extern\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"double?\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"double\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"intish\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.9 = private unnamed_addr constant [7 x i8] c"signed\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"fixnum\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c"float?\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15 = private unnamed_addr constant [11 x i8] c"Uint8Array\00", align 1
@.str.16 = private unnamed_addr constant [10 x i8] c"Int8Array\00", align 1
@.str.17 = private unnamed_addr constant [12 x i8] c"Uint16Array\00", align 1
@.str.18 = private unnamed_addr constant [11 x i8] c"Int16Array\00", align 1
@.str.19 = private unnamed_addr constant [12 x i8] c"Uint32Array\00", align 1
@.str.20 = private unnamed_addr constant [11 x i8] c"Int32Array\00", align 1
@.str.21 = private unnamed_addr constant [13 x i8] c"Float32Array\00", align 1
@.str.22 = private unnamed_addr constant [13 x i8] c"Float64Array\00", align 1
@.str.23 = private unnamed_addr constant [7 x i8] c"<none>\00", align 1
@.str.24 = private unnamed_addr constant [17 x i8] c"unreachable code\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.27 = private unnamed_addr constant [6 x i8] c") -> \00", align 1
@.str.28 = private unnamed_addr constant [5 x i8] c" /\5C \00", align 1
@_ZTVN2v88internal4wasm15AsmCallableTypeE = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.v8::internal::wasm::AsmFunctionType"* (%"class.v8::internal::wasm::AsmCallableType"*)* @_ZN2v88internal4wasm15AsmCallableType14AsFunctionTypeEv to i8*), i8* bitcast (%"class.v8::internal::wasm::AsmOverloadedFunctionType"* (%"class.v8::internal::wasm::AsmCallableType"*)* @_ZN2v88internal4wasm15AsmCallableType24AsOverloadedFunctionTypeEv to i8*), i8* bitcast (void (%"class.v8::internal::wasm::AsmCallableType"*)* @_ZN2v88internal4wasm15AsmCallableTypeD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::wasm::AsmCallableType"*)* @_ZN2v88internal4wasm15AsmCallableTypeD0Ev to i8*), i8* bitcast (i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)* @_ZN2v88internal4wasm15AsmCallableType3IsAEPNS1_7AsmTypeE to i8*)] }, align 8
@_ZTVN2v88internal4wasm15AsmFunctionTypeE = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.v8::internal::wasm::AsmFunctionType"*)* @_ZN2v88internal4wasm15AsmFunctionType4NameEv to i8*), i8* bitcast (i1 (%"class.v8::internal::wasm::AsmFunctionType"*, %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::ZoneVector"*)* @_ZN2v88internal4wasm15AsmFunctionType16CanBeInvokedWithEPNS1_7AsmTypeERKNS0_10ZoneVectorIS4_EE to i8*), i8* bitcast (%"class.v8::internal::wasm::AsmFunctionType"* (%"class.v8::internal::wasm::AsmFunctionType"*)* @_ZN2v88internal4wasm15AsmFunctionType14AsFunctionTypeEv to i8*), i8* bitcast (%"class.v8::internal::wasm::AsmOverloadedFunctionType"* (%"class.v8::internal::wasm::AsmCallableType"*)* @_ZN2v88internal4wasm15AsmCallableType24AsOverloadedFunctionTypeEv to i8*), i8* bitcast (void (%"class.v8::internal::wasm::AsmFunctionType"*)* @_ZN2v88internal4wasm15AsmFunctionTypeD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::wasm::AsmFunctionType"*)* @_ZN2v88internal4wasm15AsmFunctionTypeD0Ev to i8*), i8* bitcast (i1 (%"class.v8::internal::wasm::AsmFunctionType"*, %"class.v8::internal::wasm::AsmType"*)* @_ZN2v88internal4wasm15AsmFunctionType3IsAEPNS1_7AsmTypeE to i8*)] }, align 8
@_ZTVN2v88internal4wasm25AsmOverloadedFunctionTypeE = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.v8::internal::wasm::AsmOverloadedFunctionType"*)* @_ZN2v88internal4wasm25AsmOverloadedFunctionType4NameEv to i8*), i8* bitcast (i1 (%"class.v8::internal::wasm::AsmOverloadedFunctionType"*, %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::ZoneVector"*)* @_ZN2v88internal4wasm25AsmOverloadedFunctionType16CanBeInvokedWithEPNS1_7AsmTypeERKNS0_10ZoneVectorIS4_EE to i8*), i8* bitcast (%"class.v8::internal::wasm::AsmFunctionType"* (%"class.v8::internal::wasm::AsmCallableType"*)* @_ZN2v88internal4wasm15AsmCallableType14AsFunctionTypeEv to i8*), i8* bitcast (%"class.v8::internal::wasm::AsmOverloadedFunctionType"* (%"class.v8::internal::wasm::AsmOverloadedFunctionType"*)* @_ZN2v88internal4wasm25AsmOverloadedFunctionType24AsOverloadedFunctionTypeEv to i8*), i8* bitcast (void (%"class.v8::internal::wasm::AsmOverloadedFunctionType"*)* @_ZN2v88internal4wasm25AsmOverloadedFunctionTypeD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::wasm::AsmOverloadedFunctionType"*)* @_ZN2v88internal4wasm25AsmOverloadedFunctionTypeD0Ev to i8*), i8* bitcast (i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)* @_ZN2v88internal4wasm15AsmCallableType3IsAEPNS1_7AsmTypeE to i8*)] }, align 8
@_ZTVN2v88internal4wasm12_GLOBAL__N_113AsmFroundTypeE = internal unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.v8::internal::wasm::(anonymous namespace)::AsmFroundType"*)* @_ZN2v88internal4wasm12_GLOBAL__N_113AsmFroundType4NameEv to i8*), i8* bitcast (i1 (%"class.v8::internal::wasm::(anonymous namespace)::AsmFroundType"*, %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::ZoneVector"*)* @_ZN2v88internal4wasm12_GLOBAL__N_113AsmFroundType16CanBeInvokedWithEPNS1_7AsmTypeERKNS0_10ZoneVectorIS5_EE to i8*), i8* bitcast (%"class.v8::internal::wasm::AsmFunctionType"* (%"class.v8::internal::wasm::AsmCallableType"*)* @_ZN2v88internal4wasm15AsmCallableType14AsFunctionTypeEv to i8*), i8* bitcast (%"class.v8::internal::wasm::AsmOverloadedFunctionType"* (%"class.v8::internal::wasm::AsmCallableType"*)* @_ZN2v88internal4wasm15AsmCallableType24AsOverloadedFunctionTypeEv to i8*), i8* bitcast (void (%"class.v8::internal::wasm::AsmCallableType"*)* @_ZN2v88internal4wasm15AsmCallableTypeD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::wasm::(anonymous namespace)::AsmFroundType"*)* @_ZN2v88internal4wasm12_GLOBAL__N_113AsmFroundTypeD0Ev to i8*), i8* bitcast (i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)* @_ZN2v88internal4wasm15AsmCallableType3IsAEPNS1_7AsmTypeE to i8*)] }, align 8
@.str.30 = private unnamed_addr constant [7 x i8] c"fround\00", align 1
@_ZTVN2v88internal4wasm12_GLOBAL__N_113AsmMinMaxTypeE = internal unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.v8::internal::wasm::(anonymous namespace)::AsmMinMaxType"*)* @_ZN2v88internal4wasm12_GLOBAL__N_113AsmMinMaxType4NameEv to i8*), i8* bitcast (i1 (%"class.v8::internal::wasm::(anonymous namespace)::AsmMinMaxType"*, %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::ZoneVector"*)* @_ZN2v88internal4wasm12_GLOBAL__N_113AsmMinMaxType16CanBeInvokedWithEPNS1_7AsmTypeERKNS0_10ZoneVectorIS5_EE to i8*), i8* bitcast (%"class.v8::internal::wasm::AsmFunctionType"* (%"class.v8::internal::wasm::AsmCallableType"*)* @_ZN2v88internal4wasm15AsmCallableType14AsFunctionTypeEv to i8*), i8* bitcast (%"class.v8::internal::wasm::AsmOverloadedFunctionType"* (%"class.v8::internal::wasm::AsmCallableType"*)* @_ZN2v88internal4wasm15AsmCallableType24AsOverloadedFunctionTypeEv to i8*), i8* bitcast (void (%"class.v8::internal::wasm::AsmCallableType"*)* @_ZN2v88internal4wasm15AsmCallableTypeD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::wasm::(anonymous namespace)::AsmMinMaxType"*)* @_ZN2v88internal4wasm12_GLOBAL__N_113AsmMinMaxTypeD0Ev to i8*), i8* bitcast (i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)* @_ZN2v88internal4wasm15AsmCallableType3IsAEPNS1_7AsmTypeE to i8*)] }, align 8
@.str.31 = private unnamed_addr constant [9 x i8] c"...) -> \00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %"class.v8::internal::wasm::AsmCallableType"* @_ZN2v88internal4wasm7AsmType14AsCallableTypeEv(%"class.v8::internal::wasm::AsmType"*) local_unnamed_addr #0 align 2 {
  %2 = ptrtoint %"class.v8::internal::wasm::AsmType"* %0 to i64
  %3 = and i64 %2, 1
  %4 = icmp eq i64 %3, 0
  %5 = bitcast %"class.v8::internal::wasm::AsmType"* %0 to %"class.v8::internal::wasm::AsmCallableType"*
  %6 = select i1 %4, %"class.v8::internal::wasm::AsmCallableType"* %5, %"class.v8::internal::wasm::AsmCallableType"* null
  ret %"class.v8::internal::wasm::AsmCallableType"* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm7AsmType4NameEv(%"class.std::__1::basic_string"* noalias sret, %"class.v8::internal::wasm::AsmType"*) local_unnamed_addr #1 align 2 {
  %3 = ptrtoint %"class.v8::internal::wasm::AsmType"* %1 to i64
  %4 = and i64 %3, 1
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %135, label %6

6:                                                ; preds = %2
  %7 = trunc i64 %3 to i32
  %8 = and i32 %7, -2
  switch i32 %8, label %134 [
    i32 2, label %9
    i32 4, label %15
    i32 8, label %21
    i32 16, label %26
    i32 32, label %32
    i32 76, label %37
    i32 236, label %42
    i32 256, label %47
    i32 768, label %52
    i32 1824, label %57
    i32 2816, label %62
    i32 7968, label %68
    i32 8196, label %73
    i32 24588, label %79
    i32 57356, label %84
    i32 65538, label %89
    i32 131074, label %94
    i32 262146, label %99
    i32 524290, label %104
    i32 1048578, label %109
    i32 2097154, label %114
    i32 4194306, label %119
    i32 8388610, label %124
    i32 -2147483648, label %129
  ]

9:                                                ; preds = %6
  %10 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  store i8 2, i8* %11, align 1
  %12 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %13 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  store i16 23899, i16* %13, align 8
  %14 = getelementptr inbounds i8, i8* %12, i64 2
  store i8 0, i8* %14, align 2
  br label %140

15:                                               ; preds = %6
  %16 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %16, i64 0, i32 1, i32 0
  store i8 16, i8* %17, align 1
  %18 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 1 getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i64 16, i1 false) #8
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %20 = bitcast i64* %19 to i8*
  store i8 0, i8* %20, align 8
  br label %140

21:                                               ; preds = %6
  %22 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %22, i64 0, i32 1, i32 0
  store i8 14, i8* %23, align 1
  %24 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 1 getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i64 14, i1 false) #8
  %25 = getelementptr inbounds i8, i8* %24, i64 14
  store i8 0, i8* %25, align 2
  br label %140

26:                                               ; preds = %6
  %27 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %28 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %27, i64 0, i32 1, i32 0
  store i8 4, i8* %28, align 1
  %29 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %30 = bitcast %"class.std::__1::basic_string"* %0 to i32*
  store i32 1684631414, i32* %30, align 8
  %31 = getelementptr inbounds i8, i8* %29, i64 4
  store i8 0, i8* %31, align 4
  br label %140

32:                                               ; preds = %6
  %33 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %34 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %33, i64 0, i32 1, i32 0
  store i8 6, i8* %34, align 1
  %35 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i64 6, i1 false) #8
  %36 = getelementptr inbounds i8, i8* %35, i64 6
  store i8 0, i8* %36, align 2
  br label %140

37:                                               ; preds = %6
  %38 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %39 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %38, i64 0, i32 1, i32 0
  store i8 7, i8* %39, align 1
  %40 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0), i64 7, i1 false) #8
  %41 = getelementptr inbounds i8, i8* %40, i64 7
  store i8 0, i8* %41, align 1
  br label %140

42:                                               ; preds = %6
  %43 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %44 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %43, i64 0, i32 1, i32 0
  store i8 6, i8* %44, align 1
  %45 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %45, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i64 6, i1 false) #8
  %46 = getelementptr inbounds i8, i8* %45, i64 6
  store i8 0, i8* %46, align 2
  br label %140

47:                                               ; preds = %6
  %48 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  store i8 6, i8* %49, align 1
  %50 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0), i64 6, i1 false) #8
  %51 = getelementptr inbounds i8, i8* %50, i64 6
  store i8 0, i8* %51, align 2
  br label %140

52:                                               ; preds = %6
  %53 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %54 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %53, i64 0, i32 1, i32 0
  store i8 3, i8* %54, align 1
  %55 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %55, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i64 3, i1 false) #8
  %56 = getelementptr inbounds i8, i8* %55, i64 3
  store i8 0, i8* %56, align 1
  br label %140

57:                                               ; preds = %6
  %58 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %59 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %58, i64 0, i32 1, i32 0
  store i8 6, i8* %59, align 1
  %60 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i64 0, i64 0), i64 6, i1 false) #8
  %61 = getelementptr inbounds i8, i8* %60, i64 6
  store i8 0, i8* %61, align 2
  br label %140

62:                                               ; preds = %6
  %63 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %64 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %63, i64 0, i32 1, i32 0
  store i8 8, i8* %64, align 1
  %65 = bitcast %"class.std::__1::basic_string"* %0 to i64*
  store i64 7234309766870429301, i64* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %67 = bitcast i64* %66 to i8*
  store i8 0, i8* %67, align 8
  br label %140

68:                                               ; preds = %6
  %69 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %70 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %69, i64 0, i32 1, i32 0
  store i8 6, i8* %70, align 1
  %71 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %71, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i64 0, i64 0), i64 6, i1 false) #8
  %72 = getelementptr inbounds i8, i8* %71, i64 6
  store i8 0, i8* %72, align 2
  br label %140

73:                                               ; preds = %6
  %74 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %75 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %74, i64 0, i32 1, i32 0
  store i8 8, i8* %75, align 1
  %76 = bitcast %"class.std::__1::basic_string"* %0 to i64*
  store i64 7526475350838045798, i64* %76, align 8
  %77 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %78 = bitcast i64* %77 to i8*
  store i8 0, i8* %78, align 8
  br label %140

79:                                               ; preds = %6
  %80 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %81 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %80, i64 0, i32 1, i32 0
  store i8 6, i8* %81, align 1
  %82 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i64 0, i64 0), i64 6, i1 false) #8
  %83 = getelementptr inbounds i8, i8* %82, i64 6
  store i8 0, i8* %83, align 2
  br label %140

84:                                               ; preds = %6
  %85 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %86 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %85, i64 0, i32 1, i32 0
  store i8 5, i8* %86, align 1
  %87 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %87, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 0), i64 5, i1 false) #8
  %88 = getelementptr inbounds i8, i8* %87, i64 5
  store i8 0, i8* %88, align 1
  br label %140

89:                                               ; preds = %6
  %90 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %91 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %90, i64 0, i32 1, i32 0
  store i8 10, i8* %91, align 1
  %92 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 1 getelementptr inbounds ([11 x i8], [11 x i8]* @.str.15, i64 0, i64 0), i64 10, i1 false) #8
  %93 = getelementptr inbounds i8, i8* %92, i64 10
  store i8 0, i8* %93, align 2
  br label %140

94:                                               ; preds = %6
  %95 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %96 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %95, i64 0, i32 1, i32 0
  store i8 9, i8* %96, align 1
  %97 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %97, i8* align 1 getelementptr inbounds ([10 x i8], [10 x i8]* @.str.16, i64 0, i64 0), i64 9, i1 false) #8
  %98 = getelementptr inbounds i8, i8* %97, i64 9
  store i8 0, i8* %98, align 1
  br label %140

99:                                               ; preds = %6
  %100 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %101 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %100, i64 0, i32 1, i32 0
  store i8 11, i8* %101, align 1
  %102 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %102, i8* align 1 getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i64 0, i64 0), i64 11, i1 false) #8
  %103 = getelementptr inbounds i8, i8* %102, i64 11
  store i8 0, i8* %103, align 1
  br label %140

104:                                              ; preds = %6
  %105 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %106 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %105, i64 0, i32 1, i32 0
  store i8 10, i8* %106, align 1
  %107 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %107, i8* align 1 getelementptr inbounds ([11 x i8], [11 x i8]* @.str.18, i64 0, i64 0), i64 10, i1 false) #8
  %108 = getelementptr inbounds i8, i8* %107, i64 10
  store i8 0, i8* %108, align 2
  br label %140

109:                                              ; preds = %6
  %110 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %111 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %110, i64 0, i32 1, i32 0
  store i8 11, i8* %111, align 1
  %112 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %112, i8* align 1 getelementptr inbounds ([12 x i8], [12 x i8]* @.str.19, i64 0, i64 0), i64 11, i1 false) #8
  %113 = getelementptr inbounds i8, i8* %112, i64 11
  store i8 0, i8* %113, align 1
  br label %140

114:                                              ; preds = %6
  %115 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %116 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %115, i64 0, i32 1, i32 0
  store i8 10, i8* %116, align 1
  %117 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 1 getelementptr inbounds ([11 x i8], [11 x i8]* @.str.20, i64 0, i64 0), i64 10, i1 false) #8
  %118 = getelementptr inbounds i8, i8* %117, i64 10
  store i8 0, i8* %118, align 2
  br label %140

119:                                              ; preds = %6
  %120 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %121 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %120, i64 0, i32 1, i32 0
  store i8 12, i8* %121, align 1
  %122 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %122, i8* align 1 getelementptr inbounds ([13 x i8], [13 x i8]* @.str.21, i64 0, i64 0), i64 12, i1 false) #8
  %123 = getelementptr inbounds i8, i8* %122, i64 12
  store i8 0, i8* %123, align 4
  br label %140

124:                                              ; preds = %6
  %125 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %126 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %125, i64 0, i32 1, i32 0
  store i8 12, i8* %126, align 1
  %127 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %127, i8* align 1 getelementptr inbounds ([13 x i8], [13 x i8]* @.str.22, i64 0, i64 0), i64 12, i1 false) #8
  %128 = getelementptr inbounds i8, i8* %127, i64 12
  store i8 0, i8* %128, align 4
  br label %140

129:                                              ; preds = %6
  %130 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %131 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %130, i64 0, i32 1, i32 0
  store i8 6, i8* %131, align 1
  %132 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %132, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @.str.23, i64 0, i64 0), i64 6, i1 false) #8
  %133 = getelementptr inbounds i8, i8* %132, i64 6
  store i8 0, i8* %133, align 2
  br label %140

134:                                              ; preds = %6
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.24, i64 0, i64 0)) #9
  unreachable

135:                                              ; preds = %2
  %136 = bitcast %"class.v8::internal::wasm::AsmType"* %1 to %"class.v8::internal::wasm::AsmCallableType"*
  %137 = bitcast %"class.v8::internal::wasm::AsmType"* %1 to void (%"class.std::__1::basic_string"*, %"class.v8::internal::wasm::AsmCallableType"*)***
  %138 = load void (%"class.std::__1::basic_string"*, %"class.v8::internal::wasm::AsmCallableType"*)**, void (%"class.std::__1::basic_string"*, %"class.v8::internal::wasm::AsmCallableType"*)*** %137, align 8
  %139 = load void (%"class.std::__1::basic_string"*, %"class.v8::internal::wasm::AsmCallableType"*)*, void (%"class.std::__1::basic_string"*, %"class.v8::internal::wasm::AsmCallableType"*)** %138, align 8
  tail call void %139(%"class.std::__1::basic_string"* sret %0, %"class.v8::internal::wasm::AsmCallableType"* %136) #8
  br label %140

140:                                              ; preds = %135, %129, %124, %119, %114, %109, %104, %99, %94, %89, %84, %79, %73, %68, %62, %57, %52, %47, %42, %37, %32, %26, %21, %15, %9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN2v88internal4wasm7AsmType9IsExactlyEPS2_S3_(%"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"*) local_unnamed_addr #0 align 2 {
  %3 = icmp eq %"class.v8::internal::wasm::AsmType"* %0, null
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = icmp eq %"class.v8::internal::wasm::AsmType"* %1, null
  br label %20

6:                                                ; preds = %2
  %7 = ptrtoint %"class.v8::internal::wasm::AsmType"* %0 to i64
  %8 = and i64 %7, 1
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %18, label %10

10:                                               ; preds = %6
  %11 = ptrtoint %"class.v8::internal::wasm::AsmType"* %1 to i64
  %12 = and i64 %11, 1
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %10
  %15 = xor i64 %7, %11
  %16 = trunc i64 %15 to i32
  %17 = icmp ult i32 %16, 2
  br label %20

18:                                               ; preds = %6
  %19 = icmp eq %"class.v8::internal::wasm::AsmType"* %0, %1
  br label %20

20:                                               ; preds = %18, %10, %14, %4
  %21 = phi i1 [ %5, %4 ], [ %19, %18 ], [ %17, %14 ], [ false, %10 ]
  ret i1 %21
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal4wasm7AsmType3IsAEPS2_(%"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"*) local_unnamed_addr #1 align 2 {
  %3 = ptrtoint %"class.v8::internal::wasm::AsmType"* %0 to i64
  %4 = and i64 %3, 1
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %16, label %6

6:                                                ; preds = %2
  %7 = ptrtoint %"class.v8::internal::wasm::AsmType"* %1 to i64
  %8 = and i64 %7, 1
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %26, label %10

10:                                               ; preds = %6
  %11 = trunc i64 %3 to i32
  %12 = trunc i64 %7 to i32
  %13 = and i32 %12, -2
  %14 = and i32 %13, %11
  %15 = icmp eq i32 %14, %13
  br label %26

16:                                               ; preds = %2
  %17 = icmp eq %"class.v8::internal::wasm::AsmType"* %0, null
  br i1 %17, label %25, label %18

18:                                               ; preds = %16
  %19 = bitcast %"class.v8::internal::wasm::AsmType"* %0 to %"class.v8::internal::wasm::AsmCallableType"*
  %20 = bitcast %"class.v8::internal::wasm::AsmType"* %0 to i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)***
  %21 = load i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)**, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)*** %20, align 8
  %22 = getelementptr inbounds i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)*, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)** %21, i64 6
  %23 = load i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)*, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)** %22, align 8
  %24 = tail call zeroext i1 %23(%"class.v8::internal::wasm::AsmCallableType"* nonnull %19, %"class.v8::internal::wasm::AsmType"* %1) #8
  br label %26

25:                                               ; preds = %16
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.24, i64 0, i64 0)) #9
  unreachable

26:                                               ; preds = %6, %10, %18
  %27 = phi i1 [ %24, %18 ], [ %15, %10 ], [ false, %6 ]
  ret i1 %27
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN2v88internal4wasm7AsmType18ElementSizeInBytesEv(%"class.v8::internal::wasm::AsmType"*) local_unnamed_addr #0 align 2 {
  %2 = ptrtoint %"class.v8::internal::wasm::AsmType"* %0 to i64
  %3 = and i64 %2, 1
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  %6 = trunc i64 %2 to i32
  %7 = and i32 %6, -2
  switch i32 %7, label %11 [
    i32 131074, label %12
    i32 65538, label %12
    i32 524290, label %8
    i32 262146, label %8
    i32 2097154, label %9
    i32 1048578, label %9
    i32 4194306, label %9
    i32 8388610, label %10
  ]

8:                                                ; preds = %5, %5
  br label %12

9:                                                ; preds = %5, %5, %5
  br label %12

10:                                               ; preds = %5
  br label %12

11:                                               ; preds = %5
  br label %12

12:                                               ; preds = %5, %5, %1, %11, %10, %9, %8
  %13 = phi i32 [ -1, %11 ], [ 8, %10 ], [ 4, %9 ], [ 2, %8 ], [ -1, %1 ], [ 1, %5 ], [ 1, %5 ]
  ret i32 %13
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %"class.v8::internal::wasm::AsmType"* @_ZN2v88internal4wasm7AsmType8LoadTypeEv(%"class.v8::internal::wasm::AsmType"*) local_unnamed_addr #0 align 2 {
  %2 = ptrtoint %"class.v8::internal::wasm::AsmType"* %0 to i64
  %3 = and i64 %2, 1
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = trunc i64 %2 to i32
  %7 = and i32 %6, -2
  switch i32 %7, label %10 [
    i32 131074, label %11
    i32 65538, label %11
    i32 524290, label %11
    i32 262146, label %11
    i32 2097154, label %11
    i32 1048578, label %11
    i32 4194306, label %8
    i32 8388610, label %9
  ]

8:                                                ; preds = %5
  br label %11

9:                                                ; preds = %5
  br label %11

10:                                               ; preds = %5
  br label %11

11:                                               ; preds = %5, %5, %5, %5, %5, %5, %1, %10, %9, %8
  %12 = phi %"class.v8::internal::wasm::AsmType"* [ inttoptr (i64 2147483649 to %"class.v8::internal::wasm::AsmType"*), %10 ], [ inttoptr (i64 77 to %"class.v8::internal::wasm::AsmType"*), %9 ], [ inttoptr (i64 24589 to %"class.v8::internal::wasm::AsmType"*), %8 ], [ inttoptr (i64 2147483649 to %"class.v8::internal::wasm::AsmType"*), %1 ], [ inttoptr (i64 257 to %"class.v8::internal::wasm::AsmType"*), %5 ], [ inttoptr (i64 257 to %"class.v8::internal::wasm::AsmType"*), %5 ], [ inttoptr (i64 257 to %"class.v8::internal::wasm::AsmType"*), %5 ], [ inttoptr (i64 257 to %"class.v8::internal::wasm::AsmType"*), %5 ], [ inttoptr (i64 257 to %"class.v8::internal::wasm::AsmType"*), %5 ], [ inttoptr (i64 257 to %"class.v8::internal::wasm::AsmType"*), %5 ]
  ret %"class.v8::internal::wasm::AsmType"* %12
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %"class.v8::internal::wasm::AsmType"* @_ZN2v88internal4wasm7AsmType9StoreTypeEv(%"class.v8::internal::wasm::AsmType"*) local_unnamed_addr #0 align 2 {
  %2 = ptrtoint %"class.v8::internal::wasm::AsmType"* %0 to i64
  %3 = and i64 %2, 1
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = trunc i64 %2 to i32
  %7 = and i32 %6, -2
  switch i32 %7, label %10 [
    i32 131074, label %11
    i32 65538, label %11
    i32 524290, label %11
    i32 262146, label %11
    i32 2097154, label %11
    i32 1048578, label %11
    i32 4194306, label %8
    i32 8388610, label %9
  ]

8:                                                ; preds = %5
  br label %11

9:                                                ; preds = %5
  br label %11

10:                                               ; preds = %5
  br label %11

11:                                               ; preds = %5, %5, %5, %5, %5, %5, %1, %10, %9, %8
  %12 = phi %"class.v8::internal::wasm::AsmType"* [ inttoptr (i64 2147483649 to %"class.v8::internal::wasm::AsmType"*), %10 ], [ inttoptr (i64 9 to %"class.v8::internal::wasm::AsmType"*), %9 ], [ inttoptr (i64 5 to %"class.v8::internal::wasm::AsmType"*), %8 ], [ inttoptr (i64 2147483649 to %"class.v8::internal::wasm::AsmType"*), %1 ], [ inttoptr (i64 257 to %"class.v8::internal::wasm::AsmType"*), %5 ], [ inttoptr (i64 257 to %"class.v8::internal::wasm::AsmType"*), %5 ], [ inttoptr (i64 257 to %"class.v8::internal::wasm::AsmType"*), %5 ], [ inttoptr (i64 257 to %"class.v8::internal::wasm::AsmType"*), %5 ], [ inttoptr (i64 257 to %"class.v8::internal::wasm::AsmType"*), %5 ], [ inttoptr (i64 257 to %"class.v8::internal::wasm::AsmType"*), %5 ]
  ret %"class.v8::internal::wasm::AsmType"* %12
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN2v88internal4wasm15AsmCallableType3IsAEPNS1_7AsmTypeE(%"class.v8::internal::wasm::AsmCallableType"* readnone, %"class.v8::internal::wasm::AsmType"*) unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.v8::internal::wasm::AsmType"* %1 to i64
  %4 = and i64 %3, 1
  %5 = icmp eq i64 %4, 0
  %6 = bitcast %"class.v8::internal::wasm::AsmType"* %1 to %"class.v8::internal::wasm::AsmCallableType"*
  %7 = select i1 %5, %"class.v8::internal::wasm::AsmCallableType"* %6, %"class.v8::internal::wasm::AsmCallableType"* null
  %8 = icmp eq %"class.v8::internal::wasm::AsmCallableType"* %7, %0
  ret i1 %8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm15AsmFunctionType4NameEv(%"class.std::__1::basic_string"* noalias sret, %"class.v8::internal::wasm::AsmFunctionType"* nocapture readonly) unnamed_addr #1 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #8
  %6 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0)) #8
  %7 = getelementptr inbounds %"class.v8::internal::wasm::AsmFunctionType", %"class.v8::internal::wasm::AsmFunctionType"* %1, i64 0, i32 2, i32 0
  %8 = getelementptr inbounds %"class.v8::internal::wasm::AsmFunctionType", %"class.v8::internal::wasm::AsmFunctionType"* %1, i64 0, i32 2, i32 0, i32 0, i32 1
  %9 = bitcast %"class.v8::internal::wasm::AsmType"*** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %7 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %10, %12
  br i1 %13, label %20, label %14

14:                                               ; preds = %2
  %15 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %16 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %16, i64 0, i32 1, i32 0
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  br label %42

20:                                               ; preds = %73, %2
  %21 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27, i64 0, i64 0)) #8
  %22 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #8
  %23 = getelementptr inbounds %"class.v8::internal::wasm::AsmFunctionType", %"class.v8::internal::wasm::AsmFunctionType"* %1, i64 0, i32 1
  %24 = load %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %23, align 8
  call void @_ZN2v88internal4wasm7AsmType4NameEv(%"class.std::__1::basic_string"* nonnull sret %4, %"class.v8::internal::wasm::AsmType"* %24)
  %25 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %26 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %25, i64 0, i32 1, i32 0
  %27 = load i8, i8* %26, align 1
  %28 = icmp slt i8 %27, 0
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = zext i8 %27 to i64
  %34 = select i1 %28, i8* %30, i8* %22
  %35 = select i1 %28, i64 %32, i64 %33
  %36 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %0, i8* %34, i64 %35) #8
  %37 = load i8, i8* %26, align 1
  %38 = icmp slt i8 %37, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %20
  %40 = load i8*, i8** %29, align 8
  call void @_ZdlPv(i8* %40) #10
  br label %41

41:                                               ; preds = %20, %39
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #8
  ret void

42:                                               ; preds = %14, %73
  %43 = phi i64 [ %12, %14 ], [ %75, %73 ]
  %44 = phi i64 [ 0, %14 ], [ %76, %73 ]
  %45 = inttoptr i64 %43 to %"class.v8::internal::wasm::AsmType"**
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #8
  %46 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %45, i64 %44
  %47 = load %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %46, align 8
  call void @_ZN2v88internal4wasm7AsmType4NameEv(%"class.std::__1::basic_string"* nonnull sret %3, %"class.v8::internal::wasm::AsmType"* %47)
  %48 = load i8, i8* %17, align 1
  %49 = icmp slt i8 %48, 0
  %50 = load i8*, i8** %18, align 8
  %51 = load i64, i64* %19, align 8
  %52 = zext i8 %48 to i64
  %53 = select i1 %49, i8* %50, i8* %15
  %54 = select i1 %49, i64 %51, i64 %52
  %55 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %0, i8* %53, i64 %54) #8
  %56 = load i8, i8* %17, align 1
  %57 = icmp slt i8 %56, 0
  br i1 %57, label %58, label %60

58:                                               ; preds = %42
  %59 = load i8*, i8** %18, align 8
  call void @_ZdlPv(i8* %59) #10
  br label %60

60:                                               ; preds = %42, %58
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #8
  %61 = load i64, i64* %9, align 8
  %62 = load i64, i64* %11, align 8
  %63 = sub i64 %61, %62
  %64 = ashr exact i64 %63, 3
  %65 = add nsw i64 %64, -1
  %66 = icmp eq i64 %44, %65
  br i1 %66, label %73, label %67

67:                                               ; preds = %60
  %68 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i64 0, i64 0)) #8
  %69 = load i64, i64* %9, align 8
  %70 = load i64, i64* %11, align 8
  %71 = sub i64 %69, %70
  %72 = ashr exact i64 %71, 3
  br label %73

73:                                               ; preds = %60, %67
  %74 = phi i64 [ %64, %60 ], [ %72, %67 ]
  %75 = phi i64 [ %62, %60 ], [ %70, %67 ]
  %76 = add nuw i64 %44, 1
  %77 = icmp ult i64 %76, %74
  br i1 %77, label %42, label %20
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::wasm::AsmType"* @_ZN2v88internal4wasm7AsmType10FroundTypeEPNS0_4ZoneE(%"class.v8::internal::Zone"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = sub i64 %5, %3
  %7 = icmp ult i64 %6, 8
  br i1 %7, label %8, label %10, !prof !2

8:                                                ; preds = %1
  %9 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 8) #8
  br label %12

10:                                               ; preds = %1
  %11 = add i64 %3, 8
  store i64 %11, i64* %2, align 8
  br label %12

12:                                               ; preds = %8, %10
  %13 = phi i64 [ %9, %8 ], [ %3, %10 ]
  %14 = inttoptr i64 %13 to %"class.v8::internal::wasm::(anonymous namespace)::AsmFroundType"*
  %15 = getelementptr inbounds %"class.v8::internal::wasm::(anonymous namespace)::AsmFroundType", %"class.v8::internal::wasm::(anonymous namespace)::AsmFroundType"* %14, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN2v88internal4wasm12_GLOBAL__N_113AsmFroundTypeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %15, align 8
  %16 = inttoptr i64 %13 to %"class.v8::internal::wasm::AsmType"*
  ret %"class.v8::internal::wasm::AsmType"* %16
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::wasm::AsmType"* @_ZN2v88internal4wasm7AsmType10MinMaxTypeEPNS0_4ZoneEPS2_S5_(%"class.v8::internal::Zone"*, %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"*) local_unnamed_addr #1 align 2 {
  %4 = ptrtoint %"class.v8::internal::wasm::AsmType"* %1 to i64
  %5 = ptrtoint %"class.v8::internal::wasm::AsmType"* %2 to i64
  %6 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %0, i64 0, i32 3
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %9, %7
  %11 = icmp ult i64 %10, 24
  br i1 %11, label %12, label %14, !prof !2

12:                                               ; preds = %3
  %13 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %0, i64 24) #8
  br label %16

14:                                               ; preds = %3
  %15 = add i64 %7, 24
  store i64 %15, i64* %6, align 8
  br label %16

16:                                               ; preds = %12, %14
  %17 = phi i64 [ %13, %12 ], [ %7, %14 ]
  %18 = inttoptr i64 %17 to %"class.v8::internal::wasm::(anonymous namespace)::AsmMinMaxType"*
  %19 = getelementptr inbounds %"class.v8::internal::wasm::(anonymous namespace)::AsmMinMaxType", %"class.v8::internal::wasm::(anonymous namespace)::AsmMinMaxType"* %18, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN2v88internal4wasm12_GLOBAL__N_113AsmMinMaxTypeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %19, align 8
  %20 = getelementptr inbounds %"class.v8::internal::wasm::(anonymous namespace)::AsmMinMaxType", %"class.v8::internal::wasm::(anonymous namespace)::AsmMinMaxType"* %18, i64 0, i32 1
  %21 = bitcast %"class.v8::internal::wasm::AsmType"** %20 to i64*
  store i64 %4, i64* %21, align 8
  %22 = getelementptr inbounds %"class.v8::internal::wasm::(anonymous namespace)::AsmMinMaxType", %"class.v8::internal::wasm::(anonymous namespace)::AsmMinMaxType"* %18, i64 0, i32 2
  %23 = bitcast %"class.v8::internal::wasm::AsmType"** %22 to i64*
  store i64 %5, i64* %23, align 8
  %24 = inttoptr i64 %17 to %"class.v8::internal::wasm::AsmType"*
  ret %"class.v8::internal::wasm::AsmType"* %24
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal4wasm15AsmFunctionType3IsAEPNS1_7AsmTypeE(%"class.v8::internal::wasm::AsmFunctionType"* nocapture readonly, %"class.v8::internal::wasm::AsmType"*) unnamed_addr #1 align 2 {
  %3 = ptrtoint %"class.v8::internal::wasm::AsmType"* %1 to i64
  %4 = and i64 %3, 1
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %84

6:                                                ; preds = %2
  %7 = bitcast %"class.v8::internal::wasm::AsmType"* %1 to %"class.v8::internal::wasm::AsmCallableType"*
  %8 = bitcast %"class.v8::internal::wasm::AsmType"* %1 to %"class.v8::internal::wasm::AsmFunctionType"* (%"class.v8::internal::wasm::AsmCallableType"*)***
  %9 = load %"class.v8::internal::wasm::AsmFunctionType"* (%"class.v8::internal::wasm::AsmCallableType"*)**, %"class.v8::internal::wasm::AsmFunctionType"* (%"class.v8::internal::wasm::AsmCallableType"*)*** %8, align 8
  %10 = getelementptr inbounds %"class.v8::internal::wasm::AsmFunctionType"* (%"class.v8::internal::wasm::AsmCallableType"*)*, %"class.v8::internal::wasm::AsmFunctionType"* (%"class.v8::internal::wasm::AsmCallableType"*)** %9, i64 2
  %11 = load %"class.v8::internal::wasm::AsmFunctionType"* (%"class.v8::internal::wasm::AsmCallableType"*)*, %"class.v8::internal::wasm::AsmFunctionType"* (%"class.v8::internal::wasm::AsmCallableType"*)** %10, align 8
  %12 = tail call %"class.v8::internal::wasm::AsmFunctionType"* %11(%"class.v8::internal::wasm::AsmCallableType"* %7) #8
  %13 = icmp eq %"class.v8::internal::wasm::AsmFunctionType"* %12, null
  br i1 %13, label %84, label %14

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.v8::internal::wasm::AsmFunctionType", %"class.v8::internal::wasm::AsmFunctionType"* %0, i64 0, i32 1
  %16 = load %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %15, align 8
  %17 = getelementptr inbounds %"class.v8::internal::wasm::AsmFunctionType", %"class.v8::internal::wasm::AsmFunctionType"* %12, i64 0, i32 1
  %18 = load %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %17, align 8
  %19 = icmp eq %"class.v8::internal::wasm::AsmType"* %16, null
  br i1 %19, label %20, label %22

20:                                               ; preds = %14
  %21 = icmp eq %"class.v8::internal::wasm::AsmType"* %18, null
  br i1 %21, label %36, label %84

22:                                               ; preds = %14
  %23 = ptrtoint %"class.v8::internal::wasm::AsmType"* %16 to i64
  %24 = and i64 %23, 1
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %30, label %26

26:                                               ; preds = %22
  %27 = ptrtoint %"class.v8::internal::wasm::AsmType"* %18 to i64
  %28 = and i64 %27, 1
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %84, label %32

30:                                               ; preds = %22
  %31 = icmp eq %"class.v8::internal::wasm::AsmType"* %16, %18
  br i1 %31, label %36, label %84

32:                                               ; preds = %26
  %33 = xor i64 %27, %23
  %34 = trunc i64 %33 to i32
  %35 = icmp ult i32 %34, 2
  br i1 %35, label %36, label %84

36:                                               ; preds = %30, %20, %32
  %37 = getelementptr inbounds %"class.v8::internal::wasm::AsmFunctionType", %"class.v8::internal::wasm::AsmFunctionType"* %0, i64 0, i32 2, i32 0
  %38 = getelementptr inbounds %"class.v8::internal::wasm::AsmFunctionType", %"class.v8::internal::wasm::AsmFunctionType"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %39 = bitcast %"class.v8::internal::wasm::AsmType"*** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = bitcast %"class.std::__1::vector"* %37 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = sub i64 %40, %42
  %44 = ashr exact i64 %43, 3
  %45 = getelementptr inbounds %"class.v8::internal::wasm::AsmFunctionType", %"class.v8::internal::wasm::AsmFunctionType"* %12, i64 0, i32 2, i32 0
  %46 = getelementptr inbounds %"class.v8::internal::wasm::AsmFunctionType", %"class.v8::internal::wasm::AsmFunctionType"* %12, i64 0, i32 2, i32 0, i32 0, i32 1
  %47 = bitcast %"class.v8::internal::wasm::AsmType"*** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = bitcast %"class.std::__1::vector"* %45 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = sub i64 %48, %50
  %52 = ashr exact i64 %51, 3
  %53 = icmp eq i64 %44, %52
  %54 = inttoptr i64 %42 to %"class.v8::internal::wasm::AsmType"**
  %55 = inttoptr i64 %50 to %"class.v8::internal::wasm::AsmType"**
  br i1 %53, label %56, label %84

56:                                               ; preds = %36
  %57 = icmp eq i64 %43, 0
  br i1 %57, label %84, label %58

58:                                               ; preds = %56, %81
  %59 = phi i64 [ %82, %81 ], [ 0, %56 ]
  %60 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %54, i64 %59
  %61 = load %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %60, align 8
  %62 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %55, i64 %59
  %63 = load %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %62, align 8
  %64 = icmp eq %"class.v8::internal::wasm::AsmType"* %61, null
  br i1 %64, label %65, label %67

65:                                               ; preds = %58
  %66 = icmp eq %"class.v8::internal::wasm::AsmType"* %63, null
  br i1 %66, label %81, label %84

67:                                               ; preds = %58
  %68 = ptrtoint %"class.v8::internal::wasm::AsmType"* %61 to i64
  %69 = and i64 %68, 1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %75, label %71

71:                                               ; preds = %67
  %72 = ptrtoint %"class.v8::internal::wasm::AsmType"* %63 to i64
  %73 = and i64 %72, 1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %84, label %77

75:                                               ; preds = %67
  %76 = icmp eq %"class.v8::internal::wasm::AsmType"* %61, %63
  br i1 %76, label %81, label %84

77:                                               ; preds = %71
  %78 = xor i64 %72, %68
  %79 = trunc i64 %78 to i32
  %80 = icmp ult i32 %79, 2
  br i1 %80, label %81, label %84

81:                                               ; preds = %75, %65, %77
  %82 = add nuw i64 %59, 1
  %83 = icmp ult i64 %82, %44
  br i1 %83, label %58, label %84

84:                                               ; preds = %81, %77, %65, %75, %71, %56, %6, %32, %36, %20, %30, %2, %26
  %85 = phi i1 [ false, %26 ], [ false, %2 ], [ false, %30 ], [ false, %20 ], [ false, %36 ], [ false, %32 ], [ false, %6 ], [ true, %56 ], [ true, %81 ], [ false, %77 ], [ false, %65 ], [ false, %75 ], [ false, %71 ]
  ret i1 %85
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal4wasm15AsmFunctionType16CanBeInvokedWithEPNS1_7AsmTypeERKNS0_10ZoneVectorIS4_EE(%"class.v8::internal::wasm::AsmFunctionType"* nocapture readonly, %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::ZoneVector"* nocapture readonly dereferenceable(32)) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::wasm::AsmFunctionType", %"class.v8::internal::wasm::AsmFunctionType"* %0, i64 0, i32 1
  %5 = load %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %4, align 8
  %6 = icmp eq %"class.v8::internal::wasm::AsmType"* %5, null
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = icmp eq %"class.v8::internal::wasm::AsmType"* %1, null
  br i1 %8, label %23, label %88

9:                                                ; preds = %3
  %10 = ptrtoint %"class.v8::internal::wasm::AsmType"* %5 to i64
  %11 = and i64 %10, 1
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %17, label %13

13:                                               ; preds = %9
  %14 = ptrtoint %"class.v8::internal::wasm::AsmType"* %1 to i64
  %15 = and i64 %14, 1
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %88, label %19

17:                                               ; preds = %9
  %18 = icmp eq %"class.v8::internal::wasm::AsmType"* %5, %1
  br i1 %18, label %23, label %88

19:                                               ; preds = %13
  %20 = xor i64 %10, %14
  %21 = trunc i64 %20 to i32
  %22 = icmp ult i32 %21, 2
  br i1 %22, label %23, label %88

23:                                               ; preds = %17, %7, %19
  %24 = getelementptr inbounds %"class.v8::internal::wasm::AsmFunctionType", %"class.v8::internal::wasm::AsmFunctionType"* %0, i64 0, i32 2, i32 0
  %25 = getelementptr inbounds %"class.v8::internal::wasm::AsmFunctionType", %"class.v8::internal::wasm::AsmFunctionType"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %26 = bitcast %"class.v8::internal::wasm::AsmType"*** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %"class.std::__1::vector"* %24 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %27, %29
  %31 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %2, i64 0, i32 0, i32 0, i32 1
  %32 = bitcast %"class.v8::internal::wasm::AsmType"*** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = bitcast %"class.v8::internal::ZoneVector"* %2 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = sub i64 %33, %35
  %37 = icmp eq i64 %30, %36
  %38 = inttoptr i64 %35 to %"class.v8::internal::wasm::AsmType"**
  br i1 %37, label %39, label %88

39:                                               ; preds = %23
  %40 = icmp eq i64 %27, %29
  br i1 %40, label %88, label %41

41:                                               ; preds = %39
  %42 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %2, i64 0, i32 0, i32 0, i32 0
  br label %43

43:                                               ; preds = %86, %41
  %44 = phi i64 [ %29, %41 ], [ %80, %86 ]
  %45 = phi i64 [ %27, %41 ], [ %81, %86 ]
  %46 = phi %"class.v8::internal::wasm::AsmType"** [ %38, %41 ], [ %87, %86 ]
  %47 = phi i64 [ 0, %41 ], [ %82, %86 ]
  %48 = inttoptr i64 %44 to %"class.v8::internal::wasm::AsmType"**
  %49 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %46, i64 %47
  %50 = load %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %49, align 8
  %51 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %48, i64 %47
  %52 = load %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %51, align 8
  %53 = ptrtoint %"class.v8::internal::wasm::AsmType"* %50 to i64
  %54 = and i64 %53, 1
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %60, label %56

56:                                               ; preds = %43
  %57 = ptrtoint %"class.v8::internal::wasm::AsmType"* %52 to i64
  %58 = and i64 %57, 1
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %88, label %73

60:                                               ; preds = %43
  %61 = icmp eq %"class.v8::internal::wasm::AsmType"* %50, null
  br i1 %61, label %72, label %62

62:                                               ; preds = %60
  %63 = bitcast %"class.v8::internal::wasm::AsmType"* %50 to %"class.v8::internal::wasm::AsmCallableType"*
  %64 = bitcast %"class.v8::internal::wasm::AsmType"* %50 to i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)***
  %65 = load i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)**, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)*** %64, align 8
  %66 = getelementptr inbounds i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)*, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)** %65, i64 6
  %67 = load i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)*, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)** %66, align 8
  %68 = tail call zeroext i1 %67(%"class.v8::internal::wasm::AsmCallableType"* nonnull %63, %"class.v8::internal::wasm::AsmType"* %52) #8
  br i1 %68, label %69, label %88

69:                                               ; preds = %62
  %70 = load i64, i64* %26, align 8
  %71 = load i64, i64* %28, align 8
  br label %79

72:                                               ; preds = %60
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.24, i64 0, i64 0)) #9
  unreachable

73:                                               ; preds = %56
  %74 = trunc i64 %53 to i32
  %75 = trunc i64 %57 to i32
  %76 = and i32 %75, -2
  %77 = and i32 %76, %74
  %78 = icmp eq i32 %77, %76
  br i1 %78, label %79, label %88

79:                                               ; preds = %69, %73
  %80 = phi i64 [ %71, %69 ], [ %44, %73 ]
  %81 = phi i64 [ %70, %69 ], [ %45, %73 ]
  %82 = add nuw i64 %47, 1
  %83 = sub i64 %81, %80
  %84 = ashr exact i64 %83, 3
  %85 = icmp ult i64 %82, %84
  br i1 %85, label %86, label %88

86:                                               ; preds = %79
  %87 = load %"class.v8::internal::wasm::AsmType"**, %"class.v8::internal::wasm::AsmType"*** %42, align 8
  br label %43

88:                                               ; preds = %79, %73, %62, %56, %39, %19, %23, %7, %17, %13
  %89 = phi i1 [ false, %13 ], [ false, %17 ], [ false, %7 ], [ false, %23 ], [ false, %19 ], [ true, %39 ], [ true, %79 ], [ false, %73 ], [ false, %62 ], [ false, %56 ]
  ret i1 %89
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm25AsmOverloadedFunctionType4NameEv(%"class.std::__1::basic_string"* noalias sret, %"class.v8::internal::wasm::AsmOverloadedFunctionType"* nocapture readonly) unnamed_addr #1 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #8
  %5 = getelementptr inbounds %"class.v8::internal::wasm::AsmOverloadedFunctionType", %"class.v8::internal::wasm::AsmOverloadedFunctionType"* %1, i64 0, i32 1, i32 0
  %6 = getelementptr inbounds %"class.v8::internal::wasm::AsmOverloadedFunctionType", %"class.v8::internal::wasm::AsmOverloadedFunctionType"* %1, i64 0, i32 1, i32 0, i32 0, i32 1
  %7 = bitcast %"class.v8::internal::wasm::AsmType"*** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector"* %5 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %8, %10
  br i1 %11, label %51, label %12

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %15 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  br label %19

19:                                               ; preds = %12, %44
  %20 = phi i64 [ %10, %12 ], [ %47, %44 ]
  %21 = phi i64 [ 0, %12 ], [ %45, %44 ]
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %25

23:                                               ; preds = %19
  %24 = inttoptr i64 %20 to %"class.v8::internal::wasm::AsmType"**
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #8
  br label %29

25:                                               ; preds = %19
  %26 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i64 0, i64 0)) #8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #8
  %27 = load %"class.v8::internal::wasm::AsmType"**, %"class.v8::internal::wasm::AsmType"*** %14, align 8
  %28 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %27, i64 %21
  br label %29

29:                                               ; preds = %23, %25
  %30 = phi %"class.v8::internal::wasm::AsmType"** [ %24, %23 ], [ %28, %25 ]
  %31 = load %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %30, align 8
  call void @_ZN2v88internal4wasm7AsmType4NameEv(%"class.std::__1::basic_string"* nonnull sret %3, %"class.v8::internal::wasm::AsmType"* %31)
  %32 = load i8, i8* %16, align 1
  %33 = icmp slt i8 %32, 0
  %34 = load i8*, i8** %17, align 8
  %35 = load i64, i64* %18, align 8
  %36 = zext i8 %32 to i64
  %37 = select i1 %33, i8* %34, i8* %13
  %38 = select i1 %33, i64 %35, i64 %36
  %39 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %0, i8* %37, i64 %38) #8
  %40 = load i8, i8* %16, align 1
  %41 = icmp slt i8 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %29
  %43 = load i8*, i8** %17, align 8
  call void @_ZdlPv(i8* %43) #10
  br label %44

44:                                               ; preds = %29, %42
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #8
  %45 = add nuw i64 %21, 1
  %46 = load i64, i64* %7, align 8
  %47 = load i64, i64* %9, align 8
  %48 = sub i64 %46, %47
  %49 = ashr exact i64 %48, 3
  %50 = icmp ult i64 %45, %49
  br i1 %50, label %19, label %51

51:                                               ; preds = %44, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2v88internal4wasm25AsmOverloadedFunctionType16CanBeInvokedWithEPNS1_7AsmTypeERKNS0_10ZoneVectorIS4_EE(%"class.v8::internal::wasm::AsmOverloadedFunctionType"* nocapture readonly, %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::ZoneVector"* dereferenceable(32)) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::wasm::AsmOverloadedFunctionType", %"class.v8::internal::wasm::AsmOverloadedFunctionType"* %0, i64 0, i32 1, i32 0
  %5 = getelementptr inbounds %"class.v8::internal::wasm::AsmOverloadedFunctionType", %"class.v8::internal::wasm::AsmOverloadedFunctionType"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %6 = bitcast %"class.v8::internal::wasm::AsmType"*** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %7, %9
  br i1 %10, label %34, label %17

11:                                               ; preds = %17
  %12 = load i64, i64* %6, align 8
  %13 = load i64, i64* %8, align 8
  %14 = sub i64 %12, %13
  %15 = ashr exact i64 %14, 3
  %16 = icmp ult i64 %33, %15
  br i1 %16, label %17, label %34

17:                                               ; preds = %3, %11
  %18 = phi i64 [ %13, %11 ], [ %9, %3 ]
  %19 = phi i64 [ %33, %11 ], [ 0, %3 ]
  %20 = inttoptr i64 %18 to %"class.v8::internal::wasm::AsmType"**
  %21 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %20, i64 %19
  %22 = load %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %21, align 8
  %23 = ptrtoint %"class.v8::internal::wasm::AsmType"* %22 to i64
  %24 = and i64 %23, 1
  %25 = icmp eq i64 %24, 0
  %26 = bitcast %"class.v8::internal::wasm::AsmType"* %22 to %"class.v8::internal::wasm::AsmCallableType"*
  %27 = select i1 %25, %"class.v8::internal::wasm::AsmCallableType"* %26, %"class.v8::internal::wasm::AsmCallableType"* null
  %28 = bitcast %"class.v8::internal::wasm::AsmCallableType"* %27 to i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::ZoneVector"*)***
  %29 = load i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::ZoneVector"*)**, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::ZoneVector"*)*** %28, align 8
  %30 = getelementptr inbounds i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::ZoneVector"*)*, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::ZoneVector"*)** %29, i64 1
  %31 = load i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::ZoneVector"*)*, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::ZoneVector"*)** %30, align 8
  %32 = tail call zeroext i1 %31(%"class.v8::internal::wasm::AsmCallableType"* %27, %"class.v8::internal::wasm::AsmType"* %1, %"class.v8::internal::ZoneVector"* dereferenceable(32) %2) #8
  %33 = add nuw i64 %19, 1
  br i1 %32, label %34, label %11

34:                                               ; preds = %17, %11, %3
  %35 = phi i1 [ false, %3 ], [ false, %11 ], [ true, %17 ]
  ret i1 %35
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal4wasm25AsmOverloadedFunctionType11AddOverloadEPNS1_7AsmTypeE(%"class.v8::internal::wasm::AsmOverloadedFunctionType"*, %"class.v8::internal::wasm::AsmType"*) local_unnamed_addr #1 align 2 {
  %3 = ptrtoint %"class.v8::internal::wasm::AsmType"* %1 to i64
  %4 = getelementptr inbounds %"class.v8::internal::wasm::AsmOverloadedFunctionType", %"class.v8::internal::wasm::AsmOverloadedFunctionType"* %0, i64 0, i32 1, i32 0
  %5 = getelementptr inbounds %"class.v8::internal::wasm::AsmOverloadedFunctionType", %"class.v8::internal::wasm::AsmOverloadedFunctionType"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %6 = load %"class.v8::internal::wasm::AsmType"**, %"class.v8::internal::wasm::AsmType"*** %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::wasm::AsmOverloadedFunctionType", %"class.v8::internal::wasm::AsmOverloadedFunctionType"* %0, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  %8 = load %"class.v8::internal::wasm::AsmType"**, %"class.v8::internal::wasm::AsmType"*** %7, align 8
  %9 = icmp eq %"class.v8::internal::wasm::AsmType"** %6, %8
  %10 = ptrtoint %"class.v8::internal::wasm::AsmType"** %8 to i64
  br i1 %9, label %16, label %11

11:                                               ; preds = %2
  %12 = bitcast %"class.v8::internal::wasm::AsmType"** %6 to i64*
  store i64 %3, i64* %12, align 8
  %13 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %6, i64 1
  %14 = ptrtoint %"class.v8::internal::wasm::AsmType"** %13 to i64
  %15 = bitcast %"class.v8::internal::wasm::AsmType"*** %5 to i64*
  store i64 %14, i64* %15, align 8
  br label %241

16:                                               ; preds = %2
  %17 = ptrtoint %"class.v8::internal::wasm::AsmType"** %6 to i64
  %18 = bitcast %"class.v8::internal::wasm::AsmType"*** %5 to i64*
  %19 = bitcast %"class.std::__1::vector"* %4 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 3
  %23 = add nsw i64 %22, 1
  %24 = icmp ugt i64 %23, 268435455
  br i1 %24, label %25, label %27

25:                                               ; preds = %16
  %26 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %26) #9
  unreachable

27:                                               ; preds = %16
  %28 = bitcast %"class.v8::internal::wasm::AsmType"*** %7 to i64*
  %29 = sub i64 %10, %20
  %30 = ashr exact i64 %29, 3
  %31 = icmp ult i64 %30, 134217727
  br i1 %31, label %32, label %37

32:                                               ; preds = %27
  %33 = ashr exact i64 %29, 2
  %34 = icmp ult i64 %33, %23
  %35 = select i1 %34, i64 %23, i64 %33
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %55, label %37

37:                                               ; preds = %32, %27
  %38 = phi i64 [ %35, %32 ], [ 268435455, %27 ]
  %39 = getelementptr inbounds %"class.v8::internal::wasm::AsmOverloadedFunctionType", %"class.v8::internal::wasm::AsmOverloadedFunctionType"* %0, i64 0, i32 1, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %40 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %39, align 8
  %41 = shl i64 %38, 3
  %42 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %40, i64 0, i32 2
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %40, i64 0, i32 3
  %45 = load i64, i64* %44, align 8
  %46 = sub i64 %45, %43
  %47 = icmp ugt i64 %41, %46
  br i1 %47, label %48, label %50, !prof !2

48:                                               ; preds = %37
  %49 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %40, i64 %41) #8
  br label %52

50:                                               ; preds = %37
  %51 = add i64 %43, %41
  store i64 %51, i64* %42, align 8
  br label %52

52:                                               ; preds = %50, %48
  %53 = phi i64 [ %49, %48 ], [ %43, %50 ]
  %54 = inttoptr i64 %53 to %"class.v8::internal::wasm::AsmType"**
  br label %55

55:                                               ; preds = %52, %32
  %56 = phi i64 [ %38, %52 ], [ 0, %32 ]
  %57 = phi %"class.v8::internal::wasm::AsmType"** [ %54, %52 ], [ null, %32 ]
  %58 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %57, i64 %22
  %59 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %57, i64 %56
  %60 = ptrtoint %"class.v8::internal::wasm::AsmType"** %59 to i64
  %61 = bitcast %"class.v8::internal::wasm::AsmType"** %58 to i64*
  store i64 %3, i64* %61, align 8
  %62 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %58, i64 1
  %63 = ptrtoint %"class.v8::internal::wasm::AsmType"** %62 to i64
  %64 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %65 = load %"class.v8::internal::wasm::AsmType"**, %"class.v8::internal::wasm::AsmType"*** %64, align 8
  %66 = ptrtoint %"class.v8::internal::wasm::AsmType"** %65 to i64
  %67 = load %"class.v8::internal::wasm::AsmType"**, %"class.v8::internal::wasm::AsmType"*** %5, align 8
  %68 = icmp eq %"class.v8::internal::wasm::AsmType"** %67, %65
  br i1 %68, label %238, label %69

69:                                               ; preds = %55
  %70 = getelementptr %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %67, i64 -1
  %71 = ptrtoint %"class.v8::internal::wasm::AsmType"** %70 to i64
  %72 = sub i64 %71, %66
  %73 = lshr i64 %72, 3
  %74 = add nuw nsw i64 %73, 1
  %75 = icmp ult i64 %74, 4
  br i1 %75, label %168, label %76

76:                                               ; preds = %69
  %77 = getelementptr %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %67, i64 -1
  %78 = ptrtoint %"class.v8::internal::wasm::AsmType"** %77 to i64
  %79 = sub i64 %78, %66
  %80 = lshr i64 %79, 3
  %81 = xor i64 %80, -1
  %82 = add nsw i64 %22, %81
  %83 = getelementptr %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %57, i64 %82
  %84 = xor i64 %80, -1
  %85 = getelementptr %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %67, i64 %84
  %86 = icmp ult %"class.v8::internal::wasm::AsmType"** %83, %67
  %87 = icmp ult %"class.v8::internal::wasm::AsmType"** %85, %58
  %88 = and i1 %86, %87
  br i1 %88, label %168, label %89

89:                                               ; preds = %76
  %90 = and i64 %74, 4611686018427387900
  %91 = sub nsw i64 0, %90
  %92 = getelementptr %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %58, i64 %91
  %93 = sub nsw i64 0, %90
  %94 = getelementptr %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %67, i64 %93
  %95 = add nsw i64 %90, -4
  %96 = lshr exact i64 %95, 2
  %97 = add nuw nsw i64 %96, 1
  %98 = and i64 %97, 1
  %99 = icmp eq i64 %95, 0
  br i1 %99, label %146, label %100

100:                                              ; preds = %89
  %101 = sub nuw nsw i64 %97, %98
  %102 = getelementptr %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %58, i64 -1
  %103 = getelementptr %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %67, i64 -1
  %104 = getelementptr %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %58, i64 -1
  %105 = getelementptr %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %67, i64 -1
  br label %106

106:                                              ; preds = %106, %100
  %107 = phi i64 [ 0, %100 ], [ %141, %106 ]
  %108 = phi i64 [ %101, %100 ], [ %142, %106 ]
  %109 = sub i64 0, %107
  %110 = sub i64 0, %107
  %111 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %102, i64 %109
  %112 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %103, i64 %110
  %113 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %112, i64 -1
  %114 = bitcast %"class.v8::internal::wasm::AsmType"** %113 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 8, !alias.scope !3
  %116 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %112, i64 -2
  %117 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %116, i64 -1
  %118 = bitcast %"class.v8::internal::wasm::AsmType"** %117 to <2 x i64>*
  %119 = load <2 x i64>, <2 x i64>* %118, align 8, !alias.scope !3
  %120 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %111, i64 -1
  %121 = bitcast %"class.v8::internal::wasm::AsmType"** %120 to <2 x i64>*
  store <2 x i64> %115, <2 x i64>* %121, align 8, !alias.scope !6, !noalias !3
  %122 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %111, i64 -2
  %123 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %122, i64 -1
  %124 = bitcast %"class.v8::internal::wasm::AsmType"** %123 to <2 x i64>*
  store <2 x i64> %119, <2 x i64>* %124, align 8, !alias.scope !6, !noalias !3
  %125 = sub nuw nsw i64 -4, %107
  %126 = sub nuw nsw i64 -4, %107
  %127 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %104, i64 %125
  %128 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %105, i64 %126
  %129 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %128, i64 -1
  %130 = bitcast %"class.v8::internal::wasm::AsmType"** %129 to <2 x i64>*
  %131 = load <2 x i64>, <2 x i64>* %130, align 8, !alias.scope !3
  %132 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %128, i64 -2
  %133 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %132, i64 -1
  %134 = bitcast %"class.v8::internal::wasm::AsmType"** %133 to <2 x i64>*
  %135 = load <2 x i64>, <2 x i64>* %134, align 8, !alias.scope !3
  %136 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %127, i64 -1
  %137 = bitcast %"class.v8::internal::wasm::AsmType"** %136 to <2 x i64>*
  store <2 x i64> %131, <2 x i64>* %137, align 8, !alias.scope !6, !noalias !3
  %138 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %127, i64 -2
  %139 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %138, i64 -1
  %140 = bitcast %"class.v8::internal::wasm::AsmType"** %139 to <2 x i64>*
  store <2 x i64> %135, <2 x i64>* %140, align 8, !alias.scope !6, !noalias !3
  %141 = add i64 %107, 8
  %142 = add i64 %108, -2
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %144, label %106, !llvm.loop !8

144:                                              ; preds = %106
  %145 = sub nuw nsw i64 -8, %107
  br label %146

146:                                              ; preds = %144, %89
  %147 = phi i64 [ 0, %89 ], [ %145, %144 ]
  %148 = icmp eq i64 %98, 0
  br i1 %148, label %166, label %149

149:                                              ; preds = %146
  %150 = getelementptr %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %58, i64 -1
  %151 = getelementptr %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %67, i64 -1
  %152 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %150, i64 %147
  %153 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %151, i64 %147
  %154 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %153, i64 -1
  %155 = bitcast %"class.v8::internal::wasm::AsmType"** %154 to <2 x i64>*
  %156 = load <2 x i64>, <2 x i64>* %155, align 8, !alias.scope !3
  %157 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %153, i64 -2
  %158 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %157, i64 -1
  %159 = bitcast %"class.v8::internal::wasm::AsmType"** %158 to <2 x i64>*
  %160 = load <2 x i64>, <2 x i64>* %159, align 8, !alias.scope !3
  %161 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %152, i64 -1
  %162 = bitcast %"class.v8::internal::wasm::AsmType"** %161 to <2 x i64>*
  store <2 x i64> %156, <2 x i64>* %162, align 8, !alias.scope !6, !noalias !3
  %163 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %152, i64 -2
  %164 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %163, i64 -1
  %165 = bitcast %"class.v8::internal::wasm::AsmType"** %164 to <2 x i64>*
  store <2 x i64> %160, <2 x i64>* %165, align 8, !alias.scope !6, !noalias !3
  br label %166

166:                                              ; preds = %146, %149
  %167 = icmp eq i64 %74, %90
  br i1 %167, label %238, label %168

168:                                              ; preds = %166, %76, %69
  %169 = phi %"class.v8::internal::wasm::AsmType"** [ %58, %76 ], [ %58, %69 ], [ %92, %166 ]
  %170 = phi %"class.v8::internal::wasm::AsmType"** [ %67, %76 ], [ %67, %69 ], [ %94, %166 ]
  %171 = getelementptr %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %170, i64 -1
  %172 = ptrtoint %"class.v8::internal::wasm::AsmType"** %171 to i64
  %173 = sub i64 %172, %66
  %174 = lshr i64 %173, 3
  %175 = add nuw nsw i64 %174, 1
  %176 = and i64 %175, 7
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %189, label %178

178:                                              ; preds = %168, %178
  %179 = phi %"class.v8::internal::wasm::AsmType"** [ %182, %178 ], [ %169, %168 ]
  %180 = phi %"class.v8::internal::wasm::AsmType"** [ %183, %178 ], [ %170, %168 ]
  %181 = phi i64 [ %187, %178 ], [ %176, %168 ]
  %182 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %179, i64 -1
  %183 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %180, i64 -1
  %184 = bitcast %"class.v8::internal::wasm::AsmType"** %183 to i64*
  %185 = load i64, i64* %184, align 8
  %186 = bitcast %"class.v8::internal::wasm::AsmType"** %182 to i64*
  store i64 %185, i64* %186, align 8
  %187 = add i64 %181, -1
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %189, label %178, !llvm.loop !10

189:                                              ; preds = %178, %168
  %190 = phi %"class.v8::internal::wasm::AsmType"** [ undef, %168 ], [ %182, %178 ]
  %191 = phi %"class.v8::internal::wasm::AsmType"** [ %169, %168 ], [ %182, %178 ]
  %192 = phi %"class.v8::internal::wasm::AsmType"** [ %170, %168 ], [ %183, %178 ]
  %193 = icmp ult i64 %173, 56
  br i1 %193, label %238, label %194

194:                                              ; preds = %189, %194
  %195 = phi %"class.v8::internal::wasm::AsmType"** [ %232, %194 ], [ %191, %189 ]
  %196 = phi %"class.v8::internal::wasm::AsmType"** [ %233, %194 ], [ %192, %189 ]
  %197 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %195, i64 -1
  %198 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %196, i64 -1
  %199 = bitcast %"class.v8::internal::wasm::AsmType"** %198 to i64*
  %200 = load i64, i64* %199, align 8
  %201 = bitcast %"class.v8::internal::wasm::AsmType"** %197 to i64*
  store i64 %200, i64* %201, align 8
  %202 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %195, i64 -2
  %203 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %196, i64 -2
  %204 = bitcast %"class.v8::internal::wasm::AsmType"** %203 to i64*
  %205 = load i64, i64* %204, align 8
  %206 = bitcast %"class.v8::internal::wasm::AsmType"** %202 to i64*
  store i64 %205, i64* %206, align 8
  %207 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %195, i64 -3
  %208 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %196, i64 -3
  %209 = bitcast %"class.v8::internal::wasm::AsmType"** %208 to i64*
  %210 = load i64, i64* %209, align 8
  %211 = bitcast %"class.v8::internal::wasm::AsmType"** %207 to i64*
  store i64 %210, i64* %211, align 8
  %212 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %195, i64 -4
  %213 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %196, i64 -4
  %214 = bitcast %"class.v8::internal::wasm::AsmType"** %213 to i64*
  %215 = load i64, i64* %214, align 8
  %216 = bitcast %"class.v8::internal::wasm::AsmType"** %212 to i64*
  store i64 %215, i64* %216, align 8
  %217 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %195, i64 -5
  %218 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %196, i64 -5
  %219 = bitcast %"class.v8::internal::wasm::AsmType"** %218 to i64*
  %220 = load i64, i64* %219, align 8
  %221 = bitcast %"class.v8::internal::wasm::AsmType"** %217 to i64*
  store i64 %220, i64* %221, align 8
  %222 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %195, i64 -6
  %223 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %196, i64 -6
  %224 = bitcast %"class.v8::internal::wasm::AsmType"** %223 to i64*
  %225 = load i64, i64* %224, align 8
  %226 = bitcast %"class.v8::internal::wasm::AsmType"** %222 to i64*
  store i64 %225, i64* %226, align 8
  %227 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %195, i64 -7
  %228 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %196, i64 -7
  %229 = bitcast %"class.v8::internal::wasm::AsmType"** %228 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = bitcast %"class.v8::internal::wasm::AsmType"** %227 to i64*
  store i64 %230, i64* %231, align 8
  %232 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %195, i64 -8
  %233 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %196, i64 -8
  %234 = bitcast %"class.v8::internal::wasm::AsmType"** %233 to i64*
  %235 = load i64, i64* %234, align 8
  %236 = bitcast %"class.v8::internal::wasm::AsmType"** %232 to i64*
  store i64 %235, i64* %236, align 8
  %237 = icmp eq %"class.v8::internal::wasm::AsmType"** %233, %65
  br i1 %237, label %238, label %194, !llvm.loop !12

238:                                              ; preds = %189, %194, %166, %55
  %239 = phi %"class.v8::internal::wasm::AsmType"** [ %58, %55 ], [ %92, %166 ], [ %190, %189 ], [ %232, %194 ]
  %240 = ptrtoint %"class.v8::internal::wasm::AsmType"** %239 to i64
  store i64 %240, i64* %19, align 8
  store i64 %63, i64* %18, align 8
  store i64 %60, i64* %28, align 8
  br label %241

241:                                              ; preds = %11, %238
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::wasm::AsmFunctionType"* @_ZN2v88internal4wasm15AsmCallableType14AsFunctionTypeEv(%"class.v8::internal::wasm::AsmCallableType"*) unnamed_addr #1 comdat align 2 {
  ret %"class.v8::internal::wasm::AsmFunctionType"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::wasm::AsmOverloadedFunctionType"* @_ZN2v88internal4wasm15AsmCallableType24AsOverloadedFunctionTypeEv(%"class.v8::internal::wasm::AsmCallableType"*) unnamed_addr #1 comdat align 2 {
  ret %"class.v8::internal::wasm::AsmOverloadedFunctionType"* null
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal4wasm15AsmCallableTypeD0Ev(%"class.v8::internal::wasm::AsmCallableType"*) unnamed_addr #1 comdat align 2 {
  tail call void @llvm.trap() #9
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::wasm::AsmFunctionType"* @_ZN2v88internal4wasm15AsmFunctionType14AsFunctionTypeEv(%"class.v8::internal::wasm::AsmFunctionType"*) unnamed_addr #1 comdat align 2 {
  ret %"class.v8::internal::wasm::AsmFunctionType"* %0
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal4wasm15AsmFunctionTypeD2Ev(%"class.v8::internal::wasm::AsmFunctionType"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::wasm::AsmFunctionType", %"class.v8::internal::wasm::AsmFunctionType"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN2v88internal4wasm15AsmFunctionTypeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.v8::internal::wasm::AsmFunctionType", %"class.v8::internal::wasm::AsmFunctionType"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %"class.v8::internal::wasm::AsmType"**, %"class.v8::internal::wasm::AsmType"*** %3, align 8
  %5 = icmp eq %"class.v8::internal::wasm::AsmType"** %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"class.v8::internal::wasm::AsmType"** %4 to i64
  %8 = getelementptr inbounds %"class.v8::internal::wasm::AsmFunctionType", %"class.v8::internal::wasm::AsmFunctionType"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %9 = bitcast %"class.v8::internal::wasm::AsmType"*** %8 to i64*
  store i64 %7, i64* %9, align 8
  br label %10

10:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal4wasm15AsmFunctionTypeD0Ev(%"class.v8::internal::wasm::AsmFunctionType"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::wasm::AsmFunctionType", %"class.v8::internal::wasm::AsmFunctionType"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN2v88internal4wasm15AsmFunctionTypeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.v8::internal::wasm::AsmFunctionType", %"class.v8::internal::wasm::AsmFunctionType"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %"class.v8::internal::wasm::AsmType"**, %"class.v8::internal::wasm::AsmType"*** %3, align 8
  %5 = icmp eq %"class.v8::internal::wasm::AsmType"** %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"class.v8::internal::wasm::AsmType"** %4 to i64
  %8 = getelementptr inbounds %"class.v8::internal::wasm::AsmFunctionType", %"class.v8::internal::wasm::AsmFunctionType"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %9 = bitcast %"class.v8::internal::wasm::AsmType"*** %8 to i64*
  store i64 %7, i64* %9, align 8
  br label %10

10:                                               ; preds = %1, %6
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.24, i64 0, i64 0)) #9
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::internal::wasm::AsmOverloadedFunctionType"* @_ZN2v88internal4wasm25AsmOverloadedFunctionType24AsOverloadedFunctionTypeEv(%"class.v8::internal::wasm::AsmOverloadedFunctionType"*) unnamed_addr #1 comdat align 2 {
  ret %"class.v8::internal::wasm::AsmOverloadedFunctionType"* %0
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal4wasm25AsmOverloadedFunctionTypeD2Ev(%"class.v8::internal::wasm::AsmOverloadedFunctionType"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::wasm::AsmOverloadedFunctionType", %"class.v8::internal::wasm::AsmOverloadedFunctionType"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN2v88internal4wasm25AsmOverloadedFunctionTypeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.v8::internal::wasm::AsmOverloadedFunctionType", %"class.v8::internal::wasm::AsmOverloadedFunctionType"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.v8::internal::wasm::AsmType"**, %"class.v8::internal::wasm::AsmType"*** %3, align 8
  %5 = icmp eq %"class.v8::internal::wasm::AsmType"** %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"class.v8::internal::wasm::AsmType"** %4 to i64
  %8 = getelementptr inbounds %"class.v8::internal::wasm::AsmOverloadedFunctionType", %"class.v8::internal::wasm::AsmOverloadedFunctionType"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %9 = bitcast %"class.v8::internal::wasm::AsmType"*** %8 to i64*
  store i64 %7, i64* %9, align 8
  br label %10

10:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal4wasm25AsmOverloadedFunctionTypeD0Ev(%"class.v8::internal::wasm::AsmOverloadedFunctionType"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::wasm::AsmOverloadedFunctionType", %"class.v8::internal::wasm::AsmOverloadedFunctionType"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN2v88internal4wasm25AsmOverloadedFunctionTypeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.v8::internal::wasm::AsmOverloadedFunctionType", %"class.v8::internal::wasm::AsmOverloadedFunctionType"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.v8::internal::wasm::AsmType"**, %"class.v8::internal::wasm::AsmType"*** %3, align 8
  %5 = icmp eq %"class.v8::internal::wasm::AsmType"** %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"class.v8::internal::wasm::AsmType"** %4 to i64
  %8 = getelementptr inbounds %"class.v8::internal::wasm::AsmOverloadedFunctionType", %"class.v8::internal::wasm::AsmOverloadedFunctionType"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %9 = bitcast %"class.v8::internal::wasm::AsmType"*** %8 to i64*
  store i64 %7, i64* %9, align 8
  br label %10

10:                                               ; preds = %1, %6
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.24, i64 0, i64 0)) #9
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #7

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2v88internal4wasm12_GLOBAL__N_113AsmFroundType4NameEv(%"class.std::__1::basic_string"* noalias sret, %"class.v8::internal::wasm::(anonymous namespace)::AsmFroundType"* nocapture readnone) unnamed_addr #1 align 2 {
  %3 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  store i8 6, i8* %4, align 1
  %5 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @.str.30, i64 0, i64 0), i64 6, i1 false) #8
  %6 = getelementptr inbounds i8, i8* %5, i64 6
  store i8 0, i8* %6, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2v88internal4wasm12_GLOBAL__N_113AsmFroundType16CanBeInvokedWithEPNS1_7AsmTypeERKNS0_10ZoneVectorIS5_EE(%"class.v8::internal::wasm::(anonymous namespace)::AsmFroundType"* nocapture readnone, %"class.v8::internal::wasm::AsmType"* nocapture readnone, %"class.v8::internal::ZoneVector"* nocapture readonly dereferenceable(32)) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %2, i64 0, i32 0, i32 0, i32 1
  %5 = bitcast %"class.v8::internal::wasm::AsmType"*** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.v8::internal::ZoneVector"* %2 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = icmp eq i64 %9, 8
  br i1 %10, label %11, label %55

11:                                               ; preds = %3
  %12 = inttoptr i64 %8 to %"class.v8::internal::wasm::AsmType"**
  %13 = load %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %12, align 8
  %14 = ptrtoint %"class.v8::internal::wasm::AsmType"* %13 to i64
  %15 = and i64 %14, 1
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %27

17:                                               ; preds = %11
  %18 = icmp eq %"class.v8::internal::wasm::AsmType"* %13, null
  br i1 %18, label %26, label %19

19:                                               ; preds = %17
  %20 = bitcast %"class.v8::internal::wasm::AsmType"* %13 to %"class.v8::internal::wasm::AsmCallableType"*
  %21 = bitcast %"class.v8::internal::wasm::AsmType"* %13 to i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)***
  %22 = load i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)**, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)*** %21, align 8
  %23 = getelementptr inbounds i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)*, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)** %22, i64 6
  %24 = load i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)*, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)** %23, align 8
  %25 = tail call zeroext i1 %24(%"class.v8::internal::wasm::AsmCallableType"* nonnull %20, %"class.v8::internal::wasm::AsmType"* nonnull inttoptr (i64 8197 to %"class.v8::internal::wasm::AsmType"*)) #8
  br i1 %25, label %54, label %39

26:                                               ; preds = %17
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.24, i64 0, i64 0)) #9
  unreachable

27:                                               ; preds = %11
  %28 = and i64 %14, 8196
  %29 = icmp eq i64 %28, 8196
  %30 = and i64 %14, 76
  %31 = icmp eq i64 %30, 76
  %32 = or i1 %29, %31
  %33 = and i64 %14, 1824
  %34 = icmp eq i64 %33, 1824
  %35 = or i1 %34, %32
  %36 = and i64 %14, 2816
  %37 = icmp eq i64 %36, 2816
  %38 = or i1 %37, %35
  br i1 %38, label %54, label %55

39:                                               ; preds = %19
  %40 = load i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)**, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)*** %21, align 8
  %41 = getelementptr inbounds i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)*, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)** %40, i64 6
  %42 = load i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)*, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)** %41, align 8
  %43 = tail call zeroext i1 %42(%"class.v8::internal::wasm::AsmCallableType"* nonnull %20, %"class.v8::internal::wasm::AsmType"* nonnull inttoptr (i64 77 to %"class.v8::internal::wasm::AsmType"*)) #8
  br i1 %43, label %54, label %44

44:                                               ; preds = %39
  %45 = load i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)**, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)*** %21, align 8
  %46 = getelementptr inbounds i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)*, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)** %45, i64 6
  %47 = load i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)*, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)** %46, align 8
  %48 = tail call zeroext i1 %47(%"class.v8::internal::wasm::AsmCallableType"* nonnull %20, %"class.v8::internal::wasm::AsmType"* nonnull inttoptr (i64 1825 to %"class.v8::internal::wasm::AsmType"*)) #8
  br i1 %48, label %54, label %49

49:                                               ; preds = %44
  %50 = load i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)**, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)*** %21, align 8
  %51 = getelementptr inbounds i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)*, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)** %50, i64 6
  %52 = load i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)*, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)** %51, align 8
  %53 = tail call zeroext i1 %52(%"class.v8::internal::wasm::AsmCallableType"* nonnull %20, %"class.v8::internal::wasm::AsmType"* nonnull inttoptr (i64 2817 to %"class.v8::internal::wasm::AsmType"*)) #8
  br i1 %53, label %54, label %55

54:                                               ; preds = %49, %44, %39, %19, %27
  br label %55

55:                                               ; preds = %27, %49, %54, %3
  %56 = phi i1 [ false, %3 ], [ true, %54 ], [ false, %49 ], [ false, %27 ]
  ret i1 %56
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal4wasm15AsmCallableTypeD2Ev(%"class.v8::internal::wasm::AsmCallableType"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2v88internal4wasm12_GLOBAL__N_113AsmFroundTypeD0Ev(%"class.v8::internal::wasm::(anonymous namespace)::AsmFroundType"* nocapture readnone) unnamed_addr #4 align 2 {
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.24, i64 0, i64 0)) #9
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2v88internal4wasm12_GLOBAL__N_113AsmMinMaxType4NameEv(%"class.std::__1::basic_string"* noalias nocapture sret, %"class.v8::internal::wasm::(anonymous namespace)::AsmMinMaxType"* nocapture readonly) unnamed_addr #1 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = alloca %"class.std::__1::basic_string", align 8
  %10 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #8
  %11 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #8
  %12 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #8
  %13 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #8
  %14 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #8
  %15 = getelementptr inbounds %"class.v8::internal::wasm::(anonymous namespace)::AsmMinMaxType", %"class.v8::internal::wasm::(anonymous namespace)::AsmMinMaxType"* %1, i64 0, i32 2
  %16 = load %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %15, align 8
  call void @_ZN2v88internal4wasm7AsmType4NameEv(%"class.std::__1::basic_string"* nonnull sret %7, %"class.v8::internal::wasm::AsmType"* %16)
  %17 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc(%"class.std::__1::basic_string"* nonnull %7, i64 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0)) #8, !noalias !13
  %18 = bitcast %"class.std::__1::basic_string"* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %13, i8* align 8 %18, i64 24, i1 false) #8
  call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 24, i1 false) #8, !noalias !13
  %19 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i64 0, i64 0)) #8, !noalias !16
  %20 = bitcast %"class.std::__1::basic_string"* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* align 8 %20, i64 24, i1 false) #8
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 24, i1 false) #8, !noalias !16
  %21 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21) #8
  %22 = load %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %15, align 8
  call void @_ZN2v88internal4wasm7AsmType4NameEv(%"class.std::__1::basic_string"* nonnull sret %8, %"class.v8::internal::wasm::AsmType"* %22)
  %23 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %23, i64 0, i32 1, i32 0
  %25 = load i8, i8* %24, align 1, !noalias !19
  %26 = icmp slt i8 %25, 0
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8, !noalias !19
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8, !noalias !19
  %31 = zext i8 %25 to i64
  %32 = select i1 %26, i8* %28, i8* %21
  %33 = select i1 %26, i64 %30, i64 %31
  %34 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %5, i8* %32, i64 %33) #8, !noalias !19
  %35 = bitcast %"class.std::__1::basic_string"* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %11, i8* align 8 %35, i64 24, i1 false) #8
  call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 24, i1 false) #8, !noalias !19
  %36 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.31, i64 0, i64 0)) #8, !noalias !22
  %37 = bitcast %"class.std::__1::basic_string"* %36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %10, i8* align 8 %37, i64 24, i1 false) #8
  call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 24, i1 false) #8, !noalias !22
  %38 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %38) #8
  %39 = getelementptr inbounds %"class.v8::internal::wasm::(anonymous namespace)::AsmMinMaxType", %"class.v8::internal::wasm::(anonymous namespace)::AsmMinMaxType"* %1, i64 0, i32 1
  %40 = load %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %39, align 8
  call void @_ZN2v88internal4wasm7AsmType4NameEv(%"class.std::__1::basic_string"* nonnull sret %9, %"class.v8::internal::wasm::AsmType"* %40)
  %41 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %42 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %41, i64 0, i32 1, i32 0
  %43 = load i8, i8* %42, align 1, !noalias !25
  %44 = icmp slt i8 %43, 0
  %45 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8, !noalias !25
  %47 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %48 = load i64, i64* %47, align 8, !noalias !25
  %49 = zext i8 %43 to i64
  %50 = select i1 %44, i8* %46, i8* %38
  %51 = select i1 %44, i64 %48, i64 %49
  %52 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %3, i8* %50, i64 %51) #8, !noalias !25
  %53 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %54 = bitcast %"class.std::__1::basic_string"* %52 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* align 8 %54, i64 24, i1 false) #8
  call void @llvm.memset.p0i8.i64(i8* align 8 %54, i8 0, i64 24, i1 false) #8, !noalias !25
  %55 = load i8, i8* %42, align 1
  %56 = icmp slt i8 %55, 0
  br i1 %56, label %57, label %59

57:                                               ; preds = %2
  %58 = load i8*, i8** %45, align 8
  call void @_ZdlPv(i8* %58) #10
  br label %59

59:                                               ; preds = %2, %57
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %38) #8
  %60 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %61 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %60, i64 0, i32 1, i32 0
  %62 = load i8, i8* %61, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %67

64:                                               ; preds = %59
  %65 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  call void @_ZdlPv(i8* %66) #10
  br label %67

67:                                               ; preds = %59, %64
  %68 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %69 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %68, i64 0, i32 1, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp slt i8 %70, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %67
  %73 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = load i8*, i8** %73, align 8
  call void @_ZdlPv(i8* %74) #10
  br label %75

75:                                               ; preds = %67, %72
  %76 = load i8, i8* %24, align 1
  %77 = icmp slt i8 %76, 0
  br i1 %77, label %78, label %80

78:                                               ; preds = %75
  %79 = load i8*, i8** %27, align 8
  call void @_ZdlPv(i8* %79) #10
  br label %80

80:                                               ; preds = %75, %78
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21) #8
  %81 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %82 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %81, i64 0, i32 1, i32 0
  %83 = load i8, i8* %82, align 1
  %84 = icmp slt i8 %83, 0
  br i1 %84, label %85, label %88

85:                                               ; preds = %80
  %86 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %87 = load i8*, i8** %86, align 8
  call void @_ZdlPv(i8* %87) #10
  br label %88

88:                                               ; preds = %80, %85
  %89 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %90 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %89, i64 0, i32 1, i32 0
  %91 = load i8, i8* %90, align 1
  %92 = icmp slt i8 %91, 0
  br i1 %92, label %93, label %96

93:                                               ; preds = %88
  %94 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %95 = load i8*, i8** %94, align 8
  call void @_ZdlPv(i8* %95) #10
  br label %96

96:                                               ; preds = %88, %93
  %97 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %98 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %97, i64 0, i32 1, i32 0
  %99 = load i8, i8* %98, align 1
  %100 = icmp slt i8 %99, 0
  br i1 %100, label %101, label %104

101:                                              ; preds = %96
  %102 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %103 = load i8*, i8** %102, align 8
  call void @_ZdlPv(i8* %103) #10
  br label %104

104:                                              ; preds = %96, %101
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2v88internal4wasm12_GLOBAL__N_113AsmMinMaxType16CanBeInvokedWithEPNS1_7AsmTypeERKNS0_10ZoneVectorIS5_EE(%"class.v8::internal::wasm::(anonymous namespace)::AsmMinMaxType"* nocapture readonly, %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::ZoneVector"* nocapture readonly dereferenceable(32)) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::wasm::(anonymous namespace)::AsmMinMaxType", %"class.v8::internal::wasm::(anonymous namespace)::AsmMinMaxType"* %0, i64 0, i32 1
  %5 = load %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %4, align 8
  %6 = icmp eq %"class.v8::internal::wasm::AsmType"* %5, null
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = icmp eq %"class.v8::internal::wasm::AsmType"* %1, null
  br i1 %8, label %23, label %77

9:                                                ; preds = %3
  %10 = ptrtoint %"class.v8::internal::wasm::AsmType"* %5 to i64
  %11 = and i64 %10, 1
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %17, label %13

13:                                               ; preds = %9
  %14 = ptrtoint %"class.v8::internal::wasm::AsmType"* %1 to i64
  %15 = and i64 %14, 1
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %77, label %19

17:                                               ; preds = %9
  %18 = icmp eq %"class.v8::internal::wasm::AsmType"* %5, %1
  br i1 %18, label %23, label %77

19:                                               ; preds = %13
  %20 = xor i64 %10, %14
  %21 = trunc i64 %20 to i32
  %22 = icmp ult i32 %21, 2
  br i1 %22, label %23, label %77

23:                                               ; preds = %17, %7, %19
  %24 = getelementptr inbounds %"class.v8::internal::ZoneVector", %"class.v8::internal::ZoneVector"* %2, i64 0, i32 0, i32 0, i32 1
  %25 = bitcast %"class.v8::internal::wasm::AsmType"*** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.v8::internal::ZoneVector"* %2 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = sub i64 %26, %28
  %30 = ashr exact i64 %29, 3
  %31 = icmp ult i64 %30, 2
  br i1 %31, label %77, label %32

32:                                               ; preds = %23
  %33 = icmp eq i64 %26, %28
  br i1 %33, label %77, label %34

34:                                               ; preds = %32
  %35 = getelementptr inbounds %"class.v8::internal::wasm::(anonymous namespace)::AsmMinMaxType", %"class.v8::internal::wasm::(anonymous namespace)::AsmMinMaxType"* %0, i64 0, i32 2
  br label %36

36:                                               ; preds = %34, %70
  %37 = phi i64 [ %28, %34 ], [ %71, %70 ]
  %38 = phi i64 [ %26, %34 ], [ %72, %70 ]
  %39 = phi i64 [ 0, %34 ], [ %73, %70 ]
  %40 = inttoptr i64 %37 to %"class.v8::internal::wasm::AsmType"**
  %41 = getelementptr inbounds %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %40, i64 %39
  %42 = load %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %41, align 8
  %43 = load %"class.v8::internal::wasm::AsmType"*, %"class.v8::internal::wasm::AsmType"** %35, align 8
  %44 = ptrtoint %"class.v8::internal::wasm::AsmType"* %42 to i64
  %45 = and i64 %44, 1
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %51, label %47

47:                                               ; preds = %36
  %48 = ptrtoint %"class.v8::internal::wasm::AsmType"* %43 to i64
  %49 = and i64 %48, 1
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %77, label %64

51:                                               ; preds = %36
  %52 = icmp eq %"class.v8::internal::wasm::AsmType"* %42, null
  br i1 %52, label %63, label %53

53:                                               ; preds = %51
  %54 = bitcast %"class.v8::internal::wasm::AsmType"* %42 to %"class.v8::internal::wasm::AsmCallableType"*
  %55 = bitcast %"class.v8::internal::wasm::AsmType"* %42 to i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)***
  %56 = load i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)**, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)*** %55, align 8
  %57 = getelementptr inbounds i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)*, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)** %56, i64 6
  %58 = load i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)*, i1 (%"class.v8::internal::wasm::AsmCallableType"*, %"class.v8::internal::wasm::AsmType"*)** %57, align 8
  %59 = tail call zeroext i1 %58(%"class.v8::internal::wasm::AsmCallableType"* nonnull %54, %"class.v8::internal::wasm::AsmType"* %43) #8
  br i1 %59, label %60, label %77

60:                                               ; preds = %53
  %61 = load i64, i64* %25, align 8
  %62 = load i64, i64* %27, align 8
  br label %70

63:                                               ; preds = %51
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.24, i64 0, i64 0)) #9
  unreachable

64:                                               ; preds = %47
  %65 = trunc i64 %44 to i32
  %66 = trunc i64 %48 to i32
  %67 = and i32 %66, -2
  %68 = and i32 %67, %65
  %69 = icmp eq i32 %68, %67
  br i1 %69, label %70, label %77

70:                                               ; preds = %60, %64
  %71 = phi i64 [ %62, %60 ], [ %37, %64 ]
  %72 = phi i64 [ %61, %60 ], [ %38, %64 ]
  %73 = add nuw i64 %39, 1
  %74 = sub i64 %72, %71
  %75 = ashr exact i64 %74, 3
  %76 = icmp ult i64 %73, %75
  br i1 %76, label %36, label %77

77:                                               ; preds = %70, %64, %53, %47, %32, %19, %23, %7, %17, %13
  %78 = phi i1 [ false, %13 ], [ false, %17 ], [ false, %7 ], [ false, %23 ], [ false, %19 ], [ true, %32 ], [ true, %70 ], [ false, %64 ], [ false, %53 ], [ false, %47 ]
  ret i1 %78
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2v88internal4wasm12_GLOBAL__N_113AsmMinMaxTypeD0Ev(%"class.v8::internal::wasm::(anonymous namespace)::AsmMinMaxType"* nocapture readnone) unnamed_addr #4 align 2 {
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.24, i64 0, i64 0)) #9
  unreachable
}

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc(%"class.std::__1::basic_string"*, i64, i8*) local_unnamed_addr #7

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !9}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_OS9_: argument 0"}
!15 = distinct !{!15, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_OS9_"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_: argument 0"}
!18 = distinct !{!18, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_SA_: argument 0"}
!21 = distinct !{!21, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_SA_"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_: argument 0"}
!24 = distinct !{!24, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_SA_: argument 0"}
!27 = distinct !{!27, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_SA_"}
