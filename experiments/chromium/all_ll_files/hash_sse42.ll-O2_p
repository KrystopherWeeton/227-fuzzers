; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/x86/hash_sse42.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/x86/hash_sse42.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @av1_get_crc32c_value_sse4_2(i8* nocapture readnone, i8*, i64) local_unnamed_addr #0 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %292, label %5

5:                                                ; preds = %3, %12
  %6 = phi i32 [ %14, %12 ], [ -1, %3 ]
  %7 = phi i8* [ %16, %12 ], [ %1, %3 ]
  %8 = phi i64 [ %15, %12 ], [ %2, %3 ]
  %9 = ptrtoint i8* %7 to i64
  %10 = and i64 %9, 7
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %18, label %12

12:                                               ; preds = %5
  %13 = load i8, i8* %7, align 1
  %14 = tail call i32 @llvm.x86.sse42.crc32.32.8(i32 %6, i8 %13) #2
  %15 = add i64 %8, -1
  %16 = getelementptr inbounds i8, i8* %7, i64 1
  %17 = icmp eq i64 %15, 0
  br i1 %17, label %292, label %5

18:                                               ; preds = %5
  %19 = zext i32 %6 to i64
  %20 = icmp ugt i64 %8, 7
  br i1 %20, label %21, label %89

21:                                               ; preds = %18
  %22 = add i64 %8, -8
  %23 = and i64 %22, -8
  %24 = add nuw i64 %23, 8
  %25 = lshr i64 %22, 3
  %26 = add nuw nsw i64 %25, 1
  %27 = and i64 %26, 7
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %41, label %29

29:                                               ; preds = %21, %29
  %30 = phi i64 [ %36, %29 ], [ %19, %21 ]
  %31 = phi i8* [ %38, %29 ], [ %7, %21 ]
  %32 = phi i64 [ %37, %29 ], [ %8, %21 ]
  %33 = phi i64 [ %39, %29 ], [ %27, %21 ]
  %34 = bitcast i8* %31 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = tail call i64 @llvm.x86.sse42.crc32.64.64(i64 %30, i64 %35) #2
  %37 = add i64 %32, -8
  %38 = getelementptr inbounds i8, i8* %31, i64 8
  %39 = add i64 %33, -1
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %29, !llvm.loop !2

41:                                               ; preds = %29, %21
  %42 = phi i64 [ %19, %21 ], [ %36, %29 ]
  %43 = phi i8* [ %7, %21 ], [ %38, %29 ]
  %44 = phi i64 [ %8, %21 ], [ %37, %29 ]
  %45 = phi i64 [ undef, %21 ], [ %36, %29 ]
  %46 = icmp ult i64 %22, 56
  br i1 %46, label %85, label %47

47:                                               ; preds = %41, %47
  %48 = phi i64 [ %81, %47 ], [ %42, %41 ]
  %49 = phi i8* [ %83, %47 ], [ %43, %41 ]
  %50 = phi i64 [ %82, %47 ], [ %44, %41 ]
  %51 = bitcast i8* %49 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = tail call i64 @llvm.x86.sse42.crc32.64.64(i64 %48, i64 %52) #2
  %54 = getelementptr inbounds i8, i8* %49, i64 8
  %55 = bitcast i8* %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = tail call i64 @llvm.x86.sse42.crc32.64.64(i64 %53, i64 %56) #2
  %58 = getelementptr inbounds i8, i8* %49, i64 16
  %59 = bitcast i8* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = tail call i64 @llvm.x86.sse42.crc32.64.64(i64 %57, i64 %60) #2
  %62 = getelementptr inbounds i8, i8* %49, i64 24
  %63 = bitcast i8* %62 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = tail call i64 @llvm.x86.sse42.crc32.64.64(i64 %61, i64 %64) #2
  %66 = getelementptr inbounds i8, i8* %49, i64 32
  %67 = bitcast i8* %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = tail call i64 @llvm.x86.sse42.crc32.64.64(i64 %65, i64 %68) #2
  %70 = getelementptr inbounds i8, i8* %49, i64 40
  %71 = bitcast i8* %70 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = tail call i64 @llvm.x86.sse42.crc32.64.64(i64 %69, i64 %72) #2
  %74 = getelementptr inbounds i8, i8* %49, i64 48
  %75 = bitcast i8* %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = tail call i64 @llvm.x86.sse42.crc32.64.64(i64 %73, i64 %76) #2
  %78 = getelementptr inbounds i8, i8* %49, i64 56
  %79 = bitcast i8* %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = tail call i64 @llvm.x86.sse42.crc32.64.64(i64 %77, i64 %80) #2
  %82 = add i64 %50, -64
  %83 = getelementptr inbounds i8, i8* %49, i64 64
  %84 = icmp ugt i64 %82, 7
  br i1 %84, label %47, label %85

85:                                               ; preds = %47, %41
  %86 = phi i64 [ %45, %41 ], [ %81, %47 ]
  %87 = sub i64 %22, %23
  %88 = getelementptr i8, i8* %7, i64 %24
  br label %89

89:                                               ; preds = %85, %18
  %90 = phi i64 [ %8, %18 ], [ %87, %85 ]
  %91 = phi i8* [ %7, %18 ], [ %88, %85 ]
  %92 = phi i64 [ %19, %18 ], [ %86, %85 ]
  %93 = trunc i64 %92 to i32
  %94 = icmp ugt i64 %90, 3
  br i1 %94, label %95, label %125

95:                                               ; preds = %89
  %96 = add i64 %90, -4
  %97 = and i64 %96, -4
  %98 = add nuw i64 %97, 4
  %99 = lshr i64 %96, 2
  %100 = add nuw nsw i64 %99, 1
  %101 = and i64 %100, 7
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %115, label %103

103:                                              ; preds = %95, %103
  %104 = phi i32 [ %110, %103 ], [ %93, %95 ]
  %105 = phi i8* [ %112, %103 ], [ %91, %95 ]
  %106 = phi i64 [ %111, %103 ], [ %90, %95 ]
  %107 = phi i64 [ %113, %103 ], [ %101, %95 ]
  %108 = bitcast i8* %105 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = tail call i32 @llvm.x86.sse42.crc32.32.32(i32 %104, i32 %109) #2
  %111 = add i64 %106, -4
  %112 = getelementptr inbounds i8, i8* %105, i64 4
  %113 = add i64 %107, -1
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %103, !llvm.loop !4

115:                                              ; preds = %103, %95
  %116 = phi i32 [ %93, %95 ], [ %110, %103 ]
  %117 = phi i8* [ %91, %95 ], [ %112, %103 ]
  %118 = phi i64 [ %90, %95 ], [ %111, %103 ]
  %119 = phi i32 [ undef, %95 ], [ %110, %103 ]
  %120 = icmp ult i64 %96, 28
  br i1 %120, label %121, label %156

121:                                              ; preds = %156, %115
  %122 = phi i32 [ %119, %115 ], [ %190, %156 ]
  %123 = sub i64 %96, %97
  %124 = getelementptr i8, i8* %91, i64 %98
  br label %125

125:                                              ; preds = %121, %89
  %126 = phi i64 [ %90, %89 ], [ %123, %121 ]
  %127 = phi i8* [ %91, %89 ], [ %124, %121 ]
  %128 = phi i32 [ %93, %89 ], [ %122, %121 ]
  %129 = icmp ugt i64 %126, 1
  br i1 %129, label %130, label %198

130:                                              ; preds = %125
  %131 = add i64 %126, -2
  %132 = and i64 %131, -2
  %133 = add nuw i64 %132, 2
  %134 = lshr i64 %131, 1
  %135 = add nuw i64 %134, 1
  %136 = and i64 %135, 7
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %150, label %138

138:                                              ; preds = %130, %138
  %139 = phi i32 [ %145, %138 ], [ %128, %130 ]
  %140 = phi i8* [ %147, %138 ], [ %127, %130 ]
  %141 = phi i64 [ %146, %138 ], [ %126, %130 ]
  %142 = phi i64 [ %148, %138 ], [ %136, %130 ]
  %143 = bitcast i8* %140 to i16*
  %144 = load i16, i16* %143, align 2
  %145 = tail call i32 @llvm.x86.sse42.crc32.32.16(i32 %139, i16 %144) #2
  %146 = add i64 %141, -2
  %147 = getelementptr inbounds i8, i8* %140, i64 2
  %148 = add i64 %142, -1
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %138, !llvm.loop !5

150:                                              ; preds = %138, %130
  %151 = phi i32 [ %128, %130 ], [ %145, %138 ]
  %152 = phi i8* [ %127, %130 ], [ %147, %138 ]
  %153 = phi i64 [ %126, %130 ], [ %146, %138 ]
  %154 = phi i32 [ undef, %130 ], [ %145, %138 ]
  %155 = icmp ult i64 %131, 14
  br i1 %155, label %194, label %224

156:                                              ; preds = %115, %156
  %157 = phi i32 [ %190, %156 ], [ %116, %115 ]
  %158 = phi i8* [ %192, %156 ], [ %117, %115 ]
  %159 = phi i64 [ %191, %156 ], [ %118, %115 ]
  %160 = bitcast i8* %158 to i32*
  %161 = load i32, i32* %160, align 4
  %162 = tail call i32 @llvm.x86.sse42.crc32.32.32(i32 %157, i32 %161) #2
  %163 = getelementptr inbounds i8, i8* %158, i64 4
  %164 = bitcast i8* %163 to i32*
  %165 = load i32, i32* %164, align 4
  %166 = tail call i32 @llvm.x86.sse42.crc32.32.32(i32 %162, i32 %165) #2
  %167 = getelementptr inbounds i8, i8* %158, i64 8
  %168 = bitcast i8* %167 to i32*
  %169 = load i32, i32* %168, align 4
  %170 = tail call i32 @llvm.x86.sse42.crc32.32.32(i32 %166, i32 %169) #2
  %171 = getelementptr inbounds i8, i8* %158, i64 12
  %172 = bitcast i8* %171 to i32*
  %173 = load i32, i32* %172, align 4
  %174 = tail call i32 @llvm.x86.sse42.crc32.32.32(i32 %170, i32 %173) #2
  %175 = getelementptr inbounds i8, i8* %158, i64 16
  %176 = bitcast i8* %175 to i32*
  %177 = load i32, i32* %176, align 4
  %178 = tail call i32 @llvm.x86.sse42.crc32.32.32(i32 %174, i32 %177) #2
  %179 = getelementptr inbounds i8, i8* %158, i64 20
  %180 = bitcast i8* %179 to i32*
  %181 = load i32, i32* %180, align 4
  %182 = tail call i32 @llvm.x86.sse42.crc32.32.32(i32 %178, i32 %181) #2
  %183 = getelementptr inbounds i8, i8* %158, i64 24
  %184 = bitcast i8* %183 to i32*
  %185 = load i32, i32* %184, align 4
  %186 = tail call i32 @llvm.x86.sse42.crc32.32.32(i32 %182, i32 %185) #2
  %187 = getelementptr inbounds i8, i8* %158, i64 28
  %188 = bitcast i8* %187 to i32*
  %189 = load i32, i32* %188, align 4
  %190 = tail call i32 @llvm.x86.sse42.crc32.32.32(i32 %186, i32 %189) #2
  %191 = add i64 %159, -32
  %192 = getelementptr inbounds i8, i8* %158, i64 32
  %193 = icmp ugt i64 %191, 3
  br i1 %193, label %156, label %121

194:                                              ; preds = %224, %150
  %195 = phi i32 [ %154, %150 ], [ %258, %224 ]
  %196 = sub i64 %131, %132
  %197 = getelementptr i8, i8* %127, i64 %133
  br label %198

198:                                              ; preds = %194, %125
  %199 = phi i64 [ %126, %125 ], [ %196, %194 ]
  %200 = phi i8* [ %127, %125 ], [ %197, %194 ]
  %201 = phi i32 [ %128, %125 ], [ %195, %194 ]
  %202 = icmp eq i64 %199, 0
  br i1 %202, label %292, label %203

203:                                              ; preds = %198
  %204 = add i64 %199, -1
  %205 = and i64 %199, 7
  %206 = icmp eq i64 %205, 0
  br i1 %206, label %218, label %207

207:                                              ; preds = %203, %207
  %208 = phi i32 [ %213, %207 ], [ %201, %203 ]
  %209 = phi i8* [ %215, %207 ], [ %200, %203 ]
  %210 = phi i64 [ %214, %207 ], [ %199, %203 ]
  %211 = phi i64 [ %216, %207 ], [ %205, %203 ]
  %212 = load i8, i8* %209, align 1
  %213 = tail call i32 @llvm.x86.sse42.crc32.32.8(i32 %208, i8 %212) #2
  %214 = add i64 %210, -1
  %215 = getelementptr inbounds i8, i8* %209, i64 1
  %216 = add i64 %211, -1
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %218, label %207, !llvm.loop !6

218:                                              ; preds = %207, %203
  %219 = phi i32 [ undef, %203 ], [ %213, %207 ]
  %220 = phi i32 [ %201, %203 ], [ %213, %207 ]
  %221 = phi i8* [ %200, %203 ], [ %215, %207 ]
  %222 = phi i64 [ %199, %203 ], [ %214, %207 ]
  %223 = icmp ult i64 %204, 7
  br i1 %223, label %292, label %262

224:                                              ; preds = %150, %224
  %225 = phi i32 [ %258, %224 ], [ %151, %150 ]
  %226 = phi i8* [ %260, %224 ], [ %152, %150 ]
  %227 = phi i64 [ %259, %224 ], [ %153, %150 ]
  %228 = bitcast i8* %226 to i16*
  %229 = load i16, i16* %228, align 2
  %230 = tail call i32 @llvm.x86.sse42.crc32.32.16(i32 %225, i16 %229) #2
  %231 = getelementptr inbounds i8, i8* %226, i64 2
  %232 = bitcast i8* %231 to i16*
  %233 = load i16, i16* %232, align 2
  %234 = tail call i32 @llvm.x86.sse42.crc32.32.16(i32 %230, i16 %233) #2
  %235 = getelementptr inbounds i8, i8* %226, i64 4
  %236 = bitcast i8* %235 to i16*
  %237 = load i16, i16* %236, align 2
  %238 = tail call i32 @llvm.x86.sse42.crc32.32.16(i32 %234, i16 %237) #2
  %239 = getelementptr inbounds i8, i8* %226, i64 6
  %240 = bitcast i8* %239 to i16*
  %241 = load i16, i16* %240, align 2
  %242 = tail call i32 @llvm.x86.sse42.crc32.32.16(i32 %238, i16 %241) #2
  %243 = getelementptr inbounds i8, i8* %226, i64 8
  %244 = bitcast i8* %243 to i16*
  %245 = load i16, i16* %244, align 2
  %246 = tail call i32 @llvm.x86.sse42.crc32.32.16(i32 %242, i16 %245) #2
  %247 = getelementptr inbounds i8, i8* %226, i64 10
  %248 = bitcast i8* %247 to i16*
  %249 = load i16, i16* %248, align 2
  %250 = tail call i32 @llvm.x86.sse42.crc32.32.16(i32 %246, i16 %249) #2
  %251 = getelementptr inbounds i8, i8* %226, i64 12
  %252 = bitcast i8* %251 to i16*
  %253 = load i16, i16* %252, align 2
  %254 = tail call i32 @llvm.x86.sse42.crc32.32.16(i32 %250, i16 %253) #2
  %255 = getelementptr inbounds i8, i8* %226, i64 14
  %256 = bitcast i8* %255 to i16*
  %257 = load i16, i16* %256, align 2
  %258 = tail call i32 @llvm.x86.sse42.crc32.32.16(i32 %254, i16 %257) #2
  %259 = add i64 %227, -16
  %260 = getelementptr inbounds i8, i8* %226, i64 16
  %261 = icmp ugt i64 %259, 1
  br i1 %261, label %224, label %194

262:                                              ; preds = %218, %262
  %263 = phi i32 [ %288, %262 ], [ %220, %218 ]
  %264 = phi i8* [ %290, %262 ], [ %221, %218 ]
  %265 = phi i64 [ %289, %262 ], [ %222, %218 ]
  %266 = load i8, i8* %264, align 1
  %267 = tail call i32 @llvm.x86.sse42.crc32.32.8(i32 %263, i8 %266) #2
  %268 = getelementptr inbounds i8, i8* %264, i64 1
  %269 = load i8, i8* %268, align 1
  %270 = tail call i32 @llvm.x86.sse42.crc32.32.8(i32 %267, i8 %269) #2
  %271 = getelementptr inbounds i8, i8* %264, i64 2
  %272 = load i8, i8* %271, align 1
  %273 = tail call i32 @llvm.x86.sse42.crc32.32.8(i32 %270, i8 %272) #2
  %274 = getelementptr inbounds i8, i8* %264, i64 3
  %275 = load i8, i8* %274, align 1
  %276 = tail call i32 @llvm.x86.sse42.crc32.32.8(i32 %273, i8 %275) #2
  %277 = getelementptr inbounds i8, i8* %264, i64 4
  %278 = load i8, i8* %277, align 1
  %279 = tail call i32 @llvm.x86.sse42.crc32.32.8(i32 %276, i8 %278) #2
  %280 = getelementptr inbounds i8, i8* %264, i64 5
  %281 = load i8, i8* %280, align 1
  %282 = tail call i32 @llvm.x86.sse42.crc32.32.8(i32 %279, i8 %281) #2
  %283 = getelementptr inbounds i8, i8* %264, i64 6
  %284 = load i8, i8* %283, align 1
  %285 = tail call i32 @llvm.x86.sse42.crc32.32.8(i32 %282, i8 %284) #2
  %286 = getelementptr inbounds i8, i8* %264, i64 7
  %287 = load i8, i8* %286, align 1
  %288 = tail call i32 @llvm.x86.sse42.crc32.32.8(i32 %285, i8 %287) #2
  %289 = add i64 %265, -8
  %290 = getelementptr inbounds i8, i8* %264, i64 8
  %291 = icmp eq i64 %289, 0
  br i1 %291, label %292, label %262

292:                                              ; preds = %12, %218, %262, %3, %198
  %293 = phi i32 [ %201, %198 ], [ -1, %3 ], [ %219, %218 ], [ %288, %262 ], [ %14, %12 ]
  %294 = xor i32 %293, -1
  ret i32 %294
}

; Function Attrs: nounwind readnone
declare i32 @llvm.x86.sse42.crc32.32.8(i32, i8) #1

; Function Attrs: nounwind readnone
declare i64 @llvm.x86.sse42.crc32.64.64(i64, i64) #1

; Function Attrs: nounwind readnone
declare i32 @llvm.x86.sse42.crc32.32.32(i32, i32) #1

; Function Attrs: nounwind readnone
declare i32 @llvm.x86.sse42.crc32.32.16(i32, i16) #1

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
