; ModuleID = '../../third_party/libjxl/src/lib/jxl/huffman_tree.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/huffman_tree.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.std::nothrow_t" = type { i8 }
%"struct.jxl::HuffmanTree" = type { i32, i16, i16 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.jxl::HuffmanTree"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__113__stable_sortIRPFbRKN3jxl11HuffmanTreeES4_ENS_11__wrap_iterIPS2_EEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeEl = comdat any

$_ZNSt3__118__stable_sort_moveIRPFbRKN3jxl11HuffmanTreeES4_ENS_11__wrap_iterIPS2_EEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeE = comdat any

$_ZNSt3__115__inplace_mergeIRPFbRKN3jxl11HuffmanTreeES4_ENS_11__wrap_iterIPS2_EEEEvT0_SB_SB_T_NS_15iterator_traitsISB_E15difference_typeESF_PNSE_10value_typeEl = comdat any

@_ZZN3jxl12_GLOBAL__N_111ReverseBitsEitE4kLut = internal unnamed_addr constant [16 x i64] [i64 0, i64 8, i64 4, i64 12, i64 2, i64 10, i64 6, i64 14, i64 1, i64 9, i64 5, i64 13, i64 3, i64 11, i64 7, i64 15], align 16
@_ZSt7nothrow = external global %"struct.std::nothrow_t", align 1

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN3jxl8SetDepthERKNS_11HuffmanTreeEPS0_Phh(%"struct.jxl::HuffmanTree"* nocapture readonly dereferenceable(8), %"struct.jxl::HuffmanTree"* readonly, i8*, i8 zeroext) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %0, i64 0, i32 1
  %6 = load i16, i16* %5, align 4
  %7 = icmp sgt i16 %6, -1
  br i1 %7, label %8, label %22

8:                                                ; preds = %4, %8
  %9 = phi i16 [ %20, %8 ], [ %6, %4 ]
  %10 = phi i8 [ %12, %8 ], [ %3, %4 ]
  %11 = phi %"struct.jxl::HuffmanTree"* [ %18, %8 ], [ %0, %4 ]
  %12 = add i8 %10, 1
  %13 = sext i16 %9 to i64
  %14 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %1, i64 %13
  tail call void @_ZN3jxl8SetDepthERKNS_11HuffmanTreeEPS0_Phh(%"struct.jxl::HuffmanTree"* dereferenceable(8) %14, %"struct.jxl::HuffmanTree"* %1, i8* %2, i8 zeroext %12)
  %15 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %11, i64 0, i32 2
  %16 = load i16, i16* %15, align 2
  %17 = sext i16 %16 to i64
  %18 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %1, i64 %17
  %19 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %1, i64 %17, i32 1
  %20 = load i16, i16* %19, align 4
  %21 = icmp sgt i16 %20, -1
  br i1 %21, label %8, label %22

22:                                               ; preds = %8, %4
  %23 = phi %"struct.jxl::HuffmanTree"* [ %0, %4 ], [ %18, %8 ]
  %24 = phi i8 [ %3, %4 ], [ %12, %8 ]
  %25 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %23, i64 0, i32 2
  %26 = load i16, i16* %25, align 2
  %27 = sext i16 %26 to i64
  %28 = getelementptr inbounds i8, i8* %2, i64 %27
  store i8 %24, i8* %28, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl17CreateHuffmanTreeEPKjmiPh(i32* nocapture readonly, i64, i32, i8*) local_unnamed_addr #1 {
  %5 = alloca i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)*, align 8
  %6 = alloca %"class.std::__1::vector", align 8
  %7 = bitcast %"class.std::__1::vector"* %6 to i8*
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  %11 = shl i64 %1, 1
  %12 = or i64 %11, 1
  %13 = bitcast %"struct.jxl::HuffmanTree"** %10 to i64*
  %14 = bitcast %"class.std::__1::vector"* %6 to i64*
  %15 = bitcast %"struct.jxl::HuffmanTree"** %9 to i64*
  %16 = icmp ugt i64 %12, 2305843009213693951
  %17 = shl i64 %12, 3
  %18 = icmp eq i64 %1, 0
  %19 = bitcast i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** %5 to i8*
  %20 = getelementptr inbounds i8, i8* %3, i64 %1
  %21 = getelementptr inbounds i8, i8* %3, i64 1
  %22 = icmp ult i64 %1, 2
  %23 = add i64 %1, 3
  %24 = add i64 %1, -2
  %25 = and i64 %23, 3
  %26 = icmp eq i64 %25, 0
  %27 = icmp ult i64 %24, 3
  br label %28

28:                                               ; preds = %4, %422
  %29 = phi i32 [ 1, %4 ], [ %424, %422 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 24, i1 false) #10
  br i1 %16, label %30, label %31

30:                                               ; preds = %28
  call void @abort() #11
  unreachable

31:                                               ; preds = %28
  %32 = call i8* @_Znwm(i64 %17) #12
  %33 = bitcast i8* %32 to %"struct.jxl::HuffmanTree"*
  %34 = ptrtoint i8* %32 to i64
  %35 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %33, i64 %12
  %36 = ptrtoint %"struct.jxl::HuffmanTree"* %35 to i64
  %37 = ptrtoint i8* %32 to i64
  store i64 %37, i64* %14, align 8
  store i64 %34, i64* %15, align 8
  store i64 %36, i64* %13, align 8
  br i1 %18, label %38, label %41

38:                                               ; preds = %31
  %39 = bitcast i8* %32 to %"struct.jxl::HuffmanTree"*
  %40 = bitcast i8* %32 to %"struct.jxl::HuffmanTree"*
  br label %48

41:                                               ; preds = %31
  %42 = add i32 %29, -1
  br label %57

43:                                               ; preds = %123
  %44 = load i64, i64* %15, align 8
  %45 = load i64, i64* %14, align 8
  %46 = inttoptr i64 %44 to %"struct.jxl::HuffmanTree"*
  %47 = inttoptr i64 %45 to %"struct.jxl::HuffmanTree"*
  br label %48

48:                                               ; preds = %38, %43
  %49 = phi %"struct.jxl::HuffmanTree"* [ %40, %38 ], [ %47, %43 ]
  %50 = phi %"struct.jxl::HuffmanTree"* [ %39, %38 ], [ %47, %43 ]
  %51 = phi %"struct.jxl::HuffmanTree"* [ %33, %38 ], [ %46, %43 ]
  %52 = phi i64 [ %37, %38 ], [ %45, %43 ]
  %53 = phi i64 [ %34, %38 ], [ %44, %43 ]
  %54 = sub i64 %53, %52
  %55 = ashr exact i64 %54, 3
  %56 = icmp eq i64 %54, 8
  br i1 %56, label %125, label %130

57:                                               ; preds = %41, %123
  %58 = phi i64 [ %1, %41 ], [ %59, %123 ]
  %59 = add i64 %58, -1
  %60 = getelementptr inbounds i32, i32* %0, i64 %59
  %61 = load i32, i32* %60, align 4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %123, label %63

63:                                               ; preds = %57
  %64 = icmp ult i32 %61, %42
  %65 = select i1 %64, i32 %42, i32 %61
  %66 = trunc i64 %59 to i16
  %67 = load %"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"** %9, align 8
  %68 = load %"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"** %10, align 8
  %69 = icmp ult %"struct.jxl::HuffmanTree"* %67, %68
  %70 = ptrtoint %"struct.jxl::HuffmanTree"* %68 to i64
  br i1 %69, label %71, label %77

71:                                               ; preds = %63
  %72 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %67, i64 0, i32 0
  store i32 %65, i32* %72, align 4
  %73 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %67, i64 0, i32 1
  store i16 -1, i16* %73, align 4
  %74 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %67, i64 0, i32 2
  store i16 %66, i16* %74, align 2
  %75 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %67, i64 1
  %76 = ptrtoint %"struct.jxl::HuffmanTree"* %75 to i64
  store i64 %76, i64* %15, align 8
  br label %123

77:                                               ; preds = %63
  %78 = ptrtoint %"struct.jxl::HuffmanTree"* %67 to i64
  %79 = load i64, i64* %14, align 8
  %80 = sub i64 %78, %79
  %81 = ashr exact i64 %80, 3
  %82 = add nsw i64 %81, 1
  %83 = icmp ugt i64 %82, 2305843009213693951
  br i1 %83, label %84, label %86

84:                                               ; preds = %77
  %85 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %85) #11
  unreachable

86:                                               ; preds = %77
  %87 = sub i64 %70, %79
  %88 = ashr exact i64 %87, 3
  %89 = icmp ult i64 %88, 1152921504606846975
  br i1 %89, label %90, label %98

90:                                               ; preds = %86
  %91 = ashr exact i64 %87, 2
  %92 = icmp ult i64 %91, %82
  %93 = select i1 %92, i64 %82, i64 %91
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %103, label %95

95:                                               ; preds = %90
  %96 = icmp ugt i64 %93, 2305843009213693951
  br i1 %96, label %97, label %98

97:                                               ; preds = %95
  call void @abort() #11
  unreachable

98:                                               ; preds = %95, %86
  %99 = phi i64 [ %93, %95 ], [ 2305843009213693951, %86 ]
  %100 = shl i64 %99, 3
  %101 = call i8* @_Znwm(i64 %100) #12
  %102 = bitcast i8* %101 to %"struct.jxl::HuffmanTree"*
  br label %103

103:                                              ; preds = %98, %90
  %104 = phi i64 [ %99, %98 ], [ 0, %90 ]
  %105 = phi i8* [ %101, %98 ], [ null, %90 ]
  %106 = phi %"struct.jxl::HuffmanTree"* [ %102, %98 ], [ null, %90 ]
  %107 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %106, i64 %81
  %108 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %106, i64 %104
  %109 = ptrtoint %"struct.jxl::HuffmanTree"* %108 to i64
  %110 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %107, i64 0, i32 0
  store i32 %65, i32* %110, align 4
  %111 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %106, i64 %81, i32 1
  store i16 -1, i16* %111, align 4
  %112 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %106, i64 %81, i32 2
  store i16 %66, i16* %112, align 2
  %113 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %107, i64 1
  %114 = ptrtoint %"struct.jxl::HuffmanTree"* %113 to i64
  %115 = ptrtoint %"struct.jxl::HuffmanTree"* %106 to i64
  %116 = icmp sgt i64 %80, 0
  br i1 %116, label %117, label %119

117:                                              ; preds = %103
  %118 = inttoptr i64 %79 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %105, i8* align 4 %118, i64 %80, i1 false) #10
  br label %119

119:                                              ; preds = %117, %103
  store i64 %115, i64* %14, align 8
  store i64 %114, i64* %15, align 8
  store i64 %109, i64* %13, align 8
  %120 = icmp eq i64 %79, 0
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = inttoptr i64 %79 to i8*
  call void @_ZdlPv(i8* %122) #12
  br label %123

123:                                              ; preds = %71, %119, %121, %57
  %124 = icmp eq i64 %59, 0
  br i1 %124, label %43, label %57

125:                                              ; preds = %48
  %126 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %49, i64 0, i32 2
  %127 = load i16, i16* %126, align 2
  %128 = sext i16 %127 to i64
  %129 = getelementptr inbounds i8, i8* %3, i64 %128
  store i8 1, i8* %129, align 1
  br label %415

130:                                              ; preds = %48
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19)
  %131 = ptrtoint %"struct.jxl::HuffmanTree"* %51 to i64
  store i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)* @_ZN3jxlL7CompareERKNS_11HuffmanTreeES2_, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** %5, align 8
  %132 = sub i64 %131, %52
  %133 = ashr exact i64 %132, 3
  %134 = icmp sgt i64 %132, 1024
  br i1 %134, label %135, label %146

135:                                              ; preds = %130
  %136 = icmp slt i64 %133, 1152921504606846975
  %137 = select i1 %136, i64 %133, i64 1152921504606846975
  br label %138

138:                                              ; preds = %143, %135
  %139 = phi i64 [ %144, %143 ], [ %137, %135 ]
  %140 = shl i64 %139, 3
  %141 = call noalias i8* @_ZnwmRKSt9nothrow_t(i64 %140, %"struct.std::nothrow_t"* nonnull dereferenceable(1) @_ZSt7nothrow) #10
  %142 = icmp eq i8* %141, null
  br i1 %142, label %143, label %147

143:                                              ; preds = %138
  %144 = lshr i64 %139, 1
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %146, label %138

146:                                              ; preds = %143, %130
  call void @_ZNSt3__113__stable_sortIRPFbRKN3jxl11HuffmanTreeES4_ENS_11__wrap_iterIPS2_EEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeEl(%"struct.jxl::HuffmanTree"* %49, %"struct.jxl::HuffmanTree"* %51, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** nonnull dereferenceable(8) %5, i64 %133, %"struct.jxl::HuffmanTree"* null, i64 0) #10
  br label %149

147:                                              ; preds = %138
  %148 = bitcast i8* %141 to %"struct.jxl::HuffmanTree"*
  call void @_ZNSt3__113__stable_sortIRPFbRKN3jxl11HuffmanTreeES4_ENS_11__wrap_iterIPS2_EEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeEl(%"struct.jxl::HuffmanTree"* %49, %"struct.jxl::HuffmanTree"* %51, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** nonnull dereferenceable(8) %5, i64 %133, %"struct.jxl::HuffmanTree"* nonnull %148, i64 %139) #10
  call void @_ZdlPv(i8* nonnull %141) #12
  br label %149

149:                                              ; preds = %146, %147
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19)
  %150 = load %"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"** %9, align 8
  %151 = load %"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"** %10, align 8
  %152 = icmp eq %"struct.jxl::HuffmanTree"* %150, %151
  %153 = ptrtoint %"struct.jxl::HuffmanTree"* %151 to i64
  br i1 %152, label %158, label %154

154:                                              ; preds = %149
  %155 = bitcast %"struct.jxl::HuffmanTree"* %150 to i64*
  store i64 -1, i64* %155, align 4
  %156 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %150, i64 1
  %157 = ptrtoint %"struct.jxl::HuffmanTree"* %156 to i64
  store i64 %157, i64* %15, align 8
  br label %204

158:                                              ; preds = %149
  %159 = ptrtoint %"struct.jxl::HuffmanTree"* %150 to i64
  %160 = load i64, i64* %14, align 8
  %161 = sub i64 %159, %160
  %162 = ashr exact i64 %161, 3
  %163 = add nsw i64 %162, 1
  %164 = icmp ugt i64 %163, 2305843009213693951
  br i1 %164, label %165, label %167

165:                                              ; preds = %158
  %166 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %166) #11
  unreachable

167:                                              ; preds = %158
  %168 = sub i64 %153, %160
  %169 = ashr exact i64 %168, 3
  %170 = icmp ult i64 %169, 1152921504606846975
  br i1 %170, label %171, label %179

171:                                              ; preds = %167
  %172 = ashr exact i64 %168, 2
  %173 = icmp ult i64 %172, %163
  %174 = select i1 %173, i64 %163, i64 %172
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %184, label %176

176:                                              ; preds = %171
  %177 = icmp ugt i64 %174, 2305843009213693951
  br i1 %177, label %178, label %179

178:                                              ; preds = %176
  call void @abort() #11
  unreachable

179:                                              ; preds = %176, %167
  %180 = phi i64 [ %174, %176 ], [ 2305843009213693951, %167 ]
  %181 = shl i64 %180, 3
  %182 = call i8* @_Znwm(i64 %181) #12
  %183 = bitcast i8* %182 to %"struct.jxl::HuffmanTree"*
  br label %184

184:                                              ; preds = %179, %171
  %185 = phi i64 [ %180, %179 ], [ 0, %171 ]
  %186 = phi i8* [ %182, %179 ], [ null, %171 ]
  %187 = phi %"struct.jxl::HuffmanTree"* [ %183, %179 ], [ null, %171 ]
  %188 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %187, i64 %162
  %189 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %187, i64 %185
  %190 = ptrtoint %"struct.jxl::HuffmanTree"* %189 to i64
  %191 = bitcast %"struct.jxl::HuffmanTree"* %188 to i64*
  store i64 -1, i64* %191, align 4
  %192 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %188, i64 1
  %193 = ptrtoint %"struct.jxl::HuffmanTree"* %192 to i64
  %194 = ptrtoint %"struct.jxl::HuffmanTree"* %187 to i64
  %195 = icmp sgt i64 %161, 0
  br i1 %195, label %196, label %198

196:                                              ; preds = %184
  %197 = inttoptr i64 %160 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %186, i8* align 4 %197, i64 %161, i1 false) #10
  br label %198

198:                                              ; preds = %196, %184
  store i64 %194, i64* %14, align 8
  store i64 %193, i64* %15, align 8
  store i64 %190, i64* %13, align 8
  %199 = icmp eq i64 %160, 0
  br i1 %199, label %204, label %200

200:                                              ; preds = %198
  %201 = inttoptr i64 %160 to i8*
  call void @_ZdlPv(i8* %201) #12
  %202 = load %"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"** %9, align 8
  %203 = ptrtoint %"struct.jxl::HuffmanTree"* %202 to i64
  br label %204

204:                                              ; preds = %154, %198, %200
  %205 = phi i64 [ %157, %154 ], [ %193, %198 ], [ %203, %200 ]
  %206 = phi %"struct.jxl::HuffmanTree"* [ %156, %154 ], [ %192, %198 ], [ %202, %200 ]
  %207 = load %"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"** %10, align 8
  %208 = icmp eq %"struct.jxl::HuffmanTree"* %206, %207
  br i1 %208, label %213, label %209

209:                                              ; preds = %204
  %210 = bitcast %"struct.jxl::HuffmanTree"* %206 to i64*
  store i64 -1, i64* %210, align 4
  %211 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %206, i64 1
  %212 = ptrtoint %"struct.jxl::HuffmanTree"* %211 to i64
  store i64 %212, i64* %15, align 8
  br label %259

213:                                              ; preds = %204
  %214 = ptrtoint %"struct.jxl::HuffmanTree"* %207 to i64
  %215 = load i64, i64* %14, align 8
  %216 = sub i64 %214, %215
  %217 = ashr exact i64 %216, 3
  %218 = add nsw i64 %217, 1
  %219 = icmp ugt i64 %218, 2305843009213693951
  br i1 %219, label %220, label %222

220:                                              ; preds = %213
  %221 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %221) #11
  unreachable

222:                                              ; preds = %213
  %223 = icmp ult i64 %217, 1152921504606846975
  br i1 %223, label %224, label %232

224:                                              ; preds = %222
  %225 = ashr exact i64 %216, 2
  %226 = icmp ult i64 %225, %218
  %227 = select i1 %226, i64 %218, i64 %225
  %228 = icmp eq i64 %227, 0
  br i1 %228, label %237, label %229

229:                                              ; preds = %224
  %230 = icmp ugt i64 %227, 2305843009213693951
  br i1 %230, label %231, label %232

231:                                              ; preds = %229
  call void @abort() #11
  unreachable

232:                                              ; preds = %229, %222
  %233 = phi i64 [ %227, %229 ], [ 2305843009213693951, %222 ]
  %234 = shl i64 %233, 3
  %235 = call i8* @_Znwm(i64 %234) #12
  %236 = bitcast i8* %235 to %"struct.jxl::HuffmanTree"*
  br label %237

237:                                              ; preds = %232, %224
  %238 = phi i64 [ %233, %232 ], [ 0, %224 ]
  %239 = phi %"struct.jxl::HuffmanTree"* [ %236, %232 ], [ null, %224 ]
  %240 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %239, i64 %217
  %241 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %239, i64 %238
  %242 = ptrtoint %"struct.jxl::HuffmanTree"* %241 to i64
  %243 = bitcast %"struct.jxl::HuffmanTree"* %240 to i64*
  store i64 -1, i64* %243, align 4
  %244 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %240, i64 1
  %245 = ptrtoint %"struct.jxl::HuffmanTree"* %244 to i64
  %246 = sub i64 %205, %215
  %247 = ashr exact i64 %246, 3
  %248 = sub nsw i64 0, %247
  %249 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %240, i64 %248
  %250 = ptrtoint %"struct.jxl::HuffmanTree"* %249 to i64
  %251 = icmp sgt i64 %246, 0
  br i1 %251, label %252, label %255

252:                                              ; preds = %237
  %253 = bitcast %"struct.jxl::HuffmanTree"* %249 to i8*
  %254 = inttoptr i64 %215 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %253, i8* align 4 %254, i64 %246, i1 false) #10
  br label %255

255:                                              ; preds = %252, %237
  store i64 %250, i64* %14, align 8
  store i64 %245, i64* %15, align 8
  store i64 %242, i64* %13, align 8
  %256 = icmp eq i64 %215, 0
  br i1 %256, label %259, label %257

257:                                              ; preds = %255
  %258 = inttoptr i64 %215 to i8*
  call void @_ZdlPv(i8* %258) #12
  br label %259

259:                                              ; preds = %209, %255, %257
  %260 = add nsw i64 %55, -1
  %261 = icmp eq i64 %260, 0
  br i1 %261, label %264, label %262

262:                                              ; preds = %259
  %263 = add nsw i64 %55, 1
  br label %316

264:                                              ; preds = %412, %259
  %265 = ashr exact i64 %54, 2
  %266 = add nsw i64 %265, -1
  %267 = load %"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"** %8, align 8
  %268 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %267, i64 %266
  call void @_ZN3jxl8SetDepthERKNS_11HuffmanTreeEPS0_Phh(%"struct.jxl::HuffmanTree"* dereferenceable(8) %268, %"struct.jxl::HuffmanTree"* %267, i8* %3, i8 zeroext 0)
  br i1 %22, label %309, label %269

269:                                              ; preds = %264
  br i1 %26, label %281, label %270

270:                                              ; preds = %269, %270
  %271 = phi i8* [ %278, %270 ], [ %21, %269 ]
  %272 = phi i8* [ %277, %270 ], [ %3, %269 ]
  %273 = phi i64 [ %279, %270 ], [ %25, %269 ]
  %274 = load i8, i8* %272, align 1
  %275 = load i8, i8* %271, align 1
  %276 = icmp ult i8 %274, %275
  %277 = select i1 %276, i8* %271, i8* %272
  %278 = getelementptr inbounds i8, i8* %271, i64 1
  %279 = add i64 %273, -1
  %280 = icmp eq i64 %279, 0
  br i1 %280, label %281, label %270, !llvm.loop !2

281:                                              ; preds = %270, %269
  %282 = phi i8* [ undef, %269 ], [ %277, %270 ]
  %283 = phi i8* [ %21, %269 ], [ %278, %270 ]
  %284 = phi i8* [ %3, %269 ], [ %277, %270 ]
  br i1 %27, label %309, label %285

285:                                              ; preds = %281, %285
  %286 = phi i8* [ %307, %285 ], [ %283, %281 ]
  %287 = phi i8* [ %306, %285 ], [ %284, %281 ]
  %288 = load i8, i8* %287, align 1
  %289 = load i8, i8* %286, align 1
  %290 = icmp ult i8 %288, %289
  %291 = select i1 %290, i8* %286, i8* %287
  %292 = getelementptr inbounds i8, i8* %286, i64 1
  %293 = load i8, i8* %291, align 1
  %294 = load i8, i8* %292, align 1
  %295 = icmp ult i8 %293, %294
  %296 = select i1 %295, i8* %292, i8* %291
  %297 = getelementptr inbounds i8, i8* %286, i64 2
  %298 = load i8, i8* %296, align 1
  %299 = load i8, i8* %297, align 1
  %300 = icmp ult i8 %298, %299
  %301 = select i1 %300, i8* %297, i8* %296
  %302 = getelementptr inbounds i8, i8* %286, i64 3
  %303 = load i8, i8* %301, align 1
  %304 = load i8, i8* %302, align 1
  %305 = icmp ult i8 %303, %304
  %306 = select i1 %305, i8* %302, i8* %301
  %307 = getelementptr inbounds i8, i8* %286, i64 4
  %308 = icmp eq i8* %307, %20
  br i1 %308, label %309, label %285

309:                                              ; preds = %281, %285, %264
  %310 = phi i8* [ %3, %264 ], [ %282, %281 ], [ %306, %285 ]
  %311 = load i8, i8* %310, align 1
  %312 = zext i8 %311 to i32
  %313 = icmp sgt i32 %312, %2
  %314 = select i1 %313, i32 0, i32 2
  %315 = load %"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"** %8, align 8
  br label %415

316:                                              ; preds = %262, %412
  %317 = phi i64 [ %413, %412 ], [ %260, %262 ]
  %318 = phi i64 [ %341, %412 ], [ %263, %262 ]
  %319 = phi i64 [ %339, %412 ], [ 0, %262 ]
  %320 = load %"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"** %8, align 8
  %321 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %320, i64 %319, i32 0
  %322 = load i32, i32* %321, align 4
  %323 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %320, i64 %318, i32 0
  %324 = load i32, i32* %323, align 4
  %325 = icmp ugt i32 %322, %324
  %326 = xor i1 %325, true
  %327 = zext i1 %326 to i64
  %328 = add i64 %319, %327
  %329 = zext i1 %325 to i64
  %330 = add i64 %318, %329
  %331 = select i1 %325, i64 %318, i64 %319
  %332 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %320, i64 %328, i32 0
  %333 = load i32, i32* %332, align 4
  %334 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %320, i64 %330, i32 0
  %335 = load i32, i32* %334, align 4
  %336 = icmp ugt i32 %333, %335
  %337 = xor i1 %336, true
  %338 = zext i1 %337 to i64
  %339 = add i64 %328, %338
  %340 = zext i1 %336 to i64
  %341 = add i64 %330, %340
  %342 = select i1 %336, i64 %330, i64 %328
  %343 = load i64, i64* %15, align 8
  %344 = ptrtoint %"struct.jxl::HuffmanTree"* %320 to i64
  %345 = sub i64 %343, %344
  %346 = ashr exact i64 %345, 3
  %347 = add nsw i64 %346, -1
  %348 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %320, i64 %331, i32 0
  %349 = load i32, i32* %348, align 4
  %350 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %320, i64 %342, i32 0
  %351 = load i32, i32* %350, align 4
  %352 = add i32 %351, %349
  %353 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %320, i64 %347, i32 0
  store i32 %352, i32* %353, align 4
  %354 = trunc i64 %331 to i16
  %355 = load %"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"** %8, align 8
  %356 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %355, i64 %347, i32 1
  store i16 %354, i16* %356, align 4
  %357 = trunc i64 %342 to i16
  %358 = load %"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"** %8, align 8
  %359 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %358, i64 %347, i32 2
  store i16 %357, i16* %359, align 2
  %360 = load %"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"** %9, align 8
  %361 = load %"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"** %10, align 8
  %362 = icmp eq %"struct.jxl::HuffmanTree"* %360, %361
  %363 = ptrtoint %"struct.jxl::HuffmanTree"* %361 to i64
  br i1 %362, label %368, label %364

364:                                              ; preds = %316
  %365 = bitcast %"struct.jxl::HuffmanTree"* %360 to i64*
  store i64 -1, i64* %365, align 4
  %366 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %360, i64 1
  %367 = ptrtoint %"struct.jxl::HuffmanTree"* %366 to i64
  store i64 %367, i64* %15, align 8
  br label %412

368:                                              ; preds = %316
  %369 = ptrtoint %"struct.jxl::HuffmanTree"* %360 to i64
  %370 = load i64, i64* %14, align 8
  %371 = sub i64 %369, %370
  %372 = ashr exact i64 %371, 3
  %373 = add nsw i64 %372, 1
  %374 = icmp ugt i64 %373, 2305843009213693951
  br i1 %374, label %375, label %377

375:                                              ; preds = %368
  %376 = bitcast %"class.std::__1::vector"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %376) #11
  unreachable

377:                                              ; preds = %368
  %378 = sub i64 %363, %370
  %379 = ashr exact i64 %378, 3
  %380 = icmp ult i64 %379, 1152921504606846975
  br i1 %380, label %381, label %389

381:                                              ; preds = %377
  %382 = ashr exact i64 %378, 2
  %383 = icmp ult i64 %382, %373
  %384 = select i1 %383, i64 %373, i64 %382
  %385 = icmp eq i64 %384, 0
  br i1 %385, label %394, label %386

386:                                              ; preds = %381
  %387 = icmp ugt i64 %384, 2305843009213693951
  br i1 %387, label %388, label %389

388:                                              ; preds = %386
  call void @abort() #11
  unreachable

389:                                              ; preds = %386, %377
  %390 = phi i64 [ %384, %386 ], [ 2305843009213693951, %377 ]
  %391 = shl i64 %390, 3
  %392 = call i8* @_Znwm(i64 %391) #12
  %393 = bitcast i8* %392 to %"struct.jxl::HuffmanTree"*
  br label %394

394:                                              ; preds = %389, %381
  %395 = phi i64 [ %390, %389 ], [ 0, %381 ]
  %396 = phi i8* [ %392, %389 ], [ null, %381 ]
  %397 = phi %"struct.jxl::HuffmanTree"* [ %393, %389 ], [ null, %381 ]
  %398 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %397, i64 %372
  %399 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %397, i64 %395
  %400 = ptrtoint %"struct.jxl::HuffmanTree"* %399 to i64
  %401 = bitcast %"struct.jxl::HuffmanTree"* %398 to i64*
  store i64 -1, i64* %401, align 4
  %402 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %398, i64 1
  %403 = ptrtoint %"struct.jxl::HuffmanTree"* %402 to i64
  %404 = ptrtoint %"struct.jxl::HuffmanTree"* %397 to i64
  %405 = icmp sgt i64 %371, 0
  br i1 %405, label %406, label %408

406:                                              ; preds = %394
  %407 = inttoptr i64 %370 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %396, i8* align 4 %407, i64 %371, i1 false) #10
  br label %408

408:                                              ; preds = %406, %394
  store i64 %404, i64* %14, align 8
  store i64 %403, i64* %15, align 8
  store i64 %400, i64* %13, align 8
  %409 = icmp eq i64 %370, 0
  br i1 %409, label %412, label %410

410:                                              ; preds = %408
  %411 = inttoptr i64 %370 to i8*
  call void @_ZdlPv(i8* %411) #12
  br label %412

412:                                              ; preds = %364, %408, %410
  %413 = add i64 %317, -1
  %414 = icmp eq i64 %413, 0
  br i1 %414, label %264, label %316

415:                                              ; preds = %309, %125
  %416 = phi %"struct.jxl::HuffmanTree"* [ %50, %125 ], [ %315, %309 ]
  %417 = phi i32 [ 2, %125 ], [ %314, %309 ]
  %418 = icmp eq %"struct.jxl::HuffmanTree"* %416, null
  br i1 %418, label %422, label %419

419:                                              ; preds = %415
  %420 = ptrtoint %"struct.jxl::HuffmanTree"* %416 to i64
  store i64 %420, i64* %15, align 8
  %421 = bitcast %"struct.jxl::HuffmanTree"* %416 to i8*
  call void @_ZdlPv(i8* %421) #12
  br label %422

422:                                              ; preds = %415, %419
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #10
  %423 = icmp eq i32 %417, 0
  %424 = shl i32 %29, 1
  br i1 %423, label %28, label %425

425:                                              ; preds = %422
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: alwaysinline norecurse nounwind readonly ssp uwtable
define internal zeroext i1 @_ZN3jxlL7CompareERKNS_11HuffmanTreeES2_(%"struct.jxl::HuffmanTree"* nocapture readonly dereferenceable(8), %"struct.jxl::HuffmanTree"* nocapture readonly dereferenceable(8)) #3 {
  %3 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp ult i32 %4, %6
  ret i1 %7
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3jxl7ReverseEPhmm(i8* nocapture, i64, i64) local_unnamed_addr #4 {
  %4 = add i64 %2, -1
  %5 = icmp ugt i64 %4, %1
  br i1 %5, label %6, label %16

6:                                                ; preds = %3, %6
  %7 = phi i64 [ %14, %6 ], [ %4, %3 ]
  %8 = phi i64 [ %13, %6 ], [ %1, %3 ]
  %9 = getelementptr inbounds i8, i8* %0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = getelementptr inbounds i8, i8* %0, i64 %7
  %12 = load i8, i8* %11, align 1
  store i8 %12, i8* %9, align 1
  store i8 %10, i8* %11, align 1
  %13 = add nuw i64 %8, 1
  %14 = add i64 %7, -1
  %15 = icmp ult i64 %13, %14
  br i1 %15, label %6, label %16

16:                                               ; preds = %6, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3jxl27WriteHuffmanTreeRepetitionsEhhmPmPhS1_(i8 zeroext, i8 zeroext, i64, i64* nocapture, i8* nocapture, i8* nocapture) local_unnamed_addr #4 {
  %7 = icmp eq i8 %0, %1
  br i1 %7, label %16, label %8

8:                                                ; preds = %6
  %9 = load i64, i64* %3, align 8
  %10 = getelementptr inbounds i8, i8* %4, i64 %9
  store i8 %1, i8* %10, align 1
  %11 = load i64, i64* %3, align 8
  %12 = getelementptr inbounds i8, i8* %5, i64 %11
  store i8 0, i8* %12, align 1
  %13 = load i64, i64* %3, align 8
  %14 = add i64 %13, 1
  store i64 %14, i64* %3, align 8
  %15 = add i64 %2, -1
  br label %16

16:                                               ; preds = %6, %8
  %17 = phi i64 [ %15, %8 ], [ %2, %6 ]
  %18 = icmp eq i64 %17, 7
  br i1 %18, label %19, label %26

19:                                               ; preds = %16
  %20 = load i64, i64* %3, align 8
  %21 = getelementptr inbounds i8, i8* %4, i64 %20
  store i8 %1, i8* %21, align 1
  %22 = load i64, i64* %3, align 8
  %23 = getelementptr inbounds i8, i8* %5, i64 %22
  store i8 0, i8* %23, align 1
  %24 = load i64, i64* %3, align 8
  %25 = add i64 %24, 1
  store i64 %25, i64* %3, align 8
  br label %53

26:                                               ; preds = %16
  %27 = icmp ult i64 %17, 3
  br i1 %27, label %30, label %28

28:                                               ; preds = %26
  %29 = load i64, i64* %3, align 8
  br label %53

30:                                               ; preds = %26
  %31 = icmp eq i64 %17, 0
  br i1 %31, label %107, label %32

32:                                               ; preds = %30
  %33 = load i64, i64* %3, align 8
  %34 = and i64 %17, 1
  %35 = icmp eq i64 %17, 1
  br i1 %35, label %98, label %36

36:                                               ; preds = %32
  %37 = sub i64 %17, %34
  br label %38

38:                                               ; preds = %38, %36
  %39 = phi i64 [ %33, %36 ], [ %50, %38 ]
  %40 = phi i64 [ %37, %36 ], [ %51, %38 ]
  %41 = getelementptr inbounds i8, i8* %4, i64 %39
  store i8 %1, i8* %41, align 1
  %42 = load i64, i64* %3, align 8
  %43 = getelementptr inbounds i8, i8* %5, i64 %42
  store i8 0, i8* %43, align 1
  %44 = load i64, i64* %3, align 8
  %45 = add i64 %44, 1
  store i64 %45, i64* %3, align 8
  %46 = getelementptr inbounds i8, i8* %4, i64 %45
  store i8 %1, i8* %46, align 1
  %47 = load i64, i64* %3, align 8
  %48 = getelementptr inbounds i8, i8* %5, i64 %47
  store i8 0, i8* %48, align 1
  %49 = load i64, i64* %3, align 8
  %50 = add i64 %49, 1
  store i64 %50, i64* %3, align 8
  %51 = add i64 %40, -2
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %98, label %38

53:                                               ; preds = %28, %19
  %54 = phi i64 [ %25, %19 ], [ %29, %28 ]
  %55 = phi i64 [ 6, %19 ], [ %17, %28 ]
  %56 = add i64 %55, -3
  br label %57

57:                                               ; preds = %57, %53
  %58 = phi i64 [ %54, %53 ], [ %66, %57 ]
  %59 = phi i64 [ %56, %53 ], [ %69, %57 ]
  %60 = getelementptr inbounds i8, i8* %4, i64 %58
  store i8 16, i8* %60, align 1
  %61 = trunc i64 %59 to i8
  %62 = and i8 %61, 3
  %63 = load i64, i64* %3, align 8
  %64 = getelementptr inbounds i8, i8* %5, i64 %63
  store i8 %62, i8* %64, align 1
  %65 = load i64, i64* %3, align 8
  %66 = add i64 %65, 1
  store i64 %66, i64* %3, align 8
  %67 = lshr i64 %59, 2
  %68 = icmp eq i64 %67, 0
  %69 = add nsw i64 %67, -1
  br i1 %68, label %70, label %57

70:                                               ; preds = %57
  %71 = icmp ugt i64 %65, %54
  br i1 %71, label %72, label %84

72:                                               ; preds = %70, %72
  %73 = phi i64 [ %80, %72 ], [ %65, %70 ]
  %74 = phi i64 [ %79, %72 ], [ %54, %70 ]
  %75 = getelementptr inbounds i8, i8* %4, i64 %74
  %76 = load i8, i8* %75, align 1
  %77 = getelementptr inbounds i8, i8* %4, i64 %73
  %78 = load i8, i8* %77, align 1
  store i8 %78, i8* %75, align 1
  store i8 %76, i8* %77, align 1
  %79 = add nuw i64 %74, 1
  %80 = add i64 %73, -1
  %81 = icmp ult i64 %79, %80
  br i1 %81, label %72, label %82

82:                                               ; preds = %72
  %83 = load i64, i64* %3, align 8
  br label %84

84:                                               ; preds = %82, %70
  %85 = phi i64 [ %83, %82 ], [ %66, %70 ]
  %86 = add i64 %85, -1
  %87 = icmp ugt i64 %86, %54
  br i1 %87, label %88, label %107

88:                                               ; preds = %84, %88
  %89 = phi i64 [ %96, %88 ], [ %86, %84 ]
  %90 = phi i64 [ %95, %88 ], [ %54, %84 ]
  %91 = getelementptr inbounds i8, i8* %5, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = getelementptr inbounds i8, i8* %5, i64 %89
  %94 = load i8, i8* %93, align 1
  store i8 %94, i8* %91, align 1
  store i8 %92, i8* %93, align 1
  %95 = add nuw i64 %90, 1
  %96 = add i64 %89, -1
  %97 = icmp ult i64 %95, %96
  br i1 %97, label %88, label %107

98:                                               ; preds = %38, %32
  %99 = phi i64 [ %33, %32 ], [ %50, %38 ]
  %100 = icmp eq i64 %34, 0
  br i1 %100, label %107, label %101

101:                                              ; preds = %98
  %102 = getelementptr inbounds i8, i8* %4, i64 %99
  store i8 %1, i8* %102, align 1
  %103 = load i64, i64* %3, align 8
  %104 = getelementptr inbounds i8, i8* %5, i64 %103
  store i8 0, i8* %104, align 1
  %105 = load i64, i64* %3, align 8
  %106 = add i64 %105, 1
  store i64 %106, i64* %3, align 8
  br label %107

107:                                              ; preds = %101, %98, %88, %30, %84
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3jxl32WriteHuffmanTreeRepetitionsZerosEmPmPhS1_(i64, i64* nocapture, i8* nocapture, i8* nocapture) local_unnamed_addr #4 {
  %5 = icmp eq i64 %0, 11
  br i1 %5, label %6, label %13

6:                                                ; preds = %4
  %7 = load i64, i64* %1, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 %7
  store i8 0, i8* %8, align 1
  %9 = load i64, i64* %1, align 8
  %10 = getelementptr inbounds i8, i8* %3, i64 %9
  store i8 0, i8* %10, align 1
  %11 = load i64, i64* %1, align 8
  %12 = add i64 %11, 1
  store i64 %12, i64* %1, align 8
  br label %41

13:                                               ; preds = %4
  %14 = icmp ult i64 %0, 3
  br i1 %14, label %18, label %15

15:                                               ; preds = %13
  %16 = load i64, i64* %1, align 8
  %17 = add i64 %0, -3
  br label %41

18:                                               ; preds = %13
  %19 = icmp eq i64 %0, 0
  br i1 %19, label %94, label %20

20:                                               ; preds = %18
  %21 = load i64, i64* %1, align 8
  %22 = and i64 %0, 1
  %23 = icmp eq i64 %0, 1
  br i1 %23, label %85, label %24

24:                                               ; preds = %20
  %25 = sub i64 %0, %22
  br label %26

26:                                               ; preds = %26, %24
  %27 = phi i64 [ %21, %24 ], [ %38, %26 ]
  %28 = phi i64 [ %25, %24 ], [ %39, %26 ]
  %29 = getelementptr inbounds i8, i8* %2, i64 %27
  store i8 0, i8* %29, align 1
  %30 = load i64, i64* %1, align 8
  %31 = getelementptr inbounds i8, i8* %3, i64 %30
  store i8 0, i8* %31, align 1
  %32 = load i64, i64* %1, align 8
  %33 = add i64 %32, 1
  store i64 %33, i64* %1, align 8
  %34 = getelementptr inbounds i8, i8* %2, i64 %33
  store i8 0, i8* %34, align 1
  %35 = load i64, i64* %1, align 8
  %36 = getelementptr inbounds i8, i8* %3, i64 %35
  store i8 0, i8* %36, align 1
  %37 = load i64, i64* %1, align 8
  %38 = add i64 %37, 1
  store i64 %38, i64* %1, align 8
  %39 = add i64 %28, -2
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %85, label %26

41:                                               ; preds = %15, %6
  %42 = phi i64 [ %12, %6 ], [ %16, %15 ]
  %43 = phi i64 [ 7, %6 ], [ %17, %15 ]
  br label %44

44:                                               ; preds = %44, %41
  %45 = phi i64 [ %42, %41 ], [ %53, %44 ]
  %46 = phi i64 [ %43, %41 ], [ %56, %44 ]
  %47 = getelementptr inbounds i8, i8* %2, i64 %45
  store i8 17, i8* %47, align 1
  %48 = trunc i64 %46 to i8
  %49 = and i8 %48, 7
  %50 = load i64, i64* %1, align 8
  %51 = getelementptr inbounds i8, i8* %3, i64 %50
  store i8 %49, i8* %51, align 1
  %52 = load i64, i64* %1, align 8
  %53 = add i64 %52, 1
  store i64 %53, i64* %1, align 8
  %54 = lshr i64 %46, 3
  %55 = icmp eq i64 %54, 0
  %56 = add nsw i64 %54, -1
  br i1 %55, label %57, label %44

57:                                               ; preds = %44
  %58 = icmp ugt i64 %52, %42
  br i1 %58, label %59, label %71

59:                                               ; preds = %57, %59
  %60 = phi i64 [ %67, %59 ], [ %52, %57 ]
  %61 = phi i64 [ %66, %59 ], [ %42, %57 ]
  %62 = getelementptr inbounds i8, i8* %2, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = getelementptr inbounds i8, i8* %2, i64 %60
  %65 = load i8, i8* %64, align 1
  store i8 %65, i8* %62, align 1
  store i8 %63, i8* %64, align 1
  %66 = add nuw i64 %61, 1
  %67 = add i64 %60, -1
  %68 = icmp ult i64 %66, %67
  br i1 %68, label %59, label %69

69:                                               ; preds = %59
  %70 = load i64, i64* %1, align 8
  br label %71

71:                                               ; preds = %69, %57
  %72 = phi i64 [ %70, %69 ], [ %53, %57 ]
  %73 = add i64 %72, -1
  %74 = icmp ugt i64 %73, %42
  br i1 %74, label %75, label %94

75:                                               ; preds = %71, %75
  %76 = phi i64 [ %83, %75 ], [ %73, %71 ]
  %77 = phi i64 [ %82, %75 ], [ %42, %71 ]
  %78 = getelementptr inbounds i8, i8* %3, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = getelementptr inbounds i8, i8* %3, i64 %76
  %81 = load i8, i8* %80, align 1
  store i8 %81, i8* %78, align 1
  store i8 %79, i8* %80, align 1
  %82 = add nuw i64 %77, 1
  %83 = add i64 %76, -1
  %84 = icmp ult i64 %82, %83
  br i1 %84, label %75, label %94

85:                                               ; preds = %26, %20
  %86 = phi i64 [ %21, %20 ], [ %38, %26 ]
  %87 = icmp eq i64 %22, 0
  br i1 %87, label %94, label %88

88:                                               ; preds = %85
  %89 = getelementptr inbounds i8, i8* %2, i64 %86
  store i8 0, i8* %89, align 1
  %90 = load i64, i64* %1, align 8
  %91 = getelementptr inbounds i8, i8* %3, i64 %90
  store i8 0, i8* %91, align 1
  %92 = load i64, i64* %1, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %1, align 8
  br label %94

94:                                               ; preds = %88, %85, %75, %18, %71
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl16WriteHuffmanTreeEPKhmPmPhS3_(i8* nocapture readonly, i64, i64* nocapture, i8* nocapture, i8* nocapture) local_unnamed_addr #1 {
  %6 = icmp eq i64 %1, 0
  br i1 %6, label %86, label %7

7:                                                ; preds = %5, %15
  %8 = phi i64 [ %17, %15 ], [ 0, %5 ]
  %9 = phi i64 [ %16, %15 ], [ %1, %5 ]
  %10 = xor i64 %8, -1
  %11 = add i64 %10, %1
  %12 = getelementptr inbounds i8, i8* %0, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %19

15:                                               ; preds = %7
  %16 = add i64 %9, -1
  %17 = add nuw i64 %8, 1
  %18 = icmp eq i64 %17, %1
  br i1 %18, label %19, label %7

19:                                               ; preds = %7, %15
  %20 = phi i64 [ %16, %15 ], [ %9, %7 ]
  %21 = icmp ugt i64 %1, 50
  br i1 %21, label %22, label %78

22:                                               ; preds = %19
  %23 = icmp eq i64 %20, 0
  br i1 %23, label %68, label %27

24:                                               ; preds = %46
  %25 = shl i64 %62, 1
  %26 = shl i64 %55, 1
  br label %68

27:                                               ; preds = %22, %46
  %28 = phi i64 [ %47, %46 ], [ 0, %22 ]
  %29 = phi i64 [ %62, %46 ], [ 1, %22 ]
  %30 = phi i64 [ %55, %46 ], [ 1, %22 ]
  %31 = phi i64 [ %59, %46 ], [ 0, %22 ]
  %32 = phi i64 [ %53, %46 ], [ 0, %22 ]
  %33 = getelementptr inbounds i8, i8* %0, i64 %28
  %34 = load i8, i8* %33, align 1
  %35 = add nuw i64 %28, 1
  %36 = icmp ult i64 %35, %20
  br i1 %36, label %37, label %46

37:                                               ; preds = %27, %64
  %38 = phi i64 [ %66, %64 ], [ %35, %27 ]
  %39 = phi i64 [ %65, %64 ], [ 1, %27 ]
  %40 = getelementptr inbounds i8, i8* %0, i64 %38
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, %34
  br i1 %42, label %64, label %43

43:                                               ; preds = %64, %37
  %44 = phi i64 [ %39, %37 ], [ %65, %64 ]
  %45 = add i64 %44, %28
  br label %46

46:                                               ; preds = %43, %27
  %47 = phi i64 [ %45, %43 ], [ %35, %27 ]
  %48 = phi i64 [ %44, %43 ], [ 1, %27 ]
  %49 = icmp ugt i64 %48, 2
  %50 = icmp eq i8 %34, 0
  %51 = and i1 %50, %49
  %52 = select i1 %51, i64 %48, i64 0
  %53 = add i64 %52, %32
  %54 = zext i1 %51 to i64
  %55 = add i64 %30, %54
  %56 = icmp ult i64 %48, 4
  %57 = or i1 %50, %56
  %58 = select i1 %57, i64 0, i64 %48
  %59 = add i64 %58, %31
  %60 = xor i1 %57, true
  %61 = zext i1 %60 to i64
  %62 = add i64 %29, %61
  %63 = icmp ult i64 %47, %20
  br i1 %63, label %27, label %24

64:                                               ; preds = %37
  %65 = add i64 %39, 1
  %66 = add i64 %38, 1
  %67 = icmp eq i64 %66, %20
  br i1 %67, label %43, label %37

68:                                               ; preds = %22, %24
  %69 = phi i64 [ 0, %22 ], [ %20, %24 ]
  %70 = phi i64 [ 0, %22 ], [ %53, %24 ]
  %71 = phi i64 [ 0, %22 ], [ %59, %24 ]
  %72 = phi i64 [ 2, %22 ], [ %26, %24 ]
  %73 = phi i64 [ 2, %22 ], [ %25, %24 ]
  %74 = icmp ugt i64 %71, %73
  %75 = zext i1 %74 to i8
  %76 = icmp ugt i64 %70, %72
  %77 = zext i1 %76 to i8
  br label %78

78:                                               ; preds = %68, %19
  %79 = phi i64 [ %69, %68 ], [ %20, %19 ]
  %80 = phi i8 [ %75, %68 ], [ 0, %19 ]
  %81 = phi i8 [ %77, %68 ], [ 0, %19 ]
  %82 = icmp eq i64 %79, 0
  br i1 %82, label %86, label %83

83:                                               ; preds = %78
  %84 = icmp eq i8 %80, 0
  %85 = icmp eq i8 %81, 0
  br label %87

86:                                               ; preds = %114, %5, %78
  ret void

87:                                               ; preds = %83, %114
  %88 = phi i64 [ 0, %83 ], [ %116, %114 ]
  %89 = phi i8 [ 8, %83 ], [ %115, %114 ]
  %90 = getelementptr inbounds i8, i8* %0, i64 %88
  %91 = load i8, i8* %90, align 1
  %92 = icmp eq i8 %91, 0
  %93 = or i1 %84, %92
  %94 = icmp ne i8 %91, 0
  %95 = or i1 %85, %94
  %96 = and i1 %93, %95
  br i1 %96, label %110, label %97

97:                                               ; preds = %87
  %98 = add nuw i64 %88, 1
  %99 = icmp ult i64 %98, %79
  br i1 %99, label %100, label %110

100:                                              ; preds = %97, %106
  %101 = phi i64 [ %108, %106 ], [ %98, %97 ]
  %102 = phi i64 [ %107, %106 ], [ 1, %97 ]
  %103 = getelementptr inbounds i8, i8* %0, i64 %101
  %104 = load i8, i8* %103, align 1
  %105 = icmp eq i8 %104, %91
  br i1 %105, label %106, label %110

106:                                              ; preds = %100
  %107 = add i64 %102, 1
  %108 = add i64 %101, 1
  %109 = icmp eq i64 %108, %79
  br i1 %109, label %110, label %100

110:                                              ; preds = %100, %106, %97, %87
  %111 = phi i64 [ 1, %87 ], [ 1, %97 ], [ %107, %106 ], [ %102, %100 ]
  br i1 %92, label %112, label %113

112:                                              ; preds = %110
  tail call void @_ZN3jxl32WriteHuffmanTreeRepetitionsZerosEmPmPhS1_(i64 %111, i64* %2, i8* %3, i8* %4)
  br label %114

113:                                              ; preds = %110
  tail call void @_ZN3jxl27WriteHuffmanTreeRepetitionsEhhmPmPhS1_(i8 zeroext %89, i8 zeroext %91, i64 %111, i64* %2, i8* %3, i8* %4)
  br label %114

114:                                              ; preds = %113, %112
  %115 = phi i8 [ %89, %112 ], [ %91, %113 ]
  %116 = add i64 %111, %88
  %117 = icmp ult i64 %116, %79
  br i1 %117, label %87, label %86
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl25ConvertBitDepthsToSymbolsEPKhmPt(i8* nocapture readonly, i64, i16* nocapture) local_unnamed_addr #1 {
  %4 = alloca [16 x i16], align 16
  %5 = alloca [16 x i16], align 16
  %6 = bitcast [16 x i16]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 0, i64 32, i1 false)
  %7 = icmp eq i64 %1, 0
  br i1 %7, label %58, label %8

8:                                                ; preds = %3
  %9 = add i64 %1, -1
  %10 = and i64 %1, 3
  %11 = icmp ult i64 %9, 3
  br i1 %11, label %14, label %12

12:                                               ; preds = %8
  %13 = sub i64 %1, %10
  br label %140

14:                                               ; preds = %140, %8
  %15 = phi i64 [ 0, %8 ], [ %170, %140 ]
  %16 = icmp eq i64 %10, 0
  br i1 %16, label %29, label %17

17:                                               ; preds = %14, %17
  %18 = phi i64 [ %26, %17 ], [ %15, %14 ]
  %19 = phi i64 [ %27, %17 ], [ %10, %14 ]
  %20 = getelementptr inbounds i8, i8* %0, i64 %18
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i64
  %23 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 %22
  %24 = load i16, i16* %23, align 2
  %25 = add i16 %24, 1
  store i16 %25, i16* %23, align 2
  %26 = add nuw i64 %18, 1
  %27 = add i64 %19, -1
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %29, label %17, !llvm.loop !4

29:                                               ; preds = %17, %14
  %30 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 1
  %31 = load i16, i16* %30, align 2
  %32 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 2
  %33 = load i16, i16* %32, align 4
  %34 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 3
  %35 = load i16, i16* %34, align 2
  %36 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 4
  %37 = load i16, i16* %36, align 8
  %38 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 5
  %39 = load i16, i16* %38, align 2
  %40 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 6
  %41 = load i16, i16* %40, align 4
  %42 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 7
  %43 = load i16, i16* %42, align 2
  %44 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 8
  %45 = load i16, i16* %44, align 16
  %46 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 9
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %31 to i32
  %49 = shl nuw nsw i32 %48, 1
  %50 = zext i16 %33 to i32
  %51 = zext i16 %35 to i32
  %52 = zext i16 %37 to i32
  %53 = zext i16 %39 to i32
  %54 = zext i16 %41 to i32
  %55 = zext i16 %43 to i32
  %56 = zext i16 %45 to i32
  %57 = zext i16 %47 to i32
  br label %58

58:                                               ; preds = %29, %3
  %59 = phi i32 [ %57, %29 ], [ 0, %3 ]
  %60 = phi i32 [ %56, %29 ], [ 0, %3 ]
  %61 = phi i32 [ %55, %29 ], [ 0, %3 ]
  %62 = phi i32 [ %54, %29 ], [ 0, %3 ]
  %63 = phi i32 [ %53, %29 ], [ 0, %3 ]
  %64 = phi i32 [ %52, %29 ], [ 0, %3 ]
  %65 = phi i32 [ %51, %29 ], [ 0, %3 ]
  %66 = phi i32 [ %50, %29 ], [ 0, %3 ]
  %67 = phi i32 [ %49, %29 ], [ 0, %3 ]
  %68 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 0
  store i16 0, i16* %68, align 16
  %69 = bitcast [16 x i16]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %69) #10
  %70 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 0
  %71 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 1
  %72 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 2
  %73 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 3
  %74 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 4
  %75 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 5
  %76 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 6
  %77 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 7
  %78 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 8
  %79 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 9
  %80 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 10
  %81 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 11
  %82 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 12
  %83 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 13
  %84 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 14
  %85 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 15
  store i16 0, i16* %70, align 16
  store i16 0, i16* %71, align 2
  %86 = trunc i32 %67 to i16
  store i16 %86, i16* %72, align 4
  %87 = add nuw nsw i32 %67, %66
  %88 = shl nsw i32 %87, 1
  %89 = trunc i32 %88 to i16
  store i16 %89, i16* %73, align 2
  %90 = add nuw nsw i32 %88, %65
  %91 = shl nsw i32 %90, 1
  %92 = trunc i32 %91 to i16
  store i16 %92, i16* %74, align 8
  %93 = add nuw nsw i32 %91, %64
  %94 = shl i32 %93, 1
  %95 = trunc i32 %94 to i16
  store i16 %95, i16* %75, align 2
  %96 = add nuw nsw i32 %94, %63
  %97 = shl i32 %96, 1
  %98 = trunc i32 %97 to i16
  store i16 %98, i16* %76, align 4
  %99 = add nuw nsw i32 %97, %62
  %100 = shl i32 %99, 1
  %101 = trunc i32 %100 to i16
  store i16 %101, i16* %77, align 2
  %102 = add nuw nsw i32 %100, %61
  %103 = shl i32 %102, 1
  %104 = trunc i32 %103 to i16
  store i16 %104, i16* %78, align 16
  %105 = add nuw nsw i32 %103, %60
  %106 = shl i32 %105, 1
  %107 = trunc i32 %106 to i16
  store i16 %107, i16* %79, align 2
  %108 = add nuw nsw i32 %106, %59
  %109 = shl i32 %108, 1
  %110 = trunc i32 %109 to i16
  store i16 %110, i16* %80, align 4
  %111 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 10
  %112 = load i16, i16* %111, align 4
  %113 = zext i16 %112 to i32
  %114 = add nuw nsw i32 %109, %113
  %115 = shl i32 %114, 1
  %116 = trunc i32 %115 to i16
  store i16 %116, i16* %81, align 2
  %117 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 11
  %118 = load i16, i16* %117, align 2
  %119 = zext i16 %118 to i32
  %120 = add nuw nsw i32 %115, %119
  %121 = shl i32 %120, 1
  %122 = trunc i32 %121 to i16
  store i16 %122, i16* %82, align 8
  %123 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 12
  %124 = load i16, i16* %123, align 8
  %125 = zext i16 %124 to i32
  %126 = add nuw nsw i32 %121, %125
  %127 = shl i32 %126, 1
  %128 = trunc i32 %127 to i16
  store i16 %128, i16* %83, align 2
  %129 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 13
  %130 = load i16, i16* %129, align 2
  %131 = zext i16 %130 to i32
  %132 = add nuw nsw i32 %127, %131
  %133 = shl i32 %132, 1
  %134 = trunc i32 %133 to i16
  store i16 %134, i16* %84, align 4
  %135 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 14
  %136 = load i16, i16* %135, align 4
  %137 = trunc i32 %133 to i16
  %138 = add i16 %136, %137
  %139 = shl i16 %138, 1
  store i16 %139, i16* %85, align 2
  br i1 %7, label %173, label %174

140:                                              ; preds = %140, %12
  %141 = phi i64 [ 0, %12 ], [ %170, %140 ]
  %142 = phi i64 [ %13, %12 ], [ %171, %140 ]
  %143 = getelementptr inbounds i8, i8* %0, i64 %141
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i64
  %146 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 %145
  %147 = load i16, i16* %146, align 2
  %148 = add i16 %147, 1
  store i16 %148, i16* %146, align 2
  %149 = or i64 %141, 1
  %150 = getelementptr inbounds i8, i8* %0, i64 %149
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i64
  %153 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 %152
  %154 = load i16, i16* %153, align 2
  %155 = add i16 %154, 1
  store i16 %155, i16* %153, align 2
  %156 = or i64 %141, 2
  %157 = getelementptr inbounds i8, i8* %0, i64 %156
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i64
  %160 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 %159
  %161 = load i16, i16* %160, align 2
  %162 = add i16 %161, 1
  store i16 %162, i16* %160, align 2
  %163 = or i64 %141, 3
  %164 = getelementptr inbounds i8, i8* %0, i64 %163
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i64
  %167 = getelementptr inbounds [16 x i16], [16 x i16]* %4, i64 0, i64 %166
  %168 = load i16, i16* %167, align 2
  %169 = add i16 %168, 1
  store i16 %169, i16* %167, align 2
  %170 = add nuw i64 %141, 4
  %171 = add i64 %142, -4
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %14, label %140

173:                                              ; preds = %239, %58
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %69) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #10
  ret void

174:                                              ; preds = %58, %239
  %175 = phi i64 [ %240, %239 ], [ 0, %58 ]
  %176 = getelementptr inbounds i8, i8* %0, i64 %175
  %177 = load i8, i8* %176, align 1
  %178 = icmp eq i8 %177, 0
  br i1 %178, label %239, label %179

179:                                              ; preds = %174
  %180 = zext i8 %177 to i32
  %181 = zext i8 %177 to i64
  %182 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 %181
  %183 = load i16, i16* %182, align 2
  %184 = add i16 %183, 1
  store i16 %184, i16* %182, align 2
  %185 = and i16 %183, 15
  %186 = zext i16 %185 to i64
  %187 = getelementptr inbounds [16 x i64], [16 x i64]* @_ZZN3jxl12_GLOBAL__N_111ReverseBitsEitE4kLut, i64 0, i64 %186
  %188 = load i64, i64* %187, align 8
  %189 = icmp ugt i8 %177, 4
  br i1 %189, label %190, label %231

190:                                              ; preds = %179
  %191 = add nsw i32 %180, -5
  %192 = lshr i32 %191, 2
  %193 = add nuw nsw i32 %192, 1
  %194 = and i32 %193, 1
  %195 = icmp eq i32 %192, 0
  br i1 %195, label %218, label %196

196:                                              ; preds = %190
  %197 = sub nuw nsw i32 %193, %194
  br label %198

198:                                              ; preds = %198, %196
  %199 = phi i64 [ %188, %196 ], [ %215, %198 ]
  %200 = phi i16 [ %183, %196 ], [ %210, %198 ]
  %201 = phi i32 [ %197, %196 ], [ %216, %198 ]
  %202 = shl i64 %199, 4
  %203 = lshr i16 %200, 4
  %204 = and i16 %203, 15
  %205 = zext i16 %204 to i64
  %206 = getelementptr inbounds [16 x i64], [16 x i64]* @_ZZN3jxl12_GLOBAL__N_111ReverseBitsEitE4kLut, i64 0, i64 %205
  %207 = load i64, i64* %206, align 8
  %208 = or i64 %207, %202
  %209 = shl i64 %208, 4
  %210 = lshr i16 %200, 8
  %211 = and i16 %210, 15
  %212 = zext i16 %211 to i64
  %213 = getelementptr inbounds [16 x i64], [16 x i64]* @_ZZN3jxl12_GLOBAL__N_111ReverseBitsEitE4kLut, i64 0, i64 %212
  %214 = load i64, i64* %213, align 8
  %215 = or i64 %214, %209
  %216 = add i32 %201, -2
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %218, label %198

218:                                              ; preds = %198, %190
  %219 = phi i64 [ undef, %190 ], [ %215, %198 ]
  %220 = phi i64 [ %188, %190 ], [ %215, %198 ]
  %221 = phi i16 [ %183, %190 ], [ %210, %198 ]
  %222 = icmp eq i32 %194, 0
  br i1 %222, label %231, label %223

223:                                              ; preds = %218
  %224 = lshr i16 %221, 4
  %225 = and i16 %224, 15
  %226 = zext i16 %225 to i64
  %227 = getelementptr inbounds [16 x i64], [16 x i64]* @_ZZN3jxl12_GLOBAL__N_111ReverseBitsEitE4kLut, i64 0, i64 %226
  %228 = load i64, i64* %227, align 8
  %229 = shl i64 %220, 4
  %230 = or i64 %228, %229
  br label %231

231:                                              ; preds = %223, %218, %179
  %232 = phi i64 [ %188, %179 ], [ %219, %218 ], [ %230, %223 ]
  %233 = sub nsw i32 0, %180
  %234 = and i32 %233, 3
  %235 = zext i32 %234 to i64
  %236 = lshr i64 %232, %235
  %237 = trunc i64 %236 to i16
  %238 = getelementptr inbounds i16, i16* %2, i64 %175
  store i16 %237, i16* %238, align 2
  br label %239

239:                                              ; preds = %174, %231
  %240 = add nuw i64 %175, 1
  %241 = icmp eq i64 %240, %1
  br i1 %241, label %173, label %174
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__113__stable_sortIRPFbRKN3jxl11HuffmanTreeES4_ENS_11__wrap_iterIPS2_EEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeEl(%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** dereferenceable(8), i64, %"struct.jxl::HuffmanTree"*, i64) local_unnamed_addr #1 comdat {
  %7 = alloca i64, align 8
  switch i64 %3, label %17 [
    i64 0, label %434
    i64 1, label %434
    i64 2, label %8
  ]

8:                                                ; preds = %6
  %9 = load i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)*, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** %2, align 8
  %10 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %1, i64 -1
  %11 = tail call zeroext i1 %9(%"struct.jxl::HuffmanTree"* dereferenceable(8) %10, %"struct.jxl::HuffmanTree"* dereferenceable(8) %0) #10
  br i1 %11, label %12, label %434

12:                                               ; preds = %8
  %13 = bitcast %"struct.jxl::HuffmanTree"* %0 to i64*
  %14 = load i64, i64* %13, align 4
  %15 = bitcast %"struct.jxl::HuffmanTree"* %10 to i64*
  %16 = load i64, i64* %15, align 4
  store i64 %16, i64* %13, align 4
  store i64 %14, i64* %15, align 4
  br label %434

17:                                               ; preds = %6
  %18 = icmp slt i64 %3, 129
  br i1 %18, label %19, label %51

19:                                               ; preds = %17
  %20 = bitcast i64* %7 to %"struct.jxl::HuffmanTree"*
  %21 = icmp eq %"struct.jxl::HuffmanTree"* %0, %1
  br i1 %21, label %434, label %22

22:                                               ; preds = %19
  %23 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %0, i64 1
  %24 = icmp eq %"struct.jxl::HuffmanTree"* %23, %1
  br i1 %24, label %434, label %25

25:                                               ; preds = %22
  %26 = bitcast i64* %7 to i8*
  br label %27

27:                                               ; preds = %40, %25
  %28 = phi %"struct.jxl::HuffmanTree"* [ %23, %25 ], [ %44, %40 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #10
  %29 = bitcast %"struct.jxl::HuffmanTree"* %28 to i64*
  %30 = load i64, i64* %29, align 4
  store i64 %30, i64* %7, align 8
  %31 = icmp eq %"struct.jxl::HuffmanTree"* %28, %0
  br i1 %31, label %40, label %32

32:                                               ; preds = %27, %46
  %33 = phi %"struct.jxl::HuffmanTree"* [ %35, %46 ], [ %28, %27 ]
  %34 = load i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)*, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** %2, align 8
  %35 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %33, i64 -1
  %36 = call zeroext i1 %34(%"struct.jxl::HuffmanTree"* nonnull dereferenceable(8) %20, %"struct.jxl::HuffmanTree"* dereferenceable(8) %35) #10
  br i1 %36, label %46, label %37

37:                                               ; preds = %46, %32
  %38 = phi %"struct.jxl::HuffmanTree"* [ %33, %32 ], [ %0, %46 ]
  %39 = load i64, i64* %7, align 8
  br label %40

40:                                               ; preds = %37, %27
  %41 = phi i64 [ %30, %27 ], [ %39, %37 ]
  %42 = phi %"struct.jxl::HuffmanTree"* [ %0, %27 ], [ %38, %37 ]
  %43 = bitcast %"struct.jxl::HuffmanTree"* %42 to i64*
  store i64 %41, i64* %43, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #10
  %44 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %28, i64 1
  %45 = icmp eq %"struct.jxl::HuffmanTree"* %44, %1
  br i1 %45, label %434, label %27

46:                                               ; preds = %32
  %47 = bitcast %"struct.jxl::HuffmanTree"* %35 to i64*
  %48 = bitcast %"struct.jxl::HuffmanTree"* %33 to i64*
  %49 = load i64, i64* %47, align 4
  store i64 %49, i64* %48, align 4
  %50 = icmp eq %"struct.jxl::HuffmanTree"* %35, %0
  br i1 %50, label %37, label %32

51:                                               ; preds = %17
  %52 = lshr i64 %3, 1
  %53 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %0, i64 %52
  %54 = icmp sgt i64 %3, %5
  br i1 %54, label %432, label %55

55:                                               ; preds = %51
  tail call void @_ZNSt3__118__stable_sort_moveIRPFbRKN3jxl11HuffmanTreeES4_ENS_11__wrap_iterIPS2_EEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeE(%"struct.jxl::HuffmanTree"* %0, %"struct.jxl::HuffmanTree"* %53, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** dereferenceable(8) %2, i64 %52, %"struct.jxl::HuffmanTree"* %4)
  %56 = sub nsw i64 %3, %52
  %57 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %4, i64 %52
  tail call void @_ZNSt3__118__stable_sort_moveIRPFbRKN3jxl11HuffmanTreeES4_ENS_11__wrap_iterIPS2_EEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeE(%"struct.jxl::HuffmanTree"* %53, %"struct.jxl::HuffmanTree"* %1, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** dereferenceable(8) %2, i64 %56, %"struct.jxl::HuffmanTree"* %57)
  %58 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %4, i64 %3
  br label %190

59:                                               ; preds = %383
  %60 = ptrtoint %"struct.jxl::HuffmanTree"* %384 to i64
  %61 = icmp eq %"struct.jxl::HuffmanTree"* %384, %58
  br i1 %61, label %434, label %62

62:                                               ; preds = %59
  %63 = add i64 %3, -1
  %64 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %4, i64 %63, i32 0
  %65 = ptrtoint i32* %64 to i64
  %66 = sub i64 %65, %60
  %67 = lshr i64 %66, 3
  %68 = add nuw nsw i64 %67, 1
  %69 = icmp ult i64 %68, 4
  br i1 %69, label %70, label %97

70:                                               ; preds = %188, %97, %62
  %71 = phi %"struct.jxl::HuffmanTree"* [ %384, %97 ], [ %384, %62 ], [ %111, %188 ]
  %72 = phi %"struct.jxl::HuffmanTree"* [ %386, %97 ], [ %386, %62 ], [ %112, %188 ]
  %73 = ptrtoint %"struct.jxl::HuffmanTree"* %71 to i64
  %74 = add i64 %3, -1
  %75 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %4, i64 %74, i32 0
  %76 = ptrtoint i32* %75 to i64
  %77 = sub i64 %76, %73
  %78 = lshr i64 %77, 3
  %79 = add nuw nsw i64 %78, 1
  %80 = and i64 %79, 7
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %93, label %82

82:                                               ; preds = %70, %82
  %83 = phi %"struct.jxl::HuffmanTree"* [ %89, %82 ], [ %71, %70 ]
  %84 = phi %"struct.jxl::HuffmanTree"* [ %90, %82 ], [ %72, %70 ]
  %85 = phi i64 [ %91, %82 ], [ %80, %70 ]
  %86 = bitcast %"struct.jxl::HuffmanTree"* %83 to i64*
  %87 = bitcast %"struct.jxl::HuffmanTree"* %84 to i64*
  %88 = load i64, i64* %86, align 4
  store i64 %88, i64* %87, align 4
  %89 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %83, i64 1
  %90 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %84, i64 1
  %91 = add i64 %85, -1
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %82, !llvm.loop !5

93:                                               ; preds = %82, %70
  %94 = phi %"struct.jxl::HuffmanTree"* [ %71, %70 ], [ %89, %82 ]
  %95 = phi %"struct.jxl::HuffmanTree"* [ %72, %70 ], [ %90, %82 ]
  %96 = icmp ult i64 %77, 56
  br i1 %96, label %434, label %388

97:                                               ; preds = %62
  %98 = add i64 %3, -1
  %99 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %4, i64 %98, i32 0
  %100 = ptrtoint i32* %99 to i64
  %101 = sub i64 %100, %60
  %102 = lshr i64 %101, 3
  %103 = add nuw nsw i64 %102, 1
  %104 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %386, i64 %103
  %105 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %384, i64 %103
  %106 = icmp ult %"struct.jxl::HuffmanTree"* %386, %105
  %107 = icmp ult %"struct.jxl::HuffmanTree"* %384, %104
  %108 = and i1 %106, %107
  br i1 %108, label %70, label %109

109:                                              ; preds = %97
  %110 = and i64 %68, 4611686018427387900
  %111 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %384, i64 %110
  %112 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %386, i64 %110
  %113 = add nsw i64 %110, -4
  %114 = lshr exact i64 %113, 2
  %115 = add nuw nsw i64 %114, 1
  %116 = and i64 %115, 3
  %117 = icmp ult i64 %113, 12
  br i1 %117, label %169, label %118

118:                                              ; preds = %109
  %119 = sub nsw i64 %115, %116
  br label %120

120:                                              ; preds = %120, %118
  %121 = phi i64 [ 0, %118 ], [ %166, %120 ]
  %122 = phi i64 [ %119, %118 ], [ %167, %120 ]
  %123 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %384, i64 %121
  %124 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %386, i64 %121
  %125 = bitcast %"struct.jxl::HuffmanTree"* %123 to <2 x i64>*
  %126 = load <2 x i64>, <2 x i64>* %125, align 4, !alias.scope !6
  %127 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %123, i64 2
  %128 = bitcast %"struct.jxl::HuffmanTree"* %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 4, !alias.scope !6
  %130 = bitcast %"struct.jxl::HuffmanTree"* %124 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %130, align 4, !alias.scope !9, !noalias !6
  %131 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %124, i64 2
  %132 = bitcast %"struct.jxl::HuffmanTree"* %131 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %132, align 4, !alias.scope !9, !noalias !6
  %133 = or i64 %121, 4
  %134 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %384, i64 %133
  %135 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %386, i64 %133
  %136 = bitcast %"struct.jxl::HuffmanTree"* %134 to <2 x i64>*
  %137 = load <2 x i64>, <2 x i64>* %136, align 4, !alias.scope !6
  %138 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %134, i64 2
  %139 = bitcast %"struct.jxl::HuffmanTree"* %138 to <2 x i64>*
  %140 = load <2 x i64>, <2 x i64>* %139, align 4, !alias.scope !6
  %141 = bitcast %"struct.jxl::HuffmanTree"* %135 to <2 x i64>*
  store <2 x i64> %137, <2 x i64>* %141, align 4, !alias.scope !9, !noalias !6
  %142 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %135, i64 2
  %143 = bitcast %"struct.jxl::HuffmanTree"* %142 to <2 x i64>*
  store <2 x i64> %140, <2 x i64>* %143, align 4, !alias.scope !9, !noalias !6
  %144 = or i64 %121, 8
  %145 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %384, i64 %144
  %146 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %386, i64 %144
  %147 = bitcast %"struct.jxl::HuffmanTree"* %145 to <2 x i64>*
  %148 = load <2 x i64>, <2 x i64>* %147, align 4, !alias.scope !6
  %149 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %145, i64 2
  %150 = bitcast %"struct.jxl::HuffmanTree"* %149 to <2 x i64>*
  %151 = load <2 x i64>, <2 x i64>* %150, align 4, !alias.scope !6
  %152 = bitcast %"struct.jxl::HuffmanTree"* %146 to <2 x i64>*
  store <2 x i64> %148, <2 x i64>* %152, align 4, !alias.scope !9, !noalias !6
  %153 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %146, i64 2
  %154 = bitcast %"struct.jxl::HuffmanTree"* %153 to <2 x i64>*
  store <2 x i64> %151, <2 x i64>* %154, align 4, !alias.scope !9, !noalias !6
  %155 = or i64 %121, 12
  %156 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %384, i64 %155
  %157 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %386, i64 %155
  %158 = bitcast %"struct.jxl::HuffmanTree"* %156 to <2 x i64>*
  %159 = load <2 x i64>, <2 x i64>* %158, align 4, !alias.scope !6
  %160 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %156, i64 2
  %161 = bitcast %"struct.jxl::HuffmanTree"* %160 to <2 x i64>*
  %162 = load <2 x i64>, <2 x i64>* %161, align 4, !alias.scope !6
  %163 = bitcast %"struct.jxl::HuffmanTree"* %157 to <2 x i64>*
  store <2 x i64> %159, <2 x i64>* %163, align 4, !alias.scope !9, !noalias !6
  %164 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %157, i64 2
  %165 = bitcast %"struct.jxl::HuffmanTree"* %164 to <2 x i64>*
  store <2 x i64> %162, <2 x i64>* %165, align 4, !alias.scope !9, !noalias !6
  %166 = add i64 %121, 16
  %167 = add i64 %122, -4
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %169, label %120, !llvm.loop !11

169:                                              ; preds = %120, %109
  %170 = phi i64 [ 0, %109 ], [ %166, %120 ]
  %171 = icmp eq i64 %116, 0
  br i1 %171, label %188, label %172

172:                                              ; preds = %169, %172
  %173 = phi i64 [ %185, %172 ], [ %170, %169 ]
  %174 = phi i64 [ %186, %172 ], [ %116, %169 ]
  %175 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %384, i64 %173
  %176 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %386, i64 %173
  %177 = bitcast %"struct.jxl::HuffmanTree"* %175 to <2 x i64>*
  %178 = load <2 x i64>, <2 x i64>* %177, align 4, !alias.scope !6
  %179 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %175, i64 2
  %180 = bitcast %"struct.jxl::HuffmanTree"* %179 to <2 x i64>*
  %181 = load <2 x i64>, <2 x i64>* %180, align 4, !alias.scope !6
  %182 = bitcast %"struct.jxl::HuffmanTree"* %176 to <2 x i64>*
  store <2 x i64> %178, <2 x i64>* %182, align 4, !alias.scope !9, !noalias !6
  %183 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %176, i64 2
  %184 = bitcast %"struct.jxl::HuffmanTree"* %183 to <2 x i64>*
  store <2 x i64> %181, <2 x i64>* %184, align 4, !alias.scope !9, !noalias !6
  %185 = add i64 %173, 4
  %186 = add i64 %174, -1
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %188, label %172, !llvm.loop !13

188:                                              ; preds = %172, %169
  %189 = icmp eq i64 %68, %110
  br i1 %189, label %434, label %70

190:                                              ; preds = %55, %383
  %191 = phi %"struct.jxl::HuffmanTree"* [ %385, %383 ], [ %4, %55 ]
  %192 = phi %"struct.jxl::HuffmanTree"* [ %384, %383 ], [ %57, %55 ]
  %193 = phi %"struct.jxl::HuffmanTree"* [ %386, %383 ], [ %0, %55 ]
  %194 = icmp eq %"struct.jxl::HuffmanTree"* %192, %58
  br i1 %194, label %195, label %370

195:                                              ; preds = %190
  %196 = ptrtoint %"struct.jxl::HuffmanTree"* %191 to i64
  %197 = icmp eq %"struct.jxl::HuffmanTree"* %191, %57
  br i1 %197, label %434, label %198

198:                                              ; preds = %195
  %199 = add nsw i64 %52, -1
  %200 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %4, i64 %199, i32 0
  %201 = ptrtoint i32* %200 to i64
  %202 = sub i64 %201, %196
  %203 = lshr i64 %202, 3
  %204 = add nuw nsw i64 %203, 1
  %205 = icmp ult i64 %204, 4
  br i1 %205, label %299, label %206

206:                                              ; preds = %198
  %207 = add nsw i64 %52, -1
  %208 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %4, i64 %207, i32 0
  %209 = ptrtoint i32* %208 to i64
  %210 = sub i64 %209, %196
  %211 = lshr i64 %210, 3
  %212 = add nuw nsw i64 %211, 1
  %213 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %193, i64 %212
  %214 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %191, i64 %212
  %215 = icmp ult %"struct.jxl::HuffmanTree"* %193, %214
  %216 = icmp ult %"struct.jxl::HuffmanTree"* %191, %213
  %217 = and i1 %215, %216
  br i1 %217, label %299, label %218

218:                                              ; preds = %206
  %219 = and i64 %204, 4611686018427387900
  %220 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %191, i64 %219
  %221 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %193, i64 %219
  %222 = add nsw i64 %219, -4
  %223 = lshr exact i64 %222, 2
  %224 = add nuw nsw i64 %223, 1
  %225 = and i64 %224, 3
  %226 = icmp ult i64 %222, 12
  br i1 %226, label %278, label %227

227:                                              ; preds = %218
  %228 = sub nsw i64 %224, %225
  br label %229

229:                                              ; preds = %229, %227
  %230 = phi i64 [ 0, %227 ], [ %275, %229 ]
  %231 = phi i64 [ %228, %227 ], [ %276, %229 ]
  %232 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %191, i64 %230
  %233 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %193, i64 %230
  %234 = bitcast %"struct.jxl::HuffmanTree"* %232 to <2 x i64>*
  %235 = load <2 x i64>, <2 x i64>* %234, align 4, !alias.scope !14
  %236 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %232, i64 2
  %237 = bitcast %"struct.jxl::HuffmanTree"* %236 to <2 x i64>*
  %238 = load <2 x i64>, <2 x i64>* %237, align 4, !alias.scope !14
  %239 = bitcast %"struct.jxl::HuffmanTree"* %233 to <2 x i64>*
  store <2 x i64> %235, <2 x i64>* %239, align 4, !alias.scope !17, !noalias !14
  %240 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %233, i64 2
  %241 = bitcast %"struct.jxl::HuffmanTree"* %240 to <2 x i64>*
  store <2 x i64> %238, <2 x i64>* %241, align 4, !alias.scope !17, !noalias !14
  %242 = or i64 %230, 4
  %243 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %191, i64 %242
  %244 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %193, i64 %242
  %245 = bitcast %"struct.jxl::HuffmanTree"* %243 to <2 x i64>*
  %246 = load <2 x i64>, <2 x i64>* %245, align 4, !alias.scope !14
  %247 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %243, i64 2
  %248 = bitcast %"struct.jxl::HuffmanTree"* %247 to <2 x i64>*
  %249 = load <2 x i64>, <2 x i64>* %248, align 4, !alias.scope !14
  %250 = bitcast %"struct.jxl::HuffmanTree"* %244 to <2 x i64>*
  store <2 x i64> %246, <2 x i64>* %250, align 4, !alias.scope !17, !noalias !14
  %251 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %244, i64 2
  %252 = bitcast %"struct.jxl::HuffmanTree"* %251 to <2 x i64>*
  store <2 x i64> %249, <2 x i64>* %252, align 4, !alias.scope !17, !noalias !14
  %253 = or i64 %230, 8
  %254 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %191, i64 %253
  %255 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %193, i64 %253
  %256 = bitcast %"struct.jxl::HuffmanTree"* %254 to <2 x i64>*
  %257 = load <2 x i64>, <2 x i64>* %256, align 4, !alias.scope !14
  %258 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %254, i64 2
  %259 = bitcast %"struct.jxl::HuffmanTree"* %258 to <2 x i64>*
  %260 = load <2 x i64>, <2 x i64>* %259, align 4, !alias.scope !14
  %261 = bitcast %"struct.jxl::HuffmanTree"* %255 to <2 x i64>*
  store <2 x i64> %257, <2 x i64>* %261, align 4, !alias.scope !17, !noalias !14
  %262 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %255, i64 2
  %263 = bitcast %"struct.jxl::HuffmanTree"* %262 to <2 x i64>*
  store <2 x i64> %260, <2 x i64>* %263, align 4, !alias.scope !17, !noalias !14
  %264 = or i64 %230, 12
  %265 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %191, i64 %264
  %266 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %193, i64 %264
  %267 = bitcast %"struct.jxl::HuffmanTree"* %265 to <2 x i64>*
  %268 = load <2 x i64>, <2 x i64>* %267, align 4, !alias.scope !14
  %269 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %265, i64 2
  %270 = bitcast %"struct.jxl::HuffmanTree"* %269 to <2 x i64>*
  %271 = load <2 x i64>, <2 x i64>* %270, align 4, !alias.scope !14
  %272 = bitcast %"struct.jxl::HuffmanTree"* %266 to <2 x i64>*
  store <2 x i64> %268, <2 x i64>* %272, align 4, !alias.scope !17, !noalias !14
  %273 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %266, i64 2
  %274 = bitcast %"struct.jxl::HuffmanTree"* %273 to <2 x i64>*
  store <2 x i64> %271, <2 x i64>* %274, align 4, !alias.scope !17, !noalias !14
  %275 = add i64 %230, 16
  %276 = add i64 %231, -4
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %278, label %229, !llvm.loop !19

278:                                              ; preds = %229, %218
  %279 = phi i64 [ 0, %218 ], [ %275, %229 ]
  %280 = icmp eq i64 %225, 0
  br i1 %280, label %297, label %281

281:                                              ; preds = %278, %281
  %282 = phi i64 [ %294, %281 ], [ %279, %278 ]
  %283 = phi i64 [ %295, %281 ], [ %225, %278 ]
  %284 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %191, i64 %282
  %285 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %193, i64 %282
  %286 = bitcast %"struct.jxl::HuffmanTree"* %284 to <2 x i64>*
  %287 = load <2 x i64>, <2 x i64>* %286, align 4, !alias.scope !14
  %288 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %284, i64 2
  %289 = bitcast %"struct.jxl::HuffmanTree"* %288 to <2 x i64>*
  %290 = load <2 x i64>, <2 x i64>* %289, align 4, !alias.scope !14
  %291 = bitcast %"struct.jxl::HuffmanTree"* %285 to <2 x i64>*
  store <2 x i64> %287, <2 x i64>* %291, align 4, !alias.scope !17, !noalias !14
  %292 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %285, i64 2
  %293 = bitcast %"struct.jxl::HuffmanTree"* %292 to <2 x i64>*
  store <2 x i64> %290, <2 x i64>* %293, align 4, !alias.scope !17, !noalias !14
  %294 = add i64 %282, 4
  %295 = add i64 %283, -1
  %296 = icmp eq i64 %295, 0
  br i1 %296, label %297, label %281, !llvm.loop !20

297:                                              ; preds = %281, %278
  %298 = icmp eq i64 %204, %219
  br i1 %298, label %434, label %299

299:                                              ; preds = %297, %206, %198
  %300 = phi %"struct.jxl::HuffmanTree"* [ %191, %206 ], [ %191, %198 ], [ %220, %297 ]
  %301 = phi %"struct.jxl::HuffmanTree"* [ %193, %206 ], [ %193, %198 ], [ %221, %297 ]
  %302 = ptrtoint %"struct.jxl::HuffmanTree"* %300 to i64
  %303 = add nsw i64 %52, -1
  %304 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %4, i64 %303, i32 0
  %305 = ptrtoint i32* %304 to i64
  %306 = sub i64 %305, %302
  %307 = lshr i64 %306, 3
  %308 = add nuw nsw i64 %307, 1
  %309 = and i64 %308, 7
  %310 = icmp eq i64 %309, 0
  br i1 %310, label %322, label %311

311:                                              ; preds = %299, %311
  %312 = phi %"struct.jxl::HuffmanTree"* [ %318, %311 ], [ %300, %299 ]
  %313 = phi %"struct.jxl::HuffmanTree"* [ %319, %311 ], [ %301, %299 ]
  %314 = phi i64 [ %320, %311 ], [ %309, %299 ]
  %315 = bitcast %"struct.jxl::HuffmanTree"* %312 to i64*
  %316 = bitcast %"struct.jxl::HuffmanTree"* %313 to i64*
  %317 = load i64, i64* %315, align 4
  store i64 %317, i64* %316, align 4
  %318 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %312, i64 1
  %319 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %313, i64 1
  %320 = add i64 %314, -1
  %321 = icmp eq i64 %320, 0
  br i1 %321, label %322, label %311, !llvm.loop !21

322:                                              ; preds = %311, %299
  %323 = phi %"struct.jxl::HuffmanTree"* [ %300, %299 ], [ %318, %311 ]
  %324 = phi %"struct.jxl::HuffmanTree"* [ %301, %299 ], [ %319, %311 ]
  %325 = icmp ult i64 %306, 56
  br i1 %325, label %434, label %326

326:                                              ; preds = %322, %326
  %327 = phi %"struct.jxl::HuffmanTree"* [ %367, %326 ], [ %323, %322 ]
  %328 = phi %"struct.jxl::HuffmanTree"* [ %368, %326 ], [ %324, %322 ]
  %329 = bitcast %"struct.jxl::HuffmanTree"* %327 to i64*
  %330 = bitcast %"struct.jxl::HuffmanTree"* %328 to i64*
  %331 = load i64, i64* %329, align 4
  store i64 %331, i64* %330, align 4
  %332 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %327, i64 1
  %333 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %328, i64 1
  %334 = bitcast %"struct.jxl::HuffmanTree"* %332 to i64*
  %335 = bitcast %"struct.jxl::HuffmanTree"* %333 to i64*
  %336 = load i64, i64* %334, align 4
  store i64 %336, i64* %335, align 4
  %337 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %327, i64 2
  %338 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %328, i64 2
  %339 = bitcast %"struct.jxl::HuffmanTree"* %337 to i64*
  %340 = bitcast %"struct.jxl::HuffmanTree"* %338 to i64*
  %341 = load i64, i64* %339, align 4
  store i64 %341, i64* %340, align 4
  %342 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %327, i64 3
  %343 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %328, i64 3
  %344 = bitcast %"struct.jxl::HuffmanTree"* %342 to i64*
  %345 = bitcast %"struct.jxl::HuffmanTree"* %343 to i64*
  %346 = load i64, i64* %344, align 4
  store i64 %346, i64* %345, align 4
  %347 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %327, i64 4
  %348 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %328, i64 4
  %349 = bitcast %"struct.jxl::HuffmanTree"* %347 to i64*
  %350 = bitcast %"struct.jxl::HuffmanTree"* %348 to i64*
  %351 = load i64, i64* %349, align 4
  store i64 %351, i64* %350, align 4
  %352 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %327, i64 5
  %353 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %328, i64 5
  %354 = bitcast %"struct.jxl::HuffmanTree"* %352 to i64*
  %355 = bitcast %"struct.jxl::HuffmanTree"* %353 to i64*
  %356 = load i64, i64* %354, align 4
  store i64 %356, i64* %355, align 4
  %357 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %327, i64 6
  %358 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %328, i64 6
  %359 = bitcast %"struct.jxl::HuffmanTree"* %357 to i64*
  %360 = bitcast %"struct.jxl::HuffmanTree"* %358 to i64*
  %361 = load i64, i64* %359, align 4
  store i64 %361, i64* %360, align 4
  %362 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %327, i64 7
  %363 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %328, i64 7
  %364 = bitcast %"struct.jxl::HuffmanTree"* %362 to i64*
  %365 = bitcast %"struct.jxl::HuffmanTree"* %363 to i64*
  %366 = load i64, i64* %364, align 4
  store i64 %366, i64* %365, align 4
  %367 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %327, i64 8
  %368 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %328, i64 8
  %369 = icmp eq %"struct.jxl::HuffmanTree"* %367, %57
  br i1 %369, label %434, label %326, !llvm.loop !22

370:                                              ; preds = %190
  %371 = load i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)*, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** %2, align 8
  %372 = tail call zeroext i1 %371(%"struct.jxl::HuffmanTree"* dereferenceable(8) %192, %"struct.jxl::HuffmanTree"* dereferenceable(8) %191) #10
  br i1 %372, label %373, label %378

373:                                              ; preds = %370
  %374 = bitcast %"struct.jxl::HuffmanTree"* %192 to i64*
  %375 = bitcast %"struct.jxl::HuffmanTree"* %193 to i64*
  %376 = load i64, i64* %374, align 4
  store i64 %376, i64* %375, align 4
  %377 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %192, i64 1
  br label %383

378:                                              ; preds = %370
  %379 = bitcast %"struct.jxl::HuffmanTree"* %191 to i64*
  %380 = bitcast %"struct.jxl::HuffmanTree"* %193 to i64*
  %381 = load i64, i64* %379, align 4
  store i64 %381, i64* %380, align 4
  %382 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %191, i64 1
  br label %383

383:                                              ; preds = %378, %373
  %384 = phi %"struct.jxl::HuffmanTree"* [ %377, %373 ], [ %192, %378 ]
  %385 = phi %"struct.jxl::HuffmanTree"* [ %191, %373 ], [ %382, %378 ]
  %386 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %193, i64 1
  %387 = icmp eq %"struct.jxl::HuffmanTree"* %385, %57
  br i1 %387, label %59, label %190

388:                                              ; preds = %93, %388
  %389 = phi %"struct.jxl::HuffmanTree"* [ %429, %388 ], [ %94, %93 ]
  %390 = phi %"struct.jxl::HuffmanTree"* [ %430, %388 ], [ %95, %93 ]
  %391 = bitcast %"struct.jxl::HuffmanTree"* %389 to i64*
  %392 = bitcast %"struct.jxl::HuffmanTree"* %390 to i64*
  %393 = load i64, i64* %391, align 4
  store i64 %393, i64* %392, align 4
  %394 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %389, i64 1
  %395 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %390, i64 1
  %396 = bitcast %"struct.jxl::HuffmanTree"* %394 to i64*
  %397 = bitcast %"struct.jxl::HuffmanTree"* %395 to i64*
  %398 = load i64, i64* %396, align 4
  store i64 %398, i64* %397, align 4
  %399 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %389, i64 2
  %400 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %390, i64 2
  %401 = bitcast %"struct.jxl::HuffmanTree"* %399 to i64*
  %402 = bitcast %"struct.jxl::HuffmanTree"* %400 to i64*
  %403 = load i64, i64* %401, align 4
  store i64 %403, i64* %402, align 4
  %404 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %389, i64 3
  %405 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %390, i64 3
  %406 = bitcast %"struct.jxl::HuffmanTree"* %404 to i64*
  %407 = bitcast %"struct.jxl::HuffmanTree"* %405 to i64*
  %408 = load i64, i64* %406, align 4
  store i64 %408, i64* %407, align 4
  %409 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %389, i64 4
  %410 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %390, i64 4
  %411 = bitcast %"struct.jxl::HuffmanTree"* %409 to i64*
  %412 = bitcast %"struct.jxl::HuffmanTree"* %410 to i64*
  %413 = load i64, i64* %411, align 4
  store i64 %413, i64* %412, align 4
  %414 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %389, i64 5
  %415 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %390, i64 5
  %416 = bitcast %"struct.jxl::HuffmanTree"* %414 to i64*
  %417 = bitcast %"struct.jxl::HuffmanTree"* %415 to i64*
  %418 = load i64, i64* %416, align 4
  store i64 %418, i64* %417, align 4
  %419 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %389, i64 6
  %420 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %390, i64 6
  %421 = bitcast %"struct.jxl::HuffmanTree"* %419 to i64*
  %422 = bitcast %"struct.jxl::HuffmanTree"* %420 to i64*
  %423 = load i64, i64* %421, align 4
  store i64 %423, i64* %422, align 4
  %424 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %389, i64 7
  %425 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %390, i64 7
  %426 = bitcast %"struct.jxl::HuffmanTree"* %424 to i64*
  %427 = bitcast %"struct.jxl::HuffmanTree"* %425 to i64*
  %428 = load i64, i64* %426, align 4
  store i64 %428, i64* %427, align 4
  %429 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %389, i64 8
  %430 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %390, i64 8
  %431 = icmp eq %"struct.jxl::HuffmanTree"* %429, %58
  br i1 %431, label %434, label %388, !llvm.loop !23

432:                                              ; preds = %51
  tail call void @_ZNSt3__113__stable_sortIRPFbRKN3jxl11HuffmanTreeES4_ENS_11__wrap_iterIPS2_EEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeEl(%"struct.jxl::HuffmanTree"* %0, %"struct.jxl::HuffmanTree"* %53, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** dereferenceable(8) %2, i64 %52, %"struct.jxl::HuffmanTree"* %4, i64 %5)
  %433 = sub nsw i64 %3, %52
  tail call void @_ZNSt3__113__stable_sortIRPFbRKN3jxl11HuffmanTreeES4_ENS_11__wrap_iterIPS2_EEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeEl(%"struct.jxl::HuffmanTree"* %53, %"struct.jxl::HuffmanTree"* %1, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** dereferenceable(8) %2, i64 %433, %"struct.jxl::HuffmanTree"* %4, i64 %5)
  tail call void @_ZNSt3__115__inplace_mergeIRPFbRKN3jxl11HuffmanTreeES4_ENS_11__wrap_iterIPS2_EEEEvT0_SB_SB_T_NS_15iterator_traitsISB_E15difference_typeESF_PNSE_10value_typeEl(%"struct.jxl::HuffmanTree"* %0, %"struct.jxl::HuffmanTree"* %53, %"struct.jxl::HuffmanTree"* %1, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** dereferenceable(8) %2, i64 %52, i64 %433, %"struct.jxl::HuffmanTree"* %4, i64 %5)
  br label %434

434:                                              ; preds = %93, %388, %322, %326, %40, %188, %297, %195, %59, %22, %19, %432, %8, %12, %6, %6
  ret void
}

; Function Attrs: nobuiltin nofree nounwind
declare noalias i8* @_ZnwmRKSt9nothrow_t(i64, %"struct.std::nothrow_t"* dereferenceable(1)) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__118__stable_sort_moveIRPFbRKN3jxl11HuffmanTreeES4_ENS_11__wrap_iterIPS2_EEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeE(%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** dereferenceable(8), i64, %"struct.jxl::HuffmanTree"*) local_unnamed_addr #1 comdat {
  switch i64 %3, label %30 [
    i64 0, label %449
    i64 1, label %6
    i64 2, label %10
  ]

6:                                                ; preds = %5
  %7 = bitcast %"struct.jxl::HuffmanTree"* %0 to i64*
  %8 = bitcast %"struct.jxl::HuffmanTree"* %4 to i64*
  %9 = load i64, i64* %7, align 4
  store i64 %9, i64* %8, align 4
  br label %449

10:                                               ; preds = %5
  %11 = load i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)*, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** %2, align 8
  %12 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %1, i64 -1
  %13 = tail call zeroext i1 %11(%"struct.jxl::HuffmanTree"* dereferenceable(8) %12, %"struct.jxl::HuffmanTree"* dereferenceable(8) %0) #10
  br i1 %13, label %14, label %22

14:                                               ; preds = %10
  %15 = bitcast %"struct.jxl::HuffmanTree"* %12 to i64*
  %16 = bitcast %"struct.jxl::HuffmanTree"* %4 to i64*
  %17 = load i64, i64* %15, align 4
  store i64 %17, i64* %16, align 4
  %18 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %4, i64 1
  %19 = bitcast %"struct.jxl::HuffmanTree"* %0 to i64*
  %20 = bitcast %"struct.jxl::HuffmanTree"* %18 to i64*
  %21 = load i64, i64* %19, align 4
  store i64 %21, i64* %20, align 4
  br label %449

22:                                               ; preds = %10
  %23 = bitcast %"struct.jxl::HuffmanTree"* %0 to i64*
  %24 = bitcast %"struct.jxl::HuffmanTree"* %4 to i64*
  %25 = load i64, i64* %23, align 4
  store i64 %25, i64* %24, align 4
  %26 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %4, i64 1
  %27 = bitcast %"struct.jxl::HuffmanTree"* %12 to i64*
  %28 = bitcast %"struct.jxl::HuffmanTree"* %26 to i64*
  %29 = load i64, i64* %27, align 4
  store i64 %29, i64* %28, align 4
  br label %449

30:                                               ; preds = %5
  %31 = icmp slt i64 %3, 9
  br i1 %31, label %32, label %71

32:                                               ; preds = %30
  %33 = icmp eq %"struct.jxl::HuffmanTree"* %0, %1
  br i1 %33, label %449, label %34

34:                                               ; preds = %32
  %35 = bitcast %"struct.jxl::HuffmanTree"* %0 to i64*
  %36 = bitcast %"struct.jxl::HuffmanTree"* %4 to i64*
  %37 = load i64, i64* %35, align 4
  store i64 %37, i64* %36, align 4
  %38 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %0, i64 1
  %39 = icmp eq %"struct.jxl::HuffmanTree"* %38, %1
  br i1 %39, label %449, label %40

40:                                               ; preds = %34, %65
  %41 = phi %"struct.jxl::HuffmanTree"* [ %69, %65 ], [ %38, %34 ]
  %42 = phi %"struct.jxl::HuffmanTree"* [ %43, %65 ], [ %4, %34 ]
  %43 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %42, i64 1
  %44 = load i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)*, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** %2, align 8
  %45 = tail call zeroext i1 %44(%"struct.jxl::HuffmanTree"* dereferenceable(8) %41, %"struct.jxl::HuffmanTree"* dereferenceable(8) %42) #10
  br i1 %45, label %46, label %63

46:                                               ; preds = %40
  %47 = bitcast %"struct.jxl::HuffmanTree"* %42 to i64*
  %48 = bitcast %"struct.jxl::HuffmanTree"* %43 to i64*
  %49 = load i64, i64* %47, align 4
  store i64 %49, i64* %48, align 4
  %50 = icmp eq %"struct.jxl::HuffmanTree"* %42, %4
  br i1 %50, label %65, label %51

51:                                               ; preds = %46, %58
  %52 = phi %"struct.jxl::HuffmanTree"* [ %54, %58 ], [ %42, %46 ]
  %53 = load i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)*, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** %2, align 8
  %54 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %52, i64 -1
  %55 = tail call zeroext i1 %53(%"struct.jxl::HuffmanTree"* dereferenceable(8) %41, %"struct.jxl::HuffmanTree"* dereferenceable(8) %54) #10
  br i1 %55, label %58, label %56

56:                                               ; preds = %51
  %57 = bitcast %"struct.jxl::HuffmanTree"* %52 to i64*
  br label %65

58:                                               ; preds = %51
  %59 = bitcast %"struct.jxl::HuffmanTree"* %54 to i64*
  %60 = bitcast %"struct.jxl::HuffmanTree"* %52 to i64*
  %61 = load i64, i64* %59, align 4
  store i64 %61, i64* %60, align 4
  %62 = icmp eq %"struct.jxl::HuffmanTree"* %54, %4
  br i1 %62, label %65, label %51

63:                                               ; preds = %40
  %64 = bitcast %"struct.jxl::HuffmanTree"* %43 to i64*
  br label %65

65:                                               ; preds = %46, %56, %58, %63
  %66 = phi i64* [ %64, %63 ], [ %36, %46 ], [ %57, %56 ], [ %36, %58 ]
  %67 = bitcast %"struct.jxl::HuffmanTree"* %41 to i64*
  %68 = load i64, i64* %67, align 4
  store i64 %68, i64* %66, align 4
  %69 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %41, i64 1
  %70 = icmp eq %"struct.jxl::HuffmanTree"* %69, %1
  br i1 %70, label %449, label %40

71:                                               ; preds = %30
  %72 = lshr i64 %3, 1
  %73 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %0, i64 %72
  tail call void @_ZNSt3__113__stable_sortIRPFbRKN3jxl11HuffmanTreeES4_ENS_11__wrap_iterIPS2_EEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeEl(%"struct.jxl::HuffmanTree"* %0, %"struct.jxl::HuffmanTree"* %73, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** dereferenceable(8) %2, i64 %72, %"struct.jxl::HuffmanTree"* %4, i64 %72)
  %74 = sub nsw i64 %3, %72
  %75 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %4, i64 %72
  tail call void @_ZNSt3__113__stable_sortIRPFbRKN3jxl11HuffmanTreeES4_ENS_11__wrap_iterIPS2_EEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeEPNSE_10value_typeEl(%"struct.jxl::HuffmanTree"* %73, %"struct.jxl::HuffmanTree"* %1, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** dereferenceable(8) %2, i64 %74, %"struct.jxl::HuffmanTree"* %75, i64 %74)
  %76 = icmp eq i64 %72, 0
  br i1 %76, label %77, label %251

77:                                               ; preds = %444, %71
  %78 = phi %"struct.jxl::HuffmanTree"* [ %73, %71 ], [ %445, %444 ]
  %79 = phi %"struct.jxl::HuffmanTree"* [ %4, %71 ], [ %447, %444 ]
  %80 = ptrtoint %"struct.jxl::HuffmanTree"* %78 to i64
  %81 = icmp eq %"struct.jxl::HuffmanTree"* %78, %1
  br i1 %81, label %449, label %82

82:                                               ; preds = %77
  %83 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %1, i64 -1, i32 0
  %84 = ptrtoint i32* %83 to i64
  %85 = sub i64 %84, %80
  %86 = lshr i64 %85, 3
  %87 = add nuw nsw i64 %86, 1
  %88 = icmp ult i64 %87, 4
  br i1 %88, label %181, label %89

89:                                               ; preds = %82
  %90 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %1, i64 -1, i32 0
  %91 = ptrtoint i32* %90 to i64
  %92 = sub i64 %91, %80
  %93 = lshr i64 %92, 3
  %94 = add nuw nsw i64 %93, 1
  %95 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %79, i64 %94
  %96 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %78, i64 %94
  %97 = icmp ult %"struct.jxl::HuffmanTree"* %79, %96
  %98 = icmp ult %"struct.jxl::HuffmanTree"* %78, %95
  %99 = and i1 %97, %98
  br i1 %99, label %181, label %100

100:                                              ; preds = %89
  %101 = and i64 %87, 4611686018427387900
  %102 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %79, i64 %101
  %103 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %78, i64 %101
  %104 = add nsw i64 %101, -4
  %105 = lshr exact i64 %104, 2
  %106 = add nuw nsw i64 %105, 1
  %107 = and i64 %106, 3
  %108 = icmp ult i64 %104, 12
  br i1 %108, label %160, label %109

109:                                              ; preds = %100
  %110 = sub nsw i64 %106, %107
  br label %111

111:                                              ; preds = %111, %109
  %112 = phi i64 [ 0, %109 ], [ %157, %111 ]
  %113 = phi i64 [ %110, %109 ], [ %158, %111 ]
  %114 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %79, i64 %112
  %115 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %78, i64 %112
  %116 = bitcast %"struct.jxl::HuffmanTree"* %115 to <2 x i64>*
  %117 = load <2 x i64>, <2 x i64>* %116, align 4, !alias.scope !24
  %118 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %115, i64 2
  %119 = bitcast %"struct.jxl::HuffmanTree"* %118 to <2 x i64>*
  %120 = load <2 x i64>, <2 x i64>* %119, align 4, !alias.scope !24
  %121 = bitcast %"struct.jxl::HuffmanTree"* %114 to <2 x i64>*
  store <2 x i64> %117, <2 x i64>* %121, align 4, !alias.scope !27, !noalias !24
  %122 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %114, i64 2
  %123 = bitcast %"struct.jxl::HuffmanTree"* %122 to <2 x i64>*
  store <2 x i64> %120, <2 x i64>* %123, align 4, !alias.scope !27, !noalias !24
  %124 = or i64 %112, 4
  %125 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %79, i64 %124
  %126 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %78, i64 %124
  %127 = bitcast %"struct.jxl::HuffmanTree"* %126 to <2 x i64>*
  %128 = load <2 x i64>, <2 x i64>* %127, align 4, !alias.scope !24
  %129 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %126, i64 2
  %130 = bitcast %"struct.jxl::HuffmanTree"* %129 to <2 x i64>*
  %131 = load <2 x i64>, <2 x i64>* %130, align 4, !alias.scope !24
  %132 = bitcast %"struct.jxl::HuffmanTree"* %125 to <2 x i64>*
  store <2 x i64> %128, <2 x i64>* %132, align 4, !alias.scope !27, !noalias !24
  %133 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %125, i64 2
  %134 = bitcast %"struct.jxl::HuffmanTree"* %133 to <2 x i64>*
  store <2 x i64> %131, <2 x i64>* %134, align 4, !alias.scope !27, !noalias !24
  %135 = or i64 %112, 8
  %136 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %79, i64 %135
  %137 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %78, i64 %135
  %138 = bitcast %"struct.jxl::HuffmanTree"* %137 to <2 x i64>*
  %139 = load <2 x i64>, <2 x i64>* %138, align 4, !alias.scope !24
  %140 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %137, i64 2
  %141 = bitcast %"struct.jxl::HuffmanTree"* %140 to <2 x i64>*
  %142 = load <2 x i64>, <2 x i64>* %141, align 4, !alias.scope !24
  %143 = bitcast %"struct.jxl::HuffmanTree"* %136 to <2 x i64>*
  store <2 x i64> %139, <2 x i64>* %143, align 4, !alias.scope !27, !noalias !24
  %144 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %136, i64 2
  %145 = bitcast %"struct.jxl::HuffmanTree"* %144 to <2 x i64>*
  store <2 x i64> %142, <2 x i64>* %145, align 4, !alias.scope !27, !noalias !24
  %146 = or i64 %112, 12
  %147 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %79, i64 %146
  %148 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %78, i64 %146
  %149 = bitcast %"struct.jxl::HuffmanTree"* %148 to <2 x i64>*
  %150 = load <2 x i64>, <2 x i64>* %149, align 4, !alias.scope !24
  %151 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %148, i64 2
  %152 = bitcast %"struct.jxl::HuffmanTree"* %151 to <2 x i64>*
  %153 = load <2 x i64>, <2 x i64>* %152, align 4, !alias.scope !24
  %154 = bitcast %"struct.jxl::HuffmanTree"* %147 to <2 x i64>*
  store <2 x i64> %150, <2 x i64>* %154, align 4, !alias.scope !27, !noalias !24
  %155 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %147, i64 2
  %156 = bitcast %"struct.jxl::HuffmanTree"* %155 to <2 x i64>*
  store <2 x i64> %153, <2 x i64>* %156, align 4, !alias.scope !27, !noalias !24
  %157 = add i64 %112, 16
  %158 = add i64 %113, -4
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %111, !llvm.loop !29

160:                                              ; preds = %111, %100
  %161 = phi i64 [ 0, %100 ], [ %157, %111 ]
  %162 = icmp eq i64 %107, 0
  br i1 %162, label %179, label %163

163:                                              ; preds = %160, %163
  %164 = phi i64 [ %176, %163 ], [ %161, %160 ]
  %165 = phi i64 [ %177, %163 ], [ %107, %160 ]
  %166 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %79, i64 %164
  %167 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %78, i64 %164
  %168 = bitcast %"struct.jxl::HuffmanTree"* %167 to <2 x i64>*
  %169 = load <2 x i64>, <2 x i64>* %168, align 4, !alias.scope !24
  %170 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %167, i64 2
  %171 = bitcast %"struct.jxl::HuffmanTree"* %170 to <2 x i64>*
  %172 = load <2 x i64>, <2 x i64>* %171, align 4, !alias.scope !24
  %173 = bitcast %"struct.jxl::HuffmanTree"* %166 to <2 x i64>*
  store <2 x i64> %169, <2 x i64>* %173, align 4, !alias.scope !27, !noalias !24
  %174 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %166, i64 2
  %175 = bitcast %"struct.jxl::HuffmanTree"* %174 to <2 x i64>*
  store <2 x i64> %172, <2 x i64>* %175, align 4, !alias.scope !27, !noalias !24
  %176 = add i64 %164, 4
  %177 = add i64 %165, -1
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %179, label %163, !llvm.loop !30

179:                                              ; preds = %163, %160
  %180 = icmp eq i64 %87, %101
  br i1 %180, label %449, label %181

181:                                              ; preds = %179, %89, %82
  %182 = phi %"struct.jxl::HuffmanTree"* [ %79, %89 ], [ %79, %82 ], [ %102, %179 ]
  %183 = phi %"struct.jxl::HuffmanTree"* [ %78, %89 ], [ %78, %82 ], [ %103, %179 ]
  %184 = ptrtoint %"struct.jxl::HuffmanTree"* %183 to i64
  %185 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %1, i64 -1, i32 0
  %186 = ptrtoint i32* %185 to i64
  %187 = sub i64 %186, %184
  %188 = lshr i64 %187, 3
  %189 = add nuw nsw i64 %188, 1
  %190 = and i64 %189, 7
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %203, label %192

192:                                              ; preds = %181, %192
  %193 = phi %"struct.jxl::HuffmanTree"* [ %200, %192 ], [ %182, %181 ]
  %194 = phi %"struct.jxl::HuffmanTree"* [ %199, %192 ], [ %183, %181 ]
  %195 = phi i64 [ %201, %192 ], [ %190, %181 ]
  %196 = bitcast %"struct.jxl::HuffmanTree"* %194 to i64*
  %197 = bitcast %"struct.jxl::HuffmanTree"* %193 to i64*
  %198 = load i64, i64* %196, align 4
  store i64 %198, i64* %197, align 4
  %199 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %194, i64 1
  %200 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %193, i64 1
  %201 = add i64 %195, -1
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %203, label %192, !llvm.loop !31

203:                                              ; preds = %192, %181
  %204 = phi %"struct.jxl::HuffmanTree"* [ %182, %181 ], [ %200, %192 ]
  %205 = phi %"struct.jxl::HuffmanTree"* [ %183, %181 ], [ %199, %192 ]
  %206 = icmp ult i64 %187, 56
  br i1 %206, label %449, label %207

207:                                              ; preds = %203, %207
  %208 = phi %"struct.jxl::HuffmanTree"* [ %249, %207 ], [ %204, %203 ]
  %209 = phi %"struct.jxl::HuffmanTree"* [ %248, %207 ], [ %205, %203 ]
  %210 = bitcast %"struct.jxl::HuffmanTree"* %209 to i64*
  %211 = bitcast %"struct.jxl::HuffmanTree"* %208 to i64*
  %212 = load i64, i64* %210, align 4
  store i64 %212, i64* %211, align 4
  %213 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %209, i64 1
  %214 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %208, i64 1
  %215 = bitcast %"struct.jxl::HuffmanTree"* %213 to i64*
  %216 = bitcast %"struct.jxl::HuffmanTree"* %214 to i64*
  %217 = load i64, i64* %215, align 4
  store i64 %217, i64* %216, align 4
  %218 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %209, i64 2
  %219 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %208, i64 2
  %220 = bitcast %"struct.jxl::HuffmanTree"* %218 to i64*
  %221 = bitcast %"struct.jxl::HuffmanTree"* %219 to i64*
  %222 = load i64, i64* %220, align 4
  store i64 %222, i64* %221, align 4
  %223 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %209, i64 3
  %224 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %208, i64 3
  %225 = bitcast %"struct.jxl::HuffmanTree"* %223 to i64*
  %226 = bitcast %"struct.jxl::HuffmanTree"* %224 to i64*
  %227 = load i64, i64* %225, align 4
  store i64 %227, i64* %226, align 4
  %228 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %209, i64 4
  %229 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %208, i64 4
  %230 = bitcast %"struct.jxl::HuffmanTree"* %228 to i64*
  %231 = bitcast %"struct.jxl::HuffmanTree"* %229 to i64*
  %232 = load i64, i64* %230, align 4
  store i64 %232, i64* %231, align 4
  %233 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %209, i64 5
  %234 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %208, i64 5
  %235 = bitcast %"struct.jxl::HuffmanTree"* %233 to i64*
  %236 = bitcast %"struct.jxl::HuffmanTree"* %234 to i64*
  %237 = load i64, i64* %235, align 4
  store i64 %237, i64* %236, align 4
  %238 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %209, i64 6
  %239 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %208, i64 6
  %240 = bitcast %"struct.jxl::HuffmanTree"* %238 to i64*
  %241 = bitcast %"struct.jxl::HuffmanTree"* %239 to i64*
  %242 = load i64, i64* %240, align 4
  store i64 %242, i64* %241, align 4
  %243 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %209, i64 7
  %244 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %208, i64 7
  %245 = bitcast %"struct.jxl::HuffmanTree"* %243 to i64*
  %246 = bitcast %"struct.jxl::HuffmanTree"* %244 to i64*
  %247 = load i64, i64* %245, align 4
  store i64 %247, i64* %246, align 4
  %248 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %209, i64 8
  %249 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %208, i64 8
  %250 = icmp eq %"struct.jxl::HuffmanTree"* %248, %1
  br i1 %250, label %449, label %207, !llvm.loop !32

251:                                              ; preds = %71, %444
  %252 = phi %"struct.jxl::HuffmanTree"* [ %447, %444 ], [ %4, %71 ]
  %253 = phi %"struct.jxl::HuffmanTree"* [ %446, %444 ], [ %0, %71 ]
  %254 = phi %"struct.jxl::HuffmanTree"* [ %445, %444 ], [ %73, %71 ]
  %255 = icmp eq %"struct.jxl::HuffmanTree"* %254, %1
  br i1 %255, label %256, label %431

256:                                              ; preds = %251
  %257 = ptrtoint %"struct.jxl::HuffmanTree"* %253 to i64
  %258 = icmp eq %"struct.jxl::HuffmanTree"* %253, %73
  br i1 %258, label %449, label %259

259:                                              ; preds = %256
  %260 = add nsw i64 %72, -1
  %261 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %0, i64 %260, i32 0
  %262 = ptrtoint i32* %261 to i64
  %263 = sub i64 %262, %257
  %264 = lshr i64 %263, 3
  %265 = add nuw nsw i64 %264, 1
  %266 = icmp ult i64 %265, 4
  br i1 %266, label %360, label %267

267:                                              ; preds = %259
  %268 = add nsw i64 %72, -1
  %269 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %0, i64 %268, i32 0
  %270 = ptrtoint i32* %269 to i64
  %271 = sub i64 %270, %257
  %272 = lshr i64 %271, 3
  %273 = add nuw nsw i64 %272, 1
  %274 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %252, i64 %273
  %275 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %253, i64 %273
  %276 = icmp ult %"struct.jxl::HuffmanTree"* %252, %275
  %277 = icmp ult %"struct.jxl::HuffmanTree"* %253, %274
  %278 = and i1 %276, %277
  br i1 %278, label %360, label %279

279:                                              ; preds = %267
  %280 = and i64 %265, 4611686018427387900
  %281 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %252, i64 %280
  %282 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %253, i64 %280
  %283 = add nsw i64 %280, -4
  %284 = lshr exact i64 %283, 2
  %285 = add nuw nsw i64 %284, 1
  %286 = and i64 %285, 3
  %287 = icmp ult i64 %283, 12
  br i1 %287, label %339, label %288

288:                                              ; preds = %279
  %289 = sub nsw i64 %285, %286
  br label %290

290:                                              ; preds = %290, %288
  %291 = phi i64 [ 0, %288 ], [ %336, %290 ]
  %292 = phi i64 [ %289, %288 ], [ %337, %290 ]
  %293 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %252, i64 %291
  %294 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %253, i64 %291
  %295 = bitcast %"struct.jxl::HuffmanTree"* %294 to <2 x i64>*
  %296 = load <2 x i64>, <2 x i64>* %295, align 4, !alias.scope !33
  %297 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %294, i64 2
  %298 = bitcast %"struct.jxl::HuffmanTree"* %297 to <2 x i64>*
  %299 = load <2 x i64>, <2 x i64>* %298, align 4, !alias.scope !33
  %300 = bitcast %"struct.jxl::HuffmanTree"* %293 to <2 x i64>*
  store <2 x i64> %296, <2 x i64>* %300, align 4, !alias.scope !36, !noalias !33
  %301 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %293, i64 2
  %302 = bitcast %"struct.jxl::HuffmanTree"* %301 to <2 x i64>*
  store <2 x i64> %299, <2 x i64>* %302, align 4, !alias.scope !36, !noalias !33
  %303 = or i64 %291, 4
  %304 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %252, i64 %303
  %305 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %253, i64 %303
  %306 = bitcast %"struct.jxl::HuffmanTree"* %305 to <2 x i64>*
  %307 = load <2 x i64>, <2 x i64>* %306, align 4, !alias.scope !33
  %308 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %305, i64 2
  %309 = bitcast %"struct.jxl::HuffmanTree"* %308 to <2 x i64>*
  %310 = load <2 x i64>, <2 x i64>* %309, align 4, !alias.scope !33
  %311 = bitcast %"struct.jxl::HuffmanTree"* %304 to <2 x i64>*
  store <2 x i64> %307, <2 x i64>* %311, align 4, !alias.scope !36, !noalias !33
  %312 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %304, i64 2
  %313 = bitcast %"struct.jxl::HuffmanTree"* %312 to <2 x i64>*
  store <2 x i64> %310, <2 x i64>* %313, align 4, !alias.scope !36, !noalias !33
  %314 = or i64 %291, 8
  %315 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %252, i64 %314
  %316 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %253, i64 %314
  %317 = bitcast %"struct.jxl::HuffmanTree"* %316 to <2 x i64>*
  %318 = load <2 x i64>, <2 x i64>* %317, align 4, !alias.scope !33
  %319 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %316, i64 2
  %320 = bitcast %"struct.jxl::HuffmanTree"* %319 to <2 x i64>*
  %321 = load <2 x i64>, <2 x i64>* %320, align 4, !alias.scope !33
  %322 = bitcast %"struct.jxl::HuffmanTree"* %315 to <2 x i64>*
  store <2 x i64> %318, <2 x i64>* %322, align 4, !alias.scope !36, !noalias !33
  %323 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %315, i64 2
  %324 = bitcast %"struct.jxl::HuffmanTree"* %323 to <2 x i64>*
  store <2 x i64> %321, <2 x i64>* %324, align 4, !alias.scope !36, !noalias !33
  %325 = or i64 %291, 12
  %326 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %252, i64 %325
  %327 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %253, i64 %325
  %328 = bitcast %"struct.jxl::HuffmanTree"* %327 to <2 x i64>*
  %329 = load <2 x i64>, <2 x i64>* %328, align 4, !alias.scope !33
  %330 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %327, i64 2
  %331 = bitcast %"struct.jxl::HuffmanTree"* %330 to <2 x i64>*
  %332 = load <2 x i64>, <2 x i64>* %331, align 4, !alias.scope !33
  %333 = bitcast %"struct.jxl::HuffmanTree"* %326 to <2 x i64>*
  store <2 x i64> %329, <2 x i64>* %333, align 4, !alias.scope !36, !noalias !33
  %334 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %326, i64 2
  %335 = bitcast %"struct.jxl::HuffmanTree"* %334 to <2 x i64>*
  store <2 x i64> %332, <2 x i64>* %335, align 4, !alias.scope !36, !noalias !33
  %336 = add i64 %291, 16
  %337 = add i64 %292, -4
  %338 = icmp eq i64 %337, 0
  br i1 %338, label %339, label %290, !llvm.loop !38

339:                                              ; preds = %290, %279
  %340 = phi i64 [ 0, %279 ], [ %336, %290 ]
  %341 = icmp eq i64 %286, 0
  br i1 %341, label %358, label %342

342:                                              ; preds = %339, %342
  %343 = phi i64 [ %355, %342 ], [ %340, %339 ]
  %344 = phi i64 [ %356, %342 ], [ %286, %339 ]
  %345 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %252, i64 %343
  %346 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %253, i64 %343
  %347 = bitcast %"struct.jxl::HuffmanTree"* %346 to <2 x i64>*
  %348 = load <2 x i64>, <2 x i64>* %347, align 4, !alias.scope !33
  %349 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %346, i64 2
  %350 = bitcast %"struct.jxl::HuffmanTree"* %349 to <2 x i64>*
  %351 = load <2 x i64>, <2 x i64>* %350, align 4, !alias.scope !33
  %352 = bitcast %"struct.jxl::HuffmanTree"* %345 to <2 x i64>*
  store <2 x i64> %348, <2 x i64>* %352, align 4, !alias.scope !36, !noalias !33
  %353 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %345, i64 2
  %354 = bitcast %"struct.jxl::HuffmanTree"* %353 to <2 x i64>*
  store <2 x i64> %351, <2 x i64>* %354, align 4, !alias.scope !36, !noalias !33
  %355 = add i64 %343, 4
  %356 = add i64 %344, -1
  %357 = icmp eq i64 %356, 0
  br i1 %357, label %358, label %342, !llvm.loop !39

358:                                              ; preds = %342, %339
  %359 = icmp eq i64 %265, %280
  br i1 %359, label %449, label %360

360:                                              ; preds = %358, %267, %259
  %361 = phi %"struct.jxl::HuffmanTree"* [ %252, %267 ], [ %252, %259 ], [ %281, %358 ]
  %362 = phi %"struct.jxl::HuffmanTree"* [ %253, %267 ], [ %253, %259 ], [ %282, %358 ]
  %363 = ptrtoint %"struct.jxl::HuffmanTree"* %362 to i64
  %364 = add nsw i64 %72, -1
  %365 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %0, i64 %364, i32 0
  %366 = ptrtoint i32* %365 to i64
  %367 = sub i64 %366, %363
  %368 = lshr i64 %367, 3
  %369 = add nuw nsw i64 %368, 1
  %370 = and i64 %369, 7
  %371 = icmp eq i64 %370, 0
  br i1 %371, label %383, label %372

372:                                              ; preds = %360, %372
  %373 = phi %"struct.jxl::HuffmanTree"* [ %380, %372 ], [ %361, %360 ]
  %374 = phi %"struct.jxl::HuffmanTree"* [ %379, %372 ], [ %362, %360 ]
  %375 = phi i64 [ %381, %372 ], [ %370, %360 ]
  %376 = bitcast %"struct.jxl::HuffmanTree"* %374 to i64*
  %377 = bitcast %"struct.jxl::HuffmanTree"* %373 to i64*
  %378 = load i64, i64* %376, align 4
  store i64 %378, i64* %377, align 4
  %379 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %374, i64 1
  %380 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %373, i64 1
  %381 = add i64 %375, -1
  %382 = icmp eq i64 %381, 0
  br i1 %382, label %383, label %372, !llvm.loop !40

383:                                              ; preds = %372, %360
  %384 = phi %"struct.jxl::HuffmanTree"* [ %361, %360 ], [ %380, %372 ]
  %385 = phi %"struct.jxl::HuffmanTree"* [ %362, %360 ], [ %379, %372 ]
  %386 = icmp ult i64 %367, 56
  br i1 %386, label %449, label %387

387:                                              ; preds = %383, %387
  %388 = phi %"struct.jxl::HuffmanTree"* [ %429, %387 ], [ %384, %383 ]
  %389 = phi %"struct.jxl::HuffmanTree"* [ %428, %387 ], [ %385, %383 ]
  %390 = bitcast %"struct.jxl::HuffmanTree"* %389 to i64*
  %391 = bitcast %"struct.jxl::HuffmanTree"* %388 to i64*
  %392 = load i64, i64* %390, align 4
  store i64 %392, i64* %391, align 4
  %393 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %389, i64 1
  %394 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %388, i64 1
  %395 = bitcast %"struct.jxl::HuffmanTree"* %393 to i64*
  %396 = bitcast %"struct.jxl::HuffmanTree"* %394 to i64*
  %397 = load i64, i64* %395, align 4
  store i64 %397, i64* %396, align 4
  %398 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %389, i64 2
  %399 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %388, i64 2
  %400 = bitcast %"struct.jxl::HuffmanTree"* %398 to i64*
  %401 = bitcast %"struct.jxl::HuffmanTree"* %399 to i64*
  %402 = load i64, i64* %400, align 4
  store i64 %402, i64* %401, align 4
  %403 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %389, i64 3
  %404 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %388, i64 3
  %405 = bitcast %"struct.jxl::HuffmanTree"* %403 to i64*
  %406 = bitcast %"struct.jxl::HuffmanTree"* %404 to i64*
  %407 = load i64, i64* %405, align 4
  store i64 %407, i64* %406, align 4
  %408 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %389, i64 4
  %409 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %388, i64 4
  %410 = bitcast %"struct.jxl::HuffmanTree"* %408 to i64*
  %411 = bitcast %"struct.jxl::HuffmanTree"* %409 to i64*
  %412 = load i64, i64* %410, align 4
  store i64 %412, i64* %411, align 4
  %413 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %389, i64 5
  %414 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %388, i64 5
  %415 = bitcast %"struct.jxl::HuffmanTree"* %413 to i64*
  %416 = bitcast %"struct.jxl::HuffmanTree"* %414 to i64*
  %417 = load i64, i64* %415, align 4
  store i64 %417, i64* %416, align 4
  %418 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %389, i64 6
  %419 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %388, i64 6
  %420 = bitcast %"struct.jxl::HuffmanTree"* %418 to i64*
  %421 = bitcast %"struct.jxl::HuffmanTree"* %419 to i64*
  %422 = load i64, i64* %420, align 4
  store i64 %422, i64* %421, align 4
  %423 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %389, i64 7
  %424 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %388, i64 7
  %425 = bitcast %"struct.jxl::HuffmanTree"* %423 to i64*
  %426 = bitcast %"struct.jxl::HuffmanTree"* %424 to i64*
  %427 = load i64, i64* %425, align 4
  store i64 %427, i64* %426, align 4
  %428 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %389, i64 8
  %429 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %388, i64 8
  %430 = icmp eq %"struct.jxl::HuffmanTree"* %428, %73
  br i1 %430, label %449, label %387, !llvm.loop !41

431:                                              ; preds = %251
  %432 = load i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)*, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** %2, align 8
  %433 = tail call zeroext i1 %432(%"struct.jxl::HuffmanTree"* dereferenceable(8) %254, %"struct.jxl::HuffmanTree"* dereferenceable(8) %253) #10
  br i1 %433, label %434, label %439

434:                                              ; preds = %431
  %435 = bitcast %"struct.jxl::HuffmanTree"* %254 to i64*
  %436 = bitcast %"struct.jxl::HuffmanTree"* %252 to i64*
  %437 = load i64, i64* %435, align 4
  store i64 %437, i64* %436, align 4
  %438 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %254, i64 1
  br label %444

439:                                              ; preds = %431
  %440 = bitcast %"struct.jxl::HuffmanTree"* %253 to i64*
  %441 = bitcast %"struct.jxl::HuffmanTree"* %252 to i64*
  %442 = load i64, i64* %440, align 4
  store i64 %442, i64* %441, align 4
  %443 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %253, i64 1
  br label %444

444:                                              ; preds = %439, %434
  %445 = phi %"struct.jxl::HuffmanTree"* [ %438, %434 ], [ %254, %439 ]
  %446 = phi %"struct.jxl::HuffmanTree"* [ %253, %434 ], [ %443, %439 ]
  %447 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %252, i64 1
  %448 = icmp eq %"struct.jxl::HuffmanTree"* %446, %73
  br i1 %448, label %77, label %251

449:                                              ; preds = %383, %387, %203, %207, %65, %358, %179, %256, %77, %34, %32, %14, %22, %5, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__115__inplace_mergeIRPFbRKN3jxl11HuffmanTreeES4_ENS_11__wrap_iterIPS2_EEEEvT0_SB_SB_T_NS_15iterator_traitsISB_E15difference_typeESF_PNSE_10value_typeEl(%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** dereferenceable(8), i64, i64, %"struct.jxl::HuffmanTree"*, i64) local_unnamed_addr #1 comdat {
  %9 = ptrtoint %"struct.jxl::HuffmanTree"* %6 to i64
  %10 = icmp eq i64 %5, 0
  br i1 %10, label %972, label %11

11:                                               ; preds = %8
  %12 = ptrtoint %"struct.jxl::HuffmanTree"* %1 to i64
  %13 = ptrtoint %"struct.jxl::HuffmanTree"* %0 to i64
  br label %14

14:                                               ; preds = %11, %965
  %15 = phi %"struct.jxl::HuffmanTree"* [ %970, %965 ], [ %2, %11 ]
  %16 = phi i64 [ %969, %965 ], [ %4, %11 ]
  %17 = phi i64 [ %968, %965 ], [ %5, %11 ]
  %18 = phi i64 [ %967, %965 ], [ %12, %11 ]
  %19 = phi i64 [ %966, %965 ], [ %13, %11 ]
  %20 = icmp sgt i64 %16, %7
  %21 = icmp sgt i64 %17, %7
  %22 = and i1 %21, %20
  br i1 %22, label %23, label %28

23:                                               ; preds = %14
  %24 = icmp eq i64 %16, 0
  br i1 %24, label %972, label %25

25:                                               ; preds = %23
  %26 = inttoptr i64 %18 to %"struct.jxl::HuffmanTree"*
  %27 = inttoptr i64 %18 to i8*
  br label %609

28:                                               ; preds = %14
  %29 = inttoptr i64 %19 to %"struct.jxl::HuffmanTree"*
  %30 = inttoptr i64 %19 to i8*
  %31 = inttoptr i64 %18 to %"struct.jxl::HuffmanTree"*
  %32 = inttoptr i64 %18 to i8*
  %33 = icmp sgt i64 %16, %17
  br i1 %33, label %167, label %34

34:                                               ; preds = %28
  %35 = icmp eq %"struct.jxl::HuffmanTree"* %29, %31
  br i1 %35, label %972, label %36

36:                                               ; preds = %34
  %37 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %31, i64 -1, i32 0
  %38 = bitcast i32* %37 to i8*
  %39 = sub i64 0, %19
  %40 = getelementptr i8, i8* %38, i64 %39
  %41 = ptrtoint i8* %40 to i64
  %42 = lshr i64 %41, 3
  %43 = add nuw nsw i64 %42, 1
  %44 = icmp ult i64 %43, 4
  br i1 %44, label %45, label %72

45:                                               ; preds = %165, %72, %36
  %46 = phi %"struct.jxl::HuffmanTree"* [ %6, %72 ], [ %6, %36 ], [ %88, %165 ]
  %47 = phi %"struct.jxl::HuffmanTree"* [ %29, %72 ], [ %29, %36 ], [ %89, %165 ]
  %48 = ptrtoint %"struct.jxl::HuffmanTree"* %47 to i64
  %49 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %31, i64 -1, i32 0
  %50 = ptrtoint i32* %49 to i64
  %51 = sub i64 %50, %48
  %52 = lshr i64 %51, 3
  %53 = add nuw nsw i64 %52, 1
  %54 = and i64 %53, 7
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %67, label %56

56:                                               ; preds = %45, %56
  %57 = phi %"struct.jxl::HuffmanTree"* [ %64, %56 ], [ %46, %45 ]
  %58 = phi %"struct.jxl::HuffmanTree"* [ %63, %56 ], [ %47, %45 ]
  %59 = phi i64 [ %65, %56 ], [ %54, %45 ]
  %60 = bitcast %"struct.jxl::HuffmanTree"* %58 to i64*
  %61 = bitcast %"struct.jxl::HuffmanTree"* %57 to i64*
  %62 = load i64, i64* %60, align 4
  store i64 %62, i64* %61, align 4
  %63 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %58, i64 1
  %64 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %57, i64 1
  %65 = add i64 %59, -1
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %56, !llvm.loop !42

67:                                               ; preds = %56, %45
  %68 = phi %"struct.jxl::HuffmanTree"* [ undef, %45 ], [ %64, %56 ]
  %69 = phi %"struct.jxl::HuffmanTree"* [ %46, %45 ], [ %64, %56 ]
  %70 = phi %"struct.jxl::HuffmanTree"* [ %47, %45 ], [ %63, %56 ]
  %71 = icmp ult i64 %51, 56
  br i1 %71, label %300, label %334

72:                                               ; preds = %36
  %73 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %31, i64 -1, i32 0
  %74 = bitcast i32* %73 to i8*
  %75 = sub i64 0, %19
  %76 = getelementptr i8, i8* %74, i64 %75
  %77 = ptrtoint i8* %76 to i64
  %78 = lshr i64 %77, 3
  %79 = add nuw nsw i64 %78, 1
  %80 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %6, i64 %79
  %81 = bitcast %"struct.jxl::HuffmanTree"* %80 to i8*
  %82 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %29, i64 %79
  %83 = icmp ugt %"struct.jxl::HuffmanTree"* %82, %6
  %84 = icmp ult i8* %30, %81
  %85 = and i1 %83, %84
  br i1 %85, label %45, label %86

86:                                               ; preds = %72
  %87 = and i64 %43, 4611686018427387900
  %88 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %6, i64 %87
  %89 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %29, i64 %87
  %90 = add nsw i64 %87, -4
  %91 = lshr exact i64 %90, 2
  %92 = add nuw nsw i64 %91, 1
  %93 = and i64 %92, 3
  %94 = icmp ult i64 %90, 12
  br i1 %94, label %146, label %95

95:                                               ; preds = %86
  %96 = sub nsw i64 %92, %93
  br label %97

97:                                               ; preds = %97, %95
  %98 = phi i64 [ 0, %95 ], [ %143, %97 ]
  %99 = phi i64 [ %96, %95 ], [ %144, %97 ]
  %100 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %6, i64 %98
  %101 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %29, i64 %98
  %102 = bitcast %"struct.jxl::HuffmanTree"* %101 to <2 x i64>*
  %103 = load <2 x i64>, <2 x i64>* %102, align 4, !alias.scope !43
  %104 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %101, i64 2
  %105 = bitcast %"struct.jxl::HuffmanTree"* %104 to <2 x i64>*
  %106 = load <2 x i64>, <2 x i64>* %105, align 4, !alias.scope !43
  %107 = bitcast %"struct.jxl::HuffmanTree"* %100 to <2 x i64>*
  store <2 x i64> %103, <2 x i64>* %107, align 4, !alias.scope !46, !noalias !43
  %108 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %100, i64 2
  %109 = bitcast %"struct.jxl::HuffmanTree"* %108 to <2 x i64>*
  store <2 x i64> %106, <2 x i64>* %109, align 4, !alias.scope !46, !noalias !43
  %110 = or i64 %98, 4
  %111 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %6, i64 %110
  %112 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %29, i64 %110
  %113 = bitcast %"struct.jxl::HuffmanTree"* %112 to <2 x i64>*
  %114 = load <2 x i64>, <2 x i64>* %113, align 4, !alias.scope !43
  %115 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %112, i64 2
  %116 = bitcast %"struct.jxl::HuffmanTree"* %115 to <2 x i64>*
  %117 = load <2 x i64>, <2 x i64>* %116, align 4, !alias.scope !43
  %118 = bitcast %"struct.jxl::HuffmanTree"* %111 to <2 x i64>*
  store <2 x i64> %114, <2 x i64>* %118, align 4, !alias.scope !46, !noalias !43
  %119 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %111, i64 2
  %120 = bitcast %"struct.jxl::HuffmanTree"* %119 to <2 x i64>*
  store <2 x i64> %117, <2 x i64>* %120, align 4, !alias.scope !46, !noalias !43
  %121 = or i64 %98, 8
  %122 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %6, i64 %121
  %123 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %29, i64 %121
  %124 = bitcast %"struct.jxl::HuffmanTree"* %123 to <2 x i64>*
  %125 = load <2 x i64>, <2 x i64>* %124, align 4, !alias.scope !43
  %126 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %123, i64 2
  %127 = bitcast %"struct.jxl::HuffmanTree"* %126 to <2 x i64>*
  %128 = load <2 x i64>, <2 x i64>* %127, align 4, !alias.scope !43
  %129 = bitcast %"struct.jxl::HuffmanTree"* %122 to <2 x i64>*
  store <2 x i64> %125, <2 x i64>* %129, align 4, !alias.scope !46, !noalias !43
  %130 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %122, i64 2
  %131 = bitcast %"struct.jxl::HuffmanTree"* %130 to <2 x i64>*
  store <2 x i64> %128, <2 x i64>* %131, align 4, !alias.scope !46, !noalias !43
  %132 = or i64 %98, 12
  %133 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %6, i64 %132
  %134 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %29, i64 %132
  %135 = bitcast %"struct.jxl::HuffmanTree"* %134 to <2 x i64>*
  %136 = load <2 x i64>, <2 x i64>* %135, align 4, !alias.scope !43
  %137 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %134, i64 2
  %138 = bitcast %"struct.jxl::HuffmanTree"* %137 to <2 x i64>*
  %139 = load <2 x i64>, <2 x i64>* %138, align 4, !alias.scope !43
  %140 = bitcast %"struct.jxl::HuffmanTree"* %133 to <2 x i64>*
  store <2 x i64> %136, <2 x i64>* %140, align 4, !alias.scope !46, !noalias !43
  %141 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %133, i64 2
  %142 = bitcast %"struct.jxl::HuffmanTree"* %141 to <2 x i64>*
  store <2 x i64> %139, <2 x i64>* %142, align 4, !alias.scope !46, !noalias !43
  %143 = add i64 %98, 16
  %144 = add i64 %99, -4
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %146, label %97, !llvm.loop !48

146:                                              ; preds = %97, %86
  %147 = phi i64 [ 0, %86 ], [ %143, %97 ]
  %148 = icmp eq i64 %93, 0
  br i1 %148, label %165, label %149

149:                                              ; preds = %146, %149
  %150 = phi i64 [ %162, %149 ], [ %147, %146 ]
  %151 = phi i64 [ %163, %149 ], [ %93, %146 ]
  %152 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %6, i64 %150
  %153 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %29, i64 %150
  %154 = bitcast %"struct.jxl::HuffmanTree"* %153 to <2 x i64>*
  %155 = load <2 x i64>, <2 x i64>* %154, align 4, !alias.scope !43
  %156 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %153, i64 2
  %157 = bitcast %"struct.jxl::HuffmanTree"* %156 to <2 x i64>*
  %158 = load <2 x i64>, <2 x i64>* %157, align 4, !alias.scope !43
  %159 = bitcast %"struct.jxl::HuffmanTree"* %152 to <2 x i64>*
  store <2 x i64> %155, <2 x i64>* %159, align 4, !alias.scope !46, !noalias !43
  %160 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %152, i64 2
  %161 = bitcast %"struct.jxl::HuffmanTree"* %160 to <2 x i64>*
  store <2 x i64> %158, <2 x i64>* %161, align 4, !alias.scope !46, !noalias !43
  %162 = add i64 %150, 4
  %163 = add i64 %151, -1
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %165, label %149, !llvm.loop !49

165:                                              ; preds = %149, %146
  %166 = icmp eq i64 %43, %87
  br i1 %166, label %300, label %45

167:                                              ; preds = %28
  %168 = icmp eq %"struct.jxl::HuffmanTree"* %15, %31
  br i1 %168, label %972, label %169

169:                                              ; preds = %167
  %170 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %15, i64 -1, i32 0
  %171 = bitcast i32* %170 to i8*
  %172 = sub i64 0, %18
  %173 = getelementptr i8, i8* %171, i64 %172
  %174 = ptrtoint i8* %173 to i64
  %175 = lshr i64 %174, 3
  %176 = add nuw nsw i64 %175, 1
  %177 = icmp ult i64 %176, 4
  br i1 %177, label %178, label %205

178:                                              ; preds = %298, %205, %169
  %179 = phi %"struct.jxl::HuffmanTree"* [ %6, %205 ], [ %6, %169 ], [ %221, %298 ]
  %180 = phi %"struct.jxl::HuffmanTree"* [ %31, %205 ], [ %31, %169 ], [ %222, %298 ]
  %181 = ptrtoint %"struct.jxl::HuffmanTree"* %180 to i64
  %182 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %15, i64 -1, i32 0
  %183 = ptrtoint i32* %182 to i64
  %184 = sub i64 %183, %181
  %185 = lshr i64 %184, 3
  %186 = add nuw nsw i64 %185, 1
  %187 = and i64 %186, 7
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %200, label %189

189:                                              ; preds = %178, %189
  %190 = phi %"struct.jxl::HuffmanTree"* [ %197, %189 ], [ %179, %178 ]
  %191 = phi %"struct.jxl::HuffmanTree"* [ %196, %189 ], [ %180, %178 ]
  %192 = phi i64 [ %198, %189 ], [ %187, %178 ]
  %193 = bitcast %"struct.jxl::HuffmanTree"* %191 to i64*
  %194 = bitcast %"struct.jxl::HuffmanTree"* %190 to i64*
  %195 = load i64, i64* %193, align 4
  store i64 %195, i64* %194, align 4
  %196 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %191, i64 1
  %197 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %190, i64 1
  %198 = add i64 %192, -1
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %200, label %189, !llvm.loop !50

200:                                              ; preds = %189, %178
  %201 = phi %"struct.jxl::HuffmanTree"* [ undef, %178 ], [ %197, %189 ]
  %202 = phi %"struct.jxl::HuffmanTree"* [ %179, %178 ], [ %197, %189 ]
  %203 = phi %"struct.jxl::HuffmanTree"* [ %180, %178 ], [ %196, %189 ]
  %204 = icmp ult i64 %184, 56
  br i1 %204, label %378, label %565

205:                                              ; preds = %169
  %206 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %15, i64 -1, i32 0
  %207 = bitcast i32* %206 to i8*
  %208 = sub i64 0, %18
  %209 = getelementptr i8, i8* %207, i64 %208
  %210 = ptrtoint i8* %209 to i64
  %211 = lshr i64 %210, 3
  %212 = add nuw nsw i64 %211, 1
  %213 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %6, i64 %212
  %214 = bitcast %"struct.jxl::HuffmanTree"* %213 to i8*
  %215 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %31, i64 %212
  %216 = icmp ugt %"struct.jxl::HuffmanTree"* %215, %6
  %217 = icmp ult i8* %32, %214
  %218 = and i1 %216, %217
  br i1 %218, label %178, label %219

219:                                              ; preds = %205
  %220 = and i64 %176, 4611686018427387900
  %221 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %6, i64 %220
  %222 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %31, i64 %220
  %223 = add nsw i64 %220, -4
  %224 = lshr exact i64 %223, 2
  %225 = add nuw nsw i64 %224, 1
  %226 = and i64 %225, 3
  %227 = icmp ult i64 %223, 12
  br i1 %227, label %279, label %228

228:                                              ; preds = %219
  %229 = sub nsw i64 %225, %226
  br label %230

230:                                              ; preds = %230, %228
  %231 = phi i64 [ 0, %228 ], [ %276, %230 ]
  %232 = phi i64 [ %229, %228 ], [ %277, %230 ]
  %233 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %6, i64 %231
  %234 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %31, i64 %231
  %235 = bitcast %"struct.jxl::HuffmanTree"* %234 to <2 x i64>*
  %236 = load <2 x i64>, <2 x i64>* %235, align 4, !alias.scope !51
  %237 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %234, i64 2
  %238 = bitcast %"struct.jxl::HuffmanTree"* %237 to <2 x i64>*
  %239 = load <2 x i64>, <2 x i64>* %238, align 4, !alias.scope !51
  %240 = bitcast %"struct.jxl::HuffmanTree"* %233 to <2 x i64>*
  store <2 x i64> %236, <2 x i64>* %240, align 4, !alias.scope !54, !noalias !51
  %241 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %233, i64 2
  %242 = bitcast %"struct.jxl::HuffmanTree"* %241 to <2 x i64>*
  store <2 x i64> %239, <2 x i64>* %242, align 4, !alias.scope !54, !noalias !51
  %243 = or i64 %231, 4
  %244 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %6, i64 %243
  %245 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %31, i64 %243
  %246 = bitcast %"struct.jxl::HuffmanTree"* %245 to <2 x i64>*
  %247 = load <2 x i64>, <2 x i64>* %246, align 4, !alias.scope !51
  %248 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %245, i64 2
  %249 = bitcast %"struct.jxl::HuffmanTree"* %248 to <2 x i64>*
  %250 = load <2 x i64>, <2 x i64>* %249, align 4, !alias.scope !51
  %251 = bitcast %"struct.jxl::HuffmanTree"* %244 to <2 x i64>*
  store <2 x i64> %247, <2 x i64>* %251, align 4, !alias.scope !54, !noalias !51
  %252 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %244, i64 2
  %253 = bitcast %"struct.jxl::HuffmanTree"* %252 to <2 x i64>*
  store <2 x i64> %250, <2 x i64>* %253, align 4, !alias.scope !54, !noalias !51
  %254 = or i64 %231, 8
  %255 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %6, i64 %254
  %256 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %31, i64 %254
  %257 = bitcast %"struct.jxl::HuffmanTree"* %256 to <2 x i64>*
  %258 = load <2 x i64>, <2 x i64>* %257, align 4, !alias.scope !51
  %259 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %256, i64 2
  %260 = bitcast %"struct.jxl::HuffmanTree"* %259 to <2 x i64>*
  %261 = load <2 x i64>, <2 x i64>* %260, align 4, !alias.scope !51
  %262 = bitcast %"struct.jxl::HuffmanTree"* %255 to <2 x i64>*
  store <2 x i64> %258, <2 x i64>* %262, align 4, !alias.scope !54, !noalias !51
  %263 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %255, i64 2
  %264 = bitcast %"struct.jxl::HuffmanTree"* %263 to <2 x i64>*
  store <2 x i64> %261, <2 x i64>* %264, align 4, !alias.scope !54, !noalias !51
  %265 = or i64 %231, 12
  %266 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %6, i64 %265
  %267 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %31, i64 %265
  %268 = bitcast %"struct.jxl::HuffmanTree"* %267 to <2 x i64>*
  %269 = load <2 x i64>, <2 x i64>* %268, align 4, !alias.scope !51
  %270 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %267, i64 2
  %271 = bitcast %"struct.jxl::HuffmanTree"* %270 to <2 x i64>*
  %272 = load <2 x i64>, <2 x i64>* %271, align 4, !alias.scope !51
  %273 = bitcast %"struct.jxl::HuffmanTree"* %266 to <2 x i64>*
  store <2 x i64> %269, <2 x i64>* %273, align 4, !alias.scope !54, !noalias !51
  %274 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %266, i64 2
  %275 = bitcast %"struct.jxl::HuffmanTree"* %274 to <2 x i64>*
  store <2 x i64> %272, <2 x i64>* %275, align 4, !alias.scope !54, !noalias !51
  %276 = add i64 %231, 16
  %277 = add i64 %232, -4
  %278 = icmp eq i64 %277, 0
  br i1 %278, label %279, label %230, !llvm.loop !56

279:                                              ; preds = %230, %219
  %280 = phi i64 [ 0, %219 ], [ %276, %230 ]
  %281 = icmp eq i64 %226, 0
  br i1 %281, label %298, label %282

282:                                              ; preds = %279, %282
  %283 = phi i64 [ %295, %282 ], [ %280, %279 ]
  %284 = phi i64 [ %296, %282 ], [ %226, %279 ]
  %285 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %6, i64 %283
  %286 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %31, i64 %283
  %287 = bitcast %"struct.jxl::HuffmanTree"* %286 to <2 x i64>*
  %288 = load <2 x i64>, <2 x i64>* %287, align 4, !alias.scope !51
  %289 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %286, i64 2
  %290 = bitcast %"struct.jxl::HuffmanTree"* %289 to <2 x i64>*
  %291 = load <2 x i64>, <2 x i64>* %290, align 4, !alias.scope !51
  %292 = bitcast %"struct.jxl::HuffmanTree"* %285 to <2 x i64>*
  store <2 x i64> %288, <2 x i64>* %292, align 4, !alias.scope !54, !noalias !51
  %293 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %285, i64 2
  %294 = bitcast %"struct.jxl::HuffmanTree"* %293 to <2 x i64>*
  store <2 x i64> %291, <2 x i64>* %294, align 4, !alias.scope !54, !noalias !51
  %295 = add i64 %283, 4
  %296 = add i64 %284, -1
  %297 = icmp eq i64 %296, 0
  br i1 %297, label %298, label %282, !llvm.loop !57

298:                                              ; preds = %282, %279
  %299 = icmp eq i64 %176, %220
  br i1 %299, label %378, label %178

300:                                              ; preds = %67, %334, %165
  %301 = phi %"struct.jxl::HuffmanTree"* [ %88, %165 ], [ %68, %67 ], [ %376, %334 ]
  %302 = icmp eq %"struct.jxl::HuffmanTree"* %301, %6
  br i1 %302, label %972, label %303

303:                                              ; preds = %300, %329
  %304 = phi %"struct.jxl::HuffmanTree"* [ %331, %329 ], [ %6, %300 ]
  %305 = phi %"struct.jxl::HuffmanTree"* [ %332, %329 ], [ %29, %300 ]
  %306 = phi %"struct.jxl::HuffmanTree"* [ %330, %329 ], [ %31, %300 ]
  %307 = icmp eq %"struct.jxl::HuffmanTree"* %306, %15
  br i1 %307, label %308, label %316

308:                                              ; preds = %303
  %309 = ptrtoint %"struct.jxl::HuffmanTree"* %301 to i64
  %310 = ptrtoint %"struct.jxl::HuffmanTree"* %304 to i64
  %311 = sub i64 %309, %310
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %972, label %313

313:                                              ; preds = %308
  %314 = bitcast %"struct.jxl::HuffmanTree"* %305 to i8*
  %315 = bitcast %"struct.jxl::HuffmanTree"* %304 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %314, i8* align 4 %315, i64 %311, i1 false) #10
  br label %972

316:                                              ; preds = %303
  %317 = load i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)*, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** %3, align 8
  %318 = tail call zeroext i1 %317(%"struct.jxl::HuffmanTree"* dereferenceable(8) %306, %"struct.jxl::HuffmanTree"* dereferenceable(8) %304) #10
  br i1 %318, label %319, label %324

319:                                              ; preds = %316
  %320 = bitcast %"struct.jxl::HuffmanTree"* %306 to i64*
  %321 = bitcast %"struct.jxl::HuffmanTree"* %305 to i64*
  %322 = load i64, i64* %320, align 4
  store i64 %322, i64* %321, align 4
  %323 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %306, i64 1
  br label %329

324:                                              ; preds = %316
  %325 = bitcast %"struct.jxl::HuffmanTree"* %304 to i64*
  %326 = bitcast %"struct.jxl::HuffmanTree"* %305 to i64*
  %327 = load i64, i64* %325, align 4
  store i64 %327, i64* %326, align 4
  %328 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %304, i64 1
  br label %329

329:                                              ; preds = %324, %319
  %330 = phi %"struct.jxl::HuffmanTree"* [ %323, %319 ], [ %306, %324 ]
  %331 = phi %"struct.jxl::HuffmanTree"* [ %304, %319 ], [ %328, %324 ]
  %332 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %305, i64 1
  %333 = icmp eq %"struct.jxl::HuffmanTree"* %331, %301
  br i1 %333, label %972, label %303

334:                                              ; preds = %67, %334
  %335 = phi %"struct.jxl::HuffmanTree"* [ %376, %334 ], [ %69, %67 ]
  %336 = phi %"struct.jxl::HuffmanTree"* [ %375, %334 ], [ %70, %67 ]
  %337 = bitcast %"struct.jxl::HuffmanTree"* %336 to i64*
  %338 = bitcast %"struct.jxl::HuffmanTree"* %335 to i64*
  %339 = load i64, i64* %337, align 4
  store i64 %339, i64* %338, align 4
  %340 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %336, i64 1
  %341 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %335, i64 1
  %342 = bitcast %"struct.jxl::HuffmanTree"* %340 to i64*
  %343 = bitcast %"struct.jxl::HuffmanTree"* %341 to i64*
  %344 = load i64, i64* %342, align 4
  store i64 %344, i64* %343, align 4
  %345 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %336, i64 2
  %346 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %335, i64 2
  %347 = bitcast %"struct.jxl::HuffmanTree"* %345 to i64*
  %348 = bitcast %"struct.jxl::HuffmanTree"* %346 to i64*
  %349 = load i64, i64* %347, align 4
  store i64 %349, i64* %348, align 4
  %350 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %336, i64 3
  %351 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %335, i64 3
  %352 = bitcast %"struct.jxl::HuffmanTree"* %350 to i64*
  %353 = bitcast %"struct.jxl::HuffmanTree"* %351 to i64*
  %354 = load i64, i64* %352, align 4
  store i64 %354, i64* %353, align 4
  %355 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %336, i64 4
  %356 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %335, i64 4
  %357 = bitcast %"struct.jxl::HuffmanTree"* %355 to i64*
  %358 = bitcast %"struct.jxl::HuffmanTree"* %356 to i64*
  %359 = load i64, i64* %357, align 4
  store i64 %359, i64* %358, align 4
  %360 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %336, i64 5
  %361 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %335, i64 5
  %362 = bitcast %"struct.jxl::HuffmanTree"* %360 to i64*
  %363 = bitcast %"struct.jxl::HuffmanTree"* %361 to i64*
  %364 = load i64, i64* %362, align 4
  store i64 %364, i64* %363, align 4
  %365 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %336, i64 6
  %366 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %335, i64 6
  %367 = bitcast %"struct.jxl::HuffmanTree"* %365 to i64*
  %368 = bitcast %"struct.jxl::HuffmanTree"* %366 to i64*
  %369 = load i64, i64* %367, align 4
  store i64 %369, i64* %368, align 4
  %370 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %336, i64 7
  %371 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %335, i64 7
  %372 = bitcast %"struct.jxl::HuffmanTree"* %370 to i64*
  %373 = bitcast %"struct.jxl::HuffmanTree"* %371 to i64*
  %374 = load i64, i64* %372, align 4
  store i64 %374, i64* %373, align 4
  %375 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %336, i64 8
  %376 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %335, i64 8
  %377 = icmp eq %"struct.jxl::HuffmanTree"* %375, %31
  br i1 %377, label %300, label %334, !llvm.loop !58

378:                                              ; preds = %200, %565, %298
  %379 = phi %"struct.jxl::HuffmanTree"* [ %221, %298 ], [ %201, %200 ], [ %607, %565 ]
  %380 = icmp eq %"struct.jxl::HuffmanTree"* %379, %6
  br i1 %380, label %972, label %381

381:                                              ; preds = %378, %552
  %382 = phi %"struct.jxl::HuffmanTree"* [ %557, %552 ], [ %15, %378 ]
  %383 = phi %"struct.jxl::HuffmanTree"* [ %560, %552 ], [ %379, %378 ]
  %384 = phi %"struct.jxl::HuffmanTree"* [ %559, %552 ], [ %31, %378 ]
  %385 = icmp eq %"struct.jxl::HuffmanTree"* %384, %29
  br i1 %385, label %386, label %552

386:                                              ; preds = %381
  %387 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %383, i64 -1, i32 0
  %388 = ptrtoint i32* %387 to i64
  %389 = sub i64 %388, %9
  %390 = lshr i64 %389, 3
  %391 = add nuw nsw i64 %390, 1
  %392 = icmp ult i64 %391, 4
  br i1 %392, label %483, label %393

393:                                              ; preds = %386
  %394 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %383, i64 -1, i32 0
  %395 = ptrtoint i32* %394 to i64
  %396 = sub i64 %395, %9
  %397 = lshr i64 %396, 3
  %398 = xor i64 %397, -1
  %399 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %382, i64 %398
  %400 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %383, i64 %398
  %401 = icmp ult %"struct.jxl::HuffmanTree"* %399, %383
  %402 = icmp ult %"struct.jxl::HuffmanTree"* %400, %382
  %403 = and i1 %401, %402
  br i1 %403, label %483, label %404

404:                                              ; preds = %393
  %405 = and i64 %391, 4611686018427387900
  %406 = sub nsw i64 0, %405
  %407 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %383, i64 %406
  %408 = sub nsw i64 0, %405
  %409 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %382, i64 %408
  %410 = add nsw i64 %405, -4
  %411 = lshr exact i64 %410, 2
  %412 = add nuw nsw i64 %411, 1
  %413 = and i64 %412, 1
  %414 = icmp eq i64 %410, 0
  br i1 %414, label %461, label %415

415:                                              ; preds = %404
  %416 = sub nuw nsw i64 %412, %413
  %417 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %383, i64 -1
  %418 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %382, i64 -1
  %419 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %383, i64 -1
  %420 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %382, i64 -1
  br label %421

421:                                              ; preds = %421, %415
  %422 = phi i64 [ 0, %415 ], [ %456, %421 ]
  %423 = phi i64 [ %416, %415 ], [ %457, %421 ]
  %424 = sub i64 0, %422
  %425 = sub i64 0, %422
  %426 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %417, i64 %424
  %427 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %418, i64 %425
  %428 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %426, i64 -1
  %429 = bitcast %"struct.jxl::HuffmanTree"* %428 to <2 x i64>*
  %430 = load <2 x i64>, <2 x i64>* %429, align 4, !alias.scope !59
  %431 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %426, i64 -2
  %432 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %431, i64 -1
  %433 = bitcast %"struct.jxl::HuffmanTree"* %432 to <2 x i64>*
  %434 = load <2 x i64>, <2 x i64>* %433, align 4, !alias.scope !59
  %435 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %427, i64 -1
  %436 = bitcast %"struct.jxl::HuffmanTree"* %435 to <2 x i64>*
  store <2 x i64> %430, <2 x i64>* %436, align 4, !alias.scope !62, !noalias !59
  %437 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %427, i64 -2
  %438 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %437, i64 -1
  %439 = bitcast %"struct.jxl::HuffmanTree"* %438 to <2 x i64>*
  store <2 x i64> %434, <2 x i64>* %439, align 4, !alias.scope !62, !noalias !59
  %440 = sub nuw nsw i64 -4, %422
  %441 = sub nuw nsw i64 -4, %422
  %442 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %419, i64 %440
  %443 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %420, i64 %441
  %444 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %442, i64 -1
  %445 = bitcast %"struct.jxl::HuffmanTree"* %444 to <2 x i64>*
  %446 = load <2 x i64>, <2 x i64>* %445, align 4, !alias.scope !59
  %447 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %442, i64 -2
  %448 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %447, i64 -1
  %449 = bitcast %"struct.jxl::HuffmanTree"* %448 to <2 x i64>*
  %450 = load <2 x i64>, <2 x i64>* %449, align 4, !alias.scope !59
  %451 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %443, i64 -1
  %452 = bitcast %"struct.jxl::HuffmanTree"* %451 to <2 x i64>*
  store <2 x i64> %446, <2 x i64>* %452, align 4, !alias.scope !62, !noalias !59
  %453 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %443, i64 -2
  %454 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %453, i64 -1
  %455 = bitcast %"struct.jxl::HuffmanTree"* %454 to <2 x i64>*
  store <2 x i64> %450, <2 x i64>* %455, align 4, !alias.scope !62, !noalias !59
  %456 = add i64 %422, 8
  %457 = add i64 %423, -2
  %458 = icmp eq i64 %457, 0
  br i1 %458, label %459, label %421, !llvm.loop !64

459:                                              ; preds = %421
  %460 = sub nuw nsw i64 -8, %422
  br label %461

461:                                              ; preds = %459, %404
  %462 = phi i64 [ 0, %404 ], [ %460, %459 ]
  %463 = icmp eq i64 %413, 0
  br i1 %463, label %481, label %464

464:                                              ; preds = %461
  %465 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %383, i64 -1
  %466 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %382, i64 -1
  %467 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %465, i64 %462
  %468 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %466, i64 %462
  %469 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %467, i64 -1
  %470 = bitcast %"struct.jxl::HuffmanTree"* %469 to <2 x i64>*
  %471 = load <2 x i64>, <2 x i64>* %470, align 4, !alias.scope !59
  %472 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %467, i64 -2
  %473 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %472, i64 -1
  %474 = bitcast %"struct.jxl::HuffmanTree"* %473 to <2 x i64>*
  %475 = load <2 x i64>, <2 x i64>* %474, align 4, !alias.scope !59
  %476 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %468, i64 -1
  %477 = bitcast %"struct.jxl::HuffmanTree"* %476 to <2 x i64>*
  store <2 x i64> %471, <2 x i64>* %477, align 4, !alias.scope !62, !noalias !59
  %478 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %468, i64 -2
  %479 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %478, i64 -1
  %480 = bitcast %"struct.jxl::HuffmanTree"* %479 to <2 x i64>*
  store <2 x i64> %475, <2 x i64>* %480, align 4, !alias.scope !62, !noalias !59
  br label %481

481:                                              ; preds = %461, %464
  %482 = icmp eq i64 %391, %405
  br i1 %482, label %972, label %483

483:                                              ; preds = %481, %393, %386
  %484 = phi %"struct.jxl::HuffmanTree"* [ %383, %393 ], [ %383, %386 ], [ %407, %481 ]
  %485 = phi %"struct.jxl::HuffmanTree"* [ %382, %393 ], [ %382, %386 ], [ %409, %481 ]
  %486 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %484, i64 -1, i32 0
  %487 = ptrtoint i32* %486 to i64
  %488 = sub i64 %487, %9
  %489 = lshr i64 %488, 3
  %490 = add nuw nsw i64 %489, 1
  %491 = and i64 %490, 7
  %492 = icmp eq i64 %491, 0
  br i1 %492, label %504, label %493

493:                                              ; preds = %483, %493
  %494 = phi %"struct.jxl::HuffmanTree"* [ %497, %493 ], [ %484, %483 ]
  %495 = phi %"struct.jxl::HuffmanTree"* [ %498, %493 ], [ %485, %483 ]
  %496 = phi i64 [ %502, %493 ], [ %491, %483 ]
  %497 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %494, i64 -1
  %498 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %495, i64 -1
  %499 = bitcast %"struct.jxl::HuffmanTree"* %497 to i64*
  %500 = bitcast %"struct.jxl::HuffmanTree"* %498 to i64*
  %501 = load i64, i64* %499, align 4
  store i64 %501, i64* %500, align 4
  %502 = add i64 %496, -1
  %503 = icmp eq i64 %502, 0
  br i1 %503, label %504, label %493, !llvm.loop !65

504:                                              ; preds = %493, %483
  %505 = phi %"struct.jxl::HuffmanTree"* [ %484, %483 ], [ %497, %493 ]
  %506 = phi %"struct.jxl::HuffmanTree"* [ %485, %483 ], [ %498, %493 ]
  %507 = icmp ult i64 %488, 56
  br i1 %507, label %972, label %508

508:                                              ; preds = %504, %508
  %509 = phi %"struct.jxl::HuffmanTree"* [ %546, %508 ], [ %505, %504 ]
  %510 = phi %"struct.jxl::HuffmanTree"* [ %547, %508 ], [ %506, %504 ]
  %511 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %509, i64 -1
  %512 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %510, i64 -1
  %513 = bitcast %"struct.jxl::HuffmanTree"* %511 to i64*
  %514 = bitcast %"struct.jxl::HuffmanTree"* %512 to i64*
  %515 = load i64, i64* %513, align 4
  store i64 %515, i64* %514, align 4
  %516 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %509, i64 -2
  %517 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %510, i64 -2
  %518 = bitcast %"struct.jxl::HuffmanTree"* %516 to i64*
  %519 = bitcast %"struct.jxl::HuffmanTree"* %517 to i64*
  %520 = load i64, i64* %518, align 4
  store i64 %520, i64* %519, align 4
  %521 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %509, i64 -3
  %522 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %510, i64 -3
  %523 = bitcast %"struct.jxl::HuffmanTree"* %521 to i64*
  %524 = bitcast %"struct.jxl::HuffmanTree"* %522 to i64*
  %525 = load i64, i64* %523, align 4
  store i64 %525, i64* %524, align 4
  %526 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %509, i64 -4
  %527 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %510, i64 -4
  %528 = bitcast %"struct.jxl::HuffmanTree"* %526 to i64*
  %529 = bitcast %"struct.jxl::HuffmanTree"* %527 to i64*
  %530 = load i64, i64* %528, align 4
  store i64 %530, i64* %529, align 4
  %531 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %509, i64 -5
  %532 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %510, i64 -5
  %533 = bitcast %"struct.jxl::HuffmanTree"* %531 to i64*
  %534 = bitcast %"struct.jxl::HuffmanTree"* %532 to i64*
  %535 = load i64, i64* %533, align 4
  store i64 %535, i64* %534, align 4
  %536 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %509, i64 -6
  %537 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %510, i64 -6
  %538 = bitcast %"struct.jxl::HuffmanTree"* %536 to i64*
  %539 = bitcast %"struct.jxl::HuffmanTree"* %537 to i64*
  %540 = load i64, i64* %538, align 4
  store i64 %540, i64* %539, align 4
  %541 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %509, i64 -7
  %542 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %510, i64 -7
  %543 = bitcast %"struct.jxl::HuffmanTree"* %541 to i64*
  %544 = bitcast %"struct.jxl::HuffmanTree"* %542 to i64*
  %545 = load i64, i64* %543, align 4
  store i64 %545, i64* %544, align 4
  %546 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %509, i64 -8
  %547 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %510, i64 -8
  %548 = bitcast %"struct.jxl::HuffmanTree"* %546 to i64*
  %549 = bitcast %"struct.jxl::HuffmanTree"* %547 to i64*
  %550 = load i64, i64* %548, align 4
  store i64 %550, i64* %549, align 4
  %551 = icmp eq %"struct.jxl::HuffmanTree"* %546, %6
  br i1 %551, label %972, label %508, !llvm.loop !66

552:                                              ; preds = %381
  %553 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %384, i64 -1
  %554 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %383, i64 -1
  %555 = load i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)*, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** %3, align 8
  %556 = tail call zeroext i1 %555(%"struct.jxl::HuffmanTree"* dereferenceable(8) %554, %"struct.jxl::HuffmanTree"* dereferenceable(8) %553) #10
  %557 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %382, i64 -1
  %558 = select i1 %556, %"struct.jxl::HuffmanTree"* %553, %"struct.jxl::HuffmanTree"* %554
  %559 = select i1 %556, %"struct.jxl::HuffmanTree"* %553, %"struct.jxl::HuffmanTree"* %384
  %560 = select i1 %556, %"struct.jxl::HuffmanTree"* %383, %"struct.jxl::HuffmanTree"* %554
  %561 = bitcast %"struct.jxl::HuffmanTree"* %558 to i64*
  %562 = bitcast %"struct.jxl::HuffmanTree"* %557 to i64*
  %563 = load i64, i64* %561, align 4
  store i64 %563, i64* %562, align 4
  %564 = icmp eq %"struct.jxl::HuffmanTree"* %560, %6
  br i1 %564, label %972, label %381

565:                                              ; preds = %200, %565
  %566 = phi %"struct.jxl::HuffmanTree"* [ %607, %565 ], [ %202, %200 ]
  %567 = phi %"struct.jxl::HuffmanTree"* [ %606, %565 ], [ %203, %200 ]
  %568 = bitcast %"struct.jxl::HuffmanTree"* %567 to i64*
  %569 = bitcast %"struct.jxl::HuffmanTree"* %566 to i64*
  %570 = load i64, i64* %568, align 4
  store i64 %570, i64* %569, align 4
  %571 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %567, i64 1
  %572 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %566, i64 1
  %573 = bitcast %"struct.jxl::HuffmanTree"* %571 to i64*
  %574 = bitcast %"struct.jxl::HuffmanTree"* %572 to i64*
  %575 = load i64, i64* %573, align 4
  store i64 %575, i64* %574, align 4
  %576 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %567, i64 2
  %577 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %566, i64 2
  %578 = bitcast %"struct.jxl::HuffmanTree"* %576 to i64*
  %579 = bitcast %"struct.jxl::HuffmanTree"* %577 to i64*
  %580 = load i64, i64* %578, align 4
  store i64 %580, i64* %579, align 4
  %581 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %567, i64 3
  %582 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %566, i64 3
  %583 = bitcast %"struct.jxl::HuffmanTree"* %581 to i64*
  %584 = bitcast %"struct.jxl::HuffmanTree"* %582 to i64*
  %585 = load i64, i64* %583, align 4
  store i64 %585, i64* %584, align 4
  %586 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %567, i64 4
  %587 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %566, i64 4
  %588 = bitcast %"struct.jxl::HuffmanTree"* %586 to i64*
  %589 = bitcast %"struct.jxl::HuffmanTree"* %587 to i64*
  %590 = load i64, i64* %588, align 4
  store i64 %590, i64* %589, align 4
  %591 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %567, i64 5
  %592 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %566, i64 5
  %593 = bitcast %"struct.jxl::HuffmanTree"* %591 to i64*
  %594 = bitcast %"struct.jxl::HuffmanTree"* %592 to i64*
  %595 = load i64, i64* %593, align 4
  store i64 %595, i64* %594, align 4
  %596 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %567, i64 6
  %597 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %566, i64 6
  %598 = bitcast %"struct.jxl::HuffmanTree"* %596 to i64*
  %599 = bitcast %"struct.jxl::HuffmanTree"* %597 to i64*
  %600 = load i64, i64* %598, align 4
  store i64 %600, i64* %599, align 4
  %601 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %567, i64 7
  %602 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %566, i64 7
  %603 = bitcast %"struct.jxl::HuffmanTree"* %601 to i64*
  %604 = bitcast %"struct.jxl::HuffmanTree"* %602 to i64*
  %605 = load i64, i64* %603, align 4
  store i64 %605, i64* %604, align 4
  %606 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %567, i64 8
  %607 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %566, i64 8
  %608 = icmp eq %"struct.jxl::HuffmanTree"* %606, %15
  br i1 %608, label %378, label %565, !llvm.loop !67

609:                                              ; preds = %25, %615
  %610 = phi i64 [ %16, %25 ], [ %618, %615 ]
  %611 = phi i64 [ %19, %25 ], [ %617, %615 ]
  %612 = load i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)*, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** %3, align 8
  %613 = inttoptr i64 %611 to %"struct.jxl::HuffmanTree"*
  %614 = tail call zeroext i1 %612(%"struct.jxl::HuffmanTree"* dereferenceable(8) %26, %"struct.jxl::HuffmanTree"* dereferenceable(8) %613) #10
  br i1 %614, label %620, label %615

615:                                              ; preds = %609
  %616 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %613, i64 1
  %617 = ptrtoint %"struct.jxl::HuffmanTree"* %616 to i64
  %618 = add nsw i64 %610, -1
  %619 = icmp eq i64 %618, 0
  br i1 %619, label %972, label %609

620:                                              ; preds = %609
  %621 = inttoptr i64 %611 to %"struct.jxl::HuffmanTree"*
  %622 = icmp slt i64 %610, %17
  br i1 %622, label %623, label %649

623:                                              ; preds = %620
  %624 = sdiv i64 %17, 2
  %625 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %26, i64 %624
  %626 = ptrtoint %"struct.jxl::HuffmanTree"* %625 to i64
  %627 = sub i64 %18, %611
  %628 = icmp eq i64 %627, 0
  br i1 %628, label %644, label %629

629:                                              ; preds = %623
  %630 = ashr exact i64 %627, 3
  br label %631

631:                                              ; preds = %631, %629
  %632 = phi %"struct.jxl::HuffmanTree"* [ %642, %631 ], [ %621, %629 ]
  %633 = phi i64 [ %641, %631 ], [ %630, %629 ]
  %634 = lshr i64 %633, 1
  %635 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %632, i64 %634
  %636 = load i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)*, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** %3, align 8
  %637 = tail call zeroext i1 %636(%"struct.jxl::HuffmanTree"* dereferenceable(8) %625, %"struct.jxl::HuffmanTree"* dereferenceable(8) %635) #10
  %638 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %635, i64 1
  %639 = xor i64 %634, -1
  %640 = add i64 %633, %639
  %641 = select i1 %637, i64 %634, i64 %640
  %642 = select i1 %637, %"struct.jxl::HuffmanTree"* %632, %"struct.jxl::HuffmanTree"* %638
  %643 = icmp eq i64 %641, 0
  br i1 %643, label %644, label %631

644:                                              ; preds = %631, %623
  %645 = phi %"struct.jxl::HuffmanTree"* [ %621, %623 ], [ %642, %631 ]
  %646 = ptrtoint %"struct.jxl::HuffmanTree"* %645 to i64
  %647 = sub i64 %646, %611
  %648 = ashr exact i64 %647, 3
  br label %683

649:                                              ; preds = %620
  %650 = icmp eq i64 %610, 1
  br i1 %650, label %651, label %656

651:                                              ; preds = %649
  %652 = inttoptr i64 %611 to i64*
  %653 = load i64, i64* %652, align 4
  %654 = inttoptr i64 %18 to i64*
  %655 = load i64, i64* %654, align 4
  store i64 %655, i64* %652, align 4
  store i64 %653, i64* %654, align 4
  br label %972

656:                                              ; preds = %649
  %657 = sdiv i64 %610, 2
  %658 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %621, i64 %657
  %659 = ptrtoint %"struct.jxl::HuffmanTree"* %658 to i64
  %660 = ptrtoint %"struct.jxl::HuffmanTree"* %15 to i64
  %661 = sub i64 %660, %18
  %662 = icmp eq i64 %661, 0
  br i1 %662, label %678, label %663

663:                                              ; preds = %656
  %664 = ashr exact i64 %661, 3
  br label %665

665:                                              ; preds = %665, %663
  %666 = phi %"struct.jxl::HuffmanTree"* [ %676, %665 ], [ %26, %663 ]
  %667 = phi i64 [ %675, %665 ], [ %664, %663 ]
  %668 = lshr i64 %667, 1
  %669 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %666, i64 %668
  %670 = load i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)*, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** %3, align 8
  %671 = tail call zeroext i1 %670(%"struct.jxl::HuffmanTree"* dereferenceable(8) %669, %"struct.jxl::HuffmanTree"* dereferenceable(8) %658) #10
  %672 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %669, i64 1
  %673 = xor i64 %668, -1
  %674 = add i64 %667, %673
  %675 = select i1 %671, i64 %674, i64 %668
  %676 = select i1 %671, %"struct.jxl::HuffmanTree"* %672, %"struct.jxl::HuffmanTree"* %666
  %677 = icmp eq i64 %675, 0
  br i1 %677, label %678, label %665

678:                                              ; preds = %665, %656
  %679 = phi %"struct.jxl::HuffmanTree"* [ %26, %656 ], [ %676, %665 ]
  %680 = ptrtoint %"struct.jxl::HuffmanTree"* %679 to i64
  %681 = sub i64 %680, %18
  %682 = ashr exact i64 %681, 3
  br label %683

683:                                              ; preds = %678, %644
  %684 = phi i64 [ %646, %644 ], [ %659, %678 ]
  %685 = phi i64 [ %626, %644 ], [ %680, %678 ]
  %686 = phi i64 [ %624, %644 ], [ %682, %678 ]
  %687 = phi i64 [ %648, %644 ], [ %657, %678 ]
  %688 = sub nsw i64 %610, %687
  %689 = sub nsw i64 %17, %686
  %690 = inttoptr i64 %684 to %"struct.jxl::HuffmanTree"*
  %691 = inttoptr i64 %684 to i8*
  %692 = inttoptr i64 %685 to %"struct.jxl::HuffmanTree"*
  %693 = inttoptr i64 %684 to i8*
  %694 = inttoptr i64 %18 to i8*
  %695 = icmp eq %"struct.jxl::HuffmanTree"* %690, %26
  br i1 %695, label %957, label %696

696:                                              ; preds = %683
  %697 = icmp eq %"struct.jxl::HuffmanTree"* %26, %692
  br i1 %697, label %957, label %698

698:                                              ; preds = %696
  %699 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %690, i64 1
  %700 = icmp eq %"struct.jxl::HuffmanTree"* %699, %26
  br i1 %700, label %701, label %711

701:                                              ; preds = %698
  %702 = inttoptr i64 %684 to i64*
  %703 = load i64, i64* %702, align 4
  %704 = sub i64 %685, %18
  %705 = ashr exact i64 %704, 3
  %706 = icmp eq i64 %704, 0
  br i1 %706, label %708, label %707

707:                                              ; preds = %701
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %693, i8* align 4 %694, i64 %704, i1 false) #10
  br label %708

708:                                              ; preds = %707, %701
  %709 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %690, i64 %705
  %710 = bitcast %"struct.jxl::HuffmanTree"* %709 to i64*
  store i64 %703, i64* %710, align 4
  br label %957

711:                                              ; preds = %698
  %712 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %26, i64 1
  %713 = icmp eq %"struct.jxl::HuffmanTree"* %712, %692
  br i1 %713, label %714, label %729

714:                                              ; preds = %711
  %715 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %692, i64 -1
  %716 = bitcast %"struct.jxl::HuffmanTree"* %715 to i64*
  %717 = load i64, i64* %716, align 4
  %718 = ptrtoint %"struct.jxl::HuffmanTree"* %715 to i64
  %719 = sub i64 %718, %684
  %720 = icmp eq i64 %719, 0
  br i1 %720, label %726, label %721

721:                                              ; preds = %714
  %722 = ashr exact i64 %719, 3
  %723 = sub nsw i64 0, %722
  %724 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %692, i64 %723
  %725 = bitcast %"struct.jxl::HuffmanTree"* %724 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %725, i8* align 4 %693, i64 %719, i1 false) #10
  br label %726

726:                                              ; preds = %721, %714
  %727 = phi %"struct.jxl::HuffmanTree"* [ %724, %721 ], [ %692, %714 ]
  %728 = inttoptr i64 %684 to i64*
  store i64 %717, i64* %728, align 4
  br label %957

729:                                              ; preds = %711
  %730 = sub i64 %18, %684
  %731 = ashr exact i64 %730, 3
  %732 = sub i64 %685, %18
  %733 = ashr exact i64 %732, 3
  %734 = icmp eq i64 %731, %733
  br i1 %734, label %735, label %887

735:                                              ; preds = %729
  %736 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %26, i64 -1
  %737 = bitcast %"struct.jxl::HuffmanTree"* %736 to i8*
  %738 = sub i64 0, %684
  %739 = getelementptr i8, i8* %737, i64 %738
  %740 = ptrtoint i8* %739 to i64
  %741 = lshr i64 %740, 3
  %742 = add nuw nsw i64 %741, 1
  %743 = icmp ult i64 %742, 4
  br i1 %743, label %832, label %744

744:                                              ; preds = %735
  %745 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %690, i64 1
  %746 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %26, i64 -1
  %747 = bitcast %"struct.jxl::HuffmanTree"* %746 to i8*
  %748 = sub i64 0, %684
  %749 = getelementptr i8, i8* %747, i64 %748
  %750 = ptrtoint i8* %749 to i64
  %751 = lshr i64 %750, 3
  %752 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %745, i64 %751
  %753 = bitcast %"struct.jxl::HuffmanTree"* %752 to i8*
  %754 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %26, i64 1
  %755 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %754, i64 %751
  %756 = bitcast %"struct.jxl::HuffmanTree"* %755 to i8*
  %757 = icmp ult i8* %691, %756
  %758 = icmp ult i8* %27, %753
  %759 = and i1 %757, %758
  br i1 %759, label %832, label %760

760:                                              ; preds = %744
  %761 = and i64 %742, 4611686018427387900
  %762 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %26, i64 %761
  %763 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %690, i64 %761
  %764 = add nsw i64 %761, -4
  %765 = lshr exact i64 %764, 2
  %766 = add nuw nsw i64 %765, 1
  %767 = and i64 %766, 1
  %768 = icmp eq i64 %764, 0
  br i1 %768, label %810, label %769

769:                                              ; preds = %760
  %770 = sub nuw nsw i64 %766, %767
  br label %771

771:                                              ; preds = %771, %769
  %772 = phi i64 [ 0, %769 ], [ %807, %771 ]
  %773 = phi i64 [ %770, %769 ], [ %808, %771 ]
  %774 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %26, i64 %772
  %775 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %690, i64 %772
  %776 = bitcast %"struct.jxl::HuffmanTree"* %775 to <2 x i64>*
  %777 = load <2 x i64>, <2 x i64>* %776, align 4, !alias.scope !68, !noalias !71
  %778 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %775, i64 2
  %779 = bitcast %"struct.jxl::HuffmanTree"* %778 to <2 x i64>*
  %780 = load <2 x i64>, <2 x i64>* %779, align 4, !alias.scope !68, !noalias !71
  %781 = bitcast %"struct.jxl::HuffmanTree"* %774 to <2 x i64>*
  %782 = load <2 x i64>, <2 x i64>* %781, align 4, !alias.scope !71
  %783 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %774, i64 2
  %784 = bitcast %"struct.jxl::HuffmanTree"* %783 to <2 x i64>*
  %785 = load <2 x i64>, <2 x i64>* %784, align 4, !alias.scope !71
  %786 = bitcast %"struct.jxl::HuffmanTree"* %775 to <2 x i64>*
  store <2 x i64> %782, <2 x i64>* %786, align 4, !alias.scope !68, !noalias !71
  %787 = bitcast %"struct.jxl::HuffmanTree"* %778 to <2 x i64>*
  store <2 x i64> %785, <2 x i64>* %787, align 4, !alias.scope !68, !noalias !71
  %788 = bitcast %"struct.jxl::HuffmanTree"* %774 to <2 x i64>*
  store <2 x i64> %777, <2 x i64>* %788, align 4, !alias.scope !71
  %789 = bitcast %"struct.jxl::HuffmanTree"* %783 to <2 x i64>*
  store <2 x i64> %780, <2 x i64>* %789, align 4, !alias.scope !71
  %790 = or i64 %772, 4
  %791 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %26, i64 %790
  %792 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %690, i64 %790
  %793 = bitcast %"struct.jxl::HuffmanTree"* %792 to <2 x i64>*
  %794 = load <2 x i64>, <2 x i64>* %793, align 4, !alias.scope !68, !noalias !71
  %795 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %792, i64 2
  %796 = bitcast %"struct.jxl::HuffmanTree"* %795 to <2 x i64>*
  %797 = load <2 x i64>, <2 x i64>* %796, align 4, !alias.scope !68, !noalias !71
  %798 = bitcast %"struct.jxl::HuffmanTree"* %791 to <2 x i64>*
  %799 = load <2 x i64>, <2 x i64>* %798, align 4, !alias.scope !71
  %800 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %791, i64 2
  %801 = bitcast %"struct.jxl::HuffmanTree"* %800 to <2 x i64>*
  %802 = load <2 x i64>, <2 x i64>* %801, align 4, !alias.scope !71
  %803 = bitcast %"struct.jxl::HuffmanTree"* %792 to <2 x i64>*
  store <2 x i64> %799, <2 x i64>* %803, align 4, !alias.scope !68, !noalias !71
  %804 = bitcast %"struct.jxl::HuffmanTree"* %795 to <2 x i64>*
  store <2 x i64> %802, <2 x i64>* %804, align 4, !alias.scope !68, !noalias !71
  %805 = bitcast %"struct.jxl::HuffmanTree"* %791 to <2 x i64>*
  store <2 x i64> %794, <2 x i64>* %805, align 4, !alias.scope !71
  %806 = bitcast %"struct.jxl::HuffmanTree"* %800 to <2 x i64>*
  store <2 x i64> %797, <2 x i64>* %806, align 4, !alias.scope !71
  %807 = add i64 %772, 8
  %808 = add i64 %773, -2
  %809 = icmp eq i64 %808, 0
  br i1 %809, label %810, label %771, !llvm.loop !73

810:                                              ; preds = %771, %760
  %811 = phi i64 [ 0, %760 ], [ %807, %771 ]
  %812 = icmp eq i64 %767, 0
  br i1 %812, label %830, label %813

813:                                              ; preds = %810
  %814 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %26, i64 %811
  %815 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %690, i64 %811
  %816 = bitcast %"struct.jxl::HuffmanTree"* %815 to <2 x i64>*
  %817 = load <2 x i64>, <2 x i64>* %816, align 4, !alias.scope !68, !noalias !71
  %818 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %815, i64 2
  %819 = bitcast %"struct.jxl::HuffmanTree"* %818 to <2 x i64>*
  %820 = load <2 x i64>, <2 x i64>* %819, align 4, !alias.scope !68, !noalias !71
  %821 = bitcast %"struct.jxl::HuffmanTree"* %814 to <2 x i64>*
  %822 = load <2 x i64>, <2 x i64>* %821, align 4, !alias.scope !71
  %823 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %814, i64 2
  %824 = bitcast %"struct.jxl::HuffmanTree"* %823 to <2 x i64>*
  %825 = load <2 x i64>, <2 x i64>* %824, align 4, !alias.scope !71
  %826 = bitcast %"struct.jxl::HuffmanTree"* %815 to <2 x i64>*
  store <2 x i64> %822, <2 x i64>* %826, align 4, !alias.scope !68, !noalias !71
  %827 = bitcast %"struct.jxl::HuffmanTree"* %818 to <2 x i64>*
  store <2 x i64> %825, <2 x i64>* %827, align 4, !alias.scope !68, !noalias !71
  %828 = bitcast %"struct.jxl::HuffmanTree"* %814 to <2 x i64>*
  store <2 x i64> %817, <2 x i64>* %828, align 4, !alias.scope !71
  %829 = bitcast %"struct.jxl::HuffmanTree"* %823 to <2 x i64>*
  store <2 x i64> %820, <2 x i64>* %829, align 4, !alias.scope !71
  br label %830

830:                                              ; preds = %810, %813
  %831 = icmp eq i64 %742, %761
  br i1 %831, label %957, label %832

832:                                              ; preds = %830, %744, %735
  %833 = phi %"struct.jxl::HuffmanTree"* [ %26, %744 ], [ %26, %735 ], [ %762, %830 ]
  %834 = phi %"struct.jxl::HuffmanTree"* [ %690, %744 ], [ %690, %735 ], [ %763, %830 ]
  %835 = ptrtoint %"struct.jxl::HuffmanTree"* %834 to i64
  %836 = getelementptr %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %26, i64 -1
  %837 = ptrtoint %"struct.jxl::HuffmanTree"* %836 to i64
  %838 = sub i64 %837, %835
  %839 = lshr i64 %838, 3
  %840 = add nuw nsw i64 %839, 1
  %841 = and i64 %840, 3
  %842 = icmp eq i64 %841, 0
  br i1 %842, label %855, label %843

843:                                              ; preds = %832, %843
  %844 = phi %"struct.jxl::HuffmanTree"* [ %852, %843 ], [ %833, %832 ]
  %845 = phi %"struct.jxl::HuffmanTree"* [ %851, %843 ], [ %834, %832 ]
  %846 = phi i64 [ %853, %843 ], [ %841, %832 ]
  %847 = bitcast %"struct.jxl::HuffmanTree"* %845 to i64*
  %848 = load i64, i64* %847, align 4
  %849 = bitcast %"struct.jxl::HuffmanTree"* %844 to i64*
  %850 = load i64, i64* %849, align 4
  store i64 %850, i64* %847, align 4
  store i64 %848, i64* %849, align 4
  %851 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %845, i64 1
  %852 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %844, i64 1
  %853 = add i64 %846, -1
  %854 = icmp eq i64 %853, 0
  br i1 %854, label %855, label %843, !llvm.loop !74

855:                                              ; preds = %843, %832
  %856 = phi %"struct.jxl::HuffmanTree"* [ %833, %832 ], [ %852, %843 ]
  %857 = phi %"struct.jxl::HuffmanTree"* [ %834, %832 ], [ %851, %843 ]
  %858 = icmp ult i64 %838, 24
  br i1 %858, label %957, label %859

859:                                              ; preds = %855, %859
  %860 = phi %"struct.jxl::HuffmanTree"* [ %885, %859 ], [ %856, %855 ]
  %861 = phi %"struct.jxl::HuffmanTree"* [ %884, %859 ], [ %857, %855 ]
  %862 = bitcast %"struct.jxl::HuffmanTree"* %861 to i64*
  %863 = load i64, i64* %862, align 4
  %864 = bitcast %"struct.jxl::HuffmanTree"* %860 to i64*
  %865 = load i64, i64* %864, align 4
  store i64 %865, i64* %862, align 4
  store i64 %863, i64* %864, align 4
  %866 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %861, i64 1
  %867 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %860, i64 1
  %868 = bitcast %"struct.jxl::HuffmanTree"* %866 to i64*
  %869 = load i64, i64* %868, align 4
  %870 = bitcast %"struct.jxl::HuffmanTree"* %867 to i64*
  %871 = load i64, i64* %870, align 4
  store i64 %871, i64* %868, align 4
  store i64 %869, i64* %870, align 4
  %872 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %861, i64 2
  %873 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %860, i64 2
  %874 = bitcast %"struct.jxl::HuffmanTree"* %872 to i64*
  %875 = load i64, i64* %874, align 4
  %876 = bitcast %"struct.jxl::HuffmanTree"* %873 to i64*
  %877 = load i64, i64* %876, align 4
  store i64 %877, i64* %874, align 4
  store i64 %875, i64* %876, align 4
  %878 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %861, i64 3
  %879 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %860, i64 3
  %880 = bitcast %"struct.jxl::HuffmanTree"* %878 to i64*
  %881 = load i64, i64* %880, align 4
  %882 = bitcast %"struct.jxl::HuffmanTree"* %879 to i64*
  %883 = load i64, i64* %882, align 4
  store i64 %883, i64* %880, align 4
  store i64 %881, i64* %882, align 4
  %884 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %861, i64 4
  %885 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %860, i64 4
  %886 = icmp eq %"struct.jxl::HuffmanTree"* %884, %26
  br i1 %886, label %957, label %859, !llvm.loop !75

887:                                              ; preds = %729, %887
  %888 = phi i64 [ %890, %887 ], [ %733, %729 ]
  %889 = phi i64 [ %888, %887 ], [ %731, %729 ]
  %890 = srem i64 %889, %888
  %891 = icmp eq i64 %890, 0
  br i1 %891, label %892, label %887

892:                                              ; preds = %887
  %893 = icmp eq i64 %888, 0
  br i1 %893, label %926, label %894

894:                                              ; preds = %892
  %895 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %690, i64 %888
  %896 = shl nsw i64 %888, 3
  %897 = add i64 %896, -8
  %898 = and i64 %897, 8
  %899 = icmp eq i64 %898, 0
  br i1 %899, label %900, label %923

900:                                              ; preds = %894
  %901 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %895, i64 -1
  %902 = ptrtoint %"struct.jxl::HuffmanTree"* %901 to i64
  %903 = bitcast %"struct.jxl::HuffmanTree"* %901 to i64*
  %904 = load i64, i64* %903, align 4
  %905 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %901, i64 %731
  br label %906

906:                                              ; preds = %906, %900
  %907 = phi i64 [ %902, %900 ], [ %909, %906 ]
  %908 = phi %"struct.jxl::HuffmanTree"* [ %905, %900 ], [ %919, %906 ]
  %909 = ptrtoint %"struct.jxl::HuffmanTree"* %908 to i64
  %910 = bitcast %"struct.jxl::HuffmanTree"* %908 to i64*
  %911 = inttoptr i64 %907 to i64*
  %912 = load i64, i64* %910, align 4
  store i64 %912, i64* %911, align 4
  %913 = sub i64 %685, %909
  %914 = ashr exact i64 %913, 3
  %915 = icmp slt i64 %731, %914
  %916 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %908, i64 %731
  %917 = sub nsw i64 %731, %914
  %918 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %690, i64 %917
  %919 = select i1 %915, %"struct.jxl::HuffmanTree"* %916, %"struct.jxl::HuffmanTree"* %918
  %920 = icmp eq %"struct.jxl::HuffmanTree"* %919, %901
  br i1 %920, label %921, label %906

921:                                              ; preds = %906
  %922 = bitcast %"struct.jxl::HuffmanTree"* %908 to i64*
  store i64 %904, i64* %922, align 4
  br label %923

923:                                              ; preds = %921, %894
  %924 = phi %"struct.jxl::HuffmanTree"* [ %901, %921 ], [ %895, %894 ]
  %925 = icmp eq i64 %897, 0
  br i1 %925, label %926, label %928

926:                                              ; preds = %923, %988, %892
  %927 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %690, i64 %733
  br label %957

928:                                              ; preds = %923, %988
  %929 = phi %"struct.jxl::HuffmanTree"* [ %952, %988 ], [ %924, %923 ]
  %930 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %929, i64 -1
  %931 = ptrtoint %"struct.jxl::HuffmanTree"* %930 to i64
  %932 = bitcast %"struct.jxl::HuffmanTree"* %930 to i64*
  %933 = load i64, i64* %932, align 4
  %934 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %930, i64 %731
  br label %935

935:                                              ; preds = %935, %928
  %936 = phi i64 [ %931, %928 ], [ %938, %935 ]
  %937 = phi %"struct.jxl::HuffmanTree"* [ %934, %928 ], [ %948, %935 ]
  %938 = ptrtoint %"struct.jxl::HuffmanTree"* %937 to i64
  %939 = bitcast %"struct.jxl::HuffmanTree"* %937 to i64*
  %940 = inttoptr i64 %936 to i64*
  %941 = load i64, i64* %939, align 4
  store i64 %941, i64* %940, align 4
  %942 = sub i64 %685, %938
  %943 = ashr exact i64 %942, 3
  %944 = icmp slt i64 %731, %943
  %945 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %937, i64 %731
  %946 = sub nsw i64 %731, %943
  %947 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %690, i64 %946
  %948 = select i1 %944, %"struct.jxl::HuffmanTree"* %945, %"struct.jxl::HuffmanTree"* %947
  %949 = icmp eq %"struct.jxl::HuffmanTree"* %948, %930
  br i1 %949, label %950, label %935

950:                                              ; preds = %935
  %951 = bitcast %"struct.jxl::HuffmanTree"* %937 to i64*
  store i64 %933, i64* %951, align 4
  %952 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %929, i64 -2
  %953 = ptrtoint %"struct.jxl::HuffmanTree"* %952 to i64
  %954 = bitcast %"struct.jxl::HuffmanTree"* %952 to i64*
  %955 = load i64, i64* %954, align 4
  %956 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %952, i64 %731
  br label %973

957:                                              ; preds = %855, %859, %830, %683, %696, %708, %726, %926
  %958 = phi %"struct.jxl::HuffmanTree"* [ %690, %696 ], [ %692, %683 ], [ %709, %708 ], [ %727, %726 ], [ %927, %926 ], [ %26, %830 ], [ %26, %859 ], [ %26, %855 ]
  %959 = add nsw i64 %687, %686
  %960 = add nsw i64 %688, %689
  %961 = icmp slt i64 %959, %960
  br i1 %961, label %962, label %964

962:                                              ; preds = %957
  %963 = ptrtoint %"struct.jxl::HuffmanTree"* %958 to i64
  tail call void @_ZNSt3__115__inplace_mergeIRPFbRKN3jxl11HuffmanTreeES4_ENS_11__wrap_iterIPS2_EEEEvT0_SB_SB_T_NS_15iterator_traitsISB_E15difference_typeESF_PNSE_10value_typeEl(%"struct.jxl::HuffmanTree"* %621, %"struct.jxl::HuffmanTree"* %690, %"struct.jxl::HuffmanTree"* %958, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** dereferenceable(8) %3, i64 %687, i64 %686, %"struct.jxl::HuffmanTree"* %6, i64 %7)
  br label %965

964:                                              ; preds = %957
  tail call void @_ZNSt3__115__inplace_mergeIRPFbRKN3jxl11HuffmanTreeES4_ENS_11__wrap_iterIPS2_EEEEvT0_SB_SB_T_NS_15iterator_traitsISB_E15difference_typeESF_PNSE_10value_typeEl(%"struct.jxl::HuffmanTree"* %958, %"struct.jxl::HuffmanTree"* %692, %"struct.jxl::HuffmanTree"* %15, i1 (%"struct.jxl::HuffmanTree"*, %"struct.jxl::HuffmanTree"*)** dereferenceable(8) %3, i64 %688, i64 %689, %"struct.jxl::HuffmanTree"* %6, i64 %7)
  br label %965

965:                                              ; preds = %962, %964
  %966 = phi i64 [ %963, %962 ], [ %611, %964 ]
  %967 = phi i64 [ %685, %962 ], [ %684, %964 ]
  %968 = phi i64 [ %689, %962 ], [ %686, %964 ]
  %969 = phi i64 [ %688, %962 ], [ %687, %964 ]
  %970 = phi %"struct.jxl::HuffmanTree"* [ %15, %962 ], [ %958, %964 ]
  %971 = icmp eq i64 %968, 0
  br i1 %971, label %972, label %14

972:                                              ; preds = %965, %23, %615, %329, %552, %504, %508, %481, %8, %651, %378, %313, %308, %300, %167, %34
  ret void

973:                                              ; preds = %973, %950
  %974 = phi i64 [ %953, %950 ], [ %976, %973 ]
  %975 = phi %"struct.jxl::HuffmanTree"* [ %956, %950 ], [ %986, %973 ]
  %976 = ptrtoint %"struct.jxl::HuffmanTree"* %975 to i64
  %977 = bitcast %"struct.jxl::HuffmanTree"* %975 to i64*
  %978 = inttoptr i64 %974 to i64*
  %979 = load i64, i64* %977, align 4
  store i64 %979, i64* %978, align 4
  %980 = sub i64 %685, %976
  %981 = ashr exact i64 %980, 3
  %982 = icmp slt i64 %731, %981
  %983 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %975, i64 %731
  %984 = sub nsw i64 %731, %981
  %985 = getelementptr inbounds %"struct.jxl::HuffmanTree", %"struct.jxl::HuffmanTree"* %690, i64 %984
  %986 = select i1 %982, %"struct.jxl::HuffmanTree"* %983, %"struct.jxl::HuffmanTree"* %985
  %987 = icmp eq %"struct.jxl::HuffmanTree"* %986, %952
  br i1 %987, label %988, label %973

988:                                              ; preds = %973
  %989 = bitcast %"struct.jxl::HuffmanTree"* %975 to i64*
  store i64 %955, i64* %989, align 4
  %990 = icmp eq %"struct.jxl::HuffmanTree"* %952, %690
  br i1 %990, label %926, label %928
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { alwaysinline norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.isvectorized", i32 1}
!13 = distinct !{!13, !3}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !12}
!20 = distinct !{!20, !3}
!21 = distinct !{!21, !3}
!22 = distinct !{!22, !12}
!23 = distinct !{!23, !12}
!24 = !{!25}
!25 = distinct !{!25, !26}
!26 = distinct !{!26, !"LVerDomain"}
!27 = !{!28}
!28 = distinct !{!28, !26}
!29 = distinct !{!29, !12}
!30 = distinct !{!30, !3}
!31 = distinct !{!31, !3}
!32 = distinct !{!32, !12}
!33 = !{!34}
!34 = distinct !{!34, !35}
!35 = distinct !{!35, !"LVerDomain"}
!36 = !{!37}
!37 = distinct !{!37, !35}
!38 = distinct !{!38, !12}
!39 = distinct !{!39, !3}
!40 = distinct !{!40, !3}
!41 = distinct !{!41, !12}
!42 = distinct !{!42, !3}
!43 = !{!44}
!44 = distinct !{!44, !45}
!45 = distinct !{!45, !"LVerDomain"}
!46 = !{!47}
!47 = distinct !{!47, !45}
!48 = distinct !{!48, !12}
!49 = distinct !{!49, !3}
!50 = distinct !{!50, !3}
!51 = !{!52}
!52 = distinct !{!52, !53}
!53 = distinct !{!53, !"LVerDomain"}
!54 = !{!55}
!55 = distinct !{!55, !53}
!56 = distinct !{!56, !12}
!57 = distinct !{!57, !3}
!58 = distinct !{!58, !12}
!59 = !{!60}
!60 = distinct !{!60, !61}
!61 = distinct !{!61, !"LVerDomain"}
!62 = !{!63}
!63 = distinct !{!63, !61}
!64 = distinct !{!64, !12}
!65 = distinct !{!65, !3}
!66 = distinct !{!66, !12}
!67 = distinct !{!67, !12}
!68 = !{!69}
!69 = distinct !{!69, !70}
!70 = distinct !{!70, !"LVerDomain"}
!71 = !{!72}
!72 = distinct !{!72, !70}
!73 = distinct !{!73, !12}
!74 = distinct !{!74, !3}
!75 = distinct !{!75, !12}
