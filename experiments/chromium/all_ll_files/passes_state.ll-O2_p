; ModuleID = '../../third_party/libjxl/src/lib/jxl/passes_state.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/passes_state.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::FrameHeader" = type { %"class.jxl::Fields", i8, i32, i32, i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, %"struct.jxl::FrameSize", i32, %"class.std::__1::vector", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.6", %"struct.jxl::AnimationFrame", i8, i32, i8, i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, i64 }
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.jxl::Passes" = type <{ %"class.jxl::Fields", i32, i32, [11 x i32], [11 x i32], [11 x i32], [4 x i8] }>
%"struct.jxl::FrameSize" = type { i32, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i32* }
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"struct.jxl::BlendingInfo" = type <{ %"class.jxl::Fields", i32, i32, i8, [3 x i8], i32, i64, i8, [7 x i8] }>
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"*, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.jxl::BlendingInfo"* }
%"struct.jxl::AnimationFrame" = type { %"class.jxl::Fields", i32, i32, %"struct.jxl::CodecMetadata"* }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.16", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { i8* }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.18" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"struct.jxl::LoopFilter" = type <{ %"class.jxl::Fields", i8, i8, i8, i8, float, float, float, float, float, float, i32, i8, [3 x i8], [8 x float], i8, [3 x i8], [3 x float], float, float, i8, [3 x i8], float, float, float, float, float, [4 x i8], i64, i8, [7 x i8] }>
%"struct.jxl::PassesSharedState" = type { %"struct.jxl::CodecMetadata"*, %"struct.jxl::FrameHeader", %"struct.jxl::FrameDimensions", %"class.jxl::AcStrategyImage", %"class.jxl::DequantMatrices", %"class.jxl::Quantizer", %"class.jxl::Plane.53", %"class.jxl::Plane", %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ImageFeatures", i64, %"class.std::__1::vector", %"class.jxl::Plane", %"class.jxl::Image3", %"class.jxl::Image3"*, %"struct.jxl::BlockCtxMap", [4 x %"class.jxl::Image3"], [4 x %struct.anon.104], i64 }
%"struct.jxl::FrameDimensions" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%"class.jxl::AcStrategyImage" = type { %"class.jxl::Plane", i8*, i64 }
%"class.jxl::DequantMatrices" = type { %"class.std::__1::unique_ptr.23", float*, float*, [3 x float], [3 x float], [81 x i64], %"class.std::__1::vector.27" }
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25", %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.25" = type { float* }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.hwy::AlignedFreer" }
%"class.hwy::AlignedFreer" = type { void (i8*, i8*)*, i8* }
%"class.std::__1::vector.27" = type { %"class.std::__1::__vector_base.28" }
%"class.std::__1::__vector_base.28" = type { %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"*, %"class.std::__1::__compressed_pair.48" }
%"class.jxl::QuantEncoding" = type { %"struct.jxl::QuantEncodingInternal.base", [7 x i8] }
%"struct.jxl::QuantEncodingInternal.base" = type <{ i32, [4 x i8], %"struct.jxl::DctQuantWeightParams", %union.anon.30, %"struct.jxl::DctQuantWeightParams", %union.anon.47 }>
%union.anon.30 = type { %"struct.std::__1::array.37", [4 x i8] }
%"struct.std::__1::array.37" = type { [3 x %"struct.std::__1::array.38"] }
%"struct.std::__1::array.38" = type { [9 x float] }
%"struct.jxl::DctQuantWeightParams" = type <{ i64, %"struct.std::__1::array", [4 x i8] }>
%"struct.std::__1::array" = type { [3 x %"struct.std::__1::array.29"] }
%"struct.std::__1::array.29" = type { [17 x float] }
%union.anon.47 = type { i8 }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.jxl::QuantEncoding"* }
%"class.jxl::Quantizer" = type { [4 x float], [4 x float], i32, i32, float, float, float, [3 x float], %"class.jxl::DequantMatrices"* }
%"class.jxl::Plane.53" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"struct.jxl::ColorCorrelationMap" = type { %"class.jxl::Plane.54", %"class.jxl::Plane.54", [4 x float], i32, float, float, float, i32, i32 }
%"class.jxl::Plane.54" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::ImageFeatures" = type { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", %"class.jxl::Splines" }
%"struct.jxl::NoiseParams" = type { [8 x float] }
%"class.jxl::PatchDictionary" = type { %"struct.jxl::PassesSharedState"*, %"class.std::__1::vector.55", %"class.std::__1::vector.69", %"class.std::__1::vector.69" }
%"class.std::__1::vector.55" = type { %"class.std::__1::__vector_base.56" }
%"class.std::__1::__vector_base.56" = type { %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"*, %"class.std::__1::__compressed_pair.64" }
%"struct.jxl::PatchPosition" = type { i64, i64, %"class.std::__1::vector.57", %"struct.jxl::PatchReferencePosition" }
%"class.std::__1::vector.57" = type { %"class.std::__1::__vector_base.58" }
%"class.std::__1::__vector_base.58" = type { %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"*, %"class.std::__1::__compressed_pair.59" }
%"struct.jxl::PatchBlending" = type { i8, i32, i8 }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"struct.jxl::PatchBlending"* }
%"struct.jxl::PatchReferencePosition" = type { i64, i64, i64, i64, i64 }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"struct.jxl::PatchPosition"* }
%"class.std::__1::vector.69" = type { %"class.std::__1::__vector_base.70" }
%"class.std::__1::__vector_base.70" = type { i64*, i64*, %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { i64* }
%"class.jxl::Splines" = type { i32, %"class.std::__1::vector.76", %"class.std::__1::vector.90" }
%"class.std::__1::vector.76" = type { %"class.std::__1::__vector_base.77" }
%"class.std::__1::__vector_base.77" = type { %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"*, %"class.std::__1::__compressed_pair.85" }
%"class.jxl::QuantizedSpline" = type { %"class.std::__1::vector.78", [3 x [32 x i32]], [32 x i32] }
%"class.std::__1::vector.78" = type { %"class.std::__1::__vector_base.79" }
%"class.std::__1::__vector_base.79" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.80" }
%"struct.std::__1::pair" = type { i64, i64 }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"struct.std::__1::pair"* }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"class.jxl::QuantizedSpline"* }
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"*, %"class.std::__1::__compressed_pair.92" }
%"struct.jxl::Spline::Point" = type { float, float }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"struct.jxl::Spline::Point"* }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane.97"] }
%"class.jxl::Plane.97" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::BlockCtxMap" = type { [3 x %"class.std::__1::vector.40"], %"class.std::__1::vector", %"class.std::__1::vector.98", i64, i64 }
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { i32*, i32*, %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { i32* }
%"class.std::__1::vector.98" = type { %"class.std::__1::__vector_base.99" }
%"class.std::__1::__vector_base.99" = type { i8*, i8*, %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%struct.anon.104 = type <{ %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"*, i8, [7 x i8] }>
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.105", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.169", i64 }
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.108", %"class.std::__1::vector.115", %"class.std::__1::vector.108", %"class.std::__1::vector.122", %"class.std::__1::vector.130", %"class.std::__1::vector.139", %"class.std::__1::vector.153", %"class.std::__1::vector.98", %"class.std::__1::vector.108", %"class.std::__1::vector.98", i32, i8, %"class.std::__1::vector.98" }
%"class.std::__1::vector.115" = type { %"class.std::__1::__vector_base.116" }
%"class.std::__1::__vector_base.116" = type { i32*, i32*, %"class.std::__1::__compressed_pair.117" }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { i32* }
%"class.std::__1::vector.122" = type { %"class.std::__1::__vector_base.123" }
%"class.std::__1::__vector_base.123" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.125" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array.124", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array.124" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.130" = type { %"class.std::__1::__vector_base.131" }
%"class.std::__1::__vector_base.131" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.134" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.132", %"struct.std::__1::array.133", i32, i8, [3 x i8] }>
%"struct.std::__1::array.132" = type { [17 x i32] }
%"struct.std::__1::array.133" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.135" }
%"struct.std::__1::__compressed_pair_elem.135" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.139" = type { %"class.std::__1::__vector_base.140" }
%"class.std::__1::__vector_base.140" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.148" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.141" }
%"class.std::__1::vector.141" = type { %"class.std::__1::__vector_base.142" }
%"class.std::__1::__vector_base.142" = type { i16*, i16*, %"class.std::__1::__compressed_pair.143" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { i16* }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.153" = type { %"class.std::__1::__vector_base.154" }
%"class.std::__1::__vector_base.154" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.163" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.155", i32, %"class.std::__1::vector", %"class.std::__1::vector.156" }
%"struct.std::__1::array.155" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.158" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector.108" = type { %"class.std::__1::__vector_base.109" }
%"class.std::__1::__vector_base.109" = type { %"class.std::__1::vector.98"*, %"class.std::__1::vector.98"*, %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"class.std::__1::vector.98"* }
%"class.std::__1::vector.169" = type { %"class.std::__1::__vector_base.170" }
%"class.std::__1::__vector_base.170" = type { %"class.jxl::Plane.97"*, %"class.jxl::Plane.97"*, %"class.std::__1::__compressed_pair.171" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { %"class.jxl::Plane.97"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNK3jxl11FrameHeader17ToFrameDimensionsEv = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_ = comdat any

$_ZNSt3__16vectorIN3jxl12BlendingInfoENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_ = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm = comdat any

@.str = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [53 x i8] c"../../third_party/libjxl/src/lib/jxl/passes_state.cc\00", align 1
@.str.2 = private unnamed_addr constant [47 x i8] c"frame_header.nonserialized_metadata != nullptr\00", align 1
@_ZTVN3jxl12BlendingInfoE = external unnamed_addr constant { [6 x i8*] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl27InitializePassesSharedStateERKNS_11FrameHeaderEPNS_17PassesSharedStateEb(%"struct.jxl::FrameHeader"* dereferenceable(576), %"struct.jxl::PassesSharedState"* noalias, i1 zeroext) local_unnamed_addr #0 {
  %4 = alloca %"struct.jxl::FrameDimensions", align 8
  %5 = alloca %"class.jxl::AcStrategyImage", align 8
  %6 = alloca %"class.jxl::Plane.53", align 8
  %7 = alloca %"class.jxl::Plane", align 8
  %8 = alloca %"struct.jxl::ColorCorrelationMap", align 8
  %9 = alloca %"class.jxl::Plane", align 8
  %10 = alloca %"class.jxl::Image3", align 8
  %11 = alloca %"class.jxl::Image3", align 8
  %12 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 25
  %13 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %12, align 8
  %14 = icmp eq %"struct.jxl::CodecMetadata"* %13, null
  br i1 %14, label %15, label %18

15:                                               ; preds = %3
  %16 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 26, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0)) #7
  %17 = tail call zeroext i1 @_ZN3jxl5AbortEv() #8
  unreachable

18:                                               ; preds = %3
  %19 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 1
  %20 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 1, i32 1
  %21 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 28, i1 false) #7
  %22 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 1, i32 7, i32 1
  %23 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 7, i32 1
  %24 = bitcast [3 x i32]* %22 to i8*
  %25 = bitcast [3 x i32]* %23 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 14, i1 false) #7
  %26 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 1, i32 8
  %27 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 8
  %28 = bitcast i32* %26 to i8*
  %29 = bitcast i32* %27 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 12, i1 false) #7
  %30 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 1, i32 11
  %31 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 11
  %32 = icmp eq %"struct.jxl::FrameHeader"* %19, %0
  br i1 %32, label %74, label %33

33:                                               ; preds = %18
  %34 = bitcast %"class.std::__1::basic_string"* %30 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %35 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %34, i64 0, i32 1, i32 0
  %36 = load i8, i8* %35, align 1
  %37 = icmp slt i8 %36, 0
  %38 = bitcast %"class.std::__1::basic_string"* %31 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %39 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %38, i64 0, i32 1, i32 0
  %40 = load i8, i8* %39, align 1
  %41 = icmp slt i8 %40, 0
  br i1 %37, label %52, label %42

42:                                               ; preds = %33
  br i1 %41, label %46, label %43

43:                                               ; preds = %42
  %44 = bitcast %"class.std::__1::basic_string"* %30 to i8*
  %45 = bitcast %"class.std::__1::basic_string"* %31 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %44, i8* align 8 %45, i64 24, i1 false) #7
  br label %62

46:                                               ; preds = %42
  %47 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %31, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 11, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* %30, i8* %48, i64 %50) #7
  br label %62

52:                                               ; preds = %33
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %31, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 11, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %56 = load i64, i64* %55, align 8
  %57 = bitcast %"class.std::__1::basic_string"* %31 to i8*
  %58 = zext i8 %40 to i64
  %59 = select i1 %41, i8* %54, i8* %57
  %60 = select i1 %41, i64 %56, i64 %58
  %61 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* %30, i8* %59, i64 %60) #7
  br label %62

62:                                               ; preds = %43, %46, %52
  %63 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 1, i32 12, i32 1
  %64 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 12, i32 1
  %65 = bitcast i32* %63 to i8*
  %66 = bitcast i32* %64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %66, i64 140, i1 false) #7
  %67 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 1, i32 13
  %68 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 13
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 16, i1 false) #7
  %69 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 1, i32 16
  %70 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 16, i32 0, i32 0
  %71 = load i32*, i32** %70, align 8
  %72 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 16, i32 0, i32 1
  %73 = load i32*, i32** %72, align 8
  tail call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"* %69, i32* %71, i32* %73) #7
  br label %81

74:                                               ; preds = %18
  %75 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 1, i32 12, i32 1
  %76 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 12, i32 1
  %77 = bitcast i32* %75 to i8*
  %78 = bitcast i32* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 140, i1 false) #7
  %79 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 1, i32 13
  %80 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 13
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %79, i8* align 8 %80, i64 16, i1 false) #7
  br label %81

81:                                               ; preds = %74, %62
  %82 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 1, i32 17
  %83 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 17
  %84 = bitcast %"struct.jxl::FrameOrigin"* %83 to i64*
  %85 = bitcast %"struct.jxl::FrameOrigin"* %82 to i64*
  %86 = load i64, i64* %84, align 8
  store i64 %86, i64* %85, align 8
  %87 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 1, i32 18, i32 1
  %88 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 18, i32 1
  %89 = bitcast i32* %87 to i8*
  %90 = bitcast i32* %88 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %89, i8* align 8 %90, i64 25, i1 false) #7
  br i1 %32, label %97, label %91

91:                                               ; preds = %81
  %92 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 1, i32 19
  %93 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 19, i32 0, i32 0
  %94 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %93, align 8
  %95 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 19, i32 0, i32 1
  %96 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %95, align 8
  tail call void @_ZNSt3__16vectorIN3jxl12BlendingInfoENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.6"* %92, %"struct.jxl::BlendingInfo"* %94, %"struct.jxl::BlendingInfo"* %96) #7
  br label %97

97:                                               ; preds = %81, %91
  %98 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 1, i32 20, i32 1
  %99 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 20, i32 1
  %100 = bitcast i32* %98 to i8*
  %101 = bitcast i32* %99 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %101, i64 16, i1 false) #7
  %102 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 1, i32 21
  %103 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 21
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %102, i8* align 8 %103, i64 24, i1 false) #7
  %104 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 1, i32 26, i32 1
  %105 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 26, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %104, i8* align 8 %105, i64 129, i1 false) #7
  %106 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 1, i32 27
  %107 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 27
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %107, i64 16, i1 false) #7
  %108 = bitcast %"struct.jxl::CodecMetadata"** %12 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %"struct.jxl::PassesSharedState"* %1 to i64*
  store i64 %109, i64* %110, align 8
  %111 = bitcast %"struct.jxl::FrameDimensions"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %111) #7
  call void @_ZNK3jxl11FrameHeader17ToFrameDimensionsEv(%"struct.jxl::FrameDimensions"* nonnull sret %4, %"struct.jxl::FrameHeader"* %0)
  %112 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 2
  %113 = bitcast %"struct.jxl::FrameDimensions"* %112 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %113, i8* nonnull align 8 %111, i64 144, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %111) #7
  %114 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 9, i32 1, i32 0
  store %"struct.jxl::PassesSharedState"* %1, %"struct.jxl::PassesSharedState"** %114, align 8
  %115 = bitcast %"class.jxl::AcStrategyImage"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %115) #7
  %116 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 2, i32 8
  %117 = load i64, i64* %116, align 8
  %118 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 2, i32 9
  %119 = load i64, i64* %118, align 8
  call void @_ZN3jxl15AcStrategyImageC1Emm(%"class.jxl::AcStrategyImage"* nonnull %5, i64 %117, i64 %119) #7
  %120 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 3
  %121 = bitcast %"class.jxl::AcStrategyImage"* %120 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %121, i8* nonnull align 8 %115, i64 24, i1 false) #7
  %122 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 3, i32 0, i32 0, i32 5
  %123 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %5, i64 0, i32 0, i32 0, i32 5
  %124 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %123, i64 0, i32 0, i32 0, i32 0
  %125 = bitcast %"class.std::__1::unique_ptr"* %123 to i64*
  %126 = load i64, i64* %125, align 8
  store i8* null, i8** %124, align 8
  %127 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %122, i64 0, i32 0, i32 0, i32 0
  %128 = load i8*, i8** %127, align 8
  %129 = bitcast %"class.std::__1::unique_ptr"* %122 to i64*
  store i64 %126, i64* %129, align 8
  %130 = icmp eq i8* %128, null
  br i1 %130, label %134, label %131

131:                                              ; preds = %97
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %128) #7
  %132 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %5, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %133 = load i8*, i8** %132, align 8
  br label %134

134:                                              ; preds = %97, %131
  %135 = phi i8* [ null, %97 ], [ %133, %131 ]
  %136 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 3, i32 1
  %137 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %5, i64 0, i32 1
  %138 = bitcast i8** %136 to i8*
  %139 = bitcast i8** %137 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %138, i8* align 8 %139, i64 16, i1 false) #7
  %140 = getelementptr inbounds %"class.jxl::AcStrategyImage", %"class.jxl::AcStrategyImage"* %5, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %140, align 8
  %141 = icmp eq i8* %135, null
  br i1 %141, label %143, label %142

142:                                              ; preds = %134
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %135) #7
  br label %143

143:                                              ; preds = %134, %142
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %115) #7
  %144 = bitcast %"class.jxl::Plane.53"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %144) #7
  %145 = load i64, i64* %116, align 8
  %146 = load i64, i64* %118, align 8
  %147 = getelementptr inbounds %"class.jxl::Plane.53", %"class.jxl::Plane.53"* %6, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %147, i64 %145, i64 %146, i64 4) #7
  %148 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 6
  %149 = bitcast %"class.jxl::Plane.53"* %148 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %149, i8* nonnull align 8 %144, i64 24, i1 false) #7
  %150 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 6, i32 0, i32 5
  %151 = getelementptr inbounds %"class.jxl::Plane.53", %"class.jxl::Plane.53"* %6, i64 0, i32 0, i32 5
  %152 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %151, i64 0, i32 0, i32 0, i32 0
  %153 = bitcast %"class.std::__1::unique_ptr"* %151 to i64*
  %154 = load i64, i64* %153, align 8
  store i8* null, i8** %152, align 8
  %155 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %150, i64 0, i32 0, i32 0, i32 0
  %156 = load i8*, i8** %155, align 8
  %157 = bitcast %"class.std::__1::unique_ptr"* %150 to i64*
  store i64 %154, i64* %157, align 8
  %158 = icmp eq i8* %156, null
  br i1 %158, label %159, label %161

159:                                              ; preds = %143
  %160 = getelementptr inbounds %"class.jxl::Plane.53", %"class.jxl::Plane.53"* %6, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %160, align 8
  br label %167

161:                                              ; preds = %143
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %156) #7
  %162 = getelementptr inbounds %"class.jxl::Plane.53", %"class.jxl::Plane.53"* %6, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %163 = load i8*, i8** %162, align 8
  %164 = getelementptr inbounds %"class.jxl::Plane.53", %"class.jxl::Plane.53"* %6, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %164, align 8
  %165 = icmp eq i8* %163, null
  br i1 %165, label %167, label %166

166:                                              ; preds = %161
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %163) #7
  br label %167

167:                                              ; preds = %159, %161, %166
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %144) #7
  %168 = bitcast %"class.jxl::Plane"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %168) #7
  %169 = load i64, i64* %116, align 8
  %170 = load i64, i64* %118, align 8
  %171 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %171, i64 %169, i64 %170, i64 1) #7
  %172 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 7
  %173 = bitcast %"class.jxl::Plane"* %172 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %173, i8* nonnull align 8 %168, i64 24, i1 false) #7
  %174 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 7, i32 0, i32 5
  %175 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 5
  %176 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %175, i64 0, i32 0, i32 0, i32 0
  %177 = bitcast %"class.std::__1::unique_ptr"* %175 to i64*
  %178 = load i64, i64* %177, align 8
  store i8* null, i8** %176, align 8
  %179 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %174, i64 0, i32 0, i32 0, i32 0
  %180 = load i8*, i8** %179, align 8
  %181 = bitcast %"class.std::__1::unique_ptr"* %174 to i64*
  store i64 %178, i64* %181, align 8
  %182 = icmp eq i8* %180, null
  br i1 %182, label %183, label %185

183:                                              ; preds = %167
  %184 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %184, align 8
  br label %191

185:                                              ; preds = %167
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %180) #7
  %186 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %187 = load i8*, i8** %186, align 8
  %188 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %7, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %188, align 8
  %189 = icmp eq i8* %187, null
  br i1 %189, label %191, label %190

190:                                              ; preds = %185
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %187) #7
  br label %191

191:                                              ; preds = %183, %185, %190
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %168) #7
  %192 = bitcast %"struct.jxl::ColorCorrelationMap"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %192) #7
  %193 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %112, i64 0, i32 0
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 2, i32 1
  %196 = load i64, i64* %195, align 8
  call void @_ZN3jxl19ColorCorrelationMapC1Emmb(%"struct.jxl::ColorCorrelationMap"* nonnull %8, i64 %194, i64 %196, i1 zeroext true) #7
  %197 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 8
  %198 = bitcast %"struct.jxl::ColorCorrelationMap"* %197 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %198, i8* nonnull align 8 %192, i64 24, i1 false) #7
  %199 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 8, i32 0, i32 0, i32 5
  %200 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %8, i64 0, i32 0, i32 0, i32 5
  %201 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %200, i64 0, i32 0, i32 0, i32 0
  %202 = bitcast %"class.std::__1::unique_ptr"* %200 to i64*
  %203 = load i64, i64* %202, align 8
  store i8* null, i8** %201, align 8
  %204 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %199, i64 0, i32 0, i32 0, i32 0
  %205 = load i8*, i8** %204, align 8
  %206 = bitcast %"class.std::__1::unique_ptr"* %199 to i64*
  store i64 %203, i64* %206, align 8
  %207 = icmp eq i8* %205, null
  br i1 %207, label %209, label %208

208:                                              ; preds = %191
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %205) #7
  br label %209

209:                                              ; preds = %208, %191
  %210 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 8, i32 1
  %211 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %8, i64 0, i32 1
  %212 = bitcast %"class.jxl::Plane.54"* %210 to i8*
  %213 = bitcast %"class.jxl::Plane.54"* %211 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %212, i8* align 8 %213, i64 24, i1 false) #7
  %214 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 8, i32 1, i32 0, i32 5
  %215 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %8, i64 0, i32 1, i32 0, i32 5
  %216 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %215, i64 0, i32 0, i32 0, i32 0
  %217 = bitcast %"class.std::__1::unique_ptr"* %215 to i64*
  %218 = load i64, i64* %217, align 8
  store i8* null, i8** %216, align 8
  %219 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %214, i64 0, i32 0, i32 0, i32 0
  %220 = load i8*, i8** %219, align 8
  %221 = bitcast %"class.std::__1::unique_ptr"* %214 to i64*
  store i64 %218, i64* %221, align 8
  %222 = icmp eq i8* %220, null
  br i1 %222, label %226, label %223

223:                                              ; preds = %209
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %220) #7
  %224 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %8, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %225 = load i8*, i8** %224, align 8
  br label %226

226:                                              ; preds = %209, %223
  %227 = phi i8* [ null, %209 ], [ %225, %223 ]
  %228 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 8, i32 2
  %229 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %8, i64 0, i32 2
  %230 = bitcast [4 x float]* %228 to i8*
  %231 = bitcast [4 x float]* %229 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %230, i8* align 8 %231, i64 40, i1 false) #7
  %232 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %8, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %232, align 8
  %233 = icmp eq i8* %227, null
  br i1 %233, label %235, label %234

234:                                              ; preds = %226
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %227) #7
  br label %235

235:                                              ; preds = %234, %226
  %236 = getelementptr inbounds %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ColorCorrelationMap"* %8, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %237 = load i8*, i8** %236, align 8
  store i8* null, i8** %236, align 8
  %238 = icmp eq i8* %237, null
  br i1 %238, label %240, label %239

239:                                              ; preds = %235
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %237) #7
  br label %240

240:                                              ; preds = %235, %239
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %192) #7
  %241 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 10
  store i64 393984, i64* %241, align 8
  br i1 %2, label %242, label %262

242:                                              ; preds = %240
  %243 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 11
  %244 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 11, i32 0, i32 1
  %245 = bitcast i32** %244 to i64*
  %246 = load i64, i64* %245, align 8
  %247 = bitcast %"class.std::__1::vector"* %243 to i64*
  %248 = load i64, i64* %247, align 8
  %249 = sub i64 %246, %248
  %250 = ashr exact i64 %249, 2
  %251 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 12, i32 1
  %252 = load i32, i32* %251, align 8
  %253 = zext i32 %252 to i64
  %254 = mul nuw nsw i64 %253, 393984
  %255 = icmp ugt i64 %254, %250
  br i1 %255, label %256, label %262

256:                                              ; preds = %242
  %257 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 2
  %258 = load i32, i32* %257, align 4
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %260, label %262

260:                                              ; preds = %256
  %261 = sub nsw i64 %254, %250
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector"* %243, i64 %261) #7
  br label %262

262:                                              ; preds = %260, %256, %242, %240
  %263 = bitcast %"class.jxl::Plane"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %263) #7
  %264 = load i64, i64* %116, align 8
  %265 = load i64, i64* %118, align 8
  %266 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %266, i64 %264, i64 %265, i64 1) #7
  %267 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 12
  %268 = bitcast %"class.jxl::Plane"* %267 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %268, i8* nonnull align 8 %263, i64 24, i1 false) #7
  %269 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 12, i32 0, i32 5
  %270 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0, i32 5
  %271 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %270, i64 0, i32 0, i32 0, i32 0
  %272 = bitcast %"class.std::__1::unique_ptr"* %270 to i64*
  %273 = load i64, i64* %272, align 8
  store i8* null, i8** %271, align 8
  %274 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %269, i64 0, i32 0, i32 0, i32 0
  %275 = load i8*, i8** %274, align 8
  %276 = bitcast %"class.std::__1::unique_ptr"* %269 to i64*
  store i64 %273, i64* %276, align 8
  %277 = icmp eq i8* %275, null
  br i1 %277, label %278, label %280

278:                                              ; preds = %262
  %279 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %279, align 8
  br label %286

280:                                              ; preds = %262
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %275) #7
  %281 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %282 = load i8*, i8** %281, align 8
  %283 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %283, align 8
  %284 = icmp eq i8* %282, null
  br i1 %284, label %286, label %285

285:                                              ; preds = %280
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %282) #7
  br label %286

286:                                              ; preds = %278, %280, %285
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %263) #7
  %287 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 4
  %288 = load i64, i64* %287, align 8
  %289 = and i64 %288, 32
  %290 = icmp eq i64 %289, 0
  %291 = or i1 %290, %2
  br i1 %291, label %292, label %359

292:                                              ; preds = %286
  %293 = bitcast %"class.jxl::Image3"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %293) #7
  %294 = load i64, i64* %116, align 8
  %295 = load i64, i64* %118, align 8
  %296 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %296, i64 %294, i64 %295, i64 4) #7
  %297 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %297, i64 %294, i64 %295, i64 4) #7
  %298 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %298, i64 %294, i64 %295, i64 4) #7
  %299 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 13
  %300 = bitcast %"class.jxl::Image3"* %299 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %300, i8* nonnull align 8 %293, i64 24, i1 false) #7
  %301 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 13, i32 0, i64 0, i32 0, i32 5
  %302 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 0, i32 0, i32 5
  %303 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %302, i64 0, i32 0, i32 0, i32 0
  %304 = bitcast %"class.std::__1::unique_ptr"* %302 to i64*
  %305 = load i64, i64* %304, align 8
  store i8* null, i8** %303, align 8
  %306 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %301, i64 0, i32 0, i32 0, i32 0
  %307 = load i8*, i8** %306, align 8
  %308 = bitcast %"class.std::__1::unique_ptr"* %301 to i64*
  store i64 %305, i64* %308, align 8
  %309 = icmp eq i8* %307, null
  br i1 %309, label %311, label %310

310:                                              ; preds = %292
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %307) #7
  br label %311

311:                                              ; preds = %310, %292
  %312 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 1
  %313 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 13, i32 0, i64 1
  %314 = bitcast %"class.jxl::Plane.97"* %313 to i8*
  %315 = bitcast %"class.jxl::Plane.97"* %312 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %314, i8* align 8 %315, i64 24, i1 false) #7
  %316 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 13, i32 0, i64 1, i32 0, i32 5
  %317 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 1, i32 0, i32 5
  %318 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %317, i64 0, i32 0, i32 0, i32 0
  %319 = bitcast %"class.std::__1::unique_ptr"* %317 to i64*
  %320 = load i64, i64* %319, align 8
  store i8* null, i8** %318, align 8
  %321 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %316, i64 0, i32 0, i32 0, i32 0
  %322 = load i8*, i8** %321, align 8
  %323 = bitcast %"class.std::__1::unique_ptr"* %316 to i64*
  store i64 %320, i64* %323, align 8
  %324 = icmp eq i8* %322, null
  br i1 %324, label %326, label %325

325:                                              ; preds = %311
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %322) #7
  br label %326

326:                                              ; preds = %325, %311
  %327 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 2
  %328 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 13, i32 0, i64 2
  %329 = bitcast %"class.jxl::Plane.97"* %328 to i8*
  %330 = bitcast %"class.jxl::Plane.97"* %327 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %329, i8* align 8 %330, i64 24, i1 false) #7
  %331 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 13, i32 0, i64 2, i32 0, i32 5
  %332 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 2, i32 0, i32 5
  %333 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %332, i64 0, i32 0, i32 0, i32 0
  %334 = bitcast %"class.std::__1::unique_ptr"* %332 to i64*
  %335 = load i64, i64* %334, align 8
  store i8* null, i8** %333, align 8
  %336 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %331, i64 0, i32 0, i32 0, i32 0
  %337 = load i8*, i8** %336, align 8
  %338 = bitcast %"class.std::__1::unique_ptr"* %331 to i64*
  store i64 %335, i64* %338, align 8
  %339 = icmp eq i8* %337, null
  br i1 %339, label %340, label %342

340:                                              ; preds = %326
  %341 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %341, align 8
  br label %348

342:                                              ; preds = %326
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %337) #7
  %343 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %344 = load i8*, i8** %343, align 8
  %345 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %345, align 8
  %346 = icmp eq i8* %344, null
  br i1 %346, label %348, label %347

347:                                              ; preds = %342
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %344) #7
  br label %348

348:                                              ; preds = %340, %347, %342
  %349 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %350 = load i8*, i8** %349, align 8
  store i8* null, i8** %349, align 8
  %351 = icmp eq i8* %350, null
  br i1 %351, label %353, label %352

352:                                              ; preds = %348
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %350) #7
  br label %353

353:                                              ; preds = %352, %348
  %354 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %10, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %355 = load i8*, i8** %354, align 8
  store i8* null, i8** %354, align 8
  %356 = icmp eq i8* %355, null
  br i1 %356, label %358, label %357

357:                                              ; preds = %353
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %355) #7
  br label %358

358:                                              ; preds = %353, %357
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %293) #7
  br label %403

359:                                              ; preds = %286
  %360 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 24
  %361 = load i32, i32* %360, align 4
  %362 = icmp eq i32 %361, 4
  br i1 %362, label %470, label %363

363:                                              ; preds = %359
  %364 = zext i32 %361 to i64
  %365 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 16, i64 %364
  %366 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 14
  store %"class.jxl::Image3"* %365, %"class.jxl::Image3"** %366, align 8
  %367 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %365, i64 0, i32 0, i64 0, i32 0, i32 0
  %368 = load i32, i32* %367, align 8
  %369 = icmp eq i32 %368, 0
  br i1 %369, label %470, label %370

370:                                              ; preds = %363
  %371 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %267, i64 0, i32 0, i32 0
  %372 = load i32, i32* %371, align 8
  %373 = icmp eq i32 %372, 0
  br i1 %373, label %403, label %374

374:                                              ; preds = %370
  %375 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 12, i32 0, i32 1
  %376 = load i32, i32* %375, align 4
  %377 = icmp eq i32 %376, 0
  br i1 %377, label %403, label %378

378:                                              ; preds = %374
  %379 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 12, i32 0, i32 5, i32 0, i32 0, i32 0
  %380 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 12, i32 0, i32 4
  %381 = load i8*, i8** %379, align 8
  %382 = ptrtoint i8* %381 to i64
  %383 = and i64 %382, 63
  %384 = icmp eq i64 %383, 0
  call void @llvm.assume(i1 %384) #7
  %385 = zext i32 %372 to i64
  call void @llvm.memset.p0i8.i64(i8* align 64 %381, i8 0, i64 %385, i1 false) #7
  %386 = load i32, i32* %375, align 4
  %387 = icmp ugt i32 %386, 1
  br i1 %387, label %388, label %403

388:                                              ; preds = %378, %388
  %389 = phi i64 [ %399, %388 ], [ 1, %378 ]
  %390 = load i32, i32* %371, align 8
  %391 = load i8*, i8** %379, align 8
  %392 = load i64, i64* %380, align 8
  %393 = mul i64 %392, %389
  %394 = getelementptr inbounds i8, i8* %391, i64 %393
  %395 = ptrtoint i8* %394 to i64
  %396 = and i64 %395, 63
  %397 = icmp eq i64 %396, 0
  call void @llvm.assume(i1 %397) #7
  %398 = zext i32 %390 to i64
  call void @llvm.memset.p0i8.i64(i8* align 64 %394, i8 0, i64 %398, i1 false) #7
  %399 = add nuw nsw i64 %389, 1
  %400 = load i32, i32* %375, align 4
  %401 = zext i32 %400 to i64
  %402 = icmp ult i64 %399, %401
  br i1 %402, label %388, label %403

403:                                              ; preds = %388, %378, %374, %370, %358
  %404 = bitcast %"class.jxl::Image3"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %404) #7
  %405 = load i64, i64* %116, align 8
  %406 = load i64, i64* %118, align 8
  %407 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %407, i64 %405, i64 %406, i64 4) #7
  %408 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %408, i64 %405, i64 %406, i64 4) #7
  %409 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %409, i64 %405, i64 %406, i64 4) #7
  %410 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 13
  %411 = bitcast %"class.jxl::Image3"* %410 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %411, i8* nonnull align 8 %404, i64 24, i1 false) #7
  %412 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 13, i32 0, i64 0, i32 0, i32 5
  %413 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 0, i32 0, i32 5
  %414 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %413, i64 0, i32 0, i32 0, i32 0
  %415 = bitcast %"class.std::__1::unique_ptr"* %413 to i64*
  %416 = load i64, i64* %415, align 8
  store i8* null, i8** %414, align 8
  %417 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %412, i64 0, i32 0, i32 0, i32 0
  %418 = load i8*, i8** %417, align 8
  %419 = bitcast %"class.std::__1::unique_ptr"* %412 to i64*
  store i64 %416, i64* %419, align 8
  %420 = icmp eq i8* %418, null
  br i1 %420, label %422, label %421

421:                                              ; preds = %403
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %418) #7
  br label %422

422:                                              ; preds = %421, %403
  %423 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 1
  %424 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 13, i32 0, i64 1
  %425 = bitcast %"class.jxl::Plane.97"* %424 to i8*
  %426 = bitcast %"class.jxl::Plane.97"* %423 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %425, i8* align 8 %426, i64 24, i1 false) #7
  %427 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 13, i32 0, i64 1, i32 0, i32 5
  %428 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 1, i32 0, i32 5
  %429 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %428, i64 0, i32 0, i32 0, i32 0
  %430 = bitcast %"class.std::__1::unique_ptr"* %428 to i64*
  %431 = load i64, i64* %430, align 8
  store i8* null, i8** %429, align 8
  %432 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %427, i64 0, i32 0, i32 0, i32 0
  %433 = load i8*, i8** %432, align 8
  %434 = bitcast %"class.std::__1::unique_ptr"* %427 to i64*
  store i64 %431, i64* %434, align 8
  %435 = icmp eq i8* %433, null
  br i1 %435, label %437, label %436

436:                                              ; preds = %422
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %433) #7
  br label %437

437:                                              ; preds = %436, %422
  %438 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 2
  %439 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 13, i32 0, i64 2
  %440 = bitcast %"class.jxl::Plane.97"* %439 to i8*
  %441 = bitcast %"class.jxl::Plane.97"* %438 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %440, i8* align 8 %441, i64 24, i1 false) #7
  %442 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %1, i64 0, i32 13, i32 0, i64 2, i32 0, i32 5
  %443 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 2, i32 0, i32 5
  %444 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %443, i64 0, i32 0, i32 0, i32 0
  %445 = bitcast %"class.std::__1::unique_ptr"* %443 to i64*
  %446 = load i64, i64* %445, align 8
  store i8* null, i8** %444, align 8
  %447 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %442, i64 0, i32 0, i32 0, i32 0
  %448 = load i8*, i8** %447, align 8
  %449 = bitcast %"class.std::__1::unique_ptr"* %442 to i64*
  store i64 %446, i64* %449, align 8
  %450 = icmp eq i8* %448, null
  br i1 %450, label %451, label %453

451:                                              ; preds = %437
  %452 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %452, align 8
  br label %459

453:                                              ; preds = %437
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %448) #7
  %454 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %455 = load i8*, i8** %454, align 8
  %456 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %456, align 8
  %457 = icmp eq i8* %455, null
  br i1 %457, label %459, label %458

458:                                              ; preds = %453
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %455) #7
  br label %459

459:                                              ; preds = %451, %458, %453
  %460 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %461 = load i8*, i8** %460, align 8
  store i8* null, i8** %460, align 8
  %462 = icmp eq i8* %461, null
  br i1 %462, label %464, label %463

463:                                              ; preds = %459
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %461) #7
  br label %464

464:                                              ; preds = %463, %459
  %465 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %11, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %466 = load i8*, i8** %465, align 8
  store i8* null, i8** %465, align 8
  %467 = icmp eq i8* %466, null
  br i1 %467, label %469, label %468

468:                                              ; preds = %464
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %466) #7
  br label %469

469:                                              ; preds = %464, %468
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %404) #7
  br label %470

470:                                              ; preds = %363, %359, %469
  %471 = phi i32 [ 0, %469 ], [ 1, %359 ], [ 1, %363 ]
  ret i32 %471
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #1

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3jxl11FrameHeader17ToFrameDimensionsEv(%"struct.jxl::FrameDimensions"* noalias sret, %"struct.jxl::FrameHeader"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 25
  %4 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %3, align 8
  %5 = icmp eq %"struct.jxl::CodecMetadata"* %4, null
  br i1 %5, label %46, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 27
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %4, i64 0, i32 0, i32 19
  %12 = tail call i64 @_ZNK3jxl13PreviewHeader5xsizeEv(%"class.jxl::PreviewHeader"* %11) #7
  br label %16

13:                                               ; preds = %6
  %14 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %4, i64 0, i32 1
  %15 = tail call i64 @_ZNK3jxl10SizeHeader5xsizeEv(%"class.jxl::SizeHeader"* %14) #7
  br label %16

16:                                               ; preds = %10, %13
  %17 = phi i64 [ %15, %13 ], [ %12, %10 ]
  %18 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %3, align 8
  %19 = icmp eq %"struct.jxl::CodecMetadata"* %18, null
  br i1 %19, label %46, label %20

20:                                               ; preds = %16
  %21 = load i8, i8* %7, align 8, !range !2
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %34, label %23

23:                                               ; preds = %20
  %24 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 0, i32 19, i32 1
  %25 = load i8, i8* %24, align 8, !range !2
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 0, i32 19, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = shl i32 %29, 3
  br label %46

31:                                               ; preds = %23
  %32 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 0, i32 19, i32 3
  %33 = load i32, i32* %32, align 8
  br label %46

34:                                               ; preds = %20
  %35 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 1, i32 1
  %36 = load i8, i8* %35, align 8, !range !2
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %43, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 1, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = shl i32 %40, 3
  %42 = add i32 %41, 8
  br label %46

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %18, i64 0, i32 1, i32 3
  %45 = load i32, i32* %44, align 8
  br label %46

46:                                               ; preds = %2, %16, %27, %31, %38, %43
  %47 = phi i64 [ %17, %16 ], [ %17, %27 ], [ %17, %31 ], [ %17, %38 ], [ %17, %43 ], [ 0, %2 ]
  %48 = phi i32 [ 0, %16 ], [ %30, %27 ], [ %33, %31 ], [ %42, %38 ], [ %45, %43 ], [ 0, %2 ]
  %49 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 14, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 0
  %52 = zext i32 %50 to i64
  %53 = select i1 %51, i64 %47, i64 %52
  %54 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 14, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq i32 %55, 0
  %57 = select i1 %56, i32 %48, i32 %55
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 24
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %71, label %62

62:                                               ; preds = %46
  %63 = mul i32 %60, 3
  %64 = shl i32 1, %63
  %65 = sext i32 %64 to i64
  %66 = add nsw i64 %65, -1
  %67 = add i64 %66, %53
  %68 = udiv i64 %67, %65
  %69 = add nsw i64 %66, %58
  %70 = udiv i64 %69, %65
  br label %71

71:                                               ; preds = %46, %62
  %72 = phi i64 [ %68, %62 ], [ %53, %46 ]
  %73 = phi i64 [ %70, %62 ], [ %58, %46 ]
  %74 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 4
  %75 = bitcast i64* %74 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %75, i8 -86, i64 96, i1 false)
  %76 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 8
  %77 = load i32, i32* %76, align 8
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 7, i32 2
  %80 = load i8, i8* %79, align 4
  %81 = zext i8 %80 to i64
  %82 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 7, i32 3
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i64
  %85 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 2
  %86 = load i32, i32* %85, align 4
  %87 = icmp eq i32 %86, 1
  %88 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 15
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i64
  %91 = shl i64 128, %78
  %92 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 16
  store i64 %91, i64* %92, align 8
  %93 = shl i64 %91, 3
  %94 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 17
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 2
  store i64 %72, i64* %95, align 8
  %96 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 3
  store i64 %73, i64* %96, align 8
  %97 = add nsw i64 %90, -1
  %98 = add i64 %97, %72
  %99 = udiv i64 %98, %90
  %100 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 0
  store i64 %99, i64* %100, align 8
  %101 = add i64 %97, %73
  %102 = udiv i64 %101, %90
  %103 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 1
  store i64 %102, i64* %103, align 8
  %104 = shl i64 8, %81
  %105 = add i64 %99, -1
  %106 = add i64 %105, %104
  %107 = add nuw nsw i64 %81, 3
  %108 = lshr i64 %106, %107
  %109 = shl i64 %108, %81
  %110 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 8
  store i64 %109, i64* %110, align 8
  %111 = shl i64 8, %84
  %112 = add i64 %102, -1
  %113 = add i64 %112, %111
  %114 = add nuw nsw i64 %84, 3
  %115 = lshr i64 %113, %114
  %116 = shl i64 %115, %84
  %117 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 9
  store i64 %116, i64* %117, align 8
  %118 = shl i64 %109, 3
  %119 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 6
  store i64 %118, i64* %119, align 8
  %120 = shl i64 %116, 3
  %121 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 7
  store i64 %120, i64* %121, align 8
  br i1 %87, label %122, label %123

122:                                              ; preds = %71
  store i64 %99, i64* %119, align 8
  store i64 %102, i64* %121, align 8
  br label %123

123:                                              ; preds = %71, %122
  %124 = phi i64 [ %102, %122 ], [ %120, %71 ]
  %125 = phi i64 [ %99, %122 ], [ %118, %71 ]
  %126 = mul i64 %125, %90
  %127 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 4
  store i64 %126, i64* %127, align 8
  %128 = mul i64 %124, %90
  %129 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 5
  store i64 %128, i64* %129, align 8
  %130 = add i64 %105, %91
  %131 = add nuw nsw i64 %78, 7
  %132 = lshr i64 %130, %131
  %133 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 10
  store i64 %132, i64* %133, align 8
  %134 = add i64 %112, %91
  %135 = lshr i64 %134, %131
  %136 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 11
  store i64 %135, i64* %136, align 8
  %137 = add i64 %91, -1
  %138 = add i64 %109, %137
  %139 = lshr i64 %138, %131
  %140 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 12
  store i64 %139, i64* %140, align 8
  %141 = add i64 %116, %137
  %142 = lshr i64 %141, %131
  %143 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 13
  store i64 %142, i64* %143, align 8
  %144 = mul i64 %135, %132
  %145 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 14
  store i64 %144, i64* %145, align 8
  %146 = mul i64 %142, %139
  %147 = getelementptr inbounds %"struct.jxl::FrameDimensions", %"struct.jxl::FrameDimensions"* %0, i64 0, i32 15
  store i64 %146, i64* %147, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZN3jxl15AcStrategyImageC1Emm(%"class.jxl::AcStrategyImage"*, i64, i64) unnamed_addr #1

declare void @_ZN3jxl19ColorCorrelationMapC1Emmb(%"struct.jxl::ColorCorrelationMap"*, i64, i64, i1 zeroext) unnamed_addr #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE6assignIPjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"*, i32*, i32*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i32* %2 to i64
  %5 = ptrtoint i32* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 2
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast i32** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 2
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to i32*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = bitcast i32** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 2
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds i32, i32* %1, i64 %22
  %25 = select i1 %23, i32* %24, i32* %2
  %26 = ptrtoint i32* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 2
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 %27, i1 false) #7
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 2
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast i32* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 %36, i1 false) #7
  %42 = inttoptr i64 %35 to i32*
  %43 = getelementptr inbounds i32, i32* %42, i64 %39
  %44 = ptrtoint i32* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds i32, i32* %16, i64 %28
  store i32* %48, i32** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %53 = bitcast i32** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #9
  %55 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #7
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 4611686018427387903
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #8
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 2
  %63 = icmp ult i64 %62, 2305843009213693951
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 1
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 4611686018427387903
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #8
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 4611686018427387903, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 2
  %74 = tail call i8* @_Znwm(i64 %73) #9
  %75 = bitcast i8* %74 to i32*
  %76 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %77 = bitcast i32** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds i32, i32* %75, i64 %72
  store i32* %79, i32** %8, align 8
  %80 = bitcast i32** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 2
  %85 = bitcast i32* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %74, i8* align 4 %85, i64 %6, i1 false) #7
  %86 = getelementptr inbounds i32, i32* %75, i64 %84
  %87 = ptrtoint i32* %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl12BlendingInfoENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.6"*, %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"struct.jxl::BlendingInfo"* %2 to i64
  %5 = ptrtoint %"struct.jxl::BlendingInfo"* %1 to i64
  %6 = sub i64 %4, %5
  %7 = sdiv exact i64 %6, 40
  %8 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %"struct.jxl::BlendingInfo"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.6"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = sdiv exact i64 %13, 40
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to %"struct.jxl::BlendingInfo"*
  br i1 %15, label %70, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %"struct.jxl::BlendingInfo"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = sdiv exact i64 %21, 40
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %1, i64 %22
  %25 = select i1 %23, %"struct.jxl::BlendingInfo"* %24, %"struct.jxl::BlendingInfo"* %2
  %26 = icmp eq %"struct.jxl::BlendingInfo"* %25, %1
  br i1 %26, label %37, label %27

27:                                               ; preds = %17, %27
  %28 = phi %"struct.jxl::BlendingInfo"* [ %35, %27 ], [ %16, %17 ]
  %29 = phi %"struct.jxl::BlendingInfo"* [ %34, %27 ], [ %1, %17 ]
  %30 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %28, i64 0, i32 1
  %31 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %29, i64 0, i32 1
  %32 = bitcast i32* %30 to i8*
  %33 = bitcast i32* %31 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 25, i1 false) #7
  %34 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %29, i64 1
  %35 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %28, i64 1
  %36 = icmp eq %"struct.jxl::BlendingInfo"* %34, %25
  br i1 %36, label %37, label %27

37:                                               ; preds = %27, %17
  %38 = phi %"struct.jxl::BlendingInfo"* [ %16, %17 ], [ %35, %27 ]
  br i1 %23, label %39, label %59

39:                                               ; preds = %37
  %40 = load i64, i64* %19, align 8
  %41 = icmp eq %"struct.jxl::BlendingInfo"* %25, %2
  br i1 %41, label %57, label %42

42:                                               ; preds = %39
  %43 = inttoptr i64 %40 to %"struct.jxl::BlendingInfo"*
  br label %44

44:                                               ; preds = %44, %42
  %45 = phi %"struct.jxl::BlendingInfo"* [ %53, %44 ], [ %43, %42 ]
  %46 = phi %"struct.jxl::BlendingInfo"* [ %52, %44 ], [ %24, %42 ]
  %47 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %45, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl12BlendingInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %47, align 8
  %48 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %45, i64 0, i32 1
  %49 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %46, i64 0, i32 1
  %50 = bitcast i32* %48 to i8*
  %51 = bitcast i32* %49 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 25, i1 false) #7
  %52 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %46, i64 1
  %53 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %45, i64 1
  %54 = icmp eq %"struct.jxl::BlendingInfo"* %52, %2
  br i1 %54, label %55, label %44

55:                                               ; preds = %44
  %56 = ptrtoint %"struct.jxl::BlendingInfo"* %53 to i64
  br label %57

57:                                               ; preds = %39, %55
  %58 = phi i64 [ %40, %39 ], [ %56, %55 ]
  store i64 %58, i64* %19, align 8
  br label %129

59:                                               ; preds = %37
  %60 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %18, align 8
  %61 = icmp eq %"struct.jxl::BlendingInfo"* %60, %38
  br i1 %61, label %69, label %62

62:                                               ; preds = %59, %62
  %63 = phi %"struct.jxl::BlendingInfo"* [ %64, %62 ], [ %60, %59 ]
  %64 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %63, i64 -1
  %65 = bitcast %"struct.jxl::BlendingInfo"* %64 to void (%"struct.jxl::BlendingInfo"*)***
  %66 = load void (%"struct.jxl::BlendingInfo"*)**, void (%"struct.jxl::BlendingInfo"*)*** %65, align 8
  %67 = load void (%"struct.jxl::BlendingInfo"*)*, void (%"struct.jxl::BlendingInfo"*)** %66, align 8
  tail call void %67(%"struct.jxl::BlendingInfo"* %64) #7
  %68 = icmp eq %"struct.jxl::BlendingInfo"* %64, %38
  br i1 %68, label %69, label %62

69:                                               ; preds = %62, %59
  store %"struct.jxl::BlendingInfo"* %38, %"struct.jxl::BlendingInfo"** %18, align 8
  br label %129

70:                                               ; preds = %3
  %71 = icmp eq i64 %12, 0
  br i1 %71, label %90, label %72

72:                                               ; preds = %70
  %73 = inttoptr i64 %12 to i8*
  %74 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %75 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %74, align 8
  %76 = icmp eq %"struct.jxl::BlendingInfo"* %75, %16
  br i1 %76, label %87, label %77

77:                                               ; preds = %72, %77
  %78 = phi %"struct.jxl::BlendingInfo"* [ %79, %77 ], [ %75, %72 ]
  %79 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %78, i64 -1
  %80 = bitcast %"struct.jxl::BlendingInfo"* %79 to void (%"struct.jxl::BlendingInfo"*)***
  %81 = load void (%"struct.jxl::BlendingInfo"*)**, void (%"struct.jxl::BlendingInfo"*)*** %80, align 8
  %82 = load void (%"struct.jxl::BlendingInfo"*)*, void (%"struct.jxl::BlendingInfo"*)** %81, align 8
  tail call void %82(%"struct.jxl::BlendingInfo"* %79) #7
  %83 = icmp eq %"struct.jxl::BlendingInfo"* %79, %16
  br i1 %83, label %84, label %77

84:                                               ; preds = %77
  %85 = bitcast %"class.std::__1::vector.6"* %0 to i8**
  %86 = load i8*, i8** %85, align 8
  br label %87

87:                                               ; preds = %84, %72
  %88 = phi i8* [ %86, %84 ], [ %73, %72 ]
  store %"struct.jxl::BlendingInfo"* %16, %"struct.jxl::BlendingInfo"** %74, align 8
  tail call void @_ZdlPv(i8* %88) #9
  %89 = bitcast %"class.std::__1::vector.6"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %89, i8 0, i64 24, i1 false) #7
  br label %90

90:                                               ; preds = %70, %87
  %91 = phi i64 [ %10, %70 ], [ 0, %87 ]
  %92 = icmp ugt i64 %7, 461168601842738790
  br i1 %92, label %93, label %95

93:                                               ; preds = %90
  %94 = bitcast %"class.std::__1::vector.6"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %94) #8
  unreachable

95:                                               ; preds = %90
  %96 = sdiv exact i64 %91, 40
  %97 = icmp ult i64 %96, 230584300921369395
  br i1 %97, label %98, label %102

98:                                               ; preds = %95
  %99 = shl nsw i64 %96, 1
  %100 = icmp ult i64 %99, %7
  %101 = select i1 %100, i64 %7, i64 %99
  br label %102

102:                                              ; preds = %98, %95
  %103 = phi i64 [ %101, %98 ], [ 461168601842738790, %95 ]
  %104 = mul i64 %103, 40
  %105 = tail call i8* @_Znwm(i64 %104) #9
  %106 = bitcast i8* %105 to %"struct.jxl::BlendingInfo"*
  %107 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %108 = bitcast %"struct.jxl::BlendingInfo"** %107 to i8**
  store i8* %105, i8** %108, align 8
  %109 = bitcast %"class.std::__1::vector.6"* %0 to i8**
  store i8* %105, i8** %109, align 8
  %110 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %106, i64 %103
  store %"struct.jxl::BlendingInfo"* %110, %"struct.jxl::BlendingInfo"** %8, align 8
  %111 = bitcast %"struct.jxl::BlendingInfo"** %107 to i64*
  %112 = ptrtoint i8* %105 to i64
  %113 = icmp eq %"struct.jxl::BlendingInfo"* %1, %2
  br i1 %113, label %127, label %114

114:                                              ; preds = %102, %114
  %115 = phi %"struct.jxl::BlendingInfo"* [ %123, %114 ], [ %106, %102 ]
  %116 = phi %"struct.jxl::BlendingInfo"* [ %122, %114 ], [ %1, %102 ]
  %117 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %115, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl12BlendingInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %117, align 8
  %118 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %115, i64 0, i32 1
  %119 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %116, i64 0, i32 1
  %120 = bitcast i32* %118 to i8*
  %121 = bitcast i32* %119 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %120, i8* align 8 %121, i64 25, i1 false) #7
  %122 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %116, i64 1
  %123 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %115, i64 1
  %124 = icmp eq %"struct.jxl::BlendingInfo"* %122, %2
  br i1 %124, label %125, label %114

125:                                              ; preds = %114
  %126 = ptrtoint %"struct.jxl::BlendingInfo"* %123 to i64
  br label %127

127:                                              ; preds = %102, %125
  %128 = phi i64 [ %112, %102 ], [ %126, %125 ]
  store i64 %128, i64* %111, align 8
  br label %129

129:                                              ; preds = %57, %69, %127
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare i64 @_ZNK3jxl13PreviewHeader5xsizeEv(%"class.jxl::PreviewHeader"*) local_unnamed_addr #1

declare i64 @_ZNK3jxl10SizeHeader5xsizeEv(%"class.jxl::SizeHeader"*) local_unnamed_addr #1

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #1

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #7
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #8
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #8
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #9
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #7
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #7
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #9
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
