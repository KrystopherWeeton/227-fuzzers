; ModuleID = '../../third_party/angle/src/libANGLE/renderer/vulkan/ProgramVk.cpp'
source_filename = "../../third_party/angle/src/libANGLE/renderer/vulkan/ProgramVk.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.rx::ProgramVk" = type { %"class.rx::ProgramImpl", %"class.angle::PackedEnumMap.644", %"class.angle::BitSetT.62", [7 x i8], %"class.rx::ShaderInfo", %"struct.rx::GlslangProgramInterfaceInfo", %"class.rx::ProgramExecutableVk" }
%"class.rx::ProgramImpl" = type { i32 (...)**, %"class.gl::ProgramState"* }
%"class.angle::PackedEnumMap.644" = type { %"struct.std::__1::array.645" }
%"struct.std::__1::array.645" = type { [6 x %"struct.rx::DefaultUniformBlock"] }
%"struct.rx::DefaultUniformBlock" = type { [8 x i8], %"class.angle::MemoryBuffer", %"class.std::__1::vector.646" }
%"class.angle::MemoryBuffer" = type { i64, i8* }
%"class.std::__1::vector.646" = type { %"class.std::__1::__vector_base.647" }
%"class.std::__1::__vector_base.647" = type { %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"*, %"class.std::__1::__compressed_pair.648" }
%"struct.sh::BlockMemberInfo" = type { i32, i32, i32, i8, i32 }
%"class.std::__1::__compressed_pair.648" = type { %"struct.std::__1::__compressed_pair_elem.649" }
%"struct.std::__1::__compressed_pair_elem.649" = type { %"struct.sh::BlockMemberInfo"* }
%"class.angle::BitSetT.62" = type { i8 }
%"class.rx::ShaderInfo" = type <{ %"class.angle::PackedEnumMap.653", i8, [7 x i8] }>
%"class.angle::PackedEnumMap.653" = type { %"struct.std::__1::array.654" }
%"struct.std::__1::array.654" = type { [6 x %"class.std::__1::vector"] }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i32* }
%"struct.rx::GlslangProgramInterfaceInfo" = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.rx::ProgramExecutableVk" = type { i32 (...)**, %"class.angle::PackedEnumMap.655", %"class.angle::PackedEnumMap.655", i32, %"class.rx::vk::BufferSerial", %"class.rx::DescriptorSetCache", %"class.rx::DescriptorSetCache.672", %"class.rx::DescriptorSetCache.689", %"class.rx::vk::BindingPointer", %"class.angle::PackedEnumMap.706", %"class.angle::PackedEnumMap.710", %"class.angle::PackedEnumMap.714", i32, %"class.angle::FixedVector.730", %"class.std::__1::vector", %"class.rx::ShaderInterfaceVariableInfoMap", [64 x %"class.rx::ProgramInfo"], %"class.rx::ProgramInfo", %"struct.rx::ProgramTransformOptions", %"class.rx::ProgramVk"*, %"class.rx::ProgramPipelineVk"*, %"struct.rx::ProgramExecutablePerfCounters", %"struct.rx::ProgramExecutablePerfCounters" }
%"class.angle::PackedEnumMap.655" = type { %"struct.std::__1::array.656" }
%"struct.std::__1::array.656" = type { [4 x %struct.VkDescriptorSet_T*] }
%struct.VkDescriptorSet_T = type opaque
%"class.rx::vk::BufferSerial" = type { i32 }
%"class.rx::DescriptorSetCache" = type { %"class.rx::HasCacheStats", %"class.absl::flat_hash_map.657" }
%"class.rx::HasCacheStats" = type { i32 (...)**, %"class.rx::CacheStats" }
%"class.rx::CacheStats" = type { i64, i64 }
%"class.absl::flat_hash_map.657" = type { %"class.absl::container_internal::raw_hash_map.658" }
%"class.absl::container_internal::raw_hash_map.658" = type { %"class.absl::container_internal::raw_hash_set.659" }
%"class.absl::container_internal::raw_hash_set.659" = type { i8*, %"union.absl::container_internal::map_slot_type.660"*, i64, i64, %"class.absl::container_internal::CompressedTuple.661" }
%"union.absl::container_internal::map_slot_type.660" = type opaque
%"class.absl::container_internal::CompressedTuple.661" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.662" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.662" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.rx::DescriptorSetCache.672" = type { %"class.rx::HasCacheStats.673", %"class.absl::flat_hash_map.674" }
%"class.rx::HasCacheStats.673" = type { i32 (...)**, %"class.rx::CacheStats" }
%"class.absl::flat_hash_map.674" = type { %"class.absl::container_internal::raw_hash_map.675" }
%"class.absl::container_internal::raw_hash_map.675" = type { %"class.absl::container_internal::raw_hash_set.676" }
%"class.absl::container_internal::raw_hash_set.676" = type { i8*, %"union.absl::container_internal::map_slot_type.677"*, i64, i64, %"class.absl::container_internal::CompressedTuple.678" }
%"union.absl::container_internal::map_slot_type.677" = type opaque
%"class.absl::container_internal::CompressedTuple.678" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.679" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.679" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.rx::DescriptorSetCache.689" = type { %"class.rx::HasCacheStats.690", %"class.absl::flat_hash_map.691" }
%"class.rx::HasCacheStats.690" = type { i32 (...)**, %"class.rx::CacheStats" }
%"class.absl::flat_hash_map.691" = type { %"class.absl::container_internal::raw_hash_map.692" }
%"class.absl::container_internal::raw_hash_map.692" = type { %"class.absl::container_internal::raw_hash_set.693" }
%"class.absl::container_internal::raw_hash_set.693" = type { i8*, %"union.absl::container_internal::map_slot_type.694"*, i64, i64, %"class.absl::container_internal::CompressedTuple.695" }
%"union.absl::container_internal::map_slot_type.694" = type opaque
%"class.absl::container_internal::CompressedTuple.695" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.696" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.696" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.rx::vk::BindingPointer" = type { %"class.rx::vk::RefCounted"* }
%"class.rx::vk::RefCounted" = type { i32, %"class.rx::vk::PipelineLayout" }
%"class.rx::vk::PipelineLayout" = type { %"class.rx::vk::WrappedObject.1512" }
%"class.rx::vk::WrappedObject.1512" = type { %struct.VkPipelineLayout_T* }
%struct.VkPipelineLayout_T = type opaque
%"class.angle::PackedEnumMap.706" = type { %"struct.std::__1::array.707" }
%"struct.std::__1::array.707" = type { [4 x %"class.rx::vk::BindingPointer.708"] }
%"class.rx::vk::BindingPointer.708" = type { %"class.rx::vk::RefCounted.709"* }
%"class.rx::vk::RefCounted.709" = type opaque
%"class.angle::PackedEnumMap.710" = type { %"struct.std::__1::array.711" }
%"struct.std::__1::array.711" = type { [4 x %"class.rx::vk::BindingPointer.712"] }
%"class.rx::vk::BindingPointer.712" = type { %"class.rx::vk::RefCounted.713"* }
%"class.rx::vk::RefCounted.713" = type opaque
%"class.angle::PackedEnumMap.714" = type { %"struct.std::__1::array.715" }
%"struct.std::__1::array.715" = type { [4 x %"class.rx::vk::DynamicDescriptorPool"] }
%"class.rx::vk::DynamicDescriptorPool" = type { i64, %"class.std::__1::vector.716", %"class.std::__1::vector.723", %struct.VkDescriptorSetLayout_T* }
%"class.std::__1::vector.716" = type { %"class.std::__1::__vector_base.717" }
%"class.std::__1::__vector_base.717" = type { %"class.rx::vk::RefCounted.713"**, %"class.rx::vk::RefCounted.713"**, %"class.std::__1::__compressed_pair.718" }
%"class.std::__1::__compressed_pair.718" = type { %"struct.std::__1::__compressed_pair_elem.719" }
%"struct.std::__1::__compressed_pair_elem.719" = type { %"class.rx::vk::RefCounted.713"** }
%"class.std::__1::vector.723" = type { %"class.std::__1::__vector_base.724" }
%"class.std::__1::__vector_base.724" = type { %struct.VkDescriptorPoolSize*, %struct.VkDescriptorPoolSize*, %"class.std::__1::__compressed_pair.725" }
%struct.VkDescriptorPoolSize = type { i32, i32 }
%"class.std::__1::__compressed_pair.725" = type { %"struct.std::__1::__compressed_pair_elem.726" }
%"struct.std::__1::__compressed_pair_elem.726" = type { %struct.VkDescriptorPoolSize* }
%struct.VkDescriptorSetLayout_T = type opaque
%"class.angle::FixedVector.730" = type { %"struct.std::__1::array.731", i64 }
%"struct.std::__1::array.731" = type { [6 x i32] }
%"class.rx::ShaderInterfaceVariableInfoMap" = type { %"class.angle::PackedEnumMap.732" }
%"class.angle::PackedEnumMap.732" = type { %"struct.std::__1::array.733" }
%"struct.std::__1::array.733" = type { [6 x %"class.absl::flat_hash_map.734"] }
%"class.absl::flat_hash_map.734" = type { %"class.absl::container_internal::raw_hash_map.735" }
%"class.absl::container_internal::raw_hash_map.735" = type { %"class.absl::container_internal::raw_hash_set.736" }
%"class.absl::container_internal::raw_hash_set.736" = type { i8*, %"union.absl::container_internal::map_slot_type.737"*, i64, i64, %"class.absl::container_internal::CompressedTuple.738" }
%"union.absl::container_internal::map_slot_type.737" = type opaque
%"class.absl::container_internal::CompressedTuple.738" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.739" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.739" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.rx::ProgramInfo" = type { [8 x i8], %"class.rx::vk::ShaderProgramHelper", %"class.angle::PackedEnumMap.770" }
%"class.rx::vk::ShaderProgramHelper" = type { [8 x i8], %"class.angle::PackedEnumMap.743", %"class.rx::GraphicsPipelineCache", %"class.rx::vk::ObjectAndSerial.768", %"struct.rx::vk::SpecializationConstants" }
%"class.angle::PackedEnumMap.743" = type { %"struct.std::__1::array.744" }
%"struct.std::__1::array.744" = type { [6 x %"class.rx::vk::BindingPointer.745"] }
%"class.rx::vk::BindingPointer.745" = type { %"class.rx::vk::RefCounted.746"* }
%"class.rx::vk::RefCounted.746" = type { i32, %"class.rx::vk::ObjectAndSerial" }
%"class.rx::vk::ObjectAndSerial" = type { [8 x i8], %"class.rx::vk::ShaderModule", %"class.rx::Serial" }
%"class.rx::vk::ShaderModule" = type { %"class.rx::vk::WrappedObject" }
%"class.rx::vk::WrappedObject" = type { %struct.VkShaderModule_T* }
%struct.VkShaderModule_T = type opaque
%"class.rx::Serial" = type { i64 }
%"class.rx::GraphicsPipelineCache" = type { %"class.rx::HasCacheStats.747", %"class.std::__1::unordered_map" }
%"class.rx::HasCacheStats.747" = type { i32 (...)**, %"class.rx::CacheStats" }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.748", %"class.std::__1::__compressed_pair.756", %"class.std::__1::__compressed_pair.761", %"class.std::__1::__compressed_pair.763", [4 x i8] }>
%"class.std::__1::unique_ptr.748" = type { %"class.std::__1::__compressed_pair.749" }
%"class.std::__1::__compressed_pair.749" = type { %"struct.std::__1::__compressed_pair_elem.750", %"struct.std::__1::__compressed_pair_elem.751" }
%"struct.std::__1::__compressed_pair_elem.750" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.751" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.752" }
%"class.std::__1::__compressed_pair.752" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"struct.std::__1::__compressed_pair_elem.151" = type { i64 }
%"class.std::__1::__compressed_pair.756" = type { %"struct.std::__1::__compressed_pair_elem.757" }
%"struct.std::__1::__compressed_pair_elem.757" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.761" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.std::__1::__compressed_pair.763" = type { %"struct.std::__1::__compressed_pair_elem.764" }
%"struct.std::__1::__compressed_pair_elem.764" = type { float }
%"class.rx::vk::ObjectAndSerial.768" = type { [8 x i8], %"class.rx::vk::Pipeline", %"class.rx::Serial" }
%"class.rx::vk::Pipeline" = type { %"class.rx::vk::WrappedObject.769" }
%"class.rx::vk::WrappedObject.769" = type { %struct.VkPipeline_T* }
%struct.VkPipeline_T = type opaque
%"struct.rx::vk::SpecializationConstants" = type { i32, i32, i32, i32 }
%"class.angle::PackedEnumMap.770" = type { %"struct.std::__1::array.771" }
%"struct.std::__1::array.771" = type { [6 x %"class.rx::vk::RefCounted.746"] }
%"struct.rx::ProgramTransformOptions" = type { i8 }
%"class.rx::ProgramPipelineVk" = type opaque
%"struct.rx::ProgramExecutablePerfCounters" = type { %"class.angle::PackedEnumMap.772", %"class.angle::PackedEnumMap.772", %"class.angle::PackedEnumMap.772" }
%"class.angle::PackedEnumMap.772" = type { %"struct.std::__1::array.773" }
%"struct.std::__1::array.773" = type { [4 x i32] }
%"class.gl::ProgramState" = type { %"class.std::__1::basic_string", %"struct.sh::WorkGroupSize", %"class.angle::PackedEnumMap", i32, %"class.std::__1::vector.46", %"class.std::__1::vector.53", %"class.std::__1::vector.60", %"class.gl::Range", %"class.angle::BitSetT.68", %"class.std::__1::vector", %"class.angle::BitSetT.69", i8, i8, i8, i8, %"class.angle::BitSetT", i32, i32, i32, i32, i32, i32, %"class.gl::ProgramAliasedBindings", %"class.std::__1::shared_ptr" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.angle::PackedEnumMap" = type { %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [6 x %"class.gl::Shader"*] }
%"class.gl::Shader" = type { %"class.gl::LabeledObject", %"class.gl::ShaderState", %"class.std::__1::unique_ptr", %"struct.gl::Limitations", %"struct.gl::ShaderProgramID", i8, i32, i8, %"class.std::__1::basic_string", %"class.gl::BindingPointer", %"class.std::__1::unique_ptr.40", %"class.std::__1::basic_string", %"class.gl::ShaderProgramManager"*, i32, i32 }
%"class.gl::LabeledObject" = type { i32 (...)** }
%"class.gl::ShaderState" = type <{ %"class.std::__1::basic_string", i8, [3 x i8], i32, %"class.std::__1::basic_string", %"class.std::__1::vector", %"class.std::__1::basic_string", %"struct.sh::WorkGroupSize", [4 x i8], %"class.std::__1::vector.6", %"class.std::__1::vector.6", %"class.std::__1::vector.6", %"class.std::__1::vector.13", %"class.std::__1::vector.13", %"class.std::__1::vector.6", %"class.std::__1::vector.6", %"class.std::__1::vector.6", i8, [3 x i8], %"class.angle::BitSetT", i32, %struct.Optional, %struct.Optional, %struct.Optional.20, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"*, %"class.std::__1::__compressed_pair.15" }
%"struct.sh::InterfaceBlock" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i32, i8, i32, i8, i8, i32, %"class.std::__1::vector.6" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.sh::InterfaceBlock"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"*, %"class.std::__1::__compressed_pair.8" }
%"struct.sh::ShaderVariable" = type { i32, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector", i8, i8, %"class.std::__1::vector.6", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, i32, i8, i32, i32, i32, i8, i8, i8, i32, i8, i32, i8, i8, i8, i8, i32 }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.sh::ShaderVariable"* }
%struct.Optional = type { i8, i8 }
%struct.Optional.20 = type { i8, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.rx::ShaderImpl"* }
%"class.rx::ShaderImpl" = type opaque
%"struct.gl::Limitations" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"struct.gl::ShaderProgramID" = type { i32 }
%"class.gl::BindingPointer" = type { %"class.angle::BindingPointer" }
%"class.angle::BindingPointer" = type { i32 (...)**, %"class.gl::Compiler"* }
%"class.gl::Compiler" = type { %"class.angle::RefCountObject", %"class.std::__1::unique_ptr.24", i32, i32, %struct.ShBuiltInResources, %"class.angle::PackedEnumMap.31" }
%"class.angle::RefCountObject" = type { i32 (...)**, i64 }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.rx::CompilerImpl"* }
%"class.rx::CompilerImpl" = type opaque
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array.30", %"struct.std::__1::array.30", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array.30" = type { [3 x i32] }
%"class.angle::PackedEnumMap.31" = type { %"struct.std::__1::array.32" }
%"struct.std::__1::array.32" = type { [6 x %"class.std::__1::vector.33"] }
%"class.std::__1::vector.33" = type { %"class.std::__1::__vector_base.34" }
%"class.std::__1::__vector_base.34" = type { %"class.gl::ShCompilerInstance"*, %"class.gl::ShCompilerInstance"*, %"class.std::__1::__compressed_pair.35" }
%"class.gl::ShCompilerInstance" = type <{ i8*, i32, i8, [3 x i8] }>
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.gl::ShCompilerInstance"* }
%"class.std::__1::unique_ptr.40" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"struct.gl::Shader::CompilingState"* }
%"struct.gl::Shader::CompilingState" = type opaque
%"class.gl::ShaderProgramManager" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap", %"class.gl::ResourceMap.207" }
%"class.gl::ResourceManagerBase" = type { i32 (...)**, %"class.gl::HandleAllocator", i64 }
%"class.gl::HandleAllocator" = type <{ i32, i32, %"class.std::__1::vector", %"class.std::__1::vector.188", %"class.std::__1::vector", i8, [7 x i8] }>
%"class.std::__1::vector.188" = type { %"class.std::__1::__vector_base.189" }
%"class.std::__1::__vector_base.189" = type { %"struct.gl::HandleAllocator::HandleRange"*, %"struct.gl::HandleAllocator::HandleRange"*, %"class.std::__1::__compressed_pair.190" }
%"struct.gl::HandleAllocator::HandleRange" = type { i32, i32 }
%"class.std::__1::__compressed_pair.190" = type { %"struct.std::__1::__compressed_pair_elem.191" }
%"struct.std::__1::__compressed_pair_elem.191" = type { %"struct.gl::HandleAllocator::HandleRange"* }
%"class.gl::ResourceMap" = type { i64, %"class.gl::Shader"**, %"class.absl::flat_hash_map.195" }
%"class.absl::flat_hash_map.195" = type { %"class.absl::container_internal::raw_hash_map.196" }
%"class.absl::container_internal::raw_hash_map.196" = type { %"class.absl::container_internal::raw_hash_set.197" }
%"class.absl::container_internal::raw_hash_set.197" = type { i8*, %"union.absl::container_internal::map_slot_type.198"*, i64, i64, %"class.absl::container_internal::CompressedTuple.199" }
%"union.absl::container_internal::map_slot_type.198" = type opaque
%"class.absl::container_internal::CompressedTuple.199" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.200" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.200" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ResourceMap.207" = type { i64, %"class.gl::Program"**, %"class.absl::flat_hash_map.223" }
%"class.gl::Program" = type { %"class.gl::LabeledObject", %"class.angle::Subject", %"class.gl::HasAttachedShaders", %"class.rx::Serial", %"class.gl::ProgramState", %"class.rx::ProgramImpl"*, i8, %"class.gl::ProgramBindings", %"class.gl::ProgramAliasedBindings", %"class.gl::ProgramAliasedBindings", i8, %"class.std::__1::unique_ptr.217", i8, i32, %"class.gl::ShaderProgramManager"*, %"struct.gl::ShaderProgramID", %"class.angle::BitSetT.118" }
%"class.angle::Subject" = type { i32 (...)**, %"class.angle::FastVector" }
%"class.angle::FastVector" = type { %"struct.std::__1::array.76", %"class.angle::ObserverBindingBase"**, i64, i64 }
%"struct.std::__1::array.76" = type { [8 x %"class.angle::ObserverBindingBase"*] }
%"class.angle::ObserverBindingBase" = type { i32 (...)**, %"class.angle::ObserverInterface"*, i64 }
%"class.angle::ObserverInterface" = type { i32 (...)** }
%"class.gl::HasAttachedShaders" = type { i32 (...)** }
%"class.gl::ProgramBindings" = type { %"class.absl::flat_hash_map.208" }
%"class.absl::flat_hash_map.208" = type { %"class.absl::container_internal::raw_hash_map.209" }
%"class.absl::container_internal::raw_hash_map.209" = type { %"class.absl::container_internal::raw_hash_set.210" }
%"class.absl::container_internal::raw_hash_set.210" = type { i8*, %"union.absl::container_internal::map_slot_type.211"*, i64, i64, %"class.absl::container_internal::CompressedTuple.212" }
%"union.absl::container_internal::map_slot_type.211" = type opaque
%"class.absl::container_internal::CompressedTuple.212" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.213" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.213" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.std::__1::unique_ptr.217" = type { %"class.std::__1::__compressed_pair.218" }
%"class.std::__1::__compressed_pair.218" = type { %"struct.std::__1::__compressed_pair_elem.219" }
%"struct.std::__1::__compressed_pair_elem.219" = type { %"struct.gl::Program::LinkingState"* }
%"struct.gl::Program::LinkingState" = type opaque
%"class.angle::BitSetT.118" = type { i64 }
%"class.absl::flat_hash_map.223" = type { %"class.absl::container_internal::raw_hash_map.224" }
%"class.absl::container_internal::raw_hash_map.224" = type { %"class.absl::container_internal::raw_hash_set.225" }
%"class.absl::container_internal::raw_hash_set.225" = type { i8*, %"union.absl::container_internal::map_slot_type.226"*, i64, i64, %"class.absl::container_internal::CompressedTuple.227" }
%"union.absl::container_internal::map_slot_type.226" = type { %"struct.std::__1::pair.1500" }
%"struct.std::__1::pair.1500" = type { i32, %"class.gl::Program"* }
%"class.absl::container_internal::CompressedTuple.227" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.228" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.228" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.std::__1::vector.46" = type { %"class.std::__1::__vector_base.47" }
%"class.std::__1::__vector_base.47" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::vector.53" = type { %"class.std::__1::__vector_base.54" }
%"class.std::__1::__vector_base.54" = type { %"struct.gl::VariableLocation"*, %"struct.gl::VariableLocation"*, %"class.std::__1::__compressed_pair.55" }
%"struct.gl::VariableLocation" = type <{ i32, i32, i8, [3 x i8] }>
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"struct.gl::VariableLocation"* }
%"class.std::__1::vector.60" = type { %"class.std::__1::__vector_base.61" }
%"class.std::__1::__vector_base.61" = type { %"struct.gl::BufferVariable"*, %"struct.gl::BufferVariable"*, %"class.std::__1::__compressed_pair.63" }
%"struct.gl::BufferVariable" = type <{ %"struct.gl::ActiveVariable.base", [7 x i8], %"struct.sh::ShaderVariable", i32, %"struct.sh::BlockMemberInfo", i32, [4 x i8] }>
%"struct.gl::ActiveVariable.base" = type <{ i32 (...)**, %"class.angle::BitSetT.62" }>
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"struct.gl::BufferVariable"* }
%"class.gl::Range" = type { i32, i32 }
%"class.angle::BitSetT.68" = type { i8 }
%"class.angle::BitSetT.69" = type { i64 }
%"class.angle::BitSetT" = type { i32 }
%"class.gl::ProgramAliasedBindings" = type { %"class.absl::flat_hash_map" }
%"class.absl::flat_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"union.absl::container_internal::map_slot_type"*, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"union.absl::container_internal::map_slot_type" = type opaque
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.std::__1::shared_ptr" = type { %"class.gl::ProgramExecutable"*, %"class.std::__1::__shared_weak_count"* }
%"class.gl::ProgramExecutable" = type <{ %"class.angle::Subject", %"class.gl::InfoLog", %"class.angle::BitSetT.62", %"class.angle::BitSetT.62", [6 x i8], %"class.angle::BitSetT.83", i32, [4 x i8], %"class.angle::BitSetT.69", %"class.angle::BitSetT.83", %"class.angle::BitSetArray", %"struct.std::__1::array.86", %"struct.std::__1::array.87", %"class.angle::BitSetArray", %"struct.std::__1::array.88", %"struct.std::__1::array.89", %"class.angle::BitSetArray", %"struct.std::__1::array.89", i8, [7 x i8], %"class.std::__1::vector.6", %"class.std::__1::vector.53", %"class.std::__1::vector.53", i8, [7 x i8], %"class.std::__1::vector.6", %"class.std::__1::vector.90", %"class.std::__1::vector.97", i32, [4 x i8], %"class.std::__1::vector.104", %"class.gl::Range", %"class.gl::Range", %"class.std::__1::vector.111", %"class.angle::BitSetT.118", %"class.std::__1::vector.119", %"class.gl::Range", %"class.std::__1::vector.111", %"class.std::__1::vector.111", %"class.gl::Range", %"class.std::__1::vector.126", %"class.std::__1::vector.133", %"class.std::__1::vector.133", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [3 x i8], %"class.angle::PackedEnumMap.140", %"class.angle::PackedEnumMap.140", %"class.angle::PackedEnumMap.142", i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, %struct.Optional.144, [6 x i8] }>
%"class.gl::InfoLog" = type { %"class.std::__1::unique_ptr.77" }
%"class.std::__1::unique_ptr.77" = type { %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"class.std::__1::basic_stringstream"* }
%"class.std::__1::basic_stringstream" = type { %"class.std::__1::basic_iostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_iostream.base" = type { %"class.std::__1::basic_istream.base", %"class.std::__1::basic_ostream.base" }
%"class.std::__1::basic_istream.base" = type { i32 (...)**, i64 }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.angle::BitSetT.83" = type { i64 }
%"struct.std::__1::array.86" = type { [96 x i32] }
%"struct.std::__1::array.87" = type { [96 x i8] }
%"struct.std::__1::array.88" = type { [96 x i8] }
%"class.angle::BitSetArray" = type { %"struct.std::__1::array.84" }
%"struct.std::__1::array.84" = type { [2 x %"class.angle::BitSetT.85"] }
%"class.angle::BitSetT.85" = type { i64 }
%"struct.std::__1::array.89" = type { [96 x %"class.angle::BitSetT.62"] }
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { %"struct.gl::TransformFeedbackVarying"*, %"struct.gl::TransformFeedbackVarying"*, %"class.std::__1::__compressed_pair.92" }
%"struct.gl::TransformFeedbackVarying" = type <{ %"struct.sh::ShaderVariable", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"struct.gl::TransformFeedbackVarying"* }
%"class.std::__1::vector.97" = type { %"class.std::__1::__vector_base.98" }
%"class.std::__1::__vector_base.98" = type { i32*, i32*, %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { i32* }
%"class.std::__1::vector.104" = type { %"class.std::__1::__vector_base.105" }
%"class.std::__1::__vector_base.105" = type { %"struct.gl::LinkedUniform"*, %"struct.gl::LinkedUniform"*, %"class.std::__1::__compressed_pair.106" }
%"struct.gl::LinkedUniform" = type { %"struct.gl::ActiveVariable.base", %"struct.sh::ShaderVariable", %"struct.gl::UniformTypeInfo"*, i32, %"struct.sh::BlockMemberInfo", %"class.std::__1::vector" }
%"struct.gl::UniformTypeInfo" = type <{ i32, i32, i32, i32, i32, i8, [3 x i8], i32, i32, i32, [4 x i8], i64, i64, i64, i8, i8, i8, [5 x i8] }>
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.gl::LinkedUniform"* }
%"class.std::__1::vector.119" = type { %"class.std::__1::__vector_base.120" }
%"class.std::__1::__vector_base.120" = type { %"struct.gl::ShaderVariableBuffer"*, %"struct.gl::ShaderVariableBuffer"*, %"class.std::__1::__compressed_pair.121" }
%"struct.gl::ShaderVariableBuffer" = type { %"struct.gl::ActiveVariable.base", i32, i32, %"class.std::__1::vector" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"struct.gl::ShaderVariableBuffer"* }
%"class.std::__1::vector.111" = type { %"class.std::__1::__vector_base.112" }
%"class.std::__1::__vector_base.112" = type { %"struct.gl::InterfaceBlock"*, %"struct.gl::InterfaceBlock"*, %"class.std::__1::__compressed_pair.113" }
%"struct.gl::InterfaceBlock" = type <{ %"struct.gl::ShaderVariableBuffer", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, [3 x i8], i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"struct.gl::InterfaceBlock"* }
%"class.std::__1::vector.126" = type { %"class.std::__1::__vector_base.127" }
%"class.std::__1::__vector_base.127" = type { %"struct.gl::SamplerBinding"*, %"struct.gl::SamplerBinding"*, %"class.std::__1::__compressed_pair.128" }
%"struct.gl::SamplerBinding" = type { i8, i32, i8, %"class.std::__1::vector" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"struct.gl::SamplerBinding"* }
%"class.std::__1::vector.133" = type { %"class.std::__1::__vector_base.134" }
%"class.std::__1::__vector_base.134" = type { %"struct.gl::ImageBinding"*, %"struct.gl::ImageBinding"*, %"class.std::__1::__compressed_pair.135" }
%"struct.gl::ImageBinding" = type { i8, %"class.std::__1::vector" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"struct.gl::ImageBinding"* }
%"class.angle::PackedEnumMap.140" = type { %"struct.std::__1::array.141" }
%"struct.std::__1::array.141" = type { [6 x %"class.std::__1::vector.6"] }
%"class.angle::PackedEnumMap.142" = type { %"struct.std::__1::array.143" }
%"struct.std::__1::array.143" = type { [6 x i32] }
%struct.Optional.144 = type { i8, i8 }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.rx::LinkEventDone" = type <{ %"class.rx::LinkEvent", i32, [4 x i8] }>
%"class.rx::LinkEvent" = type { i32 (...)** }
%"class.gl::Context" = type <{ %"class.egl::LabeledObject", %"class.angle::ObserverInterface", %"class.gl::State", i8, i8, i8, i8, [4 x i8], %"class.gl::ErrorSet", %"class.angle::BitSetT.566", [4 x i8], %"class.std::__1::unique_ptr.567", i8*, %"struct.gl::Extensions", [4 x i8], %"class.gl::BindingPointer", %"struct.egl::Config"*, %"class.angle::PackedEnumMap.573", %"class.gl::ResourceMap.575", %"class.gl::HandleAllocator", %"class.gl::ResourceMap.585", %"class.gl::HandleAllocator", %"class.gl::ResourceMap.595", %"class.gl::HandleAllocator", %"class.gl::ResourceMap.605", %"class.gl::HandleAllocator", i8*, i8*, i8*, i8*, %"class.std::__1::vector.615", i8*, %"class.std::__1::vector.615", %"class.std::__1::unique_ptr.622", i8, i8, i8, i8, i32, i8, i8, i8, [5 x i8], %"class.egl::Surface"*, %"class.egl::Surface"*, %"class.egl::Display"*, i8, i8, i8, [5 x i8], %"class.gl::MemoryProgramCache"*, %"class.angle::BitSetT.342", %"class.gl::StateCache", %"class.angle::BitSetT.85", %"class.angle::BitSetT.85", %"class.angle::BitSetT.342", %"class.angle::BitSetT.85", %"class.angle::BitSetT.342", %"class.angle::BitSetT.85", %"class.angle::BitSetT.342", %"class.angle::BitSetT.85", %"class.angle::BitSetT.342", %"class.angle::BitSetT.85", %"class.angle::BitSetT.342", %"class.angle::BitSetT.85", %"class.angle::BitSetT.342", %"class.angle::ObserverBinding", %"class.angle::ObserverBinding", %"class.angle::ObserverBinding", %"class.std::__1::vector.344", %"class.std::__1::vector.344", %"class.std::__1::vector.344", %struct.Optional.636, %struct.Optional.636, %"class.std::__1::shared_ptr.637", %"class.std::__1::unique_ptr.638", %"class.std::__1::basic_string", i64, %"class.gl::MockOverlay", i8, i8, i8, [4 x i8] }>
%"class.egl::LabeledObject" = type { i32 (...)** }
%"class.gl::State" = type <{ %"struct.gl::ContextID", i32, i32, %"struct.gl::Version", [4 x i8], %"struct.gl::Caps", %"class.gl::TextureCapsMap", %"struct.gl::Extensions", %"struct.gl::Limitations", %"class.egl::ShareGroup"*, %"class.gl::BufferManager"*, %"class.gl::ShaderProgramManager"*, %"class.gl::TextureManager"*, %"class.gl::RenderbufferManager"*, %"class.gl::SamplerManager"*, %"class.gl::SyncManager"*, %"class.gl::FramebufferManager"*, %"class.gl::ProgramPipelineManager"*, %"class.gl::MemoryObjectManager"*, %"class.gl::SemaphoreManager"*, i32, i32, %"struct.angle::Color", float, i32, %"struct.gl::RasterizerState", i8, [3 x i8], %"struct.gl::Rectangle", %"struct.gl::BlendState", [4 x i8], %"class.gl::BlendStateExt", %"struct.angle::Color", i8, i8, [2 x i8], float, i8, i8, [2 x i8], i32, %"struct.std::__1::array.403", i8, [3 x i8], float, %"struct.gl::DepthStencilState", i32, i32, float, i32, i32, i32, i8, i8, [2 x i8], %"struct.gl::Rectangle", float, float, i32, i32, %"class.gl::Framebuffer"*, %"class.gl::Framebuffer"*, %"class.gl::BindingPointer.404", %"class.gl::Program"*, %"class.gl::BindingPointer.406", %"class.gl::ProgramExecutable"*, i8, [7 x i8], %"class.std::__1::vector.408", %"class.gl::VertexArray"*, %"class.angle::BitSetT.69", i64, %"class.angle::PackedEnumMap.436", %"class.gl::ActiveTexturesCache", %"class.std::__1::vector.344", %"class.angle::BitSetArray", %"class.std::__1::vector.448", %"class.std::__1::vector.457", %"class.angle::PackedEnumMap.464", %"class.angle::PackedEnumMap.468", %"class.std::__1::vector.470", %"class.std::__1::vector.470", %"class.std::__1::vector.470", %"class.angle::BitSetArray.477", %"class.angle::BitSetT.478", %"class.angle::BitSetT.85", %"class.gl::BindingPointer.479", %"struct.gl::PixelUnpackState", %"struct.gl::PixelPackState", i8, [3 x i8], %"class.gl::Debug", i8, i8, [2 x i8], i32, i8, i8, i8, i8, i32, %"class.angle::BitSetT.506", i32, %"class.gl::GLES1State", %"class.angle::BitSetT.85", %"class.angle::BitSetT.565", [4 x i8], %"class.angle::BitSetT.342", %"class.angle::BitSetT.83", %"class.angle::BitSetArray", %"class.angle::BitSetArray", %"class.angle::BitSetArray", %"class.angle::BitSetArray", %"class.gl::MockOverlay"*, %"class.angle::BitSetT.68", %"class.angle::BitSetT.68", i8, [5 x i8] }>
%"struct.gl::ContextID" = type { i32 }
%"struct.gl::Version" = type { i32, i32 }
%"struct.gl::Caps" = type <{ float, float, i32, [4 x i8], i64, i32, i32, i32, i32, float, i32, i32, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, [4 x i8], %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"class.angle::PackedEnumMap.142", %"class.angle::PackedEnumMap.142", %"class.angle::PackedEnumMap.142", %"class.angle::PackedEnumMap.142", %"class.angle::PackedEnumMap.142", %"class.angle::PackedEnumMap.142", %"class.angle::PackedEnumMap.142", %"class.angle::PackedEnumMap.233", i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array.30", %"struct.std::__1::array.30", i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, i32, i32, [4 x i8] }>
%"struct.gl::TypePrecision" = type { %"struct.std::__1::array.232", i32 }
%"struct.std::__1::array.232" = type { [2 x i32] }
%"class.angle::PackedEnumMap.233" = type { %"struct.std::__1::array.234" }
%"struct.std::__1::array.234" = type { [6 x i64] }
%"class.gl::TextureCapsMap" = type { %"class.angle::PackedEnumMap.235" }
%"class.angle::PackedEnumMap.235" = type { %"struct.std::__1::array.236" }
%"struct.std::__1::array.236" = type { [227 x %"struct.gl::TextureCaps"] }
%"struct.gl::TextureCaps" = type { i8, i8, i8, i8, i8, %"class.std::__1::set.237" }
%"class.std::__1::set.237" = type { %"class.std::__1::__tree.238" }
%"class.std::__1::__tree.238" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.239", %"class.std::__1::__compressed_pair.243" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.239" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.243" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.egl::ShareGroup" = type opaque
%"class.gl::BufferManager" = type { %"class.gl::TypedResourceManager" }
%"class.gl::TypedResourceManager" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.246" }
%"class.gl::ResourceMap.246" = type { i64, %"class.gl::Buffer"**, %"class.absl::flat_hash_map.260" }
%"class.gl::Buffer" = type { %"class.gl::RefCountObject.base.248", %"class.gl::LabeledObject", %"class.angle::ObserverInterface", %"class.angle::Subject", %"class.gl::BufferState", %"class.rx::BufferImpl"*, %"class.angle::ObserverBinding", %"class.gl::IndexRangeCache" }
%"class.gl::RefCountObject.base.248" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::BufferID" }>
%"struct.gl::BufferID" = type { i32 }
%"class.gl::BufferState" = type <{ %"class.std::__1::basic_string", i8, [7 x i8], i64, i32, i32, i8, [7 x i8], i8*, i64, i64, i32, i32, i32, i8, [3 x i8], i32, i8, [3 x i8] }>
%"class.rx::BufferImpl" = type { %"class.angle::Subject", %"class.gl::BufferState"* }
%"class.gl::IndexRangeCache" = type { %"class.std::__1::map.249" }
%"class.std::__1::map.249" = type { %"class.std::__1::__tree.250" }
%"class.std::__1::__tree.250" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.251", %"class.std::__1::__compressed_pair.255" }
%"class.std::__1::__compressed_pair.251" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"class.std::__1::__compressed_pair.255" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.absl::flat_hash_map.260" = type { %"class.absl::container_internal::raw_hash_map.261" }
%"class.absl::container_internal::raw_hash_map.261" = type { %"class.absl::container_internal::raw_hash_set.262" }
%"class.absl::container_internal::raw_hash_set.262" = type { i8*, %"union.absl::container_internal::map_slot_type.263"*, i64, i64, %"class.absl::container_internal::CompressedTuple.264" }
%"union.absl::container_internal::map_slot_type.263" = type { %"struct.std::__1::pair.1498" }
%"struct.std::__1::pair.1498" = type { i32, %"class.gl::Buffer"* }
%"class.absl::container_internal::CompressedTuple.264" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.265" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.265" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::TextureManager" = type { %"class.gl::TypedResourceManager.269" }
%"class.gl::TypedResourceManager.269" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.270" }
%"class.gl::ResourceMap.270" = type { i64, %"class.gl::Texture"**, %"class.absl::flat_hash_map.289" }
%"class.gl::Texture" = type <{ %"class.gl::RefCountObject.base.272", [4 x i8], %"class.egl::ImageSibling", %"class.gl::LabeledObject", %"class.gl::TextureState", %"class.angle::BitSetT.285", %"class.rx::TextureImpl"*, %"class.angle::ObserverBinding", %"class.angle::ObserverBinding", %"class.std::__1::basic_string", %"class.egl::Surface"*, %"class.egl::Stream"*, %"class.angle::FastVector.287", %"struct.gl::Texture::SamplerCompletenessCache", [4 x i8] }>
%"class.gl::RefCountObject.base.272" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::TextureID" }>
%"struct.gl::TextureID" = type { i32 }
%"class.egl::ImageSibling" = type { %"class.gl::FramebufferAttachmentObject", %"class.std::__1::set", %"class.angle::BindingPointer.153" }
%"class.gl::FramebufferAttachmentObject" = type { %"class.angle::Subject", %"class.angle::ObserverInterface" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.145", %"class.std::__1::__compressed_pair.150" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.angle::BindingPointer.153" = type { i32 (...)**, %"class.egl::Image"* }
%"class.egl::Image" = type <{ %"class.angle::RefCountObject.154", %"class.egl::LabeledObject", %"struct.egl::ImageState", %"class.rx::ImageImpl"*, i8, [7 x i8] }>
%"class.angle::RefCountObject.154" = type { i32 (...)**, i64 }
%"struct.egl::ImageState" = type { i8*, i32, %"class.gl::ImageIndex", %"class.egl::ImageSibling"*, %"class.std::__1::set.155", %"struct.gl::Format", i8, %"struct.gl::Extents", i64, i32, i32 }
%"class.gl::ImageIndex" = type { i8, i32, i32, i32 }
%"class.std::__1::set.155" = type { %"class.std::__1::__tree.156" }
%"class.std::__1::__tree.156" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.157", %"class.std::__1::__compressed_pair.161" }
%"class.std::__1::__compressed_pair.157" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"struct.gl::Format" = type { %"struct.gl::InternalFormat"* }
%"struct.gl::InternalFormat" = type { i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)* }
%"struct.gl::Extents" = type { i32, i32, i32 }
%"class.rx::ImageImpl" = type opaque
%"class.gl::TextureState" = type <{ i8, [3 x i8], %"struct.gl::SwizzleState", %"class.gl::SamplerState", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, [4 x i8], %"class.std::__1::vector.276", %"struct.gl::Rectangle", i32, [4 x i8], %"class.gl::OffsetBindingPointer", i32, i8, [3 x i8], i32, i8, [3 x i8] }>
%"struct.gl::SwizzleState" = type { i32, i32, i32, i32 }
%"class.gl::SamplerState" = type { i32, i32, i32, i32, i32, float, float, float, i32, i32, i32, %"struct.angle::ColorGeneric", %"union.gl::SamplerState::Completeness" }
%"struct.angle::ColorGeneric" = type <{ %union.anon.273, i8, [3 x i8] }>
%union.anon.273 = type { %"struct.angle::Color" }
%"union.gl::SamplerState::Completeness" = type { i32 }
%"class.std::__1::vector.276" = type { %"class.std::__1::__vector_base.277" }
%"class.std::__1::__vector_base.277" = type { %"struct.gl::ImageDesc"*, %"struct.gl::ImageDesc"*, %"class.std::__1::__compressed_pair.278" }
%"struct.gl::ImageDesc" = type <{ %"struct.gl::Extents", [4 x i8], %"struct.gl::Format", i32, i8, [3 x i8], i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.278" = type { %"struct.std::__1::__compressed_pair_elem.279" }
%"struct.std::__1::__compressed_pair_elem.279" = type { %"struct.gl::ImageDesc"* }
%"class.gl::OffsetBindingPointer" = type { %"class.gl::BindingPointer.283", i64, i64 }
%"class.gl::BindingPointer.283" = type { %"class.angle::BindingPointer.284" }
%"class.angle::BindingPointer.284" = type { i32 (...)**, %"class.gl::Buffer"* }
%"class.angle::BitSetT.285" = type { i64 }
%"class.rx::TextureImpl" = type { %"class.rx::FramebufferAttachmentObjectImpl", %"class.gl::TextureState"* }
%"class.rx::FramebufferAttachmentObjectImpl" = type { %"class.angle::Subject" }
%"class.egl::Stream" = type { %"class.egl::LabeledObject", i8*, %"class.egl::Display"*, %"class.rx::StreamProducerImpl"*, %"class.gl::Context"*, i32, i64, i64, i32, i32, i32, %"struct.std::__1::array.286", i32, i32 }
%"class.rx::StreamProducerImpl" = type opaque
%"struct.std::__1::array.286" = type { [3 x %"struct.egl::Stream::PlaneTexture"] }
%"struct.egl::Stream::PlaneTexture" = type { i32, %"class.gl::Texture"* }
%"class.angle::FastVector.287" = type { %"struct.std::__1::array.288", %"class.rx::Serial"*, i64, i64 }
%"struct.std::__1::array.288" = type { [8 x %"class.rx::Serial"] }
%"struct.gl::Texture::SamplerCompletenessCache" = type <{ %"struct.gl::ContextID", %"class.gl::SamplerState", i8, [3 x i8] }>
%"class.absl::flat_hash_map.289" = type { %"class.absl::container_internal::raw_hash_map.290" }
%"class.absl::container_internal::raw_hash_map.290" = type { %"class.absl::container_internal::raw_hash_set.291" }
%"class.absl::container_internal::raw_hash_set.291" = type { i8*, %"union.absl::container_internal::map_slot_type.292"*, i64, i64, %"class.absl::container_internal::CompressedTuple.293" }
%"union.absl::container_internal::map_slot_type.292" = type { %"struct.std::__1::pair.1502" }
%"struct.std::__1::pair.1502" = type { i32, %"class.gl::Texture"* }
%"class.absl::container_internal::CompressedTuple.293" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.294" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.294" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::RenderbufferManager" = type { %"class.gl::TypedResourceManager.298" }
%"class.gl::TypedResourceManager.298" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.299" }
%"class.gl::ResourceMap.299" = type { i64, %"class.gl::Renderbuffer"**, %"class.absl::flat_hash_map.300" }
%"class.gl::Renderbuffer" = type { %"class.gl::RefCountObject.base", %"class.egl::ImageSibling", %"class.gl::LabeledObject", %"class.gl::RenderbufferState", %"class.std::__1::unique_ptr.165", %"class.std::__1::basic_string", %"class.angle::ObserverBinding" }
%"class.gl::RefCountObject.base" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::RenderbufferID" }>
%"struct.gl::RenderbufferID" = type { i32 }
%"class.gl::RenderbufferState" = type <{ i32, i32, %"struct.gl::Format", i32, i32, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.165" = type { %"class.std::__1::__compressed_pair.166" }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.167" }
%"struct.std::__1::__compressed_pair_elem.167" = type { %"class.rx::RenderbufferImpl"* }
%"class.rx::RenderbufferImpl" = type { %"class.rx::FramebufferAttachmentObjectImpl", %"class.gl::RenderbufferState"* }
%"class.absl::flat_hash_map.300" = type { %"class.absl::container_internal::raw_hash_map.301" }
%"class.absl::container_internal::raw_hash_map.301" = type { %"class.absl::container_internal::raw_hash_set.302" }
%"class.absl::container_internal::raw_hash_set.302" = type { i8*, %"union.absl::container_internal::map_slot_type.303"*, i64, i64, %"class.absl::container_internal::CompressedTuple.304" }
%"union.absl::container_internal::map_slot_type.303" = type { %"struct.std::__1::pair.1504" }
%"struct.std::__1::pair.1504" = type { i32, %"class.gl::Renderbuffer"* }
%"class.absl::container_internal::CompressedTuple.304" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.305" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.305" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::SamplerManager" = type { %"class.gl::TypedResourceManager.309" }
%"class.gl::TypedResourceManager.309" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.310" }
%"class.gl::ResourceMap.310" = type { i64, %"class.gl::Sampler"**, %"class.absl::flat_hash_map.313" }
%"class.gl::Sampler" = type { %"class.gl::RefCountObject.base.312", %"class.gl::LabeledObject", %"class.angle::Subject", %"class.gl::SamplerState", i8, %"class.rx::SamplerImpl"*, %"class.std::__1::basic_string" }
%"class.gl::RefCountObject.base.312" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::SamplerID" }>
%"struct.gl::SamplerID" = type { i32 }
%"class.rx::SamplerImpl" = type { i32 (...)**, %"class.gl::SamplerState"* }
%"class.absl::flat_hash_map.313" = type { %"class.absl::container_internal::raw_hash_map.314" }
%"class.absl::container_internal::raw_hash_map.314" = type { %"class.absl::container_internal::raw_hash_set.315" }
%"class.absl::container_internal::raw_hash_set.315" = type { i8*, %"union.absl::container_internal::map_slot_type.316"*, i64, i64, %"class.absl::container_internal::CompressedTuple.317" }
%"union.absl::container_internal::map_slot_type.316" = type { %"struct.std::__1::pair.1506" }
%"struct.std::__1::pair.1506" = type { i32, %"class.gl::Sampler"* }
%"class.absl::container_internal::CompressedTuple.317" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.318" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.318" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::SyncManager" = type { %"class.gl::TypedResourceManager.322" }
%"class.gl::TypedResourceManager.322" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.323" }
%"class.gl::ResourceMap.323" = type { i64, %"class.gl::Sync"**, %"class.absl::flat_hash_map.324" }
%"class.gl::Sync" = type opaque
%"class.absl::flat_hash_map.324" = type { %"class.absl::container_internal::raw_hash_map.325" }
%"class.absl::container_internal::raw_hash_map.325" = type { %"class.absl::container_internal::raw_hash_set.326" }
%"class.absl::container_internal::raw_hash_set.326" = type { i8*, %"union.absl::container_internal::map_slot_type.327"*, i64, i64, %"class.absl::container_internal::CompressedTuple.328" }
%"union.absl::container_internal::map_slot_type.327" = type opaque
%"class.absl::container_internal::CompressedTuple.328" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.329" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.329" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::FramebufferManager" = type { %"class.gl::TypedResourceManager.333" }
%"class.gl::TypedResourceManager.333" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.334" }
%"class.gl::ResourceMap.334" = type { i64, %"class.gl::Framebuffer"**, %"class.absl::flat_hash_map.353" }
%"class.absl::flat_hash_map.353" = type { %"class.absl::container_internal::raw_hash_map.354" }
%"class.absl::container_internal::raw_hash_map.354" = type { %"class.absl::container_internal::raw_hash_set.355" }
%"class.absl::container_internal::raw_hash_set.355" = type { i8*, %"union.absl::container_internal::map_slot_type.356"*, i64, i64, %"class.absl::container_internal::CompressedTuple.357" }
%"union.absl::container_internal::map_slot_type.356" = type { %"struct.std::__1::pair.1508" }
%"struct.std::__1::pair.1508" = type { i32, %"class.gl::Framebuffer"* }
%"class.absl::container_internal::CompressedTuple.357" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.358" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.358" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ProgramPipelineManager" = type { %"class.gl::TypedResourceManager.362" }
%"class.gl::TypedResourceManager.362" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.363" }
%"class.gl::ResourceMap.363" = type { i64, %"class.gl::ProgramPipeline"**, %"class.absl::flat_hash_map.374" }
%"class.gl::ProgramPipeline" = type { %"class.gl::RefCountObject.base.365", %"class.gl::LabeledObject", %"class.angle::ObserverInterface", %"class.gl::HasAttachedShaders", %"class.std::__1::unique_ptr.366", %"class.gl::ProgramPipelineState", %"class.std::__1::vector.344", %"class.angle::ObserverBinding" }
%"class.gl::RefCountObject.base.365" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::ProgramPipelineID" }>
%"struct.gl::ProgramPipelineID" = type { i32 }
%"class.std::__1::unique_ptr.366" = type { %"class.std::__1::__compressed_pair.367" }
%"class.std::__1::__compressed_pair.367" = type { %"struct.std::__1::__compressed_pair_elem.368" }
%"struct.std::__1::__compressed_pair_elem.368" = type { %"class.rx::ProgramPipelineImpl"* }
%"class.rx::ProgramPipelineImpl" = type opaque
%"class.gl::ProgramPipelineState" = type <{ %"class.std::__1::basic_string", %"class.gl::Program"*, %"class.angle::PackedEnumMap.372", i8, [7 x i8], %"class.gl::ProgramExecutable"*, i8, [7 x i8] }>
%"class.angle::PackedEnumMap.372" = type { %"struct.std::__1::array.373" }
%"struct.std::__1::array.373" = type { [6 x %"class.gl::Program"*] }
%"class.absl::flat_hash_map.374" = type { %"class.absl::container_internal::raw_hash_map.375" }
%"class.absl::container_internal::raw_hash_map.375" = type { %"class.absl::container_internal::raw_hash_set.376" }
%"class.absl::container_internal::raw_hash_set.376" = type { i8*, %"union.absl::container_internal::map_slot_type.377"*, i64, i64, %"class.absl::container_internal::CompressedTuple.378" }
%"union.absl::container_internal::map_slot_type.377" = type { %"struct.std::__1::pair.1510" }
%"struct.std::__1::pair.1510" = type { i32, %"class.gl::ProgramPipeline"* }
%"class.absl::container_internal::CompressedTuple.378" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.379" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.379" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::MemoryObjectManager" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.383" }
%"class.gl::ResourceMap.383" = type { i64, %"class.gl::MemoryObject"**, %"class.absl::flat_hash_map.384" }
%"class.gl::MemoryObject" = type opaque
%"class.absl::flat_hash_map.384" = type { %"class.absl::container_internal::raw_hash_map.385" }
%"class.absl::container_internal::raw_hash_map.385" = type { %"class.absl::container_internal::raw_hash_set.386" }
%"class.absl::container_internal::raw_hash_set.386" = type { i8*, %"union.absl::container_internal::map_slot_type.387"*, i64, i64, %"class.absl::container_internal::CompressedTuple.388" }
%"union.absl::container_internal::map_slot_type.387" = type opaque
%"class.absl::container_internal::CompressedTuple.388" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.389" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.389" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::SemaphoreManager" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.393" }
%"class.gl::ResourceMap.393" = type { i64, %"class.gl::Semaphore"**, %"class.absl::flat_hash_map.394" }
%"class.gl::Semaphore" = type opaque
%"class.absl::flat_hash_map.394" = type { %"class.absl::container_internal::raw_hash_map.395" }
%"class.absl::container_internal::raw_hash_map.395" = type { %"class.absl::container_internal::raw_hash_set.396" }
%"class.absl::container_internal::raw_hash_set.396" = type { i8*, %"union.absl::container_internal::map_slot_type.397"*, i64, i64, %"class.absl::container_internal::CompressedTuple.398" }
%"union.absl::container_internal::map_slot_type.397" = type opaque
%"class.absl::container_internal::CompressedTuple.398" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.399" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.399" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.gl::RasterizerState" = type { i8, i8, i32, i8, float, float, i8, i8, i8, i8 }
%"struct.gl::BlendState" = type { i8, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%"class.gl::BlendStateExt" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"class.angle::BitSetT.68", %"class.angle::BitSetT.68", i64 }
%"struct.angle::Color" = type { float, float, float, float }
%"struct.std::__1::array.403" = type { [2 x i32] }
%"struct.gl::DepthStencilState" = type { i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.gl::Rectangle" = type { i32, i32, i32, i32 }
%"class.gl::Framebuffer" = type { %"class.angle::ObserverInterface", %"class.gl::LabeledObject", %"class.angle::Subject", %"class.gl::FramebufferState", %"class.rx::FramebufferImpl"*, %struct.Optional.343, %"class.std::__1::vector.344", %"class.angle::ObserverBinding", %"class.angle::ObserverBinding", %"class.angle::BitSetT.351", %"class.angle::BitSetT.68", %struct.Optional.352 }
%"class.gl::FramebufferState" = type { %"struct.gl::FramebufferID", %"class.rx::Serial", %"class.std::__1::basic_string", %"class.std::__1::vector.335", %"class.gl::FramebufferAttachment", %"class.gl::FramebufferAttachment", %"class.angle::BitSetT.68", %"class.std::__1::vector", i32, %"class.angle::BitSetT.68", %"class.angle::BitSetT.69", i32, i32, i32, i8, i32, %"class.gl::FramebufferAttachment", %"class.gl::FramebufferAttachment", %"class.gl::FramebufferAttachment", i8, %"class.angle::BitSetT.342", i8, %"class.gl::FramebufferAttachment", i32, %"struct.gl::Offset" }
%"struct.gl::FramebufferID" = type { i32 }
%"class.std::__1::vector.335" = type { %"class.std::__1::__vector_base.336" }
%"class.std::__1::__vector_base.336" = type { %"class.gl::FramebufferAttachment"*, %"class.gl::FramebufferAttachment"*, %"class.std::__1::__compressed_pair.337" }
%"class.std::__1::__compressed_pair.337" = type { %"struct.std::__1::__compressed_pair_elem.338" }
%"struct.std::__1::__compressed_pair_elem.338" = type { %"class.gl::FramebufferAttachment"* }
%"class.gl::FramebufferAttachment" = type { i32, %"class.gl::FramebufferAttachment::Target", %"class.gl::FramebufferAttachmentObject"*, i32, i8, i32, i32 }
%"class.gl::FramebufferAttachment::Target" = type { i32, %"class.gl::ImageIndex" }
%"struct.gl::Offset" = type { i32, i32, i32 }
%"class.rx::FramebufferImpl" = type opaque
%struct.Optional.343 = type { i8, %"struct.gl::FramebufferStatus" }
%"struct.gl::FramebufferStatus" = type { i32, i8* }
%"class.angle::BitSetT.351" = type { i64 }
%struct.Optional.352 = type { i8, %"class.angle::BitSetT.351" }
%"class.gl::BindingPointer.404" = type { %"class.angle::BindingPointer.405" }
%"class.angle::BindingPointer.405" = type { i32 (...)**, %"class.gl::Renderbuffer"* }
%"class.gl::BindingPointer.406" = type { %"class.angle::BindingPointer.407" }
%"class.angle::BindingPointer.407" = type { i32 (...)**, %"class.gl::ProgramPipeline"* }
%"class.std::__1::vector.408" = type { %"class.std::__1::__vector_base.409" }
%"class.std::__1::__vector_base.409" = type { %"struct.gl::VertexAttribCurrentValueData"*, %"struct.gl::VertexAttribCurrentValueData"*, %"class.std::__1::__compressed_pair.411" }
%"struct.gl::VertexAttribCurrentValueData" = type { %union.anon.410, i32 }
%union.anon.410 = type { [4 x float] }
%"class.std::__1::__compressed_pair.411" = type { %"struct.std::__1::__compressed_pair_elem.412" }
%"struct.std::__1::__compressed_pair_elem.412" = type { %"struct.gl::VertexAttribCurrentValueData"* }
%"class.gl::VertexArray" = type <{ %"class.angle::ObserverInterface", %"class.gl::LabeledObject", %"class.angle::Subject", %"struct.gl::VertexArrayID", [4 x i8], %"class.gl::VertexArrayState", %"class.angle::BitSetT.430", %"struct.std::__1::array.431", %"struct.std::__1::array.433", %struct.Optional.435, %"class.rx::VertexArrayImpl"*, %"class.std::__1::vector.344", %"class.angle::BitSetT.83", %"class.gl::VertexArray::IndexRangeCache", i8, [7 x i8] }>
%"struct.gl::VertexArrayID" = type { i32 }
%"class.gl::VertexArrayState" = type { %"class.std::__1::basic_string", %"class.std::__1::vector.416", %"class.gl::SubjectBindingPointer", %"class.std::__1::vector.423", %"class.angle::BitSetT.83", %"class.angle::BitSetT.69", %"class.angle::BitSetT.83", %"class.angle::BitSetT.83", %"class.angle::BitSetT.83", %"class.angle::BitSetT.83", %"class.angle::BitSetT.83" }
%"class.std::__1::vector.416" = type { %"class.std::__1::__vector_base.417" }
%"class.std::__1::__vector_base.417" = type { %"struct.gl::VertexAttribute"*, %"struct.gl::VertexAttribute"*, %"class.std::__1::__compressed_pair.418" }
%"struct.gl::VertexAttribute" = type { i8, %"struct.angle::Format"*, i8*, i32, i32, i32, i64 }
%"struct.angle::Format" = type { i32, i32, i32, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, void (i8*, i8*)*, void (i8*, i8*)*, %"class.rx::FastCopyFunctionMap"*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i32 }
%"class.rx::FastCopyFunctionMap" = type { i64, %"struct.rx::FastCopyFunctionMap::Entry"* }
%"struct.rx::FastCopyFunctionMap::Entry" = type { i32, void (i8*, i8*)* }
%"class.std::__1::__compressed_pair.418" = type { %"struct.std::__1::__compressed_pair_elem.419" }
%"struct.std::__1::__compressed_pair_elem.419" = type { %"struct.gl::VertexAttribute"* }
%"class.gl::SubjectBindingPointer" = type { %"class.gl::BindingPointer.283", %"class.angle::ObserverBindingBase" }
%"class.std::__1::vector.423" = type { %"class.std::__1::__vector_base.424" }
%"class.std::__1::__vector_base.424" = type { %"class.gl::VertexBinding"*, %"class.gl::VertexBinding"*, %"class.std::__1::__compressed_pair.425" }
%"class.gl::VertexBinding" = type { i32, i32, i64, %"class.gl::BindingPointer.283", %"class.angle::BitSetT.83" }
%"class.std::__1::__compressed_pair.425" = type { %"struct.std::__1::__compressed_pair_elem.426" }
%"struct.std::__1::__compressed_pair_elem.426" = type { %"class.gl::VertexBinding"* }
%"class.angle::BitSetT.430" = type { i64 }
%"struct.std::__1::array.431" = type { [16 x %"class.angle::BitSetT.432"] }
%"class.angle::BitSetT.432" = type { i64 }
%"struct.std::__1::array.433" = type { [16 x %"class.angle::BitSetT.434"] }
%"class.angle::BitSetT.434" = type { i64 }
%struct.Optional.435 = type { i8, %"class.angle::BitSetT.430" }
%"class.rx::VertexArrayImpl" = type opaque
%"class.gl::VertexArray::IndexRangeCache" = type { i64, i32, i64, %"struct.gl::IndexRange" }
%"struct.gl::IndexRange" = type { i64, i64, i64 }
%"class.angle::PackedEnumMap.436" = type { %"struct.std::__1::array.437" }
%"struct.std::__1::array.437" = type { [11 x %"class.std::__1::vector.438"] }
%"class.std::__1::vector.438" = type { %"class.std::__1::__vector_base.439" }
%"class.std::__1::__vector_base.439" = type { %"class.gl::BindingPointer.440"*, %"class.gl::BindingPointer.440"*, %"class.std::__1::__compressed_pair.442" }
%"class.gl::BindingPointer.440" = type { %"class.angle::BindingPointer.441" }
%"class.angle::BindingPointer.441" = type { i32 (...)**, %"class.gl::Texture"* }
%"class.std::__1::__compressed_pair.442" = type { %"struct.std::__1::__compressed_pair_elem.443" }
%"struct.std::__1::__compressed_pair_elem.443" = type { %"class.gl::BindingPointer.440"* }
%"class.gl::ActiveTexturesCache" = type { %"struct.std::__1::array.447" }
%"struct.std::__1::array.447" = type { [96 x %"class.gl::Texture"*] }
%"class.std::__1::vector.448" = type { %"class.std::__1::__vector_base.449" }
%"class.std::__1::__vector_base.449" = type { %"class.gl::BindingPointer.450"*, %"class.gl::BindingPointer.450"*, %"class.std::__1::__compressed_pair.452" }
%"class.gl::BindingPointer.450" = type { %"class.angle::BindingPointer.451" }
%"class.angle::BindingPointer.451" = type { i32 (...)**, %"class.gl::Sampler"* }
%"class.std::__1::__compressed_pair.452" = type { %"struct.std::__1::__compressed_pair_elem.453" }
%"struct.std::__1::__compressed_pair_elem.453" = type { %"class.gl::BindingPointer.450"* }
%"class.std::__1::vector.457" = type { %"class.std::__1::__vector_base.458" }
%"class.std::__1::__vector_base.458" = type { %"struct.gl::ImageUnit"*, %"struct.gl::ImageUnit"*, %"class.std::__1::__compressed_pair.459" }
%"struct.gl::ImageUnit" = type <{ %"class.gl::BindingPointer.440", i32, i8, [3 x i8], i32, i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.459" = type { %"struct.std::__1::__compressed_pair_elem.460" }
%"struct.std::__1::__compressed_pair_elem.460" = type { %"struct.gl::ImageUnit"* }
%"class.angle::PackedEnumMap.464" = type { %"struct.std::__1::array.465" }
%"struct.std::__1::array.465" = type { [7 x %"class.gl::BindingPointer.466"] }
%"class.gl::BindingPointer.466" = type { %"class.angle::BindingPointer.467" }
%"class.angle::BindingPointer.467" = type { i32 (...)**, %"class.gl::Query"* }
%"class.gl::Query" = type opaque
%"class.angle::PackedEnumMap.468" = type { %"struct.std::__1::array.469" }
%"struct.std::__1::array.469" = type { [13 x %"class.gl::BindingPointer.283"] }
%"class.std::__1::vector.470" = type { %"class.std::__1::__vector_base.471" }
%"class.std::__1::__vector_base.471" = type { %"class.gl::OffsetBindingPointer"*, %"class.gl::OffsetBindingPointer"*, %"class.std::__1::__compressed_pair.472" }
%"class.std::__1::__compressed_pair.472" = type { %"struct.std::__1::__compressed_pair_elem.473" }
%"struct.std::__1::__compressed_pair_elem.473" = type { %"class.gl::OffsetBindingPointer"* }
%"class.angle::BitSetArray.477" = type { %"struct.std::__1::array.84" }
%"class.angle::BitSetT.478" = type { i64 }
%"class.gl::BindingPointer.479" = type { %"class.angle::BindingPointer.480" }
%"class.angle::BindingPointer.480" = type { i32 (...)**, %"class.gl::TransformFeedback"* }
%"class.gl::TransformFeedback" = type { %"class.gl::RefCountObject.base.482", %"class.gl::LabeledObject", %"class.gl::TransformFeedbackState", %"class.rx::TransformFeedbackImpl"* }
%"class.gl::RefCountObject.base.482" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::TransformFeedbackID" }>
%"struct.gl::TransformFeedbackID" = type { i32 }
%"class.gl::TransformFeedbackState" = type { %"class.std::__1::basic_string", i8, i8, i8, i64, i64, %"class.gl::Program"*, %"class.std::__1::vector.470" }
%"class.rx::TransformFeedbackImpl" = type { i32 (...)**, %"class.gl::TransformFeedbackState"* }
%"struct.gl::PixelUnpackState" = type { %"struct.gl::PixelStoreStateBase" }
%"struct.gl::PixelStoreStateBase" = type { i32, i32, i32, i32, i32, i32 }
%"struct.gl::PixelPackState" = type <{ %"struct.gl::PixelStoreStateBase", i8, [3 x i8] }>
%"class.gl::Debug" = type { i8, void (i32, i32, i32, i32, i32, i8*, i8*)*, i8*, %"class.std::__1::deque", i32, i8, %"class.std::__1::vector.492" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.488" }
%"struct.std::__1::__split_buffer" = type { %"struct.gl::Debug::Message"**, %"struct.gl::Debug::Message"**, %"struct.gl::Debug::Message"**, %"class.std::__1::__compressed_pair.483" }
%"struct.gl::Debug::Message" = type { i32, i32, i32, i32, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.483" = type { %"struct.std::__1::__compressed_pair_elem.484" }
%"struct.std::__1::__compressed_pair_elem.484" = type { %"struct.gl::Debug::Message"** }
%"class.std::__1::__compressed_pair.488" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.std::__1::vector.492" = type { %"class.std::__1::__vector_base.493" }
%"class.std::__1::__vector_base.493" = type { %"struct.gl::Debug::Group"*, %"struct.gl::Debug::Group"*, %"class.std::__1::__compressed_pair.501" }
%"struct.gl::Debug::Group" = type { i32, i32, %"class.std::__1::basic_string", %"class.std::__1::vector.494" }
%"class.std::__1::vector.494" = type { %"class.std::__1::__vector_base.495" }
%"class.std::__1::__vector_base.495" = type { %"struct.gl::Debug::Control"*, %"struct.gl::Debug::Control"*, %"class.std::__1::__compressed_pair.496" }
%"struct.gl::Debug::Control" = type <{ i32, i32, i32, [4 x i8], %"class.std::__1::vector", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.496" = type { %"struct.std::__1::__compressed_pair_elem.497" }
%"struct.std::__1::__compressed_pair_elem.497" = type { %"struct.gl::Debug::Control"* }
%"class.std::__1::__compressed_pair.501" = type { %"struct.std::__1::__compressed_pair_elem.502" }
%"struct.std::__1::__compressed_pair_elem.502" = type { %"struct.gl::Debug::Group"* }
%"class.angle::BitSetT.506" = type { i32 }
%"class.gl::GLES1State" = type <{ %"class.gl::State"*, %"class.angle::BitSetT.83", %"class.std::__1::vector.507", i8, i8, i8, i8, [4 x i8], %"class.std::__1::vector.515", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"struct.angle::Color", %"class.angle::Vector", %"class.std::__1::vector.520", i32, i8, [3 x i8], %"class.angle::FixedVector", %"class.angle::FixedVector", %"class.std::__1::vector.535", %"class.std::__1::vector.542", %"struct.gl::MaterialParameters", %"struct.gl::LightModelParameters", %"class.std::__1::vector.549", %"struct.gl::FogParameters", i8, [3 x i8], %"struct.gl::PointParameters", i8, [3 x i8], float, i8, [7 x i8], %"class.std::__1::vector.558", i8, i8, i8, i8, [4 x i8] }>
%"class.std::__1::vector.507" = type { %"class.std::__1::__vector_base.508" }
%"class.std::__1::__vector_base.508" = type { %"class.angle::BitSetT.509"*, %"class.angle::BitSetT.509"*, %"class.std::__1::__compressed_pair.510" }
%"class.angle::BitSetT.509" = type opaque
%"class.std::__1::__compressed_pair.510" = type { %"struct.std::__1::__compressed_pair_elem.511" }
%"struct.std::__1::__compressed_pair_elem.511" = type { %"class.angle::BitSetT.509"* }
%"class.std::__1::vector.515" = type { i64*, i64, %"class.std::__1::__compressed_pair.516" }
%"class.std::__1::__compressed_pair.516" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.angle::Vector" = type { %"class.angle::VectorBase" }
%"class.angle::VectorBase" = type { [3 x float] }
%"class.std::__1::vector.520" = type { %"class.std::__1::__vector_base.521" }
%"class.std::__1::__vector_base.521" = type { %"struct.gl::TextureCoordF"*, %"struct.gl::TextureCoordF"*, %"class.std::__1::__compressed_pair.522" }
%"struct.gl::TextureCoordF" = type { float, float, float, float }
%"class.std::__1::__compressed_pair.522" = type { %"struct.std::__1::__compressed_pair_elem.523" }
%"struct.std::__1::__compressed_pair_elem.523" = type { %"struct.gl::TextureCoordF"* }
%"class.angle::FixedVector" = type { %"struct.std::__1::array.527", i64 }
%"struct.std::__1::array.527" = type { [16 x %"class.angle::Mat4"] }
%"class.angle::Mat4" = type { %"class.angle::Matrix" }
%"class.angle::Matrix" = type { %"class.std::__1::vector.528", i32, i32 }
%"class.std::__1::vector.528" = type { %"class.std::__1::__vector_base.529" }
%"class.std::__1::__vector_base.529" = type { float*, float*, %"class.std::__1::__compressed_pair.530" }
%"class.std::__1::__compressed_pair.530" = type { %"struct.std::__1::__compressed_pair_elem.531" }
%"struct.std::__1::__compressed_pair_elem.531" = type { float* }
%"class.std::__1::vector.535" = type { %"class.std::__1::__vector_base.536" }
%"class.std::__1::__vector_base.536" = type { %"class.angle::FixedVector"*, %"class.angle::FixedVector"*, %"class.std::__1::__compressed_pair.537" }
%"class.std::__1::__compressed_pair.537" = type { %"struct.std::__1::__compressed_pair_elem.538" }
%"struct.std::__1::__compressed_pair_elem.538" = type { %"class.angle::FixedVector"* }
%"class.std::__1::vector.542" = type { %"class.std::__1::__vector_base.543" }
%"class.std::__1::__vector_base.543" = type { %"struct.gl::TextureEnvironmentParameters"*, %"struct.gl::TextureEnvironmentParameters"*, %"class.std::__1::__compressed_pair.544" }
%"struct.gl::TextureEnvironmentParameters" = type <{ i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"struct.angle::Color", float, float, i8, [3 x i8] }>
%"class.std::__1::__compressed_pair.544" = type { %"struct.std::__1::__compressed_pair_elem.545" }
%"struct.std::__1::__compressed_pair_elem.545" = type { %"struct.gl::TextureEnvironmentParameters"* }
%"struct.gl::MaterialParameters" = type { %"struct.angle::Color", %"struct.angle::Color", %"struct.angle::Color", %"struct.angle::Color", float }
%"struct.gl::LightModelParameters" = type <{ %"struct.angle::Color", i8, [3 x i8] }>
%"class.std::__1::vector.549" = type { %"class.std::__1::__vector_base.550" }
%"class.std::__1::__vector_base.550" = type { %"struct.gl::LightParameters"*, %"struct.gl::LightParameters"*, %"class.std::__1::__compressed_pair.553" }
%"struct.gl::LightParameters" = type { i8, %"struct.angle::Color", %"struct.angle::Color", %"struct.angle::Color", %"class.angle::Vector.551", %"class.angle::Vector", float, float, float, float, float }
%"class.angle::Vector.551" = type { %"class.angle::VectorBase.552" }
%"class.angle::VectorBase.552" = type { [4 x float] }
%"class.std::__1::__compressed_pair.553" = type { %"struct.std::__1::__compressed_pair_elem.554" }
%"struct.std::__1::__compressed_pair_elem.554" = type { %"struct.gl::LightParameters"* }
%"struct.gl::FogParameters" = type { i8, float, float, float, %"struct.angle::Color" }
%"struct.gl::PointParameters" = type { float, float, float, %"class.angle::Vector", float }
%"class.std::__1::vector.558" = type { %"class.std::__1::__vector_base.559" }
%"class.std::__1::__vector_base.559" = type { %"struct.gl::ClipPlaneParameters"*, %"struct.gl::ClipPlaneParameters"*, %"class.std::__1::__compressed_pair.560" }
%"struct.gl::ClipPlaneParameters" = type { i8, %"class.angle::Vector.551" }
%"class.std::__1::__compressed_pair.560" = type { %"struct.std::__1::__compressed_pair_elem.561" }
%"struct.std::__1::__compressed_pair_elem.561" = type { %"struct.gl::ClipPlaneParameters"* }
%"class.angle::BitSetT.565" = type { i32 }
%"class.gl::ErrorSet" = type { %"class.gl::Context"*, %"class.std::__1::set.237" }
%"class.angle::BitSetT.566" = type { i32 }
%"class.std::__1::unique_ptr.567" = type { %"class.std::__1::__compressed_pair.568" }
%"class.std::__1::__compressed_pair.568" = type { %"struct.std::__1::__compressed_pair_elem.569" }
%"struct.std::__1::__compressed_pair_elem.569" = type { %"class.rx::ContextImpl"* }
%"class.rx::ContextImpl" = type { %"class.rx::GLImplFactory", %"class.gl::State"*, %"class.gl::MemoryProgramCache"*, %"class.gl::ErrorSet"* }
%"class.rx::GLImplFactory" = type { i32 (...)**, %"class.rx::SerialFactoryBase" }
%"class.rx::SerialFactoryBase" = type { i64 }
%"struct.gl::Extensions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, float, i8, i8, i8, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"struct.egl::Config" = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.angle::PackedEnumMap.573" = type { %"struct.std::__1::array.574" }
%"struct.std::__1::array.574" = type { [11 x %"class.gl::BindingPointer.440"] }
%"class.gl::ResourceMap.575" = type { i64, %"class.gl::FenceNV"**, %"class.absl::flat_hash_map.576" }
%"class.gl::FenceNV" = type opaque
%"class.absl::flat_hash_map.576" = type { %"class.absl::container_internal::raw_hash_map.577" }
%"class.absl::container_internal::raw_hash_map.577" = type { %"class.absl::container_internal::raw_hash_set.578" }
%"class.absl::container_internal::raw_hash_set.578" = type { i8*, %"union.absl::container_internal::map_slot_type.579"*, i64, i64, %"class.absl::container_internal::CompressedTuple.580" }
%"union.absl::container_internal::map_slot_type.579" = type opaque
%"class.absl::container_internal::CompressedTuple.580" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.581" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.581" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ResourceMap.585" = type { i64, %"class.gl::Query"**, %"class.absl::flat_hash_map.586" }
%"class.absl::flat_hash_map.586" = type { %"class.absl::container_internal::raw_hash_map.587" }
%"class.absl::container_internal::raw_hash_map.587" = type { %"class.absl::container_internal::raw_hash_set.588" }
%"class.absl::container_internal::raw_hash_set.588" = type { i8*, %"union.absl::container_internal::map_slot_type.589"*, i64, i64, %"class.absl::container_internal::CompressedTuple.590" }
%"union.absl::container_internal::map_slot_type.589" = type opaque
%"class.absl::container_internal::CompressedTuple.590" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.591" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.591" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ResourceMap.595" = type { i64, %"class.gl::VertexArray"**, %"class.absl::flat_hash_map.596" }
%"class.absl::flat_hash_map.596" = type { %"class.absl::container_internal::raw_hash_map.597" }
%"class.absl::container_internal::raw_hash_map.597" = type { %"class.absl::container_internal::raw_hash_set.598" }
%"class.absl::container_internal::raw_hash_set.598" = type { i8*, %"union.absl::container_internal::map_slot_type.599"*, i64, i64, %"class.absl::container_internal::CompressedTuple.600" }
%"union.absl::container_internal::map_slot_type.599" = type opaque
%"class.absl::container_internal::CompressedTuple.600" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.601" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.601" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ResourceMap.605" = type { i64, %"class.gl::TransformFeedback"**, %"class.absl::flat_hash_map.606" }
%"class.absl::flat_hash_map.606" = type { %"class.absl::container_internal::raw_hash_map.607" }
%"class.absl::container_internal::raw_hash_map.607" = type { %"class.absl::container_internal::raw_hash_set.608" }
%"class.absl::container_internal::raw_hash_set.608" = type { i8*, %"union.absl::container_internal::map_slot_type.609"*, i64, i64, %"class.absl::container_internal::CompressedTuple.610" }
%"union.absl::container_internal::map_slot_type.609" = type opaque
%"class.absl::container_internal::CompressedTuple.610" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.611" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.611" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.std::__1::vector.615" = type { %"class.std::__1::__vector_base.616" }
%"class.std::__1::__vector_base.616" = type { i8**, i8**, %"class.std::__1::__compressed_pair.617" }
%"class.std::__1::__compressed_pair.617" = type { %"struct.std::__1::__compressed_pair_elem.618" }
%"struct.std::__1::__compressed_pair_elem.618" = type { i8** }
%"class.std::__1::unique_ptr.622" = type { %"class.std::__1::__compressed_pair.623" }
%"class.std::__1::__compressed_pair.623" = type { %"struct.std::__1::__compressed_pair_elem.624" }
%"struct.std::__1::__compressed_pair_elem.624" = type { %"class.gl::GLES1Renderer"* }
%"class.gl::GLES1Renderer" = type opaque
%"class.egl::Surface" = type opaque
%"class.egl::Display" = type opaque
%"class.gl::MemoryProgramCache" = type opaque
%"class.gl::StateCache" = type <{ %"class.angle::BitSetT.83", %"class.angle::BitSetT.83", %"class.angle::BitSetT.83", i8, [7 x i8], i64, i64, i64, i64, i8, [7 x i8], %"class.angle::BitSetT.85", %"class.angle::BitSetArray", %"class.angle::PackedEnumMap.628", %"class.angle::PackedEnumMap.630", %"class.angle::PackedEnumMap.632", %"class.angle::PackedEnumMap.634", %"class.angle::PackedEnumMap.634", i8, [7 x i8] }>
%"class.angle::PackedEnumMap.628" = type { %"struct.std::__1::array.629" }
%"struct.std::__1::array.629" = type { [16 x i8] }
%"class.angle::PackedEnumMap.630" = type { %"struct.std::__1::array.631" }
%"struct.std::__1::array.631" = type { [12 x i8] }
%"class.angle::PackedEnumMap.632" = type { %"struct.std::__1::array.633" }
%"struct.std::__1::array.633" = type { [4 x i8] }
%"class.angle::PackedEnumMap.634" = type { %"struct.std::__1::array.635" }
%"struct.std::__1::array.635" = type { [19 x i32] }
%"class.angle::BitSetT.342" = type { i64 }
%"class.angle::ObserverBinding" = type { %"class.angle::ObserverBindingBase", %"class.angle::Subject"* }
%"class.std::__1::vector.344" = type { %"class.std::__1::__vector_base.345" }
%"class.std::__1::__vector_base.345" = type { %"class.angle::ObserverBinding"*, %"class.angle::ObserverBinding"*, %"class.std::__1::__compressed_pair.346" }
%"class.std::__1::__compressed_pair.346" = type { %"struct.std::__1::__compressed_pair_elem.347" }
%"struct.std::__1::__compressed_pair_elem.347" = type { %"class.angle::ObserverBinding"* }
%struct.Optional.636 = type { i8, %"class.angle::ScratchBuffer" }
%"class.angle::ScratchBuffer" = type { i32, i32, %"class.angle::MemoryBuffer" }
%"class.std::__1::shared_ptr.637" = type { %"class.angle::WorkerThreadPool"*, %"class.std::__1::__shared_weak_count"* }
%"class.angle::WorkerThreadPool" = type { i32 (...)** }
%"class.std::__1::unique_ptr.638" = type { %"class.std::__1::__compressed_pair.639" }
%"class.std::__1::__compressed_pair.639" = type { %"struct.std::__1::__compressed_pair_elem.640" }
%"struct.std::__1::__compressed_pair_elem.640" = type { %"class.angle::FrameCapture"* }
%"class.angle::FrameCapture" = type opaque
%"class.gl::MockOverlay" = type { %"class.gl::overlay::Mock" }
%"class.gl::overlay::Mock" = type { i8 }
%"class.rx::ContextVk" = type { %"class.rx::ContextImpl", %"class.rx::vk::Context", %"class.rx::MultisampleTextureInitializer", %"struct.std::__1::array.774", %"struct.std::__1::array.775", %"class.rx::vk::priv::SecondaryCommandBuffer"*, %"class.rx::vk::PipelineHelper"*, %"class.rx::vk::ObjectAndSerial.768"*, i8, %"class.rx::WindowSurfaceVk"*, i32, i32, %"class.std::__1::unique_ptr.799", %"class.angle::BitSetT.792", %"class.angle::PackedEnumMap.805", %"class.angle::PackedEnumMap.807", %"class.angle::PackedEnumMap.824", %"class.angle::BitSetT.83", %"class.angle::BitSetT.83", %"class.angle::BitSetT.83", %"class.angle::BitSetT.83", %"class.angle::BitSetT.83", %"class.angle::BitSetT.83", %"class.rx::VertexArrayVk"*, %"class.rx::FramebufferVk"*, %"class.rx::ProgramVk"*, %"class.rx::ProgramPipelineVk"*, %"class.rx::ProgramExecutableVk"*, i8*, i64, i64, %"class.angle::PackedEnumMap.834", i32, i32, %union.VkClearValue, %union.VkClearValue, i64, %"class.rx::IncompleteTextureSet", i8, i8, i8, i8, i8, %"class.angle::PackedEnumMap.838", %"struct.std::__1::array.871", %"class.rx::vk::TextureDescriptorDesc", %"class.rx::vk::ShaderBuffersDescriptorDesc", %"struct.std::__1::array.937", %"class.angle::BitSetT.83", %"struct.std::__1::array.938", %"class.rx::vk::CommandPool", %"class.std::__1::vector.940", %"class.rx::RenderPassCache", %"class.rx::vk::CommandBufferHelper"*, %"class.rx::vk::CommandBufferHelper"*, %"class.angle::FastUnorderedSet", %"class.rx::vk::ShaderLibrary", %"class.rx::UtilsVk", i8, [7 x i8], %"class.rx::vk::DynamicQueryPool", %"class.std::__1::vector.1042", %"class.std::__1::vector.1050", i8, i8, i8, %"class.std::__1::vector.1057", %"class.std::__1::vector", %"struct.rx::ContextVk::GpuClockSyncInfo", i64, %"struct.rx::vk::PerfCounters", %"struct.rx::ContextVkPerfCounters", %"struct.rx::ContextVkPerfCounters", %"class.angle::BitSetT.85", %"class.rx::vk::ResourceUseList", i8, %"class.std::__1::vector.1072", %"class.std::__1::vector.1079", %"class.std::__1::vector.1086", %"class.rx::ShareGroupVk"*, %"class.rx::vk::BufferHelper", %"class.rx::vk::DynamicBuffer", %"class.rx::vk::DynamicBuffer", %"class.std::__1::vector.46", %"class.std::__1::vector.46" }
%"class.rx::vk::Context" = type { i32 (...)**, %"class.rx::RendererVk"* }
%"class.rx::RendererVk" = type { %"class.egl::Display"*, i8, [7 x i8], %"struct.gl::Caps", %"class.gl::TextureCapsMap", %"struct.gl::Extensions", %"struct.gl::Limitations", %"struct.angle::FeaturesVk", %struct.VkInstance_T*, i8, i8, i8, i32, %struct.VkDebugUtilsMessengerEXT_T*, %struct.VkDebugReportCallbackEXT_T*, %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceFeatures, %struct.VkPhysicalDeviceLineRasterizationFeaturesEXT, %struct.VkPhysicalDeviceProvokingVertexFeaturesEXT, %struct.VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT, %struct.VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT, %struct.VkPhysicalDeviceTransformFeedbackFeaturesEXT, %struct.VkPhysicalDeviceIndexTypeUint8FeaturesEXT, %struct.VkPhysicalDeviceSubgroupProperties, %struct.VkPhysicalDeviceDeviceMemoryReportFeaturesEXT, %struct.VkDeviceDeviceMemoryReportCreateInfoEXT, %struct.VkPhysicalDeviceExternalMemoryHostPropertiesEXT, %struct.VkPhysicalDeviceShaderFloat16Int8Features, %struct.VkPhysicalDeviceDepthStencilResolveProperties, %struct.VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT, %struct.VkPhysicalDeviceDriverProperties, %struct.VkPhysicalDeviceCustomBorderColorFeaturesEXT, %struct.VkExternalFenceProperties, %struct.VkExternalSemaphoreProperties, %struct.VkPhysicalDeviceSamplerYcbcrConversionFeatures, %"class.std::__1::vector.1177", %"class.angle::PackedEnumMap.1184", i32, i32, i64, i64, i32, %struct.VkDevice_T*, %"class.rx::SerialFactoryBase.1186", i8, %"class.std::__1::mutex", %"class.std::__1::vector.1188", %"class.rx::vk::MemoryProperties", %"class.rx::vk::FormatTable", %"class.std::__1::mutex", %"class.rx::vk::PipelineCache", i32, i8, i8, %"class.angle::PackedEnumMap.1197", %"class.std::__1::basic_string", i32, %"class.rx::DebugAnnotatorVk", i32, %"class.rx::vk::CommandPool", %"class.std::__1::deque.1199", %"class.std::__1::mutex", %"class.rx::vk::CommandQueue", %"class.std::__1::mutex", %"class.std::__1::vector.1246", %"class.rx::vk::CommandProcessor", %"class.rx::vk::Allocator", %"class.rx::SamplerCache", %"class.rx::SamplerYcbcrConversionCache", %"class.rx::vk::ActiveHandleCounter", %"class.rx::vk::ResourceSerialFactory", %"class.rx::vk::MemoryReport", %"class.angle::PackedEnumMap.1395", i32, %"class.std::__1::shared_ptr.1397" }
%"struct.angle::FeaturesVk" = type { %"struct.angle::FeatureSetBase", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.std::__1::array.1176", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature" }
%"struct.angle::FeatureSetBase" = type { %"class.std::__1::map.1165" }
%"class.std::__1::map.1165" = type { %"class.std::__1::__tree.1166" }
%"class.std::__1::__tree.1166" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1167", %"class.std::__1::__compressed_pair.1171" }
%"class.std::__1::__compressed_pair.1167" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"class.std::__1::__compressed_pair.1171" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"struct.std::__1::array.1176" = type { [4 x %"struct.angle::Feature"] }
%"struct.angle::Feature" = type { i8*, i32, i8*, i8*, i8, i8* }
%struct.VkInstance_T = type opaque
%struct.VkDebugUtilsMessengerEXT_T = type opaque
%struct.VkDebugReportCallbackEXT_T = type opaque
%struct.VkPhysicalDevice_T = type opaque
%struct.VkPhysicalDeviceProperties = type { i32, i32, i32, i32, i32, [256 x i8], [16 x i8], %struct.VkPhysicalDeviceLimits, %struct.VkPhysicalDeviceSparseProperties }
%struct.VkPhysicalDeviceLimits = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i32, [3 x i32], i32, i32, i32, i32, i32, float, float, i32, [2 x i32], [2 x float], i32, i64, i64, i64, i64, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, [2 x float], [2 x float], float, float, i32, i32, i64, i64, i64 }
%struct.VkPhysicalDeviceSparseProperties = type { i32, i32, i32, i32, i32 }
%struct.VkPhysicalDeviceFeatures = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkPhysicalDeviceLineRasterizationFeaturesEXT = type { i32, i8*, i32, i32, i32, i32, i32, i32 }
%struct.VkPhysicalDeviceProvokingVertexFeaturesEXT = type { i32, i8*, i32, i32 }
%struct.VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT = type { i32, i8*, i32, i32 }
%struct.VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT = type { i32, i8*, i32 }
%struct.VkPhysicalDeviceTransformFeedbackFeaturesEXT = type { i32, i8*, i32, i32 }
%struct.VkPhysicalDeviceIndexTypeUint8FeaturesEXT = type { i32, i8*, i32 }
%struct.VkPhysicalDeviceSubgroupProperties = type { i32, i8*, i32, i32, i32, i32 }
%struct.VkPhysicalDeviceDeviceMemoryReportFeaturesEXT = type { i32, i8*, i32 }
%struct.VkDeviceDeviceMemoryReportCreateInfoEXT = type { i32, i8*, i32, void (%struct.VkDeviceMemoryReportCallbackDataEXT*, i8*)*, i8* }
%struct.VkDeviceMemoryReportCallbackDataEXT = type { i32, i8*, i32, i32, i64, i64, i32, i64, i32 }
%struct.VkPhysicalDeviceExternalMemoryHostPropertiesEXT = type { i32, i8*, i64 }
%struct.VkPhysicalDeviceShaderFloat16Int8Features = type { i32, i8*, i32, i32 }
%struct.VkPhysicalDeviceDepthStencilResolveProperties = type { i32, i8*, i32, i32, i32, i32 }
%struct.VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT = type { i32, i8*, i32 }
%struct.VkPhysicalDeviceDriverProperties = type { i32, i8*, i32, [256 x i8], [256 x i8], %struct.VkConformanceVersion }
%struct.VkConformanceVersion = type { i8, i8, i8, i8 }
%struct.VkPhysicalDeviceCustomBorderColorFeaturesEXT = type { i32, i8*, i32, i32 }
%struct.VkExternalFenceProperties = type { i32, i8*, i32, i32, i32 }
%struct.VkExternalSemaphoreProperties = type { i32, i8*, i32, i32, i32 }
%struct.VkPhysicalDeviceSamplerYcbcrConversionFeatures = type { i32, i8*, i32 }
%"class.std::__1::vector.1177" = type { %"class.std::__1::__vector_base.1178" }
%"class.std::__1::__vector_base.1178" = type { %struct.VkQueueFamilyProperties*, %struct.VkQueueFamilyProperties*, %"class.std::__1::__compressed_pair.1179" }
%struct.VkQueueFamilyProperties = type { i32, i32, i32, %struct.VkExtent3D }
%struct.VkExtent3D = type { i32, i32, i32 }
%"class.std::__1::__compressed_pair.1179" = type { %"struct.std::__1::__compressed_pair_elem.1180" }
%"struct.std::__1::__compressed_pair_elem.1180" = type { %struct.VkQueueFamilyProperties* }
%"class.angle::PackedEnumMap.1184" = type { %"struct.std::__1::array.1185" }
%"struct.std::__1::array.1185" = type { [3 x i8] }
%struct.VkDevice_T = type opaque
%"class.rx::SerialFactoryBase.1186" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1187" }
%"struct.std::__1::__atomic_base.1187" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::vector.1188" = type { %"class.std::__1::__vector_base.1189" }
%"class.std::__1::__vector_base.1189" = type { %"class.rx::vk::SharedGarbage"*, %"class.rx::vk::SharedGarbage"*, %"class.std::__1::__compressed_pair.1190" }
%"class.rx::vk::SharedGarbage" = type { %"class.rx::vk::SharedResourceUse", %"class.std::__1::vector.940" }
%"class.rx::vk::SharedResourceUse" = type { %"struct.rx::vk::ResourceUse"* }
%"struct.rx::vk::ResourceUse" = type { i32, %"class.rx::Serial" }
%"class.std::__1::__compressed_pair.1190" = type { %"struct.std::__1::__compressed_pair_elem.1191" }
%"struct.std::__1::__compressed_pair_elem.1191" = type { %"class.rx::vk::SharedGarbage"* }
%"class.rx::vk::MemoryProperties" = type { %struct.VkPhysicalDeviceMemoryProperties }
%struct.VkPhysicalDeviceMemoryProperties = type { i32, [32 x %struct.VkMemoryType], i32, [16 x %struct.VkMemoryHeap] }
%struct.VkMemoryType = type { i32, i32 }
%struct.VkMemoryHeap = type { i64, i32 }
%"class.rx::vk::FormatTable" = type { [8 x i8], %"struct.std::__1::array.1195" }
%"struct.std::__1::array.1195" = type { [227 x %"struct.rx::vk::Format"] }
%"struct.rx::vk::Format" = type <{ i32, i32, i32, i32, i32, [4 x i8], void (i64, i64, i64, i8*, i64, i64)*, { void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, i8 } (i32)*, void (i8*, i64, i64, i8*)*, void (i8*, i64, i64, i8*)*, i8, i8, i8, i8, i8, i8, [2 x i8] }>
%"class.rx::vk::PipelineCache" = type { %"class.rx::vk::WrappedObject.1196" }
%"class.rx::vk::WrappedObject.1196" = type { %struct.VkPipelineCache_T* }
%struct.VkPipelineCache_T = type opaque
%"class.angle::PackedEnumMap.1197" = type { %"struct.std::__1::array.1198" }
%"struct.std::__1::array.1198" = type { [227 x %struct.VkFormatProperties] }
%struct.VkFormatProperties = type { i32, i32, i32 }
%"class.rx::DebugAnnotatorVk" = type { %"class.angle::LoggingAnnotator" }
%"class.angle::LoggingAnnotator" = type { %"class.gl::DebugAnnotator" }
%"class.gl::DebugAnnotator" = type { i32 (...)** }
%"class.std::__1::deque.1199" = type { %"class.std::__1::__deque_base.1200" }
%"class.std::__1::__deque_base.1200" = type { %"struct.std::__1::__split_buffer.1201", i64, %"class.std::__1::__compressed_pair.1208" }
%"struct.std::__1::__split_buffer.1201" = type { %"struct.rx::RendererVk::PendingOneOffCommands"**, %"struct.rx::RendererVk::PendingOneOffCommands"**, %"struct.rx::RendererVk::PendingOneOffCommands"**, %"class.std::__1::__compressed_pair.1203" }
%"struct.rx::RendererVk::PendingOneOffCommands" = type { %"class.rx::Serial", %"class.rx::vk::priv::CommandBuffer" }
%"class.rx::vk::priv::CommandBuffer" = type { %"class.rx::vk::WrappedObject.1202" }
%"class.rx::vk::WrappedObject.1202" = type { %struct.VkCommandBuffer_T* }
%struct.VkCommandBuffer_T = type opaque
%"class.std::__1::__compressed_pair.1203" = type { %"struct.std::__1::__compressed_pair_elem.1204" }
%"struct.std::__1::__compressed_pair_elem.1204" = type { %"struct.rx::RendererVk::PendingOneOffCommands"** }
%"class.std::__1::__compressed_pair.1208" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.rx::vk::CommandQueue" = type { %"class.rx::vk::CommandQueueInterface", %"class.std::__1::vector.1212", %"class.std::__1::vector.1220", %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::PersistentCommandPool", %"class.rx::SerialFactoryBase.1186", %"class.rx::Serial", %"class.rx::Serial", %"class.rx::Serial", %"class.angle::PackedEnumMap.1236", %"class.rx::vk::FenceRecycler" }
%"class.rx::vk::CommandQueueInterface" = type { i32 (...)** }
%"class.std::__1::vector.1212" = type { %"class.std::__1::__vector_base.1213" }
%"class.std::__1::__vector_base.1213" = type { %"class.rx::vk::ObjectAndSerial.1214"*, %"class.rx::vk::ObjectAndSerial.1214"*, %"class.std::__1::__compressed_pair.1215" }
%"class.rx::vk::ObjectAndSerial.1214" = type opaque
%"class.std::__1::__compressed_pair.1215" = type { %"struct.std::__1::__compressed_pair_elem.1216" }
%"struct.std::__1::__compressed_pair_elem.1216" = type { %"class.rx::vk::ObjectAndSerial.1214"* }
%"class.std::__1::vector.1220" = type { %"class.std::__1::__vector_base.1221" }
%"class.std::__1::__vector_base.1221" = type { %"struct.rx::vk::CommandBatch"*, %"struct.rx::vk::CommandBatch"*, %"class.std::__1::__compressed_pair.1224" }
%"struct.rx::vk::CommandBatch" = type { [8 x i8], %"class.rx::vk::priv::CommandBuffer", %"class.rx::vk::CommandPool", %"class.rx::vk::Shared.1222", %"class.rx::Serial" }
%"class.rx::vk::Shared.1222" = type { %"class.rx::vk::RefCounted.1223"* }
%"class.rx::vk::RefCounted.1223" = type { i32, %"class.rx::vk::Fence" }
%"class.rx::vk::Fence" = type { %"class.rx::vk::WrappedObject.1240" }
%"class.rx::vk::WrappedObject.1240" = type { %struct.VkFence_T* }
%struct.VkFence_T = type opaque
%"class.std::__1::__compressed_pair.1224" = type { %"struct.std::__1::__compressed_pair_elem.1225" }
%"struct.std::__1::__compressed_pair_elem.1225" = type { %"struct.rx::vk::CommandBatch"* }
%"class.rx::vk::PersistentCommandPool" = type { %"class.std::__1::vector.1229", %"class.rx::vk::CommandPool" }
%"class.std::__1::vector.1229" = type { %"class.std::__1::__vector_base.1230" }
%"class.std::__1::__vector_base.1230" = type { %"class.rx::vk::priv::CommandBuffer"*, %"class.rx::vk::priv::CommandBuffer"*, %"class.std::__1::__compressed_pair.1231" }
%"class.std::__1::__compressed_pair.1231" = type { %"struct.std::__1::__compressed_pair_elem.1232" }
%"struct.std::__1::__compressed_pair_elem.1232" = type { %"class.rx::vk::priv::CommandBuffer"* }
%"class.angle::PackedEnumMap.1236" = type { %"struct.std::__1::array.1237" }
%"struct.std::__1::array.1237" = type { [3 x %struct.VkQueue_T*] }
%struct.VkQueue_T = type opaque
%"class.rx::vk::FenceRecycler" = type { %"class.std::__1::mutex", %"class.rx::vk::Recycler" }
%"class.rx::vk::Recycler" = type { %"class.std::__1::vector.1238" }
%"class.std::__1::vector.1238" = type { %"class.std::__1::__vector_base.1239" }
%"class.std::__1::__vector_base.1239" = type { %"class.rx::vk::Fence"*, %"class.rx::vk::Fence"*, %"class.std::__1::__compressed_pair.1241" }
%"class.std::__1::__compressed_pair.1241" = type { %"struct.std::__1::__compressed_pair_elem.1242" }
%"struct.std::__1::__compressed_pair_elem.1242" = type { %"class.rx::vk::Fence"* }
%"class.std::__1::mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::vector.1246" = type { %"class.std::__1::__vector_base.1247" }
%"class.std::__1::__vector_base.1247" = type { %"class.rx::vk::CommandBufferHelper"**, %"class.rx::vk::CommandBufferHelper"**, %"class.std::__1::__compressed_pair.1248" }
%"class.std::__1::__compressed_pair.1248" = type { %"struct.std::__1::__compressed_pair_elem.1249" }
%"struct.std::__1::__compressed_pair_elem.1249" = type { %"class.rx::vk::CommandBufferHelper"** }
%"class.rx::vk::CommandProcessor" = type { %"class.rx::vk::Context", %"class.rx::vk::CommandQueueInterface", %"class.std::__1::queue", %"class.std::__1::mutex", %"class.std::__1::condition_variable", %"class.std::__1::condition_variable", i8, %"class.rx::vk::CommandPool", %"class.rx::vk::CommandQueue", %"class.std::__1::mutex", %"class.std::__1::mutex", %"class.std::__1::queue.1278", %"class.std::__1::mutex", %"class.std::__1::condition_variable", %"class.std::__1::map.1291", %"class.std::__1::thread" }
%"class.std::__1::queue" = type { %"class.std::__1::deque.1253" }
%"class.std::__1::deque.1253" = type { %"class.std::__1::__deque_base.1254" }
%"class.std::__1::__deque_base.1254" = type { %"struct.std::__1::__split_buffer.1255", i64, %"class.std::__1::__compressed_pair.1270" }
%"struct.std::__1::__split_buffer.1255" = type { %"class.rx::vk::CommandProcessorTask"**, %"class.rx::vk::CommandProcessorTask"**, %"class.rx::vk::CommandProcessorTask"**, %"class.std::__1::__compressed_pair.1265" }
%"class.rx::vk::CommandProcessorTask" = type <{ i32, [4 x i8], %"class.rx::vk::RenderPass"*, %"class.rx::vk::CommandBufferHelper"*, %"class.std::__1::vector.1057", %"class.std::__1::vector", %"class.rx::vk::Semaphore"*, %"class.std::__1::vector.940", %"class.rx::Serial", %struct.VkPresentInfoKHR, %struct.VkSwapchainKHR_T*, %struct.VkSemaphore_T*, i32, [4 x i8], %struct.VkPresentRegionKHR, %struct.VkPresentRegionsKHR, %"class.std::__1::vector.1258", %struct.VkCommandBuffer_T*, %"class.rx::vk::Fence"*, i8, [7 x i8] }>
%"class.rx::vk::RenderPass" = type { %"class.rx::vk::WrappedObject.1256" }
%"class.rx::vk::WrappedObject.1256" = type { %struct.VkRenderPass_T* }
%struct.VkRenderPass_T = type opaque
%"class.rx::vk::Semaphore" = type { %"class.rx::vk::WrappedObject.1257" }
%"class.rx::vk::WrappedObject.1257" = type { %struct.VkSemaphore_T* }
%struct.VkPresentInfoKHR = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32, %struct.VkSwapchainKHR_T**, i32*, i32* }
%struct.VkSwapchainKHR_T = type opaque
%struct.VkSemaphore_T = type opaque
%struct.VkPresentRegionKHR = type { i32, %struct.VkRectLayerKHR* }
%struct.VkRectLayerKHR = type { %struct.VkOffset2D, %struct.VkExtent2D, i32 }
%struct.VkOffset2D = type { i32, i32 }
%struct.VkExtent2D = type { i32, i32 }
%struct.VkPresentRegionsKHR = type { i32, i8*, i32, %struct.VkPresentRegionKHR* }
%"class.std::__1::vector.1258" = type { %"class.std::__1::__vector_base.1259" }
%"class.std::__1::__vector_base.1259" = type { %struct.VkRectLayerKHR*, %struct.VkRectLayerKHR*, %"class.std::__1::__compressed_pair.1260" }
%"class.std::__1::__compressed_pair.1260" = type { %"struct.std::__1::__compressed_pair_elem.1261" }
%"struct.std::__1::__compressed_pair_elem.1261" = type { %struct.VkRectLayerKHR* }
%"class.std::__1::__compressed_pair.1265" = type { %"struct.std::__1::__compressed_pair_elem.1266" }
%"struct.std::__1::__compressed_pair_elem.1266" = type { %"class.rx::vk::CommandProcessorTask"** }
%"class.std::__1::__compressed_pair.1270" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.std::__1::queue.1278" = type { %"class.std::__1::deque.1279" }
%"class.std::__1::deque.1279" = type { %"class.std::__1::__deque_base.1280" }
%"class.std::__1::__deque_base.1280" = type { %"struct.std::__1::__split_buffer.1281", i64, %"class.std::__1::__compressed_pair.1287" }
%"struct.std::__1::__split_buffer.1281" = type { %"struct.rx::vk::Error"**, %"struct.rx::vk::Error"**, %"struct.rx::vk::Error"**, %"class.std::__1::__compressed_pair.1282" }
%"struct.rx::vk::Error" = type { i32, i8*, i8*, i32 }
%"class.std::__1::__compressed_pair.1282" = type { %"struct.std::__1::__compressed_pair_elem.1283" }
%"struct.std::__1::__compressed_pair_elem.1283" = type { %"struct.rx::vk::Error"** }
%"class.std::__1::__compressed_pair.1287" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.std::__1::condition_variable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1274, %union.anon.1276, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1274 = type { i64 }
%union.anon.1276 = type { i64 }
%"class.std::__1::map.1291" = type { %"class.std::__1::__tree.1292" }
%"class.std::__1::__tree.1292" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1293", %"class.std::__1::__compressed_pair.1297" }
%"class.std::__1::__compressed_pair.1293" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"class.std::__1::__compressed_pair.1297" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.std::__1::thread" = type { i64 }
%"class.rx::vk::Allocator" = type { %"class.rx::vk::WrappedObject.1302" }
%"class.rx::vk::WrappedObject.1302" = type { %struct.VmaAllocator_T* }
%struct.VmaAllocator_T = type opaque
%"class.rx::SamplerCache" = type { %"class.rx::HasCacheStats.1303", %"class.std::__1::unordered_map.1304" }
%"class.rx::HasCacheStats.1303" = type { i32 (...)**, %"class.rx::CacheStats" }
%"class.std::__1::unordered_map.1304" = type { %"class.std::__1::__hash_table.1305" }
%"class.std::__1::__hash_table.1305" = type <{ %"class.std::__1::unique_ptr.1306", %"class.std::__1::__compressed_pair.1316", %"class.std::__1::__compressed_pair.1321", %"class.std::__1::__compressed_pair.1325", [4 x i8] }>
%"class.std::__1::unique_ptr.1306" = type { %"class.std::__1::__compressed_pair.1307" }
%"class.std::__1::__compressed_pair.1307" = type { %"struct.std::__1::__compressed_pair_elem.1308", %"struct.std::__1::__compressed_pair_elem.1310" }
%"struct.std::__1::__compressed_pair_elem.1308" = type { %"struct.std::__1::__hash_node_base.1309"** }
%"struct.std::__1::__hash_node_base.1309" = type { %"struct.std::__1::__hash_node_base.1309"* }
%"struct.std::__1::__compressed_pair_elem.1310" = type { %"class.std::__1::__bucket_list_deallocator.1311" }
%"class.std::__1::__bucket_list_deallocator.1311" = type { %"class.std::__1::__compressed_pair.1312" }
%"class.std::__1::__compressed_pair.1312" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.std::__1::__compressed_pair.1316" = type { %"struct.std::__1::__compressed_pair_elem.1317" }
%"struct.std::__1::__compressed_pair_elem.1317" = type { %"struct.std::__1::__hash_node_base.1309" }
%"class.std::__1::__compressed_pair.1321" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.std::__1::__compressed_pair.1325" = type { %"struct.std::__1::__compressed_pair_elem.764" }
%"class.rx::SamplerYcbcrConversionCache" = type { %"class.rx::HasCacheStats.1331", %"class.std::__1::unordered_map.1332" }
%"class.rx::HasCacheStats.1331" = type { i32 (...)**, %"class.rx::CacheStats" }
%"class.std::__1::unordered_map.1332" = type { %"class.std::__1::__hash_table.1333" }
%"class.std::__1::__hash_table.1333" = type <{ %"class.std::__1::unique_ptr.1334", %"class.std::__1::__compressed_pair.1344", %"class.std::__1::__compressed_pair.1349", %"class.std::__1::__compressed_pair.1354", [4 x i8] }>
%"class.std::__1::unique_ptr.1334" = type { %"class.std::__1::__compressed_pair.1335" }
%"class.std::__1::__compressed_pair.1335" = type { %"struct.std::__1::__compressed_pair_elem.1336", %"struct.std::__1::__compressed_pair_elem.1338" }
%"struct.std::__1::__compressed_pair_elem.1336" = type { %"struct.std::__1::__hash_node_base.1337"** }
%"struct.std::__1::__hash_node_base.1337" = type { %"struct.std::__1::__hash_node_base.1337"* }
%"struct.std::__1::__compressed_pair_elem.1338" = type { %"class.std::__1::__bucket_list_deallocator.1339" }
%"class.std::__1::__bucket_list_deallocator.1339" = type { %"class.std::__1::__compressed_pair.1340" }
%"class.std::__1::__compressed_pair.1340" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.std::__1::__compressed_pair.1344" = type { %"struct.std::__1::__compressed_pair_elem.1345" }
%"struct.std::__1::__compressed_pair_elem.1345" = type { %"struct.std::__1::__hash_node_base.1337" }
%"class.std::__1::__compressed_pair.1349" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.std::__1::__compressed_pair.1354" = type { %"struct.std::__1::__compressed_pair_elem.764" }
%"class.rx::vk::ActiveHandleCounter" = type { %"class.angle::PackedEnumMap.1360", %"class.angle::PackedEnumMap.1360" }
%"class.angle::PackedEnumMap.1360" = type { %"struct.std::__1::array.1361" }
%"struct.std::__1::array.1361" = type { [24 x i32] }
%"class.rx::vk::ResourceSerialFactory" = type { %"struct.std::__1::atomic.1362" }
%"struct.std::__1::atomic.1362" = type { %"struct.std::__1::__atomic_base.1363" }
%"struct.std::__1::__atomic_base.1363" = type { %"struct.std::__1::__atomic_base.1364" }
%"struct.std::__1::__atomic_base.1364" = type { %"struct.std::__1::__cxx_atomic_impl.1365" }
%"struct.std::__1::__cxx_atomic_impl.1365" = type { %"struct.std::__1::__cxx_atomic_base_impl.1366" }
%"struct.std::__1::__cxx_atomic_base_impl.1366" = type { i32 }
%"class.rx::vk::MemoryReport" = type { %"class.std::__1::mutex", i64, i64, %"class.absl::flat_hash_map.1367", i64, i64, %"class.absl::flat_hash_map.1382" }
%"class.absl::flat_hash_map.1367" = type { %"class.absl::container_internal::raw_hash_map.1368" }
%"class.absl::container_internal::raw_hash_map.1368" = type { %"class.absl::container_internal::raw_hash_set.1369" }
%"class.absl::container_internal::raw_hash_set.1369" = type { i8*, %"union.absl::container_internal::map_slot_type.1370"*, i64, i64, %"class.absl::container_internal::CompressedTuple.1371" }
%"union.absl::container_internal::map_slot_type.1370" = type opaque
%"class.absl::container_internal::CompressedTuple.1371" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.1372" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.1372" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.absl::flat_hash_map.1382" = type { %"class.absl::container_internal::raw_hash_map.1383" }
%"class.absl::container_internal::raw_hash_map.1383" = type { %"class.absl::container_internal::raw_hash_set.1384" }
%"class.absl::container_internal::raw_hash_set.1384" = type { i8*, %"union.absl::container_internal::map_slot_type.1385"*, i64, i64, %"class.absl::container_internal::CompressedTuple.1386" }
%"union.absl::container_internal::map_slot_type.1385" = type opaque
%"class.absl::container_internal::CompressedTuple.1386" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.1387" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.1387" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.angle::PackedEnumMap.1395" = type { %"struct.std::__1::array.1396" }
%"struct.std::__1::array.1396" = type { [12 x %"class.rx::CacheStats"] }
%"class.std::__1::shared_ptr.1397" = type { %"class.rx::WaitableCompressEvent"*, %"class.std::__1::__shared_weak_count"* }
%"class.rx::WaitableCompressEvent" = type { i32 (...)**, %"class.std::__1::shared_ptr.1398" }
%"class.std::__1::shared_ptr.1398" = type { %"class.angle::WaitableEvent"*, %"class.std::__1::__shared_weak_count"* }
%"class.angle::WaitableEvent" = type { i32 (...)**, %"class.std::__1::shared_ptr.637" }
%"class.rx::MultisampleTextureInitializer" = type { i32 (...)** }
%"struct.std::__1::array.774" = type { [16 x { i64, i64 }] }
%"struct.std::__1::array.775" = type { [16 x { i64, i64 }] }
%"class.rx::vk::priv::SecondaryCommandBuffer" = type { i8, %"class.std::__1::vector.776", %"class.angle::PoolAllocator"*, i8*, i64 }
%"class.std::__1::vector.776" = type { %"class.std::__1::__vector_base.777" }
%"class.std::__1::__vector_base.777" = type { %"struct.rx::vk::priv::CommandHeader"**, %"struct.rx::vk::priv::CommandHeader"**, %"class.std::__1::__compressed_pair.778" }
%"struct.rx::vk::priv::CommandHeader" = type { i16, i16 }
%"class.std::__1::__compressed_pair.778" = type { %"struct.std::__1::__compressed_pair_elem.779" }
%"struct.std::__1::__compressed_pair_elem.779" = type { %"struct.rx::vk::priv::CommandHeader"** }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector.783", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector.783" = type { %"class.std::__1::__vector_base.784" }
%"class.std::__1::__vector_base.784" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair.785" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair.785" = type { %"struct.std::__1::__compressed_pair_elem.786" }
%"struct.std::__1::__compressed_pair_elem.786" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.rx::vk::PipelineHelper" = type { %"class.std::__1::vector.790", %"class.rx::Serial", %"class.rx::vk::Pipeline" }
%"class.std::__1::vector.790" = type { %"class.std::__1::__vector_base.791" }
%"class.std::__1::__vector_base.791" = type { %"struct.rx::vk::GraphicsPipelineTransition"*, %"struct.rx::vk::GraphicsPipelineTransition"*, %"class.std::__1::__compressed_pair.794" }
%"struct.rx::vk::GraphicsPipelineTransition" = type { %"class.angle::BitSetT.792", %"class.rx::vk::GraphicsPipelineDesc"*, %"class.rx::vk::PipelineHelper"* }
%"class.rx::vk::GraphicsPipelineDesc" = type { %"struct.rx::vk::VertexInputAttributes", %"class.rx::vk::RenderPassDesc", %"struct.rx::vk::PackedRasterizationAndMultisampleStateInfo", %"struct.rx::vk::PackedDepthStencilStateInfo", %"struct.rx::vk::PackedInputAssemblyAndColorBlendStateInfo", %struct.VkViewport, %"struct.rx::vk::PackedScissor", %"struct.rx::vk::PackedExtent" }
%"struct.rx::vk::VertexInputAttributes" = type { [16 x %"struct.rx::vk::PackedAttribDesc"] }
%"struct.rx::vk::PackedAttribDesc" = type { i8, i8, i16, i16 }
%"class.rx::vk::RenderPassDesc" = type { i8, %"class.angle::BitSetT.68", %"class.angle::BitSetT.68", %"struct.std::__1::array.793" }
%"struct.std::__1::array.793" = type { [9 x i8] }
%"struct.rx::vk::PackedRasterizationAndMultisampleStateInfo" = type { %"struct.rx::vk::RasterizationStateBits", float, [2 x i32], float, float, float, float }
%"struct.rx::vk::RasterizationStateBits" = type { i32 }
%"struct.rx::vk::PackedDepthStencilStateInfo" = type { %"struct.rx::vk::DepthStencilEnableFlags", i8, i8, %"struct.rx::vk::DepthCompareOpAndSurfaceRotation", float, float, %"struct.rx::vk::PackedStencilOpState", %"struct.rx::vk::PackedStencilOpState" }
%"struct.rx::vk::DepthStencilEnableFlags" = type { i8 }
%"struct.rx::vk::DepthCompareOpAndSurfaceRotation" = type { i8 }
%"struct.rx::vk::PackedStencilOpState" = type { %"struct.rx::vk::StencilOps", i8, i8 }
%"struct.rx::vk::StencilOps" = type { i16 }
%"struct.rx::vk::PackedInputAssemblyAndColorBlendStateInfo" = type { [4 x i8], [8 x %"struct.rx::vk::PackedColorBlendAttachmentState"], [4 x float], %"struct.rx::vk::LogicOpState", i8, %"struct.rx::vk::PrimitiveState" }
%"struct.rx::vk::PackedColorBlendAttachmentState" = type { i32 }
%"struct.rx::vk::LogicOpState" = type { i8 }
%"struct.rx::vk::PrimitiveState" = type { i16 }
%struct.VkViewport = type { float, float, float, float, float, float }
%"struct.rx::vk::PackedScissor" = type { i16, i16, i16, i16 }
%"struct.rx::vk::PackedExtent" = type { i16, i16 }
%"class.std::__1::__compressed_pair.794" = type { %"struct.std::__1::__compressed_pair_elem.795" }
%"struct.std::__1::__compressed_pair_elem.795" = type { %"struct.rx::vk::GraphicsPipelineTransition"* }
%"class.rx::WindowSurfaceVk" = type opaque
%"class.std::__1::unique_ptr.799" = type { %"class.std::__1::__compressed_pair.800" }
%"class.std::__1::__compressed_pair.800" = type { %"struct.std::__1::__compressed_pair_elem.801" }
%"struct.std::__1::__compressed_pair_elem.801" = type { %"class.rx::vk::GraphicsPipelineDesc"* }
%"class.angle::BitSetT.792" = type { i64 }
%"class.angle::PackedEnumMap.805" = type { %"struct.std::__1::array.806" }
%"struct.std::__1::array.806" = type { [2 x %"class.rx::vk::DynamicDescriptorPool"] }
%"class.angle::PackedEnumMap.807" = type { %"struct.std::__1::array.808" }
%"struct.std::__1::array.808" = type { [7 x %"class.rx::vk::DynamicQueryPool"] }
%"class.angle::PackedEnumMap.824" = type { %"struct.std::__1::array.825" }
%"struct.std::__1::array.825" = type { [7 x %"class.rx::QueryVk"*] }
%"class.rx::QueryVk" = type <{ %"class.rx::QueryImpl.base", [7 x i8], %"class.rx::vk::Shared", %"class.std::__1::vector.827", %"class.rx::vk::QueryHelper", i64, i64, i8, [7 x i8] }>
%"class.rx::QueryImpl.base" = type <{ i32 (...)**, i8 }>
%"class.rx::vk::Shared" = type { %"class.rx::vk::RefCounted.826"* }
%"class.rx::vk::RefCounted.826" = type { i32, [4 x i8], %"class.rx::vk::QueryHelper" }
%"class.std::__1::vector.827" = type { %"class.std::__1::__vector_base.828" }
%"class.std::__1::__vector_base.828" = type { %"class.rx::vk::Shared"*, %"class.rx::vk::Shared"*, %"class.std::__1::__compressed_pair.829" }
%"class.std::__1::__compressed_pair.829" = type { %"struct.std::__1::__compressed_pair_elem.830" }
%"struct.std::__1::__compressed_pair_elem.830" = type { %"class.rx::vk::Shared"* }
%"class.rx::vk::QueryHelper" = type <{ %"class.rx::vk::Resource", %"class.rx::vk::DynamicQueryPool"*, i64, i32, [4 x i8] }>
%"class.rx::vk::Resource" = type { i32 (...)**, %"class.rx::vk::SharedResourceUse" }
%"class.rx::VertexArrayVk" = type opaque
%"class.rx::FramebufferVk" = type opaque
%"class.angle::PackedEnumMap.834" = type { %"struct.std::__1::array.835" }
%"struct.std::__1::array.835" = type { [3 x i32] }
%union.VkClearValue = type { %union.VkClearColorValue }
%union.VkClearColorValue = type { [4 x float] }
%"class.rx::IncompleteTextureSet" = type { %"class.angle::PackedEnumMap.836", %"class.gl::Buffer"* }
%"class.angle::PackedEnumMap.836" = type { %"struct.std::__1::array.837" }
%"struct.std::__1::array.837" = type { [4 x %"class.angle::PackedEnumMap.573"] }
%"class.angle::PackedEnumMap.838" = type { %"struct.std::__1::array.839" }
%"struct.std::__1::array.839" = type { [2 x %"struct.rx::ContextVk::DriverUniformsDescriptorSet"] }
%"struct.rx::ContextVk::DriverUniformsDescriptorSet" = type { %"class.rx::vk::DynamicBuffer", %struct.VkDescriptorSet_T*, i32, %"class.rx::vk::BindingPointer.708", %"class.rx::vk::BindingPointer.712", %"class.rx::DriverUniformsDescriptorSetCache" }
%"class.rx::DriverUniformsDescriptorSetCache" = type { %"class.rx::HasCacheStats.856", %"class.angle::FastIntegerMap" }
%"class.rx::HasCacheStats.856" = type { i32 (...)**, %"class.rx::CacheStats" }
%"class.angle::FastIntegerMap" = type { %"class.angle::FastIntegerSet", %"class.std::__1::vector.864" }
%"class.angle::FastIntegerSet" = type { %"class.std::__1::vector.857" }
%"class.std::__1::vector.857" = type { %"class.std::__1::__vector_base.858" }
%"class.std::__1::__vector_base.858" = type { %"class.angle::BitSetT.85"*, %"class.angle::BitSetT.85"*, %"class.std::__1::__compressed_pair.859" }
%"class.std::__1::__compressed_pair.859" = type { %"struct.std::__1::__compressed_pair_elem.860" }
%"struct.std::__1::__compressed_pair_elem.860" = type { %"class.angle::BitSetT.85"* }
%"class.std::__1::vector.864" = type { %"class.std::__1::__vector_base.865" }
%"class.std::__1::__vector_base.865" = type { %struct.VkDescriptorSet_T**, %struct.VkDescriptorSet_T**, %"class.std::__1::__compressed_pair.866" }
%"class.std::__1::__compressed_pair.866" = type { %"struct.std::__1::__compressed_pair_elem.867" }
%"struct.std::__1::__compressed_pair_elem.867" = type { %struct.VkDescriptorSet_T** }
%"struct.std::__1::array.871" = type { [96 x %"struct.rx::vk::TextureUnit"] }
%"struct.rx::vk::TextureUnit" = type { %"class.rx::TextureVk"*, %"class.rx::vk::SamplerHelper"*, i32 }
%"class.rx::TextureVk" = type { %"class.rx::TextureImpl", %"class.angle::ObserverInterface", i8, i8, i8, i32, i32, [4 x i8], %"class.angle::PackedEnumMap.872", %"class.angle::PackedEnumMap.888", %"class.rx::vk::BufferViewHelper", %"class.angle::PackedEnumMap.921", %"class.rx::vk::ImageHelper"*, %"class.rx::vk::BindingPointer.931", i64, i32, i32, %"class.angle::BitSetT.83", %"class.angle::ObserverBinding" }
%"class.angle::PackedEnumMap.872" = type { %"struct.std::__1::array.873" }
%"struct.std::__1::array.873" = type { [5 x %"class.rx::vk::ImageHelper"] }
%"class.rx::vk::ImageHelper" = type <{ %"class.rx::vk::Resource", %"class.angle::Subject", %"class.rx::vk::Image", %"class.rx::vk::DeviceMemory", i32, i32, i32, i32, %struct.VkExtent3D, i8, [3 x i8], %"struct.rx::vk::Format"*, i32, %"class.rx::vk::ImageSerial", i32, i32, i32, i32, %"class.angle::BitSetT.875", [6 x i8], %"class.rx::vk::BindingPointer.876", i64, %"class.gl::LevelIndexWrapper", i32, i32, [4 x i8], %"class.rx::vk::DynamicBuffer", %"class.std::__1::vector.878", %struct.Optional.886, %"struct.std::__1::array.887", %"struct.std::__1::array.887", [4 x i8] }>
%"class.rx::vk::Image" = type { %"class.rx::vk::WrappedObject.874" }
%"class.rx::vk::WrappedObject.874" = type { %struct.VkImage_T* }
%struct.VkImage_T = type opaque
%"class.rx::vk::DeviceMemory" = type { %"class.rx::vk::WrappedObject.845" }
%"class.rx::vk::WrappedObject.845" = type { %struct.VkDeviceMemory_T* }
%struct.VkDeviceMemory_T = type opaque
%"class.rx::vk::ImageSerial" = type { i32 }
%"class.angle::BitSetT.875" = type { i16 }
%"class.rx::vk::BindingPointer.876" = type { %"class.rx::vk::RefCounted.877"* }
%"class.rx::vk::RefCounted.877" = type opaque
%"class.gl::LevelIndexWrapper" = type { i32 }
%"class.std::__1::vector.878" = type { %"class.std::__1::__vector_base.879" }
%"class.std::__1::__vector_base.879" = type { %"class.std::__1::vector.880"*, %"class.std::__1::vector.880"*, %"class.std::__1::__compressed_pair.881" }
%"class.std::__1::vector.880" = type opaque
%"class.std::__1::__compressed_pair.881" = type { %"struct.std::__1::__compressed_pair_elem.882" }
%"struct.std::__1::__compressed_pair_elem.882" = type { %"class.std::__1::vector.880"* }
%struct.Optional.886 = type { i8, %"struct.rx::vk::ImageHelper::ClearUpdate" }
%"struct.rx::vk::ImageHelper::ClearUpdate" = type { i32, %union.VkClearValue, i32, i32, i32 }
%"struct.std::__1::array.887" = type { [16 x %"class.angle::BitSetT.68"] }
%"class.angle::PackedEnumMap.888" = type { %"struct.std::__1::array.889" }
%"struct.std::__1::array.889" = type { [5 x %"class.rx::vk::ImageViewHelper"] }
%"class.rx::vk::ImageViewHelper" = type <{ %"class.rx::vk::Resource", %"class.gl::LevelIndexWrapper.890", [4 x i8], %"class.std::__1::vector.891", %"class.std::__1::vector.891", %"class.std::__1::vector.891", %"class.std::__1::vector.891", %"class.std::__1::vector.891", %"class.std::__1::vector.891", %"class.std::__1::vector.891", i8, [7 x i8], %"class.std::__1::vector.891", %"class.std::__1::vector.899", %"class.std::__1::vector.891", %"class.std::__1::vector.899", %"class.std::__1::vector.891", %"class.std::__1::vector.899", %"class.rx::vk::ImageOrBufferViewSerial", [4 x i8] }>
%"class.gl::LevelIndexWrapper.890" = type { i32 }
%"class.std::__1::vector.891" = type { %"class.std::__1::__vector_base.892" }
%"class.std::__1::__vector_base.892" = type { %"class.rx::vk::ImageView"*, %"class.rx::vk::ImageView"*, %"class.std::__1::__compressed_pair.894" }
%"class.rx::vk::ImageView" = type { %"class.rx::vk::WrappedObject.893" }
%"class.rx::vk::WrappedObject.893" = type { %struct.VkImageView_T* }
%struct.VkImageView_T = type opaque
%"class.std::__1::__compressed_pair.894" = type { %"struct.std::__1::__compressed_pair_elem.895" }
%"struct.std::__1::__compressed_pair_elem.895" = type { %"class.rx::vk::ImageView"* }
%"class.std::__1::vector.899" = type { %"class.std::__1::__vector_base.900" }
%"class.std::__1::__vector_base.900" = type { %"class.std::__1::vector.891"*, %"class.std::__1::vector.891"*, %"class.std::__1::__compressed_pair.901" }
%"class.std::__1::__compressed_pair.901" = type { %"struct.std::__1::__compressed_pair_elem.902" }
%"struct.std::__1::__compressed_pair_elem.902" = type { %"class.std::__1::vector.891"* }
%"class.rx::vk::ImageOrBufferViewSerial" = type { i32 }
%"class.rx::vk::BufferViewHelper" = type <{ %"class.rx::vk::Resource", %"class.absl::flat_hash_map.906", i64, i64, %"class.rx::vk::ImageOrBufferViewSerial", [4 x i8] }>
%"class.absl::flat_hash_map.906" = type { %"class.absl::container_internal::raw_hash_map.907" }
%"class.absl::container_internal::raw_hash_map.907" = type { %"class.absl::container_internal::raw_hash_set.908" }
%"class.absl::container_internal::raw_hash_set.908" = type { i8*, %"union.absl::container_internal::map_slot_type.909"*, i64, i64, %"class.absl::container_internal::CompressedTuple.910" }
%"union.absl::container_internal::map_slot_type.909" = type opaque
%"class.absl::container_internal::CompressedTuple.910" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.911" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.911" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.angle::PackedEnumMap.921" = type { %"struct.std::__1::array.922" }
%"struct.std::__1::array.922" = type { [5 x %"class.std::__1::vector.923"] }
%"class.std::__1::vector.923" = type { %"class.std::__1::__vector_base.924" }
%"class.std::__1::__vector_base.924" = type { %"class.std::__1::vector.925"*, %"class.std::__1::vector.925"*, %"class.std::__1::__compressed_pair.926" }
%"class.std::__1::vector.925" = type opaque
%"class.std::__1::__compressed_pair.926" = type { %"struct.std::__1::__compressed_pair_elem.927" }
%"struct.std::__1::__compressed_pair_elem.927" = type { %"class.std::__1::vector.925"* }
%"class.rx::vk::BindingPointer.931" = type { %"class.rx::vk::RefCounted.932"* }
%"class.rx::vk::RefCounted.932" = type { i32, [4 x i8], %"class.rx::vk::SamplerHelper" }
%"class.rx::vk::SamplerHelper" = type <{ [8 x i8], %"class.rx::vk::Sampler", %"class.rx::vk::SamplerSerial", [4 x i8] }>
%"class.rx::vk::Sampler" = type { %"class.rx::vk::WrappedObject.933" }
%"class.rx::vk::WrappedObject.933" = type { %struct.VkSampler_T* }
%struct.VkSampler_T = type opaque
%"class.rx::vk::SamplerSerial" = type { i32 }
%"class.rx::vk::TextureDescriptorDesc" = type { i32, %"struct.std::__1::array.934" }
%"struct.std::__1::array.934" = type { [96 x %"struct.rx::vk::TextureDescriptorDesc::TexUnitSerials"] }
%"struct.rx::vk::TextureDescriptorDesc::TexUnitSerials" = type { %"struct.rx::vk::ImageOrBufferViewSubresourceSerial", %"class.rx::vk::SamplerSerial" }
%"struct.rx::vk::ImageOrBufferViewSubresourceSerial" = type { %"class.rx::vk::ImageOrBufferViewSerial", %"struct.rx::vk::ImageSubresourceRange" }
%"struct.rx::vk::ImageSubresourceRange" = type { i32 }
%"class.rx::vk::ShaderBuffersDescriptorDesc" = type { %"class.angle::FastVector.935" }
%"class.angle::FastVector.935" = type { %"struct.std::__1::array.936", i32*, i64, i64 }
%"struct.std::__1::array.936" = type { [32 x i32] }
%"struct.std::__1::array.937" = type { [96 x %"class.rx::TextureVk"*] }
%"struct.std::__1::array.938" = type { [16 x %"class.rx::vk::DynamicBuffer"] }
%"class.rx::vk::CommandPool" = type { %"class.rx::vk::WrappedObject.939" }
%"class.rx::vk::WrappedObject.939" = type { %struct.VkCommandPool_T* }
%struct.VkCommandPool_T = type opaque
%"class.std::__1::vector.940" = type { %"class.std::__1::__vector_base.941" }
%"class.std::__1::__vector_base.941" = type { %"class.rx::vk::GarbageObject"*, %"class.rx::vk::GarbageObject"*, %"class.std::__1::__compressed_pair.942" }
%"class.rx::vk::GarbageObject" = type { i32, %"struct.rx::vk::GarbageHandle_T"* }
%"struct.rx::vk::GarbageHandle_T" = type opaque
%"class.std::__1::__compressed_pair.942" = type { %"struct.std::__1::__compressed_pair_elem.943" }
%"struct.std::__1::__compressed_pair_elem.943" = type { %"class.rx::vk::GarbageObject"* }
%"class.rx::RenderPassCache" = type { %"class.absl::flat_hash_map.947", %"class.rx::CacheStats", %"class.rx::CacheStats" }
%"class.absl::flat_hash_map.947" = type { %"class.absl::container_internal::raw_hash_map.948" }
%"class.absl::container_internal::raw_hash_map.948" = type { %"class.absl::container_internal::raw_hash_set.949" }
%"class.absl::container_internal::raw_hash_set.949" = type { i8*, %"union.absl::container_internal::map_slot_type.950"*, i64, i64, %"class.absl::container_internal::CompressedTuple.951" }
%"union.absl::container_internal::map_slot_type.950" = type { %"struct.std::__1::pair.1479" }
%"struct.std::__1::pair.1479" = type { %"class.rx::vk::RenderPassDesc", %"class.absl::flat_hash_map.1480" }
%"class.absl::flat_hash_map.1480" = type { %"class.absl::container_internal::raw_hash_map.1481" }
%"class.absl::container_internal::raw_hash_map.1481" = type { %"class.absl::container_internal::raw_hash_set.1482" }
%"class.absl::container_internal::raw_hash_set.1482" = type { i8*, %"union.absl::container_internal::map_slot_type.1483"*, i64, i64, %"class.absl::container_internal::CompressedTuple.1484" }
%"union.absl::container_internal::map_slot_type.1483" = type { %"struct.std::__1::pair.1496" }
%"struct.std::__1::pair.1496" = type { %"class.rx::vk::AttachmentOpsArray", %"class.rx::vk::RenderPassHelper" }
%"class.rx::vk::AttachmentOpsArray" = type { %"struct.std::__1::array.972" }
%"struct.std::__1::array.972" = type { [10 x %"struct.rx::vk::PackedAttachmentOpsDesc"] }
%"struct.rx::vk::PackedAttachmentOpsDesc" = type { i32 }
%"class.rx::vk::RenderPassHelper" = type <{ [8 x i8], %"class.rx::vk::RenderPass", %"struct.rx::vk::RenderPassPerfCounters", [3 x i8] }>
%"struct.rx::vk::RenderPassPerfCounters" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.absl::container_internal::CompressedTuple.1484" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.1485" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.1485" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.absl::container_internal::CompressedTuple.951" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.952" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.952" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.rx::vk::CommandBufferHelper" = type { [8 x i8], %"class.angle::PoolAllocator", %"class.angle::PackedEnumMap.962", %"class.angle::BitSetT.971", %"class.rx::vk::priv::SecondaryCommandBuffer", i32, %"class.rx::vk::RenderPassDesc", %"class.rx::vk::AttachmentOpsArray", %"class.rx::vk::Framebuffer", %"struct.gl::Rectangle", %"class.rx::vk::PackedClearValuesArray", i8, %"struct.std::__1::array.975", i32, i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, i32, %"struct.gl::Rectangle", %"struct.gl::Rectangle", %"class.rx::vk::PackedAttachmentIndex", %"class.angle::FastIntegerMap.976", %"class.angle::FastIntegerSet", %"class.rx::vk::ImageHelper"*, %"class.rx::vk::ImageHelper"*, %"class.gl::LevelIndexWrapper", i32, i32, %"class.rx::vk::PackedAttachmentIndex", %"class.rx::vk::PackedImageAttachmentArray", %"class.rx::vk::PackedImageAttachmentArray", %"class.rx::vk::ImageHelper"* }
%"class.angle::PackedEnumMap.962" = type { %"struct.std::__1::array.963" }
%"struct.std::__1::array.963" = type { [14 x %"class.rx::vk::PipelineBarrier"] }
%"class.rx::vk::PipelineBarrier" = type { i32, i32, i32, i32, %"class.std::__1::vector.964" }
%"class.std::__1::vector.964" = type { %"class.std::__1::__vector_base.965" }
%"class.std::__1::__vector_base.965" = type { %struct.VkImageMemoryBarrier*, %struct.VkImageMemoryBarrier*, %"class.std::__1::__compressed_pair.966" }
%struct.VkImageMemoryBarrier = type { i32, i8*, i32, i32, i32, i32, i32, i32, %struct.VkImage_T*, %struct.VkImageSubresourceRange }
%struct.VkImageSubresourceRange = type { i32, i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.966" = type { %"struct.std::__1::__compressed_pair_elem.967" }
%"struct.std::__1::__compressed_pair_elem.967" = type { %struct.VkImageMemoryBarrier* }
%"class.angle::BitSetT.971" = type { i16 }
%"class.rx::vk::Framebuffer" = type { %"class.rx::vk::WrappedObject.973" }
%"class.rx::vk::WrappedObject.973" = type { %struct.VkFramebuffer_T* }
%struct.VkFramebuffer_T = type opaque
%"class.rx::vk::PackedClearValuesArray" = type { %"struct.std::__1::array.974" }
%"struct.std::__1::array.974" = type { [10 x %union.VkClearValue] }
%"struct.std::__1::array.975" = type { [4 x %struct.VkBuffer_T*] }
%struct.VkBuffer_T = type opaque
%"class.angle::FastIntegerMap.976" = type { %"class.angle::FastIntegerSet", %"class.std::__1::vector.977" }
%"class.std::__1::vector.977" = type { %"class.std::__1::__vector_base.978" }
%"class.std::__1::__vector_base.978" = type { i32*, i32*, %"class.std::__1::__compressed_pair.979" }
%"class.std::__1::__compressed_pair.979" = type { %"struct.std::__1::__compressed_pair_elem.980" }
%"struct.std::__1::__compressed_pair_elem.980" = type { i32* }
%"class.rx::vk::PackedAttachmentIndex" = type { i32 }
%"class.rx::vk::PackedImageAttachmentArray" = type { %"struct.std::__1::array.984" }
%"struct.std::__1::array.984" = type { [10 x %"class.rx::vk::ImageHelper"*] }
%"class.angle::FastUnorderedSet" = type { %"class.angle::FastVector.985" }
%"class.angle::FastVector.985" = type { %"struct.std::__1::array.986", %"class.rx::vk::BufferHelper"**, i64, i64 }
%"struct.std::__1::array.986" = type { [4 x %"class.rx::vk::BufferHelper"*] }
%"class.rx::vk::ShaderLibrary" = type { [8 x i8], [24 x %"class.rx::vk::RefCounted.746"], [4 x %"class.rx::vk::RefCounted.746"], [4 x %"class.rx::vk::RefCounted.746"], [3 x %"class.rx::vk::RefCounted.746"], [1 x %"class.rx::vk::RefCounted.746"], [8 x %"class.rx::vk::RefCounted.746"], [1 x %"class.rx::vk::RefCounted.746"], [10 x %"class.rx::vk::RefCounted.746"], [48 x %"class.rx::vk::RefCounted.746"], [43 x %"class.rx::vk::RefCounted.746"], [6 x %"class.rx::vk::RefCounted.746"], [2 x %"class.rx::vk::RefCounted.746"] }
%"class.rx::UtilsVk" = type { [8 x i8], %"class.angle::PackedEnumMap.987", %"class.angle::PackedEnumMap.989", %"class.angle::PackedEnumMap.991", [4 x %"class.rx::vk::ShaderProgramHelper"], [3 x %"class.rx::vk::ShaderProgramHelper"], [1 x %"class.rx::vk::ShaderProgramHelper"], [8 x %"class.rx::vk::ShaderProgramHelper"], %"class.rx::vk::ShaderProgramHelper", [48 x %"class.rx::vk::ShaderProgramHelper"], [43 x %"class.rx::vk::ShaderProgramHelper"], [24 x %"class.rx::vk::ShaderProgramHelper"], [4 x %"class.rx::vk::ShaderProgramHelper"], [6 x %"class.rx::vk::ShaderProgramHelper"], [2 x %"class.rx::vk::ShaderProgramHelper"], [10 x %"class.rx::vk::ShaderProgramHelper"], %"class.std::__1::unordered_map.993", %"class.std::__1::unordered_map.1018", %"class.rx::vk::Sampler", %"class.rx::vk::Sampler", %"struct.rx::InternalShaderPerfCounters", %"struct.rx::InternalShaderPerfCounters" }
%"class.angle::PackedEnumMap.987" = type { %"struct.std::__1::array.988" }
%"struct.std::__1::array.988" = type { [22 x %"class.angle::PackedEnumMap.706"] }
%"class.angle::PackedEnumMap.989" = type { %"struct.std::__1::array.990" }
%"struct.std::__1::array.990" = type { [22 x %"class.rx::vk::BindingPointer"] }
%"class.angle::PackedEnumMap.991" = type { %"struct.std::__1::array.992" }
%"struct.std::__1::array.992" = type { [22 x %"class.rx::vk::DynamicDescriptorPool"] }
%"class.std::__1::unordered_map.993" = type { %"class.std::__1::__hash_table.994" }
%"class.std::__1::__hash_table.994" = type <{ %"class.std::__1::unique_ptr.995", %"class.std::__1::__compressed_pair.1005", %"class.std::__1::__compressed_pair.1010", %"class.std::__1::__compressed_pair.1014", [4 x i8] }>
%"class.std::__1::unique_ptr.995" = type { %"class.std::__1::__compressed_pair.996" }
%"class.std::__1::__compressed_pair.996" = type { %"struct.std::__1::__compressed_pair_elem.997", %"struct.std::__1::__compressed_pair_elem.999" }
%"struct.std::__1::__compressed_pair_elem.997" = type { %"struct.std::__1::__hash_node_base.998"** }
%"struct.std::__1::__hash_node_base.998" = type { %"struct.std::__1::__hash_node_base.998"* }
%"struct.std::__1::__compressed_pair_elem.999" = type { %"class.std::__1::__bucket_list_deallocator.1000" }
%"class.std::__1::__bucket_list_deallocator.1000" = type { %"class.std::__1::__compressed_pair.1001" }
%"class.std::__1::__compressed_pair.1001" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.std::__1::__compressed_pair.1005" = type { %"struct.std::__1::__compressed_pair_elem.1006" }
%"struct.std::__1::__compressed_pair_elem.1006" = type { %"struct.std::__1::__hash_node_base.998" }
%"class.std::__1::__compressed_pair.1010" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.std::__1::__compressed_pair.1014" = type { %"struct.std::__1::__compressed_pair_elem.764" }
%"class.std::__1::unordered_map.1018" = type { %"class.std::__1::__hash_table.1019" }
%"class.std::__1::__hash_table.1019" = type <{ %"class.std::__1::unique_ptr.1020", %"class.std::__1::__compressed_pair.1030", %"class.std::__1::__compressed_pair.1035", %"class.std::__1::__compressed_pair.1038", [4 x i8] }>
%"class.std::__1::unique_ptr.1020" = type { %"class.std::__1::__compressed_pair.1021" }
%"class.std::__1::__compressed_pair.1021" = type { %"struct.std::__1::__compressed_pair_elem.1022", %"struct.std::__1::__compressed_pair_elem.1024" }
%"struct.std::__1::__compressed_pair_elem.1022" = type { %"struct.std::__1::__hash_node_base.1023"** }
%"struct.std::__1::__hash_node_base.1023" = type { %"struct.std::__1::__hash_node_base.1023"* }
%"struct.std::__1::__compressed_pair_elem.1024" = type { %"class.std::__1::__bucket_list_deallocator.1025" }
%"class.std::__1::__bucket_list_deallocator.1025" = type { %"class.std::__1::__compressed_pair.1026" }
%"class.std::__1::__compressed_pair.1026" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.std::__1::__compressed_pair.1030" = type { %"struct.std::__1::__compressed_pair_elem.1031" }
%"struct.std::__1::__compressed_pair_elem.1031" = type { %"struct.std::__1::__hash_node_base.1023" }
%"class.std::__1::__compressed_pair.1035" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.std::__1::__compressed_pair.1038" = type { %"struct.std::__1::__compressed_pair_elem.764" }
%"struct.rx::InternalShaderPerfCounters" = type { i32 }
%"class.rx::vk::DynamicQueryPool" = type { %"class.rx::vk::DynamicallyGrowingPool.base", i32 }
%"class.rx::vk::DynamicallyGrowingPool.base" = type <{ i32 (...)**, i32, [4 x i8], %"class.std::__1::vector.809", %"class.std::__1::vector.817", i64, i32 }>
%"class.std::__1::vector.809" = type { %"class.std::__1::__vector_base.810" }
%"class.std::__1::__vector_base.810" = type { %"class.rx::vk::QueryPool"*, %"class.rx::vk::QueryPool"*, %"class.std::__1::__compressed_pair.812" }
%"class.rx::vk::QueryPool" = type { %"class.rx::vk::WrappedObject.811" }
%"class.rx::vk::WrappedObject.811" = type { %struct.VkQueryPool_T* }
%struct.VkQueryPool_T = type opaque
%"class.std::__1::__compressed_pair.812" = type { %"struct.std::__1::__compressed_pair_elem.813" }
%"struct.std::__1::__compressed_pair_elem.813" = type { %"class.rx::vk::QueryPool"* }
%"class.std::__1::vector.817" = type { %"class.std::__1::__vector_base.818" }
%"class.std::__1::__vector_base.818" = type { %"struct.rx::vk::DynamicallyGrowingPool<rx::vk::QueryPool>::PoolStats"*, %"struct.rx::vk::DynamicallyGrowingPool<rx::vk::QueryPool>::PoolStats"*, %"class.std::__1::__compressed_pair.819" }
%"struct.rx::vk::DynamicallyGrowingPool<rx::vk::QueryPool>::PoolStats" = type opaque
%"class.std::__1::__compressed_pair.819" = type { %"struct.std::__1::__compressed_pair_elem.820" }
%"struct.std::__1::__compressed_pair_elem.820" = type { %"struct.rx::vk::DynamicallyGrowingPool<rx::vk::QueryPool>::PoolStats"* }
%"class.std::__1::vector.1042" = type { %"class.std::__1::__vector_base.1043" }
%"class.std::__1::__vector_base.1043" = type { %"struct.rx::ContextVk::GpuEventQuery"*, %"struct.rx::ContextVk::GpuEventQuery"*, %"class.std::__1::__compressed_pair.1045" }
%"struct.rx::ContextVk::GpuEventQuery" = type { %"struct.std::__1::array.1044", i8, [7 x i8], %"class.rx::vk::QueryHelper" }
%"struct.std::__1::array.1044" = type { [32 x i8] }
%"class.std::__1::__compressed_pair.1045" = type { %"struct.std::__1::__compressed_pair_elem.1046" }
%"struct.std::__1::__compressed_pair_elem.1046" = type { %"struct.rx::ContextVk::GpuEventQuery"* }
%"class.std::__1::vector.1050" = type { %"class.std::__1::__vector_base.1051" }
%"class.std::__1::__vector_base.1051" = type { %"struct.rx::ContextVk::GpuEvent"*, %"struct.rx::ContextVk::GpuEvent"*, %"class.std::__1::__compressed_pair.1052" }
%"struct.rx::ContextVk::GpuEvent" = type { i64, %"struct.std::__1::array.1044", i8 }
%"class.std::__1::__compressed_pair.1052" = type { %"struct.std::__1::__compressed_pair_elem.1053" }
%"struct.std::__1::__compressed_pair_elem.1053" = type { %"struct.rx::ContextVk::GpuEvent"* }
%"class.std::__1::vector.1057" = type { %"class.std::__1::__vector_base.1058" }
%"class.std::__1::__vector_base.1058" = type { %struct.VkSemaphore_T**, %struct.VkSemaphore_T**, %"class.std::__1::__compressed_pair.1059" }
%"class.std::__1::__compressed_pair.1059" = type { %"struct.std::__1::__compressed_pair_elem.1060" }
%"struct.std::__1::__compressed_pair_elem.1060" = type { %struct.VkSemaphore_T** }
%"struct.rx::ContextVk::GpuClockSyncInfo" = type { double, double }
%"struct.rx::vk::PerfCounters" = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.rx::ContextVkPerfCounters" = type { %"class.angle::PackedEnumMap.1064" }
%"class.angle::PackedEnumMap.1064" = type { %"struct.std::__1::array.403" }
%"class.rx::vk::ResourceUseList" = type { i32 (...)**, %"class.std::__1::vector.1065" }
%"class.std::__1::vector.1065" = type { %"class.std::__1::__vector_base.1066" }
%"class.std::__1::__vector_base.1066" = type { %"class.rx::vk::SharedResourceUse"*, %"class.rx::vk::SharedResourceUse"*, %"class.std::__1::__compressed_pair.1067" }
%"class.std::__1::__compressed_pair.1067" = type { %"struct.std::__1::__compressed_pair_elem.1068" }
%"struct.std::__1::__compressed_pair_elem.1068" = type { %"class.rx::vk::SharedResourceUse"* }
%"class.std::__1::vector.1072" = type { %"class.std::__1::__vector_base.1073" }
%"class.std::__1::__vector_base.1073" = type { %struct.VkDescriptorBufferInfo*, %struct.VkDescriptorBufferInfo*, %"class.std::__1::__compressed_pair.1074" }
%struct.VkDescriptorBufferInfo = type { %struct.VkBuffer_T*, i64, i64 }
%"class.std::__1::__compressed_pair.1074" = type { %"struct.std::__1::__compressed_pair_elem.1075" }
%"struct.std::__1::__compressed_pair_elem.1075" = type { %struct.VkDescriptorBufferInfo* }
%"class.std::__1::vector.1079" = type { %"class.std::__1::__vector_base.1080" }
%"class.std::__1::__vector_base.1080" = type { %struct.VkDescriptorImageInfo*, %struct.VkDescriptorImageInfo*, %"class.std::__1::__compressed_pair.1081" }
%struct.VkDescriptorImageInfo = type { %struct.VkSampler_T*, %struct.VkImageView_T*, i32 }
%"class.std::__1::__compressed_pair.1081" = type { %"struct.std::__1::__compressed_pair_elem.1082" }
%"struct.std::__1::__compressed_pair_elem.1082" = type { %struct.VkDescriptorImageInfo* }
%"class.std::__1::vector.1086" = type { %"class.std::__1::__vector_base.1087" }
%"class.std::__1::__vector_base.1087" = type { %struct.VkWriteDescriptorSet*, %struct.VkWriteDescriptorSet*, %"class.std::__1::__compressed_pair.1088" }
%struct.VkWriteDescriptorSet = type { i32, i8*, %struct.VkDescriptorSet_T*, i32, i32, i32, i32, %struct.VkDescriptorImageInfo*, %struct.VkDescriptorBufferInfo*, %struct.VkBufferView_T** }
%struct.VkBufferView_T = type opaque
%"class.std::__1::__compressed_pair.1088" = type { %"struct.std::__1::__compressed_pair_elem.1089" }
%"struct.std::__1::__compressed_pair_elem.1089" = type { %struct.VkWriteDescriptorSet* }
%"class.rx::ShareGroupVk" = type <{ %"class.rx::ShareGroupImpl", %"class.rx::PipelineLayoutCache", %"class.rx::DescriptorSetLayoutCache", %"class.std::__1::set.1148", %"class.std::__1::vector.1158", i8, [7 x i8] }>
%"class.rx::ShareGroupImpl" = type { i32 (...)** }
%"class.rx::PipelineLayoutCache" = type { %"class.rx::HasCacheStats.1093", %"class.std::__1::unordered_map.1094" }
%"class.rx::HasCacheStats.1093" = type { i32 (...)**, %"class.rx::CacheStats" }
%"class.std::__1::unordered_map.1094" = type { %"class.std::__1::__hash_table.1095" }
%"class.std::__1::__hash_table.1095" = type <{ %"class.std::__1::unique_ptr.1096", %"class.std::__1::__compressed_pair.1106", %"class.std::__1::__compressed_pair.1111", %"class.std::__1::__compressed_pair.1115", [4 x i8] }>
%"class.std::__1::unique_ptr.1096" = type { %"class.std::__1::__compressed_pair.1097" }
%"class.std::__1::__compressed_pair.1097" = type { %"struct.std::__1::__compressed_pair_elem.1098", %"struct.std::__1::__compressed_pair_elem.1100" }
%"struct.std::__1::__compressed_pair_elem.1098" = type { %"struct.std::__1::__hash_node_base.1099"** }
%"struct.std::__1::__hash_node_base.1099" = type { %"struct.std::__1::__hash_node_base.1099"* }
%"struct.std::__1::__compressed_pair_elem.1100" = type { %"class.std::__1::__bucket_list_deallocator.1101" }
%"class.std::__1::__bucket_list_deallocator.1101" = type { %"class.std::__1::__compressed_pair.1102" }
%"class.std::__1::__compressed_pair.1102" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.std::__1::__compressed_pair.1106" = type { %"struct.std::__1::__compressed_pair_elem.1107" }
%"struct.std::__1::__compressed_pair_elem.1107" = type { %"struct.std::__1::__hash_node_base.1099" }
%"class.std::__1::__compressed_pair.1111" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.std::__1::__compressed_pair.1115" = type { %"struct.std::__1::__compressed_pair_elem.764" }
%"class.rx::DescriptorSetLayoutCache" = type { %"class.std::__1::unordered_map.1121", %"class.rx::CacheStats" }
%"class.std::__1::unordered_map.1121" = type { %"class.std::__1::__hash_table.1122" }
%"class.std::__1::__hash_table.1122" = type <{ %"class.std::__1::unique_ptr.1123", %"class.std::__1::__compressed_pair.1133", %"class.std::__1::__compressed_pair.1138", %"class.std::__1::__compressed_pair.1142", [4 x i8] }>
%"class.std::__1::unique_ptr.1123" = type { %"class.std::__1::__compressed_pair.1124" }
%"class.std::__1::__compressed_pair.1124" = type { %"struct.std::__1::__compressed_pair_elem.1125", %"struct.std::__1::__compressed_pair_elem.1127" }
%"struct.std::__1::__compressed_pair_elem.1125" = type { %"struct.std::__1::__hash_node_base.1126"** }
%"struct.std::__1::__hash_node_base.1126" = type { %"struct.std::__1::__hash_node_base.1126"* }
%"struct.std::__1::__compressed_pair_elem.1127" = type { %"class.std::__1::__bucket_list_deallocator.1128" }
%"class.std::__1::__bucket_list_deallocator.1128" = type { %"class.std::__1::__compressed_pair.1129" }
%"class.std::__1::__compressed_pair.1129" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.std::__1::__compressed_pair.1133" = type { %"struct.std::__1::__compressed_pair_elem.1134" }
%"struct.std::__1::__compressed_pair_elem.1134" = type { %"struct.std::__1::__hash_node_base.1126" }
%"class.std::__1::__compressed_pair.1138" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.std::__1::__compressed_pair.1142" = type { %"struct.std::__1::__compressed_pair_elem.764" }
%"class.std::__1::set.1148" = type { %"class.std::__1::__tree.1149" }
%"class.std::__1::__tree.1149" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1150", %"class.std::__1::__compressed_pair.1154" }
%"class.std::__1::__compressed_pair.1150" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"class.std::__1::__compressed_pair.1154" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.std::__1::vector.1158" = type { %"class.std::__1::__vector_base.1159" }
%"class.std::__1::__vector_base.1159" = type { %"class.rx::vk::ResourceUseList"*, %"class.rx::vk::ResourceUseList"*, %"class.std::__1::__compressed_pair.1160" }
%"class.std::__1::__compressed_pair.1160" = type { %"struct.std::__1::__compressed_pair_elem.1161" }
%"struct.std::__1::__compressed_pair_elem.1161" = type { %"class.rx::vk::ResourceUseList"* }
%"class.rx::vk::BufferHelper" = type { %"class.rx::vk::Resource", %"class.rx::vk::Buffer", %"class.rx::vk::BufferMemory", i32, i64, i32, i32, i32, i32, i32, %"class.rx::vk::BufferSerial" }
%"class.rx::vk::Buffer" = type { %"class.rx::vk::WrappedObject.843" }
%"class.rx::vk::WrappedObject.843" = type { %struct.VkBuffer_T* }
%"class.rx::vk::BufferMemory" = type { [8 x i8], %"class.rx::vk::Allocation", %"class.rx::vk::DeviceMemory", i8*, i8* }
%"class.rx::vk::Allocation" = type { %"class.rx::vk::WrappedObject.844" }
%"class.rx::vk::WrappedObject.844" = type { %struct.VmaAllocation_T* }
%struct.VmaAllocation_T = type opaque
%"class.rx::vk::DynamicBuffer" = type { i32, i8, i32, i64, %"class.std::__1::unique_ptr.840", i32, i32, i64, i64, i32, %"class.std::__1::vector.849", %"class.std::__1::vector.849" }
%"class.std::__1::unique_ptr.840" = type { %"class.std::__1::__compressed_pair.841" }
%"class.std::__1::__compressed_pair.841" = type { %"struct.std::__1::__compressed_pair_elem.842" }
%"struct.std::__1::__compressed_pair_elem.842" = type { %"class.rx::vk::BufferHelper"* }
%"class.std::__1::vector.849" = type { %"class.std::__1::__vector_base.850" }
%"class.std::__1::__vector_base.850" = type { %"class.std::__1::unique_ptr.840"*, %"class.std::__1::unique_ptr.840"*, %"class.std::__1::__compressed_pair.851" }
%"class.std::__1::__compressed_pair.851" = type { %"struct.std::__1::__compressed_pair_elem.852" }
%"struct.std::__1::__compressed_pair_elem.852" = type { %"class.std::__1::unique_ptr.840"* }
%"class.gl::BinaryInputStream" = type { i8, i64, i8*, i64 }
%"class.angle::PackedEnumMap.1405" = type { %"struct.std::__1::array.1406" }
%"struct.std::__1::array.1406" = type { [6 x i64] }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.gl::BinaryOutputStream" = type { %"class.std::__1::vector.1413" }
%"class.std::__1::vector.1413" = type { %"class.std::__1::__vector_base.1414" }
%"class.std::__1::__vector_base.1414" = type { i8*, i8*, %"class.std::__1::__compressed_pair.1415" }
%"class.std::__1::__compressed_pair.1415" = type { %"struct.std::__1::__compressed_pair_elem.1416" }
%"struct.std::__1::__compressed_pair_elem.1416" = type { i8* }
%"class.angle::PackedEnumMap.1420" = type { %"struct.std::__1::array.1421" }
%"struct.std::__1::array.1421" = type { [6 x %"class.gl::ProgramState"*] }
%"struct.gl::ProgramLinkedResources" = type { %"class.gl::ProgramVaryingPacking", %"class.gl::UniformBlockLinker", %"class.gl::ShaderStorageBlockLinker", %"class.gl::AtomicCounterBufferLinker", %"class.std::__1::vector.1451", %"class.std::__1::vector.46" }
%"class.gl::ProgramVaryingPacking" = type <{ [8 x i8], %"class.angle::PackedEnumMap.1422", %"class.angle::PackedEnumMap.1447", [2 x i8] }>
%"class.angle::PackedEnumMap.1422" = type { %"struct.std::__1::array.1423" }
%"struct.std::__1::array.1423" = type { [6 x %"class.gl::VaryingPacking"] }
%"class.gl::VaryingPacking" = type { %"class.std::__1::vector.1424", %"class.std::__1::vector.1431", %"class.std::__1::vector.1438", %"class.angle::PackedEnumMap.1445", %"class.angle::PackedEnumMap.1445" }
%"class.std::__1::vector.1424" = type { %"class.std::__1::__vector_base.1425" }
%"class.std::__1::__vector_base.1425" = type { %"struct.gl::VaryingPacking::Register"*, %"struct.gl::VaryingPacking::Register"*, %"class.std::__1::__compressed_pair.1426" }
%"struct.gl::VaryingPacking::Register" = type { [4 x i8] }
%"class.std::__1::__compressed_pair.1426" = type { %"struct.std::__1::__compressed_pair_elem.1427" }
%"struct.std::__1::__compressed_pair_elem.1427" = type { %"struct.gl::VaryingPacking::Register"* }
%"class.std::__1::vector.1431" = type { %"class.std::__1::__vector_base.1432" }
%"class.std::__1::__vector_base.1432" = type { %"struct.gl::PackedVaryingRegister"*, %"struct.gl::PackedVaryingRegister"*, %"class.std::__1::__compressed_pair.1433" }
%"struct.gl::PackedVaryingRegister" = type { %"struct.gl::PackedVarying"*, i32, i32, i32, i32 }
%"struct.gl::PackedVarying" = type <{ [8 x i8], %"struct.gl::VaryingInShaderRef", %"struct.gl::VaryingInShaderRef", i32, i32, i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.gl::VaryingInShaderRef" = type { %"struct.sh::ShaderVariable"*, i8, %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.1433" = type { %"struct.std::__1::__compressed_pair_elem.1434" }
%"struct.std::__1::__compressed_pair_elem.1434" = type { %"struct.gl::PackedVaryingRegister"* }
%"class.std::__1::vector.1438" = type { %"class.std::__1::__vector_base.1439" }
%"class.std::__1::__vector_base.1439" = type { %"struct.gl::PackedVarying"*, %"struct.gl::PackedVarying"*, %"class.std::__1::__compressed_pair.1440" }
%"class.std::__1::__compressed_pair.1440" = type { %"struct.std::__1::__compressed_pair_elem.1441" }
%"struct.std::__1::__compressed_pair_elem.1441" = type { %"struct.gl::PackedVarying"* }
%"class.angle::PackedEnumMap.1445" = type { %"struct.std::__1::array.1446" }
%"struct.std::__1::array.1446" = type { [6 x %"class.std::__1::vector.46"] }
%"class.angle::PackedEnumMap.1447" = type { %"struct.std::__1::array.1448" }
%"struct.std::__1::array.1448" = type { [6 x i8] }
%"class.gl::UniformBlockLinker" = type { %"class.gl::InterfaceBlockLinker", %"class.std::__1::vector.104"* }
%"class.gl::InterfaceBlockLinker" = type { i32 (...)**, %"class.angle::PackedEnumMap.1449", %"class.std::__1::vector.111"*, %"class.std::__1::vector.46"* }
%"class.angle::PackedEnumMap.1449" = type { %"struct.std::__1::array.1450" }
%"struct.std::__1::array.1450" = type { [6 x %"class.std::__1::vector.13"*] }
%"class.gl::ShaderStorageBlockLinker" = type { %"class.gl::InterfaceBlockLinker", %"class.std::__1::vector.60"* }
%"class.gl::AtomicCounterBufferLinker" = type { %"class.std::__1::vector.119"* }
%"class.std::__1::vector.1451" = type { %"class.std::__1::__vector_base.1452" }
%"class.std::__1::__vector_base.1452" = type { %"struct.gl::UnusedUniform"*, %"struct.gl::UnusedUniform"*, %"class.std::__1::__compressed_pair.1453" }
%"struct.gl::UnusedUniform" = type <{ %"class.std::__1::basic_string", i8, i8, i8, i8, [4 x i8] }>
%"class.std::__1::__compressed_pair.1453" = type { %"struct.std::__1::__compressed_pair_elem.1454" }
%"struct.std::__1::__compressed_pair_elem.1454" = type { %"struct.gl::UnusedUniform"* }
%"class.std::__1::vector.1458" = type opaque
%"class.rx::(anonymous namespace)::Std140BlockLayoutEncoderFactory" = type { %"class.gl::CustomBlockLayoutEncoderFactory" }
%"class.gl::CustomBlockLayoutEncoderFactory" = type { i32 (...)** }
%"class.gl::ProgramLinkedResourcesLinker" = type { %"class.gl::CustomBlockLayoutEncoderFactory"* }
%"class.gl::TraceEvent::TraceEndOnScopeClose" = type { %"struct.gl::TraceEvent::TraceEndOnScopeClose::Data"*, %"struct.gl::TraceEvent::TraceEndOnScopeClose::Data" }
%"struct.gl::TraceEvent::TraceEndOnScopeClose::Data" = type { %"struct.angle::PlatformMethods"*, i8*, i8* }
%"struct.angle::PlatformMethods" = type { i8*, double (%"struct.angle::PlatformMethods"*)*, double (%"struct.angle::PlatformMethods"*)*, void (%"struct.angle::PlatformMethods"*, i8*)*, void (%"struct.angle::PlatformMethods"*, i8*)*, void (%"struct.angle::PlatformMethods"*, i8*)*, {}*, i64 (%"struct.angle::PlatformMethods"*, i8, i8*, i8*, i64, double, i32, i8**, i8*, i64*, i8)*, void (%"struct.angle::PlatformMethods"*, i8*, i8*, i64)*, void (%"struct.angle::PlatformMethods"*, i8*, i32, i32, i32, i32)*, void (%"struct.angle::PlatformMethods"*, i8*, i32, i32)*, void (%"struct.angle::PlatformMethods"*, i8*, i32)*, void (%"struct.angle::PlatformMethods"*, i8*, i1)*, void (%"struct.angle::PlatformMethods"*, %"struct.angle::FeaturesD3D"*)*, void (%"struct.angle::PlatformMethods"*, %"struct.angle::FeaturesVk"*)*, void (%"struct.angle::PlatformMethods"*, %"struct.std::__1::array.1459"*, i64, i8*)*, void (%"struct.angle::PlatformMethods"*, %"struct.angle::FeaturesMtl"*)*, void (%"struct.angle::PlatformMethods"*, void (i8*)*, i8*)* }
%"struct.angle::FeaturesD3D" = type opaque
%"struct.std::__1::array.1459" = type { [20 x i8] }
%"struct.angle::FeaturesMtl" = type opaque
%"class.angle::PackedEnumMap.1460" = type { %"struct.std::__1::array.1461" }
%"struct.std::__1::array.1461" = type { [6 x %"class.std::__1::vector"*] }
%"class.angle::PackedEnumMap.1462" = type { %"struct.std::__1::array.1463" }
%"struct.std::__1::array.1463" = type { [6 x %"class.std::__1::map.1464"] }
%"class.std::__1::map.1464" = type { %"class.std::__1::__tree.1465" }
%"class.std::__1::__tree.1465" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1466", %"class.std::__1::__compressed_pair.1470" }
%"class.std::__1::__compressed_pair.1466" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"class.std::__1::__compressed_pair.1470" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", [7 x i8], %"struct.std::__1::__value_type" }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"struct.std::__1::__value_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type <{ %"class.std::__1::basic_string", %"struct.sh::BlockMemberInfo", [4 x i8] }>
%"class.rx::(anonymous namespace)::VulkanDefaultBlockEncoder" = type { %"class.sh::Std140BlockEncoder" }
%"class.sh::Std140BlockEncoder" = type { %"class.sh::BlockLayoutEncoder" }
%"class.sh::BlockLayoutEncoder" = type { i32 (...)**, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.angle::PackedEnumMap.1473" = type { %"struct.std::__1::array.1474" }
%"struct.std::__1::array.1474" = type { [6 x %"struct.sh::BlockMemberInfo"] }
%"struct.gl::ActiveVariable" = type <{ i32 (...)**, %"class.angle::BitSetT.62", [7 x i8] }>
%"class.rx::vk::UniformsAndXfbDescriptorDesc" = type { i32, %"struct.std::__1::array.1475", %"struct.std::__1::array.773" }
%"struct.std::__1::array.1475" = type { [5 x %"class.rx::vk::BufferSerial"] }

$_ZN2rx13LinkEventDone4waitEPKN2gl7ContextE = comdat any

$_ZN2rx11ProgramImpl9syncStateEPKN2gl7ContextERKN5angle7BitSetTILm60EmmEE = comdat any

$_ZN2rx9ProgramVk14setUniformImplIfEEviiPKT_j = comdat any

$_ZN2rx9ProgramVk14setUniformImplIiEEviiPKT_j = comdat any

$_ZN2rx9ProgramVk14setUniformImplIjEEviiPKT_j = comdat any

$_ZN2rx9ProgramVk18setUniformMatrixfvILi2ELi2EEEviihPKf = comdat any

$_ZN2rx9ProgramVk18setUniformMatrixfvILi3ELi3EEEviihPKf = comdat any

$_ZN2rx9ProgramVk18setUniformMatrixfvILi4ELi4EEEviihPKf = comdat any

$_ZN2rx9ProgramVk18setUniformMatrixfvILi2ELi3EEEviihPKf = comdat any

$_ZN2rx9ProgramVk18setUniformMatrixfvILi3ELi2EEEviihPKf = comdat any

$_ZN2rx9ProgramVk18setUniformMatrixfvILi2ELi4EEEviihPKf = comdat any

$_ZN2rx9ProgramVk18setUniformMatrixfvILi4ELi2EEEviihPKf = comdat any

$_ZN2rx9ProgramVk18setUniformMatrixfvILi3ELi4EEEviihPKf = comdat any

$_ZN2rx9ProgramVk18setUniformMatrixfvILi4ELi3EEEviihPKf = comdat any

$_ZNK2rx9ProgramVk14getUniformImplIfEEviPT_j = comdat any

$_ZNK2rx9ProgramVk14getUniformImplIiEEviPT_j = comdat any

$_ZNK2rx9ProgramVk14getUniformImplIjEEviPT_j = comdat any

$_ZN2rx9LinkEventD2Ev = comdat any

$_ZN2rx13LinkEventDoneD0Ev = comdat any

$_ZN2rx13LinkEventDone9isLinkingEv = comdat any

$_ZN2rx11ProgramImpl26markUnusedUniformLocationsEPNSt3__16vectorIN2gl16VariableLocationENS1_9allocatorIS4_EEEEPNS2_INS3_14SamplerBindingENS5_IS9_EEEEPNS2_INS3_12ImageBindingENS5_ISD_EEEE = comdat any

$_ZN2gl31CustomBlockLayoutEncoderFactoryD2Ev = comdat any

$_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN2sh15BlockMemberInfoEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE = comdat any

$_ZN2sh18BlockLayoutEncoderD2Ev = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_ = comdat any

$_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN2sh15BlockMemberInfoEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEElEERKT_ = comdat any

$_ZTVN2rx13LinkEventDoneE = comdat any

@_ZTVN2rx9ProgramVkE = hidden unnamed_addr constant { [37 x i8*] } { [37 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.rx::ProgramVk"*)* @_ZN2rx9ProgramVkD2Ev to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*)* @_ZN2rx9ProgramVkD0Ev to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, %"class.gl::Context"*)* @_ZN2rx9ProgramVk7destroyEPKN2gl7ContextE to i8*), i8* bitcast (%"class.rx::LinkEvent"* (%"class.rx::ProgramVk"*, %"class.gl::Context"*, %"class.gl::BinaryInputStream"*, %"class.gl::InfoLog"*)* @_ZN2rx9ProgramVk4loadEPKN2gl7ContextEPNS1_17BinaryInputStreamERNS1_7InfoLogE to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, %"class.gl::Context"*, %"class.gl::BinaryOutputStream"*)* @_ZN2rx9ProgramVk4saveEPKN2gl7ContextEPNS1_18BinaryOutputStreamE to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, i1)* @_ZN2rx9ProgramVk24setBinaryRetrievableHintEb to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, i1)* @_ZN2rx9ProgramVk12setSeparableEb to i8*), i8* bitcast (%"class.rx::LinkEvent"* (%"class.rx::ProgramVk"*, %"class.gl::Context"*, %"struct.gl::ProgramLinkedResources"*, %"class.gl::InfoLog"*, %"class.std::__1::vector.1458"*)* @_ZN2rx9ProgramVk4linkEPKN2gl7ContextERKNS1_22ProgramLinkedResourcesERNS1_7InfoLogERKNSt3__16vectorINS1_17ProgramVaryingRefENSA_9allocatorISC_EEEE to i8*), i8* bitcast (i8 (%"class.rx::ProgramVk"*, %"struct.gl::Caps"*, %"class.gl::InfoLog"*)* @_ZN2rx9ProgramVk8validateERKN2gl4CapsEPNS1_7InfoLogE to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, i32, i32, float*)* @_ZN2rx9ProgramVk13setUniform1fvEiiPKf to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, i32, i32, float*)* @_ZN2rx9ProgramVk13setUniform2fvEiiPKf to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, i32, i32, float*)* @_ZN2rx9ProgramVk13setUniform3fvEiiPKf to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, i32, i32, float*)* @_ZN2rx9ProgramVk13setUniform4fvEiiPKf to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, i32, i32, i32*)* @_ZN2rx9ProgramVk13setUniform1ivEiiPKi to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, i32, i32, i32*)* @_ZN2rx9ProgramVk13setUniform2ivEiiPKi to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, i32, i32, i32*)* @_ZN2rx9ProgramVk13setUniform3ivEiiPKi to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, i32, i32, i32*)* @_ZN2rx9ProgramVk13setUniform4ivEiiPKi to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, i32, i32, i32*)* @_ZN2rx9ProgramVk14setUniform1uivEiiPKj to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, i32, i32, i32*)* @_ZN2rx9ProgramVk14setUniform2uivEiiPKj to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, i32, i32, i32*)* @_ZN2rx9ProgramVk14setUniform3uivEiiPKj to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, i32, i32, i32*)* @_ZN2rx9ProgramVk14setUniform4uivEiiPKj to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, i32, i32, i8, float*)* @_ZN2rx9ProgramVk19setUniformMatrix2fvEiihPKf to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, i32, i32, i8, float*)* @_ZN2rx9ProgramVk19setUniformMatrix3fvEiihPKf to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, i32, i32, i8, float*)* @_ZN2rx9ProgramVk19setUniformMatrix4fvEiihPKf to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, i32, i32, i8, float*)* @_ZN2rx9ProgramVk21setUniformMatrix2x3fvEiihPKf to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, i32, i32, i8, float*)* @_ZN2rx9ProgramVk21setUniformMatrix3x2fvEiihPKf to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, i32, i32, i8, float*)* @_ZN2rx9ProgramVk21setUniformMatrix2x4fvEiihPKf to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, i32, i32, i8, float*)* @_ZN2rx9ProgramVk21setUniformMatrix4x2fvEiihPKf to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, i32, i32, i8, float*)* @_ZN2rx9ProgramVk21setUniformMatrix3x4fvEiihPKf to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, i32, i32, i8, float*)* @_ZN2rx9ProgramVk21setUniformMatrix4x3fvEiihPKf to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, %"class.gl::Context"*, i32, float*)* @_ZNK2rx9ProgramVk12getUniformfvEPKN2gl7ContextEiPf to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, %"class.gl::Context"*, i32, i32*)* @_ZNK2rx9ProgramVk12getUniformivEPKN2gl7ContextEiPi to i8*), i8* bitcast (void (%"class.rx::ProgramVk"*, %"class.gl::Context"*, i32, i32*)* @_ZNK2rx9ProgramVk13getUniformuivEPKN2gl7ContextEiPj to i8*), i8* bitcast (void (%"class.rx::ProgramImpl"*, %"class.std::__1::vector.53"*, %"class.std::__1::vector.126"*, %"class.std::__1::vector.133"*)* @_ZN2rx11ProgramImpl26markUnusedUniformLocationsEPNSt3__16vectorIN2gl16VariableLocationENS1_9allocatorIS4_EEEEPNS2_INS3_14SamplerBindingENS5_IS9_EEEEPNS2_INS3_12ImageBindingENS5_ISD_EEEE to i8*), i8* bitcast (i32 (%"class.rx::ProgramImpl"*, %"class.gl::Context"*, %"class.angle::BitSetT.118"*)* @_ZN2rx11ProgramImpl9syncStateEPKN2gl7ContextERKN5angle7BitSetTILm60EmmEE to i8*)] }, align 8
@_ZZN2rx9ProgramVk4linkEPKN2gl7ContextERKNS1_22ProgramLinkedResourcesERNS1_7InfoLogERKNSt3__16vectorINS1_17ProgramVaryingRefENSA_9allocatorISC_EEEEE31trace_event_unique_catstatic260 = internal unnamed_addr global i8* null, align 8
@_ZGVZN2rx9ProgramVk4linkEPKN2gl7ContextERKNS1_22ProgramLinkedResourcesERNS1_7InfoLogERKNSt3__16vectorINS1_17ProgramVaryingRefENSA_9allocatorISC_EEEEE31trace_event_unique_catstatic260 = internal global i64 0, align 8
@.str = private unnamed_addr constant [10 x i8] c"gpu.angle\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"ProgramVk::link\00", align 1
@.str.2 = private unnamed_addr constant [67 x i8] c"../../third_party/angle/src/libANGLE/renderer/vulkan/ProgramVk.cpp\00", align 1
@__func__._ZN2rx9ProgramVk24resizeUniformBlockMemoryEPNS_9ContextVkERN5angle13PackedEnumMapIN2gl10ShaderTypeEmLm6EEE = private unnamed_addr constant [25 x i8] c"resizeUniformBlockMemory\00", align 1
@_ZTVN2rx13LinkEventDoneE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.rx::LinkEvent"*)* @_ZN2rx9LinkEventD2Ev to i8*), i8* bitcast (void (%"class.rx::LinkEventDone"*)* @_ZN2rx13LinkEventDoneD0Ev to i8*), i8* bitcast (i32 (%"class.rx::LinkEventDone"*, %"class.gl::Context"*)* @_ZN2rx13LinkEventDone4waitEPKN2gl7ContextE to i8*), i8* bitcast (i1 (%"class.rx::LinkEventDone"*)* @_ZN2rx13LinkEventDone9isLinkingEv to i8*)] }, comdat, align 8
@_ZTVN2rx12_GLOBAL__N_131Std140BlockLayoutEncoderFactoryE = internal unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.gl::CustomBlockLayoutEncoderFactory"*)* @_ZN2gl31CustomBlockLayoutEncoderFactoryD2Ev to i8*), i8* bitcast (void (%"class.rx::(anonymous namespace)::Std140BlockLayoutEncoderFactory"*)* @_ZN2rx12_GLOBAL__N_131Std140BlockLayoutEncoderFactoryD0Ev to i8*), i8* bitcast (%"class.sh::BlockLayoutEncoder"* (%"class.rx::(anonymous namespace)::Std140BlockLayoutEncoderFactory"*)* @_ZN2rx12_GLOBAL__N_131Std140BlockLayoutEncoderFactory11makeEncoderEv to i8*)] }, align 8
@_ZTVN2rx12_GLOBAL__N_125VulkanDefaultBlockEncoderE = internal unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::BlockLayoutEncoder"*)* @_ZN2sh18BlockLayoutEncoderD2Ev to i8*), i8* bitcast (void (%"class.rx::(anonymous namespace)::VulkanDefaultBlockEncoder"*)* @_ZN2rx12_GLOBAL__N_125VulkanDefaultBlockEncoderD0Ev to i8*), i8* bitcast (void (%"class.sh::Std140BlockEncoder"*, %"struct.sh::ShaderVariable"*)* @_ZN2sh18Std140BlockEncoder18enterAggregateTypeERKNS_14ShaderVariableE to i8*), i8* bitcast (void (%"class.sh::Std140BlockEncoder"*, %"struct.sh::ShaderVariable"*)* @_ZN2sh18Std140BlockEncoder17exitAggregateTypeERKNS_14ShaderVariableE to i8*), i8* bitcast (void (%"class.sh::Std140BlockEncoder"*, i32, %"class.std::__1::vector"*, i1, i32*, i32*)* @_ZN2sh18Std140BlockEncoder18getBlockLayoutInfoEjRKNSt3__16vectorIjNS1_9allocatorIjEEEEbPiS8_ to i8*), i8* bitcast (void (%"class.rx::(anonymous namespace)::VulkanDefaultBlockEncoder"*, i32, %"class.std::__1::vector"*, i1, i32, i32)* @_ZN2rx12_GLOBAL__N_125VulkanDefaultBlockEncoder13advanceOffsetEjRKNSt3__16vectorIjNS2_9allocatorIjEEEEbii to i8*), i8* bitcast (i64 (%"class.sh::Std140BlockEncoder"*, %"struct.sh::ShaderVariable"*)* @_ZNK2sh18Std140BlockEncoder16getBaseAlignmentERKNS_14ShaderVariableE to i8*), i8* bitcast (i64 (%"class.sh::Std140BlockEncoder"*, i32, i1)* @_ZNK2sh18Std140BlockEncoder20getTypeBaseAlignmentEjb to i8*)] }, align 8

@_ZN2rx9ProgramVkC1ERKN2gl12ProgramStateE = hidden unnamed_addr alias void (%"class.rx::ProgramVk"*, %"class.gl::ProgramState"*), void (%"class.rx::ProgramVk"*, %"class.gl::ProgramState"*)* @_ZN2rx9ProgramVkC2ERKN2gl12ProgramStateE
@_ZN2rx9ProgramVkD1Ev = hidden unnamed_addr alias void (%"class.rx::ProgramVk"*), void (%"class.rx::ProgramVk"*)* @_ZN2rx9ProgramVkD2Ev

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN2rx13LinkEventDone4waitEPKN2gl7ContextE(%"class.rx::LinkEventDone"*, %"class.gl::Context"*) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.rx::LinkEventDone", %"class.rx::LinkEventDone"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  ret i32 %4
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN2rx11ProgramImpl9syncStateEPKN2gl7ContextERKN5angle7BitSetTILm60EmmEE(%"class.rx::ProgramImpl"*, %"class.gl::Context"*, %"class.angle::BitSetT.118"* dereferenceable(8)) unnamed_addr #0 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVkC2ERKN2gl12ProgramStateE(%"class.rx::ProgramVk"*, %"class.gl::ProgramState"* dereferenceable(304)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  store %"class.gl::ProgramState"* %1, %"class.gl::ProgramState"** %4, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2rx9ProgramVkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %5 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 0
  tail call void @_ZN2rx19DefaultUniformBlockC1Ev(%"struct.rx::DefaultUniformBlock"* %5) #13
  %6 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 1
  tail call void @_ZN2rx19DefaultUniformBlockC1Ev(%"struct.rx::DefaultUniformBlock"* %6) #13
  %7 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 2
  tail call void @_ZN2rx19DefaultUniformBlockC1Ev(%"struct.rx::DefaultUniformBlock"* %7) #13
  %8 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 3
  tail call void @_ZN2rx19DefaultUniformBlockC1Ev(%"struct.rx::DefaultUniformBlock"* %8) #13
  %9 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 4
  tail call void @_ZN2rx19DefaultUniformBlockC1Ev(%"struct.rx::DefaultUniformBlock"* %9) #13
  %10 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 5
  tail call void @_ZN2rx19DefaultUniformBlockC1Ev(%"struct.rx::DefaultUniformBlock"* %10) #13
  %11 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 4
  tail call void @_ZN2rx10ShaderInfoC1Ev(%"class.rx::ShaderInfo"* %12) #13
  %13 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 6
  tail call void @_ZN2rx19ProgramExecutableVkC1Ev(%"class.rx::ProgramExecutableVk"* %13) #13
  %14 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 5
  tail call void @_ZN2rx16GlslangWrapperVk32ResetGlslangProgramInterfaceInfoEPNS_27GlslangProgramInterfaceInfoE(%"struct.rx::GlslangProgramInterfaceInfo"* %14) #13
  %15 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 6, i32 19
  store %"class.rx::ProgramVk"* %0, %"class.rx::ProgramVk"** %15, align 8
  ret void
}

declare void @_ZN2rx10ShaderInfoC1Ev(%"class.rx::ShaderInfo"*) unnamed_addr #2

declare void @_ZN2rx19ProgramExecutableVkC1Ev(%"class.rx::ProgramExecutableVk"*) unnamed_addr #2

declare void @_ZN2rx16GlslangWrapperVk32ResetGlslangProgramInterfaceInfoEPNS_27GlslangProgramInterfaceInfoE(%"struct.rx::GlslangProgramInterfaceInfo"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVkD2Ev(%"class.rx::ProgramVk"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2rx9ProgramVkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 6
  tail call void @_ZN2rx19ProgramExecutableVkD1Ev(%"class.rx::ProgramExecutableVk"* %3) #13
  %4 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 4
  tail call void @_ZN2rx10ShaderInfoD1Ev(%"class.rx::ShaderInfo"* %4) #13
  %5 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 5
  tail call void @_ZN2rx19DefaultUniformBlockD1Ev(%"struct.rx::DefaultUniformBlock"* %5) #13
  %6 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 4
  tail call void @_ZN2rx19DefaultUniformBlockD1Ev(%"struct.rx::DefaultUniformBlock"* %6) #13
  %7 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 3
  tail call void @_ZN2rx19DefaultUniformBlockD1Ev(%"struct.rx::DefaultUniformBlock"* %7) #13
  %8 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 2
  tail call void @_ZN2rx19DefaultUniformBlockD1Ev(%"struct.rx::DefaultUniformBlock"* %8) #13
  %9 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 1
  tail call void @_ZN2rx19DefaultUniformBlockD1Ev(%"struct.rx::DefaultUniformBlock"* %9) #13
  %10 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 0
  tail call void @_ZN2rx19DefaultUniformBlockD1Ev(%"struct.rx::DefaultUniformBlock"* %10) #13
  ret void
}

; Function Attrs: nounwind
declare void @_ZN2rx19ProgramExecutableVkD1Ev(%"class.rx::ProgramExecutableVk"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN2rx10ShaderInfoD1Ev(%"class.rx::ShaderInfo"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVkD0Ev(%"class.rx::ProgramVk"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [37 x i8*] }, { [37 x i8*] }* @_ZTVN2rx9ProgramVkE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 6
  tail call void @_ZN2rx19ProgramExecutableVkD1Ev(%"class.rx::ProgramExecutableVk"* %3) #13
  %4 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 4
  tail call void @_ZN2rx10ShaderInfoD1Ev(%"class.rx::ShaderInfo"* %4) #13
  %5 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 5
  tail call void @_ZN2rx19DefaultUniformBlockD1Ev(%"struct.rx::DefaultUniformBlock"* %5) #13
  %6 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 4
  tail call void @_ZN2rx19DefaultUniformBlockD1Ev(%"struct.rx::DefaultUniformBlock"* %6) #13
  %7 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 3
  tail call void @_ZN2rx19DefaultUniformBlockD1Ev(%"struct.rx::DefaultUniformBlock"* %7) #13
  %8 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 2
  tail call void @_ZN2rx19DefaultUniformBlockD1Ev(%"struct.rx::DefaultUniformBlock"* %8) #13
  %9 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 1
  tail call void @_ZN2rx19DefaultUniformBlockD1Ev(%"struct.rx::DefaultUniformBlock"* %9) #13
  %10 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 0
  tail call void @_ZN2rx19DefaultUniformBlockD1Ev(%"struct.rx::DefaultUniformBlock"* %10) #13
  %11 = bitcast %"class.rx::ProgramVk"* %0 to i8*
  tail call void @_ZdlPv(i8* %11) #14
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk7destroyEPKN2gl7ContextE(%"class.rx::ProgramVk"*, %"class.gl::Context"* nocapture readonly) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.gl::Context", %"class.gl::Context"* %1, i64 0, i32 11, i32 0, i32 0, i32 0
  %4 = bitcast %"class.rx::ContextImpl"** %3 to %"class.rx::ContextVk"**
  %5 = load %"class.rx::ContextVk"*, %"class.rx::ContextVk"** %4, align 8
  %6 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 4
  tail call void @_ZN2rx10ShaderInfo7releaseEPNS_9ContextVkE(%"class.rx::ShaderInfo"* %6, %"class.rx::ContextVk"* %5) #13
  %7 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 5
  tail call void @_ZN2rx16GlslangWrapperVk32ResetGlslangProgramInterfaceInfoEPNS_27GlslangProgramInterfaceInfoE(%"struct.rx::GlslangProgramInterfaceInfo"* %7) #13
  %8 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 6
  tail call void @_ZN2rx19ProgramExecutableVk5resetEPNS_9ContextVkE(%"class.rx::ProgramExecutableVk"* %8, %"class.rx::ContextVk"* %5) #13
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk5resetEPNS_9ContextVkE(%"class.rx::ProgramVk"*, %"class.rx::ContextVk"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 4
  tail call void @_ZN2rx10ShaderInfo7releaseEPNS_9ContextVkE(%"class.rx::ShaderInfo"* %3, %"class.rx::ContextVk"* %1) #13
  %4 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 5
  tail call void @_ZN2rx16GlslangWrapperVk32ResetGlslangProgramInterfaceInfoEPNS_27GlslangProgramInterfaceInfoE(%"struct.rx::GlslangProgramInterfaceInfo"* %4) #13
  %5 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 6
  tail call void @_ZN2rx19ProgramExecutableVk5resetEPNS_9ContextVkE(%"class.rx::ProgramExecutableVk"* %5, %"class.rx::ContextVk"* %1) #13
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

declare void @_ZN2rx10ShaderInfo7releaseEPNS_9ContextVkE(%"class.rx::ShaderInfo"*, %"class.rx::ContextVk"*) local_unnamed_addr #2

declare void @_ZN2rx19ProgramExecutableVk5resetEPNS_9ContextVkE(%"class.rx::ProgramExecutableVk"*, %"class.rx::ContextVk"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.rx::LinkEvent"* @_ZN2rx9ProgramVk4loadEPKN2gl7ContextEPNS1_17BinaryInputStreamERNS1_7InfoLogE(%"class.rx::ProgramVk"*, %"class.gl::Context"*, %"class.gl::BinaryInputStream"*, %"class.gl::InfoLog"* nocapture readnone dereferenceable(8)) unnamed_addr #1 align 2 {
  %5 = alloca %"class.angle::PackedEnumMap.1405", align 8
  %6 = alloca %"struct.sh::BlockMemberInfo", align 4
  %7 = getelementptr inbounds %"class.gl::Context", %"class.gl::Context"* %1, i64 0, i32 11, i32 0, i32 0, i32 0
  %8 = bitcast %"class.rx::ContextImpl"** %7 to %"class.rx::ContextVk"**
  %9 = load %"class.rx::ContextVk"*, %"class.rx::ContextVk"** %8, align 8
  %10 = bitcast %"class.angle::PackedEnumMap.1405"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %10) #13
  %11 = getelementptr inbounds %"class.angle::PackedEnumMap.1405", %"class.angle::PackedEnumMap.1405"* %5, i64 0, i32 0, i32 0, i64 0
  %12 = getelementptr inbounds %"class.angle::PackedEnumMap.1405", %"class.angle::PackedEnumMap.1405"* %5, i64 0, i32 0, i32 0, i64 1
  %13 = getelementptr inbounds %"class.angle::PackedEnumMap.1405", %"class.angle::PackedEnumMap.1405"* %5, i64 0, i32 0, i32 0, i64 2
  %14 = getelementptr inbounds %"class.angle::PackedEnumMap.1405", %"class.angle::PackedEnumMap.1405"* %5, i64 0, i32 0, i32 0, i64 3
  %15 = getelementptr inbounds %"class.angle::PackedEnumMap.1405", %"class.angle::PackedEnumMap.1405"* %5, i64 0, i32 0, i32 0, i64 4
  %16 = getelementptr inbounds %"class.angle::PackedEnumMap.1405", %"class.angle::PackedEnumMap.1405"* %5, i64 0, i32 0, i32 0, i64 5
  %17 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 4
  %18 = bitcast %"class.angle::PackedEnumMap.1405"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 48, i1 false)
  tail call void @_ZN2rx10ShaderInfo7releaseEPNS_9ContextVkE(%"class.rx::ShaderInfo"* %17, %"class.rx::ContextVk"* %9) #13
  %19 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 5
  tail call void @_ZN2rx16GlslangWrapperVk32ResetGlslangProgramInterfaceInfoEPNS_27GlslangProgramInterfaceInfoE(%"struct.rx::GlslangProgramInterfaceInfo"* %19) #13
  %20 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 6
  tail call void @_ZN2rx19ProgramExecutableVk5resetEPNS_9ContextVkE(%"class.rx::ProgramExecutableVk"* %20, %"class.rx::ContextVk"* %9) #13
  tail call void @_ZN2rx10ShaderInfo4loadEPN2gl17BinaryInputStreamE(%"class.rx::ShaderInfo"* %17, %"class.gl::BinaryInputStream"* %2) #13
  %21 = tail call %"class.rx::LinkEvent"* @_ZN2rx19ProgramExecutableVk4loadEPN2gl17BinaryInputStreamE(%"class.rx::ProgramExecutableVk"* %20, %"class.gl::BinaryInputStream"* %2) #13
  %22 = icmp eq %"class.rx::LinkEvent"* %21, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %4
  %24 = bitcast %"class.rx::LinkEvent"* %21 to void (%"class.rx::LinkEvent"*)***
  %25 = load void (%"class.rx::LinkEvent"*)**, void (%"class.rx::LinkEvent"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.rx::LinkEvent"*)*, void (%"class.rx::LinkEvent"*)** %25, i64 1
  %27 = load void (%"class.rx::LinkEvent"*)*, void (%"class.rx::LinkEvent"*)** %26, align 8
  tail call void %27(%"class.rx::LinkEvent"* nonnull %21) #13
  br label %28

28:                                               ; preds = %4, %23
  %29 = getelementptr inbounds %"class.gl::BinaryInputStream", %"class.gl::BinaryInputStream"* %2, i64 0, i32 1
  %30 = getelementptr inbounds %"class.gl::BinaryInputStream", %"class.gl::BinaryInputStream"* %2, i64 0, i32 3
  %31 = getelementptr inbounds %"class.gl::BinaryInputStream", %"class.gl::BinaryInputStream"* %2, i64 0, i32 2
  %32 = getelementptr inbounds %"class.gl::BinaryInputStream", %"class.gl::BinaryInputStream"* %2, i64 0, i32 0
  %33 = bitcast %"struct.sh::BlockMemberInfo"* %6 to i8*
  %34 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %6, i64 0, i32 0
  %35 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %6, i64 0, i32 1
  %36 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %6, i64 0, i32 2
  %37 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %6, i64 0, i32 3
  %38 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %6, i64 0, i32 4
  br label %43

39:                                               ; preds = %66
  %40 = load i64, i64* %29, align 8
  %41 = add i64 %40, 8
  %42 = icmp ugt i64 %40, -9
  br i1 %42, label %166, label %163

43:                                               ; preds = %28, %66
  %44 = phi i64 [ 0, %28 ], [ %67, %66 ]
  %45 = load i64, i64* %29, align 8
  %46 = add i64 %45, 8
  %47 = icmp ugt i64 %45, -9
  br i1 %47, label %51, label %48

48:                                               ; preds = %43
  %49 = load i64, i64* %30, align 8
  %50 = icmp ugt i64 %46, %49
  br i1 %50, label %51, label %52

51:                                               ; preds = %43, %48
  store i8 1, i8* %32, align 8
  br label %66

52:                                               ; preds = %48
  %53 = load i8*, i8** %31, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 %45
  %55 = bitcast i8* %54 to i64*
  %56 = load i64, i64* %55, align 1
  store i64 %46, i64* %29, align 8
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %66, label %58

58:                                               ; preds = %52
  %59 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %44, i32 2
  %60 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %44, i32 2, i32 0, i32 1
  %61 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %44, i32 2, i32 0, i32 2, i32 0, i32 0
  %62 = bitcast %"struct.sh::BlockMemberInfo"** %60 to i64*
  %63 = bitcast %"class.std::__1::vector.646"* %59 to i64*
  %64 = bitcast %"struct.sh::BlockMemberInfo"** %61 to i64*
  %65 = getelementptr inbounds %"class.std::__1::vector.646", %"class.std::__1::vector.646"* %59, i64 0, i32 0, i32 0
  br label %69

66:                                               ; preds = %128, %51, %52
  %67 = add nuw nsw i64 %44, 1
  %68 = icmp eq i64 %67, 6
  br i1 %68, label %39, label %43

69:                                               ; preds = %58, %128
  %70 = phi i32 [ 0, %58 ], [ %129, %128 ]
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %33) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %33, i8 -86, i64 16, i1 false)
  store i32 -1, i32* %34, align 4
  store i32 -1, i32* %35, align 4
  store i32 -1, i32* %36, align 4
  store i8 0, i8* %37, align 4
  store i32 -1, i32* %38, align 4
  call void @_ZN2gl19LoadBlockMemberInfoEPNS_17BinaryInputStreamEPN2sh15BlockMemberInfoE(%"class.gl::BinaryInputStream"* %2, %"struct.sh::BlockMemberInfo"* nonnull %6) #13
  %71 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %60, align 8
  %72 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %61, align 8
  %73 = icmp eq %"struct.sh::BlockMemberInfo"* %71, %72
  %74 = ptrtoint %"struct.sh::BlockMemberInfo"* %72 to i64
  br i1 %73, label %79, label %75

75:                                               ; preds = %69
  %76 = bitcast %"struct.sh::BlockMemberInfo"* %71 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* nonnull align 4 %33, i64 20, i1 false) #13
  %77 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %71, i64 1
  %78 = ptrtoint %"struct.sh::BlockMemberInfo"* %77 to i64
  store i64 %78, i64* %62, align 8
  br label %128

79:                                               ; preds = %69
  %80 = ptrtoint %"struct.sh::BlockMemberInfo"* %71 to i64
  %81 = load i64, i64* %63, align 8
  %82 = sub i64 %80, %81
  %83 = sdiv exact i64 %82, 20
  %84 = add nsw i64 %83, 1
  %85 = icmp ugt i64 %84, 922337203685477580
  br i1 %85, label %86, label %88

86:                                               ; preds = %79
  %87 = bitcast %"class.std::__1::vector.646"* %59 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %87) #15
  unreachable

88:                                               ; preds = %79
  %89 = sub i64 %74, %81
  %90 = sdiv exact i64 %89, 20
  %91 = icmp ult i64 %90, 461168601842738790
  br i1 %91, label %92, label %97

92:                                               ; preds = %88
  %93 = shl nsw i64 %90, 1
  %94 = icmp ult i64 %93, %84
  %95 = select i1 %94, i64 %84, i64 %93
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %102, label %97

97:                                               ; preds = %92, %88
  %98 = phi i64 [ %95, %92 ], [ 922337203685477580, %88 ]
  %99 = mul i64 %98, 20
  %100 = call i8* @_Znwm(i64 %99) #14
  %101 = bitcast i8* %100 to %"struct.sh::BlockMemberInfo"*
  br label %102

102:                                              ; preds = %97, %92
  %103 = phi i64 [ %98, %97 ], [ 0, %92 ]
  %104 = phi %"struct.sh::BlockMemberInfo"* [ %101, %97 ], [ null, %92 ]
  %105 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %104, i64 %83
  %106 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %104, i64 %103
  %107 = ptrtoint %"struct.sh::BlockMemberInfo"* %106 to i64
  %108 = bitcast %"struct.sh::BlockMemberInfo"* %105 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %108, i8* nonnull align 4 %33, i64 20, i1 false) #13
  %109 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %105, i64 1
  %110 = ptrtoint %"struct.sh::BlockMemberInfo"* %109 to i64
  %111 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %65, align 8
  %112 = load i64, i64* %62, align 8
  %113 = ptrtoint %"struct.sh::BlockMemberInfo"* %111 to i64
  %114 = sub i64 %112, %113
  %115 = sdiv exact i64 %114, -20
  %116 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %105, i64 %115
  %117 = ptrtoint %"struct.sh::BlockMemberInfo"* %116 to i64
  %118 = icmp sgt i64 %114, 0
  br i1 %118, label %119, label %123

119:                                              ; preds = %102
  %120 = bitcast %"struct.sh::BlockMemberInfo"* %116 to i8*
  %121 = bitcast %"struct.sh::BlockMemberInfo"* %111 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %120, i8* align 4 %121, i64 %114, i1 false) #13
  %122 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %65, align 8
  br label %123

123:                                              ; preds = %119, %102
  %124 = phi %"struct.sh::BlockMemberInfo"* [ %111, %102 ], [ %122, %119 ]
  store i64 %117, i64* %63, align 8
  store i64 %110, i64* %62, align 8
  store i64 %107, i64* %64, align 8
  %125 = icmp eq %"struct.sh::BlockMemberInfo"* %124, null
  br i1 %125, label %128, label %126

126:                                              ; preds = %123
  %127 = bitcast %"struct.sh::BlockMemberInfo"* %124 to i8*
  call void @_ZdlPv(i8* %127) #14
  br label %128

128:                                              ; preds = %75, %123, %126
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %33) #13
  %129 = add i32 %70, 1
  %130 = zext i32 %129 to i64
  %131 = icmp ugt i64 %56, %130
  br i1 %131, label %69, label %66

132:                                              ; preds = %261
  %133 = zext i8 %274 to i32
  %134 = call i32 @llvm.cttz.i32(i32 %133, i1 true) #13, !range !2
  %135 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  br label %136

136:                                              ; preds = %160, %132
  %137 = phi i32 [ %134, %132 ], [ %162, %160 ]
  %138 = phi i8 [ %274, %132 ], [ %158, %160 ]
  %139 = zext i32 %137 to i64
  %140 = getelementptr inbounds %"class.angle::PackedEnumMap.1405", %"class.angle::PackedEnumMap.1405"* %5, i64 0, i32 0, i32 0, i64 %139
  %141 = load i64, i64* %140, align 8
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %146

143:                                              ; preds = %136
  %144 = shl i32 1, %137
  %145 = trunc i32 %144 to i8
  br label %155

146:                                              ; preds = %136
  %147 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %139, i32 1
  %148 = call zeroext i1 @_ZN5angle12MemoryBuffer6resizeEm(%"class.angle::MemoryBuffer"* %147, i64 %141) #13
  br i1 %148, label %149, label %178

149:                                              ; preds = %146
  call void @_ZN5angle12MemoryBuffer4fillEh(%"class.angle::MemoryBuffer"* %147, i8 zeroext 0) #13
  %150 = shl i32 1, %137
  %151 = trunc i32 %150 to i8
  %152 = and i8 %151, 63
  %153 = load i8, i8* %135, align 1
  %154 = or i8 %153, %152
  store i8 %154, i8* %135, align 1
  br label %155

155:                                              ; preds = %149, %143
  %156 = phi i8 [ %145, %143 ], [ %151, %149 ]
  %157 = xor i8 %156, -1
  %158 = and i8 %138, %157
  %159 = icmp eq i8 %158, 0
  br i1 %159, label %183, label %160

160:                                              ; preds = %155
  %161 = zext i8 %158 to i32
  %162 = call i32 @llvm.cttz.i32(i32 %161, i1 true) #13, !range !2
  br label %136

163:                                              ; preds = %39
  %164 = load i64, i64* %30, align 8
  %165 = icmp ugt i64 %41, %164
  br i1 %165, label %166, label %167

166:                                              ; preds = %163, %39
  store i8 1, i8* %32, align 8
  br label %173

167:                                              ; preds = %163
  %168 = load i8*, i8** %31, align 8
  %169 = getelementptr inbounds i8, i8* %168, i64 %40
  %170 = bitcast i8* %169 to i64*
  %171 = load i64, i64* %170, align 1
  store i64 %41, i64* %29, align 8
  %172 = add i64 %40, 16
  br label %173

173:                                              ; preds = %166, %167
  %174 = phi i64 [ %41, %166 ], [ %172, %167 ]
  %175 = phi i64 [ %40, %166 ], [ %41, %167 ]
  %176 = phi i64 [ 0, %166 ], [ %171, %167 ]
  store i64 %176, i64* %11, align 8
  %177 = icmp ugt i64 %175, -9
  br i1 %177, label %201, label %192

178:                                              ; preds = %146
  %179 = bitcast %"class.rx::ContextVk"* %9 to void (%"class.rx::ContextVk"*, i32, i8*, i8*, i32)***
  %180 = load void (%"class.rx::ContextVk"*, i32, i8*, i8*, i32)**, void (%"class.rx::ContextVk"*, i32, i8*, i8*, i32)*** %179, align 8
  %181 = getelementptr inbounds void (%"class.rx::ContextVk"*, i32, i8*, i8*, i32)*, void (%"class.rx::ContextVk"*, i32, i8*, i8*, i32)** %180, i64 67
  %182 = load void (%"class.rx::ContextVk"*, i32, i8*, i8*, i32)*, void (%"class.rx::ContextVk"*, i32, i8*, i8*, i32)** %181, align 8
  call void %182(%"class.rx::ContextVk"* %9, i32 -1, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__func__._ZN2rx9ProgramVk24resizeUniformBlockMemoryEPNS_9ContextVkERN5angle13PackedEnumMapIN2gl10ShaderTypeEmLm6EEE, i64 0, i64 0), i32 402) #13
  br label %185

183:                                              ; preds = %155, %261
  %184 = call i32 @_ZN2rx19ProgramExecutableVk20createPipelineLayoutEPKN2gl7ContextEPNSt3__15arrayINS_2vk11TextureUnitELm96EEE(%"class.rx::ProgramExecutableVk"* %20, %"class.gl::Context"* %1, %"struct.std::__1::array.871"* null) #13
  br label %185

185:                                              ; preds = %183, %178
  %186 = phi i32 [ %184, %183 ], [ 1, %178 ]
  %187 = call i8* @_Znwm(i64 16) #14
  %188 = bitcast i8* %187 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2rx13LinkEventDoneE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %188, align 8
  %189 = getelementptr inbounds i8, i8* %187, i64 8
  %190 = bitcast i8* %189 to i32*
  store i32 %186, i32* %190, align 8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %10) #13
  %191 = bitcast i8* %187 to %"class.rx::LinkEvent"*
  ret %"class.rx::LinkEvent"* %191

192:                                              ; preds = %173
  %193 = load i64, i64* %30, align 8
  %194 = icmp ugt i64 %174, %193
  br i1 %194, label %201, label %195

195:                                              ; preds = %192
  %196 = load i8*, i8** %31, align 8
  %197 = getelementptr inbounds i8, i8* %196, i64 %175
  %198 = bitcast i8* %197 to i64*
  %199 = load i64, i64* %198, align 1
  store i64 %174, i64* %29, align 8
  %200 = add i64 %174, 8
  br label %202

201:                                              ; preds = %192, %173
  store i8 1, i8* %32, align 8
  br label %202

202:                                              ; preds = %201, %195
  %203 = phi i64 [ %174, %201 ], [ %200, %195 ]
  %204 = phi i64 [ %175, %201 ], [ %174, %195 ]
  %205 = phi i64 [ 0, %201 ], [ %199, %195 ]
  store i64 %205, i64* %12, align 8
  %206 = icmp ugt i64 %204, -9
  br i1 %206, label %216, label %207

207:                                              ; preds = %202
  %208 = load i64, i64* %30, align 8
  %209 = icmp ugt i64 %203, %208
  br i1 %209, label %216, label %210

210:                                              ; preds = %207
  %211 = load i8*, i8** %31, align 8
  %212 = getelementptr inbounds i8, i8* %211, i64 %204
  %213 = bitcast i8* %212 to i64*
  %214 = load i64, i64* %213, align 1
  store i64 %203, i64* %29, align 8
  %215 = add i64 %203, 8
  br label %217

216:                                              ; preds = %207, %202
  store i8 1, i8* %32, align 8
  br label %217

217:                                              ; preds = %216, %210
  %218 = phi i64 [ %203, %216 ], [ %215, %210 ]
  %219 = phi i64 [ %204, %216 ], [ %203, %210 ]
  %220 = phi i64 [ 0, %216 ], [ %214, %210 ]
  store i64 %220, i64* %13, align 8
  %221 = icmp ugt i64 %219, -9
  br i1 %221, label %231, label %222

222:                                              ; preds = %217
  %223 = load i64, i64* %30, align 8
  %224 = icmp ugt i64 %218, %223
  br i1 %224, label %231, label %225

225:                                              ; preds = %222
  %226 = load i8*, i8** %31, align 8
  %227 = getelementptr inbounds i8, i8* %226, i64 %219
  %228 = bitcast i8* %227 to i64*
  %229 = load i64, i64* %228, align 1
  store i64 %218, i64* %29, align 8
  %230 = add i64 %218, 8
  br label %232

231:                                              ; preds = %222, %217
  store i8 1, i8* %32, align 8
  br label %232

232:                                              ; preds = %231, %225
  %233 = phi i64 [ %218, %231 ], [ %230, %225 ]
  %234 = phi i64 [ %219, %231 ], [ %218, %225 ]
  %235 = phi i64 [ 0, %231 ], [ %229, %225 ]
  store i64 %235, i64* %14, align 8
  %236 = icmp ugt i64 %234, -9
  br i1 %236, label %246, label %237

237:                                              ; preds = %232
  %238 = load i64, i64* %30, align 8
  %239 = icmp ugt i64 %233, %238
  br i1 %239, label %246, label %240

240:                                              ; preds = %237
  %241 = load i8*, i8** %31, align 8
  %242 = getelementptr inbounds i8, i8* %241, i64 %234
  %243 = bitcast i8* %242 to i64*
  %244 = load i64, i64* %243, align 1
  store i64 %233, i64* %29, align 8
  %245 = add i64 %233, 8
  br label %247

246:                                              ; preds = %237, %232
  store i8 1, i8* %32, align 8
  br label %247

247:                                              ; preds = %246, %240
  %248 = phi i64 [ %233, %246 ], [ %245, %240 ]
  %249 = phi i64 [ %234, %246 ], [ %233, %240 ]
  %250 = phi i64 [ 0, %246 ], [ %244, %240 ]
  store i64 %250, i64* %15, align 8
  %251 = icmp ugt i64 %249, -9
  br i1 %251, label %260, label %252

252:                                              ; preds = %247
  %253 = load i64, i64* %30, align 8
  %254 = icmp ugt i64 %248, %253
  br i1 %254, label %260, label %255

255:                                              ; preds = %252
  %256 = load i8*, i8** %31, align 8
  %257 = getelementptr inbounds i8, i8* %256, i64 %249
  %258 = bitcast i8* %257 to i64*
  %259 = load i64, i64* %258, align 1
  store i64 %248, i64* %29, align 8
  br label %261

260:                                              ; preds = %252, %247
  store i8 1, i8* %32, align 8
  br label %261

261:                                              ; preds = %260, %255
  %262 = phi i64 [ 0, %260 ], [ %259, %255 ]
  store i64 %262, i64* %16, align 8
  %263 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %264 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %263, align 8
  %265 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %264, i64 0, i32 23, i32 0
  %266 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %265, align 8
  %267 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %266, i64 0, i32 55
  %268 = load i8, i8* %267, align 4, !range !3
  %269 = icmp eq i8 %268, 0
  %270 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %266, i64 0, i32 3
  %271 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %266, i64 0, i32 2
  %272 = select i1 %269, %"class.angle::BitSetT.62"* %271, %"class.angle::BitSetT.62"* %270
  %273 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %272, i64 0, i32 0
  %274 = load i8, i8* %273, align 1, !noalias !4
  %275 = icmp eq i8 %274, 0
  br i1 %275, label %183, label %132
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

declare void @_ZN2rx10ShaderInfo4loadEPN2gl17BinaryInputStreamE(%"class.rx::ShaderInfo"*, %"class.gl::BinaryInputStream"*) local_unnamed_addr #2

declare %"class.rx::LinkEvent"* @_ZN2rx19ProgramExecutableVk4loadEPN2gl17BinaryInputStreamE(%"class.rx::ProgramExecutableVk"*, %"class.gl::BinaryInputStream"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

declare void @_ZN2gl19LoadBlockMemberInfoEPNS_17BinaryInputStreamEPN2sh15BlockMemberInfoE(%"class.gl::BinaryInputStream"*, %"struct.sh::BlockMemberInfo"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx9ProgramVk24resizeUniformBlockMemoryEPNS_9ContextVkERN5angle13PackedEnumMapIN2gl10ShaderTypeEmLm6EEE(%"class.rx::ProgramVk"*, %"class.rx::ContextVk"*, %"class.angle::PackedEnumMap.1405"* nocapture readonly dereferenceable(48)) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %5 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %4, align 8
  %6 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %5, i64 0, i32 23, i32 0
  %7 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %6, align 8
  %8 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %7, i64 0, i32 55
  %9 = load i8, i8* %8, align 4, !range !3
  %10 = icmp eq i8 %9, 0
  %11 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %7, i64 0, i32 3
  %12 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %7, i64 0, i32 2
  %13 = select i1 %10, %"class.angle::BitSetT.62"* %12, %"class.angle::BitSetT.62"* %11
  %14 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %13, i64 0, i32 0
  %15 = load i8, i8* %14, align 1, !noalias !7
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %53, label %17

17:                                               ; preds = %3
  %18 = zext i8 %15 to i32
  %19 = tail call i32 @llvm.cttz.i32(i32 %18, i1 true) #13, !range !2
  %20 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  br label %21

21:                                               ; preds = %45, %17
  %22 = phi i32 [ %19, %17 ], [ %47, %45 ]
  %23 = phi i8 [ %15, %17 ], [ %43, %45 ]
  %24 = zext i32 %22 to i64
  %25 = getelementptr inbounds %"class.angle::PackedEnumMap.1405", %"class.angle::PackedEnumMap.1405"* %2, i64 0, i32 0, i32 0, i64 %24
  %26 = load i64, i64* %25, align 8
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %21
  %29 = shl i32 1, %22
  %30 = trunc i32 %29 to i8
  br label %40

31:                                               ; preds = %21
  %32 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %24, i32 1
  %33 = tail call zeroext i1 @_ZN5angle12MemoryBuffer6resizeEm(%"class.angle::MemoryBuffer"* %32, i64 %26) #13
  br i1 %33, label %34, label %48

34:                                               ; preds = %31
  tail call void @_ZN5angle12MemoryBuffer4fillEh(%"class.angle::MemoryBuffer"* %32, i8 zeroext 0) #13
  %35 = shl i32 1, %22
  %36 = trunc i32 %35 to i8
  %37 = and i8 %36, 63
  %38 = load i8, i8* %20, align 1
  %39 = or i8 %38, %37
  store i8 %39, i8* %20, align 1
  br label %40

40:                                               ; preds = %28, %34
  %41 = phi i8 [ %30, %28 ], [ %36, %34 ]
  %42 = xor i8 %41, -1
  %43 = and i8 %23, %42
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %53, label %45

45:                                               ; preds = %40
  %46 = zext i8 %43 to i32
  %47 = tail call i32 @llvm.cttz.i32(i32 %46, i1 true) #13, !range !2
  br label %21

48:                                               ; preds = %31
  %49 = bitcast %"class.rx::ContextVk"* %1 to void (%"class.rx::ContextVk"*, i32, i8*, i8*, i32)***
  %50 = load void (%"class.rx::ContextVk"*, i32, i8*, i8*, i32)**, void (%"class.rx::ContextVk"*, i32, i8*, i8*, i32)*** %49, align 8
  %51 = getelementptr inbounds void (%"class.rx::ContextVk"*, i32, i8*, i8*, i32)*, void (%"class.rx::ContextVk"*, i32, i8*, i8*, i32)** %50, i64 67
  %52 = load void (%"class.rx::ContextVk"*, i32, i8*, i8*, i32)*, void (%"class.rx::ContextVk"*, i32, i8*, i8*, i32)** %51, align 8
  tail call void %52(%"class.rx::ContextVk"* %1, i32 -1, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__func__._ZN2rx9ProgramVk24resizeUniformBlockMemoryEPNS_9ContextVkERN5angle13PackedEnumMapIN2gl10ShaderTypeEmLm6EEE, i64 0, i64 0), i32 402) #13
  br label %53

53:                                               ; preds = %40, %3, %48
  %54 = phi i32 [ 1, %48 ], [ 0, %3 ], [ 0, %40 ]
  ret i32 %54
}

declare i32 @_ZN2rx19ProgramExecutableVk20createPipelineLayoutEPKN2gl7ContextEPNSt3__15arrayINS_2vk11TextureUnitELm96EEE(%"class.rx::ProgramExecutableVk"*, %"class.gl::Context"*, %"struct.std::__1::array.871"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk4saveEPKN2gl7ContextEPNS1_18BinaryOutputStreamE(%"class.rx::ProgramVk"*, %"class.gl::Context"* nocapture readnone, %"class.gl::BinaryOutputStream"*) unnamed_addr #1 align 2 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 4
  tail call void @_ZN2rx10ShaderInfo4saveEPN2gl18BinaryOutputStreamE(%"class.rx::ShaderInfo"* %6, %"class.gl::BinaryOutputStream"* %2) #13
  %7 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 6
  tail call void @_ZN2rx19ProgramExecutableVk4saveEPN2gl18BinaryOutputStreamE(%"class.rx::ProgramExecutableVk"* %7, %"class.gl::BinaryOutputStream"* %2) #13
  %8 = bitcast i64* %4 to i8*
  %9 = getelementptr inbounds %"class.gl::BinaryOutputStream", %"class.gl::BinaryOutputStream"* %2, i64 0, i32 0
  %10 = getelementptr inbounds %"class.gl::BinaryOutputStream", %"class.gl::BinaryOutputStream"* %2, i64 0, i32 0, i32 0, i32 1
  %11 = getelementptr inbounds i64, i64* %4, i64 1
  %12 = bitcast i64* %11 to i8*
  br label %41

13:                                               ; preds = %56
  %14 = bitcast i64* %5 to i8*
  %15 = getelementptr inbounds i64, i64* %5, i64 1
  %16 = bitcast i64* %15 to i8*
  %17 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 0, i32 1, i32 0
  %18 = load i64, i64* %17, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #13
  store i64 %18, i64* %5, align 8
  %19 = load i8*, i8** %10, align 8
  %20 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector.1413"* %9, i8* %19, i8* nonnull %14, i8* %16) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #13
  %21 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 1, i32 1, i32 0
  %22 = load i64, i64* %21, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #13
  store i64 %22, i64* %5, align 8
  %23 = load i8*, i8** %10, align 8
  %24 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector.1413"* %9, i8* %23, i8* nonnull %14, i8* %16) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #13
  %25 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 2, i32 1, i32 0
  %26 = load i64, i64* %25, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #13
  store i64 %26, i64* %5, align 8
  %27 = load i8*, i8** %10, align 8
  %28 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector.1413"* %9, i8* %27, i8* nonnull %14, i8* %16) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #13
  %29 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 3, i32 1, i32 0
  %30 = load i64, i64* %29, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #13
  store i64 %30, i64* %5, align 8
  %31 = load i8*, i8** %10, align 8
  %32 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector.1413"* %9, i8* %31, i8* nonnull %14, i8* %16) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #13
  %33 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 4, i32 1, i32 0
  %34 = load i64, i64* %33, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #13
  store i64 %34, i64* %5, align 8
  %35 = load i8*, i8** %10, align 8
  %36 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector.1413"* %9, i8* %35, i8* nonnull %14, i8* %16) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #13
  %37 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 5, i32 1, i32 0
  %38 = load i64, i64* %37, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #13
  store i64 %38, i64* %5, align 8
  %39 = load i8*, i8** %10, align 8
  %40 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector.1413"* %9, i8* %39, i8* nonnull %14, i8* %16) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #13
  ret void

41:                                               ; preds = %3, %56
  %42 = phi i64 [ 0, %3 ], [ %57, %56 ]
  %43 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %42, i32 2
  %44 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %42, i32 2, i32 0, i32 1
  %45 = bitcast %"struct.sh::BlockMemberInfo"** %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = bitcast %"class.std::__1::vector.646"* %43 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = sub i64 %46, %48
  %50 = sdiv exact i64 %49, 20
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #13
  store i64 %50, i64* %4, align 8
  %51 = load i8*, i8** %10, align 8
  %52 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector.1413"* %9, i8* %51, i8* nonnull %8, i8* %12) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #13
  %53 = icmp eq i64 %49, 0
  br i1 %53, label %56, label %54

54:                                               ; preds = %41
  %55 = getelementptr inbounds %"class.std::__1::vector.646", %"class.std::__1::vector.646"* %43, i64 0, i32 0, i32 0
  br label %59

56:                                               ; preds = %59, %41
  %57 = add nuw nsw i64 %42, 1
  %58 = icmp eq i64 %57, 6
  br i1 %58, label %13, label %41

59:                                               ; preds = %54, %59
  %60 = phi i64 [ 0, %54 ], [ %65, %59 ]
  %61 = phi i32 [ 0, %54 ], [ %64, %59 ]
  %62 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %55, align 8
  %63 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %62, i64 %60
  call void @_ZN2gl20WriteBlockMemberInfoEPNS_18BinaryOutputStreamERKN2sh15BlockMemberInfoE(%"class.gl::BinaryOutputStream"* %2, %"struct.sh::BlockMemberInfo"* dereferenceable(20) %63) #13
  %64 = add i32 %61, 1
  %65 = zext i32 %64 to i64
  %66 = icmp ugt i64 %50, %65
  br i1 %66, label %59, label %56
}

declare void @_ZN2rx10ShaderInfo4saveEPN2gl18BinaryOutputStreamE(%"class.rx::ShaderInfo"*, %"class.gl::BinaryOutputStream"*) local_unnamed_addr #2

declare void @_ZN2rx19ProgramExecutableVk4saveEPN2gl18BinaryOutputStreamE(%"class.rx::ProgramExecutableVk"*, %"class.gl::BinaryOutputStream"*) local_unnamed_addr #2

declare void @_ZN2gl20WriteBlockMemberInfoEPNS_18BinaryOutputStreamERKN2sh15BlockMemberInfoE(%"class.gl::BinaryOutputStream"*, %"struct.sh::BlockMemberInfo"* dereferenceable(20)) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2rx9ProgramVk24setBinaryRetrievableHintEb(%"class.rx::ProgramVk"* nocapture, i1 zeroext) unnamed_addr #6 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2rx9ProgramVk12setSeparableEb(%"class.rx::ProgramVk"* nocapture, i1 zeroext) unnamed_addr #6 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk19fillProgramStateMapEPN5angle13PackedEnumMapIN2gl10ShaderTypeEPKNS3_12ProgramStateELm6EEE(%"class.rx::ProgramVk"* nocapture readonly, %"class.angle::PackedEnumMap.1420"* nocapture) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.angle::PackedEnumMap.1420", %"class.angle::PackedEnumMap.1420"* %1, i64 0, i32 0, i32 0, i64 0
  store %"class.gl::ProgramState"* null, %"class.gl::ProgramState"** %4, align 8
  %5 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %3, align 8
  %6 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %5, i64 0, i32 23, i32 0
  %7 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %6, align 8
  %8 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %7, i64 0, i32 2, i32 0
  %9 = load i8, i8* %8, align 1
  %10 = and i8 %9, 1
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %2
  %13 = ptrtoint %"class.gl::ProgramState"* %5 to i64
  %14 = bitcast %"class.angle::PackedEnumMap.1420"* %1 to i64*
  store i64 %13, i64* %14, align 8
  br label %15

15:                                               ; preds = %2, %12
  %16 = getelementptr inbounds %"class.angle::PackedEnumMap.1420", %"class.angle::PackedEnumMap.1420"* %1, i64 0, i32 0, i32 0, i64 1
  store %"class.gl::ProgramState"* null, %"class.gl::ProgramState"** %16, align 8
  %17 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %3, align 8
  %18 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %17, i64 0, i32 23, i32 0
  %19 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %18, align 8
  %20 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %19, i64 0, i32 2, i32 0
  %21 = load i8, i8* %20, align 1
  %22 = and i8 %21, 2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %27, label %24

24:                                               ; preds = %15
  %25 = ptrtoint %"class.gl::ProgramState"* %17 to i64
  %26 = bitcast %"class.gl::ProgramState"** %16 to i64*
  store i64 %25, i64* %26, align 8
  br label %27

27:                                               ; preds = %24, %15
  %28 = getelementptr inbounds %"class.angle::PackedEnumMap.1420", %"class.angle::PackedEnumMap.1420"* %1, i64 0, i32 0, i32 0, i64 2
  store %"class.gl::ProgramState"* null, %"class.gl::ProgramState"** %28, align 8
  %29 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %3, align 8
  %30 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %29, i64 0, i32 23, i32 0
  %31 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %30, align 8
  %32 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %31, i64 0, i32 2, i32 0
  %33 = load i8, i8* %32, align 1
  %34 = and i8 %33, 4
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %39, label %36

36:                                               ; preds = %27
  %37 = ptrtoint %"class.gl::ProgramState"* %29 to i64
  %38 = bitcast %"class.gl::ProgramState"** %28 to i64*
  store i64 %37, i64* %38, align 8
  br label %39

39:                                               ; preds = %36, %27
  %40 = getelementptr inbounds %"class.angle::PackedEnumMap.1420", %"class.angle::PackedEnumMap.1420"* %1, i64 0, i32 0, i32 0, i64 3
  store %"class.gl::ProgramState"* null, %"class.gl::ProgramState"** %40, align 8
  %41 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %3, align 8
  %42 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %41, i64 0, i32 23, i32 0
  %43 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %42, align 8
  %44 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %43, i64 0, i32 2, i32 0
  %45 = load i8, i8* %44, align 1
  %46 = and i8 %45, 8
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %51, label %48

48:                                               ; preds = %39
  %49 = ptrtoint %"class.gl::ProgramState"* %41 to i64
  %50 = bitcast %"class.gl::ProgramState"** %40 to i64*
  store i64 %49, i64* %50, align 8
  br label %51

51:                                               ; preds = %48, %39
  %52 = getelementptr inbounds %"class.angle::PackedEnumMap.1420", %"class.angle::PackedEnumMap.1420"* %1, i64 0, i32 0, i32 0, i64 4
  store %"class.gl::ProgramState"* null, %"class.gl::ProgramState"** %52, align 8
  %53 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %3, align 8
  %54 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %53, i64 0, i32 23, i32 0
  %55 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %54, align 8
  %56 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %55, i64 0, i32 2, i32 0
  %57 = load i8, i8* %56, align 1
  %58 = and i8 %57, 16
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %63, label %60

60:                                               ; preds = %51
  %61 = ptrtoint %"class.gl::ProgramState"* %53 to i64
  %62 = bitcast %"class.gl::ProgramState"** %52 to i64*
  store i64 %61, i64* %62, align 8
  br label %63

63:                                               ; preds = %60, %51
  %64 = getelementptr inbounds %"class.angle::PackedEnumMap.1420", %"class.angle::PackedEnumMap.1420"* %1, i64 0, i32 0, i32 0, i64 5
  store %"class.gl::ProgramState"* null, %"class.gl::ProgramState"** %64, align 8
  %65 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %3, align 8
  %66 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %65, i64 0, i32 23, i32 0
  %67 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %66, align 8
  %68 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %67, i64 0, i32 3, i32 0
  %69 = load i8, i8* %68, align 1
  %70 = and i8 %69, 32
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %75, label %72

72:                                               ; preds = %63
  %73 = ptrtoint %"class.gl::ProgramState"* %65 to i64
  %74 = bitcast %"class.gl::ProgramState"** %64 to i64*
  store i64 %73, i64* %74, align 8
  br label %75

75:                                               ; preds = %72, %63
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.rx::LinkEvent"* @_ZN2rx9ProgramVk4linkEPKN2gl7ContextERKNS1_22ProgramLinkedResourcesERNS1_7InfoLogERKNSt3__16vectorINS1_17ProgramVaryingRefENSA_9allocatorISC_EEEE(%"class.rx::ProgramVk"*, %"class.gl::Context"*, %"struct.gl::ProgramLinkedResources"* dereferenceable(2392), %"class.gl::InfoLog"* nocapture readnone dereferenceable(8), %"class.std::__1::vector.1458"*) unnamed_addr #1 align 2 {
  %6 = alloca %"class.rx::(anonymous namespace)::Std140BlockLayoutEncoderFactory", align 8
  %7 = alloca %"class.gl::ProgramLinkedResourcesLinker", align 8
  %8 = alloca %"class.gl::TraceEvent::TraceEndOnScopeClose", align 8
  %9 = alloca %"class.angle::PackedEnumMap.1460", align 8
  %10 = load atomic i8, i8* bitcast (i64* @_ZGVZN2rx9ProgramVk4linkEPKN2gl7ContextERKNS1_22ProgramLinkedResourcesERNS1_7InfoLogERKNSt3__16vectorINS1_17ProgramVaryingRefENSA_9allocatorISC_EEEEE31trace_event_unique_catstatic260 to i8*) acquire, align 8
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %18, !prof !10

12:                                               ; preds = %5
  %13 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN2rx9ProgramVk4linkEPKN2gl7ContextERKNS1_22ProgramLinkedResourcesERNS1_7InfoLogERKNSt3__16vectorINS1_17ProgramVaryingRefENSA_9allocatorISC_EEEEE31trace_event_unique_catstatic260) #13
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %12
  %16 = tail call %"struct.angle::PlatformMethods"* @_Z20ANGLEPlatformCurrentv() #13
  %17 = tail call i8* @_ZN5angle27GetTraceCategoryEnabledFlagEPNS_15PlatformMethodsEPKc(%"struct.angle::PlatformMethods"* %16, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0)) #13
  store i8* %17, i8** @_ZZN2rx9ProgramVk4linkEPKN2gl7ContextERKNS1_22ProgramLinkedResourcesERNS1_7InfoLogERKNSt3__16vectorINS1_17ProgramVaryingRefENSA_9allocatorISC_EEEEE31trace_event_unique_catstatic260, align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN2rx9ProgramVk4linkEPKN2gl7ContextERKNS1_22ProgramLinkedResourcesERNS1_7InfoLogERKNSt3__16vectorINS1_17ProgramVaryingRefENSA_9allocatorISC_EEEEE31trace_event_unique_catstatic260) #13
  br label %18

18:                                               ; preds = %12, %15, %5
  %19 = bitcast %"class.gl::TraceEvent::TraceEndOnScopeClose"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %19) #13
  %20 = getelementptr inbounds %"class.gl::TraceEvent::TraceEndOnScopeClose", %"class.gl::TraceEvent::TraceEndOnScopeClose"* %8, i64 0, i32 0
  %21 = getelementptr inbounds %"class.gl::TraceEvent::TraceEndOnScopeClose", %"class.gl::TraceEvent::TraceEndOnScopeClose"* %8, i64 0, i32 1
  %22 = bitcast %"struct.gl::TraceEvent::TraceEndOnScopeClose::Data"* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 24, i1 false)
  store %"struct.gl::TraceEvent::TraceEndOnScopeClose::Data"* null, %"struct.gl::TraceEvent::TraceEndOnScopeClose::Data"** %20, align 8
  %23 = load i8*, i8** @_ZZN2rx9ProgramVk4linkEPKN2gl7ContextERKNS1_22ProgramLinkedResourcesERNS1_7InfoLogERKNSt3__16vectorINS1_17ProgramVaryingRefENSA_9allocatorISC_EEEEE31trace_event_unique_catstatic260, align 8
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %37, label %26

26:                                               ; preds = %18
  %27 = getelementptr inbounds %"class.gl::TraceEvent::TraceEndOnScopeClose", %"class.gl::TraceEvent::TraceEndOnScopeClose"* %8, i64 0, i32 1, i32 2
  %28 = getelementptr inbounds %"class.gl::TraceEvent::TraceEndOnScopeClose", %"class.gl::TraceEvent::TraceEndOnScopeClose"* %8, i64 0, i32 1, i32 1
  %29 = tail call %"struct.angle::PlatformMethods"* @_Z20ANGLEPlatformCurrentv() #13
  %30 = load i8*, i8** @_ZZN2rx9ProgramVk4linkEPKN2gl7ContextERKNS1_22ProgramLinkedResourcesERNS1_7InfoLogERKNSt3__16vectorINS1_17ProgramVaryingRefENSA_9allocatorISC_EEEEE31trace_event_unique_catstatic260, align 8
  %31 = tail call i64 @_ZN5angle13AddTraceEventEPNS_15PlatformMethodsEcPKhPKcyiPS5_S3_PKyh(%"struct.angle::PlatformMethods"* %29, i8 signext 66, i8* %30, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0), i64 0, i32 0, i8** null, i8* null, i64* null, i8 zeroext 0) #13
  %32 = tail call %"struct.angle::PlatformMethods"* @_Z20ANGLEPlatformCurrentv() #13
  %33 = load i64, i64* bitcast (i8** @_ZZN2rx9ProgramVk4linkEPKN2gl7ContextERKNS1_22ProgramLinkedResourcesERNS1_7InfoLogERKNSt3__16vectorINS1_17ProgramVaryingRefENSA_9allocatorISC_EEEEE31trace_event_unique_catstatic260 to i64*), align 8
  %34 = getelementptr inbounds %"class.gl::TraceEvent::TraceEndOnScopeClose", %"class.gl::TraceEvent::TraceEndOnScopeClose"* %8, i64 0, i32 1
  %35 = getelementptr inbounds %"struct.gl::TraceEvent::TraceEndOnScopeClose::Data", %"struct.gl::TraceEvent::TraceEndOnScopeClose::Data"* %34, i64 0, i32 0
  store %"struct.angle::PlatformMethods"* %32, %"struct.angle::PlatformMethods"** %35, align 8
  %36 = bitcast i8** %28 to i64*
  store i64 %33, i64* %36, align 8
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0), i8** %27, align 8
  store %"struct.gl::TraceEvent::TraceEndOnScopeClose::Data"* %34, %"struct.gl::TraceEvent::TraceEndOnScopeClose::Data"** %20, align 8
  br label %37

37:                                               ; preds = %18, %26
  %38 = getelementptr inbounds %"class.gl::Context", %"class.gl::Context"* %1, i64 0, i32 11, i32 0, i32 0, i32 0
  %39 = bitcast %"class.rx::ContextImpl"** %38 to %"class.rx::ContextVk"**
  %40 = load %"class.rx::ContextVk"*, %"class.rx::ContextVk"** %39, align 8
  %41 = bitcast %"class.rx::(anonymous namespace)::Std140BlockLayoutEncoderFactory"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41) #13
  %42 = getelementptr inbounds %"class.rx::(anonymous namespace)::Std140BlockLayoutEncoderFactory", %"class.rx::(anonymous namespace)::Std140BlockLayoutEncoderFactory"* %6, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2rx12_GLOBAL__N_131Std140BlockLayoutEncoderFactoryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %42, align 8
  %43 = bitcast %"class.gl::ProgramLinkedResourcesLinker"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %43) #13
  %44 = getelementptr inbounds %"class.gl::ProgramLinkedResourcesLinker", %"class.gl::ProgramLinkedResourcesLinker"* %7, i64 0, i32 0
  %45 = getelementptr inbounds %"class.rx::(anonymous namespace)::Std140BlockLayoutEncoderFactory", %"class.rx::(anonymous namespace)::Std140BlockLayoutEncoderFactory"* %6, i64 0, i32 0
  store %"class.gl::CustomBlockLayoutEncoderFactory"* %45, %"class.gl::CustomBlockLayoutEncoderFactory"** %44, align 8
  %46 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %47 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %46, align 8
  call void @_ZNK2gl28ProgramLinkedResourcesLinker13linkResourcesERKNS_12ProgramStateERKNS_22ProgramLinkedResourcesE(%"class.gl::ProgramLinkedResourcesLinker"* nonnull %7, %"class.gl::ProgramState"* dereferenceable(304) %47, %"struct.gl::ProgramLinkedResources"* dereferenceable(2392) %2) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41) #13
  %48 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 4
  call void @_ZN2rx10ShaderInfo7releaseEPNS_9ContextVkE(%"class.rx::ShaderInfo"* %48, %"class.rx::ContextVk"* %40) #13
  %49 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 5
  call void @_ZN2rx16GlslangWrapperVk32ResetGlslangProgramInterfaceInfoEPNS_27GlslangProgramInterfaceInfoE(%"struct.rx::GlslangProgramInterfaceInfo"* %49) #13
  %50 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 6
  call void @_ZN2rx19ProgramExecutableVk5resetEPNS_9ContextVkE(%"class.rx::ProgramExecutableVk"* %50, %"class.rx::ContextVk"* %40) #13
  call void @_ZN2rx19ProgramExecutableVk20clearVariableInfoMapEv(%"class.rx::ProgramExecutableVk"* %50) #13
  %51 = bitcast %"class.angle::PackedEnumMap.1460"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %51) #13
  %52 = getelementptr inbounds %"class.rx::ContextVk", %"class.rx::ContextVk"* %40, i64 0, i32 1, i32 1
  %53 = bitcast %"class.angle::PackedEnumMap.1460"* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %53, i8 -86, i64 48, i1 false)
  %54 = load %"class.rx::RendererVk"*, %"class.rx::RendererVk"** %52, align 8
  %55 = getelementptr inbounds %"class.rx::RendererVk", %"class.rx::RendererVk"* %54, i64 0, i32 7
  %56 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %46, align 8
  %57 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 6, i32 15
  call void @_ZN2rx16GlslangWrapperVk13GetShaderCodeERKN5angle10FeaturesVkERKN2gl12ProgramStateERKNS5_22ProgramLinkedResourcesEPNS_27GlslangProgramInterfaceInfoEPNS1_13PackedEnumMapINS5_10ShaderTypeEPKNSt3__16vectorIjNSG_9allocatorIjEEEELm6EEEPNS_30ShaderInterfaceVariableInfoMapE(%"struct.angle::FeaturesVk"* dereferenceable(3672) %55, %"class.gl::ProgramState"* dereferenceable(304) %56, %"struct.gl::ProgramLinkedResources"* dereferenceable(2392) %2, %"struct.rx::GlslangProgramInterfaceInfo"* %49, %"class.angle::PackedEnumMap.1460"* nonnull %9, %"class.rx::ShaderInterfaceVariableInfoMap"* %57) #13
  %58 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %46, align 8
  %59 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %58, i64 0, i32 23, i32 0
  %60 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %59, align 8
  %61 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %60, i64 0, i32 55
  %62 = load i8, i8* %61, align 4, !range !3
  %63 = icmp eq i8 %62, 0
  %64 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %60, i64 0, i32 3
  %65 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %60, i64 0, i32 2
  %66 = select i1 %63, %"class.angle::BitSetT.62"* %65, %"class.angle::BitSetT.62"* %64
  %67 = call i32 @_ZN2rx10ShaderInfo11initShadersERKN5angle7BitSetTILm6EhN2gl10ShaderTypeEEERKNS1_13PackedEnumMapIS4_PKNSt3__16vectorIjNS9_9allocatorIjEEEELm6EEERKNS_30ShaderInterfaceVariableInfoMapE(%"class.rx::ShaderInfo"* %48, %"class.angle::BitSetT.62"* dereferenceable(1) %66, %"class.angle::PackedEnumMap.1460"* nonnull dereferenceable(48) %9, %"class.rx::ShaderInterfaceVariableInfoMap"* dereferenceable(240) %57) #13
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %80

69:                                               ; preds = %37
  %70 = call i32 @_ZN2rx9ProgramVk24initDefaultUniformBlocksEPKN2gl7ContextE(%"class.rx::ProgramVk"* %0, %"class.gl::Context"* %1)
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %80

72:                                               ; preds = %69
  %73 = load %"class.rx::RendererVk"*, %"class.rx::RendererVk"** %52, align 8
  %74 = getelementptr inbounds %"class.rx::RendererVk", %"class.rx::RendererVk"* %73, i64 0, i32 7, i32 47, i32 4
  %75 = load i8, i8* %74, align 8, !range !3
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %78, label %77

77:                                               ; preds = %72
  call void @_ZN2rx19ProgramExecutableVk24resolvePrecisionMismatchERKNSt3__16vectorIN2gl17ProgramVaryingRefENS1_9allocatorIS4_EEEE(%"class.rx::ProgramExecutableVk"* %50, %"class.std::__1::vector.1458"* %4) #13
  br label %78

78:                                               ; preds = %77, %72
  %79 = call i32 @_ZN2rx19ProgramExecutableVk20createPipelineLayoutEPKN2gl7ContextEPNSt3__15arrayINS_2vk11TextureUnitELm96EEE(%"class.rx::ProgramExecutableVk"* %50, %"class.gl::Context"* %1, %"struct.std::__1::array.871"* null) #13
  br label %80

80:                                               ; preds = %69, %37, %78
  %81 = phi i32 [ %79, %78 ], [ %67, %37 ], [ %70, %69 ]
  %82 = call i8* @_Znwm(i64 16) #14
  %83 = bitcast i8* %82 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2rx13LinkEventDoneE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %83, align 8
  %84 = getelementptr inbounds i8, i8* %82, i64 8
  %85 = bitcast i8* %84 to i32*
  store i32 %81, i32* %85, align 8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %51) #13
  %86 = load %"struct.gl::TraceEvent::TraceEndOnScopeClose::Data"*, %"struct.gl::TraceEvent::TraceEndOnScopeClose::Data"** %20, align 8
  %87 = icmp eq %"struct.gl::TraceEvent::TraceEndOnScopeClose::Data"* %86, null
  br i1 %87, label %99, label %88

88:                                               ; preds = %80
  %89 = getelementptr inbounds %"struct.gl::TraceEvent::TraceEndOnScopeClose::Data", %"struct.gl::TraceEvent::TraceEndOnScopeClose::Data"* %86, i64 0, i32 1
  %90 = load i8*, i8** %89, align 8
  %91 = load i8, i8* %90, align 1
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %99, label %93

93:                                               ; preds = %88
  %94 = getelementptr inbounds %"struct.gl::TraceEvent::TraceEndOnScopeClose::Data", %"struct.gl::TraceEvent::TraceEndOnScopeClose::Data"* %86, i64 0, i32 0
  %95 = load %"struct.angle::PlatformMethods"*, %"struct.angle::PlatformMethods"** %94, align 8
  %96 = getelementptr inbounds %"struct.gl::TraceEvent::TraceEndOnScopeClose::Data", %"struct.gl::TraceEvent::TraceEndOnScopeClose::Data"* %86, i64 0, i32 2
  %97 = load i8*, i8** %96, align 8
  %98 = call i64 @_ZN5angle13AddTraceEventEPNS_15PlatformMethodsEcPKhPKcyiPS5_S3_PKyh(%"struct.angle::PlatformMethods"* %95, i8 signext 69, i8* %90, i8* %97, i64 0, i32 0, i8** null, i8* null, i64* null, i8 zeroext 0) #13
  br label %99

99:                                               ; preds = %80, %88, %93
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19) #13
  %100 = bitcast i8* %82 to %"class.rx::LinkEvent"*
  ret %"class.rx::LinkEvent"* %100
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #7

declare i8* @_ZN5angle27GetTraceCategoryEnabledFlagEPNS_15PlatformMethodsEPKc(%"struct.angle::PlatformMethods"*, i8*) local_unnamed_addr #2

declare %"struct.angle::PlatformMethods"* @_Z20ANGLEPlatformCurrentv() local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk13linkResourcesERKN2gl22ProgramLinkedResourcesE(%"class.rx::ProgramVk"* nocapture readonly, %"struct.gl::ProgramLinkedResources"* dereferenceable(2392)) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.rx::(anonymous namespace)::Std140BlockLayoutEncoderFactory", align 8
  %4 = alloca %"class.gl::ProgramLinkedResourcesLinker", align 8
  %5 = bitcast %"class.rx::(anonymous namespace)::Std140BlockLayoutEncoderFactory"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #13
  %6 = getelementptr inbounds %"class.rx::(anonymous namespace)::Std140BlockLayoutEncoderFactory", %"class.rx::(anonymous namespace)::Std140BlockLayoutEncoderFactory"* %3, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2rx12_GLOBAL__N_131Std140BlockLayoutEncoderFactoryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = bitcast %"class.gl::ProgramLinkedResourcesLinker"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #13
  %8 = getelementptr inbounds %"class.gl::ProgramLinkedResourcesLinker", %"class.gl::ProgramLinkedResourcesLinker"* %4, i64 0, i32 0
  %9 = getelementptr inbounds %"class.rx::(anonymous namespace)::Std140BlockLayoutEncoderFactory", %"class.rx::(anonymous namespace)::Std140BlockLayoutEncoderFactory"* %3, i64 0, i32 0
  store %"class.gl::CustomBlockLayoutEncoderFactory"* %9, %"class.gl::CustomBlockLayoutEncoderFactory"** %8, align 8
  %10 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %11 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %10, align 8
  call void @_ZNK2gl28ProgramLinkedResourcesLinker13linkResourcesERKNS_12ProgramStateERKNS_22ProgramLinkedResourcesE(%"class.gl::ProgramLinkedResourcesLinker"* nonnull %4, %"class.gl::ProgramState"* dereferenceable(304) %11, %"struct.gl::ProgramLinkedResources"* dereferenceable(2392) %1) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #13
  ret void
}

declare void @_ZN2rx19ProgramExecutableVk20clearVariableInfoMapEv(%"class.rx::ProgramExecutableVk"*) local_unnamed_addr #2

declare void @_ZN2rx16GlslangWrapperVk13GetShaderCodeERKN5angle10FeaturesVkERKN2gl12ProgramStateERKNS5_22ProgramLinkedResourcesEPNS_27GlslangProgramInterfaceInfoEPNS1_13PackedEnumMapINS5_10ShaderTypeEPKNSt3__16vectorIjNSG_9allocatorIjEEEELm6EEEPNS_30ShaderInterfaceVariableInfoMapE(%"struct.angle::FeaturesVk"* dereferenceable(3672), %"class.gl::ProgramState"* dereferenceable(304), %"struct.gl::ProgramLinkedResources"* dereferenceable(2392), %"struct.rx::GlslangProgramInterfaceInfo"*, %"class.angle::PackedEnumMap.1460"*, %"class.rx::ShaderInterfaceVariableInfoMap"*) local_unnamed_addr #2

declare i32 @_ZN2rx10ShaderInfo11initShadersERKN5angle7BitSetTILm6EhN2gl10ShaderTypeEEERKNS1_13PackedEnumMapIS4_PKNSt3__16vectorIjNS9_9allocatorIjEEEELm6EEERKNS_30ShaderInterfaceVariableInfoMapE(%"class.rx::ShaderInfo"*, %"class.angle::BitSetT.62"* dereferenceable(1), %"class.angle::PackedEnumMap.1460"* dereferenceable(48), %"class.rx::ShaderInterfaceVariableInfoMap"* dereferenceable(240)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx9ProgramVk24initDefaultUniformBlocksEPKN2gl7ContextE(%"class.rx::ProgramVk"*, %"class.gl::Context"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.angle::PackedEnumMap.1462", align 8
  %4 = alloca %"class.angle::PackedEnumMap.1405", align 8
  %5 = getelementptr inbounds %"class.gl::Context", %"class.gl::Context"* %1, i64 0, i32 11, i32 0, i32 0, i32 0
  %6 = bitcast %"class.rx::ContextImpl"** %5 to %"class.rx::ContextVk"**
  %7 = load %"class.rx::ContextVk"*, %"class.rx::ContextVk"** %6, align 8
  %8 = bitcast %"class.angle::PackedEnumMap.1462"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %8) #13
  %9 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 0, i32 0, i32 1, i32 0, i32 0
  %11 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 0, i32 0, i32 0
  %12 = bitcast %"class.std::__1::__tree_node_base"** %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 16, i1 false) #13
  store %"class.std::__1::__tree_end_node"* %10, %"class.std::__1::__tree_end_node"** %11, align 8
  %13 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 1, i32 0, i32 1, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 1, i32 0, i32 1, i32 0, i32 0
  %15 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 1, i32 0, i32 0
  %16 = bitcast %"class.std::__1::__tree_node_base"** %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 16, i1 false) #13
  store %"class.std::__1::__tree_end_node"* %14, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 2, i32 0, i32 1, i32 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 2, i32 0, i32 1, i32 0, i32 0
  %19 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 2, i32 0, i32 0
  %20 = bitcast %"class.std::__1::__tree_node_base"** %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 16, i1 false) #13
  store %"class.std::__1::__tree_end_node"* %18, %"class.std::__1::__tree_end_node"** %19, align 8
  %21 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 3, i32 0, i32 1, i32 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 3, i32 0, i32 1, i32 0, i32 0
  %23 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 3, i32 0, i32 0
  %24 = bitcast %"class.std::__1::__tree_node_base"** %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 16, i1 false) #13
  store %"class.std::__1::__tree_end_node"* %22, %"class.std::__1::__tree_end_node"** %23, align 8
  %25 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 4, i32 0, i32 1, i32 0, i32 0, i32 0
  %26 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 4, i32 0, i32 1, i32 0, i32 0
  %27 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 4, i32 0, i32 0
  %28 = bitcast %"class.std::__1::__tree_node_base"** %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 16, i1 false) #13
  store %"class.std::__1::__tree_end_node"* %26, %"class.std::__1::__tree_end_node"** %27, align 8
  %29 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 5, i32 0, i32 1, i32 0, i32 0, i32 0
  %30 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 5, i32 0, i32 1, i32 0, i32 0
  %31 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 5, i32 0, i32 0
  %32 = bitcast %"class.std::__1::__tree_node_base"** %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 16, i1 false) #13
  store %"class.std::__1::__tree_end_node"* %30, %"class.std::__1::__tree_end_node"** %31, align 8
  %33 = bitcast %"class.angle::PackedEnumMap.1405"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %33) #13
  %34 = bitcast %"class.angle::PackedEnumMap.1405"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 0, i64 48, i1 false)
  call void @_ZN2rx9ProgramVk28generateUniformLayoutMappingERN5angle13PackedEnumMapIN2gl10ShaderTypeENSt3__13mapINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEN2sh15BlockMemberInfoENS5_4lessISC_EENSA_INS5_4pairIKSC_SE_EEEEEELm6EEERNS2_IS4_mLm6EEE(%"class.rx::ProgramVk"* %0, %"class.angle::PackedEnumMap.1462"* nonnull dereferenceable(144) %3, %"class.angle::PackedEnumMap.1405"* nonnull dereferenceable(48) %4)
  call void @_ZN2rx9ProgramVk31initDefaultUniformLayoutMappingERN5angle13PackedEnumMapIN2gl10ShaderTypeENSt3__13mapINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEN2sh15BlockMemberInfoENS5_4lessISC_EENSA_INS5_4pairIKSC_SE_EEEEEELm6EEE(%"class.rx::ProgramVk"* %0, %"class.angle::PackedEnumMap.1462"* nonnull dereferenceable(144) %3)
  %35 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %36 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %35, align 8
  %37 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %36, i64 0, i32 23, i32 0
  %38 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %37, align 8
  %39 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %38, i64 0, i32 55
  %40 = load i8, i8* %39, align 4, !range !3
  %41 = icmp eq i8 %40, 0
  %42 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %38, i64 0, i32 3
  %43 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %38, i64 0, i32 2
  %44 = select i1 %41, %"class.angle::BitSetT.62"* %43, %"class.angle::BitSetT.62"* %42
  %45 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %44, i64 0, i32 0
  %46 = load i8, i8* %45, align 1, !noalias !11
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %84, label %48

48:                                               ; preds = %2
  %49 = zext i8 %46 to i32
  %50 = call i32 @llvm.cttz.i32(i32 %49, i1 true) #13, !range !2
  %51 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  br label %52

52:                                               ; preds = %76, %48
  %53 = phi i32 [ %50, %48 ], [ %78, %76 ]
  %54 = phi i8 [ %46, %48 ], [ %74, %76 ]
  %55 = zext i32 %53 to i64
  %56 = getelementptr inbounds %"class.angle::PackedEnumMap.1405", %"class.angle::PackedEnumMap.1405"* %4, i64 0, i32 0, i32 0, i64 %55
  %57 = load i64, i64* %56, align 8
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %62

59:                                               ; preds = %52
  %60 = shl i32 1, %53
  %61 = trunc i32 %60 to i8
  br label %71

62:                                               ; preds = %52
  %63 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %55, i32 1
  %64 = call zeroext i1 @_ZN5angle12MemoryBuffer6resizeEm(%"class.angle::MemoryBuffer"* %63, i64 %57) #13
  br i1 %64, label %65, label %79

65:                                               ; preds = %62
  call void @_ZN5angle12MemoryBuffer4fillEh(%"class.angle::MemoryBuffer"* %63, i8 zeroext 0) #13
  %66 = shl i32 1, %53
  %67 = trunc i32 %66 to i8
  %68 = and i8 %67, 63
  %69 = load i8, i8* %51, align 1
  %70 = or i8 %69, %68
  store i8 %70, i8* %51, align 1
  br label %71

71:                                               ; preds = %65, %59
  %72 = phi i8 [ %61, %59 ], [ %67, %65 ]
  %73 = xor i8 %72, -1
  %74 = and i8 %54, %73
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %84, label %76

76:                                               ; preds = %71
  %77 = zext i8 %74 to i32
  %78 = call i32 @llvm.cttz.i32(i32 %77, i1 true) #13, !range !2
  br label %52

79:                                               ; preds = %62
  %80 = bitcast %"class.rx::ContextVk"* %7 to void (%"class.rx::ContextVk"*, i32, i8*, i8*, i32)***
  %81 = load void (%"class.rx::ContextVk"*, i32, i8*, i8*, i32)**, void (%"class.rx::ContextVk"*, i32, i8*, i8*, i32)*** %80, align 8
  %82 = getelementptr inbounds void (%"class.rx::ContextVk"*, i32, i8*, i8*, i32)*, void (%"class.rx::ContextVk"*, i32, i8*, i8*, i32)** %81, i64 67
  %83 = load void (%"class.rx::ContextVk"*, i32, i8*, i8*, i32)*, void (%"class.rx::ContextVk"*, i32, i8*, i8*, i32)** %82, align 8
  call void %83(%"class.rx::ContextVk"* %7, i32 -1, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__func__._ZN2rx9ProgramVk24resizeUniformBlockMemoryEPNS_9ContextVkERN5angle13PackedEnumMapIN2gl10ShaderTypeEmLm6EEE, i64 0, i64 0), i32 402) #13
  br label %84

84:                                               ; preds = %71, %2, %79
  %85 = phi i32 [ 1, %79 ], [ 0, %2 ], [ 0, %71 ]
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %33) #13
  %86 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 5, i32 0
  %87 = bitcast %"class.std::__1::__tree_end_node"* %30 to %"class.std::__1::__tree_node"**
  %88 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %87, align 8
  call void @_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN2sh15BlockMemberInfoEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(%"class.std::__1::__tree.1465"* %86, %"class.std::__1::__tree_node"* %88) #13
  %89 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 4, i32 0
  %90 = bitcast %"class.std::__1::__tree_end_node"* %26 to %"class.std::__1::__tree_node"**
  %91 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %90, align 8
  call void @_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN2sh15BlockMemberInfoEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(%"class.std::__1::__tree.1465"* %89, %"class.std::__1::__tree_node"* %91) #13
  %92 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 3, i32 0
  %93 = bitcast %"class.std::__1::__tree_end_node"* %22 to %"class.std::__1::__tree_node"**
  %94 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %93, align 8
  call void @_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN2sh15BlockMemberInfoEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(%"class.std::__1::__tree.1465"* %92, %"class.std::__1::__tree_node"* %94) #13
  %95 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 2, i32 0
  %96 = bitcast %"class.std::__1::__tree_end_node"* %18 to %"class.std::__1::__tree_node"**
  %97 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %96, align 8
  call void @_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN2sh15BlockMemberInfoEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(%"class.std::__1::__tree.1465"* %95, %"class.std::__1::__tree_node"* %97) #13
  %98 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 1, i32 0
  %99 = bitcast %"class.std::__1::__tree_end_node"* %14 to %"class.std::__1::__tree_node"**
  %100 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %99, align 8
  call void @_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN2sh15BlockMemberInfoEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(%"class.std::__1::__tree.1465"* %98, %"class.std::__1::__tree_node"* %100) #13
  %101 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %3, i64 0, i32 0, i32 0, i64 0, i32 0
  %102 = bitcast %"class.std::__1::__tree_end_node"* %10 to %"class.std::__1::__tree_node"**
  %103 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %102, align 8
  call void @_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN2sh15BlockMemberInfoEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(%"class.std::__1::__tree.1465"* nonnull %101, %"class.std::__1::__tree_node"* %103) #13
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %8) #13
  ret i32 %85
}

declare void @_ZN2rx19ProgramExecutableVk24resolvePrecisionMismatchERKNSt3__16vectorIN2gl17ProgramVaryingRefENS1_9allocatorIS4_EEEE(%"class.rx::ProgramExecutableVk"*, %"class.std::__1::vector.1458"*) local_unnamed_addr #2

declare void @_ZNK2gl28ProgramLinkedResourcesLinker13linkResourcesERKNS_12ProgramStateERKNS_22ProgramLinkedResourcesE(%"class.gl::ProgramLinkedResourcesLinker"*, %"class.gl::ProgramState"* dereferenceable(304), %"struct.gl::ProgramLinkedResources"* dereferenceable(2392)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk28generateUniformLayoutMappingERN5angle13PackedEnumMapIN2gl10ShaderTypeENSt3__13mapINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEN2sh15BlockMemberInfoENS5_4lessISC_EENSA_INS5_4pairIKSC_SE_EEEEEELm6EEERNS2_IS4_mLm6EEE(%"class.rx::ProgramVk"* nocapture readonly, %"class.angle::PackedEnumMap.1462"* dereferenceable(144), %"class.angle::PackedEnumMap.1405"* nocapture dereferenceable(48)) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.rx::(anonymous namespace)::VulkanDefaultBlockEncoder", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %7 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %6, align 8
  %8 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 23, i32 0
  %9 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %8, align 8
  %10 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %9, i64 0, i32 55
  %11 = load i8, i8* %10, align 4, !range !3
  %12 = icmp eq i8 %11, 0
  %13 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %9, i64 0, i32 3
  %14 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %9, i64 0, i32 2
  %15 = select i1 %12, %"class.angle::BitSetT.62"* %14, %"class.angle::BitSetT.62"* %13
  %16 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %15, i64 0, i32 0
  %17 = load i8, i8* %16, align 1, !noalias !14
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %31, label %19

19:                                               ; preds = %3
  %20 = zext i8 %17 to i32
  %21 = tail call i32 @llvm.cttz.i32(i32 %20, i1 true) #13, !range !2
  %22 = bitcast %"class.rx::(anonymous namespace)::VulkanDefaultBlockEncoder"* %4 to i8*
  %23 = getelementptr inbounds %"class.rx::(anonymous namespace)::VulkanDefaultBlockEncoder", %"class.rx::(anonymous namespace)::VulkanDefaultBlockEncoder"* %4, i64 0, i32 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.rx::(anonymous namespace)::VulkanDefaultBlockEncoder", %"class.rx::(anonymous namespace)::VulkanDefaultBlockEncoder"* %4, i64 0, i32 0, i32 0, i32 1
  %25 = getelementptr inbounds %"class.rx::(anonymous namespace)::VulkanDefaultBlockEncoder", %"class.rx::(anonymous namespace)::VulkanDefaultBlockEncoder"* %4, i64 0, i32 0
  %26 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  %27 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %28 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %27, i64 0, i32 1, i32 0
  %29 = getelementptr inbounds %"class.rx::(anonymous namespace)::VulkanDefaultBlockEncoder", %"class.rx::(anonymous namespace)::VulkanDefaultBlockEncoder"* %4, i64 0, i32 0, i32 0
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %32

31:                                               ; preds = %58, %3
  ret void

32:                                               ; preds = %64, %19
  %33 = phi %"class.gl::ProgramState"* [ %7, %19 ], [ %67, %64 ]
  %34 = phi i32 [ %21, %19 ], [ %66, %64 ]
  %35 = phi i8 [ %17, %19 ], [ %62, %64 ]
  %36 = zext i32 %34 to i64
  %37 = trunc i32 %34 to i8
  %38 = call %"class.gl::Shader"* @_ZNK2gl12ProgramState17getAttachedShaderENS_10ShaderTypeE(%"class.gl::ProgramState"* %33, i8 zeroext %37) #13
  %39 = icmp eq %"class.gl::Shader"* %38, null
  br i1 %39, label %58, label %40

40:                                               ; preds = %32
  %41 = call dereferenceable(24) %"class.std::__1::vector.6"* @_ZN2gl6Shader11getUniformsEv(%"class.gl::Shader"* nonnull %38) #13
  %42 = getelementptr inbounds %"class.angle::PackedEnumMap.1405", %"class.angle::PackedEnumMap.1405"* %2, i64 0, i32 0, i32 0, i64 %36
  %43 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %41, i64 0, i32 0, i32 0
  %44 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %43, align 8
  %45 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %41, i64 0, i32 0, i32 1
  %46 = load %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"** %45, align 8
  %47 = icmp eq %"struct.sh::ShaderVariable"* %44, %46
  br i1 %47, label %48, label %49

48:                                               ; preds = %40
  store i64 0, i64* %42, align 8
  br label %58

49:                                               ; preds = %40
  %50 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %1, i64 0, i32 0, i32 0, i64 %36
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 16, i1 false) #13
  call void @_ZN2sh18Std140BlockEncoderC2Ev(%"class.sh::Std140BlockEncoder"* nonnull %25) #13
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN2rx12_GLOBAL__N_125VulkanDefaultBlockEncoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %23, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #13
  store i8 0, i8* %28, align 1
  store i8 0, i8* %26, align 8
  call void @_ZN2sh25GetActiveUniformBlockInfoERKNSt3__16vectorINS_14ShaderVariableENS0_9allocatorIS2_EEEERKNS0_12basic_stringIcNS0_11char_traitsIcEENS3_IcEEEEPNS_18BlockLayoutEncoderEPNS0_3mapISC_NS_15BlockMemberInfoENS0_4lessISC_EENS3_INS0_4pairISD_SI_EEEEEE(%"class.std::__1::vector.6"* dereferenceable(24) %41, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %5, %"class.sh::BlockLayoutEncoder"* nonnull %29, %"class.std::__1::map.1464"* %50) #13
  %51 = load i8, i8* %28, align 1
  %52 = icmp slt i8 %51, 0
  br i1 %52, label %53, label %55

53:                                               ; preds = %49
  %54 = load i8*, i8** %30, align 8
  call void @_ZdlPv(i8* %54) #14
  br label %55

55:                                               ; preds = %53, %49
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #13
  %56 = load i64, i64* %24, align 8
  %57 = shl i64 %56, 2
  store i64 %57, i64* %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #13
  br label %58

58:                                               ; preds = %55, %48, %32
  %59 = shl i32 1, %34
  %60 = trunc i32 %59 to i8
  %61 = xor i8 %60, -1
  %62 = and i8 %35, %61
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %31, label %64

64:                                               ; preds = %58
  %65 = zext i8 %62 to i32
  %66 = call i32 @llvm.cttz.i32(i32 %65, i1 true) #13, !range !2
  %67 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %6, align 8
  br label %32
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk31initDefaultUniformLayoutMappingERN5angle13PackedEnumMapIN2gl10ShaderTypeENSt3__13mapINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEN2sh15BlockMemberInfoENS5_4lessISC_EENSA_INS5_4pairIKSC_SE_EEEEEELm6EEE(%"class.rx::ProgramVk"*, %"class.angle::PackedEnumMap.1462"* dereferenceable(144)) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.angle::PackedEnumMap.1473", align 4
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %7 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %6, align 8
  %8 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 23, i32 0
  %9 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %8, align 8
  %10 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 5, i32 0, i32 0
  %11 = load %"struct.gl::VariableLocation"*, %"struct.gl::VariableLocation"** %10, align 8
  %12 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 5, i32 0, i32 1
  %13 = load %"struct.gl::VariableLocation"*, %"struct.gl::VariableLocation"** %12, align 8
  %14 = icmp eq %"struct.gl::VariableLocation"* %11, %13
  br i1 %14, label %47, label %15

15:                                               ; preds = %2
  %16 = bitcast %"class.angle::PackedEnumMap.1473"* %3 to i8*
  %17 = getelementptr inbounds %"class.angle::PackedEnumMap.1473", %"class.angle::PackedEnumMap.1473"* %3, i64 0, i32 0, i32 0, i64 0, i32 0
  %18 = getelementptr inbounds %"class.angle::PackedEnumMap.1473", %"class.angle::PackedEnumMap.1473"* %3, i64 0, i32 0, i32 0, i64 0, i32 1
  %19 = getelementptr inbounds %"class.angle::PackedEnumMap.1473", %"class.angle::PackedEnumMap.1473"* %3, i64 0, i32 0, i32 0, i64 0, i32 2
  %20 = getelementptr inbounds %"class.angle::PackedEnumMap.1473", %"class.angle::PackedEnumMap.1473"* %3, i64 0, i32 0, i32 0, i64 0, i32 3
  %21 = getelementptr inbounds %"class.angle::PackedEnumMap.1473", %"class.angle::PackedEnumMap.1473"* %3, i64 0, i32 0, i32 0, i64 0, i32 4
  %22 = getelementptr inbounds %"class.angle::PackedEnumMap.1473", %"class.angle::PackedEnumMap.1473"* %3, i64 0, i32 0, i32 0, i64 1, i32 3
  %23 = bitcast i32* %21 to i8*
  %24 = getelementptr inbounds %"class.angle::PackedEnumMap.1473", %"class.angle::PackedEnumMap.1473"* %3, i64 0, i32 0, i32 0, i64 1, i32 4
  %25 = getelementptr inbounds %"class.angle::PackedEnumMap.1473", %"class.angle::PackedEnumMap.1473"* %3, i64 0, i32 0, i32 0, i64 2, i32 3
  %26 = bitcast i32* %24 to i8*
  %27 = getelementptr inbounds %"class.angle::PackedEnumMap.1473", %"class.angle::PackedEnumMap.1473"* %3, i64 0, i32 0, i32 0, i64 2, i32 4
  %28 = getelementptr inbounds %"class.angle::PackedEnumMap.1473", %"class.angle::PackedEnumMap.1473"* %3, i64 0, i32 0, i32 0, i64 3, i32 3
  %29 = bitcast i32* %27 to i8*
  %30 = getelementptr inbounds %"class.angle::PackedEnumMap.1473", %"class.angle::PackedEnumMap.1473"* %3, i64 0, i32 0, i32 0, i64 3, i32 4
  %31 = getelementptr inbounds %"class.angle::PackedEnumMap.1473", %"class.angle::PackedEnumMap.1473"* %3, i64 0, i32 0, i32 0, i64 4, i32 3
  %32 = bitcast i32* %30 to i8*
  %33 = getelementptr inbounds %"class.angle::PackedEnumMap.1473", %"class.angle::PackedEnumMap.1473"* %3, i64 0, i32 0, i32 0, i64 4, i32 4
  %34 = getelementptr inbounds %"class.angle::PackedEnumMap.1473", %"class.angle::PackedEnumMap.1473"* %3, i64 0, i32 0, i32 0, i64 5, i32 3
  %35 = bitcast i32* %33 to i8*
  %36 = getelementptr inbounds %"class.angle::PackedEnumMap.1473", %"class.angle::PackedEnumMap.1473"* %3, i64 0, i32 0, i32 0, i64 5, i32 4
  %37 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %9, i64 0, i32 30, i32 0, i32 0
  %38 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  %39 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  %41 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %42 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %41, i64 0, i32 1, i32 0
  %43 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %9, i64 0, i32 55
  %44 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %9, i64 0, i32 3
  %45 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %9, i64 0, i32 2
  %46 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  br label %48

47:                                               ; preds = %142, %2
  ret void

48:                                               ; preds = %15, %142
  %49 = phi %"struct.gl::VariableLocation"* [ %11, %15 ], [ %143, %142 ]
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %16) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %16, i8 -86, i64 116, i1 false)
  store i32 -1, i32* %17, align 4
  store i32 -1, i32* %18, align 4
  store i32 -1, i32* %19, align 4
  store i8 0, i8* %20, align 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %23, i8 -1, i64 16, i1 false) #13
  store i8 0, i8* %22, align 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %26, i8 -1, i64 16, i1 false) #13
  store i8 0, i8* %25, align 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %29, i8 -1, i64 16, i1 false) #13
  store i8 0, i8* %28, align 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %32, i8 -1, i64 16, i1 false) #13
  store i8 0, i8* %31, align 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %35, i8 -1, i64 16, i1 false) #13
  store i8 0, i8* %34, align 4
  store i32 -1, i32* %36, align 4
  %50 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %49, i64 0, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, -1
  br i1 %52, label %135, label %53

53:                                               ; preds = %48
  %54 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %49, i64 0, i32 2
  %55 = load i8, i8* %54, align 4, !range !3
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %57, label %135

57:                                               ; preds = %53
  %58 = zext i32 %51 to i64
  %59 = load %"struct.gl::LinkedUniform"*, %"struct.gl::LinkedUniform"** %37, align 8
  %60 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %59, i64 %58, i32 3
  %61 = load i32, i32* %60, align 8
  %62 = icmp eq i32 %61, -1
  br i1 %62, label %63, label %135

63:                                               ; preds = %57
  %64 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %59, i64 %58, i32 2
  %65 = load %"struct.gl::UniformTypeInfo"*, %"struct.gl::UniformTypeInfo"** %64, align 8
  %66 = getelementptr inbounds %"struct.gl::UniformTypeInfo", %"struct.gl::UniformTypeInfo"* %65, i64 0, i32 14
  %67 = load i8, i8* %66, align 8, !range !3
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %69, label %135

69:                                               ; preds = %63
  %70 = getelementptr inbounds %"struct.gl::UniformTypeInfo", %"struct.gl::UniformTypeInfo"* %65, i64 0, i32 16
  %71 = load i8, i8* %70, align 2, !range !3
  %72 = icmp eq i8 %71, 0
  br i1 %72, label %73, label %135

73:                                               ; preds = %69
  %74 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %59, i64 %58, i32 1, i32 18
  %75 = load i8, i8* %74, align 2, !range !3
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %77, label %135

77:                                               ; preds = %73
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %38) #13
  %78 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %59, i64 %58, i32 1, i32 2
  %79 = bitcast %"class.std::__1::basic_string"* %78 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %80 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %79, i64 0, i32 1, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %46, i8 -86, i64 24, i1 false)
  %81 = load i8, i8* %80, align 1
  %82 = icmp slt i8 %81, 0
  br i1 %82, label %85, label %83

83:                                               ; preds = %77
  %84 = bitcast %"class.std::__1::basic_string"* %78 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %38, i8* align 8 %84, i64 24, i1 false) #13
  br label %90

85:                                               ; preds = %77
  %86 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %78, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %87 = load i8*, i8** %86, align 8
  %88 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %59, i64 %58, i32 1, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %89 = load i64, i64* %88, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* nonnull %4, i8* %87, i64 %89) #13
  br label %90

90:                                               ; preds = %83, %85
  %91 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %59, i64 %58, i32 1, i32 4, i32 0, i32 0
  %92 = load i32*, i32** %91, align 8
  %93 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %59, i64 %58, i32 1, i32 4, i32 0, i32 1
  %94 = load i32*, i32** %93, align 8
  %95 = icmp eq i32* %92, %94
  br i1 %95, label %102, label %96

96:                                               ; preds = %90
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %40) #13
  call void @_ZN2gl19StripLastArrayIndexERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.std::__1::basic_string"* nonnull sret %5, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %4) #13
  %97 = load i8, i8* %42, align 1
  %98 = icmp slt i8 %97, 0
  br i1 %98, label %99, label %101

99:                                               ; preds = %96
  %100 = load i8*, i8** %39, align 8
  call void @_ZdlPv(i8* %100) #14
  br label %101

101:                                              ; preds = %99, %96
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %38, i8* nonnull align 8 %40, i64 24, i1 false) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %40) #13
  br label %102

102:                                              ; preds = %90, %101
  %103 = load i8, i8* %43, align 4, !range !3
  %104 = icmp eq i8 %103, 0
  %105 = select i1 %104, %"class.angle::BitSetT.62"* %45, %"class.angle::BitSetT.62"* %44
  %106 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %105, i64 0, i32 0
  %107 = load i8, i8* %106, align 1, !noalias !17
  %108 = icmp eq i8 %107, 0
  br i1 %108, label %109, label %115

109:                                              ; preds = %129, %102
  %110 = load i8, i8* %42, align 1
  %111 = icmp slt i8 %110, 0
  br i1 %111, label %112, label %114

112:                                              ; preds = %109
  %113 = load i8*, i8** %39, align 8
  call void @_ZdlPv(i8* %113) #14
  br label %114

114:                                              ; preds = %109, %112
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %38) #13
  br label %135

115:                                              ; preds = %102, %129
  %116 = phi i8 [ %133, %129 ], [ %107, %102 ]
  %117 = zext i8 %116 to i32
  %118 = call i32 @llvm.cttz.i32(i32 %117, i1 true) #13, !range !2
  %119 = zext i32 %118 to i64
  %120 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %1, i64 0, i32 0, i32 0, i64 %119, i32 0
  %121 = call %"class.std::__1::__tree_end_node"* @_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN2sh15BlockMemberInfoEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEElEERKT_(%"class.std::__1::__tree.1465"* %120, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %4) #13
  %122 = getelementptr inbounds %"class.angle::PackedEnumMap.1462", %"class.angle::PackedEnumMap.1462"* %1, i64 0, i32 0, i32 0, i64 %119, i32 0, i32 1, i32 0, i32 0
  %123 = icmp eq %"class.std::__1::__tree_end_node"* %121, %122
  br i1 %123, label %129, label %124

124:                                              ; preds = %115
  %125 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %121, i64 7
  %126 = getelementptr inbounds %"class.angle::PackedEnumMap.1473", %"class.angle::PackedEnumMap.1473"* %3, i64 0, i32 0, i32 0, i64 %119
  %127 = bitcast %"struct.sh::BlockMemberInfo"* %126 to i8*
  %128 = bitcast %"class.std::__1::__tree_end_node"* %125 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %127, i8* align 4 %128, i64 20, i1 false)
  br label %129

129:                                              ; preds = %115, %124
  %130 = shl i32 1, %118
  %131 = trunc i32 %130 to i8
  %132 = xor i8 %131, -1
  %133 = and i8 %116, %132
  %134 = icmp eq i8 %133, 0
  br i1 %134, label %109, label %115

135:                                              ; preds = %69, %63, %48, %57, %114, %73, %53
  %136 = load i8, i8* %43, align 4, !range !3
  %137 = icmp eq i8 %136, 0
  %138 = select i1 %137, %"class.angle::BitSetT.62"* %45, %"class.angle::BitSetT.62"* %44
  %139 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %138, i64 0, i32 0
  %140 = load i8, i8* %139, align 1, !noalias !20
  %141 = icmp eq i8 %140, 0
  br i1 %141, label %142, label %145

142:                                              ; preds = %218, %135
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %16) #13
  %143 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %49, i64 1
  %144 = icmp eq %"struct.gl::VariableLocation"* %143, %13
  br i1 %144, label %47, label %48

145:                                              ; preds = %135, %218
  %146 = phi i8 [ %222, %218 ], [ %140, %135 ]
  %147 = zext i8 %146 to i32
  %148 = call i32 @llvm.cttz.i32(i32 %147, i1 true) #13, !range !2
  %149 = zext i32 %148 to i64
  %150 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %149, i32 2
  %151 = getelementptr inbounds %"class.angle::PackedEnumMap.1473", %"class.angle::PackedEnumMap.1473"* %3, i64 0, i32 0, i32 0, i64 %149
  %152 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %149, i32 2, i32 0, i32 1
  %153 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %152, align 8
  %154 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %149, i32 2, i32 0, i32 2, i32 0, i32 0
  %155 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %154, align 8
  %156 = icmp eq %"struct.sh::BlockMemberInfo"* %153, %155
  %157 = ptrtoint %"struct.sh::BlockMemberInfo"* %155 to i64
  br i1 %156, label %164, label %158

158:                                              ; preds = %145
  %159 = bitcast %"struct.sh::BlockMemberInfo"* %153 to i8*
  %160 = bitcast %"struct.sh::BlockMemberInfo"* %151 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %159, i8* align 4 %160, i64 20, i1 false) #13
  %161 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %153, i64 1
  %162 = ptrtoint %"struct.sh::BlockMemberInfo"* %161 to i64
  %163 = bitcast %"struct.sh::BlockMemberInfo"** %152 to i64*
  store i64 %162, i64* %163, align 8
  br label %218

164:                                              ; preds = %145
  %165 = ptrtoint %"struct.sh::BlockMemberInfo"* %153 to i64
  %166 = bitcast %"struct.sh::BlockMemberInfo"** %152 to i64*
  %167 = bitcast %"class.std::__1::vector.646"* %150 to i64*
  %168 = load i64, i64* %167, align 8
  %169 = sub i64 %165, %168
  %170 = sdiv exact i64 %169, 20
  %171 = add nsw i64 %170, 1
  %172 = icmp ugt i64 %171, 922337203685477580
  br i1 %172, label %173, label %175

173:                                              ; preds = %164
  %174 = bitcast %"class.std::__1::vector.646"* %150 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %174) #15
  unreachable

175:                                              ; preds = %164
  %176 = bitcast %"struct.sh::BlockMemberInfo"** %154 to i64*
  %177 = sub i64 %157, %168
  %178 = sdiv exact i64 %177, 20
  %179 = icmp ult i64 %178, 461168601842738790
  br i1 %179, label %180, label %185

180:                                              ; preds = %175
  %181 = shl nsw i64 %178, 1
  %182 = icmp ult i64 %181, %171
  %183 = select i1 %182, i64 %171, i64 %181
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %190, label %185

185:                                              ; preds = %180, %175
  %186 = phi i64 [ %183, %180 ], [ 922337203685477580, %175 ]
  %187 = mul i64 %186, 20
  %188 = call i8* @_Znwm(i64 %187) #14
  %189 = bitcast i8* %188 to %"struct.sh::BlockMemberInfo"*
  br label %190

190:                                              ; preds = %185, %180
  %191 = phi i64 [ %186, %185 ], [ 0, %180 ]
  %192 = phi %"struct.sh::BlockMemberInfo"* [ %189, %185 ], [ null, %180 ]
  %193 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %192, i64 %170
  %194 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %192, i64 %191
  %195 = ptrtoint %"struct.sh::BlockMemberInfo"* %194 to i64
  %196 = bitcast %"struct.sh::BlockMemberInfo"* %193 to i8*
  %197 = bitcast %"struct.sh::BlockMemberInfo"* %151 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %196, i8* align 4 %197, i64 20, i1 false) #13
  %198 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %193, i64 1
  %199 = ptrtoint %"struct.sh::BlockMemberInfo"* %198 to i64
  %200 = getelementptr inbounds %"class.std::__1::vector.646", %"class.std::__1::vector.646"* %150, i64 0, i32 0, i32 0
  %201 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %200, align 8
  %202 = load i64, i64* %166, align 8
  %203 = ptrtoint %"struct.sh::BlockMemberInfo"* %201 to i64
  %204 = sub i64 %202, %203
  %205 = sdiv exact i64 %204, -20
  %206 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %193, i64 %205
  %207 = ptrtoint %"struct.sh::BlockMemberInfo"* %206 to i64
  %208 = icmp sgt i64 %204, 0
  br i1 %208, label %209, label %213

209:                                              ; preds = %190
  %210 = bitcast %"struct.sh::BlockMemberInfo"* %206 to i8*
  %211 = bitcast %"struct.sh::BlockMemberInfo"* %201 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %210, i8* align 4 %211, i64 %204, i1 false) #13
  %212 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %200, align 8
  br label %213

213:                                              ; preds = %209, %190
  %214 = phi %"struct.sh::BlockMemberInfo"* [ %201, %190 ], [ %212, %209 ]
  store i64 %207, i64* %167, align 8
  store i64 %199, i64* %166, align 8
  store i64 %195, i64* %176, align 8
  %215 = icmp eq %"struct.sh::BlockMemberInfo"* %214, null
  br i1 %215, label %218, label %216

216:                                              ; preds = %213
  %217 = bitcast %"struct.sh::BlockMemberInfo"* %214 to i8*
  call void @_ZdlPv(i8* %217) #14
  br label %218

218:                                              ; preds = %158, %213, %216
  %219 = shl i32 1, %148
  %220 = trunc i32 %219 to i8
  %221 = xor i8 %220, -1
  %222 = and i8 %146, %221
  %223 = icmp eq i8 %222, 0
  br i1 %223, label %142, label %145
}

declare %"class.gl::Shader"* @_ZNK2gl12ProgramState17getAttachedShaderENS_10ShaderTypeE(%"class.gl::ProgramState"*, i8 zeroext) local_unnamed_addr #2

declare dereferenceable(24) %"class.std::__1::vector.6"* @_ZN2gl6Shader11getUniformsEv(%"class.gl::Shader"*) local_unnamed_addr #2

declare void @_ZN2gl19StripLastArrayIndexERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.std::__1::basic_string"* sret, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #2

declare zeroext i1 @_ZN5angle12MemoryBuffer6resizeEm(%"class.angle::MemoryBuffer"*, i64) local_unnamed_addr #2

declare void @_ZN5angle12MemoryBuffer4fillEh(%"class.angle::MemoryBuffer"*, i8 zeroext) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_ZN2rx9ProgramVk8validateERKN2gl4CapsEPNS1_7InfoLogE(%"class.rx::ProgramVk"* nocapture readnone, %"struct.gl::Caps"* nocapture readnone dereferenceable(872), %"class.gl::InfoLog"* nocapture readnone) unnamed_addr #6 align 2 {
  ret i8 1
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk13setUniform1fvEiiPKf(%"class.rx::ProgramVk"*, i32, i32, float*) unnamed_addr #1 align 2 {
  tail call void @_ZN2rx9ProgramVk14setUniformImplIfEEviiPKT_j(%"class.rx::ProgramVk"* %0, i32 %1, i32 %2, float* %3, i32 5126)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx9ProgramVk14setUniformImplIfEEviiPKT_j(%"class.rx::ProgramVk"*, i32, i32, float*, i32) local_unnamed_addr #1 comdat align 2 {
  %6 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %7 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 5, i32 0, i32 0
  %10 = load %"struct.gl::VariableLocation"*, %"struct.gl::VariableLocation"** %9, align 8
  %11 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8
  %12 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 23, i32 0
  %13 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %12, align 8
  %14 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %13, i64 0, i32 30, i32 0, i32 0
  %18 = load %"struct.gl::LinkedUniform"*, %"struct.gl::LinkedUniform"** %17, align 8
  %19 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %18, i64 %16, i32 2
  %20 = load %"struct.gl::UniformTypeInfo"*, %"struct.gl::UniformTypeInfo"** %19, align 8
  %21 = getelementptr inbounds %"struct.gl::UniformTypeInfo", %"struct.gl::UniformTypeInfo"* %20, i64 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, %4
  %24 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %13, i64 0, i32 55
  %25 = load i8, i8* %24, align 4, !range !3
  %26 = icmp eq i8 %25, 0
  %27 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %13, i64 0, i32 3
  %28 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %13, i64 0, i32 2
  %29 = select i1 %26, %"class.angle::BitSetT.62"* %28, %"class.angle::BitSetT.62"* %27
  %30 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %29, i64 0, i32 0
  %31 = load i8, i8* %30, align 1
  %32 = icmp eq i8 %31, 0
  br i1 %23, label %33, label %137

33:                                               ; preds = %5
  br i1 %32, label %328, label %34

34:                                               ; preds = %33
  %35 = zext i8 %31 to i32
  %36 = tail call i32 @llvm.cttz.i32(i32 %35, i1 true) #13, !range !2
  %37 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %11, i64 0, i32 0
  %38 = bitcast float* %3 to i8*
  %39 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  %40 = add i32 %2, -1
  %41 = and i32 %40, 1
  %42 = icmp eq i32 %2, 2
  %43 = sub i32 %40, %41
  %44 = icmp eq i32 %41, 0
  br label %45

45:                                               ; preds = %134, %34
  %46 = phi i32 [ %36, %34 ], [ %136, %134 ]
  %47 = phi i8 [ %31, %34 ], [ %132, %134 ]
  %48 = zext i32 %46 to i64
  %49 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %48, i32 2, i32 0, i32 0
  %50 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %49, align 8
  %51 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %50, i64 %8, i32 0
  %52 = load i32, i32* %51, align 4
  %53 = icmp eq i32 %52, -1
  br i1 %53, label %54, label %57

54:                                               ; preds = %45
  %55 = shl i32 1, %46
  %56 = trunc i32 %55 to i8
  br label %129

57:                                               ; preds = %45
  %58 = load %"struct.gl::UniformTypeInfo"*, %"struct.gl::UniformTypeInfo"** %19, align 8
  %59 = getelementptr inbounds %"struct.gl::UniformTypeInfo", %"struct.gl::UniformTypeInfo"* %58, i64 0, i32 9
  %60 = load i32, i32* %59, align 8
  %61 = load i32, i32* %37, align 4
  %62 = shl i32 %60, 2
  %63 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %48, i32 1, i32 1
  %64 = load i8*, i8** %63, align 8
  %65 = sext i32 %52 to i64
  %66 = getelementptr inbounds i8, i8* %64, i64 %65
  %67 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %50, i64 %8, i32 1
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %68, 0
  %70 = icmp eq i32 %68, %62
  %71 = or i1 %69, %70
  br i1 %71, label %72, label %78

72:                                               ; preds = %57
  %73 = mul i32 %68, %61
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds i8, i8* %66, i64 %74
  %76 = mul nsw i32 %62, %2
  %77 = sext i32 %76 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %75, i8* align 4 %38, i64 %77, i1 false) #13
  br label %123

78:                                               ; preds = %57
  %79 = add i32 %61, %2
  %80 = icmp sgt i32 %79, %61
  br i1 %80, label %81, label %123

81:                                               ; preds = %78
  %82 = sext i32 %62 to i64
  %83 = sext i32 %60 to i64
  %84 = mul nsw i32 %61, %68
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %66, i64 %85
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %86, i8* align 4 %38, i64 %82, i1 false) #13
  switch i32 %2, label %87 [
    i32 1, label %123
    i32 2, label %111
  ]

87:                                               ; preds = %81, %87
  %88 = phi i64 [ %108, %87 ], [ 1, %81 ]
  %89 = phi i32 [ %100, %87 ], [ %61, %81 ]
  %90 = phi i32 [ %109, %87 ], [ %43, %81 ]
  %91 = add nsw i32 %89, 1
  %92 = load i32, i32* %67, align 4
  %93 = mul nsw i32 %91, %92
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i8, i8* %66, i64 %94
  %96 = mul nsw i64 %88, %83
  %97 = getelementptr inbounds float, float* %3, i64 %96
  %98 = bitcast float* %97 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %95, i8* align 4 %98, i64 %82, i1 false) #13
  %99 = add nuw nsw i64 %88, 1
  %100 = add nsw i32 %89, 2
  %101 = load i32, i32* %67, align 4
  %102 = mul nsw i32 %100, %101
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i8, i8* %66, i64 %103
  %105 = mul nsw i64 %99, %83
  %106 = getelementptr inbounds float, float* %3, i64 %105
  %107 = bitcast float* %106 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %104, i8* align 4 %107, i64 %82, i1 false) #13
  %108 = add nuw nsw i64 %88, 2
  %109 = add i32 %90, -2
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %87

111:                                              ; preds = %87, %81
  %112 = phi i64 [ 1, %81 ], [ %108, %87 ]
  %113 = phi i32 [ %61, %81 ], [ %100, %87 ]
  br i1 %44, label %123, label %114

114:                                              ; preds = %111
  %115 = add nsw i32 %113, 1
  %116 = load i32, i32* %67, align 4
  %117 = mul nsw i32 %115, %116
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i8, i8* %66, i64 %118
  %120 = mul nsw i64 %112, %83
  %121 = getelementptr inbounds float, float* %3, i64 %120
  %122 = bitcast float* %121 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %119, i8* align 4 %122, i64 %82, i1 false) #13
  br label %123

123:                                              ; preds = %114, %111, %81, %72, %78
  %124 = shl i32 1, %46
  %125 = trunc i32 %124 to i8
  %126 = and i8 %125, 63
  %127 = load i8, i8* %39, align 1
  %128 = or i8 %127, %126
  store i8 %128, i8* %39, align 1
  br label %129

129:                                              ; preds = %54, %123
  %130 = phi i8 [ %56, %54 ], [ %125, %123 ]
  %131 = xor i8 %130, -1
  %132 = and i8 %47, %131
  %133 = icmp eq i8 %132, 0
  br i1 %133, label %328, label %134

134:                                              ; preds = %129
  %135 = zext i8 %132 to i32
  %136 = tail call i32 @llvm.cttz.i32(i32 %135, i1 true) #13, !range !2
  br label %45

137:                                              ; preds = %5
  br i1 %32, label %328, label %138

138:                                              ; preds = %137
  %139 = zext i8 %31 to i32
  %140 = tail call i32 @llvm.cttz.i32(i32 %139, i1 true) #13, !range !2
  %141 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %11, i64 0, i32 0
  %142 = icmp sgt i32 %2, 0
  %143 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  %144 = zext i32 %2 to i64
  br label %145

145:                                              ; preds = %325, %138
  %146 = phi i8 [ %31, %138 ], [ %323, %325 ]
  %147 = phi i32 [ %140, %138 ], [ %327, %325 ]
  %148 = zext i32 %147 to i64
  %149 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %148, i32 2, i32 0, i32 0
  %150 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %149, align 8
  %151 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %150, i64 %8, i32 0
  %152 = load i32, i32* %151, align 4
  %153 = icmp eq i32 %152, -1
  br i1 %153, label %154, label %157

154:                                              ; preds = %145
  %155 = shl i32 1, %147
  %156 = trunc i32 %155 to i8
  br label %320

157:                                              ; preds = %145
  %158 = load %"struct.gl::UniformTypeInfo"*, %"struct.gl::UniformTypeInfo"** %19, align 8
  %159 = getelementptr inbounds %"struct.gl::UniformTypeInfo", %"struct.gl::UniformTypeInfo"* %158, i64 0, i32 9
  %160 = load i32, i32* %159, align 8
  %161 = load i32, i32* %141, align 4
  %162 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %150, i64 %8, i32 1
  %163 = load i32, i32* %162, align 4
  %164 = mul i32 %163, %161
  %165 = add i32 %164, %152
  br i1 %142, label %166, label %185

166:                                              ; preds = %157
  %167 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %148, i32 1, i32 1
  %168 = icmp sgt i32 %160, 0
  %169 = sext i32 %160 to i64
  %170 = zext i32 %160 to i64
  %171 = shl nuw nsw i64 %170, 2
  %172 = and i64 %170, 4294967288
  %173 = add nsw i64 %172, -8
  %174 = lshr exact i64 %173, 3
  %175 = add nuw nsw i64 %174, 1
  %176 = icmp ult i32 %160, 8
  %177 = and i64 %170, 4294967288
  %178 = and i64 %175, 1
  %179 = icmp eq i64 %173, 0
  %180 = sub nuw nsw i64 %175, %178
  %181 = icmp eq i64 %178, 0
  %182 = icmp eq i64 %177, %170
  %183 = and i64 %170, 3
  %184 = icmp eq i64 %183, 0
  br label %191

185:                                              ; preds = %288, %157
  %186 = shl i32 1, %147
  %187 = trunc i32 %186 to i8
  %188 = and i8 %187, 63
  %189 = load i8, i8* %143, align 1
  %190 = or i8 %189, %188
  store i8 %190, i8* %143, align 1
  br label %320

191:                                              ; preds = %291, %166
  %192 = phi i32 [ %163, %166 ], [ %292, %291 ]
  %193 = phi i64 [ 0, %166 ], [ %289, %291 ]
  %194 = mul i64 %193, %169
  %195 = getelementptr float, float* %3, i64 %194
  %196 = bitcast float* %195 to i8*
  %197 = add i64 %194, %170
  %198 = getelementptr float, float* %3, i64 %197
  %199 = bitcast float* %198 to i8*
  %200 = trunc i64 %193 to i32
  %201 = mul nsw i32 %192, %200
  %202 = add nsw i32 %165, %201
  %203 = load i8*, i8** %167, align 8
  %204 = sext i32 %202 to i64
  %205 = getelementptr inbounds i8, i8* %203, i64 %204
  %206 = bitcast i8* %205 to i32*
  %207 = mul nsw i64 %193, %169
  %208 = getelementptr inbounds float, float* %3, i64 %207
  br i1 %168, label %209, label %288

209:                                              ; preds = %191
  br i1 %176, label %210, label %228

210:                                              ; preds = %287, %228, %209
  %211 = phi i64 [ 0, %228 ], [ 0, %209 ], [ %177, %287 ]
  %212 = xor i64 %211, -1
  %213 = add nsw i64 %212, %170
  br i1 %184, label %225, label %214

214:                                              ; preds = %210, %214
  %215 = phi i64 [ %222, %214 ], [ %211, %210 ]
  %216 = phi i64 [ %223, %214 ], [ %183, %210 ]
  %217 = getelementptr inbounds float, float* %208, i64 %215
  %218 = load float, float* %217, align 4
  %219 = fcmp une float %218, 0.000000e+00
  %220 = zext i1 %219 to i32
  %221 = getelementptr inbounds i32, i32* %206, i64 %215
  store i32 %220, i32* %221, align 4
  %222 = add nuw nsw i64 %215, 1
  %223 = add i64 %216, -1
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %225, label %214, !llvm.loop !23

225:                                              ; preds = %214, %210
  %226 = phi i64 [ %211, %210 ], [ %222, %214 ]
  %227 = icmp ult i64 %213, 3
  br i1 %227, label %288, label %293

228:                                              ; preds = %209
  %229 = getelementptr i8, i8* %203, i64 %171
  %230 = getelementptr i8, i8* %229, i64 %204
  %231 = icmp ult i8* %205, %199
  %232 = icmp ugt i8* %230, %196
  %233 = and i1 %231, %232
  br i1 %233, label %210, label %234

234:                                              ; preds = %228
  br i1 %179, label %270, label %235

235:                                              ; preds = %234, %235
  %236 = phi i64 [ %267, %235 ], [ 0, %234 ]
  %237 = phi i64 [ %268, %235 ], [ %180, %234 ]
  %238 = getelementptr inbounds float, float* %208, i64 %236
  %239 = bitcast float* %238 to <4 x float>*
  %240 = load <4 x float>, <4 x float>* %239, align 4, !alias.scope !25
  %241 = getelementptr inbounds float, float* %238, i64 4
  %242 = bitcast float* %241 to <4 x float>*
  %243 = load <4 x float>, <4 x float>* %242, align 4, !alias.scope !25
  %244 = fcmp une <4 x float> %240, zeroinitializer
  %245 = fcmp une <4 x float> %243, zeroinitializer
  %246 = zext <4 x i1> %244 to <4 x i32>
  %247 = zext <4 x i1> %245 to <4 x i32>
  %248 = getelementptr inbounds i32, i32* %206, i64 %236
  %249 = bitcast i32* %248 to <4 x i32>*
  store <4 x i32> %246, <4 x i32>* %249, align 4, !alias.scope !28, !noalias !25
  %250 = getelementptr inbounds i32, i32* %248, i64 4
  %251 = bitcast i32* %250 to <4 x i32>*
  store <4 x i32> %247, <4 x i32>* %251, align 4, !alias.scope !28, !noalias !25
  %252 = or i64 %236, 8
  %253 = getelementptr inbounds float, float* %208, i64 %252
  %254 = bitcast float* %253 to <4 x float>*
  %255 = load <4 x float>, <4 x float>* %254, align 4, !alias.scope !25
  %256 = getelementptr inbounds float, float* %253, i64 4
  %257 = bitcast float* %256 to <4 x float>*
  %258 = load <4 x float>, <4 x float>* %257, align 4, !alias.scope !25
  %259 = fcmp une <4 x float> %255, zeroinitializer
  %260 = fcmp une <4 x float> %258, zeroinitializer
  %261 = zext <4 x i1> %259 to <4 x i32>
  %262 = zext <4 x i1> %260 to <4 x i32>
  %263 = getelementptr inbounds i32, i32* %206, i64 %252
  %264 = bitcast i32* %263 to <4 x i32>*
  store <4 x i32> %261, <4 x i32>* %264, align 4, !alias.scope !28, !noalias !25
  %265 = getelementptr inbounds i32, i32* %263, i64 4
  %266 = bitcast i32* %265 to <4 x i32>*
  store <4 x i32> %262, <4 x i32>* %266, align 4, !alias.scope !28, !noalias !25
  %267 = add i64 %236, 16
  %268 = add i64 %237, -2
  %269 = icmp eq i64 %268, 0
  br i1 %269, label %270, label %235, !llvm.loop !30

270:                                              ; preds = %235, %234
  %271 = phi i64 [ 0, %234 ], [ %267, %235 ]
  br i1 %181, label %287, label %272

272:                                              ; preds = %270
  %273 = getelementptr inbounds float, float* %208, i64 %271
  %274 = bitcast float* %273 to <4 x float>*
  %275 = load <4 x float>, <4 x float>* %274, align 4, !alias.scope !25
  %276 = getelementptr inbounds float, float* %273, i64 4
  %277 = bitcast float* %276 to <4 x float>*
  %278 = load <4 x float>, <4 x float>* %277, align 4, !alias.scope !25
  %279 = fcmp une <4 x float> %275, zeroinitializer
  %280 = fcmp une <4 x float> %278, zeroinitializer
  %281 = zext <4 x i1> %279 to <4 x i32>
  %282 = zext <4 x i1> %280 to <4 x i32>
  %283 = getelementptr inbounds i32, i32* %206, i64 %271
  %284 = bitcast i32* %283 to <4 x i32>*
  store <4 x i32> %281, <4 x i32>* %284, align 4, !alias.scope !28, !noalias !25
  %285 = getelementptr inbounds i32, i32* %283, i64 4
  %286 = bitcast i32* %285 to <4 x i32>*
  store <4 x i32> %282, <4 x i32>* %286, align 4, !alias.scope !28, !noalias !25
  br label %287

287:                                              ; preds = %270, %272
  br i1 %182, label %288, label %210

288:                                              ; preds = %225, %293, %287, %191
  %289 = add nuw nsw i64 %193, 1
  %290 = icmp eq i64 %289, %144
  br i1 %290, label %185, label %291

291:                                              ; preds = %288
  %292 = load i32, i32* %162, align 4
  br label %191

293:                                              ; preds = %225, %293
  %294 = phi i64 [ %318, %293 ], [ %226, %225 ]
  %295 = getelementptr inbounds float, float* %208, i64 %294
  %296 = load float, float* %295, align 4
  %297 = fcmp une float %296, 0.000000e+00
  %298 = zext i1 %297 to i32
  %299 = getelementptr inbounds i32, i32* %206, i64 %294
  store i32 %298, i32* %299, align 4
  %300 = add nuw nsw i64 %294, 1
  %301 = getelementptr inbounds float, float* %208, i64 %300
  %302 = load float, float* %301, align 4
  %303 = fcmp une float %302, 0.000000e+00
  %304 = zext i1 %303 to i32
  %305 = getelementptr inbounds i32, i32* %206, i64 %300
  store i32 %304, i32* %305, align 4
  %306 = add nuw nsw i64 %294, 2
  %307 = getelementptr inbounds float, float* %208, i64 %306
  %308 = load float, float* %307, align 4
  %309 = fcmp une float %308, 0.000000e+00
  %310 = zext i1 %309 to i32
  %311 = getelementptr inbounds i32, i32* %206, i64 %306
  store i32 %310, i32* %311, align 4
  %312 = add nuw nsw i64 %294, 3
  %313 = getelementptr inbounds float, float* %208, i64 %312
  %314 = load float, float* %313, align 4
  %315 = fcmp une float %314, 0.000000e+00
  %316 = zext i1 %315 to i32
  %317 = getelementptr inbounds i32, i32* %206, i64 %312
  store i32 %316, i32* %317, align 4
  %318 = add nuw nsw i64 %294, 4
  %319 = icmp eq i64 %318, %170
  br i1 %319, label %288, label %293, !llvm.loop !32

320:                                              ; preds = %154, %185
  %321 = phi i8 [ %156, %154 ], [ %187, %185 ]
  %322 = xor i8 %321, -1
  %323 = and i8 %146, %322
  %324 = icmp eq i8 %323, 0
  br i1 %324, label %328, label %325

325:                                              ; preds = %320
  %326 = zext i8 %323 to i32
  %327 = tail call i32 @llvm.cttz.i32(i32 %326, i1 true) #13, !range !2
  br label %145

328:                                              ; preds = %320, %129, %137, %33
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk13setUniform2fvEiiPKf(%"class.rx::ProgramVk"*, i32, i32, float*) unnamed_addr #1 align 2 {
  tail call void @_ZN2rx9ProgramVk14setUniformImplIfEEviiPKT_j(%"class.rx::ProgramVk"* %0, i32 %1, i32 %2, float* %3, i32 35664)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk13setUniform3fvEiiPKf(%"class.rx::ProgramVk"*, i32, i32, float*) unnamed_addr #1 align 2 {
  tail call void @_ZN2rx9ProgramVk14setUniformImplIfEEviiPKT_j(%"class.rx::ProgramVk"* %0, i32 %1, i32 %2, float* %3, i32 35665)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk13setUniform4fvEiiPKf(%"class.rx::ProgramVk"*, i32, i32, float*) unnamed_addr #1 align 2 {
  tail call void @_ZN2rx9ProgramVk14setUniformImplIfEEviiPKT_j(%"class.rx::ProgramVk"* %0, i32 %1, i32 %2, float* %3, i32 35666)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk13setUniform1ivEiiPKi(%"class.rx::ProgramVk"*, i32, i32, i32*) unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %6 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %6, i64 0, i32 5, i32 0, i32 0
  %9 = load %"struct.gl::VariableLocation"*, %"struct.gl::VariableLocation"** %8, align 8
  %10 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %6, i64 0, i32 23, i32 0
  %11 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %10, align 8
  %12 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %9, i64 %7, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %11, i64 0, i32 30, i32 0, i32 0
  %16 = load %"struct.gl::LinkedUniform"*, %"struct.gl::LinkedUniform"** %15, align 8
  %17 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %16, i64 %14, i32 2
  %18 = load %"struct.gl::UniformTypeInfo"*, %"struct.gl::UniformTypeInfo"** %17, align 8
  %19 = getelementptr inbounds %"struct.gl::UniformTypeInfo", %"struct.gl::UniformTypeInfo"* %18, i64 0, i32 14
  %20 = load i8, i8* %19, align 8, !range !3
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %4
  tail call void @_ZN2rx9ProgramVk14setUniformImplIiEEviiPKT_j(%"class.rx::ProgramVk"* %0, i32 %1, i32 %2, i32* %3, i32 5124)
  br label %23

23:                                               ; preds = %4, %22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx9ProgramVk14setUniformImplIiEEviiPKT_j(%"class.rx::ProgramVk"*, i32, i32, i32*, i32) local_unnamed_addr #1 comdat align 2 {
  %6 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %7 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 5, i32 0, i32 0
  %10 = load %"struct.gl::VariableLocation"*, %"struct.gl::VariableLocation"** %9, align 8
  %11 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8
  %12 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 23, i32 0
  %13 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %12, align 8
  %14 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %13, i64 0, i32 30, i32 0, i32 0
  %18 = load %"struct.gl::LinkedUniform"*, %"struct.gl::LinkedUniform"** %17, align 8
  %19 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %18, i64 %16, i32 2
  %20 = load %"struct.gl::UniformTypeInfo"*, %"struct.gl::UniformTypeInfo"** %19, align 8
  %21 = getelementptr inbounds %"struct.gl::UniformTypeInfo", %"struct.gl::UniformTypeInfo"* %20, i64 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, %4
  %24 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %13, i64 0, i32 55
  %25 = load i8, i8* %24, align 4, !range !3
  %26 = icmp eq i8 %25, 0
  %27 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %13, i64 0, i32 3
  %28 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %13, i64 0, i32 2
  %29 = select i1 %26, %"class.angle::BitSetT.62"* %28, %"class.angle::BitSetT.62"* %27
  %30 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %29, i64 0, i32 0
  %31 = load i8, i8* %30, align 1
  %32 = icmp eq i8 %31, 0
  br i1 %23, label %33, label %137

33:                                               ; preds = %5
  br i1 %32, label %328, label %34

34:                                               ; preds = %33
  %35 = zext i8 %31 to i32
  %36 = tail call i32 @llvm.cttz.i32(i32 %35, i1 true) #13, !range !2
  %37 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %11, i64 0, i32 0
  %38 = bitcast i32* %3 to i8*
  %39 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  %40 = add i32 %2, -1
  %41 = and i32 %40, 1
  %42 = icmp eq i32 %2, 2
  %43 = sub i32 %40, %41
  %44 = icmp eq i32 %41, 0
  br label %45

45:                                               ; preds = %134, %34
  %46 = phi i32 [ %36, %34 ], [ %136, %134 ]
  %47 = phi i8 [ %31, %34 ], [ %132, %134 ]
  %48 = zext i32 %46 to i64
  %49 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %48, i32 2, i32 0, i32 0
  %50 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %49, align 8
  %51 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %50, i64 %8, i32 0
  %52 = load i32, i32* %51, align 4
  %53 = icmp eq i32 %52, -1
  br i1 %53, label %54, label %57

54:                                               ; preds = %45
  %55 = shl i32 1, %46
  %56 = trunc i32 %55 to i8
  br label %129

57:                                               ; preds = %45
  %58 = load %"struct.gl::UniformTypeInfo"*, %"struct.gl::UniformTypeInfo"** %19, align 8
  %59 = getelementptr inbounds %"struct.gl::UniformTypeInfo", %"struct.gl::UniformTypeInfo"* %58, i64 0, i32 9
  %60 = load i32, i32* %59, align 8
  %61 = load i32, i32* %37, align 4
  %62 = shl i32 %60, 2
  %63 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %48, i32 1, i32 1
  %64 = load i8*, i8** %63, align 8
  %65 = sext i32 %52 to i64
  %66 = getelementptr inbounds i8, i8* %64, i64 %65
  %67 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %50, i64 %8, i32 1
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %68, 0
  %70 = icmp eq i32 %68, %62
  %71 = or i1 %69, %70
  br i1 %71, label %72, label %78

72:                                               ; preds = %57
  %73 = mul i32 %68, %61
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds i8, i8* %66, i64 %74
  %76 = mul nsw i32 %62, %2
  %77 = sext i32 %76 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %75, i8* align 4 %38, i64 %77, i1 false) #13
  br label %123

78:                                               ; preds = %57
  %79 = add i32 %61, %2
  %80 = icmp sgt i32 %79, %61
  br i1 %80, label %81, label %123

81:                                               ; preds = %78
  %82 = sext i32 %62 to i64
  %83 = sext i32 %60 to i64
  %84 = mul nsw i32 %61, %68
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %66, i64 %85
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %86, i8* align 4 %38, i64 %82, i1 false) #13
  switch i32 %2, label %87 [
    i32 1, label %123
    i32 2, label %111
  ]

87:                                               ; preds = %81, %87
  %88 = phi i64 [ %108, %87 ], [ 1, %81 ]
  %89 = phi i32 [ %100, %87 ], [ %61, %81 ]
  %90 = phi i32 [ %109, %87 ], [ %43, %81 ]
  %91 = add nsw i32 %89, 1
  %92 = load i32, i32* %67, align 4
  %93 = mul nsw i32 %91, %92
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i8, i8* %66, i64 %94
  %96 = mul nsw i64 %88, %83
  %97 = getelementptr inbounds i32, i32* %3, i64 %96
  %98 = bitcast i32* %97 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %95, i8* align 4 %98, i64 %82, i1 false) #13
  %99 = add nuw nsw i64 %88, 1
  %100 = add nsw i32 %89, 2
  %101 = load i32, i32* %67, align 4
  %102 = mul nsw i32 %100, %101
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i8, i8* %66, i64 %103
  %105 = mul nsw i64 %99, %83
  %106 = getelementptr inbounds i32, i32* %3, i64 %105
  %107 = bitcast i32* %106 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %104, i8* align 4 %107, i64 %82, i1 false) #13
  %108 = add nuw nsw i64 %88, 2
  %109 = add i32 %90, -2
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %87

111:                                              ; preds = %87, %81
  %112 = phi i64 [ 1, %81 ], [ %108, %87 ]
  %113 = phi i32 [ %61, %81 ], [ %100, %87 ]
  br i1 %44, label %123, label %114

114:                                              ; preds = %111
  %115 = add nsw i32 %113, 1
  %116 = load i32, i32* %67, align 4
  %117 = mul nsw i32 %115, %116
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i8, i8* %66, i64 %118
  %120 = mul nsw i64 %112, %83
  %121 = getelementptr inbounds i32, i32* %3, i64 %120
  %122 = bitcast i32* %121 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %119, i8* align 4 %122, i64 %82, i1 false) #13
  br label %123

123:                                              ; preds = %114, %111, %81, %72, %78
  %124 = shl i32 1, %46
  %125 = trunc i32 %124 to i8
  %126 = and i8 %125, 63
  %127 = load i8, i8* %39, align 1
  %128 = or i8 %127, %126
  store i8 %128, i8* %39, align 1
  br label %129

129:                                              ; preds = %54, %123
  %130 = phi i8 [ %56, %54 ], [ %125, %123 ]
  %131 = xor i8 %130, -1
  %132 = and i8 %47, %131
  %133 = icmp eq i8 %132, 0
  br i1 %133, label %328, label %134

134:                                              ; preds = %129
  %135 = zext i8 %132 to i32
  %136 = tail call i32 @llvm.cttz.i32(i32 %135, i1 true) #13, !range !2
  br label %45

137:                                              ; preds = %5
  br i1 %32, label %328, label %138

138:                                              ; preds = %137
  %139 = zext i8 %31 to i32
  %140 = tail call i32 @llvm.cttz.i32(i32 %139, i1 true) #13, !range !2
  %141 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %11, i64 0, i32 0
  %142 = icmp sgt i32 %2, 0
  %143 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  %144 = zext i32 %2 to i64
  br label %145

145:                                              ; preds = %325, %138
  %146 = phi i8 [ %31, %138 ], [ %323, %325 ]
  %147 = phi i32 [ %140, %138 ], [ %327, %325 ]
  %148 = zext i32 %147 to i64
  %149 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %148, i32 2, i32 0, i32 0
  %150 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %149, align 8
  %151 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %150, i64 %8, i32 0
  %152 = load i32, i32* %151, align 4
  %153 = icmp eq i32 %152, -1
  br i1 %153, label %154, label %157

154:                                              ; preds = %145
  %155 = shl i32 1, %147
  %156 = trunc i32 %155 to i8
  br label %320

157:                                              ; preds = %145
  %158 = load %"struct.gl::UniformTypeInfo"*, %"struct.gl::UniformTypeInfo"** %19, align 8
  %159 = getelementptr inbounds %"struct.gl::UniformTypeInfo", %"struct.gl::UniformTypeInfo"* %158, i64 0, i32 9
  %160 = load i32, i32* %159, align 8
  %161 = load i32, i32* %141, align 4
  %162 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %150, i64 %8, i32 1
  %163 = load i32, i32* %162, align 4
  %164 = mul i32 %163, %161
  %165 = add i32 %164, %152
  br i1 %142, label %166, label %185

166:                                              ; preds = %157
  %167 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %148, i32 1, i32 1
  %168 = icmp sgt i32 %160, 0
  %169 = sext i32 %160 to i64
  %170 = zext i32 %160 to i64
  %171 = shl nuw nsw i64 %170, 2
  %172 = and i64 %170, 4294967288
  %173 = add nsw i64 %172, -8
  %174 = lshr exact i64 %173, 3
  %175 = add nuw nsw i64 %174, 1
  %176 = icmp ult i32 %160, 8
  %177 = and i64 %170, 4294967288
  %178 = and i64 %175, 1
  %179 = icmp eq i64 %173, 0
  %180 = sub nuw nsw i64 %175, %178
  %181 = icmp eq i64 %178, 0
  %182 = icmp eq i64 %177, %170
  %183 = and i64 %170, 3
  %184 = icmp eq i64 %183, 0
  br label %191

185:                                              ; preds = %288, %157
  %186 = shl i32 1, %147
  %187 = trunc i32 %186 to i8
  %188 = and i8 %187, 63
  %189 = load i8, i8* %143, align 1
  %190 = or i8 %189, %188
  store i8 %190, i8* %143, align 1
  br label %320

191:                                              ; preds = %291, %166
  %192 = phi i32 [ %163, %166 ], [ %292, %291 ]
  %193 = phi i64 [ 0, %166 ], [ %289, %291 ]
  %194 = mul i64 %193, %169
  %195 = getelementptr i32, i32* %3, i64 %194
  %196 = bitcast i32* %195 to i8*
  %197 = add i64 %194, %170
  %198 = getelementptr i32, i32* %3, i64 %197
  %199 = bitcast i32* %198 to i8*
  %200 = trunc i64 %193 to i32
  %201 = mul nsw i32 %192, %200
  %202 = add nsw i32 %165, %201
  %203 = load i8*, i8** %167, align 8
  %204 = sext i32 %202 to i64
  %205 = getelementptr inbounds i8, i8* %203, i64 %204
  %206 = bitcast i8* %205 to i32*
  %207 = mul nsw i64 %193, %169
  %208 = getelementptr inbounds i32, i32* %3, i64 %207
  br i1 %168, label %209, label %288

209:                                              ; preds = %191
  br i1 %176, label %210, label %228

210:                                              ; preds = %287, %228, %209
  %211 = phi i64 [ 0, %228 ], [ 0, %209 ], [ %177, %287 ]
  %212 = xor i64 %211, -1
  %213 = add nsw i64 %212, %170
  br i1 %184, label %225, label %214

214:                                              ; preds = %210, %214
  %215 = phi i64 [ %222, %214 ], [ %211, %210 ]
  %216 = phi i64 [ %223, %214 ], [ %183, %210 ]
  %217 = getelementptr inbounds i32, i32* %208, i64 %215
  %218 = load i32, i32* %217, align 4
  %219 = icmp ne i32 %218, 0
  %220 = zext i1 %219 to i32
  %221 = getelementptr inbounds i32, i32* %206, i64 %215
  store i32 %220, i32* %221, align 4
  %222 = add nuw nsw i64 %215, 1
  %223 = add i64 %216, -1
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %225, label %214, !llvm.loop !33

225:                                              ; preds = %214, %210
  %226 = phi i64 [ %211, %210 ], [ %222, %214 ]
  %227 = icmp ult i64 %213, 3
  br i1 %227, label %288, label %293

228:                                              ; preds = %209
  %229 = getelementptr i8, i8* %203, i64 %171
  %230 = getelementptr i8, i8* %229, i64 %204
  %231 = icmp ult i8* %205, %199
  %232 = icmp ugt i8* %230, %196
  %233 = and i1 %231, %232
  br i1 %233, label %210, label %234

234:                                              ; preds = %228
  br i1 %179, label %270, label %235

235:                                              ; preds = %234, %235
  %236 = phi i64 [ %267, %235 ], [ 0, %234 ]
  %237 = phi i64 [ %268, %235 ], [ %180, %234 ]
  %238 = getelementptr inbounds i32, i32* %208, i64 %236
  %239 = bitcast i32* %238 to <4 x i32>*
  %240 = load <4 x i32>, <4 x i32>* %239, align 4, !alias.scope !34
  %241 = getelementptr inbounds i32, i32* %238, i64 4
  %242 = bitcast i32* %241 to <4 x i32>*
  %243 = load <4 x i32>, <4 x i32>* %242, align 4, !alias.scope !34
  %244 = icmp ne <4 x i32> %240, zeroinitializer
  %245 = icmp ne <4 x i32> %243, zeroinitializer
  %246 = zext <4 x i1> %244 to <4 x i32>
  %247 = zext <4 x i1> %245 to <4 x i32>
  %248 = getelementptr inbounds i32, i32* %206, i64 %236
  %249 = bitcast i32* %248 to <4 x i32>*
  store <4 x i32> %246, <4 x i32>* %249, align 4, !alias.scope !37, !noalias !34
  %250 = getelementptr inbounds i32, i32* %248, i64 4
  %251 = bitcast i32* %250 to <4 x i32>*
  store <4 x i32> %247, <4 x i32>* %251, align 4, !alias.scope !37, !noalias !34
  %252 = or i64 %236, 8
  %253 = getelementptr inbounds i32, i32* %208, i64 %252
  %254 = bitcast i32* %253 to <4 x i32>*
  %255 = load <4 x i32>, <4 x i32>* %254, align 4, !alias.scope !34
  %256 = getelementptr inbounds i32, i32* %253, i64 4
  %257 = bitcast i32* %256 to <4 x i32>*
  %258 = load <4 x i32>, <4 x i32>* %257, align 4, !alias.scope !34
  %259 = icmp ne <4 x i32> %255, zeroinitializer
  %260 = icmp ne <4 x i32> %258, zeroinitializer
  %261 = zext <4 x i1> %259 to <4 x i32>
  %262 = zext <4 x i1> %260 to <4 x i32>
  %263 = getelementptr inbounds i32, i32* %206, i64 %252
  %264 = bitcast i32* %263 to <4 x i32>*
  store <4 x i32> %261, <4 x i32>* %264, align 4, !alias.scope !37, !noalias !34
  %265 = getelementptr inbounds i32, i32* %263, i64 4
  %266 = bitcast i32* %265 to <4 x i32>*
  store <4 x i32> %262, <4 x i32>* %266, align 4, !alias.scope !37, !noalias !34
  %267 = add i64 %236, 16
  %268 = add i64 %237, -2
  %269 = icmp eq i64 %268, 0
  br i1 %269, label %270, label %235, !llvm.loop !39

270:                                              ; preds = %235, %234
  %271 = phi i64 [ 0, %234 ], [ %267, %235 ]
  br i1 %181, label %287, label %272

272:                                              ; preds = %270
  %273 = getelementptr inbounds i32, i32* %208, i64 %271
  %274 = bitcast i32* %273 to <4 x i32>*
  %275 = load <4 x i32>, <4 x i32>* %274, align 4, !alias.scope !34
  %276 = getelementptr inbounds i32, i32* %273, i64 4
  %277 = bitcast i32* %276 to <4 x i32>*
  %278 = load <4 x i32>, <4 x i32>* %277, align 4, !alias.scope !34
  %279 = icmp ne <4 x i32> %275, zeroinitializer
  %280 = icmp ne <4 x i32> %278, zeroinitializer
  %281 = zext <4 x i1> %279 to <4 x i32>
  %282 = zext <4 x i1> %280 to <4 x i32>
  %283 = getelementptr inbounds i32, i32* %206, i64 %271
  %284 = bitcast i32* %283 to <4 x i32>*
  store <4 x i32> %281, <4 x i32>* %284, align 4, !alias.scope !37, !noalias !34
  %285 = getelementptr inbounds i32, i32* %283, i64 4
  %286 = bitcast i32* %285 to <4 x i32>*
  store <4 x i32> %282, <4 x i32>* %286, align 4, !alias.scope !37, !noalias !34
  br label %287

287:                                              ; preds = %270, %272
  br i1 %182, label %288, label %210

288:                                              ; preds = %225, %293, %287, %191
  %289 = add nuw nsw i64 %193, 1
  %290 = icmp eq i64 %289, %144
  br i1 %290, label %185, label %291

291:                                              ; preds = %288
  %292 = load i32, i32* %162, align 4
  br label %191

293:                                              ; preds = %225, %293
  %294 = phi i64 [ %318, %293 ], [ %226, %225 ]
  %295 = getelementptr inbounds i32, i32* %208, i64 %294
  %296 = load i32, i32* %295, align 4
  %297 = icmp ne i32 %296, 0
  %298 = zext i1 %297 to i32
  %299 = getelementptr inbounds i32, i32* %206, i64 %294
  store i32 %298, i32* %299, align 4
  %300 = add nuw nsw i64 %294, 1
  %301 = getelementptr inbounds i32, i32* %208, i64 %300
  %302 = load i32, i32* %301, align 4
  %303 = icmp ne i32 %302, 0
  %304 = zext i1 %303 to i32
  %305 = getelementptr inbounds i32, i32* %206, i64 %300
  store i32 %304, i32* %305, align 4
  %306 = add nuw nsw i64 %294, 2
  %307 = getelementptr inbounds i32, i32* %208, i64 %306
  %308 = load i32, i32* %307, align 4
  %309 = icmp ne i32 %308, 0
  %310 = zext i1 %309 to i32
  %311 = getelementptr inbounds i32, i32* %206, i64 %306
  store i32 %310, i32* %311, align 4
  %312 = add nuw nsw i64 %294, 3
  %313 = getelementptr inbounds i32, i32* %208, i64 %312
  %314 = load i32, i32* %313, align 4
  %315 = icmp ne i32 %314, 0
  %316 = zext i1 %315 to i32
  %317 = getelementptr inbounds i32, i32* %206, i64 %312
  store i32 %316, i32* %317, align 4
  %318 = add nuw nsw i64 %294, 4
  %319 = icmp eq i64 %318, %170
  br i1 %319, label %288, label %293, !llvm.loop !40

320:                                              ; preds = %154, %185
  %321 = phi i8 [ %156, %154 ], [ %187, %185 ]
  %322 = xor i8 %321, -1
  %323 = and i8 %146, %322
  %324 = icmp eq i8 %323, 0
  br i1 %324, label %328, label %325

325:                                              ; preds = %320
  %326 = zext i8 %323 to i32
  %327 = tail call i32 @llvm.cttz.i32(i32 %326, i1 true) #13, !range !2
  br label %145

328:                                              ; preds = %320, %129, %137, %33
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk13setUniform2ivEiiPKi(%"class.rx::ProgramVk"*, i32, i32, i32*) unnamed_addr #1 align 2 {
  tail call void @_ZN2rx9ProgramVk14setUniformImplIiEEviiPKT_j(%"class.rx::ProgramVk"* %0, i32 %1, i32 %2, i32* %3, i32 35667)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk13setUniform3ivEiiPKi(%"class.rx::ProgramVk"*, i32, i32, i32*) unnamed_addr #1 align 2 {
  tail call void @_ZN2rx9ProgramVk14setUniformImplIiEEviiPKT_j(%"class.rx::ProgramVk"* %0, i32 %1, i32 %2, i32* %3, i32 35668)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk13setUniform4ivEiiPKi(%"class.rx::ProgramVk"*, i32, i32, i32*) unnamed_addr #1 align 2 {
  tail call void @_ZN2rx9ProgramVk14setUniformImplIiEEviiPKT_j(%"class.rx::ProgramVk"* %0, i32 %1, i32 %2, i32* %3, i32 35669)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk14setUniform1uivEiiPKj(%"class.rx::ProgramVk"*, i32, i32, i32*) unnamed_addr #1 align 2 {
  tail call void @_ZN2rx9ProgramVk14setUniformImplIjEEviiPKT_j(%"class.rx::ProgramVk"* %0, i32 %1, i32 %2, i32* %3, i32 5125)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx9ProgramVk14setUniformImplIjEEviiPKT_j(%"class.rx::ProgramVk"*, i32, i32, i32*, i32) local_unnamed_addr #1 comdat align 2 {
  %6 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %7 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 5, i32 0, i32 0
  %10 = load %"struct.gl::VariableLocation"*, %"struct.gl::VariableLocation"** %9, align 8
  %11 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8
  %12 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 23, i32 0
  %13 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %12, align 8
  %14 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %13, i64 0, i32 30, i32 0, i32 0
  %18 = load %"struct.gl::LinkedUniform"*, %"struct.gl::LinkedUniform"** %17, align 8
  %19 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %18, i64 %16, i32 2
  %20 = load %"struct.gl::UniformTypeInfo"*, %"struct.gl::UniformTypeInfo"** %19, align 8
  %21 = getelementptr inbounds %"struct.gl::UniformTypeInfo", %"struct.gl::UniformTypeInfo"* %20, i64 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, %4
  %24 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %13, i64 0, i32 55
  %25 = load i8, i8* %24, align 4, !range !3
  %26 = icmp eq i8 %25, 0
  %27 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %13, i64 0, i32 3
  %28 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %13, i64 0, i32 2
  %29 = select i1 %26, %"class.angle::BitSetT.62"* %28, %"class.angle::BitSetT.62"* %27
  %30 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %29, i64 0, i32 0
  %31 = load i8, i8* %30, align 1
  %32 = icmp eq i8 %31, 0
  br i1 %23, label %33, label %137

33:                                               ; preds = %5
  br i1 %32, label %328, label %34

34:                                               ; preds = %33
  %35 = zext i8 %31 to i32
  %36 = tail call i32 @llvm.cttz.i32(i32 %35, i1 true) #13, !range !2
  %37 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %11, i64 0, i32 0
  %38 = bitcast i32* %3 to i8*
  %39 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  %40 = add i32 %2, -1
  %41 = and i32 %40, 1
  %42 = icmp eq i32 %2, 2
  %43 = sub i32 %40, %41
  %44 = icmp eq i32 %41, 0
  br label %45

45:                                               ; preds = %134, %34
  %46 = phi i32 [ %36, %34 ], [ %136, %134 ]
  %47 = phi i8 [ %31, %34 ], [ %132, %134 ]
  %48 = zext i32 %46 to i64
  %49 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %48, i32 2, i32 0, i32 0
  %50 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %49, align 8
  %51 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %50, i64 %8, i32 0
  %52 = load i32, i32* %51, align 4
  %53 = icmp eq i32 %52, -1
  br i1 %53, label %54, label %57

54:                                               ; preds = %45
  %55 = shl i32 1, %46
  %56 = trunc i32 %55 to i8
  br label %129

57:                                               ; preds = %45
  %58 = load %"struct.gl::UniformTypeInfo"*, %"struct.gl::UniformTypeInfo"** %19, align 8
  %59 = getelementptr inbounds %"struct.gl::UniformTypeInfo", %"struct.gl::UniformTypeInfo"* %58, i64 0, i32 9
  %60 = load i32, i32* %59, align 8
  %61 = load i32, i32* %37, align 4
  %62 = shl i32 %60, 2
  %63 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %48, i32 1, i32 1
  %64 = load i8*, i8** %63, align 8
  %65 = sext i32 %52 to i64
  %66 = getelementptr inbounds i8, i8* %64, i64 %65
  %67 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %50, i64 %8, i32 1
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %68, 0
  %70 = icmp eq i32 %68, %62
  %71 = or i1 %69, %70
  br i1 %71, label %72, label %78

72:                                               ; preds = %57
  %73 = mul i32 %68, %61
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds i8, i8* %66, i64 %74
  %76 = mul nsw i32 %62, %2
  %77 = sext i32 %76 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %75, i8* align 4 %38, i64 %77, i1 false) #13
  br label %123

78:                                               ; preds = %57
  %79 = add i32 %61, %2
  %80 = icmp sgt i32 %79, %61
  br i1 %80, label %81, label %123

81:                                               ; preds = %78
  %82 = sext i32 %62 to i64
  %83 = sext i32 %60 to i64
  %84 = mul nsw i32 %61, %68
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %66, i64 %85
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %86, i8* align 4 %38, i64 %82, i1 false) #13
  switch i32 %2, label %87 [
    i32 1, label %123
    i32 2, label %111
  ]

87:                                               ; preds = %81, %87
  %88 = phi i64 [ %108, %87 ], [ 1, %81 ]
  %89 = phi i32 [ %100, %87 ], [ %61, %81 ]
  %90 = phi i32 [ %109, %87 ], [ %43, %81 ]
  %91 = add nsw i32 %89, 1
  %92 = load i32, i32* %67, align 4
  %93 = mul nsw i32 %91, %92
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i8, i8* %66, i64 %94
  %96 = mul nsw i64 %88, %83
  %97 = getelementptr inbounds i32, i32* %3, i64 %96
  %98 = bitcast i32* %97 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %95, i8* align 4 %98, i64 %82, i1 false) #13
  %99 = add nuw nsw i64 %88, 1
  %100 = add nsw i32 %89, 2
  %101 = load i32, i32* %67, align 4
  %102 = mul nsw i32 %100, %101
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i8, i8* %66, i64 %103
  %105 = mul nsw i64 %99, %83
  %106 = getelementptr inbounds i32, i32* %3, i64 %105
  %107 = bitcast i32* %106 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %104, i8* align 4 %107, i64 %82, i1 false) #13
  %108 = add nuw nsw i64 %88, 2
  %109 = add i32 %90, -2
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %87

111:                                              ; preds = %87, %81
  %112 = phi i64 [ 1, %81 ], [ %108, %87 ]
  %113 = phi i32 [ %61, %81 ], [ %100, %87 ]
  br i1 %44, label %123, label %114

114:                                              ; preds = %111
  %115 = add nsw i32 %113, 1
  %116 = load i32, i32* %67, align 4
  %117 = mul nsw i32 %115, %116
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i8, i8* %66, i64 %118
  %120 = mul nsw i64 %112, %83
  %121 = getelementptr inbounds i32, i32* %3, i64 %120
  %122 = bitcast i32* %121 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %119, i8* align 4 %122, i64 %82, i1 false) #13
  br label %123

123:                                              ; preds = %114, %111, %81, %72, %78
  %124 = shl i32 1, %46
  %125 = trunc i32 %124 to i8
  %126 = and i8 %125, 63
  %127 = load i8, i8* %39, align 1
  %128 = or i8 %127, %126
  store i8 %128, i8* %39, align 1
  br label %129

129:                                              ; preds = %54, %123
  %130 = phi i8 [ %56, %54 ], [ %125, %123 ]
  %131 = xor i8 %130, -1
  %132 = and i8 %47, %131
  %133 = icmp eq i8 %132, 0
  br i1 %133, label %328, label %134

134:                                              ; preds = %129
  %135 = zext i8 %132 to i32
  %136 = tail call i32 @llvm.cttz.i32(i32 %135, i1 true) #13, !range !2
  br label %45

137:                                              ; preds = %5
  br i1 %32, label %328, label %138

138:                                              ; preds = %137
  %139 = zext i8 %31 to i32
  %140 = tail call i32 @llvm.cttz.i32(i32 %139, i1 true) #13, !range !2
  %141 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %11, i64 0, i32 0
  %142 = icmp sgt i32 %2, 0
  %143 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  %144 = zext i32 %2 to i64
  br label %145

145:                                              ; preds = %325, %138
  %146 = phi i8 [ %31, %138 ], [ %323, %325 ]
  %147 = phi i32 [ %140, %138 ], [ %327, %325 ]
  %148 = zext i32 %147 to i64
  %149 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %148, i32 2, i32 0, i32 0
  %150 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %149, align 8
  %151 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %150, i64 %8, i32 0
  %152 = load i32, i32* %151, align 4
  %153 = icmp eq i32 %152, -1
  br i1 %153, label %154, label %157

154:                                              ; preds = %145
  %155 = shl i32 1, %147
  %156 = trunc i32 %155 to i8
  br label %320

157:                                              ; preds = %145
  %158 = load %"struct.gl::UniformTypeInfo"*, %"struct.gl::UniformTypeInfo"** %19, align 8
  %159 = getelementptr inbounds %"struct.gl::UniformTypeInfo", %"struct.gl::UniformTypeInfo"* %158, i64 0, i32 9
  %160 = load i32, i32* %159, align 8
  %161 = load i32, i32* %141, align 4
  %162 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %150, i64 %8, i32 1
  %163 = load i32, i32* %162, align 4
  %164 = mul i32 %163, %161
  %165 = add i32 %164, %152
  br i1 %142, label %166, label %185

166:                                              ; preds = %157
  %167 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %148, i32 1, i32 1
  %168 = icmp sgt i32 %160, 0
  %169 = sext i32 %160 to i64
  %170 = zext i32 %160 to i64
  %171 = shl nuw nsw i64 %170, 2
  %172 = and i64 %170, 4294967288
  %173 = add nsw i64 %172, -8
  %174 = lshr exact i64 %173, 3
  %175 = add nuw nsw i64 %174, 1
  %176 = icmp ult i32 %160, 8
  %177 = and i64 %170, 4294967288
  %178 = and i64 %175, 1
  %179 = icmp eq i64 %173, 0
  %180 = sub nuw nsw i64 %175, %178
  %181 = icmp eq i64 %178, 0
  %182 = icmp eq i64 %177, %170
  %183 = and i64 %170, 3
  %184 = icmp eq i64 %183, 0
  br label %191

185:                                              ; preds = %288, %157
  %186 = shl i32 1, %147
  %187 = trunc i32 %186 to i8
  %188 = and i8 %187, 63
  %189 = load i8, i8* %143, align 1
  %190 = or i8 %189, %188
  store i8 %190, i8* %143, align 1
  br label %320

191:                                              ; preds = %291, %166
  %192 = phi i32 [ %163, %166 ], [ %292, %291 ]
  %193 = phi i64 [ 0, %166 ], [ %289, %291 ]
  %194 = mul i64 %193, %169
  %195 = getelementptr i32, i32* %3, i64 %194
  %196 = bitcast i32* %195 to i8*
  %197 = add i64 %194, %170
  %198 = getelementptr i32, i32* %3, i64 %197
  %199 = bitcast i32* %198 to i8*
  %200 = trunc i64 %193 to i32
  %201 = mul nsw i32 %192, %200
  %202 = add nsw i32 %165, %201
  %203 = load i8*, i8** %167, align 8
  %204 = sext i32 %202 to i64
  %205 = getelementptr inbounds i8, i8* %203, i64 %204
  %206 = bitcast i8* %205 to i32*
  %207 = mul nsw i64 %193, %169
  %208 = getelementptr inbounds i32, i32* %3, i64 %207
  br i1 %168, label %209, label %288

209:                                              ; preds = %191
  br i1 %176, label %210, label %228

210:                                              ; preds = %287, %228, %209
  %211 = phi i64 [ 0, %228 ], [ 0, %209 ], [ %177, %287 ]
  %212 = xor i64 %211, -1
  %213 = add nsw i64 %212, %170
  br i1 %184, label %225, label %214

214:                                              ; preds = %210, %214
  %215 = phi i64 [ %222, %214 ], [ %211, %210 ]
  %216 = phi i64 [ %223, %214 ], [ %183, %210 ]
  %217 = getelementptr inbounds i32, i32* %208, i64 %215
  %218 = load i32, i32* %217, align 4
  %219 = icmp ne i32 %218, 0
  %220 = zext i1 %219 to i32
  %221 = getelementptr inbounds i32, i32* %206, i64 %215
  store i32 %220, i32* %221, align 4
  %222 = add nuw nsw i64 %215, 1
  %223 = add i64 %216, -1
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %225, label %214, !llvm.loop !41

225:                                              ; preds = %214, %210
  %226 = phi i64 [ %211, %210 ], [ %222, %214 ]
  %227 = icmp ult i64 %213, 3
  br i1 %227, label %288, label %293

228:                                              ; preds = %209
  %229 = getelementptr i8, i8* %203, i64 %171
  %230 = getelementptr i8, i8* %229, i64 %204
  %231 = icmp ult i8* %205, %199
  %232 = icmp ugt i8* %230, %196
  %233 = and i1 %231, %232
  br i1 %233, label %210, label %234

234:                                              ; preds = %228
  br i1 %179, label %270, label %235

235:                                              ; preds = %234, %235
  %236 = phi i64 [ %267, %235 ], [ 0, %234 ]
  %237 = phi i64 [ %268, %235 ], [ %180, %234 ]
  %238 = getelementptr inbounds i32, i32* %208, i64 %236
  %239 = bitcast i32* %238 to <4 x i32>*
  %240 = load <4 x i32>, <4 x i32>* %239, align 4, !alias.scope !42
  %241 = getelementptr inbounds i32, i32* %238, i64 4
  %242 = bitcast i32* %241 to <4 x i32>*
  %243 = load <4 x i32>, <4 x i32>* %242, align 4, !alias.scope !42
  %244 = icmp ne <4 x i32> %240, zeroinitializer
  %245 = icmp ne <4 x i32> %243, zeroinitializer
  %246 = zext <4 x i1> %244 to <4 x i32>
  %247 = zext <4 x i1> %245 to <4 x i32>
  %248 = getelementptr inbounds i32, i32* %206, i64 %236
  %249 = bitcast i32* %248 to <4 x i32>*
  store <4 x i32> %246, <4 x i32>* %249, align 4, !alias.scope !45, !noalias !42
  %250 = getelementptr inbounds i32, i32* %248, i64 4
  %251 = bitcast i32* %250 to <4 x i32>*
  store <4 x i32> %247, <4 x i32>* %251, align 4, !alias.scope !45, !noalias !42
  %252 = or i64 %236, 8
  %253 = getelementptr inbounds i32, i32* %208, i64 %252
  %254 = bitcast i32* %253 to <4 x i32>*
  %255 = load <4 x i32>, <4 x i32>* %254, align 4, !alias.scope !42
  %256 = getelementptr inbounds i32, i32* %253, i64 4
  %257 = bitcast i32* %256 to <4 x i32>*
  %258 = load <4 x i32>, <4 x i32>* %257, align 4, !alias.scope !42
  %259 = icmp ne <4 x i32> %255, zeroinitializer
  %260 = icmp ne <4 x i32> %258, zeroinitializer
  %261 = zext <4 x i1> %259 to <4 x i32>
  %262 = zext <4 x i1> %260 to <4 x i32>
  %263 = getelementptr inbounds i32, i32* %206, i64 %252
  %264 = bitcast i32* %263 to <4 x i32>*
  store <4 x i32> %261, <4 x i32>* %264, align 4, !alias.scope !45, !noalias !42
  %265 = getelementptr inbounds i32, i32* %263, i64 4
  %266 = bitcast i32* %265 to <4 x i32>*
  store <4 x i32> %262, <4 x i32>* %266, align 4, !alias.scope !45, !noalias !42
  %267 = add i64 %236, 16
  %268 = add i64 %237, -2
  %269 = icmp eq i64 %268, 0
  br i1 %269, label %270, label %235, !llvm.loop !47

270:                                              ; preds = %235, %234
  %271 = phi i64 [ 0, %234 ], [ %267, %235 ]
  br i1 %181, label %287, label %272

272:                                              ; preds = %270
  %273 = getelementptr inbounds i32, i32* %208, i64 %271
  %274 = bitcast i32* %273 to <4 x i32>*
  %275 = load <4 x i32>, <4 x i32>* %274, align 4, !alias.scope !42
  %276 = getelementptr inbounds i32, i32* %273, i64 4
  %277 = bitcast i32* %276 to <4 x i32>*
  %278 = load <4 x i32>, <4 x i32>* %277, align 4, !alias.scope !42
  %279 = icmp ne <4 x i32> %275, zeroinitializer
  %280 = icmp ne <4 x i32> %278, zeroinitializer
  %281 = zext <4 x i1> %279 to <4 x i32>
  %282 = zext <4 x i1> %280 to <4 x i32>
  %283 = getelementptr inbounds i32, i32* %206, i64 %271
  %284 = bitcast i32* %283 to <4 x i32>*
  store <4 x i32> %281, <4 x i32>* %284, align 4, !alias.scope !45, !noalias !42
  %285 = getelementptr inbounds i32, i32* %283, i64 4
  %286 = bitcast i32* %285 to <4 x i32>*
  store <4 x i32> %282, <4 x i32>* %286, align 4, !alias.scope !45, !noalias !42
  br label %287

287:                                              ; preds = %270, %272
  br i1 %182, label %288, label %210

288:                                              ; preds = %225, %293, %287, %191
  %289 = add nuw nsw i64 %193, 1
  %290 = icmp eq i64 %289, %144
  br i1 %290, label %185, label %291

291:                                              ; preds = %288
  %292 = load i32, i32* %162, align 4
  br label %191

293:                                              ; preds = %225, %293
  %294 = phi i64 [ %318, %293 ], [ %226, %225 ]
  %295 = getelementptr inbounds i32, i32* %208, i64 %294
  %296 = load i32, i32* %295, align 4
  %297 = icmp ne i32 %296, 0
  %298 = zext i1 %297 to i32
  %299 = getelementptr inbounds i32, i32* %206, i64 %294
  store i32 %298, i32* %299, align 4
  %300 = add nuw nsw i64 %294, 1
  %301 = getelementptr inbounds i32, i32* %208, i64 %300
  %302 = load i32, i32* %301, align 4
  %303 = icmp ne i32 %302, 0
  %304 = zext i1 %303 to i32
  %305 = getelementptr inbounds i32, i32* %206, i64 %300
  store i32 %304, i32* %305, align 4
  %306 = add nuw nsw i64 %294, 2
  %307 = getelementptr inbounds i32, i32* %208, i64 %306
  %308 = load i32, i32* %307, align 4
  %309 = icmp ne i32 %308, 0
  %310 = zext i1 %309 to i32
  %311 = getelementptr inbounds i32, i32* %206, i64 %306
  store i32 %310, i32* %311, align 4
  %312 = add nuw nsw i64 %294, 3
  %313 = getelementptr inbounds i32, i32* %208, i64 %312
  %314 = load i32, i32* %313, align 4
  %315 = icmp ne i32 %314, 0
  %316 = zext i1 %315 to i32
  %317 = getelementptr inbounds i32, i32* %206, i64 %312
  store i32 %316, i32* %317, align 4
  %318 = add nuw nsw i64 %294, 4
  %319 = icmp eq i64 %318, %170
  br i1 %319, label %288, label %293, !llvm.loop !48

320:                                              ; preds = %154, %185
  %321 = phi i8 [ %156, %154 ], [ %187, %185 ]
  %322 = xor i8 %321, -1
  %323 = and i8 %146, %322
  %324 = icmp eq i8 %323, 0
  br i1 %324, label %328, label %325

325:                                              ; preds = %320
  %326 = zext i8 %323 to i32
  %327 = tail call i32 @llvm.cttz.i32(i32 %326, i1 true) #13, !range !2
  br label %145

328:                                              ; preds = %320, %129, %137, %33
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk14setUniform2uivEiiPKj(%"class.rx::ProgramVk"*, i32, i32, i32*) unnamed_addr #1 align 2 {
  tail call void @_ZN2rx9ProgramVk14setUniformImplIjEEviiPKT_j(%"class.rx::ProgramVk"* %0, i32 %1, i32 %2, i32* %3, i32 36294)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk14setUniform3uivEiiPKj(%"class.rx::ProgramVk"*, i32, i32, i32*) unnamed_addr #1 align 2 {
  tail call void @_ZN2rx9ProgramVk14setUniformImplIjEEviiPKT_j(%"class.rx::ProgramVk"* %0, i32 %1, i32 %2, i32* %3, i32 36295)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk14setUniform4uivEiiPKj(%"class.rx::ProgramVk"*, i32, i32, i32*) unnamed_addr #1 align 2 {
  tail call void @_ZN2rx9ProgramVk14setUniformImplIjEEviiPKT_j(%"class.rx::ProgramVk"* %0, i32 %1, i32 %2, i32* %3, i32 36296)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk19setUniformMatrix2fvEiihPKf(%"class.rx::ProgramVk"*, i32, i32, i8 zeroext, float*) unnamed_addr #1 align 2 {
  tail call void @_ZN2rx9ProgramVk18setUniformMatrixfvILi2ELi2EEEviihPKf(%"class.rx::ProgramVk"* %0, i32 %1, i32 %2, i8 zeroext %3, float* %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx9ProgramVk18setUniformMatrixfvILi2ELi2EEEviihPKf(%"class.rx::ProgramVk"*, i32, i32, i8 zeroext, float*) local_unnamed_addr #1 comdat align 2 {
  %6 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %7 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 5, i32 0, i32 0
  %10 = load %"struct.gl::VariableLocation"*, %"struct.gl::VariableLocation"** %9, align 8
  %11 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 23, i32 0
  %12 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %11, align 8
  %13 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 55
  %14 = load i8, i8* %13, align 4, !range !3
  %15 = icmp eq i8 %14, 0
  %16 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 3
  %17 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 2
  %18 = select i1 %15, %"class.angle::BitSetT.62"* %17, %"class.angle::BitSetT.62"* %16
  %19 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %18, i64 0, i32 0
  %20 = load i8, i8* %19, align 1, !noalias !49
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %33, label %22

22:                                               ; preds = %5
  %23 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 30, i32 0, i32 0
  %24 = load %"struct.gl::LinkedUniform"*, %"struct.gl::LinkedUniform"** %23, align 8
  %25 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = zext i8 %20 to i32
  %29 = tail call i32 @llvm.cttz.i32(i32 %28, i1 true) #13, !range !2
  %30 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8, i32 0
  %31 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %24, i64 %27, i32 1
  %32 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  br label %34

33:                                               ; preds = %59, %5
  ret void

34:                                               ; preds = %64, %22
  %35 = phi i32 [ %29, %22 ], [ %66, %64 ]
  %36 = phi i8 [ %20, %22 ], [ %62, %64 ]
  %37 = zext i32 %35 to i64
  %38 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %37, i32 2, i32 0, i32 0
  %39 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %38, align 8
  %40 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %39, i64 %8, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, -1
  br i1 %42, label %43, label %46

43:                                               ; preds = %34
  %44 = shl i32 1, %35
  %45 = trunc i32 %44 to i8
  br label %59

46:                                               ; preds = %34
  %47 = load i32, i32* %30, align 4
  %48 = tail call i32 @_ZNK2sh14ShaderVariable19getArraySizeProductEv(%"struct.sh::ShaderVariable"* %31) #13
  %49 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %37, i32 1, i32 1
  %50 = load i8*, i8** %49, align 8
  %51 = load i32, i32* %40, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %50, i64 %52
  tail call void @_ZN2rx25SetFloatUniformMatrixGLSLILi2ELi2EE3RunEjjihPKfPh(i32 %47, i32 %48, i32 %2, i8 zeroext %3, float* %4, i8* %53) #13
  %54 = shl i32 1, %35
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 63
  %57 = load i8, i8* %32, align 1
  %58 = or i8 %57, %56
  store i8 %58, i8* %32, align 1
  br label %59

59:                                               ; preds = %43, %46
  %60 = phi i8 [ %45, %43 ], [ %55, %46 ]
  %61 = xor i8 %60, -1
  %62 = and i8 %36, %61
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %33, label %64

64:                                               ; preds = %59
  %65 = zext i8 %62 to i32
  %66 = tail call i32 @llvm.cttz.i32(i32 %65, i1 true) #13, !range !2
  br label %34
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk19setUniformMatrix3fvEiihPKf(%"class.rx::ProgramVk"*, i32, i32, i8 zeroext, float*) unnamed_addr #1 align 2 {
  tail call void @_ZN2rx9ProgramVk18setUniformMatrixfvILi3ELi3EEEviihPKf(%"class.rx::ProgramVk"* %0, i32 %1, i32 %2, i8 zeroext %3, float* %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx9ProgramVk18setUniformMatrixfvILi3ELi3EEEviihPKf(%"class.rx::ProgramVk"*, i32, i32, i8 zeroext, float*) local_unnamed_addr #1 comdat align 2 {
  %6 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %7 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 5, i32 0, i32 0
  %10 = load %"struct.gl::VariableLocation"*, %"struct.gl::VariableLocation"** %9, align 8
  %11 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 23, i32 0
  %12 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %11, align 8
  %13 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 55
  %14 = load i8, i8* %13, align 4, !range !3
  %15 = icmp eq i8 %14, 0
  %16 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 3
  %17 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 2
  %18 = select i1 %15, %"class.angle::BitSetT.62"* %17, %"class.angle::BitSetT.62"* %16
  %19 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %18, i64 0, i32 0
  %20 = load i8, i8* %19, align 1, !noalias !52
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %33, label %22

22:                                               ; preds = %5
  %23 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 30, i32 0, i32 0
  %24 = load %"struct.gl::LinkedUniform"*, %"struct.gl::LinkedUniform"** %23, align 8
  %25 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = zext i8 %20 to i32
  %29 = tail call i32 @llvm.cttz.i32(i32 %28, i1 true) #13, !range !2
  %30 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8, i32 0
  %31 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %24, i64 %27, i32 1
  %32 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  br label %34

33:                                               ; preds = %59, %5
  ret void

34:                                               ; preds = %64, %22
  %35 = phi i32 [ %29, %22 ], [ %66, %64 ]
  %36 = phi i8 [ %20, %22 ], [ %62, %64 ]
  %37 = zext i32 %35 to i64
  %38 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %37, i32 2, i32 0, i32 0
  %39 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %38, align 8
  %40 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %39, i64 %8, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, -1
  br i1 %42, label %43, label %46

43:                                               ; preds = %34
  %44 = shl i32 1, %35
  %45 = trunc i32 %44 to i8
  br label %59

46:                                               ; preds = %34
  %47 = load i32, i32* %30, align 4
  %48 = tail call i32 @_ZNK2sh14ShaderVariable19getArraySizeProductEv(%"struct.sh::ShaderVariable"* %31) #13
  %49 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %37, i32 1, i32 1
  %50 = load i8*, i8** %49, align 8
  %51 = load i32, i32* %40, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %50, i64 %52
  tail call void @_ZN2rx25SetFloatUniformMatrixGLSLILi3ELi3EE3RunEjjihPKfPh(i32 %47, i32 %48, i32 %2, i8 zeroext %3, float* %4, i8* %53) #13
  %54 = shl i32 1, %35
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 63
  %57 = load i8, i8* %32, align 1
  %58 = or i8 %57, %56
  store i8 %58, i8* %32, align 1
  br label %59

59:                                               ; preds = %43, %46
  %60 = phi i8 [ %45, %43 ], [ %55, %46 ]
  %61 = xor i8 %60, -1
  %62 = and i8 %36, %61
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %33, label %64

64:                                               ; preds = %59
  %65 = zext i8 %62 to i32
  %66 = tail call i32 @llvm.cttz.i32(i32 %65, i1 true) #13, !range !2
  br label %34
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk19setUniformMatrix4fvEiihPKf(%"class.rx::ProgramVk"*, i32, i32, i8 zeroext, float*) unnamed_addr #1 align 2 {
  tail call void @_ZN2rx9ProgramVk18setUniformMatrixfvILi4ELi4EEEviihPKf(%"class.rx::ProgramVk"* %0, i32 %1, i32 %2, i8 zeroext %3, float* %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx9ProgramVk18setUniformMatrixfvILi4ELi4EEEviihPKf(%"class.rx::ProgramVk"*, i32, i32, i8 zeroext, float*) local_unnamed_addr #1 comdat align 2 {
  %6 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %7 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 5, i32 0, i32 0
  %10 = load %"struct.gl::VariableLocation"*, %"struct.gl::VariableLocation"** %9, align 8
  %11 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 23, i32 0
  %12 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %11, align 8
  %13 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 55
  %14 = load i8, i8* %13, align 4, !range !3
  %15 = icmp eq i8 %14, 0
  %16 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 3
  %17 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 2
  %18 = select i1 %15, %"class.angle::BitSetT.62"* %17, %"class.angle::BitSetT.62"* %16
  %19 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %18, i64 0, i32 0
  %20 = load i8, i8* %19, align 1, !noalias !55
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %33, label %22

22:                                               ; preds = %5
  %23 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 30, i32 0, i32 0
  %24 = load %"struct.gl::LinkedUniform"*, %"struct.gl::LinkedUniform"** %23, align 8
  %25 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = zext i8 %20 to i32
  %29 = tail call i32 @llvm.cttz.i32(i32 %28, i1 true) #13, !range !2
  %30 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8, i32 0
  %31 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %24, i64 %27, i32 1
  %32 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  br label %34

33:                                               ; preds = %59, %5
  ret void

34:                                               ; preds = %64, %22
  %35 = phi i32 [ %29, %22 ], [ %66, %64 ]
  %36 = phi i8 [ %20, %22 ], [ %62, %64 ]
  %37 = zext i32 %35 to i64
  %38 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %37, i32 2, i32 0, i32 0
  %39 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %38, align 8
  %40 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %39, i64 %8, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, -1
  br i1 %42, label %43, label %46

43:                                               ; preds = %34
  %44 = shl i32 1, %35
  %45 = trunc i32 %44 to i8
  br label %59

46:                                               ; preds = %34
  %47 = load i32, i32* %30, align 4
  %48 = tail call i32 @_ZNK2sh14ShaderVariable19getArraySizeProductEv(%"struct.sh::ShaderVariable"* %31) #13
  %49 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %37, i32 1, i32 1
  %50 = load i8*, i8** %49, align 8
  %51 = load i32, i32* %40, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %50, i64 %52
  tail call void @_ZN2rx25SetFloatUniformMatrixGLSLILi4ELi4EE3RunEjjihPKfPh(i32 %47, i32 %48, i32 %2, i8 zeroext %3, float* %4, i8* %53) #13
  %54 = shl i32 1, %35
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 63
  %57 = load i8, i8* %32, align 1
  %58 = or i8 %57, %56
  store i8 %58, i8* %32, align 1
  br label %59

59:                                               ; preds = %43, %46
  %60 = phi i8 [ %45, %43 ], [ %55, %46 ]
  %61 = xor i8 %60, -1
  %62 = and i8 %36, %61
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %33, label %64

64:                                               ; preds = %59
  %65 = zext i8 %62 to i32
  %66 = tail call i32 @llvm.cttz.i32(i32 %65, i1 true) #13, !range !2
  br label %34
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk21setUniformMatrix2x3fvEiihPKf(%"class.rx::ProgramVk"*, i32, i32, i8 zeroext, float*) unnamed_addr #1 align 2 {
  tail call void @_ZN2rx9ProgramVk18setUniformMatrixfvILi2ELi3EEEviihPKf(%"class.rx::ProgramVk"* %0, i32 %1, i32 %2, i8 zeroext %3, float* %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx9ProgramVk18setUniformMatrixfvILi2ELi3EEEviihPKf(%"class.rx::ProgramVk"*, i32, i32, i8 zeroext, float*) local_unnamed_addr #1 comdat align 2 {
  %6 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %7 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 5, i32 0, i32 0
  %10 = load %"struct.gl::VariableLocation"*, %"struct.gl::VariableLocation"** %9, align 8
  %11 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 23, i32 0
  %12 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %11, align 8
  %13 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 55
  %14 = load i8, i8* %13, align 4, !range !3
  %15 = icmp eq i8 %14, 0
  %16 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 3
  %17 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 2
  %18 = select i1 %15, %"class.angle::BitSetT.62"* %17, %"class.angle::BitSetT.62"* %16
  %19 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %18, i64 0, i32 0
  %20 = load i8, i8* %19, align 1, !noalias !58
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %33, label %22

22:                                               ; preds = %5
  %23 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 30, i32 0, i32 0
  %24 = load %"struct.gl::LinkedUniform"*, %"struct.gl::LinkedUniform"** %23, align 8
  %25 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = zext i8 %20 to i32
  %29 = tail call i32 @llvm.cttz.i32(i32 %28, i1 true) #13, !range !2
  %30 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8, i32 0
  %31 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %24, i64 %27, i32 1
  %32 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  br label %34

33:                                               ; preds = %59, %5
  ret void

34:                                               ; preds = %64, %22
  %35 = phi i32 [ %29, %22 ], [ %66, %64 ]
  %36 = phi i8 [ %20, %22 ], [ %62, %64 ]
  %37 = zext i32 %35 to i64
  %38 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %37, i32 2, i32 0, i32 0
  %39 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %38, align 8
  %40 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %39, i64 %8, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, -1
  br i1 %42, label %43, label %46

43:                                               ; preds = %34
  %44 = shl i32 1, %35
  %45 = trunc i32 %44 to i8
  br label %59

46:                                               ; preds = %34
  %47 = load i32, i32* %30, align 4
  %48 = tail call i32 @_ZNK2sh14ShaderVariable19getArraySizeProductEv(%"struct.sh::ShaderVariable"* %31) #13
  %49 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %37, i32 1, i32 1
  %50 = load i8*, i8** %49, align 8
  %51 = load i32, i32* %40, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %50, i64 %52
  tail call void @_ZN2rx25SetFloatUniformMatrixGLSLILi2ELi3EE3RunEjjihPKfPh(i32 %47, i32 %48, i32 %2, i8 zeroext %3, float* %4, i8* %53) #13
  %54 = shl i32 1, %35
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 63
  %57 = load i8, i8* %32, align 1
  %58 = or i8 %57, %56
  store i8 %58, i8* %32, align 1
  br label %59

59:                                               ; preds = %43, %46
  %60 = phi i8 [ %45, %43 ], [ %55, %46 ]
  %61 = xor i8 %60, -1
  %62 = and i8 %36, %61
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %33, label %64

64:                                               ; preds = %59
  %65 = zext i8 %62 to i32
  %66 = tail call i32 @llvm.cttz.i32(i32 %65, i1 true) #13, !range !2
  br label %34
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk21setUniformMatrix3x2fvEiihPKf(%"class.rx::ProgramVk"*, i32, i32, i8 zeroext, float*) unnamed_addr #1 align 2 {
  tail call void @_ZN2rx9ProgramVk18setUniformMatrixfvILi3ELi2EEEviihPKf(%"class.rx::ProgramVk"* %0, i32 %1, i32 %2, i8 zeroext %3, float* %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx9ProgramVk18setUniformMatrixfvILi3ELi2EEEviihPKf(%"class.rx::ProgramVk"*, i32, i32, i8 zeroext, float*) local_unnamed_addr #1 comdat align 2 {
  %6 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %7 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 5, i32 0, i32 0
  %10 = load %"struct.gl::VariableLocation"*, %"struct.gl::VariableLocation"** %9, align 8
  %11 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 23, i32 0
  %12 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %11, align 8
  %13 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 55
  %14 = load i8, i8* %13, align 4, !range !3
  %15 = icmp eq i8 %14, 0
  %16 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 3
  %17 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 2
  %18 = select i1 %15, %"class.angle::BitSetT.62"* %17, %"class.angle::BitSetT.62"* %16
  %19 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %18, i64 0, i32 0
  %20 = load i8, i8* %19, align 1, !noalias !61
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %33, label %22

22:                                               ; preds = %5
  %23 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 30, i32 0, i32 0
  %24 = load %"struct.gl::LinkedUniform"*, %"struct.gl::LinkedUniform"** %23, align 8
  %25 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = zext i8 %20 to i32
  %29 = tail call i32 @llvm.cttz.i32(i32 %28, i1 true) #13, !range !2
  %30 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8, i32 0
  %31 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %24, i64 %27, i32 1
  %32 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  br label %34

33:                                               ; preds = %59, %5
  ret void

34:                                               ; preds = %64, %22
  %35 = phi i32 [ %29, %22 ], [ %66, %64 ]
  %36 = phi i8 [ %20, %22 ], [ %62, %64 ]
  %37 = zext i32 %35 to i64
  %38 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %37, i32 2, i32 0, i32 0
  %39 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %38, align 8
  %40 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %39, i64 %8, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, -1
  br i1 %42, label %43, label %46

43:                                               ; preds = %34
  %44 = shl i32 1, %35
  %45 = trunc i32 %44 to i8
  br label %59

46:                                               ; preds = %34
  %47 = load i32, i32* %30, align 4
  %48 = tail call i32 @_ZNK2sh14ShaderVariable19getArraySizeProductEv(%"struct.sh::ShaderVariable"* %31) #13
  %49 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %37, i32 1, i32 1
  %50 = load i8*, i8** %49, align 8
  %51 = load i32, i32* %40, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %50, i64 %52
  tail call void @_ZN2rx25SetFloatUniformMatrixGLSLILi3ELi2EE3RunEjjihPKfPh(i32 %47, i32 %48, i32 %2, i8 zeroext %3, float* %4, i8* %53) #13
  %54 = shl i32 1, %35
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 63
  %57 = load i8, i8* %32, align 1
  %58 = or i8 %57, %56
  store i8 %58, i8* %32, align 1
  br label %59

59:                                               ; preds = %43, %46
  %60 = phi i8 [ %45, %43 ], [ %55, %46 ]
  %61 = xor i8 %60, -1
  %62 = and i8 %36, %61
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %33, label %64

64:                                               ; preds = %59
  %65 = zext i8 %62 to i32
  %66 = tail call i32 @llvm.cttz.i32(i32 %65, i1 true) #13, !range !2
  br label %34
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk21setUniformMatrix2x4fvEiihPKf(%"class.rx::ProgramVk"*, i32, i32, i8 zeroext, float*) unnamed_addr #1 align 2 {
  tail call void @_ZN2rx9ProgramVk18setUniformMatrixfvILi2ELi4EEEviihPKf(%"class.rx::ProgramVk"* %0, i32 %1, i32 %2, i8 zeroext %3, float* %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx9ProgramVk18setUniformMatrixfvILi2ELi4EEEviihPKf(%"class.rx::ProgramVk"*, i32, i32, i8 zeroext, float*) local_unnamed_addr #1 comdat align 2 {
  %6 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %7 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 5, i32 0, i32 0
  %10 = load %"struct.gl::VariableLocation"*, %"struct.gl::VariableLocation"** %9, align 8
  %11 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 23, i32 0
  %12 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %11, align 8
  %13 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 55
  %14 = load i8, i8* %13, align 4, !range !3
  %15 = icmp eq i8 %14, 0
  %16 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 3
  %17 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 2
  %18 = select i1 %15, %"class.angle::BitSetT.62"* %17, %"class.angle::BitSetT.62"* %16
  %19 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %18, i64 0, i32 0
  %20 = load i8, i8* %19, align 1, !noalias !64
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %33, label %22

22:                                               ; preds = %5
  %23 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 30, i32 0, i32 0
  %24 = load %"struct.gl::LinkedUniform"*, %"struct.gl::LinkedUniform"** %23, align 8
  %25 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = zext i8 %20 to i32
  %29 = tail call i32 @llvm.cttz.i32(i32 %28, i1 true) #13, !range !2
  %30 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8, i32 0
  %31 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %24, i64 %27, i32 1
  %32 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  br label %34

33:                                               ; preds = %59, %5
  ret void

34:                                               ; preds = %64, %22
  %35 = phi i32 [ %29, %22 ], [ %66, %64 ]
  %36 = phi i8 [ %20, %22 ], [ %62, %64 ]
  %37 = zext i32 %35 to i64
  %38 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %37, i32 2, i32 0, i32 0
  %39 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %38, align 8
  %40 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %39, i64 %8, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, -1
  br i1 %42, label %43, label %46

43:                                               ; preds = %34
  %44 = shl i32 1, %35
  %45 = trunc i32 %44 to i8
  br label %59

46:                                               ; preds = %34
  %47 = load i32, i32* %30, align 4
  %48 = tail call i32 @_ZNK2sh14ShaderVariable19getArraySizeProductEv(%"struct.sh::ShaderVariable"* %31) #13
  %49 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %37, i32 1, i32 1
  %50 = load i8*, i8** %49, align 8
  %51 = load i32, i32* %40, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %50, i64 %52
  tail call void @_ZN2rx25SetFloatUniformMatrixGLSLILi2ELi4EE3RunEjjihPKfPh(i32 %47, i32 %48, i32 %2, i8 zeroext %3, float* %4, i8* %53) #13
  %54 = shl i32 1, %35
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 63
  %57 = load i8, i8* %32, align 1
  %58 = or i8 %57, %56
  store i8 %58, i8* %32, align 1
  br label %59

59:                                               ; preds = %43, %46
  %60 = phi i8 [ %45, %43 ], [ %55, %46 ]
  %61 = xor i8 %60, -1
  %62 = and i8 %36, %61
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %33, label %64

64:                                               ; preds = %59
  %65 = zext i8 %62 to i32
  %66 = tail call i32 @llvm.cttz.i32(i32 %65, i1 true) #13, !range !2
  br label %34
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk21setUniformMatrix4x2fvEiihPKf(%"class.rx::ProgramVk"*, i32, i32, i8 zeroext, float*) unnamed_addr #1 align 2 {
  tail call void @_ZN2rx9ProgramVk18setUniformMatrixfvILi4ELi2EEEviihPKf(%"class.rx::ProgramVk"* %0, i32 %1, i32 %2, i8 zeroext %3, float* %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx9ProgramVk18setUniformMatrixfvILi4ELi2EEEviihPKf(%"class.rx::ProgramVk"*, i32, i32, i8 zeroext, float*) local_unnamed_addr #1 comdat align 2 {
  %6 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %7 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 5, i32 0, i32 0
  %10 = load %"struct.gl::VariableLocation"*, %"struct.gl::VariableLocation"** %9, align 8
  %11 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 23, i32 0
  %12 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %11, align 8
  %13 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 55
  %14 = load i8, i8* %13, align 4, !range !3
  %15 = icmp eq i8 %14, 0
  %16 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 3
  %17 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 2
  %18 = select i1 %15, %"class.angle::BitSetT.62"* %17, %"class.angle::BitSetT.62"* %16
  %19 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %18, i64 0, i32 0
  %20 = load i8, i8* %19, align 1, !noalias !67
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %33, label %22

22:                                               ; preds = %5
  %23 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 30, i32 0, i32 0
  %24 = load %"struct.gl::LinkedUniform"*, %"struct.gl::LinkedUniform"** %23, align 8
  %25 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = zext i8 %20 to i32
  %29 = tail call i32 @llvm.cttz.i32(i32 %28, i1 true) #13, !range !2
  %30 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8, i32 0
  %31 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %24, i64 %27, i32 1
  %32 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  br label %34

33:                                               ; preds = %59, %5
  ret void

34:                                               ; preds = %64, %22
  %35 = phi i32 [ %29, %22 ], [ %66, %64 ]
  %36 = phi i8 [ %20, %22 ], [ %62, %64 ]
  %37 = zext i32 %35 to i64
  %38 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %37, i32 2, i32 0, i32 0
  %39 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %38, align 8
  %40 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %39, i64 %8, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, -1
  br i1 %42, label %43, label %46

43:                                               ; preds = %34
  %44 = shl i32 1, %35
  %45 = trunc i32 %44 to i8
  br label %59

46:                                               ; preds = %34
  %47 = load i32, i32* %30, align 4
  %48 = tail call i32 @_ZNK2sh14ShaderVariable19getArraySizeProductEv(%"struct.sh::ShaderVariable"* %31) #13
  %49 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %37, i32 1, i32 1
  %50 = load i8*, i8** %49, align 8
  %51 = load i32, i32* %40, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %50, i64 %52
  tail call void @_ZN2rx25SetFloatUniformMatrixGLSLILi4ELi2EE3RunEjjihPKfPh(i32 %47, i32 %48, i32 %2, i8 zeroext %3, float* %4, i8* %53) #13
  %54 = shl i32 1, %35
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 63
  %57 = load i8, i8* %32, align 1
  %58 = or i8 %57, %56
  store i8 %58, i8* %32, align 1
  br label %59

59:                                               ; preds = %43, %46
  %60 = phi i8 [ %45, %43 ], [ %55, %46 ]
  %61 = xor i8 %60, -1
  %62 = and i8 %36, %61
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %33, label %64

64:                                               ; preds = %59
  %65 = zext i8 %62 to i32
  %66 = tail call i32 @llvm.cttz.i32(i32 %65, i1 true) #13, !range !2
  br label %34
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk21setUniformMatrix3x4fvEiihPKf(%"class.rx::ProgramVk"*, i32, i32, i8 zeroext, float*) unnamed_addr #1 align 2 {
  tail call void @_ZN2rx9ProgramVk18setUniformMatrixfvILi3ELi4EEEviihPKf(%"class.rx::ProgramVk"* %0, i32 %1, i32 %2, i8 zeroext %3, float* %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx9ProgramVk18setUniformMatrixfvILi3ELi4EEEviihPKf(%"class.rx::ProgramVk"*, i32, i32, i8 zeroext, float*) local_unnamed_addr #1 comdat align 2 {
  %6 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %7 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 5, i32 0, i32 0
  %10 = load %"struct.gl::VariableLocation"*, %"struct.gl::VariableLocation"** %9, align 8
  %11 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 23, i32 0
  %12 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %11, align 8
  %13 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 55
  %14 = load i8, i8* %13, align 4, !range !3
  %15 = icmp eq i8 %14, 0
  %16 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 3
  %17 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 2
  %18 = select i1 %15, %"class.angle::BitSetT.62"* %17, %"class.angle::BitSetT.62"* %16
  %19 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %18, i64 0, i32 0
  %20 = load i8, i8* %19, align 1, !noalias !70
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %33, label %22

22:                                               ; preds = %5
  %23 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 30, i32 0, i32 0
  %24 = load %"struct.gl::LinkedUniform"*, %"struct.gl::LinkedUniform"** %23, align 8
  %25 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = zext i8 %20 to i32
  %29 = tail call i32 @llvm.cttz.i32(i32 %28, i1 true) #13, !range !2
  %30 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8, i32 0
  %31 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %24, i64 %27, i32 1
  %32 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  br label %34

33:                                               ; preds = %59, %5
  ret void

34:                                               ; preds = %64, %22
  %35 = phi i32 [ %29, %22 ], [ %66, %64 ]
  %36 = phi i8 [ %20, %22 ], [ %62, %64 ]
  %37 = zext i32 %35 to i64
  %38 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %37, i32 2, i32 0, i32 0
  %39 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %38, align 8
  %40 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %39, i64 %8, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, -1
  br i1 %42, label %43, label %46

43:                                               ; preds = %34
  %44 = shl i32 1, %35
  %45 = trunc i32 %44 to i8
  br label %59

46:                                               ; preds = %34
  %47 = load i32, i32* %30, align 4
  %48 = tail call i32 @_ZNK2sh14ShaderVariable19getArraySizeProductEv(%"struct.sh::ShaderVariable"* %31) #13
  %49 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %37, i32 1, i32 1
  %50 = load i8*, i8** %49, align 8
  %51 = load i32, i32* %40, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %50, i64 %52
  tail call void @_ZN2rx25SetFloatUniformMatrixGLSLILi3ELi4EE3RunEjjihPKfPh(i32 %47, i32 %48, i32 %2, i8 zeroext %3, float* %4, i8* %53) #13
  %54 = shl i32 1, %35
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 63
  %57 = load i8, i8* %32, align 1
  %58 = or i8 %57, %56
  store i8 %58, i8* %32, align 1
  br label %59

59:                                               ; preds = %43, %46
  %60 = phi i8 [ %45, %43 ], [ %55, %46 ]
  %61 = xor i8 %60, -1
  %62 = and i8 %36, %61
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %33, label %64

64:                                               ; preds = %59
  %65 = zext i8 %62 to i32
  %66 = tail call i32 @llvm.cttz.i32(i32 %65, i1 true) #13, !range !2
  br label %34
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk21setUniformMatrix4x3fvEiihPKf(%"class.rx::ProgramVk"*, i32, i32, i8 zeroext, float*) unnamed_addr #1 align 2 {
  tail call void @_ZN2rx9ProgramVk18setUniformMatrixfvILi4ELi3EEEviihPKf(%"class.rx::ProgramVk"* %0, i32 %1, i32 %2, i8 zeroext %3, float* %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx9ProgramVk18setUniformMatrixfvILi4ELi3EEEviihPKf(%"class.rx::ProgramVk"*, i32, i32, i8 zeroext, float*) local_unnamed_addr #1 comdat align 2 {
  %6 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %7 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 5, i32 0, i32 0
  %10 = load %"struct.gl::VariableLocation"*, %"struct.gl::VariableLocation"** %9, align 8
  %11 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %7, i64 0, i32 23, i32 0
  %12 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %11, align 8
  %13 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 55
  %14 = load i8, i8* %13, align 4, !range !3
  %15 = icmp eq i8 %14, 0
  %16 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 3
  %17 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 2
  %18 = select i1 %15, %"class.angle::BitSetT.62"* %17, %"class.angle::BitSetT.62"* %16
  %19 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %18, i64 0, i32 0
  %20 = load i8, i8* %19, align 1, !noalias !73
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %33, label %22

22:                                               ; preds = %5
  %23 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 30, i32 0, i32 0
  %24 = load %"struct.gl::LinkedUniform"*, %"struct.gl::LinkedUniform"** %23, align 8
  %25 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = zext i32 %26 to i64
  %28 = zext i8 %20 to i32
  %29 = tail call i32 @llvm.cttz.i32(i32 %28, i1 true) #13, !range !2
  %30 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 %8, i32 0
  %31 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %24, i64 %27, i32 1
  %32 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  br label %34

33:                                               ; preds = %59, %5
  ret void

34:                                               ; preds = %64, %22
  %35 = phi i32 [ %29, %22 ], [ %66, %64 ]
  %36 = phi i8 [ %20, %22 ], [ %62, %64 ]
  %37 = zext i32 %35 to i64
  %38 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %37, i32 2, i32 0, i32 0
  %39 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %38, align 8
  %40 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %39, i64 %8, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, -1
  br i1 %42, label %43, label %46

43:                                               ; preds = %34
  %44 = shl i32 1, %35
  %45 = trunc i32 %44 to i8
  br label %59

46:                                               ; preds = %34
  %47 = load i32, i32* %30, align 4
  %48 = tail call i32 @_ZNK2sh14ShaderVariable19getArraySizeProductEv(%"struct.sh::ShaderVariable"* %31) #13
  %49 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %37, i32 1, i32 1
  %50 = load i8*, i8** %49, align 8
  %51 = load i32, i32* %40, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %50, i64 %52
  tail call void @_ZN2rx25SetFloatUniformMatrixGLSLILi4ELi3EE3RunEjjihPKfPh(i32 %47, i32 %48, i32 %2, i8 zeroext %3, float* %4, i8* %53) #13
  %54 = shl i32 1, %35
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 63
  %57 = load i8, i8* %32, align 1
  %58 = or i8 %57, %56
  store i8 %58, i8* %32, align 1
  br label %59

59:                                               ; preds = %43, %46
  %60 = phi i8 [ %45, %43 ], [ %55, %46 ]
  %61 = xor i8 %60, -1
  %62 = and i8 %36, %61
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %33, label %64

64:                                               ; preds = %59
  %65 = zext i8 %62 to i32
  %66 = tail call i32 @llvm.cttz.i32(i32 %65, i1 true) #13, !range !2
  br label %34
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2rx9ProgramVk12getUniformfvEPKN2gl7ContextEiPf(%"class.rx::ProgramVk"*, %"class.gl::Context"* nocapture readnone, i32, float*) unnamed_addr #1 align 2 {
  tail call void @_ZNK2rx9ProgramVk14getUniformImplIfEEviPT_j(%"class.rx::ProgramVk"* %0, i32 %2, float* %3, i32 5126)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK2rx9ProgramVk14getUniformImplIfEEviPT_j(%"class.rx::ProgramVk"*, i32, float*, i32) local_unnamed_addr #1 comdat align 2 {
  %5 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %6 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %6, i64 0, i32 5, i32 0, i32 0
  %9 = load %"struct.gl::VariableLocation"*, %"struct.gl::VariableLocation"** %8, align 8
  %10 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %9, i64 %7
  %11 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %6, i64 0, i32 23, i32 0
  %12 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %11, align 8
  %13 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %9, i64 %7, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 30, i32 0, i32 0
  %17 = load %"struct.gl::LinkedUniform"*, %"struct.gl::LinkedUniform"** %16, align 8
  %18 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %17, i64 %15
  %19 = bitcast %"struct.gl::LinkedUniform"* %18 to %"struct.gl::ActiveVariable"*
  %20 = tail call zeroext i8 @_ZNK2gl14ActiveVariable29getFirstShaderTypeWhereActiveEv(%"struct.gl::ActiveVariable"* %19) #13
  %21 = zext i8 %20 to i64
  %22 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %21, i32 2, i32 0, i32 0
  %23 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %22, align 8
  %24 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %23, i64 %7
  %25 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %17, i64 %15, i32 1, i32 0
  %26 = load i32, i32* %25, align 8
  %27 = tail call zeroext i1 @_ZN2gl12IsMatrixTypeEj(i32 %26) #13
  br i1 %27, label %28, label %44

28:                                               ; preds = %4
  %29 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %21, i32 1, i32 1
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %24, i64 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %30, i64 %33
  %35 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %23, i64 %7, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = mul i32 %38, %36
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %34, i64 %40
  %42 = load i32, i32* %25, align 8
  %43 = bitcast i8* %41 to float*
  tail call void @_ZN2rx16GetMatrixUniformEjPfPKfb(i32 %42, float* %2, float* %43, i1 zeroext false) #13
  br label %74

44:                                               ; preds = %4
  %45 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %17, i64 %15, i32 2
  %46 = load %"struct.gl::UniformTypeInfo"*, %"struct.gl::UniformTypeInfo"** %45, align 8
  %47 = getelementptr inbounds %"struct.gl::UniformTypeInfo", %"struct.gl::UniformTypeInfo"* %46, i64 0, i32 9
  %48 = load i32, i32* %47, align 8
  %49 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 0, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = shl i32 %48, 2
  %52 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %21, i32 1, i32 1
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %24, i64 0, i32 0
  %55 = load i32, i32* %54, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i8, i8* %53, i64 %56
  %58 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %23, i64 %7, i32 1
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %59, 0
  %61 = icmp eq i32 %59, %51
  %62 = or i1 %60, %61
  %63 = mul i32 %59, %50
  br i1 %62, label %64, label %69

64:                                               ; preds = %44
  %65 = zext i32 %63 to i64
  %66 = getelementptr inbounds i8, i8* %57, i64 %65
  %67 = bitcast float* %2 to i8*
  %68 = sext i32 %51 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %67, i8* align 1 %66, i64 %68, i1 false) #13
  br label %74

69:                                               ; preds = %44
  %70 = sext i32 %63 to i64
  %71 = getelementptr inbounds i8, i8* %57, i64 %70
  %72 = bitcast float* %2 to i8*
  %73 = sext i32 %51 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %72, i8* align 1 %71, i64 %73, i1 false) #13
  br label %74

74:                                               ; preds = %69, %64, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2rx9ProgramVk12getUniformivEPKN2gl7ContextEiPi(%"class.rx::ProgramVk"*, %"class.gl::Context"* nocapture readnone, i32, i32*) unnamed_addr #1 align 2 {
  tail call void @_ZNK2rx9ProgramVk14getUniformImplIiEEviPT_j(%"class.rx::ProgramVk"* %0, i32 %2, i32* %3, i32 5124)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK2rx9ProgramVk14getUniformImplIiEEviPT_j(%"class.rx::ProgramVk"*, i32, i32*, i32) local_unnamed_addr #1 comdat align 2 {
  %5 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %6 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %6, i64 0, i32 5, i32 0, i32 0
  %9 = load %"struct.gl::VariableLocation"*, %"struct.gl::VariableLocation"** %8, align 8
  %10 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %9, i64 %7
  %11 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %6, i64 0, i32 23, i32 0
  %12 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %11, align 8
  %13 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %9, i64 %7, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 30, i32 0, i32 0
  %17 = load %"struct.gl::LinkedUniform"*, %"struct.gl::LinkedUniform"** %16, align 8
  %18 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %17, i64 %15
  %19 = bitcast %"struct.gl::LinkedUniform"* %18 to %"struct.gl::ActiveVariable"*
  %20 = tail call zeroext i8 @_ZNK2gl14ActiveVariable29getFirstShaderTypeWhereActiveEv(%"struct.gl::ActiveVariable"* %19) #13
  %21 = zext i8 %20 to i64
  %22 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %21, i32 2, i32 0, i32 0
  %23 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %22, align 8
  %24 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %23, i64 %7
  %25 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %17, i64 %15, i32 1, i32 0
  %26 = load i32, i32* %25, align 8
  %27 = tail call zeroext i1 @_ZN2gl12IsMatrixTypeEj(i32 %26) #13
  br i1 %27, label %28, label %44

28:                                               ; preds = %4
  %29 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %21, i32 1, i32 1
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %24, i64 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %30, i64 %33
  %35 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %23, i64 %7, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = mul i32 %38, %36
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %34, i64 %40
  %42 = load i32, i32* %25, align 8
  %43 = bitcast i8* %41 to i32*
  tail call void @_ZN2rx16GetMatrixUniformIiEEvjPT_PKS1_b(i32 %42, i32* %2, i32* %43, i1 zeroext false) #13
  br label %74

44:                                               ; preds = %4
  %45 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %17, i64 %15, i32 2
  %46 = load %"struct.gl::UniformTypeInfo"*, %"struct.gl::UniformTypeInfo"** %45, align 8
  %47 = getelementptr inbounds %"struct.gl::UniformTypeInfo", %"struct.gl::UniformTypeInfo"* %46, i64 0, i32 9
  %48 = load i32, i32* %47, align 8
  %49 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 0, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = shl i32 %48, 2
  %52 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %21, i32 1, i32 1
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %24, i64 0, i32 0
  %55 = load i32, i32* %54, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i8, i8* %53, i64 %56
  %58 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %23, i64 %7, i32 1
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %59, 0
  %61 = icmp eq i32 %59, %51
  %62 = or i1 %60, %61
  %63 = mul i32 %59, %50
  br i1 %62, label %64, label %69

64:                                               ; preds = %44
  %65 = zext i32 %63 to i64
  %66 = getelementptr inbounds i8, i8* %57, i64 %65
  %67 = bitcast i32* %2 to i8*
  %68 = sext i32 %51 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %67, i8* align 1 %66, i64 %68, i1 false) #13
  br label %74

69:                                               ; preds = %44
  %70 = sext i32 %63 to i64
  %71 = getelementptr inbounds i8, i8* %57, i64 %70
  %72 = bitcast i32* %2 to i8*
  %73 = sext i32 %51 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %72, i8* align 1 %71, i64 %73, i1 false) #13
  br label %74

74:                                               ; preds = %69, %64, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2rx9ProgramVk13getUniformuivEPKN2gl7ContextEiPj(%"class.rx::ProgramVk"*, %"class.gl::Context"* nocapture readnone, i32, i32*) unnamed_addr #1 align 2 {
  tail call void @_ZNK2rx9ProgramVk14getUniformImplIjEEviPT_j(%"class.rx::ProgramVk"* %0, i32 %2, i32* %3, i32 5125)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK2rx9ProgramVk14getUniformImplIjEEviPT_j(%"class.rx::ProgramVk"*, i32, i32*, i32) local_unnamed_addr #1 comdat align 2 {
  %5 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %6 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %6, i64 0, i32 5, i32 0, i32 0
  %9 = load %"struct.gl::VariableLocation"*, %"struct.gl::VariableLocation"** %8, align 8
  %10 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %9, i64 %7
  %11 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %6, i64 0, i32 23, i32 0
  %12 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %11, align 8
  %13 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %9, i64 %7, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %12, i64 0, i32 30, i32 0, i32 0
  %17 = load %"struct.gl::LinkedUniform"*, %"struct.gl::LinkedUniform"** %16, align 8
  %18 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %17, i64 %15
  %19 = bitcast %"struct.gl::LinkedUniform"* %18 to %"struct.gl::ActiveVariable"*
  %20 = tail call zeroext i8 @_ZNK2gl14ActiveVariable29getFirstShaderTypeWhereActiveEv(%"struct.gl::ActiveVariable"* %19) #13
  %21 = zext i8 %20 to i64
  %22 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %21, i32 2, i32 0, i32 0
  %23 = load %"struct.sh::BlockMemberInfo"*, %"struct.sh::BlockMemberInfo"** %22, align 8
  %24 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %23, i64 %7
  %25 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %17, i64 %15, i32 1, i32 0
  %26 = load i32, i32* %25, align 8
  %27 = tail call zeroext i1 @_ZN2gl12IsMatrixTypeEj(i32 %26) #13
  br i1 %27, label %28, label %44

28:                                               ; preds = %4
  %29 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %21, i32 1, i32 1
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %24, i64 0, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %30, i64 %33
  %35 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %23, i64 %7, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = mul i32 %38, %36
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %34, i64 %40
  %42 = load i32, i32* %25, align 8
  %43 = bitcast i8* %41 to i32*
  tail call void @_ZN2rx16GetMatrixUniformIjEEvjPT_PKS1_b(i32 %42, i32* %2, i32* %43, i1 zeroext false) #13
  br label %74

44:                                               ; preds = %4
  %45 = getelementptr inbounds %"struct.gl::LinkedUniform", %"struct.gl::LinkedUniform"* %17, i64 %15, i32 2
  %46 = load %"struct.gl::UniformTypeInfo"*, %"struct.gl::UniformTypeInfo"** %45, align 8
  %47 = getelementptr inbounds %"struct.gl::UniformTypeInfo", %"struct.gl::UniformTypeInfo"* %46, i64 0, i32 9
  %48 = load i32, i32* %47, align 8
  %49 = getelementptr inbounds %"struct.gl::VariableLocation", %"struct.gl::VariableLocation"* %10, i64 0, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = shl i32 %48, 2
  %52 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %21, i32 1, i32 1
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %24, i64 0, i32 0
  %55 = load i32, i32* %54, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i8, i8* %53, i64 %56
  %58 = getelementptr inbounds %"struct.sh::BlockMemberInfo", %"struct.sh::BlockMemberInfo"* %23, i64 %7, i32 1
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %59, 0
  %61 = icmp eq i32 %59, %51
  %62 = or i1 %60, %61
  %63 = mul i32 %59, %50
  br i1 %62, label %64, label %69

64:                                               ; preds = %44
  %65 = zext i32 %63 to i64
  %66 = getelementptr inbounds i8, i8* %57, i64 %65
  %67 = bitcast i32* %2 to i8*
  %68 = sext i32 %51 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %67, i8* align 1 %66, i64 %68, i1 false) #13
  br label %74

69:                                               ; preds = %44
  %70 = sext i32 %63 to i64
  %71 = getelementptr inbounds i8, i8* %57, i64 %70
  %72 = bitcast i32* %2 to i8*
  %73 = sext i32 %51 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %72, i8* align 1 %71, i64 %73, i1 false) #13
  br label %74

74:                                               ; preds = %69, %64, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2rx9ProgramVk30calcUniformUpdateRequiredSpaceEPNS_9ContextVkERKN2gl17ProgramExecutableERN5angle13PackedEnumMapINS3_10ShaderTypeEmLm6EEE(%"class.rx::ProgramVk"* nocapture readonly, %"class.rx::ContextVk"* nocapture readonly, %"class.gl::ProgramExecutable"* nocapture readonly dereferenceable(1728), %"class.angle::PackedEnumMap.1405"* nocapture dereferenceable(48)) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %2, i64 0, i32 55
  %6 = load i8, i8* %5, align 4, !range !3
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %2, i64 0, i32 3
  %9 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %2, i64 0, i32 2
  %10 = select i1 %7, %"class.angle::BitSetT.62"* %9, %"class.angle::BitSetT.62"* %8
  %11 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %10, i64 0, i32 0
  %12 = load i8, i8* %11, align 1, !noalias !76
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %4
  %15 = zext i8 %12 to i32
  %16 = tail call i32 @llvm.cttz.i32(i32 %15, i1 true) #13, !range !2
  %17 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  %18 = getelementptr inbounds %"class.rx::ContextVk", %"class.rx::ContextVk"* %1, i64 0, i32 1, i32 1
  br label %21

19:                                               ; preds = %43, %4
  %20 = phi i64 [ 0, %4 ], [ %44, %43 ]
  ret i64 %20

21:                                               ; preds = %48, %14
  %22 = phi i64 [ 0, %14 ], [ %44, %48 ]
  %23 = phi i32 [ %16, %14 ], [ %50, %48 ]
  %24 = phi i8 [ %12, %14 ], [ %46, %48 ]
  %25 = zext i32 %23 to i64
  %26 = load i8, i8* %17, align 1
  %27 = shl i32 1, %23
  %28 = trunc i32 %27 to i8
  %29 = and i8 %26, %28
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %43, label %31

31:                                               ; preds = %21
  %32 = getelementptr inbounds %"class.angle::PackedEnumMap.1405", %"class.angle::PackedEnumMap.1405"* %3, i64 0, i32 0, i32 0, i64 %25
  store i64 %22, i64* %32, align 8
  %33 = load %"class.rx::RendererVk"*, %"class.rx::RendererVk"** %18, align 8
  %34 = getelementptr inbounds %"class.rx::RendererVk", %"class.rx::RendererVk"* %33, i64 0, i32 16, i32 7, i32 68
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %25, i32 1, i32 0
  %37 = load i64, i64* %36, align 8
  %38 = add i64 %35, -1
  %39 = add i64 %38, %37
  %40 = urem i64 %39, %35
  %41 = sub i64 %22, %40
  %42 = add i64 %41, %39
  br label %43

43:                                               ; preds = %21, %31
  %44 = phi i64 [ %42, %31 ], [ %22, %21 ]
  %45 = xor i8 %28, -1
  %46 = and i8 %24, %45
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %19, label %48

48:                                               ; preds = %43
  %49 = zext i8 %46 to i32
  %50 = tail call i32 @llvm.cttz.i32(i32 %49, i1 true) #13, !range !2
  br label %21
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2rx9ProgramVk14updateUniformsEPNS_9ContextVkE(%"class.rx::ProgramVk"*, %"class.rx::ContextVk"*) local_unnamed_addr #1 align 2 {
  %3 = alloca i8, align 1
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %"class.angle::PackedEnumMap.1405", align 8
  %7 = alloca %"class.rx::vk::UniformsAndXfbDescriptorDesc", align 4
  %8 = alloca i8, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #13
  store i8 0, i8* %3, align 1
  %9 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #13
  store i8* null, i8** %4, align 8
  %10 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #13
  store i64 0, i64* %5, align 8
  %11 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %12 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %11, align 8
  %13 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %12, i64 0, i32 23, i32 0
  %14 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %13, align 8
  %15 = bitcast %"class.angle::PackedEnumMap.1405"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %15) #13
  %16 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %14, i64 0, i32 55
  %17 = bitcast %"class.angle::PackedEnumMap.1405"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 48, i1 false)
  %18 = load i8, i8* %16, align 4, !range !3
  %19 = icmp eq i8 %18, 0
  %20 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %14, i64 0, i32 3
  %21 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %14, i64 0, i32 2
  %22 = select i1 %19, %"class.angle::BitSetT.62"* %21, %"class.angle::BitSetT.62"* %20
  %23 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %22, i64 0, i32 0
  %24 = load i8, i8* %23, align 1, !noalias !79
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %61, label %26

26:                                               ; preds = %2
  %27 = zext i8 %24 to i32
  %28 = tail call i32 @llvm.cttz.i32(i32 %27, i1 true) #13, !range !2
  %29 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  %30 = getelementptr inbounds %"class.rx::ContextVk", %"class.rx::ContextVk"* %1, i64 0, i32 1, i32 1
  %31 = load i8, i8* %29, align 1
  br label %32

32:                                               ; preds = %58, %26
  %33 = phi i64 [ 0, %26 ], [ %54, %58 ]
  %34 = phi i32 [ %28, %26 ], [ %60, %58 ]
  %35 = phi i8 [ %24, %26 ], [ %56, %58 ]
  %36 = zext i32 %34 to i64
  %37 = shl i32 1, %34
  %38 = trunc i32 %37 to i8
  %39 = and i8 %31, %38
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %53, label %41

41:                                               ; preds = %32
  %42 = getelementptr inbounds %"class.angle::PackedEnumMap.1405", %"class.angle::PackedEnumMap.1405"* %6, i64 0, i32 0, i32 0, i64 %36
  store i64 %33, i64* %42, align 8
  %43 = load %"class.rx::RendererVk"*, %"class.rx::RendererVk"** %30, align 8
  %44 = getelementptr inbounds %"class.rx::RendererVk", %"class.rx::RendererVk"* %43, i64 0, i32 16, i32 7, i32 68
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %36, i32 1, i32 0
  %47 = load i64, i64* %46, align 8
  %48 = add i64 %45, -1
  %49 = add i64 %48, %47
  %50 = urem i64 %49, %45
  %51 = sub i64 %33, %50
  %52 = add i64 %51, %49
  br label %53

53:                                               ; preds = %41, %32
  %54 = phi i64 [ %52, %41 ], [ %33, %32 ]
  %55 = xor i8 %38, -1
  %56 = and i8 %35, %55
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %61, label %58

58:                                               ; preds = %53
  %59 = zext i8 %56 to i32
  %60 = tail call i32 @llvm.cttz.i32(i32 %59, i1 true) #13, !range !2
  br label %32

61:                                               ; preds = %53, %2
  %62 = phi i64 [ 0, %2 ], [ %54, %53 ]
  %63 = getelementptr inbounds %"class.rx::ContextVk", %"class.rx::ContextVk"* %1, i64 0, i32 81
  %64 = call zeroext i1 @_ZN2rx2vk13DynamicBuffer25allocateFromCurrentBufferEmPPhPm(%"class.rx::vk::DynamicBuffer"* %63, i64 %62, i8** nonnull %4, i64* nonnull %5) #13
  br i1 %64, label %146, label %65

65:                                               ; preds = %61
  %66 = load i8, i8* %16, align 4, !range !3
  %67 = icmp eq i8 %66, 0
  %68 = select i1 %67, %"class.angle::BitSetT.62"* %21, %"class.angle::BitSetT.62"* %20
  %69 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %68, i64 0, i32 0
  %70 = load i8, i8* %69, align 1, !noalias !82
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %78, label %72

72:                                               ; preds = %65
  %73 = zext i8 %70 to i32
  %74 = call i32 @llvm.cttz.i32(i32 %73, i1 true) #13, !range !2
  %75 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  br label %126

76:                                               ; preds = %139
  %77 = load i8, i8* %16, align 4, !range !3
  br label %78

78:                                               ; preds = %65, %76
  %79 = phi i8 [ %77, %76 ], [ %66, %65 ]
  %80 = icmp eq i8 %79, 0
  %81 = select i1 %80, %"class.angle::BitSetT.62"* %21, %"class.angle::BitSetT.62"* %20
  %82 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %81, i64 0, i32 0
  %83 = load i8, i8* %82, align 1, !noalias !85
  %84 = icmp eq i8 %83, 0
  br i1 %84, label %120, label %85

85:                                               ; preds = %78
  %86 = zext i8 %83 to i32
  %87 = call i32 @llvm.cttz.i32(i32 %86, i1 true) #13, !range !2
  %88 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  %89 = getelementptr inbounds %"class.rx::ContextVk", %"class.rx::ContextVk"* %1, i64 0, i32 1, i32 1
  %90 = load i8, i8* %88, align 1
  br label %91

91:                                               ; preds = %117, %85
  %92 = phi i64 [ 0, %85 ], [ %113, %117 ]
  %93 = phi i32 [ %87, %85 ], [ %119, %117 ]
  %94 = phi i8 [ %83, %85 ], [ %115, %117 ]
  %95 = zext i32 %93 to i64
  %96 = shl i32 1, %93
  %97 = trunc i32 %96 to i8
  %98 = and i8 %90, %97
  %99 = icmp eq i8 %98, 0
  br i1 %99, label %112, label %100

100:                                              ; preds = %91
  %101 = getelementptr inbounds %"class.angle::PackedEnumMap.1405", %"class.angle::PackedEnumMap.1405"* %6, i64 0, i32 0, i32 0, i64 %95
  store i64 %92, i64* %101, align 8
  %102 = load %"class.rx::RendererVk"*, %"class.rx::RendererVk"** %89, align 8
  %103 = getelementptr inbounds %"class.rx::RendererVk", %"class.rx::RendererVk"* %102, i64 0, i32 16, i32 7, i32 68
  %104 = load i64, i64* %103, align 8
  %105 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %95, i32 1, i32 0
  %106 = load i64, i64* %105, align 8
  %107 = add i64 %104, -1
  %108 = add i64 %107, %106
  %109 = urem i64 %108, %104
  %110 = sub i64 %92, %109
  %111 = add i64 %110, %108
  br label %112

112:                                              ; preds = %100, %91
  %113 = phi i64 [ %111, %100 ], [ %92, %91 ]
  %114 = xor i8 %97, -1
  %115 = and i8 %94, %114
  %116 = icmp eq i8 %115, 0
  br i1 %116, label %120, label %117

117:                                              ; preds = %112
  %118 = zext i8 %115 to i32
  %119 = call i32 @llvm.cttz.i32(i32 %118, i1 true) #13, !range !2
  br label %91

120:                                              ; preds = %112, %78
  %121 = phi i64 [ 0, %78 ], [ %113, %112 ]
  %122 = getelementptr inbounds %"class.rx::ContextVk", %"class.rx::ContextVk"* %1, i64 0, i32 81, i32 8
  %123 = load i64, i64* %122, align 8
  %124 = call i32 @_ZN2rx2vk13DynamicBuffer21allocateWithAlignmentEPNS_9ContextVkEmmPPhPP10VkBuffer_TPmPb(%"class.rx::vk::DynamicBuffer"* %63, %"class.rx::ContextVk"* %1, i64 %121, i64 %123, i8** nonnull %4, %struct.VkBuffer_T** null, i64* nonnull %5, i8* nonnull %3) #13
  %125 = icmp eq i32 %124, 1
  br i1 %125, label %275, label %146

126:                                              ; preds = %143, %72
  %127 = phi i32 [ %74, %72 ], [ %145, %143 ]
  %128 = phi i8 [ %70, %72 ], [ %141, %143 ]
  %129 = zext i32 %127 to i64
  %130 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %129, i32 1, i32 0
  %131 = load i64, i64* %130, align 8
  %132 = icmp eq i64 %131, 0
  %133 = shl i32 1, %127
  %134 = trunc i32 %133 to i8
  br i1 %132, label %139, label %135

135:                                              ; preds = %126
  %136 = and i8 %134, 63
  %137 = load i8, i8* %75, align 1
  %138 = or i8 %137, %136
  store i8 %138, i8* %75, align 1
  br label %139

139:                                              ; preds = %126, %135
  %140 = xor i8 %134, -1
  %141 = and i8 %128, %140
  %142 = icmp eq i8 %141, 0
  br i1 %142, label %76, label %143

143:                                              ; preds = %139
  %144 = zext i8 %141 to i32
  %145 = call i32 @llvm.cttz.i32(i32 %144, i1 true) #13, !range !2
  br label %126

146:                                              ; preds = %120, %61
  %147 = load i8, i8* %16, align 4, !range !3
  %148 = icmp eq i8 %147, 0
  %149 = select i1 %148, %"class.angle::BitSetT.62"* %21, %"class.angle::BitSetT.62"* %20
  %150 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %149, i64 0, i32 0
  %151 = load i8, i8* %150, align 1, !noalias !88
  %152 = icmp eq i8 %151, 0
  br i1 %152, label %158, label %153

153:                                              ; preds = %146
  %154 = zext i8 %151 to i32
  %155 = call i32 @llvm.cttz.i32(i32 %154, i1 true) #13, !range !2
  %156 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  %157 = load i8, i8* %156, align 1
  br label %161

158:                                              ; preds = %190, %146
  %159 = call i32 @_ZN2rx2vk13DynamicBuffer5flushEPNS_9ContextVkE(%"class.rx::vk::DynamicBuffer"* %63, %"class.rx::ContextVk"* %1) #13
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %275, label %199

161:                                              ; preds = %195, %153
  %162 = phi i8 [ %157, %153 ], [ %192, %195 ]
  %163 = phi i32 [ 0, %153 ], [ %196, %195 ]
  %164 = phi i32 [ %155, %153 ], [ %198, %195 ]
  %165 = phi i8 [ %151, %153 ], [ %193, %195 ]
  %166 = zext i32 %164 to i64
  %167 = shl i32 1, %164
  %168 = trunc i32 %167 to i8
  %169 = and i8 %162, %168
  %170 = icmp eq i8 %169, 0
  br i1 %170, label %171, label %173

171:                                              ; preds = %161
  %172 = xor i8 %168, -1
  br label %190

173:                                              ; preds = %161
  %174 = load i8*, i8** %4, align 8
  %175 = getelementptr inbounds %"class.angle::PackedEnumMap.1405", %"class.angle::PackedEnumMap.1405"* %6, i64 0, i32 0, i32 0, i64 %166
  %176 = load i64, i64* %175, align 8
  %177 = getelementptr inbounds i8, i8* %174, i64 %176
  %178 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %166, i32 1, i32 1
  %179 = load i8*, i8** %178, align 8
  %180 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %166, i32 1, i32 0
  %181 = load i64, i64* %180, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %177, i8* align 1 %179, i64 %181, i1 false)
  %182 = load i64, i64* %5, align 8
  %183 = add i64 %182, %176
  %184 = trunc i64 %183 to i32
  %185 = zext i32 %163 to i64
  %186 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 6, i32 13, i32 0, i32 0, i64 %185
  store i32 %184, i32* %186, align 4
  %187 = xor i8 %168, -1
  %188 = load i8, i8* %156, align 1
  %189 = and i8 %188, %187
  store i8 %189, i8* %156, align 1
  br label %190

190:                                              ; preds = %171, %173
  %191 = phi i8 [ %172, %171 ], [ %187, %173 ]
  %192 = phi i8 [ %162, %171 ], [ %189, %173 ]
  %193 = and i8 %165, %191
  %194 = icmp eq i8 %193, 0
  br i1 %194, label %158, label %195

195:                                              ; preds = %190
  %196 = add i32 %163, 1
  %197 = zext i8 %193 to i32
  %198 = call i32 @llvm.cttz.i32(i32 %197, i1 true) #13, !range !2
  br label %161

199:                                              ; preds = %158
  %200 = getelementptr inbounds %"class.rx::ContextVk", %"class.rx::ContextVk"* %1, i64 0, i32 81, i32 4, i32 0, i32 0, i32 0
  %201 = load %"class.rx::vk::BufferHelper"*, %"class.rx::vk::BufferHelper"** %200, align 8
  %202 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 6
  %203 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 6, i32 4, i32 0
  %204 = load i32, i32* %203, align 4
  %205 = getelementptr inbounds %"class.rx::vk::BufferHelper", %"class.rx::vk::BufferHelper"* %201, i64 0, i32 10, i32 0
  %206 = load i32, i32* %205, align 4
  %207 = icmp eq i32 %204, %206
  br i1 %207, label %275, label %208

208:                                              ; preds = %199
  %209 = bitcast %"class.rx::vk::UniformsAndXfbDescriptorDesc"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %209) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %209, i8 -86, i64 40, i1 false)
  call void @_ZN2rx2vk28UniformsAndXfbDescriptorDescC1Ev(%"class.rx::vk::UniformsAndXfbDescriptorDesc"* nonnull %7) #13
  %210 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %14, i64 0, i32 26, i32 0, i32 0
  %211 = load %"struct.gl::TransformFeedbackVarying"*, %"struct.gl::TransformFeedbackVarying"** %210, align 8
  %212 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %14, i64 0, i32 26, i32 0, i32 1
  %213 = load %"struct.gl::TransformFeedbackVarying"*, %"struct.gl::TransformFeedbackVarying"** %212, align 8
  %214 = icmp eq %"struct.gl::TransformFeedbackVarying"* %211, %213
  br i1 %214, label %226, label %215

215:                                              ; preds = %208
  %216 = getelementptr inbounds %"class.rx::ContextVk", %"class.rx::ContextVk"* %1, i64 0, i32 0, i32 1
  %217 = load %"class.gl::State"*, %"class.gl::State"** %216, align 8
  %218 = getelementptr inbounds %"class.gl::State", %"class.gl::State"* %217, i64 0, i32 86, i32 0, i32 1
  %219 = load %"class.gl::TransformFeedback"*, %"class.gl::TransformFeedback"** %218, align 8
  %220 = call %"class.rx::TransformFeedbackImpl"* @_ZNK2gl17TransformFeedback17getImplementationEv(%"class.gl::TransformFeedback"* %219) #13
  %221 = getelementptr inbounds %"class.rx::TransformFeedbackImpl", %"class.rx::TransformFeedbackImpl"* %220, i64 39, i32 1
  %222 = bitcast %"class.gl::TransformFeedbackState"** %221 to %"class.rx::vk::UniformsAndXfbDescriptorDesc"*
  %223 = load i32, i32* %205, align 4
  %224 = getelementptr inbounds %"class.rx::vk::UniformsAndXfbDescriptorDesc", %"class.rx::vk::UniformsAndXfbDescriptorDesc"* %222, i64 0, i32 1, i32 0, i64 0, i32 0
  store i32 %223, i32* %224, align 4
  %225 = bitcast %"class.gl::TransformFeedbackState"** %221 to i32*
  br label %230

226:                                              ; preds = %208
  %227 = load i32, i32* %205, align 4
  %228 = getelementptr inbounds %"class.rx::vk::UniformsAndXfbDescriptorDesc", %"class.rx::vk::UniformsAndXfbDescriptorDesc"* %7, i64 0, i32 1, i32 0, i64 0, i32 0
  store i32 %227, i32* %228, align 4
  %229 = getelementptr inbounds %"class.rx::vk::UniformsAndXfbDescriptorDesc", %"class.rx::vk::UniformsAndXfbDescriptorDesc"* %7, i64 0, i32 0
  br label %230

230:                                              ; preds = %226, %215
  %231 = phi i32* [ %229, %226 ], [ %225, %215 ]
  %232 = phi %"class.rx::vk::UniformsAndXfbDescriptorDesc"* [ %7, %226 ], [ %222, %215 ]
  %233 = load i32, i32* %231, align 4
  %234 = icmp eq i32 %233, 0
  %235 = select i1 %234, i32 1, i32 %233
  store i32 %235, i32* %231, align 4
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %8) #13
  store i8 -86, i8* %8, align 1
  %236 = call i32 @_ZN2rx19ProgramExecutableVk31allocUniformAndXfbDescriptorSetEPNS_9ContextVkERKNS_2vk28UniformsAndXfbDescriptorDescEPb(%"class.rx::ProgramExecutableVk"* %202, %"class.rx::ContextVk"* %1, %"class.rx::vk::UniformsAndXfbDescriptorDesc"* dereferenceable(40) %232, i8* nonnull %8) #13
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %274, label %238

238:                                              ; preds = %230
  %239 = load i8, i8* %8, align 1, !range !3
  %240 = icmp eq i8 %239, 0
  br i1 %240, label %273, label %241

241:                                              ; preds = %238
  %242 = load i8, i8* %16, align 4, !range !3
  %243 = icmp eq i8 %242, 0
  %244 = select i1 %243, %"class.angle::BitSetT.62"* %21, %"class.angle::BitSetT.62"* %20
  %245 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %244, i64 0, i32 0
  %246 = load i8, i8* %245, align 1, !noalias !91
  %247 = icmp eq i8 %246, 0
  br i1 %247, label %259, label %248

248:                                              ; preds = %241
  %249 = zext i8 %246 to i32
  %250 = call i32 @llvm.cttz.i32(i32 %249, i1 true) #13, !range !2
  %251 = zext i32 %250 to i64
  %252 = trunc i32 %250 to i8
  %253 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %251
  call void @_ZN2rx19ProgramExecutableVk34updateDefaultUniformsDescriptorSetEN2gl10ShaderTypeERKNS_19DefaultUniformBlockEPNS_2vk12BufferHelperEPNS_9ContextVkE(%"class.rx::ProgramExecutableVk"* %202, i8 zeroext %252, %"struct.rx::DefaultUniformBlock"* dereferenceable(48) %253, %"class.rx::vk::BufferHelper"* %201, %"class.rx::ContextVk"* %1) #13
  %254 = shl i32 1, %250
  %255 = trunc i32 %254 to i8
  %256 = xor i8 %255, -1
  %257 = and i8 %246, %256
  %258 = icmp eq i8 %257, 0
  br i1 %258, label %259, label %261

259:                                              ; preds = %261, %248, %241
  %260 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %11, align 8
  call void @_ZN2rx19ProgramExecutableVk40updateTransformFeedbackDescriptorSetImplERKN2gl12ProgramStateEPNS_9ContextVkE(%"class.rx::ProgramExecutableVk"* %202, %"class.gl::ProgramState"* dereferenceable(304) %260, %"class.rx::ContextVk"* %1) #13
  br label %273

261:                                              ; preds = %248, %261
  %262 = phi i8 [ %271, %261 ], [ %257, %248 ]
  %263 = zext i8 %262 to i32
  %264 = call i32 @llvm.cttz.i32(i32 %263, i1 true) #13, !range !2
  %265 = zext i32 %264 to i64
  %266 = trunc i32 %264 to i8
  %267 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %265
  call void @_ZN2rx19ProgramExecutableVk34updateDefaultUniformsDescriptorSetEN2gl10ShaderTypeERKNS_19DefaultUniformBlockEPNS_2vk12BufferHelperEPNS_9ContextVkE(%"class.rx::ProgramExecutableVk"* %202, i8 zeroext %266, %"struct.rx::DefaultUniformBlock"* dereferenceable(48) %267, %"class.rx::vk::BufferHelper"* %201, %"class.rx::ContextVk"* %1) #13
  %268 = shl i32 1, %264
  %269 = trunc i32 %268 to i8
  %270 = xor i8 %269, -1
  %271 = and i8 %262, %270
  %272 = icmp eq i8 %271, 0
  br i1 %272, label %259, label %261

273:                                              ; preds = %259, %238
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %8) #13
  call void @_ZN2rx2vk28UniformsAndXfbDescriptorDescD1Ev(%"class.rx::vk::UniformsAndXfbDescriptorDesc"* nonnull %7) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %209) #13
  br label %275

274:                                              ; preds = %230
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %8) #13
  call void @_ZN2rx2vk28UniformsAndXfbDescriptorDescD1Ev(%"class.rx::vk::UniformsAndXfbDescriptorDesc"* nonnull %7) #13
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %209) #13
  br label %275

275:                                              ; preds = %199, %273, %274, %158, %120
  %276 = phi i32 [ 1, %158 ], [ 1, %120 ], [ 1, %274 ], [ 0, %273 ], [ 0, %199 ]
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %15) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #13
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #13
  ret i32 %276
}

declare zeroext i1 @_ZN2rx2vk13DynamicBuffer25allocateFromCurrentBufferEmPPhPm(%"class.rx::vk::DynamicBuffer"*, i64, i8**, i64*) local_unnamed_addr #2

declare i32 @_ZN2rx2vk13DynamicBuffer5flushEPNS_9ContextVkE(%"class.rx::vk::DynamicBuffer"*, %"class.rx::ContextVk"*) local_unnamed_addr #2

declare void @_ZN2rx2vk28UniformsAndXfbDescriptorDescC1Ev(%"class.rx::vk::UniformsAndXfbDescriptorDesc"*) unnamed_addr #2

declare i32 @_ZN2rx19ProgramExecutableVk31allocUniformAndXfbDescriptorSetEPNS_9ContextVkERKNS_2vk28UniformsAndXfbDescriptorDescEPb(%"class.rx::ProgramExecutableVk"*, %"class.rx::ContextVk"*, %"class.rx::vk::UniformsAndXfbDescriptorDesc"* dereferenceable(40), i8*) local_unnamed_addr #2

declare void @_ZN2rx19ProgramExecutableVk34updateDefaultUniformsDescriptorSetEN2gl10ShaderTypeERKNS_19DefaultUniformBlockEPNS_2vk12BufferHelperEPNS_9ContextVkE(%"class.rx::ProgramExecutableVk"*, i8 zeroext, %"struct.rx::DefaultUniformBlock"* dereferenceable(48), %"class.rx::vk::BufferHelper"*, %"class.rx::ContextVk"*) local_unnamed_addr #2

declare void @_ZN2rx19ProgramExecutableVk40updateTransformFeedbackDescriptorSetImplERKN2gl12ProgramStateEPNS_9ContextVkE(%"class.rx::ProgramExecutableVk"*, %"class.gl::ProgramState"* dereferenceable(304), %"class.rx::ContextVk"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2rx2vk28UniformsAndXfbDescriptorDescD1Ev(%"class.rx::vk::UniformsAndXfbDescriptorDesc"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk26setAllDefaultUniformsDirtyEv(%"class.rx::ProgramVk"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %3 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %2, align 8
  %4 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %3, i64 0, i32 23, i32 0
  %5 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %4, align 8
  %6 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %5, i64 0, i32 55
  %7 = load i8, i8* %6, align 4, !range !3
  %8 = icmp eq i8 %7, 0
  %9 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %5, i64 0, i32 3
  %10 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %5, i64 0, i32 2
  %11 = select i1 %8, %"class.angle::BitSetT.62"* %10, %"class.angle::BitSetT.62"* %9
  %12 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %11, i64 0, i32 0
  %13 = load i8, i8* %12, align 1, !noalias !94
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %1
  %16 = zext i8 %13 to i32
  %17 = tail call i32 @llvm.cttz.i32(i32 %16, i1 true) #13, !range !2
  %18 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  br label %20

19:                                               ; preds = %33, %1
  ret void

20:                                               ; preds = %37, %15
  %21 = phi i32 [ %17, %15 ], [ %39, %37 ]
  %22 = phi i8 [ %13, %15 ], [ %35, %37 ]
  %23 = zext i32 %21 to i64
  %24 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %23, i32 1, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %25, 0
  %27 = shl i32 1, %21
  %28 = trunc i32 %27 to i8
  br i1 %26, label %33, label %29

29:                                               ; preds = %20
  %30 = and i8 %28, 63
  %31 = load i8, i8* %18, align 1
  %32 = or i8 %31, %30
  store i8 %32, i8* %18, align 1
  br label %33

33:                                               ; preds = %20, %29
  %34 = xor i8 %28, -1
  %35 = and i8 %22, %34
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %19, label %37

37:                                               ; preds = %33
  %38 = zext i8 %35 to i32
  %39 = tail call i32 @llvm.cttz.i32(i32 %38, i1 true) #13, !range !2
  br label %20
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN2rx9ProgramVk13onProgramBindEv(%"class.rx::ProgramVk"* nocapture) local_unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 0, i32 1
  %3 = load %"class.gl::ProgramState"*, %"class.gl::ProgramState"** %2, align 8
  %4 = getelementptr inbounds %"class.gl::ProgramState", %"class.gl::ProgramState"* %3, i64 0, i32 23, i32 0
  %5 = load %"class.gl::ProgramExecutable"*, %"class.gl::ProgramExecutable"** %4, align 8
  %6 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %5, i64 0, i32 55
  %7 = load i8, i8* %6, align 4, !range !3
  %8 = icmp eq i8 %7, 0
  %9 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %5, i64 0, i32 3
  %10 = getelementptr inbounds %"class.gl::ProgramExecutable", %"class.gl::ProgramExecutable"* %5, i64 0, i32 2
  %11 = select i1 %8, %"class.angle::BitSetT.62"* %10, %"class.angle::BitSetT.62"* %9
  %12 = getelementptr inbounds %"class.angle::BitSetT.62", %"class.angle::BitSetT.62"* %11, i64 0, i32 0
  %13 = load i8, i8* %12, align 1, !noalias !97
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %39, label %15

15:                                               ; preds = %1
  %16 = zext i8 %13 to i32
  %17 = tail call i32 @llvm.cttz.i32(i32 %16, i1 true) #13, !range !2
  %18 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 2, i32 0
  br label %19

19:                                               ; preds = %36, %15
  %20 = phi i32 [ %17, %15 ], [ %38, %36 ]
  %21 = phi i8 [ %13, %15 ], [ %34, %36 ]
  %22 = zext i32 %20 to i64
  %23 = getelementptr inbounds %"class.rx::ProgramVk", %"class.rx::ProgramVk"* %0, i64 0, i32 1, i32 0, i32 0, i64 %22, i32 1, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = icmp eq i64 %24, 0
  %26 = shl i32 1, %20
  %27 = trunc i32 %26 to i8
  br i1 %25, label %32, label %28

28:                                               ; preds = %19
  %29 = and i8 %27, 63
  %30 = load i8, i8* %18, align 1
  %31 = or i8 %30, %29
  store i8 %31, i8* %18, align 1
  br label %32

32:                                               ; preds = %28, %19
  %33 = xor i8 %27, -1
  %34 = and i8 %21, %33
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %39, label %36

36:                                               ; preds = %32
  %37 = zext i8 %34 to i32
  %38 = tail call i32 @llvm.cttz.i32(i32 %37, i1 true) #13, !range !2
  br label %19

39:                                               ; preds = %32, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx9LinkEventD2Ev(%"class.rx::LinkEvent"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx13LinkEventDoneD0Ev(%"class.rx::LinkEventDone"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.rx::LinkEventDone"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #14
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2rx13LinkEventDone9isLinkingEv(%"class.rx::LinkEventDone"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx11ProgramImpl26markUnusedUniformLocationsEPNSt3__16vectorIN2gl16VariableLocationENS1_9allocatorIS4_EEEEPNS2_INS3_14SamplerBindingENS5_IS9_EEEEPNS2_INS3_12ImageBindingENS5_ISD_EEEE(%"class.rx::ProgramImpl"*, %"class.std::__1::vector.53"*, %"class.std::__1::vector.126"*, %"class.std::__1::vector.133"*) unnamed_addr #1 comdat align 2 {
  ret void
}

declare void @_ZN2rx19DefaultUniformBlockC1Ev(%"struct.rx::DefaultUniformBlock"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2rx19DefaultUniformBlockD1Ev(%"struct.rx::DefaultUniformBlock"*) unnamed_addr #3

declare i64 @_ZN5angle13AddTraceEventEPNS_15PlatformMethodsEcPKhPKcyiPS5_S3_PKyh(%"struct.angle::PlatformMethods"*, i8 signext, i8*, i8*, i64, i32, i8**, i8*, i64*, i8 zeroext) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2rx12_GLOBAL__N_131Std140BlockLayoutEncoderFactoryD0Ev(%"class.rx::(anonymous namespace)::Std140BlockLayoutEncoderFactory"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.rx::(anonymous namespace)::Std140BlockLayoutEncoderFactory"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal nonnull %"class.sh::BlockLayoutEncoder"* @_ZN2rx12_GLOBAL__N_131Std140BlockLayoutEncoderFactory11makeEncoderEv(%"class.rx::(anonymous namespace)::Std140BlockLayoutEncoderFactory"* nocapture readnone) unnamed_addr #1 align 2 {
  %2 = tail call i8* @_Znwm(i64 16) #14
  %3 = bitcast i8* %2 to %"class.sh::Std140BlockEncoder"*
  tail call void @_ZN2sh18Std140BlockEncoderC1Ev(%"class.sh::Std140BlockEncoder"* nonnull %3) #13
  %4 = bitcast i8* %2 to %"class.sh::BlockLayoutEncoder"*
  ret %"class.sh::BlockLayoutEncoder"* %4
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2gl31CustomBlockLayoutEncoderFactoryD2Ev(%"class.gl::CustomBlockLayoutEncoderFactory"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

declare void @_ZN2sh18Std140BlockEncoderC1Ev(%"class.sh::Std140BlockEncoder"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN2sh15BlockMemberInfoEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(%"class.std::__1::__tree.1465"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #1 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %20, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN2sh15BlockMemberInfoEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(%"class.std::__1::__tree.1465"* %0, %"class.std::__1::__tree_node"* %6) #13
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN2sh15BlockMemberInfoEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(%"class.std::__1::__tree.1465"* %0, %"class.std::__1::__tree_node"* %9) #13
  %10 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 2, i32 0
  %11 = bitcast %"struct.std::__1::pair"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %11, i64 0, i32 1, i32 0
  %13 = load i8, i8* %12, align 1
  %14 = icmp slt i8 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %4
  %16 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  tail call void @_ZdlPv(i8* %17) #14
  br label %18

18:                                               ; preds = %4, %15
  %19 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %19) #14
  br label %20

20:                                               ; preds = %2, %18
  ret void
}

declare void @_ZN2sh25GetActiveUniformBlockInfoERKNSt3__16vectorINS_14ShaderVariableENS0_9allocatorIS2_EEEERKNS0_12basic_stringIcNS0_11char_traitsIcEENS3_IcEEEEPNS_18BlockLayoutEncoderEPNS0_3mapISC_NS_15BlockMemberInfoENS0_4lessISC_EENS3_INS0_4pairISD_SI_EEEEEE(%"class.std::__1::vector.6"* dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24), %"class.sh::BlockLayoutEncoder"*, %"class.std::__1::map.1464"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh18BlockLayoutEncoderD2Ev(%"class.sh::BlockLayoutEncoder"*) unnamed_addr #1 comdat align 2 {
  ret void
}

declare void @_ZN2sh18Std140BlockEncoderC2Ev(%"class.sh::Std140BlockEncoder"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2rx12_GLOBAL__N_125VulkanDefaultBlockEncoderD0Ev(%"class.rx::(anonymous namespace)::VulkanDefaultBlockEncoder"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.rx::(anonymous namespace)::VulkanDefaultBlockEncoder"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #14
  ret void
}

declare void @_ZN2sh18Std140BlockEncoder18enterAggregateTypeERKNS_14ShaderVariableE(%"class.sh::Std140BlockEncoder"*, %"struct.sh::ShaderVariable"* dereferenceable(208)) unnamed_addr #2

declare void @_ZN2sh18Std140BlockEncoder17exitAggregateTypeERKNS_14ShaderVariableE(%"class.sh::Std140BlockEncoder"*, %"struct.sh::ShaderVariable"* dereferenceable(208)) unnamed_addr #2

declare void @_ZN2sh18Std140BlockEncoder18getBlockLayoutInfoEjRKNSt3__16vectorIjNS1_9allocatorIjEEEEbPiS8_(%"class.sh::Std140BlockEncoder"*, i32, %"class.std::__1::vector"* dereferenceable(24), i1 zeroext, i32*, i32*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2rx12_GLOBAL__N_125VulkanDefaultBlockEncoder13advanceOffsetEjRKNSt3__16vectorIjNS2_9allocatorIjEEEEbii(%"class.rx::(anonymous namespace)::VulkanDefaultBlockEncoder"*, i32, %"class.std::__1::vector"* dereferenceable(24), i1 zeroext, i32, i32) unnamed_addr #1 align 2 {
  %7 = tail call zeroext i1 @_ZN2gl12IsOpaqueTypeEj(i32 %1) #13
  br i1 %7, label %10, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds %"class.rx::(anonymous namespace)::VulkanDefaultBlockEncoder", %"class.rx::(anonymous namespace)::VulkanDefaultBlockEncoder"* %0, i64 0, i32 0
  tail call void @_ZN2sh18Std140BlockEncoder13advanceOffsetEjRKNSt3__16vectorIjNS1_9allocatorIjEEEEbii(%"class.sh::Std140BlockEncoder"* %9, i32 %1, %"class.std::__1::vector"* dereferenceable(24) %2, i1 zeroext %3, i32 %4, i32 %5) #13
  br label %10

10:                                               ; preds = %6, %8
  ret void
}

declare i64 @_ZNK2sh18Std140BlockEncoder16getBaseAlignmentERKNS_14ShaderVariableE(%"class.sh::Std140BlockEncoder"*, %"struct.sh::ShaderVariable"* dereferenceable(208)) unnamed_addr #2

declare i64 @_ZNK2sh18Std140BlockEncoder20getTypeBaseAlignmentEjb(%"class.sh::Std140BlockEncoder"*, i32, i1 zeroext) unnamed_addr #2

declare zeroext i1 @_ZN2gl12IsOpaqueTypeEj(i32) local_unnamed_addr #2

declare void @_ZN2sh18Std140BlockEncoder13advanceOffsetEjRKNSt3__16vectorIjNS1_9allocatorIjEEEEbii(%"class.sh::Std140BlockEncoder"*, i32, %"class.std::__1::vector"* dereferenceable(24), i1 zeroext, i32, i32) unnamed_addr #2

declare i32 @_ZN2rx2vk13DynamicBuffer21allocateWithAlignmentEPNS_9ContextVkEmmPPhPP10VkBuffer_TPmPb(%"class.rx::vk::DynamicBuffer"*, %"class.rx::ContextVk"*, i64, i64, i8**, %struct.VkBuffer_T**, i64*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKcEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector.1413"*, i8*, i8*, i8*) local_unnamed_addr #1 comdat align 2 {
  %5 = ptrtoint i8* %1 to i64
  %6 = ptrtoint i8* %2 to i64
  %7 = getelementptr inbounds %"class.std::__1::vector.1413", %"class.std::__1::vector.1413"* %0, i64 0, i32 0, i32 0
  %8 = ptrtoint i8* %3 to i64
  %9 = sub i64 %8, %6
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %11, label %618

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::vector.1413", %"class.std::__1::vector.1413"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector.1413", %"class.std::__1::vector.1413"* %0, i64 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %9, %18
  %20 = bitcast i8** %15 to i64*
  br i1 %19, label %368, label %21

21:                                               ; preds = %11
  %22 = sub i64 %17, %5
  %23 = icmp sgt i64 %9, %22
  br i1 %23, label %24, label %141

24:                                               ; preds = %21
  %25 = getelementptr inbounds i8, i8* %2, i64 %22
  %26 = icmp eq i8* %25, %3
  br i1 %26, label %136, label %27

27:                                               ; preds = %24
  %28 = sub i64 %5, %6
  %29 = sub i64 %28, %17
  %30 = getelementptr i8, i8* %3, i64 %29
  %31 = ptrtoint i8* %30 to i64
  %32 = icmp ult i8* %30, inttoptr (i64 32 to i8*)
  br i1 %32, label %123, label %33

33:                                               ; preds = %27
  %34 = sub i64 %5, %6
  %35 = sub i64 %34, %17
  %36 = getelementptr i8, i8* %3, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = getelementptr i8, i8* %16, i64 %37
  %39 = icmp ult i8* %16, %3
  %40 = icmp ult i8* %25, %38
  %41 = and i1 %39, %40
  br i1 %41, label %123, label %42

42:                                               ; preds = %33
  %43 = and i64 %31, -32
  %44 = getelementptr i8, i8* %16, i64 %43
  %45 = getelementptr i8, i8* %25, i64 %43
  %46 = add i64 %43, -32
  %47 = lshr exact i64 %46, 5
  %48 = add nuw nsw i64 %47, 1
  %49 = and i64 %48, 3
  %50 = icmp ult i64 %46, 96
  br i1 %50, label %102, label %51

51:                                               ; preds = %42
  %52 = sub nsw i64 %48, %49
  br label %53

53:                                               ; preds = %53, %51
  %54 = phi i64 [ 0, %51 ], [ %99, %53 ]
  %55 = phi i64 [ %52, %51 ], [ %100, %53 ]
  %56 = getelementptr i8, i8* %16, i64 %54
  %57 = getelementptr i8, i8* %25, i64 %54
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1, !alias.scope !100
  %60 = getelementptr i8, i8* %57, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1, !alias.scope !100
  %63 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %59, <16 x i8>* %63, align 1, !alias.scope !103, !noalias !100
  %64 = getelementptr i8, i8* %56, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %65, align 1, !alias.scope !103, !noalias !100
  %66 = or i64 %54, 32
  %67 = getelementptr i8, i8* %16, i64 %66
  %68 = getelementptr i8, i8* %25, i64 %66
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !100
  %71 = getelementptr i8, i8* %68, i64 16
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !100
  %74 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %74, align 1, !alias.scope !103, !noalias !100
  %75 = getelementptr i8, i8* %67, i64 16
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %76, align 1, !alias.scope !103, !noalias !100
  %77 = or i64 %54, 64
  %78 = getelementptr i8, i8* %16, i64 %77
  %79 = getelementptr i8, i8* %25, i64 %77
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1, !alias.scope !100
  %82 = getelementptr i8, i8* %79, i64 16
  %83 = bitcast i8* %82 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !100
  %85 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %85, align 1, !alias.scope !103, !noalias !100
  %86 = getelementptr i8, i8* %78, i64 16
  %87 = bitcast i8* %86 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %87, align 1, !alias.scope !103, !noalias !100
  %88 = or i64 %54, 96
  %89 = getelementptr i8, i8* %16, i64 %88
  %90 = getelementptr i8, i8* %25, i64 %88
  %91 = bitcast i8* %90 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1, !alias.scope !100
  %93 = getelementptr i8, i8* %90, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1, !alias.scope !100
  %96 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %96, align 1, !alias.scope !103, !noalias !100
  %97 = getelementptr i8, i8* %89, i64 16
  %98 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %98, align 1, !alias.scope !103, !noalias !100
  %99 = add i64 %54, 128
  %100 = add i64 %55, -4
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %53, !llvm.loop !105

102:                                              ; preds = %53, %42
  %103 = phi i64 [ 0, %42 ], [ %99, %53 ]
  %104 = icmp eq i64 %49, 0
  br i1 %104, label %121, label %105

105:                                              ; preds = %102, %105
  %106 = phi i64 [ %118, %105 ], [ %103, %102 ]
  %107 = phi i64 [ %119, %105 ], [ %49, %102 ]
  %108 = getelementptr i8, i8* %16, i64 %106
  %109 = getelementptr i8, i8* %25, i64 %106
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1, !alias.scope !100
  %112 = getelementptr i8, i8* %109, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1, !alias.scope !100
  %115 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %111, <16 x i8>* %115, align 1, !alias.scope !103, !noalias !100
  %116 = getelementptr i8, i8* %108, i64 16
  %117 = bitcast i8* %116 to <16 x i8>*
  store <16 x i8> %114, <16 x i8>* %117, align 1, !alias.scope !103, !noalias !100
  %118 = add i64 %106, 32
  %119 = add i64 %107, -1
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %105, !llvm.loop !106

121:                                              ; preds = %105, %102
  %122 = icmp eq i64 %43, %31
  br i1 %122, label %133, label %123

123:                                              ; preds = %121, %33, %27
  %124 = phi i8* [ %16, %33 ], [ %16, %27 ], [ %44, %121 ]
  %125 = phi i8* [ %25, %33 ], [ %25, %27 ], [ %45, %121 ]
  br label %126

126:                                              ; preds = %123, %126
  %127 = phi i8* [ %131, %126 ], [ %124, %123 ]
  %128 = phi i8* [ %130, %126 ], [ %125, %123 ]
  %129 = load i8, i8* %128, align 1
  store i8 %129, i8* %127, align 1
  %130 = getelementptr inbounds i8, i8* %128, i64 1
  %131 = getelementptr inbounds i8, i8* %127, i64 1
  %132 = icmp eq i8* %130, %3
  br i1 %132, label %133, label %126, !llvm.loop !107

133:                                              ; preds = %126, %121
  %134 = phi i8* [ %44, %121 ], [ %131, %126 ]
  %135 = ptrtoint i8* %134 to i64
  br label %136

136:                                              ; preds = %133, %24
  %137 = phi i64 [ %17, %24 ], [ %135, %133 ]
  store i64 %137, i64* %20, align 8
  %138 = icmp sgt i64 %22, 0
  br i1 %138, label %139, label %618

139:                                              ; preds = %136
  %140 = inttoptr i64 %137 to i8*
  br label %141

141:                                              ; preds = %139, %21
  %142 = phi i64 [ %137, %139 ], [ %17, %21 ]
  %143 = phi i8* [ %140, %139 ], [ %16, %21 ]
  %144 = phi i8* [ %25, %139 ], [ %3, %21 ]
  %145 = getelementptr inbounds i8, i8* %1, i64 %9
  %146 = ptrtoint i8* %145 to i64
  %147 = sub i64 %142, %146
  %148 = getelementptr inbounds i8, i8* %1, i64 %147
  %149 = icmp ult i8* %148, %16
  br i1 %149, label %150, label %250

150:                                              ; preds = %141
  %151 = sub i64 %9, %142
  %152 = getelementptr i8, i8* %16, i64 %151
  %153 = ptrtoint i8* %152 to i64
  %154 = icmp ult i8* %152, inttoptr (i64 32 to i8*)
  br i1 %154, label %155, label %158

155:                                              ; preds = %245, %158, %150
  %156 = phi i8* [ %148, %158 ], [ %148, %150 ], [ %168, %245 ]
  %157 = phi i8* [ %143, %158 ], [ %143, %150 ], [ %169, %245 ]
  br label %256

158:                                              ; preds = %150
  %159 = sub i64 %9, %142
  %160 = getelementptr i8, i8* %16, i64 %159
  %161 = ptrtoint i8* %160 to i64
  %162 = getelementptr i8, i8* %143, i64 %161
  %163 = icmp ult i8* %143, %16
  %164 = icmp ult i8* %148, %162
  %165 = and i1 %163, %164
  br i1 %165, label %155, label %166

166:                                              ; preds = %158
  %167 = and i64 %153, -32
  %168 = getelementptr i8, i8* %148, i64 %167
  %169 = getelementptr i8, i8* %143, i64 %167
  %170 = add i64 %167, -32
  %171 = lshr exact i64 %170, 5
  %172 = add nuw nsw i64 %171, 1
  %173 = and i64 %172, 3
  %174 = icmp ult i64 %170, 96
  br i1 %174, label %226, label %175

175:                                              ; preds = %166
  %176 = sub nsw i64 %172, %173
  br label %177

177:                                              ; preds = %177, %175
  %178 = phi i64 [ 0, %175 ], [ %223, %177 ]
  %179 = phi i64 [ %176, %175 ], [ %224, %177 ]
  %180 = getelementptr i8, i8* %148, i64 %178
  %181 = getelementptr i8, i8* %143, i64 %178
  %182 = bitcast i8* %180 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1, !alias.scope !108
  %184 = getelementptr i8, i8* %180, i64 16
  %185 = bitcast i8* %184 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 1, !alias.scope !108
  %187 = bitcast i8* %181 to <16 x i8>*
  store <16 x i8> %183, <16 x i8>* %187, align 1, !alias.scope !111, !noalias !108
  %188 = getelementptr i8, i8* %181, i64 16
  %189 = bitcast i8* %188 to <16 x i8>*
  store <16 x i8> %186, <16 x i8>* %189, align 1, !alias.scope !111, !noalias !108
  %190 = or i64 %178, 32
  %191 = getelementptr i8, i8* %148, i64 %190
  %192 = getelementptr i8, i8* %143, i64 %190
  %193 = bitcast i8* %191 to <16 x i8>*
  %194 = load <16 x i8>, <16 x i8>* %193, align 1, !alias.scope !108
  %195 = getelementptr i8, i8* %191, i64 16
  %196 = bitcast i8* %195 to <16 x i8>*
  %197 = load <16 x i8>, <16 x i8>* %196, align 1, !alias.scope !108
  %198 = bitcast i8* %192 to <16 x i8>*
  store <16 x i8> %194, <16 x i8>* %198, align 1, !alias.scope !111, !noalias !108
  %199 = getelementptr i8, i8* %192, i64 16
  %200 = bitcast i8* %199 to <16 x i8>*
  store <16 x i8> %197, <16 x i8>* %200, align 1, !alias.scope !111, !noalias !108
  %201 = or i64 %178, 64
  %202 = getelementptr i8, i8* %148, i64 %201
  %203 = getelementptr i8, i8* %143, i64 %201
  %204 = bitcast i8* %202 to <16 x i8>*
  %205 = load <16 x i8>, <16 x i8>* %204, align 1, !alias.scope !108
  %206 = getelementptr i8, i8* %202, i64 16
  %207 = bitcast i8* %206 to <16 x i8>*
  %208 = load <16 x i8>, <16 x i8>* %207, align 1, !alias.scope !108
  %209 = bitcast i8* %203 to <16 x i8>*
  store <16 x i8> %205, <16 x i8>* %209, align 1, !alias.scope !111, !noalias !108
  %210 = getelementptr i8, i8* %203, i64 16
  %211 = bitcast i8* %210 to <16 x i8>*
  store <16 x i8> %208, <16 x i8>* %211, align 1, !alias.scope !111, !noalias !108
  %212 = or i64 %178, 96
  %213 = getelementptr i8, i8* %148, i64 %212
  %214 = getelementptr i8, i8* %143, i64 %212
  %215 = bitcast i8* %213 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1, !alias.scope !108
  %217 = getelementptr i8, i8* %213, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1, !alias.scope !108
  %220 = bitcast i8* %214 to <16 x i8>*
  store <16 x i8> %216, <16 x i8>* %220, align 1, !alias.scope !111, !noalias !108
  %221 = getelementptr i8, i8* %214, i64 16
  %222 = bitcast i8* %221 to <16 x i8>*
  store <16 x i8> %219, <16 x i8>* %222, align 1, !alias.scope !111, !noalias !108
  %223 = add i64 %178, 128
  %224 = add i64 %179, -4
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %177, !llvm.loop !113

226:                                              ; preds = %177, %166
  %227 = phi i64 [ 0, %166 ], [ %223, %177 ]
  %228 = icmp eq i64 %173, 0
  br i1 %228, label %245, label %229

229:                                              ; preds = %226, %229
  %230 = phi i64 [ %242, %229 ], [ %227, %226 ]
  %231 = phi i64 [ %243, %229 ], [ %173, %226 ]
  %232 = getelementptr i8, i8* %148, i64 %230
  %233 = getelementptr i8, i8* %143, i64 %230
  %234 = bitcast i8* %232 to <16 x i8>*
  %235 = load <16 x i8>, <16 x i8>* %234, align 1, !alias.scope !108
  %236 = getelementptr i8, i8* %232, i64 16
  %237 = bitcast i8* %236 to <16 x i8>*
  %238 = load <16 x i8>, <16 x i8>* %237, align 1, !alias.scope !108
  %239 = bitcast i8* %233 to <16 x i8>*
  store <16 x i8> %235, <16 x i8>* %239, align 1, !alias.scope !111, !noalias !108
  %240 = getelementptr i8, i8* %233, i64 16
  %241 = bitcast i8* %240 to <16 x i8>*
  store <16 x i8> %238, <16 x i8>* %241, align 1, !alias.scope !111, !noalias !108
  %242 = add i64 %230, 32
  %243 = add i64 %231, -1
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %245, label %229, !llvm.loop !114

245:                                              ; preds = %229, %226
  %246 = icmp eq i64 %167, %153
  br i1 %246, label %247, label %155

247:                                              ; preds = %256, %245
  %248 = phi i8* [ %169, %245 ], [ %261, %256 ]
  %249 = ptrtoint i8* %248 to i64
  br label %250

250:                                              ; preds = %247, %141
  %251 = phi i64 [ %249, %247 ], [ %142, %141 ]
  store i64 %251, i64* %20, align 8
  %252 = icmp eq i64 %147, 0
  br i1 %252, label %263, label %253

253:                                              ; preds = %250
  %254 = sub i64 0, %147
  %255 = getelementptr inbounds i8, i8* %143, i64 %254
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %255, i8* align 1 %1, i64 %147, i1 false) #13
  br label %263

256:                                              ; preds = %155, %256
  %257 = phi i8* [ %260, %256 ], [ %156, %155 ]
  %258 = phi i8* [ %261, %256 ], [ %157, %155 ]
  %259 = load i8, i8* %257, align 1
  store i8 %259, i8* %258, align 1
  %260 = getelementptr inbounds i8, i8* %257, i64 1
  %261 = getelementptr inbounds i8, i8* %258, i64 1
  %262 = icmp eq i8* %260, %16
  br i1 %262, label %247, label %256, !llvm.loop !115

263:                                              ; preds = %250, %253
  %264 = icmp eq i8* %144, %2
  br i1 %264, label %618, label %265

265:                                              ; preds = %263
  %266 = sub i64 0, %6
  %267 = getelementptr i8, i8* %144, i64 %266
  %268 = ptrtoint i8* %267 to i64
  %269 = icmp ult i8* %267, inttoptr (i64 32 to i8*)
  br i1 %269, label %358, label %270

270:                                              ; preds = %265
  %271 = ptrtoint i8* %1 to i64
  %272 = sub i64 %271, %6
  %273 = getelementptr i8, i8* %144, i64 %272
  %274 = icmp ugt i8* %144, %1
  %275 = icmp ugt i8* %273, %2
  %276 = and i1 %274, %275
  br i1 %276, label %358, label %277

277:                                              ; preds = %270
  %278 = and i64 %268, -32
  %279 = getelementptr i8, i8* %1, i64 %278
  %280 = getelementptr i8, i8* %2, i64 %278
  %281 = add i64 %278, -32
  %282 = lshr exact i64 %281, 5
  %283 = add nuw nsw i64 %282, 1
  %284 = and i64 %283, 3
  %285 = icmp ult i64 %281, 96
  br i1 %285, label %337, label %286

286:                                              ; preds = %277
  %287 = sub nsw i64 %283, %284
  br label %288

288:                                              ; preds = %288, %286
  %289 = phi i64 [ 0, %286 ], [ %334, %288 ]
  %290 = phi i64 [ %287, %286 ], [ %335, %288 ]
  %291 = getelementptr i8, i8* %1, i64 %289
  %292 = getelementptr i8, i8* %2, i64 %289
  %293 = bitcast i8* %292 to <16 x i8>*
  %294 = load <16 x i8>, <16 x i8>* %293, align 1, !alias.scope !116
  %295 = getelementptr i8, i8* %292, i64 16
  %296 = bitcast i8* %295 to <16 x i8>*
  %297 = load <16 x i8>, <16 x i8>* %296, align 1, !alias.scope !116
  %298 = bitcast i8* %291 to <16 x i8>*
  store <16 x i8> %294, <16 x i8>* %298, align 1, !alias.scope !119, !noalias !116
  %299 = getelementptr i8, i8* %291, i64 16
  %300 = bitcast i8* %299 to <16 x i8>*
  store <16 x i8> %297, <16 x i8>* %300, align 1, !alias.scope !119, !noalias !116
  %301 = or i64 %289, 32
  %302 = getelementptr i8, i8* %1, i64 %301
  %303 = getelementptr i8, i8* %2, i64 %301
  %304 = bitcast i8* %303 to <16 x i8>*
  %305 = load <16 x i8>, <16 x i8>* %304, align 1, !alias.scope !116
  %306 = getelementptr i8, i8* %303, i64 16
  %307 = bitcast i8* %306 to <16 x i8>*
  %308 = load <16 x i8>, <16 x i8>* %307, align 1, !alias.scope !116
  %309 = bitcast i8* %302 to <16 x i8>*
  store <16 x i8> %305, <16 x i8>* %309, align 1, !alias.scope !119, !noalias !116
  %310 = getelementptr i8, i8* %302, i64 16
  %311 = bitcast i8* %310 to <16 x i8>*
  store <16 x i8> %308, <16 x i8>* %311, align 1, !alias.scope !119, !noalias !116
  %312 = or i64 %289, 64
  %313 = getelementptr i8, i8* %1, i64 %312
  %314 = getelementptr i8, i8* %2, i64 %312
  %315 = bitcast i8* %314 to <16 x i8>*
  %316 = load <16 x i8>, <16 x i8>* %315, align 1, !alias.scope !116
  %317 = getelementptr i8, i8* %314, i64 16
  %318 = bitcast i8* %317 to <16 x i8>*
  %319 = load <16 x i8>, <16 x i8>* %318, align 1, !alias.scope !116
  %320 = bitcast i8* %313 to <16 x i8>*
  store <16 x i8> %316, <16 x i8>* %320, align 1, !alias.scope !119, !noalias !116
  %321 = getelementptr i8, i8* %313, i64 16
  %322 = bitcast i8* %321 to <16 x i8>*
  store <16 x i8> %319, <16 x i8>* %322, align 1, !alias.scope !119, !noalias !116
  %323 = or i64 %289, 96
  %324 = getelementptr i8, i8* %1, i64 %323
  %325 = getelementptr i8, i8* %2, i64 %323
  %326 = bitcast i8* %325 to <16 x i8>*
  %327 = load <16 x i8>, <16 x i8>* %326, align 1, !alias.scope !116
  %328 = getelementptr i8, i8* %325, i64 16
  %329 = bitcast i8* %328 to <16 x i8>*
  %330 = load <16 x i8>, <16 x i8>* %329, align 1, !alias.scope !116
  %331 = bitcast i8* %324 to <16 x i8>*
  store <16 x i8> %327, <16 x i8>* %331, align 1, !alias.scope !119, !noalias !116
  %332 = getelementptr i8, i8* %324, i64 16
  %333 = bitcast i8* %332 to <16 x i8>*
  store <16 x i8> %330, <16 x i8>* %333, align 1, !alias.scope !119, !noalias !116
  %334 = add i64 %289, 128
  %335 = add i64 %290, -4
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %337, label %288, !llvm.loop !121

337:                                              ; preds = %288, %277
  %338 = phi i64 [ 0, %277 ], [ %334, %288 ]
  %339 = icmp eq i64 %284, 0
  br i1 %339, label %356, label %340

340:                                              ; preds = %337, %340
  %341 = phi i64 [ %353, %340 ], [ %338, %337 ]
  %342 = phi i64 [ %354, %340 ], [ %284, %337 ]
  %343 = getelementptr i8, i8* %1, i64 %341
  %344 = getelementptr i8, i8* %2, i64 %341
  %345 = bitcast i8* %344 to <16 x i8>*
  %346 = load <16 x i8>, <16 x i8>* %345, align 1, !alias.scope !116
  %347 = getelementptr i8, i8* %344, i64 16
  %348 = bitcast i8* %347 to <16 x i8>*
  %349 = load <16 x i8>, <16 x i8>* %348, align 1, !alias.scope !116
  %350 = bitcast i8* %343 to <16 x i8>*
  store <16 x i8> %346, <16 x i8>* %350, align 1, !alias.scope !119, !noalias !116
  %351 = getelementptr i8, i8* %343, i64 16
  %352 = bitcast i8* %351 to <16 x i8>*
  store <16 x i8> %349, <16 x i8>* %352, align 1, !alias.scope !119, !noalias !116
  %353 = add i64 %341, 32
  %354 = add i64 %342, -1
  %355 = icmp eq i64 %354, 0
  br i1 %355, label %356, label %340, !llvm.loop !122

356:                                              ; preds = %340, %337
  %357 = icmp eq i64 %278, %268
  br i1 %357, label %618, label %358

358:                                              ; preds = %356, %270, %265
  %359 = phi i8* [ %1, %270 ], [ %1, %265 ], [ %279, %356 ]
  %360 = phi i8* [ %2, %270 ], [ %2, %265 ], [ %280, %356 ]
  br label %361

361:                                              ; preds = %358, %361
  %362 = phi i8* [ %366, %361 ], [ %359, %358 ]
  %363 = phi i8* [ %365, %361 ], [ %360, %358 ]
  %364 = load i8, i8* %363, align 1
  store i8 %364, i8* %362, align 1
  %365 = getelementptr inbounds i8, i8* %363, i64 1
  %366 = getelementptr inbounds i8, i8* %362, i64 1
  %367 = icmp eq i8* %365, %144
  br i1 %367, label %618, label %361, !llvm.loop !123

368:                                              ; preds = %11
  %369 = bitcast %"class.std::__1::vector.1413"* %0 to i64*
  %370 = load i64, i64* %369, align 8
  %371 = sub i64 %17, %370
  %372 = add i64 %371, %9
  %373 = icmp slt i64 %372, 0
  br i1 %373, label %374, label %376

374:                                              ; preds = %368
  %375 = bitcast %"class.std::__1::vector.1413"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %375) #15
  unreachable

376:                                              ; preds = %368
  %377 = sub i64 %14, %370
  %378 = icmp ult i64 %377, 4611686018427387903
  br i1 %378, label %381, label %379

379:                                              ; preds = %376
  %380 = sub i64 %5, %370
  br label %387

381:                                              ; preds = %376
  %382 = shl i64 %377, 1
  %383 = icmp ult i64 %382, %372
  %384 = select i1 %383, i64 %372, i64 %382
  %385 = sub i64 %5, %370
  %386 = icmp eq i64 %384, 0
  br i1 %386, label %391, label %387

387:                                              ; preds = %379, %381
  %388 = phi i64 [ %380, %379 ], [ %385, %381 ]
  %389 = phi i64 [ 9223372036854775807, %379 ], [ %384, %381 ]
  %390 = tail call i8* @_Znwm(i64 %389) #14
  br label %391

391:                                              ; preds = %381, %387
  %392 = phi i64 [ %388, %387 ], [ %385, %381 ]
  %393 = phi i64 [ %389, %387 ], [ 0, %381 ]
  %394 = phi i8* [ %390, %387 ], [ null, %381 ]
  %395 = getelementptr inbounds i8, i8* %394, i64 %392
  %396 = getelementptr inbounds i8, i8* %394, i64 %393
  %397 = getelementptr inbounds i8, i8* %395, i64 %9
  %398 = icmp ult i64 %9, 32
  br i1 %398, label %484, label %399

399:                                              ; preds = %391
  %400 = icmp ult i8* %395, %3
  %401 = icmp ugt i8* %397, %2
  %402 = and i1 %400, %401
  br i1 %402, label %484, label %403

403:                                              ; preds = %399
  %404 = and i64 %9, -32
  %405 = getelementptr i8, i8* %395, i64 %404
  %406 = getelementptr i8, i8* %2, i64 %404
  %407 = add i64 %404, -32
  %408 = lshr exact i64 %407, 5
  %409 = add nuw nsw i64 %408, 1
  %410 = and i64 %409, 3
  %411 = icmp ult i64 %407, 96
  br i1 %411, label %463, label %412

412:                                              ; preds = %403
  %413 = sub nsw i64 %409, %410
  br label %414

414:                                              ; preds = %414, %412
  %415 = phi i64 [ 0, %412 ], [ %460, %414 ]
  %416 = phi i64 [ %413, %412 ], [ %461, %414 ]
  %417 = getelementptr i8, i8* %395, i64 %415
  %418 = getelementptr i8, i8* %2, i64 %415
  %419 = bitcast i8* %418 to <16 x i8>*
  %420 = load <16 x i8>, <16 x i8>* %419, align 1, !alias.scope !124
  %421 = getelementptr i8, i8* %418, i64 16
  %422 = bitcast i8* %421 to <16 x i8>*
  %423 = load <16 x i8>, <16 x i8>* %422, align 1, !alias.scope !124
  %424 = bitcast i8* %417 to <16 x i8>*
  store <16 x i8> %420, <16 x i8>* %424, align 1, !alias.scope !127, !noalias !124
  %425 = getelementptr i8, i8* %417, i64 16
  %426 = bitcast i8* %425 to <16 x i8>*
  store <16 x i8> %423, <16 x i8>* %426, align 1, !alias.scope !127, !noalias !124
  %427 = or i64 %415, 32
  %428 = getelementptr i8, i8* %395, i64 %427
  %429 = getelementptr i8, i8* %2, i64 %427
  %430 = bitcast i8* %429 to <16 x i8>*
  %431 = load <16 x i8>, <16 x i8>* %430, align 1, !alias.scope !124
  %432 = getelementptr i8, i8* %429, i64 16
  %433 = bitcast i8* %432 to <16 x i8>*
  %434 = load <16 x i8>, <16 x i8>* %433, align 1, !alias.scope !124
  %435 = bitcast i8* %428 to <16 x i8>*
  store <16 x i8> %431, <16 x i8>* %435, align 1, !alias.scope !127, !noalias !124
  %436 = getelementptr i8, i8* %428, i64 16
  %437 = bitcast i8* %436 to <16 x i8>*
  store <16 x i8> %434, <16 x i8>* %437, align 1, !alias.scope !127, !noalias !124
  %438 = or i64 %415, 64
  %439 = getelementptr i8, i8* %395, i64 %438
  %440 = getelementptr i8, i8* %2, i64 %438
  %441 = bitcast i8* %440 to <16 x i8>*
  %442 = load <16 x i8>, <16 x i8>* %441, align 1, !alias.scope !124
  %443 = getelementptr i8, i8* %440, i64 16
  %444 = bitcast i8* %443 to <16 x i8>*
  %445 = load <16 x i8>, <16 x i8>* %444, align 1, !alias.scope !124
  %446 = bitcast i8* %439 to <16 x i8>*
  store <16 x i8> %442, <16 x i8>* %446, align 1, !alias.scope !127, !noalias !124
  %447 = getelementptr i8, i8* %439, i64 16
  %448 = bitcast i8* %447 to <16 x i8>*
  store <16 x i8> %445, <16 x i8>* %448, align 1, !alias.scope !127, !noalias !124
  %449 = or i64 %415, 96
  %450 = getelementptr i8, i8* %395, i64 %449
  %451 = getelementptr i8, i8* %2, i64 %449
  %452 = bitcast i8* %451 to <16 x i8>*
  %453 = load <16 x i8>, <16 x i8>* %452, align 1, !alias.scope !124
  %454 = getelementptr i8, i8* %451, i64 16
  %455 = bitcast i8* %454 to <16 x i8>*
  %456 = load <16 x i8>, <16 x i8>* %455, align 1, !alias.scope !124
  %457 = bitcast i8* %450 to <16 x i8>*
  store <16 x i8> %453, <16 x i8>* %457, align 1, !alias.scope !127, !noalias !124
  %458 = getelementptr i8, i8* %450, i64 16
  %459 = bitcast i8* %458 to <16 x i8>*
  store <16 x i8> %456, <16 x i8>* %459, align 1, !alias.scope !127, !noalias !124
  %460 = add i64 %415, 128
  %461 = add i64 %416, -4
  %462 = icmp eq i64 %461, 0
  br i1 %462, label %463, label %414, !llvm.loop !129

463:                                              ; preds = %414, %403
  %464 = phi i64 [ 0, %403 ], [ %460, %414 ]
  %465 = icmp eq i64 %410, 0
  br i1 %465, label %482, label %466

466:                                              ; preds = %463, %466
  %467 = phi i64 [ %479, %466 ], [ %464, %463 ]
  %468 = phi i64 [ %480, %466 ], [ %410, %463 ]
  %469 = getelementptr i8, i8* %395, i64 %467
  %470 = getelementptr i8, i8* %2, i64 %467
  %471 = bitcast i8* %470 to <16 x i8>*
  %472 = load <16 x i8>, <16 x i8>* %471, align 1, !alias.scope !124
  %473 = getelementptr i8, i8* %470, i64 16
  %474 = bitcast i8* %473 to <16 x i8>*
  %475 = load <16 x i8>, <16 x i8>* %474, align 1, !alias.scope !124
  %476 = bitcast i8* %469 to <16 x i8>*
  store <16 x i8> %472, <16 x i8>* %476, align 1, !alias.scope !127, !noalias !124
  %477 = getelementptr i8, i8* %469, i64 16
  %478 = bitcast i8* %477 to <16 x i8>*
  store <16 x i8> %475, <16 x i8>* %478, align 1, !alias.scope !127, !noalias !124
  %479 = add i64 %467, 32
  %480 = add i64 %468, -1
  %481 = icmp eq i64 %480, 0
  br i1 %481, label %482, label %466, !llvm.loop !130

482:                                              ; preds = %466, %463
  %483 = icmp eq i64 %9, %404
  br i1 %483, label %494, label %484

484:                                              ; preds = %482, %399, %391
  %485 = phi i8* [ %395, %399 ], [ %395, %391 ], [ %405, %482 ]
  %486 = phi i8* [ %2, %399 ], [ %2, %391 ], [ %406, %482 ]
  br label %487

487:                                              ; preds = %484, %487
  %488 = phi i8* [ %491, %487 ], [ %485, %484 ]
  %489 = phi i8* [ %492, %487 ], [ %486, %484 ]
  %490 = load i8, i8* %489, align 1
  store i8 %490, i8* %488, align 1
  %491 = getelementptr inbounds i8, i8* %488, i64 1
  %492 = getelementptr inbounds i8, i8* %489, i64 1
  %493 = icmp eq i8* %397, %491
  br i1 %493, label %494, label %487, !llvm.loop !131

494:                                              ; preds = %487, %482
  %495 = ptrtoint i8* %396 to i64
  %496 = load i8*, i8** %7, align 8
  %497 = ptrtoint i8* %496 to i64
  %498 = sub i64 %5, %497
  %499 = sub i64 0, %498
  %500 = getelementptr inbounds i8, i8* %395, i64 %499
  %501 = ptrtoint i8* %500 to i64
  %502 = icmp sgt i64 %498, 0
  br i1 %502, label %503, label %504

503:                                              ; preds = %494
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %500, i8* align 1 %496, i64 %498, i1 false) #13
  br label %504

504:                                              ; preds = %503, %494
  %505 = load i8*, i8** %15, align 8
  %506 = icmp eq i8* %505, %1
  br i1 %506, label %612, label %507

507:                                              ; preds = %504
  %508 = ptrtoint i8* %505 to i64
  %509 = sub i64 %508, %5
  %510 = icmp ult i64 %509, 32
  br i1 %510, label %602, label %511

511:                                              ; preds = %507
  %512 = add i64 %392, %8
  %513 = sub i64 %512, %5
  %514 = sub i64 %513, %6
  %515 = getelementptr i8, i8* %505, i64 %514
  %516 = ptrtoint i8* %515 to i64
  %517 = getelementptr i8, i8* %394, i64 %516
  %518 = icmp ult i8* %397, %505
  %519 = icmp ugt i8* %517, %1
  %520 = and i1 %518, %519
  br i1 %520, label %602, label %521

521:                                              ; preds = %511
  %522 = and i64 %509, -32
  %523 = getelementptr i8, i8* %397, i64 %522
  %524 = getelementptr i8, i8* %1, i64 %522
  %525 = add i64 %522, -32
  %526 = lshr exact i64 %525, 5
  %527 = add nuw nsw i64 %526, 1
  %528 = and i64 %527, 3
  %529 = icmp ult i64 %525, 96
  br i1 %529, label %581, label %530

530:                                              ; preds = %521
  %531 = sub nsw i64 %527, %528
  br label %532

532:                                              ; preds = %532, %530
  %533 = phi i64 [ 0, %530 ], [ %578, %532 ]
  %534 = phi i64 [ %531, %530 ], [ %579, %532 ]
  %535 = getelementptr i8, i8* %397, i64 %533
  %536 = getelementptr i8, i8* %1, i64 %533
  %537 = bitcast i8* %536 to <16 x i8>*
  %538 = load <16 x i8>, <16 x i8>* %537, align 1, !alias.scope !132
  %539 = getelementptr i8, i8* %536, i64 16
  %540 = bitcast i8* %539 to <16 x i8>*
  %541 = load <16 x i8>, <16 x i8>* %540, align 1, !alias.scope !132
  %542 = bitcast i8* %535 to <16 x i8>*
  store <16 x i8> %538, <16 x i8>* %542, align 1, !alias.scope !135, !noalias !132
  %543 = getelementptr i8, i8* %535, i64 16
  %544 = bitcast i8* %543 to <16 x i8>*
  store <16 x i8> %541, <16 x i8>* %544, align 1, !alias.scope !135, !noalias !132
  %545 = or i64 %533, 32
  %546 = getelementptr i8, i8* %397, i64 %545
  %547 = getelementptr i8, i8* %1, i64 %545
  %548 = bitcast i8* %547 to <16 x i8>*
  %549 = load <16 x i8>, <16 x i8>* %548, align 1, !alias.scope !132
  %550 = getelementptr i8, i8* %547, i64 16
  %551 = bitcast i8* %550 to <16 x i8>*
  %552 = load <16 x i8>, <16 x i8>* %551, align 1, !alias.scope !132
  %553 = bitcast i8* %546 to <16 x i8>*
  store <16 x i8> %549, <16 x i8>* %553, align 1, !alias.scope !135, !noalias !132
  %554 = getelementptr i8, i8* %546, i64 16
  %555 = bitcast i8* %554 to <16 x i8>*
  store <16 x i8> %552, <16 x i8>* %555, align 1, !alias.scope !135, !noalias !132
  %556 = or i64 %533, 64
  %557 = getelementptr i8, i8* %397, i64 %556
  %558 = getelementptr i8, i8* %1, i64 %556
  %559 = bitcast i8* %558 to <16 x i8>*
  %560 = load <16 x i8>, <16 x i8>* %559, align 1, !alias.scope !132
  %561 = getelementptr i8, i8* %558, i64 16
  %562 = bitcast i8* %561 to <16 x i8>*
  %563 = load <16 x i8>, <16 x i8>* %562, align 1, !alias.scope !132
  %564 = bitcast i8* %557 to <16 x i8>*
  store <16 x i8> %560, <16 x i8>* %564, align 1, !alias.scope !135, !noalias !132
  %565 = getelementptr i8, i8* %557, i64 16
  %566 = bitcast i8* %565 to <16 x i8>*
  store <16 x i8> %563, <16 x i8>* %566, align 1, !alias.scope !135, !noalias !132
  %567 = or i64 %533, 96
  %568 = getelementptr i8, i8* %397, i64 %567
  %569 = getelementptr i8, i8* %1, i64 %567
  %570 = bitcast i8* %569 to <16 x i8>*
  %571 = load <16 x i8>, <16 x i8>* %570, align 1, !alias.scope !132
  %572 = getelementptr i8, i8* %569, i64 16
  %573 = bitcast i8* %572 to <16 x i8>*
  %574 = load <16 x i8>, <16 x i8>* %573, align 1, !alias.scope !132
  %575 = bitcast i8* %568 to <16 x i8>*
  store <16 x i8> %571, <16 x i8>* %575, align 1, !alias.scope !135, !noalias !132
  %576 = getelementptr i8, i8* %568, i64 16
  %577 = bitcast i8* %576 to <16 x i8>*
  store <16 x i8> %574, <16 x i8>* %577, align 1, !alias.scope !135, !noalias !132
  %578 = add i64 %533, 128
  %579 = add i64 %534, -4
  %580 = icmp eq i64 %579, 0
  br i1 %580, label %581, label %532, !llvm.loop !137

581:                                              ; preds = %532, %521
  %582 = phi i64 [ 0, %521 ], [ %578, %532 ]
  %583 = icmp eq i64 %528, 0
  br i1 %583, label %600, label %584

584:                                              ; preds = %581, %584
  %585 = phi i64 [ %597, %584 ], [ %582, %581 ]
  %586 = phi i64 [ %598, %584 ], [ %528, %581 ]
  %587 = getelementptr i8, i8* %397, i64 %585
  %588 = getelementptr i8, i8* %1, i64 %585
  %589 = bitcast i8* %588 to <16 x i8>*
  %590 = load <16 x i8>, <16 x i8>* %589, align 1, !alias.scope !132
  %591 = getelementptr i8, i8* %588, i64 16
  %592 = bitcast i8* %591 to <16 x i8>*
  %593 = load <16 x i8>, <16 x i8>* %592, align 1, !alias.scope !132
  %594 = bitcast i8* %587 to <16 x i8>*
  store <16 x i8> %590, <16 x i8>* %594, align 1, !alias.scope !135, !noalias !132
  %595 = getelementptr i8, i8* %587, i64 16
  %596 = bitcast i8* %595 to <16 x i8>*
  store <16 x i8> %593, <16 x i8>* %596, align 1, !alias.scope !135, !noalias !132
  %597 = add i64 %585, 32
  %598 = add i64 %586, -1
  %599 = icmp eq i64 %598, 0
  br i1 %599, label %600, label %584, !llvm.loop !138

600:                                              ; preds = %584, %581
  %601 = icmp eq i64 %509, %522
  br i1 %601, label %612, label %602

602:                                              ; preds = %600, %511, %507
  %603 = phi i8* [ %397, %511 ], [ %397, %507 ], [ %523, %600 ]
  %604 = phi i8* [ %1, %511 ], [ %1, %507 ], [ %524, %600 ]
  br label %605

605:                                              ; preds = %602, %605
  %606 = phi i8* [ %610, %605 ], [ %603, %602 ]
  %607 = phi i8* [ %609, %605 ], [ %604, %602 ]
  %608 = load i8, i8* %607, align 1
  store i8 %608, i8* %606, align 1
  %609 = getelementptr inbounds i8, i8* %607, i64 1
  %610 = getelementptr inbounds i8, i8* %606, i64 1
  %611 = icmp eq i8* %609, %505
  br i1 %611, label %612, label %605, !llvm.loop !139

612:                                              ; preds = %605, %600, %504
  %613 = phi i8* [ %397, %504 ], [ %523, %600 ], [ %610, %605 ]
  %614 = ptrtoint i8* %613 to i64
  %615 = load i8*, i8** %7, align 8
  store i64 %501, i64* %369, align 8
  store i64 %614, i64* %20, align 8
  store i64 %495, i64* %13, align 8
  %616 = icmp eq i8* %615, null
  br i1 %616, label %618, label %617

617:                                              ; preds = %612
  tail call void @_ZdlPv(i8* nonnull %615) #14
  br label %618

618:                                              ; preds = %361, %356, %617, %612, %136, %263, %4
  %619 = phi i8* [ %1, %4 ], [ %1, %263 ], [ %1, %136 ], [ %395, %612 ], [ %395, %617 ], [ %1, %356 ], [ %1, %361 ]
  ret i8* %619
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #10

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::__tree_end_node"* @_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN2sh15BlockMemberInfoEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEElEERKT_(%"class.std::__1::__tree.1465"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::__tree.1465", %"class.std::__1::__tree.1465"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = bitcast %"class.std::__1::__tree_end_node"* %3 to %"class.std::__1::__tree_node"**
  %5 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %4, align 8
  %6 = icmp eq %"class.std::__1::__tree_node"* %5, null
  br i1 %6, label %84, label %7

7:                                                ; preds = %2
  %8 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %8, i64 0, i32 1, i32 0
  %10 = load i8, i8* %9, align 1
  %11 = icmp slt i8 %10, 0
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = zext i8 %10 to i64
  %15 = select i1 %11, i64 %13, i64 %14
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %19 = select i1 %11, i8* %17, i8* %18
  br label %20

20:                                               ; preds = %46, %7
  %21 = phi %"class.std::__1::__tree_end_node"* [ %3, %7 ], [ %54, %46 ]
  %22 = phi %"class.std::__1::__tree_node"* [ %5, %7 ], [ %55, %46 ]
  %23 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %22, i64 0, i32 2
  %24 = bitcast %"struct.std::__1::__value_type"* %23 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %25 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %24, i64 0, i32 1, i32 0
  %26 = load i8, i8* %25, align 1
  %27 = icmp slt i8 %26, 0
  %28 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %22, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = zext i8 %26 to i64
  %31 = select i1 %27, i64 %29, i64 %30
  %32 = icmp ult i64 %15, %31
  %33 = select i1 %32, i64 %15, i64 %31
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %42, label %35

35:                                               ; preds = %20
  %36 = getelementptr inbounds %"struct.std::__1::__value_type", %"struct.std::__1::__value_type"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = bitcast %"struct.std::__1::__value_type"* %23 to i8*
  %39 = select i1 %27, i8* %37, i8* %38
  %40 = tail call i32 @memcmp(i8* %39, i8* %19, i64 %33) #13
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %46

42:                                               ; preds = %35, %20
  %43 = icmp ult i64 %31, %15
  %44 = zext i1 %32 to i32
  %45 = select i1 %43, i32 -1, i32 %44
  br label %46

46:                                               ; preds = %42, %35
  %47 = phi i32 [ %45, %42 ], [ %40, %35 ]
  %48 = icmp slt i32 %47, 0
  %49 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %22, i64 0, i32 0, i32 1
  %50 = bitcast %"class.std::__1::__tree_node_base"** %49 to %"class.std::__1::__tree_node"**
  %51 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %22, i64 0, i32 0, i32 0
  %52 = bitcast %"class.std::__1::__tree_node"* %22 to %"class.std::__1::__tree_node"**
  %53 = select i1 %48, %"class.std::__1::__tree_node"** %50, %"class.std::__1::__tree_node"** %52
  %54 = select i1 %48, %"class.std::__1::__tree_end_node"* %21, %"class.std::__1::__tree_end_node"* %51
  %55 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %53, align 8
  %56 = icmp eq %"class.std::__1::__tree_node"* %55, null
  br i1 %56, label %57, label %20

57:                                               ; preds = %46
  %58 = icmp eq %"class.std::__1::__tree_end_node"* %54, %3
  br i1 %58, label %84, label %59

59:                                               ; preds = %57
  %60 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %54, i64 4
  %61 = bitcast %"class.std::__1::__tree_end_node"* %60 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %62 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %61, i64 0, i32 1, i32 0
  %63 = load i8, i8* %62, align 1
  %64 = icmp slt i8 %63, 0
  %65 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %54, i64 5
  %66 = bitcast %"class.std::__1::__tree_end_node"* %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = zext i8 %63 to i64
  %69 = select i1 %64, i64 %67, i64 %68
  %70 = icmp ult i64 %69, %15
  %71 = select i1 %70, i64 %69, i64 %15
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %80, label %73

73:                                               ; preds = %59
  %74 = bitcast %"class.std::__1::__tree_end_node"* %60 to i8**
  %75 = load i8*, i8** %74, align 8
  %76 = bitcast %"class.std::__1::__tree_end_node"* %60 to i8*
  %77 = select i1 %64, i8* %75, i8* %76
  %78 = tail call i32 @memcmp(i8* %19, i8* %77, i64 %71) #13
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %82

80:                                               ; preds = %73, %59
  %81 = icmp ult i64 %15, %69
  br i1 %81, label %84, label %85

82:                                               ; preds = %73
  %83 = icmp slt i32 %78, 0
  br i1 %83, label %84, label %85

84:                                               ; preds = %57, %80, %2, %82
  br label %85

85:                                               ; preds = %80, %82, %84
  %86 = phi %"class.std::__1::__tree_end_node"* [ %3, %84 ], [ %54, %82 ], [ %54, %80 ]
  ret %"class.std::__1::__tree_end_node"* %86
}

; Function Attrs: nofree nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #12

declare void @_ZN2rx25SetFloatUniformMatrixGLSLILi2ELi2EE3RunEjjihPKfPh(i32, i32, i32, i8 zeroext, float*, i8*) local_unnamed_addr #2

declare i32 @_ZNK2sh14ShaderVariable19getArraySizeProductEv(%"struct.sh::ShaderVariable"*) local_unnamed_addr #2

declare void @_ZN2rx25SetFloatUniformMatrixGLSLILi3ELi3EE3RunEjjihPKfPh(i32, i32, i32, i8 zeroext, float*, i8*) local_unnamed_addr #2

declare void @_ZN2rx25SetFloatUniformMatrixGLSLILi4ELi4EE3RunEjjihPKfPh(i32, i32, i32, i8 zeroext, float*, i8*) local_unnamed_addr #2

declare void @_ZN2rx25SetFloatUniformMatrixGLSLILi2ELi3EE3RunEjjihPKfPh(i32, i32, i32, i8 zeroext, float*, i8*) local_unnamed_addr #2

declare void @_ZN2rx25SetFloatUniformMatrixGLSLILi3ELi2EE3RunEjjihPKfPh(i32, i32, i32, i8 zeroext, float*, i8*) local_unnamed_addr #2

declare void @_ZN2rx25SetFloatUniformMatrixGLSLILi2ELi4EE3RunEjjihPKfPh(i32, i32, i32, i8 zeroext, float*, i8*) local_unnamed_addr #2

declare void @_ZN2rx25SetFloatUniformMatrixGLSLILi4ELi2EE3RunEjjihPKfPh(i32, i32, i32, i8 zeroext, float*, i8*) local_unnamed_addr #2

declare void @_ZN2rx25SetFloatUniformMatrixGLSLILi3ELi4EE3RunEjjihPKfPh(i32, i32, i32, i8 zeroext, float*, i8*) local_unnamed_addr #2

declare void @_ZN2rx25SetFloatUniformMatrixGLSLILi4ELi3EE3RunEjjihPKfPh(i32, i32, i32, i8 zeroext, float*, i8*) local_unnamed_addr #2

declare zeroext i8 @_ZNK2gl14ActiveVariable29getFirstShaderTypeWhereActiveEv(%"struct.gl::ActiveVariable"*) local_unnamed_addr #2

declare zeroext i1 @_ZN2gl12IsMatrixTypeEj(i32) local_unnamed_addr #2

declare void @_ZN2rx16GetMatrixUniformEjPfPKfb(i32, float*, float*, i1 zeroext) local_unnamed_addr #2

declare void @_ZN2rx16GetMatrixUniformIiEEvjPT_PKS1_b(i32, i32*, i32*, i1 zeroext) local_unnamed_addr #2

declare void @_ZN2rx16GetMatrixUniformIjEEvjPT_PKS1_b(i32, i32*, i32*, i1 zeroext) local_unnamed_addr #2

declare %"class.rx::TransformFeedbackImpl"* @_ZNK2gl17TransformFeedback17getImplementationEv(%"class.gl::TransformFeedback"*) local_unnamed_addr #2

attributes #0 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind }
attributes #8 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readnone speculatable }
attributes #12 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind }
attributes #14 = { builtin nounwind }
attributes #15 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = !{i8 0, i8 2}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv: argument 0"}
!6 = distinct !{!6, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv: argument 0"}
!9 = distinct !{!9, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv"}
!10 = !{!"branch_weights", i32 1, i32 1048575}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv: argument 0"}
!13 = distinct !{!13, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv: argument 0"}
!16 = distinct !{!16, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv: argument 0"}
!19 = distinct !{!19, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv: argument 0"}
!22 = distinct !{!22, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv"}
!23 = distinct !{!23, !24}
!24 = !{!"llvm.loop.unroll.disable"}
!25 = !{!26}
!26 = distinct !{!26, !27}
!27 = distinct !{!27, !"LVerDomain"}
!28 = !{!29}
!29 = distinct !{!29, !27}
!30 = distinct !{!30, !31}
!31 = !{!"llvm.loop.isvectorized", i32 1}
!32 = distinct !{!32, !31}
!33 = distinct !{!33, !24}
!34 = !{!35}
!35 = distinct !{!35, !36}
!36 = distinct !{!36, !"LVerDomain"}
!37 = !{!38}
!38 = distinct !{!38, !36}
!39 = distinct !{!39, !31}
!40 = distinct !{!40, !31}
!41 = distinct !{!41, !24}
!42 = !{!43}
!43 = distinct !{!43, !44}
!44 = distinct !{!44, !"LVerDomain"}
!45 = !{!46}
!46 = distinct !{!46, !44}
!47 = distinct !{!47, !31}
!48 = distinct !{!48, !31}
!49 = !{!50}
!50 = distinct !{!50, !51, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv: argument 0"}
!51 = distinct !{!51, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv"}
!52 = !{!53}
!53 = distinct !{!53, !54, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv: argument 0"}
!54 = distinct !{!54, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv"}
!55 = !{!56}
!56 = distinct !{!56, !57, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv: argument 0"}
!57 = distinct !{!57, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv"}
!58 = !{!59}
!59 = distinct !{!59, !60, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv: argument 0"}
!60 = distinct !{!60, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv"}
!61 = !{!62}
!62 = distinct !{!62, !63, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv: argument 0"}
!63 = distinct !{!63, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv"}
!64 = !{!65}
!65 = distinct !{!65, !66, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv: argument 0"}
!66 = distinct !{!66, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv"}
!67 = !{!68}
!68 = distinct !{!68, !69, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv: argument 0"}
!69 = distinct !{!69, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv"}
!70 = !{!71}
!71 = distinct !{!71, !72, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv: argument 0"}
!72 = distinct !{!72, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv"}
!73 = !{!74}
!74 = distinct !{!74, !75, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv: argument 0"}
!75 = distinct !{!75, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv"}
!76 = !{!77}
!77 = distinct !{!77, !78, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv: argument 0"}
!78 = distinct !{!78, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv"}
!79 = !{!80}
!80 = distinct !{!80, !81, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv: argument 0"}
!81 = distinct !{!81, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv"}
!82 = !{!83}
!83 = distinct !{!83, !84, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv: argument 0"}
!84 = distinct !{!84, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv"}
!85 = !{!86}
!86 = distinct !{!86, !87, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv: argument 0"}
!87 = distinct !{!87, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv"}
!88 = !{!89}
!89 = distinct !{!89, !90, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv: argument 0"}
!90 = distinct !{!90, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv"}
!91 = !{!92}
!92 = distinct !{!92, !93, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv: argument 0"}
!93 = distinct !{!93, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv"}
!94 = !{!95}
!95 = distinct !{!95, !96, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv: argument 0"}
!96 = distinct !{!96, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv"}
!97 = !{!98}
!98 = distinct !{!98, !99, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv: argument 0"}
!99 = distinct !{!99, !"_ZNK5angle7BitSetTILm6EhN2gl10ShaderTypeEE5beginEv"}
!100 = !{!101}
!101 = distinct !{!101, !102}
!102 = distinct !{!102, !"LVerDomain"}
!103 = !{!104}
!104 = distinct !{!104, !102}
!105 = distinct !{!105, !31}
!106 = distinct !{!106, !24}
!107 = distinct !{!107, !31}
!108 = !{!109}
!109 = distinct !{!109, !110}
!110 = distinct !{!110, !"LVerDomain"}
!111 = !{!112}
!112 = distinct !{!112, !110}
!113 = distinct !{!113, !31}
!114 = distinct !{!114, !24}
!115 = distinct !{!115, !31}
!116 = !{!117}
!117 = distinct !{!117, !118}
!118 = distinct !{!118, !"LVerDomain"}
!119 = !{!120}
!120 = distinct !{!120, !118}
!121 = distinct !{!121, !31}
!122 = distinct !{!122, !24}
!123 = distinct !{!123, !31}
!124 = !{!125}
!125 = distinct !{!125, !126}
!126 = distinct !{!126, !"LVerDomain"}
!127 = !{!128}
!128 = distinct !{!128, !126}
!129 = distinct !{!129, !31}
!130 = distinct !{!130, !24}
!131 = distinct !{!131, !31}
!132 = !{!133}
!133 = distinct !{!133, !134}
!134 = distinct !{!134, !"LVerDomain"}
!135 = !{!136}
!136 = distinct !{!136, !134}
!137 = distinct !{!137, !31}
!138 = distinct !{!138, !24}
!139 = distinct !{!139, !31}
