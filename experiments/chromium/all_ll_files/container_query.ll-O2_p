; ModuleID = '../../third_party/blink/renderer/core/css/container_query.cc'
source_filename = "../../third_party/blink/renderer/core/css/container_query.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::ContainerQuery" = type <{ %class.scoped_refptr, %"class.base::StrongAlias", [7 x i8] }>
%class.scoped_refptr = type { %"class.blink::MediaQuerySet"* }
%"class.base::StrongAlias" = type { i8 }
%"class.blink::MediaQuerySet" = type { %"class.WTF::RefCounted", %"class.WTF::Vector" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.std::__1::unique_ptr"*, i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::MediaQuery"* }
%"class.blink::MediaQuery" = type { i32, %"class.WTF::String", %"class.WTF::Vector.2", %"class.WTF::String" }
%"class.WTF::Vector.2" = type { %"class.WTF::VectorBuffer.3" }
%"class.WTF::VectorBuffer.3" = type { %"class.WTF::VectorBufferBase.4" }
%"class.WTF::VectorBufferBase.4" = type { %"class.blink::MediaQueryExp"*, i32, i32 }
%"class.blink::MediaQueryExp" = type { %"class.WTF::String", %"struct.blink::MediaQueryExpValue" }
%"struct.blink::MediaQueryExpValue" = type <{ i32, [4 x i8], double, i32, i32, i32, i8, i8, i8, i8 }>
%"class.WTF::String" = type { %class.scoped_refptr.0 }
%class.scoped_refptr.0 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }

@_ZN5blink14ContainerQueryC1E13scoped_refptrINS_13MediaQuerySetEE = hidden unnamed_addr alias void (%"class.blink::ContainerQuery"*, %"class.blink::MediaQuerySet"*), void (%"class.blink::ContainerQuery"*, %"class.blink::MediaQuerySet"*)* @_ZN5blink14ContainerQueryC2E13scoped_refptrINS_13MediaQuerySetEE
@_ZN5blink14ContainerQueryC1ERKS0_ = hidden unnamed_addr alias void (%"class.blink::ContainerQuery"*, %"class.blink::ContainerQuery"*), void (%"class.blink::ContainerQuery"*, %"class.blink::ContainerQuery"*)* @_ZN5blink14ContainerQueryC2ERKS0_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink14ContainerQueryC2E13scoped_refptrINS_13MediaQuerySetEE(%"class.blink::ContainerQuery"* nocapture, %"class.blink::MediaQuerySet"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::ContainerQuery", %"class.blink::ContainerQuery"* %0, i64 0, i32 0, i32 0
  store %"class.blink::MediaQuerySet"* %1, %"class.blink::MediaQuerySet"** %3, align 8
  %4 = icmp eq %"class.blink::MediaQuerySet"* %1, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.blink::MediaQuerySet", %"class.blink::MediaQuerySet"* %1, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %6) #4
  br label %7

7:                                                ; preds = %2, %5
  %8 = getelementptr inbounds %"class.blink::MediaQuerySet", %"class.blink::MediaQuerySet"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %9 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %8, align 8
  %10 = getelementptr inbounds %"class.blink::MediaQuerySet", %"class.blink::MediaQuerySet"* %1, i64 0, i32 1, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %9, i64 %12
  %14 = icmp eq i32 %11, 0
  br i1 %14, label %42, label %15

15:                                               ; preds = %7, %27
  %16 = phi %"class.std::__1::unique_ptr"* [ %29, %27 ], [ %9, %7 ]
  %17 = phi i8 [ %28, %27 ], [ 0, %7 ]
  %18 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %16, i64 0, i32 0, i32 0, i32 0
  %19 = load %"class.blink::MediaQuery"*, %"class.blink::MediaQuery"** %18, align 8
  %20 = getelementptr inbounds %"class.blink::MediaQuery", %"class.blink::MediaQuery"* %19, i64 0, i32 2, i32 0, i32 0, i32 0
  %21 = load %"class.blink::MediaQueryExp"*, %"class.blink::MediaQueryExp"** %20, align 8
  %22 = getelementptr inbounds %"class.blink::MediaQuery", %"class.blink::MediaQuery"* %19, i64 0, i32 2, i32 0, i32 0, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %"class.blink::MediaQueryExp", %"class.blink::MediaQueryExp"* %21, i64 %24
  %26 = icmp eq i32 %23, 0
  br i1 %26, label %27, label %31

27:                                               ; preds = %31, %15
  %28 = phi i8 [ %17, %15 ], [ %39, %31 ]
  %29 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %16, i64 1
  %30 = icmp eq %"class.std::__1::unique_ptr"* %29, %13
  br i1 %30, label %42, label %15

31:                                               ; preds = %15, %31
  %32 = phi %"class.blink::MediaQueryExp"* [ %40, %31 ], [ %21, %15 ]
  %33 = phi i8 [ %39, %31 ], [ %17, %15 ]
  %34 = tail call zeroext i1 @_ZNK5blink13MediaQueryExp16IsWidthDependentEv(%"class.blink::MediaQueryExp"* %32) #4
  %35 = zext i1 %34 to i8
  %36 = or i8 %33, %35
  %37 = tail call zeroext i1 @_ZNK5blink13MediaQueryExp17IsHeightDependentEv(%"class.blink::MediaQueryExp"* %32) #4
  %38 = or i8 %36, 2
  %39 = select i1 %37, i8 %38, i8 %36
  %40 = getelementptr inbounds %"class.blink::MediaQueryExp", %"class.blink::MediaQueryExp"* %32, i64 1
  %41 = icmp eq %"class.blink::MediaQueryExp"* %40, %25
  br i1 %41, label %27, label %31

42:                                               ; preds = %27, %7
  %43 = phi i8 [ 0, %7 ], [ %28, %27 ]
  %44 = getelementptr inbounds %"class.blink::ContainerQuery", %"class.blink::ContainerQuery"* %0, i64 0, i32 1, i32 0
  store i8 %43, i8* %44, align 8
  br i1 %4, label %79, label %45

45:                                               ; preds = %42
  %46 = getelementptr inbounds %"class.blink::MediaQuerySet", %"class.blink::MediaQuerySet"* %1, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %46) #4
  %47 = getelementptr inbounds %"class.blink::MediaQuerySet", %"class.blink::MediaQuerySet"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %79

50:                                               ; preds = %45
  %51 = getelementptr inbounds %"class.blink::MediaQuerySet", %"class.blink::MediaQuerySet"* %1, i64 0, i32 1
  %52 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %51, i64 0, i32 0, i32 0, i32 0
  %53 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %52, align 8
  %54 = icmp eq %"class.std::__1::unique_ptr"* %53, null
  br i1 %54, label %77, label %55, !prof !2

55:                                               ; preds = %50
  %56 = bitcast %"class.std::__1::unique_ptr"* %53 to i8*
  %57 = load i32, i32* %10, align 4
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %75, label %59, !prof !3

59:                                               ; preds = %55
  %60 = zext i32 %57 to i64
  %61 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %53, i64 %60
  br label %62

62:                                               ; preds = %69, %59
  %63 = phi %"class.std::__1::unique_ptr"* [ %70, %69 ], [ %53, %59 ]
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %63, i64 0, i32 0, i32 0, i32 0
  %65 = load %"class.blink::MediaQuery"*, %"class.blink::MediaQuery"** %64, align 8
  store %"class.blink::MediaQuery"* null, %"class.blink::MediaQuery"** %64, align 8
  %66 = icmp eq %"class.blink::MediaQuery"* %65, null
  br i1 %66, label %69, label %67

67:                                               ; preds = %62
  tail call void @_ZN5blink10MediaQueryD1Ev(%"class.blink::MediaQuery"* nonnull %65) #4
  %68 = bitcast %"class.blink::MediaQuery"* %65 to i8*
  tail call void @free(i8* %68) #4
  br label %69

69:                                               ; preds = %67, %62
  %70 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %63, i64 1
  %71 = icmp eq %"class.std::__1::unique_ptr"* %70, %61
  br i1 %71, label %72, label %62

72:                                               ; preds = %69
  store i32 0, i32* %10, align 4
  %73 = bitcast %"class.WTF::Vector"* %51 to i8**
  %74 = load i8*, i8** %73, align 8
  br label %75

75:                                               ; preds = %72, %55
  %76 = phi i8* [ %74, %72 ], [ %56, %55 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %76) #4
  br label %77

77:                                               ; preds = %50, %75
  %78 = bitcast %"class.blink::MediaQuerySet"* %1 to i8*
  tail call void @free(i8* %78) #4
  br label %79

79:                                               ; preds = %42, %45, %77
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink14ContainerQueryC2ERKS0_(%"class.blink::ContainerQuery"* nocapture, %"class.blink::ContainerQuery"* nocapture readonly dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::ContainerQuery", %"class.blink::ContainerQuery"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.blink::MediaQuerySet"*, %"class.blink::MediaQuerySet"** %3, align 8
  %5 = tail call noalias i8* @malloc(i64 24) #4
  %6 = bitcast i8* %5 to %"class.blink::MediaQuerySet"*
  tail call void @_ZN5blink13MediaQuerySetC1ERKS0_(%"class.blink::MediaQuerySet"* %6, %"class.blink::MediaQuerySet"* dereferenceable(24) %4) #4
  %7 = bitcast %"class.blink::ContainerQuery"* %0 to i8**
  store i8* %5, i8** %7, align 8
  %8 = getelementptr inbounds %"class.blink::ContainerQuery", %"class.blink::ContainerQuery"* %0, i64 0, i32 1, i32 0
  %9 = getelementptr inbounds %"class.blink::ContainerQuery", %"class.blink::ContainerQuery"* %1, i64 0, i32 1, i32 0
  %10 = load i8, i8* %9, align 8
  store i8 %10, i8* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink14ContainerQuery8ToStringEv(%"class.blink::ContainerQuery"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::ContainerQuery", %"class.blink::ContainerQuery"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.blink::MediaQuerySet"*, %"class.blink::MediaQuerySet"** %2, align 8
  %4 = tail call %"class.WTF::StringImpl"* @_ZNK5blink13MediaQuerySet9MediaTextEv(%"class.blink::MediaQuerySet"* %3) #4
  ret %"class.WTF::StringImpl"* %4
}

declare %"class.WTF::StringImpl"* @_ZNK5blink13MediaQuerySet9MediaTextEv(%"class.blink::MediaQuerySet"*) local_unnamed_addr #1

declare zeroext i1 @_ZNK5blink13MediaQueryExp16IsWidthDependentEv(%"class.blink::MediaQueryExp"*) local_unnamed_addr #1

declare zeroext i1 @_ZNK5blink13MediaQueryExp17IsHeightDependentEv(%"class.blink::MediaQueryExp"*) local_unnamed_addr #1

declare void @_ZN5blink13MediaQuerySetC1ERKS0_(%"class.blink::MediaQuerySet"*, %"class.blink::MediaQuerySet"* dereferenceable(24)) unnamed_addr #1

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #2

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5blink10MediaQueryD1Ev(%"class.blink::MediaQuery"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #1

declare void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
