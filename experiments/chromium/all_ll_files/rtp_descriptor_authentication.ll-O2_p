; ModuleID = '../../third_party/webrtc/modules/rtp_rtcp/source/rtp_descriptor_authentication.cc'
source_filename = "../../third_party/webrtc/modules/rtp_rtcp/source/rtp_descriptor_authentication.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.webrtc::RTPVideoHeader" = type { %"class.absl::optional", i32, i16, i16, i32, i8, i8, i8, i8, i8, i32, %"struct.webrtc::VideoPlayoutDelay", %"struct.webrtc::VideoSendTiming", %"class.absl::optional.15", %"class.absl::optional.25", %"class.absl::variant" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo" }
%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo" = type { i64, i32, i32, %"class.absl::InlinedVector", %"class.absl::InlinedVector.1", %"class.absl::InlinedVector.8", %"class.std::__1::bitset" }
%"class.absl::InlinedVector" = type { %"class.absl::inlined_vector_internal::Storage" }
%"class.absl::inlined_vector_internal::Storage" = type { %"class.absl::container_internal::CompressedTuple", %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data" }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.0" = type { i64 }
%"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Allocated", [24 x i8] }
%"struct.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Allocated" = type { i32*, i64 }
%"class.absl::InlinedVector.1" = type { %"class.absl::inlined_vector_internal::Storage.2" }
%"class.absl::inlined_vector_internal::Storage.2" = type { %"class.absl::container_internal::CompressedTuple.3", %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data" }
%"class.absl::container_internal::CompressedTuple.3" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.4" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.4" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" }
%"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Allocated", [24 x i8] }
%"struct.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Allocated" = type { i64*, i64 }
%"class.absl::InlinedVector.8" = type { %"class.absl::inlined_vector_internal::Storage.9" }
%"class.absl::inlined_vector_internal::Storage.9" = type { %"class.absl::container_internal::CompressedTuple.10", %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data" }
%"class.absl::container_internal::CompressedTuple.10" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.11" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.11" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" }
%"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Allocated" }
%"struct.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Allocated" = type { i32*, i64 }
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { i64 }
%"struct.webrtc::VideoPlayoutDelay" = type { i32, i32 }
%"struct.webrtc::VideoSendTiming" = type { i16, i16, i16, i16, i16, i16, i8 }
%"class.absl::optional.15" = type { %"class.absl::optional_internal::optional_data.16" }
%"class.absl::optional_internal::optional_data.16" = type { %"class.absl::optional_internal::optional_data_base.17" }
%"class.absl::optional_internal::optional_data_base.17" = type { %"class.absl::optional_internal::optional_data_dtor_base.18" }
%"class.absl::optional_internal::optional_data_dtor_base.18" = type { i8, %union.anon.19 }
%union.anon.19 = type { %"class.webrtc::ColorSpace" }
%"class.webrtc::ColorSpace" = type { i8, i8, i8, i32, i32, i32, %"class.absl::optional.20" }
%"class.absl::optional.20" = type { %"class.absl::optional_internal::optional_data.21" }
%"class.absl::optional_internal::optional_data.21" = type { %"class.absl::optional_internal::optional_data_base.22" }
%"class.absl::optional_internal::optional_data_base.22" = type { %"class.absl::optional_internal::optional_data_dtor_base.23" }
%"class.absl::optional_internal::optional_data_dtor_base.23" = type { i8, %union.anon.24 }
%union.anon.24 = type { %"struct.webrtc::HdrMetadata" }
%"struct.webrtc::HdrMetadata" = type { %"struct.webrtc::HdrMasteringMetadata", i32, i32 }
%"struct.webrtc::HdrMasteringMetadata" = type { %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", float, float }
%"struct.webrtc::HdrMasteringMetadata::Chromaticity" = type { float, float }
%"class.absl::optional.25" = type { %"class.absl::optional_internal::optional_data.26" }
%"class.absl::optional_internal::optional_data.26" = type { %"class.absl::optional_internal::optional_data_base.27" }
%"class.absl::optional_internal::optional_data_base.27" = type { %"class.absl::optional_internal::optional_data_dtor_base.28" }
%"class.absl::optional_internal::optional_data_dtor_base.28" = type { i8, %union.anon.29 }
%union.anon.29 = type { i16 }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::Union", i64 }
%"union.absl::variant_internal::Union" = type { %"union.absl::variant_internal::Union.30" }
%"union.absl::variant_internal::Union.30" = type { %"union.absl::variant_internal::Union.31" }
%"union.absl::variant_internal::Union.31" = type { %"struct.webrtc::RTPVideoHeaderVP9" }
%"struct.webrtc::RTPVideoHeaderVP9" = type { i8, i8, i8, i8, i8, i8, i16, i16, i16, i8, i8, i8, i8, i8, i8, [3 x i8], [3 x i16], i64, i64, i8, [8 x i16], [8 x i16], %"struct.webrtc::GofInfoVP9", i8 }
%"struct.webrtc::GofInfoVP9" = type { i64, [255 x i8], [255 x i8], [255 x i8], [255 x [3 x i8]], i16 }
%"class.webrtc::RtpGenericFrameDescriptor" = type { i8, i8, i16, i8, i8, i64, [8 x i16], i32, i32 }
%"class.std::__1::__vector_base_common" = type { i8 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc27RtpDescriptorAuthenticationERKNS_14RTPVideoHeaderE(%"class.std::__1::vector"* noalias nocapture sret, %"struct.webrtc::RTPVideoHeader"* readonly dereferenceable(1928)) local_unnamed_addr #0 {
  %3 = alloca %"class.webrtc::RtpGenericFrameDescriptor", align 8
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i8, i8* %5, align 8, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %10

8:                                                ; preds = %2
  %9 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #6
  br label %110

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %24, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = icmp sgt i32 %12, 7
  %18 = icmp ugt i32 %16, 7
  %19 = or i1 %17, %18
  br i1 %19, label %24, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = icmp ugt i64 %22, 17
  br i1 %23, label %24, label %26

24:                                               ; preds = %20, %14, %10
  %25 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 24, i1 false) #6
  br label %110

26:                                               ; preds = %20
  %27 = getelementptr inbounds %"class.webrtc::RtpGenericFrameDescriptor", %"class.webrtc::RtpGenericFrameDescriptor"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %27) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 40, i1 false)
  call void @_ZN6webrtc25RtpGenericFrameDescriptorC1Ev(%"class.webrtc::RtpGenericFrameDescriptor"* nonnull %3) #6
  store i8 1, i8* %27, align 8
  %28 = getelementptr inbounds %"class.webrtc::RtpGenericFrameDescriptor", %"class.webrtc::RtpGenericFrameDescriptor"* %3, i64 0, i32 1
  store i8 0, i8* %28, align 1
  %29 = load i32, i32* %15, align 4
  call void @_ZN6webrtc25RtpGenericFrameDescriptor16SetTemporalLayerEi(%"class.webrtc::RtpGenericFrameDescriptor"* nonnull %3, i32 %29) #6
  %30 = load i32, i32* %11, align 8
  %31 = shl i32 1, %30
  %32 = trunc i32 %31 to i8
  call void @_ZN6webrtc25RtpGenericFrameDescriptor23SetSpatialLayersBitmaskEh(%"class.webrtc::RtpGenericFrameDescriptor"* nonnull %3, i8 zeroext %32) #6
  %33 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = trunc i64 %34 to i16
  call void @_ZN6webrtc25RtpGenericFrameDescriptor10SetFrameIdEt(%"class.webrtc::RtpGenericFrameDescriptor"* nonnull %3, i16 zeroext %35) #6
  %36 = load i64, i64* %21, align 8
  %37 = and i64 %36, 1
  %38 = icmp eq i64 %37, 0
  %39 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %40 = load i64*, i64** %39, align 8
  %41 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 1
  %42 = bitcast %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data"* %41 to i64*
  %43 = select i1 %38, i64* %42, i64* %40
  %44 = lshr i64 %36, 1
  %45 = getelementptr inbounds i64, i64* %43, i64 %44
  %46 = icmp eq i64 %44, 0
  br i1 %46, label %49, label %52

47:                                               ; preds = %52
  %48 = load i64, i64* %21, align 8
  br label %49

49:                                               ; preds = %47, %26
  %50 = phi i64 [ %48, %47 ], [ %36, %26 ]
  %51 = icmp ult i64 %50, 2
  br i1 %51, label %61, label %68

52:                                               ; preds = %26, %52
  %53 = phi i64* [ %59, %52 ], [ %43, %26 ]
  %54 = load i64, i64* %53, align 8
  %55 = load i64, i64* %33, align 8
  %56 = sub nsw i64 %55, %54
  %57 = trunc i64 %56 to i16
  %58 = call zeroext i1 @_ZN6webrtc25RtpGenericFrameDescriptor22AddFrameDependencyDiffEt(%"class.webrtc::RtpGenericFrameDescriptor"* nonnull %3, i16 zeroext %57) #6
  %59 = getelementptr inbounds i64, i64* %53, i64 1
  %60 = icmp eq i64* %59, %45
  br i1 %60, label %47, label %52

61:                                               ; preds = %49
  %62 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 2
  %63 = load i16, i16* %62, align 4
  %64 = zext i16 %63 to i32
  %65 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 3
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  call void @_ZN6webrtc25RtpGenericFrameDescriptor13SetResolutionEii(%"class.webrtc::RtpGenericFrameDescriptor"* nonnull %3, i32 %64, i32 %67) #6
  br label %68

68:                                               ; preds = %61, %49
  %69 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %69) #6
  %70 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %71 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %72 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %73 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %73, i8 -86, i64 24, i1 false)
  %74 = call i64 @_ZN6webrtc36RtpGenericFrameDescriptorExtension009ValueSizeERKNS_25RtpGenericFrameDescriptorE(%"class.webrtc::RtpGenericFrameDescriptor"* nonnull dereferenceable(40) %3) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %69, i8 0, i64 24, i1 false) #6
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %78

76:                                               ; preds = %68
  %77 = bitcast i8** %71 to i64*
  br label %91

78:                                               ; preds = %68
  %79 = icmp slt i64 %74, 0
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %81) #7
  unreachable

82:                                               ; preds = %78
  %83 = call i8* @_Znwm(i64 %74) #8
  store i8* %83, i8** %70, align 8
  %84 = getelementptr inbounds i8, i8* %83, i64 %74
  store i8* %84, i8** %72, align 8
  %85 = bitcast i8** %71 to i64*
  %86 = ptrtoint i8* %83 to i64
  %87 = sub i64 %74, %86
  %88 = getelementptr i8, i8* %83, i64 %87
  %89 = ptrtoint i8* %88 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %83, i8 0, i64 %89, i1 false) #6
  %90 = ptrtoint i8* %84 to i64
  store i64 %90, i64* %85, align 8
  br label %91

91:                                               ; preds = %82, %76
  %92 = phi i64* [ %77, %76 ], [ %85, %82 ]
  %93 = phi i64 [ 0, %76 ], [ %90, %82 ]
  %94 = phi i8* [ null, %76 ], [ %83, %82 ]
  %95 = ptrtoint i8* %94 to i64
  %96 = sub i64 %93, %95
  %97 = icmp eq i64 %96, 0
  %98 = select i1 %97, i8* null, i8* %94
  %99 = call zeroext i1 @_ZN6webrtc36RtpGenericFrameDescriptorExtension005WriteEN3rtc9ArrayViewIhLln4711EEERKNS_25RtpGenericFrameDescriptorE(i8* %98, i64 %96, %"class.webrtc::RtpGenericFrameDescriptor"* nonnull dereferenceable(40) %3) #6
  %100 = bitcast %"class.std::__1::vector"* %4 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = bitcast %"class.std::__1::vector"* %0 to i64*
  store i64 %101, i64* %102, align 8
  %103 = load i64, i64* %92, align 8
  %104 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %105 = bitcast i8** %104 to i64*
  store i64 %103, i64* %105, align 8
  %106 = bitcast i8** %72 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %109 = bitcast i8** %108 to i64*
  store i64 %107, i64* %109, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %69) #6
  call void @_ZN6webrtc25RtpGenericFrameDescriptorD1Ev(%"class.webrtc::RtpGenericFrameDescriptor"* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %27) #6
  br label %110

110:                                              ; preds = %24, %91, %8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN6webrtc25RtpGenericFrameDescriptorC1Ev(%"class.webrtc::RtpGenericFrameDescriptor"*) unnamed_addr #2

declare void @_ZN6webrtc25RtpGenericFrameDescriptor16SetTemporalLayerEi(%"class.webrtc::RtpGenericFrameDescriptor"*, i32) local_unnamed_addr #2

declare void @_ZN6webrtc25RtpGenericFrameDescriptor23SetSpatialLayersBitmaskEh(%"class.webrtc::RtpGenericFrameDescriptor"*, i8 zeroext) local_unnamed_addr #2

declare void @_ZN6webrtc25RtpGenericFrameDescriptor10SetFrameIdEt(%"class.webrtc::RtpGenericFrameDescriptor"*, i16 zeroext) local_unnamed_addr #2

declare zeroext i1 @_ZN6webrtc25RtpGenericFrameDescriptor22AddFrameDependencyDiffEt(%"class.webrtc::RtpGenericFrameDescriptor"*, i16 zeroext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN6webrtc25RtpGenericFrameDescriptor13SetResolutionEii(%"class.webrtc::RtpGenericFrameDescriptor"*, i32, i32) local_unnamed_addr #2

declare i64 @_ZN6webrtc36RtpGenericFrameDescriptorExtension009ValueSizeERKNS_25RtpGenericFrameDescriptorE(%"class.webrtc::RtpGenericFrameDescriptor"* dereferenceable(40)) local_unnamed_addr #2

declare zeroext i1 @_ZN6webrtc36RtpGenericFrameDescriptorExtension005WriteEN3rtc9ArrayViewIhLln4711EEERKNS_25RtpGenericFrameDescriptorE(i8*, i64, %"class.webrtc::RtpGenericFrameDescriptor"* dereferenceable(40)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN6webrtc25RtpGenericFrameDescriptorD1Ev(%"class.webrtc::RtpGenericFrameDescriptor"*) unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
