; ModuleID = '../../ui/gfx/scoped_canvas.cc'
source_filename = "../../ui/gfx/scoped_canvas.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::ScopedCanvas" = type { i32 (...)**, %"class.gfx::Canvas"* }
%"class.gfx::Canvas" = type { i32 (...)**, float, %"class.absl::optional", %"class.absl::optional.8", %"class.cc::PaintCanvas"* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %class.SkBitmap }
%class.SkBitmap = type { %class.sk_sp, %class.SkPixmap, %class.sk_sp.7 }
%class.sk_sp = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.0, i32, i32 }
%class.sk_sp.0 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.7 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%"class.absl::optional.8" = type { %"class.absl::optional_internal::optional_data.9" }
%"class.absl::optional_internal::optional_data.9" = type { %"class.absl::optional_internal::optional_data_base.10" }
%"class.absl::optional_internal::optional_data_base.10" = type { %"class.absl::optional_internal::optional_data_dtor_base.11" }
%"class.absl::optional_internal::optional_data_dtor_base.11" = type { i8, [7 x i8], %union.anon.12 }
%union.anon.12 = type { %"class.cc::SkiaPaintCanvas" }
%"class.cc::SkiaPaintCanvas" = type <{ %"class.cc::PaintCanvas", %class.SkCanvas*, %class.SkBitmap, %"class.std::__1::unique_ptr.22", %"class.cc::ImageProvider"*, %"struct.cc::SkiaPaintCanvas::ContextFlushes", i32, [4 x i8] }>
%"class.cc::PaintCanvas" = type { i32 (...)**, %"class.printing::MetafileSkia"*, %"class.paint_preview::PaintPreviewTracker"* }
%"class.printing::MetafileSkia" = type opaque
%"class.paint_preview::PaintPreviewTracker" = type opaque
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.13, [384 x i64], %class.sk_sp.14, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.16" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.13 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.14 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %class.SkCanvas* }
%"class.cc::ImageProvider" = type opaque
%"struct.cc::SkiaPaintCanvas::ContextFlushes" = type { i8, i32 }
%"class.gfx::Vector2d" = type { i32, i32 }

@_ZTVN3gfx12ScopedCanvasE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.gfx::ScopedCanvas"*)* @_ZN3gfx12ScopedCanvasD2Ev to i8*), i8* bitcast (void (%"class.gfx::ScopedCanvas"*)* @_ZN3gfx12ScopedCanvasD0Ev to i8*)] }, align 8

@_ZN3gfx12ScopedCanvasC1EPNS_6CanvasE = hidden unnamed_addr alias void (%"class.gfx::ScopedCanvas"*, %"class.gfx::Canvas"*), void (%"class.gfx::ScopedCanvas"*, %"class.gfx::Canvas"*)* @_ZN3gfx12ScopedCanvasC2EPNS_6CanvasE
@_ZN3gfx12ScopedCanvasD1Ev = hidden unnamed_addr alias void (%"class.gfx::ScopedCanvas"*), void (%"class.gfx::ScopedCanvas"*)* @_ZN3gfx12ScopedCanvasD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx12ScopedCanvasC2EPNS_6CanvasE(%"class.gfx::ScopedCanvas"* nocapture, %"class.gfx::Canvas"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.gfx::ScopedCanvas", %"class.gfx::ScopedCanvas"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3gfx12ScopedCanvasE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.gfx::ScopedCanvas", %"class.gfx::ScopedCanvas"* %0, i64 0, i32 1
  store %"class.gfx::Canvas"* %1, %"class.gfx::Canvas"** %4, align 8
  %5 = icmp eq %"class.gfx::Canvas"* %1, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @_ZN3gfx6Canvas4SaveEv(%"class.gfx::Canvas"* nonnull %1) #4
  br label %7

7:                                                ; preds = %2, %6
  ret void
}

declare void @_ZN3gfx6Canvas4SaveEv(%"class.gfx::Canvas"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx12ScopedCanvasD2Ev(%"class.gfx::ScopedCanvas"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gfx::ScopedCanvas", %"class.gfx::ScopedCanvas"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3gfx12ScopedCanvasE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.gfx::ScopedCanvas", %"class.gfx::ScopedCanvas"* %0, i64 0, i32 1
  %4 = load %"class.gfx::Canvas"*, %"class.gfx::Canvas"** %3, align 8
  %5 = icmp eq %"class.gfx::Canvas"* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZN3gfx6Canvas7RestoreEv(%"class.gfx::Canvas"* nonnull %4) #4
  br label %7

7:                                                ; preds = %1, %6
  ret void
}

declare void @_ZN3gfx6Canvas7RestoreEv(%"class.gfx::Canvas"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx12ScopedCanvasD0Ev(%"class.gfx::ScopedCanvas"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gfx::ScopedCanvas", %"class.gfx::ScopedCanvas"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3gfx12ScopedCanvasE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.gfx::ScopedCanvas", %"class.gfx::ScopedCanvas"* %0, i64 0, i32 1
  %4 = load %"class.gfx::Canvas"*, %"class.gfx::Canvas"** %3, align 8
  %5 = icmp eq %"class.gfx::Canvas"* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZN3gfx6Canvas7RestoreEv(%"class.gfx::Canvas"* nonnull %4) #4
  br label %7

7:                                                ; preds = %1, %6
  %8 = bitcast %"class.gfx::ScopedCanvas"* %0 to i8*
  tail call void @_ZdlPv(i8* %8) #5
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3gfx12ScopedCanvas9FlipIfRTLEi(%"class.gfx::ScopedCanvas"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.gfx::Vector2d", align 4
  %4 = tail call zeroext i1 @_ZN4base4i18n5IsRTLEv() #4
  br i1 %4, label %5, label %12

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.gfx::ScopedCanvas", %"class.gfx::ScopedCanvas"* %0, i64 0, i32 1
  %7 = load %"class.gfx::Canvas"*, %"class.gfx::Canvas"** %6, align 8
  %8 = bitcast %"class.gfx::Vector2d"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #4
  %9 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %3, i64 0, i32 0
  store i32 %1, i32* %9, align 4
  %10 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %3, i64 0, i32 1
  store i32 0, i32* %10, align 4
  call void @_ZN3gfx6Canvas9TranslateERKNS_8Vector2dE(%"class.gfx::Canvas"* %7, %"class.gfx::Vector2d"* nonnull dereferenceable(8) %3) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #4
  %11 = load %"class.gfx::Canvas"*, %"class.gfx::Canvas"** %6, align 8
  call void @_ZN3gfx6Canvas5ScaleEff(%"class.gfx::Canvas"* %11, float -1.000000e+00, float 1.000000e+00) #4
  br label %12

12:                                               ; preds = %5, %2
  ret void
}

declare zeroext i1 @_ZN4base4i18n5IsRTLEv() local_unnamed_addr #1

declare void @_ZN3gfx6Canvas9TranslateERKNS_8Vector2dE(%"class.gfx::Canvas"*, %"class.gfx::Vector2d"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZN3gfx6Canvas5ScaleEff(%"class.gfx::Canvas"*, float, float) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
