; ModuleID = '../../third_party/blink/renderer/platform/fonts/shaping/caching_word_shape_iterator.cc'
source_filename = "../../third_party/blink/renderer/platform/fonts/shaping/caching_word_shape_iterator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::ShapeResult" = type <{ %"class.WTF::RefCounted", float, %"class.blink::FloatRect", %"class.WTF::Vector", %class.scoped_refptr.1, %"class.std::__1::unique_ptr.20", i32, i32, i32, [4 x i8] }>
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatSize" = type { float, float }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %class.scoped_refptr.0*, i32, i32 }
%class.scoped_refptr.0 = type opaque
%class.scoped_refptr.1 = type { %"class.blink::SimpleFontData"* }
%"class.blink::SimpleFontData" = type { %"class.blink::FontData.base", %"class.blink::FontMetrics", float, float, [4 x i8], %"class.blink::FontPlatformData", %class.SkFont, i16, float, i16, %"class.std::__1::unique_ptr", %class.scoped_refptr.17, i32, i32, %"struct.blink::FontHeight" }
%"class.blink::FontData.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.2" }>
%"class.WTF::RefCounted.2" = type { %"class.base::RefCounted.3" }
%"class.base::RefCounted.3" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::FontMetrics" = type <{ i32, float, float, float, float, float, float, %"class.absl::optional", %"class.absl::optional", i32, i32, i8, i8, [2 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { float }
%"class.blink::FontPlatformData" = type <{ %class.sk_sp, %"class.std::__1::basic_string", float, i8, i8, i8, i8, i32, %"struct.blink::WebFontRenderStyle", [5 x i8], %class.scoped_refptr.12, i8, [7 x i8] }>
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.5" }
%"struct.std::__1::atomic.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl.8" }
%"struct.std::__1::__cxx_atomic_impl.8" = type { %"struct.std::__1::__cxx_atomic_base_impl.9" }
%"struct.std::__1::__cxx_atomic_base_impl.9" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.10 }
%union.anon.10 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.blink::WebFontRenderStyle" = type { i8, i8, i8, i8, i8, i8, i8 }
%class.scoped_refptr.12 = type { %"class.blink::HarfBuzzFace"* }
%"class.blink::HarfBuzzFace" = type opaque
%class.SkFont = type <{ %class.sk_sp, float, float, float, i8, i8, i8, i8 }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"struct.blink::SimpleFontData::DerivedFontData"* }
%"struct.blink::SimpleFontData::DerivedFontData" = type { %class.scoped_refptr.15, %class.scoped_refptr.15 }
%class.scoped_refptr.15 = type { %"class.blink::SimpleFontData"* }
%class.scoped_refptr.17 = type { %"class.blink::CustomFontData"* }
%"class.blink::CustomFontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.18", [4 x i8] }>
%"class.WTF::RefCounted.18" = type { %"class.base::RefCounted.19" }
%"class.base::RefCounted.19" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::FontHeight" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%"class.std::__1::unique_ptr.20" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.blink::ShapeResult::CharacterPositionData"* }
%"class.blink::ShapeResult::CharacterPositionData" = type { %"class.WTF::Vector.23", i32, float }
%"class.WTF::Vector.23" = type { %"class.WTF::VectorBuffer.24" }
%"class.WTF::VectorBuffer.24" = type { %"class.WTF::VectorBufferBase.25" }
%"class.WTF::VectorBufferBase.25" = type { %"struct.blink::ShapeResultCharacterData"*, i32, i32 }
%"struct.blink::ShapeResultCharacterData" = type { float, i8 }
%"class.blink::CachingWordShapeIterator" = type { %"class.blink::ShapeCache"*, %"class.blink::TextRun"*, %"class.blink::Font"*, %"class.blink::ShapeResultSpacing", float, i32 }
%"class.blink::ShapeCache" = type { %"class.WTF::HashMap", %"class.WTF::HashMap.33", i32, %"class.base::WeakPtrFactory" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { i32, %class.scoped_refptr }
%class.scoped_refptr = type { %"class.blink::ShapeResult"* }
%"class.WTF::HashMap.33" = type { %"class.WTF::HashTable.34" }
%"class.WTF::HashTable.34" = type <{ %"struct.WTF::KeyValuePair.37"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.37" = type { %"class.blink::ShapeCache::SmallStringKey", %class.scoped_refptr }
%"class.blink::ShapeCache::SmallStringKey" = type { i32, i16, [15 x i16] }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.38 }
%class.scoped_refptr.38 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.5" }
%"class.blink::ShapeResultSpacing" = type <{ %"class.blink::TextRun"*, float, float, float, float, i32, i32, i8, i8, i8, i8, i8, [3 x i8] }>
%"class.blink::TextRun" = type <{ %union.anon.39, i32, i32, float, float, i16, [2 x i8], %"struct.blink::TabSize", [4 x i8] }>
%union.anon.39 = type { i8* }
%"struct.blink::TabSize" = type <{ float, i8, [3 x i8] }>
%"class.blink::Font" = type { %"class.blink::FontDescription", %class.scoped_refptr.72 }
%"class.blink::FontDescription" = type { %"class.blink::FontFamily", %class.scoped_refptr.47, %class.scoped_refptr.55, %class.scoped_refptr.65, float, float, float, float, float, float, %"struct.blink::FontSelectionRequest", %"class.blink::FontSelectionValue", %union.anon.71 }
%"class.blink::FontFamily" = type { %"class.WTF::AtomicString", %class.scoped_refptr.46 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr.40 }
%class.scoped_refptr.40 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.41" }
%"struct.std::__1::atomic.41" = type { %"struct.std::__1::__atomic_base.42" }
%"struct.std::__1::__atomic_base.42" = type { %"struct.std::__1::__atomic_base.43" }
%"struct.std::__1::__atomic_base.43" = type { %"struct.std::__1::__cxx_atomic_impl.44" }
%"struct.std::__1::__cxx_atomic_impl.44" = type { %"struct.std::__1::__cxx_atomic_base_impl.45" }
%"struct.std::__1::__cxx_atomic_base_impl.45" = type { i32 }
%class.scoped_refptr.46 = type { %"class.blink::SharedFontFamily"* }
%"class.blink::SharedFontFamily" = type <{ %"class.blink::FontFamily", %"class.WTF::RefCounted.270", [4 x i8] }>
%"class.WTF::RefCounted.270" = type { %"class.base::RefCounted.271" }
%"class.base::RefCounted.271" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.47 = type { %"class.blink::FontFeatureSettings"* }
%"class.blink::FontFeatureSettings" = type <{ %"class.blink::FontSettings", %"class.WTF::RefCounted.53", [4 x i8] }>
%"class.blink::FontSettings" = type { %"class.WTF::Vector.48" }
%"class.WTF::Vector.48" = type { %"class.WTF::VectorBuffer.49" }
%"class.WTF::VectorBuffer.49" = type { %"class.WTF::VectorBufferBase.50" }
%"class.WTF::VectorBufferBase.50" = type { %"class.blink::FontTagValuePair"*, i32, i32 }
%"class.blink::FontTagValuePair" = type { i32, i32 }
%"class.WTF::RefCounted.53" = type { %"class.base::RefCounted.54" }
%"class.base::RefCounted.54" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.55 = type { %"class.blink::FontVariationSettings"* }
%"class.blink::FontVariationSettings" = type <{ %"class.blink::FontSettings.56", %"class.WTF::RefCounted.63", [4 x i8] }>
%"class.blink::FontSettings.56" = type { %"class.WTF::Vector.57" }
%"class.WTF::Vector.57" = type { %"class.WTF::VectorBuffer.58" }
%"class.WTF::VectorBuffer.58" = type { %"class.WTF::VectorBufferBase.59" }
%"class.WTF::VectorBufferBase.59" = type { %"class.blink::FontTagValuePair.60"*, i32, i32 }
%"class.blink::FontTagValuePair.60" = type { i32, float }
%"class.WTF::RefCounted.63" = type { %"class.base::RefCounted.64" }
%"class.base::RefCounted.64" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.65 = type { %"class.blink::LayoutLocale"* }
%"class.blink::LayoutLocale" = type <{ %"class.WTF::RefCounted.66", [4 x i8], %"class.WTF::AtomicString", %"class.std::__1::basic_string", %"class.WTF::CaseMap::Locale", %class.scoped_refptr.68, %struct.hb_language_impl_t*, i32, i32, i8, [7 x i8] }>
%"class.WTF::RefCounted.66" = type { %"class.base::RefCounted.67" }
%"class.base::RefCounted.67" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::CaseMap::Locale" = type { i8* }
%class.scoped_refptr.68 = type { %"class.blink::Hyphenation"* }
%"class.blink::Hyphenation" = type <{ i32 (...)**, %"class.WTF::RefCounted.69", [4 x i8] }>
%"class.WTF::RefCounted.69" = type { %"class.base::RefCounted.70" }
%"class.base::RefCounted.70" = type { %"class.base::subtle::RefCountedBase" }
%struct.hb_language_impl_t = type opaque
%"struct.blink::FontSelectionRequest" = type { %"class.blink::FontSelectionValue", %"class.blink::FontSelectionValue", %"class.blink::FontSelectionValue" }
%"class.blink::FontSelectionValue" = type { i16 }
%union.anon.71 = type { %"struct.blink::FontDescription::BitFields" }
%"struct.blink::FontDescription::BitFields" = type { i56 }
%class.scoped_refptr.72 = type { %"class.blink::FontFallbackList"* }
%"class.blink::FontFallbackList" = type { %"class.WTF::RefCounted.73", %"class.WTF::Vector.75", %"class.blink::SimpleFontData"*, %"class.blink::WeakPersistent", i32, i16, i8, %"class.base::WeakPtr" }
%"class.WTF::RefCounted.73" = type { %"class.base::RefCounted.74" }
%"class.base::RefCounted.74" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.75" = type { %"class.WTF::VectorBuffer.76" }
%"class.WTF::VectorBuffer.76" = type { %"class.WTF::VectorBufferBase.77", [8 x i8] }
%"class.WTF::VectorBufferBase.77" = type { %class.scoped_refptr.78*, i32, i32 }
%class.scoped_refptr.78 = type { %"class.blink::FontData"* }
%"class.blink::FontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.2", [4 x i8] }>
%"class.blink::WeakPersistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::FontFallbackMap"*, %"class.blink::PersistentNodePtr" }
%"class.blink::FontFallbackMap" = type opaque
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.81", i32, [4 x i8], %"class.std::__1::unique_ptr.219", %"class.std::__1::unique_ptr.219", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.229", %"class.std::__1::unique_ptr.235", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.247", %"class.std::__1::unique_ptr.253", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.260", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.81" = type { %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.84", %"class.std::__1::unique_ptr.90", %"class.std::__1::unique_ptr.96", %"class.std::__1::unique_ptr.102", %"class.std::__1::unique_ptr.108", %"class.std::__1::unique_ptr.114", %"class.std::__1::unique_ptr.125", %"class.std::__1::unique_ptr.132", %"class.std::__1::unique_ptr.132", %"class.std::__1::unique_ptr.139", %"class.std::__1::unique_ptr.146", %"class.std::__1::unique_ptr.153", %"class.std::__1::unique_ptr.153", %"class.std::__1::unique_ptr.160", %"class.std::__1::unique_ptr.167", %"class.std::__1::unique_ptr.174", %"class.std::__1::unique_ptr.199", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.84" = type { %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.90" = type { %"class.std::__1::__compressed_pair.91" }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.92" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.96" = type { %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.102" = type { %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.108" = type { %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.114" = type { %"class.std::__1::__compressed_pair.115" }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.116" }
%"struct.std::__1::__compressed_pair_elem.116" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.117" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.117" = type { %"struct.std::__1::__atomic_base.118" }
%"struct.std::__1::__atomic_base.118" = type { %"struct.std::__1::__atomic_base.119" }
%"struct.std::__1::__atomic_base.119" = type { %"struct.std::__1::__cxx_atomic_impl.120" }
%"struct.std::__1::__cxx_atomic_impl.120" = type { %"struct.std::__1::__cxx_atomic_base_impl.121" }
%"struct.std::__1::__cxx_atomic_base_impl.121" = type { i64 }
%"class.std::__1::unique_ptr.125" = type { %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { %"class.blink::Worklist.128"* }
%"class.blink::Worklist.128" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.117" }
%"class.std::__1::unique_ptr.132" = type { %"class.std::__1::__compressed_pair.133" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.134" }
%"struct.std::__1::__compressed_pair_elem.134" = type { %"class.blink::Worklist.135"* }
%"class.blink::Worklist.135" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.117" }
%"class.std::__1::unique_ptr.139" = type { %"class.std::__1::__compressed_pair.140" }
%"class.std::__1::__compressed_pair.140" = type { %"struct.std::__1::__compressed_pair_elem.141" }
%"struct.std::__1::__compressed_pair_elem.141" = type { %"class.blink::Worklist.142"* }
%"class.blink::Worklist.142" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.117" }
%"class.std::__1::unique_ptr.146" = type { %"class.std::__1::__compressed_pair.147" }
%"class.std::__1::__compressed_pair.147" = type { %"struct.std::__1::__compressed_pair_elem.148" }
%"struct.std::__1::__compressed_pair_elem.148" = type { %"class.blink::Worklist.149"* }
%"class.blink::Worklist.149" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.117" }
%"class.std::__1::unique_ptr.153" = type { %"class.std::__1::__compressed_pair.154" }
%"class.std::__1::__compressed_pair.154" = type { %"struct.std::__1::__compressed_pair_elem.155" }
%"struct.std::__1::__compressed_pair_elem.155" = type { %"class.blink::Worklist.156"* }
%"class.blink::Worklist.156" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.117" }
%"class.std::__1::unique_ptr.160" = type { %"class.std::__1::__compressed_pair.161" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"class.blink::Worklist.163"* }
%"class.blink::Worklist.163" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.117" }
%"class.std::__1::unique_ptr.167" = type { %"class.std::__1::__compressed_pair.168" }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"struct.std::__1::__compressed_pair_elem.169" = type { %"class.blink::Worklist.170"* }
%"class.blink::Worklist.170" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.117" }
%"class.std::__1::unique_ptr.174" = type { %"class.std::__1::__compressed_pair.175" }
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.177", %"class.std::__1::__compressed_pair.186", %"class.std::__1::__compressed_pair.191", %"class.std::__1::__compressed_pair.193", [4 x i8] }>
%"class.std::__1::unique_ptr.177" = type { %"class.std::__1::__compressed_pair.178" }
%"class.std::__1::__compressed_pair.178" = type { %"struct.std::__1::__compressed_pair_elem.179", %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.179" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { i64 }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.191" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.194" = type { float }
%"class.std::__1::unique_ptr.199" = type { %"class.std::__1::__compressed_pair.200" }
%"class.std::__1::__compressed_pair.200" = type { %"struct.std::__1::__compressed_pair_elem.201" }
%"struct.std::__1::__compressed_pair_elem.201" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.202", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.202" = type { %"class.std::__1::__compressed_pair.203" }
%"class.std::__1::__compressed_pair.203" = type { %"struct.std::__1::__compressed_pair_elem.204" }
%"struct.std::__1::__compressed_pair_elem.204" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.211" }
%"class.WTF::Vector.211" = type { %"class.WTF::VectorBuffer.212" }
%"class.WTF::VectorBuffer.212" = type { %"class.WTF::VectorBufferBase.213" }
%"class.WTF::VectorBufferBase.213" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.219" = type { %"class.std::__1::__compressed_pair.220" }
%"class.std::__1::__compressed_pair.220" = type { %"struct.std::__1::__compressed_pair_elem.221" }
%"struct.std::__1::__compressed_pair_elem.221" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.227" }
%"class.WTF::VectorBuffer.227" = type { %"class.WTF::VectorBufferBase.228" }
%"class.WTF::VectorBufferBase.228" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.229" = type { %"class.std::__1::__compressed_pair.230" }
%"class.std::__1::__compressed_pair.230" = type { %"struct.std::__1::__compressed_pair_elem.231" }
%"struct.std::__1::__compressed_pair_elem.231" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.235" = type { %"class.std::__1::__compressed_pair.236" }
%"class.std::__1::__compressed_pair.236" = type { %"struct.std::__1::__compressed_pair_elem.237" }
%"struct.std::__1::__compressed_pair_elem.237" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.241" }
%"class.std::__1::unique_ptr.241" = type { %"class.std::__1::__compressed_pair.242" }
%"class.std::__1::__compressed_pair.242" = type { %"struct.std::__1::__compressed_pair_elem.243" }
%"struct.std::__1::__compressed_pair_elem.243" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.128"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.135"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.142"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.149"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.156"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.265" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.265" = type { %"struct.std::__1::__compressed_pair_elem.266" }
%"struct.std::__1::__compressed_pair_elem.266" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.247" = type { %"class.std::__1::__compressed_pair.248" }
%"class.std::__1::__compressed_pair.248" = type { %"struct.std::__1::__compressed_pair_elem.249" }
%"struct.std::__1::__compressed_pair_elem.249" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.253" = type { %"class.std::__1::__compressed_pair.254" }
%"class.std::__1::__compressed_pair.254" = type { %"struct.std::__1::__compressed_pair_elem.255" }
%"struct.std::__1::__compressed_pair_elem.255" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.259 }
%class.scoped_refptr.259 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.260" = type { %"struct.std::__1::__atomic_base.261" }
%"struct.std::__1::__atomic_base.261" = type { %"struct.std::__1::__cxx_atomic_impl.262" }
%"struct.std::__1::__cxx_atomic_impl.262" = type { %"struct.std::__1::__cxx_atomic_base_impl.263" }
%"struct.std::__1::__cxx_atomic_base_impl.263" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.264 }
%class.scoped_refptr.264 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.blink::HarfBuzzShaper" = type { %"class.WTF::String", %"class.base::RepeatingCallback" }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.272 }
%class.scoped_refptr.272 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.273", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.273" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN5blink10ShapeCache11AddSlowCaseERKNS_7TextRunE13scoped_refptrIKNS_11ShapeResultEE = comdat any

$_ZN3WTF9HashTableIjNS_12KeyValuePairIj13scoped_refptrIKN5blink11ShapeResultEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_29UnsignedWithZeroKeyHashTraitsIjEENS_10HashTraitsIS6_EEEESD_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISG_SA_SH_EERjS6_EENS_18HashTableAddResultISI_S7_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIjNS_12KeyValuePairIj13scoped_refptrIKN5blink11ShapeResultEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_29UnsignedWithZeroKeyHashTraitsIjEENS_10HashTraitsIS6_EEEESD_NS_18PartitionAllocatorEE6ExpandEPS7_ = comdat any

$_ZN3WTF9HashTableIjNS_12KeyValuePairIj13scoped_refptrIKN5blink11ShapeResultEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_29UnsignedWithZeroKeyHashTraitsIjEENS_10HashTraitsIS6_EEEESD_NS_18PartitionAllocatorEE8RehashToEPS7_jSJ_ = comdat any

$_ZN3WTF9HashTableIN5blink10ShapeCache14SmallStringKeyENS_12KeyValuePairIS3_13scoped_refptrIKNS1_11ShapeResultEEEENS_24KeyValuePairKeyExtractorENS2_18SmallStringKeyHashENS_18HashMapValueTraitsINS2_24SmallStringKeyHashTraitsENS_10HashTraitsIS8_EEEESD_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISG_SB_SH_EERS3_S8_EENS_18HashTableAddResultISI_S9_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIN5blink10ShapeCache14SmallStringKeyENS_12KeyValuePairIS3_13scoped_refptrIKNS1_11ShapeResultEEEENS_24KeyValuePairKeyExtractorENS2_18SmallStringKeyHashENS_18HashMapValueTraitsINS2_24SmallStringKeyHashTraitsENS_10HashTraitsIS8_EEEESD_NS_18PartitionAllocatorEE6ExpandEPS9_ = comdat any

$_ZN3WTF9HashTableIN5blink10ShapeCache14SmallStringKeyENS_12KeyValuePairIS3_13scoped_refptrIKNS1_11ShapeResultEEEENS_24KeyValuePairKeyExtractorENS2_18SmallStringKeyHashENS_18HashMapValueTraitsINS2_24SmallStringKeyHashTraitsENS_10HashTraitsIS8_EEEESD_NS_18PartitionAllocatorEE8RehashToEPS9_jSJ_ = comdat any

$_ZN3WTF9HashTableIN5blink10ShapeCache14SmallStringKeyENS_12KeyValuePairIS3_13scoped_refptrIKNS1_11ShapeResultEEEENS_24KeyValuePairKeyExtractorENS2_18SmallStringKeyHashENS_18HashMapValueTraitsINS2_24SmallStringKeyHashTraitsENS_10HashTraitsIS8_EEEESD_NS_18PartitionAllocatorEE16LookupForWritingERKS3_ = comdat any

@.str = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.1 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIj13scoped_refptrIKN5blink11ShapeResultEEEEEEPKcv = private unnamed_addr constant [121 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<unsigned int, scoped_refptr<const blink::ShapeResult> >]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIN5blink10ShapeCache14SmallStringKeyE13scoped_refptrIKNS2_11ShapeResultEEEEEEPKcv = private unnamed_addr constant [142 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<blink::ShapeCache::SmallStringKey, scoped_refptr<const blink::ShapeResult> >]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::ShapeResult"* @_ZN5blink24CachingWordShapeIterator23ShapeWordWithoutSpacingERKNS_7TextRunEPKNS_4FontE(%"class.blink::CachingWordShapeIterator"* nocapture readonly, %"class.blink::TextRun"* dereferenceable(40), %"class.blink::Font"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::HarfBuzzShaper", align 8
  %5 = alloca %"class.base::RepeatingCallback", align 8
  %6 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %1, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp ugt i32 %7, 15
  br i1 %8, label %21, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.blink::CachingWordShapeIterator", %"class.blink::CachingWordShapeIterator"* %0, i64 0, i32 0
  %11 = load %"class.blink::ShapeCache"*, %"class.blink::ShapeCache"** %10, align 8
  %12 = tail call %class.scoped_refptr* @_ZN5blink10ShapeCache11AddSlowCaseERKNS_7TextRunE13scoped_refptrIKNS_11ShapeResultEE(%"class.blink::ShapeCache"* %11, %"class.blink::TextRun"* dereferenceable(40) %1, %"class.blink::ShapeResult"* null) #8
  %13 = icmp eq %class.scoped_refptr* %12, null
  br i1 %13, label %21, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %12, i64 0, i32 0
  %16 = load %"class.blink::ShapeResult"*, %"class.blink::ShapeResult"** %15, align 8
  %17 = icmp eq %"class.blink::ShapeResult"* %16, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %14
  %19 = ptrtoint %"class.blink::ShapeResult"* %16 to i64
  %20 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %16, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %20) #8
  br label %113

21:                                               ; preds = %14, %9, %3
  %22 = phi i1 [ true, %14 ], [ false, %9 ], [ false, %3 ]
  %23 = phi %class.scoped_refptr* [ %12, %14 ], [ null, %9 ], [ null, %3 ]
  %24 = tail call %"class.WTF::StringImpl"* @_ZNK5blink7TextRun15NormalizedUTF16Ev(%"class.blink::TextRun"* %1) #8
  %25 = bitcast %"class.blink::HarfBuzzShaper"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %25) #8
  %26 = getelementptr inbounds %"class.blink::HarfBuzzShaper", %"class.blink::HarfBuzzShaper"* %4, i64 0, i32 0, i32 0, i32 0
  %27 = getelementptr inbounds %"class.blink::HarfBuzzShaper", %"class.blink::HarfBuzzShaper"* %4, i64 0, i32 1
  %28 = bitcast %"class.base::RepeatingCallback"* %27 to i64*
  store i64 -6148914691236517206, i64* %28, align 8
  %29 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %29, align 8
  store %"class.WTF::StringImpl"* %24, %"class.WTF::StringImpl"** %26, align 8
  %30 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %30, label %48, label %31

31:                                               ; preds = %21
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load atomic i32, i32* %32 monotonic, align 4
  %34 = and i32 %33, 2
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %48

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i33
  %40 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %39, i33 1) #8
  %41 = extractvalue { i33, i1 } %40, 1
  %42 = extractvalue { i33, i1 } %40, 0
  %43 = icmp slt i33 %42, 0
  %44 = or i1 %41, %43
  br i1 %44, label %45, label %46, !prof !2

45:                                               ; preds = %36
  tail call void @llvm.trap() #8
  unreachable

46:                                               ; preds = %36
  %47 = trunc i33 %42 to i32
  store i32 %47, i32* %37, align 4
  br label %48

48:                                               ; preds = %46, %31, %21
  %49 = getelementptr inbounds %"class.blink::HarfBuzzShaper", %"class.blink::HarfBuzzShaper"* %4, i64 0, i32 1, i32 0
  %50 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %5, i64 0, i32 0
  call void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"* %49, %"class.base::internal::CallbackBaseCopyable"* nonnull dereferenceable(8) %50) #8
  %51 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %5, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %51) #8
  %52 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %1, i64 0, i32 5
  %53 = load i16, i16* %52, align 8
  %54 = lshr i16 %53, 4
  %55 = trunc i16 %54 to i8
  %56 = and i8 %55, 1
  %57 = call %"class.blink::ShapeResult"* @_ZNK5blink14HarfBuzzShaper5ShapeEPKNS_4FontENS_13TextDirectionE(%"class.blink::HarfBuzzShaper"* nonnull %4, %"class.blink::Font"* %2, i8 zeroext %56) #8
  %58 = ptrtoint %"class.blink::ShapeResult"* %57 to i64
  %59 = icmp eq %"class.blink::ShapeResult"* %57, null
  br i1 %59, label %81, label %60

60:                                               ; preds = %48
  %61 = call { <2 x float>, <2 x float> } @_ZNK5blink11ShapeResult16ComputeInkBoundsEv(%"class.blink::ShapeResult"* nonnull %57) #8
  %62 = extractvalue { <2 x float>, <2 x float> } %61, 0
  %63 = extractvalue { <2 x float>, <2 x float> } %61, 1
  %64 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %57, i64 0, i32 2
  %65 = bitcast %"class.blink::FloatRect"* %64 to <2 x float>*
  store <2 x float> %62, <2 x float>* %65, align 8
  %66 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %57, i64 0, i32 2, i32 1
  %67 = bitcast %"class.blink::FloatSize"* %66 to <2 x float>*
  store <2 x float> %63, <2 x float>* %67, align 8
  br i1 %22, label %68, label %81

68:                                               ; preds = %60
  %69 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %57, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %69) #8
  %70 = bitcast %class.scoped_refptr* %23 to i64*
  %71 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %23, i64 0, i32 0
  %72 = load %"class.blink::ShapeResult"*, %"class.blink::ShapeResult"** %71, align 8
  store i64 %58, i64* %70, align 8
  %73 = icmp eq %"class.blink::ShapeResult"* %72, null
  br i1 %73, label %81, label %74

74:                                               ; preds = %68
  %75 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %72, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %75) #8
  %76 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %72, i64 0, i32 0, i32 0, i32 0, i32 0
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %74
  call void @_ZN5blink11ShapeResultD1Ev(%"class.blink::ShapeResult"* nonnull %72) #8
  %80 = bitcast %"class.blink::ShapeResult"* %72 to i8*
  call void @free(i8* %80) #8
  br label %81

81:                                               ; preds = %48, %60, %68, %74, %79
  %82 = phi i64 [ %58, %79 ], [ %58, %74 ], [ %58, %68 ], [ %58, %60 ], [ 0, %48 ]
  %83 = getelementptr inbounds %"class.blink::HarfBuzzShaper", %"class.blink::HarfBuzzShaper"* %4, i64 0, i32 1, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %83) #8
  %84 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, align 8
  %85 = icmp eq %"class.WTF::StringImpl"* %84, null
  br i1 %85, label %99, label %86

86:                                               ; preds = %81
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %88 = load atomic i32, i32* %87 monotonic, align 4
  %89 = and i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 0
  %92 = load i32, i32* %91, align 4
  br i1 %90, label %93, label %95

93:                                               ; preds = %86
  %94 = add i32 %92, -1
  store i32 %94, i32* %91, align 4
  br label %95

95:                                               ; preds = %93, %86
  %96 = phi i32 [ %94, %93 ], [ %92, %86 ]
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %95
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %84) #8
  br label %99

99:                                               ; preds = %81, %95, %98
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %25) #8
  br i1 %30, label %113, label %100

100:                                              ; preds = %99
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %106 = load i32, i32* %105, align 4
  br i1 %104, label %107, label %109

107:                                              ; preds = %100
  %108 = add i32 %106, -1
  store i32 %108, i32* %105, align 4
  br label %109

109:                                              ; preds = %107, %100
  %110 = phi i32 [ %108, %107 ], [ %106, %100 ]
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %24) #8
  br label %113

113:                                              ; preds = %112, %109, %99, %18
  %114 = phi i64 [ %19, %18 ], [ %82, %99 ], [ %82, %109 ], [ %82, %112 ]
  %115 = inttoptr i64 %114 to %"class.blink::ShapeResult"*
  ret %"class.blink::ShapeResult"* %115
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare %"class.WTF::StringImpl"* @_ZNK5blink7TextRun15NormalizedUTF16Ev(%"class.blink::TextRun"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #3

declare %"class.blink::ShapeResult"* @_ZNK5blink14HarfBuzzShaper5ShapeEPKNS_4FontENS_13TextDirectionE(%"class.blink::HarfBuzzShaper"*, %"class.blink::Font"*, i8 zeroext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare { <2 x float>, <2 x float> } @_ZNK5blink11ShapeResult16ComputeInkBoundsEv(%"class.blink::ShapeResult"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::ShapeResult"* @_ZN5blink24CachingWordShapeIterator9ShapeWordERKNS_7TextRunEPKNS_4FontE(%"class.blink::CachingWordShapeIterator"*, %"class.blink::TextRun"* dereferenceable(40), %"class.blink::Font"*) local_unnamed_addr #0 align 2 {
  %4 = alloca { <2 x float>, <2 x float> }, align 8
  %5 = bitcast { <2 x float>, <2 x float> }* %4 to %"class.blink::FloatRect"*
  %6 = tail call %"class.blink::ShapeResult"* @_ZN5blink24CachingWordShapeIterator23ShapeWordWithoutSpacingERKNS_7TextRunEPKNS_4FontE(%"class.blink::CachingWordShapeIterator"* %0, %"class.blink::TextRun"* dereferenceable(40) %1, %"class.blink::Font"* %2)
  %7 = ptrtoint %"class.blink::ShapeResult"* %6 to i64
  %8 = getelementptr inbounds %"class.blink::CachingWordShapeIterator", %"class.blink::CachingWordShapeIterator"* %0, i64 0, i32 3, i32 7
  %9 = load i8, i8* %8, align 8, !range !3
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %62, label %11, !prof !4

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.blink::CachingWordShapeIterator", %"class.blink::CachingWordShapeIterator"* %0, i64 0, i32 3
  %13 = tail call %"class.blink::ShapeResult"* @_ZNK5blink11ShapeResult18ApplySpacingToCopyERNS_18ShapeResultSpacingINS_7TextRunEEERKS2_(%"class.blink::ShapeResult"* %6, %"class.blink::ShapeResultSpacing"* dereferenceable(40) %12, %"class.blink::TextRun"* dereferenceable(40) %1) #8
  %14 = ptrtoint %"class.blink::ShapeResult"* %13 to i64
  %15 = bitcast { <2 x float>, <2 x float> }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #8
  %16 = tail call { <2 x float>, <2 x float> } @_ZNK5blink11ShapeResult16ComputeInkBoundsEv(%"class.blink::ShapeResult"* %13) #8
  %17 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 0
  %18 = extractvalue { <2 x float>, <2 x float> } %16, 0
  store <2 x float> %18, <2 x float>* %17, align 8
  %19 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 1
  %20 = extractvalue { <2 x float>, <2 x float> } %16, 1
  store <2 x float> %20, <2 x float>* %19, align 8
  %21 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %13, i64 0, i32 1
  %22 = load float, float* %21, align 4
  %23 = fcmp ult float %22, 0.000000e+00
  %24 = bitcast <2 x float> %20 to i64
  %25 = trunc i64 %24 to i32
  %26 = bitcast i32 %25 to float
  %27 = bitcast <2 x float> %18 to i64
  %28 = fcmp ult float %26, 0.000000e+00
  %29 = or i1 %23, %28
  br i1 %29, label %35, label %30

30:                                               ; preds = %11
  %31 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %13, i64 0, i32 2
  %32 = bitcast %"class.blink::FloatRect"* %31 to <2 x float>*
  store <2 x float> %18, <2 x float>* %32, align 8
  %33 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %13, i64 0, i32 2, i32 1
  %34 = bitcast %"class.blink::FloatSize"* %33 to <2 x float>*
  store <2 x float> %20, <2 x float>* %34, align 8
  br label %53

35:                                               ; preds = %11
  %36 = trunc i64 %27 to i32
  %37 = bitcast i32 %36 to float
  %38 = fcmp ogt float %22, %26
  %39 = select i1 %38, float %26, float %22
  %40 = fcmp olt float %39, %37
  br i1 %40, label %41, label %46

41:                                               ; preds = %35
  call void @_ZN5blink9FloatRect12ShiftXEdgeToEf(%"class.blink::FloatRect"* nonnull %5, float %39) #8
  %42 = bitcast { <2 x float>, <2 x float> }* %4 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = bitcast <2 x float>* %19 to i64*
  %45 = load i64, i64* %44, align 8
  br label %46

46:                                               ; preds = %35, %41
  %47 = phi i64 [ %45, %41 ], [ %24, %35 ]
  %48 = phi i64 [ %43, %41 ], [ %27, %35 ]
  %49 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %13, i64 0, i32 2
  %50 = bitcast %"class.blink::FloatRect"* %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %13, i64 0, i32 2, i32 1
  %52 = bitcast %"class.blink::FloatSize"* %51 to i64*
  store i64 %47, i64* %52, align 8
  br label %53

53:                                               ; preds = %46, %30
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #8
  %54 = icmp eq %"class.blink::ShapeResult"* %6, null
  br i1 %54, label %62, label %55

55:                                               ; preds = %53
  %56 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %6, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %56) #8
  %57 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %55
  call void @_ZN5blink11ShapeResultD1Ev(%"class.blink::ShapeResult"* nonnull %6) #8
  %61 = bitcast %"class.blink::ShapeResult"* %6 to i8*
  call void @free(i8* %61) #8
  br label %62

62:                                               ; preds = %3, %53, %55, %60
  %63 = phi i64 [ %14, %53 ], [ %14, %55 ], [ %14, %60 ], [ %7, %3 ]
  %64 = inttoptr i64 %63 to %"class.blink::ShapeResult"*
  ret %"class.blink::ShapeResult"* %64
}

declare %"class.blink::ShapeResult"* @_ZNK5blink11ShapeResult18ApplySpacingToCopyERNS_18ShapeResultSpacingINS_7TextRunEEERKS2_(%"class.blink::ShapeResult"*, %"class.blink::ShapeResultSpacing"* dereferenceable(40), %"class.blink::TextRun"* dereferenceable(40)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN5blink9FloatRect12ShiftXEdgeToEf(%"class.blink::FloatRect"*, float) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.scoped_refptr* @_ZN5blink10ShapeCache11AddSlowCaseERKNS_7TextRunE13scoped_refptrIKNS_11ShapeResultEE(%"class.blink::ShapeCache"*, %"class.blink::TextRun"* dereferenceable(40), %"class.blink::ShapeResult"*) local_unnamed_addr #4 comdat align 2 {
  %4 = alloca %class.scoped_refptr, align 8
  %5 = alloca i32, align 4
  %6 = alloca %"class.blink::ShapeCache::SmallStringKey", align 4
  %7 = alloca %"class.blink::ShapeCache::SmallStringKey", align 4
  %8 = bitcast %"class.blink::ShapeCache::SmallStringKey"* %7 to i8*
  %9 = alloca %"class.blink::ShapeCache::SmallStringKey", align 4
  %10 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %4, i64 0, i32 0
  store %"class.blink::ShapeResult"* %2, %"class.blink::ShapeResult"** %10, align 8
  %11 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %1, i64 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %14, label %41

14:                                               ; preds = %3
  %15 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #8
  store i32 -1431655766, i32* %5, align 4
  %16 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %1, i64 0, i32 5
  %17 = load i16, i16* %16, align 8
  %18 = and i16 %17, 4
  %19 = icmp eq i16 %18, 0
  br i1 %19, label %25, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %1, i64 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i16
  br label %29

25:                                               ; preds = %14
  %26 = bitcast %"class.blink::TextRun"* %1 to i16**
  %27 = load i16*, i16** %26, align 8
  %28 = load i16, i16* %27, align 2
  br label %29

29:                                               ; preds = %20, %25
  %30 = phi i16 [ %24, %20 ], [ %28, %25 ]
  %31 = zext i16 %30 to i32
  %32 = and i16 %17, 16
  %33 = zext i16 %32 to i32
  %34 = shl nuw i32 %33, 27
  %35 = or i32 %34, %31
  store i32 %35, i32* %5, align 4
  %36 = getelementptr inbounds %"class.blink::ShapeCache", %"class.blink::ShapeCache"* %0, i64 0, i32 0, i32 0
  %37 = call { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableIjNS_12KeyValuePairIj13scoped_refptrIKN5blink11ShapeResultEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_29UnsignedWithZeroKeyHashTraitsIjEENS_10HashTraitsIS6_EEEESD_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISG_SA_SH_EERjS6_EENS_18HashTableAddResultISI_S7_EEOT0_OT1_(%"class.WTF::HashTable"* %36, i32* nonnull dereferenceable(4) %5, %class.scoped_refptr* nonnull dereferenceable(8) %4) #8
  %38 = extractvalue { %"struct.WTF::KeyValuePair"*, i8 } %37, 0
  %39 = extractvalue { %"struct.WTF::KeyValuePair"*, i8 } %37, 1
  %40 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %38, i64 0, i32 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #8
  br label %181

41:                                               ; preds = %3
  %42 = bitcast %"class.blink::ShapeCache::SmallStringKey"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %42) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %42, i8 -86, i64 36, i1 false)
  %43 = getelementptr inbounds %"class.blink::ShapeCache::SmallStringKey", %"class.blink::ShapeCache::SmallStringKey"* %6, i64 0, i32 1
  store i16 16, i16* %43, align 4
  %44 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %1, i64 0, i32 5
  %45 = load i16, i16* %44, align 8
  %46 = and i16 %45, 4
  %47 = icmp eq i16 %46, 0
  br i1 %47, label %153, label %48

48:                                               ; preds = %41
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %8) #8
  %49 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %1, i64 0, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = zext i32 %12 to i64
  %52 = lshr i16 %45, 4
  %53 = getelementptr inbounds %"class.blink::ShapeCache::SmallStringKey", %"class.blink::ShapeCache::SmallStringKey"* %7, i64 0, i32 1
  %54 = trunc i32 %12 to i16
  %55 = and i16 %54, 32767
  %56 = shl i16 %52, 15
  %57 = or i16 %56, %55
  store i16 %57, i16* %53, align 4
  %58 = icmp eq i32 %12, 0
  br i1 %58, label %149, label %59

59:                                               ; preds = %48
  %60 = icmp ult i32 %12, 16
  br i1 %60, label %136, label %61

61:                                               ; preds = %59
  %62 = add nsw i64 %51, -1
  %63 = icmp ugt i64 %62, 65535
  %64 = trunc i64 %62 to i16
  %65 = icmp eq i16 %64, -1
  %66 = or i1 %65, %63
  br i1 %66, label %136, label %67

67:                                               ; preds = %61
  %68 = getelementptr inbounds %"class.blink::ShapeCache::SmallStringKey", %"class.blink::ShapeCache::SmallStringKey"* %7, i64 0, i32 2, i64 0
  %69 = bitcast i16* %68 to i8*
  %70 = shl nuw nsw i64 %51, 1
  %71 = add nuw nsw i64 %70, 6
  %72 = getelementptr i8, i8* %8, i64 %71
  %73 = getelementptr i8, i8* %50, i64 %51
  %74 = icmp ugt i8* %73, %69
  %75 = icmp ult i8* %50, %72
  %76 = and i1 %74, %75
  br i1 %76, label %136, label %77

77:                                               ; preds = %67
  %78 = and i64 %51, 4294967280
  %79 = trunc i64 %78 to i16
  %80 = add nsw i64 %78, -16
  %81 = lshr exact i64 %80, 4
  %82 = add nuw nsw i64 %81, 1
  %83 = and i64 %82, 1
  %84 = icmp eq i64 %80, 0
  br i1 %84, label %118, label %85

85:                                               ; preds = %77
  %86 = sub nuw nsw i64 %82, %83
  br label %87

87:                                               ; preds = %87, %85
  %88 = phi i64 [ 0, %85 ], [ %115, %87 ]
  %89 = phi i64 [ %86, %85 ], [ %116, %87 ]
  %90 = getelementptr inbounds i8, i8* %50, i64 %88
  %91 = bitcast i8* %90 to <8 x i8>*
  %92 = load <8 x i8>, <8 x i8>* %91, align 1, !alias.scope !5
  %93 = getelementptr inbounds i8, i8* %90, i64 8
  %94 = bitcast i8* %93 to <8 x i8>*
  %95 = load <8 x i8>, <8 x i8>* %94, align 1, !alias.scope !5
  %96 = zext <8 x i8> %92 to <8 x i16>
  %97 = zext <8 x i8> %95 to <8 x i16>
  %98 = getelementptr inbounds %"class.blink::ShapeCache::SmallStringKey", %"class.blink::ShapeCache::SmallStringKey"* %7, i64 0, i32 2, i64 %88
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %99, align 2, !alias.scope !8, !noalias !5
  %100 = getelementptr inbounds i16, i16* %98, i64 8
  %101 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %101, align 2, !alias.scope !8, !noalias !5
  %102 = or i64 %88, 16
  %103 = getelementptr inbounds i8, i8* %50, i64 %102
  %104 = bitcast i8* %103 to <8 x i8>*
  %105 = load <8 x i8>, <8 x i8>* %104, align 1, !alias.scope !5
  %106 = getelementptr inbounds i8, i8* %103, i64 8
  %107 = bitcast i8* %106 to <8 x i8>*
  %108 = load <8 x i8>, <8 x i8>* %107, align 1, !alias.scope !5
  %109 = zext <8 x i8> %105 to <8 x i16>
  %110 = zext <8 x i8> %108 to <8 x i16>
  %111 = getelementptr inbounds %"class.blink::ShapeCache::SmallStringKey", %"class.blink::ShapeCache::SmallStringKey"* %7, i64 0, i32 2, i64 %102
  %112 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %112, align 2, !alias.scope !8, !noalias !5
  %113 = getelementptr inbounds i16, i16* %111, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %114, align 2, !alias.scope !8, !noalias !5
  %115 = add i64 %88, 32
  %116 = add i64 %89, -2
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %87, !llvm.loop !10

118:                                              ; preds = %87, %77
  %119 = phi i64 [ 0, %77 ], [ %115, %87 ]
  %120 = icmp eq i64 %83, 0
  br i1 %120, label %134, label %121

121:                                              ; preds = %118
  %122 = getelementptr inbounds i8, i8* %50, i64 %119
  %123 = bitcast i8* %122 to <8 x i8>*
  %124 = load <8 x i8>, <8 x i8>* %123, align 1, !alias.scope !5
  %125 = getelementptr inbounds i8, i8* %122, i64 8
  %126 = bitcast i8* %125 to <8 x i8>*
  %127 = load <8 x i8>, <8 x i8>* %126, align 1, !alias.scope !5
  %128 = zext <8 x i8> %124 to <8 x i16>
  %129 = zext <8 x i8> %127 to <8 x i16>
  %130 = getelementptr inbounds %"class.blink::ShapeCache::SmallStringKey", %"class.blink::ShapeCache::SmallStringKey"* %7, i64 0, i32 2, i64 %119
  %131 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %131, align 2, !alias.scope !8, !noalias !5
  %132 = getelementptr inbounds i16, i16* %130, i64 8
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %129, <8 x i16>* %133, align 2, !alias.scope !8, !noalias !5
  br label %134

134:                                              ; preds = %118, %121
  %135 = icmp eq i64 %78, %51
  br i1 %135, label %149, label %136

136:                                              ; preds = %134, %67, %61, %59
  %137 = phi i64 [ 0, %67 ], [ 0, %61 ], [ 0, %59 ], [ %78, %134 ]
  %138 = phi i16 [ 0, %67 ], [ 0, %61 ], [ 0, %59 ], [ %79, %134 ]
  br label %139

139:                                              ; preds = %136, %139
  %140 = phi i64 [ %147, %139 ], [ %137, %136 ]
  %141 = phi i16 [ %146, %139 ], [ %138, %136 ]
  %142 = getelementptr inbounds i8, i8* %50, i64 %140
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i16
  %145 = getelementptr inbounds %"class.blink::ShapeCache::SmallStringKey", %"class.blink::ShapeCache::SmallStringKey"* %7, i64 0, i32 2, i64 %140
  store i16 %144, i16* %145, align 2
  %146 = add i16 %141, 1
  %147 = zext i16 %146 to i64
  %148 = icmp ult i64 %147, %51
  br i1 %148, label %139, label %149, !llvm.loop !12

149:                                              ; preds = %139, %134, %48
  %150 = getelementptr inbounds %"class.blink::ShapeCache::SmallStringKey", %"class.blink::ShapeCache::SmallStringKey"* %7, i64 0, i32 2, i64 0
  %151 = bitcast i16* %150 to i8*
  %152 = shl nuw nsw i64 %51, 1
  br label %167

153:                                              ; preds = %41
  %154 = bitcast %"class.blink::ShapeCache::SmallStringKey"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 36, i8* nonnull %154) #8
  %155 = getelementptr inbounds %"class.blink::TextRun", %"class.blink::TextRun"* %1, i64 0, i32 0, i32 0
  %156 = load i8*, i8** %155, align 8
  %157 = zext i32 %12 to i64
  %158 = lshr i16 %45, 4
  %159 = getelementptr inbounds %"class.blink::ShapeCache::SmallStringKey", %"class.blink::ShapeCache::SmallStringKey"* %9, i64 0, i32 1
  %160 = trunc i32 %12 to i16
  %161 = and i16 %160, 32767
  %162 = shl i16 %158, 15
  %163 = or i16 %162, %161
  store i16 %163, i16* %159, align 4
  %164 = getelementptr inbounds %"class.blink::ShapeCache::SmallStringKey", %"class.blink::ShapeCache::SmallStringKey"* %9, i64 0, i32 2, i64 0
  %165 = bitcast i16* %164 to i8*
  %166 = shl nuw nsw i64 %157, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %165, i8* align 2 %156, i64 %166, i1 false) #8
  br label %167

167:                                              ; preds = %153, %149
  %168 = phi i64 [ %166, %153 ], [ %152, %149 ]
  %169 = phi i8* [ %165, %153 ], [ %151, %149 ]
  %170 = phi %"class.blink::ShapeCache::SmallStringKey"* [ %9, %153 ], [ %7, %149 ]
  %171 = phi i8* [ %154, %153 ], [ %8, %149 ]
  %172 = and i64 %168, 65534
  %173 = call i64 @_ZN4base8FastHashENS_4spanIKhLm18446744073709551615EEE(i64 %172, i8* %169) #8
  %174 = trunc i64 %173 to i32
  %175 = getelementptr inbounds %"class.blink::ShapeCache::SmallStringKey", %"class.blink::ShapeCache::SmallStringKey"* %170, i64 0, i32 0
  store i32 %174, i32* %175, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %42, i8* nonnull align 4 %171, i64 36, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %171) #8
  %176 = getelementptr inbounds %"class.blink::ShapeCache", %"class.blink::ShapeCache"* %0, i64 0, i32 1, i32 0
  %177 = call { %"struct.WTF::KeyValuePair.37"*, i8 } @_ZN3WTF9HashTableIN5blink10ShapeCache14SmallStringKeyENS_12KeyValuePairIS3_13scoped_refptrIKNS1_11ShapeResultEEEENS_24KeyValuePairKeyExtractorENS2_18SmallStringKeyHashENS_18HashMapValueTraitsINS2_24SmallStringKeyHashTraitsENS_10HashTraitsIS8_EEEESD_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISG_SB_SH_EERS3_S8_EENS_18HashTableAddResultISI_S9_EEOT0_OT1_(%"class.WTF::HashTable.34"* %176, %"class.blink::ShapeCache::SmallStringKey"* nonnull dereferenceable(36) %6, %class.scoped_refptr* nonnull dereferenceable(8) %4) #8
  %178 = extractvalue { %"struct.WTF::KeyValuePair.37"*, i8 } %177, 0
  %179 = extractvalue { %"struct.WTF::KeyValuePair.37"*, i8 } %177, 1
  %180 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %178, i64 0, i32 1
  call void @llvm.lifetime.end.p0i8(i64 36, i8* nonnull %42) #8
  br label %181

181:                                              ; preds = %167, %29
  %182 = phi %class.scoped_refptr* [ %40, %29 ], [ %180, %167 ]
  %183 = phi i8 [ %39, %29 ], [ %179, %167 ]
  %184 = and i8 %183, 1
  %185 = icmp eq i8 %184, 0
  br i1 %185, label %259, label %186

186:                                              ; preds = %181
  %187 = getelementptr inbounds %"class.blink::ShapeCache", %"class.blink::ShapeCache"* %0, i64 0, i32 0, i32 0, i32 2
  %188 = load i32, i32* %187, align 4
  %189 = getelementptr inbounds %"class.blink::ShapeCache", %"class.blink::ShapeCache"* %0, i64 0, i32 1, i32 0, i32 2
  %190 = load i32, i32* %189, align 4
  %191 = add i32 %190, %188
  %192 = icmp ult i32 %191, 10000
  br i1 %192, label %259, label %193

193:                                              ; preds = %186
  %194 = getelementptr inbounds %"class.blink::ShapeCache", %"class.blink::ShapeCache"* %0, i64 0, i32 0, i32 0, i32 0
  %195 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %194, align 8
  %196 = icmp eq %"struct.WTF::KeyValuePair"* %195, null
  br i1 %196, label %225, label %197

197:                                              ; preds = %193
  %198 = getelementptr inbounds %"class.blink::ShapeCache", %"class.blink::ShapeCache"* %0, i64 0, i32 0, i32 0, i32 1
  %199 = load i32, i32* %198, align 8
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %222, label %201

201:                                              ; preds = %197
  %202 = zext i32 %199 to i64
  br label %203

203:                                              ; preds = %219, %201
  %204 = phi i64 [ 0, %201 ], [ %220, %219 ]
  %205 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %195, i64 %204, i32 0
  %206 = load i32, i32* %205, align 4
  %207 = icmp eq i32 %206, -2
  br i1 %207, label %219, label %208

208:                                              ; preds = %203
  %209 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %195, i64 %204, i32 1, i32 0
  %210 = load %"class.blink::ShapeResult"*, %"class.blink::ShapeResult"** %209, align 8
  %211 = icmp eq %"class.blink::ShapeResult"* %210, null
  br i1 %211, label %219, label %212

212:                                              ; preds = %208
  %213 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %210, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %213) #8
  %214 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %210, i64 0, i32 0, i32 0, i32 0, i32 0
  %215 = load i32, i32* %214, align 4
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %217, label %219

217:                                              ; preds = %212
  call void @_ZN5blink11ShapeResultD1Ev(%"class.blink::ShapeResult"* nonnull %210) #8
  %218 = bitcast %"class.blink::ShapeResult"* %210 to i8*
  call void @free(i8* %218) #8
  br label %219

219:                                              ; preds = %217, %212, %208, %203
  %220 = add nuw nsw i64 %204, 1
  %221 = icmp eq i64 %220, %202
  br i1 %221, label %222, label %203

222:                                              ; preds = %219, %197
  %223 = bitcast %"struct.WTF::KeyValuePair"* %195 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %223) #8
  %224 = bitcast %"class.blink::ShapeCache"* %0 to i64*
  store atomic i64 0, i64* %224 monotonic, align 8
  store i32 0, i32* %198, align 8
  store i32 0, i32* %187, align 4
  br label %225

225:                                              ; preds = %193, %222
  %226 = getelementptr inbounds %"class.blink::ShapeCache", %"class.blink::ShapeCache"* %0, i64 0, i32 1
  %227 = getelementptr inbounds %"class.WTF::HashMap.33", %"class.WTF::HashMap.33"* %226, i64 0, i32 0, i32 0
  %228 = load %"struct.WTF::KeyValuePair.37"*, %"struct.WTF::KeyValuePair.37"** %227, align 8
  %229 = icmp eq %"struct.WTF::KeyValuePair.37"* %228, null
  br i1 %229, label %259, label %230

230:                                              ; preds = %225
  %231 = getelementptr inbounds %"class.blink::ShapeCache", %"class.blink::ShapeCache"* %0, i64 0, i32 1, i32 0, i32 1
  %232 = load i32, i32* %231, align 8
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %256, label %234

234:                                              ; preds = %230
  %235 = zext i32 %232 to i64
  br label %236

236:                                              ; preds = %253, %234
  %237 = phi i64 [ 0, %234 ], [ %254, %253 ]
  %238 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %228, i64 %237, i32 0, i32 1
  %239 = load i16, i16* %238, align 4
  %240 = and i16 %239, 32767
  %241 = icmp eq i16 %240, 17
  br i1 %241, label %253, label %242

242:                                              ; preds = %236
  %243 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %228, i64 %237, i32 1, i32 0
  %244 = load %"class.blink::ShapeResult"*, %"class.blink::ShapeResult"** %243, align 8
  %245 = icmp eq %"class.blink::ShapeResult"* %244, null
  br i1 %245, label %253, label %246

246:                                              ; preds = %242
  %247 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %244, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %247) #8
  %248 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %244, i64 0, i32 0, i32 0, i32 0, i32 0
  %249 = load i32, i32* %248, align 4
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %251, label %253

251:                                              ; preds = %246
  call void @_ZN5blink11ShapeResultD1Ev(%"class.blink::ShapeResult"* nonnull %244) #8
  %252 = bitcast %"class.blink::ShapeResult"* %244 to i8*
  call void @free(i8* %252) #8
  br label %253

253:                                              ; preds = %251, %246, %242, %236
  %254 = add nuw nsw i64 %237, 1
  %255 = icmp eq i64 %254, %235
  br i1 %255, label %256, label %236

256:                                              ; preds = %253, %230
  %257 = bitcast %"struct.WTF::KeyValuePair.37"* %228 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %257) #8
  %258 = bitcast %"class.WTF::HashMap.33"* %226 to i64*
  store atomic i64 0, i64* %258 monotonic, align 8
  store i32 0, i32* %231, align 8
  store i32 0, i32* %189, align 4
  br label %259

259:                                              ; preds = %256, %225, %186, %181
  %260 = phi %class.scoped_refptr* [ %182, %181 ], [ %182, %186 ], [ null, %225 ], [ null, %256 ]
  %261 = load %"class.blink::ShapeResult"*, %"class.blink::ShapeResult"** %10, align 8
  %262 = icmp eq %"class.blink::ShapeResult"* %261, null
  br i1 %262, label %270, label %263

263:                                              ; preds = %259
  %264 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %261, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %264) #8
  %265 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %261, i64 0, i32 0, i32 0, i32 0, i32 0
  %266 = load i32, i32* %265, align 4
  %267 = icmp eq i32 %266, 0
  br i1 %267, label %268, label %270

268:                                              ; preds = %263
  call void @_ZN5blink11ShapeResultD1Ev(%"class.blink::ShapeResult"* nonnull %261) #8
  %269 = bitcast %"class.blink::ShapeResult"* %261 to i8*
  call void @free(i8* %269) #8
  br label %270

270:                                              ; preds = %259, %263, %268
  ret %class.scoped_refptr* %260
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableIjNS_12KeyValuePairIj13scoped_refptrIKN5blink11ShapeResultEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_29UnsignedWithZeroKeyHashTraitsIjEENS_10HashTraitsIS6_EEEESD_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISG_SA_SH_EERjS6_EENS_18HashTableAddResultISI_S7_EEOT0_OT1_(%"class.WTF::HashTable"*, i32* dereferenceable(4), %class.scoped_refptr* dereferenceable(8)) local_unnamed_addr #4 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIj13scoped_refptrIKN5blink11ShapeResultEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_29UnsignedWithZeroKeyHashTraitsIjEENS_10HashTraitsIS6_EEEESD_NS_18PartitionAllocatorEE6ExpandEPS7_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* null)
  %9 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = load i32, i32* %1, align 4
  %17 = shl i32 %16, 15
  %18 = xor i32 %17, -1
  %19 = add i32 %16, %18
  %20 = lshr i32 %19, 10
  %21 = xor i32 %20, %19
  %22 = mul i32 %21, 9
  %23 = lshr i32 %22, 6
  %24 = xor i32 %23, %22
  %25 = shl i32 %24, 11
  %26 = xor i32 %25, -1
  %27 = add i32 %24, %26
  %28 = lshr i32 %27, 16
  %29 = xor i32 %28, %27
  %30 = and i32 %29, %14
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %31
  %33 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %32, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, -1
  br i1 %35, label %80, label %36

36:                                               ; preds = %10
  %37 = xor i32 %29, -1
  %38 = lshr i32 %27, 23
  %39 = add i32 %38, %37
  %40 = shl i32 %39, 12
  %41 = xor i32 %40, %39
  %42 = lshr i32 %41, 7
  %43 = xor i32 %42, %41
  %44 = shl i32 %43, 2
  %45 = xor i32 %44, %43
  %46 = lshr i32 %45, 20
  %47 = xor i32 %46, %45
  %48 = or i32 %47, 1
  %49 = zext i32 %48 to i64
  br label %50

50:                                               ; preds = %36, %57
  %51 = phi i32 [ %34, %36 ], [ %66, %57 ]
  %52 = phi %"struct.WTF::KeyValuePair"* [ %32, %36 ], [ %64, %57 ]
  %53 = phi %"struct.WTF::KeyValuePair"* [ null, %36 ], [ %59, %57 ]
  %54 = phi i64 [ %31, %36 ], [ %63, %57 ]
  %55 = phi i64 [ 0, %36 ], [ %61, %57 ]
  %56 = icmp eq i32 %51, %16
  br i1 %56, label %111, label %57

57:                                               ; preds = %50
  %58 = icmp eq i32 %51, -2
  %59 = select i1 %58, %"struct.WTF::KeyValuePair"* %52, %"struct.WTF::KeyValuePair"* %53
  %60 = icmp eq i64 %55, 0
  %61 = select i1 %60, i64 %49, i64 %55
  %62 = add i64 %61, %54
  %63 = and i64 %62, %15
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %63
  %65 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %64, i64 0, i32 0
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, -1
  br i1 %67, label %68, label %50

68:                                               ; preds = %57
  %69 = icmp eq %"struct.WTF::KeyValuePair"* %59, null
  br i1 %69, label %80, label %70

70:                                               ; preds = %68
  %71 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %59, i64 0, i32 0
  store i32 -1, i32* %71, align 8
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %59, i64 0, i32 1, i32 0
  store %"class.blink::ShapeResult"* null, %"class.blink::ShapeResult"** %72, align 8
  %73 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %74 = load i32, i32* %73, align 8
  %75 = add i32 %74, 2147483647
  %76 = and i32 %75, 2147483647
  %77 = and i32 %74, -2147483648
  %78 = or i32 %76, %77
  store i32 %78, i32* %73, align 8
  %79 = load i32, i32* %1, align 4
  br label %80

80:                                               ; preds = %10, %68, %70
  %81 = phi i32 [ %79, %70 ], [ %16, %68 ], [ %16, %10 ]
  %82 = phi %"struct.WTF::KeyValuePair"* [ %59, %70 ], [ %64, %68 ], [ %32, %10 ]
  %83 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %82, i64 0, i32 0
  store i32 %81, i32* %83, align 8
  %84 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %2, i64 0, i32 0
  %85 = bitcast %class.scoped_refptr* %2 to i64*
  %86 = load i64, i64* %85, align 8
  store %"class.blink::ShapeResult"* null, %"class.blink::ShapeResult"** %84, align 8
  %87 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %82, i64 0, i32 1
  %88 = bitcast %class.scoped_refptr* %87 to i64*
  %89 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %87, i64 0, i32 0
  %90 = load %"class.blink::ShapeResult"*, %"class.blink::ShapeResult"** %89, align 8
  store i64 %86, i64* %88, align 8
  %91 = icmp eq %"class.blink::ShapeResult"* %90, null
  br i1 %91, label %99, label %92

92:                                               ; preds = %80
  %93 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %90, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %93) #8
  %94 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %90, i64 0, i32 0, i32 0, i32 0, i32 0
  %95 = load i32, i32* %94, align 4
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %99

97:                                               ; preds = %92
  tail call void @_ZN5blink11ShapeResultD1Ev(%"class.blink::ShapeResult"* nonnull %90) #8
  %98 = bitcast %"class.blink::ShapeResult"* %90 to i8*
  tail call void @free(i8* %98) #8
  br label %99

99:                                               ; preds = %80, %92, %97
  %100 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %101 = load i32, i32* %100, align 4
  %102 = add i32 %101, 1
  store i32 %102, i32* %100, align 4
  %103 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %104 = load i32, i32* %103, align 8
  %105 = add i32 %104, %102
  %106 = shl i32 %105, 1
  %107 = load i32, i32* %12, align 8
  %108 = icmp ult i32 %106, %107
  br i1 %108, label %111, label %109

109:                                              ; preds = %99
  %110 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIj13scoped_refptrIKN5blink11ShapeResultEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_29UnsignedWithZeroKeyHashTraitsIjEENS_10HashTraitsIS6_EEEESD_NS_18PartitionAllocatorEE6ExpandEPS7_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %82)
  br label %111

111:                                              ; preds = %50, %99, %109
  %112 = phi i8 [ 1, %99 ], [ 1, %109 ], [ 0, %50 ]
  %113 = phi %"struct.WTF::KeyValuePair"* [ %82, %99 ], [ %110, %109 ], [ %52, %50 ]
  %114 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } undef, %"struct.WTF::KeyValuePair"* %113, 0
  %115 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } %114, i8 %112, 1
  ret { %"struct.WTF::KeyValuePair"*, i8 } %115
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIj13scoped_refptrIKN5blink11ShapeResultEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_29UnsignedWithZeroKeyHashTraitsIjEENS_10HashTraitsIS6_EEEESD_NS_18PartitionAllocatorEE6ExpandEPS7_(%"class.WTF::HashTable"*, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #4 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #8
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #8
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %22, i8* %23) #8
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #8
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #8
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #8
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 4
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([121 x i8], [121 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIj13scoped_refptrIKN5blink11ShapeResultEEEEEEPKcv, i64 0, i64 0)) #8
  %36 = bitcast i8* %35 to %"struct.WTF::KeyValuePair"*
  %37 = icmp eq i32 %32, 0
  br i1 %37, label %60, label %38

38:                                               ; preds = %31
  %39 = and i64 %33, 1
  %40 = icmp eq i32 %32, 1
  br i1 %40, label %54, label %41

41:                                               ; preds = %38
  %42 = sub nsw i64 %33, %39
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i64 [ 0, %41 ], [ %51, %43 ]
  %45 = phi i64 [ %42, %41 ], [ %52, %43 ]
  %46 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %44, i32 0
  store i32 -1, i32* %46, align 8
  %47 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %44, i32 1, i32 0
  store %"class.blink::ShapeResult"* null, %"class.blink::ShapeResult"** %47, align 8
  %48 = or i64 %44, 1
  %49 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %48, i32 0
  store i32 -1, i32* %49, align 8
  %50 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %48, i32 1, i32 0
  store %"class.blink::ShapeResult"* null, %"class.blink::ShapeResult"** %50, align 8
  %51 = add nuw nsw i64 %44, 2
  %52 = add i64 %45, -2
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %43

54:                                               ; preds = %43, %38
  %55 = phi i64 [ 0, %38 ], [ %51, %43 ]
  %56 = icmp eq i64 %39, 0
  br i1 %56, label %60, label %57

57:                                               ; preds = %54
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %55, i32 0
  store i32 -1, i32* %58, align 8
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 %55, i32 1, i32 0
  store %"class.blink::ShapeResult"* null, %"class.blink::ShapeResult"** %59, align 8
  br label %60

60:                                               ; preds = %57, %54, %31
  %61 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIj13scoped_refptrIKN5blink11ShapeResultEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_29UnsignedWithZeroKeyHashTraitsIjEENS_10HashTraitsIS6_EEEESD_NS_18PartitionAllocatorEE8RehashToEPS7_jSJ_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %36, i32 %32, %"struct.WTF::KeyValuePair"* %1) #8
  ret %"struct.WTF::KeyValuePair"* %61
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIjNS_12KeyValuePairIj13scoped_refptrIKN5blink11ShapeResultEEEENS_24KeyValuePairKeyExtractorENS_7IntHashIjEENS_18HashMapValueTraitsINS_29UnsignedWithZeroKeyHashTraitsIjEENS_10HashTraitsIS6_EEEESD_NS_18PartitionAllocatorEE8RehashToEPS7_jSJ_(%"class.WTF::HashTable"*, %"struct.WTF::KeyValuePair"*, i32, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #4 comdat align 2 {
  %5 = ptrtoint %"struct.WTF::KeyValuePair"* %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  br i1 %8, label %10, label %13

10:                                               ; preds = %4
  %11 = bitcast %"class.WTF::HashTable"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %4
  %14 = add i32 %2, -1
  %15 = zext i32 %14 to i64
  %16 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %9, align 8
  %17 = ptrtoint %"struct.WTF::KeyValuePair"* %16 to i64
  br label %56

18:                                               ; preds = %157
  %19 = bitcast %"class.WTF::HashTable"* %0 to i64*
  br label %20

20:                                               ; preds = %10, %18
  %21 = phi i64* [ %11, %10 ], [ %19, %18 ]
  %22 = phi i64 [ %12, %10 ], [ %158, %18 ]
  %23 = phi %"struct.WTF::KeyValuePair"* [ null, %10 ], [ %161, %18 ]
  %24 = phi i32 [ 0, %10 ], [ %159, %18 ]
  store atomic i64 %5, i64* %21 monotonic, align 8
  store i32 %2, i32* %6, align 8
  %25 = inttoptr i64 %22 to %"struct.WTF::KeyValuePair"*
  %26 = icmp eq i64 %22, 0
  br i1 %26, label %52, label %27

27:                                               ; preds = %20
  %28 = icmp eq i32 %24, 0
  br i1 %28, label %50, label %29

29:                                               ; preds = %27
  %30 = zext i32 %24 to i64
  br label %31

31:                                               ; preds = %47, %29
  %32 = phi i64 [ 0, %29 ], [ %48, %47 ]
  %33 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %25, i64 %32, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, -2
  br i1 %35, label %47, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %25, i64 %32, i32 1, i32 0
  %38 = load %"class.blink::ShapeResult"*, %"class.blink::ShapeResult"** %37, align 8
  %39 = icmp eq %"class.blink::ShapeResult"* %38, null
  br i1 %39, label %47, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %38, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %41) #8
  %42 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %38, i64 0, i32 0, i32 0, i32 0, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %40
  tail call void @_ZN5blink11ShapeResultD1Ev(%"class.blink::ShapeResult"* nonnull %38) #8
  %46 = bitcast %"class.blink::ShapeResult"* %38 to i8*
  tail call void @free(i8* %46) #8
  br label %47

47:                                               ; preds = %45, %40, %36, %31
  %48 = add nuw nsw i64 %32, 1
  %49 = icmp eq i64 %48, %30
  br i1 %49, label %50, label %31

50:                                               ; preds = %47, %27
  %51 = inttoptr i64 %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %51) #8
  br label %52

52:                                               ; preds = %20, %50
  %53 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %54 = load i32, i32* %53, align 8
  %55 = and i32 %54, -2147483648
  store i32 %55, i32* %53, align 8
  ret %"struct.WTF::KeyValuePair"* %23

56:                                               ; preds = %13, %157
  %57 = phi i64 [ %17, %13 ], [ %158, %157 ]
  %58 = phi i32 [ %7, %13 ], [ %159, %157 ]
  %59 = phi %"struct.WTF::KeyValuePair"* [ %16, %13 ], [ %160, %157 ]
  %60 = phi %"struct.WTF::KeyValuePair"* [ null, %13 ], [ %161, %157 ]
  %61 = phi i32 [ 0, %13 ], [ %162, %157 ]
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %59, i64 %62, i32 0
  %64 = load i32, i32* %63, align 4
  %65 = icmp ugt i32 %64, -3
  br i1 %65, label %157, label %66

66:                                               ; preds = %56
  %67 = shl i32 %64, 15
  %68 = xor i32 %67, -1
  %69 = add i32 %64, %68
  %70 = lshr i32 %69, 10
  %71 = xor i32 %70, %69
  %72 = mul i32 %71, 9
  %73 = lshr i32 %72, 6
  %74 = xor i32 %73, %72
  %75 = shl i32 %74, 11
  %76 = xor i32 %75, -1
  %77 = add i32 %74, %76
  %78 = lshr i32 %77, 16
  %79 = xor i32 %78, %77
  %80 = and i32 %79, %14
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 %81
  %83 = ptrtoint %"struct.WTF::KeyValuePair"* %82 to i64
  %84 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %82, i64 0, i32 0
  %85 = load i32, i32* %84, align 4
  %86 = icmp eq i32 %85, -1
  br i1 %86, label %104, label %87

87:                                               ; preds = %66
  %88 = xor i32 %79, -1
  %89 = lshr i32 %77, 23
  %90 = add i32 %89, %88
  %91 = shl i32 %90, 12
  %92 = xor i32 %91, %90
  %93 = lshr i32 %92, 7
  %94 = xor i32 %93, %92
  %95 = shl i32 %94, 2
  %96 = xor i32 %95, %94
  %97 = lshr i32 %96, 20
  %98 = xor i32 %97, %96
  %99 = or i32 %98, 1
  %100 = zext i32 %99 to i64
  br label %110

101:                                              ; preds = %117
  %102 = ptrtoint %"struct.WTF::KeyValuePair"* %124 to i64
  %103 = inttoptr i64 %119 to %"struct.WTF::KeyValuePair"*
  br label %104

104:                                              ; preds = %101, %66
  %105 = phi i64 [ %102, %101 ], [ %83, %66 ]
  %106 = phi %"struct.WTF::KeyValuePair"* [ %103, %101 ], [ null, %66 ]
  %107 = icmp eq %"struct.WTF::KeyValuePair"* %106, null
  %108 = ptrtoint %"struct.WTF::KeyValuePair"* %106 to i64
  %109 = select i1 %107, i64 %105, i64 %108
  br label %129

110:                                              ; preds = %117, %87
  %111 = phi i64 [ 0, %87 ], [ %119, %117 ]
  %112 = phi i32 [ %85, %87 ], [ %127, %117 ]
  %113 = phi i64 [ %83, %87 ], [ %125, %117 ]
  %114 = phi i64 [ %81, %87 ], [ %123, %117 ]
  %115 = phi i64 [ 0, %87 ], [ %121, %117 ]
  %116 = icmp eq i32 %112, %64
  br i1 %116, label %129, label %117

117:                                              ; preds = %110
  %118 = icmp eq i32 %112, -2
  %119 = select i1 %118, i64 %113, i64 %111
  %120 = icmp eq i64 %115, 0
  %121 = select i1 %120, i64 %100, i64 %115
  %122 = add i64 %121, %114
  %123 = and i64 %122, %15
  %124 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 %123
  %125 = ptrtoint %"struct.WTF::KeyValuePair"* %124 to i64
  %126 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %124, i64 0, i32 0
  %127 = load i32, i32* %126, align 4
  %128 = icmp eq i32 %127, -1
  br i1 %128, label %101, label %110

129:                                              ; preds = %110, %104
  %130 = phi i64 [ %109, %104 ], [ %113, %110 ]
  %131 = inttoptr i64 %130 to %"struct.WTF::KeyValuePair"*
  %132 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %131, i64 0, i32 1, i32 0
  %133 = load %"class.blink::ShapeResult"*, %"class.blink::ShapeResult"** %132, align 8
  %134 = icmp eq %"class.blink::ShapeResult"* %133, null
  br i1 %134, label %142, label %135

135:                                              ; preds = %129
  %136 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %133, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %136) #8
  %137 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %133, i64 0, i32 0, i32 0, i32 0, i32 0
  %138 = load i32, i32* %137, align 4
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %142

140:                                              ; preds = %135
  tail call void @_ZN5blink11ShapeResultD1Ev(%"class.blink::ShapeResult"* nonnull %133) #8
  %141 = bitcast %"class.blink::ShapeResult"* %133 to i8*
  tail call void @free(i8* %141) #8
  br label %142

142:                                              ; preds = %129, %135, %140
  %143 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %131, i64 0, i32 0
  %144 = load i32, i32* %63, align 8
  store i32 %144, i32* %143, align 8
  %145 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %131, i64 0, i32 1
  %146 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %59, i64 %62, i32 1
  %147 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %146, i64 0, i32 0
  %148 = bitcast %class.scoped_refptr* %146 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = bitcast %class.scoped_refptr* %145 to i64*
  store i64 %149, i64* %150, align 8
  store %"class.blink::ShapeResult"* null, %"class.blink::ShapeResult"** %147, align 8
  %151 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %9, align 8
  %152 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %151, i64 %62
  %153 = icmp eq %"struct.WTF::KeyValuePair"* %152, %3
  %154 = select i1 %153, %"struct.WTF::KeyValuePair"* %131, %"struct.WTF::KeyValuePair"* %60
  %155 = load i32, i32* %6, align 8
  %156 = ptrtoint %"struct.WTF::KeyValuePair"* %151 to i64
  br label %157

157:                                              ; preds = %56, %142
  %158 = phi i64 [ %57, %56 ], [ %156, %142 ]
  %159 = phi i32 [ %58, %56 ], [ %155, %142 ]
  %160 = phi %"struct.WTF::KeyValuePair"* [ %59, %56 ], [ %151, %142 ]
  %161 = phi %"struct.WTF::KeyValuePair"* [ %60, %56 ], [ %154, %142 ]
  %162 = add i32 %61, 1
  %163 = icmp eq i32 %162, %159
  br i1 %163, label %18, label %56
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

declare i64 @_ZN4base8FastHashENS_4spanIKhLm18446744073709551615EEE(i64, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.37"*, i8 } @_ZN3WTF9HashTableIN5blink10ShapeCache14SmallStringKeyENS_12KeyValuePairIS3_13scoped_refptrIKNS1_11ShapeResultEEEENS_24KeyValuePairKeyExtractorENS2_18SmallStringKeyHashENS_18HashMapValueTraitsINS2_24SmallStringKeyHashTraitsENS_10HashTraitsIS8_EEEESD_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISG_SB_SH_EERS3_S8_EENS_18HashTableAddResultISI_S9_EEOT0_OT1_(%"class.WTF::HashTable.34"*, %"class.blink::ShapeCache::SmallStringKey"* dereferenceable(36), %class.scoped_refptr* dereferenceable(8)) local_unnamed_addr #4 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.34", %"class.WTF::HashTable.34"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair.37"*, %"struct.WTF::KeyValuePair.37"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair.37"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair.37"* @_ZN3WTF9HashTableIN5blink10ShapeCache14SmallStringKeyENS_12KeyValuePairIS3_13scoped_refptrIKNS1_11ShapeResultEEEENS_24KeyValuePairKeyExtractorENS2_18SmallStringKeyHashENS_18HashMapValueTraitsINS2_24SmallStringKeyHashTraitsENS_10HashTraitsIS8_EEEESD_NS_18PartitionAllocatorEE6ExpandEPS9_(%"class.WTF::HashTable.34"* %0, %"struct.WTF::KeyValuePair.37"* null)
  %9 = load %"struct.WTF::KeyValuePair.37"*, %"struct.WTF::KeyValuePair.37"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair.37"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.34", %"class.WTF::HashTable.34"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.blink::ShapeCache::SmallStringKey", %"class.blink::ShapeCache::SmallStringKey"* %1, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = and i32 %17, %14
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %11, i64 %19
  %21 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %11, i64 %19, i32 0, i32 1
  %22 = load i16, i16* %21, align 4
  %23 = and i16 %22, 32767
  %24 = icmp eq i16 %23, 16
  br i1 %24, label %89, label %25

25:                                               ; preds = %10
  %26 = getelementptr inbounds %"class.blink::ShapeCache::SmallStringKey", %"class.blink::ShapeCache::SmallStringKey"* %1, i64 0, i32 1
  %27 = load i16, i16* %26, align 4
  %28 = lshr i16 %27, 15
  %29 = trunc i16 %28 to i8
  %30 = getelementptr inbounds %"class.blink::ShapeCache::SmallStringKey", %"class.blink::ShapeCache::SmallStringKey"* %1, i64 0, i32 2, i64 0
  %31 = bitcast i16* %30 to i8*
  %32 = xor i32 %17, -1
  %33 = lshr i32 %17, 23
  %34 = add i32 %33, %32
  %35 = shl i32 %34, 12
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 7
  %38 = xor i32 %37, %36
  %39 = shl i32 %38, 2
  %40 = xor i32 %39, %38
  %41 = lshr i32 %40, 20
  %42 = xor i32 %41, %40
  %43 = or i32 %42, 1
  %44 = zext i32 %43 to i64
  br label %45

45:                                               ; preds = %25, %66
  %46 = phi i16 [ %22, %25 ], [ %75, %66 ]
  %47 = phi i16 [ %23, %25 ], [ %76, %66 ]
  %48 = phi %"struct.WTF::KeyValuePair.37"* [ %20, %25 ], [ %73, %66 ]
  %49 = phi %"struct.WTF::KeyValuePair.37"* [ null, %25 ], [ %68, %66 ]
  %50 = phi i64 [ %19, %25 ], [ %72, %66 ]
  %51 = phi i64 [ 0, %25 ], [ %70, %66 ]
  %52 = xor i16 %27, %46
  %53 = and i16 %52, 32767
  %54 = icmp eq i16 %53, 0
  br i1 %54, label %55, label %66

55:                                               ; preds = %45
  %56 = lshr i16 %46, 15
  %57 = trunc i16 %56 to i8
  %58 = icmp eq i8 %57, %29
  br i1 %58, label %59, label %66

59:                                               ; preds = %55
  %60 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %11, i64 %50, i32 0, i32 2, i64 0
  %61 = bitcast i16* %60 to i8*
  %62 = shl i16 %46, 1
  %63 = zext i16 %62 to i64
  %64 = tail call i32 @bcmp(i8* %61, i8* %31, i64 %63) #8
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %120, label %66

66:                                               ; preds = %45, %55, %59
  %67 = icmp eq i16 %47, 17
  %68 = select i1 %67, %"struct.WTF::KeyValuePair.37"* %48, %"struct.WTF::KeyValuePair.37"* %49
  %69 = icmp eq i64 %51, 0
  %70 = select i1 %69, i64 %44, i64 %51
  %71 = add i64 %70, %50
  %72 = and i64 %71, %15
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %11, i64 %72
  %74 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %11, i64 %72, i32 0, i32 1
  %75 = load i16, i16* %74, align 4
  %76 = and i16 %75, 32767
  %77 = icmp eq i16 %76, 16
  br i1 %77, label %78, label %45

78:                                               ; preds = %66
  %79 = icmp eq %"struct.WTF::KeyValuePair.37"* %68, null
  br i1 %79, label %89, label %80

80:                                               ; preds = %78
  %81 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %68, i64 0, i32 0, i32 1
  store i16 16, i16* %81, align 4
  %82 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %68, i64 0, i32 1, i32 0
  store %"class.blink::ShapeResult"* null, %"class.blink::ShapeResult"** %82, align 8
  %83 = getelementptr inbounds %"class.WTF::HashTable.34", %"class.WTF::HashTable.34"* %0, i64 0, i32 3
  %84 = load i32, i32* %83, align 8
  %85 = add i32 %84, 2147483647
  %86 = and i32 %85, 2147483647
  %87 = and i32 %84, -2147483648
  %88 = or i32 %86, %87
  store i32 %88, i32* %83, align 8
  br label %89

89:                                               ; preds = %10, %78, %80
  %90 = phi %"struct.WTF::KeyValuePair.37"* [ %68, %80 ], [ %73, %78 ], [ %20, %10 ]
  %91 = bitcast %"struct.WTF::KeyValuePair.37"* %90 to i8*
  %92 = bitcast %"class.blink::ShapeCache::SmallStringKey"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* align 4 %92, i64 36, i1 false) #8
  %93 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %2, i64 0, i32 0
  %94 = bitcast %class.scoped_refptr* %2 to i64*
  %95 = load i64, i64* %94, align 8
  store %"class.blink::ShapeResult"* null, %"class.blink::ShapeResult"** %93, align 8
  %96 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %90, i64 0, i32 1
  %97 = bitcast %class.scoped_refptr* %96 to i64*
  %98 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %96, i64 0, i32 0
  %99 = load %"class.blink::ShapeResult"*, %"class.blink::ShapeResult"** %98, align 8
  store i64 %95, i64* %97, align 8
  %100 = icmp eq %"class.blink::ShapeResult"* %99, null
  br i1 %100, label %108, label %101

101:                                              ; preds = %89
  %102 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %99, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %102) #8
  %103 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %99, i64 0, i32 0, i32 0, i32 0, i32 0
  %104 = load i32, i32* %103, align 4
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %108

106:                                              ; preds = %101
  tail call void @_ZN5blink11ShapeResultD1Ev(%"class.blink::ShapeResult"* nonnull %99) #8
  %107 = bitcast %"class.blink::ShapeResult"* %99 to i8*
  tail call void @free(i8* %107) #8
  br label %108

108:                                              ; preds = %89, %101, %106
  %109 = getelementptr inbounds %"class.WTF::HashTable.34", %"class.WTF::HashTable.34"* %0, i64 0, i32 2
  %110 = load i32, i32* %109, align 4
  %111 = add i32 %110, 1
  store i32 %111, i32* %109, align 4
  %112 = getelementptr inbounds %"class.WTF::HashTable.34", %"class.WTF::HashTable.34"* %0, i64 0, i32 3
  %113 = load i32, i32* %112, align 8
  %114 = add i32 %113, %111
  %115 = shl i32 %114, 1
  %116 = load i32, i32* %12, align 8
  %117 = icmp ult i32 %115, %116
  br i1 %117, label %120, label %118

118:                                              ; preds = %108
  %119 = tail call %"struct.WTF::KeyValuePair.37"* @_ZN3WTF9HashTableIN5blink10ShapeCache14SmallStringKeyENS_12KeyValuePairIS3_13scoped_refptrIKNS1_11ShapeResultEEEENS_24KeyValuePairKeyExtractorENS2_18SmallStringKeyHashENS_18HashMapValueTraitsINS2_24SmallStringKeyHashTraitsENS_10HashTraitsIS8_EEEESD_NS_18PartitionAllocatorEE6ExpandEPS9_(%"class.WTF::HashTable.34"* %0, %"struct.WTF::KeyValuePair.37"* %90)
  br label %120

120:                                              ; preds = %59, %108, %118
  %121 = phi i8 [ 1, %108 ], [ 1, %118 ], [ 0, %59 ]
  %122 = phi %"struct.WTF::KeyValuePair.37"* [ %90, %108 ], [ %119, %118 ], [ %48, %59 ]
  %123 = insertvalue { %"struct.WTF::KeyValuePair.37"*, i8 } undef, %"struct.WTF::KeyValuePair.37"* %122, 0
  %124 = insertvalue { %"struct.WTF::KeyValuePair.37"*, i8 } %123, i8 %121, 1
  ret { %"struct.WTF::KeyValuePair.37"*, i8 } %124
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.37"* @_ZN3WTF9HashTableIN5blink10ShapeCache14SmallStringKeyENS_12KeyValuePairIS3_13scoped_refptrIKNS1_11ShapeResultEEEENS_24KeyValuePairKeyExtractorENS2_18SmallStringKeyHashENS_18HashMapValueTraitsINS2_24SmallStringKeyHashTraitsENS_10HashTraitsIS8_EEEESD_NS_18PartitionAllocatorEE6ExpandEPS9_(%"class.WTF::HashTable.34"*, %"struct.WTF::KeyValuePair.37"*) local_unnamed_addr #4 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable.34", %"class.WTF::HashTable.34"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable.34", %"class.WTF::HashTable.34"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #8
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #8
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %22, i8* %23) #8
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #8
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #8
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #8
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 16, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = mul nuw nsw i64 %33, 48
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIN5blink10ShapeCache14SmallStringKeyE13scoped_refptrIKNS2_11ShapeResultEEEEEEPKcv, i64 0, i64 0)) #8
  %36 = bitcast i8* %35 to %"struct.WTF::KeyValuePair.37"*
  %37 = icmp eq i32 %32, 0
  br i1 %37, label %60, label %38

38:                                               ; preds = %31
  %39 = and i64 %33, 1
  %40 = icmp eq i32 %32, 1
  br i1 %40, label %54, label %41

41:                                               ; preds = %38
  %42 = sub nsw i64 %33, %39
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i64 [ 0, %41 ], [ %51, %43 ]
  %45 = phi i64 [ %42, %41 ], [ %52, %43 ]
  %46 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %36, i64 %44, i32 0, i32 1
  store i16 16, i16* %46, align 4
  %47 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %36, i64 %44, i32 1, i32 0
  store %"class.blink::ShapeResult"* null, %"class.blink::ShapeResult"** %47, align 8
  %48 = or i64 %44, 1
  %49 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %36, i64 %48, i32 0, i32 1
  store i16 16, i16* %49, align 4
  %50 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %36, i64 %48, i32 1, i32 0
  store %"class.blink::ShapeResult"* null, %"class.blink::ShapeResult"** %50, align 8
  %51 = add nuw nsw i64 %44, 2
  %52 = add i64 %45, -2
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %43

54:                                               ; preds = %43, %38
  %55 = phi i64 [ 0, %38 ], [ %51, %43 ]
  %56 = icmp eq i64 %39, 0
  br i1 %56, label %60, label %57

57:                                               ; preds = %54
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %36, i64 %55, i32 0, i32 1
  store i16 16, i16* %58, align 4
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %36, i64 %55, i32 1, i32 0
  store %"class.blink::ShapeResult"* null, %"class.blink::ShapeResult"** %59, align 8
  br label %60

60:                                               ; preds = %57, %54, %31
  %61 = call %"struct.WTF::KeyValuePair.37"* @_ZN3WTF9HashTableIN5blink10ShapeCache14SmallStringKeyENS_12KeyValuePairIS3_13scoped_refptrIKNS1_11ShapeResultEEEENS_24KeyValuePairKeyExtractorENS2_18SmallStringKeyHashENS_18HashMapValueTraitsINS2_24SmallStringKeyHashTraitsENS_10HashTraitsIS8_EEEESD_NS_18PartitionAllocatorEE8RehashToEPS9_jSJ_(%"class.WTF::HashTable.34"* %0, %"struct.WTF::KeyValuePair.37"* %36, i32 %32, %"struct.WTF::KeyValuePair.37"* %1) #8
  ret %"struct.WTF::KeyValuePair.37"* %61
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.37"* @_ZN3WTF9HashTableIN5blink10ShapeCache14SmallStringKeyENS_12KeyValuePairIS3_13scoped_refptrIKNS1_11ShapeResultEEEENS_24KeyValuePairKeyExtractorENS2_18SmallStringKeyHashENS_18HashMapValueTraitsINS2_24SmallStringKeyHashTraitsENS_10HashTraitsIS8_EEEESD_NS_18PartitionAllocatorEE8RehashToEPS9_jSJ_(%"class.WTF::HashTable.34"*, %"struct.WTF::KeyValuePair.37"*, i32, %"struct.WTF::KeyValuePair.37"*) local_unnamed_addr #4 comdat align 2 {
  %5 = alloca %"class.WTF::HashTable.34", align 8
  %6 = bitcast %"class.WTF::HashTable.34"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #8
  %7 = getelementptr inbounds %"class.WTF::HashTable.34", %"class.WTF::HashTable.34"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.WTF::HashTable.34", %"class.WTF::HashTable.34"* %5, i64 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::HashTable.34", %"class.WTF::HashTable.34"* %5, i64 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::HashTable.34", %"class.WTF::HashTable.34"* %5, i64 0, i32 3
  %11 = bitcast %"class.WTF::HashTable.34"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  store %"struct.WTF::KeyValuePair.37"* %1, %"struct.WTF::KeyValuePair.37"** %7, align 8
  store i32 %2, i32* %8, align 8
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 8
  %12 = getelementptr inbounds %"class.WTF::HashTable.34", %"class.WTF::HashTable.34"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::HashTable.34", %"class.WTF::HashTable.34"* %0, i64 0, i32 0
  br i1 %14, label %16, label %21

16:                                               ; preds = %4
  %17 = ptrtoint %"struct.WTF::KeyValuePair.37"* %1 to i64
  %18 = bitcast %"class.WTF::HashTable.34"* %0 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.WTF::HashTable.34"* %5 to i64*
  br label %28

21:                                               ; preds = %4
  %22 = load %"struct.WTF::KeyValuePair.37"*, %"struct.WTF::KeyValuePair.37"** %15, align 8
  %23 = ptrtoint %"struct.WTF::KeyValuePair.37"* %22 to i64
  br label %67

24:                                               ; preds = %109
  %25 = bitcast %"class.WTF::HashTable.34"* %5 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.WTF::HashTable.34"* %0 to i64*
  br label %28

28:                                               ; preds = %16, %24
  %29 = phi i64* [ %20, %16 ], [ %25, %24 ]
  %30 = phi i64* [ %18, %16 ], [ %27, %24 ]
  %31 = phi i64 [ %17, %16 ], [ %26, %24 ]
  %32 = phi i64 [ %19, %16 ], [ %110, %24 ]
  %33 = phi %"struct.WTF::KeyValuePair.37"* [ null, %16 ], [ %113, %24 ]
  %34 = phi i32 [ 0, %16 ], [ %111, %24 ]
  store atomic i64 %31, i64* %30 monotonic, align 8
  store i32 %2, i32* %12, align 8
  store i64 %32, i64* %29, align 8
  store i32 %34, i32* %8, align 8
  %35 = inttoptr i64 %32 to %"struct.WTF::KeyValuePair.37"*
  %36 = icmp eq i64 %32, 0
  br i1 %36, label %63, label %37

37:                                               ; preds = %28
  %38 = icmp eq i32 %34, 0
  br i1 %38, label %61, label %39

39:                                               ; preds = %37
  %40 = zext i32 %34 to i64
  br label %41

41:                                               ; preds = %58, %39
  %42 = phi i64 [ 0, %39 ], [ %59, %58 ]
  %43 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %35, i64 %42, i32 0, i32 1
  %44 = load i16, i16* %43, align 4
  %45 = and i16 %44, 32767
  %46 = icmp eq i16 %45, 17
  br i1 %46, label %58, label %47

47:                                               ; preds = %41
  %48 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %35, i64 %42, i32 1, i32 0
  %49 = load %"class.blink::ShapeResult"*, %"class.blink::ShapeResult"** %48, align 8
  %50 = icmp eq %"class.blink::ShapeResult"* %49, null
  br i1 %50, label %58, label %51

51:                                               ; preds = %47
  %52 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %49, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %52) #8
  %53 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %49, i64 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %58

56:                                               ; preds = %51
  call void @_ZN5blink11ShapeResultD1Ev(%"class.blink::ShapeResult"* nonnull %49) #8
  %57 = bitcast %"class.blink::ShapeResult"* %49 to i8*
  call void @free(i8* %57) #8
  br label %58

58:                                               ; preds = %56, %51, %47, %41
  %59 = add nuw nsw i64 %42, 1
  %60 = icmp eq i64 %59, %40
  br i1 %60, label %61, label %41

61:                                               ; preds = %58, %37
  %62 = inttoptr i64 %32 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %62) #8
  store atomic i64 0, i64* %29 monotonic, align 8
  store i32 0, i32* %8, align 8
  store i32 0, i32* %9, align 4
  br label %63

63:                                               ; preds = %28, %61
  %64 = getelementptr inbounds %"class.WTF::HashTable.34", %"class.WTF::HashTable.34"* %0, i64 0, i32 3
  %65 = load i32, i32* %64, align 8
  %66 = and i32 %65, -2147483648
  store i32 %66, i32* %64, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #8
  ret %"struct.WTF::KeyValuePair.37"* %33

67:                                               ; preds = %21, %109
  %68 = phi i64 [ %110, %109 ], [ %23, %21 ]
  %69 = phi i32 [ %111, %109 ], [ %13, %21 ]
  %70 = phi %"struct.WTF::KeyValuePair.37"* [ %112, %109 ], [ %22, %21 ]
  %71 = phi %"struct.WTF::KeyValuePair.37"* [ %113, %109 ], [ null, %21 ]
  %72 = phi i32 [ %114, %109 ], [ 0, %21 ]
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %70, i64 %73
  %75 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %70, i64 %73, i32 0, i32 1
  %76 = load i16, i16* %75, align 4
  %77 = and i16 %76, 32766
  %78 = or i16 %77, 1
  %79 = icmp eq i16 %78, 17
  br i1 %79, label %109, label %80

80:                                               ; preds = %67
  %81 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %74, i64 0, i32 0
  %82 = call { %"struct.WTF::KeyValuePair.37"*, i8 } @_ZN3WTF9HashTableIN5blink10ShapeCache14SmallStringKeyENS_12KeyValuePairIS3_13scoped_refptrIKNS1_11ShapeResultEEEENS_24KeyValuePairKeyExtractorENS2_18SmallStringKeyHashENS_18HashMapValueTraitsINS2_24SmallStringKeyHashTraitsENS_10HashTraitsIS8_EEEESD_NS_18PartitionAllocatorEE16LookupForWritingERKS3_(%"class.WTF::HashTable.34"* nonnull %5, %"class.blink::ShapeCache::SmallStringKey"* dereferenceable(36) %81) #8
  %83 = extractvalue { %"struct.WTF::KeyValuePair.37"*, i8 } %82, 0
  %84 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %83, i64 0, i32 1, i32 0
  %85 = load %"class.blink::ShapeResult"*, %"class.blink::ShapeResult"** %84, align 8
  %86 = icmp eq %"class.blink::ShapeResult"* %85, null
  br i1 %86, label %94, label %87

87:                                               ; preds = %80
  %88 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %85, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %88) #8
  %89 = getelementptr inbounds %"class.blink::ShapeResult", %"class.blink::ShapeResult"* %85, i64 0, i32 0, i32 0, i32 0, i32 0
  %90 = load i32, i32* %89, align 4
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %94

92:                                               ; preds = %87
  call void @_ZN5blink11ShapeResultD1Ev(%"class.blink::ShapeResult"* nonnull %85) #8
  %93 = bitcast %"class.blink::ShapeResult"* %85 to i8*
  call void @free(i8* %93) #8
  br label %94

94:                                               ; preds = %80, %87, %92
  %95 = bitcast %"struct.WTF::KeyValuePair.37"* %83 to i8*
  %96 = bitcast %"struct.WTF::KeyValuePair.37"* %74 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %95, i8* align 8 %96, i64 36, i1 false) #8
  %97 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %83, i64 0, i32 1
  %98 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %70, i64 %73, i32 1
  %99 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %98, i64 0, i32 0
  %100 = bitcast %class.scoped_refptr* %98 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = bitcast %class.scoped_refptr* %97 to i64*
  store i64 %101, i64* %102, align 8
  store %"class.blink::ShapeResult"* null, %"class.blink::ShapeResult"** %99, align 8
  %103 = load %"struct.WTF::KeyValuePair.37"*, %"struct.WTF::KeyValuePair.37"** %15, align 8
  %104 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %103, i64 %73
  %105 = icmp eq %"struct.WTF::KeyValuePair.37"* %104, %3
  %106 = select i1 %105, %"struct.WTF::KeyValuePair.37"* %83, %"struct.WTF::KeyValuePair.37"* %71
  %107 = load i32, i32* %12, align 8
  %108 = ptrtoint %"struct.WTF::KeyValuePair.37"* %103 to i64
  br label %109

109:                                              ; preds = %67, %94
  %110 = phi i64 [ %68, %67 ], [ %108, %94 ]
  %111 = phi i32 [ %69, %67 ], [ %107, %94 ]
  %112 = phi %"struct.WTF::KeyValuePair.37"* [ %70, %67 ], [ %103, %94 ]
  %113 = phi %"struct.WTF::KeyValuePair.37"* [ %71, %67 ], [ %106, %94 ]
  %114 = add i32 %72, 1
  %115 = icmp eq i32 %114, %111
  br i1 %115, label %24, label %67
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.37"*, i8 } @_ZN3WTF9HashTableIN5blink10ShapeCache14SmallStringKeyENS_12KeyValuePairIS3_13scoped_refptrIKNS1_11ShapeResultEEEENS_24KeyValuePairKeyExtractorENS2_18SmallStringKeyHashENS_18HashMapValueTraitsINS2_24SmallStringKeyHashTraitsENS_10HashTraitsIS8_EEEESD_NS_18PartitionAllocatorEE16LookupForWritingERKS3_(%"class.WTF::HashTable.34"*, %"class.blink::ShapeCache::SmallStringKey"* dereferenceable(36)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable.34", %"class.WTF::HashTable.34"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair.37"*, %"struct.WTF::KeyValuePair.37"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::HashTable.34", %"class.WTF::HashTable.34"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %"class.blink::ShapeCache::SmallStringKey", %"class.blink::ShapeCache::SmallStringKey"* %1, i64 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = and i32 %10, %7
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %4, i64 %12
  %14 = ptrtoint %"struct.WTF::KeyValuePair.37"* %13 to i64
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %4, i64 %12, i32 0, i32 1
  %16 = load i16, i16* %15, align 4
  %17 = and i16 %16, 32767
  %18 = icmp eq i16 %17, 16
  br i1 %18, label %42, label %19

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"class.blink::ShapeCache::SmallStringKey", %"class.blink::ShapeCache::SmallStringKey"* %1, i64 0, i32 1
  %21 = load i16, i16* %20, align 4
  %22 = lshr i16 %21, 15
  %23 = trunc i16 %22 to i8
  %24 = getelementptr inbounds %"class.blink::ShapeCache::SmallStringKey", %"class.blink::ShapeCache::SmallStringKey"* %1, i64 0, i32 2, i64 0
  %25 = bitcast i16* %24 to i8*
  %26 = xor i32 %10, -1
  %27 = lshr i32 %10, 23
  %28 = add i32 %27, %26
  %29 = shl i32 %28, 12
  %30 = xor i32 %29, %28
  %31 = lshr i32 %30, 7
  %32 = xor i32 %31, %30
  %33 = shl i32 %32, 2
  %34 = xor i32 %33, %32
  %35 = lshr i32 %34, 20
  %36 = xor i32 %35, %34
  %37 = or i32 %36, 1
  %38 = zext i32 %37 to i64
  br label %48

39:                                               ; preds = %69
  %40 = ptrtoint %"struct.WTF::KeyValuePair.37"* %76 to i64
  %41 = inttoptr i64 %71 to %"struct.WTF::KeyValuePair.37"*
  br label %42

42:                                               ; preds = %39, %2
  %43 = phi i64 [ %40, %39 ], [ %14, %2 ]
  %44 = phi %"struct.WTF::KeyValuePair.37"* [ %41, %39 ], [ null, %2 ]
  %45 = icmp eq %"struct.WTF::KeyValuePair.37"* %44, null
  %46 = ptrtoint %"struct.WTF::KeyValuePair.37"* %44 to i64
  %47 = select i1 %45, i64 %43, i64 %46
  br label %82

48:                                               ; preds = %69, %19
  %49 = phi i16 [ %16, %19 ], [ %79, %69 ]
  %50 = phi i64 [ 0, %19 ], [ %71, %69 ]
  %51 = phi i16 [ %17, %19 ], [ %80, %69 ]
  %52 = phi i64 [ %14, %19 ], [ %77, %69 ]
  %53 = phi i64 [ %12, %19 ], [ %75, %69 ]
  %54 = phi i64 [ 0, %19 ], [ %73, %69 ]
  %55 = xor i16 %49, %21
  %56 = and i16 %55, 32767
  %57 = icmp eq i16 %56, 0
  br i1 %57, label %58, label %69

58:                                               ; preds = %48
  %59 = lshr i16 %49, 15
  %60 = trunc i16 %59 to i8
  %61 = icmp eq i8 %60, %23
  br i1 %61, label %62, label %69

62:                                               ; preds = %58
  %63 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %4, i64 %53, i32 0, i32 2, i64 0
  %64 = bitcast i16* %63 to i8*
  %65 = shl i16 %49, 1
  %66 = zext i16 %65 to i64
  %67 = tail call i32 @bcmp(i8* %64, i8* %25, i64 %66) #8
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %82, label %69

69:                                               ; preds = %62, %58, %48
  %70 = icmp eq i16 %51, 17
  %71 = select i1 %70, i64 %52, i64 %50
  %72 = icmp eq i64 %54, 0
  %73 = select i1 %72, i64 %38, i64 %54
  %74 = add i64 %73, %53
  %75 = and i64 %74, %8
  %76 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %4, i64 %75
  %77 = ptrtoint %"struct.WTF::KeyValuePair.37"* %76 to i64
  %78 = getelementptr inbounds %"struct.WTF::KeyValuePair.37", %"struct.WTF::KeyValuePair.37"* %4, i64 %75, i32 0, i32 1
  %79 = load i16, i16* %78, align 4
  %80 = and i16 %79, 32767
  %81 = icmp eq i16 %80, 16
  br i1 %81, label %39, label %48

82:                                               ; preds = %62, %42
  %83 = phi i64 [ %47, %42 ], [ %52, %62 ]
  %84 = phi i8 [ 0, %42 ], [ 1, %62 ]
  %85 = inttoptr i64 %83 to %"struct.WTF::KeyValuePair.37"*
  %86 = insertvalue { %"struct.WTF::KeyValuePair.37"*, i8 } undef, %"struct.WTF::KeyValuePair.37"* %85, 0
  %87 = insertvalue { %"struct.WTF::KeyValuePair.37"*, i8 } %86, i8 %84, 1
  ret { %"struct.WTF::KeyValuePair.37"*, i8 } %87
}

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #6

declare void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"*, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8)) unnamed_addr #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5blink11ShapeResultD1Ev(%"class.blink::ShapeResult"*) unnamed_addr #3

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

declare void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nofree nounwind readonly }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 2000, i32 1}
!5 = !{!6}
!6 = distinct !{!6, !7}
!7 = distinct !{!7, !"LVerDomain"}
!8 = !{!9}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !11}
