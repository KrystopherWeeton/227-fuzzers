; ModuleID = '../../third_party/libzip/src/lib/zip_close.c'
source_filename = "../../third_party/libzip/src/lib/zip_close.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque
%struct.zip_stat = type { i64, i8*, i64, i64, i64, i64, i32, i16, i16, i32 }
%struct.zip_file_attributes = type { i64, i8, i8, i8, i8, i32, i16, i16 }
%struct.zip_filelist = type { i64 }
%struct.zip_buffer = type { i8, i8, i8*, i64, i64 }

@.str = private unnamed_addr constant [5 x i8] c"PK\07\08\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @zip_close(%struct.zip*) local_unnamed_addr #0 {
  %2 = alloca [8192 x i8], align 16
  %3 = alloca %struct.zip_stat, align 8
  %4 = alloca %struct.zip_file_attributes, align 8
  %5 = icmp eq %struct.zip* %0, null
  br i1 %5, label %696, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 8
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 4
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 3
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %12, %14
  br i1 %15, label %17, label %16

16:                                               ; preds = %10, %6
  br label %17

17:                                               ; preds = %16, %10
  %18 = phi i32 [ 1, %16 ], [ 0, %10 ]
  %19 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 9
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %54, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 11
  %24 = load %struct.zip_entry*, %struct.zip_entry** %23, align 8
  br label %25

25:                                               ; preds = %45, %22
  %26 = phi i64 [ 0, %22 ], [ %49, %45 ]
  %27 = phi i64 [ 0, %22 ], [ %50, %45 ]
  %28 = phi i32 [ %18, %22 ], [ %46, %45 ]
  %29 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %24, i64 %27, i32 2
  %30 = load %struct.zip_source*, %struct.zip_source** %29, align 8
  %31 = icmp eq %struct.zip_source* %30, null
  %32 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %24, i64 %27, i32 3
  %33 = load i8, i8* %32, align 8, !range !2
  %34 = icmp eq i8 %33, 0
  %35 = and i1 %31, %34
  br i1 %35, label %36, label %44

36:                                               ; preds = %25
  %37 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %24, i64 %27, i32 1
  %38 = load %struct.zip_dirent*, %struct.zip_dirent** %37, align 8
  %39 = icmp eq %struct.zip_dirent* %38, null
  br i1 %39, label %45, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %38, i64 0, i32 0
  %42 = load i32, i32* %41, align 8
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %45, label %44

44:                                               ; preds = %40, %25
  br label %45

45:                                               ; preds = %44, %40, %36
  %46 = phi i32 [ 1, %44 ], [ %28, %40 ], [ %28, %36 ]
  %47 = xor i8 %33, 1
  %48 = zext i8 %47 to i64
  %49 = add i64 %26, %48
  %50 = add nuw i64 %27, 1
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %52, label %25

52:                                               ; preds = %45
  %53 = icmp eq i64 %49, 0
  br i1 %53, label %54, label %80

54:                                               ; preds = %17, %52
  %55 = phi i32 [ %46, %52 ], [ %18, %17 ]
  %56 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 1
  %57 = load i32, i32* %56, align 8
  %58 = and i32 %57, 8
  %59 = or i32 %58, %55
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %79, label %61

61:                                               ; preds = %54
  %62 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 0
  %63 = load %struct.zip_source*, %struct.zip_source** %62, align 8
  %64 = tail call i32 @zip_source_remove(%struct.zip_source* %63) #6
  %65 = icmp slt i32 %64, 0
  br i1 %65, label %66, label %79

66:                                               ; preds = %61
  %67 = load %struct.zip_source*, %struct.zip_source** %62, align 8
  %68 = tail call %struct.zip_error* @zip_source_error(%struct.zip_source* %67) #6
  %69 = tail call i32 @zip_error_code_zip(%struct.zip_error* %68) #6
  %70 = icmp eq i32 %69, 22
  br i1 %70, label %71, label %76

71:                                               ; preds = %66
  %72 = load %struct.zip_source*, %struct.zip_source** %62, align 8
  %73 = tail call %struct.zip_error* @zip_source_error(%struct.zip_source* %72) #6
  %74 = tail call i32 @zip_error_code_system(%struct.zip_error* %73) #6
  %75 = icmp eq i32 %74, 2
  br i1 %75, label %79, label %76

76:                                               ; preds = %71, %66
  %77 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  %78 = load %struct.zip_source*, %struct.zip_source** %62, align 8
  tail call void @_zip_error_set_from_source(%struct.zip_error* %77, %struct.zip_source* %78) #6
  br label %696

79:                                               ; preds = %54, %61, %71
  tail call void @zip_discard(%struct.zip* %0) #6
  br label %696

80:                                               ; preds = %52
  %81 = icmp eq i32 %46, 0
  br i1 %81, label %82, label %83

82:                                               ; preds = %80
  tail call void @zip_discard(%struct.zip* %0) #6
  br label %696

83:                                               ; preds = %80
  %84 = icmp ugt i64 %49, %20
  br i1 %84, label %85, label %87

85:                                               ; preds = %83
  %86 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %86, i32 20, i32 0) #6
  br label %696

87:                                               ; preds = %83
  %88 = shl i64 %49, 3
  %89 = tail call noalias i8* @malloc(i64 %88) #6
  %90 = bitcast i8* %89 to %struct.zip_filelist*
  %91 = icmp eq i8* %89, null
  br i1 %91, label %696, label %92

92:                                               ; preds = %87, %132
  %93 = phi i64 [ %121, %132 ], [ -1, %87 ]
  %94 = phi i64 [ %133, %132 ], [ 0, %87 ]
  %95 = phi i64 [ %134, %132 ], [ 0, %87 ]
  %96 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %24, i64 %95, i32 0
  %97 = load %struct.zip_dirent*, %struct.zip_dirent** %96, align 8
  %98 = icmp eq %struct.zip_dirent* %97, null
  br i1 %98, label %120, label %99

99:                                               ; preds = %92
  %100 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %24, i64 %95, i32 2
  %101 = load %struct.zip_source*, %struct.zip_source** %100, align 8
  %102 = icmp eq %struct.zip_source* %101, null
  br i1 %102, label %103, label %115

103:                                              ; preds = %99
  %104 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %24, i64 %95, i32 3
  %105 = load i8, i8* %104, align 8, !range !2
  %106 = icmp eq i8 %105, 0
  br i1 %106, label %107, label %115

107:                                              ; preds = %103
  %108 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %24, i64 %95, i32 1
  %109 = load %struct.zip_dirent*, %struct.zip_dirent** %108, align 8
  %110 = icmp eq %struct.zip_dirent* %109, null
  br i1 %110, label %120, label %111

111:                                              ; preds = %107
  %112 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %109, i64 0, i32 0
  %113 = load i32, i32* %112, align 8
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %120, label %115

115:                                              ; preds = %111, %103, %99
  %116 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %97, i64 0, i32 18
  %117 = load i64, i64* %116, align 8
  %118 = icmp ult i64 %93, %117
  %119 = select i1 %118, i64 %93, i64 %117
  br label %120

120:                                              ; preds = %111, %107, %92, %115
  %121 = phi i64 [ %119, %115 ], [ %93, %111 ], [ %93, %107 ], [ %93, %92 ]
  %122 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %24, i64 %95, i32 3
  %123 = load i8, i8* %122, align 8, !range !2
  %124 = icmp eq i8 %123, 0
  br i1 %124, label %125, label %132

125:                                              ; preds = %120
  %126 = icmp ult i64 %94, %49
  br i1 %126, label %129, label %127

127:                                              ; preds = %125
  tail call void @free(i8* %89) #6
  %128 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %128, i32 20, i32 0) #6
  br label %696

129:                                              ; preds = %125
  %130 = getelementptr inbounds %struct.zip_filelist, %struct.zip_filelist* %90, i64 %94, i32 0
  store i64 %95, i64* %130, align 8
  %131 = add nuw i64 %94, 1
  br label %132

132:                                              ; preds = %120, %129
  %133 = phi i64 [ %94, %120 ], [ %131, %129 ]
  %134 = add nuw i64 %95, 1
  %135 = icmp eq i64 %134, %20
  br i1 %135, label %136, label %92

136:                                              ; preds = %132
  %137 = icmp ult i64 %133, %49
  br i1 %137, label %138, label %140

138:                                              ; preds = %136
  tail call void @free(i8* %89) #6
  %139 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %139, i32 20, i32 0) #6
  br label %696

140:                                              ; preds = %136
  %141 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 0
  %142 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  %143 = tail call i64 @zip_source_supports(%struct.zip_source* %142) #6
  %144 = and i64 %143, 131072
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %212, label %146

146:                                              ; preds = %140
  %147 = icmp eq i64 %121, -1
  br i1 %147, label %148, label %204

148:                                              ; preds = %146
  %149 = load i64, i64* %19, align 8
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %212, label %151

151:                                              ; preds = %148
  %152 = load %struct.zip_entry*, %struct.zip_entry** %23, align 8
  %153 = and i64 %149, 1
  %154 = icmp eq i64 %149, 1
  br i1 %154, label %178, label %155

155:                                              ; preds = %151
  %156 = sub i64 %149, %153
  br label %157

157:                                              ; preds = %704, %155
  %158 = phi i64 [ -1, %155 ], [ %706, %704 ]
  %159 = phi i64 [ 0, %155 ], [ %705, %704 ]
  %160 = phi i64 [ 0, %155 ], [ %707, %704 ]
  %161 = phi i64 [ %156, %155 ], [ %708, %704 ]
  %162 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %152, i64 %160, i32 0
  %163 = load %struct.zip_dirent*, %struct.zip_dirent** %162, align 8
  %164 = icmp eq %struct.zip_dirent* %163, null
  br i1 %164, label %171, label %165

165:                                              ; preds = %157
  %166 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %163, i64 0, i32 18
  %167 = load i64, i64* %166, align 8
  %168 = icmp ult i64 %167, %159
  %169 = select i1 %168, i64 %159, i64 %167
  %170 = select i1 %168, i64 %158, i64 %160
  br label %171

171:                                              ; preds = %165, %157
  %172 = phi i64 [ %159, %157 ], [ %169, %165 ]
  %173 = phi i64 [ %158, %157 ], [ %170, %165 ]
  %174 = or i64 %160, 1
  %175 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %152, i64 %174, i32 0
  %176 = load %struct.zip_dirent*, %struct.zip_dirent** %175, align 8
  %177 = icmp eq %struct.zip_dirent* %176, null
  br i1 %177, label %704, label %698

178:                                              ; preds = %704, %151
  %179 = phi i64 [ undef, %151 ], [ %705, %704 ]
  %180 = phi i64 [ undef, %151 ], [ %706, %704 ]
  %181 = phi i64 [ -1, %151 ], [ %706, %704 ]
  %182 = phi i64 [ 0, %151 ], [ %705, %704 ]
  %183 = phi i64 [ 0, %151 ], [ %707, %704 ]
  %184 = icmp eq i64 %153, 0
  br i1 %184, label %195, label %185

185:                                              ; preds = %178
  %186 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %152, i64 %183, i32 0
  %187 = load %struct.zip_dirent*, %struct.zip_dirent** %186, align 8
  %188 = icmp eq %struct.zip_dirent* %187, null
  br i1 %188, label %195, label %189

189:                                              ; preds = %185
  %190 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %187, i64 0, i32 18
  %191 = load i64, i64* %190, align 8
  %192 = icmp ult i64 %191, %182
  %193 = select i1 %192, i64 %182, i64 %191
  %194 = select i1 %192, i64 %181, i64 %183
  br label %195

195:                                              ; preds = %189, %185, %178
  %196 = phi i64 [ %179, %178 ], [ %182, %185 ], [ %193, %189 ]
  %197 = phi i64 [ %180, %178 ], [ %181, %185 ], [ %194, %189 ]
  %198 = icmp eq i64 %197, -1
  br i1 %198, label %204, label %199

199:                                              ; preds = %195
  %200 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  %201 = tail call i64 @_zip_file_get_end(%struct.zip* %0, i64 %197, %struct.zip_error* %200) #6
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %203, label %207

203:                                              ; preds = %199
  tail call void @free(i8* %89) #6
  br label %696

204:                                              ; preds = %195, %146
  %205 = phi i64 [ %121, %146 ], [ %196, %195 ]
  %206 = icmp eq i64 %205, 0
  br i1 %206, label %212, label %207

207:                                              ; preds = %199, %204
  %208 = phi i64 [ %205, %204 ], [ %201, %199 ]
  %209 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  %210 = tail call i32 @zip_source_begin_write_cloning(%struct.zip_source* %209, i64 %208) #6
  %211 = icmp slt i32 %210, 0
  br i1 %211, label %212, label %219

212:                                              ; preds = %148, %207, %204, %140
  %213 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  %214 = tail call i32 @zip_source_begin_write(%struct.zip_source* %213) #6
  %215 = icmp slt i32 %214, 0
  br i1 %215, label %216, label %219

216:                                              ; preds = %212
  %217 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  %218 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  tail call void @_zip_error_set_from_source(%struct.zip_error* %217, %struct.zip_source* %218) #6
  tail call void @free(i8* %89) #6
  br label %696

219:                                              ; preds = %207, %212
  %220 = phi i64 [ 0, %212 ], [ %208, %207 ]
  %221 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 16
  %222 = load %struct.zip_progress*, %struct.zip_progress** %221, align 8
  %223 = tail call i32 @_zip_progress_start(%struct.zip_progress* %222) #6
  %224 = icmp eq i32 %223, 0
  br i1 %224, label %225, label %239

225:                                              ; preds = %219
  %226 = uitofp i64 %49 to double
  %227 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  %228 = getelementptr inbounds [8192 x i8], [8192 x i8]* %2, i64 0, i64 0
  %229 = bitcast %struct.zip_stat* %3 to i8*
  %230 = bitcast %struct.zip_file_attributes* %4 to i8*
  %231 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %3, i64 0, i32 0
  %232 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %3, i64 0, i32 7
  %233 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %3, i64 0, i32 3
  %234 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %3, i64 0, i32 4
  %235 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %3, i64 0, i32 8
  %236 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 5
  %237 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %3, i64 0, i32 5
  %238 = getelementptr inbounds %struct.zip_stat, %struct.zip_stat* %3, i64 0, i32 6
  br label %242

239:                                              ; preds = %219
  %240 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %240, i32 32, i32 0) #6
  %241 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  tail call void @zip_source_rollback_write(%struct.zip_source* %241) #6
  tail call void @free(i8* %89) #6
  br label %696

242:                                              ; preds = %668, %225
  %243 = phi i64 [ 0, %225 ], [ %247, %668 ]
  %244 = load %struct.zip_progress*, %struct.zip_progress** %221, align 8
  %245 = uitofp i64 %243 to double
  %246 = fdiv double %245, %226
  %247 = add nuw i64 %243, 1
  %248 = uitofp i64 %247 to double
  %249 = fdiv double %248, %226
  %250 = call i32 @_zip_progress_subrange(%struct.zip_progress* %244, double %246, double %249) #6
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %253, label %252

252:                                              ; preds = %242
  call void @zip_error_set(%struct.zip_error* %227, i32 32, i32 0) #6
  br label %683

253:                                              ; preds = %242
  %254 = getelementptr inbounds %struct.zip_filelist, %struct.zip_filelist* %90, i64 %243, i32 0
  %255 = load i64, i64* %254, align 8
  %256 = load %struct.zip_entry*, %struct.zip_entry** %23, align 8
  %257 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %256, i64 %255, i32 0
  %258 = load %struct.zip_dirent*, %struct.zip_dirent** %257, align 8
  %259 = icmp eq %struct.zip_dirent* %258, null
  br i1 %259, label %264, label %260

260:                                              ; preds = %253
  %261 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %258, i64 0, i32 18
  %262 = load i64, i64* %261, align 8
  %263 = icmp ult i64 %262, %220
  br i1 %263, label %668, label %264

264:                                              ; preds = %253, %260
  %265 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %256, i64 %255, i32 2
  %266 = load %struct.zip_source*, %struct.zip_source** %265, align 8
  %267 = icmp eq %struct.zip_source* %266, null
  %268 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %256, i64 %255, i32 1
  %269 = load %struct.zip_dirent*, %struct.zip_dirent** %268, align 8
  br i1 %267, label %270, label %280

270:                                              ; preds = %264
  %271 = icmp eq %struct.zip_dirent* %269, null
  br i1 %271, label %272, label %274

272:                                              ; preds = %270
  %273 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %256, i64 %255, i32 1
  br label %283

274:                                              ; preds = %270
  %275 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %269, i64 0, i32 0
  %276 = load i32, i32* %275, align 8
  %277 = and i32 %276, 65
  %278 = icmp ne i32 %277, 0
  %279 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %256, i64 %255, i32 1
  br label %289

280:                                              ; preds = %264
  %281 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %256, i64 %255, i32 1
  %282 = icmp eq %struct.zip_dirent* %269, null
  br i1 %282, label %283, label %289

283:                                              ; preds = %272, %280
  %284 = phi %struct.zip_dirent** [ %273, %272 ], [ %281, %280 ]
  %285 = phi i1 [ false, %272 ], [ true, %280 ]
  %286 = call %struct.zip_dirent* @_zip_dirent_clone(%struct.zip_dirent* %258) #6
  store %struct.zip_dirent* %286, %struct.zip_dirent** %284, align 8
  %287 = icmp eq %struct.zip_dirent* %286, null
  br i1 %287, label %288, label %289

288:                                              ; preds = %283
  call void @zip_error_set(%struct.zip_error* %227, i32 14, i32 0) #6
  br label %683

289:                                              ; preds = %274, %283, %280
  %290 = phi %struct.zip_dirent** [ %284, %283 ], [ %281, %280 ], [ %279, %274 ]
  %291 = phi i1 [ %285, %283 ], [ true, %280 ], [ %278, %274 ]
  %292 = phi %struct.zip_dirent* [ %286, %283 ], [ %269, %280 ], [ %269, %274 ]
  %293 = call i32 @_zip_read_local_ef(%struct.zip* %0, i64 %255) #6
  %294 = icmp slt i32 %293, 0
  br i1 %294, label %683, label %295

295:                                              ; preds = %289
  %296 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  %297 = call i64 @zip_source_tell_write(%struct.zip_source* %296) #6
  %298 = icmp slt i64 %297, 0
  br i1 %298, label %299, label %301

299:                                              ; preds = %295
  %300 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  call void @_zip_error_set_from_source(%struct.zip_error* %227, %struct.zip_source* %300) #6
  br label %683

301:                                              ; preds = %295
  %302 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %292, i64 0, i32 18
  store i64 %297, i64* %302, align 8
  br i1 %291, label %303, label %612

303:                                              ; preds = %301
  %304 = load %struct.zip_source*, %struct.zip_source** %265, align 8
  %305 = icmp eq %struct.zip_source* %304, null
  br i1 %305, label %306, label %309

306:                                              ; preds = %303
  %307 = call %struct.zip_source* @_zip_source_zip_new(%struct.zip* %0, %struct.zip* %0, i64 %255, i32 8, i64 0, i64 0, i8* null) #6
  %308 = icmp eq %struct.zip_source* %307, null
  br i1 %308, label %683, label %309

309:                                              ; preds = %303, %306
  %310 = phi i1 [ true, %306 ], [ false, %303 ]
  %311 = phi %struct.zip_source* [ %307, %306 ], [ null, %303 ]
  %312 = phi %struct.zip_source* [ %307, %306 ], [ %304, %303 ]
  %313 = load %struct.zip_dirent*, %struct.zip_dirent** %290, align 8
  %314 = icmp eq %struct.zip_dirent* %313, null
  br i1 %314, label %318, label %315

315:                                              ; preds = %309
  %316 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %313, i64 0, i32 0
  %317 = load i32, i32* %316, align 8
  br label %318

318:                                              ; preds = %309, %315
  %319 = phi i32 [ %317, %315 ], [ 0, %309 ]
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %229) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %229, i8 -86, i64 64, i1 false) #6
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %230) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %230, i8 -86, i64 24, i1 false) #6
  %320 = call i32 @zip_source_stat(%struct.zip_source* nonnull %312, %struct.zip_stat* nonnull %3) #6
  %321 = icmp slt i32 %320, 0
  br i1 %321, label %322, label %323

322:                                              ; preds = %318
  call void @_zip_error_set_from_source(%struct.zip_error* %227, %struct.zip_source* nonnull %312) #6
  br label %608

323:                                              ; preds = %318
  %324 = load i64, i64* %231, align 8
  %325 = and i64 %324, 64
  %326 = icmp eq i64 %325, 0
  br i1 %326, label %327, label %329

327:                                              ; preds = %323
  %328 = or i64 %324, 64
  store i64 %328, i64* %231, align 8
  store i16 0, i16* %232, align 4
  br label %329

329:                                              ; preds = %327, %323
  %330 = phi i64 [ %328, %327 ], [ %324, %323 ]
  %331 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %292, i64 0, i32 7
  %332 = load i32, i32* %331, align 8
  %333 = icmp ugt i32 %332, -3
  br i1 %333, label %334, label %339

334:                                              ; preds = %329
  %335 = load i16, i16* %232, align 4
  %336 = icmp eq i16 %335, 0
  br i1 %336, label %347, label %337

337:                                              ; preds = %334
  %338 = zext i16 %335 to i32
  store i32 %338, i32* %331, align 8
  br label %349

339:                                              ; preds = %329
  %340 = icmp ne i32 %332, 0
  %341 = and i64 %330, 4
  %342 = icmp eq i64 %341, 0
  %343 = or i1 %340, %342
  br i1 %343, label %347, label %344

344:                                              ; preds = %339
  %345 = or i64 %330, 8
  store i64 %345, i64* %231, align 8
  %346 = load i64, i64* %233, align 8
  store i64 %346, i64* %234, align 8
  br label %349

347:                                              ; preds = %339, %334
  %348 = and i64 %330, 4294967287
  store i64 %348, i64* %231, align 8
  br label %349

349:                                              ; preds = %347, %344, %337
  %350 = phi i32 [ 0, %344 ], [ %332, %347 ], [ %338, %337 ]
  %351 = phi i64 [ %345, %344 ], [ %348, %347 ], [ %330, %337 ]
  %352 = trunc i64 %351 to i8
  %353 = icmp sgt i8 %352, -1
  br i1 %353, label %354, label %356

354:                                              ; preds = %349
  %355 = or i64 %351, 128
  store i64 %355, i64* %231, align 8
  store i16 0, i16* %235, align 2
  br label %356

356:                                              ; preds = %354, %349
  %357 = phi i64 [ %355, %354 ], [ %351, %349 ]
  %358 = and i64 %357, 4
  %359 = icmp eq i64 %358, 0
  br i1 %359, label %379, label %360

360:                                              ; preds = %356
  %361 = load i64, i64* %233, align 8
  %362 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %292, i64 0, i32 11
  store i64 %361, i64* %362, align 8
  %363 = and i64 %357, 8
  %364 = icmp eq i64 %363, 0
  br i1 %364, label %365, label %376

365:                                              ; preds = %360
  %366 = icmp ugt i32 %350, -3
  %367 = select i1 %366, i32 8, i32 %350
  %368 = trunc i32 %367 to i16
  switch i16 %368, label %371 [
    i16 12, label %372
    i16 8, label %369
    i16 0, label %370
  ]

369:                                              ; preds = %365
  br label %372

370:                                              ; preds = %365
  br label %372

371:                                              ; preds = %365
  br label %372

372:                                              ; preds = %371, %370, %369, %365
  %373 = phi i64 [ 0, %371 ], [ 4294967295, %370 ], [ 4293656963, %369 ], [ 4269351188, %365 ]
  %374 = icmp ugt i64 %361, %373
  %375 = select i1 %374, i32 1280, i32 256
  br label %379

376:                                              ; preds = %360
  %377 = load i64, i64* %234, align 8
  %378 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %292, i64 0, i32 10
  store i64 %377, i64* %378, align 8
  br label %379

379:                                              ; preds = %376, %372, %356
  %380 = phi i64 [ %361, %372 ], [ %361, %376 ], [ -1, %356 ]
  %381 = phi i32 [ %375, %372 ], [ 256, %376 ], [ 1280, %356 ]
  %382 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  %383 = call i64 @zip_source_tell_write(%struct.zip_source* %382) #6
  %384 = icmp slt i64 %383, 0
  br i1 %384, label %385, label %387

385:                                              ; preds = %379
  %386 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  call void @_zip_error_set_from_source(%struct.zip_error* %227, %struct.zip_source* %386) #6
  br label %608

387:                                              ; preds = %379
  %388 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %292, i64 0, i32 6
  %389 = load i16, i16* %388, align 4
  %390 = and i16 %389, -9
  store i16 %390, i16* %388, align 4
  %391 = call i32 @_zip_dirent_write(%struct.zip* %0, %struct.zip_dirent* nonnull %292, i32 %381) #6
  %392 = icmp slt i32 %391, 0
  br i1 %392, label %608, label %393

393:                                              ; preds = %387
  %394 = load i16, i16* %232, align 4
  %395 = load i32, i32* %331, align 8
  %396 = icmp ugt i32 %395, -3
  %397 = select i1 %396, i32 8, i32 %395
  %398 = trunc i32 %397 to i16
  %399 = icmp ne i16 %394, %398
  %400 = icmp ne i16 %394, 0
  %401 = and i1 %400, %399
  %402 = icmp eq i16 %394, 0
  %403 = or i1 %402, %399
  br i1 %399, label %404, label %406

404:                                              ; preds = %393
  %405 = icmp ne i32 %395, 0
  br label %411

406:                                              ; preds = %393
  %407 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %292, i64 0, i32 0
  %408 = load i32, i32* %407, align 8
  %409 = trunc i32 %408 to i8
  %410 = icmp slt i8 %409, 0
  br i1 %410, label %411, label %418

411:                                              ; preds = %406, %404
  %412 = phi i1 [ %405, %404 ], [ false, %406 ]
  %413 = load i16, i16* %235, align 2
  %414 = icmp eq i16 %413, 0
  %415 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %292, i64 0, i32 20
  %416 = load i16, i16* %415, align 2
  %417 = icmp ne i16 %416, 0
  call void @zip_source_keep(%struct.zip_source* nonnull %312) #6
  br i1 %414, label %439, label %427

418:                                              ; preds = %406
  %419 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %292, i64 0, i32 20
  %420 = load i16, i16* %419, align 2
  %421 = load i16, i16* %235, align 2
  %422 = icmp eq i16 %420, %421
  br i1 %422, label %423, label %424

423:                                              ; preds = %418
  call void @zip_source_keep(%struct.zip_source* nonnull %312) #6
  br label %448

424:                                              ; preds = %418
  %425 = icmp eq i16 %421, 0
  %426 = icmp ne i16 %420, 0
  call void @zip_source_keep(%struct.zip_source* nonnull %312) #6
  br i1 %425, label %448, label %427

427:                                              ; preds = %424, %411
  %428 = phi i1 [ %417, %411 ], [ %426, %424 ]
  %429 = phi i1 [ %412, %411 ], [ false, %424 ]
  %430 = load i16, i16* %235, align 2
  %431 = call %struct.zip_source* (%struct.zip*, %struct.zip_source*, i16, i32, i8*)* @_zip_get_encryption_implementation(i16 zeroext %430, i32 0) #6
  %432 = icmp eq %struct.zip_source* (%struct.zip*, %struct.zip_source*, i16, i32, i8*)* %431, null
  br i1 %432, label %433, label %434

433:                                              ; preds = %427
  call void @zip_error_set(%struct.zip_error* %227, i32 24, i32 0) #6
  call void @zip_source_free(%struct.zip_source* nonnull %312) #6
  br label %608

434:                                              ; preds = %427
  %435 = load i16, i16* %235, align 2
  %436 = load i8*, i8** %236, align 8
  %437 = call %struct.zip_source* %431(%struct.zip* %0, %struct.zip_source* nonnull %312, i16 zeroext %435, i32 0, i8* %436) #6
  %438 = icmp eq %struct.zip_source* %437, null
  call void @zip_source_free(%struct.zip_source* nonnull %312) #6
  br i1 %438, label %608, label %439

439:                                              ; preds = %434, %411
  %440 = phi i1 [ %428, %434 ], [ %417, %411 ]
  %441 = phi i1 [ %429, %434 ], [ %412, %411 ]
  %442 = phi %struct.zip_source* [ %437, %434 ], [ %312, %411 ]
  br i1 %401, label %443, label %448

443:                                              ; preds = %439
  %444 = load i16, i16* %232, align 4
  %445 = zext i16 %444 to i32
  %446 = call %struct.zip_source* @zip_source_decompress(%struct.zip* %0, %struct.zip_source* nonnull %442, i32 %445) #6
  %447 = icmp eq %struct.zip_source* %446, null
  call void @zip_source_free(%struct.zip_source* nonnull %442) #6
  br i1 %447, label %608, label %448

448:                                              ; preds = %424, %443, %439, %423
  %449 = phi i1 [ %441, %439 ], [ %441, %443 ], [ false, %423 ], [ false, %424 ]
  %450 = phi i1 [ %440, %439 ], [ %440, %443 ], [ false, %423 ], [ %426, %424 ]
  %451 = phi %struct.zip_source* [ %442, %439 ], [ %446, %443 ], [ %312, %423 ], [ %312, %424 ]
  br i1 %403, label %452, label %455

452:                                              ; preds = %448
  %453 = call %struct.zip_source* @zip_source_crc(%struct.zip* %0, %struct.zip_source* nonnull %451, i32 0) #6
  %454 = icmp eq %struct.zip_source* %453, null
  call void @zip_source_free(%struct.zip_source* nonnull %451) #6
  br i1 %454, label %608, label %455

455:                                              ; preds = %452, %448
  %456 = phi %struct.zip_source* [ %451, %448 ], [ %453, %452 ]
  br i1 %449, label %457, label %464

457:                                              ; preds = %455
  %458 = load i32, i32* %331, align 8
  %459 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %292, i64 0, i32 19
  %460 = load i16, i16* %459, align 8
  %461 = zext i16 %460 to i32
  %462 = call %struct.zip_source* @zip_source_compress(%struct.zip* %0, %struct.zip_source* nonnull %456, i32 %458, i32 %461) #6
  %463 = icmp eq %struct.zip_source* %462, null
  call void @zip_source_free(%struct.zip_source* nonnull %456) #6
  br i1 %463, label %608, label %464

464:                                              ; preds = %457, %455
  %465 = phi %struct.zip_source* [ %456, %455 ], [ %462, %457 ]
  br i1 %450, label %466, label %491

466:                                              ; preds = %464
  %467 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %292, i64 0, i32 21
  %468 = load i8*, i8** %467, align 8
  %469 = icmp eq i8* %468, null
  br i1 %469, label %470, label %472

470:                                              ; preds = %466
  %471 = load i8*, i8** %236, align 8
  br label %472

472:                                              ; preds = %470, %466
  %473 = phi i8* [ %468, %466 ], [ %471, %470 ]
  %474 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %292, i64 0, i32 20
  %475 = load i16, i16* %474, align 2
  %476 = call %struct.zip_source* (%struct.zip*, %struct.zip_source*, i16, i32, i8*)* @_zip_get_encryption_implementation(i16 zeroext %475, i32 1) #6
  %477 = icmp eq %struct.zip_source* (%struct.zip*, %struct.zip_source*, i16, i32, i8*)* %476, null
  br i1 %477, label %478, label %479

478:                                              ; preds = %472
  call void @zip_error_set(%struct.zip_error* %227, i32 24, i32 0) #6
  call void @zip_source_free(%struct.zip_source* nonnull %465) #6
  br label %608

479:                                              ; preds = %472
  %480 = load i16, i16* %474, align 2
  %481 = call %struct.zip_source* %476(%struct.zip* %0, %struct.zip_source* nonnull %465, i16 zeroext %480, i32 1, i8* %473) #6
  %482 = icmp eq %struct.zip_source* %481, null
  br i1 %482, label %483, label %484

483:                                              ; preds = %479
  call void @zip_source_free(%struct.zip_source* nonnull %465) #6
  br label %608

484:                                              ; preds = %479
  %485 = load i16, i16* %474, align 2
  %486 = icmp eq i16 %485, 1
  br i1 %486, label %487, label %490

487:                                              ; preds = %484
  %488 = load i16, i16* %388, align 4
  %489 = or i16 %488, 8
  store i16 %489, i16* %388, align 4
  br label %490

490:                                              ; preds = %487, %484
  call void @zip_source_free(%struct.zip_source* nonnull %465) #6
  br label %491

491:                                              ; preds = %490, %464
  %492 = phi %struct.zip_source* [ %481, %490 ], [ %465, %464 ]
  %493 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  %494 = call i64 @zip_source_tell_write(%struct.zip_source* %493) #6
  %495 = icmp slt i64 %494, 0
  br i1 %495, label %496, label %498

496:                                              ; preds = %491
  %497 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  call void @_zip_error_set_from_source(%struct.zip_error* %227, %struct.zip_source* %497) #6
  br label %608

498:                                              ; preds = %491
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %228) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %228, i8 -86, i64 8192, i1 false) #6
  %499 = call i32 @zip_source_open(%struct.zip_source* nonnull %492) #6
  %500 = icmp slt i32 %499, 0
  br i1 %500, label %507, label %501

501:                                              ; preds = %498
  %502 = call i64 @zip_source_read(%struct.zip_source* nonnull %492, i8* nonnull %228, i64 8192) #6
  %503 = icmp sgt i64 %502, 0
  br i1 %503, label %504, label %530

504:                                              ; preds = %501
  %505 = icmp sgt i64 %380, 0
  %506 = sitofp i64 %380 to double
  br label %508

507:                                              ; preds = %498
  call void @_zip_error_set_from_source(%struct.zip_error* %227, %struct.zip_source* nonnull %492) #6
  br label %537

508:                                              ; preds = %526, %504
  %509 = phi i64 [ %502, %504 ], [ %528, %526 ]
  %510 = phi i64 [ 0, %504 ], [ %527, %526 ]
  %511 = call i32 @_zip_write(%struct.zip* %0, i8* nonnull %228, i64 %509) #6
  %512 = icmp slt i32 %511, 0
  br i1 %512, label %534, label %513

513:                                              ; preds = %508
  %514 = icmp eq i64 %509, 8192
  br i1 %514, label %515, label %526

515:                                              ; preds = %513
  %516 = load %struct.zip_progress*, %struct.zip_progress** %221, align 8
  %517 = icmp ne %struct.zip_progress* %516, null
  %518 = and i1 %505, %517
  br i1 %518, label %519, label %526

519:                                              ; preds = %515
  %520 = add nsw i64 %510, 8192
  %521 = sitofp i64 %520 to double
  %522 = fdiv double %521, %506
  %523 = call i32 @_zip_progress_update(%struct.zip_progress* nonnull %516, double %522) #6
  %524 = icmp eq i32 %523, 0
  br i1 %524, label %526, label %525

525:                                              ; preds = %519
  call void @zip_error_set(%struct.zip_error* %227, i32 32, i32 0) #6
  br label %534

526:                                              ; preds = %519, %515, %513
  %527 = phi i64 [ %520, %519 ], [ %510, %515 ], [ %510, %513 ]
  %528 = call i64 @zip_source_read(%struct.zip_source* %492, i8* nonnull %228, i64 8192) #6
  %529 = icmp sgt i64 %528, 0
  br i1 %529, label %508, label %530

530:                                              ; preds = %526, %501
  %531 = phi i64 [ %502, %501 ], [ %528, %526 ]
  %532 = icmp slt i64 %531, 0
  br i1 %532, label %533, label %534

533:                                              ; preds = %530
  call void @_zip_error_set_from_source(%struct.zip_error* %227, %struct.zip_source* %492) #6
  br label %534

534:                                              ; preds = %508, %533, %530, %525
  %535 = phi i32 [ -1, %533 ], [ 0, %530 ], [ -1, %525 ], [ -1, %508 ]
  %536 = call i32 @zip_source_close(%struct.zip_source* %492) #6
  br label %537

537:                                              ; preds = %534, %507
  %538 = phi i32 [ -1, %507 ], [ %535, %534 ]
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %228) #6
  %539 = call i32 @zip_source_stat(%struct.zip_source* %492, %struct.zip_stat* nonnull %3) #6
  %540 = icmp slt i32 %539, 0
  br i1 %540, label %541, label %542

541:                                              ; preds = %537
  call void @_zip_error_set_from_source(%struct.zip_error* %227, %struct.zip_source* %492) #6
  br label %542

542:                                              ; preds = %541, %537
  %543 = phi i32 [ -1, %541 ], [ %538, %537 ]
  %544 = call i32 @zip_source_get_file_attributes(%struct.zip_source* %492, %struct.zip_file_attributes* nonnull %4) #6
  %545 = icmp eq i32 %544, 0
  br i1 %545, label %547, label %546

546:                                              ; preds = %542
  call void @_zip_error_set_from_source(%struct.zip_error* %227, %struct.zip_source* %492) #6
  call void @zip_source_free(%struct.zip_source* %492) #6
  br label %608

547:                                              ; preds = %542
  call void @zip_source_free(%struct.zip_source* %492) #6
  %548 = icmp slt i32 %543, 0
  br i1 %548, label %608, label %549

549:                                              ; preds = %547
  %550 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  %551 = call i64 @zip_source_tell_write(%struct.zip_source* %550) #6
  %552 = icmp slt i64 %551, 0
  %553 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  br i1 %552, label %554, label %555

554:                                              ; preds = %549
  call void @_zip_error_set_from_source(%struct.zip_error* %227, %struct.zip_source* %553) #6
  br label %608

555:                                              ; preds = %549
  %556 = call i32 @zip_source_seek_write(%struct.zip_source* %553, i64 %383, i32 0) #6
  %557 = icmp slt i32 %556, 0
  br i1 %557, label %558, label %560

558:                                              ; preds = %555
  %559 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  call void @_zip_error_set_from_source(%struct.zip_error* %227, %struct.zip_source* %559) #6
  br label %608

560:                                              ; preds = %555
  %561 = load i64, i64* %231, align 8
  %562 = and i64 %561, 100
  %563 = icmp eq i64 %562, 100
  br i1 %563, label %565, label %564

564:                                              ; preds = %560
  call void @zip_error_set(%struct.zip_error* %227, i32 20, i32 0) #6
  br label %608

565:                                              ; preds = %560
  %566 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %292, i64 0, i32 0
  %567 = load i32, i32* %566, align 8
  %568 = and i32 %567, 32
  %569 = icmp eq i32 %568, 0
  br i1 %569, label %570, label %579

570:                                              ; preds = %565
  %571 = and i64 %561, 16
  %572 = icmp eq i64 %571, 0
  br i1 %572, label %576, label %573

573:                                              ; preds = %570
  %574 = load i64, i64* %237, align 8
  %575 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %292, i64 0, i32 8
  store i64 %574, i64* %575, align 8
  br label %579

576:                                              ; preds = %570
  %577 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %292, i64 0, i32 8
  %578 = call i64 @time(i64* %577) #6
  br label %579

579:                                              ; preds = %576, %573, %565
  %580 = load i16, i16* %232, align 4
  %581 = zext i16 %580 to i32
  store i32 %581, i32* %331, align 8
  %582 = load i32, i32* %238, align 8
  %583 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %292, i64 0, i32 9
  store i32 %582, i32* %583, align 8
  %584 = load i64, i64* %233, align 8
  %585 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %292, i64 0, i32 11
  store i64 %584, i64* %585, align 8
  %586 = sub nsw i64 %551, %494
  %587 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %292, i64 0, i32 10
  store i64 %586, i64* %587, align 8
  %588 = and i32 %381, 1024
  %589 = icmp ne i32 %588, 0
  call void @_zip_dirent_apply_attributes(%struct.zip_dirent* %292, %struct.zip_file_attributes* nonnull %4, i1 zeroext %589, i32 %319) #6
  %590 = call i32 @_zip_dirent_write(%struct.zip* %0, %struct.zip_dirent* %292, i32 %381) #6
  %591 = icmp slt i32 %590, 0
  br i1 %591, label %608, label %592

592:                                              ; preds = %579
  %593 = icmp eq i32 %391, %590
  br i1 %593, label %595, label %594

594:                                              ; preds = %592
  call void @zip_error_set(%struct.zip_error* %227, i32 20, i32 0) #6
  br label %608

595:                                              ; preds = %592
  %596 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  %597 = call i32 @zip_source_seek_write(%struct.zip_source* %596, i64 %551, i32 0) #6
  %598 = icmp slt i32 %597, 0
  br i1 %598, label %599, label %601

599:                                              ; preds = %595
  %600 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  call void @_zip_error_set_from_source(%struct.zip_error* %227, %struct.zip_source* %600) #6
  br label %608

601:                                              ; preds = %595
  %602 = load i16, i16* %388, align 4
  %603 = and i16 %602, 8
  %604 = icmp eq i16 %603, 0
  br i1 %604, label %610, label %605

605:                                              ; preds = %601
  %606 = call fastcc i32 @write_data_descriptor(%struct.zip* %0, %struct.zip_dirent* %292, i32 %391) #6
  %607 = icmp slt i32 %606, 0
  br i1 %607, label %608, label %610

608:                                              ; preds = %434, %387, %443, %452, %457, %547, %579, %605, %322, %385, %496, %554, %558, %564, %594, %599, %433, %546, %478, %483
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %230) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %229) #6
  br i1 %310, label %609, label %683

609:                                              ; preds = %608
  call void @zip_source_free(%struct.zip_source* nonnull %311) #6
  br label %683

610:                                              ; preds = %605, %601
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %230) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %229) #6
  br i1 %310, label %611, label %668

611:                                              ; preds = %610
  call void @zip_source_free(%struct.zip_source* nonnull %311) #6
  br label %668

612:                                              ; preds = %301
  %613 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %292, i64 0, i32 20
  %614 = load i16, i16* %613, align 2
  %615 = icmp eq i16 %614, 1
  br i1 %615, label %620, label %616

616:                                              ; preds = %612
  %617 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %292, i64 0, i32 6
  %618 = load i16, i16* %617, align 4
  %619 = and i16 %618, -9
  store i16 %619, i16* %617, align 4
  br label %620

620:                                              ; preds = %612, %616
  %621 = call i32 @_zip_dirent_write(%struct.zip* %0, %struct.zip_dirent* nonnull %292, i32 256) #6
  %622 = icmp slt i32 %621, 0
  br i1 %622, label %683, label %623

623:                                              ; preds = %620
  %624 = call i64 @_zip_file_get_offset(%struct.zip* %0, i64 %255, %struct.zip_error* %227) #6
  %625 = icmp eq i64 %624, 0
  br i1 %625, label %683, label %626

626:                                              ; preds = %623
  %627 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  %628 = call i32 @zip_source_seek(%struct.zip_source* %627, i64 %624, i32 0) #6
  %629 = icmp slt i32 %628, 0
  br i1 %629, label %630, label %632

630:                                              ; preds = %626
  %631 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  call void @_zip_error_set_from_source(%struct.zip_error* %227, %struct.zip_source* %631) #6
  br label %683

632:                                              ; preds = %626
  %633 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %292, i64 0, i32 10
  %634 = load i64, i64* %633, align 8
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %228) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %228, i8 -86, i64 8192, i1 false) #6
  %635 = uitofp i64 %634 to double
  br label %636

636:                                              ; preds = %648, %632
  %637 = phi i64 [ %634, %632 ], [ %649, %648 ]
  %638 = icmp eq i64 %637, 0
  br i1 %638, label %658, label %639

639:                                              ; preds = %636
  %640 = icmp ult i64 %637, 8192
  %641 = select i1 %640, i64 %637, i64 8192
  %642 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  %643 = call i32 @_zip_read(%struct.zip_source* %642, i8* nonnull %228, i64 %641, %struct.zip_error* %227) #6
  %644 = icmp slt i32 %643, 0
  br i1 %644, label %657, label %645

645:                                              ; preds = %639
  %646 = call i32 @_zip_write(%struct.zip* %0, i8* nonnull %228, i64 %641) #6
  %647 = icmp slt i32 %646, 0
  br i1 %647, label %657, label %648

648:                                              ; preds = %645
  %649 = sub i64 %637, %641
  %650 = load %struct.zip_progress*, %struct.zip_progress** %221, align 8
  %651 = uitofp i64 %649 to double
  %652 = fsub double %635, %651
  %653 = fdiv double %652, %635
  %654 = call i32 @_zip_progress_update(%struct.zip_progress* %650, double %653) #6
  %655 = icmp eq i32 %654, 0
  br i1 %655, label %636, label %656

656:                                              ; preds = %648
  call void @zip_error_set(%struct.zip_error* %227, i32 32, i32 0) #6
  br label %657

657:                                              ; preds = %645, %639, %656
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %228) #6
  br label %683

658:                                              ; preds = %636
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %228) #6
  %659 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %292, i64 0, i32 6
  %660 = load i16, i16* %659, align 4
  %661 = and i16 %660, 8
  %662 = icmp eq i16 %661, 0
  br i1 %662, label %668, label %663

663:                                              ; preds = %658
  %664 = call zeroext i1 @_zip_dirent_needs_zip64(%struct.zip_dirent* %292, i32 0) #6
  %665 = zext i1 %664 to i32
  %666 = call fastcc i32 @write_data_descriptor(%struct.zip* %0, %struct.zip_dirent* %292, i32 %665)
  %667 = icmp slt i32 %666, 0
  br i1 %667, label %683, label %668

668:                                              ; preds = %610, %611, %663, %658, %260
  %669 = icmp eq i64 %247, %49
  br i1 %669, label %670, label %242

670:                                              ; preds = %668
  %671 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  %672 = call i64 @zip_source_tell_write(%struct.zip_source* %671) #6
  %673 = icmp slt i64 %672, 0
  br i1 %673, label %683, label %674

674:                                              ; preds = %670
  %675 = call i64 @_zip_cdir_write(%struct.zip* %0, %struct.zip_filelist* nonnull %90, i64 %49) #6
  %676 = icmp slt i64 %675, 0
  br i1 %676, label %683, label %677

677:                                              ; preds = %674
  %678 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  %679 = call i64 @zip_source_tell_write(%struct.zip_source* %678) #6
  %680 = ashr i64 %679, 63
  %681 = trunc i64 %680 to i32
  %682 = icmp slt i32 %681, 0
  br i1 %682, label %683, label %684

683:                                              ; preds = %289, %306, %620, %623, %663, %677, %670, %674, %252, %288, %299, %609, %608, %630, %657
  call void @free(i8* %89) #6
  br label %692

684:                                              ; preds = %677
  call void @free(i8* %89) #6
  %685 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  %686 = call i32 @zip_source_commit_write(%struct.zip_source* %685) #6
  %687 = icmp eq i32 %686, 0
  br i1 %687, label %694, label %688

688:                                              ; preds = %684
  %689 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  %690 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  call void @_zip_error_set_from_source(%struct.zip_error* %689, %struct.zip_source* %690) #6
  %691 = load %struct.zip_progress*, %struct.zip_progress** %221, align 8
  call void @_zip_progress_end(%struct.zip_progress* %691) #6
  br label %692

692:                                              ; preds = %688, %683
  %693 = load %struct.zip_source*, %struct.zip_source** %141, align 8
  call void @zip_source_rollback_write(%struct.zip_source* %693) #6
  br label %696

694:                                              ; preds = %684
  %695 = load %struct.zip_progress*, %struct.zip_progress** %221, align 8
  call void @_zip_progress_end(%struct.zip_progress* %695) #6
  call void @zip_discard(%struct.zip* %0) #6
  br label %696

696:                                              ; preds = %203, %87, %1, %694, %692, %239, %216, %138, %127, %85, %82, %79, %76
  %697 = phi i32 [ 0, %79 ], [ -1, %76 ], [ -1, %85 ], [ -1, %127 ], [ -1, %138 ], [ -1, %216 ], [ -1, %239 ], [ -1, %692 ], [ 0, %694 ], [ -1, %203 ], [ 0, %82 ], [ -1, %1 ], [ -1, %87 ]
  ret i32 %697

698:                                              ; preds = %171
  %699 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %176, i64 0, i32 18
  %700 = load i64, i64* %699, align 8
  %701 = icmp ult i64 %700, %172
  %702 = select i1 %701, i64 %172, i64 %700
  %703 = select i1 %701, i64 %173, i64 %174
  br label %704

704:                                              ; preds = %698, %171
  %705 = phi i64 [ %172, %171 ], [ %702, %698 ]
  %706 = phi i64 [ %173, %171 ], [ %703, %698 ]
  %707 = add nuw i64 %160, 2
  %708 = add i64 %161, -2
  %709 = icmp eq i64 %708, 0
  br i1 %709, label %178, label %157
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_zip_changed(%struct.zip* nocapture readonly, i64*) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 8
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 4
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 3
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %8, %10
  br i1 %11, label %13, label %12

12:                                               ; preds = %6, %2
  br label %13

13:                                               ; preds = %6, %12
  %14 = phi i32 [ 1, %12 ], [ 0, %6 ]
  %15 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 9
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %50, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 11
  %20 = load %struct.zip_entry*, %struct.zip_entry** %19, align 8
  br label %21

21:                                               ; preds = %18, %42
  %22 = phi i64 [ 0, %18 ], [ %47, %42 ]
  %23 = phi i64 [ 0, %18 ], [ %48, %42 ]
  %24 = phi i32 [ %14, %18 ], [ %44, %42 ]
  %25 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %20, i64 %23, i32 2
  %26 = load %struct.zip_source*, %struct.zip_source** %25, align 8
  %27 = icmp eq %struct.zip_source* %26, null
  %28 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %20, i64 %23, i32 3
  %29 = load i8, i8* %28, align 8, !range !2
  br i1 %27, label %30, label %40

30:                                               ; preds = %21
  %31 = icmp eq i8 %29, 0
  br i1 %31, label %32, label %40

32:                                               ; preds = %30
  %33 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %20, i64 %23, i32 1
  %34 = load %struct.zip_dirent*, %struct.zip_dirent** %33, align 8
  %35 = icmp eq %struct.zip_dirent* %34, null
  br i1 %35, label %42, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %34, i64 0, i32 0
  %38 = load i32, i32* %37, align 8
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %42, label %40

40:                                               ; preds = %21, %36, %30
  %41 = phi i8 [ 0, %36 ], [ 1, %30 ], [ %29, %21 ]
  br label %42

42:                                               ; preds = %36, %32, %40
  %43 = phi i8 [ %41, %40 ], [ 0, %36 ], [ 0, %32 ]
  %44 = phi i32 [ 1, %40 ], [ %24, %36 ], [ %24, %32 ]
  %45 = xor i8 %43, 1
  %46 = zext i8 %45 to i64
  %47 = add i64 %22, %46
  %48 = add nuw i64 %23, 1
  %49 = icmp ult i64 %48, %16
  br i1 %49, label %21, label %50

50:                                               ; preds = %42, %13
  %51 = phi i32 [ %14, %13 ], [ %44, %42 ]
  %52 = phi i64 [ 0, %13 ], [ %47, %42 ]
  %53 = icmp eq i64* %1, null
  br i1 %53, label %55, label %54

54:                                               ; preds = %50
  store i64 %52, i64* %1, align 8
  br label %55

55:                                               ; preds = %50, %54
  ret i32 %51
}

declare i32 @zip_source_remove(%struct.zip_source*) local_unnamed_addr #3

declare i32 @zip_error_code_zip(%struct.zip_error*) local_unnamed_addr #3

declare %struct.zip_error* @zip_source_error(%struct.zip_source*) local_unnamed_addr #3

declare i32 @zip_error_code_system(%struct.zip_error*) local_unnamed_addr #3

declare void @_zip_error_set_from_source(%struct.zip_error*, %struct.zip_source*) local_unnamed_addr #3

declare void @zip_discard(%struct.zip*) local_unnamed_addr #3

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

declare i64 @zip_source_supports(%struct.zip_source*) local_unnamed_addr #3

declare i64 @_zip_file_get_end(%struct.zip*, i64, %struct.zip_error*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @zip_source_begin_write_cloning(%struct.zip_source*, i64) local_unnamed_addr #3

declare i32 @zip_source_begin_write(%struct.zip_source*) local_unnamed_addr #3

declare i32 @_zip_progress_start(%struct.zip_progress*) local_unnamed_addr #3

declare void @zip_source_rollback_write(%struct.zip_source*) local_unnamed_addr #3

declare i32 @_zip_progress_subrange(%struct.zip_progress*, double, double) local_unnamed_addr #3

declare %struct.zip_dirent* @_zip_dirent_clone(%struct.zip_dirent*) local_unnamed_addr #3

declare i32 @_zip_read_local_ef(%struct.zip*, i64) local_unnamed_addr #3

declare i64 @zip_source_tell_write(%struct.zip_source*) local_unnamed_addr #3

declare %struct.zip_source* @_zip_source_zip_new(%struct.zip*, %struct.zip*, i64, i32, i64, i64, i8*) local_unnamed_addr #3

declare void @zip_source_free(%struct.zip_source*) local_unnamed_addr #3

declare i32 @_zip_dirent_write(%struct.zip*, %struct.zip_dirent*, i32) local_unnamed_addr #3

declare i64 @_zip_file_get_offset(%struct.zip*, i64, %struct.zip_error*) local_unnamed_addr #3

declare i32 @zip_source_seek(%struct.zip_source*, i64, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @write_data_descriptor(%struct.zip*, %struct.zip_dirent* nocapture readonly, i32) unnamed_addr #0 {
  %4 = tail call %struct.zip_buffer* @_zip_buffer_new(i8* null, i64 24) #6
  %5 = icmp eq %struct.zip_buffer* %4, null
  br i1 %5, label %6, label %8

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %7, i32 14, i32 0) #6
  br label %38

8:                                                ; preds = %3
  %9 = tail call i32 @_zip_buffer_put(%struct.zip_buffer* nonnull %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 4) #6
  %10 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %1, i64 0, i32 9
  %11 = load i32, i32* %10, align 8
  %12 = tail call i32 @_zip_buffer_put_32(%struct.zip_buffer* nonnull %4, i32 %11) #6
  %13 = icmp eq i32 %2, 0
  %14 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %1, i64 0, i32 10
  %15 = load i64, i64* %14, align 8
  br i1 %13, label %21, label %16

16:                                               ; preds = %8
  %17 = tail call i32 @_zip_buffer_put_64(%struct.zip_buffer* nonnull %4, i64 %15) #6
  %18 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %1, i64 0, i32 11
  %19 = load i64, i64* %18, align 8
  %20 = tail call i32 @_zip_buffer_put_64(%struct.zip_buffer* nonnull %4, i64 %19) #6
  br label %28

21:                                               ; preds = %8
  %22 = trunc i64 %15 to i32
  %23 = tail call i32 @_zip_buffer_put_32(%struct.zip_buffer* nonnull %4, i32 %22) #6
  %24 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %1, i64 0, i32 11
  %25 = load i64, i64* %24, align 8
  %26 = trunc i64 %25 to i32
  %27 = tail call i32 @_zip_buffer_put_32(%struct.zip_buffer* nonnull %4, i32 %26) #6
  br label %28

28:                                               ; preds = %21, %16
  %29 = tail call zeroext i1 @_zip_buffer_ok(%struct.zip_buffer* nonnull %4) #6
  br i1 %29, label %32, label %30

30:                                               ; preds = %28
  %31 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %31, i32 20, i32 0) #6
  br label %36

32:                                               ; preds = %28
  %33 = tail call i8* @_zip_buffer_data(%struct.zip_buffer* nonnull %4) #6
  %34 = tail call i64 @_zip_buffer_offset(%struct.zip_buffer* nonnull %4) #6
  %35 = tail call i32 @_zip_write(%struct.zip* %0, i8* %33, i64 %34) #6
  br label %36

36:                                               ; preds = %32, %30
  %37 = phi i32 [ %35, %32 ], [ -1, %30 ]
  tail call void @_zip_buffer_free(%struct.zip_buffer* nonnull %4) #6
  br label %38

38:                                               ; preds = %36, %6
  %39 = phi i32 [ -1, %6 ], [ %37, %36 ]
  ret i32 %39
}

declare zeroext i1 @_zip_dirent_needs_zip64(%struct.zip_dirent*, i32) local_unnamed_addr #3

declare i32 @zip_source_commit_write(%struct.zip_source*) local_unnamed_addr #3

declare void @_zip_progress_end(%struct.zip_progress*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @zip_source_stat(%struct.zip_source*, %struct.zip_stat*) local_unnamed_addr #3

declare void @zip_source_keep(%struct.zip_source*) local_unnamed_addr #3

declare %struct.zip_source* (%struct.zip*, %struct.zip_source*, i16, i32, i8*)* @_zip_get_encryption_implementation(i16 zeroext, i32) local_unnamed_addr #3

declare %struct.zip_source* @zip_source_decompress(%struct.zip*, %struct.zip_source*, i32) local_unnamed_addr #3

declare %struct.zip_source* @zip_source_crc(%struct.zip*, %struct.zip_source*, i32) local_unnamed_addr #3

declare %struct.zip_source* @zip_source_compress(%struct.zip*, %struct.zip_source*, i32, i32) local_unnamed_addr #3

declare i32 @zip_source_get_file_attributes(%struct.zip_source*, %struct.zip_file_attributes*) local_unnamed_addr #3

declare i32 @zip_source_seek_write(%struct.zip_source*, i64, i32) local_unnamed_addr #3

; Function Attrs: nounwind
declare i64 @time(i64*) local_unnamed_addr #5

declare void @_zip_dirent_apply_attributes(%struct.zip_dirent*, %struct.zip_file_attributes*, i1 zeroext, i32) local_unnamed_addr #3

declare i32 @zip_source_open(%struct.zip_source*) local_unnamed_addr #3

declare i64 @zip_source_read(%struct.zip_source*, i8*, i64) local_unnamed_addr #3

declare i32 @_zip_write(%struct.zip*, i8*, i64) local_unnamed_addr #3

declare i32 @_zip_progress_update(%struct.zip_progress*, double) local_unnamed_addr #3

declare i32 @zip_source_close(%struct.zip_source*) local_unnamed_addr #3

declare i32 @_zip_read(%struct.zip_source*, i8*, i64, %struct.zip_error*) local_unnamed_addr #3

declare i64 @_zip_cdir_write(%struct.zip*, %struct.zip_filelist*, i64) local_unnamed_addr #3

declare %struct.zip_buffer* @_zip_buffer_new(i8*, i64) local_unnamed_addr #3

declare i32 @_zip_buffer_put(%struct.zip_buffer*, i8*, i64) local_unnamed_addr #3

declare i32 @_zip_buffer_put_32(%struct.zip_buffer*, i32) local_unnamed_addr #3

declare i32 @_zip_buffer_put_64(%struct.zip_buffer*, i64) local_unnamed_addr #3

declare zeroext i1 @_zip_buffer_ok(%struct.zip_buffer*) local_unnamed_addr #3

declare i8* @_zip_buffer_data(%struct.zip_buffer*) local_unnamed_addr #3

declare i64 @_zip_buffer_offset(%struct.zip_buffer*) local_unnamed_addr #3

declare void @_zip_buffer_free(%struct.zip_buffer*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
