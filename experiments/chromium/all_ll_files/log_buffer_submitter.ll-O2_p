; ModuleID = '../../components/autofill/core/browser/logging/log_buffer_submitter.cc'
source_filename = "../../components/autofill/core/browser/logging/log_buffer_submitter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.autofill::LogBufferSubmitter" = type { %"class.autofill::LogRouter"*, %"class.autofill::LogBuffer" }
%"class.autofill::LogBuffer" = type <{ %"class.std::__1::vector.5", i8, [7 x i8] }>
%"class.std::__1::vector.5" = type { %"class.std::__1::__vector_base.6" }
%"class.std::__1::__vector_base.6" = type { %"class.base::Value"*, %"class.base::Value"*, %"class.std::__1::__compressed_pair.7" }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.12" }
%"union.absl::variant_internal::DestructibleUnionImpl.12" = type { %"union.absl::variant_internal::DestructibleUnionImpl.13" }
%"union.absl::variant_internal::DestructibleUnionImpl.13" = type { %"union.absl::variant_internal::DestructibleUnionImpl.14" }
%"union.absl::variant_internal::DestructibleUnionImpl.14" = type { %"union.absl::variant_internal::DestructibleUnionImpl.15" }
%"union.absl::variant_internal::DestructibleUnionImpl.15" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.base::Value"* }
%"class.autofill::LogRouter" = type { %class.KeyedService, %"class.base::ObserverList", %"class.base::ObserverList.1", %"class.std::__1::vector.5" }
%class.KeyedService = type { i32 (...)** }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.base::ObserverList.1" = type <{ %"class.std::__1::vector", %"class.base::LinkedList.2", i64, i32, [4 x i8] }>
%"class.base::LinkedList.2" = type { %"class.base::LinkNode.3" }
%"class.base::LinkNode.3" = type { %"class.base::internal::LinkNodeBase" }

@_ZN8autofill18LogBufferSubmitterC1EPNS_9LogRouterEb = hidden unnamed_addr alias void (%"class.autofill::LogBufferSubmitter"*, %"class.autofill::LogRouter"*, i1), void (%"class.autofill::LogBufferSubmitter"*, %"class.autofill::LogRouter"*, i1)* @_ZN8autofill18LogBufferSubmitterC2EPNS_9LogRouterEb
@_ZN8autofill18LogBufferSubmitterC1EOS0_ = hidden unnamed_addr alias void (%"class.autofill::LogBufferSubmitter"*, %"class.autofill::LogBufferSubmitter"*), void (%"class.autofill::LogBufferSubmitter"*, %"class.autofill::LogBufferSubmitter"*)* @_ZN8autofill18LogBufferSubmitterC2EOS0_
@_ZN8autofill18LogBufferSubmitterD1Ev = hidden unnamed_addr alias void (%"class.autofill::LogBufferSubmitter"*), void (%"class.autofill::LogBufferSubmitter"*)* @_ZN8autofill18LogBufferSubmitterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill18LogBufferSubmitterC2EPNS_9LogRouterEb(%"class.autofill::LogBufferSubmitter"*, %"class.autofill::LogRouter"*, i1 zeroext) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.autofill::LogBufferSubmitter", %"class.autofill::LogBufferSubmitter"* %0, i64 0, i32 0
  store %"class.autofill::LogRouter"* %1, %"class.autofill::LogRouter"** %4, align 8
  %5 = getelementptr inbounds %"class.autofill::LogBufferSubmitter", %"class.autofill::LogBufferSubmitter"* %0, i64 0, i32 1
  tail call void @_ZN8autofill9LogBufferC1Ev(%"class.autofill::LogBuffer"* %5) #4
  %6 = icmp ne %"class.autofill::LogRouter"* %1, null
  %7 = and i1 %6, %2
  %8 = zext i1 %7 to i8
  %9 = getelementptr inbounds %"class.autofill::LogBufferSubmitter", %"class.autofill::LogBufferSubmitter"* %0, i64 0, i32 1, i32 1
  store i8 %8, i8* %9, align 8
  ret void
}

declare void @_ZN8autofill9LogBufferC1Ev(%"class.autofill::LogBuffer"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill18LogBufferSubmitterC2EOS0_(%"class.autofill::LogBufferSubmitter"*, %"class.autofill::LogBufferSubmitter"* dereferenceable(40)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.autofill::LogBufferSubmitter"* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"class.autofill::LogBufferSubmitter"* %0 to i64*
  store i64 %4, i64* %5, align 8
  %6 = getelementptr inbounds %"class.autofill::LogBufferSubmitter", %"class.autofill::LogBufferSubmitter"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.autofill::LogBufferSubmitter", %"class.autofill::LogBufferSubmitter"* %1, i64 0, i32 1
  tail call void @_ZN8autofill9LogBufferC1EOS0_(%"class.autofill::LogBuffer"* %6, %"class.autofill::LogBuffer"* dereferenceable(32) %7) #4
  ret void
}

; Function Attrs: nounwind
declare void @_ZN8autofill9LogBufferC1EOS0_(%"class.autofill::LogBuffer"*, %"class.autofill::LogBuffer"* dereferenceable(32)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill18LogBufferSubmitterD2Ev(%"class.autofill::LogBufferSubmitter"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::Value", align 8
  %3 = bitcast %"class.base::Value"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3) #4
  %4 = getelementptr inbounds %"class.autofill::LogBufferSubmitter", %"class.autofill::LogBufferSubmitter"* %0, i64 0, i32 1
  %5 = bitcast %"class.base::Value"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 32, i1 false)
  call void @_ZN8autofill9LogBuffer14RetrieveResultEv(%"class.base::Value"* nonnull sret %2, %"class.autofill::LogBuffer"* %4) #4
  %6 = getelementptr inbounds %"class.autofill::LogBufferSubmitter", %"class.autofill::LogBufferSubmitter"* %0, i64 0, i32 0
  %7 = load %"class.autofill::LogRouter"*, %"class.autofill::LogRouter"** %6, align 8
  %8 = icmp eq %"class.autofill::LogRouter"* %7, null
  br i1 %8, label %15, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.base::Value", %"class.base::Value"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = trunc i64 %11 to i8
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %15, label %14

14:                                               ; preds = %9
  call void @_ZN8autofill9LogRouter10ProcessLogEON4base5ValueE(%"class.autofill::LogRouter"* nonnull %7, %"class.base::Value"* nonnull dereferenceable(32) %2) #4
  br label %15

15:                                               ; preds = %1, %9, %14
  call void @_ZN4base5ValueD1Ev(%"class.base::Value"* nonnull %2) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3) #4
  call void @_ZN8autofill9LogBufferD1Ev(%"class.autofill::LogBuffer"* %4) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZN8autofill9LogBuffer14RetrieveResultEv(%"class.base::Value"* sret, %"class.autofill::LogBuffer"*) local_unnamed_addr #1

declare void @_ZN8autofill9LogRouter10ProcessLogEON4base5ValueE(%"class.autofill::LogRouter"*, %"class.base::Value"* dereferenceable(32)) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base5ValueD1Ev(%"class.base::Value"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind
declare void @_ZN8autofill9LogBufferD1Ev(%"class.autofill::LogBuffer"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
