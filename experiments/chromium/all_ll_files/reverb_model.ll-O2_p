; ModuleID = '../../third_party/webrtc/modules/audio_processing/aec3/reverb_model.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/aec3/reverb_model.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.webrtc::ReverbModel" = type { %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [65 x float] }

@_ZN6webrtc11ReverbModelC1Ev = hidden unnamed_addr alias void (%"class.webrtc::ReverbModel"*), void (%"class.webrtc::ReverbModel"*)* @_ZN6webrtc11ReverbModelC2Ev
@_ZN6webrtc11ReverbModelD1Ev = hidden unnamed_addr alias void (%"class.webrtc::ReverbModel"*), void (%"class.webrtc::ReverbModel"*)* @_ZN6webrtc11ReverbModelD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc11ReverbModelC2Ev(%"class.webrtc::ReverbModel"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.webrtc::ReverbModel"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 260, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc11ReverbModel5ResetEv(%"class.webrtc::ReverbModel"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = bitcast %"class.webrtc::ReverbModel"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 260, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN6webrtc11ReverbModelD2Ev(%"class.webrtc::ReverbModel"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc11ReverbModel25UpdateReverbNoFreqShapingEN3rtc9ArrayViewIKfLln4711EEEff(%"class.webrtc::ReverbModel"* nocapture, float*, i64, float, float) local_unnamed_addr #3 align 2 {
  %6 = fcmp ogt float %4, 0.000000e+00
  %7 = icmp ne i64 %2, 0
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %145

9:                                                ; preds = %5
  %10 = icmp ult i64 %2, 8
  br i1 %10, label %108, label %11

11:                                               ; preds = %9
  %12 = getelementptr %"class.webrtc::ReverbModel", %"class.webrtc::ReverbModel"* %0, i64 0, i32 0, i32 0, i64 %2
  %13 = getelementptr float, float* %1, i64 %2
  %14 = bitcast float* %13 to %"class.webrtc::ReverbModel"*
  %15 = icmp ugt %"class.webrtc::ReverbModel"* %14, %0
  %16 = icmp ugt float* %12, %1
  %17 = and i1 %15, %16
  br i1 %17, label %108, label %18

18:                                               ; preds = %11
  %19 = and i64 %2, -8
  %20 = insertelement <4 x float> undef, float %3, i32 0
  %21 = shufflevector <4 x float> %20, <4 x float> undef, <4 x i32> zeroinitializer
  %22 = insertelement <4 x float> undef, float %3, i32 0
  %23 = shufflevector <4 x float> %22, <4 x float> undef, <4 x i32> zeroinitializer
  %24 = insertelement <4 x float> undef, float %4, i32 0
  %25 = shufflevector <4 x float> %24, <4 x float> undef, <4 x i32> zeroinitializer
  %26 = insertelement <4 x float> undef, float %4, i32 0
  %27 = shufflevector <4 x float> %26, <4 x float> undef, <4 x i32> zeroinitializer
  %28 = add i64 %19, -8
  %29 = lshr exact i64 %28, 3
  %30 = add nuw nsw i64 %29, 1
  %31 = and i64 %30, 1
  %32 = icmp eq i64 %28, 0
  br i1 %32, label %82, label %33

33:                                               ; preds = %18
  %34 = sub nuw nsw i64 %30, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %79, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %80, %35 ]
  %38 = getelementptr inbounds %"class.webrtc::ReverbModel", %"class.webrtc::ReverbModel"* %0, i64 0, i32 0, i32 0, i64 %36
  %39 = bitcast float* %38 to <4 x float>*
  %40 = load <4 x float>, <4 x float>* %39, align 4, !alias.scope !2, !noalias !5
  %41 = getelementptr inbounds float, float* %38, i64 4
  %42 = bitcast float* %41 to <4 x float>*
  %43 = load <4 x float>, <4 x float>* %42, align 4, !alias.scope !2, !noalias !5
  %44 = getelementptr inbounds float, float* %1, i64 %36
  %45 = bitcast float* %44 to <4 x float>*
  %46 = load <4 x float>, <4 x float>* %45, align 4, !alias.scope !5
  %47 = getelementptr inbounds float, float* %44, i64 4
  %48 = bitcast float* %47 to <4 x float>*
  %49 = load <4 x float>, <4 x float>* %48, align 4, !alias.scope !5
  %50 = fmul <4 x float> %46, %21
  %51 = fmul <4 x float> %49, %23
  %52 = fadd <4 x float> %40, %50
  %53 = fadd <4 x float> %43, %51
  %54 = fmul <4 x float> %52, %25
  %55 = fmul <4 x float> %53, %27
  %56 = bitcast float* %38 to <4 x float>*
  store <4 x float> %54, <4 x float>* %56, align 4, !alias.scope !2, !noalias !5
  %57 = bitcast float* %41 to <4 x float>*
  store <4 x float> %55, <4 x float>* %57, align 4, !alias.scope !2, !noalias !5
  %58 = or i64 %36, 8
  %59 = getelementptr inbounds %"class.webrtc::ReverbModel", %"class.webrtc::ReverbModel"* %0, i64 0, i32 0, i32 0, i64 %58
  %60 = bitcast float* %59 to <4 x float>*
  %61 = load <4 x float>, <4 x float>* %60, align 4, !alias.scope !2, !noalias !5
  %62 = getelementptr inbounds float, float* %59, i64 4
  %63 = bitcast float* %62 to <4 x float>*
  %64 = load <4 x float>, <4 x float>* %63, align 4, !alias.scope !2, !noalias !5
  %65 = getelementptr inbounds float, float* %1, i64 %58
  %66 = bitcast float* %65 to <4 x float>*
  %67 = load <4 x float>, <4 x float>* %66, align 4, !alias.scope !5
  %68 = getelementptr inbounds float, float* %65, i64 4
  %69 = bitcast float* %68 to <4 x float>*
  %70 = load <4 x float>, <4 x float>* %69, align 4, !alias.scope !5
  %71 = fmul <4 x float> %67, %21
  %72 = fmul <4 x float> %70, %23
  %73 = fadd <4 x float> %61, %71
  %74 = fadd <4 x float> %64, %72
  %75 = fmul <4 x float> %73, %25
  %76 = fmul <4 x float> %74, %27
  %77 = bitcast float* %59 to <4 x float>*
  store <4 x float> %75, <4 x float>* %77, align 4, !alias.scope !2, !noalias !5
  %78 = bitcast float* %62 to <4 x float>*
  store <4 x float> %76, <4 x float>* %78, align 4, !alias.scope !2, !noalias !5
  %79 = add i64 %36, 16
  %80 = add i64 %37, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %35, !llvm.loop !7

82:                                               ; preds = %35, %18
  %83 = phi i64 [ 0, %18 ], [ %79, %35 ]
  %84 = icmp eq i64 %31, 0
  br i1 %84, label %106, label %85

85:                                               ; preds = %82
  %86 = getelementptr inbounds %"class.webrtc::ReverbModel", %"class.webrtc::ReverbModel"* %0, i64 0, i32 0, i32 0, i64 %83
  %87 = bitcast float* %86 to <4 x float>*
  %88 = load <4 x float>, <4 x float>* %87, align 4, !alias.scope !2, !noalias !5
  %89 = getelementptr inbounds float, float* %86, i64 4
  %90 = bitcast float* %89 to <4 x float>*
  %91 = load <4 x float>, <4 x float>* %90, align 4, !alias.scope !2, !noalias !5
  %92 = getelementptr inbounds float, float* %1, i64 %83
  %93 = bitcast float* %92 to <4 x float>*
  %94 = load <4 x float>, <4 x float>* %93, align 4, !alias.scope !5
  %95 = getelementptr inbounds float, float* %92, i64 4
  %96 = bitcast float* %95 to <4 x float>*
  %97 = load <4 x float>, <4 x float>* %96, align 4, !alias.scope !5
  %98 = fmul <4 x float> %94, %21
  %99 = fmul <4 x float> %97, %23
  %100 = fadd <4 x float> %88, %98
  %101 = fadd <4 x float> %91, %99
  %102 = fmul <4 x float> %100, %25
  %103 = fmul <4 x float> %101, %27
  %104 = bitcast float* %86 to <4 x float>*
  store <4 x float> %102, <4 x float>* %104, align 4, !alias.scope !2, !noalias !5
  %105 = bitcast float* %89 to <4 x float>*
  store <4 x float> %103, <4 x float>* %105, align 4, !alias.scope !2, !noalias !5
  br label %106

106:                                              ; preds = %82, %85
  %107 = icmp eq i64 %19, %2
  br i1 %107, label %145, label %108

108:                                              ; preds = %106, %11, %9
  %109 = phi i64 [ 0, %11 ], [ 0, %9 ], [ %19, %106 ]
  %110 = xor i64 %109, -1
  %111 = and i64 %2, 1
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %122, label %113

113:                                              ; preds = %108
  %114 = getelementptr inbounds %"class.webrtc::ReverbModel", %"class.webrtc::ReverbModel"* %0, i64 0, i32 0, i32 0, i64 %109
  %115 = load float, float* %114, align 4
  %116 = getelementptr inbounds float, float* %1, i64 %109
  %117 = load float, float* %116, align 4
  %118 = fmul float %117, %3
  %119 = fadd float %115, %118
  %120 = fmul float %119, %4
  store float %120, float* %114, align 4
  %121 = or i64 %109, 1
  br label %122

122:                                              ; preds = %108, %113
  %123 = phi i64 [ %109, %108 ], [ %121, %113 ]
  %124 = sub i64 0, %2
  %125 = icmp eq i64 %110, %124
  br i1 %125, label %145, label %126

126:                                              ; preds = %122, %126
  %127 = phi i64 [ %143, %126 ], [ %123, %122 ]
  %128 = getelementptr inbounds %"class.webrtc::ReverbModel", %"class.webrtc::ReverbModel"* %0, i64 0, i32 0, i32 0, i64 %127
  %129 = load float, float* %128, align 4
  %130 = getelementptr inbounds float, float* %1, i64 %127
  %131 = load float, float* %130, align 4
  %132 = fmul float %131, %3
  %133 = fadd float %129, %132
  %134 = fmul float %133, %4
  store float %134, float* %128, align 4
  %135 = add nuw i64 %127, 1
  %136 = getelementptr inbounds %"class.webrtc::ReverbModel", %"class.webrtc::ReverbModel"* %0, i64 0, i32 0, i32 0, i64 %135
  %137 = load float, float* %136, align 4
  %138 = getelementptr inbounds float, float* %1, i64 %135
  %139 = load float, float* %138, align 4
  %140 = fmul float %139, %3
  %141 = fadd float %137, %140
  %142 = fmul float %141, %4
  store float %142, float* %136, align 4
  %143 = add nuw i64 %127, 2
  %144 = icmp eq i64 %143, %2
  br i1 %144, label %145, label %126, !llvm.loop !9

145:                                              ; preds = %122, %126, %106, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc11ReverbModel12UpdateReverbEN3rtc9ArrayViewIKfLln4711EEES4_f(%"class.webrtc::ReverbModel"* nocapture, float*, i64, float*, i64, float) local_unnamed_addr #3 align 2 {
  %7 = fcmp ogt float %5, 0.000000e+00
  %8 = icmp ne i64 %2, 0
  %9 = and i1 %7, %8
  br i1 %9, label %10, label %106

10:                                               ; preds = %6
  %11 = icmp ult i64 %2, 8
  br i1 %11, label %63, label %12

12:                                               ; preds = %10
  %13 = getelementptr %"class.webrtc::ReverbModel", %"class.webrtc::ReverbModel"* %0, i64 0, i32 0, i32 0, i64 %2
  %14 = getelementptr float, float* %1, i64 %2
  %15 = getelementptr float, float* %3, i64 %2
  %16 = bitcast float* %14 to %"class.webrtc::ReverbModel"*
  %17 = icmp ugt %"class.webrtc::ReverbModel"* %16, %0
  %18 = icmp ugt float* %13, %1
  %19 = and i1 %17, %18
  %20 = bitcast float* %15 to %"class.webrtc::ReverbModel"*
  %21 = icmp ugt %"class.webrtc::ReverbModel"* %20, %0
  %22 = icmp ugt float* %13, %3
  %23 = and i1 %21, %22
  %24 = or i1 %19, %23
  br i1 %24, label %63, label %25

25:                                               ; preds = %12
  %26 = and i64 %2, -8
  %27 = insertelement <4 x float> undef, float %5, i32 0
  %28 = shufflevector <4 x float> %27, <4 x float> undef, <4 x i32> zeroinitializer
  %29 = insertelement <4 x float> undef, float %5, i32 0
  %30 = shufflevector <4 x float> %29, <4 x float> undef, <4 x i32> zeroinitializer
  br label %31

31:                                               ; preds = %31, %25
  %32 = phi i64 [ 0, %25 ], [ %59, %31 ]
  %33 = getelementptr inbounds %"class.webrtc::ReverbModel", %"class.webrtc::ReverbModel"* %0, i64 0, i32 0, i32 0, i64 %32
  %34 = bitcast float* %33 to <4 x float>*
  %35 = load <4 x float>, <4 x float>* %34, align 4, !alias.scope !10, !noalias !13
  %36 = getelementptr inbounds float, float* %33, i64 4
  %37 = bitcast float* %36 to <4 x float>*
  %38 = load <4 x float>, <4 x float>* %37, align 4, !alias.scope !10, !noalias !13
  %39 = getelementptr inbounds float, float* %1, i64 %32
  %40 = bitcast float* %39 to <4 x float>*
  %41 = load <4 x float>, <4 x float>* %40, align 4, !alias.scope !16
  %42 = getelementptr inbounds float, float* %39, i64 4
  %43 = bitcast float* %42 to <4 x float>*
  %44 = load <4 x float>, <4 x float>* %43, align 4, !alias.scope !16
  %45 = getelementptr inbounds float, float* %3, i64 %32
  %46 = bitcast float* %45 to <4 x float>*
  %47 = load <4 x float>, <4 x float>* %46, align 4, !alias.scope !17
  %48 = getelementptr inbounds float, float* %45, i64 4
  %49 = bitcast float* %48 to <4 x float>*
  %50 = load <4 x float>, <4 x float>* %49, align 4, !alias.scope !17
  %51 = fmul <4 x float> %41, %47
  %52 = fmul <4 x float> %44, %50
  %53 = fadd <4 x float> %35, %51
  %54 = fadd <4 x float> %38, %52
  %55 = fmul <4 x float> %53, %28
  %56 = fmul <4 x float> %54, %30
  %57 = bitcast float* %33 to <4 x float>*
  store <4 x float> %55, <4 x float>* %57, align 4, !alias.scope !10, !noalias !13
  %58 = bitcast float* %36 to <4 x float>*
  store <4 x float> %56, <4 x float>* %58, align 4, !alias.scope !10, !noalias !13
  %59 = add i64 %32, 8
  %60 = icmp eq i64 %59, %26
  br i1 %60, label %61, label %31, !llvm.loop !18

61:                                               ; preds = %31
  %62 = icmp eq i64 %26, %2
  br i1 %62, label %106, label %63

63:                                               ; preds = %61, %12, %10
  %64 = phi i64 [ 0, %12 ], [ 0, %10 ], [ %26, %61 ]
  %65 = xor i64 %64, -1
  %66 = and i64 %2, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %79, label %68

68:                                               ; preds = %63
  %69 = getelementptr inbounds %"class.webrtc::ReverbModel", %"class.webrtc::ReverbModel"* %0, i64 0, i32 0, i32 0, i64 %64
  %70 = load float, float* %69, align 4
  %71 = getelementptr inbounds float, float* %1, i64 %64
  %72 = load float, float* %71, align 4
  %73 = getelementptr inbounds float, float* %3, i64 %64
  %74 = load float, float* %73, align 4
  %75 = fmul float %72, %74
  %76 = fadd float %70, %75
  %77 = fmul float %76, %5
  store float %77, float* %69, align 4
  %78 = or i64 %64, 1
  br label %79

79:                                               ; preds = %63, %68
  %80 = phi i64 [ %64, %63 ], [ %78, %68 ]
  %81 = sub i64 0, %2
  %82 = icmp eq i64 %65, %81
  br i1 %82, label %106, label %83

83:                                               ; preds = %79, %83
  %84 = phi i64 [ %104, %83 ], [ %80, %79 ]
  %85 = getelementptr inbounds %"class.webrtc::ReverbModel", %"class.webrtc::ReverbModel"* %0, i64 0, i32 0, i32 0, i64 %84
  %86 = load float, float* %85, align 4
  %87 = getelementptr inbounds float, float* %1, i64 %84
  %88 = load float, float* %87, align 4
  %89 = getelementptr inbounds float, float* %3, i64 %84
  %90 = load float, float* %89, align 4
  %91 = fmul float %88, %90
  %92 = fadd float %86, %91
  %93 = fmul float %92, %5
  store float %93, float* %85, align 4
  %94 = add nuw i64 %84, 1
  %95 = getelementptr inbounds %"class.webrtc::ReverbModel", %"class.webrtc::ReverbModel"* %0, i64 0, i32 0, i32 0, i64 %94
  %96 = load float, float* %95, align 4
  %97 = getelementptr inbounds float, float* %1, i64 %94
  %98 = load float, float* %97, align 4
  %99 = getelementptr inbounds float, float* %3, i64 %94
  %100 = load float, float* %99, align 4
  %101 = fmul float %98, %100
  %102 = fadd float %96, %101
  %103 = fmul float %102, %5
  store float %103, float* %95, align 4
  %104 = add nuw i64 %84, 2
  %105 = icmp eq i64 %104, %2
  br i1 %105, label %106, label %83, !llvm.loop !19

106:                                              ; preds = %79, %83, %61, %6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14, !15}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !12}
!16 = !{!14}
!17 = !{!15}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !8}
