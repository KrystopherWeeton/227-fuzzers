; ModuleID = '../../v8/src/inspector/v8-string-conversions.cc'
source_filename = "../../v8/src/inspector/v8-string-conversions.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::basic_string.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__rep" }
%"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__rep" = type { %union.anon.4 }
%union.anon.4 = type { %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__long" }
%"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__long" = type { i16*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i16*, i16*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { i16* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short" = type { [11 x i16], %struct.anon.5 }
%struct.anon.5 = type { %"struct.std::__1::__padding.6", i8 }
%"struct.std::__1::__padding.6" = type { [1 x i8] }

@_ZN12v8_inspector12_GLOBAL__N_113firstByteMarkE = internal unnamed_addr constant [7 x i8] c"\00\00\C0\E0\F0\F8\FC", align 1
@_ZN12v8_inspector12_GLOBAL__N_115offsetsFromUTF8E = internal unnamed_addr constant [6 x i32] [i32 0, i32 12416, i32 925824, i32 63447168, i32 -100130688, i32 -2113396608], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector11UTF16ToUTF8EPKtm(%"class.std::__1::basic_string"* noalias nocapture sret, i16*, i64) local_unnamed_addr #0 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = icmp ne i16* %1, null
  %6 = icmp ne i64 %2, 0
  %7 = and i1 %5, %6
  br i1 %7, label %10, label %8

8:                                                ; preds = %3
  %9 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #7
  br label %149

10:                                               ; preds = %3
  %11 = icmp ugt i64 %2, 1431655765
  br i1 %11, label %12, label %14

12:                                               ; preds = %10
  %13 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 24, i1 false) #7
  br label %149

14:                                               ; preds = %10
  %15 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #7
  %16 = mul i64 %2, 3
  %17 = icmp ugt i64 %16, -17
  br i1 %17, label %18, label %20

18:                                               ; preds = %14
  %19 = bitcast %"class.std::__1::basic_string"* %4 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %19) #8
  unreachable

20:                                               ; preds = %14
  %21 = icmp ult i64 %16, 23
  br i1 %21, label %31, label %22

22:                                               ; preds = %20
  %23 = add nuw nsw i64 %16, 16
  %24 = and i64 %23, -16
  %25 = tail call i8* @_Znwm(i64 %24) #9
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %25, i8** %26, align 8
  %27 = or i64 %24, -9223372036854775808
  %28 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %27, i64* %28, align 8
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %16, i64* %29, align 8
  %30 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %35

31:                                               ; preds = %20
  %32 = trunc i64 %16 to i8
  %33 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %34 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %33, i64 0, i32 1, i32 0
  store i8 %32, i8* %34, align 1
  br label %35

35:                                               ; preds = %31, %22
  %36 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %30, %22 ], [ %33, %31 ]
  %37 = phi i8* [ %25, %22 ], [ %15, %31 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %37, i8 0, i64 %16, i1 false) #7
  %38 = getelementptr inbounds i8, i8* %37, i64 %16
  store i8 0, i8* %38, align 1
  %39 = getelementptr inbounds i16, i16* %1, i64 %2
  %40 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %36, i64 0, i32 1, i32 0
  %41 = load i8, i8* %40, align 1
  %42 = icmp slt i8 %41, 0
  %43 = bitcast %"class.std::__1::basic_string"* %4 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = inttoptr i64 %44 to i8*
  %46 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  %48 = ptrtoint %"class.std::__1::basic_string"* %4 to i64
  %49 = zext i8 %41 to i64
  %50 = select i1 %42, i64 %44, i64 %48
  %51 = select i1 %42, i8* %45, i8* %15
  %52 = select i1 %42, i64 %47, i64 %49
  %53 = getelementptr inbounds i8, i8* %51, i64 %52
  br label %54

54:                                               ; preds = %35, %134
  %55 = phi i16* [ %136, %134 ], [ %1, %35 ]
  %56 = phi i64 [ %137, %134 ], [ %50, %35 ]
  %57 = inttoptr i64 %56 to i8*
  br label %58

58:                                               ; preds = %54, %126
  %59 = phi i16* [ %79, %126 ], [ %55, %54 ]
  %60 = phi i8* [ %128, %126 ], [ %57, %54 ]
  %61 = getelementptr inbounds i16, i16* %59, i64 1
  %62 = load i16, i16* %59, align 2
  %63 = zext i16 %62 to i32
  %64 = and i16 %62, -1024
  switch i16 %64, label %77 [
    i16 -10240, label %65
    i16 -9216, label %130
  ]

65:                                               ; preds = %58
  %66 = icmp ult i16* %61, %39
  br i1 %66, label %67, label %130

67:                                               ; preds = %65
  %68 = load i16, i16* %61, align 2
  %69 = and i16 %68, -1024
  %70 = icmp eq i16 %69, -9216
  br i1 %70, label %71, label %130

71:                                               ; preds = %67
  %72 = shl nuw nsw i32 %63, 10
  %73 = zext i16 %68 to i32
  %74 = getelementptr inbounds i16, i16* %59, i64 2
  %75 = add nsw i32 %72, -56613888
  %76 = add nsw i32 %75, %73
  br label %77

77:                                               ; preds = %71, %58
  %78 = phi i32 [ %76, %71 ], [ %63, %58 ]
  %79 = phi i16* [ %74, %71 ], [ %61, %58 ]
  %80 = icmp ult i32 %78, 128
  br i1 %80, label %89, label %81

81:                                               ; preds = %77
  %82 = icmp ult i32 %78, 2048
  br i1 %82, label %89, label %83

83:                                               ; preds = %81
  %84 = icmp ult i32 %78, 65536
  br i1 %84, label %89, label %85

85:                                               ; preds = %83
  %86 = icmp ult i32 %78, 1114112
  %87 = select i1 %86, i32 4, i32 3
  %88 = select i1 %86, i32 %78, i32 65533
  br label %89

89:                                               ; preds = %85, %83, %81, %77
  %90 = phi i32 [ 1, %77 ], [ 2, %81 ], [ 3, %83 ], [ %87, %85 ]
  %91 = phi i32 [ %78, %77 ], [ %78, %81 ], [ %78, %83 ], [ %88, %85 ]
  %92 = zext i32 %90 to i64
  %93 = getelementptr inbounds i8, i8* %60, i64 %92
  %94 = icmp ugt i8* %93, %53
  br i1 %94, label %130, label %95

95:                                               ; preds = %89
  switch i32 %90, label %126 [
    i32 4, label %96
    i32 3, label %102
    i32 2, label %110
    i32 1, label %118
  ]

96:                                               ; preds = %95
  %97 = trunc i32 %91 to i8
  %98 = and i8 %97, 63
  %99 = or i8 %98, -128
  %100 = getelementptr inbounds i8, i8* %93, i64 -1
  store i8 %99, i8* %100, align 1
  %101 = lshr i32 %91, 6
  br label %102

102:                                              ; preds = %96, %95
  %103 = phi i32 [ %91, %95 ], [ %101, %96 ]
  %104 = phi i8* [ %93, %95 ], [ %100, %96 ]
  %105 = trunc i32 %103 to i8
  %106 = and i8 %105, 63
  %107 = or i8 %106, -128
  %108 = getelementptr inbounds i8, i8* %104, i64 -1
  store i8 %107, i8* %108, align 1
  %109 = lshr i32 %103, 6
  br label %110

110:                                              ; preds = %102, %95
  %111 = phi i32 [ %91, %95 ], [ %109, %102 ]
  %112 = phi i8* [ %93, %95 ], [ %108, %102 ]
  %113 = trunc i32 %111 to i8
  %114 = and i8 %113, 63
  %115 = or i8 %114, -128
  %116 = getelementptr inbounds i8, i8* %112, i64 -1
  store i8 %115, i8* %116, align 1
  %117 = lshr i32 %111, 6
  br label %118

118:                                              ; preds = %110, %95
  %119 = phi i32 [ %91, %95 ], [ %117, %110 ]
  %120 = phi i8* [ %93, %95 ], [ %116, %110 ]
  %121 = getelementptr inbounds [7 x i8], [7 x i8]* @_ZN12v8_inspector12_GLOBAL__N_113firstByteMarkE, i64 0, i64 %92
  %122 = load i8, i8* %121, align 1
  %123 = trunc i32 %119 to i8
  %124 = or i8 %122, %123
  %125 = getelementptr inbounds i8, i8* %120, i64 -1
  store i8 %124, i8* %125, align 1
  br label %126

126:                                              ; preds = %118, %95
  %127 = phi i8* [ %93, %95 ], [ %125, %118 ]
  %128 = getelementptr inbounds i8, i8* %127, i64 %92
  %129 = icmp ult i16* %79, %39
  br i1 %129, label %58, label %134

130:                                              ; preds = %58, %67, %89, %65
  %131 = getelementptr inbounds i8, i8* %60, i64 1
  store i8 -17, i8* %60, align 1
  %132 = getelementptr inbounds i8, i8* %60, i64 2
  store i8 -65, i8* %131, align 1
  %133 = getelementptr inbounds i8, i8* %60, i64 3
  store i8 -67, i8* %132, align 1
  br label %134

134:                                              ; preds = %126, %130
  %135 = phi i8* [ %133, %130 ], [ %128, %126 ]
  %136 = phi i16* [ %61, %130 ], [ %79, %126 ]
  %137 = ptrtoint i8* %135 to i64
  %138 = icmp ult i16* %136, %39
  br i1 %138, label %54, label %139

139:                                              ; preds = %134
  %140 = ptrtoint i8* %135 to i64
  %141 = load i8, i8* %40, align 1
  %142 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %143 = load i8*, i8** %142, align 8
  %144 = icmp slt i8 %141, 0
  %145 = select i1 %144, i8* %143, i8* %15
  %146 = ptrtoint i8* %145 to i64
  %147 = sub i64 %140, %146
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* nonnull %4, i64 %147, i8 signext 0) #7
  %148 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %148, i8* nonnull align 8 %15, i64 24, i1 false) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #7
  br label %149

149:                                              ; preds = %139, %12, %8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12v8_inspector11UTF8ToUTF16EPKcm(%"class.std::__1::basic_string.1"* noalias sret, i8*, i64) local_unnamed_addr #0 {
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = icmp ne i8* %1, null
  %6 = icmp ne i64 %2, 0
  %7 = and i1 %5, %6
  br i1 %7, label %10, label %8

8:                                                ; preds = %3
  %9 = bitcast %"class.std::__1::basic_string.1"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #7
  br label %304

10:                                               ; preds = %3
  %11 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 24, i1 false) #7
  %12 = icmp slt i64 %2, 0
  br i1 %12, label %13, label %15

13:                                               ; preds = %10
  %14 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %14) #8
  unreachable

15:                                               ; preds = %10
  %16 = shl i64 %2, 1
  %17 = tail call i8* @_Znwm(i64 %16) #9
  %18 = ptrtoint i8* %17 to i64
  %19 = bitcast i8* %17 to i16*
  %20 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %21 = bitcast %"class.std::__1::vector"* %4 to i8**
  store i8* %17, i8** %21, align 8
  %22 = getelementptr inbounds i16, i16* %19, i64 %2
  %23 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  store i16* %22, i16** %23, align 8
  %24 = bitcast i16** %20 to i64*
  %25 = ptrtoint i8* %17 to i64
  %26 = add nsw i64 %2, -1
  %27 = getelementptr i16, i16* %19, i64 %26
  %28 = ptrtoint i16* %27 to i64
  %29 = sub i64 2, %25
  %30 = add i64 %29, %28
  %31 = and i64 %30, -2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %17, i8 0, i64 %31, i1 false) #7
  %32 = ptrtoint i16* %22 to i64
  store i64 %32, i64* %24, align 8
  %33 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %34 = getelementptr inbounds i8, i8* %1, i64 %2
  %35 = ptrtoint i8* %1 to i64
  %36 = ptrtoint i8* %34 to i64
  br label %37

37:                                               ; preds = %161, %15
  %38 = phi i8* [ %1, %15 ], [ %163, %161 ]
  %39 = phi i16* [ %19, %15 ], [ %162, %161 ]
  %40 = phi i64 [ %35, %15 ], [ %132, %161 ]
  %41 = load i8, i8* %38, align 1
  %42 = icmp sgt i8 %41, -1
  br i1 %42, label %57, label %43

43:                                               ; preds = %37
  %44 = sext i8 %41 to i32
  %45 = and i32 %44, 192
  %46 = icmp eq i32 %45, 192
  br i1 %46, label %47, label %57

47:                                               ; preds = %43
  %48 = and i32 %44, 224
  %49 = icmp eq i32 %48, 192
  br i1 %49, label %57, label %50

50:                                               ; preds = %47
  %51 = and i32 %44, 240
  %52 = icmp eq i32 %51, 224
  br i1 %52, label %57, label %53

53:                                               ; preds = %50
  %54 = and i32 %44, 248
  %55 = icmp eq i32 %54, 240
  %56 = select i1 %55, i32 4, i32 0
  br label %57

57:                                               ; preds = %53, %50, %47, %43, %37
  %58 = phi i32 [ 1, %37 ], [ 0, %43 ], [ 2, %47 ], [ 3, %50 ], [ %56, %53 ]
  %59 = sub i64 %36, %40
  %60 = zext i32 %58 to i64
  %61 = icmp slt i64 %59, %60
  br i1 %61, label %165, label %62

62:                                               ; preds = %57
  %63 = getelementptr inbounds i8, i8* %38, i64 %60
  switch i32 %58, label %165 [
    i32 4, label %64
    i32 3, label %70
    i32 2, label %77
    i32 1, label %93
  ]

64:                                               ; preds = %62
  %65 = getelementptr inbounds i8, i8* %63, i64 -1
  %66 = load i8, i8* %65, align 1
  %67 = icmp sgt i8 %66, -1
  %68 = icmp ugt i8 %66, -65
  %69 = or i1 %67, %68
  br i1 %69, label %165, label %70

70:                                               ; preds = %64, %62
  %71 = phi i8* [ %63, %62 ], [ %65, %64 ]
  %72 = getelementptr inbounds i8, i8* %71, i64 -1
  %73 = load i8, i8* %72, align 1
  %74 = icmp sgt i8 %73, -1
  %75 = icmp ugt i8 %73, -65
  %76 = or i1 %74, %75
  br i1 %76, label %165, label %77

77:                                               ; preds = %70, %62
  %78 = phi i8* [ %63, %62 ], [ %72, %70 ]
  %79 = getelementptr inbounds i8, i8* %78, i64 -1
  %80 = load i8, i8* %79, align 1
  %81 = icmp ugt i8 %80, -65
  br i1 %81, label %165, label %82

82:                                               ; preds = %77
  switch i8 %41, label %91 [
    i8 -32, label %83
    i8 -19, label %85
    i8 -16, label %87
    i8 -12, label %89
  ]

83:                                               ; preds = %82
  %84 = icmp ult i8 %80, -96
  br i1 %84, label %165, label %99

85:                                               ; preds = %82
  %86 = icmp ugt i8 %80, -97
  br i1 %86, label %165, label %99

87:                                               ; preds = %82
  %88 = icmp ult i8 %80, -112
  br i1 %88, label %165, label %99

89:                                               ; preds = %82
  %90 = icmp ugt i8 %80, -113
  br i1 %90, label %165, label %99

91:                                               ; preds = %82
  %92 = icmp sgt i8 %80, -1
  br i1 %92, label %165, label %93

93:                                               ; preds = %91, %62
  %94 = icmp slt i8 %41, 0
  %95 = icmp ult i8 %41, -62
  %96 = and i1 %94, %95
  %97 = icmp ult i8 %41, -11
  %98 = xor i1 %97, %96
  br i1 %98, label %99, label %165

99:                                               ; preds = %93, %89, %87, %85, %83
  switch i64 %60, label %131 [
    i64 1, label %123
    i64 2, label %114
    i64 4, label %100
    i64 3, label %105
  ]

100:                                              ; preds = %99
  %101 = getelementptr inbounds i8, i8* %38, i64 1
  %102 = zext i8 %41 to i32
  %103 = shl nuw nsw i32 %102, 6
  %104 = load i8, i8* %101, align 1
  br label %105

105:                                              ; preds = %100, %99
  %106 = phi i8 [ %104, %100 ], [ %41, %99 ]
  %107 = phi i8* [ %101, %100 ], [ %38, %99 ]
  %108 = phi i32 [ %103, %100 ], [ 0, %99 ]
  %109 = getelementptr inbounds i8, i8* %107, i64 1
  %110 = zext i8 %106 to i32
  %111 = add nuw nsw i32 %108, %110
  %112 = shl nsw i32 %111, 6
  %113 = load i8, i8* %109, align 1
  br label %114

114:                                              ; preds = %105, %99
  %115 = phi i8 [ %113, %105 ], [ %41, %99 ]
  %116 = phi i8* [ %109, %105 ], [ %38, %99 ]
  %117 = phi i32 [ %112, %105 ], [ 0, %99 ]
  %118 = getelementptr inbounds i8, i8* %116, i64 1
  %119 = zext i8 %115 to i32
  %120 = add nuw nsw i32 %117, %119
  %121 = shl i32 %120, 6
  %122 = load i8, i8* %118, align 1
  br label %123

123:                                              ; preds = %114, %99
  %124 = phi i8 [ %122, %114 ], [ %41, %99 ]
  %125 = phi i8* [ %118, %114 ], [ %38, %99 ]
  %126 = phi i32 [ %121, %114 ], [ 0, %99 ]
  %127 = getelementptr inbounds i8, i8* %125, i64 1
  %128 = ptrtoint i8* %127 to i64
  %129 = zext i8 %124 to i32
  %130 = add nuw nsw i32 %126, %129
  br label %131

131:                                              ; preds = %123, %99
  %132 = phi i64 [ %40, %99 ], [ %128, %123 ]
  %133 = phi i32 [ 0, %99 ], [ %130, %123 ]
  %134 = add nsw i64 %60, -1
  %135 = getelementptr inbounds [6 x i32], [6 x i32]* @_ZN12v8_inspector12_GLOBAL__N_115offsetsFromUTF8E, i64 0, i64 %134
  %136 = load i32, i32* %135, align 4
  %137 = sub i32 %133, %136
  %138 = icmp ult i16* %39, %22
  br i1 %138, label %139, label %165

139:                                              ; preds = %131
  %140 = icmp ult i32 %137, 65536
  br i1 %140, label %141, label %147

141:                                              ; preds = %139
  %142 = and i32 %137, -2048
  %143 = icmp eq i32 %142, 55296
  br i1 %143, label %165, label %144

144:                                              ; preds = %141
  %145 = trunc i32 %137 to i16
  %146 = getelementptr inbounds i16, i16* %39, i64 1
  store i16 %145, i16* %39, align 2
  br label %161

147:                                              ; preds = %139
  %148 = add i32 %137, -65536
  %149 = icmp ult i32 %148, 1048576
  br i1 %149, label %150, label %165

150:                                              ; preds = %147
  %151 = getelementptr inbounds i16, i16* %39, i64 1
  %152 = icmp ult i16* %151, %22
  br i1 %152, label %153, label %165

153:                                              ; preds = %150
  %154 = lshr i32 %137, 10
  %155 = trunc i32 %154 to i16
  %156 = add nuw nsw i16 %155, -10304
  store i16 %156, i16* %39, align 2
  %157 = trunc i32 %137 to i16
  %158 = and i16 %157, 1023
  %159 = or i16 %158, -9216
  %160 = getelementptr inbounds i16, i16* %39, i64 2
  store i16 %159, i16* %151, align 2
  br label %161

161:                                              ; preds = %153, %144
  %162 = phi i16* [ %146, %144 ], [ %160, %153 ]
  %163 = inttoptr i64 %132 to i8*
  %164 = icmp ugt i8* %34, %163
  br i1 %164, label %37, label %167

165:                                              ; preds = %147, %150, %141, %131, %57, %93, %91, %89, %87, %85, %83, %77, %70, %64, %62
  %166 = bitcast %"class.std::__1::basic_string.1"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %166, i8 0, i64 24, i1 false) #7
  br label %297

167:                                              ; preds = %161
  %168 = ptrtoint i16* %162 to i64
  %169 = sub i64 %168, %18
  %170 = ashr exact i64 %169, 1
  %171 = icmp ugt i64 %170, 9223372036854775791
  br i1 %171, label %172, label %174

172:                                              ; preds = %167
  %173 = bitcast %"class.std::__1::basic_string.1"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %173) #8
  unreachable

174:                                              ; preds = %167
  %175 = icmp ult i64 %170, 11
  br i1 %175, label %176, label %181

176:                                              ; preds = %174
  %177 = trunc i64 %170 to i8
  %178 = bitcast %"class.std::__1::basic_string.1"* %0 to %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"*
  %179 = getelementptr inbounds %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short", %"struct.std::__1::basic_string<unsigned short, std::__1::char_traits<unsigned short>, std::__1::allocator<unsigned short> >::__short"* %178, i64 0, i32 1, i32 1
  store i8 %177, i8* %179, align 1
  %180 = bitcast %"class.std::__1::basic_string.1"* %0 to i16*
  br label %194

181:                                              ; preds = %174
  %182 = add nuw nsw i64 %170, 8
  %183 = and i64 %182, -8
  %184 = icmp slt i64 %183, 0
  br i1 %184, label %185, label %186

185:                                              ; preds = %181
  tail call void @abort() #8
  unreachable

186:                                              ; preds = %181
  %187 = shl i64 %183, 1
  %188 = tail call i8* @_Znwm(i64 %187) #9
  %189 = bitcast i8* %188 to i16*
  %190 = bitcast %"class.std::__1::basic_string.1"* %0 to i8**
  store i8* %188, i8** %190, align 8
  %191 = or i64 %183, -9223372036854775808
  %192 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %191, i64* %192, align 8
  %193 = getelementptr inbounds %"class.std::__1::basic_string.1", %"class.std::__1::basic_string.1"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %170, i64* %193, align 8
  br label %194

194:                                              ; preds = %186, %176
  %195 = phi i16* [ %180, %176 ], [ %189, %186 ]
  %196 = icmp eq i16* %162, %19
  br i1 %196, label %295, label %197

197:                                              ; preds = %194
  %198 = getelementptr i16, i16* %162, i64 -1
  %199 = ptrtoint i16* %198 to i64
  %200 = sub i64 %199, %18
  %201 = lshr i64 %200, 1
  %202 = add nuw i64 %201, 1
  %203 = icmp ult i64 %202, 16
  br i1 %203, label %285, label %204

204:                                              ; preds = %197
  %205 = and i64 %202, -16
  %206 = getelementptr i16, i16* %19, i64 %205
  %207 = getelementptr i16, i16* %195, i64 %205
  %208 = add i64 %205, -16
  %209 = lshr exact i64 %208, 4
  %210 = add nuw nsw i64 %209, 1
  %211 = and i64 %210, 3
  %212 = icmp ult i64 %208, 48
  br i1 %212, label %264, label %213

213:                                              ; preds = %204
  %214 = sub nsw i64 %210, %211
  br label %215

215:                                              ; preds = %215, %213
  %216 = phi i64 [ 0, %213 ], [ %261, %215 ]
  %217 = phi i64 [ %214, %213 ], [ %262, %215 ]
  %218 = getelementptr i16, i16* %19, i64 %216
  %219 = getelementptr i16, i16* %195, i64 %216
  %220 = bitcast i16* %218 to <8 x i16>*
  %221 = load <8 x i16>, <8 x i16>* %220, align 2
  %222 = getelementptr i16, i16* %218, i64 8
  %223 = bitcast i16* %222 to <8 x i16>*
  %224 = load <8 x i16>, <8 x i16>* %223, align 2
  %225 = bitcast i16* %219 to <8 x i16>*
  store <8 x i16> %221, <8 x i16>* %225, align 2
  %226 = getelementptr i16, i16* %219, i64 8
  %227 = bitcast i16* %226 to <8 x i16>*
  store <8 x i16> %224, <8 x i16>* %227, align 2
  %228 = or i64 %216, 16
  %229 = getelementptr i16, i16* %19, i64 %228
  %230 = getelementptr i16, i16* %195, i64 %228
  %231 = bitcast i16* %229 to <8 x i16>*
  %232 = load <8 x i16>, <8 x i16>* %231, align 2
  %233 = getelementptr i16, i16* %229, i64 8
  %234 = bitcast i16* %233 to <8 x i16>*
  %235 = load <8 x i16>, <8 x i16>* %234, align 2
  %236 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> %232, <8 x i16>* %236, align 2
  %237 = getelementptr i16, i16* %230, i64 8
  %238 = bitcast i16* %237 to <8 x i16>*
  store <8 x i16> %235, <8 x i16>* %238, align 2
  %239 = or i64 %216, 32
  %240 = getelementptr i16, i16* %19, i64 %239
  %241 = getelementptr i16, i16* %195, i64 %239
  %242 = bitcast i16* %240 to <8 x i16>*
  %243 = load <8 x i16>, <8 x i16>* %242, align 2
  %244 = getelementptr i16, i16* %240, i64 8
  %245 = bitcast i16* %244 to <8 x i16>*
  %246 = load <8 x i16>, <8 x i16>* %245, align 2
  %247 = bitcast i16* %241 to <8 x i16>*
  store <8 x i16> %243, <8 x i16>* %247, align 2
  %248 = getelementptr i16, i16* %241, i64 8
  %249 = bitcast i16* %248 to <8 x i16>*
  store <8 x i16> %246, <8 x i16>* %249, align 2
  %250 = or i64 %216, 48
  %251 = getelementptr i16, i16* %19, i64 %250
  %252 = getelementptr i16, i16* %195, i64 %250
  %253 = bitcast i16* %251 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2
  %255 = getelementptr i16, i16* %251, i64 8
  %256 = bitcast i16* %255 to <8 x i16>*
  %257 = load <8 x i16>, <8 x i16>* %256, align 2
  %258 = bitcast i16* %252 to <8 x i16>*
  store <8 x i16> %254, <8 x i16>* %258, align 2
  %259 = getelementptr i16, i16* %252, i64 8
  %260 = bitcast i16* %259 to <8 x i16>*
  store <8 x i16> %257, <8 x i16>* %260, align 2
  %261 = add i64 %216, 64
  %262 = add i64 %217, -4
  %263 = icmp eq i64 %262, 0
  br i1 %263, label %264, label %215, !llvm.loop !2

264:                                              ; preds = %215, %204
  %265 = phi i64 [ 0, %204 ], [ %261, %215 ]
  %266 = icmp eq i64 %211, 0
  br i1 %266, label %283, label %267

267:                                              ; preds = %264, %267
  %268 = phi i64 [ %280, %267 ], [ %265, %264 ]
  %269 = phi i64 [ %281, %267 ], [ %211, %264 ]
  %270 = getelementptr i16, i16* %19, i64 %268
  %271 = getelementptr i16, i16* %195, i64 %268
  %272 = bitcast i16* %270 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 2
  %274 = getelementptr i16, i16* %270, i64 8
  %275 = bitcast i16* %274 to <8 x i16>*
  %276 = load <8 x i16>, <8 x i16>* %275, align 2
  %277 = bitcast i16* %271 to <8 x i16>*
  store <8 x i16> %273, <8 x i16>* %277, align 2
  %278 = getelementptr i16, i16* %271, i64 8
  %279 = bitcast i16* %278 to <8 x i16>*
  store <8 x i16> %276, <8 x i16>* %279, align 2
  %280 = add i64 %268, 16
  %281 = add i64 %269, -1
  %282 = icmp eq i64 %281, 0
  br i1 %282, label %283, label %267, !llvm.loop !4

283:                                              ; preds = %267, %264
  %284 = icmp eq i64 %202, %205
  br i1 %284, label %295, label %285

285:                                              ; preds = %283, %197
  %286 = phi i16* [ %19, %197 ], [ %206, %283 ]
  %287 = phi i16* [ %195, %197 ], [ %207, %283 ]
  br label %288

288:                                              ; preds = %285, %288
  %289 = phi i16* [ %292, %288 ], [ %286, %285 ]
  %290 = phi i16* [ %293, %288 ], [ %287, %285 ]
  %291 = load i16, i16* %289, align 2
  store i16 %291, i16* %290, align 2
  %292 = getelementptr inbounds i16, i16* %289, i64 1
  %293 = getelementptr inbounds i16, i16* %290, i64 1
  %294 = icmp eq i16* %292, %162
  br i1 %294, label %295, label %288, !llvm.loop !6

295:                                              ; preds = %288, %283, %194
  %296 = phi i16* [ %195, %194 ], [ %207, %283 ], [ %293, %288 ]
  store i16 0, i16* %296, align 2
  br label %297

297:                                              ; preds = %295, %165
  %298 = load i16*, i16** %33, align 8
  %299 = icmp eq i16* %298, null
  br i1 %299, label %303, label %300

300:                                              ; preds = %297
  %301 = ptrtoint i16* %298 to i64
  store i64 %301, i64* %24, align 8
  %302 = bitcast i16* %298 to i8*
  tail call void @_ZdlPv(i8* %302) #9
  br label %303

303:                                              ; preds = %297, %300
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #7
  br label %304

304:                                              ; preds = %303, %8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"*, i64, i8 signext) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
