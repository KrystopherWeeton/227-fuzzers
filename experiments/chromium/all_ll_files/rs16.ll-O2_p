; ModuleID = '../../third_party/unrar/src/rs16.cpp'
source_filename = "../../third_party/unrar/src/rs16.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%class.RSCoder16 = type { i32*, i32*, i8, i32, i32, i32, i8*, i32*, i32*, i64 }

@_ZN9RSCoder16C1Ev = hidden unnamed_addr alias void (%class.RSCoder16*), void (%class.RSCoder16*)* @_ZN9RSCoder16C2Ev
@_ZN9RSCoder16D1Ev = hidden unnamed_addr alias void (%class.RSCoder16*), void (%class.RSCoder16*)* @_ZN9RSCoder16D2Ev

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN9RSCoder16C2Ev(%class.RSCoder16* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 2
  store i8 0, i8* %2, align 8
  %3 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 3
  %4 = bitcast i32* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 44, i1 false)
  %5 = tail call i8* @_Znam(i64 1048564) #7
  %6 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 0
  %7 = bitcast %class.RSCoder16* %0 to i8**
  store i8* %5, i8** %7, align 8
  %8 = tail call i8* @_Znam(i64 262144) #7
  %9 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 1
  %10 = bitcast i32** %9 to i8**
  store i8* %8, i8** %10, align 8
  %11 = bitcast i8* %8 to i32*
  br label %13

12:                                               ; preds = %13
  store i32 131070, i32* %30, align 4
  br label %32

13:                                               ; preds = %13, %1
  %14 = phi i64 [ 0, %1 ], [ %29, %13 ]
  %15 = phi i32* [ %11, %1 ], [ %30, %13 ]
  %16 = phi i32 [ 1, %1 ], [ %28, %13 ]
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds i32, i32* %15, i64 %17
  %19 = trunc i64 %14 to i32
  store i32 %19, i32* %18, align 4
  %20 = load i32*, i32** %6, align 8
  %21 = getelementptr inbounds i32, i32* %20, i64 %14
  store i32 %16, i32* %21, align 4
  %22 = load i32*, i32** %6, align 8
  %23 = add nuw nsw i64 %14, 65535
  %24 = getelementptr inbounds i32, i32* %22, i64 %23
  store i32 %16, i32* %24, align 4
  %25 = shl i32 %16, 1
  %26 = icmp ugt i32 %25, 65535
  %27 = xor i32 %25, 69643
  %28 = select i1 %26, i32 %27, i32 %25
  %29 = add nuw nsw i64 %14, 1
  %30 = load i32*, i32** %9, align 8
  %31 = icmp eq i64 %29, 65535
  br i1 %31, label %12, label %13

32:                                               ; preds = %45, %12
  %33 = phi i64 [ 131070, %12 ], [ %48, %45 ]
  %34 = load i32*, i32** %6, align 8
  %35 = getelementptr inbounds i32, i32* %34, i64 %33
  store i32 0, i32* %35, align 4
  %36 = or i64 %33, 1
  %37 = load i32*, i32** %6, align 8
  %38 = getelementptr inbounds i32, i32* %37, i64 %36
  store i32 0, i32* %38, align 4
  %39 = add nuw nsw i64 %33, 2
  %40 = load i32*, i32** %6, align 8
  %41 = getelementptr inbounds i32, i32* %40, i64 %39
  store i32 0, i32* %41, align 4
  %42 = add nuw nsw i64 %33, 3
  %43 = icmp eq i64 %42, 262141
  br i1 %43, label %44, label %45

44:                                               ; preds = %32
  ret void

45:                                               ; preds = %32
  %46 = load i32*, i32** %6, align 8
  %47 = getelementptr inbounds i32, i32* %46, i64 %42
  store i32 0, i32* %47, align 4
  %48 = add nuw nsw i64 %33, 4
  br label %32
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN9RSCoder166gfInitEv(%class.RSCoder16* nocapture) local_unnamed_addr #0 align 2 {
  %2 = tail call i8* @_Znam(i64 1048564) #7
  %3 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 0
  %4 = bitcast %class.RSCoder16* %0 to i8**
  store i8* %2, i8** %4, align 8
  %5 = tail call i8* @_Znam(i64 262144) #7
  %6 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 1
  %7 = bitcast i32** %6 to i8**
  store i8* %5, i8** %7, align 8
  %8 = bitcast i8* %5 to i32*
  br label %10

9:                                                ; preds = %10
  store i32 131070, i32* %27, align 4
  br label %30

10:                                               ; preds = %10, %1
  %11 = phi i64 [ 0, %1 ], [ %26, %10 ]
  %12 = phi i32* [ %8, %1 ], [ %27, %10 ]
  %13 = phi i32 [ 1, %1 ], [ %25, %10 ]
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds i32, i32* %12, i64 %14
  %16 = trunc i64 %11 to i32
  store i32 %16, i32* %15, align 4
  %17 = load i32*, i32** %3, align 8
  %18 = getelementptr inbounds i32, i32* %17, i64 %11
  store i32 %13, i32* %18, align 4
  %19 = load i32*, i32** %3, align 8
  %20 = add nuw nsw i64 %11, 65535
  %21 = getelementptr inbounds i32, i32* %19, i64 %20
  store i32 %13, i32* %21, align 4
  %22 = shl i32 %13, 1
  %23 = icmp ugt i32 %22, 65535
  %24 = xor i32 %22, 69643
  %25 = select i1 %23, i32 %24, i32 %22
  %26 = add nuw nsw i64 %11, 1
  %27 = load i32*, i32** %6, align 8
  %28 = icmp eq i64 %26, 65535
  br i1 %28, label %9, label %10

29:                                               ; preds = %30
  ret void

30:                                               ; preds = %42, %9
  %31 = phi i64 [ 131070, %9 ], [ %45, %42 ]
  %32 = load i32*, i32** %3, align 8
  %33 = getelementptr inbounds i32, i32* %32, i64 %31
  store i32 0, i32* %33, align 4
  %34 = or i64 %31, 1
  %35 = load i32*, i32** %3, align 8
  %36 = getelementptr inbounds i32, i32* %35, i64 %34
  store i32 0, i32* %36, align 4
  %37 = add nuw nsw i64 %31, 2
  %38 = load i32*, i32** %3, align 8
  %39 = getelementptr inbounds i32, i32* %38, i64 %37
  store i32 0, i32* %39, align 4
  %40 = add nuw nsw i64 %31, 3
  %41 = icmp eq i64 %40, 262141
  br i1 %41, label %29, label %42

42:                                               ; preds = %30
  %43 = load i32*, i32** %3, align 8
  %44 = getelementptr inbounds i32, i32* %43, i64 %40
  store i32 0, i32* %44, align 4
  %45 = add nuw nsw i64 %31, 4
  br label %30
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9RSCoder16D2Ev(%class.RSCoder16* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = icmp eq i32* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = bitcast i32* %3 to i8*
  tail call void @_ZdaPv(i8* %6) #7
  br label %7

7:                                                ; preds = %5, %1
  %8 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 1
  %9 = load i32*, i32** %8, align 8
  %10 = icmp eq i32* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = bitcast i32* %9 to i8*
  tail call void @_ZdaPv(i8* %12) #7
  br label %13

13:                                               ; preds = %11, %7
  %14 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 8
  %15 = load i32*, i32** %14, align 8
  %16 = icmp eq i32* %15, null
  br i1 %16, label %19, label %17

17:                                               ; preds = %13
  %18 = bitcast i32* %15 to i8*
  tail call void @_ZdaPv(i8* %18) #7
  br label %19

19:                                               ; preds = %17, %13
  %20 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 7
  %21 = load i32*, i32** %20, align 8
  %22 = icmp eq i32* %21, null
  br i1 %22, label %25, label %23

23:                                               ; preds = %19
  %24 = bitcast i32* %21 to i8*
  tail call void @_ZdaPv(i8* %24) #7
  br label %25

25:                                               ; preds = %23, %19
  %26 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 6
  %27 = load i8*, i8** %26, align 8
  %28 = icmp eq i8* %27, null
  br i1 %28, label %30, label %29

29:                                               ; preds = %25
  tail call void @_ZdaPv(i8* nonnull %27) #7
  br label %30

30:                                               ; preds = %29, %25
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN9RSCoder164InitEjjPb(%class.RSCoder16* nocapture, i32, i32, i8* readonly) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 3
  store i32 %1, i32* %5, align 4
  %6 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 4
  store i32 %2, i32* %6, align 8
  %7 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 5
  store i32 0, i32* %7, align 4
  %8 = icmp ne i8* %3, null
  %9 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 2
  %10 = zext i1 %8 to i8
  store i8 %10, i8* %9, align 8
  br i1 %8, label %11, label %177

11:                                               ; preds = %4
  %12 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 6
  %13 = load i8*, i8** %12, align 8
  %14 = icmp eq i8* %13, null
  br i1 %14, label %18, label %15

15:                                               ; preds = %11
  tail call void @_ZdaPv(i8* nonnull %13) #7
  %16 = load i32, i32* %5, align 4
  %17 = load i32, i32* %6, align 8
  br label %18

18:                                               ; preds = %15, %11
  %19 = phi i32 [ %17, %15 ], [ %2, %11 ]
  %20 = phi i32 [ %16, %15 ], [ %1, %11 ]
  %21 = add i32 %19, %20
  %22 = zext i32 %21 to i64
  %23 = tail call i8* @_Znam(i64 %22) #7
  store i8* %23, i8** %12, align 8
  %24 = icmp eq i32 %21, 0
  br i1 %24, label %31, label %25

25:                                               ; preds = %18
  %26 = load i8, i8* %3, align 1, !range !2
  store i8 %26, i8* %23, align 1
  %27 = load i32, i32* %5, align 4
  %28 = load i32, i32* %6, align 8
  %29 = add i32 %28, %27
  %30 = icmp ugt i32 %29, 1
  br i1 %30, label %43, label %31

31:                                               ; preds = %43, %25, %18
  %32 = phi i32 [ %19, %18 ], [ %28, %25 ], [ %51, %43 ]
  %33 = phi i32 [ %20, %18 ], [ %27, %25 ], [ %50, %43 ]
  %34 = phi i32 [ 0, %18 ], [ %29, %25 ], [ %52, %43 ]
  %35 = icmp eq i32 %33, 0
  br i1 %35, label %65, label %36

36:                                               ; preds = %31
  %37 = zext i32 %33 to i64
  %38 = load i8*, i8** %12, align 8
  %39 = and i64 %37, 1
  %40 = icmp eq i32 %33, 1
  br i1 %40, label %55, label %41

41:                                               ; preds = %36
  %42 = sub nsw i64 %37, %39
  br label %146

43:                                               ; preds = %25, %43
  %44 = phi i64 [ %49, %43 ], [ 1, %25 ]
  %45 = load i8*, i8** %12, align 8
  %46 = getelementptr inbounds i8, i8* %3, i64 %44
  %47 = load i8, i8* %46, align 1, !range !2
  %48 = getelementptr inbounds i8, i8* %45, i64 %44
  store i8 %47, i8* %48, align 1
  %49 = add nuw nsw i64 %44, 1
  %50 = load i32, i32* %5, align 4
  %51 = load i32, i32* %6, align 8
  %52 = add i32 %51, %50
  %53 = zext i32 %52 to i64
  %54 = icmp ult i64 %49, %53
  br i1 %54, label %43, label %31

55:                                               ; preds = %319, %36
  %56 = phi i64 [ 0, %36 ], [ %320, %319 ]
  %57 = icmp eq i64 %39, 0
  br i1 %57, label %65, label %58

58:                                               ; preds = %55
  %59 = getelementptr inbounds i8, i8* %38, i64 %56
  %60 = load i8, i8* %59, align 1, !range !2
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %58
  %63 = load i32, i32* %7, align 4
  %64 = add i32 %63, 1
  store i32 %64, i32* %7, align 4
  br label %65

65:                                               ; preds = %55, %58, %62, %31
  %66 = icmp ult i32 %33, %34
  br i1 %66, label %67, label %160

67:                                               ; preds = %65
  %68 = load i8*, i8** %12, align 8
  %69 = zext i32 %33 to i64
  %70 = zext i32 %34 to i64
  %71 = sub nsw i64 %70, %69
  %72 = icmp ult i64 %71, 8
  br i1 %72, label %73, label %76

73:                                               ; preds = %136, %67
  %74 = phi i64 [ %69, %67 ], [ %78, %136 ]
  %75 = phi i32 [ 0, %67 ], [ %144, %136 ]
  br label %164

76:                                               ; preds = %67
  %77 = and i64 %71, -8
  %78 = add nsw i64 %77, %69
  %79 = add nsw i64 %77, -8
  %80 = lshr exact i64 %79, 3
  %81 = add nuw nsw i64 %80, 1
  %82 = and i64 %81, 1
  %83 = icmp eq i64 %79, 0
  br i1 %83, label %117, label %84

84:                                               ; preds = %76
  %85 = sub nuw nsw i64 %81, %82
  br label %86

86:                                               ; preds = %86, %84
  %87 = phi i64 [ 0, %84 ], [ %114, %86 ]
  %88 = phi <4 x i32> [ zeroinitializer, %84 ], [ %112, %86 ]
  %89 = phi <4 x i32> [ zeroinitializer, %84 ], [ %113, %86 ]
  %90 = phi i64 [ %85, %84 ], [ %115, %86 ]
  %91 = add i64 %87, %69
  %92 = getelementptr inbounds i8, i8* %68, i64 %91
  %93 = bitcast i8* %92 to <4 x i8>*
  %94 = load <4 x i8>, <4 x i8>* %93, align 1
  %95 = getelementptr inbounds i8, i8* %92, i64 4
  %96 = bitcast i8* %95 to <4 x i8>*
  %97 = load <4 x i8>, <4 x i8>* %96, align 1
  %98 = zext <4 x i8> %94 to <4 x i32>
  %99 = zext <4 x i8> %97 to <4 x i32>
  %100 = add <4 x i32> %88, %98
  %101 = add <4 x i32> %89, %99
  %102 = or i64 %87, 8
  %103 = add i64 %102, %69
  %104 = getelementptr inbounds i8, i8* %68, i64 %103
  %105 = bitcast i8* %104 to <4 x i8>*
  %106 = load <4 x i8>, <4 x i8>* %105, align 1
  %107 = getelementptr inbounds i8, i8* %104, i64 4
  %108 = bitcast i8* %107 to <4 x i8>*
  %109 = load <4 x i8>, <4 x i8>* %108, align 1
  %110 = zext <4 x i8> %106 to <4 x i32>
  %111 = zext <4 x i8> %109 to <4 x i32>
  %112 = add <4 x i32> %100, %110
  %113 = add <4 x i32> %101, %111
  %114 = add i64 %87, 16
  %115 = add i64 %90, -2
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %117, label %86, !llvm.loop !3

117:                                              ; preds = %86, %76
  %118 = phi <4 x i32> [ undef, %76 ], [ %112, %86 ]
  %119 = phi <4 x i32> [ undef, %76 ], [ %113, %86 ]
  %120 = phi i64 [ 0, %76 ], [ %114, %86 ]
  %121 = phi <4 x i32> [ zeroinitializer, %76 ], [ %112, %86 ]
  %122 = phi <4 x i32> [ zeroinitializer, %76 ], [ %113, %86 ]
  %123 = icmp eq i64 %82, 0
  br i1 %123, label %136, label %124

124:                                              ; preds = %117
  %125 = add i64 %120, %69
  %126 = getelementptr inbounds i8, i8* %68, i64 %125
  %127 = getelementptr inbounds i8, i8* %126, i64 4
  %128 = bitcast i8* %127 to <4 x i8>*
  %129 = load <4 x i8>, <4 x i8>* %128, align 1
  %130 = zext <4 x i8> %129 to <4 x i32>
  %131 = add <4 x i32> %122, %130
  %132 = bitcast i8* %126 to <4 x i8>*
  %133 = load <4 x i8>, <4 x i8>* %132, align 1
  %134 = zext <4 x i8> %133 to <4 x i32>
  %135 = add <4 x i32> %121, %134
  br label %136

136:                                              ; preds = %117, %124
  %137 = phi <4 x i32> [ %118, %117 ], [ %135, %124 ]
  %138 = phi <4 x i32> [ %119, %117 ], [ %131, %124 ]
  %139 = add <4 x i32> %138, %137
  %140 = shufflevector <4 x i32> %139, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %141 = add <4 x i32> %139, %140
  %142 = shufflevector <4 x i32> %141, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %143 = add <4 x i32> %141, %142
  %144 = extractelement <4 x i32> %143, i32 0
  %145 = icmp eq i64 %71, %77
  br i1 %145, label %160, label %73

146:                                              ; preds = %319, %41
  %147 = phi i64 [ 0, %41 ], [ %320, %319 ]
  %148 = phi i64 [ %42, %41 ], [ %321, %319 ]
  %149 = getelementptr inbounds i8, i8* %38, i64 %147
  %150 = load i8, i8* %149, align 1, !range !2
  %151 = icmp eq i8 %150, 0
  br i1 %151, label %152, label %155

152:                                              ; preds = %146
  %153 = load i32, i32* %7, align 4
  %154 = add i32 %153, 1
  store i32 %154, i32* %7, align 4
  br label %155

155:                                              ; preds = %146, %152
  %156 = or i64 %147, 1
  %157 = getelementptr inbounds i8, i8* %38, i64 %156
  %158 = load i8, i8* %157, align 1, !range !2
  %159 = icmp eq i8 %158, 0
  br i1 %159, label %316, label %319

160:                                              ; preds = %164, %136, %65
  %161 = phi i32 [ 0, %65 ], [ %144, %136 ], [ %170, %164 ]
  %162 = load i32, i32* %7, align 4
  %163 = icmp ugt i32 %162, %161
  br i1 %163, label %314, label %173

164:                                              ; preds = %73, %164
  %165 = phi i64 [ %171, %164 ], [ %74, %73 ]
  %166 = phi i32 [ %170, %164 ], [ %75, %73 ]
  %167 = getelementptr inbounds i8, i8* %68, i64 %165
  %168 = load i8, i8* %167, align 1, !range !2
  %169 = zext i8 %168 to i32
  %170 = add i32 %166, %169
  %171 = add nuw nsw i64 %165, 1
  %172 = icmp eq i64 %171, %70
  br i1 %172, label %160, label %164, !llvm.loop !5

173:                                              ; preds = %160
  %174 = icmp eq i32 %162, 0
  %175 = icmp eq i32 %161, 0
  %176 = or i1 %175, %174
  br i1 %176, label %314, label %177

177:                                              ; preds = %173, %4
  %178 = phi i32 [ %32, %173 ], [ %2, %4 ]
  %179 = phi i32 [ %33, %173 ], [ %1, %4 ]
  %180 = add i32 %178, %179
  %181 = icmp ugt i32 %180, 65535
  %182 = icmp ugt i32 %178, %179
  %183 = or i1 %182, %181
  %184 = icmp eq i32 %179, 0
  %185 = or i1 %184, %183
  %186 = icmp eq i32 %178, 0
  %187 = or i1 %186, %185
  br i1 %187, label %314, label %188

188:                                              ; preds = %177
  %189 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 7
  %190 = load i32*, i32** %189, align 8
  %191 = icmp eq i32* %190, null
  br i1 %191, label %194, label %192

192:                                              ; preds = %188
  %193 = bitcast i32* %190 to i8*
  tail call void @_ZdaPv(i8* %193) #7
  br label %194

194:                                              ; preds = %192, %188
  %195 = load i8, i8* %9, align 8, !range !2
  %196 = icmp eq i8 %195, 0
  br i1 %196, label %264, label %197

197:                                              ; preds = %194
  %198 = load i32, i32* %7, align 4
  %199 = load i32, i32* %5, align 4
  %200 = mul i32 %199, %198
  %201 = zext i32 %200 to i64
  %202 = shl nuw nsw i64 %201, 2
  %203 = tail call i8* @_Znam(i64 %202) #7
  %204 = bitcast i32** %189 to i8**
  store i8* %203, i8** %204, align 8
  %205 = icmp eq i32 %199, 0
  br i1 %205, label %263, label %206

206:                                              ; preds = %197
  %207 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 6
  %208 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 0
  %209 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 1
  br label %210

210:                                              ; preds = %256, %206
  %211 = phi i32 [ %199, %206 ], [ %257, %256 ]
  %212 = phi i64 [ 0, %206 ], [ %260, %256 ]
  %213 = phi i32 [ 0, %206 ], [ %259, %256 ]
  %214 = phi i32 [ %199, %206 ], [ %258, %256 ]
  %215 = load i8*, i8** %207, align 8
  %216 = getelementptr inbounds i8, i8* %215, i64 %212
  %217 = load i8, i8* %216, align 1, !range !2
  %218 = icmp eq i8 %217, 0
  br i1 %218, label %219, label %256

219:                                              ; preds = %210, %219
  %220 = phi i32 [ %225, %219 ], [ %214, %210 ]
  %221 = zext i32 %220 to i64
  %222 = getelementptr inbounds i8, i8* %215, i64 %221
  %223 = load i8, i8* %222, align 1, !range !2
  %224 = icmp eq i8 %223, 0
  %225 = add i32 %220, 1
  br i1 %224, label %219, label %226

226:                                              ; preds = %219
  %227 = icmp eq i32 %211, 0
  br i1 %227, label %228, label %231

228:                                              ; preds = %246, %226
  %229 = phi i32 [ 0, %226 ], [ %254, %246 ]
  %230 = add i32 %213, 1
  br label %256

231:                                              ; preds = %226, %246
  %232 = phi i32 [ %254, %246 ], [ %211, %226 ]
  %233 = phi i32 [ %253, %246 ], [ 0, %226 ]
  %234 = xor i32 %233, %220
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %246, label %236

236:                                              ; preds = %231
  %237 = load i32*, i32** %208, align 8
  %238 = load i32*, i32** %209, align 8
  %239 = zext i32 %234 to i64
  %240 = getelementptr inbounds i32, i32* %238, i64 %239
  %241 = load i32, i32* %240, align 4
  %242 = sub i32 65535, %241
  %243 = zext i32 %242 to i64
  %244 = getelementptr inbounds i32, i32* %237, i64 %243
  %245 = load i32, i32* %244, align 4
  br label %246

246:                                              ; preds = %236, %231
  %247 = phi i32 [ %245, %236 ], [ 0, %231 ]
  %248 = load i32*, i32** %189, align 8
  %249 = mul i32 %232, %213
  %250 = add i32 %249, %233
  %251 = zext i32 %250 to i64
  %252 = getelementptr inbounds i32, i32* %248, i64 %251
  store i32 %247, i32* %252, align 4
  %253 = add nuw i32 %233, 1
  %254 = load i32, i32* %5, align 4
  %255 = icmp ult i32 %253, %254
  br i1 %255, label %231, label %228

256:                                              ; preds = %228, %210
  %257 = phi i32 [ %211, %210 ], [ %229, %228 ]
  %258 = phi i32 [ %214, %210 ], [ %225, %228 ]
  %259 = phi i32 [ %213, %210 ], [ %230, %228 ]
  %260 = add nuw nsw i64 %212, 1
  %261 = zext i32 %257 to i64
  %262 = icmp ult i64 %260, %261
  br i1 %262, label %210, label %263

263:                                              ; preds = %256, %197
  tail call void @_ZN9RSCoder1619InvertDecoderMatrixEv(%class.RSCoder16* %0)
  br label %314

264:                                              ; preds = %194
  %265 = load i32, i32* %6, align 8
  %266 = load i32, i32* %5, align 4
  %267 = mul i32 %266, %265
  %268 = zext i32 %267 to i64
  %269 = shl nuw nsw i64 %268, 2
  %270 = tail call i8* @_Znam(i64 %269) #7
  %271 = bitcast i32** %189 to i8**
  store i8* %270, i8** %271, align 8
  %272 = icmp eq i32 %265, 0
  br i1 %272, label %314, label %273

273:                                              ; preds = %264
  %274 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 0
  %275 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 1
  br label %276

276:                                              ; preds = %283, %273
  %277 = phi i32 [ %265, %273 ], [ %284, %283 ]
  %278 = phi i32 [ %266, %273 ], [ %285, %283 ]
  %279 = phi i32 [ 0, %273 ], [ %286, %283 ]
  %280 = icmp eq i32 %278, 0
  br i1 %280, label %283, label %288

281:                                              ; preds = %304
  %282 = load i32, i32* %6, align 8
  br label %283

283:                                              ; preds = %281, %276
  %284 = phi i32 [ %282, %281 ], [ %277, %276 ]
  %285 = phi i32 [ %312, %281 ], [ 0, %276 ]
  %286 = add nuw i32 %279, 1
  %287 = icmp ult i32 %286, %284
  br i1 %287, label %276, label %314

288:                                              ; preds = %276, %304
  %289 = phi i32 [ %312, %304 ], [ %278, %276 ]
  %290 = phi i32 [ %311, %304 ], [ 0, %276 ]
  %291 = add i32 %289, %279
  %292 = xor i32 %291, %290
  %293 = icmp eq i32 %292, 0
  br i1 %293, label %304, label %294

294:                                              ; preds = %288
  %295 = load i32*, i32** %274, align 8
  %296 = load i32*, i32** %275, align 8
  %297 = zext i32 %292 to i64
  %298 = getelementptr inbounds i32, i32* %296, i64 %297
  %299 = load i32, i32* %298, align 4
  %300 = sub i32 65535, %299
  %301 = zext i32 %300 to i64
  %302 = getelementptr inbounds i32, i32* %295, i64 %301
  %303 = load i32, i32* %302, align 4
  br label %304

304:                                              ; preds = %294, %288
  %305 = phi i32 [ %303, %294 ], [ 0, %288 ]
  %306 = load i32*, i32** %189, align 8
  %307 = mul i32 %289, %279
  %308 = add i32 %307, %290
  %309 = zext i32 %308 to i64
  %310 = getelementptr inbounds i32, i32* %306, i64 %309
  store i32 %305, i32* %310, align 4
  %311 = add nuw i32 %290, 1
  %312 = load i32, i32* %5, align 4
  %313 = icmp ult i32 %311, %312
  br i1 %313, label %288, label %281

314:                                              ; preds = %283, %264, %263, %177, %173, %160
  %315 = phi i1 [ false, %160 ], [ false, %173 ], [ false, %177 ], [ true, %263 ], [ true, %264 ], [ true, %283 ]
  ret i1 %315

316:                                              ; preds = %155
  %317 = load i32, i32* %7, align 4
  %318 = add i32 %317, 1
  store i32 %318, i32* %7, align 4
  br label %319

319:                                              ; preds = %316, %155
  %320 = add nuw nsw i64 %147, 2
  %321 = add i64 %148, -2
  %322 = icmp eq i64 %321, 0
  br i1 %322, label %55, label %146
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN9RSCoder1617MakeDecoderMatrixEv(%class.RSCoder16* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 6
  %7 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 0
  %8 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 1
  %9 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 7
  br label %11

10:                                               ; preds = %57, %1
  ret void

11:                                               ; preds = %5, %57
  %12 = phi i32 [ %3, %5 ], [ %58, %57 ]
  %13 = phi i64 [ 0, %5 ], [ %61, %57 ]
  %14 = phi i32 [ 0, %5 ], [ %60, %57 ]
  %15 = phi i32 [ %3, %5 ], [ %59, %57 ]
  %16 = load i8*, i8** %6, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 %13
  %18 = load i8, i8* %17, align 1, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %57

20:                                               ; preds = %11, %20
  %21 = phi i32 [ %26, %20 ], [ %15, %11 ]
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %16, i64 %22
  %24 = load i8, i8* %23, align 1, !range !2
  %25 = icmp eq i8 %24, 0
  %26 = add i32 %21, 1
  br i1 %25, label %20, label %27

27:                                               ; preds = %20
  %28 = icmp eq i32 %12, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %47, %27
  %30 = phi i32 [ %12, %27 ], [ %55, %47 ]
  %31 = add i32 %14, 1
  br label %57

32:                                               ; preds = %27, %47
  %33 = phi i32 [ %55, %47 ], [ %12, %27 ]
  %34 = phi i32 [ %54, %47 ], [ 0, %27 ]
  %35 = xor i32 %34, %21
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %47, label %37

37:                                               ; preds = %32
  %38 = load i32*, i32** %7, align 8
  %39 = load i32*, i32** %8, align 8
  %40 = zext i32 %35 to i64
  %41 = getelementptr inbounds i32, i32* %39, i64 %40
  %42 = load i32, i32* %41, align 4
  %43 = sub i32 65535, %42
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i32, i32* %38, i64 %44
  %46 = load i32, i32* %45, align 4
  br label %47

47:                                               ; preds = %32, %37
  %48 = phi i32 [ %46, %37 ], [ 0, %32 ]
  %49 = load i32*, i32** %9, align 8
  %50 = mul i32 %33, %14
  %51 = add i32 %50, %34
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds i32, i32* %49, i64 %52
  store i32 %48, i32* %53, align 4
  %54 = add nuw i32 %34, 1
  %55 = load i32, i32* %2, align 4
  %56 = icmp ult i32 %54, %55
  br i1 %56, label %32, label %29

57:                                               ; preds = %11, %29
  %58 = phi i32 [ %12, %11 ], [ %30, %29 ]
  %59 = phi i32 [ %15, %11 ], [ %26, %29 ]
  %60 = phi i32 [ %14, %11 ], [ %31, %29 ]
  %61 = add nuw nsw i64 %13, 1
  %62 = zext i32 %58 to i64
  %63 = icmp ult i64 %61, %62
  br i1 %63, label %11, label %10
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9RSCoder1619InvertDecoderMatrixEv(%class.RSCoder16* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 5
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = mul i32 %5, %3
  %7 = zext i32 %6 to i64
  %8 = shl nuw nsw i64 %7, 2
  %9 = tail call i8* @_Znam(i64 %8) #7
  %10 = bitcast i8* %9 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %9, i8 0, i64 %8, i1 false)
  %11 = icmp eq i32 %3, 0
  br i1 %11, label %39, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 6
  %14 = load i8*, i8** %13, align 8
  %15 = and i32 %3, 1
  %16 = icmp eq i32 %3, 1
  br i1 %16, label %23, label %17

17:                                               ; preds = %12
  %18 = sub i32 %3, %15
  br label %19

19:                                               ; preds = %273, %17
  %20 = phi i32 [ 0, %17 ], [ %272, %273 ]
  %21 = phi i32 [ 0, %17 ], [ %278, %273 ]
  %22 = phi i32 [ %18, %17 ], [ %279, %273 ]
  br label %46

23:                                               ; preds = %273, %12
  %24 = phi i32 [ 0, %12 ], [ %272, %273 ]
  %25 = phi i32 [ 0, %12 ], [ %278, %273 ]
  %26 = icmp eq i32 %15, 0
  br i1 %26, label %39, label %27

27:                                               ; preds = %23, %27
  %28 = phi i32 [ %33, %27 ], [ %24, %23 ]
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %14, i64 %29
  %31 = load i8, i8* %30, align 1, !range !2
  %32 = icmp eq i8 %31, 0
  %33 = add i32 %28, 1
  br i1 %32, label %34, label %27

34:                                               ; preds = %27
  %35 = mul i32 %25, %5
  %36 = add i32 %28, %35
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i32, i32* %10, i64 %37
  store i32 1, i32* %38, align 4
  br label %39

39:                                               ; preds = %34, %23, %1
  %40 = icmp eq i32 %5, 0
  br i1 %40, label %246, label %41

41:                                               ; preds = %39
  %42 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 6
  %43 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 7
  %44 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 0
  %45 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 1
  br label %59

46:                                               ; preds = %46, %19
  %47 = phi i32 [ %52, %46 ], [ %20, %19 ]
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i8, i8* %14, i64 %48
  %50 = load i8, i8* %49, align 1, !range !2
  %51 = icmp eq i8 %50, 0
  %52 = add i32 %47, 1
  br i1 %51, label %53, label %46

53:                                               ; preds = %46
  %54 = mul i32 %21, %5
  %55 = add i32 %47, %54
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds i32, i32* %10, i64 %56
  store i32 1, i32* %57, align 4
  %58 = or i32 %21, 1
  br label %266

59:                                               ; preds = %41, %176
  %60 = phi i32 [ %5, %41 ], [ %177, %176 ]
  %61 = phi i32 [ %3, %41 ], [ %178, %176 ]
  %62 = phi i32 [ %3, %41 ], [ %179, %176 ]
  %63 = phi i32 [ 0, %41 ], [ %181, %176 ]
  %64 = phi i32 [ 0, %41 ], [ %180, %176 ]
  %65 = load i8*, i8** %42, align 8
  %66 = zext i32 %63 to i64
  %67 = getelementptr inbounds i8, i8* %65, i64 %66
  %68 = load i8, i8* %67, align 1, !range !2
  %69 = icmp ne i8 %68, 0
  %70 = icmp ult i32 %63, %60
  %71 = and i1 %70, %69
  br i1 %71, label %72, label %108

72:                                               ; preds = %59
  %73 = zext i32 %62 to i64
  br label %74

74:                                               ; preds = %72, %81
  %75 = phi i32 [ %62, %72 ], [ %83, %81 ]
  %76 = phi i64 [ %66, %72 ], [ %91, %81 ]
  %77 = icmp eq i32 %75, 0
  %78 = trunc i64 %76 to i32
  br i1 %77, label %81, label %92

79:                                               ; preds = %92
  %80 = trunc i64 %76 to i32
  br label %81

81:                                               ; preds = %74, %79
  %82 = phi i32 [ %80, %79 ], [ %78, %74 ]
  %83 = phi i32 [ %62, %79 ], [ 0, %74 ]
  %84 = add i32 %82, 1
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %65, i64 %85
  %87 = load i8, i8* %86, align 1, !range !2
  %88 = icmp ne i8 %87, 0
  %89 = icmp ult i32 %84, %60
  %90 = and i1 %89, %88
  %91 = add nuw nsw i64 %76, 1
  br i1 %90, label %74, label %106

92:                                               ; preds = %74, %92
  %93 = phi i64 [ %104, %92 ], [ 0, %74 ]
  %94 = load i32*, i32** %43, align 8
  %95 = trunc i64 %93 to i32
  %96 = mul i32 %60, %95
  %97 = add i32 %96, %78
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds i32, i32* %94, i64 %98
  %100 = load i32, i32* %99, align 4
  %101 = getelementptr inbounds i32, i32* %10, i64 %98
  %102 = load i32, i32* %101, align 4
  %103 = xor i32 %102, %100
  store i32 %103, i32* %101, align 4
  %104 = add nuw nsw i64 %93, 1
  %105 = icmp ult i64 %104, %73
  br i1 %105, label %92, label %79

106:                                              ; preds = %81
  %107 = zext i32 %84 to i64
  br label %108

108:                                              ; preds = %106, %59
  %109 = phi i32 [ %63, %59 ], [ %84, %106 ]
  %110 = phi i64 [ %66, %59 ], [ %107, %106 ]
  %111 = icmp eq i32 %109, %60
  br i1 %111, label %246, label %112

112:                                              ; preds = %108
  %113 = load i32*, i32** %43, align 8
  %114 = mul i32 %60, %64
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds i32, i32* %113, i64 %115
  %117 = getelementptr inbounds i32, i32* %10, i64 %115
  %118 = getelementptr inbounds i32, i32* %116, i64 %110
  %119 = load i32, i32* %118, align 4
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %131, label %121

121:                                              ; preds = %112
  %122 = load i32*, i32** %44, align 8
  %123 = load i32*, i32** %45, align 8
  %124 = zext i32 %119 to i64
  %125 = getelementptr inbounds i32, i32* %123, i64 %124
  %126 = load i32, i32* %125, align 4
  %127 = sub i32 65535, %126
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds i32, i32* %122, i64 %128
  %130 = load i32, i32* %129, align 4
  br label %131

131:                                              ; preds = %112, %121
  %132 = phi i32 [ %130, %121 ], [ 0, %112 ]
  %133 = icmp eq i32 %60, 0
  br i1 %133, label %138, label %134

134:                                              ; preds = %131
  %135 = zext i32 %132 to i64
  br label %144

136:                                              ; preds = %144
  %137 = load i32, i32* %2, align 4
  br label %138

138:                                              ; preds = %136, %131
  %139 = phi i32 [ %173, %136 ], [ %60, %131 ]
  %140 = phi i32 [ %137, %136 ], [ %61, %131 ]
  %141 = phi i32 [ %173, %136 ], [ 0, %131 ]
  %142 = phi i32 [ %137, %136 ], [ %62, %131 ]
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %176, label %183

144:                                              ; preds = %134, %144
  %145 = phi i64 [ 0, %134 ], [ %172, %144 ]
  %146 = getelementptr inbounds i32, i32* %116, i64 %145
  %147 = load i32, i32* %146, align 4
  %148 = load i32*, i32** %44, align 8
  %149 = load i32*, i32** %45, align 8
  %150 = zext i32 %147 to i64
  %151 = getelementptr inbounds i32, i32* %149, i64 %150
  %152 = load i32, i32* %151, align 4
  %153 = getelementptr inbounds i32, i32* %149, i64 %135
  %154 = load i32, i32* %153, align 4
  %155 = add i32 %154, %152
  %156 = zext i32 %155 to i64
  %157 = getelementptr inbounds i32, i32* %148, i64 %156
  %158 = load i32, i32* %157, align 4
  store i32 %158, i32* %146, align 4
  %159 = getelementptr inbounds i32, i32* %117, i64 %145
  %160 = load i32, i32* %159, align 4
  %161 = load i32*, i32** %44, align 8
  %162 = load i32*, i32** %45, align 8
  %163 = zext i32 %160 to i64
  %164 = getelementptr inbounds i32, i32* %162, i64 %163
  %165 = load i32, i32* %164, align 4
  %166 = getelementptr inbounds i32, i32* %162, i64 %135
  %167 = load i32, i32* %166, align 4
  %168 = add i32 %167, %165
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds i32, i32* %161, i64 %169
  %171 = load i32, i32* %170, align 4
  store i32 %171, i32* %159, align 4
  %172 = add nuw nsw i64 %145, 1
  %173 = load i32, i32* %4, align 4
  %174 = zext i32 %173 to i64
  %175 = icmp ult i64 %172, %174
  br i1 %175, label %144, label %136

176:                                              ; preds = %240, %138
  %177 = phi i32 [ %139, %138 ], [ %241, %240 ]
  %178 = phi i32 [ %140, %138 ], [ %242, %240 ]
  %179 = phi i32 [ 0, %138 ], [ %242, %240 ]
  %180 = add i32 %64, 1
  %181 = add i32 %109, 1
  %182 = icmp ult i32 %181, %177
  br i1 %182, label %59, label %246

183:                                              ; preds = %138, %240
  %184 = phi i32 [ %241, %240 ], [ %139, %138 ]
  %185 = phi i32 [ %242, %240 ], [ %140, %138 ]
  %186 = phi i32 [ %243, %240 ], [ %141, %138 ]
  %187 = phi i32 [ %244, %240 ], [ 0, %138 ]
  %188 = icmp eq i32 %187, %64
  br i1 %188, label %240, label %189

189:                                              ; preds = %183
  %190 = load i32*, i32** %43, align 8
  %191 = mul i32 %186, %187
  %192 = zext i32 %191 to i64
  %193 = getelementptr inbounds i32, i32* %190, i64 %192
  %194 = getelementptr inbounds i32, i32* %10, i64 %192
  %195 = icmp eq i32 %186, 0
  br i1 %195, label %240, label %196

196:                                              ; preds = %189
  %197 = getelementptr inbounds i32, i32* %193, i64 %110
  %198 = load i32, i32* %197, align 4
  %199 = zext i32 %198 to i64
  br label %200

200:                                              ; preds = %196, %200
  %201 = phi i64 [ 0, %196 ], [ %234, %200 ]
  %202 = getelementptr inbounds i32, i32* %116, i64 %201
  %203 = load i32, i32* %202, align 4
  %204 = load i32*, i32** %44, align 8
  %205 = load i32*, i32** %45, align 8
  %206 = zext i32 %203 to i64
  %207 = getelementptr inbounds i32, i32* %205, i64 %206
  %208 = load i32, i32* %207, align 4
  %209 = getelementptr inbounds i32, i32* %205, i64 %199
  %210 = load i32, i32* %209, align 4
  %211 = add i32 %210, %208
  %212 = zext i32 %211 to i64
  %213 = getelementptr inbounds i32, i32* %204, i64 %212
  %214 = load i32, i32* %213, align 4
  %215 = getelementptr inbounds i32, i32* %193, i64 %201
  %216 = load i32, i32* %215, align 4
  %217 = xor i32 %216, %214
  store i32 %217, i32* %215, align 4
  %218 = getelementptr inbounds i32, i32* %117, i64 %201
  %219 = load i32, i32* %218, align 4
  %220 = load i32*, i32** %44, align 8
  %221 = load i32*, i32** %45, align 8
  %222 = zext i32 %219 to i64
  %223 = getelementptr inbounds i32, i32* %221, i64 %222
  %224 = load i32, i32* %223, align 4
  %225 = getelementptr inbounds i32, i32* %221, i64 %199
  %226 = load i32, i32* %225, align 4
  %227 = add i32 %226, %224
  %228 = zext i32 %227 to i64
  %229 = getelementptr inbounds i32, i32* %220, i64 %228
  %230 = load i32, i32* %229, align 4
  %231 = getelementptr inbounds i32, i32* %194, i64 %201
  %232 = load i32, i32* %231, align 4
  %233 = xor i32 %232, %230
  store i32 %233, i32* %231, align 4
  %234 = add nuw nsw i64 %201, 1
  %235 = load i32, i32* %4, align 4
  %236 = zext i32 %235 to i64
  %237 = icmp ult i64 %234, %236
  br i1 %237, label %200, label %238

238:                                              ; preds = %200
  %239 = load i32, i32* %2, align 4
  br label %240

240:                                              ; preds = %238, %189, %183
  %241 = phi i32 [ %235, %238 ], [ %184, %189 ], [ %184, %183 ]
  %242 = phi i32 [ %239, %238 ], [ %185, %189 ], [ %185, %183 ]
  %243 = phi i32 [ %235, %238 ], [ 0, %189 ], [ %186, %183 ]
  %244 = add nuw i32 %187, 1
  %245 = icmp ult i32 %244, %242
  br i1 %245, label %183, label %176

246:                                              ; preds = %176, %108, %39
  %247 = phi i32 [ 0, %39 ], [ %177, %176 ], [ %60, %108 ]
  %248 = phi i32 [ %3, %39 ], [ %178, %176 ], [ %61, %108 ]
  %249 = mul i32 %247, %248
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %265, label %251

251:                                              ; preds = %246
  %252 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 7
  br label %253

253:                                              ; preds = %251, %253
  %254 = phi i64 [ 0, %251 ], [ %259, %253 ]
  %255 = getelementptr inbounds i32, i32* %10, i64 %254
  %256 = load i32, i32* %255, align 4
  %257 = load i32*, i32** %252, align 8
  %258 = getelementptr inbounds i32, i32* %257, i64 %254
  store i32 %256, i32* %258, align 4
  %259 = add nuw nsw i64 %254, 1
  %260 = load i32, i32* %2, align 4
  %261 = load i32, i32* %4, align 4
  %262 = mul i32 %261, %260
  %263 = zext i32 %262 to i64
  %264 = icmp ult i64 %259, %263
  br i1 %264, label %253, label %265

265:                                              ; preds = %253, %246
  tail call void @_ZdaPv(i8* nonnull %9) #7
  ret void

266:                                              ; preds = %266, %53
  %267 = phi i32 [ %272, %266 ], [ %52, %53 ]
  %268 = zext i32 %267 to i64
  %269 = getelementptr inbounds i8, i8* %14, i64 %268
  %270 = load i8, i8* %269, align 1, !range !2
  %271 = icmp eq i8 %270, 0
  %272 = add i32 %267, 1
  br i1 %271, label %273, label %266

273:                                              ; preds = %266
  %274 = mul i32 %58, %5
  %275 = add i32 %267, %274
  %276 = zext i32 %275 to i64
  %277 = getelementptr inbounds i32, i32* %10, i64 %276
  store i32 1, i32* %277, align 4
  %278 = add nuw i32 %21, 2
  %279 = add i32 %22, -2
  %280 = icmp eq i32 %279, 0
  br i1 %280, label %23, label %19
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN9RSCoder1617MakeEncoderMatrixEv(%class.RSCoder16* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %16, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 3
  %7 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 0
  %8 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 1
  %9 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 7
  %10 = load i32, i32* %6, align 4
  br label %11

11:                                               ; preds = %5, %19
  %12 = phi i32 [ %3, %5 ], [ %20, %19 ]
  %13 = phi i32 [ %10, %5 ], [ %21, %19 ]
  %14 = phi i32 [ 0, %5 ], [ %22, %19 ]
  %15 = icmp eq i32 %13, 0
  br i1 %15, label %19, label %24

16:                                               ; preds = %19, %1
  ret void

17:                                               ; preds = %40
  %18 = load i32, i32* %2, align 8
  br label %19

19:                                               ; preds = %17, %11
  %20 = phi i32 [ %18, %17 ], [ %12, %11 ]
  %21 = phi i32 [ %48, %17 ], [ 0, %11 ]
  %22 = add nuw i32 %14, 1
  %23 = icmp ult i32 %22, %20
  br i1 %23, label %11, label %16

24:                                               ; preds = %11, %40
  %25 = phi i32 [ %48, %40 ], [ %13, %11 ]
  %26 = phi i32 [ %47, %40 ], [ 0, %11 ]
  %27 = add i32 %25, %14
  %28 = xor i32 %27, %26
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %40, label %30

30:                                               ; preds = %24
  %31 = load i32*, i32** %7, align 8
  %32 = load i32*, i32** %8, align 8
  %33 = zext i32 %28 to i64
  %34 = getelementptr inbounds i32, i32* %32, i64 %33
  %35 = load i32, i32* %34, align 4
  %36 = sub i32 65535, %35
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i32, i32* %31, i64 %37
  %39 = load i32, i32* %38, align 4
  br label %40

40:                                               ; preds = %24, %30
  %41 = phi i32 [ %39, %30 ], [ 0, %24 ]
  %42 = load i32*, i32** %9, align 8
  %43 = mul i32 %25, %14
  %44 = add i32 %43, %26
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds i32, i32* %42, i64 %45
  store i32 %41, i32* %46, align 4
  %47 = add nuw i32 %26, 1
  %48 = load i32, i32* %6, align 4
  %49 = icmp ult i32 %47, %48
  br i1 %49, label %24, label %17
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9RSCoder169UpdateECCEjjPKhPhm(%class.RSCoder16* nocapture, i32, i32, i8* nocapture readonly, i8* nocapture, i64) local_unnamed_addr #1 align 2 {
  %7 = icmp eq i32 %1, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %6
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 0, i64 %5, i1 false)
  br label %9

9:                                                ; preds = %8, %6
  %10 = icmp eq i32 %2, 0
  br i1 %10, label %11, label %46

11:                                               ; preds = %9
  %12 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 9
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %13, %5
  br i1 %14, label %28, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 8
  %17 = load i32*, i32** %16, align 8
  %18 = icmp eq i32* %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %15
  %20 = bitcast i32* %17 to i8*
  tail call void @_ZdaPv(i8* %20) #7
  br label %21

21:                                               ; preds = %19, %15
  %22 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %5, i64 4)
  %23 = extractvalue { i64, i1 } %22, 1
  %24 = extractvalue { i64, i1 } %22, 0
  %25 = select i1 %23, i64 -1, i64 %24
  %26 = tail call i8* @_Znam(i64 %25) #7
  %27 = bitcast i32** %16 to i8**
  store i8* %26, i8** %27, align 8
  store i64 %5, i64* %12, align 8
  br label %28

28:                                               ; preds = %21, %11
  %29 = icmp eq i64 %5, 0
  br i1 %29, label %46, label %30

30:                                               ; preds = %28
  %31 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 1
  %32 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 8
  br label %33

33:                                               ; preds = %30, %33
  %34 = phi i64 [ 0, %30 ], [ %44, %33 ]
  %35 = load i32*, i32** %31, align 8
  %36 = getelementptr inbounds i8, i8* %3, i64 %34
  %37 = bitcast i8* %36 to i16*
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i64
  %40 = getelementptr inbounds i32, i32* %35, i64 %39
  %41 = load i32, i32* %40, align 4
  %42 = load i32*, i32** %32, align 8
  %43 = getelementptr inbounds i32, i32* %42, i64 %34
  store i32 %41, i32* %43, align 4
  %44 = add i64 %34, 2
  %45 = icmp ult i64 %44, %5
  br i1 %45, label %33, label %46

46:                                               ; preds = %33, %28, %9
  %47 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 1
  %48 = load i32*, i32** %47, align 8
  %49 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 7
  %50 = load i32*, i32** %49, align 8
  %51 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 3
  %52 = load i32, i32* %51, align 4
  %53 = mul i32 %52, %2
  %54 = add i32 %53, %1
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds i32, i32* %50, i64 %55
  %57 = load i32, i32* %56, align 4
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i32, i32* %48, i64 %58
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i64 %5, 0
  br i1 %61, label %82, label %62

62:                                               ; preds = %46
  %63 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 0
  %64 = getelementptr inbounds %class.RSCoder16, %class.RSCoder16* %0, i64 0, i32 8
  br label %65

65:                                               ; preds = %62, %65
  %66 = phi i64 [ 0, %62 ], [ %80, %65 ]
  %67 = load i32*, i32** %63, align 8
  %68 = load i32*, i32** %64, align 8
  %69 = getelementptr inbounds i32, i32* %68, i64 %66
  %70 = load i32, i32* %69, align 4
  %71 = add i32 %70, %60
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds i32, i32* %67, i64 %72
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds i8, i8* %4, i64 %66
  %76 = bitcast i8* %75 to i16*
  %77 = load i16, i16* %76, align 2
  %78 = trunc i32 %74 to i16
  %79 = xor i16 %77, %78
  store i16 %79, i16* %76, align 2
  %80 = add i64 %66, 2
  %81 = icmp ult i64 %80, %5
  br i1 %81, label %65, label %82

82:                                               ; preds = %65, %46
  ret void
}

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = distinct !{!5, !6, !4}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
