; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/x86/vp9_quantize_sse2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/x86/vp9_quantize_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_quantize_fp_sse2(i32* nocapture readonly, i64, i32, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readnone, i16* nocapture readonly) local_unnamed_addr #0 {
  %12 = getelementptr inbounds i32, i32* %0, i64 %1
  %13 = getelementptr inbounds i16, i16* %10, i64 %1
  %14 = getelementptr inbounds i32, i32* %5, i64 %1
  %15 = getelementptr inbounds i32, i32* %6, i64 %1
  %16 = bitcast i16* %3 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 16
  %18 = bitcast i16* %4 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 16
  %20 = bitcast i16* %7 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 16
  %22 = bitcast i32* %0 to <4 x i32>*
  %23 = load <4 x i32>, <4 x i32>* %22, align 16
  %24 = getelementptr inbounds i32, i32* %0, i64 4
  %25 = bitcast i32* %24 to <4 x i32>*
  %26 = load <4 x i32>, <4 x i32>* %25, align 16
  %27 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %23, <4 x i32> %26) #4
  %28 = getelementptr inbounds i32, i32* %0, i64 8
  %29 = bitcast i32* %28 to <4 x i32>*
  %30 = load <4 x i32>, <4 x i32>* %29, align 16
  %31 = getelementptr inbounds i32, i32* %0, i64 12
  %32 = bitcast i32* %31 to <4 x i32>*
  %33 = load <4 x i32>, <4 x i32>* %32, align 16
  %34 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %30, <4 x i32> %33) #4
  %35 = ashr <8 x i16> %27, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %36 = ashr <8 x i16> %34, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %37 = xor <8 x i16> %35, %27
  %38 = xor <8 x i16> %36, %34
  %39 = sub <8 x i16> %37, %35
  %40 = sub <8 x i16> %38, %36
  %41 = bitcast <2 x i64> %17 to <8 x i16>
  %42 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %39, <8 x i16> %41) #4
  %43 = shufflevector <2 x i64> %17, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %44 = bitcast <2 x i64> %43 to <8 x i16>
  %45 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %40, <8 x i16> %44) #4
  %46 = bitcast <2 x i64> %19 to <8 x i16>
  %47 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %42, <8 x i16> %46) #4
  %48 = shufflevector <2 x i64> %19, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %49 = bitcast <2 x i64> %48 to <8 x i16>
  %50 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %45, <8 x i16> %49) #4
  %51 = xor <8 x i16> %47, %35
  %52 = xor <8 x i16> %50, %36
  %53 = sub <8 x i16> %51, %35
  %54 = sub <8 x i16> %52, %36
  %55 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %53, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %56 = shufflevector <8 x i16> %53, <8 x i16> %55, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %57 = shufflevector <8 x i16> %53, <8 x i16> %55, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %58 = bitcast i32* %5 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %58, align 16
  %59 = getelementptr inbounds i32, i32* %5, i64 4
  %60 = bitcast i32* %59 to <8 x i16>*
  store <8 x i16> %57, <8 x i16>* %60, align 16
  %61 = getelementptr inbounds i32, i32* %5, i64 8
  %62 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %54, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %63 = shufflevector <8 x i16> %54, <8 x i16> %62, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %64 = shufflevector <8 x i16> %54, <8 x i16> %62, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %65 = bitcast i32* %61 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %65, align 16
  %66 = getelementptr inbounds i32, i32* %5, i64 12
  %67 = bitcast i32* %66 to <8 x i16>*
  store <8 x i16> %64, <8 x i16>* %67, align 16
  %68 = bitcast <2 x i64> %21 to <8 x i16>
  %69 = mul <8 x i16> %53, %68
  %70 = shufflevector <2 x i64> %21, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %71 = bitcast <2 x i64> %70 to <8 x i16>
  %72 = mul <8 x i16> %54, %71
  %73 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %69, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %74 = shufflevector <8 x i16> %69, <8 x i16> %73, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %75 = shufflevector <8 x i16> %69, <8 x i16> %73, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %76 = bitcast i32* %6 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 16
  %77 = getelementptr inbounds i32, i32* %6, i64 4
  %78 = bitcast i32* %77 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %78, align 16
  %79 = getelementptr inbounds i32, i32* %6, i64 8
  %80 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %72, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %81 = shufflevector <8 x i16> %72, <8 x i16> %80, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %82 = shufflevector <8 x i16> %72, <8 x i16> %80, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %83 = bitcast i32* %79 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %83, align 16
  %84 = getelementptr inbounds i32, i32* %6, i64 12
  %85 = bitcast i32* %84 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %85, align 16
  %86 = icmp ne <8 x i16> %69, zeroinitializer
  %87 = icmp ne <8 x i16> %72, zeroinitializer
  %88 = sext <8 x i1> %86 to <8 x i16>
  %89 = sext <8 x i1> %87 to <8 x i16>
  %90 = bitcast i16* %10 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 16
  %92 = getelementptr inbounds i16, i16* %10, i64 8
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 16
  %95 = sub <8 x i16> %91, %88
  %96 = sub <8 x i16> %94, %89
  %97 = and <8 x i16> %95, %88
  %98 = and <8 x i16> %96, %89
  %99 = icmp sgt <8 x i16> %97, %98
  %100 = select <8 x i1> %99, <8 x i16> %97, <8 x i16> %98
  %101 = bitcast <8 x i16> %100 to <2 x i64>
  %102 = sub i64 16, %1
  %103 = ashr <8 x i16> %71, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %104 = icmp slt i64 %102, 0
  br i1 %104, label %105, label %212

105:                                              ; preds = %11, %207
  %106 = phi i64 [ %210, %207 ], [ %102, %11 ]
  %107 = phi <2 x i64> [ %209, %207 ], [ %101, %11 ]
  %108 = phi <8 x i16> [ %208, %207 ], [ %100, %11 ]
  %109 = getelementptr inbounds i32, i32* %12, i64 %106
  %110 = bitcast i32* %109 to <4 x i32>*
  %111 = load <4 x i32>, <4 x i32>* %110, align 16
  %112 = getelementptr inbounds i32, i32* %109, i64 4
  %113 = bitcast i32* %112 to <4 x i32>*
  %114 = load <4 x i32>, <4 x i32>* %113, align 16
  %115 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %111, <4 x i32> %114) #4
  %116 = getelementptr inbounds i32, i32* %109, i64 8
  %117 = bitcast i32* %116 to <4 x i32>*
  %118 = load <4 x i32>, <4 x i32>* %117, align 16
  %119 = getelementptr inbounds i32, i32* %116, i64 4
  %120 = bitcast i32* %119 to <4 x i32>*
  %121 = load <4 x i32>, <4 x i32>* %120, align 16
  %122 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %118, <4 x i32> %121) #4
  %123 = ashr <8 x i16> %115, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %124 = ashr <8 x i16> %122, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %125 = xor <8 x i16> %123, %115
  %126 = xor <8 x i16> %124, %122
  %127 = sub <8 x i16> %125, %123
  %128 = sub <8 x i16> %126, %124
  %129 = icmp sgt <8 x i16> %127, %103
  %130 = sext <8 x i1> %129 to <8 x i16>
  %131 = bitcast <8 x i16> %130 to <16 x i8>
  %132 = icmp slt <16 x i8> %131, zeroinitializer
  %133 = icmp sgt <8 x i16> %128, %103
  %134 = sext <8 x i1> %133 to <8 x i16>
  %135 = bitcast <8 x i16> %134 to <16 x i8>
  %136 = icmp slt <16 x i8> %135, zeroinitializer
  %137 = or <16 x i1> %136, %132
  %138 = bitcast <16 x i1> %137 to i16
  %139 = icmp eq i16 %138, 0
  br i1 %139, label %140, label %149

140:                                              ; preds = %105
  %141 = getelementptr inbounds i32, i32* %14, i64 %106
  %142 = bitcast i32* %141 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %142, i8 0, i64 32, i1 false) #4
  %143 = getelementptr inbounds i32, i32* %141, i64 8
  %144 = bitcast i32* %143 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %144, i8 0, i64 32, i1 false) #4
  %145 = getelementptr inbounds i32, i32* %15, i64 %106
  %146 = bitcast i32* %145 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %146, i8 0, i64 32, i1 false) #4
  %147 = getelementptr inbounds i32, i32* %145, i64 8
  %148 = bitcast i32* %147 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %148, i8 0, i64 32, i1 false) #4
  br label %207

149:                                              ; preds = %105
  %150 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %127, <8 x i16> %44) #4
  %151 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %128, <8 x i16> %44) #4
  %152 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %150, <8 x i16> %49) #4
  %153 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %151, <8 x i16> %49) #4
  %154 = xor <8 x i16> %152, %123
  %155 = xor <8 x i16> %153, %124
  %156 = sub <8 x i16> %154, %123
  %157 = sub <8 x i16> %155, %124
  %158 = getelementptr inbounds i32, i32* %14, i64 %106
  %159 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %156, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %160 = shufflevector <8 x i16> %156, <8 x i16> %159, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %161 = shufflevector <8 x i16> %156, <8 x i16> %159, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %162 = bitcast i32* %158 to <8 x i16>*
  store <8 x i16> %160, <8 x i16>* %162, align 16
  %163 = getelementptr inbounds i32, i32* %158, i64 4
  %164 = bitcast i32* %163 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %164, align 16
  %165 = getelementptr inbounds i32, i32* %158, i64 8
  %166 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %157, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %167 = shufflevector <8 x i16> %157, <8 x i16> %166, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %168 = shufflevector <8 x i16> %157, <8 x i16> %166, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %169 = bitcast i32* %165 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %169, align 16
  %170 = getelementptr inbounds i32, i32* %165, i64 4
  %171 = bitcast i32* %170 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %171, align 16
  %172 = mul <8 x i16> %156, %71
  %173 = mul <8 x i16> %157, %71
  %174 = getelementptr inbounds i32, i32* %15, i64 %106
  %175 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %172, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %176 = shufflevector <8 x i16> %172, <8 x i16> %175, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %177 = shufflevector <8 x i16> %172, <8 x i16> %175, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %178 = bitcast i32* %174 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %178, align 16
  %179 = getelementptr inbounds i32, i32* %174, i64 4
  %180 = bitcast i32* %179 to <8 x i16>*
  store <8 x i16> %177, <8 x i16>* %180, align 16
  %181 = getelementptr inbounds i32, i32* %174, i64 8
  %182 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %173, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %183 = shufflevector <8 x i16> %173, <8 x i16> %182, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %184 = shufflevector <8 x i16> %173, <8 x i16> %182, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %185 = bitcast i32* %181 to <8 x i16>*
  store <8 x i16> %183, <8 x i16>* %185, align 16
  %186 = getelementptr inbounds i32, i32* %181, i64 4
  %187 = bitcast i32* %186 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %187, align 16
  %188 = icmp ne <8 x i16> %172, zeroinitializer
  %189 = icmp ne <8 x i16> %173, zeroinitializer
  %190 = sext <8 x i1> %188 to <8 x i16>
  %191 = sext <8 x i1> %189 to <8 x i16>
  %192 = getelementptr inbounds i16, i16* %13, i64 %106
  %193 = bitcast i16* %192 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 16
  %195 = getelementptr inbounds i16, i16* %192, i64 8
  %196 = bitcast i16* %195 to <8 x i16>*
  %197 = load <8 x i16>, <8 x i16>* %196, align 16
  %198 = sub <8 x i16> %194, %190
  %199 = sub <8 x i16> %197, %191
  %200 = and <8 x i16> %198, %190
  %201 = and <8 x i16> %199, %191
  %202 = icmp sgt <8 x i16> %200, %201
  %203 = select <8 x i1> %202, <8 x i16> %200, <8 x i16> %201
  %204 = icmp sgt <8 x i16> %108, %203
  %205 = select <8 x i1> %204, <8 x i16> %108, <8 x i16> %203
  %206 = bitcast <8 x i16> %205 to <2 x i64>
  br label %207

207:                                              ; preds = %140, %149
  %208 = phi <8 x i16> [ %205, %149 ], [ %108, %140 ]
  %209 = phi <2 x i64> [ %206, %149 ], [ %107, %140 ]
  %210 = add nsw i64 %106, 16
  %211 = icmp slt i64 %210, 0
  br i1 %211, label %105, label %212

212:                                              ; preds = %207, %11
  %213 = phi <8 x i16> [ %100, %11 ], [ %208, %207 ]
  %214 = phi <2 x i64> [ %101, %11 ], [ %209, %207 ]
  %215 = bitcast <2 x i64> %214 to <4 x i32>
  %216 = shufflevector <4 x i32> %215, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 0>
  %217 = bitcast <4 x i32> %216 to <8 x i16>
  %218 = icmp sgt <8 x i16> %213, %217
  %219 = select <8 x i1> %218, <8 x i16> %213, <8 x i16> %217
  %220 = shufflevector <8 x i16> %219, <8 x i16> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %221 = icmp sgt <8 x i16> %219, %220
  %222 = select <8 x i1> %221, <8 x i16> %219, <8 x i16> %220
  %223 = shufflevector <8 x i16> %222, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %224 = icmp sgt <8 x i16> %222, %223
  %225 = select <8 x i1> %224, <8 x i16> %222, <8 x i16> %223
  %226 = extractelement <8 x i16> %225, i64 1
  store i16 %226, i16* %8, align 2
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #1

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16>, <8 x i16>) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
