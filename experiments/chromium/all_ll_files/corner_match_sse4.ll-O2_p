; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/x86/corner_match_sse4.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/x86/corner_match_sse4.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @av1_compute_cross_correlation_sse4_1(i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly, i32, i32, i32) local_unnamed_addr #0 {
  %9 = add nsw i32 %3, -6
  %10 = mul nsw i32 %9, %1
  %11 = add nsw i32 %2, -6
  %12 = add nsw i32 %11, %10
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i8, i8* %0, i64 %13
  %15 = add nsw i32 %7, -6
  %16 = mul nsw i32 %15, %5
  %17 = add nsw i32 %6, -6
  %18 = add nsw i32 %17, %16
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i8, i8* %4, i64 %19
  %21 = sext i32 %5 to i64
  %22 = sext i32 %1 to i64
  br label %23

23:                                               ; preds = %23, %8
  %24 = phi i64 [ 0, %8 ], [ %61, %23 ]
  %25 = phi <8 x i16> [ zeroinitializer, %8 ], [ %40, %23 ]
  %26 = phi <8 x i16> [ zeroinitializer, %8 ], [ %44, %23 ]
  %27 = phi <4 x i32> [ zeroinitializer, %8 ], [ %56, %23 ]
  %28 = phi <4 x i32> [ zeroinitializer, %8 ], [ %60, %23 ]
  %29 = mul nsw i64 %24, %22
  %30 = getelementptr inbounds i8, i8* %14, i64 %29
  %31 = bitcast i8* %30 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1
  %33 = mul nsw i64 %24, %21
  %34 = getelementptr inbounds i8, i8* %20, i64 %33
  %35 = bitcast i8* %34 to <16 x i8>*
  %36 = load <16 x i8>, <16 x i8>* %35, align 1
  %37 = and <16 x i8> %32, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0>
  %38 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %37, <16 x i8> zeroinitializer) #3
  %39 = bitcast <2 x i64> %38 to <8 x i16>
  %40 = add <8 x i16> %25, %39
  %41 = and <16 x i8> %36, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0>
  %42 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %41, <16 x i8> zeroinitializer) #3
  %43 = bitcast <2 x i64> %42 to <8 x i16>
  %44 = add <8 x i16> %26, %43
  %45 = shufflevector <16 x i8> %37, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %46 = zext <8 x i8> %45 to <8 x i16>
  %47 = shufflevector <16 x i8> %37, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %48 = zext <8 x i8> %47 to <8 x i16>
  %49 = shufflevector <16 x i8> %41, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %50 = zext <8 x i8> %49 to <8 x i16>
  %51 = shufflevector <16 x i8> %41, <16 x i8> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %52 = zext <8 x i8> %51 to <8 x i16>
  %53 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %50, <8 x i16> %50) #3
  %54 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %52, <8 x i16> %52) #3
  %55 = add <4 x i32> %53, %27
  %56 = add <4 x i32> %55, %54
  %57 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %46, <8 x i16> %50) #3
  %58 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %48, <8 x i16> %52) #3
  %59 = add <4 x i32> %57, %28
  %60 = add <4 x i32> %59, %58
  %61 = add nuw nsw i64 %24, 1
  %62 = icmp eq i64 %61, 13
  br i1 %62, label %63, label %23

63:                                               ; preds = %23
  %64 = bitcast <8 x i16> %40 to <4 x i32>
  %65 = bitcast <8 x i16> %44 to <4 x i32>
  %66 = shufflevector <4 x i32> %64, <4 x i32> %65, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %67 = bitcast <4 x i32> %66 to <2 x i64>
  %68 = shufflevector <4 x i32> %64, <4 x i32> %65, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %69 = bitcast <4 x i32> %68 to <2 x i64>
  %70 = shufflevector <4 x i32> %56, <4 x i32> %60, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %71 = bitcast <4 x i32> %70 to <2 x i64>
  %72 = shufflevector <4 x i32> %56, <4 x i32> %60, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %73 = bitcast <4 x i32> %72 to <2 x i64>
  %74 = shufflevector <2 x i64> %67, <2 x i64> %71, <2 x i32> <i32 0, i32 2>
  %75 = shufflevector <2 x i64> %67, <2 x i64> %71, <2 x i32> <i32 1, i32 3>
  %76 = shufflevector <2 x i64> %69, <2 x i64> %73, <2 x i32> <i32 0, i32 2>
  %77 = shufflevector <2 x i64> %69, <2 x i64> %73, <2 x i32> <i32 1, i32 3>
  %78 = bitcast <2 x i64> %74 to <4 x i32>
  %79 = bitcast <2 x i64> %75 to <4 x i32>
  %80 = bitcast <2 x i64> %76 to <4 x i32>
  %81 = bitcast <2 x i64> %77 to <4 x i32>
  %82 = add <4 x i32> %81, %80
  %83 = add <4 x i32> %82, %78
  %84 = add <4 x i32> %83, %79
  %85 = extractelement <4 x i32> %84, i64 0
  %86 = extractelement <4 x i32> %84, i64 1
  %87 = extractelement <4 x i32> %84, i64 2
  %88 = extractelement <4 x i32> %84, i64 3
  %89 = mul nsw i32 %87, 169
  %90 = mul nsw i32 %86, %86
  %91 = sub nsw i32 %89, %90
  %92 = mul nsw i32 %88, 169
  %93 = mul nsw i32 %85, %86
  %94 = sub nsw i32 %92, %93
  %95 = sitofp i32 %94 to double
  %96 = sitofp i32 %91 to double
  %97 = tail call double @sqrt(double %96) #3
  %98 = fdiv double %95, %97
  ret double %98
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8>, <16 x i8>) #2

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #2

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
