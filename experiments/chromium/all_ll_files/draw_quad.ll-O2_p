; ModuleID = '../../components/viz/common/quads/draw_quad.cc'
source_filename = "../../components/viz/common/quads/draw_quad.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.viz::DrawQuad" = type <{ i32 (...)**, i32, %"class.gfx::Rect", %"class.gfx::Rect", i8, [3 x i8], %"class.viz::SharedQuadState"*, %"struct.viz::DrawQuad::Resources", [4 x i8] }>
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.viz::SharedQuadState" = type <{ %"class.gfx::Transform", %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::MaskFilterInfo", %"class.absl::optional", i8, [3 x i8], float, i32, i32, i8, [3 x i8], %"class.absl::optional.0", float, i8, [3 x i8] }>
%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.gfx::MaskFilterInfo" = type { %"class.gfx::RRectF" }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.gfx::Rect" }
%"class.absl::optional.0" = type { %"class.absl::optional_internal::optional_data.1" }
%"class.absl::optional_internal::optional_data.1" = type { %"class.absl::optional_internal::optional_data_base.2" }
%"class.absl::optional_internal::optional_data_base.2" = type { %"class.absl::optional_internal::optional_data_dtor_base.3" }
%"class.absl::optional_internal::optional_data_dtor_base.3" = type { i8, %union.anon.4 }
%union.anon.4 = type { i64 }
%"struct.viz::DrawQuad::Resources" = type { i32, [4 x %"class.util::IdType"] }
%"class.util::IdType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { i32 }
%"class.base::trace_event::TracedValue" = type { %"class.base::trace_event::ConvertableToTraceFormat", %"class.std::__1::unique_ptr" }
%"class.base::trace_event::ConvertableToTraceFormat" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::trace_event::TracedValue::Writer"* }
%"class.base::trace_event::TracedValue::Writer" = type { i32 (...)** }
%"class.gfx::QuadF" = type { %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF" }
%"class.gfx::PointF" = type { float, float }

@_ZTVN3viz8DrawQuadE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.viz::DrawQuad"*)* @_ZN3viz8DrawQuadD2Ev to i8*), i8* bitcast (void (%"class.viz::DrawQuad"*)* @_ZN3viz8DrawQuadD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@.str = private unnamed_addr constant [9 x i8] c"material\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"shared_state\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"content_space_rect\00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c"rect_as_target_space_quad\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"rect_is_clipped\00", align 1
@.str.5 = private unnamed_addr constant [27 x i8] c"content_space_visible_rect\00", align 1
@.str.6 = private unnamed_addr constant [34 x i8] c"visible_rect_as_target_space_quad\00", align 1
@.str.7 = private unnamed_addr constant [24 x i8] c"visible_rect_is_clipped\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"needs_blending\00", align 1
@.str.9 = private unnamed_addr constant [26 x i8] c"should_draw_with_blending\00", align 1

@_ZN3viz8DrawQuadD1Ev = hidden unnamed_addr alias void (%"class.viz::DrawQuad"*), void (%"class.viz::DrawQuad"*)* @_ZN3viz8DrawQuadD2Ev
@_ZN3viz8DrawQuad9ResourcesC1Ev = hidden unnamed_addr alias void (%"struct.viz::DrawQuad::Resources"*), void (%"struct.viz::DrawQuad::Resources"*)* @_ZN3viz8DrawQuad9ResourcesC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz8DrawQuadC2Ev(%"class.viz::DrawQuad"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.viz::DrawQuad", %"class.viz::DrawQuad"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3viz8DrawQuadE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.viz::DrawQuad", %"class.viz::DrawQuad"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.viz::DrawQuad", %"class.viz::DrawQuad"* %0, i64 0, i32 6
  %5 = bitcast i32* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 37, i1 false)
  %6 = bitcast %"class.viz::SharedQuadState"** %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 28, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz8DrawQuadC2ERKS0_(%"class.viz::DrawQuad"* nocapture, %"class.viz::DrawQuad"* nocapture readonly dereferenceable(80)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::DrawQuad", %"class.viz::DrawQuad"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3viz8DrawQuadE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.viz::DrawQuad", %"class.viz::DrawQuad"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.viz::DrawQuad", %"class.viz::DrawQuad"* %1, i64 0, i32 1
  %6 = bitcast i32* %4 to i8*
  %7 = bitcast i32* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 68, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz8DrawQuad6SetAllEPKNS_15SharedQuadStateENS0_8MaterialERKN3gfx4RectES8_b(%"class.viz::DrawQuad"* nocapture, %"class.viz::SharedQuadState"*, i32, %"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.gfx::Rect"* nocapture readonly dereferenceable(16), i1 zeroext) local_unnamed_addr #0 align 2 {
  %7 = zext i1 %5 to i8
  %8 = getelementptr inbounds %"class.viz::DrawQuad", %"class.viz::DrawQuad"* %0, i64 0, i32 1
  store i32 %2, i32* %8, align 8
  %9 = getelementptr inbounds %"class.viz::DrawQuad", %"class.viz::DrawQuad"* %0, i64 0, i32 2
  %10 = bitcast %"class.gfx::Rect"* %9 to i8*
  %11 = bitcast %"class.gfx::Rect"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %10, i8* align 4 %11, i64 16, i1 false)
  %12 = getelementptr inbounds %"class.viz::DrawQuad", %"class.viz::DrawQuad"* %0, i64 0, i32 3
  %13 = bitcast %"class.gfx::Rect"* %12 to i8*
  %14 = bitcast %"class.gfx::Rect"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %13, i8* align 4 %14, i64 16, i1 false)
  %15 = getelementptr inbounds %"class.viz::DrawQuad", %"class.viz::DrawQuad"* %0, i64 0, i32 4
  store i8 %7, i8* %15, align 4
  %16 = getelementptr inbounds %"class.viz::DrawQuad", %"class.viz::DrawQuad"* %0, i64 0, i32 6
  store %"class.viz::SharedQuadState"* %1, %"class.viz::SharedQuadState"** %16, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3viz8DrawQuadD2Ev(%"class.viz::DrawQuad"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN3viz8DrawQuadD0Ev(%"class.viz::DrawQuad"* nocapture readnone) unnamed_addr #3 align 2 {
  tail call void @llvm.trap() #7
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3viz8DrawQuad11AsValueIntoEPN4base11trace_event11TracedValueE(%"class.viz::DrawQuad"*, %"class.base::trace_event::TracedValue"*) local_unnamed_addr #0 align 2 {
  %3 = alloca i8, align 1
  %4 = alloca %"class.gfx::QuadF", align 4
  %5 = alloca %"class.gfx::QuadF", align 4
  %6 = alloca i8, align 1
  %7 = alloca %"class.gfx::QuadF", align 4
  %8 = alloca %"class.gfx::QuadF", align 4
  %9 = getelementptr inbounds %"class.viz::DrawQuad", %"class.viz::DrawQuad"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  tail call void @_ZN4base11trace_event11TracedValue10SetIntegerEPKci(%"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 %10) #8
  %11 = getelementptr inbounds %"class.viz::DrawQuad", %"class.viz::DrawQuad"* %0, i64 0, i32 6
  %12 = bitcast %"class.viz::SharedQuadState"** %11 to i8**
  %13 = load i8*, i8** %12, align 8
  tail call void @_ZN3viz11TracedValue8SetIDRefEPKvPN4base11trace_event11TracedValueEPKc(i8* %13, %"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0)) #8
  %14 = getelementptr inbounds %"class.viz::DrawQuad", %"class.viz::DrawQuad"* %0, i64 0, i32 2
  tail call void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx4RectEPN4base11trace_event11TracedValueE(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), %"class.gfx::Rect"* dereferenceable(16) %14, %"class.base::trace_event::TracedValue"* %1) #8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #8
  store i8 -86, i8* %3, align 1
  %15 = bitcast %"class.gfx::QuadF"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #8
  %16 = bitcast %"class.gfx::QuadF"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %16, i8 -1, i64 32, i1 false)
  %17 = load %"class.viz::SharedQuadState"*, %"class.viz::SharedQuadState"** %11, align 8
  %18 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %17, i64 0, i32 0
  %19 = bitcast %"class.gfx::QuadF"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %19) #8
  %20 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %14, i64 0, i32 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = sitofp i32 %21 to float
  %23 = getelementptr inbounds %"class.viz::DrawQuad", %"class.viz::DrawQuad"* %0, i64 0, i32 2, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = sitofp i32 %24 to float
  %26 = getelementptr inbounds %"class.viz::DrawQuad", %"class.viz::DrawQuad"* %0, i64 0, i32 2, i32 1, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %"class.viz::DrawQuad", %"class.viz::DrawQuad"* %0, i64 0, i32 2, i32 1, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = icmp sgt i32 %27, 0
  %31 = select i1 %30, i32 %27, i32 0
  %32 = sitofp i32 %31 to float
  %33 = icmp sgt i32 %29, 0
  %34 = select i1 %33, i32 %29, i32 0
  %35 = sitofp i32 %34 to float
  %36 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %5, i64 0, i32 0, i32 0
  store float %22, float* %36, align 4
  %37 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %5, i64 0, i32 0, i32 1
  store float %25, float* %37, align 4
  %38 = fadd float %22, %32
  %39 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %5, i64 0, i32 1, i32 0
  store float %38, float* %39, align 4
  %40 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %5, i64 0, i32 1, i32 1
  store float %25, float* %40, align 4
  %41 = fadd float %25, %35
  %42 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %5, i64 0, i32 2, i32 0
  store float %38, float* %42, align 4
  %43 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %5, i64 0, i32 2, i32 1
  store float %41, float* %43, align 4
  %44 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %5, i64 0, i32 3, i32 0
  store float %22, float* %44, align 4
  %45 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %5, i64 0, i32 3, i32 1
  store float %41, float* %45, align 4
  call void @_ZN2cc8MathUtil7MapQuadERKN3gfx9TransformERKNS1_5QuadFEPb(%"class.gfx::QuadF"* nonnull sret %4, %"class.gfx::Transform"* dereferenceable(68) %18, %"class.gfx::QuadF"* nonnull dereferenceable(32) %5, i8* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19) #8
  call void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx5QuadFEPN4base11trace_event11TracedValueE(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0), %"class.gfx::QuadF"* nonnull dereferenceable(32) %4, %"class.base::trace_event::TracedValue"* %1) #8
  %46 = load i8, i8* %3, align 1, !range !2
  %47 = icmp ne i8 %46, 0
  call void @_ZN4base11trace_event11TracedValue10SetBooleanEPKcb(%"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i1 zeroext %47) #8
  %48 = getelementptr inbounds %"class.viz::DrawQuad", %"class.viz::DrawQuad"* %0, i64 0, i32 3
  call void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx4RectEPN4base11trace_event11TracedValueE(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.5, i64 0, i64 0), %"class.gfx::Rect"* dereferenceable(16) %48, %"class.base::trace_event::TracedValue"* %1) #8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #8
  store i8 -86, i8* %6, align 1
  %49 = bitcast %"class.gfx::QuadF"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %49) #8
  %50 = bitcast %"class.gfx::QuadF"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %50, i8 -1, i64 32, i1 false)
  %51 = load %"class.viz::SharedQuadState"*, %"class.viz::SharedQuadState"** %11, align 8
  %52 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %51, i64 0, i32 0
  %53 = bitcast %"class.gfx::QuadF"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %53) #8
  %54 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %48, i64 0, i32 0, i32 0
  %55 = load i32, i32* %54, align 4
  %56 = sitofp i32 %55 to float
  %57 = getelementptr inbounds %"class.viz::DrawQuad", %"class.viz::DrawQuad"* %0, i64 0, i32 3, i32 0, i32 1
  %58 = load i32, i32* %57, align 4
  %59 = sitofp i32 %58 to float
  %60 = getelementptr inbounds %"class.viz::DrawQuad", %"class.viz::DrawQuad"* %0, i64 0, i32 3, i32 1, i32 0
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %"class.viz::DrawQuad", %"class.viz::DrawQuad"* %0, i64 0, i32 3, i32 1, i32 1
  %63 = load i32, i32* %62, align 4
  %64 = icmp sgt i32 %61, 0
  %65 = select i1 %64, i32 %61, i32 0
  %66 = sitofp i32 %65 to float
  %67 = icmp sgt i32 %63, 0
  %68 = select i1 %67, i32 %63, i32 0
  %69 = sitofp i32 %68 to float
  %70 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %8, i64 0, i32 0, i32 0
  store float %56, float* %70, align 4
  %71 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %8, i64 0, i32 0, i32 1
  store float %59, float* %71, align 4
  %72 = fadd float %56, %66
  %73 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %8, i64 0, i32 1, i32 0
  store float %72, float* %73, align 4
  %74 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %8, i64 0, i32 1, i32 1
  store float %59, float* %74, align 4
  %75 = fadd float %59, %69
  %76 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %8, i64 0, i32 2, i32 0
  store float %72, float* %76, align 4
  %77 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %8, i64 0, i32 2, i32 1
  store float %75, float* %77, align 4
  %78 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %8, i64 0, i32 3, i32 0
  store float %56, float* %78, align 4
  %79 = getelementptr inbounds %"class.gfx::QuadF", %"class.gfx::QuadF"* %8, i64 0, i32 3, i32 1
  store float %75, float* %79, align 4
  call void @_ZN2cc8MathUtil7MapQuadERKN3gfx9TransformERKNS1_5QuadFEPb(%"class.gfx::QuadF"* nonnull sret %7, %"class.gfx::Transform"* dereferenceable(68) %52, %"class.gfx::QuadF"* nonnull dereferenceable(32) %8, i8* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %53) #8
  call void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx5QuadFEPN4base11trace_event11TracedValueE(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0), %"class.gfx::QuadF"* nonnull dereferenceable(32) %7, %"class.base::trace_event::TracedValue"* %1) #8
  %80 = load i8, i8* %6, align 1, !range !2
  %81 = icmp ne i8 %80, 0
  call void @_ZN4base11trace_event11TracedValue10SetBooleanEPKcb(%"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i1 zeroext %81) #8
  %82 = getelementptr inbounds %"class.viz::DrawQuad", %"class.viz::DrawQuad"* %0, i64 0, i32 4
  %83 = load i8, i8* %82, align 4, !range !2
  %84 = icmp ne i8 %83, 0
  call void @_ZN4base11trace_event11TracedValue10SetBooleanEPKcb(%"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i1 zeroext %84) #8
  %85 = load i8, i8* %82, align 4, !range !2
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %87, label %100

87:                                               ; preds = %2
  %88 = load %"class.viz::SharedQuadState"*, %"class.viz::SharedQuadState"** %11, align 8
  %89 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %88, i64 0, i32 7
  %90 = load float, float* %89, align 8
  %91 = fcmp olt float %90, 1.000000e+00
  br i1 %91, label %100, label %92

92:                                               ; preds = %87
  %93 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %88, i64 0, i32 8
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 3
  br i1 %95, label %96, label %100

96:                                               ; preds = %92
  %97 = getelementptr inbounds %"class.viz::SharedQuadState", %"class.viz::SharedQuadState"* %88, i64 0, i32 3, i32 0
  %98 = call i32 @_ZNK3gfx6RRectF7GetTypeEv(%"class.gfx::RRectF"* %97) #8
  %99 = icmp ne i32 %98, 0
  br label %100

100:                                              ; preds = %2, %87, %92, %96
  %101 = phi i1 [ true, %92 ], [ %99, %96 ], [ true, %87 ], [ true, %2 ]
  call void @_ZN4base11trace_event11TracedValue10SetBooleanEPKcb(%"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0), i1 zeroext %101) #8
  %102 = bitcast %"class.viz::DrawQuad"* %0 to void (%"class.viz::DrawQuad"*, %"class.base::trace_event::TracedValue"*)***
  %103 = load void (%"class.viz::DrawQuad"*, %"class.base::trace_event::TracedValue"*)**, void (%"class.viz::DrawQuad"*, %"class.base::trace_event::TracedValue"*)*** %102, align 8
  %104 = getelementptr inbounds void (%"class.viz::DrawQuad"*, %"class.base::trace_event::TracedValue"*)*, void (%"class.viz::DrawQuad"*, %"class.base::trace_event::TracedValue"*)** %103, i64 2
  %105 = load void (%"class.viz::DrawQuad"*, %"class.base::trace_event::TracedValue"*)*, void (%"class.viz::DrawQuad"*, %"class.base::trace_event::TracedValue"*)** %104, align 8
  call void %105(%"class.viz::DrawQuad"* %0, %"class.base::trace_event::TracedValue"* %1) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %49) #8
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #8
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #8
  ret void
}

declare void @_ZN4base11trace_event11TracedValue10SetIntegerEPKci(%"class.base::trace_event::TracedValue"*, i8*, i32) local_unnamed_addr #5

declare void @_ZN3viz11TracedValue8SetIDRefEPKvPN4base11trace_event11TracedValueEPKc(i8*, %"class.base::trace_event::TracedValue"*, i8*) local_unnamed_addr #5

declare void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx4RectEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::Rect"* dereferenceable(16), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2cc8MathUtil7MapQuadERKN3gfx9TransformERKNS1_5QuadFEPb(%"class.gfx::QuadF"* sret, %"class.gfx::Transform"* dereferenceable(68), %"class.gfx::QuadF"* dereferenceable(32), i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2cc8MathUtil16AddToTracedValueEPKcRKN3gfx5QuadFEPN4base11trace_event11TracedValueE(i8*, %"class.gfx::QuadF"* dereferenceable(32), %"class.base::trace_event::TracedValue"*) local_unnamed_addr #5

declare void @_ZN4base11trace_event11TracedValue10SetBooleanEPKcb(%"class.base::trace_event::TracedValue"*, i8*, i1 zeroext) local_unnamed_addr #5

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3viz8DrawQuad9ResourcesC2Ev(%"struct.viz::DrawQuad::Resources"*) unnamed_addr #6 align 2 {
  %2 = bitcast %"struct.viz::DrawQuad::Resources"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 20, i1 false)
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

declare i32 @_ZNK3gfx6RRectF7GetTypeEv(%"class.gfx::RRectF"*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
