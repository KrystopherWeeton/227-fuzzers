; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/ScalarizeVecAndMatConstructorArgs.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/ScalarizeVecAndMatConstructorArgs.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::TCompiler" = type { %"class.sh::TShHandleBase", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.1", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"class.std::__1::vector.8", %"struct.sh::ValidateASTOptions", %"class.angle::BitSetT", i8, i8, i32, i32, i32, %"class.sh::CallDAG", %"class.std::__1::vector.59", %struct.ShBuiltInResources, %"class.std::__1::basic_string", %"class.sh::TSymbolTable", %"class.std::__1::map.90", %"class.sh::ArrayBoundsClamper", %"class.sh::BuiltInFunctionEmulator", i32, %"class.sh::TInfoSink", %"class.sh::TDiagnostics", i8*, i8, i8, i8, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.std::__1::map.124", %struct.TPragma, i64 }
%"class.sh::TShHandleBase" = type { i32 (...)**, %"class.angle::PoolAllocator" }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"*, %"class.std::__1::__compressed_pair.3" }
%"struct.sh::ShaderVariable" = type { i32, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector.117", i8, i8, %"class.std::__1::vector.1", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, i32, i8, i32, i32, i32, i8, i8, i8, i32, i8, i32, i8, i8, i8, i8, i32 }
%"class.std::__1::vector.117" = type { %"class.std::__1::__vector_base.118" }
%"class.std::__1::__vector_base.118" = type { i32*, i32*, %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { i32* }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.sh::ShaderVariable"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"*, %"class.std::__1::__compressed_pair.15" }
%"struct.sh::InterfaceBlock" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i32, i8, i32, i8, i8, i32, %"class.std::__1::vector.1" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.sh::InterfaceBlock"* }
%"struct.sh::ValidateASTOptions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.angle::BitSetT" = type { i32 }
%"class.sh::CallDAG" = type { %"class.std::__1::vector.20", %"class.std::__1::map" }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.sh::CallDAG::Record"*, %"struct.sh::CallDAG::Record"*, %"class.std::__1::__compressed_pair.46" }
%"struct.sh::CallDAG::Record" = type { %"class.sh::TIntermFunctionDefinition"*, %"class.std::__1::vector.39" }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TVector" = type opaque
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TConstantUnion" = type { %union.anon.30, i32 }
%union.anon.30 = type { i32 }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.22" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.23"*, i64, i32, %"class.std::__1::basic_string.24" }
%"class.sh::TVector.23" = type opaque
%"class.std::__1::basic_string.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon.27 }
%union.anon.27 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { i32*, i32*, %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { i32* }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.sh::CallDAG::Record"* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.51", %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { i64 }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { %"struct.sh::TCompiler::FunctionMetadata"*, %"struct.sh::TCompiler::FunctionMetadata"*, %"class.std::__1::__compressed_pair.61" }
%"struct.sh::TCompiler::FunctionMetadata" = type { i8 }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"struct.sh::TCompiler::FunctionMetadata"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.66", %"class.std::__1::vector.73", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map.81", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { %"class.std::__1::unique_ptr.75"*, %"class.std::__1::unique_ptr.75"*, %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::unique_ptr.75" = type opaque
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"class.std::__1::unique_ptr.75"* }
%"class.std::__1::map.81" = type { %"class.std::__1::__tree.82" }
%"class.std::__1::__tree.82" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.83", %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.std::__1::map.90" = type { %"class.std::__1::__tree.91" }
%"class.std::__1::__tree.91" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.92", %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.sh::ArrayBoundsClamper" = type <{ i32, i8, [3 x i8] }>
%"class.sh::BuiltInFunctionEmulator" = type { %"class.std::__1::map.101", %"class.std::__1::map", %"class.std::__1::vector.39", %"class.std::__1::vector.110" }
%"class.std::__1::map.101" = type { %"class.std::__1::__tree.102" }
%"class.std::__1::__tree.102" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.103", %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"class.std::__1::vector.110" = type { %"class.std::__1::__vector_base.111" }
%"class.std::__1::__vector_base.111" = type { i8* (i32)**, i8* (i32)**, %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { i8* (i32)** }
%"class.sh::TInfoSink" = type { %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase" }
%"class.sh::TInfoSinkBase" = type { %"class.std::__1::basic_string", %"class.std::__1::vector.117" }
%"class.sh::TDiagnostics" = type { %"class.angle::pp::Diagnostics", %"class.sh::TInfoSinkBase"*, i32, i32 }
%"class.angle::pp::Diagnostics" = type { i32 (...)** }
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.std::__1::map.124" = type { %"class.std::__1::__tree.125" }
%"class.std::__1::__tree.125" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.126", %"class.std::__1::__compressed_pair.130" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%struct.TPragma = type { i8, i8, i8, %"struct.TPragma::STDGL" }
%"struct.TPragma::STDGL" = type { i8 }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31", i8, [7 x i8] }>
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector.31" = type { %"class.std::__1::vector.32" }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.sh::TIntermNode"** }
%"class.sh::(anonymous namespace)::ScalarizeArgsTraverser" = type <{ %"class.sh::TIntermTraverser", %"class.std::__1::vector.163", i32, i8, [3 x i8], %"class.sh::IntermNodePatternMatcher", [4 x i8] }>
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector.135", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.142", %"class.std::__1::vector.149", %"class.sh::TVector.31", %"class.std::__1::vector.156" }
%"class.std::__1::vector.135" = type { %"class.std::__1::__vector_base.136" }
%"class.std::__1::__vector_base.136" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.137" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector.31" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.142" = type { %"class.std::__1::__vector_base.143" }
%"class.std::__1::__vector_base.143" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.144" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector.31", %"class.sh::TVector.31" }
%"class.std::__1::__compressed_pair.144" = type { %"struct.std::__1::__compressed_pair_elem.145" }
%"struct.std::__1::__compressed_pair_elem.145" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.149" = type { %"class.std::__1::__vector_base.150" }
%"class.std::__1::__vector_base.150" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.151" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.std::__1::vector.156" = type { %"class.std::__1::__vector_base.157" }
%"class.std::__1::__vector_base.157" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.158" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.158" = type { %"struct.std::__1::__compressed_pair_elem.159" }
%"struct.std::__1::__compressed_pair_elem.159" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.std::__1::vector.163" = type { %"class.std::__1::__vector_base.164" }
%"class.std::__1::__vector_base.164" = type { %"class.sh::TVector.31"*, %"class.sh::TVector.31"*, %"class.std::__1::__compressed_pair.165" }
%"class.std::__1::__compressed_pair.165" = type { %"struct.std::__1::__compressed_pair_elem.166" }
%"struct.std::__1::__compressed_pair_elem.166" = type { %"class.sh::TVector.31"* }
%"class.sh::IntermNodePatternMatcher" = type { i32 }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.170", i8, [7 x i8] }>
%"class.sh::TVector.170" = type { %"class.std::__1::vector.171" }
%"class.std::__1::vector.171" = type { %"class.std::__1::__vector_base.172" }
%"class.std::__1::__vector_base.172" = type { i32*, i32*, %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31", i8, i8, %"class.sh::TFunction"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector.31" }
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }

$_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE = comdat any

$_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE = comdat any

$_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE = comdat any

$_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE = comdat any

$_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

$_ZNSt3__16vectorIN2sh7TVectorIPNS1_11TIntermNodeEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_ = comdat any

$_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6assignIPS3_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_ = comdat any

@_ZTVN2sh12_GLOBAL__N_122ScalarizeArgsTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"*)* @_ZN2sh12_GLOBAL__N_122ScalarizeArgsTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"*)* @_ZN2sh12_GLOBAL__N_122ScalarizeArgsTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh12_GLOBAL__N_122ScalarizeArgsTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh12_GLOBAL__N_122ScalarizeArgsTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh33ScalarizeVecAndMatConstructorArgsEPNS_9TCompilerEPNS_12TIntermBlockEjbPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, i32, i1 zeroext, %"class.sh::TSymbolTable"*) local_unnamed_addr #0 {
  %6 = alloca %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", align 8
  %7 = bitcast %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %7) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 192, i1 false)
  %8 = zext i1 %3 to i8
  %9 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %6, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %9, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* %4) #8
  %10 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %6, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_122ScalarizeArgsTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %6, i64 0, i32 1
  %12 = bitcast %"class.std::__1::vector.163"* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #8
  %13 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %6, i64 0, i32 2
  store i32 %2, i32* %13, align 8
  %14 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %6, i64 0, i32 3
  store i8 %8, i8* %14, align 4
  %15 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %6, i64 0, i32 5
  call void @_ZN2sh24IntermNodePatternMatcherC1Ej(%"class.sh::IntermNodePatternMatcher"* %15, i32 128) #8
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* %1, %"class.sh::TIntermTraverser"* nonnull %9) #8
  %16 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 0
  %17 = call zeroext i1 @_ZN2sh9TCompiler11validateASTEPNS_11TIntermNodeE(%"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %16) #8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_122ScalarizeArgsTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector.163", %"class.std::__1::vector.163"* %11, i64 0, i32 0, i32 0
  %19 = load %"class.sh::TVector.31"*, %"class.sh::TVector.31"** %18, align 8
  %20 = icmp eq %"class.sh::TVector.31"* %19, null
  br i1 %20, label %43, label %21

21:                                               ; preds = %5
  %22 = bitcast %"class.sh::TVector.31"* %19 to i8*
  %23 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %6, i64 0, i32 1, i32 0, i32 1
  %24 = load %"class.sh::TVector.31"*, %"class.sh::TVector.31"** %23, align 8
  %25 = icmp eq %"class.sh::TVector.31"* %24, %19
  br i1 %25, label %41, label %26

26:                                               ; preds = %21, %36
  %27 = phi %"class.sh::TVector.31"* [ %28, %36 ], [ %24, %21 ]
  %28 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %27, i64 -1
  %29 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %28, i64 0, i32 0, i32 0, i32 0
  %30 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %29, align 8
  %31 = icmp eq %"class.sh::TIntermNode"** %30, null
  br i1 %31, label %36, label %32

32:                                               ; preds = %26
  %33 = ptrtoint %"class.sh::TIntermNode"** %30 to i64
  %34 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %27, i64 -1, i32 0, i32 0, i32 1
  %35 = bitcast %"class.sh::TIntermNode"*** %34 to i64*
  store i64 %33, i64* %35, align 8
  br label %36

36:                                               ; preds = %32, %26
  %37 = icmp eq %"class.sh::TVector.31"* %28, %19
  br i1 %37, label %38, label %26

38:                                               ; preds = %36
  %39 = bitcast %"class.std::__1::vector.163"* %11 to i8**
  %40 = load i8*, i8** %39, align 8
  br label %41

41:                                               ; preds = %38, %21
  %42 = phi i8* [ %40, %38 ], [ %22, %21 ]
  store %"class.sh::TVector.31"* %19, %"class.sh::TVector.31"** %23, align 8
  call void @_ZdlPv(i8* %42) #9
  br label %43

43:                                               ; preds = %5, %41
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %9) #8
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %7) #8
  ret i1 %17
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermTraverser"*) unnamed_addr #2

declare zeroext i1 @_ZN2sh9TCompiler11validateASTEPNS_11TIntermNodeE(%"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_122ScalarizeArgsTraverserD2Ev(%"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_122ScalarizeArgsTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector.163", %"class.std::__1::vector.163"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.sh::TVector.31"*, %"class.sh::TVector.31"** %4, align 8
  %6 = icmp eq %"class.sh::TVector.31"* %5, null
  br i1 %6, label %29, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.sh::TVector.31"* %5 to i8*
  %9 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %0, i64 0, i32 1, i32 0, i32 1
  %10 = load %"class.sh::TVector.31"*, %"class.sh::TVector.31"** %9, align 8
  %11 = icmp eq %"class.sh::TVector.31"* %10, %5
  br i1 %11, label %27, label %12

12:                                               ; preds = %7, %22
  %13 = phi %"class.sh::TVector.31"* [ %14, %22 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %13, i64 -1
  %15 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %14, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %15, align 8
  %17 = icmp eq %"class.sh::TIntermNode"** %16, null
  br i1 %17, label %22, label %18

18:                                               ; preds = %12
  %19 = ptrtoint %"class.sh::TIntermNode"** %16 to i64
  %20 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %13, i64 -1, i32 0, i32 0, i32 1
  %21 = bitcast %"class.sh::TIntermNode"*** %20 to i64*
  store i64 %19, i64* %21, align 8
  br label %22

22:                                               ; preds = %18, %12
  %23 = icmp eq %"class.sh::TVector.31"* %14, %5
  br i1 %23, label %24, label %12

24:                                               ; preds = %22
  %25 = bitcast %"class.std::__1::vector.163"* %3 to i8**
  %26 = load i8*, i8** %25, align 8
  br label %27

27:                                               ; preds = %24, %7
  %28 = phi i8* [ %26, %24 ], [ %8, %7 ]
  store %"class.sh::TVector.31"* %5, %"class.sh::TVector.31"** %9, align 8
  tail call void @_ZdlPv(i8* %28) #9
  br label %29

29:                                               ; preds = %1, %27
  %30 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %30) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

declare void @_ZN2sh24IntermNodePatternMatcherC1Ej(%"class.sh::IntermNodePatternMatcher"*, i32) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_122ScalarizeArgsTraverserD0Ev(%"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_122ScalarizeArgsTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector.163", %"class.std::__1::vector.163"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.sh::TVector.31"*, %"class.sh::TVector.31"** %4, align 8
  %6 = icmp eq %"class.sh::TVector.31"* %5, null
  br i1 %6, label %29, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.sh::TVector.31"* %5 to i8*
  %9 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %0, i64 0, i32 1, i32 0, i32 1
  %10 = load %"class.sh::TVector.31"*, %"class.sh::TVector.31"** %9, align 8
  %11 = icmp eq %"class.sh::TVector.31"* %10, %5
  br i1 %11, label %27, label %12

12:                                               ; preds = %7, %22
  %13 = phi %"class.sh::TVector.31"* [ %14, %22 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %13, i64 -1
  %15 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %14, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %15, align 8
  %17 = icmp eq %"class.sh::TIntermNode"** %16, null
  br i1 %17, label %22, label %18

18:                                               ; preds = %12
  %19 = ptrtoint %"class.sh::TIntermNode"** %16 to i64
  %20 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %13, i64 -1, i32 0, i32 0, i32 1
  %21 = bitcast %"class.sh::TIntermNode"*** %20 to i64*
  store i64 %19, i64* %21, align 8
  br label %22

22:                                               ; preds = %18, %12
  %23 = icmp eq %"class.sh::TVector.31"* %14, %5
  br i1 %23, label %24, label %12

24:                                               ; preds = %22
  %25 = bitcast %"class.std::__1::vector.163"* %3 to i8**
  %26 = load i8*, i8** %25, align 8
  br label %27

27:                                               ; preds = %24, %7
  %28 = phi i8* [ %26, %24 ], [ %8, %7 ]
  store %"class.sh::TVector.31"* %5, %"class.sh::TVector.31"** %9, align 8
  tail call void @_ZdlPv(i8* %28) #9
  br label %29

29:                                               ; preds = %1, %27
  %30 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %30) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_122ScalarizeArgsTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %0, i64 0, i32 5
  %5 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %0, i64 0, i32 0, i32 11, i32 0
  %6 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %0, i64 0, i32 0, i32 11, i32 0, i32 0, i32 1
  %7 = bitcast %"class.sh::TIntermNode"*** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector.32"* %5 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = ashr exact i64 %11, 3
  %13 = icmp ult i64 %12, 2
  br i1 %13, label %19, label %14

14:                                               ; preds = %3
  %15 = inttoptr i64 %10 to %"class.sh::TIntermNode"**
  %16 = add nsw i64 %12, -2
  %17 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %15, i64 %16
  %18 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %17, align 8
  br label %19

19:                                               ; preds = %3, %14
  %20 = phi %"class.sh::TIntermNode"* [ %18, %14 ], [ null, %3 ]
  %21 = tail call zeroext i1 @_ZN2sh24IntermNodePatternMatcher5matchEPNS_16TIntermAggregateEPNS_11TIntermNodeE(%"class.sh::IntermNodePatternMatcher"* %4, %"class.sh::TIntermAggregate"* %2, %"class.sh::TIntermNode"* %20) #8
  br i1 %21, label %22, label %38

22:                                               ; preds = %19
  %23 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %2, i64 0, i32 0, i32 0
  %24 = bitcast %"class.sh::TIntermAggregate"* %2 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  %25 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %24, align 8
  %26 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %25, i64 31
  %27 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %26, align 8
  %28 = tail call dereferenceable(184) %"class.sh::TType"* %27(%"class.sh::TIntermExpression"* %23) #8
  %29 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %28, i64 0, i32 8
  %30 = load i8, i8* %29, align 8
  %31 = icmp ugt i8 %30, 1
  br i1 %31, label %32, label %37

32:                                               ; preds = %22
  %33 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %28, i64 0, i32 9
  %34 = load i8, i8* %33, align 1
  %35 = icmp eq i8 %34, 1
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  tail call fastcc void @_ZN2sh12_GLOBAL__N_122ScalarizeArgsTraverser13scalarizeArgsEPNS_16TIntermAggregateEbb(%"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %0, %"class.sh::TIntermAggregate"* %2, i1 zeroext false, i1 zeroext true)
  br label %38

37:                                               ; preds = %22, %32
  tail call fastcc void @_ZN2sh12_GLOBAL__N_122ScalarizeArgsTraverser13scalarizeArgsEPNS_16TIntermAggregateEbb(%"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %0, %"class.sh::TIntermAggregate"* %2, i1 zeroext true, i1 zeroext false)
  br label %38

38:                                               ; preds = %36, %37, %19
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_122ScalarizeArgsTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.sh::TVector.31", align 8
  %5 = bitcast %"class.sh::TVector.31"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 24, i1 false) #8
  %6 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %0, i64 0, i32 1, i32 0, i32 1
  %7 = load %"class.sh::TVector.31"*, %"class.sh::TVector.31"** %6, align 8
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %9 = load %"class.sh::TVector.31"*, %"class.sh::TVector.31"** %8, align 8
  %10 = icmp ult %"class.sh::TVector.31"* %7, %9
  br i1 %10, label %11, label %26

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %4, i64 0, i32 0, i32 0, i32 1
  %13 = bitcast %"class.sh::TIntermNode"*** %12 to i64*
  %14 = bitcast %"class.sh::TVector.31"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false)
  %15 = load i64, i64* %13, align 8
  %16 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %7, i64 0, i32 0, i32 0, i32 1
  %17 = bitcast %"class.sh::TIntermNode"*** %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %4, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %19 = bitcast %"class.sh::TIntermNode"*** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %7, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %22 = bitcast %"class.sh::TIntermNode"*** %21 to i64*
  store i64 %20, i64* %22, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 24, i1 false) #8
  %23 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %7, i64 1
  %24 = ptrtoint %"class.sh::TVector.31"* %23 to i64
  %25 = bitcast %"class.sh::TVector.31"** %6 to i64*
  store i64 %24, i64* %25, align 8
  br label %35

26:                                               ; preds = %3
  %27 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %0, i64 0, i32 1
  call void @_ZNSt3__16vectorIN2sh7TVectorIPNS1_11TIntermNodeEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector.163"* %27, %"class.sh::TVector.31"* nonnull dereferenceable(24) %4) #8
  %28 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %4, i64 0, i32 0, i32 0, i32 0
  %29 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %28, align 8
  %30 = icmp eq %"class.sh::TIntermNode"** %29, null
  br i1 %30, label %35, label %31

31:                                               ; preds = %26
  %32 = ptrtoint %"class.sh::TIntermNode"** %29 to i64
  %33 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %4, i64 0, i32 0, i32 0, i32 1
  %34 = bitcast %"class.sh::TIntermNode"*** %33 to i64*
  store i64 %32, i64* %34, align 8
  br label %35

35:                                               ; preds = %11, %26, %31
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #8
  %36 = bitcast %"class.sh::TIntermBlock"* %2 to %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)***
  %37 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*** %36, align 8
  %38 = getelementptr inbounds %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %37, i64 27
  %39 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %38, align 8
  %40 = call %"class.sh::TVector.31"* %39(%"class.sh::TIntermBlock"* %2) #8
  %41 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %40, i64 0, i32 0, i32 0, i32 0
  %42 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %41, align 8
  %43 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %40, i64 0, i32 0, i32 0, i32 1
  %44 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %43, align 8
  %45 = icmp eq %"class.sh::TIntermNode"** %42, %44
  br i1 %45, label %48, label %46

46:                                               ; preds = %35
  %47 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %0, i64 0, i32 0
  br label %68

48:                                               ; preds = %303, %35
  %49 = load %"class.sh::TVector.31"*, %"class.sh::TVector.31"** %6, align 8
  %50 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %49, i64 -1, i32 0
  %51 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %49, i64 -1, i32 0, i32 0, i32 1
  %52 = bitcast %"class.sh::TIntermNode"*** %51 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = bitcast %"class.std::__1::vector.32"* %50 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = sub i64 %53, %55
  %57 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*** %36, align 8
  %58 = getelementptr inbounds %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %57, i64 27
  %59 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %58, align 8
  %60 = call %"class.sh::TVector.31"* %59(%"class.sh::TIntermBlock"* %2) #8
  %61 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %60, i64 0, i32 0, i32 0, i32 1
  %62 = bitcast %"class.sh::TIntermNode"*** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = bitcast %"class.sh::TVector.31"* %60 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = sub i64 %63, %65
  %67 = icmp ugt i64 %56, %66
  br i1 %67, label %306, label %328

68:                                               ; preds = %46, %303
  %69 = phi %"class.sh::TIntermNode"** [ %42, %46 ], [ %304, %303 ]
  %70 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %69, align 8
  %71 = ptrtoint %"class.sh::TIntermNode"* %70 to i64
  %72 = bitcast %"class.sh::TIntermNode"* %70 to void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)***
  %73 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)**, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*** %72, align 8
  %74 = getelementptr inbounds void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %73, i64 2
  %75 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %74, align 8
  call void %75(%"class.sh::TIntermNode"* %70, %"class.sh::TIntermTraverser"* %47) #8
  %76 = load %"class.sh::TVector.31"*, %"class.sh::TVector.31"** %6, align 8
  %77 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %76, i64 -1, i32 0
  %78 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %76, i64 -1, i32 0, i32 0, i32 1
  %79 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %78, align 8
  %80 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %76, i64 -1, i32 0, i32 0, i32 2, i32 0, i32 0
  %81 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %80, align 8
  %82 = icmp eq %"class.sh::TIntermNode"** %79, %81
  %83 = ptrtoint %"class.sh::TIntermNode"** %81 to i64
  br i1 %82, label %89, label %84

84:                                               ; preds = %68
  %85 = bitcast %"class.sh::TIntermNode"** %79 to i64*
  store i64 %71, i64* %85, align 8
  %86 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %79, i64 1
  %87 = ptrtoint %"class.sh::TIntermNode"** %86 to i64
  %88 = bitcast %"class.sh::TIntermNode"*** %78 to i64*
  store i64 %87, i64* %88, align 8
  br label %303

89:                                               ; preds = %68
  %90 = ptrtoint %"class.sh::TIntermNode"** %79 to i64
  %91 = bitcast %"class.sh::TIntermNode"*** %78 to i64*
  %92 = bitcast %"class.std::__1::vector.32"* %77 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %90, %93
  %95 = ashr exact i64 %94, 3
  %96 = add nsw i64 %95, 1
  %97 = icmp ugt i64 %96, 2305843009213693951
  br i1 %97, label %98, label %100

98:                                               ; preds = %89
  %99 = bitcast %"class.std::__1::vector.32"* %77 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %99) #10
  unreachable

100:                                              ; preds = %89
  %101 = bitcast %"class.sh::TIntermNode"*** %80 to i64*
  %102 = sub i64 %83, %93
  %103 = ashr exact i64 %102, 3
  %104 = icmp ult i64 %103, 1152921504606846975
  br i1 %104, label %105, label %110

105:                                              ; preds = %100
  %106 = ashr exact i64 %102, 2
  %107 = icmp ult i64 %106, %96
  %108 = select i1 %107, i64 %96, i64 %106
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %116, label %110

110:                                              ; preds = %105, %100
  %111 = phi i64 [ %108, %105 ], [ 2305843009213693951, %100 ]
  %112 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #8
  %113 = shl i64 %111, 3
  %114 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %112, i64 %113) #8
  %115 = bitcast i8* %114 to %"class.sh::TIntermNode"**
  br label %116

116:                                              ; preds = %110, %105
  %117 = phi i64 [ %111, %110 ], [ 0, %105 ]
  %118 = phi %"class.sh::TIntermNode"** [ %115, %110 ], [ null, %105 ]
  %119 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 %95
  %120 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 %117
  %121 = ptrtoint %"class.sh::TIntermNode"** %120 to i64
  %122 = bitcast %"class.sh::TIntermNode"** %119 to i64*
  store i64 %71, i64* %122, align 8
  %123 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 1
  %124 = ptrtoint %"class.sh::TIntermNode"** %123 to i64
  %125 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %77, i64 0, i32 0, i32 0
  %126 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %125, align 8
  %127 = ptrtoint %"class.sh::TIntermNode"** %126 to i64
  %128 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %78, align 8
  %129 = icmp eq %"class.sh::TIntermNode"** %128, %126
  br i1 %129, label %300, label %130

130:                                              ; preds = %116
  %131 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %128, i64 -1
  %132 = ptrtoint %"class.sh::TIntermNode"** %131 to i64
  %133 = sub i64 %132, %127
  %134 = lshr i64 %133, 3
  %135 = add nuw nsw i64 %134, 1
  %136 = icmp ult i64 %135, 4
  br i1 %136, label %230, label %137

137:                                              ; preds = %130
  %138 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 -1
  %139 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %128, i64 -1
  %140 = ptrtoint %"class.sh::TIntermNode"** %139 to i64
  %141 = sub i64 %140, %127
  %142 = lshr i64 %141, 3
  %143 = sub nsw i64 %95, %142
  %144 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %138, i64 %143
  %145 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %128, i64 -1
  %146 = sub nsw i64 0, %142
  %147 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %145, i64 %146
  %148 = icmp ult %"class.sh::TIntermNode"** %144, %128
  %149 = icmp ult %"class.sh::TIntermNode"** %147, %119
  %150 = and i1 %148, %149
  br i1 %150, label %230, label %151

151:                                              ; preds = %137
  %152 = and i64 %135, 4611686018427387900
  %153 = sub nsw i64 0, %152
  %154 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 %153
  %155 = sub nsw i64 0, %152
  %156 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %128, i64 %155
  %157 = add nsw i64 %152, -4
  %158 = lshr exact i64 %157, 2
  %159 = add nuw nsw i64 %158, 1
  %160 = and i64 %159, 1
  %161 = icmp eq i64 %157, 0
  br i1 %161, label %206, label %162

162:                                              ; preds = %151
  %163 = sub nuw nsw i64 %159, %160
  %164 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 -1
  %165 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %128, i64 -1
  %166 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 -1
  %167 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %128, i64 -1
  br label %168

168:                                              ; preds = %168, %162
  %169 = phi i64 [ 0, %162 ], [ %203, %168 ]
  %170 = phi i64 [ %163, %162 ], [ %204, %168 ]
  %171 = sub i64 0, %169
  %172 = sub i64 0, %169
  %173 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %164, i64 %171
  %174 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 %172
  %175 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %174, i64 -1
  %176 = bitcast %"class.sh::TIntermNode"** %175 to <2 x i64>*
  %177 = load <2 x i64>, <2 x i64>* %176, align 8, !alias.scope !2
  %178 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %174, i64 -2
  %179 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %178, i64 -1
  %180 = bitcast %"class.sh::TIntermNode"** %179 to <2 x i64>*
  %181 = load <2 x i64>, <2 x i64>* %180, align 8, !alias.scope !2
  %182 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %173, i64 -1
  %183 = bitcast %"class.sh::TIntermNode"** %182 to <2 x i64>*
  store <2 x i64> %177, <2 x i64>* %183, align 8, !alias.scope !5, !noalias !2
  %184 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %173, i64 -2
  %185 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %184, i64 -1
  %186 = bitcast %"class.sh::TIntermNode"** %185 to <2 x i64>*
  store <2 x i64> %181, <2 x i64>* %186, align 8, !alias.scope !5, !noalias !2
  %187 = sub nuw nsw i64 -4, %169
  %188 = sub nuw nsw i64 -4, %169
  %189 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %166, i64 %187
  %190 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %167, i64 %188
  %191 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %190, i64 -1
  %192 = bitcast %"class.sh::TIntermNode"** %191 to <2 x i64>*
  %193 = load <2 x i64>, <2 x i64>* %192, align 8, !alias.scope !2
  %194 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %190, i64 -2
  %195 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %194, i64 -1
  %196 = bitcast %"class.sh::TIntermNode"** %195 to <2 x i64>*
  %197 = load <2 x i64>, <2 x i64>* %196, align 8, !alias.scope !2
  %198 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %189, i64 -1
  %199 = bitcast %"class.sh::TIntermNode"** %198 to <2 x i64>*
  store <2 x i64> %193, <2 x i64>* %199, align 8, !alias.scope !5, !noalias !2
  %200 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %189, i64 -2
  %201 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %200, i64 -1
  %202 = bitcast %"class.sh::TIntermNode"** %201 to <2 x i64>*
  store <2 x i64> %197, <2 x i64>* %202, align 8, !alias.scope !5, !noalias !2
  %203 = add i64 %169, 8
  %204 = add i64 %170, -2
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %206, label %168, !llvm.loop !7

206:                                              ; preds = %168, %151
  %207 = phi i64 [ 0, %151 ], [ %203, %168 ]
  %208 = icmp eq i64 %160, 0
  br i1 %208, label %228, label %209

209:                                              ; preds = %206
  %210 = sub i64 0, %207
  %211 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 -1
  %212 = sub i64 0, %207
  %213 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %128, i64 -1
  %214 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %211, i64 %210
  %215 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %213, i64 %212
  %216 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 -1
  %217 = bitcast %"class.sh::TIntermNode"** %216 to <2 x i64>*
  %218 = load <2 x i64>, <2 x i64>* %217, align 8, !alias.scope !2
  %219 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %215, i64 -2
  %220 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %219, i64 -1
  %221 = bitcast %"class.sh::TIntermNode"** %220 to <2 x i64>*
  %222 = load <2 x i64>, <2 x i64>* %221, align 8, !alias.scope !2
  %223 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %214, i64 -1
  %224 = bitcast %"class.sh::TIntermNode"** %223 to <2 x i64>*
  store <2 x i64> %218, <2 x i64>* %224, align 8, !alias.scope !5, !noalias !2
  %225 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %214, i64 -2
  %226 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %225, i64 -1
  %227 = bitcast %"class.sh::TIntermNode"** %226 to <2 x i64>*
  store <2 x i64> %222, <2 x i64>* %227, align 8, !alias.scope !5, !noalias !2
  br label %228

228:                                              ; preds = %206, %209
  %229 = icmp eq i64 %135, %152
  br i1 %229, label %300, label %230

230:                                              ; preds = %228, %137, %130
  %231 = phi %"class.sh::TIntermNode"** [ %119, %137 ], [ %119, %130 ], [ %154, %228 ]
  %232 = phi %"class.sh::TIntermNode"** [ %128, %137 ], [ %128, %130 ], [ %156, %228 ]
  %233 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %232, i64 -1
  %234 = ptrtoint %"class.sh::TIntermNode"** %233 to i64
  %235 = sub i64 %234, %127
  %236 = lshr i64 %235, 3
  %237 = add nuw nsw i64 %236, 1
  %238 = and i64 %237, 7
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %251, label %240

240:                                              ; preds = %230, %240
  %241 = phi %"class.sh::TIntermNode"** [ %244, %240 ], [ %231, %230 ]
  %242 = phi %"class.sh::TIntermNode"** [ %245, %240 ], [ %232, %230 ]
  %243 = phi i64 [ %249, %240 ], [ %238, %230 ]
  %244 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %241, i64 -1
  %245 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %242, i64 -1
  %246 = bitcast %"class.sh::TIntermNode"** %245 to i64*
  %247 = load i64, i64* %246, align 8
  %248 = bitcast %"class.sh::TIntermNode"** %244 to i64*
  store i64 %247, i64* %248, align 8
  %249 = add i64 %243, -1
  %250 = icmp eq i64 %249, 0
  br i1 %250, label %251, label %240, !llvm.loop !9

251:                                              ; preds = %240, %230
  %252 = phi %"class.sh::TIntermNode"** [ undef, %230 ], [ %244, %240 ]
  %253 = phi %"class.sh::TIntermNode"** [ %231, %230 ], [ %244, %240 ]
  %254 = phi %"class.sh::TIntermNode"** [ %232, %230 ], [ %245, %240 ]
  %255 = icmp ult i64 %235, 56
  br i1 %255, label %300, label %256

256:                                              ; preds = %251, %256
  %257 = phi %"class.sh::TIntermNode"** [ %294, %256 ], [ %253, %251 ]
  %258 = phi %"class.sh::TIntermNode"** [ %295, %256 ], [ %254, %251 ]
  %259 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %257, i64 -1
  %260 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %258, i64 -1
  %261 = bitcast %"class.sh::TIntermNode"** %260 to i64*
  %262 = load i64, i64* %261, align 8
  %263 = bitcast %"class.sh::TIntermNode"** %259 to i64*
  store i64 %262, i64* %263, align 8
  %264 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %257, i64 -2
  %265 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %258, i64 -2
  %266 = bitcast %"class.sh::TIntermNode"** %265 to i64*
  %267 = load i64, i64* %266, align 8
  %268 = bitcast %"class.sh::TIntermNode"** %264 to i64*
  store i64 %267, i64* %268, align 8
  %269 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %257, i64 -3
  %270 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %258, i64 -3
  %271 = bitcast %"class.sh::TIntermNode"** %270 to i64*
  %272 = load i64, i64* %271, align 8
  %273 = bitcast %"class.sh::TIntermNode"** %269 to i64*
  store i64 %272, i64* %273, align 8
  %274 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %257, i64 -4
  %275 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %258, i64 -4
  %276 = bitcast %"class.sh::TIntermNode"** %275 to i64*
  %277 = load i64, i64* %276, align 8
  %278 = bitcast %"class.sh::TIntermNode"** %274 to i64*
  store i64 %277, i64* %278, align 8
  %279 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %257, i64 -5
  %280 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %258, i64 -5
  %281 = bitcast %"class.sh::TIntermNode"** %280 to i64*
  %282 = load i64, i64* %281, align 8
  %283 = bitcast %"class.sh::TIntermNode"** %279 to i64*
  store i64 %282, i64* %283, align 8
  %284 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %257, i64 -6
  %285 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %258, i64 -6
  %286 = bitcast %"class.sh::TIntermNode"** %285 to i64*
  %287 = load i64, i64* %286, align 8
  %288 = bitcast %"class.sh::TIntermNode"** %284 to i64*
  store i64 %287, i64* %288, align 8
  %289 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %257, i64 -7
  %290 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %258, i64 -7
  %291 = bitcast %"class.sh::TIntermNode"** %290 to i64*
  %292 = load i64, i64* %291, align 8
  %293 = bitcast %"class.sh::TIntermNode"** %289 to i64*
  store i64 %292, i64* %293, align 8
  %294 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %257, i64 -8
  %295 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %258, i64 -8
  %296 = bitcast %"class.sh::TIntermNode"** %295 to i64*
  %297 = load i64, i64* %296, align 8
  %298 = bitcast %"class.sh::TIntermNode"** %294 to i64*
  store i64 %297, i64* %298, align 8
  %299 = icmp eq %"class.sh::TIntermNode"** %295, %126
  br i1 %299, label %300, label %256, !llvm.loop !11

300:                                              ; preds = %251, %256, %228, %116
  %301 = phi %"class.sh::TIntermNode"** [ %119, %116 ], [ %154, %228 ], [ %252, %251 ], [ %294, %256 ]
  %302 = ptrtoint %"class.sh::TIntermNode"** %301 to i64
  store i64 %302, i64* %92, align 8
  store i64 %124, i64* %91, align 8
  store i64 %121, i64* %101, align 8
  br label %303

303:                                              ; preds = %84, %300
  %304 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %69, i64 1
  %305 = icmp eq %"class.sh::TIntermNode"** %304, %44
  br i1 %305, label %48, label %68

306:                                              ; preds = %48
  %307 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*** %36, align 8
  %308 = getelementptr inbounds %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %307, i64 27
  %309 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %308, align 8
  %310 = call %"class.sh::TVector.31"* %309(%"class.sh::TIntermBlock"* %2) #8
  %311 = bitcast %"class.sh::TVector.31"* %310 to i64*
  %312 = load i64, i64* %311, align 8
  %313 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %310, i64 0, i32 0, i32 0, i32 1
  %314 = bitcast %"class.sh::TIntermNode"*** %313 to i64*
  store i64 %312, i64* %314, align 8
  %315 = load %"class.sh::TVector.31"*, %"class.sh::TVector.31"** %6, align 8
  %316 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %315, i64 -1
  %317 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*** %36, align 8
  %318 = getelementptr inbounds %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %317, i64 27
  %319 = load %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermBlock"*)** %318, align 8
  %320 = call %"class.sh::TVector.31"* %319(%"class.sh::TIntermBlock"* %2) #8
  %321 = icmp eq %"class.sh::TVector.31"* %320, %316
  br i1 %321, label %328, label %322

322:                                              ; preds = %306
  %323 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %320, i64 0, i32 0
  %324 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %316, i64 0, i32 0, i32 0, i32 0
  %325 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %324, align 8
  %326 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %315, i64 -1, i32 0, i32 0, i32 1
  %327 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %326, align 8
  call void @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6assignIPS3_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(%"class.std::__1::vector.32"* %323, %"class.sh::TIntermNode"** %325, %"class.sh::TIntermNode"** %327) #8
  br label %328

328:                                              ; preds = %322, %306, %48
  %329 = load %"class.sh::TVector.31"*, %"class.sh::TVector.31"** %6, align 8
  %330 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %329, i64 -1
  %331 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %330, i64 0, i32 0, i32 0, i32 0
  %332 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %331, align 8
  %333 = icmp eq %"class.sh::TIntermNode"** %332, null
  br i1 %333, label %338, label %334

334:                                              ; preds = %328
  %335 = ptrtoint %"class.sh::TIntermNode"** %332 to i64
  %336 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %329, i64 -1, i32 0, i32 0, i32 1
  %337 = bitcast %"class.sh::TIntermNode"*** %336 to i64*
  store i64 %335, i64* %337, align 8
  br label %338

338:                                              ; preds = %328, %334
  store %"class.sh::TVector.31"* %330, %"class.sh::TVector.31"** %6, align 8
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #2

declare zeroext i1 @_ZN2sh24IntermNodePatternMatcher5matchEPNS_16TIntermAggregateEPNS_11TIntermNodeE(%"class.sh::IntermNodePatternMatcher"*, %"class.sh::TIntermAggregate"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2sh12_GLOBAL__N_122ScalarizeArgsTraverser13scalarizeArgsEPNS_16TIntermAggregateEbb(%"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* nocapture readonly, %"class.sh::TIntermAggregate"*, i1 zeroext, i1 zeroext) unnamed_addr #0 align 2 {
  %5 = alloca %"class.sh::TVector.31", align 8
  %6 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %1, i64 0, i32 0, i32 0
  %7 = bitcast %"class.sh::TIntermAggregate"* %1 to %"class.sh::TType"* (%"class.sh::TIntermExpression"*)***
  %8 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)**, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*** %7, align 8
  %9 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %8, i64 31
  %10 = load %"class.sh::TType"* (%"class.sh::TIntermExpression"*)*, %"class.sh::TType"* (%"class.sh::TIntermExpression"*)** %9, align 8
  %11 = tail call dereferenceable(184) %"class.sh::TType"* %10(%"class.sh::TIntermExpression"* %6) #8
  %12 = tail call i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"* %11) #8
  %13 = trunc i64 %12 to i32
  %14 = bitcast %"class.sh::TIntermAggregate"* %1 to %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)***
  %15 = load %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)**, %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)*** %14, align 8
  %16 = getelementptr inbounds %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)** %15, i64 32
  %17 = load %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector.31"* (%"class.sh::TIntermAggregate"*)** %16, align 8
  %18 = tail call %"class.sh::TVector.31"* %17(%"class.sh::TIntermAggregate"* %1) #8
  %19 = bitcast %"class.sh::TVector.31"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #8
  %20 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %5, i64 0, i32 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %5, i64 0, i32 0, i32 0, i32 1
  %22 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 0, i64 24, i1 false) #8
  %23 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %18, i64 0, i32 0, i32 0, i32 1
  %24 = bitcast %"class.sh::TIntermNode"*** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %"class.sh::TVector.31"* %18 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %25, %27
  %29 = ashr exact i64 %28, 3
  %30 = icmp eq i64 %28, 0
  br i1 %30, label %231, label %31

31:                                               ; preds = %4
  %32 = icmp ugt i64 %29, 2305843009213693951
  br i1 %32, label %33, label %35

33:                                               ; preds = %31
  %34 = bitcast %"class.sh::TVector.31"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %34) #10
  unreachable

35:                                               ; preds = %31
  %36 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #8
  %37 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %36, i64 %28) #8
  %38 = bitcast i8* %37 to %"class.sh::TIntermNode"**
  %39 = bitcast %"class.sh::TIntermNode"*** %21 to i8**
  store i8* %37, i8** %39, align 8
  %40 = bitcast %"class.sh::TVector.31"* %5 to i8**
  store i8* %37, i8** %40, align 8
  %41 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %38, i64 %29
  store %"class.sh::TIntermNode"** %41, %"class.sh::TIntermNode"*** %22, align 8
  %42 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %18, i64 0, i32 0, i32 0, i32 0
  %43 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %42, align 8
  %44 = bitcast %"class.sh::TIntermNode"** %43 to i8*
  %45 = ptrtoint %"class.sh::TIntermNode"** %43 to i64
  %46 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %23, align 8
  %47 = bitcast %"class.sh::TIntermNode"*** %21 to i64*
  %48 = ptrtoint i8* %37 to i64
  %49 = icmp eq %"class.sh::TIntermNode"** %43, %46
  br i1 %49, label %227, label %50

50:                                               ; preds = %35
  %51 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 -1
  %52 = ptrtoint %"class.sh::TIntermNode"** %51 to i64
  %53 = sub i64 %52, %45
  %54 = lshr i64 %53, 3
  %55 = add nuw nsw i64 %54, 1
  %56 = icmp ult i64 %55, 4
  br i1 %56, label %152, label %57

57:                                               ; preds = %50
  %58 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 -1
  %59 = ptrtoint %"class.sh::TIntermNode"** %58 to i64
  %60 = sub i64 %59, %45
  %61 = lshr i64 %60, 3
  %62 = add i64 %60, 8
  %63 = and i64 %62, -8
  %64 = getelementptr i8, i8* %37, i64 %63
  %65 = add nuw nsw i64 %61, 1
  %66 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %43, i64 %65
  %67 = bitcast %"class.sh::TIntermNode"** %66 to i8*
  %68 = icmp ult i8* %37, %67
  %69 = icmp ugt i8* %64, %44
  %70 = and i1 %68, %69
  br i1 %70, label %152, label %71

71:                                               ; preds = %57
  %72 = and i64 %55, 4611686018427387900
  %73 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %38, i64 %72
  %74 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %43, i64 %72
  %75 = add nsw i64 %72, -4
  %76 = lshr exact i64 %75, 2
  %77 = add nuw nsw i64 %76, 1
  %78 = and i64 %77, 3
  %79 = icmp ult i64 %75, 12
  br i1 %79, label %131, label %80

80:                                               ; preds = %71
  %81 = sub nsw i64 %77, %78
  br label %82

82:                                               ; preds = %82, %80
  %83 = phi i64 [ 0, %80 ], [ %128, %82 ]
  %84 = phi i64 [ %81, %80 ], [ %129, %82 ]
  %85 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %38, i64 %83
  %86 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %43, i64 %83
  %87 = bitcast %"class.sh::TIntermNode"** %86 to <2 x i64>*
  %88 = load <2 x i64>, <2 x i64>* %87, align 8, !alias.scope !12
  %89 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %86, i64 2
  %90 = bitcast %"class.sh::TIntermNode"** %89 to <2 x i64>*
  %91 = load <2 x i64>, <2 x i64>* %90, align 8, !alias.scope !12
  %92 = bitcast %"class.sh::TIntermNode"** %85 to <2 x i64>*
  store <2 x i64> %88, <2 x i64>* %92, align 8, !alias.scope !15, !noalias !12
  %93 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %85, i64 2
  %94 = bitcast %"class.sh::TIntermNode"** %93 to <2 x i64>*
  store <2 x i64> %91, <2 x i64>* %94, align 8, !alias.scope !15, !noalias !12
  %95 = or i64 %83, 4
  %96 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %38, i64 %95
  %97 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %43, i64 %95
  %98 = bitcast %"class.sh::TIntermNode"** %97 to <2 x i64>*
  %99 = load <2 x i64>, <2 x i64>* %98, align 8, !alias.scope !12
  %100 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %97, i64 2
  %101 = bitcast %"class.sh::TIntermNode"** %100 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 8, !alias.scope !12
  %103 = bitcast %"class.sh::TIntermNode"** %96 to <2 x i64>*
  store <2 x i64> %99, <2 x i64>* %103, align 8, !alias.scope !15, !noalias !12
  %104 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %96, i64 2
  %105 = bitcast %"class.sh::TIntermNode"** %104 to <2 x i64>*
  store <2 x i64> %102, <2 x i64>* %105, align 8, !alias.scope !15, !noalias !12
  %106 = or i64 %83, 8
  %107 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %38, i64 %106
  %108 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %43, i64 %106
  %109 = bitcast %"class.sh::TIntermNode"** %108 to <2 x i64>*
  %110 = load <2 x i64>, <2 x i64>* %109, align 8, !alias.scope !12
  %111 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %108, i64 2
  %112 = bitcast %"class.sh::TIntermNode"** %111 to <2 x i64>*
  %113 = load <2 x i64>, <2 x i64>* %112, align 8, !alias.scope !12
  %114 = bitcast %"class.sh::TIntermNode"** %107 to <2 x i64>*
  store <2 x i64> %110, <2 x i64>* %114, align 8, !alias.scope !15, !noalias !12
  %115 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %107, i64 2
  %116 = bitcast %"class.sh::TIntermNode"** %115 to <2 x i64>*
  store <2 x i64> %113, <2 x i64>* %116, align 8, !alias.scope !15, !noalias !12
  %117 = or i64 %83, 12
  %118 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %38, i64 %117
  %119 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %43, i64 %117
  %120 = bitcast %"class.sh::TIntermNode"** %119 to <2 x i64>*
  %121 = load <2 x i64>, <2 x i64>* %120, align 8, !alias.scope !12
  %122 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %119, i64 2
  %123 = bitcast %"class.sh::TIntermNode"** %122 to <2 x i64>*
  %124 = load <2 x i64>, <2 x i64>* %123, align 8, !alias.scope !12
  %125 = bitcast %"class.sh::TIntermNode"** %118 to <2 x i64>*
  store <2 x i64> %121, <2 x i64>* %125, align 8, !alias.scope !15, !noalias !12
  %126 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %118, i64 2
  %127 = bitcast %"class.sh::TIntermNode"** %126 to <2 x i64>*
  store <2 x i64> %124, <2 x i64>* %127, align 8, !alias.scope !15, !noalias !12
  %128 = add i64 %83, 16
  %129 = add i64 %84, -4
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %82, !llvm.loop !17

131:                                              ; preds = %82, %71
  %132 = phi i64 [ 0, %71 ], [ %128, %82 ]
  %133 = icmp eq i64 %78, 0
  br i1 %133, label %150, label %134

134:                                              ; preds = %131, %134
  %135 = phi i64 [ %147, %134 ], [ %132, %131 ]
  %136 = phi i64 [ %148, %134 ], [ %78, %131 ]
  %137 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %38, i64 %135
  %138 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %43, i64 %135
  %139 = bitcast %"class.sh::TIntermNode"** %138 to <2 x i64>*
  %140 = load <2 x i64>, <2 x i64>* %139, align 8, !alias.scope !12
  %141 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %138, i64 2
  %142 = bitcast %"class.sh::TIntermNode"** %141 to <2 x i64>*
  %143 = load <2 x i64>, <2 x i64>* %142, align 8, !alias.scope !12
  %144 = bitcast %"class.sh::TIntermNode"** %137 to <2 x i64>*
  store <2 x i64> %140, <2 x i64>* %144, align 8, !alias.scope !15, !noalias !12
  %145 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %137, i64 2
  %146 = bitcast %"class.sh::TIntermNode"** %145 to <2 x i64>*
  store <2 x i64> %143, <2 x i64>* %146, align 8, !alias.scope !15, !noalias !12
  %147 = add i64 %135, 4
  %148 = add i64 %136, -1
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %134, !llvm.loop !18

150:                                              ; preds = %134, %131
  %151 = icmp eq i64 %55, %72
  br i1 %151, label %223, label %152

152:                                              ; preds = %150, %57, %50
  %153 = phi %"class.sh::TIntermNode"** [ %38, %57 ], [ %38, %50 ], [ %73, %150 ]
  %154 = phi %"class.sh::TIntermNode"** [ %43, %57 ], [ %43, %50 ], [ %74, %150 ]
  %155 = ptrtoint %"class.sh::TIntermNode"** %154 to i64
  %156 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %46, i64 -1
  %157 = ptrtoint %"class.sh::TIntermNode"** %156 to i64
  %158 = sub i64 %157, %155
  %159 = lshr i64 %158, 3
  %160 = add nuw nsw i64 %159, 1
  %161 = and i64 %160, 7
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %174, label %163

163:                                              ; preds = %152, %163
  %164 = phi %"class.sh::TIntermNode"** [ %171, %163 ], [ %153, %152 ]
  %165 = phi %"class.sh::TIntermNode"** [ %170, %163 ], [ %154, %152 ]
  %166 = phi i64 [ %172, %163 ], [ %161, %152 ]
  %167 = bitcast %"class.sh::TIntermNode"** %164 to i64*
  %168 = bitcast %"class.sh::TIntermNode"** %165 to i64*
  %169 = load i64, i64* %168, align 8
  store i64 %169, i64* %167, align 8
  %170 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %165, i64 1
  %171 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %164, i64 1
  %172 = add i64 %166, -1
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %174, label %163, !llvm.loop !19

174:                                              ; preds = %163, %152
  %175 = phi %"class.sh::TIntermNode"** [ undef, %152 ], [ %171, %163 ]
  %176 = phi %"class.sh::TIntermNode"** [ %153, %152 ], [ %171, %163 ]
  %177 = phi %"class.sh::TIntermNode"** [ %154, %152 ], [ %170, %163 ]
  %178 = icmp ult i64 %158, 56
  br i1 %178, label %223, label %179

179:                                              ; preds = %174, %179
  %180 = phi %"class.sh::TIntermNode"** [ %221, %179 ], [ %176, %174 ]
  %181 = phi %"class.sh::TIntermNode"** [ %220, %179 ], [ %177, %174 ]
  %182 = bitcast %"class.sh::TIntermNode"** %180 to i64*
  %183 = bitcast %"class.sh::TIntermNode"** %181 to i64*
  %184 = load i64, i64* %183, align 8
  store i64 %184, i64* %182, align 8
  %185 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %181, i64 1
  %186 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %180, i64 1
  %187 = bitcast %"class.sh::TIntermNode"** %186 to i64*
  %188 = bitcast %"class.sh::TIntermNode"** %185 to i64*
  %189 = load i64, i64* %188, align 8
  store i64 %189, i64* %187, align 8
  %190 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %181, i64 2
  %191 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %180, i64 2
  %192 = bitcast %"class.sh::TIntermNode"** %191 to i64*
  %193 = bitcast %"class.sh::TIntermNode"** %190 to i64*
  %194 = load i64, i64* %193, align 8
  store i64 %194, i64* %192, align 8
  %195 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %181, i64 3
  %196 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %180, i64 3
  %197 = bitcast %"class.sh::TIntermNode"** %196 to i64*
  %198 = bitcast %"class.sh::TIntermNode"** %195 to i64*
  %199 = load i64, i64* %198, align 8
  store i64 %199, i64* %197, align 8
  %200 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %181, i64 4
  %201 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %180, i64 4
  %202 = bitcast %"class.sh::TIntermNode"** %201 to i64*
  %203 = bitcast %"class.sh::TIntermNode"** %200 to i64*
  %204 = load i64, i64* %203, align 8
  store i64 %204, i64* %202, align 8
  %205 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %181, i64 5
  %206 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %180, i64 5
  %207 = bitcast %"class.sh::TIntermNode"** %206 to i64*
  %208 = bitcast %"class.sh::TIntermNode"** %205 to i64*
  %209 = load i64, i64* %208, align 8
  store i64 %209, i64* %207, align 8
  %210 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %181, i64 6
  %211 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %180, i64 6
  %212 = bitcast %"class.sh::TIntermNode"** %211 to i64*
  %213 = bitcast %"class.sh::TIntermNode"** %210 to i64*
  %214 = load i64, i64* %213, align 8
  store i64 %214, i64* %212, align 8
  %215 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %181, i64 7
  %216 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %180, i64 7
  %217 = bitcast %"class.sh::TIntermNode"** %216 to i64*
  %218 = bitcast %"class.sh::TIntermNode"** %215 to i64*
  %219 = load i64, i64* %218, align 8
  store i64 %219, i64* %217, align 8
  %220 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %181, i64 8
  %221 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %180, i64 8
  %222 = icmp eq %"class.sh::TIntermNode"** %220, %46
  br i1 %222, label %223, label %179, !llvm.loop !20

223:                                              ; preds = %174, %179, %150
  %224 = phi %"class.sh::TIntermNode"** [ %73, %150 ], [ %175, %174 ], [ %221, %179 ]
  %225 = ptrtoint %"class.sh::TIntermNode"** %224 to i64
  %226 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %20, align 8
  br label %227

227:                                              ; preds = %223, %35
  %228 = phi %"class.sh::TIntermNode"** [ %38, %35 ], [ %226, %223 ]
  %229 = phi i64 [ %48, %35 ], [ %225, %223 ]
  store i64 %229, i64* %47, align 8
  %230 = load i64, i64* %26, align 8
  br label %231

231:                                              ; preds = %4, %227
  %232 = phi %"class.sh::TIntermNode"** [ null, %4 ], [ %228, %227 ]
  %233 = phi i64 [ %27, %4 ], [ %230, %227 ]
  store i64 %233, i64* %24, align 8
  %234 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %21, align 8
  %235 = icmp eq %"class.sh::TIntermNode"** %232, %234
  br i1 %235, label %246, label %236

236:                                              ; preds = %231
  %237 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %0, i64 0, i32 2
  %238 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %0, i64 0, i32 3
  %239 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %0, i64 0, i32 0, i32 8
  %240 = getelementptr inbounds %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser", %"class.sh::(anonymous namespace)::ScalarizeArgsTraverser"* %0, i64 0, i32 1, i32 0, i32 1
  %241 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %18, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %242 = bitcast %"class.sh::TIntermNode"*** %241 to i64*
  %243 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %18, i64 0, i32 0, i32 0, i32 0
  br label %253

244:                                              ; preds = %1759
  %245 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %20, align 8
  br label %246

246:                                              ; preds = %244, %231
  %247 = phi %"class.sh::TIntermNode"** [ %245, %244 ], [ %232, %231 ]
  %248 = icmp eq %"class.sh::TIntermNode"** %247, null
  br i1 %248, label %252, label %249

249:                                              ; preds = %246
  %250 = ptrtoint %"class.sh::TIntermNode"** %247 to i64
  %251 = bitcast %"class.sh::TIntermNode"*** %21 to i64*
  store i64 %250, i64* %251, align 8
  br label %252

252:                                              ; preds = %246, %249
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #8
  ret void

253:                                              ; preds = %236, %1759
  %254 = phi i32 [ %13, %236 ], [ %1760, %1759 ]
  %255 = phi %"class.sh::TIntermNode"** [ %232, %236 ], [ %1761, %1759 ]
  %256 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, align 8
  %257 = bitcast %"class.sh::TIntermNode"* %256 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %258 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %257, align 8
  %259 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %258, i64 4
  %260 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %259, align 8
  %261 = tail call %"class.sh::TIntermTyped"* %260(%"class.sh::TIntermNode"* %256) #8
  %262 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #8
  %263 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %262, i64 184) #8
  %264 = bitcast i8* %263 to %"class.sh::TType"*
  %265 = bitcast %"class.sh::TIntermTyped"* %261 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %266 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %265, align 8
  %267 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %266, i64 31
  %268 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %267, align 8
  %269 = tail call dereferenceable(184) %"class.sh::TType"* %268(%"class.sh::TIntermTyped"* %261) #8
  tail call void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"* %264, %"class.sh::TType"* dereferenceable(184) %269) #8
  %270 = getelementptr inbounds i8, i8* %263, i64 8
  %271 = bitcast i8* %270 to i32*
  store i32 0, i32* %271, align 8
  %272 = load i32, i32* %237, align 8
  %273 = icmp eq i32 %272, 35632
  br i1 %273, label %274, label %287

274:                                              ; preds = %253
  %275 = bitcast i8* %263 to i32*
  %276 = load i32, i32* %275, align 8
  %277 = icmp eq i32 %276, 1
  br i1 %277, label %278, label %287

278:                                              ; preds = %274
  %279 = getelementptr inbounds i8, i8* %263, i64 4
  %280 = bitcast i8* %279 to i32*
  %281 = load i32, i32* %280, align 4
  %282 = icmp eq i32 %281, 0
  br i1 %282, label %283, label %287

283:                                              ; preds = %278
  %284 = load i8, i8* %238, align 4, !range !21
  %285 = icmp eq i8 %284, 0
  %286 = select i1 %285, i32 2, i32 3
  store i32 %286, i32* %280, align 4
  br label %287

287:                                              ; preds = %283, %278, %274, %253
  %288 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %239, align 8
  %289 = tail call %"class.sh::TVariable"* @_ZN2sh18CreateTempVariableEPNS_12TSymbolTableEPKNS_5TTypeE(%"class.sh::TSymbolTable"* %288, %"class.sh::TType"* %264) #8
  %290 = load %"class.sh::TVector.31"*, %"class.sh::TVector.31"** %240, align 8
  %291 = tail call %"class.sh::TIntermDeclaration"* @_ZN2sh29CreateTempInitDeclarationNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"* %289, %"class.sh::TIntermTyped"* %261) #8
  %292 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %290, i64 -1, i32 0
  %293 = ptrtoint %"class.sh::TIntermDeclaration"* %291 to i64
  %294 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %290, i64 -1, i32 0, i32 0, i32 1
  %295 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %294, align 8
  %296 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %290, i64 -1, i32 0, i32 0, i32 2, i32 0, i32 0
  %297 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %296, align 8
  %298 = icmp ult %"class.sh::TIntermNode"** %295, %297
  %299 = ptrtoint %"class.sh::TIntermNode"** %297 to i64
  br i1 %298, label %300, label %305

300:                                              ; preds = %287
  %301 = bitcast %"class.sh::TIntermNode"** %295 to i64*
  store i64 %293, i64* %301, align 8
  %302 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %295, i64 1
  %303 = ptrtoint %"class.sh::TIntermNode"** %302 to i64
  %304 = bitcast %"class.sh::TIntermNode"*** %294 to i64*
  store i64 %303, i64* %304, align 8
  br label %519

305:                                              ; preds = %287
  %306 = ptrtoint %"class.sh::TIntermNode"** %295 to i64
  %307 = bitcast %"class.sh::TIntermNode"*** %294 to i64*
  %308 = bitcast %"class.std::__1::vector.32"* %292 to i64*
  %309 = load i64, i64* %308, align 8
  %310 = sub i64 %306, %309
  %311 = ashr exact i64 %310, 3
  %312 = add nsw i64 %311, 1
  %313 = icmp ugt i64 %312, 2305843009213693951
  br i1 %313, label %314, label %316

314:                                              ; preds = %305
  %315 = bitcast %"class.std::__1::vector.32"* %292 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %315) #10
  unreachable

316:                                              ; preds = %305
  %317 = bitcast %"class.sh::TIntermNode"*** %296 to i64*
  %318 = sub i64 %299, %309
  %319 = ashr exact i64 %318, 3
  %320 = icmp ult i64 %319, 1152921504606846975
  br i1 %320, label %321, label %326

321:                                              ; preds = %316
  %322 = ashr exact i64 %318, 2
  %323 = icmp ult i64 %322, %312
  %324 = select i1 %323, i64 %312, i64 %322
  %325 = icmp eq i64 %324, 0
  br i1 %325, label %332, label %326

326:                                              ; preds = %321, %316
  %327 = phi i64 [ %324, %321 ], [ 2305843009213693951, %316 ]
  %328 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #8
  %329 = shl i64 %327, 3
  %330 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %328, i64 %329) #8
  %331 = bitcast i8* %330 to %"class.sh::TIntermNode"**
  br label %332

332:                                              ; preds = %326, %321
  %333 = phi i64 [ %327, %326 ], [ 0, %321 ]
  %334 = phi %"class.sh::TIntermNode"** [ %331, %326 ], [ null, %321 ]
  %335 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %334, i64 %311
  %336 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %334, i64 %333
  %337 = ptrtoint %"class.sh::TIntermNode"** %336 to i64
  %338 = bitcast %"class.sh::TIntermNode"** %335 to i64*
  store i64 %293, i64* %338, align 8
  %339 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 1
  %340 = ptrtoint %"class.sh::TIntermNode"** %339 to i64
  %341 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %292, i64 0, i32 0, i32 0
  %342 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %341, align 8
  %343 = ptrtoint %"class.sh::TIntermNode"** %342 to i64
  %344 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %294, align 8
  %345 = icmp eq %"class.sh::TIntermNode"** %344, %342
  br i1 %345, label %516, label %346

346:                                              ; preds = %332
  %347 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %344, i64 -1
  %348 = ptrtoint %"class.sh::TIntermNode"** %347 to i64
  %349 = sub i64 %348, %343
  %350 = lshr i64 %349, 3
  %351 = add nuw nsw i64 %350, 1
  %352 = icmp ult i64 %351, 4
  br i1 %352, label %446, label %353

353:                                              ; preds = %346
  %354 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %334, i64 -1
  %355 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %344, i64 -1
  %356 = ptrtoint %"class.sh::TIntermNode"** %355 to i64
  %357 = sub i64 %356, %343
  %358 = lshr i64 %357, 3
  %359 = sub nsw i64 %311, %358
  %360 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 %359
  %361 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %344, i64 -1
  %362 = sub nsw i64 0, %358
  %363 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %361, i64 %362
  %364 = icmp ult %"class.sh::TIntermNode"** %360, %344
  %365 = icmp ult %"class.sh::TIntermNode"** %363, %335
  %366 = and i1 %364, %365
  br i1 %366, label %446, label %367

367:                                              ; preds = %353
  %368 = and i64 %351, 4611686018427387900
  %369 = sub nsw i64 0, %368
  %370 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 %369
  %371 = sub nsw i64 0, %368
  %372 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %344, i64 %371
  %373 = add nsw i64 %368, -4
  %374 = lshr exact i64 %373, 2
  %375 = add nuw nsw i64 %374, 1
  %376 = and i64 %375, 1
  %377 = icmp eq i64 %373, 0
  br i1 %377, label %422, label %378

378:                                              ; preds = %367
  %379 = sub nuw nsw i64 %375, %376
  %380 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 -1
  %381 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %344, i64 -1
  %382 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 -1
  %383 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %344, i64 -1
  br label %384

384:                                              ; preds = %384, %378
  %385 = phi i64 [ 0, %378 ], [ %419, %384 ]
  %386 = phi i64 [ %379, %378 ], [ %420, %384 ]
  %387 = sub i64 0, %385
  %388 = sub i64 0, %385
  %389 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %380, i64 %387
  %390 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %381, i64 %388
  %391 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %390, i64 -1
  %392 = bitcast %"class.sh::TIntermNode"** %391 to <2 x i64>*
  %393 = load <2 x i64>, <2 x i64>* %392, align 8, !alias.scope !22
  %394 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %390, i64 -2
  %395 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %394, i64 -1
  %396 = bitcast %"class.sh::TIntermNode"** %395 to <2 x i64>*
  %397 = load <2 x i64>, <2 x i64>* %396, align 8, !alias.scope !22
  %398 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %389, i64 -1
  %399 = bitcast %"class.sh::TIntermNode"** %398 to <2 x i64>*
  store <2 x i64> %393, <2 x i64>* %399, align 8, !alias.scope !25, !noalias !22
  %400 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %389, i64 -2
  %401 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %400, i64 -1
  %402 = bitcast %"class.sh::TIntermNode"** %401 to <2 x i64>*
  store <2 x i64> %397, <2 x i64>* %402, align 8, !alias.scope !25, !noalias !22
  %403 = sub nuw nsw i64 -4, %385
  %404 = sub nuw nsw i64 -4, %385
  %405 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %382, i64 %403
  %406 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %383, i64 %404
  %407 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %406, i64 -1
  %408 = bitcast %"class.sh::TIntermNode"** %407 to <2 x i64>*
  %409 = load <2 x i64>, <2 x i64>* %408, align 8, !alias.scope !22
  %410 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %406, i64 -2
  %411 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %410, i64 -1
  %412 = bitcast %"class.sh::TIntermNode"** %411 to <2 x i64>*
  %413 = load <2 x i64>, <2 x i64>* %412, align 8, !alias.scope !22
  %414 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %405, i64 -1
  %415 = bitcast %"class.sh::TIntermNode"** %414 to <2 x i64>*
  store <2 x i64> %409, <2 x i64>* %415, align 8, !alias.scope !25, !noalias !22
  %416 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %405, i64 -2
  %417 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %416, i64 -1
  %418 = bitcast %"class.sh::TIntermNode"** %417 to <2 x i64>*
  store <2 x i64> %413, <2 x i64>* %418, align 8, !alias.scope !25, !noalias !22
  %419 = add i64 %385, 8
  %420 = add i64 %386, -2
  %421 = icmp eq i64 %420, 0
  br i1 %421, label %422, label %384, !llvm.loop !27

422:                                              ; preds = %384, %367
  %423 = phi i64 [ 0, %367 ], [ %419, %384 ]
  %424 = icmp eq i64 %376, 0
  br i1 %424, label %444, label %425

425:                                              ; preds = %422
  %426 = sub i64 0, %423
  %427 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %335, i64 -1
  %428 = sub i64 0, %423
  %429 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %344, i64 -1
  %430 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %427, i64 %426
  %431 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %429, i64 %428
  %432 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %431, i64 -1
  %433 = bitcast %"class.sh::TIntermNode"** %432 to <2 x i64>*
  %434 = load <2 x i64>, <2 x i64>* %433, align 8, !alias.scope !22
  %435 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %431, i64 -2
  %436 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %435, i64 -1
  %437 = bitcast %"class.sh::TIntermNode"** %436 to <2 x i64>*
  %438 = load <2 x i64>, <2 x i64>* %437, align 8, !alias.scope !22
  %439 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %430, i64 -1
  %440 = bitcast %"class.sh::TIntermNode"** %439 to <2 x i64>*
  store <2 x i64> %434, <2 x i64>* %440, align 8, !alias.scope !25, !noalias !22
  %441 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %430, i64 -2
  %442 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %441, i64 -1
  %443 = bitcast %"class.sh::TIntermNode"** %442 to <2 x i64>*
  store <2 x i64> %438, <2 x i64>* %443, align 8, !alias.scope !25, !noalias !22
  br label %444

444:                                              ; preds = %422, %425
  %445 = icmp eq i64 %351, %368
  br i1 %445, label %516, label %446

446:                                              ; preds = %444, %353, %346
  %447 = phi %"class.sh::TIntermNode"** [ %335, %353 ], [ %335, %346 ], [ %370, %444 ]
  %448 = phi %"class.sh::TIntermNode"** [ %344, %353 ], [ %344, %346 ], [ %372, %444 ]
  %449 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %448, i64 -1
  %450 = ptrtoint %"class.sh::TIntermNode"** %449 to i64
  %451 = sub i64 %450, %343
  %452 = lshr i64 %451, 3
  %453 = add nuw nsw i64 %452, 1
  %454 = and i64 %453, 7
  %455 = icmp eq i64 %454, 0
  br i1 %455, label %467, label %456

456:                                              ; preds = %446, %456
  %457 = phi %"class.sh::TIntermNode"** [ %460, %456 ], [ %447, %446 ]
  %458 = phi %"class.sh::TIntermNode"** [ %461, %456 ], [ %448, %446 ]
  %459 = phi i64 [ %465, %456 ], [ %454, %446 ]
  %460 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %457, i64 -1
  %461 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %458, i64 -1
  %462 = bitcast %"class.sh::TIntermNode"** %461 to i64*
  %463 = load i64, i64* %462, align 8
  %464 = bitcast %"class.sh::TIntermNode"** %460 to i64*
  store i64 %463, i64* %464, align 8
  %465 = add i64 %459, -1
  %466 = icmp eq i64 %465, 0
  br i1 %466, label %467, label %456, !llvm.loop !28

467:                                              ; preds = %456, %446
  %468 = phi %"class.sh::TIntermNode"** [ undef, %446 ], [ %460, %456 ]
  %469 = phi %"class.sh::TIntermNode"** [ %447, %446 ], [ %460, %456 ]
  %470 = phi %"class.sh::TIntermNode"** [ %448, %446 ], [ %461, %456 ]
  %471 = icmp ult i64 %451, 56
  br i1 %471, label %516, label %472

472:                                              ; preds = %467, %472
  %473 = phi %"class.sh::TIntermNode"** [ %510, %472 ], [ %469, %467 ]
  %474 = phi %"class.sh::TIntermNode"** [ %511, %472 ], [ %470, %467 ]
  %475 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %473, i64 -1
  %476 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %474, i64 -1
  %477 = bitcast %"class.sh::TIntermNode"** %476 to i64*
  %478 = load i64, i64* %477, align 8
  %479 = bitcast %"class.sh::TIntermNode"** %475 to i64*
  store i64 %478, i64* %479, align 8
  %480 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %473, i64 -2
  %481 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %474, i64 -2
  %482 = bitcast %"class.sh::TIntermNode"** %481 to i64*
  %483 = load i64, i64* %482, align 8
  %484 = bitcast %"class.sh::TIntermNode"** %480 to i64*
  store i64 %483, i64* %484, align 8
  %485 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %473, i64 -3
  %486 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %474, i64 -3
  %487 = bitcast %"class.sh::TIntermNode"** %486 to i64*
  %488 = load i64, i64* %487, align 8
  %489 = bitcast %"class.sh::TIntermNode"** %485 to i64*
  store i64 %488, i64* %489, align 8
  %490 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %473, i64 -4
  %491 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %474, i64 -4
  %492 = bitcast %"class.sh::TIntermNode"** %491 to i64*
  %493 = load i64, i64* %492, align 8
  %494 = bitcast %"class.sh::TIntermNode"** %490 to i64*
  store i64 %493, i64* %494, align 8
  %495 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %473, i64 -5
  %496 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %474, i64 -5
  %497 = bitcast %"class.sh::TIntermNode"** %496 to i64*
  %498 = load i64, i64* %497, align 8
  %499 = bitcast %"class.sh::TIntermNode"** %495 to i64*
  store i64 %498, i64* %499, align 8
  %500 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %473, i64 -6
  %501 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %474, i64 -6
  %502 = bitcast %"class.sh::TIntermNode"** %501 to i64*
  %503 = load i64, i64* %502, align 8
  %504 = bitcast %"class.sh::TIntermNode"** %500 to i64*
  store i64 %503, i64* %504, align 8
  %505 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %473, i64 -7
  %506 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %474, i64 -7
  %507 = bitcast %"class.sh::TIntermNode"** %506 to i64*
  %508 = load i64, i64* %507, align 8
  %509 = bitcast %"class.sh::TIntermNode"** %505 to i64*
  store i64 %508, i64* %509, align 8
  %510 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %473, i64 -8
  %511 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %474, i64 -8
  %512 = bitcast %"class.sh::TIntermNode"** %511 to i64*
  %513 = load i64, i64* %512, align 8
  %514 = bitcast %"class.sh::TIntermNode"** %510 to i64*
  store i64 %513, i64* %514, align 8
  %515 = icmp eq %"class.sh::TIntermNode"** %511, %342
  br i1 %515, label %516, label %472, !llvm.loop !29

516:                                              ; preds = %467, %472, %444, %332
  %517 = phi %"class.sh::TIntermNode"** [ %335, %332 ], [ %370, %444 ], [ %468, %467 ], [ %510, %472 ]
  %518 = ptrtoint %"class.sh::TIntermNode"** %517 to i64
  store i64 %518, i64* %308, align 8
  store i64 %340, i64* %307, align 8
  store i64 %337, i64* %317, align 8
  br label %519

519:                                              ; preds = %300, %516
  %520 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %265, align 8
  %521 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %520, i64 31
  %522 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %521, align 8
  %523 = tail call dereferenceable(184) %"class.sh::TType"* %522(%"class.sh::TIntermTyped"* %261) #8
  %524 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %523, i64 0, i32 8
  %525 = load i8, i8* %524, align 8
  %526 = icmp eq i8 %525, 1
  br i1 %526, label %527, label %762

527:                                              ; preds = %519
  %528 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %523, i64 0, i32 9
  %529 = load i8, i8* %528, align 1
  %530 = icmp eq i8 %529, 1
  br i1 %530, label %531, label %762

531:                                              ; preds = %527
  %532 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %523, i64 0, i32 13
  %533 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %532, align 8
  %534 = icmp eq %"class.sh::TStructure"* %533, null
  br i1 %534, label %535, label %762

535:                                              ; preds = %531
  %536 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %523, i64 0, i32 10, i32 1
  %537 = load i64, i64* %536, align 8
  %538 = icmp eq i64 %537, 0
  br i1 %538, label %539, label %762

539:                                              ; preds = %535
  %540 = tail call %"class.sh::TIntermSymbol"* @_ZN2sh20CreateTempSymbolNodeEPKNS_9TVariableE(%"class.sh::TVariable"* %289) #8
  %541 = ptrtoint %"class.sh::TIntermSymbol"* %540 to i64
  %542 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %23, align 8
  %543 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %241, align 8
  %544 = icmp ult %"class.sh::TIntermNode"** %542, %543
  %545 = ptrtoint %"class.sh::TIntermNode"** %543 to i64
  br i1 %544, label %546, label %550

546:                                              ; preds = %539
  %547 = bitcast %"class.sh::TIntermNode"** %542 to i64*
  store i64 %541, i64* %547, align 8
  %548 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %542, i64 1
  %549 = ptrtoint %"class.sh::TIntermNode"** %548 to i64
  store i64 %549, i64* %24, align 8
  br label %760

550:                                              ; preds = %539
  %551 = ptrtoint %"class.sh::TIntermNode"** %542 to i64
  %552 = load i64, i64* %26, align 8
  %553 = sub i64 %551, %552
  %554 = ashr exact i64 %553, 3
  %555 = add nsw i64 %554, 1
  %556 = icmp ugt i64 %555, 2305843009213693951
  br i1 %556, label %557, label %559

557:                                              ; preds = %550
  %558 = bitcast %"class.sh::TVector.31"* %18 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %558) #10
  unreachable

559:                                              ; preds = %550
  %560 = sub i64 %545, %552
  %561 = ashr exact i64 %560, 3
  %562 = icmp ult i64 %561, 1152921504606846975
  br i1 %562, label %563, label %568

563:                                              ; preds = %559
  %564 = ashr exact i64 %560, 2
  %565 = icmp ult i64 %564, %555
  %566 = select i1 %565, i64 %555, i64 %564
  %567 = icmp eq i64 %566, 0
  br i1 %567, label %574, label %568

568:                                              ; preds = %563, %559
  %569 = phi i64 [ %566, %563 ], [ 2305843009213693951, %559 ]
  %570 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #8
  %571 = shl i64 %569, 3
  %572 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %570, i64 %571) #8
  %573 = bitcast i8* %572 to %"class.sh::TIntermNode"**
  br label %574

574:                                              ; preds = %568, %563
  %575 = phi i64 [ %569, %568 ], [ 0, %563 ]
  %576 = phi %"class.sh::TIntermNode"** [ %573, %568 ], [ null, %563 ]
  %577 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %576, i64 %554
  %578 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %576, i64 %575
  %579 = ptrtoint %"class.sh::TIntermNode"** %578 to i64
  %580 = bitcast %"class.sh::TIntermNode"** %577 to i64*
  store i64 %541, i64* %580, align 8
  %581 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %577, i64 1
  %582 = ptrtoint %"class.sh::TIntermNode"** %581 to i64
  %583 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %243, align 8
  %584 = ptrtoint %"class.sh::TIntermNode"** %583 to i64
  %585 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %23, align 8
  %586 = icmp eq %"class.sh::TIntermNode"** %585, %583
  br i1 %586, label %757, label %587

587:                                              ; preds = %574
  %588 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %585, i64 -1
  %589 = ptrtoint %"class.sh::TIntermNode"** %588 to i64
  %590 = sub i64 %589, %584
  %591 = lshr i64 %590, 3
  %592 = add nuw nsw i64 %591, 1
  %593 = icmp ult i64 %592, 4
  br i1 %593, label %687, label %594

594:                                              ; preds = %587
  %595 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %576, i64 -1
  %596 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %585, i64 -1
  %597 = ptrtoint %"class.sh::TIntermNode"** %596 to i64
  %598 = sub i64 %597, %584
  %599 = lshr i64 %598, 3
  %600 = sub nsw i64 %554, %599
  %601 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %595, i64 %600
  %602 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %585, i64 -1
  %603 = sub nsw i64 0, %599
  %604 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %602, i64 %603
  %605 = icmp ult %"class.sh::TIntermNode"** %601, %585
  %606 = icmp ult %"class.sh::TIntermNode"** %604, %577
  %607 = and i1 %605, %606
  br i1 %607, label %687, label %608

608:                                              ; preds = %594
  %609 = and i64 %592, 4611686018427387900
  %610 = sub nsw i64 0, %609
  %611 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %577, i64 %610
  %612 = sub nsw i64 0, %609
  %613 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %585, i64 %612
  %614 = add nsw i64 %609, -4
  %615 = lshr exact i64 %614, 2
  %616 = add nuw nsw i64 %615, 1
  %617 = and i64 %616, 1
  %618 = icmp eq i64 %614, 0
  br i1 %618, label %663, label %619

619:                                              ; preds = %608
  %620 = sub nuw nsw i64 %616, %617
  %621 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %577, i64 -1
  %622 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %585, i64 -1
  %623 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %577, i64 -1
  %624 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %585, i64 -1
  br label %625

625:                                              ; preds = %625, %619
  %626 = phi i64 [ 0, %619 ], [ %660, %625 ]
  %627 = phi i64 [ %620, %619 ], [ %661, %625 ]
  %628 = sub i64 0, %626
  %629 = sub i64 0, %626
  %630 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %621, i64 %628
  %631 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %622, i64 %629
  %632 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %631, i64 -1
  %633 = bitcast %"class.sh::TIntermNode"** %632 to <2 x i64>*
  %634 = load <2 x i64>, <2 x i64>* %633, align 8, !alias.scope !30
  %635 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %631, i64 -2
  %636 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %635, i64 -1
  %637 = bitcast %"class.sh::TIntermNode"** %636 to <2 x i64>*
  %638 = load <2 x i64>, <2 x i64>* %637, align 8, !alias.scope !30
  %639 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %630, i64 -1
  %640 = bitcast %"class.sh::TIntermNode"** %639 to <2 x i64>*
  store <2 x i64> %634, <2 x i64>* %640, align 8, !alias.scope !33, !noalias !30
  %641 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %630, i64 -2
  %642 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %641, i64 -1
  %643 = bitcast %"class.sh::TIntermNode"** %642 to <2 x i64>*
  store <2 x i64> %638, <2 x i64>* %643, align 8, !alias.scope !33, !noalias !30
  %644 = sub nuw nsw i64 -4, %626
  %645 = sub nuw nsw i64 -4, %626
  %646 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %623, i64 %644
  %647 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %624, i64 %645
  %648 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %647, i64 -1
  %649 = bitcast %"class.sh::TIntermNode"** %648 to <2 x i64>*
  %650 = load <2 x i64>, <2 x i64>* %649, align 8, !alias.scope !30
  %651 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %647, i64 -2
  %652 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %651, i64 -1
  %653 = bitcast %"class.sh::TIntermNode"** %652 to <2 x i64>*
  %654 = load <2 x i64>, <2 x i64>* %653, align 8, !alias.scope !30
  %655 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %646, i64 -1
  %656 = bitcast %"class.sh::TIntermNode"** %655 to <2 x i64>*
  store <2 x i64> %650, <2 x i64>* %656, align 8, !alias.scope !33, !noalias !30
  %657 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %646, i64 -2
  %658 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %657, i64 -1
  %659 = bitcast %"class.sh::TIntermNode"** %658 to <2 x i64>*
  store <2 x i64> %654, <2 x i64>* %659, align 8, !alias.scope !33, !noalias !30
  %660 = add i64 %626, 8
  %661 = add i64 %627, -2
  %662 = icmp eq i64 %661, 0
  br i1 %662, label %663, label %625, !llvm.loop !35

663:                                              ; preds = %625, %608
  %664 = phi i64 [ 0, %608 ], [ %660, %625 ]
  %665 = icmp eq i64 %617, 0
  br i1 %665, label %685, label %666

666:                                              ; preds = %663
  %667 = sub i64 0, %664
  %668 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %577, i64 -1
  %669 = sub i64 0, %664
  %670 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %585, i64 -1
  %671 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %668, i64 %667
  %672 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %670, i64 %669
  %673 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %672, i64 -1
  %674 = bitcast %"class.sh::TIntermNode"** %673 to <2 x i64>*
  %675 = load <2 x i64>, <2 x i64>* %674, align 8, !alias.scope !30
  %676 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %672, i64 -2
  %677 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %676, i64 -1
  %678 = bitcast %"class.sh::TIntermNode"** %677 to <2 x i64>*
  %679 = load <2 x i64>, <2 x i64>* %678, align 8, !alias.scope !30
  %680 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %671, i64 -1
  %681 = bitcast %"class.sh::TIntermNode"** %680 to <2 x i64>*
  store <2 x i64> %675, <2 x i64>* %681, align 8, !alias.scope !33, !noalias !30
  %682 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %671, i64 -2
  %683 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %682, i64 -1
  %684 = bitcast %"class.sh::TIntermNode"** %683 to <2 x i64>*
  store <2 x i64> %679, <2 x i64>* %684, align 8, !alias.scope !33, !noalias !30
  br label %685

685:                                              ; preds = %663, %666
  %686 = icmp eq i64 %592, %609
  br i1 %686, label %757, label %687

687:                                              ; preds = %685, %594, %587
  %688 = phi %"class.sh::TIntermNode"** [ %577, %594 ], [ %577, %587 ], [ %611, %685 ]
  %689 = phi %"class.sh::TIntermNode"** [ %585, %594 ], [ %585, %587 ], [ %613, %685 ]
  %690 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %689, i64 -1
  %691 = ptrtoint %"class.sh::TIntermNode"** %690 to i64
  %692 = sub i64 %691, %584
  %693 = lshr i64 %692, 3
  %694 = add nuw nsw i64 %693, 1
  %695 = and i64 %694, 7
  %696 = icmp eq i64 %695, 0
  br i1 %696, label %708, label %697

697:                                              ; preds = %687, %697
  %698 = phi %"class.sh::TIntermNode"** [ %701, %697 ], [ %688, %687 ]
  %699 = phi %"class.sh::TIntermNode"** [ %702, %697 ], [ %689, %687 ]
  %700 = phi i64 [ %706, %697 ], [ %695, %687 ]
  %701 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %698, i64 -1
  %702 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %699, i64 -1
  %703 = bitcast %"class.sh::TIntermNode"** %702 to i64*
  %704 = load i64, i64* %703, align 8
  %705 = bitcast %"class.sh::TIntermNode"** %701 to i64*
  store i64 %704, i64* %705, align 8
  %706 = add i64 %700, -1
  %707 = icmp eq i64 %706, 0
  br i1 %707, label %708, label %697, !llvm.loop !36

708:                                              ; preds = %697, %687
  %709 = phi %"class.sh::TIntermNode"** [ undef, %687 ], [ %701, %697 ]
  %710 = phi %"class.sh::TIntermNode"** [ %688, %687 ], [ %701, %697 ]
  %711 = phi %"class.sh::TIntermNode"** [ %689, %687 ], [ %702, %697 ]
  %712 = icmp ult i64 %692, 56
  br i1 %712, label %757, label %713

713:                                              ; preds = %708, %713
  %714 = phi %"class.sh::TIntermNode"** [ %751, %713 ], [ %710, %708 ]
  %715 = phi %"class.sh::TIntermNode"** [ %752, %713 ], [ %711, %708 ]
  %716 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %714, i64 -1
  %717 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %715, i64 -1
  %718 = bitcast %"class.sh::TIntermNode"** %717 to i64*
  %719 = load i64, i64* %718, align 8
  %720 = bitcast %"class.sh::TIntermNode"** %716 to i64*
  store i64 %719, i64* %720, align 8
  %721 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %714, i64 -2
  %722 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %715, i64 -2
  %723 = bitcast %"class.sh::TIntermNode"** %722 to i64*
  %724 = load i64, i64* %723, align 8
  %725 = bitcast %"class.sh::TIntermNode"** %721 to i64*
  store i64 %724, i64* %725, align 8
  %726 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %714, i64 -3
  %727 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %715, i64 -3
  %728 = bitcast %"class.sh::TIntermNode"** %727 to i64*
  %729 = load i64, i64* %728, align 8
  %730 = bitcast %"class.sh::TIntermNode"** %726 to i64*
  store i64 %729, i64* %730, align 8
  %731 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %714, i64 -4
  %732 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %715, i64 -4
  %733 = bitcast %"class.sh::TIntermNode"** %732 to i64*
  %734 = load i64, i64* %733, align 8
  %735 = bitcast %"class.sh::TIntermNode"** %731 to i64*
  store i64 %734, i64* %735, align 8
  %736 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %714, i64 -5
  %737 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %715, i64 -5
  %738 = bitcast %"class.sh::TIntermNode"** %737 to i64*
  %739 = load i64, i64* %738, align 8
  %740 = bitcast %"class.sh::TIntermNode"** %736 to i64*
  store i64 %739, i64* %740, align 8
  %741 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %714, i64 -6
  %742 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %715, i64 -6
  %743 = bitcast %"class.sh::TIntermNode"** %742 to i64*
  %744 = load i64, i64* %743, align 8
  %745 = bitcast %"class.sh::TIntermNode"** %741 to i64*
  store i64 %744, i64* %745, align 8
  %746 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %714, i64 -7
  %747 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %715, i64 -7
  %748 = bitcast %"class.sh::TIntermNode"** %747 to i64*
  %749 = load i64, i64* %748, align 8
  %750 = bitcast %"class.sh::TIntermNode"** %746 to i64*
  store i64 %749, i64* %750, align 8
  %751 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %714, i64 -8
  %752 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %715, i64 -8
  %753 = bitcast %"class.sh::TIntermNode"** %752 to i64*
  %754 = load i64, i64* %753, align 8
  %755 = bitcast %"class.sh::TIntermNode"** %751 to i64*
  store i64 %754, i64* %755, align 8
  %756 = icmp eq %"class.sh::TIntermNode"** %752, %583
  br i1 %756, label %757, label %713, !llvm.loop !37

757:                                              ; preds = %708, %713, %685, %574
  %758 = phi %"class.sh::TIntermNode"** [ %577, %574 ], [ %611, %685 ], [ %709, %708 ], [ %751, %713 ]
  %759 = ptrtoint %"class.sh::TIntermNode"** %758 to i64
  store i64 %759, i64* %26, align 8
  store i64 %582, i64* %24, align 8
  store i64 %579, i64* %242, align 8
  br label %760

760:                                              ; preds = %546, %757
  %761 = add nsw i32 %254, -1
  br label %1759

762:                                              ; preds = %519, %527, %531, %535
  %763 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %265, align 8
  %764 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %763, i64 31
  %765 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %764, align 8
  %766 = tail call dereferenceable(184) %"class.sh::TType"* %765(%"class.sh::TIntermTyped"* %261) #8
  %767 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %766, i64 0, i32 8
  %768 = load i8, i8* %767, align 8
  %769 = icmp ugt i8 %768, 1
  %770 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %766, i64 0, i32 9
  %771 = load i8, i8* %770, align 1
  %772 = icmp eq i8 %771, 1
  %773 = and i1 %769, %772
  br i1 %773, label %774, label %1248

774:                                              ; preds = %762
  br i1 %2, label %775, label %1018

775:                                              ; preds = %774
  %776 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %265, align 8
  %777 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %776, i64 31
  %778 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %777, align 8
  %779 = tail call dereferenceable(184) %"class.sh::TType"* %778(%"class.sh::TIntermTyped"* %261) #8
  %780 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %779, i64 0, i32 8
  %781 = load i8, i8* %780, align 8
  %782 = zext i8 %781 to i32
  %783 = icmp sgt i32 %254, %782
  %784 = select i1 %783, i32 %782, i32 %254
  %785 = sub nsw i32 %254, %784
  %786 = icmp sgt i32 %784, 0
  br i1 %786, label %787, label %1759

787:                                              ; preds = %775, %1015
  %788 = phi i32 [ %1016, %1015 ], [ 0, %775 ]
  %789 = tail call %"class.sh::TIntermSymbol"* @_ZN2sh20CreateTempSymbolNodeEPKNS_9TVariableE(%"class.sh::TVariable"* %289) #8
  %790 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #8
  %791 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %790, i64 240) #8
  %792 = bitcast i8* %791 to %"class.sh::TIntermBinary"*
  %793 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %789, i64 0, i32 0
  %794 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 %788) #8
  %795 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %794, i64 0, i32 0, i32 0
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %792, i8 zeroext 44, %"class.sh::TIntermTyped"* %793, %"class.sh::TIntermTyped"* %795) #8
  %796 = ptrtoint i8* %791 to i64
  %797 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %23, align 8
  %798 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %241, align 8
  %799 = icmp ult %"class.sh::TIntermNode"** %797, %798
  %800 = ptrtoint %"class.sh::TIntermNode"** %798 to i64
  br i1 %799, label %801, label %805

801:                                              ; preds = %787
  %802 = bitcast %"class.sh::TIntermNode"** %797 to i64*
  store i64 %796, i64* %802, align 8
  %803 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %797, i64 1
  %804 = ptrtoint %"class.sh::TIntermNode"** %803 to i64
  store i64 %804, i64* %24, align 8
  br label %1015

805:                                              ; preds = %787
  %806 = ptrtoint %"class.sh::TIntermNode"** %797 to i64
  %807 = load i64, i64* %26, align 8
  %808 = sub i64 %806, %807
  %809 = ashr exact i64 %808, 3
  %810 = add nsw i64 %809, 1
  %811 = icmp ugt i64 %810, 2305843009213693951
  br i1 %811, label %812, label %814

812:                                              ; preds = %805
  %813 = bitcast %"class.sh::TVector.31"* %18 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %813) #10
  unreachable

814:                                              ; preds = %805
  %815 = sub i64 %800, %807
  %816 = ashr exact i64 %815, 3
  %817 = icmp ult i64 %816, 1152921504606846975
  br i1 %817, label %818, label %823

818:                                              ; preds = %814
  %819 = ashr exact i64 %815, 2
  %820 = icmp ult i64 %819, %810
  %821 = select i1 %820, i64 %810, i64 %819
  %822 = icmp eq i64 %821, 0
  br i1 %822, label %829, label %823

823:                                              ; preds = %818, %814
  %824 = phi i64 [ %821, %818 ], [ 2305843009213693951, %814 ]
  %825 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #8
  %826 = shl i64 %824, 3
  %827 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %825, i64 %826) #8
  %828 = bitcast i8* %827 to %"class.sh::TIntermNode"**
  br label %829

829:                                              ; preds = %823, %818
  %830 = phi i64 [ %824, %823 ], [ 0, %818 ]
  %831 = phi %"class.sh::TIntermNode"** [ %828, %823 ], [ null, %818 ]
  %832 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %831, i64 %809
  %833 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %831, i64 %830
  %834 = ptrtoint %"class.sh::TIntermNode"** %833 to i64
  %835 = bitcast %"class.sh::TIntermNode"** %832 to i64*
  store i64 %796, i64* %835, align 8
  %836 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %832, i64 1
  %837 = ptrtoint %"class.sh::TIntermNode"** %836 to i64
  %838 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %243, align 8
  %839 = ptrtoint %"class.sh::TIntermNode"** %838 to i64
  %840 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %23, align 8
  %841 = icmp eq %"class.sh::TIntermNode"** %840, %838
  br i1 %841, label %1012, label %842

842:                                              ; preds = %829
  %843 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %840, i64 -1
  %844 = ptrtoint %"class.sh::TIntermNode"** %843 to i64
  %845 = sub i64 %844, %839
  %846 = lshr i64 %845, 3
  %847 = add nuw nsw i64 %846, 1
  %848 = icmp ult i64 %847, 4
  br i1 %848, label %942, label %849

849:                                              ; preds = %842
  %850 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %831, i64 -1
  %851 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %840, i64 -1
  %852 = ptrtoint %"class.sh::TIntermNode"** %851 to i64
  %853 = sub i64 %852, %839
  %854 = lshr i64 %853, 3
  %855 = sub nsw i64 %809, %854
  %856 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %850, i64 %855
  %857 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %840, i64 -1
  %858 = sub nsw i64 0, %854
  %859 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %857, i64 %858
  %860 = icmp ult %"class.sh::TIntermNode"** %856, %840
  %861 = icmp ult %"class.sh::TIntermNode"** %859, %832
  %862 = and i1 %860, %861
  br i1 %862, label %942, label %863

863:                                              ; preds = %849
  %864 = and i64 %847, 4611686018427387900
  %865 = sub nsw i64 0, %864
  %866 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %832, i64 %865
  %867 = sub nsw i64 0, %864
  %868 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %840, i64 %867
  %869 = add nsw i64 %864, -4
  %870 = lshr exact i64 %869, 2
  %871 = add nuw nsw i64 %870, 1
  %872 = and i64 %871, 1
  %873 = icmp eq i64 %869, 0
  br i1 %873, label %918, label %874

874:                                              ; preds = %863
  %875 = sub nuw nsw i64 %871, %872
  %876 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %832, i64 -1
  %877 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %840, i64 -1
  %878 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %832, i64 -1
  %879 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %840, i64 -1
  br label %880

880:                                              ; preds = %880, %874
  %881 = phi i64 [ 0, %874 ], [ %915, %880 ]
  %882 = phi i64 [ %875, %874 ], [ %916, %880 ]
  %883 = sub i64 0, %881
  %884 = sub i64 0, %881
  %885 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %876, i64 %883
  %886 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %877, i64 %884
  %887 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %886, i64 -1
  %888 = bitcast %"class.sh::TIntermNode"** %887 to <2 x i64>*
  %889 = load <2 x i64>, <2 x i64>* %888, align 8, !alias.scope !38
  %890 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %886, i64 -2
  %891 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %890, i64 -1
  %892 = bitcast %"class.sh::TIntermNode"** %891 to <2 x i64>*
  %893 = load <2 x i64>, <2 x i64>* %892, align 8, !alias.scope !38
  %894 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %885, i64 -1
  %895 = bitcast %"class.sh::TIntermNode"** %894 to <2 x i64>*
  store <2 x i64> %889, <2 x i64>* %895, align 8, !alias.scope !41, !noalias !38
  %896 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %885, i64 -2
  %897 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %896, i64 -1
  %898 = bitcast %"class.sh::TIntermNode"** %897 to <2 x i64>*
  store <2 x i64> %893, <2 x i64>* %898, align 8, !alias.scope !41, !noalias !38
  %899 = sub nuw nsw i64 -4, %881
  %900 = sub nuw nsw i64 -4, %881
  %901 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %878, i64 %899
  %902 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %879, i64 %900
  %903 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %902, i64 -1
  %904 = bitcast %"class.sh::TIntermNode"** %903 to <2 x i64>*
  %905 = load <2 x i64>, <2 x i64>* %904, align 8, !alias.scope !38
  %906 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %902, i64 -2
  %907 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %906, i64 -1
  %908 = bitcast %"class.sh::TIntermNode"** %907 to <2 x i64>*
  %909 = load <2 x i64>, <2 x i64>* %908, align 8, !alias.scope !38
  %910 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %901, i64 -1
  %911 = bitcast %"class.sh::TIntermNode"** %910 to <2 x i64>*
  store <2 x i64> %905, <2 x i64>* %911, align 8, !alias.scope !41, !noalias !38
  %912 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %901, i64 -2
  %913 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %912, i64 -1
  %914 = bitcast %"class.sh::TIntermNode"** %913 to <2 x i64>*
  store <2 x i64> %909, <2 x i64>* %914, align 8, !alias.scope !41, !noalias !38
  %915 = add i64 %881, 8
  %916 = add i64 %882, -2
  %917 = icmp eq i64 %916, 0
  br i1 %917, label %918, label %880, !llvm.loop !43

918:                                              ; preds = %880, %863
  %919 = phi i64 [ 0, %863 ], [ %915, %880 ]
  %920 = icmp eq i64 %872, 0
  br i1 %920, label %940, label %921

921:                                              ; preds = %918
  %922 = sub i64 0, %919
  %923 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %832, i64 -1
  %924 = sub i64 0, %919
  %925 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %840, i64 -1
  %926 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %923, i64 %922
  %927 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %925, i64 %924
  %928 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %927, i64 -1
  %929 = bitcast %"class.sh::TIntermNode"** %928 to <2 x i64>*
  %930 = load <2 x i64>, <2 x i64>* %929, align 8, !alias.scope !38
  %931 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %927, i64 -2
  %932 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %931, i64 -1
  %933 = bitcast %"class.sh::TIntermNode"** %932 to <2 x i64>*
  %934 = load <2 x i64>, <2 x i64>* %933, align 8, !alias.scope !38
  %935 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %926, i64 -1
  %936 = bitcast %"class.sh::TIntermNode"** %935 to <2 x i64>*
  store <2 x i64> %930, <2 x i64>* %936, align 8, !alias.scope !41, !noalias !38
  %937 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %926, i64 -2
  %938 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %937, i64 -1
  %939 = bitcast %"class.sh::TIntermNode"** %938 to <2 x i64>*
  store <2 x i64> %934, <2 x i64>* %939, align 8, !alias.scope !41, !noalias !38
  br label %940

940:                                              ; preds = %918, %921
  %941 = icmp eq i64 %847, %864
  br i1 %941, label %1012, label %942

942:                                              ; preds = %940, %849, %842
  %943 = phi %"class.sh::TIntermNode"** [ %832, %849 ], [ %832, %842 ], [ %866, %940 ]
  %944 = phi %"class.sh::TIntermNode"** [ %840, %849 ], [ %840, %842 ], [ %868, %940 ]
  %945 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %944, i64 -1
  %946 = ptrtoint %"class.sh::TIntermNode"** %945 to i64
  %947 = sub i64 %946, %839
  %948 = lshr i64 %947, 3
  %949 = add nuw nsw i64 %948, 1
  %950 = and i64 %949, 7
  %951 = icmp eq i64 %950, 0
  br i1 %951, label %963, label %952

952:                                              ; preds = %942, %952
  %953 = phi %"class.sh::TIntermNode"** [ %956, %952 ], [ %943, %942 ]
  %954 = phi %"class.sh::TIntermNode"** [ %957, %952 ], [ %944, %942 ]
  %955 = phi i64 [ %961, %952 ], [ %950, %942 ]
  %956 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %953, i64 -1
  %957 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %954, i64 -1
  %958 = bitcast %"class.sh::TIntermNode"** %957 to i64*
  %959 = load i64, i64* %958, align 8
  %960 = bitcast %"class.sh::TIntermNode"** %956 to i64*
  store i64 %959, i64* %960, align 8
  %961 = add i64 %955, -1
  %962 = icmp eq i64 %961, 0
  br i1 %962, label %963, label %952, !llvm.loop !44

963:                                              ; preds = %952, %942
  %964 = phi %"class.sh::TIntermNode"** [ undef, %942 ], [ %956, %952 ]
  %965 = phi %"class.sh::TIntermNode"** [ %943, %942 ], [ %956, %952 ]
  %966 = phi %"class.sh::TIntermNode"** [ %944, %942 ], [ %957, %952 ]
  %967 = icmp ult i64 %947, 56
  br i1 %967, label %1012, label %968

968:                                              ; preds = %963, %968
  %969 = phi %"class.sh::TIntermNode"** [ %1006, %968 ], [ %965, %963 ]
  %970 = phi %"class.sh::TIntermNode"** [ %1007, %968 ], [ %966, %963 ]
  %971 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %969, i64 -1
  %972 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %970, i64 -1
  %973 = bitcast %"class.sh::TIntermNode"** %972 to i64*
  %974 = load i64, i64* %973, align 8
  %975 = bitcast %"class.sh::TIntermNode"** %971 to i64*
  store i64 %974, i64* %975, align 8
  %976 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %969, i64 -2
  %977 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %970, i64 -2
  %978 = bitcast %"class.sh::TIntermNode"** %977 to i64*
  %979 = load i64, i64* %978, align 8
  %980 = bitcast %"class.sh::TIntermNode"** %976 to i64*
  store i64 %979, i64* %980, align 8
  %981 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %969, i64 -3
  %982 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %970, i64 -3
  %983 = bitcast %"class.sh::TIntermNode"** %982 to i64*
  %984 = load i64, i64* %983, align 8
  %985 = bitcast %"class.sh::TIntermNode"** %981 to i64*
  store i64 %984, i64* %985, align 8
  %986 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %969, i64 -4
  %987 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %970, i64 -4
  %988 = bitcast %"class.sh::TIntermNode"** %987 to i64*
  %989 = load i64, i64* %988, align 8
  %990 = bitcast %"class.sh::TIntermNode"** %986 to i64*
  store i64 %989, i64* %990, align 8
  %991 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %969, i64 -5
  %992 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %970, i64 -5
  %993 = bitcast %"class.sh::TIntermNode"** %992 to i64*
  %994 = load i64, i64* %993, align 8
  %995 = bitcast %"class.sh::TIntermNode"** %991 to i64*
  store i64 %994, i64* %995, align 8
  %996 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %969, i64 -6
  %997 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %970, i64 -6
  %998 = bitcast %"class.sh::TIntermNode"** %997 to i64*
  %999 = load i64, i64* %998, align 8
  %1000 = bitcast %"class.sh::TIntermNode"** %996 to i64*
  store i64 %999, i64* %1000, align 8
  %1001 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %969, i64 -7
  %1002 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %970, i64 -7
  %1003 = bitcast %"class.sh::TIntermNode"** %1002 to i64*
  %1004 = load i64, i64* %1003, align 8
  %1005 = bitcast %"class.sh::TIntermNode"** %1001 to i64*
  store i64 %1004, i64* %1005, align 8
  %1006 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %969, i64 -8
  %1007 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %970, i64 -8
  %1008 = bitcast %"class.sh::TIntermNode"** %1007 to i64*
  %1009 = load i64, i64* %1008, align 8
  %1010 = bitcast %"class.sh::TIntermNode"** %1006 to i64*
  store i64 %1009, i64* %1010, align 8
  %1011 = icmp eq %"class.sh::TIntermNode"** %1007, %838
  br i1 %1011, label %1012, label %968, !llvm.loop !45

1012:                                             ; preds = %963, %968, %940, %829
  %1013 = phi %"class.sh::TIntermNode"** [ %832, %829 ], [ %866, %940 ], [ %964, %963 ], [ %1006, %968 ]
  %1014 = ptrtoint %"class.sh::TIntermNode"** %1013 to i64
  store i64 %1014, i64* %26, align 8
  store i64 %837, i64* %24, align 8
  store i64 %834, i64* %242, align 8
  br label %1015

1015:                                             ; preds = %801, %1012
  %1016 = add nuw nsw i32 %788, 1
  %1017 = icmp slt i32 %1016, %784
  br i1 %1017, label %787, label %1759

1018:                                             ; preds = %774
  %1019 = tail call %"class.sh::TIntermSymbol"* @_ZN2sh20CreateTempSymbolNodeEPKNS_9TVariableE(%"class.sh::TVariable"* %289) #8
  %1020 = ptrtoint %"class.sh::TIntermSymbol"* %1019 to i64
  %1021 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %23, align 8
  %1022 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %241, align 8
  %1023 = icmp ult %"class.sh::TIntermNode"** %1021, %1022
  %1024 = ptrtoint %"class.sh::TIntermNode"** %1022 to i64
  br i1 %1023, label %1025, label %1029

1025:                                             ; preds = %1018
  %1026 = bitcast %"class.sh::TIntermNode"** %1021 to i64*
  store i64 %1020, i64* %1026, align 8
  %1027 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1021, i64 1
  %1028 = ptrtoint %"class.sh::TIntermNode"** %1027 to i64
  store i64 %1028, i64* %24, align 8
  br label %1239

1029:                                             ; preds = %1018
  %1030 = ptrtoint %"class.sh::TIntermNode"** %1021 to i64
  %1031 = load i64, i64* %26, align 8
  %1032 = sub i64 %1030, %1031
  %1033 = ashr exact i64 %1032, 3
  %1034 = add nsw i64 %1033, 1
  %1035 = icmp ugt i64 %1034, 2305843009213693951
  br i1 %1035, label %1036, label %1038

1036:                                             ; preds = %1029
  %1037 = bitcast %"class.sh::TVector.31"* %18 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1037) #10
  unreachable

1038:                                             ; preds = %1029
  %1039 = sub i64 %1024, %1031
  %1040 = ashr exact i64 %1039, 3
  %1041 = icmp ult i64 %1040, 1152921504606846975
  br i1 %1041, label %1042, label %1047

1042:                                             ; preds = %1038
  %1043 = ashr exact i64 %1039, 2
  %1044 = icmp ult i64 %1043, %1034
  %1045 = select i1 %1044, i64 %1034, i64 %1043
  %1046 = icmp eq i64 %1045, 0
  br i1 %1046, label %1053, label %1047

1047:                                             ; preds = %1042, %1038
  %1048 = phi i64 [ %1045, %1042 ], [ 2305843009213693951, %1038 ]
  %1049 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #8
  %1050 = shl i64 %1048, 3
  %1051 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1049, i64 %1050) #8
  %1052 = bitcast i8* %1051 to %"class.sh::TIntermNode"**
  br label %1053

1053:                                             ; preds = %1047, %1042
  %1054 = phi i64 [ %1048, %1047 ], [ 0, %1042 ]
  %1055 = phi %"class.sh::TIntermNode"** [ %1052, %1047 ], [ null, %1042 ]
  %1056 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1055, i64 %1033
  %1057 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1055, i64 %1054
  %1058 = ptrtoint %"class.sh::TIntermNode"** %1057 to i64
  %1059 = bitcast %"class.sh::TIntermNode"** %1056 to i64*
  store i64 %1020, i64* %1059, align 8
  %1060 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1056, i64 1
  %1061 = ptrtoint %"class.sh::TIntermNode"** %1060 to i64
  %1062 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %243, align 8
  %1063 = ptrtoint %"class.sh::TIntermNode"** %1062 to i64
  %1064 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %23, align 8
  %1065 = icmp eq %"class.sh::TIntermNode"** %1064, %1062
  br i1 %1065, label %1236, label %1066

1066:                                             ; preds = %1053
  %1067 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1064, i64 -1
  %1068 = ptrtoint %"class.sh::TIntermNode"** %1067 to i64
  %1069 = sub i64 %1068, %1063
  %1070 = lshr i64 %1069, 3
  %1071 = add nuw nsw i64 %1070, 1
  %1072 = icmp ult i64 %1071, 4
  br i1 %1072, label %1166, label %1073

1073:                                             ; preds = %1066
  %1074 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1055, i64 -1
  %1075 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1064, i64 -1
  %1076 = ptrtoint %"class.sh::TIntermNode"** %1075 to i64
  %1077 = sub i64 %1076, %1063
  %1078 = lshr i64 %1077, 3
  %1079 = sub nsw i64 %1033, %1078
  %1080 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1074, i64 %1079
  %1081 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1064, i64 -1
  %1082 = sub nsw i64 0, %1078
  %1083 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1081, i64 %1082
  %1084 = icmp ult %"class.sh::TIntermNode"** %1080, %1064
  %1085 = icmp ult %"class.sh::TIntermNode"** %1083, %1056
  %1086 = and i1 %1084, %1085
  br i1 %1086, label %1166, label %1087

1087:                                             ; preds = %1073
  %1088 = and i64 %1071, 4611686018427387900
  %1089 = sub nsw i64 0, %1088
  %1090 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1056, i64 %1089
  %1091 = sub nsw i64 0, %1088
  %1092 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1064, i64 %1091
  %1093 = add nsw i64 %1088, -4
  %1094 = lshr exact i64 %1093, 2
  %1095 = add nuw nsw i64 %1094, 1
  %1096 = and i64 %1095, 1
  %1097 = icmp eq i64 %1093, 0
  br i1 %1097, label %1142, label %1098

1098:                                             ; preds = %1087
  %1099 = sub nuw nsw i64 %1095, %1096
  %1100 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1056, i64 -1
  %1101 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1064, i64 -1
  %1102 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1056, i64 -1
  %1103 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1064, i64 -1
  br label %1104

1104:                                             ; preds = %1104, %1098
  %1105 = phi i64 [ 0, %1098 ], [ %1139, %1104 ]
  %1106 = phi i64 [ %1099, %1098 ], [ %1140, %1104 ]
  %1107 = sub i64 0, %1105
  %1108 = sub i64 0, %1105
  %1109 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1100, i64 %1107
  %1110 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1101, i64 %1108
  %1111 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1110, i64 -1
  %1112 = bitcast %"class.sh::TIntermNode"** %1111 to <2 x i64>*
  %1113 = load <2 x i64>, <2 x i64>* %1112, align 8, !alias.scope !46
  %1114 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1110, i64 -2
  %1115 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1114, i64 -1
  %1116 = bitcast %"class.sh::TIntermNode"** %1115 to <2 x i64>*
  %1117 = load <2 x i64>, <2 x i64>* %1116, align 8, !alias.scope !46
  %1118 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1109, i64 -1
  %1119 = bitcast %"class.sh::TIntermNode"** %1118 to <2 x i64>*
  store <2 x i64> %1113, <2 x i64>* %1119, align 8, !alias.scope !49, !noalias !46
  %1120 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1109, i64 -2
  %1121 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1120, i64 -1
  %1122 = bitcast %"class.sh::TIntermNode"** %1121 to <2 x i64>*
  store <2 x i64> %1117, <2 x i64>* %1122, align 8, !alias.scope !49, !noalias !46
  %1123 = sub nuw nsw i64 -4, %1105
  %1124 = sub nuw nsw i64 -4, %1105
  %1125 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1102, i64 %1123
  %1126 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1103, i64 %1124
  %1127 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1126, i64 -1
  %1128 = bitcast %"class.sh::TIntermNode"** %1127 to <2 x i64>*
  %1129 = load <2 x i64>, <2 x i64>* %1128, align 8, !alias.scope !46
  %1130 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1126, i64 -2
  %1131 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1130, i64 -1
  %1132 = bitcast %"class.sh::TIntermNode"** %1131 to <2 x i64>*
  %1133 = load <2 x i64>, <2 x i64>* %1132, align 8, !alias.scope !46
  %1134 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1125, i64 -1
  %1135 = bitcast %"class.sh::TIntermNode"** %1134 to <2 x i64>*
  store <2 x i64> %1129, <2 x i64>* %1135, align 8, !alias.scope !49, !noalias !46
  %1136 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1125, i64 -2
  %1137 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1136, i64 -1
  %1138 = bitcast %"class.sh::TIntermNode"** %1137 to <2 x i64>*
  store <2 x i64> %1133, <2 x i64>* %1138, align 8, !alias.scope !49, !noalias !46
  %1139 = add i64 %1105, 8
  %1140 = add i64 %1106, -2
  %1141 = icmp eq i64 %1140, 0
  br i1 %1141, label %1142, label %1104, !llvm.loop !51

1142:                                             ; preds = %1104, %1087
  %1143 = phi i64 [ 0, %1087 ], [ %1139, %1104 ]
  %1144 = icmp eq i64 %1096, 0
  br i1 %1144, label %1164, label %1145

1145:                                             ; preds = %1142
  %1146 = sub i64 0, %1143
  %1147 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1056, i64 -1
  %1148 = sub i64 0, %1143
  %1149 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1064, i64 -1
  %1150 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1147, i64 %1146
  %1151 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1149, i64 %1148
  %1152 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1151, i64 -1
  %1153 = bitcast %"class.sh::TIntermNode"** %1152 to <2 x i64>*
  %1154 = load <2 x i64>, <2 x i64>* %1153, align 8, !alias.scope !46
  %1155 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1151, i64 -2
  %1156 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1155, i64 -1
  %1157 = bitcast %"class.sh::TIntermNode"** %1156 to <2 x i64>*
  %1158 = load <2 x i64>, <2 x i64>* %1157, align 8, !alias.scope !46
  %1159 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1150, i64 -1
  %1160 = bitcast %"class.sh::TIntermNode"** %1159 to <2 x i64>*
  store <2 x i64> %1154, <2 x i64>* %1160, align 8, !alias.scope !49, !noalias !46
  %1161 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1150, i64 -2
  %1162 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1161, i64 -1
  %1163 = bitcast %"class.sh::TIntermNode"** %1162 to <2 x i64>*
  store <2 x i64> %1158, <2 x i64>* %1163, align 8, !alias.scope !49, !noalias !46
  br label %1164

1164:                                             ; preds = %1142, %1145
  %1165 = icmp eq i64 %1071, %1088
  br i1 %1165, label %1236, label %1166

1166:                                             ; preds = %1164, %1073, %1066
  %1167 = phi %"class.sh::TIntermNode"** [ %1056, %1073 ], [ %1056, %1066 ], [ %1090, %1164 ]
  %1168 = phi %"class.sh::TIntermNode"** [ %1064, %1073 ], [ %1064, %1066 ], [ %1092, %1164 ]
  %1169 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1168, i64 -1
  %1170 = ptrtoint %"class.sh::TIntermNode"** %1169 to i64
  %1171 = sub i64 %1170, %1063
  %1172 = lshr i64 %1171, 3
  %1173 = add nuw nsw i64 %1172, 1
  %1174 = and i64 %1173, 7
  %1175 = icmp eq i64 %1174, 0
  br i1 %1175, label %1187, label %1176

1176:                                             ; preds = %1166, %1176
  %1177 = phi %"class.sh::TIntermNode"** [ %1180, %1176 ], [ %1167, %1166 ]
  %1178 = phi %"class.sh::TIntermNode"** [ %1181, %1176 ], [ %1168, %1166 ]
  %1179 = phi i64 [ %1185, %1176 ], [ %1174, %1166 ]
  %1180 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1177, i64 -1
  %1181 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1178, i64 -1
  %1182 = bitcast %"class.sh::TIntermNode"** %1181 to i64*
  %1183 = load i64, i64* %1182, align 8
  %1184 = bitcast %"class.sh::TIntermNode"** %1180 to i64*
  store i64 %1183, i64* %1184, align 8
  %1185 = add i64 %1179, -1
  %1186 = icmp eq i64 %1185, 0
  br i1 %1186, label %1187, label %1176, !llvm.loop !52

1187:                                             ; preds = %1176, %1166
  %1188 = phi %"class.sh::TIntermNode"** [ undef, %1166 ], [ %1180, %1176 ]
  %1189 = phi %"class.sh::TIntermNode"** [ %1167, %1166 ], [ %1180, %1176 ]
  %1190 = phi %"class.sh::TIntermNode"** [ %1168, %1166 ], [ %1181, %1176 ]
  %1191 = icmp ult i64 %1171, 56
  br i1 %1191, label %1236, label %1192

1192:                                             ; preds = %1187, %1192
  %1193 = phi %"class.sh::TIntermNode"** [ %1230, %1192 ], [ %1189, %1187 ]
  %1194 = phi %"class.sh::TIntermNode"** [ %1231, %1192 ], [ %1190, %1187 ]
  %1195 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1193, i64 -1
  %1196 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1194, i64 -1
  %1197 = bitcast %"class.sh::TIntermNode"** %1196 to i64*
  %1198 = load i64, i64* %1197, align 8
  %1199 = bitcast %"class.sh::TIntermNode"** %1195 to i64*
  store i64 %1198, i64* %1199, align 8
  %1200 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1193, i64 -2
  %1201 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1194, i64 -2
  %1202 = bitcast %"class.sh::TIntermNode"** %1201 to i64*
  %1203 = load i64, i64* %1202, align 8
  %1204 = bitcast %"class.sh::TIntermNode"** %1200 to i64*
  store i64 %1203, i64* %1204, align 8
  %1205 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1193, i64 -3
  %1206 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1194, i64 -3
  %1207 = bitcast %"class.sh::TIntermNode"** %1206 to i64*
  %1208 = load i64, i64* %1207, align 8
  %1209 = bitcast %"class.sh::TIntermNode"** %1205 to i64*
  store i64 %1208, i64* %1209, align 8
  %1210 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1193, i64 -4
  %1211 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1194, i64 -4
  %1212 = bitcast %"class.sh::TIntermNode"** %1211 to i64*
  %1213 = load i64, i64* %1212, align 8
  %1214 = bitcast %"class.sh::TIntermNode"** %1210 to i64*
  store i64 %1213, i64* %1214, align 8
  %1215 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1193, i64 -5
  %1216 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1194, i64 -5
  %1217 = bitcast %"class.sh::TIntermNode"** %1216 to i64*
  %1218 = load i64, i64* %1217, align 8
  %1219 = bitcast %"class.sh::TIntermNode"** %1215 to i64*
  store i64 %1218, i64* %1219, align 8
  %1220 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1193, i64 -6
  %1221 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1194, i64 -6
  %1222 = bitcast %"class.sh::TIntermNode"** %1221 to i64*
  %1223 = load i64, i64* %1222, align 8
  %1224 = bitcast %"class.sh::TIntermNode"** %1220 to i64*
  store i64 %1223, i64* %1224, align 8
  %1225 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1193, i64 -7
  %1226 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1194, i64 -7
  %1227 = bitcast %"class.sh::TIntermNode"** %1226 to i64*
  %1228 = load i64, i64* %1227, align 8
  %1229 = bitcast %"class.sh::TIntermNode"** %1225 to i64*
  store i64 %1228, i64* %1229, align 8
  %1230 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1193, i64 -8
  %1231 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1194, i64 -8
  %1232 = bitcast %"class.sh::TIntermNode"** %1231 to i64*
  %1233 = load i64, i64* %1232, align 8
  %1234 = bitcast %"class.sh::TIntermNode"** %1230 to i64*
  store i64 %1233, i64* %1234, align 8
  %1235 = icmp eq %"class.sh::TIntermNode"** %1231, %1062
  br i1 %1235, label %1236, label %1192, !llvm.loop !53

1236:                                             ; preds = %1187, %1192, %1164, %1053
  %1237 = phi %"class.sh::TIntermNode"** [ %1056, %1053 ], [ %1090, %1164 ], [ %1188, %1187 ], [ %1230, %1192 ]
  %1238 = ptrtoint %"class.sh::TIntermNode"** %1237 to i64
  store i64 %1238, i64* %26, align 8
  store i64 %1061, i64* %24, align 8
  store i64 %1058, i64* %242, align 8
  br label %1239

1239:                                             ; preds = %1025, %1236
  %1240 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %265, align 8
  %1241 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1240, i64 31
  %1242 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1241, align 8
  %1243 = tail call dereferenceable(184) %"class.sh::TType"* %1242(%"class.sh::TIntermTyped"* %261) #8
  %1244 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1243, i64 0, i32 8
  %1245 = load i8, i8* %1244, align 8
  %1246 = zext i8 %1245 to i32
  %1247 = sub nsw i32 %254, %1246
  br label %1759

1248:                                             ; preds = %762
  br i1 %3, label %1249, label %1521

1249:                                             ; preds = %1248
  %1250 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %265, align 8
  %1251 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1250, i64 31
  %1252 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1251, align 8
  %1253 = tail call dereferenceable(184) %"class.sh::TType"* %1252(%"class.sh::TIntermTyped"* %261) #8
  %1254 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1253, i64 0, i32 8
  %1255 = load i8, i8* %1254, align 8
  %1256 = zext i8 %1255 to i32
  %1257 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %265, align 8
  %1258 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1257, i64 31
  %1259 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1258, align 8
  %1260 = tail call dereferenceable(184) %"class.sh::TType"* %1259(%"class.sh::TIntermTyped"* %261) #8
  %1261 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1260, i64 0, i32 9
  %1262 = load i8, i8* %1261, align 1
  %1263 = zext i8 %1262 to i32
  %1264 = mul nuw nsw i32 %1263, %1256
  %1265 = icmp slt i32 %1264, %254
  %1266 = select i1 %1265, i32 %1264, i32 %254
  %1267 = sub nsw i32 %254, %1266
  %1268 = icmp sgt i32 %1266, 0
  br i1 %1268, label %1269, label %1759

1269:                                             ; preds = %1249, %1505
  %1270 = phi i32 [ %1519, %1505 ], [ %1266, %1249 ]
  %1271 = phi i32 [ %1518, %1505 ], [ 0, %1249 ]
  %1272 = phi i32 [ %1517, %1505 ], [ 0, %1249 ]
  %1273 = tail call %"class.sh::TIntermSymbol"* @_ZN2sh20CreateTempSymbolNodeEPKNS_9TVariableE(%"class.sh::TVariable"* %289) #8
  %1274 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #8
  %1275 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1274, i64 240) #8
  %1276 = bitcast i8* %1275 to %"class.sh::TIntermBinary"*
  %1277 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %1273, i64 0, i32 0
  %1278 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 %1272) #8
  %1279 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %1278, i64 0, i32 0, i32 0
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1276, i8 zeroext 44, %"class.sh::TIntermTyped"* %1277, %"class.sh::TIntermTyped"* %1279) #8
  %1280 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #8
  %1281 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1280, i64 240) #8
  %1282 = bitcast i8* %1281 to %"class.sh::TIntermBinary"*
  %1283 = bitcast i8* %1275 to %"class.sh::TIntermTyped"*
  %1284 = tail call %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32 %1271) #8
  %1285 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %1284, i64 0, i32 0, i32 0
  tail call void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"* %1282, i8 zeroext 44, %"class.sh::TIntermTyped"* %1283, %"class.sh::TIntermTyped"* %1285) #8
  %1286 = ptrtoint i8* %1281 to i64
  %1287 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %23, align 8
  %1288 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %241, align 8
  %1289 = icmp ult %"class.sh::TIntermNode"** %1287, %1288
  %1290 = ptrtoint %"class.sh::TIntermNode"** %1288 to i64
  br i1 %1289, label %1291, label %1295

1291:                                             ; preds = %1269
  %1292 = bitcast %"class.sh::TIntermNode"** %1287 to i64*
  store i64 %1286, i64* %1292, align 8
  %1293 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1287, i64 1
  %1294 = ptrtoint %"class.sh::TIntermNode"** %1293 to i64
  store i64 %1294, i64* %24, align 8
  br label %1505

1295:                                             ; preds = %1269
  %1296 = ptrtoint %"class.sh::TIntermNode"** %1287 to i64
  %1297 = load i64, i64* %26, align 8
  %1298 = sub i64 %1296, %1297
  %1299 = ashr exact i64 %1298, 3
  %1300 = add nsw i64 %1299, 1
  %1301 = icmp ugt i64 %1300, 2305843009213693951
  br i1 %1301, label %1302, label %1304

1302:                                             ; preds = %1295
  %1303 = bitcast %"class.sh::TVector.31"* %18 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1303) #10
  unreachable

1304:                                             ; preds = %1295
  %1305 = sub i64 %1290, %1297
  %1306 = ashr exact i64 %1305, 3
  %1307 = icmp ult i64 %1306, 1152921504606846975
  br i1 %1307, label %1308, label %1313

1308:                                             ; preds = %1304
  %1309 = ashr exact i64 %1305, 2
  %1310 = icmp ult i64 %1309, %1300
  %1311 = select i1 %1310, i64 %1300, i64 %1309
  %1312 = icmp eq i64 %1311, 0
  br i1 %1312, label %1319, label %1313

1313:                                             ; preds = %1308, %1304
  %1314 = phi i64 [ %1311, %1308 ], [ 2305843009213693951, %1304 ]
  %1315 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #8
  %1316 = shl i64 %1314, 3
  %1317 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1315, i64 %1316) #8
  %1318 = bitcast i8* %1317 to %"class.sh::TIntermNode"**
  br label %1319

1319:                                             ; preds = %1313, %1308
  %1320 = phi i64 [ %1314, %1313 ], [ 0, %1308 ]
  %1321 = phi %"class.sh::TIntermNode"** [ %1318, %1313 ], [ null, %1308 ]
  %1322 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1321, i64 %1299
  %1323 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1321, i64 %1320
  %1324 = ptrtoint %"class.sh::TIntermNode"** %1323 to i64
  %1325 = bitcast %"class.sh::TIntermNode"** %1322 to i64*
  store i64 %1286, i64* %1325, align 8
  %1326 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1322, i64 1
  %1327 = ptrtoint %"class.sh::TIntermNode"** %1326 to i64
  %1328 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %243, align 8
  %1329 = ptrtoint %"class.sh::TIntermNode"** %1328 to i64
  %1330 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %23, align 8
  %1331 = icmp eq %"class.sh::TIntermNode"** %1330, %1328
  br i1 %1331, label %1502, label %1332

1332:                                             ; preds = %1319
  %1333 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1330, i64 -1
  %1334 = ptrtoint %"class.sh::TIntermNode"** %1333 to i64
  %1335 = sub i64 %1334, %1329
  %1336 = lshr i64 %1335, 3
  %1337 = add nuw nsw i64 %1336, 1
  %1338 = icmp ult i64 %1337, 4
  br i1 %1338, label %1432, label %1339

1339:                                             ; preds = %1332
  %1340 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1321, i64 -1
  %1341 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1330, i64 -1
  %1342 = ptrtoint %"class.sh::TIntermNode"** %1341 to i64
  %1343 = sub i64 %1342, %1329
  %1344 = lshr i64 %1343, 3
  %1345 = sub nsw i64 %1299, %1344
  %1346 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1340, i64 %1345
  %1347 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1330, i64 -1
  %1348 = sub nsw i64 0, %1344
  %1349 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1347, i64 %1348
  %1350 = icmp ult %"class.sh::TIntermNode"** %1346, %1330
  %1351 = icmp ult %"class.sh::TIntermNode"** %1349, %1322
  %1352 = and i1 %1350, %1351
  br i1 %1352, label %1432, label %1353

1353:                                             ; preds = %1339
  %1354 = and i64 %1337, 4611686018427387900
  %1355 = sub nsw i64 0, %1354
  %1356 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1322, i64 %1355
  %1357 = sub nsw i64 0, %1354
  %1358 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1330, i64 %1357
  %1359 = add nsw i64 %1354, -4
  %1360 = lshr exact i64 %1359, 2
  %1361 = add nuw nsw i64 %1360, 1
  %1362 = and i64 %1361, 1
  %1363 = icmp eq i64 %1359, 0
  br i1 %1363, label %1408, label %1364

1364:                                             ; preds = %1353
  %1365 = sub nuw nsw i64 %1361, %1362
  %1366 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1322, i64 -1
  %1367 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1330, i64 -1
  %1368 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1322, i64 -1
  %1369 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1330, i64 -1
  br label %1370

1370:                                             ; preds = %1370, %1364
  %1371 = phi i64 [ 0, %1364 ], [ %1405, %1370 ]
  %1372 = phi i64 [ %1365, %1364 ], [ %1406, %1370 ]
  %1373 = sub i64 0, %1371
  %1374 = sub i64 0, %1371
  %1375 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1366, i64 %1373
  %1376 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1367, i64 %1374
  %1377 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1376, i64 -1
  %1378 = bitcast %"class.sh::TIntermNode"** %1377 to <2 x i64>*
  %1379 = load <2 x i64>, <2 x i64>* %1378, align 8, !alias.scope !54
  %1380 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1376, i64 -2
  %1381 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1380, i64 -1
  %1382 = bitcast %"class.sh::TIntermNode"** %1381 to <2 x i64>*
  %1383 = load <2 x i64>, <2 x i64>* %1382, align 8, !alias.scope !54
  %1384 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1375, i64 -1
  %1385 = bitcast %"class.sh::TIntermNode"** %1384 to <2 x i64>*
  store <2 x i64> %1379, <2 x i64>* %1385, align 8, !alias.scope !57, !noalias !54
  %1386 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1375, i64 -2
  %1387 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1386, i64 -1
  %1388 = bitcast %"class.sh::TIntermNode"** %1387 to <2 x i64>*
  store <2 x i64> %1383, <2 x i64>* %1388, align 8, !alias.scope !57, !noalias !54
  %1389 = sub nuw nsw i64 -4, %1371
  %1390 = sub nuw nsw i64 -4, %1371
  %1391 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1368, i64 %1389
  %1392 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1369, i64 %1390
  %1393 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1392, i64 -1
  %1394 = bitcast %"class.sh::TIntermNode"** %1393 to <2 x i64>*
  %1395 = load <2 x i64>, <2 x i64>* %1394, align 8, !alias.scope !54
  %1396 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1392, i64 -2
  %1397 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1396, i64 -1
  %1398 = bitcast %"class.sh::TIntermNode"** %1397 to <2 x i64>*
  %1399 = load <2 x i64>, <2 x i64>* %1398, align 8, !alias.scope !54
  %1400 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1391, i64 -1
  %1401 = bitcast %"class.sh::TIntermNode"** %1400 to <2 x i64>*
  store <2 x i64> %1395, <2 x i64>* %1401, align 8, !alias.scope !57, !noalias !54
  %1402 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1391, i64 -2
  %1403 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1402, i64 -1
  %1404 = bitcast %"class.sh::TIntermNode"** %1403 to <2 x i64>*
  store <2 x i64> %1399, <2 x i64>* %1404, align 8, !alias.scope !57, !noalias !54
  %1405 = add i64 %1371, 8
  %1406 = add i64 %1372, -2
  %1407 = icmp eq i64 %1406, 0
  br i1 %1407, label %1408, label %1370, !llvm.loop !59

1408:                                             ; preds = %1370, %1353
  %1409 = phi i64 [ 0, %1353 ], [ %1405, %1370 ]
  %1410 = icmp eq i64 %1362, 0
  br i1 %1410, label %1430, label %1411

1411:                                             ; preds = %1408
  %1412 = sub i64 0, %1409
  %1413 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1322, i64 -1
  %1414 = sub i64 0, %1409
  %1415 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1330, i64 -1
  %1416 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1413, i64 %1412
  %1417 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1415, i64 %1414
  %1418 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1417, i64 -1
  %1419 = bitcast %"class.sh::TIntermNode"** %1418 to <2 x i64>*
  %1420 = load <2 x i64>, <2 x i64>* %1419, align 8, !alias.scope !54
  %1421 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1417, i64 -2
  %1422 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1421, i64 -1
  %1423 = bitcast %"class.sh::TIntermNode"** %1422 to <2 x i64>*
  %1424 = load <2 x i64>, <2 x i64>* %1423, align 8, !alias.scope !54
  %1425 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1416, i64 -1
  %1426 = bitcast %"class.sh::TIntermNode"** %1425 to <2 x i64>*
  store <2 x i64> %1420, <2 x i64>* %1426, align 8, !alias.scope !57, !noalias !54
  %1427 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1416, i64 -2
  %1428 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1427, i64 -1
  %1429 = bitcast %"class.sh::TIntermNode"** %1428 to <2 x i64>*
  store <2 x i64> %1424, <2 x i64>* %1429, align 8, !alias.scope !57, !noalias !54
  br label %1430

1430:                                             ; preds = %1408, %1411
  %1431 = icmp eq i64 %1337, %1354
  br i1 %1431, label %1502, label %1432

1432:                                             ; preds = %1430, %1339, %1332
  %1433 = phi %"class.sh::TIntermNode"** [ %1322, %1339 ], [ %1322, %1332 ], [ %1356, %1430 ]
  %1434 = phi %"class.sh::TIntermNode"** [ %1330, %1339 ], [ %1330, %1332 ], [ %1358, %1430 ]
  %1435 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1434, i64 -1
  %1436 = ptrtoint %"class.sh::TIntermNode"** %1435 to i64
  %1437 = sub i64 %1436, %1329
  %1438 = lshr i64 %1437, 3
  %1439 = add nuw nsw i64 %1438, 1
  %1440 = and i64 %1439, 7
  %1441 = icmp eq i64 %1440, 0
  br i1 %1441, label %1453, label %1442

1442:                                             ; preds = %1432, %1442
  %1443 = phi %"class.sh::TIntermNode"** [ %1446, %1442 ], [ %1433, %1432 ]
  %1444 = phi %"class.sh::TIntermNode"** [ %1447, %1442 ], [ %1434, %1432 ]
  %1445 = phi i64 [ %1451, %1442 ], [ %1440, %1432 ]
  %1446 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1443, i64 -1
  %1447 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1444, i64 -1
  %1448 = bitcast %"class.sh::TIntermNode"** %1447 to i64*
  %1449 = load i64, i64* %1448, align 8
  %1450 = bitcast %"class.sh::TIntermNode"** %1446 to i64*
  store i64 %1449, i64* %1450, align 8
  %1451 = add i64 %1445, -1
  %1452 = icmp eq i64 %1451, 0
  br i1 %1452, label %1453, label %1442, !llvm.loop !60

1453:                                             ; preds = %1442, %1432
  %1454 = phi %"class.sh::TIntermNode"** [ undef, %1432 ], [ %1446, %1442 ]
  %1455 = phi %"class.sh::TIntermNode"** [ %1433, %1432 ], [ %1446, %1442 ]
  %1456 = phi %"class.sh::TIntermNode"** [ %1434, %1432 ], [ %1447, %1442 ]
  %1457 = icmp ult i64 %1437, 56
  br i1 %1457, label %1502, label %1458

1458:                                             ; preds = %1453, %1458
  %1459 = phi %"class.sh::TIntermNode"** [ %1496, %1458 ], [ %1455, %1453 ]
  %1460 = phi %"class.sh::TIntermNode"** [ %1497, %1458 ], [ %1456, %1453 ]
  %1461 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1459, i64 -1
  %1462 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1460, i64 -1
  %1463 = bitcast %"class.sh::TIntermNode"** %1462 to i64*
  %1464 = load i64, i64* %1463, align 8
  %1465 = bitcast %"class.sh::TIntermNode"** %1461 to i64*
  store i64 %1464, i64* %1465, align 8
  %1466 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1459, i64 -2
  %1467 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1460, i64 -2
  %1468 = bitcast %"class.sh::TIntermNode"** %1467 to i64*
  %1469 = load i64, i64* %1468, align 8
  %1470 = bitcast %"class.sh::TIntermNode"** %1466 to i64*
  store i64 %1469, i64* %1470, align 8
  %1471 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1459, i64 -3
  %1472 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1460, i64 -3
  %1473 = bitcast %"class.sh::TIntermNode"** %1472 to i64*
  %1474 = load i64, i64* %1473, align 8
  %1475 = bitcast %"class.sh::TIntermNode"** %1471 to i64*
  store i64 %1474, i64* %1475, align 8
  %1476 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1459, i64 -4
  %1477 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1460, i64 -4
  %1478 = bitcast %"class.sh::TIntermNode"** %1477 to i64*
  %1479 = load i64, i64* %1478, align 8
  %1480 = bitcast %"class.sh::TIntermNode"** %1476 to i64*
  store i64 %1479, i64* %1480, align 8
  %1481 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1459, i64 -5
  %1482 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1460, i64 -5
  %1483 = bitcast %"class.sh::TIntermNode"** %1482 to i64*
  %1484 = load i64, i64* %1483, align 8
  %1485 = bitcast %"class.sh::TIntermNode"** %1481 to i64*
  store i64 %1484, i64* %1485, align 8
  %1486 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1459, i64 -6
  %1487 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1460, i64 -6
  %1488 = bitcast %"class.sh::TIntermNode"** %1487 to i64*
  %1489 = load i64, i64* %1488, align 8
  %1490 = bitcast %"class.sh::TIntermNode"** %1486 to i64*
  store i64 %1489, i64* %1490, align 8
  %1491 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1459, i64 -7
  %1492 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1460, i64 -7
  %1493 = bitcast %"class.sh::TIntermNode"** %1492 to i64*
  %1494 = load i64, i64* %1493, align 8
  %1495 = bitcast %"class.sh::TIntermNode"** %1491 to i64*
  store i64 %1494, i64* %1495, align 8
  %1496 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1459, i64 -8
  %1497 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1460, i64 -8
  %1498 = bitcast %"class.sh::TIntermNode"** %1497 to i64*
  %1499 = load i64, i64* %1498, align 8
  %1500 = bitcast %"class.sh::TIntermNode"** %1496 to i64*
  store i64 %1499, i64* %1500, align 8
  %1501 = icmp eq %"class.sh::TIntermNode"** %1497, %1328
  br i1 %1501, label %1502, label %1458, !llvm.loop !61

1502:                                             ; preds = %1453, %1458, %1430, %1319
  %1503 = phi %"class.sh::TIntermNode"** [ %1322, %1319 ], [ %1356, %1430 ], [ %1454, %1453 ], [ %1496, %1458 ]
  %1504 = ptrtoint %"class.sh::TIntermNode"** %1503 to i64
  store i64 %1504, i64* %26, align 8
  store i64 %1327, i64* %24, align 8
  store i64 %1324, i64* %242, align 8
  br label %1505

1505:                                             ; preds = %1291, %1502
  %1506 = add nsw i32 %1271, 1
  %1507 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %265, align 8
  %1508 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1507, i64 31
  %1509 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1508, align 8
  %1510 = tail call dereferenceable(184) %"class.sh::TType"* %1509(%"class.sh::TIntermTyped"* %261) #8
  %1511 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1510, i64 0, i32 9
  %1512 = load i8, i8* %1511, align 1
  %1513 = zext i8 %1512 to i32
  %1514 = icmp slt i32 %1506, %1513
  %1515 = xor i1 %1514, true
  %1516 = zext i1 %1515 to i32
  %1517 = add nuw nsw i32 %1272, %1516
  %1518 = select i1 %1514, i32 %1506, i32 0
  %1519 = add nsw i32 %1270, -1
  %1520 = icmp sgt i32 %1519, 0
  br i1 %1520, label %1269, label %1759

1521:                                             ; preds = %1248
  %1522 = tail call %"class.sh::TIntermSymbol"* @_ZN2sh20CreateTempSymbolNodeEPKNS_9TVariableE(%"class.sh::TVariable"* %289) #8
  %1523 = ptrtoint %"class.sh::TIntermSymbol"* %1522 to i64
  %1524 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %23, align 8
  %1525 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %241, align 8
  %1526 = icmp ult %"class.sh::TIntermNode"** %1524, %1525
  %1527 = ptrtoint %"class.sh::TIntermNode"** %1525 to i64
  br i1 %1526, label %1528, label %1532

1528:                                             ; preds = %1521
  %1529 = bitcast %"class.sh::TIntermNode"** %1524 to i64*
  store i64 %1523, i64* %1529, align 8
  %1530 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1524, i64 1
  %1531 = ptrtoint %"class.sh::TIntermNode"** %1530 to i64
  store i64 %1531, i64* %24, align 8
  br label %1742

1532:                                             ; preds = %1521
  %1533 = ptrtoint %"class.sh::TIntermNode"** %1524 to i64
  %1534 = load i64, i64* %26, align 8
  %1535 = sub i64 %1533, %1534
  %1536 = ashr exact i64 %1535, 3
  %1537 = add nsw i64 %1536, 1
  %1538 = icmp ugt i64 %1537, 2305843009213693951
  br i1 %1538, label %1539, label %1541

1539:                                             ; preds = %1532
  %1540 = bitcast %"class.sh::TVector.31"* %18 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1540) #10
  unreachable

1541:                                             ; preds = %1532
  %1542 = sub i64 %1527, %1534
  %1543 = ashr exact i64 %1542, 3
  %1544 = icmp ult i64 %1543, 1152921504606846975
  br i1 %1544, label %1545, label %1550

1545:                                             ; preds = %1541
  %1546 = ashr exact i64 %1542, 2
  %1547 = icmp ult i64 %1546, %1537
  %1548 = select i1 %1547, i64 %1537, i64 %1546
  %1549 = icmp eq i64 %1548, 0
  br i1 %1549, label %1556, label %1550

1550:                                             ; preds = %1545, %1541
  %1551 = phi i64 [ %1548, %1545 ], [ 2305843009213693951, %1541 ]
  %1552 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #8
  %1553 = shl i64 %1551, 3
  %1554 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %1552, i64 %1553) #8
  %1555 = bitcast i8* %1554 to %"class.sh::TIntermNode"**
  br label %1556

1556:                                             ; preds = %1550, %1545
  %1557 = phi i64 [ %1551, %1550 ], [ 0, %1545 ]
  %1558 = phi %"class.sh::TIntermNode"** [ %1555, %1550 ], [ null, %1545 ]
  %1559 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1558, i64 %1536
  %1560 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1558, i64 %1557
  %1561 = ptrtoint %"class.sh::TIntermNode"** %1560 to i64
  %1562 = bitcast %"class.sh::TIntermNode"** %1559 to i64*
  store i64 %1523, i64* %1562, align 8
  %1563 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1559, i64 1
  %1564 = ptrtoint %"class.sh::TIntermNode"** %1563 to i64
  %1565 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %243, align 8
  %1566 = ptrtoint %"class.sh::TIntermNode"** %1565 to i64
  %1567 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %23, align 8
  %1568 = icmp eq %"class.sh::TIntermNode"** %1567, %1565
  br i1 %1568, label %1739, label %1569

1569:                                             ; preds = %1556
  %1570 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1567, i64 -1
  %1571 = ptrtoint %"class.sh::TIntermNode"** %1570 to i64
  %1572 = sub i64 %1571, %1566
  %1573 = lshr i64 %1572, 3
  %1574 = add nuw nsw i64 %1573, 1
  %1575 = icmp ult i64 %1574, 4
  br i1 %1575, label %1669, label %1576

1576:                                             ; preds = %1569
  %1577 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1558, i64 -1
  %1578 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1567, i64 -1
  %1579 = ptrtoint %"class.sh::TIntermNode"** %1578 to i64
  %1580 = sub i64 %1579, %1566
  %1581 = lshr i64 %1580, 3
  %1582 = sub nsw i64 %1536, %1581
  %1583 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1577, i64 %1582
  %1584 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1567, i64 -1
  %1585 = sub nsw i64 0, %1581
  %1586 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1584, i64 %1585
  %1587 = icmp ult %"class.sh::TIntermNode"** %1583, %1567
  %1588 = icmp ult %"class.sh::TIntermNode"** %1586, %1559
  %1589 = and i1 %1587, %1588
  br i1 %1589, label %1669, label %1590

1590:                                             ; preds = %1576
  %1591 = and i64 %1574, 4611686018427387900
  %1592 = sub nsw i64 0, %1591
  %1593 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1559, i64 %1592
  %1594 = sub nsw i64 0, %1591
  %1595 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1567, i64 %1594
  %1596 = add nsw i64 %1591, -4
  %1597 = lshr exact i64 %1596, 2
  %1598 = add nuw nsw i64 %1597, 1
  %1599 = and i64 %1598, 1
  %1600 = icmp eq i64 %1596, 0
  br i1 %1600, label %1645, label %1601

1601:                                             ; preds = %1590
  %1602 = sub nuw nsw i64 %1598, %1599
  %1603 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1559, i64 -1
  %1604 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1567, i64 -1
  %1605 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1559, i64 -1
  %1606 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1567, i64 -1
  br label %1607

1607:                                             ; preds = %1607, %1601
  %1608 = phi i64 [ 0, %1601 ], [ %1642, %1607 ]
  %1609 = phi i64 [ %1602, %1601 ], [ %1643, %1607 ]
  %1610 = sub i64 0, %1608
  %1611 = sub i64 0, %1608
  %1612 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1603, i64 %1610
  %1613 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1604, i64 %1611
  %1614 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1613, i64 -1
  %1615 = bitcast %"class.sh::TIntermNode"** %1614 to <2 x i64>*
  %1616 = load <2 x i64>, <2 x i64>* %1615, align 8, !alias.scope !62
  %1617 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1613, i64 -2
  %1618 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1617, i64 -1
  %1619 = bitcast %"class.sh::TIntermNode"** %1618 to <2 x i64>*
  %1620 = load <2 x i64>, <2 x i64>* %1619, align 8, !alias.scope !62
  %1621 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1612, i64 -1
  %1622 = bitcast %"class.sh::TIntermNode"** %1621 to <2 x i64>*
  store <2 x i64> %1616, <2 x i64>* %1622, align 8, !alias.scope !65, !noalias !62
  %1623 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1612, i64 -2
  %1624 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1623, i64 -1
  %1625 = bitcast %"class.sh::TIntermNode"** %1624 to <2 x i64>*
  store <2 x i64> %1620, <2 x i64>* %1625, align 8, !alias.scope !65, !noalias !62
  %1626 = sub nuw nsw i64 -4, %1608
  %1627 = sub nuw nsw i64 -4, %1608
  %1628 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1605, i64 %1626
  %1629 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1606, i64 %1627
  %1630 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1629, i64 -1
  %1631 = bitcast %"class.sh::TIntermNode"** %1630 to <2 x i64>*
  %1632 = load <2 x i64>, <2 x i64>* %1631, align 8, !alias.scope !62
  %1633 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1629, i64 -2
  %1634 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1633, i64 -1
  %1635 = bitcast %"class.sh::TIntermNode"** %1634 to <2 x i64>*
  %1636 = load <2 x i64>, <2 x i64>* %1635, align 8, !alias.scope !62
  %1637 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1628, i64 -1
  %1638 = bitcast %"class.sh::TIntermNode"** %1637 to <2 x i64>*
  store <2 x i64> %1632, <2 x i64>* %1638, align 8, !alias.scope !65, !noalias !62
  %1639 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1628, i64 -2
  %1640 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1639, i64 -1
  %1641 = bitcast %"class.sh::TIntermNode"** %1640 to <2 x i64>*
  store <2 x i64> %1636, <2 x i64>* %1641, align 8, !alias.scope !65, !noalias !62
  %1642 = add i64 %1608, 8
  %1643 = add i64 %1609, -2
  %1644 = icmp eq i64 %1643, 0
  br i1 %1644, label %1645, label %1607, !llvm.loop !67

1645:                                             ; preds = %1607, %1590
  %1646 = phi i64 [ 0, %1590 ], [ %1642, %1607 ]
  %1647 = icmp eq i64 %1599, 0
  br i1 %1647, label %1667, label %1648

1648:                                             ; preds = %1645
  %1649 = sub i64 0, %1646
  %1650 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1559, i64 -1
  %1651 = sub i64 0, %1646
  %1652 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1567, i64 -1
  %1653 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1650, i64 %1649
  %1654 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1652, i64 %1651
  %1655 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1654, i64 -1
  %1656 = bitcast %"class.sh::TIntermNode"** %1655 to <2 x i64>*
  %1657 = load <2 x i64>, <2 x i64>* %1656, align 8, !alias.scope !62
  %1658 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1654, i64 -2
  %1659 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1658, i64 -1
  %1660 = bitcast %"class.sh::TIntermNode"** %1659 to <2 x i64>*
  %1661 = load <2 x i64>, <2 x i64>* %1660, align 8, !alias.scope !62
  %1662 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1653, i64 -1
  %1663 = bitcast %"class.sh::TIntermNode"** %1662 to <2 x i64>*
  store <2 x i64> %1657, <2 x i64>* %1663, align 8, !alias.scope !65, !noalias !62
  %1664 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1653, i64 -2
  %1665 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1664, i64 -1
  %1666 = bitcast %"class.sh::TIntermNode"** %1665 to <2 x i64>*
  store <2 x i64> %1661, <2 x i64>* %1666, align 8, !alias.scope !65, !noalias !62
  br label %1667

1667:                                             ; preds = %1645, %1648
  %1668 = icmp eq i64 %1574, %1591
  br i1 %1668, label %1739, label %1669

1669:                                             ; preds = %1667, %1576, %1569
  %1670 = phi %"class.sh::TIntermNode"** [ %1559, %1576 ], [ %1559, %1569 ], [ %1593, %1667 ]
  %1671 = phi %"class.sh::TIntermNode"** [ %1567, %1576 ], [ %1567, %1569 ], [ %1595, %1667 ]
  %1672 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1671, i64 -1
  %1673 = ptrtoint %"class.sh::TIntermNode"** %1672 to i64
  %1674 = sub i64 %1673, %1566
  %1675 = lshr i64 %1674, 3
  %1676 = add nuw nsw i64 %1675, 1
  %1677 = and i64 %1676, 7
  %1678 = icmp eq i64 %1677, 0
  br i1 %1678, label %1690, label %1679

1679:                                             ; preds = %1669, %1679
  %1680 = phi %"class.sh::TIntermNode"** [ %1683, %1679 ], [ %1670, %1669 ]
  %1681 = phi %"class.sh::TIntermNode"** [ %1684, %1679 ], [ %1671, %1669 ]
  %1682 = phi i64 [ %1688, %1679 ], [ %1677, %1669 ]
  %1683 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1680, i64 -1
  %1684 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1681, i64 -1
  %1685 = bitcast %"class.sh::TIntermNode"** %1684 to i64*
  %1686 = load i64, i64* %1685, align 8
  %1687 = bitcast %"class.sh::TIntermNode"** %1683 to i64*
  store i64 %1686, i64* %1687, align 8
  %1688 = add i64 %1682, -1
  %1689 = icmp eq i64 %1688, 0
  br i1 %1689, label %1690, label %1679, !llvm.loop !68

1690:                                             ; preds = %1679, %1669
  %1691 = phi %"class.sh::TIntermNode"** [ undef, %1669 ], [ %1683, %1679 ]
  %1692 = phi %"class.sh::TIntermNode"** [ %1670, %1669 ], [ %1683, %1679 ]
  %1693 = phi %"class.sh::TIntermNode"** [ %1671, %1669 ], [ %1684, %1679 ]
  %1694 = icmp ult i64 %1674, 56
  br i1 %1694, label %1739, label %1695

1695:                                             ; preds = %1690, %1695
  %1696 = phi %"class.sh::TIntermNode"** [ %1733, %1695 ], [ %1692, %1690 ]
  %1697 = phi %"class.sh::TIntermNode"** [ %1734, %1695 ], [ %1693, %1690 ]
  %1698 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1696, i64 -1
  %1699 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1697, i64 -1
  %1700 = bitcast %"class.sh::TIntermNode"** %1699 to i64*
  %1701 = load i64, i64* %1700, align 8
  %1702 = bitcast %"class.sh::TIntermNode"** %1698 to i64*
  store i64 %1701, i64* %1702, align 8
  %1703 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1696, i64 -2
  %1704 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1697, i64 -2
  %1705 = bitcast %"class.sh::TIntermNode"** %1704 to i64*
  %1706 = load i64, i64* %1705, align 8
  %1707 = bitcast %"class.sh::TIntermNode"** %1703 to i64*
  store i64 %1706, i64* %1707, align 8
  %1708 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1696, i64 -3
  %1709 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1697, i64 -3
  %1710 = bitcast %"class.sh::TIntermNode"** %1709 to i64*
  %1711 = load i64, i64* %1710, align 8
  %1712 = bitcast %"class.sh::TIntermNode"** %1708 to i64*
  store i64 %1711, i64* %1712, align 8
  %1713 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1696, i64 -4
  %1714 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1697, i64 -4
  %1715 = bitcast %"class.sh::TIntermNode"** %1714 to i64*
  %1716 = load i64, i64* %1715, align 8
  %1717 = bitcast %"class.sh::TIntermNode"** %1713 to i64*
  store i64 %1716, i64* %1717, align 8
  %1718 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1696, i64 -5
  %1719 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1697, i64 -5
  %1720 = bitcast %"class.sh::TIntermNode"** %1719 to i64*
  %1721 = load i64, i64* %1720, align 8
  %1722 = bitcast %"class.sh::TIntermNode"** %1718 to i64*
  store i64 %1721, i64* %1722, align 8
  %1723 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1696, i64 -6
  %1724 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1697, i64 -6
  %1725 = bitcast %"class.sh::TIntermNode"** %1724 to i64*
  %1726 = load i64, i64* %1725, align 8
  %1727 = bitcast %"class.sh::TIntermNode"** %1723 to i64*
  store i64 %1726, i64* %1727, align 8
  %1728 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1696, i64 -7
  %1729 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1697, i64 -7
  %1730 = bitcast %"class.sh::TIntermNode"** %1729 to i64*
  %1731 = load i64, i64* %1730, align 8
  %1732 = bitcast %"class.sh::TIntermNode"** %1728 to i64*
  store i64 %1731, i64* %1732, align 8
  %1733 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1696, i64 -8
  %1734 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1697, i64 -8
  %1735 = bitcast %"class.sh::TIntermNode"** %1734 to i64*
  %1736 = load i64, i64* %1735, align 8
  %1737 = bitcast %"class.sh::TIntermNode"** %1733 to i64*
  store i64 %1736, i64* %1737, align 8
  %1738 = icmp eq %"class.sh::TIntermNode"** %1734, %1565
  br i1 %1738, label %1739, label %1695, !llvm.loop !69

1739:                                             ; preds = %1690, %1695, %1667, %1556
  %1740 = phi %"class.sh::TIntermNode"** [ %1559, %1556 ], [ %1593, %1667 ], [ %1691, %1690 ], [ %1733, %1695 ]
  %1741 = ptrtoint %"class.sh::TIntermNode"** %1740 to i64
  store i64 %1741, i64* %26, align 8
  store i64 %1564, i64* %24, align 8
  store i64 %1561, i64* %242, align 8
  br label %1742

1742:                                             ; preds = %1528, %1739
  %1743 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %265, align 8
  %1744 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1743, i64 31
  %1745 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1744, align 8
  %1746 = tail call dereferenceable(184) %"class.sh::TType"* %1745(%"class.sh::TIntermTyped"* %261) #8
  %1747 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1746, i64 0, i32 8
  %1748 = load i8, i8* %1747, align 8
  %1749 = zext i8 %1748 to i32
  %1750 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %265, align 8
  %1751 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1750, i64 31
  %1752 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %1751, align 8
  %1753 = tail call dereferenceable(184) %"class.sh::TType"* %1752(%"class.sh::TIntermTyped"* %261) #8
  %1754 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %1753, i64 0, i32 9
  %1755 = load i8, i8* %1754, align 1
  %1756 = zext i8 %1755 to i32
  %1757 = mul nuw nsw i32 %1756, %1749
  %1758 = sub nsw i32 %254, %1757
  br label %1759

1759:                                             ; preds = %1505, %1015, %1249, %775, %1239, %1742, %760
  %1760 = phi i32 [ %761, %760 ], [ %1247, %1239 ], [ %1758, %1742 ], [ %785, %775 ], [ %1267, %1249 ], [ %785, %1015 ], [ %1267, %1505 ]
  %1761 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %255, i64 1
  %1762 = icmp eq %"class.sh::TIntermNode"** %1761, %234
  br i1 %1762, label %244, label %253
}

declare i64 @_ZNK2sh5TType13getObjectSizeEv(%"class.sh::TType"*) local_unnamed_addr #2

declare %"class.sh::TIntermSymbol"* @_ZN2sh20CreateTempSymbolNodeEPKNS_9TVariableE(%"class.sh::TVariable"*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

declare void @_ZN2sh5TTypeC1ERKS0_(%"class.sh::TType"*, %"class.sh::TType"* dereferenceable(184)) unnamed_addr #2

declare %"class.sh::TVariable"* @_ZN2sh18CreateTempVariableEPNS_12TSymbolTableEPKNS_5TTypeE(%"class.sh::TSymbolTable"*, %"class.sh::TType"*) local_unnamed_addr #2

declare %"class.sh::TIntermDeclaration"* @_ZN2sh29CreateTempInitDeclarationNodeEPKNS_9TVariableEPNS_12TIntermTypedE(%"class.sh::TVariable"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #2

declare %"class.sh::TIntermConstantUnion"* @_ZN2sh15CreateIndexNodeEi(i32) local_unnamed_addr #2

declare void @_ZN2sh13TIntermBinaryC1E9TOperatorPNS_12TIntermTypedES3_(%"class.sh::TIntermBinary"*, i8 zeroext, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2sh7TVectorIPNS1_11TIntermNodeEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector.163"*, %"class.sh::TVector.31"* dereferenceable(24)) local_unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.163", %"class.std::__1::vector.163"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.sh::TVector.31"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.163"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 24
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 768614336404564650
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.163"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #10
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.163", %"class.std::__1::vector.163"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.sh::TVector.31"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 24
  %20 = icmp ult i64 %19, 384307168202282325
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 768614336404564650, %14 ]
  %28 = mul i64 %27, 24
  %29 = tail call i8* @_Znwm(i64 %28) #9
  %30 = bitcast i8* %29 to %"class.sh::TVector.31"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.sh::TVector.31"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %33, i64 %9
  %35 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %33, i64 %32
  %36 = ptrtoint %"class.sh::TVector.31"* %35 to i64
  %37 = bitcast %"class.sh::TVector.31"* %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 24, i1 false) #8
  %38 = bitcast %"class.sh::TVector.31"* %1 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.sh::TVector.31"* %34 to i64*
  store i64 %39, i64* %40, align 8
  %41 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %1, i64 0, i32 0, i32 0, i32 1
  %42 = bitcast %"class.sh::TIntermNode"*** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %33, i64 %9, i32 0, i32 0, i32 1
  %45 = bitcast %"class.sh::TIntermNode"*** %44 to i64*
  store i64 %43, i64* %45, align 8
  %46 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %47 = bitcast %"class.sh::TIntermNode"*** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %33, i64 %9, i32 0, i32 0, i32 2, i32 0, i32 0
  %50 = bitcast %"class.sh::TIntermNode"*** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = bitcast %"class.sh::TVector.31"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %51, i8 0, i64 24, i1 false) #8
  %52 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %34, i64 1
  %53 = ptrtoint %"class.sh::TVector.31"* %52 to i64
  %54 = getelementptr inbounds %"class.std::__1::vector.163", %"class.std::__1::vector.163"* %0, i64 0, i32 0, i32 0
  %55 = load %"class.sh::TVector.31"*, %"class.sh::TVector.31"** %54, align 8
  %56 = load %"class.sh::TVector.31"*, %"class.sh::TVector.31"** %3, align 8
  %57 = icmp eq %"class.sh::TVector.31"* %56, %55
  br i1 %57, label %58, label %60

58:                                               ; preds = %31
  %59 = ptrtoint %"class.sh::TVector.31"* %55 to i64
  br label %84

60:                                               ; preds = %31, %60
  %61 = phi %"class.sh::TVector.31"* [ %63, %60 ], [ %34, %31 ]
  %62 = phi %"class.sh::TVector.31"* [ %64, %60 ], [ %56, %31 ]
  %63 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %61, i64 -1
  %64 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %62, i64 -1
  %65 = bitcast %"class.sh::TVector.31"* %63 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %65, i8 0, i64 24, i1 false) #8
  %66 = bitcast %"class.sh::TVector.31"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = bitcast %"class.sh::TVector.31"* %63 to i64*
  store i64 %67, i64* %68, align 8
  %69 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %62, i64 -1, i32 0, i32 0, i32 1
  %70 = bitcast %"class.sh::TIntermNode"*** %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %61, i64 -1, i32 0, i32 0, i32 1
  %73 = bitcast %"class.sh::TIntermNode"*** %72 to i64*
  store i64 %71, i64* %73, align 8
  %74 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %62, i64 -1, i32 0, i32 0, i32 2, i32 0, i32 0
  %75 = bitcast %"class.sh::TIntermNode"*** %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %61, i64 -1, i32 0, i32 0, i32 2, i32 0, i32 0
  %78 = bitcast %"class.sh::TIntermNode"*** %77 to i64*
  store i64 %76, i64* %78, align 8
  %79 = bitcast %"class.sh::TVector.31"* %64 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %79, i8 0, i64 24, i1 false) #8
  %80 = icmp eq %"class.sh::TVector.31"* %64, %55
  br i1 %80, label %81, label %60

81:                                               ; preds = %60
  %82 = load i64, i64* %6, align 8
  %83 = load %"class.sh::TVector.31"*, %"class.sh::TVector.31"** %3, align 8
  br label %84

84:                                               ; preds = %58, %81
  %85 = phi %"class.sh::TVector.31"* [ %55, %58 ], [ %83, %81 ]
  %86 = phi %"class.sh::TVector.31"* [ %34, %58 ], [ %63, %81 ]
  %87 = phi i64 [ %59, %58 ], [ %82, %81 ]
  %88 = ptrtoint %"class.sh::TVector.31"* %86 to i64
  store i64 %88, i64* %6, align 8
  store i64 %53, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %89 = inttoptr i64 %87 to %"class.sh::TVector.31"*
  %90 = icmp eq %"class.sh::TVector.31"* %85, %89
  br i1 %90, label %103, label %91

91:                                               ; preds = %84, %101
  %92 = phi %"class.sh::TVector.31"* [ %93, %101 ], [ %85, %84 ]
  %93 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %92, i64 -1
  %94 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %93, i64 0, i32 0, i32 0, i32 0
  %95 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %94, align 8
  %96 = icmp eq %"class.sh::TIntermNode"** %95, null
  br i1 %96, label %101, label %97

97:                                               ; preds = %91
  %98 = ptrtoint %"class.sh::TIntermNode"** %95 to i64
  %99 = getelementptr inbounds %"class.sh::TVector.31", %"class.sh::TVector.31"* %92, i64 -1, i32 0, i32 0, i32 1
  %100 = bitcast %"class.sh::TIntermNode"*** %99 to i64*
  store i64 %98, i64* %100, align 8
  br label %101

101:                                              ; preds = %97, %91
  %102 = icmp eq %"class.sh::TVector.31"* %93, %89
  br i1 %102, label %103, label %91

103:                                              ; preds = %101, %84
  %104 = icmp eq i64 %87, 0
  br i1 %104, label %107, label %105

105:                                              ; preds = %103
  %106 = inttoptr i64 %87 to i8*
  tail call void @_ZdlPv(i8* %106) #9
  br label %107

107:                                              ; preds = %103, %105
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIPN2sh11TIntermNodeE14pool_allocatorIS3_EE6assignIPS3_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(%"class.std::__1::vector.32"*, %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"class.sh::TIntermNode"** %1 to i64
  %5 = bitcast %"class.sh::TIntermNode"** %1 to i8*
  %6 = ptrtoint %"class.sh::TIntermNode"** %2 to i64
  %7 = sub i64 %6, %4
  %8 = ashr exact i64 %7, 3
  %9 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = bitcast %"class.sh::TIntermNode"*** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector.32"* %0 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = ashr exact i64 %14, 3
  %16 = icmp ugt i64 %8, %15
  %17 = inttoptr i64 %13 to %"class.sh::TIntermNode"**
  br i1 %16, label %124, label %18

18:                                               ; preds = %3
  %19 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 1
  %20 = bitcast %"class.sh::TIntermNode"*** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %21, %13
  %23 = ashr exact i64 %22, 3
  %24 = icmp ugt i64 %8, %23
  %25 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %23
  %26 = select i1 %24, %"class.sh::TIntermNode"** %25, %"class.sh::TIntermNode"** %2
  %27 = ptrtoint %"class.sh::TIntermNode"** %26 to i64
  %28 = sub i64 %27, %4
  %29 = ashr exact i64 %28, 3
  %30 = icmp eq i64 %28, 0
  br i1 %30, label %33, label %31

31:                                               ; preds = %18
  %32 = inttoptr i64 %13 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %5, i64 %28, i1 false) #8
  br label %33

33:                                               ; preds = %18, %31
  br i1 %24, label %34, label %122

34:                                               ; preds = %33
  %35 = load i64, i64* %20, align 8
  %36 = icmp eq %"class.sh::TIntermNode"** %26, %2
  br i1 %36, label %120, label %37

37:                                               ; preds = %34
  %38 = inttoptr i64 %35 to i64*
  %39 = xor i64 %23, -1
  %40 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 %39
  %41 = ptrtoint %"class.sh::TIntermNode"** %40 to i64
  %42 = sub i64 %41, %4
  %43 = lshr i64 %42, 3
  %44 = add nuw nsw i64 %43, 1
  %45 = and i64 %44, 7
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %64, label %47

47:                                               ; preds = %37, %47
  %48 = phi i64 [ %57, %47 ], [ %35, %37 ]
  %49 = phi i64* [ %58, %47 ], [ %38, %37 ]
  %50 = phi %"class.sh::TIntermNode"** [ %54, %47 ], [ %25, %37 ]
  %51 = phi i64 [ %59, %47 ], [ %45, %37 ]
  %52 = bitcast %"class.sh::TIntermNode"** %50 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %49, align 8
  %54 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, i64 1
  %55 = inttoptr i64 %48 to %"class.sh::TIntermNode"**
  %56 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %55, i64 1
  %57 = ptrtoint %"class.sh::TIntermNode"** %56 to i64
  %58 = bitcast %"class.sh::TIntermNode"** %56 to i64*
  %59 = add i64 %51, -1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %47, !llvm.loop !70

61:                                               ; preds = %47
  %62 = ptrtoint %"class.sh::TIntermNode"** %56 to i64
  %63 = bitcast %"class.sh::TIntermNode"** %56 to i64*
  br label %64

64:                                               ; preds = %37, %61
  %65 = phi %"class.sh::TIntermNode"** [ undef, %37 ], [ %56, %61 ]
  %66 = phi i64 [ %35, %37 ], [ %62, %61 ]
  %67 = phi i64* [ %38, %37 ], [ %63, %61 ]
  %68 = phi %"class.sh::TIntermNode"** [ %25, %37 ], [ %54, %61 ]
  %69 = icmp ult i64 %42, 56
  br i1 %69, label %117, label %70

70:                                               ; preds = %64
  %71 = inttoptr i64 %66 to %"class.sh::TIntermNode"**
  br label %72

72:                                               ; preds = %72, %70
  %73 = phi %"class.sh::TIntermNode"** [ %71, %70 ], [ %114, %72 ]
  %74 = phi i64* [ %67, %70 ], [ %116, %72 ]
  %75 = phi %"class.sh::TIntermNode"** [ %68, %70 ], [ %113, %72 ]
  %76 = bitcast %"class.sh::TIntermNode"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %74, align 8
  %78 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 1
  %79 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %73, i64 1
  %80 = bitcast %"class.sh::TIntermNode"** %79 to i64*
  %81 = bitcast %"class.sh::TIntermNode"** %78 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %80, align 8
  %83 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 2
  %84 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %73, i64 2
  %85 = bitcast %"class.sh::TIntermNode"** %84 to i64*
  %86 = bitcast %"class.sh::TIntermNode"** %83 to i64*
  %87 = load i64, i64* %86, align 8
  store i64 %87, i64* %85, align 8
  %88 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 3
  %89 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %73, i64 3
  %90 = bitcast %"class.sh::TIntermNode"** %89 to i64*
  %91 = bitcast %"class.sh::TIntermNode"** %88 to i64*
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %90, align 8
  %93 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 4
  %94 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %73, i64 4
  %95 = bitcast %"class.sh::TIntermNode"** %94 to i64*
  %96 = bitcast %"class.sh::TIntermNode"** %93 to i64*
  %97 = load i64, i64* %96, align 8
  store i64 %97, i64* %95, align 8
  %98 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 5
  %99 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %73, i64 5
  %100 = bitcast %"class.sh::TIntermNode"** %99 to i64*
  %101 = bitcast %"class.sh::TIntermNode"** %98 to i64*
  %102 = load i64, i64* %101, align 8
  store i64 %102, i64* %100, align 8
  %103 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 6
  %104 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %73, i64 6
  %105 = bitcast %"class.sh::TIntermNode"** %104 to i64*
  %106 = bitcast %"class.sh::TIntermNode"** %103 to i64*
  %107 = load i64, i64* %106, align 8
  store i64 %107, i64* %105, align 8
  %108 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 7
  %109 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %73, i64 7
  %110 = bitcast %"class.sh::TIntermNode"** %109 to i64*
  %111 = bitcast %"class.sh::TIntermNode"** %108 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %110, align 8
  %113 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %75, i64 8
  %114 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %73, i64 8
  %115 = icmp eq %"class.sh::TIntermNode"** %113, %2
  %116 = bitcast %"class.sh::TIntermNode"** %114 to i64*
  br i1 %115, label %117, label %72

117:                                              ; preds = %72, %64
  %118 = phi %"class.sh::TIntermNode"** [ %65, %64 ], [ %114, %72 ]
  %119 = ptrtoint %"class.sh::TIntermNode"** %118 to i64
  br label %120

120:                                              ; preds = %117, %34
  %121 = phi i64 [ %35, %34 ], [ %119, %117 ]
  store i64 %121, i64* %20, align 8
  br label %334

122:                                              ; preds = %33
  %123 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %17, i64 %29
  store %"class.sh::TIntermNode"** %123, %"class.sh::TIntermNode"*** %19, align 8
  br label %334

124:                                              ; preds = %3
  %125 = icmp eq i64 %13, 0
  br i1 %125, label %128, label %126

126:                                              ; preds = %124
  %127 = bitcast %"class.std::__1::vector.32"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %127, i8 0, i64 24, i1 false) #8
  br label %128

128:                                              ; preds = %124, %126
  %129 = phi i64 [ %11, %124 ], [ 0, %126 ]
  %130 = icmp ugt i64 %8, 2305843009213693951
  br i1 %130, label %131, label %133

131:                                              ; preds = %128
  %132 = bitcast %"class.std::__1::vector.32"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %132) #10
  unreachable

133:                                              ; preds = %128
  %134 = ashr exact i64 %129, 3
  %135 = icmp ult i64 %134, 1152921504606846975
  br i1 %135, label %136, label %143

136:                                              ; preds = %133
  %137 = ashr exact i64 %129, 2
  %138 = icmp ult i64 %137, %8
  br i1 %138, label %143, label %139

139:                                              ; preds = %136
  %140 = icmp ugt i64 %137, 2305843009213693951
  br i1 %140, label %141, label %143

141:                                              ; preds = %139
  %142 = bitcast %"class.std::__1::vector.32"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %142) #10
  unreachable

143:                                              ; preds = %136, %133, %139
  %144 = phi i64 [ %137, %139 ], [ 2305843009213693951, %133 ], [ %8, %136 ]
  %145 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #8
  %146 = shl i64 %144, 3
  %147 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %145, i64 %146) #8
  %148 = bitcast i8* %147 to %"class.sh::TIntermNode"**
  %149 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 1
  %150 = bitcast %"class.sh::TIntermNode"*** %149 to i8**
  store i8* %147, i8** %150, align 8
  %151 = bitcast %"class.std::__1::vector.32"* %0 to i8**
  store i8* %147, i8** %151, align 8
  %152 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %148, i64 %144
  store %"class.sh::TIntermNode"** %152, %"class.sh::TIntermNode"*** %9, align 8
  %153 = bitcast %"class.sh::TIntermNode"*** %149 to i64*
  %154 = ptrtoint i8* %147 to i64
  %155 = icmp eq %"class.sh::TIntermNode"** %1, %2
  br i1 %155, label %332, label %156

156:                                              ; preds = %143
  %157 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 -1
  %158 = ptrtoint %"class.sh::TIntermNode"** %157 to i64
  %159 = sub i64 %158, %4
  %160 = lshr i64 %159, 3
  %161 = add nuw nsw i64 %160, 1
  %162 = icmp ult i64 %161, 4
  br i1 %162, label %258, label %163

163:                                              ; preds = %156
  %164 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 -1
  %165 = ptrtoint %"class.sh::TIntermNode"** %164 to i64
  %166 = sub i64 %165, %4
  %167 = lshr i64 %166, 3
  %168 = add i64 %166, 8
  %169 = and i64 %168, -8
  %170 = getelementptr i8, i8* %147, i64 %169
  %171 = add nuw nsw i64 %167, 1
  %172 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %171
  %173 = bitcast %"class.sh::TIntermNode"** %172 to i8*
  %174 = icmp ult i8* %147, %173
  %175 = icmp ugt i8* %170, %5
  %176 = and i1 %174, %175
  br i1 %176, label %258, label %177

177:                                              ; preds = %163
  %178 = and i64 %161, 4611686018427387900
  %179 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %148, i64 %178
  %180 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %178
  %181 = add nsw i64 %178, -4
  %182 = lshr exact i64 %181, 2
  %183 = add nuw nsw i64 %182, 1
  %184 = and i64 %183, 3
  %185 = icmp ult i64 %181, 12
  br i1 %185, label %237, label %186

186:                                              ; preds = %177
  %187 = sub nsw i64 %183, %184
  br label %188

188:                                              ; preds = %188, %186
  %189 = phi i64 [ 0, %186 ], [ %234, %188 ]
  %190 = phi i64 [ %187, %186 ], [ %235, %188 ]
  %191 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %148, i64 %189
  %192 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %189
  %193 = bitcast %"class.sh::TIntermNode"** %192 to <2 x i64>*
  %194 = load <2 x i64>, <2 x i64>* %193, align 8, !alias.scope !71
  %195 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %192, i64 2
  %196 = bitcast %"class.sh::TIntermNode"** %195 to <2 x i64>*
  %197 = load <2 x i64>, <2 x i64>* %196, align 8, !alias.scope !71
  %198 = bitcast %"class.sh::TIntermNode"** %191 to <2 x i64>*
  store <2 x i64> %194, <2 x i64>* %198, align 8, !alias.scope !74, !noalias !71
  %199 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %191, i64 2
  %200 = bitcast %"class.sh::TIntermNode"** %199 to <2 x i64>*
  store <2 x i64> %197, <2 x i64>* %200, align 8, !alias.scope !74, !noalias !71
  %201 = or i64 %189, 4
  %202 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %148, i64 %201
  %203 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %201
  %204 = bitcast %"class.sh::TIntermNode"** %203 to <2 x i64>*
  %205 = load <2 x i64>, <2 x i64>* %204, align 8, !alias.scope !71
  %206 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %203, i64 2
  %207 = bitcast %"class.sh::TIntermNode"** %206 to <2 x i64>*
  %208 = load <2 x i64>, <2 x i64>* %207, align 8, !alias.scope !71
  %209 = bitcast %"class.sh::TIntermNode"** %202 to <2 x i64>*
  store <2 x i64> %205, <2 x i64>* %209, align 8, !alias.scope !74, !noalias !71
  %210 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %202, i64 2
  %211 = bitcast %"class.sh::TIntermNode"** %210 to <2 x i64>*
  store <2 x i64> %208, <2 x i64>* %211, align 8, !alias.scope !74, !noalias !71
  %212 = or i64 %189, 8
  %213 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %148, i64 %212
  %214 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %212
  %215 = bitcast %"class.sh::TIntermNode"** %214 to <2 x i64>*
  %216 = load <2 x i64>, <2 x i64>* %215, align 8, !alias.scope !71
  %217 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %214, i64 2
  %218 = bitcast %"class.sh::TIntermNode"** %217 to <2 x i64>*
  %219 = load <2 x i64>, <2 x i64>* %218, align 8, !alias.scope !71
  %220 = bitcast %"class.sh::TIntermNode"** %213 to <2 x i64>*
  store <2 x i64> %216, <2 x i64>* %220, align 8, !alias.scope !74, !noalias !71
  %221 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %213, i64 2
  %222 = bitcast %"class.sh::TIntermNode"** %221 to <2 x i64>*
  store <2 x i64> %219, <2 x i64>* %222, align 8, !alias.scope !74, !noalias !71
  %223 = or i64 %189, 12
  %224 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %148, i64 %223
  %225 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %223
  %226 = bitcast %"class.sh::TIntermNode"** %225 to <2 x i64>*
  %227 = load <2 x i64>, <2 x i64>* %226, align 8, !alias.scope !71
  %228 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %225, i64 2
  %229 = bitcast %"class.sh::TIntermNode"** %228 to <2 x i64>*
  %230 = load <2 x i64>, <2 x i64>* %229, align 8, !alias.scope !71
  %231 = bitcast %"class.sh::TIntermNode"** %224 to <2 x i64>*
  store <2 x i64> %227, <2 x i64>* %231, align 8, !alias.scope !74, !noalias !71
  %232 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %224, i64 2
  %233 = bitcast %"class.sh::TIntermNode"** %232 to <2 x i64>*
  store <2 x i64> %230, <2 x i64>* %233, align 8, !alias.scope !74, !noalias !71
  %234 = add i64 %189, 16
  %235 = add i64 %190, -4
  %236 = icmp eq i64 %235, 0
  br i1 %236, label %237, label %188, !llvm.loop !76

237:                                              ; preds = %188, %177
  %238 = phi i64 [ 0, %177 ], [ %234, %188 ]
  %239 = icmp eq i64 %184, 0
  br i1 %239, label %256, label %240

240:                                              ; preds = %237, %240
  %241 = phi i64 [ %253, %240 ], [ %238, %237 ]
  %242 = phi i64 [ %254, %240 ], [ %184, %237 ]
  %243 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %148, i64 %241
  %244 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %1, i64 %241
  %245 = bitcast %"class.sh::TIntermNode"** %244 to <2 x i64>*
  %246 = load <2 x i64>, <2 x i64>* %245, align 8, !alias.scope !71
  %247 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %244, i64 2
  %248 = bitcast %"class.sh::TIntermNode"** %247 to <2 x i64>*
  %249 = load <2 x i64>, <2 x i64>* %248, align 8, !alias.scope !71
  %250 = bitcast %"class.sh::TIntermNode"** %243 to <2 x i64>*
  store <2 x i64> %246, <2 x i64>* %250, align 8, !alias.scope !74, !noalias !71
  %251 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %243, i64 2
  %252 = bitcast %"class.sh::TIntermNode"** %251 to <2 x i64>*
  store <2 x i64> %249, <2 x i64>* %252, align 8, !alias.scope !74, !noalias !71
  %253 = add i64 %241, 4
  %254 = add i64 %242, -1
  %255 = icmp eq i64 %254, 0
  br i1 %255, label %256, label %240, !llvm.loop !77

256:                                              ; preds = %240, %237
  %257 = icmp eq i64 %161, %178
  br i1 %257, label %329, label %258

258:                                              ; preds = %256, %163, %156
  %259 = phi %"class.sh::TIntermNode"** [ %148, %163 ], [ %148, %156 ], [ %179, %256 ]
  %260 = phi %"class.sh::TIntermNode"** [ %1, %163 ], [ %1, %156 ], [ %180, %256 ]
  %261 = ptrtoint %"class.sh::TIntermNode"** %260 to i64
  %262 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %2, i64 -1
  %263 = ptrtoint %"class.sh::TIntermNode"** %262 to i64
  %264 = sub i64 %263, %261
  %265 = lshr i64 %264, 3
  %266 = add nuw nsw i64 %265, 1
  %267 = and i64 %266, 7
  %268 = icmp eq i64 %267, 0
  br i1 %268, label %280, label %269

269:                                              ; preds = %258, %269
  %270 = phi %"class.sh::TIntermNode"** [ %277, %269 ], [ %259, %258 ]
  %271 = phi %"class.sh::TIntermNode"** [ %276, %269 ], [ %260, %258 ]
  %272 = phi i64 [ %278, %269 ], [ %267, %258 ]
  %273 = bitcast %"class.sh::TIntermNode"** %270 to i64*
  %274 = bitcast %"class.sh::TIntermNode"** %271 to i64*
  %275 = load i64, i64* %274, align 8
  store i64 %275, i64* %273, align 8
  %276 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %271, i64 1
  %277 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %270, i64 1
  %278 = add i64 %272, -1
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %280, label %269, !llvm.loop !78

280:                                              ; preds = %269, %258
  %281 = phi %"class.sh::TIntermNode"** [ undef, %258 ], [ %277, %269 ]
  %282 = phi %"class.sh::TIntermNode"** [ %259, %258 ], [ %277, %269 ]
  %283 = phi %"class.sh::TIntermNode"** [ %260, %258 ], [ %276, %269 ]
  %284 = icmp ult i64 %264, 56
  br i1 %284, label %329, label %285

285:                                              ; preds = %280, %285
  %286 = phi %"class.sh::TIntermNode"** [ %327, %285 ], [ %282, %280 ]
  %287 = phi %"class.sh::TIntermNode"** [ %326, %285 ], [ %283, %280 ]
  %288 = bitcast %"class.sh::TIntermNode"** %286 to i64*
  %289 = bitcast %"class.sh::TIntermNode"** %287 to i64*
  %290 = load i64, i64* %289, align 8
  store i64 %290, i64* %288, align 8
  %291 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %287, i64 1
  %292 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %286, i64 1
  %293 = bitcast %"class.sh::TIntermNode"** %292 to i64*
  %294 = bitcast %"class.sh::TIntermNode"** %291 to i64*
  %295 = load i64, i64* %294, align 8
  store i64 %295, i64* %293, align 8
  %296 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %287, i64 2
  %297 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %286, i64 2
  %298 = bitcast %"class.sh::TIntermNode"** %297 to i64*
  %299 = bitcast %"class.sh::TIntermNode"** %296 to i64*
  %300 = load i64, i64* %299, align 8
  store i64 %300, i64* %298, align 8
  %301 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %287, i64 3
  %302 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %286, i64 3
  %303 = bitcast %"class.sh::TIntermNode"** %302 to i64*
  %304 = bitcast %"class.sh::TIntermNode"** %301 to i64*
  %305 = load i64, i64* %304, align 8
  store i64 %305, i64* %303, align 8
  %306 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %287, i64 4
  %307 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %286, i64 4
  %308 = bitcast %"class.sh::TIntermNode"** %307 to i64*
  %309 = bitcast %"class.sh::TIntermNode"** %306 to i64*
  %310 = load i64, i64* %309, align 8
  store i64 %310, i64* %308, align 8
  %311 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %287, i64 5
  %312 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %286, i64 5
  %313 = bitcast %"class.sh::TIntermNode"** %312 to i64*
  %314 = bitcast %"class.sh::TIntermNode"** %311 to i64*
  %315 = load i64, i64* %314, align 8
  store i64 %315, i64* %313, align 8
  %316 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %287, i64 6
  %317 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %286, i64 6
  %318 = bitcast %"class.sh::TIntermNode"** %317 to i64*
  %319 = bitcast %"class.sh::TIntermNode"** %316 to i64*
  %320 = load i64, i64* %319, align 8
  store i64 %320, i64* %318, align 8
  %321 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %287, i64 7
  %322 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %286, i64 7
  %323 = bitcast %"class.sh::TIntermNode"** %322 to i64*
  %324 = bitcast %"class.sh::TIntermNode"** %321 to i64*
  %325 = load i64, i64* %324, align 8
  store i64 %325, i64* %323, align 8
  %326 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %287, i64 8
  %327 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %286, i64 8
  %328 = icmp eq %"class.sh::TIntermNode"** %326, %2
  br i1 %328, label %329, label %285, !llvm.loop !79

329:                                              ; preds = %280, %285, %256
  %330 = phi %"class.sh::TIntermNode"** [ %179, %256 ], [ %281, %280 ], [ %327, %285 ]
  %331 = ptrtoint %"class.sh::TIntermNode"** %330 to i64
  br label %332

332:                                              ; preds = %329, %143
  %333 = phi i64 [ %154, %143 ], [ %331, %329 ]
  store i64 %333, i64* %153, align 8
  br label %334

334:                                              ; preds = %120, %122, %332
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !8}
!21 = !{i8 0, i8 2}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !8}
!28 = distinct !{!28, !10}
!29 = distinct !{!29, !8}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !8}
!36 = distinct !{!36, !10}
!37 = distinct !{!37, !8}
!38 = !{!39}
!39 = distinct !{!39, !40}
!40 = distinct !{!40, !"LVerDomain"}
!41 = !{!42}
!42 = distinct !{!42, !40}
!43 = distinct !{!43, !8}
!44 = distinct !{!44, !10}
!45 = distinct !{!45, !8}
!46 = !{!47}
!47 = distinct !{!47, !48}
!48 = distinct !{!48, !"LVerDomain"}
!49 = !{!50}
!50 = distinct !{!50, !48}
!51 = distinct !{!51, !8}
!52 = distinct !{!52, !10}
!53 = distinct !{!53, !8}
!54 = !{!55}
!55 = distinct !{!55, !56}
!56 = distinct !{!56, !"LVerDomain"}
!57 = !{!58}
!58 = distinct !{!58, !56}
!59 = distinct !{!59, !8}
!60 = distinct !{!60, !10}
!61 = distinct !{!61, !8}
!62 = !{!63}
!63 = distinct !{!63, !64}
!64 = distinct !{!64, !"LVerDomain"}
!65 = !{!66}
!66 = distinct !{!66, !64}
!67 = distinct !{!67, !8}
!68 = distinct !{!68, !10}
!69 = distinct !{!69, !8}
!70 = distinct !{!70, !10}
!71 = !{!72}
!72 = distinct !{!72, !73}
!73 = distinct !{!73, !"LVerDomain"}
!74 = !{!75}
!75 = distinct !{!75, !73}
!76 = distinct !{!76, !8}
!77 = distinct !{!77, !10}
!78 = distinct !{!78, !10}
!79 = distinct !{!79, !8}
