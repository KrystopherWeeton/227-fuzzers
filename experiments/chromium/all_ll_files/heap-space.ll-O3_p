; ModuleID = '../../v8/src/heap/cppgc/heap-space.cc'
source_filename = "../../v8/src/heap/cppgc/heap-space.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.cppgc::internal::BaseSpace" = type <{ %"class.cppgc::internal::RawHeap"*, %"class.std::__1::vector", %"class.v8::base::Mutex", i64, i32, i8, [3 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.cppgc::internal::BasePage"**, %"class.cppgc::internal::BasePage"**, %"class.std::__1::__compressed_pair" }
%"class.cppgc::internal::BasePage" = type <{ %"class.cppgc::internal::HeapBase"*, %"class.cppgc::internal::BaseSpace"*, i8, [7 x i8] }>
%"class.cppgc::internal::HeapBase" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.cppgc::internal::BasePage"** }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.cppgc::internal::RawHeap" = type opaque
%"class.cppgc::internal::NormalPageSpace" = type { %"class.cppgc::internal::BaseSpace.base", %"class.cppgc::internal::NormalPageSpace::LinearAllocationBuffer", %"class.cppgc::internal::FreeList" }
%"class.cppgc::internal::BaseSpace.base" = type <{ %"class.cppgc::internal::RawHeap"*, %"class.std::__1::vector", %"class.v8::base::Mutex", i64, i32, i8 }>
%"class.cppgc::internal::NormalPageSpace::LinearAllocationBuffer" = type { i8*, i64 }
%"class.cppgc::internal::FreeList" = type { %"struct.std::__1::array", %"struct.std::__1::array", i64 }
%"struct.std::__1::array" = type { [17 x %"class.cppgc::internal::FreeList::Entry"*] }
%"class.cppgc::internal::FreeList::Entry" = type opaque
%"class.cppgc::internal::LargePageSpace" = type { %"class.cppgc::internal::BaseSpace.base", [3 x i8] }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN5cppgc8internal9BaseSpaceC1EPNS0_7RawHeapEmNS1_8PageTypeEb = hidden unnamed_addr alias void (%"class.cppgc::internal::BaseSpace"*, %"class.cppgc::internal::RawHeap"*, i64, i32, i1), void (%"class.cppgc::internal::BaseSpace"*, %"class.cppgc::internal::RawHeap"*, i64, i32, i1)* @_ZN5cppgc8internal9BaseSpaceC2EPNS0_7RawHeapEmNS1_8PageTypeEb
@_ZN5cppgc8internal15NormalPageSpaceC1EPNS0_7RawHeapEmb = hidden unnamed_addr alias void (%"class.cppgc::internal::NormalPageSpace"*, %"class.cppgc::internal::RawHeap"*, i64, i1), void (%"class.cppgc::internal::NormalPageSpace"*, %"class.cppgc::internal::RawHeap"*, i64, i1)* @_ZN5cppgc8internal15NormalPageSpaceC2EPNS0_7RawHeapEmb
@_ZN5cppgc8internal14LargePageSpaceC1EPNS0_7RawHeapEm = hidden unnamed_addr alias void (%"class.cppgc::internal::LargePageSpace"*, %"class.cppgc::internal::RawHeap"*, i64), void (%"class.cppgc::internal::LargePageSpace"*, %"class.cppgc::internal::RawHeap"*, i64)* @_ZN5cppgc8internal14LargePageSpaceC2EPNS0_7RawHeapEm

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5cppgc8internal9BaseSpaceC2EPNS0_7RawHeapEmNS1_8PageTypeEb(%"class.cppgc::internal::BaseSpace"*, %"class.cppgc::internal::RawHeap"*, i64, i32, i1 zeroext) unnamed_addr #0 align 2 {
  %6 = zext i1 %4 to i8
  %7 = getelementptr inbounds %"class.cppgc::internal::BaseSpace", %"class.cppgc::internal::BaseSpace"* %0, i64 0, i32 0
  store %"class.cppgc::internal::RawHeap"* %1, %"class.cppgc::internal::RawHeap"** %7, align 8
  %8 = getelementptr inbounds %"class.cppgc::internal::BaseSpace", %"class.cppgc::internal::BaseSpace"* %0, i64 0, i32 1
  %9 = bitcast %"class.std::__1::vector"* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false) #7
  %10 = getelementptr inbounds %"class.cppgc::internal::BaseSpace", %"class.cppgc::internal::BaseSpace"* %0, i64 0, i32 2
  tail call void @_ZN2v84base5MutexC1Ev(%"class.v8::base::Mutex"* %10) #7
  %11 = getelementptr inbounds %"class.cppgc::internal::BaseSpace", %"class.cppgc::internal::BaseSpace"* %0, i64 0, i32 3
  store i64 %2, i64* %11, align 8
  %12 = getelementptr inbounds %"class.cppgc::internal::BaseSpace", %"class.cppgc::internal::BaseSpace"* %0, i64 0, i32 4
  store i32 %3, i32* %12, align 8
  %13 = getelementptr inbounds %"class.cppgc::internal::BaseSpace", %"class.cppgc::internal::BaseSpace"* %0, i64 0, i32 5
  store i8 %6, i8* %13, align 4
  ret void
}

declare void @_ZN2v84base5MutexC1Ev(%"class.v8::base::Mutex"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5cppgc8internal9BaseSpace7AddPageEPNS0_8BasePageE(%"class.cppgc::internal::BaseSpace"*, %"class.cppgc::internal::BasePage"*) local_unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.cppgc::internal::BasePage"* %1 to i64
  %4 = getelementptr inbounds %"class.cppgc::internal::BaseSpace", %"class.cppgc::internal::BaseSpace"* %0, i64 0, i32 2
  tail call void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"* %4) #7
  %5 = getelementptr inbounds %"class.cppgc::internal::BaseSpace", %"class.cppgc::internal::BaseSpace"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.cppgc::internal::BaseSpace", %"class.cppgc::internal::BaseSpace"* %0, i64 0, i32 1, i32 0, i32 1
  %7 = load %"class.cppgc::internal::BasePage"**, %"class.cppgc::internal::BasePage"*** %6, align 8
  %8 = getelementptr inbounds %"class.cppgc::internal::BaseSpace", %"class.cppgc::internal::BaseSpace"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %9 = load %"class.cppgc::internal::BasePage"**, %"class.cppgc::internal::BasePage"*** %8, align 8
  %10 = icmp eq %"class.cppgc::internal::BasePage"** %7, %9
  %11 = ptrtoint %"class.cppgc::internal::BasePage"** %9 to i64
  br i1 %10, label %17, label %12

12:                                               ; preds = %2
  %13 = bitcast %"class.cppgc::internal::BasePage"** %7 to i64*
  store i64 %3, i64* %13, align 8
  %14 = getelementptr inbounds %"class.cppgc::internal::BasePage"*, %"class.cppgc::internal::BasePage"** %7, i64 1
  %15 = ptrtoint %"class.cppgc::internal::BasePage"** %14 to i64
  %16 = bitcast %"class.cppgc::internal::BasePage"*** %6 to i64*
  store i64 %15, i64* %16, align 8
  br label %74

17:                                               ; preds = %2
  %18 = ptrtoint %"class.cppgc::internal::BasePage"** %7 to i64
  %19 = bitcast %"class.cppgc::internal::BasePage"*** %6 to i64*
  %20 = bitcast %"class.std::__1::vector"* %5 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %18, %21
  %23 = ashr exact i64 %22, 3
  %24 = add nsw i64 %23, 1
  %25 = icmp ugt i64 %24, 2305843009213693951
  br i1 %25, label %26, label %28

26:                                               ; preds = %17
  %27 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %27) #8
  unreachable

28:                                               ; preds = %17
  %29 = bitcast %"class.cppgc::internal::BasePage"*** %8 to i64*
  %30 = sub i64 %11, %21
  %31 = ashr exact i64 %30, 3
  %32 = icmp ult i64 %31, 1152921504606846975
  br i1 %32, label %33, label %41

33:                                               ; preds = %28
  %34 = ashr exact i64 %30, 2
  %35 = icmp ult i64 %34, %24
  %36 = select i1 %35, i64 %24, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %46, label %38

38:                                               ; preds = %33
  %39 = icmp ugt i64 %36, 2305843009213693951
  br i1 %39, label %40, label %41

40:                                               ; preds = %38
  tail call void @abort() #8
  unreachable

41:                                               ; preds = %38, %28
  %42 = phi i64 [ %36, %38 ], [ 2305843009213693951, %28 ]
  %43 = shl i64 %42, 3
  %44 = tail call i8* @_Znwm(i64 %43) #9
  %45 = bitcast i8* %44 to %"class.cppgc::internal::BasePage"**
  br label %46

46:                                               ; preds = %41, %33
  %47 = phi i64 [ %42, %41 ], [ 0, %33 ]
  %48 = phi %"class.cppgc::internal::BasePage"** [ %45, %41 ], [ null, %33 ]
  %49 = getelementptr inbounds %"class.cppgc::internal::BasePage"*, %"class.cppgc::internal::BasePage"** %48, i64 %23
  %50 = getelementptr inbounds %"class.cppgc::internal::BasePage"*, %"class.cppgc::internal::BasePage"** %48, i64 %47
  %51 = ptrtoint %"class.cppgc::internal::BasePage"** %50 to i64
  %52 = bitcast %"class.cppgc::internal::BasePage"** %49 to i64*
  store i64 %3, i64* %52, align 8
  %53 = getelementptr inbounds %"class.cppgc::internal::BasePage"*, %"class.cppgc::internal::BasePage"** %49, i64 1
  %54 = ptrtoint %"class.cppgc::internal::BasePage"** %53 to i64
  %55 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %56 = load %"class.cppgc::internal::BasePage"**, %"class.cppgc::internal::BasePage"*** %55, align 8
  %57 = load i64, i64* %19, align 8
  %58 = ptrtoint %"class.cppgc::internal::BasePage"** %56 to i64
  %59 = sub i64 %57, %58
  %60 = ashr exact i64 %59, 3
  %61 = sub nsw i64 0, %60
  %62 = getelementptr inbounds %"class.cppgc::internal::BasePage"*, %"class.cppgc::internal::BasePage"** %49, i64 %61
  %63 = ptrtoint %"class.cppgc::internal::BasePage"** %62 to i64
  %64 = icmp sgt i64 %59, 0
  br i1 %64, label %65, label %69

65:                                               ; preds = %46
  %66 = bitcast %"class.cppgc::internal::BasePage"** %62 to i8*
  %67 = bitcast %"class.cppgc::internal::BasePage"** %56 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %67, i64 %59, i1 false) #7
  %68 = load %"class.cppgc::internal::BasePage"**, %"class.cppgc::internal::BasePage"*** %55, align 8
  br label %69

69:                                               ; preds = %65, %46
  %70 = phi %"class.cppgc::internal::BasePage"** [ %56, %46 ], [ %68, %65 ]
  store i64 %63, i64* %20, align 8
  store i64 %54, i64* %19, align 8
  store i64 %51, i64* %29, align 8
  %71 = icmp eq %"class.cppgc::internal::BasePage"** %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = bitcast %"class.cppgc::internal::BasePage"** %70 to i8*
  tail call void @_ZdlPv(i8* %73) #9
  br label %74

74:                                               ; preds = %12, %69, %72
  tail call void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"* %4) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5cppgc8internal9BaseSpace10RemovePageEPNS0_8BasePageE(%"class.cppgc::internal::BaseSpace"*, %"class.cppgc::internal::BasePage"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cppgc::internal::BaseSpace", %"class.cppgc::internal::BaseSpace"* %0, i64 0, i32 2
  tail call void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"* %3) #7
  %4 = getelementptr inbounds %"class.cppgc::internal::BaseSpace", %"class.cppgc::internal::BaseSpace"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = load %"class.cppgc::internal::BasePage"**, %"class.cppgc::internal::BasePage"*** %4, align 8
  %6 = getelementptr inbounds %"class.cppgc::internal::BaseSpace", %"class.cppgc::internal::BaseSpace"* %0, i64 0, i32 1, i32 0, i32 1
  %7 = load %"class.cppgc::internal::BasePage"**, %"class.cppgc::internal::BasePage"*** %6, align 8
  %8 = icmp eq %"class.cppgc::internal::BasePage"** %5, %7
  %9 = ptrtoint %"class.cppgc::internal::BasePage"** %7 to i64
  br i1 %8, label %17, label %10

10:                                               ; preds = %2, %14
  %11 = phi %"class.cppgc::internal::BasePage"** [ %15, %14 ], [ %5, %2 ]
  %12 = load %"class.cppgc::internal::BasePage"*, %"class.cppgc::internal::BasePage"** %11, align 8
  %13 = icmp eq %"class.cppgc::internal::BasePage"* %12, %1
  br i1 %13, label %17, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.cppgc::internal::BasePage"*, %"class.cppgc::internal::BasePage"** %11, i64 1
  %16 = icmp eq %"class.cppgc::internal::BasePage"** %15, %7
  br i1 %16, label %17, label %10

17:                                               ; preds = %10, %14, %2
  %18 = phi %"class.cppgc::internal::BasePage"** [ %5, %2 ], [ %11, %10 ], [ %7, %14 ]
  %19 = getelementptr inbounds %"class.cppgc::internal::BasePage"*, %"class.cppgc::internal::BasePage"** %18, i64 1
  %20 = ptrtoint %"class.cppgc::internal::BasePage"** %19 to i64
  %21 = sub i64 %9, %20
  %22 = ashr exact i64 %21, 3
  %23 = icmp eq i64 %21, 0
  br i1 %23, label %27, label %24

24:                                               ; preds = %17
  %25 = bitcast %"class.cppgc::internal::BasePage"** %18 to i8*
  %26 = bitcast %"class.cppgc::internal::BasePage"** %19 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 %21, i1 false) #7
  br label %27

27:                                               ; preds = %17, %24
  %28 = getelementptr inbounds %"class.cppgc::internal::BasePage"*, %"class.cppgc::internal::BasePage"** %18, i64 %22
  store %"class.cppgc::internal::BasePage"** %28, %"class.cppgc::internal::BasePage"*** %6, align 8
  tail call void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"* %3) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5cppgc8internal9BaseSpace14RemoveAllPagesEv(%"class.std::__1::vector"* noalias nocapture sret, %"class.cppgc::internal::BaseSpace"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cppgc::internal::BaseSpace", %"class.cppgc::internal::BaseSpace"* %1, i64 0, i32 1
  %4 = bitcast %"class.std::__1::vector"* %3 to <2 x i64>*
  %5 = load <2 x i64>, <2 x i64>* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to <2 x i64>*
  store <2 x i64> %5, <2 x i64>* %6, align 8
  %7 = getelementptr inbounds %"class.cppgc::internal::BaseSpace", %"class.cppgc::internal::BaseSpace"* %1, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %8 = bitcast %"class.cppgc::internal::BasePage"*** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %11 = bitcast %"class.cppgc::internal::BasePage"*** %10 to i64*
  store i64 %9, i64* %11, align 8
  %12 = bitcast %"class.std::__1::vector"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5cppgc8internal15NormalPageSpaceC2EPNS0_7RawHeapEmb(%"class.cppgc::internal::NormalPageSpace"*, %"class.cppgc::internal::RawHeap"*, i64, i1 zeroext) unnamed_addr #0 align 2 {
  %5 = zext i1 %3 to i8
  %6 = getelementptr inbounds %"class.cppgc::internal::NormalPageSpace", %"class.cppgc::internal::NormalPageSpace"* %0, i64 0, i32 0, i32 0
  store %"class.cppgc::internal::RawHeap"* %1, %"class.cppgc::internal::RawHeap"** %6, align 8
  %7 = getelementptr inbounds %"class.cppgc::internal::NormalPageSpace", %"class.cppgc::internal::NormalPageSpace"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::vector"* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #7
  %9 = getelementptr inbounds %"class.cppgc::internal::NormalPageSpace", %"class.cppgc::internal::NormalPageSpace"* %0, i64 0, i32 0, i32 2
  tail call void @_ZN2v84base5MutexC1Ev(%"class.v8::base::Mutex"* %9) #7
  %10 = getelementptr inbounds %"class.cppgc::internal::NormalPageSpace", %"class.cppgc::internal::NormalPageSpace"* %0, i64 0, i32 0, i32 3
  store i64 %2, i64* %10, align 8
  %11 = getelementptr inbounds %"class.cppgc::internal::NormalPageSpace", %"class.cppgc::internal::NormalPageSpace"* %0, i64 0, i32 0, i32 4
  store i32 0, i32* %11, align 8
  %12 = getelementptr inbounds %"class.cppgc::internal::NormalPageSpace", %"class.cppgc::internal::NormalPageSpace"* %0, i64 0, i32 0, i32 5
  store i8 %5, i8* %12, align 4
  %13 = getelementptr inbounds %"class.cppgc::internal::NormalPageSpace", %"class.cppgc::internal::NormalPageSpace"* %0, i64 0, i32 1
  %14 = bitcast %"class.cppgc::internal::NormalPageSpace::LinearAllocationBuffer"* %13 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 16, i1 false) #7
  %15 = getelementptr inbounds %"class.cppgc::internal::NormalPageSpace", %"class.cppgc::internal::NormalPageSpace"* %0, i64 0, i32 2
  tail call void @_ZN5cppgc8internal8FreeListC1Ev(%"class.cppgc::internal::FreeList"* %15) #7
  ret void
}

declare void @_ZN5cppgc8internal8FreeListC1Ev(%"class.cppgc::internal::FreeList"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5cppgc8internal14LargePageSpaceC2EPNS0_7RawHeapEm(%"class.cppgc::internal::LargePageSpace"*, %"class.cppgc::internal::RawHeap"*, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.cppgc::internal::LargePageSpace", %"class.cppgc::internal::LargePageSpace"* %0, i64 0, i32 0, i32 0
  store %"class.cppgc::internal::RawHeap"* %1, %"class.cppgc::internal::RawHeap"** %4, align 8
  %5 = getelementptr inbounds %"class.cppgc::internal::LargePageSpace", %"class.cppgc::internal::LargePageSpace"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"class.std::__1::vector"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #7
  %7 = getelementptr inbounds %"class.cppgc::internal::LargePageSpace", %"class.cppgc::internal::LargePageSpace"* %0, i64 0, i32 0, i32 2
  tail call void @_ZN2v84base5MutexC1Ev(%"class.v8::base::Mutex"* %7) #7
  %8 = getelementptr inbounds %"class.cppgc::internal::LargePageSpace", %"class.cppgc::internal::LargePageSpace"* %0, i64 0, i32 0, i32 3
  store i64 %2, i64* %8, align 8
  %9 = getelementptr inbounds %"class.cppgc::internal::LargePageSpace", %"class.cppgc::internal::LargePageSpace"* %0, i64 0, i32 0, i32 4
  store i32 1, i32* %9, align 8
  %10 = getelementptr inbounds %"class.cppgc::internal::LargePageSpace", %"class.cppgc::internal::LargePageSpace"* %0, i64 0, i32 0, i32 5
  store i8 0, i8* %10, align 4
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

declare void @_ZN2v84base5Mutex4LockEv(%"class.v8::base::Mutex"*) local_unnamed_addr #1

declare void @_ZN2v84base5Mutex6UnlockEv(%"class.v8::base::Mutex"*) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
