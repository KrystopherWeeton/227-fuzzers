; ModuleID = '../../third_party/breakpad/breakpad/src/common/linux/elfutils.cc'
source_filename = "../../third_party/breakpad/breakpad/src/common/linux/elfutils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%struct.Elf32_Shdr = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.Elf64_Shdr = type { i32, i32, i64, i64, i64, i64, i32, i32, i64, i64 }
%"class.google_breakpad::wasteful_vector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.google_breakpad::ElfSegment"*, %"struct.google_breakpad::ElfSegment"*, %"class.std::__1::__compressed_pair" }
%"struct.google_breakpad::ElfSegment" = type { i8*, i64 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.0" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.google_breakpad::ElfSegment"* }
%"struct.std::__1::__compressed_pair_elem.0" = type { %"struct.google_breakpad::PageStdAllocator" }
%"struct.google_breakpad::PageStdAllocator" = type { %"class.google_breakpad::PageAllocator"*, %"struct.google_breakpad::ElfSegment"*, i64 }
%"class.google_breakpad::PageAllocator" = type { i64, %"struct.google_breakpad::PageAllocator::PageHeader"*, i8*, i64, i64 }
%"struct.google_breakpad::PageAllocator::PageHeader" = type { %"struct.google_breakpad::PageAllocator::PageHeader"*, i64 }
%struct.Elf32_Phdr = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.std::__1::__vector_base_common" = type { i8 }
%struct.Elf64_Phdr = type { i32, i32, i64, i64, i64, i64, i64, i64 }
%struct.Elf32_Dyn = type { i32, %union.anon }
%union.anon = type { i32 }
%struct.Elf64_Dyn = type { i64, %union.anon.3 }
%union.anon.3 = type { i64 }

$_ZN15google_breakpad13PageAllocator5AllocEm = comdat any

@.str = private unnamed_addr constant [5 x i8] c"\7FELF\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c".dynamic\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c".dynstr\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN15google_breakpad10IsValidElfEPKv(i8*) local_unnamed_addr #0 {
  %2 = tail call i32 @my_strncmp(i8* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 4) #6
  %3 = icmp eq i32 %2, 0
  ret i1 %3
}

declare i32 @my_strncmp(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN15google_breakpad8ElfClassEPKv(i8* nocapture readonly) local_unnamed_addr #2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 4
  %3 = load i8, i8* %2, align 4
  %4 = zext i8 %3 to i32
  ret i32 %4
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN15google_breakpad14FindElfSectionEPKvPKcjPS1_Pm(i8*, i8*, i32, i8** nocapture, i64* nocapture) local_unnamed_addr #0 {
  store i8* null, i8** %3, align 8
  store i64 0, i64* %4, align 8
  %6 = tail call i32 @my_strncmp(i8* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 4) #6
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %154

8:                                                ; preds = %5
  %9 = getelementptr inbounds i8, i8* %0, i64 4
  %10 = load i8, i8* %9, align 4
  switch i8 %10, label %154 [
    i8 1, label %11
    i8 2, label %85
  ]

11:                                               ; preds = %8
  %12 = getelementptr inbounds i8, i8* %0, i64 32
  %13 = bitcast i8* %12 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %11
  store i8* null, i8** %3, align 8
  store i64 0, i64* %4, align 8
  br label %82

17:                                               ; preds = %11
  %18 = ptrtoint i8* %0 to i64
  %19 = zext i32 %14 to i64
  %20 = add i64 %19, %18
  %21 = inttoptr i64 %20 to %struct.Elf32_Shdr*
  %22 = getelementptr inbounds i8, i8* %0, i64 50
  %23 = bitcast i8* %22 to i16*
  %24 = load i16, i16* %23, align 2
  %25 = zext i16 %24 to i64
  %26 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %21, i64 %25, i32 4
  %27 = load i32, i32* %26, align 4
  %28 = zext i32 %27 to i64
  %29 = add i64 %28, %18
  %30 = inttoptr i64 %29 to i8*
  %31 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %21, i64 %25, i32 5
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds i8, i8* %0, i64 48
  %34 = bitcast i8* %33 to i16*
  %35 = load i16, i16* %34, align 4
  %36 = tail call i64 @my_strlen(i8* %1) #6
  %37 = trunc i64 %36 to i32
  %38 = icmp ne i32 %37, 0
  %39 = icmp ne i16 %35, 0
  %40 = and i1 %39, %38
  br i1 %40, label %41, label %82

41:                                               ; preds = %17
  %42 = zext i32 %32 to i64
  %43 = getelementptr inbounds i8, i8* %30, i64 %42
  %44 = ptrtoint i8* %43 to i64
  %45 = shl i64 %36, 32
  %46 = add i64 %45, 4294967296
  %47 = ashr exact i64 %46, 32
  %48 = zext i16 %35 to i64
  br label %49

49:                                               ; preds = %66, %41
  %50 = phi i64 [ 0, %41 ], [ %67, %66 ]
  %51 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %21, i64 %50
  %52 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %51, i64 0, i32 0
  %53 = load i32, i32* %52, align 4
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %30, i64 %54
  %56 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %21, i64 %50, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, %2
  br i1 %58, label %59, label %66

59:                                               ; preds = %49
  %60 = ptrtoint i8* %55 to i64
  %61 = sub i64 %44, %60
  %62 = icmp slt i64 %61, %47
  br i1 %62, label %66, label %63

63:                                               ; preds = %59
  %64 = tail call i32 @my_strcmp(i8* %1, i8* %55) #6
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %69, label %66

66:                                               ; preds = %63, %59, %49
  %67 = add nuw nsw i64 %50, 1
  %68 = icmp eq i64 %67, %48
  br i1 %68, label %82, label %49

69:                                               ; preds = %63
  %70 = icmp eq %struct.Elf32_Shdr* %51, null
  br i1 %70, label %82, label %71

71:                                               ; preds = %69
  %72 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %21, i64 %50, i32 5
  %73 = load i32, i32* %72, align 4
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %82, label %75

75:                                               ; preds = %71
  %76 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %21, i64 %50, i32 4
  %77 = load i32, i32* %76, align 4
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds i8, i8* %0, i64 %78
  store i8* %79, i8** %3, align 8
  %80 = load i32, i32* %72, align 4
  %81 = zext i32 %80 to i64
  store i64 %81, i64* %4, align 8
  br label %82

82:                                               ; preds = %66, %16, %17, %69, %71, %75
  %83 = load i8*, i8** %3, align 8
  %84 = icmp ne i8* %83, null
  br label %154

85:                                               ; preds = %8
  %86 = getelementptr inbounds i8, i8* %0, i64 40
  %87 = bitcast i8* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %91

90:                                               ; preds = %85
  store i8* null, i8** %3, align 8
  store i64 0, i64* %4, align 8
  br label %151

91:                                               ; preds = %85
  %92 = ptrtoint i8* %0 to i64
  %93 = add i64 %88, %92
  %94 = inttoptr i64 %93 to %struct.Elf64_Shdr*
  %95 = getelementptr inbounds i8, i8* %0, i64 62
  %96 = bitcast i8* %95 to i16*
  %97 = load i16, i16* %96, align 2
  %98 = zext i16 %97 to i64
  %99 = getelementptr inbounds %struct.Elf64_Shdr, %struct.Elf64_Shdr* %94, i64 %98, i32 4
  %100 = load i64, i64* %99, align 8
  %101 = add i64 %100, %92
  %102 = inttoptr i64 %101 to i8*
  %103 = getelementptr inbounds %struct.Elf64_Shdr, %struct.Elf64_Shdr* %94, i64 %98, i32 5
  %104 = load i64, i64* %103, align 8
  %105 = getelementptr inbounds i8, i8* %0, i64 60
  %106 = bitcast i8* %105 to i16*
  %107 = load i16, i16* %106, align 4
  %108 = tail call i64 @my_strlen(i8* %1) #6
  %109 = trunc i64 %108 to i32
  %110 = icmp ne i32 %109, 0
  %111 = icmp ne i16 %107, 0
  %112 = and i1 %111, %110
  br i1 %112, label %113, label %151

113:                                              ; preds = %91
  %114 = getelementptr inbounds i8, i8* %102, i64 %104
  %115 = ptrtoint i8* %114 to i64
  %116 = shl i64 %108, 32
  %117 = add i64 %116, 4294967296
  %118 = ashr exact i64 %117, 32
  %119 = zext i16 %107 to i64
  br label %120

120:                                              ; preds = %137, %113
  %121 = phi i64 [ 0, %113 ], [ %138, %137 ]
  %122 = getelementptr inbounds %struct.Elf64_Shdr, %struct.Elf64_Shdr* %94, i64 %121
  %123 = getelementptr inbounds %struct.Elf64_Shdr, %struct.Elf64_Shdr* %122, i64 0, i32 0
  %124 = load i32, i32* %123, align 8
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds i8, i8* %102, i64 %125
  %127 = getelementptr inbounds %struct.Elf64_Shdr, %struct.Elf64_Shdr* %94, i64 %121, i32 1
  %128 = load i32, i32* %127, align 4
  %129 = icmp eq i32 %128, %2
  br i1 %129, label %130, label %137

130:                                              ; preds = %120
  %131 = ptrtoint i8* %126 to i64
  %132 = sub i64 %115, %131
  %133 = icmp slt i64 %132, %118
  br i1 %133, label %137, label %134

134:                                              ; preds = %130
  %135 = tail call i32 @my_strcmp(i8* %1, i8* %126) #6
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %140, label %137

137:                                              ; preds = %134, %130, %120
  %138 = add nuw nsw i64 %121, 1
  %139 = icmp eq i64 %138, %119
  br i1 %139, label %151, label %120

140:                                              ; preds = %134
  %141 = icmp eq %struct.Elf64_Shdr* %122, null
  br i1 %141, label %151, label %142

142:                                              ; preds = %140
  %143 = getelementptr inbounds %struct.Elf64_Shdr, %struct.Elf64_Shdr* %94, i64 %121, i32 5
  %144 = load i64, i64* %143, align 8
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %151, label %146

146:                                              ; preds = %142
  %147 = getelementptr inbounds %struct.Elf64_Shdr, %struct.Elf64_Shdr* %94, i64 %121, i32 4
  %148 = load i64, i64* %147, align 8
  %149 = getelementptr inbounds i8, i8* %0, i64 %148
  store i8* %149, i8** %3, align 8
  %150 = load i64, i64* %143, align 8
  store i64 %150, i64* %4, align 8
  br label %151

151:                                              ; preds = %137, %90, %91, %140, %142, %146
  %152 = load i8*, i8** %3, align 8
  %153 = icmp ne i8* %152, null
  br label %154

154:                                              ; preds = %82, %151, %8, %5
  %155 = phi i1 [ false, %5 ], [ %84, %82 ], [ %153, %151 ], [ false, %8 ]
  ret i1 %155
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN15google_breakpad15FindElfSegmentsEPKvjPNS_15wasteful_vectorINS_10ElfSegmentEEE(i8*, i32, %"class.google_breakpad::wasteful_vector"*) local_unnamed_addr #0 {
  %4 = tail call i32 @my_strncmp(i8* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 4) #6
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %282

6:                                                ; preds = %3
  %7 = getelementptr inbounds i8, i8* %0, i64 4
  %8 = load i8, i8* %7, align 4
  switch i8 %8, label %282 [
    i8 1, label %9
    i8 2, label %147
  ]

9:                                                ; preds = %6
  %10 = getelementptr inbounds i8, i8* %0, i64 28
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = ptrtoint i8* %0 to i64
  %14 = zext i32 %12 to i64
  %15 = add i64 %14, %13
  %16 = inttoptr i64 %15 to %struct.Elf32_Phdr*
  %17 = getelementptr inbounds i8, i8* %0, i64 44
  %18 = bitcast i8* %17 to i16*
  %19 = load i16, i16* %18, align 4
  %20 = icmp eq i16 %19, 0
  br i1 %20, label %282, label %21

21:                                               ; preds = %9
  %22 = getelementptr inbounds %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector"* %2, i64 0, i32 0, i32 0, i32 1
  %23 = getelementptr inbounds %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector"* %2, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %24 = bitcast %"struct.google_breakpad::ElfSegment"** %22 to i64*
  %25 = bitcast %"class.google_breakpad::wasteful_vector"* %2 to i64*
  %26 = bitcast %"struct.google_breakpad::ElfSegment"** %23 to i64*
  %27 = getelementptr inbounds %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector"* %2, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 2
  %28 = getelementptr inbounds %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector"* %2, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 1
  %29 = getelementptr inbounds %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector"* %2, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %30 = getelementptr inbounds %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector"* %2, i64 0, i32 0, i32 0, i32 0
  br label %31

31:                                               ; preds = %142, %21
  %32 = phi i64 [ 0, %21 ], [ %143, %142 ]
  %33 = getelementptr inbounds %struct.Elf32_Phdr, %struct.Elf32_Phdr* %16, i64 %32, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, %1
  br i1 %35, label %36, label %142

36:                                               ; preds = %31
  %37 = getelementptr inbounds %struct.Elf32_Phdr, %struct.Elf32_Phdr* %16, i64 %32, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %0, i64 %39
  %41 = getelementptr inbounds %struct.Elf32_Phdr, %struct.Elf32_Phdr* %16, i64 %32, i32 4
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = load %"struct.google_breakpad::ElfSegment"*, %"struct.google_breakpad::ElfSegment"** %22, align 8
  %45 = load %"struct.google_breakpad::ElfSegment"*, %"struct.google_breakpad::ElfSegment"** %23, align 8
  %46 = icmp eq %"struct.google_breakpad::ElfSegment"* %44, %45
  %47 = ptrtoint %"struct.google_breakpad::ElfSegment"* %45 to i64
  br i1 %46, label %53, label %48

48:                                               ; preds = %36
  %49 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %44, i64 0, i32 0
  store i8* %40, i8** %49, align 8
  %50 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %44, i64 0, i32 1
  store i64 %43, i64* %50, align 8
  %51 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %44, i64 1
  %52 = ptrtoint %"struct.google_breakpad::ElfSegment"* %51 to i64
  store i64 %52, i64* %24, align 8
  br label %142

53:                                               ; preds = %36
  %54 = ptrtoint %"struct.google_breakpad::ElfSegment"* %44 to i64
  %55 = load i64, i64* %25, align 8
  %56 = sub i64 %54, %55
  %57 = ashr exact i64 %56, 4
  %58 = add nsw i64 %57, 1
  %59 = icmp ugt i64 %58, 1152921504606846975
  br i1 %59, label %60, label %62

60:                                               ; preds = %53
  %61 = bitcast %"class.google_breakpad::wasteful_vector"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %61) #7
  unreachable

62:                                               ; preds = %53
  %63 = sub i64 %47, %55
  %64 = ashr exact i64 %63, 4
  %65 = icmp ult i64 %64, 576460752303423487
  br i1 %65, label %66, label %71

66:                                               ; preds = %62
  %67 = ashr exact i64 %63, 3
  %68 = icmp ult i64 %67, %58
  %69 = select i1 %68, i64 %58, i64 %67
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %82, label %71

71:                                               ; preds = %66, %62
  %72 = phi i64 [ %69, %66 ], [ 1152921504606846975, %62 ]
  %73 = shl i64 %72, 4
  %74 = load i64, i64* %27, align 8
  %75 = icmp ugt i64 %73, %74
  br i1 %75, label %78, label %76

76:                                               ; preds = %71
  %77 = load %"struct.google_breakpad::ElfSegment"*, %"struct.google_breakpad::ElfSegment"** %28, align 8
  br label %82

78:                                               ; preds = %71
  %79 = load %"class.google_breakpad::PageAllocator"*, %"class.google_breakpad::PageAllocator"** %29, align 8
  %80 = tail call i8* @_ZN15google_breakpad13PageAllocator5AllocEm(%"class.google_breakpad::PageAllocator"* %79, i64 %73) #6
  %81 = bitcast i8* %80 to %"struct.google_breakpad::ElfSegment"*
  br label %82

82:                                               ; preds = %78, %76, %66
  %83 = phi i64 [ 0, %66 ], [ %72, %76 ], [ %72, %78 ]
  %84 = phi %"struct.google_breakpad::ElfSegment"* [ null, %66 ], [ %77, %76 ], [ %81, %78 ]
  %85 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %84, i64 %57
  %86 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %84, i64 %83
  %87 = ptrtoint %"struct.google_breakpad::ElfSegment"* %86 to i64
  %88 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %85, i64 0, i32 0
  store i8* %40, i8** %88, align 8
  %89 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %84, i64 %57, i32 1
  store i64 %43, i64* %89, align 8
  %90 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %85, i64 1
  %91 = ptrtoint %"struct.google_breakpad::ElfSegment"* %90 to i64
  %92 = load %"struct.google_breakpad::ElfSegment"*, %"struct.google_breakpad::ElfSegment"** %30, align 8
  %93 = load %"struct.google_breakpad::ElfSegment"*, %"struct.google_breakpad::ElfSegment"** %22, align 8
  %94 = icmp eq %"struct.google_breakpad::ElfSegment"* %93, %92
  br i1 %94, label %139, label %95

95:                                               ; preds = %82
  %96 = ptrtoint %"struct.google_breakpad::ElfSegment"* %92 to i64
  %97 = getelementptr %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %93, i64 -1
  %98 = ptrtoint %"struct.google_breakpad::ElfSegment"* %97 to i64
  %99 = sub i64 %98, %96
  %100 = lshr i64 %99, 4
  %101 = add nuw nsw i64 %100, 1
  %102 = and i64 %101, 3
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %114, label %104

104:                                              ; preds = %95, %104
  %105 = phi %"struct.google_breakpad::ElfSegment"* [ %108, %104 ], [ %85, %95 ]
  %106 = phi %"struct.google_breakpad::ElfSegment"* [ %109, %104 ], [ %93, %95 ]
  %107 = phi i64 [ %112, %104 ], [ %102, %95 ]
  %108 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %105, i64 -1
  %109 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %106, i64 -1
  %110 = bitcast %"struct.google_breakpad::ElfSegment"* %108 to i8*
  %111 = bitcast %"struct.google_breakpad::ElfSegment"* %109 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %110, i8* align 8 %111, i64 16, i1 false) #6
  %112 = add i64 %107, -1
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %104, !llvm.loop !2

114:                                              ; preds = %104, %95
  %115 = phi %"struct.google_breakpad::ElfSegment"* [ undef, %95 ], [ %108, %104 ]
  %116 = phi %"struct.google_breakpad::ElfSegment"* [ %85, %95 ], [ %108, %104 ]
  %117 = phi %"struct.google_breakpad::ElfSegment"* [ %93, %95 ], [ %109, %104 ]
  %118 = icmp ult i64 %99, 48
  br i1 %118, label %139, label %119

119:                                              ; preds = %114, %119
  %120 = phi %"struct.google_breakpad::ElfSegment"* [ %134, %119 ], [ %116, %114 ]
  %121 = phi %"struct.google_breakpad::ElfSegment"* [ %135, %119 ], [ %117, %114 ]
  %122 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %120, i64 -1
  %123 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %121, i64 -1
  %124 = bitcast %"struct.google_breakpad::ElfSegment"* %122 to i8*
  %125 = bitcast %"struct.google_breakpad::ElfSegment"* %123 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %124, i8* align 8 %125, i64 16, i1 false) #6
  %126 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %120, i64 -2
  %127 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %121, i64 -2
  %128 = bitcast %"struct.google_breakpad::ElfSegment"* %126 to i8*
  %129 = bitcast %"struct.google_breakpad::ElfSegment"* %127 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %128, i8* align 8 %129, i64 16, i1 false) #6
  %130 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %120, i64 -3
  %131 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %121, i64 -3
  %132 = bitcast %"struct.google_breakpad::ElfSegment"* %130 to i8*
  %133 = bitcast %"struct.google_breakpad::ElfSegment"* %131 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %132, i8* align 8 %133, i64 16, i1 false) #6
  %134 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %120, i64 -4
  %135 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %121, i64 -4
  %136 = bitcast %"struct.google_breakpad::ElfSegment"* %134 to i8*
  %137 = bitcast %"struct.google_breakpad::ElfSegment"* %135 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %136, i8* align 8 %137, i64 16, i1 false) #6
  %138 = icmp eq %"struct.google_breakpad::ElfSegment"* %135, %92
  br i1 %138, label %139, label %119

139:                                              ; preds = %114, %119, %82
  %140 = phi %"struct.google_breakpad::ElfSegment"* [ %85, %82 ], [ %115, %114 ], [ %134, %119 ]
  %141 = ptrtoint %"struct.google_breakpad::ElfSegment"* %140 to i64
  store i64 %141, i64* %25, align 8
  store i64 %91, i64* %24, align 8
  store i64 %87, i64* %26, align 8
  br label %142

142:                                              ; preds = %139, %48, %31
  %143 = add nuw nsw i64 %32, 1
  %144 = load i16, i16* %18, align 4
  %145 = zext i16 %144 to i64
  %146 = icmp ult i64 %143, %145
  br i1 %146, label %31, label %282

147:                                              ; preds = %6
  %148 = getelementptr inbounds i8, i8* %0, i64 32
  %149 = bitcast i8* %148 to i64*
  %150 = load i64, i64* %149, align 8
  %151 = ptrtoint i8* %0 to i64
  %152 = add i64 %150, %151
  %153 = inttoptr i64 %152 to %struct.Elf64_Phdr*
  %154 = getelementptr inbounds i8, i8* %0, i64 56
  %155 = bitcast i8* %154 to i16*
  %156 = load i16, i16* %155, align 8
  %157 = icmp eq i16 %156, 0
  br i1 %157, label %282, label %158

158:                                              ; preds = %147
  %159 = getelementptr inbounds %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector"* %2, i64 0, i32 0, i32 0, i32 1
  %160 = getelementptr inbounds %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector"* %2, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %161 = bitcast %"struct.google_breakpad::ElfSegment"** %159 to i64*
  %162 = bitcast %"class.google_breakpad::wasteful_vector"* %2 to i64*
  %163 = bitcast %"struct.google_breakpad::ElfSegment"** %160 to i64*
  %164 = getelementptr inbounds %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector"* %2, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 2
  %165 = getelementptr inbounds %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector"* %2, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 1
  %166 = getelementptr inbounds %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector"* %2, i64 0, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %167 = getelementptr inbounds %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector"* %2, i64 0, i32 0, i32 0, i32 0
  br label %168

168:                                              ; preds = %277, %158
  %169 = phi i64 [ 0, %158 ], [ %278, %277 ]
  %170 = getelementptr inbounds %struct.Elf64_Phdr, %struct.Elf64_Phdr* %153, i64 %169, i32 0
  %171 = load i32, i32* %170, align 8
  %172 = icmp eq i32 %171, %1
  br i1 %172, label %173, label %277

173:                                              ; preds = %168
  %174 = getelementptr inbounds %struct.Elf64_Phdr, %struct.Elf64_Phdr* %153, i64 %169, i32 2
  %175 = load i64, i64* %174, align 8
  %176 = getelementptr inbounds i8, i8* %0, i64 %175
  %177 = getelementptr inbounds %struct.Elf64_Phdr, %struct.Elf64_Phdr* %153, i64 %169, i32 5
  %178 = load i64, i64* %177, align 8
  %179 = load %"struct.google_breakpad::ElfSegment"*, %"struct.google_breakpad::ElfSegment"** %159, align 8
  %180 = load %"struct.google_breakpad::ElfSegment"*, %"struct.google_breakpad::ElfSegment"** %160, align 8
  %181 = icmp eq %"struct.google_breakpad::ElfSegment"* %179, %180
  %182 = ptrtoint %"struct.google_breakpad::ElfSegment"* %180 to i64
  br i1 %181, label %188, label %183

183:                                              ; preds = %173
  %184 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %179, i64 0, i32 0
  store i8* %176, i8** %184, align 8
  %185 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %179, i64 0, i32 1
  store i64 %178, i64* %185, align 8
  %186 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %179, i64 1
  %187 = ptrtoint %"struct.google_breakpad::ElfSegment"* %186 to i64
  store i64 %187, i64* %161, align 8
  br label %277

188:                                              ; preds = %173
  %189 = ptrtoint %"struct.google_breakpad::ElfSegment"* %179 to i64
  %190 = load i64, i64* %162, align 8
  %191 = sub i64 %189, %190
  %192 = ashr exact i64 %191, 4
  %193 = add nsw i64 %192, 1
  %194 = icmp ugt i64 %193, 1152921504606846975
  br i1 %194, label %195, label %197

195:                                              ; preds = %188
  %196 = bitcast %"class.google_breakpad::wasteful_vector"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %196) #7
  unreachable

197:                                              ; preds = %188
  %198 = sub i64 %182, %190
  %199 = ashr exact i64 %198, 4
  %200 = icmp ult i64 %199, 576460752303423487
  br i1 %200, label %201, label %206

201:                                              ; preds = %197
  %202 = ashr exact i64 %198, 3
  %203 = icmp ult i64 %202, %193
  %204 = select i1 %203, i64 %193, i64 %202
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %217, label %206

206:                                              ; preds = %201, %197
  %207 = phi i64 [ %204, %201 ], [ 1152921504606846975, %197 ]
  %208 = shl i64 %207, 4
  %209 = load i64, i64* %164, align 8
  %210 = icmp ugt i64 %208, %209
  br i1 %210, label %213, label %211

211:                                              ; preds = %206
  %212 = load %"struct.google_breakpad::ElfSegment"*, %"struct.google_breakpad::ElfSegment"** %165, align 8
  br label %217

213:                                              ; preds = %206
  %214 = load %"class.google_breakpad::PageAllocator"*, %"class.google_breakpad::PageAllocator"** %166, align 8
  %215 = tail call i8* @_ZN15google_breakpad13PageAllocator5AllocEm(%"class.google_breakpad::PageAllocator"* %214, i64 %208) #6
  %216 = bitcast i8* %215 to %"struct.google_breakpad::ElfSegment"*
  br label %217

217:                                              ; preds = %213, %211, %201
  %218 = phi i64 [ 0, %201 ], [ %207, %211 ], [ %207, %213 ]
  %219 = phi %"struct.google_breakpad::ElfSegment"* [ null, %201 ], [ %212, %211 ], [ %216, %213 ]
  %220 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %219, i64 %192
  %221 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %219, i64 %218
  %222 = ptrtoint %"struct.google_breakpad::ElfSegment"* %221 to i64
  %223 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %220, i64 0, i32 0
  store i8* %176, i8** %223, align 8
  %224 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %219, i64 %192, i32 1
  store i64 %178, i64* %224, align 8
  %225 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %220, i64 1
  %226 = ptrtoint %"struct.google_breakpad::ElfSegment"* %225 to i64
  %227 = load %"struct.google_breakpad::ElfSegment"*, %"struct.google_breakpad::ElfSegment"** %167, align 8
  %228 = load %"struct.google_breakpad::ElfSegment"*, %"struct.google_breakpad::ElfSegment"** %159, align 8
  %229 = icmp eq %"struct.google_breakpad::ElfSegment"* %228, %227
  br i1 %229, label %274, label %230

230:                                              ; preds = %217
  %231 = ptrtoint %"struct.google_breakpad::ElfSegment"* %227 to i64
  %232 = getelementptr %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %228, i64 -1
  %233 = ptrtoint %"struct.google_breakpad::ElfSegment"* %232 to i64
  %234 = sub i64 %233, %231
  %235 = lshr i64 %234, 4
  %236 = add nuw nsw i64 %235, 1
  %237 = and i64 %236, 3
  %238 = icmp eq i64 %237, 0
  br i1 %238, label %249, label %239

239:                                              ; preds = %230, %239
  %240 = phi %"struct.google_breakpad::ElfSegment"* [ %243, %239 ], [ %220, %230 ]
  %241 = phi %"struct.google_breakpad::ElfSegment"* [ %244, %239 ], [ %228, %230 ]
  %242 = phi i64 [ %247, %239 ], [ %237, %230 ]
  %243 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %240, i64 -1
  %244 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %241, i64 -1
  %245 = bitcast %"struct.google_breakpad::ElfSegment"* %243 to i8*
  %246 = bitcast %"struct.google_breakpad::ElfSegment"* %244 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %245, i8* align 8 %246, i64 16, i1 false) #6
  %247 = add i64 %242, -1
  %248 = icmp eq i64 %247, 0
  br i1 %248, label %249, label %239, !llvm.loop !4

249:                                              ; preds = %239, %230
  %250 = phi %"struct.google_breakpad::ElfSegment"* [ undef, %230 ], [ %243, %239 ]
  %251 = phi %"struct.google_breakpad::ElfSegment"* [ %220, %230 ], [ %243, %239 ]
  %252 = phi %"struct.google_breakpad::ElfSegment"* [ %228, %230 ], [ %244, %239 ]
  %253 = icmp ult i64 %234, 48
  br i1 %253, label %274, label %254

254:                                              ; preds = %249, %254
  %255 = phi %"struct.google_breakpad::ElfSegment"* [ %269, %254 ], [ %251, %249 ]
  %256 = phi %"struct.google_breakpad::ElfSegment"* [ %270, %254 ], [ %252, %249 ]
  %257 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %255, i64 -1
  %258 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %256, i64 -1
  %259 = bitcast %"struct.google_breakpad::ElfSegment"* %257 to i8*
  %260 = bitcast %"struct.google_breakpad::ElfSegment"* %258 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %259, i8* align 8 %260, i64 16, i1 false) #6
  %261 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %255, i64 -2
  %262 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %256, i64 -2
  %263 = bitcast %"struct.google_breakpad::ElfSegment"* %261 to i8*
  %264 = bitcast %"struct.google_breakpad::ElfSegment"* %262 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %263, i8* align 8 %264, i64 16, i1 false) #6
  %265 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %255, i64 -3
  %266 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %256, i64 -3
  %267 = bitcast %"struct.google_breakpad::ElfSegment"* %265 to i8*
  %268 = bitcast %"struct.google_breakpad::ElfSegment"* %266 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %267, i8* align 8 %268, i64 16, i1 false) #6
  %269 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %255, i64 -4
  %270 = getelementptr inbounds %"struct.google_breakpad::ElfSegment", %"struct.google_breakpad::ElfSegment"* %256, i64 -4
  %271 = bitcast %"struct.google_breakpad::ElfSegment"* %269 to i8*
  %272 = bitcast %"struct.google_breakpad::ElfSegment"* %270 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %271, i8* align 8 %272, i64 16, i1 false) #6
  %273 = icmp eq %"struct.google_breakpad::ElfSegment"* %270, %227
  br i1 %273, label %274, label %254

274:                                              ; preds = %249, %254, %217
  %275 = phi %"struct.google_breakpad::ElfSegment"* [ %220, %217 ], [ %250, %249 ], [ %269, %254 ]
  %276 = ptrtoint %"struct.google_breakpad::ElfSegment"* %275 to i64
  store i64 %276, i64* %162, align 8
  store i64 %226, i64* %161, align 8
  store i64 %222, i64* %163, align 8
  br label %277

277:                                              ; preds = %274, %183, %168
  %278 = add nuw nsw i64 %169, 1
  %279 = load i16, i16* %155, align 8
  %280 = zext i16 %279 to i64
  %281 = icmp ult i64 %278, %280
  br i1 %281, label %168, label %282

282:                                              ; preds = %277, %142, %147, %9, %6, %3
  %283 = phi i1 [ false, %3 ], [ false, %6 ], [ true, %9 ], [ true, %147 ], [ true, %142 ], [ true, %277 ]
  ret i1 %283
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN15google_breakpad27ElfFileSoNameFromMappedFileEPKvPcm(i8*, i8*, i64) local_unnamed_addr #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = tail call i32 @my_strncmp(i8* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 4) #6
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %77

10:                                               ; preds = %3
  %11 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #6
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  %12 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #6
  store i64 -6148914691236517206, i64* %5, align 8
  %13 = call zeroext i1 @_ZN15google_breakpad14FindElfSectionEPKvPKcjPS1_Pm(i8* %0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 6, i8** nonnull %4, i64* nonnull %5)
  br i1 %13, label %14, label %75

14:                                               ; preds = %10
  %15 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #6
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %16 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #6
  store i64 -6148914691236517206, i64* %7, align 8
  %17 = call zeroext i1 @_ZN15google_breakpad14FindElfSectionEPKvPKcjPS1_Pm(i8* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), i32 3, i8** nonnull %6, i64* nonnull %7)
  br i1 %17, label %18, label %73

18:                                               ; preds = %14
  %19 = getelementptr inbounds i8, i8* %0, i64 4
  %20 = load i8, i8* %19, align 4
  %21 = icmp eq i8 %20, 1
  %22 = load i8*, i8** %4, align 8
  %23 = load i64, i64* %5, align 8
  %24 = load i8*, i8** %6, align 8
  %25 = load i64, i64* %7, align 8
  br i1 %21, label %26, label %50

26:                                               ; preds = %18
  %27 = bitcast i8* %22 to %struct.Elf32_Dyn*
  %28 = lshr i64 %23, 3
  %29 = getelementptr inbounds %struct.Elf32_Dyn, %struct.Elf32_Dyn* %27, i64 %28
  %30 = icmp ugt %struct.Elf32_Dyn* %29, %27
  br i1 %30, label %31, label %73

31:                                               ; preds = %26, %47
  %32 = phi %struct.Elf32_Dyn* [ %48, %47 ], [ %27, %26 ]
  %33 = getelementptr inbounds %struct.Elf32_Dyn, %struct.Elf32_Dyn* %32, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 14
  br i1 %35, label %36, label %47

36:                                               ; preds = %31
  %37 = getelementptr inbounds %struct.Elf32_Dyn, %struct.Elf32_Dyn* %32, i64 0, i32 1, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i64
  %40 = icmp ugt i64 %25, %39
  br i1 %40, label %41, label %73

41:                                               ; preds = %36
  %42 = getelementptr inbounds i8, i8* %24, i64 %39
  %43 = sub i64 %25, %39
  %44 = icmp ult i64 %43, %2
  %45 = select i1 %44, i64 %43, i64 %2
  %46 = tail call i64 @my_strlcpy(i8* %1, i8* %42, i64 %45) #6
  br label %73

47:                                               ; preds = %31
  %48 = getelementptr inbounds %struct.Elf32_Dyn, %struct.Elf32_Dyn* %32, i64 1
  %49 = icmp ult %struct.Elf32_Dyn* %48, %29
  br i1 %49, label %31, label %73

50:                                               ; preds = %18
  %51 = bitcast i8* %22 to %struct.Elf64_Dyn*
  %52 = lshr i64 %23, 4
  %53 = getelementptr inbounds %struct.Elf64_Dyn, %struct.Elf64_Dyn* %51, i64 %52
  %54 = icmp ugt %struct.Elf64_Dyn* %53, %51
  br i1 %54, label %55, label %73

55:                                               ; preds = %50, %70
  %56 = phi %struct.Elf64_Dyn* [ %71, %70 ], [ %51, %50 ]
  %57 = getelementptr inbounds %struct.Elf64_Dyn, %struct.Elf64_Dyn* %56, i64 0, i32 0
  %58 = load i64, i64* %57, align 8
  %59 = icmp eq i64 %58, 14
  br i1 %59, label %60, label %70

60:                                               ; preds = %55
  %61 = getelementptr inbounds %struct.Elf64_Dyn, %struct.Elf64_Dyn* %56, i64 0, i32 1, i32 0
  %62 = load i64, i64* %61, align 8
  %63 = icmp ugt i64 %25, %62
  br i1 %63, label %64, label %73

64:                                               ; preds = %60
  %65 = getelementptr inbounds i8, i8* %24, i64 %62
  %66 = sub i64 %25, %62
  %67 = icmp ult i64 %66, %2
  %68 = select i1 %67, i64 %66, i64 %2
  %69 = tail call i64 @my_strlcpy(i8* %1, i8* %65, i64 %68) #6
  br label %73

70:                                               ; preds = %55
  %71 = getelementptr inbounds %struct.Elf64_Dyn, %struct.Elf64_Dyn* %56, i64 1
  %72 = icmp ult %struct.Elf64_Dyn* %71, %53
  br i1 %72, label %55, label %73

73:                                               ; preds = %70, %47, %64, %60, %50, %41, %36, %26, %14
  %74 = phi i1 [ false, %14 ], [ false, %36 ], [ true, %41 ], [ false, %26 ], [ false, %60 ], [ true, %64 ], [ false, %50 ], [ false, %47 ], [ false, %70 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #6
  br label %75

75:                                               ; preds = %10, %73
  %76 = phi i1 [ %74, %73 ], [ false, %10 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #6
  br label %77

77:                                               ; preds = %3, %75
  %78 = phi i1 [ %76, %75 ], [ false, %3 ]
  ret i1 %78
}

declare i64 @my_strlen(i8*) local_unnamed_addr #1

declare i32 @my_strcmp(i8*, i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN15google_breakpad13PageAllocator5AllocEm(%"class.google_breakpad::PageAllocator"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %62, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.google_breakpad::PageAllocator", %"class.google_breakpad::PageAllocator"* %0, i64 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  %8 = getelementptr inbounds %"class.google_breakpad::PageAllocator", %"class.google_breakpad::PageAllocator"* %0, i64 0, i32 0
  %9 = load i64, i64* %8, align 8
  br i1 %7, label %21, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.google_breakpad::PageAllocator", %"class.google_breakpad::PageAllocator"* %0, i64 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %9, %12
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %21, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds i8, i8* %6, i64 %12
  %17 = add i64 %12, %1
  store i64 %17, i64* %11, align 8
  %18 = icmp eq i64 %17, %9
  br i1 %18, label %19, label %62

19:                                               ; preds = %15
  %20 = bitcast i8** %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 16, i1 false)
  br label %62

21:                                               ; preds = %4, %10
  %22 = add i64 %1, 16
  %23 = getelementptr inbounds %"class.google_breakpad::PageAllocator", %"class.google_breakpad::PageAllocator"* %0, i64 0, i32 0
  %24 = add i64 %1, 15
  %25 = add i64 %24, %9
  %26 = udiv i64 %25, %9
  %27 = mul i64 %26, %9
  %28 = tail call i64 asm sideeffect "movq $5,%r10;movq $6,%r8;movq $7,%r9;syscall\0A", "={ax},0,{di},{si},{dx},r,r,r,~{r10},~{r8},~{r9},~{r11},~{rcx},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 9, i64 0, i64 %27, i64 3, i64 34, i64 -1, i64 0) #6, !srcloc !5
  %29 = icmp ugt i64 %28, -4096
  br i1 %29, label %30, label %34

30:                                               ; preds = %21
  %31 = trunc i64 %28 to i32
  %32 = sub nsw i32 0, %31
  %33 = tail call i32* @__errno_location() #8
  store i32 %32, i32* %33, align 4
  br label %62

34:                                               ; preds = %21
  %35 = inttoptr i64 %28 to i8*
  %36 = icmp eq i8* %35, inttoptr (i64 -1 to i8*)
  br i1 %36, label %62, label %37

37:                                               ; preds = %34
  %38 = getelementptr inbounds %"class.google_breakpad::PageAllocator", %"class.google_breakpad::PageAllocator"* %0, i64 0, i32 1
  %39 = bitcast %"struct.google_breakpad::PageAllocator::PageHeader"** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = inttoptr i64 %28 to i64*
  store i64 %40, i64* %41, align 8
  %42 = getelementptr inbounds i8, i8* %35, i64 8
  %43 = bitcast i8* %42 to i64*
  store i64 %26, i64* %43, align 8
  %44 = bitcast %"struct.google_breakpad::PageAllocator::PageHeader"** %38 to i8**
  store i8* %35, i8** %44, align 8
  %45 = getelementptr inbounds %"class.google_breakpad::PageAllocator", %"class.google_breakpad::PageAllocator"* %0, i64 0, i32 4
  %46 = load i64, i64* %45, align 8
  %47 = add i64 %46, %26
  store i64 %47, i64* %45, align 8
  %48 = icmp eq i64 %28, 0
  br i1 %48, label %62, label %49

49:                                               ; preds = %37
  %50 = load i64, i64* %23, align 8
  %51 = mul i64 %50, %26
  %52 = add i64 %50, %22
  %53 = sub i64 %52, %51
  %54 = urem i64 %53, %50
  %55 = getelementptr inbounds %"class.google_breakpad::PageAllocator", %"class.google_breakpad::PageAllocator"* %0, i64 0, i32 3
  store i64 %54, i64* %55, align 8
  %56 = icmp eq i64 %54, 0
  %57 = add i64 %26, -1
  %58 = mul i64 %50, %57
  %59 = getelementptr inbounds i8, i8* %35, i64 %58
  %60 = select i1 %56, i8* null, i8* %59
  store i8* %60, i8** %5, align 8
  %61 = getelementptr inbounds i8, i8* %35, i64 16
  br label %62

62:                                               ; preds = %30, %34, %49, %37, %15, %19, %2
  %63 = phi i8* [ null, %2 ], [ %16, %19 ], [ %16, %15 ], [ %61, %49 ], [ null, %37 ], [ null, %34 ], [ null, %30 ]
  ret i8* %63
}

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #5

declare i64 @my_strlcpy(i8*, i8*, i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }
attributes #8 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = !{i32 -2143989284}
