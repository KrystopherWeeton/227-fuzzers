; ModuleID = '../../third_party/libzip/src/lib/zip_unchange.c'
source_filename = "../../third_party/libzip/src/lib/zip_unchange.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden i32 @zip_unchange(%struct.zip*, i64) local_unnamed_addr #0 {
  %3 = tail call i32 @_zip_unchange(%struct.zip* %0, i64 %1, i32 0)
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_zip_unchange(%struct.zip*, i64, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 9
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, %1
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %8, i32 18, i32 0) #2
  br label %63

9:                                                ; preds = %3
  %10 = icmp eq i32 %2, 0
  br i1 %10, label %11, label %54

11:                                               ; preds = %9
  %12 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 11
  %13 = load %struct.zip_entry*, %struct.zip_entry** %12, align 8
  %14 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %13, i64 %1, i32 1
  %15 = load %struct.zip_dirent*, %struct.zip_dirent** %14, align 8
  %16 = icmp eq %struct.zip_dirent* %15, null
  br i1 %16, label %54, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %15, i64 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = and i32 %19, 2
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %54, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %13, i64 %1, i32 0
  %24 = load %struct.zip_dirent*, %struct.zip_dirent** %23, align 8
  %25 = icmp eq %struct.zip_dirent* %24, null
  br i1 %25, label %36, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  %28 = tail call i8* @_zip_get_name(%struct.zip* %0, i64 %1, i32 8, %struct.zip_error* %27) #2
  %29 = icmp eq i8* %28, null
  br i1 %29, label %63, label %30

30:                                               ; preds = %26
  %31 = tail call i64 @_zip_name_locate(%struct.zip* %0, i8* nonnull %28, i32 0, %struct.zip_error* null) #2
  %32 = icmp slt i64 %31, 0
  %33 = icmp eq i64 %31, %1
  %34 = or i1 %32, %33
  br i1 %34, label %36, label %35

35:                                               ; preds = %30
  tail call void @zip_error_set(%struct.zip_error* %27, i32 10, i32 0) #2
  br label %63

36:                                               ; preds = %22, %30
  %37 = phi i8* [ %28, %30 ], [ null, %22 ]
  %38 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  %39 = tail call i8* @_zip_get_name(%struct.zip* %0, i64 %1, i32 0, %struct.zip_error* %38) #2
  %40 = icmp eq i8* %39, null
  br i1 %40, label %63, label %41

41:                                               ; preds = %36
  %42 = icmp eq i8* %37, null
  br i1 %42, label %47, label %43

43:                                               ; preds = %41
  %44 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 15
  %45 = load %struct.zip_hash*, %struct.zip_hash** %44, align 8
  %46 = tail call zeroext i1 @_zip_hash_add(%struct.zip_hash* %45, i8* nonnull %37, i64 %1, i32 0, %struct.zip_error* %38) #2
  br i1 %46, label %47, label %63

47:                                               ; preds = %43, %41
  %48 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 15
  %49 = load %struct.zip_hash*, %struct.zip_hash** %48, align 8
  %50 = tail call zeroext i1 @_zip_hash_delete(%struct.zip_hash* %49, i8* nonnull %39, %struct.zip_error* %38) #2
  br i1 %50, label %54, label %51

51:                                               ; preds = %47
  %52 = load %struct.zip_hash*, %struct.zip_hash** %48, align 8
  %53 = tail call zeroext i1 @_zip_hash_delete(%struct.zip_hash* %52, i8* %37, %struct.zip_error* null) #2
  br label %63

54:                                               ; preds = %47, %17, %11, %9
  %55 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 11
  %56 = load %struct.zip_entry*, %struct.zip_entry** %55, align 8
  %57 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %56, i64 %1, i32 1
  %58 = load %struct.zip_dirent*, %struct.zip_dirent** %57, align 8
  tail call void @_zip_dirent_free(%struct.zip_dirent* %58) #2
  %59 = load %struct.zip_entry*, %struct.zip_entry** %55, align 8
  %60 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %59, i64 %1, i32 1
  store %struct.zip_dirent* null, %struct.zip_dirent** %60, align 8
  %61 = load %struct.zip_entry*, %struct.zip_entry** %55, align 8
  %62 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %61, i64 %1
  tail call void @_zip_unchange_data(%struct.zip_entry* %62) #2
  br label %63

63:                                               ; preds = %43, %36, %26, %54, %51, %35, %7
  %64 = phi i32 [ -1, %7 ], [ 0, %54 ], [ -1, %35 ], [ -1, %51 ], [ -1, %26 ], [ -1, %36 ], [ -1, %43 ]
  ret i32 %64
}

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #1

declare i8* @_zip_get_name(%struct.zip*, i64, i32, %struct.zip_error*) local_unnamed_addr #1

declare i64 @_zip_name_locate(%struct.zip*, i8*, i32, %struct.zip_error*) local_unnamed_addr #1

declare zeroext i1 @_zip_hash_add(%struct.zip_hash*, i8*, i64, i32, %struct.zip_error*) local_unnamed_addr #1

declare zeroext i1 @_zip_hash_delete(%struct.zip_hash*, i8*, %struct.zip_error*) local_unnamed_addr #1

declare void @_zip_dirent_free(%struct.zip_dirent*) local_unnamed_addr #1

declare void @_zip_unchange_data(%struct.zip_entry*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
