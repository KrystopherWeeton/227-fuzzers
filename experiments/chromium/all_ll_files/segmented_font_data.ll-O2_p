; ModuleID = '../../third_party/blink/renderer/platform/fonts/segmented_font_data.cc'
source_filename = "../../third_party/blink/renderer/platform/fonts/segmented_font_data.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::SimpleFontData" = type { %"class.blink::FontData.base", %"class.blink::FontMetrics", float, float, [4 x i8], %"class.blink::FontPlatformData", %class.SkFont, i16, float, i16, %"class.std::__1::unique_ptr", %class.scoped_refptr.12, i32, i32, %"struct.blink::FontHeight" }
%"class.blink::FontData.base" = type <{ i32 (...)**, %"class.WTF::RefCounted" }>
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::FontMetrics" = type <{ i32, float, float, float, float, float, float, %"class.absl::optional", %"class.absl::optional", i32, i32, i8, i8, [2 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { float }
%"class.blink::FontPlatformData" = type <{ %class.sk_sp, %"class.std::__1::basic_string", float, i8, i8, i8, i8, i32, %"struct.blink::WebFontRenderStyle", [5 x i8], %class.scoped_refptr, i8, [7 x i8] }>
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.6 }
%union.anon.6 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.blink::WebFontRenderStyle" = type { i8, i8, i8, i8, i8, i8, i8 }
%class.scoped_refptr = type { %"class.blink::HarfBuzzFace"* }
%"class.blink::HarfBuzzFace" = type opaque
%class.SkFont = type <{ %class.sk_sp, float, float, float, i8, i8, i8, i8 }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.blink::SimpleFontData::DerivedFontData"* }
%"struct.blink::SimpleFontData::DerivedFontData" = type { %class.scoped_refptr.10, %class.scoped_refptr.10 }
%class.scoped_refptr.10 = type { %"class.blink::SimpleFontData"* }
%class.scoped_refptr.12 = type { %"class.blink::CustomFontData"* }
%"class.blink::CustomFontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.13", [4 x i8] }>
%"class.WTF::RefCounted.13" = type { %"class.base::RefCounted.14" }
%"class.base::RefCounted.14" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::FontHeight" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%"class.blink::SegmentedFontData" = type { %"class.blink::FontData.base", %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [8 x i8] }
%"class.WTF::VectorBufferBase" = type { %class.scoped_refptr.15*, i32, i32 }
%class.scoped_refptr.15 = type { %"class.blink::FontDataForRangeSet"* }
%"class.blink::FontDataForRangeSet" = type { i32 (...)**, %"class.WTF::RefCounted.16", %class.scoped_refptr.10, %class.scoped_refptr.18 }
%"class.WTF::RefCounted.16" = type { %"class.base::RefCounted.17" }
%"class.base::RefCounted.17" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.18 = type { %"class.blink::UnicodeRangeSet"* }
%"class.blink::UnicodeRangeSet" = type { %"class.WTF::RefCounted.19", %"class.WTF::Vector.21" }
%"class.WTF::RefCounted.19" = type { %"class.base::RefCounted.20" }
%"class.base::RefCounted.20" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.21" = type { %"class.WTF::VectorBuffer.22" }
%"class.WTF::VectorBuffer.22" = type { %"class.WTF::VectorBufferBase.23" }
%"class.WTF::VectorBufferBase.23" = type { %"struct.blink::UnicodeRange"*, i32, i32 }
%"struct.blink::UnicodeRange" = type { i32, i32 }
%"class.blink::FontData" = type <{ i32 (...)**, %"class.WTF::RefCounted", [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN5blink17SegmentedFontDataD2Ev = comdat any

$_ZN5blink17SegmentedFontDataD0Ev = comdat any

$_ZN3WTF12VectorBufferI13scoped_refptrIN5blink19FontDataForRangeSetEELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS4_ = comdat any

$_ZNK3WTF6VectorI13scoped_refptrIN5blink19FontDataForRangeSetEELj1ENS_18PartitionAllocatorEE2atEj = comdat any

@_ZTVN5blink17SegmentedFontDataE = hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::SegmentedFontData"*)* @_ZN5blink17SegmentedFontDataD2Ev to i8*), i8* bitcast (void (%"class.blink::SegmentedFontData"*)* @_ZN5blink17SegmentedFontDataD0Ev to i8*), i8* bitcast (%"class.blink::SimpleFontData"* (%"class.blink::SegmentedFontData"*, i32)* @_ZNK5blink17SegmentedFontData20FontDataForCharacterEi to i8*), i8* bitcast (i1 (%"class.blink::SegmentedFontData"*)* @_ZNK5blink17SegmentedFontData12IsCustomFontEv to i8*), i8* bitcast (i1 (%"class.blink::SegmentedFontData"*)* @_ZNK5blink17SegmentedFontData9IsLoadingEv to i8*), i8* bitcast (i1 (%"class.blink::SegmentedFontData"*)* @_ZNK5blink17SegmentedFontData17IsLoadingFallbackEv to i8*), i8* bitcast (i1 (%"class.blink::SegmentedFontData"*)* @_ZNK5blink17SegmentedFontData11IsSegmentedEv to i8*), i8* bitcast (i1 (%"class.blink::SegmentedFontData"*)* @_ZNK5blink17SegmentedFontData17ShouldSkipDrawingEv to i8*)] }, align 8
@.str = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::SimpleFontData"* @_ZNK5blink17SegmentedFontData20FontDataForCharacterEi(%"class.blink::SegmentedFontData"*, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SegmentedFontData", %"class.blink::SegmentedFontData"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 0
  %5 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %4, align 8
  %6 = getelementptr inbounds %"class.blink::SegmentedFontData", %"class.blink::SegmentedFontData"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %5, i64 %8
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %23, label %13

11:                                               ; preds = %20
  %12 = icmp eq %class.scoped_refptr.15* %22, %9
  br i1 %12, label %23, label %13

13:                                               ; preds = %2, %11
  %14 = phi %class.scoped_refptr.15* [ %22, %11 ], [ %5, %2 ]
  %15 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %14, i64 0, i32 0
  %16 = load %"class.blink::FontDataForRangeSet"*, %"class.blink::FontDataForRangeSet"** %15, align 8
  %17 = getelementptr inbounds %"class.blink::FontDataForRangeSet", %"class.blink::FontDataForRangeSet"* %16, i64 0, i32 3, i32 0
  %18 = load %"class.blink::UnicodeRangeSet"*, %"class.blink::UnicodeRangeSet"** %17, align 8
  %19 = icmp eq %"class.blink::UnicodeRangeSet"* %18, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %13
  %21 = tail call zeroext i1 @_ZNK5blink15UnicodeRangeSet8ContainsEi(%"class.blink::UnicodeRangeSet"* nonnull %18, i32 %1) #7
  %22 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %14, i64 1
  br i1 %21, label %25, label %11

23:                                               ; preds = %11, %2
  %24 = tail call dereferenceable(8) %class.scoped_refptr.15* @_ZNK3WTF6VectorI13scoped_refptrIN5blink19FontDataForRangeSetEELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %3, i32 0) #7
  br label %25

25:                                               ; preds = %20, %13, %23
  %26 = phi %class.scoped_refptr.15* [ %24, %23 ], [ %14, %13 ], [ %14, %20 ]
  %27 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %26, i64 0, i32 0
  %28 = load %"class.blink::FontDataForRangeSet"*, %"class.blink::FontDataForRangeSet"** %27, align 8
  %29 = getelementptr inbounds %"class.blink::FontDataForRangeSet", %"class.blink::FontDataForRangeSet"* %28, i64 0, i32 2, i32 0
  %30 = load %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %29, align 8
  ret %"class.blink::SimpleFontData"* %30
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink17SegmentedFontData17ContainsCharacterEi(%"class.blink::SegmentedFontData"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SegmentedFontData", %"class.blink::SegmentedFontData"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %3, align 8
  %5 = getelementptr inbounds %"class.blink::SegmentedFontData", %"class.blink::SegmentedFontData"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %4, i64 %7
  %9 = icmp eq i32 %6, 0
  br i1 %9, label %22, label %12

10:                                               ; preds = %19
  %11 = icmp eq %class.scoped_refptr.15* %21, %8
  br i1 %11, label %22, label %12

12:                                               ; preds = %2, %10
  %13 = phi %class.scoped_refptr.15* [ %21, %10 ], [ %4, %2 ]
  %14 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %13, i64 0, i32 0
  %15 = load %"class.blink::FontDataForRangeSet"*, %"class.blink::FontDataForRangeSet"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::FontDataForRangeSet", %"class.blink::FontDataForRangeSet"* %15, i64 0, i32 3, i32 0
  %17 = load %"class.blink::UnicodeRangeSet"*, %"class.blink::UnicodeRangeSet"** %16, align 8
  %18 = icmp eq %"class.blink::UnicodeRangeSet"* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %12
  %20 = tail call zeroext i1 @_ZNK5blink15UnicodeRangeSet8ContainsEi(%"class.blink::UnicodeRangeSet"* nonnull %17, i32 %1) #7
  %21 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %13, i64 1
  br i1 %20, label %22, label %10

22:                                               ; preds = %10, %19, %12, %2
  %23 = phi i1 [ false, %2 ], [ true, %12 ], [ true, %19 ], [ false, %10 ]
  ret i1 %23
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK5blink17SegmentedFontData12IsCustomFontEv(%"class.blink::SegmentedFontData"* nocapture readnone) unnamed_addr #2 align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink17SegmentedFontData9IsLoadingEv(%"class.blink::SegmentedFontData"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SegmentedFontData", %"class.blink::SegmentedFontData"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %2, align 8
  %4 = getelementptr inbounds %"class.blink::SegmentedFontData", %"class.blink::SegmentedFontData"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %3, i64 %6
  %8 = icmp eq i32 %5, 0
  br i1 %8, label %23, label %11

9:                                                ; preds = %11
  %10 = icmp eq %class.scoped_refptr.15* %22, %7
  br i1 %10, label %23, label %11

11:                                               ; preds = %1, %9
  %12 = phi %class.scoped_refptr.15* [ %22, %9 ], [ %3, %1 ]
  %13 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %12, i64 0, i32 0
  %14 = load %"class.blink::FontDataForRangeSet"*, %"class.blink::FontDataForRangeSet"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::FontDataForRangeSet", %"class.blink::FontDataForRangeSet"* %14, i64 0, i32 2, i32 0
  %16 = load %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %15, align 8
  %17 = bitcast %"class.blink::SimpleFontData"* %16 to i1 (%"class.blink::SimpleFontData"*)***
  %18 = load i1 (%"class.blink::SimpleFontData"*)**, i1 (%"class.blink::SimpleFontData"*)*** %17, align 8
  %19 = getelementptr inbounds i1 (%"class.blink::SimpleFontData"*)*, i1 (%"class.blink::SimpleFontData"*)** %18, i64 4
  %20 = load i1 (%"class.blink::SimpleFontData"*)*, i1 (%"class.blink::SimpleFontData"*)** %19, align 8
  %21 = tail call zeroext i1 %20(%"class.blink::SimpleFontData"* %16) #7
  %22 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %12, i64 1
  br i1 %21, label %23, label %9

23:                                               ; preds = %11, %9, %1
  %24 = phi i1 [ false, %1 ], [ false, %9 ], [ true, %11 ]
  ret i1 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink17SegmentedFontData17IsLoadingFallbackEv(%"class.blink::SegmentedFontData"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SegmentedFontData", %"class.blink::SegmentedFontData"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %2, align 8
  %4 = getelementptr inbounds %"class.blink::SegmentedFontData", %"class.blink::SegmentedFontData"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %3, i64 %6
  %8 = icmp eq i32 %5, 0
  br i1 %8, label %23, label %11

9:                                                ; preds = %11
  %10 = icmp eq %class.scoped_refptr.15* %22, %7
  br i1 %10, label %23, label %11

11:                                               ; preds = %1, %9
  %12 = phi %class.scoped_refptr.15* [ %22, %9 ], [ %3, %1 ]
  %13 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %12, i64 0, i32 0
  %14 = load %"class.blink::FontDataForRangeSet"*, %"class.blink::FontDataForRangeSet"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::FontDataForRangeSet", %"class.blink::FontDataForRangeSet"* %14, i64 0, i32 2, i32 0
  %16 = load %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %15, align 8
  %17 = bitcast %"class.blink::SimpleFontData"* %16 to i1 (%"class.blink::SimpleFontData"*)***
  %18 = load i1 (%"class.blink::SimpleFontData"*)**, i1 (%"class.blink::SimpleFontData"*)*** %17, align 8
  %19 = getelementptr inbounds i1 (%"class.blink::SimpleFontData"*)*, i1 (%"class.blink::SimpleFontData"*)** %18, i64 5
  %20 = load i1 (%"class.blink::SimpleFontData"*)*, i1 (%"class.blink::SimpleFontData"*)** %19, align 8
  %21 = tail call zeroext i1 %20(%"class.blink::SimpleFontData"* %16) #7
  %22 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %12, i64 1
  br i1 %21, label %23, label %9

23:                                               ; preds = %11, %9, %1
  %24 = phi i1 [ false, %1 ], [ false, %9 ], [ true, %11 ]
  ret i1 %24
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK5blink17SegmentedFontData11IsSegmentedEv(%"class.blink::SegmentedFontData"* nocapture readnone) unnamed_addr #2 align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink17SegmentedFontData17ShouldSkipDrawingEv(%"class.blink::SegmentedFontData"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SegmentedFontData", %"class.blink::SegmentedFontData"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %2, align 8
  %4 = getelementptr inbounds %"class.blink::SegmentedFontData", %"class.blink::SegmentedFontData"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %3, i64 %6
  %8 = icmp eq i32 %5, 0
  br i1 %8, label %23, label %11

9:                                                ; preds = %11
  %10 = icmp eq %class.scoped_refptr.15* %22, %7
  br i1 %10, label %23, label %11

11:                                               ; preds = %1, %9
  %12 = phi %class.scoped_refptr.15* [ %22, %9 ], [ %3, %1 ]
  %13 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %12, i64 0, i32 0
  %14 = load %"class.blink::FontDataForRangeSet"*, %"class.blink::FontDataForRangeSet"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::FontDataForRangeSet", %"class.blink::FontDataForRangeSet"* %14, i64 0, i32 2, i32 0
  %16 = load %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %15, align 8
  %17 = bitcast %"class.blink::SimpleFontData"* %16 to i1 (%"class.blink::SimpleFontData"*)***
  %18 = load i1 (%"class.blink::SimpleFontData"*)**, i1 (%"class.blink::SimpleFontData"*)*** %17, align 8
  %19 = getelementptr inbounds i1 (%"class.blink::SimpleFontData"*)*, i1 (%"class.blink::SimpleFontData"*)** %18, i64 7
  %20 = load i1 (%"class.blink::SimpleFontData"*)*, i1 (%"class.blink::SimpleFontData"*)** %19, align 8
  %21 = tail call zeroext i1 %20(%"class.blink::SimpleFontData"* %16) #7
  %22 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %12, i64 1
  br i1 %21, label %23, label %9

23:                                               ; preds = %11, %9, %1
  %24 = phi i1 [ false, %1 ], [ false, %9 ], [ true, %11 ]
  ret i1 %24
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink17SegmentedFontDataD2Ev(%"class.blink::SegmentedFontData"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::SegmentedFontData", %"class.blink::SegmentedFontData"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN5blink17SegmentedFontDataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::SegmentedFontData", %"class.blink::SegmentedFontData"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.blink::SegmentedFontData", %"class.blink::SegmentedFontData"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 0
  br i1 %6, label %34, label %8, !prof !2

8:                                                ; preds = %1
  %9 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %7, align 8
  %10 = zext i32 %5 to i64
  %11 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %9, i64 %10
  br label %12

12:                                               ; preds = %30, %8
  %13 = phi %class.scoped_refptr.15* [ %31, %30 ], [ %9, %8 ]
  %14 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %13, i64 0, i32 0
  %15 = load %"class.blink::FontDataForRangeSet"*, %"class.blink::FontDataForRangeSet"** %14, align 8
  %16 = icmp eq %"class.blink::FontDataForRangeSet"* %15, null
  br i1 %16, label %30, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.blink::FontDataForRangeSet", %"class.blink::FontDataForRangeSet"* %15, i64 0, i32 1, i32 0
  %19 = getelementptr inbounds %"class.base::RefCounted.17", %"class.base::RefCounted.17"* %18, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %19) #7
  %20 = getelementptr inbounds %"class.base::RefCounted.17", %"class.base::RefCounted.17"* %18, i64 0, i32 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %30

23:                                               ; preds = %17
  %24 = getelementptr inbounds %"class.base::RefCounted.17", %"class.base::RefCounted.17"* %18, i64 -2
  %25 = bitcast %"class.base::RefCounted.17"* %24 to %"class.blink::FontDataForRangeSet"*
  %26 = bitcast %"class.base::RefCounted.17"* %24 to void (%"class.blink::FontDataForRangeSet"*)***
  %27 = load void (%"class.blink::FontDataForRangeSet"*)**, void (%"class.blink::FontDataForRangeSet"*)*** %26, align 8
  %28 = getelementptr inbounds void (%"class.blink::FontDataForRangeSet"*)*, void (%"class.blink::FontDataForRangeSet"*)** %27, i64 1
  %29 = load void (%"class.blink::FontDataForRangeSet"*)*, void (%"class.blink::FontDataForRangeSet"*)** %28, align 8
  tail call void %29(%"class.blink::FontDataForRangeSet"* nonnull %25) #7
  br label %30

30:                                               ; preds = %23, %17, %12
  %31 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %13, i64 1
  %32 = icmp eq %class.scoped_refptr.15* %31, %11
  br i1 %32, label %33, label %12

33:                                               ; preds = %30
  store i32 0, i32* %4, align 4
  br label %34

34:                                               ; preds = %33, %1
  %35 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %7, align 8
  %36 = getelementptr inbounds %"class.blink::SegmentedFontData", %"class.blink::SegmentedFontData"* %0, i64 0, i32 1, i32 0, i32 1, i64 0
  %37 = bitcast i8* %36 to %class.scoped_refptr.15*
  %38 = icmp eq %class.scoped_refptr.15* %35, %37
  br i1 %38, label %41, label %39, !prof !3

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferI13scoped_refptrIN5blink19FontDataForRangeSetEELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS4_(%"class.WTF::VectorBuffer"* %40, %class.scoped_refptr.15* %35) #7
  br label %41

41:                                               ; preds = %34, %39
  store %class.scoped_refptr.15* null, %class.scoped_refptr.15** %7, align 8
  %42 = bitcast %"class.blink::SegmentedFontData"* %0 to %"class.blink::FontData"*
  tail call void @_ZN5blink8FontDataD2Ev(%"class.blink::FontData"* %42) #7
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink17SegmentedFontDataD0Ev(%"class.blink::SegmentedFontData"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::SegmentedFontData", %"class.blink::SegmentedFontData"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN5blink17SegmentedFontDataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::SegmentedFontData", %"class.blink::SegmentedFontData"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.blink::SegmentedFontData", %"class.blink::SegmentedFontData"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 0
  br i1 %6, label %34, label %8, !prof !2

8:                                                ; preds = %1
  %9 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %7, align 8
  %10 = zext i32 %5 to i64
  %11 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %9, i64 %10
  br label %12

12:                                               ; preds = %30, %8
  %13 = phi %class.scoped_refptr.15* [ %31, %30 ], [ %9, %8 ]
  %14 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %13, i64 0, i32 0
  %15 = load %"class.blink::FontDataForRangeSet"*, %"class.blink::FontDataForRangeSet"** %14, align 8
  %16 = icmp eq %"class.blink::FontDataForRangeSet"* %15, null
  br i1 %16, label %30, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.blink::FontDataForRangeSet", %"class.blink::FontDataForRangeSet"* %15, i64 0, i32 1, i32 0
  %19 = getelementptr inbounds %"class.base::RefCounted.17", %"class.base::RefCounted.17"* %18, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %19) #7
  %20 = getelementptr inbounds %"class.base::RefCounted.17", %"class.base::RefCounted.17"* %18, i64 0, i32 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %30

23:                                               ; preds = %17
  %24 = getelementptr inbounds %"class.base::RefCounted.17", %"class.base::RefCounted.17"* %18, i64 -2
  %25 = bitcast %"class.base::RefCounted.17"* %24 to %"class.blink::FontDataForRangeSet"*
  %26 = bitcast %"class.base::RefCounted.17"* %24 to void (%"class.blink::FontDataForRangeSet"*)***
  %27 = load void (%"class.blink::FontDataForRangeSet"*)**, void (%"class.blink::FontDataForRangeSet"*)*** %26, align 8
  %28 = getelementptr inbounds void (%"class.blink::FontDataForRangeSet"*)*, void (%"class.blink::FontDataForRangeSet"*)** %27, i64 1
  %29 = load void (%"class.blink::FontDataForRangeSet"*)*, void (%"class.blink::FontDataForRangeSet"*)** %28, align 8
  tail call void %29(%"class.blink::FontDataForRangeSet"* nonnull %25) #7
  br label %30

30:                                               ; preds = %23, %17, %12
  %31 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %13, i64 1
  %32 = icmp eq %class.scoped_refptr.15* %31, %11
  br i1 %32, label %33, label %12

33:                                               ; preds = %30
  store i32 0, i32* %4, align 4
  br label %34

34:                                               ; preds = %33, %1
  %35 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %7, align 8
  %36 = getelementptr inbounds %"class.blink::SegmentedFontData", %"class.blink::SegmentedFontData"* %0, i64 0, i32 1, i32 0, i32 1, i64 0
  %37 = bitcast i8* %36 to %class.scoped_refptr.15*
  %38 = icmp eq %class.scoped_refptr.15* %35, %37
  br i1 %38, label %41, label %39, !prof !3

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferI13scoped_refptrIN5blink19FontDataForRangeSetEELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS4_(%"class.WTF::VectorBuffer"* %40, %class.scoped_refptr.15* %35) #7
  br label %41

41:                                               ; preds = %34, %39
  store %class.scoped_refptr.15* null, %class.scoped_refptr.15** %7, align 8
  %42 = bitcast %"class.blink::SegmentedFontData"* %0 to %"class.blink::FontData"*
  tail call void @_ZN5blink8FontDataD2Ev(%"class.blink::FontData"* %42) #7
  %43 = bitcast %"class.blink::SegmentedFontData"* %0 to i8*
  tail call void @free(i8* %43) #7
  ret void
}

declare zeroext i1 @_ZNK5blink15UnicodeRangeSet8ContainsEi(%"class.blink::UnicodeRangeSet"*, i32) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN5blink8FontDataD2Ev(%"class.blink::FontData"*) unnamed_addr #5

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #4

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferI13scoped_refptrIN5blink19FontDataForRangeSetEELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS4_(%"class.WTF::VectorBuffer"*, %class.scoped_refptr.15*) local_unnamed_addr #6 comdat align 2 {
  %3 = bitcast %class.scoped_refptr.15* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #7
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %class.scoped_refptr.15* @_ZNK3WTF6VectorI13scoped_refptrIN5blink19FontDataForRangeSetEELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #7
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #7
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #7
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #7
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #7
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #7
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %class.scoped_refptr.15*, %class.scoped_refptr.15** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %class.scoped_refptr.15, %class.scoped_refptr.15* %24, i64 %25
  ret %class.scoped_refptr.15* %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
