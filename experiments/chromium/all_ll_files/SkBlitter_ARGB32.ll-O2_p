; ModuleID = '../../third_party/skia/src/core/SkBlitter_ARGB32.cpp'
source_filename = "../../third_party/skia/src/core/SkBlitter_ARGB32.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkARGB32_Blitter = type { %class.SkRasterBlitter, i32, i32, i32, i32, i32, i32 }
%class.SkRasterBlitter = type { %class.SkBlitter, %class.SkPixmap }
%class.SkBlitter = type { i32 (...)**, %class.SkAutoMalloc }
%class.SkAutoMalloc = type { %"class.std::__1::unique_ptr", i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.SkPaint = type <{ %class.sk_sp.7, %class.sk_sp.8, %class.sk_sp.9, %class.sk_sp.10, %class.sk_sp.11, %struct.SkRGBA4f, float, float, %union.anon, [4 x i8] }>
%class.sk_sp.7 = type { %class.SkPathEffect* }
%class.SkPathEffect = type opaque
%class.sk_sp.8 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%class.sk_sp.9 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type opaque
%class.sk_sp.10 = type { %class.SkColorFilter* }
%class.SkColorFilter = type opaque
%class.sk_sp.11 = type { %class.SkImageFilter* }
%class.SkImageFilter = type opaque
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon = type { %struct.anon }
%struct.anon = type { i32 }
%class.SkARGB32_Shader_Blitter = type <{ %class.SkShaderBlitter.base, [7 x i8], %class.SkXfermode*, i32*, void (i32*, i32*, i32, i32)*, void (i32*, i32*, i32, i32)*, i8, [7 x i8] }>
%class.SkShaderBlitter.base = type <{ %class.SkRasterBlitter, i32, [4 x i8], %class.SkShader*, %"class.SkShaderBase::Context"*, i8 }>
%class.SkXfermode = type { %class.SkRefCnt.base, [4 x i8] }
%"class.SkShaderBase::Context" = type <{ i32 (...)**, %class.SkShaderBase*, %class.SkMatrix, %class.SkMatrix, i8, [7 x i8] }>
%class.SkShaderBase = type { %class.SkShader.base, %class.SkMatrix, [4 x i8] }
%class.SkShader.base = type { %class.SkFlattenable.base }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkMask = type <{ i8*, %struct.SkIRect, i32, i8, [3 x i8] }>
%struct.SkIRect = type { i32, i32, i32, i32 }
%class.SkARGB32_Opaque_Blitter = type { %class.SkARGB32_Blitter }
%class.SkARGB32_Black_Blitter = type { %class.SkARGB32_Opaque_Blitter }
%class.sk_sp.12 = type { %class.SkXfermode* }
%class.SkShaderBlitter = type <{ %class.SkRasterBlitter, i32, [4 x i8], %class.SkShader*, %"class.SkShaderBase::Context"*, i8, [7 x i8] }>
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>

$_ZN16SkARGB32_BlitterD0Ev = comdat any

$_ZNK9SkBlitter20requestRowsPreservedEv = comdat any

$_ZN9SkBlitter15allocBlitMemoryEm = comdat any

$_ZN15SkRasterBlitterD2Ev = comdat any

$_ZN23SkARGB32_Opaque_BlitterD0Ev = comdat any

$_ZN22SkARGB32_Black_BlitterD0Ev = comdat any

$_ZN9SkBlitter10blitAntiH2Eiijj = comdat any

$_ZN9SkBlitter10blitAntiV2Eiijj = comdat any

$_ZN15SkRasterBlitterD0Ev = comdat any

$_ZTV15SkRasterBlitter = comdat any

@_ZTV16SkARGB32_Blitter = hidden unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRasterBlitter*)* @_ZN15SkRasterBlitterD2Ev to i8*), i8* bitcast (void (%class.SkARGB32_Blitter*)* @_ZN16SkARGB32_BlitterD0Ev to i8*), i8* bitcast (void (%class.SkARGB32_Blitter*, i32, i32, i32)* @_ZN16SkARGB32_Blitter5blitHEiii to i8*), i8* bitcast (void (%class.SkARGB32_Blitter*, i32, i32, i8*, i16*)* @_ZN16SkARGB32_Blitter9blitAntiHEiiPKhPKs to i8*), i8* bitcast (void (%class.SkARGB32_Blitter*, i32, i32, i32, i8)* @_ZN16SkARGB32_Blitter5blitVEiiih to i8*), i8* bitcast (void (%class.SkARGB32_Blitter*, i32, i32, i32, i32)* @_ZN16SkARGB32_Blitter8blitRectEiiii to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32, i8, i8)* @_ZN9SkBlitter12blitAntiRectEiiiihh to i8*), i8* bitcast (void (%class.SkARGB32_Blitter*, %struct.SkMask*, %struct.SkIRect*)* @_ZN16SkARGB32_Blitter8blitMaskERK6SkMaskRK7SkIRect to i8*), i8* bitcast (%class.SkPixmap* (%class.SkARGB32_Blitter*, i32*)* @_ZN16SkARGB32_Blitter17justAnOpaqueColorEPj to i8*), i8* bitcast (void (%class.SkARGB32_Blitter*, i32, i32, i32, i32)* @_ZN16SkARGB32_Blitter10blitAntiH2Eiijj to i8*), i8* bitcast (void (%class.SkARGB32_Blitter*, i32, i32, i32, i32)* @_ZN16SkARGB32_Blitter10blitAntiV2Eiijj to i8*), i8* bitcast (i1 (%class.SkBlitter*)* @_ZNK9SkBlitter13isNullBlitterEv to i8*), i8* bitcast (i32 (%class.SkBlitter*)* @_ZNK9SkBlitter20requestRowsPreservedEv to i8*), i8* bitcast (i8* (%class.SkBlitter*, i64)* @_ZN9SkBlitter15allocBlitMemoryEm to i8*)] }, align 8
@.str = private unnamed_addr constant [53 x i8] c"../../third_party/skia/src/core/SkBlitter_ARGB32.cpp\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"Mask format not handled.\00", align 1
@_ZN6SkOpts13rect_memset32E = external local_unnamed_addr global void (i32*, i32, i32, i64, i32)*, align 8
@_ZTV23SkARGB32_Shader_Blitter = hidden unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkARGB32_Shader_Blitter*)* @_ZN23SkARGB32_Shader_BlitterD2Ev to i8*), i8* bitcast (void (%class.SkARGB32_Shader_Blitter*)* @_ZN23SkARGB32_Shader_BlitterD0Ev to i8*), i8* bitcast (void (%class.SkARGB32_Shader_Blitter*, i32, i32, i32)* @_ZN23SkARGB32_Shader_Blitter5blitHEiii to i8*), i8* bitcast (void (%class.SkARGB32_Shader_Blitter*, i32, i32, i8*, i16*)* @_ZN23SkARGB32_Shader_Blitter9blitAntiHEiiPKhPKs to i8*), i8* bitcast (void (%class.SkARGB32_Shader_Blitter*, i32, i32, i32, i8)* @_ZN23SkARGB32_Shader_Blitter5blitVEiiih to i8*), i8* bitcast (void (%class.SkARGB32_Shader_Blitter*, i32, i32, i32, i32)* @_ZN23SkARGB32_Shader_Blitter8blitRectEiiii to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32, i8, i8)* @_ZN9SkBlitter12blitAntiRectEiiiihh to i8*), i8* bitcast (void (%class.SkARGB32_Shader_Blitter*, %struct.SkMask*, %struct.SkIRect*)* @_ZN23SkARGB32_Shader_Blitter8blitMaskERK6SkMaskRK7SkIRect to i8*), i8* bitcast (%class.SkPixmap* (%class.SkBlitter*, i32*)* @_ZN9SkBlitter17justAnOpaqueColorEPj to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32)* @_ZN9SkBlitter10blitAntiH2Eiijj to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32)* @_ZN9SkBlitter10blitAntiV2Eiijj to i8*), i8* bitcast (i1 (%class.SkBlitter*)* @_ZNK9SkBlitter13isNullBlitterEv to i8*), i8* bitcast (i32 (%class.SkBlitter*)* @_ZNK9SkBlitter20requestRowsPreservedEv to i8*), i8* bitcast (i8* (%class.SkBlitter*, i64)* @_ZN9SkBlitter15allocBlitMemoryEm to i8*)] }, align 8
@_ZTV23SkARGB32_Opaque_Blitter = hidden unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRasterBlitter*)* @_ZN15SkRasterBlitterD2Ev to i8*), i8* bitcast (void (%class.SkARGB32_Opaque_Blitter*)* @_ZN23SkARGB32_Opaque_BlitterD0Ev to i8*), i8* bitcast (void (%class.SkARGB32_Blitter*, i32, i32, i32)* @_ZN16SkARGB32_Blitter5blitHEiii to i8*), i8* bitcast (void (%class.SkARGB32_Blitter*, i32, i32, i8*, i16*)* @_ZN16SkARGB32_Blitter9blitAntiHEiiPKhPKs to i8*), i8* bitcast (void (%class.SkARGB32_Blitter*, i32, i32, i32, i8)* @_ZN16SkARGB32_Blitter5blitVEiiih to i8*), i8* bitcast (void (%class.SkARGB32_Blitter*, i32, i32, i32, i32)* @_ZN16SkARGB32_Blitter8blitRectEiiii to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32, i8, i8)* @_ZN9SkBlitter12blitAntiRectEiiiihh to i8*), i8* bitcast (void (%class.SkARGB32_Opaque_Blitter*, %struct.SkMask*, %struct.SkIRect*)* @_ZN23SkARGB32_Opaque_Blitter8blitMaskERK6SkMaskRK7SkIRect to i8*), i8* bitcast (%class.SkPixmap* (%class.SkARGB32_Blitter*, i32*)* @_ZN16SkARGB32_Blitter17justAnOpaqueColorEPj to i8*), i8* bitcast (void (%class.SkARGB32_Opaque_Blitter*, i32, i32, i32, i32)* @_ZN23SkARGB32_Opaque_Blitter10blitAntiH2Eiijj to i8*), i8* bitcast (void (%class.SkARGB32_Opaque_Blitter*, i32, i32, i32, i32)* @_ZN23SkARGB32_Opaque_Blitter10blitAntiV2Eiijj to i8*), i8* bitcast (i1 (%class.SkBlitter*)* @_ZNK9SkBlitter13isNullBlitterEv to i8*), i8* bitcast (i32 (%class.SkBlitter*)* @_ZNK9SkBlitter20requestRowsPreservedEv to i8*), i8* bitcast (i8* (%class.SkBlitter*, i64)* @_ZN9SkBlitter15allocBlitMemoryEm to i8*)] }, align 8
@_ZTV22SkARGB32_Black_Blitter = hidden unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRasterBlitter*)* @_ZN15SkRasterBlitterD2Ev to i8*), i8* bitcast (void (%class.SkARGB32_Black_Blitter*)* @_ZN22SkARGB32_Black_BlitterD0Ev to i8*), i8* bitcast (void (%class.SkARGB32_Blitter*, i32, i32, i32)* @_ZN16SkARGB32_Blitter5blitHEiii to i8*), i8* bitcast (void (%class.SkARGB32_Black_Blitter*, i32, i32, i8*, i16*)* @_ZN22SkARGB32_Black_Blitter9blitAntiHEiiPKhPKs to i8*), i8* bitcast (void (%class.SkARGB32_Blitter*, i32, i32, i32, i8)* @_ZN16SkARGB32_Blitter5blitVEiiih to i8*), i8* bitcast (void (%class.SkARGB32_Blitter*, i32, i32, i32, i32)* @_ZN16SkARGB32_Blitter8blitRectEiiii to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32, i8, i8)* @_ZN9SkBlitter12blitAntiRectEiiiihh to i8*), i8* bitcast (void (%class.SkARGB32_Opaque_Blitter*, %struct.SkMask*, %struct.SkIRect*)* @_ZN23SkARGB32_Opaque_Blitter8blitMaskERK6SkMaskRK7SkIRect to i8*), i8* bitcast (%class.SkPixmap* (%class.SkARGB32_Blitter*, i32*)* @_ZN16SkARGB32_Blitter17justAnOpaqueColorEPj to i8*), i8* bitcast (void (%class.SkARGB32_Black_Blitter*, i32, i32, i32, i32)* @_ZN22SkARGB32_Black_Blitter10blitAntiH2Eiijj to i8*), i8* bitcast (void (%class.SkARGB32_Black_Blitter*, i32, i32, i32, i32)* @_ZN22SkARGB32_Black_Blitter10blitAntiV2Eiijj to i8*), i8* bitcast (i1 (%class.SkBlitter*)* @_ZNK9SkBlitter13isNullBlitterEv to i8*), i8* bitcast (i32 (%class.SkBlitter*)* @_ZNK9SkBlitter20requestRowsPreservedEv to i8*), i8* bitcast (i8* (%class.SkBlitter*, i64)* @_ZN9SkBlitter15allocBlitMemoryEm to i8*)] }, align 8
@_ZTV15SkRasterBlitter = linkonce_odr hidden unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRasterBlitter*)* @_ZN15SkRasterBlitterD2Ev to i8*), i8* bitcast (void (%class.SkRasterBlitter*)* @_ZN15SkRasterBlitterD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i8)* @_ZN9SkBlitter5blitVEiiih to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32)* @_ZN9SkBlitter8blitRectEiiii to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32, i8, i8)* @_ZN9SkBlitter12blitAntiRectEiiiihh to i8*), i8* bitcast (void (%class.SkBlitter*, %struct.SkMask*, %struct.SkIRect*)* @_ZN9SkBlitter8blitMaskERK6SkMaskRK7SkIRect to i8*), i8* bitcast (%class.SkPixmap* (%class.SkBlitter*, i32*)* @_ZN9SkBlitter17justAnOpaqueColorEPj to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32)* @_ZN9SkBlitter10blitAntiH2Eiijj to i8*), i8* bitcast (void (%class.SkBlitter*, i32, i32, i32, i32)* @_ZN9SkBlitter10blitAntiV2Eiijj to i8*), i8* bitcast (i1 (%class.SkBlitter*)* @_ZNK9SkBlitter13isNullBlitterEv to i8*), i8* bitcast (i32 (%class.SkBlitter*)* @_ZNK9SkBlitter20requestRowsPreservedEv to i8*), i8* bitcast (i8* (%class.SkBlitter*, i64)* @_ZN9SkBlitter15allocBlitMemoryEm to i8*)] }, comdat, align 8
@_ZN6SkOpts8memset32E = external local_unnamed_addr global void (i32*, i32, i32)*, align 8
@_ZN6SkOpts16blit_mask_d32_a8E = external local_unnamed_addr global void (i32*, i64, i8*, i64, i32, i32, i32)*, align 8

@_ZN16SkARGB32_BlitterC1ERK8SkPixmapRK7SkPaint = hidden unnamed_addr alias void (%class.SkARGB32_Blitter*, %class.SkPixmap*, %class.SkPaint*), void (%class.SkARGB32_Blitter*, %class.SkPixmap*, %class.SkPaint*)* @_ZN16SkARGB32_BlitterC2ERK8SkPixmapRK7SkPaint
@_ZN23SkARGB32_Shader_BlitterC1ERK8SkPixmapRK7SkPaintPN12SkShaderBase7ContextE = hidden unnamed_addr alias void (%class.SkARGB32_Shader_Blitter*, %class.SkPixmap*, %class.SkPaint*, %"class.SkShaderBase::Context"*), void (%class.SkARGB32_Shader_Blitter*, %class.SkPixmap*, %class.SkPaint*, %"class.SkShaderBase::Context"*)* @_ZN23SkARGB32_Shader_BlitterC2ERK8SkPixmapRK7SkPaintPN12SkShaderBase7ContextE
@_ZN23SkARGB32_Shader_BlitterD1Ev = hidden unnamed_addr alias void (%class.SkARGB32_Shader_Blitter*), void (%class.SkARGB32_Shader_Blitter*)* @_ZN23SkARGB32_Shader_BlitterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z14blit_row_lcd16PjPKtjij(i32*, i16* nocapture readonly, i32, i32, i32) local_unnamed_addr #0 {
  %6 = icmp slt i32 %3, 1
  br i1 %6, label %317, label %7

7:                                                ; preds = %5
  %8 = lshr i32 %2, 24
  %9 = lshr i32 %2, 16
  %10 = and i32 %9, 255
  %11 = lshr i32 %2, 8
  %12 = and i32 %11, 255
  %13 = and i32 %2, 255
  %14 = add nuw nsw i32 %8, 1
  %15 = icmp sgt i32 %3, 3
  br i1 %15, label %16, label %169

16:                                               ; preds = %7
  %17 = ptrtoint i32* %0 to i64
  %18 = and i64 %17, 15
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %20, label %25

20:                                               ; preds = %16
  %21 = bitcast i32* %0 to <2 x i64>*
  %22 = trunc i32 %14 to i16
  %23 = insertelement <8 x i16> undef, i16 %22, i32 0
  %24 = shufflevector <8 x i16> %23, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %86

25:                                               ; preds = %16, %72
  %26 = phi i32* [ %75, %72 ], [ %0, %16 ]
  %27 = phi i16* [ %74, %72 ], [ %1, %16 ]
  %28 = phi i32 [ %76, %72 ], [ %3, %16 ]
  %29 = load i32, i32* %26, align 4
  %30 = load i16, i16* %27, align 2
  %31 = zext i16 %30 to i32
  %32 = icmp eq i16 %30, 0
  br i1 %32, label %72, label %33

33:                                               ; preds = %25
  %34 = lshr i32 %31, 11
  %35 = lshr i32 %31, 6
  %36 = and i32 %35, 31
  %37 = and i32 %31, 31
  %38 = lshr i32 %31, 15
  %39 = add nuw nsw i32 %38, %34
  %40 = lshr i32 %36, 4
  %41 = add nuw nsw i32 %40, %36
  %42 = lshr i32 %37, 4
  %43 = add nuw nsw i32 %42, %37
  %44 = mul nuw nsw i32 %39, %14
  %45 = lshr i32 %44, 8
  %46 = mul nuw nsw i32 %41, %14
  %47 = lshr i32 %46, 8
  %48 = mul nuw nsw i32 %43, %14
  %49 = lshr i32 %48, 8
  %50 = lshr i32 %29, 16
  %51 = and i32 %50, 255
  %52 = lshr i32 %29, 8
  %53 = and i32 %52, 255
  %54 = and i32 %29, 255
  %55 = sub nsw i32 %10, %51
  %56 = mul nsw i32 %45, %55
  %57 = lshr i32 %56, 5
  %58 = add nuw nsw i32 %57, %50
  %59 = sub nsw i32 %12, %53
  %60 = mul nsw i32 %47, %59
  %61 = lshr i32 %60, 5
  %62 = add nuw nsw i32 %61, %53
  %63 = sub nsw i32 %13, %54
  %64 = mul nsw i32 %49, %63
  %65 = lshr i32 %64, 5
  %66 = add nuw nsw i32 %65, %54
  %67 = shl i32 %58, 16
  %68 = shl i32 %62, 8
  %69 = or i32 %66, %67
  %70 = or i32 %69, %68
  %71 = or i32 %70, -16777216
  br label %72

72:                                               ; preds = %25, %33
  %73 = phi i32 [ %71, %33 ], [ %29, %25 ]
  store i32 %73, i32* %26, align 4
  %74 = getelementptr inbounds i16, i16* %27, i64 1
  %75 = getelementptr inbounds i32, i32* %26, i64 1
  %76 = add nsw i32 %28, -1
  %77 = ptrtoint i32* %75 to i64
  %78 = and i64 %77, 15
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %80, label %25

80:                                               ; preds = %72
  %81 = bitcast i32* %75 to <2 x i64>*
  %82 = trunc i32 %14 to i16
  %83 = insertelement <8 x i16> undef, i16 %82, i32 0
  %84 = shufflevector <8 x i16> %83, <8 x i16> undef, <8 x i32> zeroinitializer
  %85 = icmp sgt i32 %76, 3
  br i1 %85, label %86, label %163

86:                                               ; preds = %20, %80
  %87 = phi <8 x i16> [ %24, %20 ], [ %84, %80 ]
  %88 = phi <2 x i64>* [ %21, %20 ], [ %81, %80 ]
  %89 = phi i16* [ %1, %20 ], [ %74, %80 ]
  %90 = phi i32 [ %3, %20 ], [ %76, %80 ]
  %91 = shl nuw nsw i32 %12, 8
  %92 = or i32 %13, %91
  %93 = shl nuw nsw i32 %10, 16
  %94 = or i32 %92, %93
  %95 = or i32 %94, -16777216
  %96 = insertelement <4 x i32> undef, i32 %95, i32 0
  %97 = shufflevector <4 x i32> %96, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %98 = bitcast <4 x i32> %97 to <16 x i8>
  %99 = shufflevector <16 x i8> %98, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %100 = bitcast <16 x i8> %99 to <8 x i16>
  br label %101

101:                                              ; preds = %86, %156
  %102 = phi i16* [ %89, %86 ], [ %158, %156 ]
  %103 = phi <2 x i64>* [ %88, %86 ], [ %157, %156 ]
  %104 = phi i32 [ %90, %86 ], [ %159, %156 ]
  %105 = bitcast i16* %102 to i64*
  %106 = load i64, i64* %105, align 1
  %107 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %106, i32 0
  %108 = bitcast <2 x i64> %107 to <8 x i16>
  %109 = icmp eq <8 x i16> %108, zeroinitializer
  %110 = sext <8 x i1> %109 to <8 x i16>
  %111 = bitcast <8 x i16> %110 to <16 x i8>
  %112 = icmp slt <16 x i8> %111, zeroinitializer
  %113 = bitcast <16 x i1> %112 to i16
  %114 = icmp eq i16 %113, -1
  br i1 %114, label %156, label %115

115:                                              ; preds = %101
  %116 = bitcast <2 x i64>* %103 to <16 x i8>*
  %117 = load <16 x i8>, <16 x i8>* %116, align 16
  %118 = shufflevector <8 x i16> %108, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %119 = bitcast <8 x i16> %118 to <2 x i64>
  %120 = bitcast <8 x i16> %118 to <4 x i32>
  %121 = shl <4 x i32> %120, <i32 5, i32 5, i32 5, i32 5>
  %122 = bitcast <4 x i32> %121 to <2 x i64>
  %123 = and <2 x i64> %122, <i64 8725724280061952, i64 8725724280061952>
  %124 = shl <4 x i32> %120, <i32 2, i32 2, i32 2, i32 2>
  %125 = bitcast <4 x i32> %124 to <2 x i64>
  %126 = and <2 x i64> %125, <i64 34084860468992, i64 34084860468992>
  %127 = and <2 x i64> %119, <i64 133143986207, i64 133143986207>
  %128 = or <2 x i64> %123, %127
  %129 = or <2 x i64> %128, %126
  %130 = bitcast <2 x i64> %129 to <16 x i8>
  %131 = shufflevector <16 x i8> %130, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %132 = shufflevector <16 x i8> %130, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %133 = bitcast <16 x i8> %131 to <8 x i16>
  %134 = lshr <8 x i16> %133, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %135 = add <8 x i16> %134, %133
  %136 = bitcast <16 x i8> %132 to <8 x i16>
  %137 = lshr <8 x i16> %136, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %138 = add <8 x i16> %137, %136
  %139 = mul <8 x i16> %135, %87
  %140 = mul <8 x i16> %138, %87
  %141 = lshr <8 x i16> %139, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %142 = lshr <8 x i16> %140, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %143 = shufflevector <16 x i8> %117, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %144 = shufflevector <16 x i8> %117, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %145 = bitcast <16 x i8> %143 to <8 x i16>
  %146 = sub <8 x i16> %100, %145
  %147 = mul <8 x i16> %146, %141
  %148 = bitcast <16 x i8> %144 to <8 x i16>
  %149 = sub <8 x i16> %100, %148
  %150 = mul <8 x i16> %149, %142
  %151 = ashr <8 x i16> %147, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %152 = ashr <8 x i16> %150, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %153 = add <8 x i16> %151, %145
  %154 = add <8 x i16> %152, %148
  %155 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %153, <8 x i16> %154) #12
  store <16 x i8> %155, <16 x i8>* %116, align 16
  br label %156

156:                                              ; preds = %101, %115
  %157 = getelementptr inbounds <2 x i64>, <2 x i64>* %103, i64 1
  %158 = getelementptr inbounds i16, i16* %102, i64 4
  %159 = add nsw i32 %104, -4
  %160 = icmp sgt i32 %159, 3
  br i1 %160, label %101, label %161

161:                                              ; preds = %156
  %162 = and i32 %90, 3
  br label %163

163:                                              ; preds = %80, %161
  %164 = phi i32 [ %76, %80 ], [ %162, %161 ]
  %165 = phi <2 x i64>* [ %81, %80 ], [ %157, %161 ]
  %166 = phi i16* [ %74, %80 ], [ %158, %161 ]
  %167 = bitcast <2 x i64>* %165 to i32*
  %168 = icmp sgt i32 %164, 0
  br i1 %168, label %169, label %317

169:                                              ; preds = %7, %163
  %170 = phi i32* [ %167, %163 ], [ %0, %7 ]
  %171 = phi i16* [ %166, %163 ], [ %1, %7 ]
  %172 = phi i32 [ %164, %163 ], [ %3, %7 ]
  %173 = icmp slt i32 %172, 1
  %174 = select i1 %173, i32 %172, i32 1
  %175 = sub i32 %172, %174
  %176 = zext i32 %175 to i64
  %177 = add nuw nsw i64 %176, 1
  %178 = icmp ult i64 %177, 4
  br i1 %178, label %260, label %179

179:                                              ; preds = %169
  %180 = icmp slt i32 %172, 1
  %181 = select i1 %180, i32 %172, i32 1
  %182 = sub i32 %172, %181
  %183 = zext i32 %182 to i64
  %184 = add nuw nsw i64 %183, 1
  %185 = getelementptr i32, i32* %170, i64 %184
  %186 = getelementptr i16, i16* %171, i64 %184
  %187 = bitcast i16* %186 to i32*
  %188 = icmp ult i32* %170, %187
  %189 = bitcast i32* %185 to i16*
  %190 = icmp ult i16* %171, %189
  %191 = and i1 %188, %190
  br i1 %191, label %260, label %192

192:                                              ; preds = %179
  %193 = and i64 %177, 8589934588
  %194 = getelementptr i32, i32* %170, i64 %193
  %195 = getelementptr i16, i16* %171, i64 %193
  %196 = trunc i64 %193 to i32
  %197 = sub i32 %172, %196
  %198 = insertelement <4 x i32> undef, i32 %14, i32 0
  %199 = shufflevector <4 x i32> %198, <4 x i32> undef, <4 x i32> zeroinitializer
  %200 = insertelement <4 x i32> undef, i32 %10, i32 0
  %201 = shufflevector <4 x i32> %200, <4 x i32> undef, <4 x i32> zeroinitializer
  %202 = insertelement <4 x i32> undef, i32 %12, i32 0
  %203 = shufflevector <4 x i32> %202, <4 x i32> undef, <4 x i32> zeroinitializer
  %204 = insertelement <4 x i32> undef, i32 %13, i32 0
  %205 = shufflevector <4 x i32> %204, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %206

206:                                              ; preds = %206, %192
  %207 = phi i64 [ 0, %192 ], [ %256, %206 ]
  %208 = getelementptr i32, i32* %170, i64 %207
  %209 = getelementptr i16, i16* %171, i64 %207
  %210 = bitcast i32* %208 to <4 x i32>*
  %211 = load <4 x i32>, <4 x i32>* %210, align 4, !alias.scope !2, !noalias !5
  %212 = bitcast i16* %209 to <4 x i16>*
  %213 = load <4 x i16>, <4 x i16>* %212, align 2, !alias.scope !5
  %214 = zext <4 x i16> %213 to <4 x i32>
  %215 = icmp eq <4 x i16> %213, zeroinitializer
  %216 = lshr <4 x i32> %214, <i32 11, i32 11, i32 11, i32 11>
  %217 = lshr <4 x i32> %214, <i32 6, i32 6, i32 6, i32 6>
  %218 = and <4 x i32> %217, <i32 31, i32 31, i32 31, i32 31>
  %219 = and <4 x i32> %214, <i32 31, i32 31, i32 31, i32 31>
  %220 = lshr <4 x i32> %214, <i32 15, i32 15, i32 15, i32 15>
  %221 = add nuw nsw <4 x i32> %220, %216
  %222 = lshr <4 x i32> %218, <i32 4, i32 4, i32 4, i32 4>
  %223 = add nuw nsw <4 x i32> %222, %218
  %224 = lshr <4 x i32> %219, <i32 4, i32 4, i32 4, i32 4>
  %225 = add nuw nsw <4 x i32> %224, %219
  %226 = mul nuw nsw <4 x i32> %221, %199
  %227 = lshr <4 x i32> %226, <i32 8, i32 8, i32 8, i32 8>
  %228 = mul nuw nsw <4 x i32> %223, %199
  %229 = lshr <4 x i32> %228, <i32 8, i32 8, i32 8, i32 8>
  %230 = mul nuw nsw <4 x i32> %225, %199
  %231 = lshr <4 x i32> %230, <i32 8, i32 8, i32 8, i32 8>
  %232 = lshr <4 x i32> %211, <i32 16, i32 16, i32 16, i32 16>
  %233 = and <4 x i32> %232, <i32 255, i32 255, i32 255, i32 255>
  %234 = lshr <4 x i32> %211, <i32 8, i32 8, i32 8, i32 8>
  %235 = and <4 x i32> %234, <i32 255, i32 255, i32 255, i32 255>
  %236 = and <4 x i32> %211, <i32 255, i32 255, i32 255, i32 255>
  %237 = sub nsw <4 x i32> %201, %233
  %238 = mul nsw <4 x i32> %227, %237
  %239 = lshr <4 x i32> %238, <i32 5, i32 5, i32 5, i32 5>
  %240 = add nuw nsw <4 x i32> %239, %232
  %241 = sub nsw <4 x i32> %203, %235
  %242 = mul nsw <4 x i32> %229, %241
  %243 = lshr <4 x i32> %242, <i32 5, i32 5, i32 5, i32 5>
  %244 = add nuw nsw <4 x i32> %243, %235
  %245 = sub nsw <4 x i32> %205, %236
  %246 = mul nsw <4 x i32> %231, %245
  %247 = lshr <4 x i32> %246, <i32 5, i32 5, i32 5, i32 5>
  %248 = add nuw nsw <4 x i32> %247, %236
  %249 = shl <4 x i32> %240, <i32 16, i32 16, i32 16, i32 16>
  %250 = shl <4 x i32> %244, <i32 8, i32 8, i32 8, i32 8>
  %251 = or <4 x i32> %248, %249
  %252 = or <4 x i32> %251, %250
  %253 = or <4 x i32> %252, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %254 = select <4 x i1> %215, <4 x i32> %211, <4 x i32> %253
  %255 = bitcast i32* %208 to <4 x i32>*
  store <4 x i32> %254, <4 x i32>* %255, align 4, !alias.scope !2, !noalias !5
  %256 = add i64 %207, 4
  %257 = icmp eq i64 %256, %193
  br i1 %257, label %258, label %206, !llvm.loop !7

258:                                              ; preds = %206
  %259 = icmp eq i64 %177, %193
  br i1 %259, label %317, label %260

260:                                              ; preds = %258, %179, %169
  %261 = phi i32* [ %170, %179 ], [ %170, %169 ], [ %194, %258 ]
  %262 = phi i16* [ %171, %179 ], [ %171, %169 ], [ %195, %258 ]
  %263 = phi i32 [ %172, %179 ], [ %172, %169 ], [ %197, %258 ]
  br label %264

264:                                              ; preds = %260, %311
  %265 = phi i32* [ %314, %311 ], [ %261, %260 ]
  %266 = phi i16* [ %313, %311 ], [ %262, %260 ]
  %267 = phi i32 [ %315, %311 ], [ %263, %260 ]
  %268 = load i32, i32* %265, align 4
  %269 = load i16, i16* %266, align 2
  %270 = zext i16 %269 to i32
  %271 = icmp eq i16 %269, 0
  br i1 %271, label %311, label %272

272:                                              ; preds = %264
  %273 = lshr i32 %270, 11
  %274 = lshr i32 %270, 6
  %275 = and i32 %274, 31
  %276 = and i32 %270, 31
  %277 = lshr i32 %270, 15
  %278 = add nuw nsw i32 %277, %273
  %279 = lshr i32 %275, 4
  %280 = add nuw nsw i32 %279, %275
  %281 = lshr i32 %276, 4
  %282 = add nuw nsw i32 %281, %276
  %283 = mul nuw nsw i32 %278, %14
  %284 = lshr i32 %283, 8
  %285 = mul nuw nsw i32 %280, %14
  %286 = lshr i32 %285, 8
  %287 = mul nuw nsw i32 %282, %14
  %288 = lshr i32 %287, 8
  %289 = lshr i32 %268, 16
  %290 = and i32 %289, 255
  %291 = lshr i32 %268, 8
  %292 = and i32 %291, 255
  %293 = and i32 %268, 255
  %294 = sub nsw i32 %10, %290
  %295 = mul nsw i32 %284, %294
  %296 = lshr i32 %295, 5
  %297 = add nuw nsw i32 %296, %289
  %298 = sub nsw i32 %12, %292
  %299 = mul nsw i32 %286, %298
  %300 = lshr i32 %299, 5
  %301 = add nuw nsw i32 %300, %292
  %302 = sub nsw i32 %13, %293
  %303 = mul nsw i32 %288, %302
  %304 = lshr i32 %303, 5
  %305 = add nuw nsw i32 %304, %293
  %306 = shl i32 %297, 16
  %307 = shl i32 %301, 8
  %308 = or i32 %305, %306
  %309 = or i32 %308, %307
  %310 = or i32 %309, -16777216
  br label %311

311:                                              ; preds = %264, %272
  %312 = phi i32 [ %310, %272 ], [ %268, %264 ]
  store i32 %312, i32* %265, align 4
  %313 = getelementptr inbounds i16, i16* %266, i64 1
  %314 = getelementptr inbounds i32, i32* %265, i64 1
  %315 = add nsw i32 %267, -1
  %316 = icmp sgt i32 %315, 0
  br i1 %316, label %264, label %317, !llvm.loop !9

317:                                              ; preds = %311, %258, %163, %5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z21blit_row_lcd16_opaquePjPKtjij(i32*, i16* nocapture readonly, i32, i32, i32) local_unnamed_addr #0 {
  %6 = icmp slt i32 %3, 1
  br i1 %6, label %203, label %7

7:                                                ; preds = %5
  %8 = lshr i32 %2, 16
  %9 = and i32 %8, 255
  %10 = lshr i32 %2, 8
  %11 = and i32 %10, 255
  %12 = and i32 %2, 255
  %13 = icmp sgt i32 %3, 3
  br i1 %13, label %14, label %152

14:                                               ; preds = %7
  %15 = ptrtoint i32* %0 to i64
  %16 = and i64 %15, 15
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %14
  %19 = bitcast i32* %0 to <2 x i64>*
  br label %72

20:                                               ; preds = %14, %61
  %21 = phi i32* [ %64, %61 ], [ %0, %14 ]
  %22 = phi i16* [ %63, %61 ], [ %1, %14 ]
  %23 = phi i32 [ %65, %61 ], [ %3, %14 ]
  %24 = load i32, i32* %21, align 4
  %25 = load i16, i16* %22, align 2
  %26 = zext i16 %25 to i32
  switch i16 %25, label %28 [
    i16 0, label %61
    i16 -1, label %27
  ]

27:                                               ; preds = %20
  br label %61

28:                                               ; preds = %20
  %29 = lshr i32 %26, 11
  %30 = lshr i32 %26, 6
  %31 = and i32 %30, 31
  %32 = and i32 %26, 31
  %33 = lshr i32 %26, 15
  %34 = add nuw nsw i32 %33, %29
  %35 = lshr i32 %31, 4
  %36 = add nuw nsw i32 %35, %31
  %37 = lshr i32 %32, 4
  %38 = add nuw nsw i32 %37, %32
  %39 = lshr i32 %24, 16
  %40 = and i32 %39, 255
  %41 = lshr i32 %24, 8
  %42 = and i32 %41, 255
  %43 = and i32 %24, 255
  %44 = sub nsw i32 %9, %40
  %45 = mul nsw i32 %34, %44
  %46 = lshr i32 %45, 5
  %47 = add nuw nsw i32 %46, %39
  %48 = sub nsw i32 %11, %42
  %49 = mul nsw i32 %36, %48
  %50 = lshr i32 %49, 5
  %51 = add nuw nsw i32 %50, %42
  %52 = sub nsw i32 %12, %43
  %53 = mul nsw i32 %38, %52
  %54 = lshr i32 %53, 5
  %55 = add nuw nsw i32 %54, %43
  %56 = shl i32 %47, 16
  %57 = shl i32 %51, 8
  %58 = or i32 %55, %56
  %59 = or i32 %58, %57
  %60 = or i32 %59, -16777216
  br label %61

61:                                               ; preds = %20, %27, %28
  %62 = phi i32 [ %4, %27 ], [ %60, %28 ], [ %24, %20 ]
  store i32 %62, i32* %21, align 4
  %63 = getelementptr inbounds i16, i16* %22, i64 1
  %64 = getelementptr inbounds i32, i32* %21, i64 1
  %65 = add nsw i32 %23, -1
  %66 = ptrtoint i32* %64 to i64
  %67 = and i64 %66, 15
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %20

69:                                               ; preds = %61
  %70 = bitcast i32* %64 to <2 x i64>*
  %71 = icmp sgt i32 %65, 3
  br i1 %71, label %72, label %146

72:                                               ; preds = %18, %69
  %73 = phi <2 x i64>* [ %19, %18 ], [ %70, %69 ]
  %74 = phi i16* [ %1, %18 ], [ %63, %69 ]
  %75 = phi i32 [ %3, %18 ], [ %65, %69 ]
  %76 = shl nuw nsw i32 %11, 8
  %77 = or i32 %12, %76
  %78 = shl nuw nsw i32 %9, 16
  %79 = or i32 %77, %78
  %80 = or i32 %79, -16777216
  %81 = insertelement <4 x i32> undef, i32 %80, i32 0
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %83 = bitcast <4 x i32> %82 to <16 x i8>
  %84 = shufflevector <16 x i8> %83, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %85 = bitcast <16 x i8> %84 to <8 x i16>
  br label %86

86:                                               ; preds = %72, %139
  %87 = phi i16* [ %74, %72 ], [ %141, %139 ]
  %88 = phi <2 x i64>* [ %73, %72 ], [ %140, %139 ]
  %89 = phi i32 [ %75, %72 ], [ %142, %139 ]
  %90 = bitcast i16* %87 to i64*
  %91 = load i64, i64* %90, align 1
  %92 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %91, i32 0
  %93 = bitcast <2 x i64> %92 to <8 x i16>
  %94 = icmp eq <8 x i16> %93, zeroinitializer
  %95 = sext <8 x i1> %94 to <8 x i16>
  %96 = bitcast <8 x i16> %95 to <16 x i8>
  %97 = icmp slt <16 x i8> %96, zeroinitializer
  %98 = bitcast <16 x i1> %97 to i16
  %99 = icmp eq i16 %98, -1
  br i1 %99, label %139, label %100

100:                                              ; preds = %86
  %101 = bitcast <2 x i64>* %88 to <16 x i8>*
  %102 = load <16 x i8>, <16 x i8>* %101, align 16
  %103 = shufflevector <8 x i16> %93, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %104 = bitcast <8 x i16> %103 to <2 x i64>
  %105 = bitcast <8 x i16> %103 to <4 x i32>
  %106 = shl <4 x i32> %105, <i32 5, i32 5, i32 5, i32 5>
  %107 = bitcast <4 x i32> %106 to <2 x i64>
  %108 = and <2 x i64> %107, <i64 8725724280061952, i64 8725724280061952>
  %109 = shl <4 x i32> %105, <i32 2, i32 2, i32 2, i32 2>
  %110 = bitcast <4 x i32> %109 to <2 x i64>
  %111 = and <2 x i64> %110, <i64 34084860468992, i64 34084860468992>
  %112 = and <2 x i64> %104, <i64 133143986207, i64 133143986207>
  %113 = or <2 x i64> %108, %112
  %114 = or <2 x i64> %113, %111
  %115 = bitcast <2 x i64> %114 to <16 x i8>
  %116 = shufflevector <16 x i8> %115, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %117 = shufflevector <16 x i8> %115, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %118 = bitcast <16 x i8> %116 to <8 x i16>
  %119 = lshr <8 x i16> %118, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %120 = add <8 x i16> %119, %118
  %121 = bitcast <16 x i8> %117 to <8 x i16>
  %122 = lshr <8 x i16> %121, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %123 = add <8 x i16> %122, %121
  %124 = shufflevector <16 x i8> %102, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %125 = shufflevector <16 x i8> %102, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %126 = bitcast <16 x i8> %124 to <8 x i16>
  %127 = sub <8 x i16> %85, %126
  %128 = mul <8 x i16> %127, %120
  %129 = bitcast <16 x i8> %125 to <8 x i16>
  %130 = sub <8 x i16> %85, %129
  %131 = mul <8 x i16> %130, %123
  %132 = ashr <8 x i16> %128, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %133 = ashr <8 x i16> %131, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %134 = add <8 x i16> %132, %126
  %135 = add <8 x i16> %133, %129
  %136 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %134, <8 x i16> %135) #12
  %137 = bitcast <16 x i8> %136 to <2 x i64>
  %138 = or <2 x i64> %137, <i64 -72057589759737856, i64 -72057589759737856>
  store <2 x i64> %138, <2 x i64>* %88, align 16
  br label %139

139:                                              ; preds = %86, %100
  %140 = getelementptr inbounds <2 x i64>, <2 x i64>* %88, i64 1
  %141 = getelementptr inbounds i16, i16* %87, i64 4
  %142 = add nsw i32 %89, -4
  %143 = icmp sgt i32 %142, 3
  br i1 %143, label %86, label %144

144:                                              ; preds = %139
  %145 = and i32 %75, 3
  br label %146

146:                                              ; preds = %69, %144
  %147 = phi i32 [ %65, %69 ], [ %145, %144 ]
  %148 = phi <2 x i64>* [ %70, %69 ], [ %140, %144 ]
  %149 = phi i16* [ %63, %69 ], [ %141, %144 ]
  %150 = bitcast <2 x i64>* %148 to i32*
  %151 = icmp sgt i32 %147, 0
  br i1 %151, label %152, label %203

152:                                              ; preds = %7, %146
  %153 = phi i32* [ %0, %7 ], [ %150, %146 ]
  %154 = phi i16* [ %1, %7 ], [ %149, %146 ]
  %155 = phi i32 [ %3, %7 ], [ %147, %146 ]
  br label %156

156:                                              ; preds = %152, %197
  %157 = phi i32* [ %200, %197 ], [ %153, %152 ]
  %158 = phi i16* [ %199, %197 ], [ %154, %152 ]
  %159 = phi i32 [ %201, %197 ], [ %155, %152 ]
  %160 = load i32, i32* %157, align 4
  %161 = load i16, i16* %158, align 2
  %162 = zext i16 %161 to i32
  switch i16 %161, label %164 [
    i16 0, label %197
    i16 -1, label %163
  ]

163:                                              ; preds = %156
  br label %197

164:                                              ; preds = %156
  %165 = lshr i32 %162, 11
  %166 = lshr i32 %162, 6
  %167 = and i32 %166, 31
  %168 = and i32 %162, 31
  %169 = lshr i32 %162, 15
  %170 = add nuw nsw i32 %169, %165
  %171 = lshr i32 %167, 4
  %172 = add nuw nsw i32 %171, %167
  %173 = lshr i32 %168, 4
  %174 = add nuw nsw i32 %173, %168
  %175 = lshr i32 %160, 16
  %176 = and i32 %175, 255
  %177 = lshr i32 %160, 8
  %178 = and i32 %177, 255
  %179 = and i32 %160, 255
  %180 = sub nsw i32 %9, %176
  %181 = mul nsw i32 %170, %180
  %182 = lshr i32 %181, 5
  %183 = add nuw nsw i32 %182, %175
  %184 = sub nsw i32 %11, %178
  %185 = mul nsw i32 %172, %184
  %186 = lshr i32 %185, 5
  %187 = add nuw nsw i32 %186, %178
  %188 = sub nsw i32 %12, %179
  %189 = mul nsw i32 %174, %188
  %190 = lshr i32 %189, 5
  %191 = add nuw nsw i32 %190, %179
  %192 = shl i32 %183, 16
  %193 = shl i32 %187, 8
  %194 = or i32 %191, %192
  %195 = or i32 %194, %193
  %196 = or i32 %195, -16777216
  br label %197

197:                                              ; preds = %156, %163, %164
  %198 = phi i32 [ %4, %163 ], [ %196, %164 ], [ %160, %156 ]
  store i32 %198, i32* %157, align 4
  %199 = getelementptr inbounds i16, i16* %158, i64 1
  %200 = getelementptr inbounds i32, i32* %157, i64 1
  %201 = add nsw i32 %159, -1
  %202 = icmp sgt i32 %201, 0
  br i1 %202, label %156, label %203

203:                                              ; preds = %197, %146, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkARGB32_BlitterC2ERK8SkPixmapRK7SkPaint(%class.SkARGB32_Blitter* nocapture, %class.SkPixmap* nocapture readonly dereferenceable(40), %class.SkPaint* dereferenceable(72)) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 0, i32 1
  %6 = bitcast %class.SkAutoMalloc* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false) #12
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV15SkRasterBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %7 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 1
  %8 = bitcast %class.SkPixmap* %7 to i8*
  %9 = bitcast %class.SkPixmap* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 16, i1 false) #12
  %10 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %12 = load %class.SkColorSpace*, %class.SkColorSpace** %11, align 8
  %13 = icmp eq %class.SkColorSpace* %12, null
  br i1 %13, label %17, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = atomicrmw add i32* %15, i32 1 monotonic
  br label %17

17:                                               ; preds = %3, %14
  store %class.SkColorSpace* %12, %class.SkColorSpace** %10, align 8
  %18 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 1, i32 2, i32 0, i32 1
  %19 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 2, i32 0, i32 1
  %20 = bitcast i32* %19 to i64*
  %21 = bitcast i32* %18 to i64*
  %22 = load i64, i64* %20, align 8
  store i64 %22, i64* %21, align 8
  %23 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 1, i32 2, i32 1
  %24 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 2, i32 1
  %25 = bitcast %struct.SkISize* %24 to i64*
  %26 = bitcast %struct.SkISize* %23 to i64*
  %27 = load i64, i64* %25, align 8
  store i64 %27, i64* %26, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV16SkARGB32_Blitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %28 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %2, i64 0, i32 5
  %29 = tail call i32 @_ZNK8SkRGBA4fIL11SkAlphaType3EE9toSkColorEv(%struct.SkRGBA4f* %28) #12
  %30 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 1
  store i32 %29, i32* %30, align 8
  %31 = lshr i32 %29, 24
  %32 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 3
  store i32 %31, i32* %32, align 8
  %33 = add nuw nsw i32 %31, 1
  %34 = lshr i32 %29, 16
  %35 = and i32 %34, 255
  %36 = mul nuw nsw i32 %35, %33
  %37 = lshr i32 %36, 8
  %38 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 4
  store i32 %37, i32* %38, align 4
  %39 = lshr i32 %29, 8
  %40 = and i32 %39, 255
  %41 = mul nuw nsw i32 %40, %33
  %42 = lshr i32 %41, 8
  %43 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 5
  store i32 %42, i32* %43, align 8
  %44 = and i32 %29, 255
  %45 = mul nuw nsw i32 %33, %44
  %46 = lshr i32 %45, 8
  %47 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 6
  store i32 %46, i32* %47, align 4
  %48 = and i32 %29, -16777216
  %49 = shl nuw nsw i32 %37, 16
  %50 = and i32 %41, 130816
  %51 = or i32 %50, %48
  %52 = or i32 %51, %46
  %53 = or i32 %52, %49
  %54 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 2
  store i32 %53, i32* %54, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden %class.SkPixmap* @_ZN16SkARGB32_Blitter17justAnOpaqueColorEPj(%class.SkARGB32_Blitter* readonly, i32* nocapture) unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 3
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 255
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 4
  store i32 %8, i32* %1, align 4
  %9 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 1
  br label %10

10:                                               ; preds = %2, %6
  %11 = phi %class.SkPixmap* [ %9, %6 ], [ null, %2 ]
  ret %class.SkPixmap* %11
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkARGB32_Blitter5blitHEiii(%class.SkARGB32_Blitter* nocapture readonly, i32, i32, i32) unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = sext i32 %2 to i64
  %8 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 1, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = mul i64 %9, %7
  %11 = getelementptr inbounds i8, i8* %6, i64 %10
  %12 = shl i32 %1, 2
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i8, i8* %11, i64 %13
  %15 = bitcast i8* %14 to i32*
  %16 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  tail call void @_ZN9SkBlitRow7Color32EPjPKjij(i32* %15, i32* %15, i32 %3, i32 %17) #12
  ret void
}

declare void @_ZN9SkBlitRow7Color32EPjPKjij(i32*, i32*, i32, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkARGB32_Blitter9blitAntiHEiiPKhPKs(%class.SkARGB32_Blitter* nocapture readonly, i32, i32, i8* nocapture readonly, i16* nocapture readonly) unnamed_addr #2 align 2 {
  %6 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = load i16, i16* %4, align 2
  %13 = icmp slt i16 %12, 1
  br i1 %13, label %58, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 1, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 1, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = sext i32 %2 to i64
  %20 = mul i64 %18, %19
  %21 = getelementptr inbounds i8, i8* %16, i64 %20
  %22 = shl i32 %1, 2
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %21, i64 %23
  %25 = bitcast i8* %24 to i32*
  %26 = and i32 %11, 16711935
  %27 = lshr i32 %11, 8
  %28 = and i32 %27, 16711935
  br label %29

29:                                               ; preds = %14, %51
  %30 = phi i16 [ %12, %14 ], [ %56, %51 ]
  %31 = phi i8* [ %3, %14 ], [ %54, %51 ]
  %32 = phi i32* [ %25, %14 ], [ %55, %51 ]
  %33 = phi i16* [ %4, %14 ], [ %53, %51 ]
  %34 = sext i16 %30 to i32
  %35 = load i8, i8* %31, align 1
  %36 = zext i8 %35 to i32
  %37 = icmp eq i8 %35, 0
  br i1 %37, label %51, label %38

38:                                               ; preds = %29
  %39 = and i32 %7, %36
  %40 = icmp eq i32 %39, 255
  br i1 %40, label %41, label %43

41:                                               ; preds = %38
  %42 = load void (i32*, i32, i32)*, void (i32*, i32, i32)** @_ZN6SkOpts8memset32E, align 8
  tail call void %42(i32* %32, i32 %11, i32 %34) #12
  br label %51

43:                                               ; preds = %38
  %44 = add nuw nsw i32 %36, 1
  %45 = mul i32 %44, %26
  %46 = lshr i32 %45, 8
  %47 = mul i32 %44, %28
  %48 = and i32 %46, 16711935
  %49 = and i32 %47, -16711936
  %50 = or i32 %48, %49
  tail call void @_ZN9SkBlitRow7Color32EPjPKjij(i32* %32, i32* %32, i32 %34, i32 %50) #12
  br label %51

51:                                               ; preds = %43, %41, %29
  %52 = sext i16 %30 to i64
  %53 = getelementptr inbounds i16, i16* %33, i64 %52
  %54 = getelementptr inbounds i8, i8* %31, i64 %52
  %55 = getelementptr inbounds i32, i32* %32, i64 %52
  %56 = load i16, i16* %53, align 2
  %57 = icmp slt i16 %56, 1
  br i1 %57, label %58, label %29

58:                                               ; preds = %51, %9, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN16SkARGB32_Blitter10blitAntiH2Eiijj(%class.SkARGB32_Blitter* nocapture readonly, i32, i32, i32, i32) unnamed_addr #3 align 2 {
  %6 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = sext i32 %2 to i64
  %9 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 1, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = mul i64 %10, %8
  %12 = getelementptr inbounds i8, i8* %7, i64 %11
  %13 = shl i32 %1, 2
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %12, i64 %14
  %16 = bitcast i8* %15 to i32*
  %17 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = load i32, i32* %16, align 4
  %20 = add i32 %3, 1
  %21 = lshr i32 %18, 24
  %22 = mul i32 %21, %20
  %23 = sub i32 65535, %22
  %24 = lshr i32 %23, 8
  %25 = add i32 %24, %23
  %26 = lshr i32 %25, 8
  %27 = and i32 %18, 16711935
  %28 = mul i32 %27, %20
  %29 = lshr i32 %18, 8
  %30 = and i32 %29, 16711935
  %31 = mul i32 %30, %20
  %32 = and i32 %19, 16711935
  %33 = mul i32 %26, %32
  %34 = lshr i32 %19, 8
  %35 = and i32 %34, 16711935
  %36 = mul i32 %26, %35
  %37 = add i32 %33, %28
  %38 = lshr i32 %37, 8
  %39 = and i32 %38, 16711935
  %40 = add i32 %36, %31
  %41 = and i32 %40, -16711936
  %42 = or i32 %39, %41
  store i32 %42, i32* %16, align 4
  %43 = load i32, i32* %17, align 4
  %44 = getelementptr inbounds i8, i8* %15, i64 4
  %45 = bitcast i8* %44 to i32*
  %46 = load i32, i32* %45, align 4
  %47 = add i32 %4, 1
  %48 = lshr i32 %43, 24
  %49 = mul i32 %48, %47
  %50 = sub i32 65535, %49
  %51 = lshr i32 %50, 8
  %52 = add i32 %51, %50
  %53 = lshr i32 %52, 8
  %54 = and i32 %43, 16711935
  %55 = mul i32 %54, %47
  %56 = lshr i32 %43, 8
  %57 = and i32 %56, 16711935
  %58 = mul i32 %57, %47
  %59 = and i32 %46, 16711935
  %60 = mul i32 %53, %59
  %61 = lshr i32 %46, 8
  %62 = and i32 %61, 16711935
  %63 = mul i32 %53, %62
  %64 = add i32 %60, %55
  %65 = lshr i32 %64, 8
  %66 = and i32 %65, 16711935
  %67 = add i32 %63, %58
  %68 = and i32 %67, -16711936
  %69 = or i32 %66, %68
  store i32 %69, i32* %45, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN16SkARGB32_Blitter10blitAntiV2Eiijj(%class.SkARGB32_Blitter* nocapture readonly, i32, i32, i32, i32) unnamed_addr #3 align 2 {
  %6 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = sext i32 %2 to i64
  %9 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 1, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = mul i64 %10, %8
  %12 = getelementptr inbounds i8, i8* %7, i64 %11
  %13 = shl i32 %1, 2
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %12, i64 %14
  %16 = bitcast i8* %15 to i32*
  %17 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = load i32, i32* %16, align 4
  %20 = add i32 %3, 1
  %21 = lshr i32 %18, 24
  %22 = mul i32 %21, %20
  %23 = sub i32 65535, %22
  %24 = lshr i32 %23, 8
  %25 = add i32 %24, %23
  %26 = lshr i32 %25, 8
  %27 = and i32 %18, 16711935
  %28 = mul i32 %27, %20
  %29 = lshr i32 %18, 8
  %30 = and i32 %29, 16711935
  %31 = mul i32 %30, %20
  %32 = and i32 %19, 16711935
  %33 = mul i32 %26, %32
  %34 = lshr i32 %19, 8
  %35 = and i32 %34, 16711935
  %36 = mul i32 %26, %35
  %37 = add i32 %33, %28
  %38 = lshr i32 %37, 8
  %39 = and i32 %38, 16711935
  %40 = add i32 %36, %31
  %41 = and i32 %40, -16711936
  %42 = or i32 %39, %41
  store i32 %42, i32* %16, align 4
  %43 = load i64, i64* %9, align 8
  %44 = getelementptr inbounds i8, i8* %15, i64 %43
  %45 = bitcast i8* %44 to i32*
  %46 = load i32, i32* %17, align 4
  %47 = load i32, i32* %45, align 4
  %48 = add i32 %4, 1
  %49 = lshr i32 %46, 24
  %50 = mul i32 %49, %48
  %51 = sub i32 65535, %50
  %52 = lshr i32 %51, 8
  %53 = add i32 %52, %51
  %54 = lshr i32 %53, 8
  %55 = and i32 %46, 16711935
  %56 = mul i32 %55, %48
  %57 = lshr i32 %46, 8
  %58 = and i32 %57, 16711935
  %59 = mul i32 %58, %48
  %60 = and i32 %47, 16711935
  %61 = mul i32 %54, %60
  %62 = lshr i32 %47, 8
  %63 = and i32 %62, 16711935
  %64 = mul i32 %54, %63
  %65 = add i32 %61, %56
  %66 = lshr i32 %65, 8
  %67 = and i32 %66, 16711935
  %68 = add i32 %64, %59
  %69 = and i32 %68, -16711936
  %70 = or i32 %67, %69
  store i32 %70, i32* %45, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkARGB32_Blitter8blitMaskERK6SkMaskRK7SkIRect(%class.SkARGB32_Blitter* nocapture readonly, %struct.SkMask* dereferenceable(32), %struct.SkIRect* nocapture readonly dereferenceable(16)) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %856, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = tail call fastcc zeroext i1 @_ZL10blit_colorRK8SkPixmapRK6SkMaskRK7SkIRectj(%class.SkPixmap* dereferenceable(40) %8, %struct.SkMask* dereferenceable(32) %1, %struct.SkIRect* dereferenceable(16) %2, i32 %10)
  br i1 %11, label %856, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 3
  %14 = load i8, i8* %13, align 4
  switch i8 %14, label %855 [
    i8 0, label %15
    i8 3, label %798
  ]

15:                                               ; preds = %12
  %16 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = load i32, i32* %4, align 8
  %19 = sub i32 256, %18
  %20 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 1, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 3
  %31 = load i32, i32* %30, align 4
  %32 = sub i32 %31, %23
  %33 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = sub nsw i32 %21, %25
  %36 = ashr i32 %35, 3
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i8, i8* %34, i64 %37
  %39 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = sub nsw i32 %23, %40
  %42 = mul i32 %41, %27
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds i8, i8* %38, i64 %43
  %45 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %8, i64 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = sext i32 %23 to i64
  %48 = mul i64 %29, %47
  %49 = getelementptr inbounds i8, i8* %46, i64 %48
  %50 = shl i32 %21, 2
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* %49, i64 %51
  %53 = bitcast i8* %52 to i32*
  %54 = icmp eq i32 %21, %25
  %55 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 2
  %56 = load i32, i32* %55, align 4
  br i1 %54, label %57, label %211

57:                                               ; preds = %15
  %58 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 2
  %59 = load i32, i32* %58, align 8
  %60 = icmp eq i32 %56, %59
  br i1 %60, label %61, label %211

61:                                               ; preds = %57
  %62 = add i32 %27, -1
  %63 = zext i32 %62 to i64
  %64 = add nuw nsw i64 %63, 1
  br label %65

65:                                               ; preds = %206, %61
  %66 = phi i32 [ %209, %206 ], [ %32, %61 ]
  %67 = phi i8* [ %207, %206 ], [ %44, %61 ]
  %68 = phi i8* [ %208, %206 ], [ %52, %61 ]
  %69 = bitcast i8* %68 to i32*
  br label %70

70:                                               ; preds = %202, %65
  %71 = phi i8* [ %67, %65 ], [ %74, %202 ]
  %72 = phi i32* [ %69, %65 ], [ %203, %202 ]
  %73 = phi i32 [ %27, %65 ], [ %204, %202 ]
  %74 = getelementptr inbounds i8, i8* %71, i64 1
  %75 = load i8, i8* %71, align 1
  %76 = zext i8 %75 to i32
  %77 = icmp slt i8 %75, 0
  br i1 %77, label %78, label %90

78:                                               ; preds = %70
  %79 = load i32, i32* %72, align 4
  %80 = and i32 %79, 16711935
  %81 = mul i32 %80, %19
  %82 = lshr i32 %81, 8
  %83 = lshr i32 %79, 8
  %84 = and i32 %83, 16711935
  %85 = mul i32 %84, %19
  %86 = and i32 %82, 16711935
  %87 = and i32 %85, -16711936
  %88 = or i32 %86, %87
  %89 = add i32 %88, %17
  store i32 %89, i32* %72, align 4
  br label %90

90:                                               ; preds = %78, %70
  %91 = and i32 %76, 64
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %106, label %93

93:                                               ; preds = %90
  %94 = getelementptr inbounds i32, i32* %72, i64 1
  %95 = load i32, i32* %94, align 4
  %96 = and i32 %95, 16711935
  %97 = mul i32 %96, %19
  %98 = lshr i32 %97, 8
  %99 = lshr i32 %95, 8
  %100 = and i32 %99, 16711935
  %101 = mul i32 %100, %19
  %102 = and i32 %98, 16711935
  %103 = and i32 %101, -16711936
  %104 = or i32 %102, %103
  %105 = add i32 %104, %17
  store i32 %105, i32* %94, align 4
  br label %106

106:                                              ; preds = %93, %90
  %107 = and i32 %76, 32
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %122, label %109

109:                                              ; preds = %106
  %110 = getelementptr inbounds i32, i32* %72, i64 2
  %111 = load i32, i32* %110, align 4
  %112 = and i32 %111, 16711935
  %113 = mul i32 %112, %19
  %114 = lshr i32 %113, 8
  %115 = lshr i32 %111, 8
  %116 = and i32 %115, 16711935
  %117 = mul i32 %116, %19
  %118 = and i32 %114, 16711935
  %119 = and i32 %117, -16711936
  %120 = or i32 %118, %119
  %121 = add i32 %120, %17
  store i32 %121, i32* %110, align 4
  br label %122

122:                                              ; preds = %109, %106
  %123 = and i32 %76, 16
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %138, label %125

125:                                              ; preds = %122
  %126 = getelementptr inbounds i32, i32* %72, i64 3
  %127 = load i32, i32* %126, align 4
  %128 = and i32 %127, 16711935
  %129 = mul i32 %128, %19
  %130 = lshr i32 %129, 8
  %131 = lshr i32 %127, 8
  %132 = and i32 %131, 16711935
  %133 = mul i32 %132, %19
  %134 = and i32 %130, 16711935
  %135 = and i32 %133, -16711936
  %136 = or i32 %134, %135
  %137 = add i32 %136, %17
  store i32 %137, i32* %126, align 4
  br label %138

138:                                              ; preds = %125, %122
  %139 = and i32 %76, 8
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %154, label %141

141:                                              ; preds = %138
  %142 = getelementptr inbounds i32, i32* %72, i64 4
  %143 = load i32, i32* %142, align 4
  %144 = and i32 %143, 16711935
  %145 = mul i32 %144, %19
  %146 = lshr i32 %145, 8
  %147 = lshr i32 %143, 8
  %148 = and i32 %147, 16711935
  %149 = mul i32 %148, %19
  %150 = and i32 %146, 16711935
  %151 = and i32 %149, -16711936
  %152 = or i32 %150, %151
  %153 = add i32 %152, %17
  store i32 %153, i32* %142, align 4
  br label %154

154:                                              ; preds = %141, %138
  %155 = and i32 %76, 4
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %170, label %157

157:                                              ; preds = %154
  %158 = getelementptr inbounds i32, i32* %72, i64 5
  %159 = load i32, i32* %158, align 4
  %160 = and i32 %159, 16711935
  %161 = mul i32 %160, %19
  %162 = lshr i32 %161, 8
  %163 = lshr i32 %159, 8
  %164 = and i32 %163, 16711935
  %165 = mul i32 %164, %19
  %166 = and i32 %162, 16711935
  %167 = and i32 %165, -16711936
  %168 = or i32 %166, %167
  %169 = add i32 %168, %17
  store i32 %169, i32* %158, align 4
  br label %170

170:                                              ; preds = %157, %154
  %171 = and i32 %76, 2
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %186, label %173

173:                                              ; preds = %170
  %174 = getelementptr inbounds i32, i32* %72, i64 6
  %175 = load i32, i32* %174, align 4
  %176 = and i32 %175, 16711935
  %177 = mul i32 %176, %19
  %178 = lshr i32 %177, 8
  %179 = lshr i32 %175, 8
  %180 = and i32 %179, 16711935
  %181 = mul i32 %180, %19
  %182 = and i32 %178, 16711935
  %183 = and i32 %181, -16711936
  %184 = or i32 %182, %183
  %185 = add i32 %184, %17
  store i32 %185, i32* %174, align 4
  br label %186

186:                                              ; preds = %173, %170
  %187 = and i32 %76, 1
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %202, label %189

189:                                              ; preds = %186
  %190 = getelementptr inbounds i32, i32* %72, i64 7
  %191 = load i32, i32* %190, align 4
  %192 = and i32 %191, 16711935
  %193 = mul i32 %192, %19
  %194 = lshr i32 %193, 8
  %195 = lshr i32 %191, 8
  %196 = and i32 %195, 16711935
  %197 = mul i32 %196, %19
  %198 = and i32 %194, 16711935
  %199 = and i32 %197, -16711936
  %200 = or i32 %198, %199
  %201 = add i32 %200, %17
  store i32 %201, i32* %190, align 4
  br label %202

202:                                              ; preds = %189, %186
  %203 = getelementptr inbounds i32, i32* %72, i64 8
  %204 = add i32 %73, -1
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %206, label %70

206:                                              ; preds = %202
  %207 = getelementptr i8, i8* %67, i64 %64
  %208 = getelementptr inbounds i8, i8* %68, i64 %29
  %209 = add i32 %66, -1
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %856, label %65

211:                                              ; preds = %57, %15
  %212 = sub nsw i32 %56, %25
  %213 = and i32 %35, 7
  %214 = lshr i32 255, %213
  %215 = and i32 %212, 7
  %216 = sub nuw nsw i32 8, %215
  %217 = shl i32 255, %216
  %218 = and i32 %217, 255
  %219 = ashr i32 %212, 3
  %220 = add nsw i32 %35, 7
  %221 = ashr i32 %220, 3
  %222 = sub nsw i32 0, %221
  %223 = icmp eq i32 %218, 0
  %224 = select i1 %223, i32 255, i32 %218
  %225 = icmp eq i32 %213, 0
  %226 = zext i1 %225 to i32
  %227 = sub nsw i32 %222, %226
  %228 = add nsw i32 %227, %219
  %229 = zext i1 %223 to i32
  %230 = sub nsw i32 %228, %229
  %231 = zext i32 %213 to i64
  %232 = sub nsw i64 0, %231
  %233 = getelementptr inbounds i32, i32* %53, i64 %232
  %234 = icmp slt i32 %230, 0
  br i1 %234, label %238, label %235

235:                                              ; preds = %211
  %236 = icmp eq i32 %230, 0
  %237 = zext i32 %27 to i64
  br label %381

238:                                              ; preds = %211
  %239 = and i32 %224, %214
  %240 = zext i32 %27 to i64
  br label %241

241:                                              ; preds = %374, %238
  %242 = phi i32 [ %32, %238 ], [ %379, %374 ]
  %243 = phi i8* [ %44, %238 ], [ %375, %374 ]
  %244 = phi i32* [ %233, %238 ], [ %378, %374 ]
  %245 = load i8, i8* %243, align 1
  %246 = zext i8 %245 to i32
  %247 = and i32 %239, %246
  %248 = trunc i32 %247 to i8
  %249 = icmp slt i8 %248, 0
  br i1 %249, label %250, label %262

250:                                              ; preds = %241
  %251 = load i32, i32* %244, align 4
  %252 = and i32 %251, 16711935
  %253 = mul i32 %252, %19
  %254 = lshr i32 %253, 8
  %255 = lshr i32 %251, 8
  %256 = and i32 %255, 16711935
  %257 = mul i32 %256, %19
  %258 = and i32 %254, 16711935
  %259 = and i32 %257, -16711936
  %260 = or i32 %258, %259
  %261 = add i32 %260, %17
  store i32 %261, i32* %244, align 4
  br label %262

262:                                              ; preds = %250, %241
  %263 = and i32 %247, 64
  %264 = icmp eq i32 %263, 0
  br i1 %264, label %278, label %265

265:                                              ; preds = %262
  %266 = getelementptr inbounds i32, i32* %244, i64 1
  %267 = load i32, i32* %266, align 4
  %268 = and i32 %267, 16711935
  %269 = mul i32 %268, %19
  %270 = lshr i32 %269, 8
  %271 = lshr i32 %267, 8
  %272 = and i32 %271, 16711935
  %273 = mul i32 %272, %19
  %274 = and i32 %270, 16711935
  %275 = and i32 %273, -16711936
  %276 = or i32 %274, %275
  %277 = add i32 %276, %17
  store i32 %277, i32* %266, align 4
  br label %278

278:                                              ; preds = %265, %262
  %279 = and i32 %247, 32
  %280 = icmp eq i32 %279, 0
  br i1 %280, label %294, label %281

281:                                              ; preds = %278
  %282 = getelementptr inbounds i32, i32* %244, i64 2
  %283 = load i32, i32* %282, align 4
  %284 = and i32 %283, 16711935
  %285 = mul i32 %284, %19
  %286 = lshr i32 %285, 8
  %287 = lshr i32 %283, 8
  %288 = and i32 %287, 16711935
  %289 = mul i32 %288, %19
  %290 = and i32 %286, 16711935
  %291 = and i32 %289, -16711936
  %292 = or i32 %290, %291
  %293 = add i32 %292, %17
  store i32 %293, i32* %282, align 4
  br label %294

294:                                              ; preds = %281, %278
  %295 = and i32 %247, 16
  %296 = icmp eq i32 %295, 0
  br i1 %296, label %310, label %297

297:                                              ; preds = %294
  %298 = getelementptr inbounds i32, i32* %244, i64 3
  %299 = load i32, i32* %298, align 4
  %300 = and i32 %299, 16711935
  %301 = mul i32 %300, %19
  %302 = lshr i32 %301, 8
  %303 = lshr i32 %299, 8
  %304 = and i32 %303, 16711935
  %305 = mul i32 %304, %19
  %306 = and i32 %302, 16711935
  %307 = and i32 %305, -16711936
  %308 = or i32 %306, %307
  %309 = add i32 %308, %17
  store i32 %309, i32* %298, align 4
  br label %310

310:                                              ; preds = %297, %294
  %311 = and i32 %247, 8
  %312 = icmp eq i32 %311, 0
  br i1 %312, label %326, label %313

313:                                              ; preds = %310
  %314 = getelementptr inbounds i32, i32* %244, i64 4
  %315 = load i32, i32* %314, align 4
  %316 = and i32 %315, 16711935
  %317 = mul i32 %316, %19
  %318 = lshr i32 %317, 8
  %319 = lshr i32 %315, 8
  %320 = and i32 %319, 16711935
  %321 = mul i32 %320, %19
  %322 = and i32 %318, 16711935
  %323 = and i32 %321, -16711936
  %324 = or i32 %322, %323
  %325 = add i32 %324, %17
  store i32 %325, i32* %314, align 4
  br label %326

326:                                              ; preds = %313, %310
  %327 = and i32 %247, 4
  %328 = icmp eq i32 %327, 0
  br i1 %328, label %342, label %329

329:                                              ; preds = %326
  %330 = getelementptr inbounds i32, i32* %244, i64 5
  %331 = load i32, i32* %330, align 4
  %332 = and i32 %331, 16711935
  %333 = mul i32 %332, %19
  %334 = lshr i32 %333, 8
  %335 = lshr i32 %331, 8
  %336 = and i32 %335, 16711935
  %337 = mul i32 %336, %19
  %338 = and i32 %334, 16711935
  %339 = and i32 %337, -16711936
  %340 = or i32 %338, %339
  %341 = add i32 %340, %17
  store i32 %341, i32* %330, align 4
  br label %342

342:                                              ; preds = %329, %326
  %343 = and i32 %247, 2
  %344 = icmp eq i32 %343, 0
  br i1 %344, label %358, label %345

345:                                              ; preds = %342
  %346 = getelementptr inbounds i32, i32* %244, i64 6
  %347 = load i32, i32* %346, align 4
  %348 = and i32 %347, 16711935
  %349 = mul i32 %348, %19
  %350 = lshr i32 %349, 8
  %351 = lshr i32 %347, 8
  %352 = and i32 %351, 16711935
  %353 = mul i32 %352, %19
  %354 = and i32 %350, 16711935
  %355 = and i32 %353, -16711936
  %356 = or i32 %354, %355
  %357 = add i32 %356, %17
  store i32 %357, i32* %346, align 4
  br label %358

358:                                              ; preds = %345, %342
  %359 = and i32 %247, 1
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %374, label %361

361:                                              ; preds = %358
  %362 = getelementptr inbounds i32, i32* %244, i64 7
  %363 = load i32, i32* %362, align 4
  %364 = and i32 %363, 16711935
  %365 = mul i32 %364, %19
  %366 = lshr i32 %365, 8
  %367 = lshr i32 %363, 8
  %368 = and i32 %367, 16711935
  %369 = mul i32 %368, %19
  %370 = and i32 %366, 16711935
  %371 = and i32 %369, -16711936
  %372 = or i32 %370, %371
  %373 = add i32 %372, %17
  store i32 %373, i32* %362, align 4
  br label %374

374:                                              ; preds = %361, %358
  %375 = getelementptr inbounds i8, i8* %243, i64 %240
  %376 = bitcast i32* %244 to i8*
  %377 = getelementptr inbounds i8, i8* %376, i64 %29
  %378 = bitcast i8* %377 to i32*
  %379 = add i32 %242, -1
  %380 = icmp eq i32 %379, 0
  br i1 %380, label %856, label %241

381:                                              ; preds = %791, %235
  %382 = phi i32 [ %796, %791 ], [ %32, %235 ]
  %383 = phi i8* [ %792, %791 ], [ %44, %235 ]
  %384 = phi i32* [ %795, %791 ], [ %233, %235 ]
  %385 = load i8, i8* %383, align 1
  %386 = zext i8 %385 to i32
  %387 = and i32 %214, %386
  %388 = trunc i32 %387 to i8
  %389 = icmp slt i8 %388, 0
  br i1 %389, label %390, label %402

390:                                              ; preds = %381
  %391 = load i32, i32* %384, align 4
  %392 = and i32 %391, 16711935
  %393 = mul i32 %392, %19
  %394 = lshr i32 %393, 8
  %395 = lshr i32 %391, 8
  %396 = and i32 %395, 16711935
  %397 = mul i32 %396, %19
  %398 = and i32 %394, 16711935
  %399 = and i32 %397, -16711936
  %400 = or i32 %398, %399
  %401 = add i32 %400, %17
  store i32 %401, i32* %384, align 4
  br label %402

402:                                              ; preds = %390, %381
  %403 = and i32 %387, 64
  %404 = icmp eq i32 %403, 0
  br i1 %404, label %418, label %405

405:                                              ; preds = %402
  %406 = getelementptr inbounds i32, i32* %384, i64 1
  %407 = load i32, i32* %406, align 4
  %408 = and i32 %407, 16711935
  %409 = mul i32 %408, %19
  %410 = lshr i32 %409, 8
  %411 = lshr i32 %407, 8
  %412 = and i32 %411, 16711935
  %413 = mul i32 %412, %19
  %414 = and i32 %410, 16711935
  %415 = and i32 %413, -16711936
  %416 = or i32 %414, %415
  %417 = add i32 %416, %17
  store i32 %417, i32* %406, align 4
  br label %418

418:                                              ; preds = %405, %402
  %419 = and i32 %387, 32
  %420 = icmp eq i32 %419, 0
  br i1 %420, label %434, label %421

421:                                              ; preds = %418
  %422 = getelementptr inbounds i32, i32* %384, i64 2
  %423 = load i32, i32* %422, align 4
  %424 = and i32 %423, 16711935
  %425 = mul i32 %424, %19
  %426 = lshr i32 %425, 8
  %427 = lshr i32 %423, 8
  %428 = and i32 %427, 16711935
  %429 = mul i32 %428, %19
  %430 = and i32 %426, 16711935
  %431 = and i32 %429, -16711936
  %432 = or i32 %430, %431
  %433 = add i32 %432, %17
  store i32 %433, i32* %422, align 4
  br label %434

434:                                              ; preds = %421, %418
  %435 = and i32 %387, 16
  %436 = icmp eq i32 %435, 0
  br i1 %436, label %450, label %437

437:                                              ; preds = %434
  %438 = getelementptr inbounds i32, i32* %384, i64 3
  %439 = load i32, i32* %438, align 4
  %440 = and i32 %439, 16711935
  %441 = mul i32 %440, %19
  %442 = lshr i32 %441, 8
  %443 = lshr i32 %439, 8
  %444 = and i32 %443, 16711935
  %445 = mul i32 %444, %19
  %446 = and i32 %442, 16711935
  %447 = and i32 %445, -16711936
  %448 = or i32 %446, %447
  %449 = add i32 %448, %17
  store i32 %449, i32* %438, align 4
  br label %450

450:                                              ; preds = %437, %434
  %451 = and i32 %387, 8
  %452 = icmp eq i32 %451, 0
  br i1 %452, label %466, label %453

453:                                              ; preds = %450
  %454 = getelementptr inbounds i32, i32* %384, i64 4
  %455 = load i32, i32* %454, align 4
  %456 = and i32 %455, 16711935
  %457 = mul i32 %456, %19
  %458 = lshr i32 %457, 8
  %459 = lshr i32 %455, 8
  %460 = and i32 %459, 16711935
  %461 = mul i32 %460, %19
  %462 = and i32 %458, 16711935
  %463 = and i32 %461, -16711936
  %464 = or i32 %462, %463
  %465 = add i32 %464, %17
  store i32 %465, i32* %454, align 4
  br label %466

466:                                              ; preds = %453, %450
  %467 = and i32 %387, 4
  %468 = icmp eq i32 %467, 0
  br i1 %468, label %482, label %469

469:                                              ; preds = %466
  %470 = getelementptr inbounds i32, i32* %384, i64 5
  %471 = load i32, i32* %470, align 4
  %472 = and i32 %471, 16711935
  %473 = mul i32 %472, %19
  %474 = lshr i32 %473, 8
  %475 = lshr i32 %471, 8
  %476 = and i32 %475, 16711935
  %477 = mul i32 %476, %19
  %478 = and i32 %474, 16711935
  %479 = and i32 %477, -16711936
  %480 = or i32 %478, %479
  %481 = add i32 %480, %17
  store i32 %481, i32* %470, align 4
  br label %482

482:                                              ; preds = %469, %466
  %483 = and i32 %387, 2
  %484 = icmp eq i32 %483, 0
  br i1 %484, label %498, label %485

485:                                              ; preds = %482
  %486 = getelementptr inbounds i32, i32* %384, i64 6
  %487 = load i32, i32* %486, align 4
  %488 = and i32 %487, 16711935
  %489 = mul i32 %488, %19
  %490 = lshr i32 %489, 8
  %491 = lshr i32 %487, 8
  %492 = and i32 %491, 16711935
  %493 = mul i32 %492, %19
  %494 = and i32 %490, 16711935
  %495 = and i32 %493, -16711936
  %496 = or i32 %494, %495
  %497 = add i32 %496, %17
  store i32 %497, i32* %486, align 4
  br label %498

498:                                              ; preds = %485, %482
  %499 = and i32 %386, 1
  %500 = icmp eq i32 %499, 0
  br i1 %500, label %514, label %501

501:                                              ; preds = %498
  %502 = getelementptr inbounds i32, i32* %384, i64 7
  %503 = load i32, i32* %502, align 4
  %504 = and i32 %503, 16711935
  %505 = mul i32 %504, %19
  %506 = lshr i32 %505, 8
  %507 = lshr i32 %503, 8
  %508 = and i32 %507, 16711935
  %509 = mul i32 %508, %19
  %510 = and i32 %506, 16711935
  %511 = and i32 %509, -16711936
  %512 = or i32 %510, %511
  %513 = add i32 %512, %17
  store i32 %513, i32* %502, align 4
  br label %514

514:                                              ; preds = %501, %498
  %515 = getelementptr inbounds i8, i8* %383, i64 1
  %516 = getelementptr inbounds i32, i32* %384, i64 8
  %517 = load i8, i8* %515, align 1
  %518 = zext i8 %517 to i32
  br i1 %236, label %660, label %519

519:                                              ; preds = %514, %652
  %520 = phi i32 [ %657, %652 ], [ %518, %514 ]
  %521 = phi i8 [ %656, %652 ], [ %517, %514 ]
  %522 = phi i32 [ %526, %652 ], [ %230, %514 ]
  %523 = phi i32* [ %654, %652 ], [ %516, %514 ]
  %524 = phi i8* [ %653, %652 ], [ %515, %514 ]
  %525 = phi i32* [ %523, %652 ], [ %384, %514 ]
  %526 = add nsw i32 %522, -1
  %527 = icmp slt i8 %521, 0
  br i1 %527, label %528, label %540

528:                                              ; preds = %519
  %529 = load i32, i32* %523, align 4
  %530 = and i32 %529, 16711935
  %531 = mul i32 %530, %19
  %532 = lshr i32 %531, 8
  %533 = lshr i32 %529, 8
  %534 = and i32 %533, 16711935
  %535 = mul i32 %534, %19
  %536 = and i32 %532, 16711935
  %537 = and i32 %535, -16711936
  %538 = or i32 %536, %537
  %539 = add i32 %538, %17
  store i32 %539, i32* %523, align 4
  br label %540

540:                                              ; preds = %528, %519
  %541 = and i32 %520, 64
  %542 = icmp eq i32 %541, 0
  br i1 %542, label %556, label %543

543:                                              ; preds = %540
  %544 = getelementptr inbounds i32, i32* %525, i64 9
  %545 = load i32, i32* %544, align 4
  %546 = and i32 %545, 16711935
  %547 = mul i32 %546, %19
  %548 = lshr i32 %547, 8
  %549 = lshr i32 %545, 8
  %550 = and i32 %549, 16711935
  %551 = mul i32 %550, %19
  %552 = and i32 %548, 16711935
  %553 = and i32 %551, -16711936
  %554 = or i32 %552, %553
  %555 = add i32 %554, %17
  store i32 %555, i32* %544, align 4
  br label %556

556:                                              ; preds = %543, %540
  %557 = and i32 %520, 32
  %558 = icmp eq i32 %557, 0
  br i1 %558, label %572, label %559

559:                                              ; preds = %556
  %560 = getelementptr inbounds i32, i32* %525, i64 10
  %561 = load i32, i32* %560, align 4
  %562 = and i32 %561, 16711935
  %563 = mul i32 %562, %19
  %564 = lshr i32 %563, 8
  %565 = lshr i32 %561, 8
  %566 = and i32 %565, 16711935
  %567 = mul i32 %566, %19
  %568 = and i32 %564, 16711935
  %569 = and i32 %567, -16711936
  %570 = or i32 %568, %569
  %571 = add i32 %570, %17
  store i32 %571, i32* %560, align 4
  br label %572

572:                                              ; preds = %559, %556
  %573 = and i32 %520, 16
  %574 = icmp eq i32 %573, 0
  br i1 %574, label %588, label %575

575:                                              ; preds = %572
  %576 = getelementptr inbounds i32, i32* %525, i64 11
  %577 = load i32, i32* %576, align 4
  %578 = and i32 %577, 16711935
  %579 = mul i32 %578, %19
  %580 = lshr i32 %579, 8
  %581 = lshr i32 %577, 8
  %582 = and i32 %581, 16711935
  %583 = mul i32 %582, %19
  %584 = and i32 %580, 16711935
  %585 = and i32 %583, -16711936
  %586 = or i32 %584, %585
  %587 = add i32 %586, %17
  store i32 %587, i32* %576, align 4
  br label %588

588:                                              ; preds = %575, %572
  %589 = and i32 %520, 8
  %590 = icmp eq i32 %589, 0
  br i1 %590, label %604, label %591

591:                                              ; preds = %588
  %592 = getelementptr inbounds i32, i32* %525, i64 12
  %593 = load i32, i32* %592, align 4
  %594 = and i32 %593, 16711935
  %595 = mul i32 %594, %19
  %596 = lshr i32 %595, 8
  %597 = lshr i32 %593, 8
  %598 = and i32 %597, 16711935
  %599 = mul i32 %598, %19
  %600 = and i32 %596, 16711935
  %601 = and i32 %599, -16711936
  %602 = or i32 %600, %601
  %603 = add i32 %602, %17
  store i32 %603, i32* %592, align 4
  br label %604

604:                                              ; preds = %591, %588
  %605 = and i32 %520, 4
  %606 = icmp eq i32 %605, 0
  br i1 %606, label %620, label %607

607:                                              ; preds = %604
  %608 = getelementptr inbounds i32, i32* %525, i64 13
  %609 = load i32, i32* %608, align 4
  %610 = and i32 %609, 16711935
  %611 = mul i32 %610, %19
  %612 = lshr i32 %611, 8
  %613 = lshr i32 %609, 8
  %614 = and i32 %613, 16711935
  %615 = mul i32 %614, %19
  %616 = and i32 %612, 16711935
  %617 = and i32 %615, -16711936
  %618 = or i32 %616, %617
  %619 = add i32 %618, %17
  store i32 %619, i32* %608, align 4
  br label %620

620:                                              ; preds = %607, %604
  %621 = and i32 %520, 2
  %622 = icmp eq i32 %621, 0
  br i1 %622, label %636, label %623

623:                                              ; preds = %620
  %624 = getelementptr inbounds i32, i32* %525, i64 14
  %625 = load i32, i32* %624, align 4
  %626 = and i32 %625, 16711935
  %627 = mul i32 %626, %19
  %628 = lshr i32 %627, 8
  %629 = lshr i32 %625, 8
  %630 = and i32 %629, 16711935
  %631 = mul i32 %630, %19
  %632 = and i32 %628, 16711935
  %633 = and i32 %631, -16711936
  %634 = or i32 %632, %633
  %635 = add i32 %634, %17
  store i32 %635, i32* %624, align 4
  br label %636

636:                                              ; preds = %623, %620
  %637 = and i32 %520, 1
  %638 = icmp eq i32 %637, 0
  br i1 %638, label %652, label %639

639:                                              ; preds = %636
  %640 = getelementptr inbounds i32, i32* %525, i64 15
  %641 = load i32, i32* %640, align 4
  %642 = and i32 %641, 16711935
  %643 = mul i32 %642, %19
  %644 = lshr i32 %643, 8
  %645 = lshr i32 %641, 8
  %646 = and i32 %645, 16711935
  %647 = mul i32 %646, %19
  %648 = and i32 %644, 16711935
  %649 = and i32 %647, -16711936
  %650 = or i32 %648, %649
  %651 = add i32 %650, %17
  store i32 %651, i32* %640, align 4
  br label %652

652:                                              ; preds = %639, %636
  %653 = getelementptr inbounds i8, i8* %524, i64 1
  %654 = getelementptr inbounds i32, i32* %523, i64 8
  %655 = icmp sgt i32 %526, 0
  %656 = load i8, i8* %653, align 1
  %657 = zext i8 %656 to i32
  br i1 %655, label %519, label %658

658:                                              ; preds = %652
  %659 = zext i8 %656 to i32
  br label %660

660:                                              ; preds = %658, %514
  %661 = phi i32* [ %384, %514 ], [ %523, %658 ]
  %662 = phi i32* [ %516, %514 ], [ %654, %658 ]
  %663 = phi i32 [ %518, %514 ], [ %659, %658 ]
  %664 = and i32 %663, %224
  %665 = trunc i32 %664 to i8
  %666 = icmp slt i8 %665, 0
  br i1 %666, label %667, label %679

667:                                              ; preds = %660
  %668 = load i32, i32* %662, align 4
  %669 = and i32 %668, 16711935
  %670 = mul i32 %669, %19
  %671 = lshr i32 %670, 8
  %672 = lshr i32 %668, 8
  %673 = and i32 %672, 16711935
  %674 = mul i32 %673, %19
  %675 = and i32 %671, 16711935
  %676 = and i32 %674, -16711936
  %677 = or i32 %675, %676
  %678 = add i32 %677, %17
  store i32 %678, i32* %662, align 4
  br label %679

679:                                              ; preds = %667, %660
  %680 = and i32 %664, 64
  %681 = icmp eq i32 %680, 0
  br i1 %681, label %695, label %682

682:                                              ; preds = %679
  %683 = getelementptr inbounds i32, i32* %661, i64 9
  %684 = load i32, i32* %683, align 4
  %685 = and i32 %684, 16711935
  %686 = mul i32 %685, %19
  %687 = lshr i32 %686, 8
  %688 = lshr i32 %684, 8
  %689 = and i32 %688, 16711935
  %690 = mul i32 %689, %19
  %691 = and i32 %687, 16711935
  %692 = and i32 %690, -16711936
  %693 = or i32 %691, %692
  %694 = add i32 %693, %17
  store i32 %694, i32* %683, align 4
  br label %695

695:                                              ; preds = %682, %679
  %696 = and i32 %664, 32
  %697 = icmp eq i32 %696, 0
  br i1 %697, label %711, label %698

698:                                              ; preds = %695
  %699 = getelementptr inbounds i32, i32* %661, i64 10
  %700 = load i32, i32* %699, align 4
  %701 = and i32 %700, 16711935
  %702 = mul i32 %701, %19
  %703 = lshr i32 %702, 8
  %704 = lshr i32 %700, 8
  %705 = and i32 %704, 16711935
  %706 = mul i32 %705, %19
  %707 = and i32 %703, 16711935
  %708 = and i32 %706, -16711936
  %709 = or i32 %707, %708
  %710 = add i32 %709, %17
  store i32 %710, i32* %699, align 4
  br label %711

711:                                              ; preds = %698, %695
  %712 = and i32 %664, 16
  %713 = icmp eq i32 %712, 0
  br i1 %713, label %727, label %714

714:                                              ; preds = %711
  %715 = getelementptr inbounds i32, i32* %661, i64 11
  %716 = load i32, i32* %715, align 4
  %717 = and i32 %716, 16711935
  %718 = mul i32 %717, %19
  %719 = lshr i32 %718, 8
  %720 = lshr i32 %716, 8
  %721 = and i32 %720, 16711935
  %722 = mul i32 %721, %19
  %723 = and i32 %719, 16711935
  %724 = and i32 %722, -16711936
  %725 = or i32 %723, %724
  %726 = add i32 %725, %17
  store i32 %726, i32* %715, align 4
  br label %727

727:                                              ; preds = %714, %711
  %728 = and i32 %664, 8
  %729 = icmp eq i32 %728, 0
  br i1 %729, label %743, label %730

730:                                              ; preds = %727
  %731 = getelementptr inbounds i32, i32* %661, i64 12
  %732 = load i32, i32* %731, align 4
  %733 = and i32 %732, 16711935
  %734 = mul i32 %733, %19
  %735 = lshr i32 %734, 8
  %736 = lshr i32 %732, 8
  %737 = and i32 %736, 16711935
  %738 = mul i32 %737, %19
  %739 = and i32 %735, 16711935
  %740 = and i32 %738, -16711936
  %741 = or i32 %739, %740
  %742 = add i32 %741, %17
  store i32 %742, i32* %731, align 4
  br label %743

743:                                              ; preds = %730, %727
  %744 = and i32 %664, 4
  %745 = icmp eq i32 %744, 0
  br i1 %745, label %759, label %746

746:                                              ; preds = %743
  %747 = getelementptr inbounds i32, i32* %661, i64 13
  %748 = load i32, i32* %747, align 4
  %749 = and i32 %748, 16711935
  %750 = mul i32 %749, %19
  %751 = lshr i32 %750, 8
  %752 = lshr i32 %748, 8
  %753 = and i32 %752, 16711935
  %754 = mul i32 %753, %19
  %755 = and i32 %751, 16711935
  %756 = and i32 %754, -16711936
  %757 = or i32 %755, %756
  %758 = add i32 %757, %17
  store i32 %758, i32* %747, align 4
  br label %759

759:                                              ; preds = %746, %743
  %760 = and i32 %664, 2
  %761 = icmp eq i32 %760, 0
  br i1 %761, label %775, label %762

762:                                              ; preds = %759
  %763 = getelementptr inbounds i32, i32* %661, i64 14
  %764 = load i32, i32* %763, align 4
  %765 = and i32 %764, 16711935
  %766 = mul i32 %765, %19
  %767 = lshr i32 %766, 8
  %768 = lshr i32 %764, 8
  %769 = and i32 %768, 16711935
  %770 = mul i32 %769, %19
  %771 = and i32 %767, 16711935
  %772 = and i32 %770, -16711936
  %773 = or i32 %771, %772
  %774 = add i32 %773, %17
  store i32 %774, i32* %763, align 4
  br label %775

775:                                              ; preds = %762, %759
  %776 = and i32 %664, 1
  %777 = icmp eq i32 %776, 0
  br i1 %777, label %791, label %778

778:                                              ; preds = %775
  %779 = getelementptr inbounds i32, i32* %661, i64 15
  %780 = load i32, i32* %779, align 4
  %781 = and i32 %780, 16711935
  %782 = mul i32 %781, %19
  %783 = lshr i32 %782, 8
  %784 = lshr i32 %780, 8
  %785 = and i32 %784, 16711935
  %786 = mul i32 %785, %19
  %787 = and i32 %783, 16711935
  %788 = and i32 %786, -16711936
  %789 = or i32 %787, %788
  %790 = add i32 %789, %17
  store i32 %790, i32* %779, align 4
  br label %791

791:                                              ; preds = %778, %775
  %792 = getelementptr inbounds i8, i8* %383, i64 %237
  %793 = bitcast i32* %384 to i8*
  %794 = getelementptr inbounds i8, i8* %793, i64 %29
  %795 = bitcast i8* %794 to i32*
  %796 = add i32 %382, -1
  %797 = icmp eq i32 %796, 0
  br i1 %797, label %856, label %381

798:                                              ; preds = %12
  %799 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 2
  %800 = load i32, i32* %799, align 4
  %801 = lshr i32 %800, 24
  %802 = icmp eq i32 %801, 255
  %803 = select i1 %802, i32 2, i32 3
  %804 = tail call void (i32*, i32*, i32, i32)* @_ZN9SkBlitRow9Factory32Ej(i32 %803) #12
  %805 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 0
  %806 = load i32, i32* %805, align 4
  %807 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 1
  %808 = load i32, i32* %807, align 4
  %809 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 2
  %810 = load i32, i32* %809, align 4
  %811 = sub i32 %810, %806
  %812 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 3
  %813 = load i32, i32* %812, align 4
  %814 = sub i32 %813, %808
  %815 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %8, i64 0, i32 0
  %816 = load i8*, i8** %815, align 8
  %817 = sext i32 %808 to i64
  %818 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 1, i32 1
  %819 = load i64, i64* %818, align 8
  %820 = mul i64 %819, %817
  %821 = getelementptr inbounds i8, i8* %816, i64 %820
  %822 = shl i32 %806, 2
  %823 = sext i32 %822 to i64
  %824 = getelementptr inbounds i8, i8* %821, i64 %823
  %825 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 0
  %826 = load i8*, i8** %825, align 8
  %827 = sext i32 %806 to i64
  %828 = getelementptr inbounds i8, i8* %826, i64 %827
  %829 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 0
  %830 = load i32, i32* %829, align 8
  %831 = sext i32 %830 to i64
  %832 = sub nsw i64 0, %831
  %833 = getelementptr inbounds i8, i8* %828, i64 %832
  %834 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %835 = load i32, i32* %834, align 4
  %836 = sub nsw i32 %808, %835
  %837 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %838 = load i32, i32* %837, align 8
  %839 = mul i32 %836, %838
  %840 = zext i32 %839 to i64
  %841 = getelementptr inbounds i8, i8* %833, i64 %840
  br label %842

842:                                              ; preds = %842, %798
  %843 = phi i32 [ %814, %798 ], [ %853, %842 ]
  %844 = phi i8* [ %824, %798 ], [ %849, %842 ]
  %845 = phi i8* [ %841, %798 ], [ %852, %842 ]
  %846 = bitcast i8* %844 to i32*
  %847 = bitcast i8* %845 to i32*
  tail call void %804(i32* %846, i32* %847, i32 %811, i32 %801) #12
  %848 = load i64, i64* %818, align 8
  %849 = getelementptr inbounds i8, i8* %844, i64 %848
  %850 = load i32, i32* %837, align 8
  %851 = zext i32 %850 to i64
  %852 = getelementptr inbounds i8, i8* %845, i64 %851
  %853 = add nsw i32 %843, -1
  %854 = icmp eq i32 %853, 0
  br i1 %854, label %856, label %842

855:                                              ; preds = %12
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0), i32 813, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0)) #13
  unreachable

856:                                              ; preds = %842, %791, %374, %206, %7, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZL10blit_colorRK8SkPixmapRK6SkMaskRK7SkIRectj(%class.SkPixmap* nocapture readonly dereferenceable(40), %struct.SkMask* dereferenceable(32), %struct.SkIRect* nocapture readonly dereferenceable(16), i32) unnamed_addr #2 {
  %5 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 6
  br i1 %11, label %12, label %82

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 3
  %14 = load i8, i8* %13, align 4
  switch i8 %14, label %82 [
    i8 1, label %15
    i8 4, label %40
  ]

15:                                               ; preds = %12
  %16 = load void (i32*, i64, i8*, i64, i32, i32, i32)*, void (i32*, i64, i8*, i64, i32, i32, i32)** @_ZN6SkOpts16blit_mask_d32_a8E, align 8
  %17 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = sext i32 %8 to i64
  %20 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = mul i64 %21, %19
  %23 = getelementptr inbounds i8, i8* %18, i64 %22
  %24 = shl i32 %6, 2
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %23, i64 %25
  %27 = bitcast i8* %26 to i32*
  %28 = tail call i8* @_ZNK6SkMask7getAddrEii(%struct.SkMask* %1, i32 %6, i32 %8) #12
  %29 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %30 = load i32, i32* %29, align 8
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 2
  %33 = load i32, i32* %32, align 4
  %34 = load i32, i32* %5, align 4
  %35 = sub i32 %33, %34
  %36 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 3
  %37 = load i32, i32* %36, align 4
  %38 = load i32, i32* %7, align 4
  %39 = sub i32 %37, %38
  tail call void %16(i32* %27, i64 %21, i8* %28, i64 %31, i32 %3, i32 %35, i32 %39) #12
  br label %82

40:                                               ; preds = %12
  %41 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = sext i32 %8 to i64
  %44 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = mul i64 %45, %43
  %47 = getelementptr inbounds i8, i8* %42, i64 %46
  %48 = shl i32 %6, 2
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %47, i64 %49
  %51 = tail call i8* @_ZNK6SkMask7getAddrEii(%struct.SkMask* %1, i32 %6, i32 %8) #12
  %52 = icmp ugt i32 %3, -16777217
  br i1 %52, label %53, label %55

53:                                               ; preds = %40
  %54 = tail call i32 @_Z18SkPreMultiplyColorj(i32 %3) #12
  br label %55

55:                                               ; preds = %53, %40
  %56 = phi void (i32*, i16*, i32, i32, i32)* [ @_Z21blit_row_lcd16_opaquePjPKtjij, %53 ], [ @_Z14blit_row_lcd16PjPKtjij, %40 ]
  %57 = phi i32 [ %54, %53 ], [ 0, %40 ]
  %58 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 3
  %59 = load i32, i32* %58, align 4
  %60 = load i32, i32* %7, align 4
  %61 = sub i32 %59, %60
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %63, label %82

63:                                               ; preds = %55
  %64 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 2
  %65 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  br label %66

66:                                               ; preds = %63, %66
  %67 = phi i32 [ %61, %63 ], [ %72, %66 ]
  %68 = phi i8* [ %51, %63 ], [ %80, %66 ]
  %69 = phi i8* [ %50, %63 ], [ %77, %66 ]
  %70 = bitcast i8* %69 to i32*
  %71 = bitcast i8* %68 to i16*
  %72 = add nsw i32 %67, -1
  %73 = load i32, i32* %64, align 4
  %74 = load i32, i32* %5, align 4
  %75 = sub i32 %73, %74
  tail call void %56(i32* %70, i16* %71, i32 %3, i32 %75, i32 %57) #12, !callees !10
  %76 = load i64, i64* %44, align 8
  %77 = getelementptr inbounds i8, i8* %69, i64 %76
  %78 = load i32, i32* %65, align 8
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %68, i64 %79
  %81 = icmp sgt i32 %72, 0
  br i1 %81, label %66, label %82

82:                                               ; preds = %66, %12, %55, %4, %15
  %83 = phi i1 [ true, %15 ], [ false, %4 ], [ true, %55 ], [ false, %12 ], [ true, %66 ]
  ret i1 %83
}

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23SkARGB32_Opaque_Blitter8blitMaskERK6SkMaskRK7SkIRect(%class.SkARGB32_Opaque_Blitter* nocapture readonly, %struct.SkMask* dereferenceable(32), %struct.SkIRect* nocapture readonly dereferenceable(16)) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %class.SkARGB32_Opaque_Blitter, %class.SkARGB32_Opaque_Blitter* %0, i64 0, i32 0, i32 0, i32 1
  %5 = getelementptr inbounds %class.SkARGB32_Opaque_Blitter, %class.SkARGB32_Opaque_Blitter* %0, i64 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = tail call fastcc zeroext i1 @_ZL10blit_colorRK8SkPixmapRK6SkMaskRK7SkIRectj(%class.SkPixmap* dereferenceable(40) %4, %struct.SkMask* dereferenceable(32) %1, %struct.SkIRect* dereferenceable(16) %2, i32 %6)
  br i1 %7, label %410, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 3
  %10 = load i8, i8* %9, align 4
  switch i8 %10, label %409 [
    i8 0, label %11
    i8 3, label %352
  ]

11:                                               ; preds = %8
  %12 = getelementptr inbounds %class.SkARGB32_Opaque_Blitter, %class.SkARGB32_Opaque_Blitter* %0, i64 0, i32 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %class.SkARGB32_Opaque_Blitter, %class.SkARGB32_Opaque_Blitter* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 3
  %25 = load i32, i32* %24, align 4
  %26 = sub i32 %25, %17
  %27 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = sub nsw i32 %15, %19
  %30 = ashr i32 %29, 3
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %28, i64 %31
  %33 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = sub nsw i32 %17, %34
  %36 = mul i32 %35, %21
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i8, i8* %32, i64 %37
  %39 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 0
  %40 = load i8*, i8** %39, align 8
  %41 = sext i32 %17 to i64
  %42 = mul i64 %23, %41
  %43 = getelementptr inbounds i8, i8* %40, i64 %42
  %44 = shl i32 %15, 2
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %45
  %47 = bitcast i8* %46 to i32*
  %48 = icmp eq i32 %15, %19
  %49 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 2
  %50 = load i32, i32* %49, align 4
  br i1 %48, label %51, label %117

51:                                               ; preds = %11
  %52 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 2
  %53 = load i32, i32* %52, align 8
  %54 = icmp eq i32 %50, %53
  br i1 %54, label %55, label %117

55:                                               ; preds = %51
  %56 = add i32 %21, -1
  %57 = zext i32 %56 to i64
  %58 = add nuw nsw i64 %57, 1
  br label %59

59:                                               ; preds = %112, %55
  %60 = phi i32 [ %115, %112 ], [ %26, %55 ]
  %61 = phi i8* [ %113, %112 ], [ %38, %55 ]
  %62 = phi i8* [ %114, %112 ], [ %46, %55 ]
  %63 = bitcast i8* %62 to i32*
  br label %64

64:                                               ; preds = %108, %59
  %65 = phi i8* [ %61, %59 ], [ %68, %108 ]
  %66 = phi i32* [ %63, %59 ], [ %109, %108 ]
  %67 = phi i32 [ %21, %59 ], [ %110, %108 ]
  %68 = getelementptr inbounds i8, i8* %65, i64 1
  %69 = load i8, i8* %65, align 1
  %70 = zext i8 %69 to i32
  %71 = icmp slt i8 %69, 0
  br i1 %71, label %72, label %73

72:                                               ; preds = %64
  store i32 %13, i32* %66, align 4
  br label %73

73:                                               ; preds = %72, %64
  %74 = and i32 %70, 64
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %78, label %76

76:                                               ; preds = %73
  %77 = getelementptr inbounds i32, i32* %66, i64 1
  store i32 %13, i32* %77, align 4
  br label %78

78:                                               ; preds = %76, %73
  %79 = and i32 %70, 32
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %83, label %81

81:                                               ; preds = %78
  %82 = getelementptr inbounds i32, i32* %66, i64 2
  store i32 %13, i32* %82, align 4
  br label %83

83:                                               ; preds = %81, %78
  %84 = and i32 %70, 16
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %88, label %86

86:                                               ; preds = %83
  %87 = getelementptr inbounds i32, i32* %66, i64 3
  store i32 %13, i32* %87, align 4
  br label %88

88:                                               ; preds = %86, %83
  %89 = and i32 %70, 8
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %93, label %91

91:                                               ; preds = %88
  %92 = getelementptr inbounds i32, i32* %66, i64 4
  store i32 %13, i32* %92, align 4
  br label %93

93:                                               ; preds = %91, %88
  %94 = and i32 %70, 4
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %98, label %96

96:                                               ; preds = %93
  %97 = getelementptr inbounds i32, i32* %66, i64 5
  store i32 %13, i32* %97, align 4
  br label %98

98:                                               ; preds = %96, %93
  %99 = and i32 %70, 2
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %103, label %101

101:                                              ; preds = %98
  %102 = getelementptr inbounds i32, i32* %66, i64 6
  store i32 %13, i32* %102, align 4
  br label %103

103:                                              ; preds = %101, %98
  %104 = and i32 %70, 1
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %108, label %106

106:                                              ; preds = %103
  %107 = getelementptr inbounds i32, i32* %66, i64 7
  store i32 %13, i32* %107, align 4
  br label %108

108:                                              ; preds = %106, %103
  %109 = getelementptr inbounds i32, i32* %66, i64 8
  %110 = add i32 %67, -1
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %64

112:                                              ; preds = %108
  %113 = getelementptr i8, i8* %61, i64 %58
  %114 = getelementptr inbounds i8, i8* %62, i64 %23
  %115 = add i32 %60, -1
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %410, label %59

117:                                              ; preds = %51, %11
  %118 = sub nsw i32 %50, %19
  %119 = and i32 %29, 7
  %120 = lshr i32 255, %119
  %121 = and i32 %118, 7
  %122 = sub nuw nsw i32 8, %121
  %123 = shl i32 255, %122
  %124 = and i32 %123, 255
  %125 = ashr i32 %118, 3
  %126 = add nsw i32 %29, 7
  %127 = ashr i32 %126, 3
  %128 = sub nsw i32 0, %127
  %129 = icmp eq i32 %124, 0
  %130 = select i1 %129, i32 255, i32 %124
  %131 = icmp eq i32 %119, 0
  %132 = zext i1 %131 to i32
  %133 = sub nsw i32 %128, %132
  %134 = add nsw i32 %133, %125
  %135 = zext i1 %129 to i32
  %136 = sub nsw i32 %134, %135
  %137 = zext i32 %119 to i64
  %138 = sub nsw i64 0, %137
  %139 = getelementptr inbounds i32, i32* %47, i64 %138
  %140 = icmp slt i32 %136, 0
  br i1 %140, label %144, label %141

141:                                              ; preds = %117
  %142 = icmp eq i32 %136, 0
  %143 = zext i32 %21 to i64
  br label %199

144:                                              ; preds = %117
  %145 = and i32 %130, %120
  %146 = zext i32 %21 to i64
  br label %147

147:                                              ; preds = %192, %144
  %148 = phi i32 [ %26, %144 ], [ %197, %192 ]
  %149 = phi i8* [ %38, %144 ], [ %193, %192 ]
  %150 = phi i32* [ %139, %144 ], [ %196, %192 ]
  %151 = load i8, i8* %149, align 1
  %152 = zext i8 %151 to i32
  %153 = and i32 %145, %152
  %154 = trunc i32 %153 to i8
  %155 = icmp slt i8 %154, 0
  br i1 %155, label %156, label %157

156:                                              ; preds = %147
  store i32 %13, i32* %150, align 4
  br label %157

157:                                              ; preds = %156, %147
  %158 = and i32 %153, 64
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %162, label %160

160:                                              ; preds = %157
  %161 = getelementptr inbounds i32, i32* %150, i64 1
  store i32 %13, i32* %161, align 4
  br label %162

162:                                              ; preds = %160, %157
  %163 = and i32 %153, 32
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %167, label %165

165:                                              ; preds = %162
  %166 = getelementptr inbounds i32, i32* %150, i64 2
  store i32 %13, i32* %166, align 4
  br label %167

167:                                              ; preds = %165, %162
  %168 = and i32 %153, 16
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %172, label %170

170:                                              ; preds = %167
  %171 = getelementptr inbounds i32, i32* %150, i64 3
  store i32 %13, i32* %171, align 4
  br label %172

172:                                              ; preds = %170, %167
  %173 = and i32 %153, 8
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %177, label %175

175:                                              ; preds = %172
  %176 = getelementptr inbounds i32, i32* %150, i64 4
  store i32 %13, i32* %176, align 4
  br label %177

177:                                              ; preds = %175, %172
  %178 = and i32 %153, 4
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %182, label %180

180:                                              ; preds = %177
  %181 = getelementptr inbounds i32, i32* %150, i64 5
  store i32 %13, i32* %181, align 4
  br label %182

182:                                              ; preds = %180, %177
  %183 = and i32 %153, 2
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %187, label %185

185:                                              ; preds = %182
  %186 = getelementptr inbounds i32, i32* %150, i64 6
  store i32 %13, i32* %186, align 4
  br label %187

187:                                              ; preds = %185, %182
  %188 = and i32 %153, 1
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %192, label %190

190:                                              ; preds = %187
  %191 = getelementptr inbounds i32, i32* %150, i64 7
  store i32 %13, i32* %191, align 4
  br label %192

192:                                              ; preds = %190, %187
  %193 = getelementptr inbounds i8, i8* %149, i64 %146
  %194 = bitcast i32* %150 to i8*
  %195 = getelementptr inbounds i8, i8* %194, i64 %23
  %196 = bitcast i8* %195 to i32*
  %197 = add i32 %148, -1
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %410, label %147

199:                                              ; preds = %345, %141
  %200 = phi i32 [ %350, %345 ], [ %26, %141 ]
  %201 = phi i8* [ %346, %345 ], [ %38, %141 ]
  %202 = phi i32* [ %349, %345 ], [ %139, %141 ]
  %203 = load i8, i8* %201, align 1
  %204 = zext i8 %203 to i32
  %205 = and i32 %120, %204
  %206 = trunc i32 %205 to i8
  %207 = icmp slt i8 %206, 0
  br i1 %207, label %208, label %209

208:                                              ; preds = %199
  store i32 %13, i32* %202, align 4
  br label %209

209:                                              ; preds = %208, %199
  %210 = and i32 %205, 64
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %214, label %212

212:                                              ; preds = %209
  %213 = getelementptr inbounds i32, i32* %202, i64 1
  store i32 %13, i32* %213, align 4
  br label %214

214:                                              ; preds = %212, %209
  %215 = and i32 %205, 32
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %219, label %217

217:                                              ; preds = %214
  %218 = getelementptr inbounds i32, i32* %202, i64 2
  store i32 %13, i32* %218, align 4
  br label %219

219:                                              ; preds = %217, %214
  %220 = and i32 %205, 16
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %224, label %222

222:                                              ; preds = %219
  %223 = getelementptr inbounds i32, i32* %202, i64 3
  store i32 %13, i32* %223, align 4
  br label %224

224:                                              ; preds = %222, %219
  %225 = and i32 %205, 8
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %229, label %227

227:                                              ; preds = %224
  %228 = getelementptr inbounds i32, i32* %202, i64 4
  store i32 %13, i32* %228, align 4
  br label %229

229:                                              ; preds = %227, %224
  %230 = and i32 %205, 4
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %234, label %232

232:                                              ; preds = %229
  %233 = getelementptr inbounds i32, i32* %202, i64 5
  store i32 %13, i32* %233, align 4
  br label %234

234:                                              ; preds = %232, %229
  %235 = and i32 %205, 2
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %239, label %237

237:                                              ; preds = %234
  %238 = getelementptr inbounds i32, i32* %202, i64 6
  store i32 %13, i32* %238, align 4
  br label %239

239:                                              ; preds = %237, %234
  %240 = and i32 %204, 1
  %241 = icmp eq i32 %240, 0
  br i1 %241, label %244, label %242

242:                                              ; preds = %239
  %243 = getelementptr inbounds i32, i32* %202, i64 7
  store i32 %13, i32* %243, align 4
  br label %244

244:                                              ; preds = %242, %239
  %245 = getelementptr inbounds i8, i8* %201, i64 1
  %246 = getelementptr inbounds i32, i32* %202, i64 8
  %247 = load i8, i8* %245, align 1
  %248 = zext i8 %247 to i32
  br i1 %142, label %302, label %249

249:                                              ; preds = %244, %294
  %250 = phi i32 [ %299, %294 ], [ %248, %244 ]
  %251 = phi i8 [ %298, %294 ], [ %247, %244 ]
  %252 = phi i32 [ %256, %294 ], [ %136, %244 ]
  %253 = phi i32* [ %296, %294 ], [ %246, %244 ]
  %254 = phi i8* [ %295, %294 ], [ %245, %244 ]
  %255 = phi i32* [ %253, %294 ], [ %202, %244 ]
  %256 = add nsw i32 %252, -1
  %257 = icmp slt i8 %251, 0
  br i1 %257, label %258, label %259

258:                                              ; preds = %249
  store i32 %13, i32* %253, align 4
  br label %259

259:                                              ; preds = %258, %249
  %260 = and i32 %250, 64
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %264, label %262

262:                                              ; preds = %259
  %263 = getelementptr inbounds i32, i32* %255, i64 9
  store i32 %13, i32* %263, align 4
  br label %264

264:                                              ; preds = %262, %259
  %265 = and i32 %250, 32
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %269, label %267

267:                                              ; preds = %264
  %268 = getelementptr inbounds i32, i32* %255, i64 10
  store i32 %13, i32* %268, align 4
  br label %269

269:                                              ; preds = %267, %264
  %270 = and i32 %250, 16
  %271 = icmp eq i32 %270, 0
  br i1 %271, label %274, label %272

272:                                              ; preds = %269
  %273 = getelementptr inbounds i32, i32* %255, i64 11
  store i32 %13, i32* %273, align 4
  br label %274

274:                                              ; preds = %272, %269
  %275 = and i32 %250, 8
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %279, label %277

277:                                              ; preds = %274
  %278 = getelementptr inbounds i32, i32* %255, i64 12
  store i32 %13, i32* %278, align 4
  br label %279

279:                                              ; preds = %277, %274
  %280 = and i32 %250, 4
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %284, label %282

282:                                              ; preds = %279
  %283 = getelementptr inbounds i32, i32* %255, i64 13
  store i32 %13, i32* %283, align 4
  br label %284

284:                                              ; preds = %282, %279
  %285 = and i32 %250, 2
  %286 = icmp eq i32 %285, 0
  br i1 %286, label %289, label %287

287:                                              ; preds = %284
  %288 = getelementptr inbounds i32, i32* %255, i64 14
  store i32 %13, i32* %288, align 4
  br label %289

289:                                              ; preds = %287, %284
  %290 = and i32 %250, 1
  %291 = icmp eq i32 %290, 0
  br i1 %291, label %294, label %292

292:                                              ; preds = %289
  %293 = getelementptr inbounds i32, i32* %255, i64 15
  store i32 %13, i32* %293, align 4
  br label %294

294:                                              ; preds = %292, %289
  %295 = getelementptr inbounds i8, i8* %254, i64 1
  %296 = getelementptr inbounds i32, i32* %253, i64 8
  %297 = icmp sgt i32 %256, 0
  %298 = load i8, i8* %295, align 1
  %299 = zext i8 %298 to i32
  br i1 %297, label %249, label %300

300:                                              ; preds = %294
  %301 = zext i8 %298 to i32
  br label %302

302:                                              ; preds = %300, %244
  %303 = phi i32* [ %202, %244 ], [ %253, %300 ]
  %304 = phi i32* [ %246, %244 ], [ %296, %300 ]
  %305 = phi i32 [ %248, %244 ], [ %301, %300 ]
  %306 = and i32 %305, %130
  %307 = trunc i32 %306 to i8
  %308 = icmp slt i8 %307, 0
  br i1 %308, label %309, label %310

309:                                              ; preds = %302
  store i32 %13, i32* %304, align 4
  br label %310

310:                                              ; preds = %309, %302
  %311 = and i32 %306, 64
  %312 = icmp eq i32 %311, 0
  br i1 %312, label %315, label %313

313:                                              ; preds = %310
  %314 = getelementptr inbounds i32, i32* %303, i64 9
  store i32 %13, i32* %314, align 4
  br label %315

315:                                              ; preds = %313, %310
  %316 = and i32 %306, 32
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %320, label %318

318:                                              ; preds = %315
  %319 = getelementptr inbounds i32, i32* %303, i64 10
  store i32 %13, i32* %319, align 4
  br label %320

320:                                              ; preds = %318, %315
  %321 = and i32 %306, 16
  %322 = icmp eq i32 %321, 0
  br i1 %322, label %325, label %323

323:                                              ; preds = %320
  %324 = getelementptr inbounds i32, i32* %303, i64 11
  store i32 %13, i32* %324, align 4
  br label %325

325:                                              ; preds = %323, %320
  %326 = and i32 %306, 8
  %327 = icmp eq i32 %326, 0
  br i1 %327, label %330, label %328

328:                                              ; preds = %325
  %329 = getelementptr inbounds i32, i32* %303, i64 12
  store i32 %13, i32* %329, align 4
  br label %330

330:                                              ; preds = %328, %325
  %331 = and i32 %306, 4
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %335, label %333

333:                                              ; preds = %330
  %334 = getelementptr inbounds i32, i32* %303, i64 13
  store i32 %13, i32* %334, align 4
  br label %335

335:                                              ; preds = %333, %330
  %336 = and i32 %306, 2
  %337 = icmp eq i32 %336, 0
  br i1 %337, label %340, label %338

338:                                              ; preds = %335
  %339 = getelementptr inbounds i32, i32* %303, i64 14
  store i32 %13, i32* %339, align 4
  br label %340

340:                                              ; preds = %338, %335
  %341 = and i32 %306, 1
  %342 = icmp eq i32 %341, 0
  br i1 %342, label %345, label %343

343:                                              ; preds = %340
  %344 = getelementptr inbounds i32, i32* %303, i64 15
  store i32 %13, i32* %344, align 4
  br label %345

345:                                              ; preds = %343, %340
  %346 = getelementptr inbounds i8, i8* %201, i64 %143
  %347 = bitcast i32* %202 to i8*
  %348 = getelementptr inbounds i8, i8* %347, i64 %23
  %349 = bitcast i8* %348 to i32*
  %350 = add i32 %200, -1
  %351 = icmp eq i32 %350, 0
  br i1 %351, label %410, label %199

352:                                              ; preds = %8
  %353 = getelementptr inbounds %class.SkARGB32_Opaque_Blitter, %class.SkARGB32_Opaque_Blitter* %0, i64 0, i32 0, i32 2
  %354 = load i32, i32* %353, align 4
  %355 = lshr i32 %354, 24
  %356 = icmp eq i32 %355, 255
  %357 = select i1 %356, i32 2, i32 3
  %358 = tail call void (i32*, i32*, i32, i32)* @_ZN9SkBlitRow9Factory32Ej(i32 %357) #12
  %359 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 0
  %360 = load i32, i32* %359, align 4
  %361 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 1
  %362 = load i32, i32* %361, align 4
  %363 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 2
  %364 = load i32, i32* %363, align 4
  %365 = sub i32 %364, %360
  %366 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 3
  %367 = load i32, i32* %366, align 4
  %368 = sub i32 %367, %362
  %369 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 0
  %370 = load i8*, i8** %369, align 8
  %371 = sext i32 %362 to i64
  %372 = getelementptr inbounds %class.SkARGB32_Opaque_Blitter, %class.SkARGB32_Opaque_Blitter* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  %373 = load i64, i64* %372, align 8
  %374 = mul i64 %373, %371
  %375 = getelementptr inbounds i8, i8* %370, i64 %374
  %376 = shl i32 %360, 2
  %377 = sext i32 %376 to i64
  %378 = getelementptr inbounds i8, i8* %375, i64 %377
  %379 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 0
  %380 = load i8*, i8** %379, align 8
  %381 = sext i32 %360 to i64
  %382 = getelementptr inbounds i8, i8* %380, i64 %381
  %383 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 0
  %384 = load i32, i32* %383, align 8
  %385 = sext i32 %384 to i64
  %386 = sub nsw i64 0, %385
  %387 = getelementptr inbounds i8, i8* %382, i64 %386
  %388 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %389 = load i32, i32* %388, align 4
  %390 = sub nsw i32 %362, %389
  %391 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %392 = load i32, i32* %391, align 8
  %393 = mul i32 %390, %392
  %394 = zext i32 %393 to i64
  %395 = getelementptr inbounds i8, i8* %387, i64 %394
  br label %396

396:                                              ; preds = %396, %352
  %397 = phi i32 [ %368, %352 ], [ %407, %396 ]
  %398 = phi i8* [ %378, %352 ], [ %403, %396 ]
  %399 = phi i8* [ %395, %352 ], [ %406, %396 ]
  %400 = bitcast i8* %398 to i32*
  %401 = bitcast i8* %399 to i32*
  tail call void %358(i32* %400, i32* %401, i32 %365, i32 %355) #12
  %402 = load i64, i64* %372, align 8
  %403 = getelementptr inbounds i8, i8* %398, i64 %402
  %404 = load i32, i32* %391, align 8
  %405 = zext i32 %404 to i64
  %406 = getelementptr inbounds i8, i8* %399, i64 %405
  %407 = add nsw i32 %397, -1
  %408 = icmp eq i32 %407, 0
  br i1 %408, label %410, label %396

409:                                              ; preds = %8
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0), i32 833, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0)) #13
  unreachable

410:                                              ; preds = %396, %345, %192, %112, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN23SkARGB32_Opaque_Blitter10blitAntiH2Eiijj(%class.SkARGB32_Opaque_Blitter* nocapture readonly, i32, i32, i32, i32) unnamed_addr #3 align 2 {
  %6 = getelementptr inbounds %class.SkARGB32_Opaque_Blitter, %class.SkARGB32_Opaque_Blitter* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = sext i32 %2 to i64
  %9 = getelementptr inbounds %class.SkARGB32_Opaque_Blitter, %class.SkARGB32_Opaque_Blitter* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = mul i64 %10, %8
  %12 = getelementptr inbounds i8, i8* %7, i64 %11
  %13 = shl i32 %1, 2
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %12, i64 %14
  %16 = bitcast i8* %15 to i32*
  %17 = getelementptr inbounds %class.SkARGB32_Opaque_Blitter, %class.SkARGB32_Opaque_Blitter* %0, i64 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = load i32, i32* %16, align 4
  %20 = lshr i32 %3, 7
  %21 = add i32 %20, %3
  %22 = lshr i32 %18, 8
  %23 = and i32 %22, 16711935
  %24 = zext i32 %23 to i64
  %25 = shl nuw nsw i64 %24, 32
  %26 = and i32 %18, 16711935
  %27 = zext i32 %26 to i64
  %28 = or i64 %25, %27
  %29 = zext i32 %21 to i64
  %30 = mul i64 %28, %29
  %31 = sub i32 256, %21
  %32 = zext i32 %31 to i64
  %33 = lshr i32 %19, 8
  %34 = and i32 %33, 16711935
  %35 = zext i32 %34 to i64
  %36 = shl nuw nsw i64 %35, 32
  %37 = and i32 %19, 16711935
  %38 = zext i32 %37 to i64
  %39 = or i64 %36, %38
  %40 = mul i64 %39, %32
  %41 = add i64 %40, %30
  %42 = lshr i64 %41, 8
  %43 = and i64 %42, 16711935
  %44 = lshr i64 %41, 32
  %45 = and i64 %44, 4278255360
  %46 = or i64 %43, %45
  %47 = trunc i64 %46 to i32
  store i32 %47, i32* %16, align 4
  %48 = load i32, i32* %17, align 4
  %49 = getelementptr inbounds i8, i8* %15, i64 4
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %50, align 4
  %52 = lshr i32 %4, 7
  %53 = add i32 %52, %4
  %54 = lshr i32 %48, 8
  %55 = and i32 %54, 16711935
  %56 = zext i32 %55 to i64
  %57 = shl nuw nsw i64 %56, 32
  %58 = and i32 %48, 16711935
  %59 = zext i32 %58 to i64
  %60 = or i64 %57, %59
  %61 = zext i32 %53 to i64
  %62 = mul i64 %60, %61
  %63 = sub i32 256, %53
  %64 = zext i32 %63 to i64
  %65 = lshr i32 %51, 8
  %66 = and i32 %65, 16711935
  %67 = zext i32 %66 to i64
  %68 = shl nuw nsw i64 %67, 32
  %69 = and i32 %51, 16711935
  %70 = zext i32 %69 to i64
  %71 = or i64 %68, %70
  %72 = mul i64 %71, %64
  %73 = add i64 %72, %62
  %74 = lshr i64 %73, 8
  %75 = and i64 %74, 16711935
  %76 = lshr i64 %73, 32
  %77 = and i64 %76, 4278255360
  %78 = or i64 %75, %77
  %79 = trunc i64 %78 to i32
  store i32 %79, i32* %50, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN23SkARGB32_Opaque_Blitter10blitAntiV2Eiijj(%class.SkARGB32_Opaque_Blitter* nocapture readonly, i32, i32, i32, i32) unnamed_addr #3 align 2 {
  %6 = getelementptr inbounds %class.SkARGB32_Opaque_Blitter, %class.SkARGB32_Opaque_Blitter* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = sext i32 %2 to i64
  %9 = getelementptr inbounds %class.SkARGB32_Opaque_Blitter, %class.SkARGB32_Opaque_Blitter* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = mul i64 %10, %8
  %12 = getelementptr inbounds i8, i8* %7, i64 %11
  %13 = shl i32 %1, 2
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %12, i64 %14
  %16 = bitcast i8* %15 to i32*
  %17 = getelementptr inbounds %class.SkARGB32_Opaque_Blitter, %class.SkARGB32_Opaque_Blitter* %0, i64 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = load i32, i32* %16, align 4
  %20 = lshr i32 %3, 7
  %21 = add i32 %20, %3
  %22 = lshr i32 %18, 8
  %23 = and i32 %22, 16711935
  %24 = zext i32 %23 to i64
  %25 = shl nuw nsw i64 %24, 32
  %26 = and i32 %18, 16711935
  %27 = zext i32 %26 to i64
  %28 = or i64 %25, %27
  %29 = zext i32 %21 to i64
  %30 = mul i64 %28, %29
  %31 = sub i32 256, %21
  %32 = zext i32 %31 to i64
  %33 = lshr i32 %19, 8
  %34 = and i32 %33, 16711935
  %35 = zext i32 %34 to i64
  %36 = shl nuw nsw i64 %35, 32
  %37 = and i32 %19, 16711935
  %38 = zext i32 %37 to i64
  %39 = or i64 %36, %38
  %40 = mul i64 %39, %32
  %41 = add i64 %40, %30
  %42 = lshr i64 %41, 8
  %43 = and i64 %42, 16711935
  %44 = lshr i64 %41, 32
  %45 = and i64 %44, 4278255360
  %46 = or i64 %43, %45
  %47 = trunc i64 %46 to i32
  store i32 %47, i32* %16, align 4
  %48 = load i64, i64* %9, align 8
  %49 = getelementptr inbounds i8, i8* %15, i64 %48
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %17, align 4
  %52 = load i32, i32* %50, align 4
  %53 = lshr i32 %4, 7
  %54 = add i32 %53, %4
  %55 = lshr i32 %51, 8
  %56 = and i32 %55, 16711935
  %57 = zext i32 %56 to i64
  %58 = shl nuw nsw i64 %57, 32
  %59 = and i32 %51, 16711935
  %60 = zext i32 %59 to i64
  %61 = or i64 %58, %60
  %62 = zext i32 %54 to i64
  %63 = mul i64 %61, %62
  %64 = sub i32 256, %54
  %65 = zext i32 %64 to i64
  %66 = lshr i32 %52, 8
  %67 = and i32 %66, 16711935
  %68 = zext i32 %67 to i64
  %69 = shl nuw nsw i64 %68, 32
  %70 = and i32 %52, 16711935
  %71 = zext i32 %70 to i64
  %72 = or i64 %69, %71
  %73 = mul i64 %72, %65
  %74 = add i64 %73, %63
  %75 = lshr i64 %74, 8
  %76 = and i64 %75, 16711935
  %77 = lshr i64 %74, 32
  %78 = and i64 %77, 4278255360
  %79 = or i64 %76, %78
  %80 = trunc i64 %79 to i32
  store i32 %80, i32* %50, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN16SkARGB32_Blitter5blitVEiiih(%class.SkARGB32_Blitter* nocapture readonly, i32, i32, i32, i8 zeroext) unnamed_addr #3 align 2 {
  %6 = zext i8 %4 to i32
  %7 = icmp eq i8 %4, 0
  br i1 %7, label %95, label %8

8:                                                ; preds = %5
  %9 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 3
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %95, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 1, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = sext i32 %2 to i64
  %16 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 1, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = mul i64 %17, %15
  %19 = getelementptr inbounds i8, i8* %14, i64 %18
  %20 = shl i32 %1, 2
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %19, i64 %21
  %23 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i8 %4, -1
  br i1 %25, label %37, label %26

26:                                               ; preds = %12
  %27 = add nuw nsw i32 %6, 1
  %28 = and i32 %24, 16711935
  %29 = mul i32 %28, %27
  %30 = lshr i32 %29, 8
  %31 = lshr i32 %24, 8
  %32 = and i32 %31, 16711935
  %33 = mul i32 %32, %27
  %34 = and i32 %30, 16711935
  %35 = and i32 %33, -16711936
  %36 = or i32 %34, %35
  br label %37

37:                                               ; preds = %12, %26
  %38 = phi i32 [ %36, %26 ], [ %24, %12 ]
  %39 = lshr i32 %38, 24
  %40 = sub nuw nsw i32 256, %39
  %41 = icmp sgt i32 %3, 0
  br i1 %41, label %42, label %95

42:                                               ; preds = %37
  %43 = and i32 %3, 1
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %60, label %45

45:                                               ; preds = %42
  %46 = bitcast i8* %22 to i32*
  %47 = add nsw i32 %3, -1
  %48 = load i32, i32* %46, align 4
  %49 = and i32 %48, 16711935
  %50 = mul i32 %49, %40
  %51 = lshr i32 %50, 8
  %52 = lshr i32 %48, 8
  %53 = and i32 %52, 16711935
  %54 = mul i32 %53, %40
  %55 = and i32 %51, 16711935
  %56 = and i32 %54, -16711936
  %57 = or i32 %55, %56
  %58 = add i32 %57, %38
  store i32 %58, i32* %46, align 4
  %59 = getelementptr inbounds i8, i8* %22, i64 %17
  br label %60

60:                                               ; preds = %42, %45
  %61 = phi i8* [ %22, %42 ], [ %59, %45 ]
  %62 = phi i32 [ %3, %42 ], [ %47, %45 ]
  %63 = icmp eq i32 %3, 1
  br i1 %63, label %95, label %64

64:                                               ; preds = %60, %64
  %65 = phi i8* [ %93, %64 ], [ %61, %60 ]
  %66 = phi i32 [ %81, %64 ], [ %62, %60 ]
  %67 = bitcast i8* %65 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = and i32 %68, 16711935
  %70 = mul i32 %69, %40
  %71 = lshr i32 %70, 8
  %72 = lshr i32 %68, 8
  %73 = and i32 %72, 16711935
  %74 = mul i32 %73, %40
  %75 = and i32 %71, 16711935
  %76 = and i32 %74, -16711936
  %77 = or i32 %75, %76
  %78 = add i32 %77, %38
  store i32 %78, i32* %67, align 4
  %79 = getelementptr inbounds i8, i8* %65, i64 %17
  %80 = bitcast i8* %79 to i32*
  %81 = add nsw i32 %66, -2
  %82 = load i32, i32* %80, align 4
  %83 = and i32 %82, 16711935
  %84 = mul i32 %83, %40
  %85 = lshr i32 %84, 8
  %86 = lshr i32 %82, 8
  %87 = and i32 %86, 16711935
  %88 = mul i32 %87, %40
  %89 = and i32 %85, 16711935
  %90 = and i32 %88, -16711936
  %91 = or i32 %89, %90
  %92 = add i32 %91, %38
  store i32 %92, i32* %80, align 4
  %93 = getelementptr inbounds i8, i8* %79, i64 %17
  %94 = icmp sgt i32 %81, 0
  br i1 %94, label %64, label %95

95:                                               ; preds = %60, %64, %37, %5, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16SkARGB32_Blitter8blitRectEiiii(%class.SkARGB32_Blitter* nocapture readonly, i32, i32, i32, i32) unnamed_addr #2 align 2 {
  %6 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %36, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 1, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = sext i32 %2 to i64
  %13 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 1, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = mul i64 %14, %12
  %16 = getelementptr inbounds i8, i8* %11, i64 %15
  %17 = shl i32 %1, 2
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %16, i64 %18
  %20 = bitcast i8* %19 to i32*
  %21 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = icmp ugt i32 %22, -16777217
  br i1 %23, label %26, label %24

24:                                               ; preds = %9
  %25 = icmp sgt i32 %4, 0
  br i1 %25, label %28, label %36

26:                                               ; preds = %9
  %27 = load void (i32*, i32, i32, i64, i32)*, void (i32*, i32, i32, i64, i32)** @_ZN6SkOpts13rect_memset32E, align 8
  tail call void %27(i32* %20, i32 %22, i32 %3, i64 %14, i32 %4) #12
  br label %36

28:                                               ; preds = %24, %28
  %29 = phi i8* [ %33, %28 ], [ %19, %24 ]
  %30 = phi i32* [ %34, %28 ], [ %20, %24 ]
  %31 = phi i32 [ %32, %28 ], [ %4, %24 ]
  %32 = add nsw i32 %31, -1
  tail call void @_ZN9SkBlitRow7Color32EPjPKjij(i32* %30, i32* %30, i32 %3, i32 %22) #12
  %33 = getelementptr inbounds i8, i8* %29, i64 %14
  %34 = bitcast i8* %33 to i32*
  %35 = icmp sgt i32 %32, 0
  br i1 %35, label %28, label %36

36:                                               ; preds = %28, %24, %26, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22SkARGB32_Black_Blitter9blitAntiHEiiPKhPKs(%class.SkARGB32_Black_Blitter* nocapture readonly, i32, i32, i8* nocapture readonly, i16* nocapture readonly) unnamed_addr #2 align 2 {
  %6 = load i16, i16* %4, align 2
  %7 = icmp slt i16 %6, 1
  br i1 %7, label %96, label %8

8:                                                ; preds = %5
  %9 = getelementptr inbounds %class.SkARGB32_Black_Blitter, %class.SkARGB32_Black_Blitter* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %class.SkARGB32_Black_Blitter, %class.SkARGB32_Black_Blitter* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = sext i32 %2 to i64
  %14 = mul i64 %12, %13
  %15 = getelementptr inbounds i8, i8* %10, i64 %14
  %16 = shl i32 %1, 2
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %15, i64 %17
  %19 = bitcast i8* %18 to i32*
  br label %20

20:                                               ; preds = %8, %89
  %21 = phi i16 [ %94, %89 ], [ %6, %8 ]
  %22 = phi i32* [ %93, %89 ], [ %19, %8 ]
  %23 = phi i16* [ %91, %89 ], [ %4, %8 ]
  %24 = phi i8* [ %92, %89 ], [ %3, %8 ]
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  switch i8 %25, label %30 [
    i8 0, label %89
    i8 -1, label %27
  ]

27:                                               ; preds = %20
  %28 = sext i16 %21 to i32
  %29 = load void (i32*, i32, i32)*, void (i32*, i32, i32)** @_ZN6SkOpts8memset32E, align 8
  tail call void %29(i32* %22, i32 -16777216, i32 %28) #12
  br label %89

30:                                               ; preds = %20
  %31 = shl nuw i32 %26, 24
  %32 = sub nuw nsw i32 256, %26
  %33 = sext i16 %21 to i64
  %34 = icmp slt i64 %33, 1
  %35 = select i1 %34, i64 %33, i64 1
  %36 = add nsw i64 %35, -1
  %37 = sub nsw i64 %33, %36
  %38 = icmp ult i64 %37, 4
  br i1 %38, label %71, label %39

39:                                               ; preds = %30
  %40 = and i64 %37, -4
  %41 = sub nsw i64 %33, %40
  %42 = insertelement <4 x i32> undef, i32 %32, i32 0
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> zeroinitializer
  %44 = insertelement <4 x i32> undef, i32 %31, i32 0
  %45 = shufflevector <4 x i32> %44, <4 x i32> undef, <4 x i32> zeroinitializer
  %46 = getelementptr inbounds i32, i32* %22, i64 -3
  br label %47

47:                                               ; preds = %47, %39
  %48 = phi i64 [ 0, %39 ], [ %67, %47 ]
  %49 = xor i64 %48, -1
  %50 = add i64 %49, %33
  %51 = getelementptr inbounds i32, i32* %46, i64 %50
  %52 = bitcast i32* %51 to <4 x i32>*
  %53 = load <4 x i32>, <4 x i32>* %52, align 4
  %54 = shufflevector <4 x i32> %53, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %55 = and <4 x i32> %54, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %56 = mul <4 x i32> %55, %43
  %57 = lshr <4 x i32> %56, <i32 8, i32 8, i32 8, i32 8>
  %58 = lshr <4 x i32> %54, <i32 8, i32 8, i32 8, i32 8>
  %59 = and <4 x i32> %58, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %60 = mul <4 x i32> %59, %43
  %61 = and <4 x i32> %57, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %62 = and <4 x i32> %60, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %63 = or <4 x i32> %61, %62
  %64 = add <4 x i32> %63, %45
  %65 = shufflevector <4 x i32> %64, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %66 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 4
  %67 = add i64 %48, 4
  %68 = icmp eq i64 %67, %40
  br i1 %68, label %69, label %47, !llvm.loop !11

69:                                               ; preds = %47
  %70 = icmp eq i64 %37, %40
  br i1 %70, label %89, label %71

71:                                               ; preds = %69, %30
  %72 = phi i64 [ %33, %30 ], [ %41, %69 ]
  br label %73

73:                                               ; preds = %71, %73
  %74 = phi i64 [ %75, %73 ], [ %72, %71 ]
  %75 = add nsw i64 %74, -1
  %76 = getelementptr inbounds i32, i32* %22, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = and i32 %77, 16711935
  %79 = mul i32 %78, %32
  %80 = lshr i32 %79, 8
  %81 = lshr i32 %77, 8
  %82 = and i32 %81, 16711935
  %83 = mul i32 %82, %32
  %84 = and i32 %80, 16711935
  %85 = and i32 %83, -16711936
  %86 = or i32 %84, %85
  %87 = add i32 %86, %31
  store i32 %87, i32* %76, align 4
  %88 = icmp sgt i64 %75, 0
  br i1 %88, label %73, label %89, !llvm.loop !12

89:                                               ; preds = %73, %69, %27, %20
  %90 = sext i16 %21 to i64
  %91 = getelementptr inbounds i16, i16* %23, i64 %90
  %92 = getelementptr inbounds i8, i8* %24, i64 %90
  %93 = getelementptr inbounds i32, i32* %22, i64 %90
  %94 = load i16, i16* %91, align 2
  %95 = icmp slt i16 %94, 1
  br i1 %95, label %96, label %20

96:                                               ; preds = %89, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN22SkARGB32_Black_Blitter10blitAntiH2Eiijj(%class.SkARGB32_Black_Blitter* nocapture readonly, i32, i32, i32, i32) unnamed_addr #3 align 2 {
  %6 = getelementptr inbounds %class.SkARGB32_Black_Blitter, %class.SkARGB32_Black_Blitter* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = sext i32 %2 to i64
  %9 = getelementptr inbounds %class.SkARGB32_Black_Blitter, %class.SkARGB32_Black_Blitter* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = mul i64 %10, %8
  %12 = getelementptr inbounds i8, i8* %7, i64 %11
  %13 = shl i32 %1, 2
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %12, i64 %14
  %16 = bitcast i8* %15 to i32*
  %17 = shl i32 %3, 24
  %18 = load i32, i32* %16, align 4
  %19 = sub i32 256, %3
  %20 = and i32 %18, 16711935
  %21 = mul i32 %20, %19
  %22 = lshr i32 %21, 8
  %23 = lshr i32 %18, 8
  %24 = and i32 %23, 16711935
  %25 = mul i32 %24, %19
  %26 = and i32 %22, 16711935
  %27 = and i32 %25, -16711936
  %28 = or i32 %26, %27
  %29 = add i32 %28, %17
  store i32 %29, i32* %16, align 4
  %30 = shl i32 %4, 24
  %31 = getelementptr inbounds i8, i8* %15, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = sub i32 256, %4
  %35 = and i32 %33, 16711935
  %36 = mul i32 %35, %34
  %37 = lshr i32 %36, 8
  %38 = lshr i32 %33, 8
  %39 = and i32 %38, 16711935
  %40 = mul i32 %39, %34
  %41 = and i32 %37, 16711935
  %42 = and i32 %40, -16711936
  %43 = or i32 %41, %42
  %44 = add i32 %43, %30
  store i32 %44, i32* %32, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN22SkARGB32_Black_Blitter10blitAntiV2Eiijj(%class.SkARGB32_Black_Blitter* nocapture readonly, i32, i32, i32, i32) unnamed_addr #3 align 2 {
  %6 = getelementptr inbounds %class.SkARGB32_Black_Blitter, %class.SkARGB32_Black_Blitter* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = sext i32 %2 to i64
  %9 = getelementptr inbounds %class.SkARGB32_Black_Blitter, %class.SkARGB32_Black_Blitter* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = mul i64 %10, %8
  %12 = getelementptr inbounds i8, i8* %7, i64 %11
  %13 = shl i32 %1, 2
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %12, i64 %14
  %16 = bitcast i8* %15 to i32*
  %17 = shl i32 %3, 24
  %18 = load i32, i32* %16, align 4
  %19 = sub i32 256, %3
  %20 = and i32 %18, 16711935
  %21 = mul i32 %20, %19
  %22 = lshr i32 %21, 8
  %23 = lshr i32 %18, 8
  %24 = and i32 %23, 16711935
  %25 = mul i32 %24, %19
  %26 = and i32 %22, 16711935
  %27 = and i32 %25, -16711936
  %28 = or i32 %26, %27
  %29 = add i32 %28, %17
  store i32 %29, i32* %16, align 4
  %30 = load i64, i64* %9, align 8
  %31 = getelementptr inbounds i8, i8* %15, i64 %30
  %32 = bitcast i8* %31 to i32*
  %33 = shl i32 %4, 24
  %34 = load i32, i32* %32, align 4
  %35 = sub i32 256, %4
  %36 = and i32 %34, 16711935
  %37 = mul i32 %36, %35
  %38 = lshr i32 %37, 8
  %39 = lshr i32 %34, 8
  %40 = and i32 %39, 16711935
  %41 = mul i32 %40, %35
  %42 = and i32 %38, 16711935
  %43 = and i32 %41, -16711936
  %44 = or i32 %42, %43
  %45 = add i32 %44, %33
  store i32 %45, i32* %32, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23SkARGB32_Shader_BlitterC2ERK8SkPixmapRK7SkPaintPN12SkShaderBase7ContextE(%class.SkARGB32_Shader_Blitter*, %class.SkPixmap* dereferenceable(40), %class.SkPaint* dereferenceable(72), %"class.SkShaderBase::Context"*) unnamed_addr #2 align 2 {
  %5 = alloca %class.sk_sp.12, align 8
  %6 = bitcast %class.SkARGB32_Shader_Blitter* %0 to %class.SkShaderBlitter*
  tail call void @_ZN15SkShaderBlitterC2ERK8SkPixmapRK7SkPaintPN12SkShaderBase7ContextE(%class.SkShaderBlitter* %6, %class.SkPixmap* dereferenceable(40) %1, %class.SkPaint* dereferenceable(72) %2, %"class.SkShaderBase::Context"* %3) #12
  %7 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV23SkARGB32_Shader_Blitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %1, i64 0, i32 2, i32 1, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = shl nsw i64 %10, 2
  %12 = tail call i8* @_Z15sk_malloc_flagsmj(i64 %11, i32 2) #12
  %13 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 3
  %14 = bitcast i32** %13 to i8**
  store i8* %12, i8** %14, align 8
  %15 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %2, i64 0, i32 8, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = lshr i32 %16, 10
  %18 = and i32 %17, 255
  %19 = bitcast %class.sk_sp.12* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #12
  %20 = getelementptr inbounds %class.sk_sp.12, %class.sk_sp.12* %5, i64 0, i32 0
  store %class.SkXfermode* inttoptr (i64 -6148914691236517206 to %class.SkXfermode*), %class.SkXfermode** %20, align 8
  call void @_ZN10SkXfermode4MakeE11SkBlendMode(%class.sk_sp.12* nonnull sret %5, i32 %18) #12
  %21 = load %class.SkXfermode*, %class.SkXfermode** %20, align 8
  %22 = icmp eq %class.SkXfermode* %21, null
  br i1 %22, label %33, label %23

23:                                               ; preds = %4
  %24 = getelementptr inbounds %class.SkXfermode, %class.SkXfermode* %21, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = atomicrmw add i32* %24, i32 -1 acq_rel
  %26 = icmp eq i32 %25, 1
  br i1 %26, label %27, label %33

27:                                               ; preds = %23
  %28 = bitcast %class.SkXfermode* %21 to %class.SkRefCntBase*
  %29 = bitcast %class.SkXfermode* %21 to void (%class.SkRefCntBase*)***
  %30 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %29, align 8
  %31 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %30, i64 2
  %32 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %31, align 8
  call void %32(%class.SkRefCntBase* nonnull %28) #12
  br label %33

33:                                               ; preds = %4, %23, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #12
  %34 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 2
  store %class.SkXfermode* %21, %class.SkXfermode** %34, align 8
  %35 = bitcast %"class.SkShaderBase::Context"* %3 to i32 (%"class.SkShaderBase::Context"*)***
  %36 = load i32 (%"class.SkShaderBase::Context"*)**, i32 (%"class.SkShaderBase::Context"*)*** %35, align 8
  %37 = getelementptr inbounds i32 (%"class.SkShaderBase::Context"*)*, i32 (%"class.SkShaderBase::Context"*)** %36, i64 2
  %38 = load i32 (%"class.SkShaderBase::Context"*)*, i32 (%"class.SkShaderBase::Context"*)** %37, align 8
  %39 = call i32 %38(%"class.SkShaderBase::Context"* %3) #12
  %40 = shl i32 %39, 1
  %41 = and i32 %40, 2
  %42 = xor i32 %41, 2
  %43 = call void (i32*, i32*, i32, i32)* @_ZN9SkBlitRow9Factory32Ej(i32 %42) #12
  %44 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 4
  store void (i32*, i32*, i32, i32)* %43, void (i32*, i32*, i32, i32)** %44, align 8
  %45 = or i32 %42, 1
  %46 = call void (i32*, i32*, i32, i32)* @_ZN9SkBlitRow9Factory32Ej(i32 %45) #12
  %47 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 5
  store void (i32*, i32*, i32, i32)* %46, void (i32*, i32*, i32, i32)** %47, align 8
  %48 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 6
  store i8 0, i8* %48, align 8
  %49 = load %class.SkXfermode*, %class.SkXfermode** %34, align 8
  %50 = icmp eq %class.SkXfermode* %49, null
  br i1 %50, label %51, label %59

51:                                               ; preds = %33
  %52 = load i32 (%"class.SkShaderBase::Context"*)**, i32 (%"class.SkShaderBase::Context"*)*** %35, align 8
  %53 = getelementptr inbounds i32 (%"class.SkShaderBase::Context"*)*, i32 (%"class.SkShaderBase::Context"*)** %52, i64 2
  %54 = load i32 (%"class.SkShaderBase::Context"*)*, i32 (%"class.SkShaderBase::Context"*)** %53, align 8
  %55 = call i32 %54(%"class.SkShaderBase::Context"* %3) #12
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %64, label %58

58:                                               ; preds = %51
  store i8 1, i8* %48, align 8
  br label %64

59:                                               ; preds = %33
  %60 = load i32, i32* %15, align 8
  %61 = and i32 %60, 261120
  %62 = icmp eq i32 %61, 1024
  br i1 %62, label %63, label %64

63:                                               ; preds = %59
  store i8 1, i8* %48, align 8
  store void (i32*, i32*, i32, i32)* @_ZL13blend_srcmodePjPKjij, void (i32*, i32*, i32, i32)** %47, align 8
  br label %64

64:                                               ; preds = %51, %59, %63, %58
  %65 = load i32 (%"class.SkShaderBase::Context"*)**, i32 (%"class.SkShaderBase::Context"*)*** %35, align 8
  %66 = getelementptr inbounds i32 (%"class.SkShaderBase::Context"*)*, i32 (%"class.SkShaderBase::Context"*)** %65, i64 2
  %67 = load i32 (%"class.SkShaderBase::Context"*)*, i32 (%"class.SkShaderBase::Context"*)** %66, align 8
  %68 = call i32 %67(%"class.SkShaderBase::Context"* %3) #12
  %69 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 5
  %70 = lshr i32 %68, 1
  %71 = trunc i32 %70 to i8
  %72 = and i8 %71, 1
  store i8 %72, i8* %69, align 8
  ret void
}

declare void @_ZN15SkShaderBlitterC2ERK8SkPixmapRK7SkPaintPN12SkShaderBase7ContextE(%class.SkShaderBlitter*, %class.SkPixmap* dereferenceable(40), %class.SkPaint* dereferenceable(72), %"class.SkShaderBase::Context"*) unnamed_addr #4

declare void (i32*, i32*, i32, i32)* @_ZN9SkBlitRow9Factory32Ej(i32) local_unnamed_addr #4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL13blend_srcmodePjPKjij(i32* noalias nocapture, i32* noalias nocapture readonly, i32, i32) #3 {
  %5 = add i32 %3, 1
  %6 = icmp sgt i32 %2, 0
  br i1 %6, label %7, label %65

7:                                                ; preds = %4
  %8 = zext i32 %2 to i64
  %9 = icmp ult i32 %2, 4
  br i1 %9, label %10, label %12

10:                                               ; preds = %63, %7
  %11 = phi i64 [ 0, %7 ], [ %13, %63 ]
  br label %66

12:                                               ; preds = %7
  %13 = and i64 %8, 4294967292
  %14 = insertelement <4 x i32> undef, i32 %5, i32 0
  %15 = shufflevector <4 x i32> %14, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %16

16:                                               ; preds = %16, %12
  %17 = phi i64 [ 0, %12 ], [ %61, %16 ]
  %18 = getelementptr inbounds i32, i32* %1, i64 %17
  %19 = bitcast i32* %18 to <4 x i32>*
  %20 = load <4 x i32>, <4 x i32>* %19, align 4
  %21 = getelementptr inbounds i32, i32* %0, i64 %17
  %22 = bitcast i32* %21 to <4 x i32>*
  %23 = load <4 x i32>, <4 x i32>* %22, align 4
  %24 = lshr <4 x i32> %20, <i32 24, i32 24, i32 24, i32 24>
  %25 = lshr <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %26 = sub nsw <4 x i32> %24, %25
  %27 = mul nsw <4 x i32> %26, %15
  %28 = lshr <4 x i32> %27, <i32 8, i32 8, i32 8, i32 8>
  %29 = add nuw nsw <4 x i32> %28, %25
  %30 = lshr <4 x i32> %20, <i32 16, i32 16, i32 16, i32 16>
  %31 = and <4 x i32> %30, <i32 255, i32 255, i32 255, i32 255>
  %32 = lshr <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %33 = and <4 x i32> %32, <i32 255, i32 255, i32 255, i32 255>
  %34 = sub nsw <4 x i32> %31, %33
  %35 = mul nsw <4 x i32> %34, %15
  %36 = lshr <4 x i32> %35, <i32 8, i32 8, i32 8, i32 8>
  %37 = add nuw nsw <4 x i32> %36, %32
  %38 = lshr <4 x i32> %20, <i32 8, i32 8, i32 8, i32 8>
  %39 = and <4 x i32> %38, <i32 255, i32 255, i32 255, i32 255>
  %40 = lshr <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %41 = and <4 x i32> %40, <i32 255, i32 255, i32 255, i32 255>
  %42 = sub nsw <4 x i32> %39, %41
  %43 = mul nsw <4 x i32> %42, %15
  %44 = and <4 x i32> %20, <i32 255, i32 255, i32 255, i32 255>
  %45 = and <4 x i32> %23, <i32 255, i32 255, i32 255, i32 255>
  %46 = sub nsw <4 x i32> %44, %45
  %47 = mul nsw <4 x i32> %46, %15
  %48 = lshr <4 x i32> %47, <i32 8, i32 8, i32 8, i32 8>
  %49 = add <4 x i32> %48, %23
  %50 = and <4 x i32> %49, <i32 255, i32 255, i32 255, i32 255>
  %51 = shl <4 x i32> %29, <i32 24, i32 24, i32 24, i32 24>
  %52 = shl <4 x i32> %37, <i32 16, i32 16, i32 16, i32 16>
  %53 = and <4 x i32> %52, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %54 = and <4 x i32> %23, <i32 65280, i32 65280, i32 65280, i32 65280>
  %55 = add <4 x i32> %43, %54
  %56 = and <4 x i32> %55, <i32 65280, i32 65280, i32 65280, i32 65280>
  %57 = or <4 x i32> %56, %51
  %58 = or <4 x i32> %57, %50
  %59 = or <4 x i32> %58, %53
  %60 = bitcast i32* %21 to <4 x i32>*
  store <4 x i32> %59, <4 x i32>* %60, align 4
  %61 = add i64 %17, 4
  %62 = icmp eq i64 %61, %13
  br i1 %62, label %63, label %16, !llvm.loop !14

63:                                               ; preds = %16
  %64 = icmp eq i64 %13, %8
  br i1 %64, label %65, label %10

65:                                               ; preds = %66, %63, %4
  ret void

66:                                               ; preds = %10, %66
  %67 = phi i64 [ %108, %66 ], [ %11, %10 ]
  %68 = getelementptr inbounds i32, i32* %1, i64 %67
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds i32, i32* %0, i64 %67
  %71 = load i32, i32* %70, align 4
  %72 = lshr i32 %69, 24
  %73 = lshr i32 %71, 24
  %74 = sub nsw i32 %72, %73
  %75 = mul nsw i32 %74, %5
  %76 = lshr i32 %75, 8
  %77 = add nuw nsw i32 %76, %73
  %78 = lshr i32 %69, 16
  %79 = and i32 %78, 255
  %80 = lshr i32 %71, 16
  %81 = and i32 %80, 255
  %82 = sub nsw i32 %79, %81
  %83 = mul nsw i32 %82, %5
  %84 = lshr i32 %83, 8
  %85 = add nuw nsw i32 %84, %80
  %86 = lshr i32 %69, 8
  %87 = and i32 %86, 255
  %88 = lshr i32 %71, 8
  %89 = and i32 %88, 255
  %90 = sub nsw i32 %87, %89
  %91 = mul nsw i32 %90, %5
  %92 = and i32 %69, 255
  %93 = and i32 %71, 255
  %94 = sub nsw i32 %92, %93
  %95 = mul nsw i32 %94, %5
  %96 = lshr i32 %95, 8
  %97 = add i32 %96, %71
  %98 = and i32 %97, 255
  %99 = shl i32 %77, 24
  %100 = shl i32 %85, 16
  %101 = and i32 %100, 16711680
  %102 = and i32 %71, 65280
  %103 = add i32 %91, %102
  %104 = and i32 %103, 65280
  %105 = or i32 %104, %99
  %106 = or i32 %105, %98
  %107 = or i32 %106, %101
  store i32 %107, i32* %70, align 4
  %108 = add nuw nsw i64 %67, 1
  %109 = icmp eq i64 %108, %8
  br i1 %109, label %65, label %66, !llvm.loop !15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23SkARGB32_Shader_BlitterD2Ev(%class.SkARGB32_Shader_Blitter*) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV23SkARGB32_Shader_Blitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 3
  %4 = bitcast i32** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  tail call void @_Z7sk_freePv(i8* %5) #12
  %6 = bitcast %class.SkARGB32_Shader_Blitter* %0 to %class.SkShaderBlitter*
  tail call void @_ZN15SkShaderBlitterD2Ev(%class.SkShaderBlitter* %6) #12
  ret void
}

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN15SkShaderBlitterD2Ev(%class.SkShaderBlitter*) unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23SkARGB32_Shader_BlitterD0Ev(%class.SkARGB32_Shader_Blitter*) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV23SkARGB32_Shader_Blitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 3
  %4 = bitcast i32** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  tail call void @_Z7sk_freePv(i8* %5) #12
  %6 = bitcast %class.SkARGB32_Shader_Blitter* %0 to %class.SkShaderBlitter*
  tail call void @_ZN15SkShaderBlitterD2Ev(%class.SkShaderBlitter* %6) #12
  %7 = bitcast %class.SkARGB32_Shader_Blitter* %0 to i8*
  tail call void @_ZdlPv(i8* %7) #14
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23SkARGB32_Shader_Blitter5blitHEiii(%class.SkARGB32_Shader_Blitter* nocapture readonly, i32, i32, i32) unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = sext i32 %2 to i64
  %8 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = mul i64 %9, %7
  %11 = getelementptr inbounds i8, i8* %6, i64 %10
  %12 = shl i32 %1, 2
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i8, i8* %11, i64 %13
  %15 = bitcast i8* %14 to i32*
  %16 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 6
  %17 = load i8, i8* %16, align 8, !range !16
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %26, label %19

19:                                               ; preds = %4
  %20 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 4
  %21 = load %"class.SkShaderBase::Context"*, %"class.SkShaderBase::Context"** %20, align 8
  %22 = bitcast %"class.SkShaderBase::Context"* %21 to void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)***
  %23 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)**, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*** %22, align 8
  %24 = getelementptr inbounds void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %23, i64 3
  %25 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %24, align 8
  tail call void %25(%"class.SkShaderBase::Context"* %21, i32 %1, i32 %2, i32* %15, i32 %3) #12
  br label %46

26:                                               ; preds = %4
  %27 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 3
  %28 = load i32*, i32** %27, align 8
  %29 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 4
  %30 = load %"class.SkShaderBase::Context"*, %"class.SkShaderBase::Context"** %29, align 8
  %31 = bitcast %"class.SkShaderBase::Context"* %30 to void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)***
  %32 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)**, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %32, i64 3
  %34 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %33, align 8
  tail call void %34(%"class.SkShaderBase::Context"* %30, i32 %1, i32 %2, i32* %28, i32 %3) #12
  %35 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 2
  %36 = load %class.SkXfermode*, %class.SkXfermode** %35, align 8
  %37 = icmp eq %class.SkXfermode* %36, null
  br i1 %37, label %43, label %38

38:                                               ; preds = %26
  %39 = bitcast %class.SkXfermode* %36 to void (%class.SkXfermode*, i32*, i32*, i32, i8*)***
  %40 = load void (%class.SkXfermode*, i32*, i32*, i32, i8*)**, void (%class.SkXfermode*, i32*, i32*, i32, i8*)*** %39, align 8
  %41 = getelementptr inbounds void (%class.SkXfermode*, i32*, i32*, i32, i8*)*, void (%class.SkXfermode*, i32*, i32*, i32, i8*)** %40, i64 3
  %42 = load void (%class.SkXfermode*, i32*, i32*, i32, i8*)*, void (%class.SkXfermode*, i32*, i32*, i32, i8*)** %41, align 8
  tail call void %42(%class.SkXfermode* nonnull %36, i32* %15, i32* %28, i32 %3, i8* null) #12
  br label %46

43:                                               ; preds = %26
  %44 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 4
  %45 = load void (i32*, i32*, i32, i32)*, void (i32*, i32*, i32, i32)** %44, align 8
  tail call void %45(i32* %15, i32* %28, i32 %3, i32 255) #12
  br label %46

46:                                               ; preds = %38, %43, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23SkARGB32_Shader_Blitter8blitRectEiiii(%class.SkARGB32_Shader_Blitter* nocapture readonly, i32, i32, i32, i32) unnamed_addr #2 align 2 {
  %6 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = sext i32 %2 to i64
  %9 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = mul i64 %10, %8
  %12 = getelementptr inbounds i8, i8* %7, i64 %11
  %13 = shl i32 %1, 2
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %12, i64 %14
  %16 = bitcast i8* %15 to i32*
  %17 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 4
  %18 = load %"class.SkShaderBase::Context"*, %"class.SkShaderBase::Context"** %17, align 8
  %19 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 3
  %20 = load i32*, i32** %19, align 8
  %21 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 5
  %22 = load i8, i8* %21, align 8, !range !16
  %23 = icmp eq i8 %22, 0
  %24 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 6
  %25 = load i8, i8* %24, align 8, !range !16
  %26 = icmp ne i8 %25, 0
  br i1 %23, label %89, label %27

27:                                               ; preds = %5
  %28 = bitcast %"class.SkShaderBase::Context"* %18 to void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)***
  %29 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)**, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*** %28, align 8
  %30 = getelementptr inbounds void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %29, i64 3
  %31 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %30, align 8
  br i1 %26, label %32, label %63

32:                                               ; preds = %27
  tail call void %31(%"class.SkShaderBase::Context"* %18, i32 %1, i32 %2, i32* %16, i32 %3) #12
  %33 = add nsw i32 %4, -1
  %34 = icmp sgt i32 %33, 0
  br i1 %34, label %35, label %142

35:                                               ; preds = %32
  %36 = shl i32 %3, 2
  %37 = sext i32 %36 to i64
  %38 = add i32 %4, 3
  %39 = add i32 %4, -2
  %40 = and i32 %38, 3
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %50, label %42

42:                                               ; preds = %35, %42
  %43 = phi i32 [ %47, %42 ], [ %33, %35 ]
  %44 = phi i8* [ %46, %42 ], [ %15, %35 ]
  %45 = phi i32 [ %48, %42 ], [ %40, %35 ]
  %46 = getelementptr inbounds i8, i8* %44, i64 %10
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %46, i8* align 4 %15, i64 %37, i1 false)
  %47 = add nsw i32 %43, -1
  %48 = add i32 %45, -1
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %42, !llvm.loop !17

50:                                               ; preds = %42, %35
  %51 = phi i32 [ %33, %35 ], [ %47, %42 ]
  %52 = phi i8* [ %15, %35 ], [ %46, %42 ]
  %53 = icmp ult i32 %39, 3
  br i1 %53, label %142, label %54

54:                                               ; preds = %50, %54
  %55 = phi i32 [ %61, %54 ], [ %51, %50 ]
  %56 = phi i8* [ %60, %54 ], [ %52, %50 ]
  %57 = getelementptr inbounds i8, i8* %56, i64 %10
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %57, i8* align 4 %15, i64 %37, i1 false)
  %58 = getelementptr inbounds i8, i8* %57, i64 %10
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %58, i8* align 4 %15, i64 %37, i1 false)
  %59 = getelementptr inbounds i8, i8* %58, i64 %10
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %59, i8* align 4 %15, i64 %37, i1 false)
  %60 = getelementptr inbounds i8, i8* %59, i64 %10
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %60, i8* align 4 %15, i64 %37, i1 false)
  %61 = add nsw i32 %55, -4
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %54, label %142

63:                                               ; preds = %27
  tail call void %31(%"class.SkShaderBase::Context"* %18, i32 %1, i32 %2, i32* %20, i32 %3) #12
  %64 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 2
  %65 = load %class.SkXfermode*, %class.SkXfermode** %64, align 8
  %66 = icmp eq %class.SkXfermode* %65, null
  br i1 %66, label %79, label %67

67:                                               ; preds = %63
  %68 = bitcast %class.SkXfermode* %65 to void (%class.SkXfermode*, i32*, i32*, i32, i8*)***
  br label %69

69:                                               ; preds = %67, %69
  %70 = phi i32 [ %77, %69 ], [ %4, %67 ]
  %71 = phi i8* [ %76, %69 ], [ %15, %67 ]
  %72 = bitcast i8* %71 to i32*
  %73 = load void (%class.SkXfermode*, i32*, i32*, i32, i8*)**, void (%class.SkXfermode*, i32*, i32*, i32, i8*)*** %68, align 8
  %74 = getelementptr inbounds void (%class.SkXfermode*, i32*, i32*, i32, i8*)*, void (%class.SkXfermode*, i32*, i32*, i32, i8*)** %73, i64 3
  %75 = load void (%class.SkXfermode*, i32*, i32*, i32, i8*)*, void (%class.SkXfermode*, i32*, i32*, i32, i8*)** %74, align 8
  tail call void %75(%class.SkXfermode* nonnull %65, i32* %72, i32* %20, i32 %3, i8* null) #12
  %76 = getelementptr inbounds i8, i8* %71, i64 %10
  %77 = add nsw i32 %70, -1
  %78 = icmp sgt i32 %77, 0
  br i1 %78, label %69, label %142

79:                                               ; preds = %63
  %80 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 4
  %81 = load void (i32*, i32*, i32, i32)*, void (i32*, i32*, i32, i32)** %80, align 8
  br label %82

82:                                               ; preds = %82, %79
  %83 = phi i32 [ %4, %79 ], [ %87, %82 ]
  %84 = phi i8* [ %15, %79 ], [ %86, %82 ]
  %85 = bitcast i8* %84 to i32*
  tail call void %81(i32* %85, i32* %20, i32 %3, i32 255) #12
  %86 = getelementptr inbounds i8, i8* %84, i64 %10
  %87 = add nsw i32 %83, -1
  %88 = icmp sgt i32 %87, 0
  br i1 %88, label %82, label %142

89:                                               ; preds = %5
  br i1 %26, label %90, label %104

90:                                               ; preds = %89
  %91 = bitcast %"class.SkShaderBase::Context"* %18 to void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)***
  br label %92

92:                                               ; preds = %90, %92
  %93 = phi i32 [ %100, %92 ], [ %2, %90 ]
  %94 = phi i32 [ %102, %92 ], [ %4, %90 ]
  %95 = phi i8* [ %101, %92 ], [ %15, %90 ]
  %96 = bitcast i8* %95 to i32*
  %97 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)**, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*** %91, align 8
  %98 = getelementptr inbounds void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %97, i64 3
  %99 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %98, align 8
  tail call void %99(%"class.SkShaderBase::Context"* %18, i32 %1, i32 %93, i32* %96, i32 %3) #12
  %100 = add nsw i32 %93, 1
  %101 = getelementptr inbounds i8, i8* %95, i64 %10
  %102 = add nsw i32 %94, -1
  %103 = icmp sgt i32 %102, 0
  br i1 %103, label %92, label %142

104:                                              ; preds = %89
  %105 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 2
  %106 = load %class.SkXfermode*, %class.SkXfermode** %105, align 8
  %107 = icmp eq %class.SkXfermode* %106, null
  br i1 %107, label %126, label %108

108:                                              ; preds = %104
  %109 = bitcast %"class.SkShaderBase::Context"* %18 to void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)***
  %110 = bitcast %class.SkXfermode* %106 to void (%class.SkXfermode*, i32*, i32*, i32, i8*)***
  br label %111

111:                                              ; preds = %108, %111
  %112 = phi i32 [ %122, %111 ], [ %2, %108 ]
  %113 = phi i32 [ %124, %111 ], [ %4, %108 ]
  %114 = phi i8* [ %123, %111 ], [ %15, %108 ]
  %115 = bitcast i8* %114 to i32*
  %116 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)**, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*** %109, align 8
  %117 = getelementptr inbounds void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %116, i64 3
  %118 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %117, align 8
  tail call void %118(%"class.SkShaderBase::Context"* %18, i32 %1, i32 %112, i32* %20, i32 %3) #12
  %119 = load void (%class.SkXfermode*, i32*, i32*, i32, i8*)**, void (%class.SkXfermode*, i32*, i32*, i32, i8*)*** %110, align 8
  %120 = getelementptr inbounds void (%class.SkXfermode*, i32*, i32*, i32, i8*)*, void (%class.SkXfermode*, i32*, i32*, i32, i8*)** %119, i64 3
  %121 = load void (%class.SkXfermode*, i32*, i32*, i32, i8*)*, void (%class.SkXfermode*, i32*, i32*, i32, i8*)** %120, align 8
  tail call void %121(%class.SkXfermode* nonnull %106, i32* %115, i32* %20, i32 %3, i8* null) #12
  %122 = add nsw i32 %112, 1
  %123 = getelementptr inbounds i8, i8* %114, i64 %10
  %124 = add nsw i32 %113, -1
  %125 = icmp sgt i32 %124, 0
  br i1 %125, label %111, label %142

126:                                              ; preds = %104
  %127 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 4
  %128 = load void (i32*, i32*, i32, i32)*, void (i32*, i32*, i32, i32)** %127, align 8
  %129 = bitcast %"class.SkShaderBase::Context"* %18 to void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)***
  br label %130

130:                                              ; preds = %130, %126
  %131 = phi i32 [ %2, %126 ], [ %138, %130 ]
  %132 = phi i32 [ %4, %126 ], [ %140, %130 ]
  %133 = phi i8* [ %15, %126 ], [ %139, %130 ]
  %134 = bitcast i8* %133 to i32*
  %135 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)**, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*** %129, align 8
  %136 = getelementptr inbounds void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %135, i64 3
  %137 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %136, align 8
  tail call void %137(%"class.SkShaderBase::Context"* %18, i32 %1, i32 %131, i32* %20, i32 %3) #12
  tail call void %128(i32* %134, i32* %20, i32 %3, i32 255) #12
  %138 = add nsw i32 %131, 1
  %139 = getelementptr inbounds i8, i8* %133, i64 %10
  %140 = add nsw i32 %132, -1
  %141 = icmp sgt i32 %140, 0
  br i1 %141, label %130, label %142

142:                                              ; preds = %69, %82, %50, %54, %111, %130, %92, %32
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23SkARGB32_Shader_Blitter9blitAntiHEiiPKhPKs(%class.SkARGB32_Shader_Blitter* nocapture readonly, i32, i32, i8*, i16* nocapture readonly) unnamed_addr #2 align 2 {
  %6 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 3
  %7 = load i32*, i32** %6, align 8
  %8 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = sext i32 %2 to i64
  %11 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = mul i64 %12, %10
  %14 = getelementptr inbounds i8, i8* %9, i64 %13
  %15 = shl i32 %1, 2
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %14, i64 %16
  %18 = bitcast i8* %17 to i32*
  %19 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 4
  %20 = load %"class.SkShaderBase::Context"*, %"class.SkShaderBase::Context"** %19, align 8
  %21 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 2
  %22 = load %class.SkXfermode*, %class.SkXfermode** %21, align 8
  %23 = icmp eq %class.SkXfermode* %22, null
  %24 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 6
  %25 = load i8, i8* %24, align 8, !range !16
  %26 = icmp eq i8 %25, 0
  br i1 %23, label %74, label %27

27:                                               ; preds = %5
  br i1 %26, label %28, label %90

28:                                               ; preds = %27
  %29 = load i16, i16* %4, align 2
  %30 = icmp slt i16 %29, 1
  br i1 %30, label %149, label %31

31:                                               ; preds = %28
  %32 = bitcast %"class.SkShaderBase::Context"* %20 to void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)***
  br label %33

33:                                               ; preds = %69, %31
  %34 = phi %class.SkXfermode* [ %22, %31 ], [ %73, %69 ]
  %35 = phi i16 [ %29, %31 ], [ %67, %69 ]
  %36 = phi i32* [ %18, %31 ], [ %72, %69 ]
  %37 = phi i16* [ %4, %31 ], [ %66, %69 ]
  %38 = phi i8* [ %3, %31 ], [ %71, %69 ]
  %39 = phi i32 [ %1, %31 ], [ %70, %69 ]
  %40 = sext i16 %35 to i32
  %41 = load i8, i8* %38, align 1
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %64, label %43

43:                                               ; preds = %33
  %44 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)**, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*** %32, align 8
  %45 = getelementptr inbounds void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %44, i64 3
  %46 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %45, align 8
  tail call void %46(%"class.SkShaderBase::Context"* %20, i32 %39, i32 %2, i32* %7, i32 %40) #12
  %47 = icmp eq i8 %41, -1
  %48 = bitcast %class.SkXfermode* %34 to void (%class.SkXfermode*, i32*, i32*, i32, i8*)***
  br i1 %47, label %51, label %49

49:                                               ; preds = %43
  %50 = sext i16 %35 to i64
  br label %55

51:                                               ; preds = %43
  %52 = load void (%class.SkXfermode*, i32*, i32*, i32, i8*)**, void (%class.SkXfermode*, i32*, i32*, i32, i8*)*** %48, align 8
  %53 = getelementptr inbounds void (%class.SkXfermode*, i32*, i32*, i32, i8*)*, void (%class.SkXfermode*, i32*, i32*, i32, i8*)** %52, i64 3
  %54 = load void (%class.SkXfermode*, i32*, i32*, i32, i8*)*, void (%class.SkXfermode*, i32*, i32*, i32, i8*)** %53, align 8
  tail call void %54(%class.SkXfermode* %34, i32* %36, i32* %7, i32 %40, i8* null) #12
  br label %64

55:                                               ; preds = %49, %55
  %56 = phi i64 [ %50, %49 ], [ %57, %55 ]
  %57 = add nsw i64 %56, -1
  %58 = getelementptr inbounds i32, i32* %36, i64 %57
  %59 = getelementptr inbounds i32, i32* %7, i64 %57
  %60 = load void (%class.SkXfermode*, i32*, i32*, i32, i8*)**, void (%class.SkXfermode*, i32*, i32*, i32, i8*)*** %48, align 8
  %61 = getelementptr inbounds void (%class.SkXfermode*, i32*, i32*, i32, i8*)*, void (%class.SkXfermode*, i32*, i32*, i32, i8*)** %60, i64 3
  %62 = load void (%class.SkXfermode*, i32*, i32*, i32, i8*)*, void (%class.SkXfermode*, i32*, i32*, i32, i8*)** %61, align 8
  tail call void %62(%class.SkXfermode* %34, i32* %58, i32* %59, i32 1, i8* %38) #12
  %63 = icmp sgt i64 %57, 0
  br i1 %63, label %55, label %64

64:                                               ; preds = %55, %51, %33
  %65 = sext i16 %35 to i64
  %66 = getelementptr inbounds i16, i16* %37, i64 %65
  %67 = load i16, i16* %66, align 2
  %68 = icmp slt i16 %67, 1
  br i1 %68, label %149, label %69

69:                                               ; preds = %64
  %70 = add nsw i32 %39, %40
  %71 = getelementptr inbounds i8, i8* %38, i64 %65
  %72 = getelementptr inbounds i32, i32* %36, i64 %65
  %73 = load %class.SkXfermode*, %class.SkXfermode** %21, align 8
  br label %33

74:                                               ; preds = %5
  br i1 %26, label %75, label %90

75:                                               ; preds = %74
  %76 = bitcast %"class.SkShaderBase::Context"* %20 to i32 (%"class.SkShaderBase::Context"*)***
  %77 = load i32 (%"class.SkShaderBase::Context"*)**, i32 (%"class.SkShaderBase::Context"*)*** %76, align 8
  %78 = getelementptr inbounds i32 (%"class.SkShaderBase::Context"*)*, i32 (%"class.SkShaderBase::Context"*)** %77, i64 2
  %79 = load i32 (%"class.SkShaderBase::Context"*)*, i32 (%"class.SkShaderBase::Context"*)** %78, align 8
  %80 = tail call i32 %79(%"class.SkShaderBase::Context"* %20) #12
  %81 = and i32 %80, 1
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %90

83:                                               ; preds = %75
  %84 = load i16, i16* %4, align 2
  %85 = icmp slt i16 %84, 1
  br i1 %85, label %149, label %86

86:                                               ; preds = %83
  %87 = bitcast %"class.SkShaderBase::Context"* %20 to void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)***
  %88 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 5
  %89 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 4
  br label %122

90:                                               ; preds = %27, %75, %74
  %91 = load i16, i16* %4, align 2
  %92 = icmp slt i16 %91, 1
  br i1 %92, label %149, label %93

93:                                               ; preds = %90
  %94 = bitcast %"class.SkShaderBase::Context"* %20 to void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)***
  %95 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 5
  br label %96

96:                                               ; preds = %93, %114
  %97 = phi i16 [ %91, %93 ], [ %120, %114 ]
  %98 = phi i32* [ %18, %93 ], [ %116, %114 ]
  %99 = phi i16* [ %4, %93 ], [ %117, %114 ]
  %100 = phi i8* [ %3, %93 ], [ %118, %114 ]
  %101 = phi i32 [ %1, %93 ], [ %119, %114 ]
  %102 = sext i16 %97 to i32
  %103 = load i8, i8* %100, align 1
  switch i8 %103, label %108 [
    i8 0, label %114
    i8 -1, label %104
  ]

104:                                              ; preds = %96
  %105 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)**, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*** %94, align 8
  %106 = getelementptr inbounds void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %105, i64 3
  %107 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %106, align 8
  tail call void %107(%"class.SkShaderBase::Context"* %20, i32 %101, i32 %2, i32* %98, i32 %102) #12
  br label %114

108:                                              ; preds = %96
  %109 = zext i8 %103 to i32
  %110 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)**, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*** %94, align 8
  %111 = getelementptr inbounds void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %110, i64 3
  %112 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %111, align 8
  tail call void %112(%"class.SkShaderBase::Context"* %20, i32 %101, i32 %2, i32* %7, i32 %102) #12
  %113 = load void (i32*, i32*, i32, i32)*, void (i32*, i32*, i32, i32)** %95, align 8
  tail call void %113(i32* %98, i32* %7, i32 %102, i32 %109) #12
  br label %114

114:                                              ; preds = %108, %104, %96
  %115 = sext i16 %97 to i64
  %116 = getelementptr inbounds i32, i32* %98, i64 %115
  %117 = getelementptr inbounds i16, i16* %99, i64 %115
  %118 = getelementptr inbounds i8, i8* %100, i64 %115
  %119 = add nsw i32 %101, %102
  %120 = load i16, i16* %117, align 2
  %121 = icmp slt i16 %120, 1
  br i1 %121, label %149, label %96

122:                                              ; preds = %86, %141
  %123 = phi i16 [ %84, %86 ], [ %147, %141 ]
  %124 = phi i32* [ %18, %86 ], [ %143, %141 ]
  %125 = phi i16* [ %4, %86 ], [ %144, %141 ]
  %126 = phi i8* [ %3, %86 ], [ %145, %141 ]
  %127 = phi i32 [ %1, %86 ], [ %146, %141 ]
  %128 = sext i16 %123 to i32
  %129 = load i8, i8* %126, align 1
  %130 = zext i8 %129 to i32
  %131 = icmp eq i8 %129, 0
  br i1 %131, label %141, label %132

132:                                              ; preds = %122
  %133 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)**, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*** %87, align 8
  %134 = getelementptr inbounds void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %133, i64 3
  %135 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %134, align 8
  tail call void %135(%"class.SkShaderBase::Context"* %20, i32 %127, i32 %2, i32* %7, i32 %128) #12
  %136 = icmp eq i8 %129, -1
  br i1 %136, label %137, label %139

137:                                              ; preds = %132
  %138 = load void (i32*, i32*, i32, i32)*, void (i32*, i32*, i32, i32)** %89, align 8
  tail call void %138(i32* %124, i32* %7, i32 %128, i32 255) #12
  br label %141

139:                                              ; preds = %132
  %140 = load void (i32*, i32*, i32, i32)*, void (i32*, i32*, i32, i32)** %88, align 8
  tail call void %140(i32* %124, i32* %7, i32 %128, i32 %130) #12
  br label %141

141:                                              ; preds = %139, %137, %122
  %142 = sext i16 %123 to i64
  %143 = getelementptr inbounds i32, i32* %124, i64 %142
  %144 = getelementptr inbounds i16, i16* %125, i64 %142
  %145 = getelementptr inbounds i8, i8* %126, i64 %142
  %146 = add nsw i32 %127, %128
  %147 = load i16, i16* %144, align 2
  %148 = icmp slt i16 %147, 1
  br i1 %148, label %149, label %122

149:                                              ; preds = %64, %114, %141, %28, %90, %83
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23SkARGB32_Shader_Blitter8blitMaskERK6SkMaskRK7SkIRect(%class.SkARGB32_Shader_Blitter*, %struct.SkMask* dereferenceable(32), %struct.SkIRect* dereferenceable(16)) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 2
  %5 = load %class.SkXfermode*, %class.SkXfermode** %4, align 8
  %6 = icmp eq %class.SkXfermode* %5, null
  br i1 %6, label %13, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 3
  %9 = load i8, i8* %8, align 4
  %10 = icmp eq i8 %9, 1
  br i1 %10, label %33, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZN9SkBlitter8blitMaskERK6SkMaskRK7SkIRect(%class.SkBlitter* %12, %struct.SkMask* dereferenceable(32) %1, %struct.SkIRect* dereferenceable(16) %2) #12
  br label %101

13:                                               ; preds = %3
  %14 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 4
  %15 = load %"class.SkShaderBase::Context"*, %"class.SkShaderBase::Context"** %14, align 8
  %16 = bitcast %"class.SkShaderBase::Context"* %15 to i32 (%"class.SkShaderBase::Context"*)***
  %17 = load i32 (%"class.SkShaderBase::Context"*)**, i32 (%"class.SkShaderBase::Context"*)*** %16, align 8
  %18 = getelementptr inbounds i32 (%"class.SkShaderBase::Context"*)*, i32 (%"class.SkShaderBase::Context"*)** %17, i64 2
  %19 = load i32 (%"class.SkShaderBase::Context"*)*, i32 (%"class.SkShaderBase::Context"*)** %18, align 8
  %20 = tail call i32 %19(%"class.SkShaderBase::Context"* %15) #12
  %21 = and i32 %20, 1
  %22 = icmp ne i32 %21, 0
  %23 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 3
  %24 = load i8, i8* %23, align 4
  %25 = icmp ne i8 %24, 1
  %26 = xor i1 %22, true
  %27 = or i1 %25, %26
  br i1 %27, label %28, label %33

28:                                               ; preds = %13
  switch i8 %24, label %31 [
    i8 1, label %33
    i8 4, label %29
  ]

29:                                               ; preds = %28
  %30 = select i1 %22, void (i32*, i8*, i32*, i32)* @_ZL22blend_row_LCD16_opaquePjPKvPKji, void (i32*, i8*, i32*, i32)* @_ZL15blend_row_lcd16PjPKvPKji
  br label %33

31:                                               ; preds = %28
  %32 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZN9SkBlitter8blitMaskERK6SkMaskRK7SkIRect(%class.SkBlitter* %32, %struct.SkMask* dereferenceable(32) %1, %struct.SkIRect* dereferenceable(16) %2) #12
  br label %101

33:                                               ; preds = %29, %13, %28, %7
  %34 = phi void (i32*, i8*, i32*, i32)* [ null, %7 ], [ @_ZL12blend_row_A8PjPKvPKji, %28 ], [ @_ZL19blend_row_A8_opaquePjPKvPKji, %13 ], [ %30, %29 ]
  %35 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = sub i32 %38, %36
  %40 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 3
  %43 = load i32, i32* %42, align 4
  %44 = sub i32 %43, %41
  %45 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = sext i32 %41 to i64
  %48 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  %49 = load i64, i64* %48, align 8
  %50 = mul i64 %49, %47
  %51 = getelementptr inbounds i8, i8* %46, i64 %50
  %52 = shl i32 %36, 2
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %51, i64 %53
  %55 = tail call i8* @_ZNK6SkMask7getAddrEii(%struct.SkMask* %1, i32 %36, i32 %41) #12
  %56 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  %57 = load i32, i32* %56, align 8
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 3
  %60 = load i32*, i32** %59, align 8
  %61 = load %class.SkXfermode*, %class.SkXfermode** %4, align 8
  %62 = icmp eq %class.SkXfermode* %61, null
  %63 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 4
  br i1 %62, label %85, label %64

64:                                               ; preds = %33
  %65 = bitcast %class.SkXfermode* %61 to void (%class.SkXfermode*, i32*, i32*, i32, i8*)***
  br label %66

66:                                               ; preds = %64, %66
  %67 = phi i32 [ %82, %66 ], [ %41, %64 ]
  %68 = phi i32 [ %83, %66 ], [ %44, %64 ]
  %69 = phi i8* [ %80, %66 ], [ %54, %64 ]
  %70 = phi i8* [ %81, %66 ], [ %55, %64 ]
  %71 = load %"class.SkShaderBase::Context"*, %"class.SkShaderBase::Context"** %63, align 8
  %72 = bitcast %"class.SkShaderBase::Context"* %71 to void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)***
  %73 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)**, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*** %72, align 8
  %74 = getelementptr inbounds void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %73, i64 3
  %75 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %74, align 8
  tail call void %75(%"class.SkShaderBase::Context"* %71, i32 %36, i32 %67, i32* %60, i32 %39) #12
  %76 = bitcast i8* %69 to i32*
  %77 = load void (%class.SkXfermode*, i32*, i32*, i32, i8*)**, void (%class.SkXfermode*, i32*, i32*, i32, i8*)*** %65, align 8
  %78 = getelementptr inbounds void (%class.SkXfermode*, i32*, i32*, i32, i8*)*, void (%class.SkXfermode*, i32*, i32*, i32, i8*)** %77, i64 3
  %79 = load void (%class.SkXfermode*, i32*, i32*, i32, i8*)*, void (%class.SkXfermode*, i32*, i32*, i32, i8*)** %78, align 8
  tail call void %79(%class.SkXfermode* nonnull %61, i32* %76, i32* %60, i32 %39, i8* %70) #12
  %80 = getelementptr inbounds i8, i8* %69, i64 %49
  %81 = getelementptr inbounds i8, i8* %70, i64 %58
  %82 = add nsw i32 %67, 1
  %83 = add nsw i32 %68, -1
  %84 = icmp sgt i32 %83, 0
  br i1 %84, label %66, label %101

85:                                               ; preds = %33, %85
  %86 = phi i32 [ %98, %85 ], [ %41, %33 ]
  %87 = phi i32 [ %99, %85 ], [ %44, %33 ]
  %88 = phi i8* [ %96, %85 ], [ %54, %33 ]
  %89 = phi i8* [ %97, %85 ], [ %55, %33 ]
  %90 = load %"class.SkShaderBase::Context"*, %"class.SkShaderBase::Context"** %63, align 8
  %91 = bitcast %"class.SkShaderBase::Context"* %90 to void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)***
  %92 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)**, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*** %91, align 8
  %93 = getelementptr inbounds void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %92, i64 3
  %94 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %93, align 8
  tail call void %94(%"class.SkShaderBase::Context"* %90, i32 %36, i32 %86, i32* %60, i32 %39) #12
  %95 = bitcast i8* %88 to i32*
  tail call void %34(i32* %95, i8* %89, i32* %60, i32 %39) #12, !callees !19
  %96 = getelementptr inbounds i8, i8* %88, i64 %49
  %97 = getelementptr inbounds i8, i8* %89, i64 %58
  %98 = add nsw i32 %86, 1
  %99 = add nsw i32 %87, -1
  %100 = icmp sgt i32 %99, 0
  br i1 %100, label %85, label %101

101:                                              ; preds = %66, %85, %31, %11
  ret void
}

declare void @_ZN9SkBlitter8blitMaskERK6SkMaskRK7SkIRect(%class.SkBlitter*, %struct.SkMask* dereferenceable(32), %struct.SkIRect* dereferenceable(16)) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL19blend_row_A8_opaquePjPKvPKji(i32* nocapture, i8* nocapture readonly, i32* nocapture readonly, i32) unnamed_addr #8 {
  %5 = icmp sgt i32 %3, 3
  br i1 %5, label %14, label %8

6:                                                ; preds = %14
  %7 = and i32 %3, 3
  br label %8

8:                                                ; preds = %6, %4
  %9 = phi i32 [ %3, %4 ], [ %7, %6 ]
  %10 = phi i8* [ %1, %4 ], [ %60, %6 ]
  %11 = phi i32* [ %2, %4 ], [ %59, %6 ]
  %12 = phi i32* [ %0, %4 ], [ %58, %6 ]
  %13 = icmp sgt i32 %9, 0
  br i1 %13, label %63, label %108

14:                                               ; preds = %4, %14
  %15 = phi i32* [ %58, %14 ], [ %0, %4 ]
  %16 = phi i32* [ %59, %14 ], [ %2, %4 ]
  %17 = phi i8* [ %60, %14 ], [ %1, %4 ]
  %18 = phi i32 [ %61, %14 ], [ %3, %4 ]
  %19 = bitcast i32* %15 to <8 x i8>*
  %20 = load <8 x i8>, <8 x i8>* %19, align 1
  %21 = getelementptr inbounds i32, i32* %15, i64 2
  %22 = bitcast i32* %21 to <8 x i8>*
  %23 = load <8 x i8>, <8 x i8>* %22, align 1
  %24 = bitcast i32* %16 to <8 x i8>*
  %25 = load <8 x i8>, <8 x i8>* %24, align 1
  %26 = getelementptr inbounds i32, i32* %16, i64 2
  %27 = bitcast i32* %26 to <8 x i8>*
  %28 = load <8 x i8>, <8 x i8>* %27, align 1
  %29 = bitcast i8* %17 to <4 x i8>*
  %30 = load <4 x i8>, <4 x i8>* %29, align 1
  %31 = shufflevector <4 x i8> %30, <4 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  %33 = extractelement <2 x i64> %32, i32 0
  %34 = extractelement <2 x i64> %32, i32 1
  %35 = bitcast i64 %33 to <8 x i8>
  %36 = shufflevector <8 x i8> %35, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %37 = bitcast i64 %34 to <8 x i8>
  %38 = shufflevector <8 x i8> %37, <8 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %39 = shufflevector <16 x i8> %36, <16 x i8> %38, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %40 = shufflevector <8 x i8> %20, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %41 = shufflevector <8 x i8> %23, <8 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %42 = shufflevector <16 x i8> %40, <16 x i8> %41, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %43 = shufflevector <8 x i8> %25, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %44 = shufflevector <8 x i8> %28, <8 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %45 = shufflevector <16 x i8> %43, <16 x i8> %44, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %46 = zext <16 x i8> %45 to <16 x i16>
  %47 = zext <16 x i8> %39 to <16 x i16>
  %48 = mul nuw <16 x i16> %47, %46
  %49 = zext <16 x i8> %42 to <16 x i16>
  %50 = xor <16 x i8> %39, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %51 = zext <16 x i8> %50 to <16 x i16>
  %52 = mul nuw <16 x i16> %51, %49
  %53 = add <16 x i16> %52, <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>
  %54 = add <16 x i16> %53, %48
  %55 = udiv <16 x i16> %54, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %56 = trunc <16 x i16> %55 to <16 x i8>
  %57 = bitcast i32* %15 to <16 x i8>*
  store <16 x i8> %56, <16 x i8>* %57, align 1
  %58 = getelementptr inbounds i32, i32* %15, i64 4
  %59 = getelementptr inbounds i32, i32* %16, i64 4
  %60 = getelementptr inbounds i8, i8* %17, i64 4
  %61 = add nsw i32 %18, -4
  %62 = icmp sgt i32 %61, 3
  br i1 %62, label %14, label %6

63:                                               ; preds = %8, %63
  %64 = phi i32* [ %104, %63 ], [ %12, %8 ]
  %65 = phi i32* [ %105, %63 ], [ %11, %8 ]
  %66 = phi i8* [ %106, %63 ], [ %10, %8 ]
  %67 = phi i32 [ %68, %63 ], [ %9, %8 ]
  %68 = add nsw i32 %67, -1
  %69 = load i32, i32* %64, align 4
  %70 = zext i32 %69 to i64
  %71 = load i32, i32* %65, align 4
  %72 = zext i32 %71 to i64
  %73 = load i8, i8* %66, align 1
  %74 = insertelement <4 x i8> <i8 undef, i8 0, i8 0, i8 0>, i8 %73, i32 0
  %75 = shufflevector <4 x i8> %74, <4 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  %76 = bitcast <16 x i8> %75 to <2 x i64>
  %77 = extractelement <2 x i64> %76, i32 0
  %78 = extractelement <2 x i64> %76, i32 1
  %79 = bitcast i64 %77 to <8 x i8>
  %80 = shufflevector <8 x i8> %79, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %81 = bitcast i64 %78 to <8 x i8>
  %82 = shufflevector <8 x i8> %81, <8 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %83 = shufflevector <16 x i8> %80, <16 x i8> %82, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %84 = bitcast i64 %70 to <8 x i8>
  %85 = shufflevector <8 x i8> %84, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %86 = shufflevector <16 x i8> %85, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %87 = bitcast i64 %72 to <8 x i8>
  %88 = shufflevector <8 x i8> %87, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %89 = shufflevector <16 x i8> %88, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %90 = zext <16 x i8> %89 to <16 x i16>
  %91 = zext <16 x i8> %83 to <16 x i16>
  %92 = mul nuw <16 x i16> %91, %90
  %93 = zext <16 x i8> %86 to <16 x i16>
  %94 = xor <16 x i8> %83, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %95 = zext <16 x i8> %94 to <16 x i16>
  %96 = mul nuw <16 x i16> %95, %93
  %97 = add <16 x i16> %96, <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>
  %98 = add <16 x i16> %97, %92
  %99 = udiv <16 x i16> %98, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %100 = trunc <16 x i16> %99 to <16 x i8>
  %101 = bitcast <16 x i8> %100 to <2 x i64>
  %102 = extractelement <2 x i64> %101, i32 0
  %103 = trunc i64 %102 to i32
  store i32 %103, i32* %64, align 4
  %104 = getelementptr inbounds i32, i32* %64, i64 1
  %105 = getelementptr inbounds i32, i32* %65, i64 1
  %106 = getelementptr inbounds i8, i8* %66, i64 1
  %107 = icmp sgt i32 %68, 0
  br i1 %107, label %63, label %108

108:                                              ; preds = %63, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL12blend_row_A8PjPKvPKji(i32* nocapture, i8* nocapture readonly, i32* nocapture readonly, i32) unnamed_addr #8 {
  %5 = icmp sgt i32 %3, 3
  br i1 %5, label %14, label %8

6:                                                ; preds = %14
  %7 = and i32 %3, 3
  br label %8

8:                                                ; preds = %6, %4
  %9 = phi i32 [ %3, %4 ], [ %7, %6 ]
  %10 = phi i8* [ %1, %4 ], [ %64, %6 ]
  %11 = phi i32* [ %2, %4 ], [ %63, %6 ]
  %12 = phi i32* [ %0, %4 ], [ %62, %6 ]
  %13 = icmp sgt i32 %9, 0
  br i1 %13, label %67, label %116

14:                                               ; preds = %4, %14
  %15 = phi i32* [ %62, %14 ], [ %0, %4 ]
  %16 = phi i32* [ %63, %14 ], [ %2, %4 ]
  %17 = phi i8* [ %64, %14 ], [ %1, %4 ]
  %18 = phi i32 [ %65, %14 ], [ %3, %4 ]
  %19 = bitcast i32* %15 to <8 x i8>*
  %20 = load <8 x i8>, <8 x i8>* %19, align 1
  %21 = getelementptr inbounds i32, i32* %15, i64 2
  %22 = bitcast i32* %21 to <8 x i8>*
  %23 = load <8 x i8>, <8 x i8>* %22, align 1
  %24 = bitcast i32* %16 to <8 x i8>*
  %25 = load <8 x i8>, <8 x i8>* %24, align 1
  %26 = getelementptr inbounds i32, i32* %16, i64 2
  %27 = bitcast i32* %26 to <8 x i8>*
  %28 = load <8 x i8>, <8 x i8>* %27, align 1
  %29 = bitcast i8* %17 to <4 x i8>*
  %30 = load <4 x i8>, <4 x i8>* %29, align 1
  %31 = shufflevector <4 x i8> %30, <4 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  %32 = bitcast <16 x i8> %31 to <2 x i64>
  %33 = extractelement <2 x i64> %32, i32 0
  %34 = extractelement <2 x i64> %32, i32 1
  %35 = bitcast i64 %33 to <8 x i8>
  %36 = shufflevector <8 x i8> %35, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %37 = bitcast i64 %34 to <8 x i8>
  %38 = shufflevector <8 x i8> %37, <8 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %39 = shufflevector <16 x i8> %36, <16 x i8> %38, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %40 = shufflevector <8 x i8> %20, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %41 = shufflevector <8 x i8> %23, <8 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %42 = shufflevector <16 x i8> %40, <16 x i8> %41, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %43 = shufflevector <8 x i8> %25, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %44 = shufflevector <8 x i8> %28, <8 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %45 = shufflevector <16 x i8> %43, <16 x i8> %44, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %46 = zext <16 x i8> %45 to <16 x i16>
  %47 = zext <16 x i8> %39 to <16 x i16>
  %48 = mul nuw <16 x i16> %47, %46
  %49 = add <16 x i16> %48, %46
  %50 = lshr <16 x i16> %49, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %51 = trunc <16 x i16> %50 to <16 x i8>
  %52 = xor <16 x i8> %51, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %53 = shufflevector <16 x i8> %52, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %54 = zext <16 x i8> %42 to <16 x i16>
  %55 = zext <16 x i8> %53 to <16 x i16>
  %56 = mul nuw <16 x i16> %55, %54
  %57 = add <16 x i16> %56, %54
  %58 = lshr <16 x i16> %57, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %59 = trunc <16 x i16> %58 to <16 x i8>
  %60 = add <16 x i8> %59, %51
  %61 = bitcast i32* %15 to <16 x i8>*
  store <16 x i8> %60, <16 x i8>* %61, align 1
  %62 = getelementptr inbounds i32, i32* %15, i64 4
  %63 = getelementptr inbounds i32, i32* %16, i64 4
  %64 = getelementptr inbounds i8, i8* %17, i64 4
  %65 = add nsw i32 %18, -4
  %66 = icmp sgt i32 %65, 3
  br i1 %66, label %14, label %6

67:                                               ; preds = %8, %67
  %68 = phi i32* [ %112, %67 ], [ %12, %8 ]
  %69 = phi i32* [ %113, %67 ], [ %11, %8 ]
  %70 = phi i8* [ %114, %67 ], [ %10, %8 ]
  %71 = phi i32 [ %72, %67 ], [ %9, %8 ]
  %72 = add nsw i32 %71, -1
  %73 = load i32, i32* %68, align 4
  %74 = zext i32 %73 to i64
  %75 = load i32, i32* %69, align 4
  %76 = zext i32 %75 to i64
  %77 = load i8, i8* %70, align 1
  %78 = insertelement <4 x i8> <i8 undef, i8 0, i8 0, i8 0>, i8 %77, i32 0
  %79 = shufflevector <4 x i8> %78, <4 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3>
  %80 = bitcast <16 x i8> %79 to <2 x i64>
  %81 = extractelement <2 x i64> %80, i32 0
  %82 = extractelement <2 x i64> %80, i32 1
  %83 = bitcast i64 %81 to <8 x i8>
  %84 = shufflevector <8 x i8> %83, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %85 = bitcast i64 %82 to <8 x i8>
  %86 = shufflevector <8 x i8> %85, <8 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %87 = shufflevector <16 x i8> %84, <16 x i8> %86, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %88 = bitcast i64 %74 to <8 x i8>
  %89 = shufflevector <8 x i8> %88, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %90 = shufflevector <16 x i8> %89, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %91 = bitcast i64 %76 to <8 x i8>
  %92 = shufflevector <8 x i8> %91, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %93 = shufflevector <16 x i8> %92, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %94 = zext <16 x i8> %93 to <16 x i16>
  %95 = zext <16 x i8> %87 to <16 x i16>
  %96 = mul nuw <16 x i16> %95, %94
  %97 = add <16 x i16> %96, %94
  %98 = lshr <16 x i16> %97, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %99 = trunc <16 x i16> %98 to <16 x i8>
  %100 = xor <16 x i8> %99, <i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1, i8 undef, i8 undef, i8 undef, i8 -1>
  %101 = shufflevector <16 x i8> %100, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 7, i32 7, i32 7, i32 7, i32 11, i32 11, i32 11, i32 11, i32 15, i32 15, i32 15, i32 15>
  %102 = zext <16 x i8> %90 to <16 x i16>
  %103 = zext <16 x i8> %101 to <16 x i16>
  %104 = mul nuw <16 x i16> %103, %102
  %105 = add <16 x i16> %104, %102
  %106 = lshr <16 x i16> %105, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %107 = trunc <16 x i16> %106 to <16 x i8>
  %108 = add <16 x i8> %107, %99
  %109 = bitcast <16 x i8> %108 to <2 x i64>
  %110 = extractelement <2 x i64> %109, i32 0
  %111 = trunc i64 %110 to i32
  store i32 %111, i32* %68, align 4
  %112 = getelementptr inbounds i32, i32* %68, i64 1
  %113 = getelementptr inbounds i32, i32* %69, i64 1
  %114 = getelementptr inbounds i8, i8* %70, i64 1
  %115 = icmp sgt i32 %72, 0
  br i1 %115, label %67, label %116

116:                                              ; preds = %67, %8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL22blend_row_LCD16_opaquePjPKvPKji(i32* nocapture, i8* nocapture readonly, i32* nocapture readonly, i32) unnamed_addr #3 {
  %5 = bitcast i8* %1 to i16*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %4
  %8 = zext i32 %3 to i64
  br label %10

9:                                                ; preds = %58, %4
  ret void

10:                                               ; preds = %58, %7
  %11 = phi i64 [ 0, %7 ], [ %59, %58 ]
  %12 = getelementptr inbounds i16, i16* %5, i64 %11
  %13 = load i16, i16* %12, align 2
  %14 = zext i16 %13 to i32
  %15 = icmp eq i16 %13, 0
  br i1 %15, label %58, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds i32, i32* %2, i64 %11
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 %11
  %20 = load i32, i32* %19, align 4
  %21 = lshr i32 %18, 16
  %22 = and i32 %21, 255
  %23 = lshr i32 %18, 8
  %24 = and i32 %23, 255
  %25 = and i32 %18, 255
  %26 = lshr i32 %14, 11
  %27 = lshr i32 %14, 6
  %28 = and i32 %27, 31
  %29 = and i32 %14, 31
  %30 = lshr i32 %14, 15
  %31 = add nuw nsw i32 %30, %26
  %32 = lshr i32 %28, 4
  %33 = add nuw nsw i32 %32, %28
  %34 = lshr i32 %29, 4
  %35 = add nuw nsw i32 %34, %29
  %36 = lshr i32 %20, 16
  %37 = and i32 %36, 255
  %38 = sub nsw i32 %22, %37
  %39 = mul nsw i32 %38, %31
  %40 = lshr i32 %39, 5
  %41 = add nuw nsw i32 %40, %36
  %42 = lshr i32 %20, 8
  %43 = and i32 %42, 255
  %44 = sub nsw i32 %24, %43
  %45 = mul nsw i32 %44, %33
  %46 = lshr i32 %45, 5
  %47 = add nuw nsw i32 %46, %43
  %48 = and i32 %20, 255
  %49 = sub nsw i32 %25, %48
  %50 = mul nsw i32 %49, %35
  %51 = lshr i32 %50, 5
  %52 = add nuw nsw i32 %51, %48
  %53 = shl i32 %41, 16
  %54 = shl i32 %47, 8
  %55 = or i32 %52, %54
  %56 = or i32 %55, %53
  %57 = or i32 %56, -16777216
  store i32 %57, i32* %19, align 4
  br label %58

58:                                               ; preds = %10, %16
  %59 = add nuw nsw i64 %11, 1
  %60 = icmp eq i64 %59, %8
  br i1 %60, label %9, label %10
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL15blend_row_lcd16PjPKvPKji(i32* nocapture, i8* nocapture readonly, i32* nocapture readonly, i32) unnamed_addr #3 {
  %5 = bitcast i8* %1 to i16*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %4
  %8 = zext i32 %3 to i64
  br label %10

9:                                                ; preds = %70, %4
  ret void

10:                                               ; preds = %70, %7
  %11 = phi i64 [ 0, %7 ], [ %71, %70 ]
  %12 = getelementptr inbounds i16, i16* %5, i64 %11
  %13 = load i16, i16* %12, align 2
  %14 = zext i16 %13 to i32
  %15 = icmp eq i16 %13, 0
  br i1 %15, label %70, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds i32, i32* %2, i64 %11
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds i32, i32* %0, i64 %11
  %20 = load i32, i32* %19, align 4
  %21 = lshr i32 %18, 24
  %22 = lshr i32 %18, 16
  %23 = and i32 %22, 255
  %24 = lshr i32 %18, 8
  %25 = and i32 %24, 255
  %26 = and i32 %18, 255
  %27 = lshr i32 %18, 31
  %28 = add nuw nsw i32 %21, %27
  %29 = lshr i32 %14, 11
  %30 = lshr i32 %14, 6
  %31 = and i32 %30, 31
  %32 = and i32 %14, 31
  %33 = shl nuw nsw i32 %29, 3
  %34 = lshr i32 %14, 13
  %35 = or i32 %33, %34
  %36 = shl nuw nsw i32 %31, 3
  %37 = lshr i32 %31, 2
  %38 = or i32 %36, %37
  %39 = shl nuw nsw i32 %32, 3
  %40 = lshr i32 %32, 2
  %41 = or i32 %39, %40
  %42 = lshr i32 %20, 16
  %43 = and i32 %42, 255
  %44 = mul nuw nsw i32 %43, %28
  %45 = lshr i32 %44, 8
  %46 = sub nsw i32 %23, %45
  %47 = mul nsw i32 %46, %35
  %48 = lshr i32 %47, 8
  %49 = add nuw nsw i32 %48, %42
  %50 = lshr i32 %20, 8
  %51 = and i32 %50, 255
  %52 = mul nuw nsw i32 %51, %28
  %53 = lshr i32 %52, 8
  %54 = sub nsw i32 %25, %53
  %55 = mul nsw i32 %54, %38
  %56 = and i32 %20, 255
  %57 = mul nuw nsw i32 %28, %56
  %58 = lshr i32 %57, 8
  %59 = sub nsw i32 %26, %58
  %60 = mul nsw i32 %59, %41
  %61 = lshr i32 %60, 8
  %62 = add nuw nsw i32 %61, %56
  %63 = shl i32 %49, 16
  %64 = shl nuw nsw i32 %51, 8
  %65 = add nsw i32 %55, %64
  %66 = and i32 %65, 16776960
  %67 = or i32 %62, %66
  %68 = or i32 %67, %63
  %69 = or i32 %68, -16777216
  store i32 %69, i32* %19, align 4
  br label %70

70:                                               ; preds = %10, %16
  %71 = add nuw nsw i64 %11, 1
  %72 = icmp eq i64 %71, %8
  br i1 %72, label %9, label %10
}

declare i8* @_ZNK6SkMask7getAddrEii(%struct.SkMask*, i32, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23SkARGB32_Shader_Blitter5blitVEiiih(%class.SkARGB32_Shader_Blitter* nocapture readonly, i32, i32, i32, i8 zeroext) unnamed_addr #2 align 2 {
  %6 = alloca i8, align 1
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i8 %4, i8* %6, align 1
  %9 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = sext i32 %2 to i64
  %12 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 0, i32 1, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = mul i64 %13, %11
  %15 = getelementptr inbounds i8, i8* %10, i64 %14
  %16 = shl i32 %1, 2
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %15, i64 %17
  %19 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 5
  %20 = load i8, i8* %19, align 8, !range !16
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %129, label %22

22:                                               ; preds = %5
  %23 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #12
  store i32 -1431655766, i32* %7, align 4
  %24 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 4
  %25 = load %"class.SkShaderBase::Context"*, %"class.SkShaderBase::Context"** %24, align 8
  %26 = bitcast %"class.SkShaderBase::Context"* %25 to void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)***
  %27 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)**, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*** %26, align 8
  %28 = getelementptr inbounds void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %27, i64 3
  %29 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %28, align 8
  call void %29(%"class.SkShaderBase::Context"* %25, i32 %1, i32 %2, i32* nonnull %7, i32 1) #12
  %30 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 6
  %31 = load i8, i8* %30, align 8, !range !16
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %92, label %33

33:                                               ; preds = %22
  %34 = load i8, i8* %6, align 1
  %35 = icmp eq i8 %34, -1
  br i1 %35, label %39, label %36

36:                                               ; preds = %33
  %37 = zext i8 %34 to i32
  %38 = add nuw nsw i32 %37, 1
  br label %47

39:                                               ; preds = %33, %39
  %40 = phi i32 [ %45, %39 ], [ %3, %33 ]
  %41 = phi i8* [ %44, %39 ], [ %18, %33 ]
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %7, align 4
  store i32 %43, i32* %42, align 4
  %44 = getelementptr inbounds i8, i8* %41, i64 %13
  %45 = add nsw i32 %40, -1
  %46 = icmp sgt i32 %45, 0
  br i1 %46, label %39, label %128

47:                                               ; preds = %36, %47
  %48 = phi i32 [ %90, %47 ], [ %3, %36 ]
  %49 = phi i8* [ %89, %47 ], [ %18, %36 ]
  %50 = bitcast i8* %49 to i32*
  %51 = load i32, i32* %7, align 4
  %52 = load i32, i32* %50, align 4
  %53 = lshr i32 %51, 24
  %54 = lshr i32 %52, 24
  %55 = sub nsw i32 %53, %54
  %56 = mul nsw i32 %55, %38
  %57 = lshr i32 %56, 8
  %58 = add nuw nsw i32 %57, %54
  %59 = lshr i32 %51, 16
  %60 = and i32 %59, 255
  %61 = lshr i32 %52, 16
  %62 = and i32 %61, 255
  %63 = sub nsw i32 %60, %62
  %64 = mul nsw i32 %63, %38
  %65 = lshr i32 %64, 8
  %66 = add nuw nsw i32 %65, %61
  %67 = lshr i32 %51, 8
  %68 = and i32 %67, 255
  %69 = lshr i32 %52, 8
  %70 = and i32 %69, 255
  %71 = sub nsw i32 %68, %70
  %72 = mul nsw i32 %71, %38
  %73 = and i32 %51, 255
  %74 = and i32 %52, 255
  %75 = sub nsw i32 %73, %74
  %76 = mul nsw i32 %75, %38
  %77 = lshr i32 %76, 8
  %78 = add i32 %77, %52
  %79 = and i32 %78, 255
  %80 = shl i32 %58, 24
  %81 = shl i32 %66, 16
  %82 = and i32 %81, 16711680
  %83 = and i32 %52, 65280
  %84 = add nsw i32 %72, %83
  %85 = and i32 %84, 65280
  %86 = or i32 %85, %80
  %87 = or i32 %86, %79
  %88 = or i32 %87, %82
  store i32 %88, i32* %50, align 4
  %89 = getelementptr inbounds i8, i8* %49, i64 %13
  %90 = add nsw i32 %48, -1
  %91 = icmp sgt i32 %90, 0
  br i1 %91, label %47, label %128

92:                                               ; preds = %22
  %93 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 2
  %94 = load %class.SkXfermode*, %class.SkXfermode** %93, align 8
  %95 = icmp eq %class.SkXfermode* %94, null
  br i1 %95, label %108, label %96

96:                                               ; preds = %92
  %97 = bitcast %class.SkXfermode* %94 to void (%class.SkXfermode*, i32*, i32*, i32, i8*)***
  br label %98

98:                                               ; preds = %96, %98
  %99 = phi i32 [ %106, %98 ], [ %3, %96 ]
  %100 = phi i8* [ %105, %98 ], [ %18, %96 ]
  %101 = bitcast i8* %100 to i32*
  %102 = load void (%class.SkXfermode*, i32*, i32*, i32, i8*)**, void (%class.SkXfermode*, i32*, i32*, i32, i8*)*** %97, align 8
  %103 = getelementptr inbounds void (%class.SkXfermode*, i32*, i32*, i32, i8*)*, void (%class.SkXfermode*, i32*, i32*, i32, i8*)** %102, i64 3
  %104 = load void (%class.SkXfermode*, i32*, i32*, i32, i8*)*, void (%class.SkXfermode*, i32*, i32*, i32, i8*)** %103, align 8
  call void %104(%class.SkXfermode* nonnull %94, i32* %101, i32* nonnull %7, i32 1, i8* nonnull %6) #12
  %105 = getelementptr inbounds i8, i8* %100, i64 %13
  %106 = add nsw i32 %99, -1
  %107 = icmp sgt i32 %106, 0
  br i1 %107, label %98, label %128

108:                                              ; preds = %92
  %109 = load i8, i8* %6, align 1
  %110 = icmp eq i8 %109, -1
  %111 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 4
  %112 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 5
  %113 = select i1 %110, void (i32*, i32*, i32, i32)** %111, void (i32*, i32*, i32, i32)** %112
  %114 = load void (i32*, i32*, i32, i32)*, void (i32*, i32*, i32, i32)** %113, align 8
  %115 = bitcast i8* %18 to i32*
  %116 = zext i8 %109 to i32
  call void %114(i32* %115, i32* nonnull %7, i32 1, i32 %116) #12
  %117 = add nsw i32 %3, -1
  %118 = icmp sgt i32 %117, 0
  br i1 %118, label %119, label %128

119:                                              ; preds = %108, %119
  %120 = phi i32 [ %126, %119 ], [ %117, %108 ]
  %121 = phi i8* [ %122, %119 ], [ %18, %108 ]
  %122 = getelementptr inbounds i8, i8* %121, i64 %13
  %123 = load i8, i8* %6, align 1
  %124 = bitcast i8* %122 to i32*
  %125 = zext i8 %123 to i32
  call void %114(i32* %124, i32* nonnull %7, i32 1, i32 %125) #12
  %126 = add nsw i32 %120, -1
  %127 = icmp sgt i32 %126, 0
  br i1 %127, label %119, label %128

128:                                              ; preds = %47, %39, %98, %119, %108
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #12
  br label %257

129:                                              ; preds = %5
  %130 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 6
  %131 = load i8, i8* %130, align 8, !range !16
  %132 = icmp eq i8 %131, 0
  br i1 %132, label %209, label %133

133:                                              ; preds = %129
  %134 = icmp eq i8 %4, -1
  br i1 %134, label %138, label %135

135:                                              ; preds = %133
  %136 = bitcast i32* %8 to i8*
  %137 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 4
  br label %154

138:                                              ; preds = %133
  %139 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 4
  br label %140

140:                                              ; preds = %138, %140
  %141 = phi i32 [ %150, %140 ], [ %2, %138 ]
  %142 = phi i32 [ %152, %140 ], [ %3, %138 ]
  %143 = phi i8* [ %151, %140 ], [ %18, %138 ]
  %144 = bitcast i8* %143 to i32*
  %145 = load %"class.SkShaderBase::Context"*, %"class.SkShaderBase::Context"** %139, align 8
  %146 = bitcast %"class.SkShaderBase::Context"* %145 to void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)***
  %147 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)**, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*** %146, align 8
  %148 = getelementptr inbounds void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %147, i64 3
  %149 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %148, align 8
  tail call void %149(%"class.SkShaderBase::Context"* %145, i32 %1, i32 %141, i32* %144, i32 1) #12
  %150 = add nsw i32 %141, 1
  %151 = getelementptr inbounds i8, i8* %143, i64 %13
  %152 = add nsw i32 %142, -1
  %153 = icmp sgt i32 %152, 0
  br i1 %153, label %140, label %257

154:                                              ; preds = %135, %154
  %155 = phi i32 [ %205, %154 ], [ %2, %135 ]
  %156 = phi i32 [ %207, %154 ], [ %3, %135 ]
  %157 = phi i8* [ %206, %154 ], [ %18, %135 ]
  %158 = bitcast i8* %157 to i32*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %136) #12
  store i32 -1431655766, i32* %8, align 4
  %159 = load %"class.SkShaderBase::Context"*, %"class.SkShaderBase::Context"** %137, align 8
  %160 = bitcast %"class.SkShaderBase::Context"* %159 to void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)***
  %161 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)**, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*** %160, align 8
  %162 = getelementptr inbounds void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %161, i64 3
  %163 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %162, align 8
  call void %163(%"class.SkShaderBase::Context"* %159, i32 %1, i32 %155, i32* nonnull %8, i32 1) #12
  %164 = load i32, i32* %8, align 4
  %165 = load i32, i32* %158, align 4
  %166 = load i8, i8* %6, align 1
  %167 = zext i8 %166 to i32
  %168 = add nuw nsw i32 %167, 1
  %169 = lshr i32 %164, 24
  %170 = lshr i32 %165, 24
  %171 = sub nsw i32 %169, %170
  %172 = mul nsw i32 %168, %171
  %173 = lshr i32 %172, 8
  %174 = add nuw nsw i32 %173, %170
  %175 = lshr i32 %164, 16
  %176 = and i32 %175, 255
  %177 = lshr i32 %165, 16
  %178 = and i32 %177, 255
  %179 = sub nsw i32 %176, %178
  %180 = mul nsw i32 %179, %168
  %181 = lshr i32 %180, 8
  %182 = add nuw nsw i32 %181, %177
  %183 = lshr i32 %164, 8
  %184 = and i32 %183, 255
  %185 = lshr i32 %165, 8
  %186 = and i32 %185, 255
  %187 = sub nsw i32 %184, %186
  %188 = mul nsw i32 %187, %168
  %189 = and i32 %164, 255
  %190 = and i32 %165, 255
  %191 = sub nsw i32 %189, %190
  %192 = mul nsw i32 %168, %191
  %193 = lshr i32 %192, 8
  %194 = add i32 %193, %165
  %195 = and i32 %194, 255
  %196 = shl i32 %174, 24
  %197 = shl i32 %182, 16
  %198 = and i32 %197, 16711680
  %199 = and i32 %165, 65280
  %200 = add nsw i32 %188, %199
  %201 = and i32 %200, 65280
  %202 = or i32 %196, %201
  %203 = or i32 %202, %195
  %204 = or i32 %203, %198
  store i32 %204, i32* %158, align 4
  %205 = add nsw i32 %155, 1
  %206 = getelementptr inbounds i8, i8* %157, i64 %13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %136) #12
  %207 = add nsw i32 %156, -1
  %208 = icmp sgt i32 %207, 0
  br i1 %208, label %154, label %257

209:                                              ; preds = %129
  %210 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 3
  %211 = load i32*, i32** %210, align 8
  %212 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 2
  %213 = load %class.SkXfermode*, %class.SkXfermode** %212, align 8
  %214 = icmp eq %class.SkXfermode* %213, null
  br i1 %214, label %235, label %215

215:                                              ; preds = %209
  %216 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 4
  %217 = bitcast %class.SkXfermode* %213 to void (%class.SkXfermode*, i32*, i32*, i32, i8*)***
  br label %218

218:                                              ; preds = %215, %218
  %219 = phi i32 [ %231, %218 ], [ %2, %215 ]
  %220 = phi i32 [ %233, %218 ], [ %3, %215 ]
  %221 = phi i8* [ %232, %218 ], [ %18, %215 ]
  %222 = bitcast i8* %221 to i32*
  %223 = load %"class.SkShaderBase::Context"*, %"class.SkShaderBase::Context"** %216, align 8
  %224 = bitcast %"class.SkShaderBase::Context"* %223 to void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)***
  %225 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)**, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*** %224, align 8
  %226 = getelementptr inbounds void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %225, i64 3
  %227 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %226, align 8
  call void %227(%"class.SkShaderBase::Context"* %223, i32 %1, i32 %219, i32* %211, i32 1) #12
  %228 = load void (%class.SkXfermode*, i32*, i32*, i32, i8*)**, void (%class.SkXfermode*, i32*, i32*, i32, i8*)*** %217, align 8
  %229 = getelementptr inbounds void (%class.SkXfermode*, i32*, i32*, i32, i8*)*, void (%class.SkXfermode*, i32*, i32*, i32, i8*)** %228, i64 3
  %230 = load void (%class.SkXfermode*, i32*, i32*, i32, i8*)*, void (%class.SkXfermode*, i32*, i32*, i32, i8*)** %229, align 8
  call void %230(%class.SkXfermode* nonnull %213, i32* %222, i32* %211, i32 1, i8* nonnull %6) #12
  %231 = add nsw i32 %219, 1
  %232 = getelementptr inbounds i8, i8* %221, i64 %13
  %233 = add nsw i32 %220, -1
  %234 = icmp sgt i32 %233, 0
  br i1 %234, label %218, label %257

235:                                              ; preds = %209
  %236 = icmp eq i8 %4, -1
  %237 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 4
  %238 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 5
  %239 = select i1 %236, void (i32*, i32*, i32, i32)** %237, void (i32*, i32*, i32, i32)** %238
  %240 = load void (i32*, i32*, i32, i32)*, void (i32*, i32*, i32, i32)** %239, align 8
  %241 = getelementptr inbounds %class.SkARGB32_Shader_Blitter, %class.SkARGB32_Shader_Blitter* %0, i64 0, i32 0, i32 4
  %242 = zext i8 %4 to i32
  br label %243

243:                                              ; preds = %243, %235
  %244 = phi i32 [ %2, %235 ], [ %253, %243 ]
  %245 = phi i32 [ %3, %235 ], [ %255, %243 ]
  %246 = phi i8* [ %18, %235 ], [ %254, %243 ]
  %247 = bitcast i8* %246 to i32*
  %248 = load %"class.SkShaderBase::Context"*, %"class.SkShaderBase::Context"** %241, align 8
  %249 = bitcast %"class.SkShaderBase::Context"* %248 to void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)***
  %250 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)**, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*** %249, align 8
  %251 = getelementptr inbounds void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %250, i64 3
  %252 = load void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)*, void (%"class.SkShaderBase::Context"*, i32, i32, i32*, i32)** %251, align 8
  tail call void %252(%"class.SkShaderBase::Context"* %248, i32 %1, i32 %244, i32* %211, i32 1) #12
  tail call void %240(i32* %247, i32* %211, i32 1, i32 %242) #12
  %253 = add nsw i32 %244, 1
  %254 = getelementptr inbounds i8, i8* %246, i64 %13
  %255 = add nsw i32 %245, -1
  %256 = icmp sgt i32 %255, 0
  br i1 %256, label %243, label %257

257:                                              ; preds = %154, %140, %218, %243, %128
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN16SkARGB32_BlitterD0Ev(%class.SkARGB32_Blitter*) unnamed_addr #9 comdat align 2 {
  %2 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV15SkRasterBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %4 = load %class.SkColorSpace*, %class.SkColorSpace** %3, align 8
  %5 = icmp eq %class.SkColorSpace* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  %11 = bitcast %class.SkColorSpace* %4 to i8*
  tail call void @_ZdlPv(i8* %11) #14
  br label %12

12:                                               ; preds = %1, %6, %10
  %13 = getelementptr inbounds %class.SkARGB32_Blitter, %class.SkARGB32_Blitter* %0, i64 0, i32 0, i32 0
  tail call void @_ZN9SkBlitterD2Ev(%class.SkBlitter* %13) #12
  %14 = bitcast %class.SkARGB32_Blitter* %0 to i8*
  tail call void @_ZdlPv(i8* %14) #14
  ret void
}

declare void @_ZN9SkBlitter12blitAntiRectEiiiihh(%class.SkBlitter*, i32, i32, i32, i32, i8 zeroext, i8 zeroext) unnamed_addr #4

declare zeroext i1 @_ZNK9SkBlitter13isNullBlitterEv(%class.SkBlitter*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK9SkBlitter20requestRowsPreservedEv(%class.SkBlitter*) unnamed_addr #2 comdat align 2 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN9SkBlitter15allocBlitMemoryEm(%class.SkBlitter*, i64) unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %class.SkBlitter, %class.SkBlitter* %0, i64 0, i32 1
  %4 = getelementptr inbounds %class.SkBlitter, %class.SkBlitter* %0, i64 0, i32 1, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %7, label %14

7:                                                ; preds = %2
  %8 = tail call i8* @_Z15sk_malloc_flagsmj(i64 %1, i32 2) #12
  %9 = getelementptr inbounds %class.SkAutoMalloc, %class.SkAutoMalloc* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  store i8* %8, i8** %9, align 8
  %11 = icmp eq i8* %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %7
  tail call void @_Z7sk_freePv(i8* nonnull %10) #12
  br label %13

13:                                               ; preds = %12, %7
  store i64 %1, i64* %4, align 8
  br label %14

14:                                               ; preds = %2, %13
  %15 = getelementptr inbounds %class.SkAutoMalloc, %class.SkAutoMalloc* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  ret i8* %16
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN15SkRasterBlitterD2Ev(%class.SkRasterBlitter*) unnamed_addr #9 comdat align 2 {
  %2 = getelementptr inbounds %class.SkRasterBlitter, %class.SkRasterBlitter* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV15SkRasterBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkRasterBlitter, %class.SkRasterBlitter* %0, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %4 = load %class.SkColorSpace*, %class.SkColorSpace** %3, align 8
  %5 = icmp eq %class.SkColorSpace* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  %11 = bitcast %class.SkColorSpace* %4 to i8*
  tail call void @_ZdlPv(i8* %11) #14
  br label %12

12:                                               ; preds = %1, %6, %10
  %13 = getelementptr inbounds %class.SkRasterBlitter, %class.SkRasterBlitter* %0, i64 0, i32 0
  tail call void @_ZN9SkBlitterD2Ev(%class.SkBlitter* %13) #12
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN23SkARGB32_Opaque_BlitterD0Ev(%class.SkARGB32_Opaque_Blitter*) unnamed_addr #9 comdat align 2 {
  %2 = getelementptr inbounds %class.SkARGB32_Opaque_Blitter, %class.SkARGB32_Opaque_Blitter* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV15SkRasterBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkARGB32_Opaque_Blitter, %class.SkARGB32_Opaque_Blitter* %0, i64 0, i32 0, i32 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %4 = load %class.SkColorSpace*, %class.SkColorSpace** %3, align 8
  %5 = icmp eq %class.SkColorSpace* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  %11 = bitcast %class.SkColorSpace* %4 to i8*
  tail call void @_ZdlPv(i8* %11) #14
  br label %12

12:                                               ; preds = %1, %6, %10
  %13 = getelementptr inbounds %class.SkARGB32_Opaque_Blitter, %class.SkARGB32_Opaque_Blitter* %0, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZN9SkBlitterD2Ev(%class.SkBlitter* %13) #12
  %14 = bitcast %class.SkARGB32_Opaque_Blitter* %0 to i8*
  tail call void @_ZdlPv(i8* %14) #14
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN22SkARGB32_Black_BlitterD0Ev(%class.SkARGB32_Black_Blitter*) unnamed_addr #9 comdat align 2 {
  %2 = getelementptr inbounds %class.SkARGB32_Black_Blitter, %class.SkARGB32_Black_Blitter* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTV15SkRasterBlitter, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkARGB32_Black_Blitter, %class.SkARGB32_Black_Blitter* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %4 = load %class.SkColorSpace*, %class.SkColorSpace** %3, align 8
  %5 = icmp eq %class.SkColorSpace* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  %11 = bitcast %class.SkColorSpace* %4 to i8*
  tail call void @_ZdlPv(i8* %11) #14
  br label %12

12:                                               ; preds = %1, %6, %10
  %13 = getelementptr inbounds %class.SkARGB32_Black_Blitter, %class.SkARGB32_Black_Blitter* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZN9SkBlitterD2Ev(%class.SkBlitter* %13) #12
  %14 = bitcast %class.SkARGB32_Black_Blitter* %0 to i8*
  tail call void @_ZdlPv(i8* %14) #14
  ret void
}

declare %class.SkPixmap* @_ZN9SkBlitter17justAnOpaqueColorEPj(%class.SkBlitter*, i32*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9SkBlitter10blitAntiH2Eiijj(%class.SkBlitter*, i32, i32, i32, i32) unnamed_addr #2 comdat align 2 {
  %6 = alloca [3 x i16], align 2
  %7 = alloca [2 x i8], align 1
  %8 = bitcast [3 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 6, i8* nonnull %8) #12
  %9 = getelementptr inbounds [3 x i16], [3 x i16]* %6, i64 0, i64 0
  %10 = getelementptr inbounds [3 x i16], [3 x i16]* %6, i64 0, i64 1
  %11 = getelementptr inbounds [3 x i16], [3 x i16]* %6, i64 0, i64 2
  %12 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %12) #12
  %13 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 1
  store i16 1, i16* %9, align 2
  store i16 1, i16* %10, align 2
  store i16 0, i16* %11, align 2
  %14 = trunc i32 %3 to i8
  store i8 %14, i8* %12, align 1
  %15 = trunc i32 %4 to i8
  store i8 %15, i8* %13, align 1
  %16 = bitcast %class.SkBlitter* %0 to void (%class.SkBlitter*, i32, i32, i8*, i16*)***
  %17 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)**, void (%class.SkBlitter*, i32, i32, i8*, i16*)*** %16, align 8
  %18 = getelementptr inbounds void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %17, i64 3
  %19 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %18, align 8
  call void %19(%class.SkBlitter* %0, i32 %1, i32 %2, i8* nonnull %12, i16* nonnull %9) #12
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %12) #12
  call void @llvm.lifetime.end.p0i8(i64 6, i8* nonnull %8) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9SkBlitter10blitAntiV2Eiijj(%class.SkBlitter*, i32, i32, i32, i32) unnamed_addr #2 comdat align 2 {
  %6 = alloca [2 x i16], align 2
  %7 = alloca [1 x i8], align 1
  %8 = bitcast [2 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #12
  %9 = getelementptr inbounds [2 x i16], [2 x i16]* %6, i64 0, i64 0
  %10 = getelementptr inbounds [2 x i16], [2 x i16]* %6, i64 0, i64 1
  %11 = getelementptr inbounds [1 x i8], [1 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %11) #12
  store i16 1, i16* %9, align 2
  store i16 0, i16* %10, align 2
  %12 = trunc i32 %3 to i8
  store i8 %12, i8* %11, align 1
  %13 = bitcast %class.SkBlitter* %0 to void (%class.SkBlitter*, i32, i32, i8*, i16*)***
  %14 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)**, void (%class.SkBlitter*, i32, i32, i8*, i16*)*** %13, align 8
  %15 = getelementptr inbounds void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %14, i64 3
  %16 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %15, align 8
  call void %16(%class.SkBlitter* %0, i32 %1, i32 %2, i8* nonnull %11, i16* nonnull %9) #12
  store i16 1, i16* %9, align 2
  store i16 0, i16* %10, align 2
  %17 = trunc i32 %4 to i8
  store i8 %17, i8* %11, align 1
  %18 = add nsw i32 %2, 1
  %19 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)**, void (%class.SkBlitter*, i32, i32, i8*, i16*)*** %13, align 8
  %20 = getelementptr inbounds void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %19, i64 3
  %21 = load void (%class.SkBlitter*, i32, i32, i8*, i16*)*, void (%class.SkBlitter*, i32, i32, i8*, i16*)** %20, align 8
  call void %21(%class.SkBlitter* %0, i32 %1, i32 %18, i8* nonnull %11, i16* nonnull %9) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %11) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #12
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #10

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN15SkRasterBlitterD0Ev(%class.SkRasterBlitter*) unnamed_addr #9 comdat align 2 {
  tail call void @llvm.trap() #13
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

declare void @_ZN9SkBlitter5blitVEiiih(%class.SkBlitter*, i32, i32, i32, i8 zeroext) unnamed_addr #4

declare void @_ZN9SkBlitter8blitRectEiiii(%class.SkBlitter*, i32, i32, i32, i32) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN9SkBlitterD2Ev(%class.SkBlitter*) unnamed_addr #6

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #11

declare i32 @_ZNK8SkRGBA4fIL11SkAlphaType3EE9toSkColorEv(%struct.SkRGBA4f*) local_unnamed_addr #4

declare i32 @_Z18SkPreMultiplyColorj(i32) local_unnamed_addr #4

declare i8* @_Z15sk_malloc_flagsmj(i64, i32) local_unnamed_addr #4

declare void @_ZN10SkXfermode4MakeE11SkBlendMode(%class.sk_sp.12* sret, i32) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone }
attributes #11 = { cold noreturn nounwind }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }
attributes #14 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{void (i32*, i16*, i32, i32, i32)* @_Z14blit_row_lcd16PjPKtjij, void (i32*, i16*, i32, i32, i32)* @_Z21blit_row_lcd16_opaquePjPKtjij}
!11 = distinct !{!11, !8}
!12 = distinct !{!12, !13, !8}
!13 = !{!"llvm.loop.unroll.runtime.disable"}
!14 = distinct !{!14, !8}
!15 = distinct !{!15, !13, !8}
!16 = !{i8 0, i8 2}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.unroll.disable"}
!19 = !{void (i32*, i8*, i32*, i32)* @_ZL12blend_row_A8PjPKvPKji, void (i32*, i8*, i32*, i32)* @_ZL15blend_row_lcd16PjPKvPKji, void (i32*, i8*, i32*, i32)* @_ZL19blend_row_A8_opaquePjPKvPKji, void (i32*, i8*, i32*, i32)* @_ZL22blend_row_LCD16_opaquePjPKvPKji}
