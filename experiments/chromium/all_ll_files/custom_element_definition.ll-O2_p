; ModuleID = '../../third_party/blink/renderer/core/html/custom/custom_element_definition.cc'
source_filename = "../../third_party/blink/renderer/core/html/custom/custom_element_definition.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::QualifiedName" = type { %class.scoped_refptr.13 }
%class.scoped_refptr.13 = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.93", i32, [4 x i8], %"class.std::__1::unique_ptr.229", %"class.std::__1::unique_ptr.229", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.239", %"class.std::__1::unique_ptr.245", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.257", %"class.std::__1::unique_ptr.263", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.270", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.93" = type { %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.96", %"class.std::__1::unique_ptr.102", %"class.std::__1::unique_ptr.108", %"class.std::__1::unique_ptr.114", %"class.std::__1::unique_ptr.120", %"class.std::__1::unique_ptr.126", %"class.std::__1::unique_ptr.137", %"class.std::__1::unique_ptr.144", %"class.std::__1::unique_ptr.144", %"class.std::__1::unique_ptr.151", %"class.std::__1::unique_ptr.158", %"class.std::__1::unique_ptr.165", %"class.std::__1::unique_ptr.165", %"class.std::__1::unique_ptr.172", %"class.std::__1::unique_ptr.179", %"class.std::__1::unique_ptr.186", %"class.std::__1::unique_ptr.209", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.96" = type { %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.102" = type { %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.108" = type { %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.114" = type { %"class.std::__1::__compressed_pair.115" }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.116" }
%"struct.std::__1::__compressed_pair_elem.116" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.126" = type { %"class.std::__1::__compressed_pair.127" }
%"class.std::__1::__compressed_pair.127" = type { %"struct.std::__1::__compressed_pair_elem.128" }
%"struct.std::__1::__compressed_pair_elem.128" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.129" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.129" = type { %"struct.std::__1::__atomic_base.130" }
%"struct.std::__1::__atomic_base.130" = type { %"struct.std::__1::__atomic_base.131" }
%"struct.std::__1::__atomic_base.131" = type { %"struct.std::__1::__cxx_atomic_impl.132" }
%"struct.std::__1::__cxx_atomic_impl.132" = type { %"struct.std::__1::__cxx_atomic_base_impl.133" }
%"struct.std::__1::__cxx_atomic_base_impl.133" = type { i64 }
%"class.std::__1::unique_ptr.137" = type { %"class.std::__1::__compressed_pair.138" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"class.blink::Worklist.140"* }
%"class.blink::Worklist.140" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.129" }
%"class.std::__1::unique_ptr.144" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"class.blink::Worklist.147"* }
%"class.blink::Worklist.147" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.129" }
%"class.std::__1::unique_ptr.151" = type { %"class.std::__1::__compressed_pair.152" }
%"class.std::__1::__compressed_pair.152" = type { %"struct.std::__1::__compressed_pair_elem.153" }
%"struct.std::__1::__compressed_pair_elem.153" = type { %"class.blink::Worklist.154"* }
%"class.blink::Worklist.154" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.129" }
%"class.std::__1::unique_ptr.158" = type { %"class.std::__1::__compressed_pair.159" }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { %"class.blink::Worklist.161"* }
%"class.blink::Worklist.161" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.129" }
%"class.std::__1::unique_ptr.165" = type { %"class.std::__1::__compressed_pair.166" }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.167" }
%"struct.std::__1::__compressed_pair_elem.167" = type { %"class.blink::Worklist.168"* }
%"class.blink::Worklist.168" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.129" }
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.blink::Worklist.175"* }
%"class.blink::Worklist.175" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.129" }
%"class.std::__1::unique_ptr.179" = type { %"class.std::__1::__compressed_pair.180" }
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.181" }
%"struct.std::__1::__compressed_pair_elem.181" = type { %"class.blink::Worklist.182"* }
%"class.blink::Worklist.182" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.129" }
%"class.std::__1::unique_ptr.186" = type { %"class.std::__1::__compressed_pair.187" }
%"class.std::__1::__compressed_pair.187" = type { %"struct.std::__1::__compressed_pair_elem.188" }
%"struct.std::__1::__compressed_pair_elem.188" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.189", %"class.std::__1::__compressed_pair.196", %"class.std::__1::__compressed_pair.201", %"class.std::__1::__compressed_pair.203", [4 x i8] }>
%"class.std::__1::unique_ptr.189" = type { %"class.std::__1::__compressed_pair.190" }
%"class.std::__1::__compressed_pair.190" = type { %"struct.std::__1::__compressed_pair_elem.191", %"struct.std::__1::__compressed_pair_elem.192" }
%"struct.std::__1::__compressed_pair_elem.191" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.192" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.193" }
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.194" = type { i64 }
%"class.std::__1::__compressed_pair.196" = type { %"struct.std::__1::__compressed_pair_elem.197" }
%"struct.std::__1::__compressed_pair_elem.197" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.201" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"class.std::__1::__compressed_pair.203" = type { %"struct.std::__1::__compressed_pair_elem.204" }
%"struct.std::__1::__compressed_pair_elem.204" = type { float }
%"class.std::__1::unique_ptr.209" = type { %"class.std::__1::__compressed_pair.210" }
%"class.std::__1::__compressed_pair.210" = type { %"struct.std::__1::__compressed_pair_elem.211" }
%"struct.std::__1::__compressed_pair_elem.211" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.212", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.212" = type { %"class.std::__1::__compressed_pair.213" }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.221" }
%"class.WTF::Vector.221" = type { %"class.WTF::VectorBuffer.222" }
%"class.WTF::VectorBuffer.222" = type { %"class.WTF::VectorBufferBase.223" }
%"class.WTF::VectorBufferBase.223" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.229" = type { %"class.std::__1::__compressed_pair.230" }
%"class.std::__1::__compressed_pair.230" = type { %"struct.std::__1::__compressed_pair_elem.231" }
%"struct.std::__1::__compressed_pair_elem.231" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.237" }
%"class.WTF::VectorBuffer.237" = type { %"class.WTF::VectorBufferBase.238" }
%"class.WTF::VectorBufferBase.238" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.239" = type { %"class.std::__1::__compressed_pair.240" }
%"class.std::__1::__compressed_pair.240" = type { %"struct.std::__1::__compressed_pair_elem.241" }
%"struct.std::__1::__compressed_pair_elem.241" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.245" = type { %"class.std::__1::__compressed_pair.246" }
%"class.std::__1::__compressed_pair.246" = type { %"struct.std::__1::__compressed_pair_elem.247" }
%"struct.std::__1::__compressed_pair_elem.247" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.251" }
%"class.std::__1::unique_ptr.251" = type { %"class.std::__1::__compressed_pair.252" }
%"class.std::__1::__compressed_pair.252" = type { %"struct.std::__1::__compressed_pair_elem.253" }
%"struct.std::__1::__compressed_pair_elem.253" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.140"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.147"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.154"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.161"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.168"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.1044" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.1044" = type { %"struct.std::__1::__compressed_pair_elem.1045" }
%"struct.std::__1::__compressed_pair_elem.1045" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.257" = type { %"class.std::__1::__compressed_pair.258" }
%"class.std::__1::__compressed_pair.258" = type { %"struct.std::__1::__compressed_pair_elem.259" }
%"struct.std::__1::__compressed_pair_elem.259" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.263" = type { %"class.std::__1::__compressed_pair.264" }
%"class.std::__1::__compressed_pair.264" = type { %"struct.std::__1::__compressed_pair_elem.265" }
%"struct.std::__1::__compressed_pair_elem.265" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.269 }
%class.scoped_refptr.269 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.270" = type { %"struct.std::__1::__atomic_base.271" }
%"struct.std::__1::__atomic_base.271" = type { %"struct.std::__1::__cxx_atomic_impl.272" }
%"struct.std::__1::__cxx_atomic_impl.272" = type { %"struct.std::__1::__cxx_atomic_base_impl.273" }
%"struct.std::__1::__cxx_atomic_base_impl.273" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.blink::AtomicEntryFlag" = type { %"struct.std::__1::atomic.529" }
%"struct.std::__1::atomic.529" = type { %"struct.std::__1::__atomic_base.530" }
%"struct.std::__1::__atomic_base.530" = type { %"struct.std::__1::__atomic_base.531" }
%"struct.std::__1::__atomic_base.531" = type { %"struct.std::__1::__cxx_atomic_impl.532" }
%"struct.std::__1::__cxx_atomic_impl.532" = type { %"struct.std::__1::__cxx_atomic_base_impl.533" }
%"struct.std::__1::__cxx_atomic_base_impl.533" = type { i32 }
%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"class.blink::CustomElementDefinition" = type { %"class.blink::NameClient", %"class.blink::CustomElementDescriptor", %"class.blink::HeapVector", %"class.WTF::HashSet", i8, i8, i8, i8, i8, %"class.blink::HeapVector.34" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::CustomElementDescriptor" = type { %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.blink::HeapVector" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [8 x i8] }
%"class.WTF::VectorBufferBase" = type { %"class.blink::Member"*, i32, i32 }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::Element"* }
%"class.blink::Element" = type { %"class.blink::ContainerNode", %"class.blink::Animatable", %"class.blink::QualifiedName", %"class.blink::Member.14" }
%"class.blink::ContainerNode" = type { %"class.blink::Node", %"class.blink::Member.5", %"class.blink::Member.5" }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member.5", %"class.blink::Member.7", %"class.blink::Member.5", %"class.blink::Member.5", %"class.blink::Member.9" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::Member.7" = type { %"class.blink::MemberBase.8" }
%"class.blink::MemberBase.8" = type { %"class.blink::TreeScope"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.484", %"class.blink::Member.470", %"class.blink::Member.7", %"class.blink::Member.486", %"class.blink::Member.486", %"class.blink::Member.507", %"class.blink::Member.509", %"class.blink::Member.511", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.516", %"class.blink::HeapVector.34" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member.484" = type { %"class.blink::MemberBase.485" }
%"class.blink::MemberBase.485" = type { %"class.blink::ContainerNode"* }
%"class.blink::Member.470" = type { %"class.blink::MemberBase.471" }
%"class.blink::MemberBase.471" = type { %"class.blink::Document"* }
%"class.blink::Document" = type { %"class.blink::ContainerNode", %"class.blink::TreeScope", %"class.blink::UseCounter", %"class.blink::Supplementable", i32, %"class.blink::DocumentLifecycle", i8, i8, %"class.WTF::Vector.525", %"class.WTF::Vector.525", i8, i32, %"class.blink::Member.536", %"class.blink::Member.538", %"class.blink::Member.540", %"class.blink::Member.542", %"class.blink::Member.544", %"class.blink::Member.546", i8, %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.std::__1::unique_ptr.548", %"class.blink::KURL", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.blink::Member.554", %"class.blink::Member.556", %"class.blink::Member.40", i32, i32, i32, i8, %"class.blink::TaskHandle", %"class.blink::TaskHandle", %"class.WTF::Vector.559", i8, i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapVector.501", %"class.blink::Member", %"class.blink::Member.574", %"class.blink::Member", %"class.blink::Member", %"class.blink::Member", %"class.blink::UserActionElementSet", %"class.blink::Member.583", double, double, i64, i64, %"class.blink::HeapHashSet.585", %"class.blink::HeapHashSet.592", i16, i8, %"class.blink::Member.599", %"class.blink::Member.601", %"class.blink::Member.771", %"class.blink::Member.773", %"class.blink::TextLinkColors", %"class.blink::Member.775", i8, [7 x i8], %"class.blink::HeapHashMap.777", i32, i32, i8, i8, i8, i32, i32, i32, i8, %"class.WTF::String", %"class.WTF::String", %"class.blink::Member", %"class.WTF::Vector.784", %"class.blink::Member.789", %"class.blink::Member.791", i8, %"class.blink::Member", i8, i32, i8, %"class.base::ElapsedTimer", %"class.blink::Member.793", %"class.blink::HeapVector.795", %"class.std::__1::unique_ptr.803", %"class.WTF::String", %"class.WTF::String", i8, %"class.WTF::AtomicString", %"class.blink::DocumentEncodingData", i8, i8, [6 x i8], %"class.blink::HeapHashSet.809", %"class.blink::LiveNodeListRegistry", %"class.blink::Member.822", %"class.WTF::Vector.824", i8, i8, %"class.std::__1::unique_ptr.829", %"class.blink::NthIndexCache"*, i8, i8, i8, i8, i8, i8, %"class.blink::LayoutView"*, %"class.blink::HeapVector.501", %"class.blink::HeapVector.835", i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapTaskRunnerTimer", %"class.blink::DocumentTiming", %"class.blink::Member.843", i8, i32, %"class.blink::Member.845", %"class.blink::Member.847", %"class.blink::Member.849", %"class.blink::HeapTaskRunnerTimer", %"class.blink::Member.851", %"class.WTF::HashMap.853", %"class.blink::Member.858", %"class.blink::Member.860", %"class.blink::Member.862", %"class.blink::Member.864", %"class.blink::Member.470", %"class.blink::Member.470", %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapHashSet.866", i8, i32, %"class.blink::Member.873", %"class.blink::Member.875", i32, %"class.blink::Member.877", %"class.blink::Member.879", %"class.blink::Member.881", %"class.std::__1::unique_ptr.883", i64, %"class.std::__1::unique_ptr.889", i32, i32, %"class.blink::Member.895", %"class.blink::Member.897", %"class.blink::Member.899", i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, %"class.blink::Member.901", %"class.WTF::Vector.903", %"class.WTF::AtomicString", %"class.blink::HeapHashMap.908", %"class.blink::Member.915", %"class.std::__1::unique_ptr.917", %"class.blink::Member.923", i8, i8, %"class.WTF::String", %"class.blink::Member.925", i8, [7 x i8], %"class.blink::HeapHashMap.927", %"class.blink::HeapObserverSet", %"class.blink::Member.941", i8, i8, i8, i8, i8, i8, i8, %"class.blink::Member.943", i32, i8, i8, %"class.blink::WeakMember.945", %"class.blink::Member.946" }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.518" }
%"class.blink::HeapHashMap.518" = type { %"class.WTF::HashMap.521" }
%"class.WTF::HashMap.521" = type { %"class.WTF::HashTable.522" }
%"class.WTF::HashTable.522" = type <{ %"struct.WTF::KeyValuePair.524"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.524" = type opaque
%"class.blink::DocumentLifecycle" = type <{ i32, i32, i32, i8, i8, [2 x i8] }>
%"class.WTF::Vector.525" = type { %"class.WTF::VectorBuffer.526" }
%"class.WTF::VectorBuffer.526" = type { %"class.WTF::VectorBufferBase.527" }
%"class.WTF::VectorBufferBase.527" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.528 }
%class.scoped_refptr.528 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.529" }
%"class.blink::Member.536" = type { %"class.blink::MemberBase.537" }
%"class.blink::MemberBase.537" = type { %"class.blink::LocalDOMWindow"* }
%"class.blink::LocalDOMWindow" = type opaque
%"class.blink::Member.538" = type { %"class.blink::MemberBase.539" }
%"class.blink::MemberBase.539" = type { %"class.blink::ExecutionContext"* }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable.972", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.1013", i32, i8, [3 x i8], %"class.blink::HeapVector.1015", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.1023", %"class.blink::Member.1025", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.1034", %"class.blink::Member.1040", %"class.blink::Member.1042", i8, [7 x i8] }>
%"class.blink::Supplementable.972" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.973" }
%"class.blink::HeapHashMap.973" = type { %"class.WTF::HashMap.976" }
%"class.WTF::HashMap.976" = type { %"class.WTF::HashTable.977" }
%"class.WTF::HashTable.977" = type <{ %"struct.WTF::KeyValuePair.979"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.979" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.988" }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet.980" }
%"class.blink::HeapObserverSet.980" = type { i32, [4 x i8], %"class.blink::HeapHashSet.981" }
%"class.blink::HeapHashSet.981" = type { %"class.WTF::HashSet.984" }
%"class.WTF::HashSet.984" = type { %"class.WTF::HashTable.985" }
%"class.WTF::HashTable.985" = type <{ %"class.blink::WeakMember.987"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.987" = type opaque
%"class.blink::Supplementable.988" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.989" }
%"class.blink::HeapHashMap.989" = type { %"class.WTF::HashMap.992" }
%"class.WTF::HashMap.992" = type { %"class.WTF::HashTable.993" }
%"class.WTF::HashTable.993" = type <{ %"struct.WTF::KeyValuePair.995"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.995" = type { i8*, %"class.blink::Member.1111" }
%"class.blink::Member.1111" = type { %"class.blink::MemberBase.1112" }
%"class.blink::MemberBase.1112" = type { %"class.blink::Supplement"* }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.1113" }
%"class.blink::Member.1113" = type { %"class.blink::MemberBase.1114" }
%"class.blink::MemberBase.1114" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr.996, %"class.std::__1::unique_ptr.997", %"class.std::__1::unique_ptr.997", %"class.std::__1::unique_ptr.1003", %"class.std::__1::unique_ptr.1003", %"class.blink::Member.538", i32, [4 x i8], %"class.WTF::HashSet.1009", i32, i32 }
%class.scoped_refptr.996 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type opaque
%"class.std::__1::unique_ptr.997" = type { %"class.std::__1::__compressed_pair.998" }
%"class.std::__1::__compressed_pair.998" = type { %"struct.std::__1::__compressed_pair_elem.999" }
%"struct.std::__1::__compressed_pair_elem.999" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type opaque
%"class.std::__1::unique_ptr.1003" = type { %"class.std::__1::__compressed_pair.1004" }
%"class.std::__1::__compressed_pair.1004" = type { %"struct.std::__1::__compressed_pair_elem.1005" }
%"struct.std::__1::__compressed_pair_elem.1005" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.WTF::HashSet.1009" = type { %"class.WTF::HashTable.1010" }
%"class.WTF::HashTable.1010" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1013" = type { %"class.blink::MemberBase.1014" }
%"class.blink::MemberBase.1014" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector.1015" = type { %"class.WTF::Vector.1018" }
%"class.WTF::Vector.1018" = type { %"class.WTF::VectorBuffer.1019" }
%"class.WTF::VectorBuffer.1019" = type { %"class.WTF::VectorBufferBase.1020" }
%"class.WTF::VectorBufferBase.1020" = type { %"class.blink::Member.1021"*, i32, i32 }
%"class.blink::Member.1021" = type opaque
%"class.blink::Member.1023" = type { %"class.blink::MemberBase.1024" }
%"class.blink::MemberBase.1024" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.1025" = type { %"class.blink::MemberBase.1026" }
%"class.blink::MemberBase.1026" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type opaque
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.1027", i32, i32 }
%"class.blink::HeapHashMap.1027" = type { %"class.WTF::HashMap.1030" }
%"class.WTF::HashMap.1030" = type { %"class.WTF::HashTable.1031" }
%"class.WTF::HashTable.1031" = type <{ %"struct.WTF::KeyValuePair.1033"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1033" = type opaque
%"class.std::__1::unique_ptr.1034" = type { %"class.std::__1::__compressed_pair.1035" }
%"class.std::__1::__compressed_pair.1035" = type { %"struct.std::__1::__compressed_pair_elem.1036" }
%"struct.std::__1::__compressed_pair_elem.1036" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type opaque
%"class.blink::Member.1040" = type { %"class.blink::MemberBase.1041" }
%"class.blink::MemberBase.1041" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.1042" = type { %"class.blink::MemberBase.1043" }
%"class.blink::MemberBase.1043" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type opaque
%"class.blink::Member.540" = type { %"class.blink::MemberBase.541" }
%"class.blink::MemberBase.541" = type { %"class.blink::ResourceFetcher"* }
%"class.blink::ResourceFetcher" = type opaque
%"class.blink::Member.542" = type { %"class.blink::MemberBase.543" }
%"class.blink::MemberBase.543" = type { %"class.blink::DocumentParser"* }
%"class.blink::DocumentParser" = type opaque
%"class.blink::Member.544" = type { %"class.blink::MemberBase.545" }
%"class.blink::MemberBase.545" = type { %"class.blink::ContextFeatures"* }
%"class.blink::ContextFeatures" = type opaque
%"class.blink::Member.546" = type { %"class.blink::MemberBase.547" }
%"class.blink::MemberBase.547" = type { %"class.blink::HttpRefreshScheduler"* }
%"class.blink::HttpRefreshScheduler" = type opaque
%"class.std::__1::unique_ptr.548" = type { %"class.std::__1::__compressed_pair.549" }
%"class.std::__1::__compressed_pair.549" = type { %"struct.std::__1::__compressed_pair_elem.550" }
%"struct.std::__1::__compressed_pair_elem.550" = type { %"class.blink::OriginAccessEntry"* }
%"class.blink::OriginAccessEntry" = type opaque
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::KURL"* }
%"class.blink::Member.554" = type { %"class.blink::MemberBase.555" }
%"class.blink::MemberBase.555" = type { %"class.blink::DocumentType"* }
%"class.blink::DocumentType" = type opaque
%"class.blink::Member.556" = type { %"class.blink::MemberBase.557" }
%"class.blink::MemberBase.557" = type { %"class.blink::DOMImplementation"* }
%"class.blink::DOMImplementation" = type opaque
%"class.blink::Member.40" = type { %"class.blink::MemberBase.41" }
%"class.blink::MemberBase.41" = type { %"class.blink::CSSStyleSheet"* }
%"class.blink::CSSStyleSheet" = type { %"class.blink::StyleSheet", %"class.blink::Member.42", i8, i8, i8, i8, i8, %"class.WTF::String", %class.scoped_refptr.458, %"class.WTF::Vector.349", %"class.WTF::Vector.349", %"class.blink::Member.5", %"class.blink::Member.459", %"class.blink::HeapHashSet.463", %"class.blink::Member.470", %"class.WTF::HashSet", %"class.WTF::TextPosition", %"class.blink::Member.472", %"class.blink::HeapVector.474", %"class.blink::Member.481" }
%"class.blink::StyleSheet" = type { %"class.blink::ScriptWrappable" }
%"class.blink::Member.42" = type { %"class.blink::MemberBase.43" }
%"class.blink::MemberBase.43" = type { %"class.blink::StyleSheetContents"* }
%"class.blink::StyleSheetContents" = type <{ %"class.blink::Member.46", %"class.WTF::String", %"class.blink::HeapVector.48", %"class.blink::HeapVector.55", %"class.blink::HeapVector.63", %"class.WTF::HashMap", %"class.WTF::AtomicString", %"class.blink::WeakMember", i8, [7 x i8], %"class.blink::Member.75", %"class.blink::HeapHashSet", %"class.blink::HeapHashSet", %"class.blink::Member.282", %"class.WTF::String", i8, [7 x i8] }>
%"class.blink::Member.46" = type { %"class.blink::MemberBase.47" }
%"class.blink::MemberBase.47" = type { %"class.blink::StyleRuleImport"* }
%"class.blink::StyleRuleImport" = type opaque
%"class.blink::HeapVector.48" = type { %"class.WTF::Vector.51" }
%"class.WTF::Vector.51" = type { %"class.WTF::VectorBuffer.52" }
%"class.WTF::VectorBuffer.52" = type { %"class.WTF::VectorBufferBase.53" }
%"class.WTF::VectorBufferBase.53" = type { %"class.blink::Member.46"*, i32, i32 }
%"class.blink::HeapVector.55" = type { %"class.WTF::Vector.58" }
%"class.WTF::Vector.58" = type { %"class.WTF::VectorBuffer.59" }
%"class.WTF::VectorBuffer.59" = type { %"class.WTF::VectorBufferBase.60" }
%"class.WTF::VectorBufferBase.60" = type { %"class.blink::Member.61"*, i32, i32 }
%"class.blink::Member.61" = type opaque
%"class.blink::HeapVector.63" = type { %"class.WTF::Vector.66" }
%"class.WTF::Vector.66" = type { %"class.WTF::VectorBuffer.67" }
%"class.WTF::VectorBuffer.67" = type { %"class.WTF::VectorBufferBase.68" }
%"class.WTF::VectorBufferBase.68" = type { %"class.blink::Member.69"*, i32, i32 }
%"class.blink::Member.69" = type opaque
%"class.WTF::HashMap" = type { %"class.WTF::HashTable.71" }
%"class.WTF::HashTable.71" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.74" }
%"class.blink::MemberBase.74" = type { %"class.blink::CSSStyleSheetResource"* }
%"class.blink::CSSStyleSheetResource" = type opaque
%"class.blink::Member.75" = type { %"class.blink::MemberBase.76" }
%"class.blink::MemberBase.76" = type { %"class.blink::CSSParserContext"* }
%"class.blink::CSSParserContext" = type <{ %"class.blink::KURL", %class.scoped_refptr.80, i8, i8, i8, [5 x i8], %"struct.blink::Referrer", i8, i8, i8, i8, i32, %"class.WTF::TextEncoding", %"class.blink::WeakMember.274", i32, [4 x i8] }>
%class.scoped_refptr.80 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.81", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted.81" = type { %"class.base::RefCounted.82" }
%"class.base::RefCounted.82" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.87" }
%"class.WTF::HashMap.87" = type { %"class.WTF::HashTable.88" }
%"class.WTF::HashTable.88" = type <{ %"struct.WTF::KeyValuePair.90"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.90" = type { %"class.blink::WeakMember.91", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember.91" = type { %"class.blink::MemberBase.92" }
%"class.blink::MemberBase.92" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"struct.blink::Referrer" = type <{ %"class.WTF::AtomicString", i32, [4 x i8] }>
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::WeakMember.274" = type { %"class.blink::MemberBase.275" }
%"class.blink::MemberBase.275" = type { %"class.blink::Document"* }
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet.278" }
%"class.WTF::HashSet.278" = type { %"class.WTF::HashTable.279" }
%"class.WTF::HashTable.279" = type <{ %"class.blink::WeakMember.281"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.281" = type { %"class.blink::MemberBase.41" }
%"class.blink::Member.282" = type { %"class.blink::MemberBase.283" }
%"class.blink::MemberBase.283" = type { %"class.blink::RuleSet"* }
%"class.blink::RuleSet" = type { %"class.blink::HeapHashMap.286", %"class.blink::HeapHashMap.286", %"class.blink::HeapHashMap.286", %"class.blink::HeapHashMap.286", %"class.blink::HeapVector.293", %"class.blink::HeapVector.293", %"class.blink::HeapVector.293", %"class.blink::HeapVector.293", %"class.blink::HeapVector.293", %"class.blink::HeapVector.293", %"class.blink::HeapVector.293", %"class.blink::HeapVector.293", %"class.blink::HeapVector.293", %"class.blink::RuleFeatureSet", %"class.blink::HeapVector.354", %"class.blink::HeapVector.362", %"class.blink::HeapVector.370", %"class.blink::HeapVector.387", %"class.blink::HeapVector.395", %"class.blink::HeapVector.403", %"class.blink::HeapVector.416", %"class.WTF::Vector.423", i32, %"class.blink::Member.447" }
%"class.blink::HeapHashMap.286" = type { %"class.WTF::HashMap.289" }
%"class.WTF::HashMap.289" = type { %"class.WTF::HashTable.290" }
%"class.WTF::HashTable.290" = type <{ %"struct.WTF::KeyValuePair.292"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.292" = type { %"class.WTF::AtomicString", %"class.blink::Member.1119" }
%"class.blink::Member.1119" = type { %"class.blink::MemberBase.1120" }
%"class.blink::MemberBase.1120" = type { %"class.blink::HeapVector.293"* }
%"class.blink::HeapVector.293" = type { %"class.WTF::Vector.296" }
%"class.WTF::Vector.296" = type { %"class.WTF::VectorBuffer.297" }
%"class.WTF::VectorBuffer.297" = type { %"class.WTF::VectorBufferBase.298" }
%"class.WTF::VectorBufferBase.298" = type { %"class.blink::Member.299"*, i32, i32 }
%"class.blink::Member.299" = type { %"class.blink::MemberBase.300" }
%"class.blink::MemberBase.300" = type { %"class.blink::RuleData"* }
%"class.blink::RuleData" = type { %"class.blink::Member.303", i64, [4 x i32] }
%"class.blink::Member.303" = type { %"class.blink::MemberBase.304" }
%"class.blink::MemberBase.304" = type { %"class.blink::StyleRule"* }
%"class.blink::StyleRule" = type { %"class.blink::StyleRuleBase", i32, %"class.blink::CSSSelectorList", %"class.blink::Member.20", %"class.blink::Member.326" }
%"class.blink::StyleRuleBase" = type { i8 }
%"class.blink::CSSSelectorList" = type { %"class.blink::CSSSelector"* }
%"class.blink::CSSSelector" = type { i24, %"union.blink::CSSSelector::DataUnion" }
%"union.blink::CSSSelector::DataUnion" = type { %"class.WTF::AtomicString" }
%"class.blink::Member.20" = type { %"class.blink::MemberBase.21" }
%"class.blink::MemberBase.21" = type { %"class.blink::CSSPropertyValueSet"* }
%"class.blink::CSSPropertyValueSet" = type { i32 }
%"class.blink::Member.326" = type { %"class.blink::MemberBase.327" }
%"class.blink::MemberBase.327" = type { %"class.blink::CSSLazyPropertyParser"* }
%"class.blink::CSSLazyPropertyParser" = type { i32 (...)** }
%"class.blink::RuleFeatureSet" = type <{ %"struct.blink::RuleFeatureSet::FeatureMetadata", [4 x i8], %"class.WTF::HashMap.331", %"class.WTF::HashMap.331", %"class.WTF::HashMap.331", %"class.WTF::HashMap.336", %class.scoped_refptr.341, %class.scoped_refptr.348, %class.scoped_refptr.347, %"class.WTF::Vector.349", %"class.WTF::Vector.349", i8, [7 x i8] }>
%"struct.blink::RuleFeatureSet::FeatureMetadata" = type <{ i8, i8, i8, i8, i32, i8, [3 x i8] }>
%"class.WTF::HashMap.331" = type { %"class.WTF::HashTable.332" }
%"class.WTF::HashTable.332" = type <{ %"struct.WTF::KeyValuePair.335"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.335" = type { %"class.WTF::AtomicString", %class.scoped_refptr.1105 }
%class.scoped_refptr.1105 = type { %"class.blink::InvalidationSet"* }
%"class.blink::InvalidationSet" = type <{ %"class.WTF::RefCounted.342", [4 x i8], %"union.blink::InvalidationSet::Backing", %"union.blink::InvalidationSet::Backing.344", %"union.blink::InvalidationSet::Backing.345", %"union.blink::InvalidationSet::Backing.346", %"class.blink::InvalidationFlags", %"class.blink::InvalidationSet::BackingFlags", i8, [5 x i8] }>
%"class.WTF::RefCounted.342" = type { %"class.base::RefCounted.343" }
%"class.base::RefCounted.343" = type { %"class.base::subtle::RefCountedBase" }
%"union.blink::InvalidationSet::Backing" = type { %"class.WTF::StringImpl"* }
%"union.blink::InvalidationSet::Backing.344" = type { %"class.WTF::StringImpl"* }
%"union.blink::InvalidationSet::Backing.345" = type { %"class.WTF::StringImpl"* }
%"union.blink::InvalidationSet::Backing.346" = type { %"class.WTF::StringImpl"* }
%"class.blink::InvalidationFlags" = type { i8 }
%"class.blink::InvalidationSet::BackingFlags" = type { i8 }
%"class.WTF::HashMap.336" = type { %"class.WTF::HashTable.337" }
%"class.WTF::HashTable.337" = type <{ %"struct.WTF::KeyValuePair.340"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.340" = type opaque
%class.scoped_refptr.341 = type { %"class.blink::SiblingInvalidationSet"* }
%"class.blink::SiblingInvalidationSet" = type { %"class.blink::InvalidationSet.base", i32, %class.scoped_refptr.347, %class.scoped_refptr.347 }
%"class.blink::InvalidationSet.base" = type <{ %"class.WTF::RefCounted.342", [4 x i8], %"union.blink::InvalidationSet::Backing", %"union.blink::InvalidationSet::Backing.344", %"union.blink::InvalidationSet::Backing.345", %"union.blink::InvalidationSet::Backing.346", %"class.blink::InvalidationFlags", %"class.blink::InvalidationSet::BackingFlags", i8 }>
%class.scoped_refptr.348 = type { %"class.blink::NthSiblingInvalidationSet"* }
%"class.blink::NthSiblingInvalidationSet" = type { %"class.blink::SiblingInvalidationSet" }
%class.scoped_refptr.347 = type { %"class.blink::DescendantInvalidationSet"* }
%"class.blink::DescendantInvalidationSet" = type { %"class.blink::InvalidationSet.base", [5 x i8] }
%"class.blink::HeapVector.354" = type { %"class.WTF::Vector.357" }
%"class.WTF::Vector.357" = type { %"class.WTF::VectorBuffer.358" }
%"class.WTF::VectorBuffer.358" = type { %"class.WTF::VectorBufferBase.359" }
%"class.WTF::VectorBufferBase.359" = type { %"class.blink::Member.360"*, i32, i32 }
%"class.blink::Member.360" = type { %"class.blink::MemberBase.1115" }
%"class.blink::MemberBase.1115" = type { %"class.blink::StyleRulePage"* }
%"class.blink::StyleRulePage" = type { %"class.blink::StyleRuleBase", %"class.blink::Member.20", %"class.blink::CSSSelectorList" }
%"class.blink::HeapVector.362" = type { %"class.WTF::Vector.365" }
%"class.WTF::Vector.365" = type { %"class.WTF::VectorBuffer.366" }
%"class.WTF::VectorBuffer.366" = type { %"class.WTF::VectorBufferBase.367" }
%"class.WTF::VectorBufferBase.367" = type { %"class.blink::Member.368"*, i32, i32 }
%"class.blink::Member.368" = type { %"class.blink::MemberBase.1116" }
%"class.blink::MemberBase.1116" = type { %"class.blink::StyleRuleFontFace"* }
%"class.blink::StyleRuleFontFace" = type { %"class.blink::StyleRuleBase", %"class.blink::Member.20" }
%"class.blink::HeapVector.370" = type { %"class.WTF::Vector.373" }
%"class.WTF::Vector.373" = type { %"class.WTF::VectorBuffer.374" }
%"class.WTF::VectorBuffer.374" = type { %"class.WTF::VectorBufferBase.375" }
%"class.WTF::VectorBufferBase.375" = type { %"class.blink::Member.376"*, i32, i32 }
%"class.blink::Member.376" = type { %"class.blink::MemberBase.377" }
%"class.blink::MemberBase.377" = type { %"class.blink::StyleRuleKeyframes"* }
%"class.blink::StyleRuleKeyframes" = type <{ %"class.blink::StyleRuleBase", [7 x i8], %"class.blink::HeapVector.378", %"class.WTF::AtomicString", i32, [4 x i8] }>
%"class.blink::HeapVector.378" = type { %"class.WTF::Vector.381" }
%"class.WTF::Vector.381" = type { %"class.WTF::VectorBuffer.382" }
%"class.WTF::VectorBuffer.382" = type { %"class.WTF::VectorBufferBase.383" }
%"class.WTF::VectorBufferBase.383" = type { %"class.blink::Member.384"*, i32, i32 }
%"class.blink::Member.384" = type opaque
%"class.blink::HeapVector.387" = type { %"class.WTF::Vector.390" }
%"class.WTF::Vector.390" = type { %"class.WTF::VectorBuffer.391" }
%"class.WTF::VectorBuffer.391" = type { %"class.WTF::VectorBufferBase.392" }
%"class.WTF::VectorBufferBase.392" = type { %"class.blink::Member.393"*, i32, i32 }
%"class.blink::Member.393" = type { %"class.blink::MemberBase.1117" }
%"class.blink::MemberBase.1117" = type { %"class.blink::StyleRuleProperty"* }
%"class.blink::StyleRuleProperty" = type { %"class.blink::StyleRuleBase", %"class.WTF::String", %"class.blink::Member.20" }
%"class.blink::HeapVector.395" = type { %"class.WTF::Vector.398" }
%"class.WTF::Vector.398" = type { %"class.WTF::VectorBuffer.399" }
%"class.WTF::VectorBuffer.399" = type { %"class.WTF::VectorBufferBase.400" }
%"class.WTF::VectorBufferBase.400" = type { %"class.blink::Member.401"*, i32, i32 }
%"class.blink::Member.401" = type { %"class.blink::MemberBase.1118" }
%"class.blink::MemberBase.1118" = type { %"class.blink::StyleRuleCounterStyle"* }
%"class.blink::StyleRuleCounterStyle" = type <{ %"class.blink::StyleRuleBase", [7 x i8], %"class.WTF::AtomicString", %"class.blink::Member.411", %"class.blink::Member.411", %"class.blink::Member.411", %"class.blink::Member.411", %"class.blink::Member.411", %"class.blink::Member.411", %"class.blink::Member.411", %"class.blink::Member.411", %"class.blink::Member.411", %"class.blink::Member.411", i32, [4 x i8] }>
%"class.blink::Member.411" = type { %"class.blink::MemberBase.412" }
%"class.blink::MemberBase.412" = type { %"class.blink::CSSValue"* }
%"class.blink::CSSValue" = type { i8, i8, i8 }
%"class.blink::HeapVector.403" = type { %"class.WTF::Vector.406" }
%"class.WTF::Vector.406" = type { %"class.WTF::VectorBuffer.407" }
%"class.WTF::VectorBuffer.407" = type { %"class.WTF::VectorBufferBase.408" }
%"class.WTF::VectorBufferBase.408" = type { %"class.blink::Member.409"*, i32, i32 }
%"class.blink::Member.409" = type { %"class.blink::MemberBase.410" }
%"class.blink::MemberBase.410" = type { %"class.blink::StyleRuleScrollTimeline"* }
%"class.blink::StyleRuleScrollTimeline" = type { %"class.blink::StyleRuleBase", %"class.WTF::AtomicString", %"class.blink::Member.411", %"class.blink::Member.411", %"class.blink::Member.411", %"class.blink::Member.411", %"class.blink::Member.411" }
%"class.blink::HeapVector.416" = type { %"class.WTF::Vector.419" }
%"class.WTF::Vector.419" = type { %"class.WTF::VectorBuffer.420" }
%"class.WTF::VectorBuffer.420" = type { %"class.WTF::VectorBufferBase.421" }
%"class.WTF::VectorBufferBase.421" = type { %"class.blink::MinimalRuleData"*, i32, i32 }
%"class.blink::MinimalRuleData" = type { %"class.blink::Member.303", i32, i32 }
%"class.WTF::Vector.423" = type { %"class.WTF::VectorBuffer.424" }
%"class.WTF::VectorBuffer.424" = type { %"class.WTF::VectorBufferBase.425" }
%"class.WTF::VectorBufferBase.425" = type { %"class.blink::MediaQuerySetResult"*, i32, i32 }
%"class.blink::MediaQuerySetResult" = type <{ %class.scoped_refptr.426, i8, [7 x i8] }>
%class.scoped_refptr.426 = type { %"class.blink::MediaQuerySet"* }
%"class.blink::MediaQuerySet" = type { %"class.WTF::RefCounted.427", %"class.WTF::Vector.429" }
%"class.WTF::RefCounted.427" = type { %"class.base::RefCounted.428" }
%"class.base::RefCounted.428" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.429" = type { %"class.WTF::VectorBuffer.430" }
%"class.WTF::VectorBuffer.430" = type { %"class.WTF::VectorBufferBase.431" }
%"class.WTF::VectorBufferBase.431" = type { %"class.std::__1::unique_ptr.432"*, i32, i32 }
%"class.std::__1::unique_ptr.432" = type { %"class.std::__1::__compressed_pair.433" }
%"class.std::__1::__compressed_pair.433" = type { %"struct.std::__1::__compressed_pair_elem.434" }
%"struct.std::__1::__compressed_pair_elem.434" = type { %"class.blink::MediaQuery"* }
%"class.blink::MediaQuery" = type { i32, %"class.WTF::String", %"class.WTF::Vector.435", %"class.WTF::String" }
%"class.WTF::Vector.435" = type { %"class.WTF::VectorBuffer.436" }
%"class.WTF::VectorBuffer.436" = type { %"class.WTF::VectorBufferBase.437" }
%"class.WTF::VectorBufferBase.437" = type { %"class.blink::MediaQueryExp"*, i32, i32 }
%"class.blink::MediaQueryExp" = type { %"class.WTF::String", %"struct.blink::MediaQueryExpValue" }
%"struct.blink::MediaQueryExpValue" = type <{ i32, [4 x i8], double, i32, i32, i32, i8, i8, i8, i8 }>
%"class.blink::Member.447" = type { %"class.blink::MemberBase.448" }
%"class.blink::MemberBase.448" = type { %"class.blink::RuleSet::PendingRuleMaps"* }
%"class.blink::RuleSet::PendingRuleMaps" = type { %"class.blink::HeapHashMap.451", %"class.blink::HeapHashMap.451", %"class.blink::HeapHashMap.451", %"class.blink::HeapHashMap.451" }
%"class.blink::HeapHashMap.451" = type { %"class.WTF::HashMap.454" }
%"class.WTF::HashMap.454" = type { %"class.WTF::HashTable.455" }
%"class.WTF::HashTable.455" = type <{ %"struct.WTF::KeyValuePair.457"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.457" = type opaque
%class.scoped_refptr.458 = type { %"class.blink::MediaQuerySet"* }
%"class.WTF::Vector.349" = type { %"class.WTF::VectorBuffer.350" }
%"class.WTF::VectorBuffer.350" = type { %"class.WTF::VectorBufferBase.351" }
%"class.WTF::VectorBufferBase.351" = type { %"class.blink::MediaQueryResult"*, i32, i32 }
%"class.blink::MediaQueryResult" = type <{ %"class.blink::MediaQueryExp", i8, [7 x i8] }>
%"class.blink::Member.459" = type { %"class.blink::MemberBase.460" }
%"class.blink::MemberBase.460" = type { %"class.blink::CSSRule"* }
%"class.blink::CSSRule" = type { %"class.blink::ScriptWrappable", i8, %"class.blink::Member.461" }
%"class.blink::Member.461" = type { %"class.blink::MemberBase.462" }
%"class.blink::MemberBase.462" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::HeapHashSet.463" = type { %"class.WTF::HashSet.466" }
%"class.WTF::HashSet.466" = type { %"class.WTF::HashTable.467" }
%"class.WTF::HashTable.467" = type <{ %"class.blink::WeakMember.469"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.469" = type { %"class.blink::MemberBase.8" }
%"class.WTF::TextPosition" = type { %"class.WTF::OrdinalNumber", %"class.WTF::OrdinalNumber" }
%"class.WTF::OrdinalNumber" = type { i32 }
%"class.blink::Member.472" = type { %"class.blink::MemberBase.473" }
%"class.blink::MemberBase.473" = type { %"class.blink::MediaList"* }
%"class.blink::MediaList" = type { %"class.blink::ScriptWrappable", %class.scoped_refptr.458, %"class.blink::Member.40", %"class.blink::Member.459" }
%"class.blink::HeapVector.474" = type { %"class.WTF::Vector.477" }
%"class.WTF::Vector.477" = type { %"class.WTF::VectorBuffer.478" }
%"class.WTF::VectorBuffer.478" = type { %"class.WTF::VectorBufferBase.479" }
%"class.WTF::VectorBufferBase.479" = type { %"class.blink::Member.459"*, i32, i32 }
%"class.blink::Member.481" = type { %"class.blink::MemberBase.482" }
%"class.blink::MemberBase.482" = type { %"class.blink::CSSRuleList"* }
%"class.blink::CSSRuleList" = type { %"class.blink::ScriptWrappable" }
%"class.blink::TaskHandle" = type { %class.scoped_refptr.558 }
%class.scoped_refptr.558 = type { %"class.blink::TaskHandle::Runner"* }
%"class.blink::TaskHandle::Runner" = type opaque
%"class.WTF::Vector.559" = type { %"class.WTF::VectorBuffer.560" }
%"class.WTF::VectorBuffer.560" = type { %"class.WTF::VectorBufferBase.561" }
%"class.WTF::VectorBufferBase.561" = type { %"struct.blink::Document::PendingJavascriptUrl"*, i32, i32 }
%"struct.blink::Document::PendingJavascriptUrl" = type { %"class.blink::KURL", %class.scoped_refptr.80 }
%"class.blink::Member.574" = type { %"class.blink::MemberBase.575" }
%"class.blink::MemberBase.575" = type { %"class.blink::Range"* }
%"class.blink::Range" = type opaque
%"class.blink::UserActionElementSet" = type { %"class.blink::HeapHashMap.576" }
%"class.blink::HeapHashMap.576" = type { %"class.WTF::HashMap.579" }
%"class.WTF::HashMap.579" = type { %"class.WTF::HashTable.580" }
%"class.WTF::HashTable.580" = type <{ %"struct.WTF::KeyValuePair.582"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.582" = type opaque
%"class.blink::Member.583" = type { %"class.blink::MemberBase.584" }
%"class.blink::MemberBase.584" = type { %"class.blink::RootScrollerController"* }
%"class.blink::RootScrollerController" = type opaque
%"class.blink::HeapHashSet.585" = type { %"class.WTF::HashSet.588" }
%"class.WTF::HashSet.588" = type { %"class.WTF::HashTable.589" }
%"class.WTF::HashTable.589" = type <{ %"class.blink::WeakMember.591"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.591" = type opaque
%"class.blink::HeapHashSet.592" = type { %"class.WTF::HashSet.595" }
%"class.WTF::HashSet.595" = type { %"class.WTF::HashTable.596" }
%"class.WTF::HashTable.596" = type <{ %"class.blink::WeakMember.598"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.598" = type opaque
%"class.blink::Member.599" = type { %"class.blink::MemberBase.600" }
%"class.blink::MemberBase.600" = type { %"class.blink::ElementIntersectionObserverData"* }
%"class.blink::ElementIntersectionObserverData" = type opaque
%"class.blink::Member.601" = type { %"class.blink::MemberBase.602" }
%"class.blink::MemberBase.602" = type { %"class.blink::StyleEngine"* }
%"class.blink::StyleEngine" = type { %"class.blink::FontSelectorClient", %"class.blink::NameClient", %"class.blink::Member.470", i32, i32, i32, %"class.blink::Member.40", %"class.blink::Member.605", %"class.blink::Member.632", %"class.blink::HeapHashMap.634", i8, i8, i8, [5 x i8], %"class.blink::HeapHashSet.641", %"class.blink::HeapHashSet.641", %"class.WTF::String", i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, %"class.blink::Member.647", %"class.blink::Member.661", %"class.blink::Member.691", %"class.blink::Member.693", %"class.blink::Member.699", %"class.blink::PendingInvalidations", %"class.blink::StyleInvalidationRoot", %"class.blink::StyleRecalcRoot", %"class.blink::LayoutTreeRebuildRoot", %"class.blink::HeapHashSet.710", %"class.blink::Member.716", %"class.blink::HeapHashMap.718", %"class.blink::HeapHashMap.725", %"class.std::__1::unique_ptr.732", i32, %"class.blink::HeapVector.738", %"class.blink::HeapVector.738", %"class.blink::HeapVector.617", %"class.blink::HeapHashSet", %"class.blink::HeapHashMap.746", %"class.blink::Member.753", %"class.blink::HeapHashMap.755", %class.scoped_refptr.762, %class.scoped_refptr.763, %"class.blink::Member.411", i32, i32, %"class.blink::Color", i32, %"class.blink::Color", [4 x i8], %"class.blink::HeapHashSet.764", %"class.blink::Member" }
%"class.blink::FontSelectorClient" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Member.605" = type { %"class.blink::MemberBase.606" }
%"class.blink::MemberBase.606" = type { %"class.blink::DocumentStyleSheetCollection"* }
%"class.blink::DocumentStyleSheetCollection" = type { %"class.blink::TreeScopeStyleSheetCollection" }
%"class.blink::TreeScopeStyleSheetCollection" = type { %"class.blink::StyleSheetCollection.base", %"class.blink::Member.7", %"class.blink::TreeOrderedList" }
%"class.blink::StyleSheetCollection.base" = type <{ %"class.blink::NameClient", %"class.blink::HeapVector.609", %"class.blink::HeapVector.617", i8 }>
%"class.blink::HeapVector.609" = type { %"class.WTF::Vector.612" }
%"class.WTF::Vector.612" = type { %"class.WTF::VectorBuffer.613" }
%"class.WTF::VectorBuffer.613" = type { %"class.WTF::VectorBufferBase.614" }
%"class.WTF::VectorBufferBase.614" = type { %"class.blink::Member.615"*, i32, i32 }
%"class.blink::Member.615" = type opaque
%"class.blink::TreeOrderedList" = type { %"class.blink::HeapListHashSet" }
%"class.blink::HeapListHashSet" = type { %"class.WTF::ListHashSet.base", [7 x i8] }
%"class.WTF::ListHashSet.base" = type <{ %"class.WTF::HashTable.628", %"class.blink::Member.630", %"class.blink::Member.630", %"struct.blink::HeapListHashSetAllocator::AllocatorProvider" }>
%"class.WTF::HashTable.628" = type <{ %"class.blink::Member.630"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.630" = type { %"class.blink::MemberBase.631" }
%"class.blink::MemberBase.631" = type { %"class.blink::HeapListHashSetNode"* }
%"class.blink::HeapListHashSetNode" = type { %"class.blink::Member.5", %"class.blink::Member.630", %"class.blink::Member.630" }
%"struct.blink::HeapListHashSetAllocator::AllocatorProvider" = type { i8 }
%"class.blink::Member.632" = type { %"class.blink::MemberBase.633" }
%"class.blink::MemberBase.633" = type { %"class.blink::StyleRuleUsageTracker"* }
%"class.blink::StyleRuleUsageTracker" = type opaque
%"class.blink::HeapHashMap.634" = type { %"class.WTF::HashMap.637" }
%"class.WTF::HashMap.637" = type { %"class.WTF::HashTable.638" }
%"class.WTF::HashTable.638" = type <{ %"struct.WTF::KeyValuePair.640"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.640" = type opaque
%"class.blink::HeapHashSet.641" = type { %"class.WTF::HashSet.644" }
%"class.WTF::HashSet.644" = type { %"class.WTF::HashTable.645" }
%"class.WTF::HashTable.645" = type <{ %"class.blink::Member.7"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.647" = type { %"class.blink::MemberBase.648" }
%"class.blink::MemberBase.648" = type { %"class.blink::ReferenceFilterOperation"* }
%"class.blink::ReferenceFilterOperation" = type { %"class.blink::FilterOperation.base", %"class.WTF::AtomicString", %"class.blink::Member.651", %"class.blink::Member.653" }
%"class.blink::FilterOperation.base" = type <{ i32 (...)**, i32 }>
%"class.blink::Member.651" = type { %"class.blink::MemberBase.652" }
%"class.blink::MemberBase.652" = type { %"class.blink::SVGResource"* }
%"class.blink::SVGResource" = type opaque
%"class.blink::Member.653" = type { %"class.blink::MemberBase.654" }
%"class.blink::MemberBase.654" = type { %"class.blink::Filter"* }
%"class.blink::Filter" = type { %"class.blink::FloatRect", %"class.blink::FloatRect", float, i32, %"class.blink::Member.657", %"class.blink::Member.659" }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::Member.657" = type { %"class.blink::MemberBase.658" }
%"class.blink::MemberBase.658" = type { %"class.blink::SourceGraphic"* }
%"class.blink::SourceGraphic" = type opaque
%"class.blink::Member.659" = type { %"class.blink::MemberBase.660" }
%"class.blink::MemberBase.660" = type { %"class.blink::FilterEffect"* }
%"class.blink::FilterEffect" = type { i32 (...)**, %"class.blink::HeapVector.961", %"class.blink::Member.653", %"class.blink::FloatRect", i8, i8, i32, [4 x %class.sk_sp] }
%"class.blink::HeapVector.961" = type { %"class.WTF::Vector.964" }
%"class.WTF::Vector.964" = type { %"class.WTF::VectorBuffer.965" }
%"class.WTF::VectorBuffer.965" = type { %"class.WTF::VectorBufferBase.966" }
%"class.WTF::VectorBufferBase.966" = type { %"class.blink::Member.659"*, i32, i32 }
%class.sk_sp = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.968, i32, %"class.absl::optional", i8, i32 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic.529" }>
%class.sk_sp.968 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.969 }
%union.anon.969 = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%"class.blink::Member.661" = type { %"class.blink::MemberBase.662" }
%"class.blink::MemberBase.662" = type { %"class.blink::StyleResolver"* }
%"class.blink::StyleResolver" = type <{ %"class.blink::MatchedPropertiesCache", %"class.blink::Member.470", %class.scoped_refptr.672, %"class.blink::SelectorFilter", %"class.blink::Member.632", i8, i8, [6 x i8] }>
%"class.blink::MatchedPropertiesCache" = type { %"class.blink::HeapHashMap.665" }
%"class.blink::HeapHashMap.665" = type { %"class.WTF::HashMap.668" }
%"class.WTF::HashMap.668" = type { %"class.WTF::HashTable.669" }
%"class.WTF::HashTable.669" = type <{ %"struct.WTF::KeyValuePair.671"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.671" = type opaque
%class.scoped_refptr.672 = type { %"class.blink::ComputedStyle"* }
%"class.blink::ComputedStyle" = type opaque
%"class.blink::SelectorFilter" = type { %"class.blink::HeapVector.673", %"class.std::__1::unique_ptr.685" }
%"class.blink::HeapVector.673" = type { %"class.WTF::Vector.676" }
%"class.WTF::Vector.676" = type { %"class.WTF::VectorBuffer.677" }
%"class.WTF::VectorBuffer.677" = type { %"class.WTF::VectorBufferBase.678" }
%"class.WTF::VectorBufferBase.678" = type { %"class.blink::SelectorFilter::ParentStackFrame"*, i32, i32 }
%"class.blink::SelectorFilter::ParentStackFrame" = type { %"class.blink::Member", %"class.WTF::Vector.679" }
%"class.WTF::Vector.679" = type { %"class.WTF::VectorBuffer.680" }
%"class.WTF::VectorBuffer.680" = type { %"class.WTF::VectorBufferBase.681", [16 x i8] }
%"class.WTF::VectorBufferBase.681" = type { i32*, i32, i32 }
%"class.std::__1::unique_ptr.685" = type { %"class.std::__1::__compressed_pair.686" }
%"class.std::__1::__compressed_pair.686" = type { %"struct.std::__1::__compressed_pair_elem.687" }
%"struct.std::__1::__compressed_pair_elem.687" = type { %"class.WTF::BloomFilter"* }
%"class.WTF::BloomFilter" = type { [4096 x i8] }
%"class.blink::Member.691" = type { %"class.blink::MemberBase.692" }
%"class.blink::MemberBase.692" = type { %"class.blink::ViewportStyleResolver"* }
%"class.blink::ViewportStyleResolver" = type opaque
%"class.blink::Member.693" = type { %"class.blink::MemberBase.694" }
%"class.blink::MemberBase.694" = type { %"class.blink::MediaQueryEvaluator"* }
%"class.blink::MediaQueryEvaluator" = type <{ %"class.WTF::String", %"class.blink::Member.697", i8, [7 x i8] }>
%"class.blink::Member.697" = type { %"class.blink::MemberBase.698" }
%"class.blink::MemberBase.698" = type { %"class.blink::MediaValues"* }
%"class.blink::MediaValues" = type opaque
%"class.blink::Member.699" = type { %"class.blink::MemberBase.700" }
%"class.blink::MemberBase.700" = type { %"class.blink::CSSGlobalRuleSet"* }
%"class.blink::CSSGlobalRuleSet" = type <{ %"class.blink::RuleFeatureSet", %"class.blink::Member.282", i8, i8, [6 x i8] }>
%"class.blink::PendingInvalidations" = type { %"class.blink::HeapHashMap.703" }
%"class.blink::HeapHashMap.703" = type { %"class.WTF::HashMap.706" }
%"class.WTF::HashMap.706" = type { %"class.WTF::HashTable.707" }
%"class.WTF::HashTable.707" = type <{ %"struct.WTF::KeyValuePair.709"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.709" = type { %"class.blink::Member.484", %"class.blink::NodeInvalidationSets" }
%"class.blink::NodeInvalidationSets" = type { %"class.WTF::Vector.1106", %"class.WTF::Vector.1106" }
%"class.WTF::Vector.1106" = type { %"class.WTF::VectorBuffer.1107" }
%"class.WTF::VectorBuffer.1107" = type { %"class.WTF::VectorBufferBase.1108" }
%"class.WTF::VectorBufferBase.1108" = type { %class.scoped_refptr.1105*, i32, i32 }
%"class.blink::StyleInvalidationRoot" = type { %"class.blink::StyleTraversalRoot.base", [4 x i8] }
%"class.blink::StyleTraversalRoot.base" = type <{ i32 (...)**, %"class.blink::Member.5", i32 }>
%"class.blink::StyleRecalcRoot" = type { %"class.blink::StyleTraversalRoot.base", [4 x i8] }
%"class.blink::LayoutTreeRebuildRoot" = type { %"class.blink::StyleTraversalRoot.base", [4 x i8] }
%"class.blink::HeapHashSet.710" = type { %"class.WTF::HashSet.713" }
%"class.WTF::HashSet.713" = type { %"class.WTF::HashTable.714" }
%"class.WTF::HashTable.714" = type <{ %"class.blink::Member"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.716" = type { %"class.blink::MemberBase.717" }
%"class.blink::MemberBase.717" = type { %"class.blink::CSSFontSelector"* }
%"class.blink::CSSFontSelector" = type opaque
%"class.blink::HeapHashMap.718" = type { %"class.WTF::HashMap.721" }
%"class.WTF::HashMap.721" = type { %"class.WTF::HashTable.722" }
%"class.WTF::HashTable.722" = type <{ %"struct.WTF::KeyValuePair.724"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.724" = type opaque
%"class.blink::HeapHashMap.725" = type { %"class.WTF::HashMap.728" }
%"class.WTF::HashMap.728" = type { %"class.WTF::HashTable.729" }
%"class.WTF::HashTable.729" = type <{ %"struct.WTF::KeyValuePair.731"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.731" = type opaque
%"class.std::__1::unique_ptr.732" = type { %"class.std::__1::__compressed_pair.733" }
%"class.std::__1::__compressed_pair.733" = type { %"struct.std::__1::__compressed_pair_elem.734" }
%"struct.std::__1::__compressed_pair_elem.734" = type { %"class.blink::StyleResolverStats"* }
%"class.blink::StyleResolverStats" = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.blink::HeapVector.738" = type { %"class.WTF::Vector.741" }
%"class.WTF::Vector.741" = type { %"class.WTF::VectorBuffer.742" }
%"class.WTF::VectorBuffer.742" = type { %"class.WTF::VectorBufferBase.743" }
%"class.WTF::VectorBufferBase.743" = type { %"struct.std::__1::pair.744"*, i32, i32 }
%"struct.std::__1::pair.744" = type opaque
%"class.blink::HeapVector.617" = type { %"class.WTF::Vector.620" }
%"class.WTF::Vector.620" = type { %"class.WTF::VectorBuffer.621" }
%"class.WTF::VectorBuffer.621" = type { %"class.WTF::VectorBufferBase.622" }
%"class.WTF::VectorBufferBase.622" = type { %"struct.std::__1::pair.623"*, i32, i32 }
%"struct.std::__1::pair.623" = type opaque
%"class.blink::HeapHashMap.746" = type { %"class.WTF::HashMap.749" }
%"class.WTF::HashMap.749" = type { %"class.WTF::HashTable.750" }
%"class.WTF::HashTable.750" = type <{ %"struct.WTF::KeyValuePair.752"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.752" = type { %"class.WTF::AtomicString", %"class.blink::Member.376" }
%"class.blink::Member.753" = type { %"class.blink::MemberBase.754" }
%"class.blink::MemberBase.754" = type { %"class.blink::CounterStyleMap"* }
%"class.blink::CounterStyleMap" = type opaque
%"class.blink::HeapHashMap.755" = type { %"class.WTF::HashMap.758" }
%"class.WTF::HashMap.758" = type { %"class.WTF::HashTable.759" }
%"class.WTF::HashTable.759" = type <{ %"struct.WTF::KeyValuePair.761"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.761" = type opaque
%class.scoped_refptr.762 = type { %"class.blink::DocumentStyleEnvironmentVariables"* }
%"class.blink::DocumentStyleEnvironmentVariables" = type opaque
%class.scoped_refptr.763 = type { %"class.blink::StyleInitialData"* }
%"class.blink::StyleInitialData" = type opaque
%"class.blink::Color" = type { i32 }
%"class.blink::HeapHashSet.764" = type { %"class.WTF::HashSet.767" }
%"class.WTF::HashSet.767" = type { %"class.WTF::HashTable.768" }
%"class.WTF::HashTable.768" = type <{ %"class.blink::Member.770"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.770" = type opaque
%"class.blink::Member.771" = type { %"class.blink::MemberBase.772" }
%"class.blink::MemberBase.772" = type { %"class.blink::StyleSheetList"* }
%"class.blink::StyleSheetList" = type opaque
%"class.blink::Member.773" = type { %"class.blink::MemberBase.774" }
%"class.blink::MemberBase.774" = type { %"class.blink::FormController"* }
%"class.blink::FormController" = type opaque
%"class.blink::TextLinkColors" = type { %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", i8, i8, i8, i8 }
%"class.blink::Member.775" = type { %"class.blink::MemberBase.776" }
%"class.blink::MemberBase.776" = type { %"class.blink::VisitedLinkState"* }
%"class.blink::VisitedLinkState" = type opaque
%"class.blink::HeapHashMap.777" = type { %"class.WTF::HashMap.780" }
%"class.WTF::HashMap.780" = type { %"class.WTF::HashTable.781" }
%"class.WTF::HashTable.781" = type <{ %"struct.WTF::KeyValuePair.783"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.783" = type opaque
%"class.WTF::Vector.784" = type { %"class.WTF::VectorBuffer.785" }
%"class.WTF::VectorBuffer.785" = type { %"class.WTF::VectorBufferBase.786" }
%"class.WTF::VectorBufferBase.786" = type { %"class.blink::AXContext"**, i32, i32 }
%"class.blink::AXContext" = type opaque
%"class.blink::Member.789" = type { %"class.blink::MemberBase.790" }
%"class.blink::MemberBase.790" = type { %"class.blink::AXObjectCache"* }
%"class.blink::AXObjectCache" = type opaque
%"class.blink::Member.791" = type { %"class.blink::MemberBase.792" }
%"class.blink::MemberBase.792" = type { %"class.blink::DocumentMarkerController"* }
%"class.blink::DocumentMarkerController" = type opaque
%"class.base::ElapsedTimer" = type { %"class.base::TimeTicks" }
%"class.blink::Member.793" = type { %"class.blink::MemberBase.794" }
%"class.blink::MemberBase.794" = type { %"class.blink::ScriptRunner"* }
%"class.blink::ScriptRunner" = type opaque
%"class.blink::HeapVector.795" = type { %"class.WTF::Vector.798" }
%"class.WTF::Vector.798" = type { %"class.WTF::VectorBuffer.799" }
%"class.WTF::VectorBuffer.799" = type { %"class.WTF::VectorBufferBase.800" }
%"class.WTF::VectorBufferBase.800" = type { %"class.blink::Member.801"*, i32, i32 }
%"class.blink::Member.801" = type opaque
%"class.std::__1::unique_ptr.803" = type { %"class.std::__1::__compressed_pair.804" }
%"class.std::__1::__compressed_pair.804" = type { %"struct.std::__1::__compressed_pair_elem.805" }
%"struct.std::__1::__compressed_pair_elem.805" = type { %"class.blink::TransformSource"* }
%"class.blink::TransformSource" = type opaque
%"class.blink::DocumentEncodingData" = type <{ %"class.WTF::TextEncoding", i8, i8, [6 x i8] }>
%"class.blink::HeapHashSet.809" = type { %"class.WTF::HashSet.812" }
%"class.WTF::HashSet.812" = type { %"class.WTF::HashTable.813" }
%"class.WTF::HashTable.813" = type <{ %"class.blink::WeakMember.815"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.815" = type opaque
%"class.blink::LiveNodeListRegistry" = type <{ %"class.WTF::Vector.816", i32, [4 x i8] }>
%"class.WTF::Vector.816" = type { %"class.WTF::VectorBuffer.817" }
%"class.WTF::VectorBuffer.817" = type { %"class.WTF::VectorBufferBase.818" }
%"class.WTF::VectorBufferBase.818" = type { %"struct.std::__1::pair.819"*, i32, i32 }
%"struct.std::__1::pair.819" = type opaque
%"class.blink::Member.822" = type { %"class.blink::MemberBase.823" }
%"class.blink::MemberBase.823" = type { %"class.blink::SVGDocumentExtensions"* }
%"class.blink::SVGDocumentExtensions" = type opaque
%"class.WTF::Vector.824" = type { %"class.WTF::VectorBuffer.825" }
%"class.WTF::VectorBuffer.825" = type { %"class.WTF::VectorBufferBase.826" }
%"class.WTF::VectorBufferBase.826" = type { %"struct.blink::AnnotatedRegionValue"*, i32, i32 }
%"struct.blink::AnnotatedRegionValue" = type opaque
%"class.std::__1::unique_ptr.829" = type { %"class.std::__1::__compressed_pair.830" }
%"class.std::__1::__compressed_pair.830" = type { %"struct.std::__1::__compressed_pair_elem.831" }
%"struct.std::__1::__compressed_pair_elem.831" = type { %"class.blink::SelectorQueryCache"* }
%"class.blink::SelectorQueryCache" = type opaque
%"class.blink::NthIndexCache" = type opaque
%"class.blink::LayoutView" = type opaque
%"class.blink::HeapVector.501" = type { %"class.WTF::Vector.504" }
%"class.WTF::Vector.504" = type { %"class.WTF::VectorBuffer.505" }
%"class.WTF::VectorBuffer.505" = type { %"class.WTF::VectorBufferBase" }
%"class.blink::HeapVector.835" = type { %"class.WTF::Vector.838" }
%"class.WTF::Vector.838" = type { %"class.WTF::VectorBuffer.839" }
%"class.WTF::VectorBuffer.839" = type { %"class.WTF::VectorBufferBase.840" }
%"class.WTF::VectorBufferBase.840" = type { %"class.blink::Member.841"*, i32, i32 }
%"class.blink::Member.841" = type opaque
%"class.blink::DocumentTiming" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.blink::Member.470" }
%"class.blink::Member.843" = type { %"class.blink::MemberBase.844" }
%"class.blink::MemberBase.844" = type { %"class.blink::MediaQueryMatcher"* }
%"class.blink::MediaQueryMatcher" = type opaque
%"class.blink::Member.845" = type { %"class.blink::MemberBase.846" }
%"class.blink::MemberBase.846" = type { %"class.blink::ScriptedAnimationController"* }
%"class.blink::ScriptedAnimationController" = type opaque
%"class.blink::Member.847" = type { %"class.blink::MemberBase.848" }
%"class.blink::MemberBase.848" = type { %"class.blink::ScriptedIdleTaskController"* }
%"class.blink::ScriptedIdleTaskController" = type opaque
%"class.blink::Member.849" = type { %"class.blink::MemberBase.850" }
%"class.blink::MemberBase.850" = type { %"class.blink::TextAutosizer"* }
%"class.blink::TextAutosizer" = type opaque
%"class.blink::Member.851" = type { %"class.blink::MemberBase.852" }
%"class.blink::MemberBase.852" = type { %"class.blink::ElementDataCache"* }
%"class.blink::ElementDataCache" = type opaque
%"class.WTF::HashMap.853" = type { %"class.WTF::HashTable.854" }
%"class.WTF::HashTable.854" = type <{ %"struct.WTF::KeyValuePair.857"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.857" = type opaque
%"class.blink::Member.858" = type { %"class.blink::MemberBase.859" }
%"class.blink::MemberBase.859" = type { %"class.blink::DocumentAnimations"* }
%"class.blink::DocumentAnimations" = type opaque
%"class.blink::Member.860" = type { %"class.blink::MemberBase.861" }
%"class.blink::MemberBase.861" = type { %"class.blink::DocumentTimeline"* }
%"class.blink::DocumentTimeline" = type opaque
%"class.blink::Member.862" = type { %"class.blink::MemberBase.863" }
%"class.blink::MemberBase.863" = type { %"class.blink::PendingAnimations"* }
%"class.blink::PendingAnimations" = type opaque
%"class.blink::Member.864" = type { %"class.blink::MemberBase.865" }
%"class.blink::MemberBase.865" = type { %"class.blink::WorkletAnimationController"* }
%"class.blink::WorkletAnimationController" = type opaque
%"class.blink::HeapTaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.573", { i64, i64 } }
%"class.blink::TimerBase" = type { i32 (...)**, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::Location", %class.scoped_refptr.564, %"class.base::WeakPtrFactory" }
%"class.base::TimeDelta" = type { i64 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%class.scoped_refptr.564 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.565" }>
%"class.base::RefCountedThreadSafe.565" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.566 }
%class.scoped_refptr.566 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.567", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.567" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.568" }
%"struct.std::__1::atomic.568" = type { %"struct.std::__1::__atomic_base.569" }
%"struct.std::__1::__atomic_base.569" = type { %"struct.std::__1::__atomic_base.570" }
%"struct.std::__1::__atomic_base.570" = type { %"struct.std::__1::__cxx_atomic_impl.571" }
%"struct.std::__1::__cxx_atomic_impl.571" = type { %"struct.std::__1::__cxx_atomic_base_impl.572" }
%"struct.std::__1::__cxx_atomic_base_impl.572" = type { i8 }
%"class.blink::WeakMember.573" = type { %"class.blink::MemberBase.471" }
%"class.blink::HeapHashSet.866" = type { %"class.WTF::HashSet.869" }
%"class.WTF::HashSet.869" = type { %"class.WTF::HashTable.870" }
%"class.WTF::HashTable.870" = type <{ %"class.blink::Member.872"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.872" = type opaque
%"class.blink::Member.873" = type { %"class.blink::MemberBase.874" }
%"class.blink::MemberBase.874" = type { %"class.blink::CanvasFontCache"* }
%"class.blink::CanvasFontCache" = type opaque
%"class.blink::Member.875" = type { %"class.blink::MemberBase.876" }
%"class.blink::MemberBase.876" = type { %"class.blink::IntersectionObserverController"* }
%"class.blink::IntersectionObserverController" = type opaque
%"class.blink::Member.877" = type { %"class.blink::MemberBase.878" }
%"class.blink::MemberBase.878" = type { %"class.blink::SnapCoordinator"* }
%"class.blink::SnapCoordinator" = type opaque
%"class.blink::Member.879" = type { %"class.blink::MemberBase.880" }
%"class.blink::MemberBase.880" = type { %"class.blink::PropertyRegistry"* }
%"class.blink::PropertyRegistry" = type opaque
%"class.blink::Member.881" = type { %"class.blink::MemberBase.882" }
%"class.blink::MemberBase.882" = type { %"class.blink::Document::NetworkStateObserver"* }
%"class.blink::Document::NetworkStateObserver" = type opaque
%"class.std::__1::unique_ptr.883" = type { %"class.std::__1::__compressed_pair.884" }
%"class.std::__1::__compressed_pair.884" = type { %"struct.std::__1::__compressed_pair_elem.885" }
%"struct.std::__1::__compressed_pair_elem.885" = type { %"class.ukm::UkmRecorder"* }
%"class.ukm::UkmRecorder" = type opaque
%"class.std::__1::unique_ptr.889" = type { %"class.std::__1::__compressed_pair.890" }
%"class.std::__1::__compressed_pair.890" = type { %"struct.std::__1::__compressed_pair_elem.891" }
%"struct.std::__1::__compressed_pair_elem.891" = type { %"class.blink::FontMatchingMetrics"* }
%"class.blink::FontMatchingMetrics" = type opaque
%"class.blink::Member.895" = type { %"class.blink::MemberBase.896" }
%"class.blink::MemberBase.896" = type { %"class.blink::DOMFeaturePolicy"* }
%"class.blink::DOMFeaturePolicy" = type opaque
%"class.blink::Member.897" = type { %"class.blink::MemberBase.898" }
%"class.blink::MemberBase.898" = type { %"class.blink::SlotAssignmentEngine"* }
%"class.blink::SlotAssignmentEngine" = type opaque
%"class.blink::Member.899" = type { %"class.blink::MemberBase.900" }
%"class.blink::MemberBase.900" = type { %"class.blink::ViewportData"* }
%"class.blink::ViewportData" = type opaque
%"class.blink::Member.901" = type { %"class.blink::MemberBase.902" }
%"class.blink::MemberBase.902" = type { %"class.blink::LazyLoadImageObserver"* }
%"class.blink::LazyLoadImageObserver" = type opaque
%"class.WTF::Vector.903" = type { %"class.WTF::VectorBuffer.904" }
%"class.WTF::VectorBuffer.904" = type { %"class.WTF::VectorBufferBase.905" }
%"class.WTF::VectorBufferBase.905" = type { i8*, i32, i32 }
%"class.blink::HeapHashMap.908" = type { %"class.WTF::HashMap.911" }
%"class.WTF::HashMap.911" = type { %"class.WTF::HashTable.912" }
%"class.WTF::HashTable.912" = type <{ %"struct.WTF::KeyValuePair.914"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.914" = type opaque
%"class.blink::Member.915" = type { %"class.blink::MemberBase.916" }
%"class.blink::MemberBase.916" = type { %"class.blink::BeforeUnloadEventListener"* }
%"class.blink::BeforeUnloadEventListener" = type opaque
%"class.std::__1::unique_ptr.917" = type { %"class.std::__1::__compressed_pair.918" }
%"class.std::__1::__compressed_pair.918" = type { %"struct.std::__1::__compressed_pair_elem.919" }
%"struct.std::__1::__compressed_pair_elem.919" = type { %"class.blink::DocumentResourceCoordinator"* }
%"class.blink::DocumentResourceCoordinator" = type opaque
%"class.blink::Member.923" = type { %"class.blink::MemberBase.924" }
%"class.blink::MemberBase.924" = type { %"class.blink::CookieJar"* }
%"class.blink::CookieJar" = type opaque
%"class.blink::Member.925" = type { %"class.blink::MemberBase.926" }
%"class.blink::MemberBase.926" = type { %"class.blink::FragmentDirective"* }
%"class.blink::FragmentDirective" = type { %"class.blink::ScriptWrappable" }
%"class.blink::HeapHashMap.927" = type { %"class.WTF::HashMap.930" }
%"class.WTF::HashMap.930" = type { %"class.WTF::HashTable.931" }
%"class.WTF::HashTable.931" = type <{ %"struct.WTF::KeyValuePair.933"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.933" = type opaque
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet.934" }
%"class.blink::HeapHashSet.934" = type { %"class.WTF::HashSet.937" }
%"class.WTF::HashSet.937" = type { %"class.WTF::HashTable.938" }
%"class.WTF::HashTable.938" = type <{ %"class.blink::WeakMember.940"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.940" = type opaque
%"class.blink::Member.941" = type { %"class.blink::MemberBase.942" }
%"class.blink::MemberBase.942" = type { %"class.blink::DisplayLockDocumentState"* }
%"class.blink::DisplayLockDocumentState" = type opaque
%"class.blink::Member.943" = type { %"class.blink::MemberBase.944" }
%"class.blink::MemberBase.944" = type { %"class.blink::FontPreloadManager"* }
%"class.blink::FontPreloadManager" = type <{ %"class.blink::Member.470", %"class.blink::HeapHashSet.950", i32, [4 x i8], %"class.blink::HeapTaskRunnerTimer.957", %"class.base::TimeDelta", i32, [4 x i8] }>
%"class.blink::HeapHashSet.950" = type { %"class.WTF::HashSet.953" }
%"class.WTF::HashSet.953" = type { %"class.WTF::HashTable.954" }
%"class.WTF::HashTable.954" = type <{ %"class.blink::Member.956"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.956" = type opaque
%"class.blink::HeapTaskRunnerTimer.957" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.958", { i64, i64 } }
%"class.blink::WeakMember.958" = type { %"class.blink::MemberBase.944" }
%"class.blink::WeakMember.945" = type { %"class.blink::MemberBase.6" }
%"class.blink::MemberBase.6" = type { %"class.blink::Node"* }
%"class.blink::Member.946" = type { %"class.blink::MemberBase.947" }
%"class.blink::MemberBase.947" = type { %"class.blink::DocumentData"* }
%"class.blink::DocumentData" = type opaque
%"class.blink::Member.486" = type { %"class.blink::MemberBase.487" }
%"class.blink::MemberBase.487" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap.490" }
%"class.blink::HeapHashMap.490" = type { %"class.WTF::HashMap.493" }
%"class.WTF::HashMap.493" = type { %"class.WTF::HashTable.494" }
%"class.WTF::HashTable.494" = type <{ %"struct.WTF::KeyValuePair.496"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.496" = type { %"class.WTF::AtomicString", %"class.blink::Member.497" }
%"class.blink::Member.497" = type { %"class.blink::MemberBase.498" }
%"class.blink::MemberBase.498" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member", i32, %"class.blink::HeapVector.501" }
%"class.blink::Member.507" = type { %"class.blink::MemberBase.508" }
%"class.blink::MemberBase.508" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.509" = type { %"class.blink::MemberBase.510" }
%"class.blink::MemberBase.510" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.511" = type { %"class.blink::MemberBase.512" }
%"class.blink::MemberBase.512" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.513" }
%"class.blink::Member.513" = type { %"class.blink::MemberBase.514" }
%"class.blink::MemberBase.514" = type { %"class.blink::HeapHashMap.515"* }
%"class.blink::HeapHashMap.515" = type opaque
%"class.blink::Member.516" = type { %"class.blink::MemberBase.517" }
%"class.blink::MemberBase.517" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::Member.9" = type { %"class.blink::MemberBase.10" }
%"class.blink::MemberBase.10" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.blink::Member.5" = type { %"class.blink::MemberBase.6" }
%"class.blink::Animatable" = type { i32 (...)** }
%"class.blink::Member.14" = type { %"class.blink::MemberBase.15" }
%"class.blink::MemberBase.15" = type { %"class.blink::ElementData"* }
%"class.blink::ElementData" = type { %"class.WTF::ConcurrentlyReadBitField.18", %"class.blink::Member.20", %"class.blink::SpaceSplitString", %"class.WTF::AtomicString" }
%"class.WTF::ConcurrentlyReadBitField.18" = type { %"class.WTF::SingleThreadedBitField.19" }
%"class.WTF::SingleThreadedBitField.19" = type { i32 }
%"class.blink::SpaceSplitString" = type { %class.scoped_refptr.24 }
%class.scoped_refptr.24 = type { %"class.blink::SpaceSplitString::Data"* }
%"class.blink::SpaceSplitString::Data" = type { %"class.WTF::RefCounted.25", %"class.WTF::AtomicString", %"class.WTF::Vector.27" }
%"class.WTF::RefCounted.25" = type { %"class.base::RefCounted.26" }
%"class.base::RefCounted.26" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.27" = type { %"class.WTF::VectorBuffer.28" }
%"class.WTF::VectorBuffer.28" = type { %"class.WTF::VectorBufferBase.29", [32 x i8] }
%"class.WTF::VectorBufferBase.29" = type { %"class.WTF::AtomicString"*, i32, i32 }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"class.WTF::AtomicString"*, i32, i32, i32, [4 x i8] }>
%"class.blink::HeapVector.34" = type { %"class.WTF::Vector.37" }
%"class.WTF::Vector.37" = type { %"class.WTF::VectorBuffer.38" }
%"class.WTF::VectorBuffer.38" = type { %"class.WTF::VectorBufferBase.39" }
%"class.WTF::VectorBufferBase.39" = type { %"class.blink::Member.40"*, i32, i32 }
%"class.blink::CustomElementDefinition::ConstructionStackScope" = type { %"class.blink::HeapVector"*, %"class.blink::Element"*, i64 }
%"class.WTF::Vector.1049" = type { %"class.WTF::VectorBuffer.1050" }
%"class.WTF::VectorBuffer.1050" = type { %"class.WTF::VectorBufferBase.1051" }
%"class.WTF::VectorBufferBase.1051" = type { %"class.WTF::String"*, i32, i32 }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference.1054" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference.1054" = type { %"class.v8::TracedReference.1055" }
%"class.v8::TracedReference.1055" = type { %"class.v8::BasicTracedReference.1056" }
%"class.v8::BasicTracedReference.1056" = type { %"class.v8::TracedReferenceBase" }
%"class.blink::UniqueElementData" = type { %"class.blink::ElementData", %"class.blink::Member.20", %"class.WTF::Vector.1136" }
%"class.WTF::Vector.1136" = type { %"class.WTF::VectorBuffer.1137" }
%"class.WTF::VectorBuffer.1137" = type { %"class.WTF::VectorBufferBase.1138", [64 x i8] }
%"class.WTF::VectorBufferBase.1138" = type { %"class.blink::Attribute"*, i32, i32 }
%"class.blink::Attribute" = type { %"class.blink::QualifiedName", %"class.WTF::AtomicString" }
%"class.blink::HTMLElement" = type { %"class.blink::Element" }
%"class.blink::CreateElementFlags" = type <{ i8, [7 x i8], %"class.blink::Document"*, i8, [7 x i8] }>
%"class.blink::CustomElementReaction" = type { i32 (...)**, %"class.blink::Member.1103" }
%"class.blink::Member.1103" = type { %"class.blink::MemberBase.1104" }
%"class.blink::MemberBase.1104" = type { %"class.blink::CustomElementDefinition"* }
%"class.blink::CustomElementReactionStack" = type { %"class.blink::NameClient", %"class.blink::HeapHashMap.1059", %"class.blink::HeapVector.1066", %"class.blink::Member.1072" }
%"class.blink::HeapHashMap.1059" = type { %"class.WTF::HashMap.1062" }
%"class.WTF::HashMap.1062" = type { %"class.WTF::HashTable.1063" }
%"class.WTF::HashTable.1063" = type <{ %"struct.WTF::KeyValuePair.1065"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1065" = type opaque
%"class.blink::HeapVector.1066" = type { %"class.WTF::Vector.1069" }
%"class.WTF::Vector.1069" = type { %"class.WTF::VectorBuffer.1070" }
%"class.WTF::VectorBuffer.1070" = type { %"class.WTF::VectorBufferBase.1071" }
%"class.WTF::VectorBufferBase.1071" = type { %"class.blink::Member.1072"*, i32, i32 }
%"class.blink::Member.1072" = type { %"class.blink::MemberBase.1073" }
%"class.blink::MemberBase.1073" = type { %"class.blink::HeapVector"* }
%"class.blink::ElementInternals" = type { %"class.blink::ScriptWrappable", %"class.blink::ListedElement.base", %"class.blink::Member.1081", %"class.blink::Member.1083", %"class.blink::Member.1083", i8, %"class.blink::Member.1085", %"class.blink::Member", %"class.blink::Member.1087", %"class.WTF::HashMap.1089", %"class.blink::HeapHashMap.1094" }
%"class.blink::ListedElement.base" = type <{ %"class.blink::GarbageCollectedMixin", i8, [7 x i8], %"class.blink::Member.1075", %"class.blink::Member.1077", %"class.blink::Member.1079", %"class.WTF::String", i8, [3 x i8], i32, i32 }>
%"class.blink::Member.1075" = type { %"class.blink::MemberBase.1076" }
%"class.blink::MemberBase.1076" = type { %"class.blink::FormAttributeTargetObserver"* }
%"class.blink::FormAttributeTargetObserver" = type opaque
%"class.blink::Member.1077" = type { %"class.blink::MemberBase.1078" }
%"class.blink::MemberBase.1078" = type { %"class.blink::HTMLFormElement"* }
%"class.blink::HTMLFormElement" = type opaque
%"class.blink::Member.1079" = type { %"class.blink::MemberBase.1080" }
%"class.blink::MemberBase.1080" = type { %"class.blink::ValidityState"* }
%"class.blink::ValidityState" = type opaque
%"class.blink::Member.1081" = type { %"class.blink::MemberBase.1082" }
%"class.blink::MemberBase.1082" = type { %"class.blink::HTMLElement"* }
%"class.blink::Member.1083" = type { %"class.blink::MemberBase.1084" }
%"class.blink::MemberBase.1084" = type { %"class.blink::V8UnionFileOrFormDataOrUSVString"* }
%"class.blink::V8UnionFileOrFormDataOrUSVString" = type opaque
%"class.blink::Member.1085" = type { %"class.blink::MemberBase.1086" }
%"class.blink::MemberBase.1086" = type { %"class.blink::ValidityStateFlags"* }
%"class.blink::ValidityStateFlags" = type opaque
%"class.blink::Member.1087" = type { %"class.blink::MemberBase.1088" }
%"class.blink::MemberBase.1088" = type { %"class.blink::CustomStateSet"* }
%"class.blink::CustomStateSet" = type opaque
%"class.WTF::HashMap.1089" = type { %"class.WTF::HashTable.1090" }
%"class.WTF::HashTable.1090" = type <{ %"struct.WTF::KeyValuePair.1093"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1093" = type opaque
%"class.blink::HeapHashMap.1094" = type { %"class.WTF::HashMap.1097" }
%"class.WTF::HashMap.1097" = type { %"class.WTF::HashTable.1098" }
%"class.WTF::HashTable.1098" = type <{ %"struct.WTF::KeyValuePair.1100"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1100" = type opaque
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.blink::StyleChangeReasonForTracing" = type { i8*, %"class.WTF::AtomicString" }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1121" }
%"class.std::__1::__compressed_pair.1121" = type { %"struct.std::__1::__compressed_pair_elem.1122" }
%"struct.std::__1::__compressed_pair_elem.1122" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.1123 }
%union.anon.1123 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.blink::HeapVectorBacking" = type { i8 }

$_ZNK5blink23CustomElementDefinition18NameInHeapSnapshotEv = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_ = comdat any

$_ZN3WTF12VectorBufferIN5blink6MemberINS1_7ElementEEELj1ENS1_13HeapAllocatorEE22ReallyDeallocateBufferEPS4_ = comdat any

$_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink10TraceTraitINS_7ElementEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_13CSSStyleSheetEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink10TraceTraitINS_13CSSStyleSheetEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_11HTMLElementEE4CallIJNS_13QualifiedNameERNS_8DocumentEEEEPS1_DpOT_ = comdat any

$_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_11HTMLElementEE4CallIJRKNS_13QualifiedNameERNS_8DocumentEEEEPS1_DpOT_ = comdat any

$_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj1ENS1_13HeapAllocatorEE14AppendSlowCaseIPS3_EEvOT_ = comdat any

$_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj1ENS1_13HeapAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj1ENS1_13HeapAllocatorEE15ReserveCapacityEj = comdat any

$_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj1ENS1_13HeapAllocatorEE16ReallocateBufferEj = comdat any

$_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_7ElementEEEEEmm = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE4CallEm = comdat any

$_ZN5blink17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS3_EEE14AllocateObjectIS7_EEPvm = comdat any

$_ZN5blink9NameTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE7GetNameEPKv = comdat any

$_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index = comdat any

$_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index = comdat any

@_ZTVN5blink23CustomElementDefinitionE = hidden unnamed_addr constant { [24 x i8*] } { [24 x i8*] [i8* null, i8* null, i8* bitcast (i8* (%"class.blink::CustomElementDefinition"*)* @_ZNK5blink23CustomElementDefinition18NameInHeapSnapshotEv to i8*), i8* bitcast (void (%"class.blink::CustomElementDefinition"*)* @_ZN5blink23CustomElementDefinitionD2Ev to i8*), i8* bitcast (void (%"class.blink::CustomElementDefinition"*)* @_ZN5blink23CustomElementDefinitionD0Ev to i8*), i8* bitcast (void (%"class.blink::CustomElementDefinition"*, %"class.blink::Visitor"*)* @_ZNK5blink23CustomElementDefinition5TraceEPNS_7VisitorE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZN5blink10html_names10kStyleAttrE = external local_unnamed_addr constant %"class.blink::QualifiedName"*, align 8
@.str = private unnamed_addr constant [7 x i8] c"shadow\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"internals\00", align 1
@.str.2 = private unnamed_addr constant [48 x i8] c"The result must implement HTMLElement interface\00", align 1
@_ZN3WTF11g_null_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink10html_names17xhtmlNamespaceURIE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink19style_change_reason24kActiveStylesheetsUpdateE = external constant [0 x i8], align 1
@.str.3 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@.str.4 = private unnamed_addr constant [39 x i8] c"!static_cast<int>( new_capacity >> 31)\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv = private unnamed_addr constant [65 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::AtomicString]\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.6 = private unnamed_addr constant [36 x i8] c"The result must not have attributes\00", align 1
@.str.7 = private unnamed_addr constant [34 x i8] c"The result must not have children\00", align 1
@.str.8 = private unnamed_addr constant [34 x i8] c"The result must not have a parent\00", align 1
@.str.9 = private unnamed_addr constant [40 x i8] c"The result must be in the same document\00", align 1
@.str.10 = private unnamed_addr constant [36 x i8] c"The result must have HTML namespace\00", align 1
@.str.11 = private unnamed_addr constant [40 x i8] c"The result must have the same localName\00", align 1
@_ZN5blink26RuntimeEnabledFeaturesBase40is_custom_element_default_style_enabled_E = external local_unnamed_addr global i8, align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.12 = private unnamed_addr constant [24 x i8] c"CustomElementDefinition\00", align 1
@_ZN5blink11ThreadState26main_thread_state_storage_E = external local_unnamed_addr global [0 x i8], align 1
@.str.14 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.15 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@_ZTVN5blink11HTMLElementE = external unnamed_addr constant { [172 x i8*], [3 x i8*] }, align 8
@_ZN5blink11ThreadState25incremental_marking_flag_E = external local_unnamed_addr global %"class.blink::AtomicEntryFlag", align 4
@.str.16 = private unnamed_addr constant [33 x i8] c"expanded_capacity > old_capacity\00", align 1
@.str.17 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.18 = private unnamed_addr constant [33 x i8] c"Allocator::IsAllocationAllowed()\00", align 1
@.str.19 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.20 = private unnamed_addr constant [74 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap_allocator_impl.h\00", align 1
@.str.21 = private unnamed_addr constant [18 x i8] c"num_elements > 0u\00", align 1
@.str.22 = private unnamed_addr constant [93 x i8] c"../../third_party/blink/renderer/platform/heap/impl/collection_support/heap_vector_backing.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv, void (i8*)* null, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.23 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1

@_ZN5blink23CustomElementDefinitionD1Ev = hidden unnamed_addr alias void (%"class.blink::CustomElementDefinition"*), void (%"class.blink::CustomElementDefinition"*)* @_ZN5blink23CustomElementDefinitionD2Ev
@_ZN5blink23CustomElementDefinition22ConstructionStackScopeC1ERS0_RNS_7ElementE = hidden unnamed_addr alias void (%"class.blink::CustomElementDefinition::ConstructionStackScope"*, %"class.blink::CustomElementDefinition"*, %"class.blink::Element"*), void (%"class.blink::CustomElementDefinition::ConstructionStackScope"*, %"class.blink::CustomElementDefinition"*, %"class.blink::Element"*)* @_ZN5blink23CustomElementDefinition22ConstructionStackScopeC2ERS0_RNS_7ElementE
@_ZN5blink23CustomElementDefinition22ConstructionStackScopeD1Ev = hidden unnamed_addr alias void (%"class.blink::CustomElementDefinition::ConstructionStackScope"*), void (%"class.blink::CustomElementDefinition::ConstructionStackScope"*)* @_ZN5blink23CustomElementDefinition22ConstructionStackScopeD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23CustomElementDefinitionC2ERKNS_23CustomElementDescriptorE(%"class.blink::CustomElementDefinition"*, %"class.blink::CustomElementDescriptor"* nocapture readonly dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [24 x i8*] }, { [24 x i8*] }* @_ZTVN5blink23CustomElementDefinitionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.blink::CustomElementDescriptor", %"class.blink::CustomElementDescriptor"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"** %6, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %7, label %25, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %25

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i33
  %17 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %16, i33 1) #10
  %18 = extractvalue { i33, i1 } %17, 1
  %19 = extractvalue { i33, i1 } %17, 0
  %20 = icmp slt i33 %19, 0
  %21 = or i1 %18, %20
  br i1 %21, label %22, label %23, !prof !2

22:                                               ; preds = %13
  tail call void @llvm.trap() #10
  unreachable

23:                                               ; preds = %13
  %24 = trunc i33 %19 to i32
  store i32 %24, i32* %14, align 4
  br label %25

25:                                               ; preds = %23, %8, %2
  %26 = getelementptr inbounds %"class.blink::CustomElementDescriptor", %"class.blink::CustomElementDescriptor"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %27 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, align 8
  %28 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %27, %"class.WTF::StringImpl"** %28, align 8
  %29 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %29, label %47, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %47

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i33
  %39 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %38, i33 1) #10
  %40 = extractvalue { i33, i1 } %39, 1
  %41 = extractvalue { i33, i1 } %39, 0
  %42 = icmp slt i33 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %44, label %45, !prof !2

44:                                               ; preds = %35
  tail call void @llvm.trap() #10
  unreachable

45:                                               ; preds = %35
  %46 = trunc i33 %41 to i32
  store i32 %46, i32* %36, align 4
  br label %47

47:                                               ; preds = %25, %30, %45
  %48 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 2
  %49 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 2, i32 0, i32 0, i32 1, i64 0
  %50 = bitcast %"class.blink::HeapVector"* %48 to i8**
  store i8* %49, i8** %50, align 8
  %51 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1
  store i32 1, i32* %51, align 8
  %52 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 2
  %53 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 5
  %54 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 9
  %55 = bitcast %"class.blink::HeapVector.34"* %54 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 16, i1 false) #10
  %56 = bitcast i32* %52 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %56, i8 0, i64 32, i1 false)
  %57 = bitcast i8* %53 to i32*
  store i32 0, i32* %57, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23CustomElementDefinitionC2ERKNS_23CustomElementDescriptorERKN3WTF7HashSetINS4_12AtomicStringENS4_16AtomicStringHashENS4_10HashTraitsIS6_EENS4_18PartitionAllocatorEEERKNS4_6VectorINS4_6StringELj0ESA_EENS_19FormAssociationFlagE(%"class.blink::CustomElementDefinition"*, %"class.blink::CustomElementDescriptor"* nocapture readonly dereferenceable(16), %"class.WTF::HashSet"* nocapture readonly dereferenceable(24), %"class.WTF::Vector.1049"* nocapture readonly dereferenceable(16), i32) unnamed_addr #0 align 2 {
  %6 = alloca %"class.WTF::String", align 8
  %7 = alloca %"class.WTF::String", align 8
  %8 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [24 x i8*] }, { [24 x i8*] }* @_ZTVN5blink23CustomElementDefinitionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = getelementptr inbounds %"class.blink::CustomElementDescriptor", %"class.blink::CustomElementDescriptor"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %10, %"class.WTF::StringImpl"** %11, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %12, label %30, label %13

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 2
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i33
  %22 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %21, i33 1) #10
  %23 = extractvalue { i33, i1 } %22, 1
  %24 = extractvalue { i33, i1 } %22, 0
  %25 = icmp slt i33 %24, 0
  %26 = or i1 %23, %25
  br i1 %26, label %27, label %28, !prof !2

27:                                               ; preds = %18
  tail call void @llvm.trap() #10
  unreachable

28:                                               ; preds = %18
  %29 = trunc i33 %24 to i32
  store i32 %29, i32* %19, align 4
  br label %30

30:                                               ; preds = %28, %13, %5
  %31 = getelementptr inbounds %"class.blink::CustomElementDescriptor", %"class.blink::CustomElementDescriptor"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %33 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %32, %"class.WTF::StringImpl"** %33, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %34, label %52, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = and i32 %37, 2
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %52

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i33
  %44 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %43, i33 1) #10
  %45 = extractvalue { i33, i1 } %44, 1
  %46 = extractvalue { i33, i1 } %44, 0
  %47 = icmp slt i33 %46, 0
  %48 = or i1 %45, %47
  br i1 %48, label %49, label %50, !prof !2

49:                                               ; preds = %40
  tail call void @llvm.trap() #10
  unreachable

50:                                               ; preds = %40
  %51 = trunc i33 %46 to i32
  store i32 %51, i32* %41, align 4
  br label %52

52:                                               ; preds = %30, %35, %50
  %53 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 2
  %54 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 2, i32 0, i32 0, i32 1, i64 0
  %55 = bitcast %"class.blink::HeapVector"* %53 to i8**
  store i8* %54, i8** %55, align 8
  %56 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1
  store i32 1, i32* %56, align 8
  %57 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 2
  %58 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 3, i32 0
  %59 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %2, i64 0, i32 0, i32 2
  %60 = bitcast i32* %57 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %60, i8 0, i64 32, i1 false)
  %61 = load i32, i32* %59, align 4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %98, label %63

63:                                               ; preds = %52
  tail call void @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj(%"class.WTF::HashTable"* %58, i32 %61) #10
  %64 = load i32, i32* %59, align 4
  %65 = icmp eq i32 %64, 0
  %66 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %2, i64 0, i32 0, i32 0
  %67 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %66, align 8
  %68 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %2, i64 0, i32 0, i32 1
  %69 = load i32, i32* %68, align 8
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %67, i64 %70
  br i1 %65, label %98, label %72

72:                                               ; preds = %63
  %73 = icmp eq i32 %69, 0
  br i1 %73, label %81, label %74

74:                                               ; preds = %72, %78
  %75 = phi %"class.WTF::AtomicString"* [ %79, %78 ], [ %67, %72 ]
  %76 = bitcast %"class.WTF::AtomicString"* %75 to i64*
  %77 = load i64, i64* %76, align 8
  switch i64 %77, label %81 [
    i64 -1, label %78
    i64 0, label %78
  ]

78:                                               ; preds = %74, %74
  %79 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %75, i64 1
  %80 = icmp eq %"class.WTF::AtomicString"* %79, %71
  br i1 %80, label %98, label %74

81:                                               ; preds = %74, %72
  %82 = phi %"class.WTF::AtomicString"* [ %67, %72 ], [ %75, %74 ]
  %83 = icmp eq %"class.WTF::AtomicString"* %82, %71
  br i1 %83, label %98, label %84

84:                                               ; preds = %81, %96
  %85 = phi %"class.WTF::AtomicString"* [ %90, %96 ], [ %82, %81 ]
  %86 = tail call { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %58, %"class.WTF::AtomicString"* dereferenceable(8) %85, %"class.WTF::AtomicString"* dereferenceable(8) %85) #10
  %87 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %85, i64 1
  %88 = icmp eq %"class.WTF::AtomicString"* %87, %71
  br i1 %88, label %98, label %89

89:                                               ; preds = %84, %93
  %90 = phi %"class.WTF::AtomicString"* [ %94, %93 ], [ %87, %84 ]
  %91 = bitcast %"class.WTF::AtomicString"* %90 to i64*
  %92 = load i64, i64* %91, align 8
  switch i64 %92, label %96 [
    i64 -1, label %93
    i64 0, label %93
  ]

93:                                               ; preds = %89, %89
  %94 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %90, i64 1
  %95 = icmp eq %"class.WTF::AtomicString"* %94, %71
  br i1 %95, label %98, label %89

96:                                               ; preds = %89
  %97 = icmp eq %"class.WTF::AtomicString"* %90, %71
  br i1 %97, label %98, label %84

98:                                               ; preds = %78, %84, %96, %93, %52, %63, %81
  %99 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 4
  %100 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %2, i64 0, i32 0, i32 0
  %101 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %100, align 8
  %102 = icmp eq %"class.WTF::AtomicString"* %101, null
  br i1 %102, label %155, label %103

103:                                              ; preds = %98
  %104 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** @_ZN5blink10html_names10kStyleAttrE, align 8
  %105 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %104, i64 0, i32 0, i32 0
  %106 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %105, align 8
  %107 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %2, i64 0, i32 0, i32 1
  %108 = load i32, i32* %107, align 8
  %109 = add i32 %108, -1
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %106, i64 0, i32 3, i32 0, i32 0, i32 0
  %112 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %111, align 8
  %113 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %112, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %114 = load atomic i32, i32* %113 monotonic, align 4
  %115 = lshr i32 %114, 8
  %116 = and i32 %115, %109
  %117 = zext i32 %116 to i64
  %118 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %101, i64 %117
  %119 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %118, i64 0, i32 0, i32 0, i32 0
  %120 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %119, align 8
  %121 = icmp eq %"class.WTF::StringImpl"* %120, null
  br i1 %121, label %155, label %122

122:                                              ; preds = %103
  %123 = xor i32 %115, -1
  %124 = lshr i32 %114, 31
  %125 = add nsw i32 %124, %123
  %126 = shl i32 %125, 12
  %127 = xor i32 %126, %125
  %128 = lshr i32 %127, 7
  %129 = xor i32 %128, %127
  %130 = shl i32 %129, 2
  %131 = xor i32 %130, %129
  %132 = lshr i32 %131, 20
  %133 = xor i32 %132, %131
  %134 = or i32 %133, 1
  %135 = zext i32 %134 to i64
  br label %136

136:                                              ; preds = %146, %122
  %137 = phi %"class.WTF::StringImpl"* [ %120, %122 ], [ %153, %146 ]
  %138 = phi %"class.WTF::AtomicString"* [ %118, %122 ], [ %151, %146 ]
  %139 = phi i64 [ %117, %122 ], [ %150, %146 ]
  %140 = phi i64 [ 0, %122 ], [ %148, %146 ]
  %141 = bitcast %"class.WTF::AtomicString"* %138 to i8**
  %142 = load i8*, i8** %141, align 8
  %143 = icmp ne i8* %142, inttoptr (i64 -1 to i8*)
  %144 = icmp eq %"class.WTF::StringImpl"* %137, %112
  %145 = and i1 %144, %143
  br i1 %145, label %155, label %146

146:                                              ; preds = %136
  %147 = icmp eq i64 %140, 0
  %148 = select i1 %147, i64 %135, i64 %140
  %149 = add i64 %148, %139
  %150 = and i64 %149, %110
  %151 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %101, i64 %150
  %152 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %151, i64 0, i32 0, i32 0, i32 0
  %153 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %152, align 8
  %154 = icmp eq %"class.WTF::StringImpl"* %153, null
  br i1 %154, label %155, label %136

155:                                              ; preds = %136, %146, %98, %103
  %156 = phi %"class.WTF::AtomicString"* [ null, %98 ], [ null, %103 ], [ null, %146 ], [ %138, %136 ]
  %157 = icmp ne %"class.WTF::AtomicString"* %156, null
  %158 = zext i1 %157 to i8
  store i8 %158, i8* %99, align 8
  %159 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 5
  store i8 0, i8* %159, align 1
  %160 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 6
  %161 = bitcast %"class.WTF::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %161) #10
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %6, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i64 6) #10
  %162 = getelementptr inbounds %"class.WTF::Vector.1049", %"class.WTF::Vector.1049"* %3, i64 0, i32 0, i32 0, i32 0
  %163 = load %"class.WTF::String"*, %"class.WTF::String"** %162, align 8
  %164 = getelementptr inbounds %"class.WTF::Vector.1049", %"class.WTF::Vector.1049"* %3, i64 0, i32 0, i32 0, i32 2
  %165 = load i32, i32* %164, align 4
  %166 = zext i32 %165 to i64
  %167 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %163, i64 %166
  %168 = icmp eq i32 %165, 0
  br i1 %168, label %188, label %169

169:                                              ; preds = %155
  %170 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 0, i32 0, i32 0
  br label %171

171:                                              ; preds = %177, %169
  %172 = phi %"class.WTF::String"* [ %163, %169 ], [ %178, %177 ]
  %173 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %172, i64 0, i32 0, i32 0
  %174 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %173, align 8
  %175 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %170, align 8
  %176 = call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %174, %"class.WTF::StringImpl"* %175) #10
  br i1 %176, label %180, label %177

177:                                              ; preds = %171
  %178 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %172, i64 1
  %179 = icmp ult %"class.WTF::String"* %178, %167
  br i1 %179, label %171, label %188

180:                                              ; preds = %171
  %181 = ptrtoint %"class.WTF::String"* %172 to i64
  %182 = ptrtoint %"class.WTF::String"* %163 to i64
  %183 = sub i64 %181, %182
  %184 = lshr exact i64 %183, 3
  %185 = trunc i64 %184 to i32
  %186 = icmp ne i32 %185, -1
  %187 = zext i1 %186 to i8
  br label %188

188:                                              ; preds = %177, %155, %180
  %189 = phi i8 [ %187, %180 ], [ 0, %155 ], [ 0, %177 ]
  %190 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 0, i32 0, i32 0
  %191 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %190, align 8
  %192 = icmp eq %"class.WTF::StringImpl"* %191, null
  br i1 %192, label %206, label %193

193:                                              ; preds = %188
  %194 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %195 = load atomic i32, i32* %194 monotonic, align 4
  %196 = and i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 0
  %199 = load i32, i32* %198, align 4
  br i1 %197, label %200, label %202

200:                                              ; preds = %193
  %201 = add i32 %199, -1
  store i32 %201, i32* %198, align 4
  br label %202

202:                                              ; preds = %200, %193
  %203 = phi i32 [ %201, %200 ], [ %199, %193 ]
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %205, label %206

205:                                              ; preds = %202
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %191) #10
  br label %206

206:                                              ; preds = %188, %202, %205
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %161) #10
  store i8 %189, i8* %160, align 2
  %207 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 7
  %208 = bitcast %"class.WTF::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %208) #10
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %7, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i64 9) #10
  %209 = load %"class.WTF::String"*, %"class.WTF::String"** %162, align 8
  %210 = load i32, i32* %164, align 4
  %211 = zext i32 %210 to i64
  %212 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %209, i64 %211
  %213 = icmp eq i32 %210, 0
  br i1 %213, label %233, label %214

214:                                              ; preds = %206
  %215 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  br label %216

216:                                              ; preds = %222, %214
  %217 = phi %"class.WTF::String"* [ %209, %214 ], [ %223, %222 ]
  %218 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %217, i64 0, i32 0, i32 0
  %219 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %218, align 8
  %220 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %215, align 8
  %221 = call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %219, %"class.WTF::StringImpl"* %220) #10
  br i1 %221, label %225, label %222

222:                                              ; preds = %216
  %223 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %217, i64 1
  %224 = icmp ult %"class.WTF::String"* %223, %212
  br i1 %224, label %216, label %233

225:                                              ; preds = %216
  %226 = ptrtoint %"class.WTF::String"* %217 to i64
  %227 = ptrtoint %"class.WTF::String"* %209 to i64
  %228 = sub i64 %226, %227
  %229 = lshr exact i64 %228, 3
  %230 = trunc i64 %229 to i32
  %231 = icmp ne i32 %230, -1
  %232 = zext i1 %231 to i8
  br label %233

233:                                              ; preds = %222, %206, %225
  %234 = phi i8 [ %232, %225 ], [ 0, %206 ], [ 0, %222 ]
  %235 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  %236 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %235, align 8
  %237 = icmp eq %"class.WTF::StringImpl"* %236, null
  br i1 %237, label %251, label %238

238:                                              ; preds = %233
  %239 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %236, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %240 = load atomic i32, i32* %239 monotonic, align 4
  %241 = and i32 %240, 2
  %242 = icmp eq i32 %241, 0
  %243 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %236, i64 0, i32 0
  %244 = load i32, i32* %243, align 4
  br i1 %242, label %245, label %247

245:                                              ; preds = %238
  %246 = add i32 %244, -1
  store i32 %246, i32* %243, align 4
  br label %247

247:                                              ; preds = %245, %238
  %248 = phi i32 [ %246, %245 ], [ %244, %238 ]
  %249 = icmp eq i32 %248, 0
  br i1 %249, label %250, label %251

250:                                              ; preds = %247
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %236) #10
  br label %251

251:                                              ; preds = %233, %247, %250
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %208) #10
  store i8 %234, i8* %207, align 1
  %252 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 8
  %253 = icmp eq i32 %4, 1
  %254 = zext i1 %253 to i8
  store i8 %254, i8* %252, align 4
  %255 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 9
  %256 = bitcast %"class.blink::HeapVector.34"* %255 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %256, i8 0, i64 16, i1 false) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23CustomElementDefinitionD2Ev(%"class.blink::CustomElementDefinition"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [24 x i8*] }, { [24 x i8*] }* @_ZTVN5blink23CustomElementDefinitionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 3, i32 0, i32 0
  %4 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %3, align 8
  %5 = icmp eq %"class.WTF::AtomicString"* %4, null
  br i1 %5, label %38, label %6, !prof !3

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 3, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %36, label %10

10:                                               ; preds = %6
  %11 = zext i32 %8 to i64
  br label %12

12:                                               ; preds = %33, %10
  %13 = phi i64 [ 0, %10 ], [ %34, %33 ]
  %14 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 %13
  %15 = bitcast %"class.WTF::AtomicString"* %14 to i8**
  %16 = load i8*, i8** %15, align 8
  %17 = bitcast i8* %16 to %"class.WTF::StringImpl"*
  %18 = ptrtoint i8* %16 to i64
  switch i64 %18, label %19 [
    i64 -1, label %33
    i64 0, label %33
  ]

19:                                               ; preds = %12
  %20 = getelementptr inbounds i8, i8* %16, i64 8
  %21 = bitcast i8* %20 to i32*
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = and i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = bitcast i8* %16 to i32*
  %26 = load i32, i32* %25, align 4
  br i1 %24, label %27, label %29

27:                                               ; preds = %19
  %28 = add i32 %26, -1
  store i32 %28, i32* %25, align 4
  br label %29

29:                                               ; preds = %27, %19
  %30 = phi i32 [ %28, %27 ], [ %26, %19 ]
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %29
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %17) #10
  br label %33

33:                                               ; preds = %32, %29, %12, %12
  %34 = add nuw nsw i64 %13, 1
  %35 = icmp eq i64 %34, %11
  br i1 %35, label %36, label %12

36:                                               ; preds = %33, %6
  %37 = bitcast %"class.WTF::AtomicString"* %4 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %37) #10
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %3, align 8
  br label %38

38:                                               ; preds = %1, %36
  %39 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 2
  %40 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 2
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 0
  %43 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %39, i64 0, i32 0, i32 0, i32 0, i32 0
  %44 = load %"class.blink::Member"*, %"class.blink::Member"** %43, align 8
  br i1 %42, label %52, label %45, !prof !2

45:                                               ; preds = %38
  %46 = icmp ne %"class.blink::Member"* %44, null
  %47 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 2, i32 0, i32 0, i32 1, i64 0
  %48 = bitcast i8* %47 to %"class.blink::Member"*
  %49 = icmp ne %"class.blink::Member"* %44, %48
  %50 = and i1 %46, %49
  br i1 %50, label %52, label %51

51:                                               ; preds = %45
  store i32 0, i32* %40, align 4
  br label %52

52:                                               ; preds = %38, %51, %45
  %53 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 2, i32 0, i32 0, i32 1, i64 0
  %54 = bitcast i8* %53 to %"class.blink::Member"*
  %55 = icmp eq %"class.blink::Member"* %44, %54
  br i1 %55, label %58, label %56, !prof !3

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %39, i64 0, i32 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIN5blink6MemberINS1_7ElementEEELj1ENS1_13HeapAllocatorEE22ReallyDeallocateBufferEPS4_(%"class.WTF::VectorBuffer"* %57, %"class.blink::Member"* %44) #10
  br label %58

58:                                               ; preds = %52, %56
  store %"class.blink::Member"* null, %"class.blink::Member"** %43, align 8
  %59 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %75, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = and i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %68 = load i32, i32* %67, align 4
  br i1 %66, label %69, label %71

69:                                               ; preds = %62
  %70 = add i32 %68, -1
  store i32 %70, i32* %67, align 4
  br label %71

71:                                               ; preds = %69, %62
  %72 = phi i32 [ %70, %69 ], [ %68, %62 ]
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %71
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %60) #10
  br label %75

75:                                               ; preds = %74, %71, %58
  %76 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %77 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %76, align 8
  %78 = icmp eq %"class.WTF::StringImpl"* %77, null
  br i1 %78, label %92, label %79

79:                                               ; preds = %75
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = load atomic i32, i32* %80 monotonic, align 4
  %82 = and i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 0
  %85 = load i32, i32* %84, align 4
  br i1 %83, label %86, label %88

86:                                               ; preds = %79
  %87 = add i32 %85, -1
  store i32 %87, i32* %84, align 4
  br label %88

88:                                               ; preds = %86, %79
  %89 = phi i32 [ %87, %86 ], [ %85, %79 ]
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %92

91:                                               ; preds = %88
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %77) #10
  br label %92

92:                                               ; preds = %75, %88, %91
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN5blink23CustomElementDefinitionD0Ev(%"class.blink::CustomElementDefinition"* nocapture readnone) unnamed_addr #2 align 2 {
  tail call void @llvm.trap() #11
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink23CustomElementDefinition5TraceEPNS_7VisitorE(%"class.blink::CustomElementDefinition"*, %"class.blink::Visitor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 2
  %4 = bitcast %"class.blink::HeapVector"* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %13

7:                                                ; preds = %2
  %8 = bitcast %"class.blink::HeapVector"* %3 to i8**
  %9 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8**)***
  %10 = load void (%"class.blink::Visitor"*, i8**)**, void (%"class.blink::Visitor"*, i8**)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8**)*, void (%"class.blink::Visitor"*, i8**)** %10, i64 11
  %12 = load void (%"class.blink::Visitor"*, i8**)*, void (%"class.blink::Visitor"*, i8**)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %1, i8** %8) #10
  br label %39

13:                                               ; preds = %2
  %14 = inttoptr i64 %5 to %"class.blink::Member"*
  %15 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 2, i32 0, i32 0, i32 1, i64 0
  %16 = bitcast i8* %15 to %"class.blink::Member"*
  %17 = icmp eq %"class.blink::Member"* %16, %14
  %18 = bitcast %"class.blink::HeapVector"* %3 to i8**
  %19 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8**)***
  %20 = load void (%"class.blink::Visitor"*, i8**)**, void (%"class.blink::Visitor"*, i8**)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.blink::Visitor"*, i8**)*, void (%"class.blink::Visitor"*, i8**)** %20, i64 11
  %22 = load void (%"class.blink::Visitor"*, i8**)*, void (%"class.blink::Visitor"*, i8**)** %21, align 8
  tail call void %22(%"class.blink::Visitor"* %1, i8** %18) #10
  br i1 %17, label %29, label %23

23:                                               ; preds = %13
  %24 = inttoptr i64 %5 to i8*
  %25 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %26 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %26, i64 5
  %28 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %27, align 8
  tail call void %28(%"class.blink::Visitor"* %1, i8* nonnull %24, i8* nonnull %24, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv) #10
  br label %39

29:                                               ; preds = %13
  %30 = inttoptr i64 %5 to i64*
  %31 = load atomic i64, i64* %30 monotonic, align 8
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %39, label %33

33:                                               ; preds = %29
  %34 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %35 = inttoptr i64 %31 to i8*
  %36 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %34, align 8
  %37 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %36, i64 5
  %38 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %37, align 8
  tail call void %38(%"class.blink::Visitor"* %1, i8* nonnull %35, i8* nonnull %35, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_7ElementEE5TraceEPNS_7VisitorEPKv) #10
  br label %39

39:                                               ; preds = %7, %23, %29, %33
  %40 = phi void (%"class.blink::Visitor"*, i8**)*** [ %9, %7 ], [ %19, %23 ], [ %19, %29 ], [ %19, %33 ]
  %41 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 9
  %42 = bitcast %"class.blink::HeapVector.34"* %41 to i64*
  %43 = load atomic i64, i64* %42 monotonic, align 8
  %44 = icmp eq i64 %43, 0
  %45 = bitcast %"class.blink::HeapVector.34"* %41 to i8**
  %46 = load void (%"class.blink::Visitor"*, i8**)**, void (%"class.blink::Visitor"*, i8**)*** %40, align 8
  %47 = getelementptr inbounds void (%"class.blink::Visitor"*, i8**)*, void (%"class.blink::Visitor"*, i8**)** %46, i64 11
  %48 = load void (%"class.blink::Visitor"*, i8**)*, void (%"class.blink::Visitor"*, i8**)** %47, align 8
  tail call void %48(%"class.blink::Visitor"* %1, i8** %45) #10
  br i1 %44, label %55, label %49

49:                                               ; preds = %39
  %50 = inttoptr i64 %43 to i8*
  %51 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %52 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %51, align 8
  %53 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %52, i64 5
  %54 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %53, align 8
  tail call void %54(%"class.blink::Visitor"* %1, i8* nonnull %50, i8* nonnull %50, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_13CSSStyleSheetEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv) #10
  br label %55

55:                                               ; preds = %39, %49
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23CustomElementDefinition22CheckConstructorResultEPNS_7ElementERNS_8DocumentERKNS_13QualifiedNameERNS_14ExceptionStateE(%"class.blink::Element"*, %"class.blink::Document"* readnone dereferenceable(2848), %"class.blink::QualifiedName"* nocapture readonly dereferenceable(8), %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.WTF::String", align 8
  %6 = alloca %"class.WTF::String", align 8
  %7 = icmp eq %"class.blink::Element"* %0, null
  br i1 %7, label %14, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = and i32 %11, 48
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %15, label %14

14:                                               ; preds = %4, %8
  tail call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0)) #10
  br label %110

15:                                               ; preds = %8
  %16 = bitcast %"class.WTF::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #10
  %17 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %17, align 8
  %18 = bitcast %"class.WTF::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 3, i32 0, i32 0
  %20 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %19, align 8
  %21 = icmp eq %"class.blink::ElementData"* %20, null
  br i1 %21, label %44, label %22

22:                                               ; preds = %15
  tail call void @_ZNK5blink7Element24SynchronizeAllAttributesEv(%"class.blink::Element"* nonnull %0) #10
  %23 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %19, align 8
  %24 = icmp eq %"class.blink::ElementData"* %23, null
  br i1 %24, label %25, label %27

25:                                               ; preds = %22
  %26 = load i32, i32* null, align 536870912
  br label %36

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %23, i64 0, i32 0, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = and i32 %29, 1
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %36, label %32

32:                                               ; preds = %27
  %33 = bitcast %"class.blink::ElementData"* %23 to %"class.blink::UniqueElementData"*
  %34 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %33, i64 0, i32 2, i32 0, i32 0, i32 2
  %35 = load i32, i32* %34, align 4
  br label %40

36:                                               ; preds = %27, %25
  %37 = phi i32 [ %26, %25 ], [ %29, %27 ]
  %38 = lshr i32 %37, 1
  %39 = and i32 %38, 268435455
  br label %40

40:                                               ; preds = %36, %32
  %41 = phi i32 [ %39, %36 ], [ %35, %32 ]
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %44, label %43

43:                                               ; preds = %40
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %5, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.6, i64 0, i64 0), i64 35) #10
  br label %81

44:                                               ; preds = %40, %15
  %45 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %46 = load %"class.blink::Node"*, %"class.blink::Node"** %45, align 8
  %47 = icmp eq %"class.blink::Node"* %46, null
  br i1 %47, label %49, label %48

48:                                               ; preds = %44
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i64 0, i64 0), i64 33) #10
  br label %81

49:                                               ; preds = %44
  %50 = tail call %"class.blink::ContainerNode"* @_ZNK5blink4Node10parentNodeEv(%"class.blink::Node"* %9) #10
  %51 = icmp eq %"class.blink::ContainerNode"* %50, null
  br i1 %51, label %53, label %52

52:                                               ; preds = %49
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.8, i64 0, i64 0), i64 33) #10
  br label %81

53:                                               ; preds = %49
  %54 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %55 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %54, align 8
  %56 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %55, i64 0, i32 2, i32 0, i32 0
  %57 = load %"class.blink::Document"*, %"class.blink::Document"** %56, align 8
  %58 = icmp eq %"class.blink::Document"* %57, %1
  br i1 %58, label %60, label %59

59:                                               ; preds = %53
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %5, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.9, i64 0, i64 0), i64 39) #10
  br label %81

60:                                               ; preds = %53
  %61 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %0, i64 0, i32 2, i32 0, i32 0
  %62 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %61, align 8
  %63 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink10html_names17xhtmlNamespaceURIE, align 8
  %64 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %62, i64 0, i32 4, i32 0, i32 0, i32 0
  %65 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %64, align 8
  %66 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %63, i64 0, i32 0, i32 0, i32 0
  %67 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %66, align 8
  %68 = icmp eq %"class.WTF::StringImpl"* %65, %67
  br i1 %68, label %70, label %69

69:                                               ; preds = %60
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %5, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10, i64 0, i64 0), i64 35) #10
  br label %81

70:                                               ; preds = %60
  %71 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %2, i64 0, i32 0, i32 0
  %72 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %71, align 8
  %73 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %62, i64 0, i32 3, i32 0, i32 0, i32 0
  %74 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %73, align 8
  %75 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %72, i64 0, i32 3, i32 0, i32 0, i32 0
  %76 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %75, align 8
  %77 = icmp eq %"class.WTF::StringImpl"* %74, %76
  br i1 %77, label %79, label %78

78:                                               ; preds = %70
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %5, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11, i64 0, i64 0), i64 39) #10
  br label %81

79:                                               ; preds = %70
  %80 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %80, align 8
  br label %81

81:                                               ; preds = %43, %48, %52, %59, %69, %78, %79
  %82 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  %83 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %82, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store %"class.WTF::StringImpl"* %83, %"class.WTF::StringImpl"** %17, align 8
  %84 = icmp eq %"class.WTF::StringImpl"* %83, null
  br i1 %84, label %109, label %85

85:                                               ; preds = %81
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %83, i64 0, i32 1
  %87 = load i32, i32* %86, align 4
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %95, label %89

89:                                               ; preds = %85
  %90 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)***
  %91 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*** %90, align 8
  %92 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)** %91, align 8
  call void %92(%"class.blink::ExceptionState"* %3, i32 9, %"class.WTF::String"* nonnull dereferenceable(8) %6) #10
  %93 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %94 = icmp eq %"class.WTF::StringImpl"* %93, null
  br i1 %94, label %109, label %95

95:                                               ; preds = %85, %89
  %96 = phi %"class.WTF::StringImpl"* [ %93, %89 ], [ %83, %85 ]
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %96, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %98 = load atomic i32, i32* %97 monotonic, align 4
  %99 = and i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %96, i64 0, i32 0
  %102 = load i32, i32* %101, align 4
  br i1 %100, label %103, label %105

103:                                              ; preds = %95
  %104 = add i32 %102, -1
  store i32 %104, i32* %101, align 4
  br label %105

105:                                              ; preds = %103, %95
  %106 = phi i32 [ %104, %103 ], [ %102, %95 ]
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %109

108:                                              ; preds = %105
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %96) #10
  br label %109

109:                                              ; preds = %81, %89, %105, %108
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  br label %110

110:                                              ; preds = %109, %14
  ret void
}

declare void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"*, i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::HTMLElement"* @_ZN5blink23CustomElementDefinition27CreateElementForConstructorERNS_8DocumentE(%"class.blink::CustomElementDefinition"*, %"class.blink::Document"* dereferenceable(2848)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::CreateElementFlags", align 8
  %4 = alloca %"class.blink::QualifiedName", align 8
  %5 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 1, i32 1
  %6 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %3, i64 0, i32 0
  store i8 0, i8* %6, align 8, !alias.scope !4
  %7 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %3, i64 0, i32 3
  store i8 2, i8* %7, align 8, !alias.scope !4
  %8 = tail call %"class.blink::HTMLElement"* @_ZN5blink18HTMLElementFactory6CreateERKN3WTF12AtomicStringERNS_8DocumentENS_18CreateElementFlagsE(%"class.WTF::AtomicString"* dereferenceable(8) %5, %"class.blink::Document"* dereferenceable(2848) %1, %"class.blink::CreateElementFlags"* nonnull byval(%"class.blink::CreateElementFlags") align 8 %3) #10
  %9 = icmp eq %"class.blink::HTMLElement"* %8, null
  br i1 %9, label %13, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.blink::HTMLElement", %"class.blink::HTMLElement"* %8, i64 0, i32 0
  %12 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 1, i32 0
  tail call void @_ZN5blink7Element10SetIsValueERKN3WTF12AtomicStringE(%"class.blink::Element"* %11, %"class.WTF::AtomicString"* dereferenceable(8) %12) #10
  br label %18

13:                                               ; preds = %2
  %14 = bitcast %"class.blink::QualifiedName"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #10
  %15 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %16 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink10html_names17xhtmlNamespaceURIE, align 8
  call void @_ZN5blink13QualifiedNameC1ERKN3WTF12AtomicStringES4_S4_(%"class.blink::QualifiedName"* nonnull %4, %"class.WTF::AtomicString"* dereferenceable(8) %15, %"class.WTF::AtomicString"* dereferenceable(8) %5, %"class.WTF::AtomicString"* dereferenceable(8) %16) #10
  %17 = call %"class.blink::HTMLElement"* @_ZN5blink25MakeGarbageCollectedTraitINS_11HTMLElementEE4CallIJNS_13QualifiedNameERNS_8DocumentEEEEPS1_DpOT_(%"class.blink::QualifiedName"* nonnull dereferenceable(8) %4, %"class.blink::Document"* dereferenceable(2848) %1) #10
  call void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #10
  br label %18

18:                                               ; preds = %13, %10
  %19 = phi %"class.blink::HTMLElement"* [ %8, %10 ], [ %17, %13 ]
  %20 = getelementptr inbounds %"class.blink::HTMLElement", %"class.blink::HTMLElement"* %19, i64 0, i32 0, i32 0, i32 0
  call void @_ZN5blink4Node21SetCustomElementStateENS_18CustomElementStateE(%"class.blink::Node"* %20, i32 393216) #10
  %21 = getelementptr inbounds %"class.blink::HTMLElement", %"class.blink::HTMLElement"* %19, i64 0, i32 0
  call void @_ZN5blink7Element26SetCustomElementDefinitionEPNS_23CustomElementDefinitionE(%"class.blink::Element"* %21, %"class.blink::CustomElementDefinition"* %0) #10
  ret %"class.blink::HTMLElement"* %19
}

declare %"class.blink::HTMLElement"* @_ZN5blink18HTMLElementFactory6CreateERKN3WTF12AtomicStringERNS_8DocumentENS_18CreateElementFlagsE(%"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::Document"* dereferenceable(2848), %"class.blink::CreateElementFlags"* byval(%"class.blink::CreateElementFlags") align 8) local_unnamed_addr #4

declare void @_ZN5blink7Element10SetIsValueERKN3WTF12AtomicStringE(%"class.blink::Element"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #4

declare void @_ZN5blink13QualifiedNameC1ERKN3WTF12AtomicStringES4_S4_(%"class.blink::QualifiedName"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN5blink13QualifiedNameD1Ev(%"class.blink::QualifiedName"*) unnamed_addr #5

declare void @_ZN5blink4Node21SetCustomElementStateENS_18CustomElementStateE(%"class.blink::Node"*, i32) local_unnamed_addr #4

declare void @_ZN5blink7Element26SetCustomElementDefinitionEPNS_23CustomElementDefinitionE(%"class.blink::Element"*, %"class.blink::CustomElementDefinition"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::HTMLElement"* @_ZN5blink23CustomElementDefinition13CreateElementERNS_8DocumentERKNS_13QualifiedNameENS_18CreateElementFlagsE(%"class.blink::CustomElementDefinition"*, %"class.blink::Document"* dereferenceable(2848), %"class.blink::QualifiedName"* dereferenceable(8), %"class.blink::CreateElementFlags"* nocapture readonly byval(%"class.blink::CreateElementFlags") align 8) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.blink::CustomElementDescriptor", %"class.blink::CustomElementDescriptor"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %8 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %7, %9
  br i1 %10, label %24, label %11

11:                                               ; preds = %4
  %12 = tail call %"class.blink::Element"* @_ZN5blink8Document16CreateRawElementERKNS_13QualifiedNameENS_18CreateElementFlagsE(%"class.blink::Document"* %1, %"class.blink::QualifiedName"* dereferenceable(8) %2, %"class.blink::CreateElementFlags"* nonnull byval(%"class.blink::CreateElementFlags") align 8 %3) #10
  %13 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %12, i64 0, i32 0, i32 0
  tail call void @_ZN5blink4Node21SetCustomElementStateENS_18CustomElementStateE(%"class.blink::Node"* %13, i32 393216) #10
  %14 = getelementptr inbounds %"class.blink::CustomElementDescriptor", %"class.blink::CustomElementDescriptor"* %5, i64 0, i32 0
  tail call void @_ZN5blink7Element10SetIsValueERKN3WTF12AtomicStringE(%"class.blink::Element"* %12, %"class.WTF::AtomicString"* dereferenceable(8) %14) #10
  %15 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %3, i64 0, i32 3
  %16 = load i8, i8* %15, align 8
  %17 = and i8 %16, 1
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %20

19:                                               ; preds = %11
  tail call void @_ZN5blink23CustomElementDefinition7UpgradeERNS_7ElementE(%"class.blink::CustomElementDefinition"* %0, %"class.blink::Element"* dereferenceable(104) %12)
  br label %22

20:                                               ; preds = %11
  %21 = tail call dereferenceable(16) %"class.blink::CustomElementReaction"* @_ZN5blink28CustomElementReactionFactory13CreateUpgradeERNS_23CustomElementDefinitionE(%"class.blink::CustomElementDefinition"* dereferenceable(96) %0) #10
  tail call void @_ZN5blink13CustomElement7EnqueueERNS_7ElementERNS_21CustomElementReactionE(%"class.blink::Element"* dereferenceable(104) %12, %"class.blink::CustomElementReaction"* dereferenceable(16) %21) #10
  br label %22

22:                                               ; preds = %20, %19
  %23 = bitcast %"class.blink::Element"* %12 to %"class.blink::HTMLElement"*
  br label %40

24:                                               ; preds = %4
  %25 = getelementptr inbounds %"class.blink::CreateElementFlags", %"class.blink::CreateElementFlags"* %3, i64 0, i32 3
  %26 = load i8, i8* %25, align 8
  %27 = and i8 %26, 1
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %29, label %35

29:                                               ; preds = %24
  %30 = bitcast %"class.blink::CustomElementDefinition"* %0 to %"class.blink::HTMLElement"* (%"class.blink::CustomElementDefinition"*, %"class.blink::Document"*, %"class.blink::QualifiedName"*)***
  %31 = load %"class.blink::HTMLElement"* (%"class.blink::CustomElementDefinition"*, %"class.blink::Document"*, %"class.blink::QualifiedName"*)**, %"class.blink::HTMLElement"* (%"class.blink::CustomElementDefinition"*, %"class.blink::Document"*, %"class.blink::QualifiedName"*)*** %30, align 8
  %32 = getelementptr inbounds %"class.blink::HTMLElement"* (%"class.blink::CustomElementDefinition"*, %"class.blink::Document"*, %"class.blink::QualifiedName"*)*, %"class.blink::HTMLElement"* (%"class.blink::CustomElementDefinition"*, %"class.blink::Document"*, %"class.blink::QualifiedName"*)** %31, i64 5
  %33 = load %"class.blink::HTMLElement"* (%"class.blink::CustomElementDefinition"*, %"class.blink::Document"*, %"class.blink::QualifiedName"*)*, %"class.blink::HTMLElement"* (%"class.blink::CustomElementDefinition"*, %"class.blink::Document"*, %"class.blink::QualifiedName"*)** %32, align 8
  %34 = tail call %"class.blink::HTMLElement"* %33(%"class.blink::CustomElementDefinition"* %0, %"class.blink::Document"* dereferenceable(2848) %1, %"class.blink::QualifiedName"* dereferenceable(8) %2) #10
  br label %40

35:                                               ; preds = %24
  %36 = tail call %"class.blink::HTMLElement"* @_ZN5blink25MakeGarbageCollectedTraitINS_11HTMLElementEE4CallIJRKNS_13QualifiedNameERNS_8DocumentEEEEPS1_DpOT_(%"class.blink::QualifiedName"* dereferenceable(8) %2, %"class.blink::Document"* dereferenceable(2848) %1) #10
  %37 = getelementptr inbounds %"class.blink::HTMLElement", %"class.blink::HTMLElement"* %36, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZN5blink4Node21SetCustomElementStateENS_18CustomElementStateE(%"class.blink::Node"* %37, i32 393216) #10
  %38 = getelementptr inbounds %"class.blink::HTMLElement", %"class.blink::HTMLElement"* %36, i64 0, i32 0
  %39 = tail call dereferenceable(16) %"class.blink::CustomElementReaction"* @_ZN5blink28CustomElementReactionFactory13CreateUpgradeERNS_23CustomElementDefinitionE(%"class.blink::CustomElementDefinition"* dereferenceable(96) %0) #10
  tail call void @_ZN5blink13CustomElement7EnqueueERNS_7ElementERNS_21CustomElementReactionE(%"class.blink::Element"* dereferenceable(104) %38, %"class.blink::CustomElementReaction"* dereferenceable(16) %39) #10
  br label %40

40:                                               ; preds = %35, %29, %22
  %41 = phi %"class.blink::HTMLElement"* [ %36, %35 ], [ %34, %29 ], [ %23, %22 ]
  ret %"class.blink::HTMLElement"* %41
}

declare %"class.blink::Element"* @_ZN5blink8Document16CreateRawElementERKNS_13QualifiedNameENS_18CreateElementFlagsE(%"class.blink::Document"*, %"class.blink::QualifiedName"* dereferenceable(8), %"class.blink::CreateElementFlags"* byval(%"class.blink::CreateElementFlags") align 8) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23CustomElementDefinition7UpgradeERNS_7ElementE(%"class.blink::CustomElementDefinition"*, %"class.blink::Element"* dereferenceable(104)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::Element"*, align 8
  %4 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %1, i64 0, i32 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 917504
  switch i32 %6, label %77 [
    i32 393216, label %7
    i32 0, label %7
  ]

7:                                                ; preds = %2, %2
  %8 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %1, i64 0, i32 0, i32 0
  tail call void @_ZN5blink4Node21SetCustomElementStateENS_18CustomElementStateE(%"class.blink::Node"* %8, i32 524288) #10
  %9 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 3, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %7
  tail call void @_ZN5blink23CustomElementDefinition47EnqueueAttributeChangedCallbackForAllAttributesERNS_7ElementE(%"class.blink::CustomElementDefinition"* %0, %"class.blink::Element"* dereferenceable(104) %1)
  br label %13

13:                                               ; preds = %12, %7
  %14 = load i32, i32* %4, align 8
  %15 = and i32 %14, 256
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %25, label %17

17:                                               ; preds = %13
  %18 = bitcast %"class.blink::CustomElementDefinition"* %0 to i1 (%"class.blink::CustomElementDefinition"*)***
  %19 = load i1 (%"class.blink::CustomElementDefinition"*)**, i1 (%"class.blink::CustomElementDefinition"*)*** %18, align 8
  %20 = getelementptr inbounds i1 (%"class.blink::CustomElementDefinition"*)*, i1 (%"class.blink::CustomElementDefinition"*)** %19, i64 6
  %21 = load i1 (%"class.blink::CustomElementDefinition"*)*, i1 (%"class.blink::CustomElementDefinition"*)** %20, align 8
  %22 = tail call zeroext i1 %21(%"class.blink::CustomElementDefinition"* %0) #10
  br i1 %22, label %23, label %25

23:                                               ; preds = %17
  %24 = tail call dereferenceable(16) %"class.blink::CustomElementReaction"* @_ZN5blink28CustomElementReactionFactory15CreateConnectedERNS_23CustomElementDefinitionE(%"class.blink::CustomElementDefinition"* dereferenceable(96) %0) #10
  tail call void @_ZN5blink13CustomElement7EnqueueERNS_7ElementERNS_21CustomElementReactionE(%"class.blink::Element"* dereferenceable(104) %1, %"class.blink::CustomElementReaction"* dereferenceable(16) %24) #10
  br label %25

25:                                               ; preds = %13, %23, %17
  %26 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 2
  %27 = bitcast %"class.blink::Element"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #10
  store %"class.blink::Element"* %1, %"class.blink::Element"** %3, align 8
  %28 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %29, %31
  br i1 %32, label %48, label %33, !prof !2

33:                                               ; preds = %25
  %34 = ptrtoint %"class.blink::Element"* %1 to i64
  %35 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %26, i64 0, i32 0, i32 0, i32 0, i32 0
  %36 = load %"class.blink::Member"*, %"class.blink::Member"** %35, align 8
  %37 = zext i32 %29 to i64
  %38 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %36, i64 %37
  %39 = bitcast %"class.blink::Member"* %38 to i64*
  store atomic i64 %34, i64* %39 monotonic, align 8
  %40 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %45, label %42

42:                                               ; preds = %33
  %43 = bitcast %"class.blink::Element"* %1 to i8*
  %44 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %43) #10
  br label %45

45:                                               ; preds = %42, %33
  %46 = load i32, i32* %28, align 4
  %47 = add i32 %46, 1
  store i32 %47, i32* %28, align 4
  br label %50

48:                                               ; preds = %25
  %49 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %26, i64 0, i32 0
  call void @_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj1ENS1_13HeapAllocatorEE14AppendSlowCaseIPS3_EEvOT_(%"class.WTF::Vector"* %49, %"class.blink::Element"** nonnull dereferenceable(8) %3) #10
  br label %50

50:                                               ; preds = %45, %48
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #10
  %51 = bitcast %"class.blink::CustomElementDefinition"* %0 to i1 (%"class.blink::CustomElementDefinition"*, %"class.blink::Element"*)***
  %52 = load i1 (%"class.blink::CustomElementDefinition"*, %"class.blink::Element"*)**, i1 (%"class.blink::CustomElementDefinition"*, %"class.blink::Element"*)*** %51, align 8
  %53 = getelementptr inbounds i1 (%"class.blink::CustomElementDefinition"*, %"class.blink::Element"*)*, i1 (%"class.blink::CustomElementDefinition"*, %"class.blink::Element"*)** %52, i64 21
  %54 = load i1 (%"class.blink::CustomElementDefinition"*, %"class.blink::Element"*)*, i1 (%"class.blink::CustomElementDefinition"*, %"class.blink::Element"*)** %53, align 8
  %55 = call zeroext i1 %54(%"class.blink::CustomElementDefinition"* %0, %"class.blink::Element"* dereferenceable(104) %1) #10
  %56 = load i32, i32* %28, align 4
  %57 = add i32 %56, -1
  %58 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %26, i64 0, i32 0, i32 0, i32 0, i32 0
  %59 = load %"class.blink::Member"*, %"class.blink::Member"** %58, align 8
  %60 = zext i32 %57 to i64
  %61 = zext i32 %56 to i64
  %62 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %59, i64 %60
  %63 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %59, i64 %61
  %64 = bitcast %"class.blink::Member"* %62 to i8*
  %65 = ptrtoint %"class.blink::Member"* %63 to i64
  %66 = ptrtoint %"class.blink::Member"* %62 to i64
  %67 = sub i64 %65, %66
  call void @_ZN3WTF13AtomicMemzeroEPvm(i8* %64, i64 %67) #10
  store i32 %57, i32* %28, align 4
  br i1 %55, label %70, label %68

68:                                               ; preds = %50
  %69 = call dereferenceable(56) %"class.blink::CustomElementReactionStack"* @_ZN5blink26CustomElementReactionStack7CurrentEv() #10
  call void @_ZN5blink26CustomElementReactionStack10ClearQueueERNS_7ElementE(%"class.blink::CustomElementReactionStack"* %69, %"class.blink::Element"* dereferenceable(104) %1) #10
  br label %77

70:                                               ; preds = %50
  call void @_ZN5blink7Element26SetCustomElementDefinitionEPNS_23CustomElementDefinitionE(%"class.blink::Element"* %1, %"class.blink::CustomElementDefinition"* %0) #10
  %71 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 8
  %72 = load i8, i8* %71, align 4, !range !7
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %76, label %74

74:                                               ; preds = %70
  %75 = call dereferenceable(184) %"class.blink::ElementInternals"* @_ZN5blink7Element22EnsureElementInternalsEv(%"class.blink::Element"* %1) #10
  call void @_ZN5blink16ElementInternals10DidUpgradeEv(%"class.blink::ElementInternals"* %75) #10
  br label %76

76:                                               ; preds = %70, %74
  call void @_ZN5blink23CustomElementDefinition18AddDefaultStylesToERNS_7ElementE(%"class.blink::CustomElementDefinition"* %0, %"class.blink::Element"* dereferenceable(104) %1)
  br label %77

77:                                               ; preds = %2, %68, %76
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23CustomElementDefinition22EnqueueUpgradeReactionERNS_7ElementE(%"class.blink::CustomElementDefinition"*, %"class.blink::Element"* dereferenceable(104)) local_unnamed_addr #0 align 2 {
  %3 = tail call dereferenceable(16) %"class.blink::CustomElementReaction"* @_ZN5blink28CustomElementReactionFactory13CreateUpgradeERNS_23CustomElementDefinitionE(%"class.blink::CustomElementDefinition"* dereferenceable(96) %0) #10
  tail call void @_ZN5blink13CustomElement7EnqueueERNS_7ElementERNS_21CustomElementReactionE(%"class.blink::Element"* dereferenceable(104) %1, %"class.blink::CustomElementReaction"* dereferenceable(16) %3) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23CustomElementDefinition22ConstructionStackScopeC2ERS0_RNS_7ElementE(%"class.blink::CustomElementDefinition::ConstructionStackScope"* nocapture, %"class.blink::CustomElementDefinition"* dereferenceable(96), %"class.blink::Element"* dereferenceable(104)) unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::Element"*, align 8
  %5 = getelementptr inbounds %"class.blink::CustomElementDefinition::ConstructionStackScope", %"class.blink::CustomElementDefinition::ConstructionStackScope"* %0, i64 0, i32 0
  %6 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %1, i64 0, i32 2
  store %"class.blink::HeapVector"* %6, %"class.blink::HeapVector"** %5, align 8
  %7 = getelementptr inbounds %"class.blink::CustomElementDefinition::ConstructionStackScope", %"class.blink::CustomElementDefinition::ConstructionStackScope"* %0, i64 0, i32 1
  store %"class.blink::Element"* %2, %"class.blink::Element"** %7, align 8
  %8 = bitcast %"class.blink::Element"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #10
  store %"class.blink::Element"* %2, %"class.blink::Element"** %4, align 8
  %9 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %10, %12
  br i1 %13, label %29, label %14, !prof !2

14:                                               ; preds = %3
  %15 = ptrtoint %"class.blink::Element"* %2 to i64
  %16 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %17 = load %"class.blink::Member"*, %"class.blink::Member"** %16, align 8
  %18 = zext i32 %10 to i64
  %19 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %17, i64 %18
  %20 = bitcast %"class.blink::Member"* %19 to i64*
  store atomic i64 %15, i64* %20 monotonic, align 8
  %21 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %14
  %24 = bitcast %"class.blink::Element"* %2 to i8*
  %25 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %24) #10
  br label %26

26:                                               ; preds = %23, %14
  %27 = load i32, i32* %9, align 4
  %28 = add i32 %27, 1
  store i32 %28, i32* %9, align 4
  br label %31

29:                                               ; preds = %3
  %30 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %6, i64 0, i32 0
  call void @_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj1ENS1_13HeapAllocatorEE14AppendSlowCaseIPS3_EEvOT_(%"class.WTF::Vector"* %30, %"class.blink::Element"** nonnull dereferenceable(8) %4) #10
  br label %31

31:                                               ; preds = %26, %29
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #10
  %32 = bitcast %"class.blink::CustomElementDefinition::ConstructionStackScope"* %0 to %"class.WTF::Vector"**
  %33 = load %"class.WTF::Vector"*, %"class.WTF::Vector"** %32, align 8
  %34 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %33, i64 0, i32 0, i32 0, i32 2
  %35 = load i32, i32* %34, align 4
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds %"class.blink::CustomElementDefinition::ConstructionStackScope", %"class.blink::CustomElementDefinition::ConstructionStackScope"* %0, i64 0, i32 2
  store i64 %36, i64* %37, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23CustomElementDefinition22ConstructionStackScopeD2Ev(%"class.blink::CustomElementDefinition::ConstructionStackScope"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.blink::CustomElementDefinition::ConstructionStackScope"* %0 to %"class.WTF::Vector"**
  %3 = load %"class.WTF::Vector"*, %"class.WTF::Vector"** %2, align 8
  %4 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = add i32 %5, -1
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.blink::Member"*, %"class.blink::Member"** %7, align 8
  %9 = zext i32 %6 to i64
  %10 = zext i32 %5 to i64
  %11 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %8, i64 %9
  %12 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %8, i64 %10
  %13 = bitcast %"class.blink::Member"* %11 to i8*
  %14 = ptrtoint %"class.blink::Member"* %12 to i64
  %15 = ptrtoint %"class.blink::Member"* %11 to i64
  %16 = sub i64 %14, %15
  tail call void @_ZN3WTF13AtomicMemzeroEPvm(i8* %13, i64 %16) #10
  store i32 %6, i32* %4, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23CustomElementDefinition47EnqueueAttributeChangedCallbackForAllAttributesERNS_7ElementE(%"class.blink::CustomElementDefinition"*, %"class.blink::Element"* dereferenceable(104)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 3, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  %7 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 3, i32 0, i32 0
  %8 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %7, align 8
  %9 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 3, i32 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %8, i64 %11
  br i1 %6, label %32, label %13

13:                                               ; preds = %2
  %14 = icmp eq i32 %10, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %13, %19
  %16 = phi %"class.WTF::AtomicString"* [ %20, %19 ], [ %8, %13 ]
  %17 = bitcast %"class.WTF::AtomicString"* %16 to i64*
  %18 = load i64, i64* %17, align 8
  switch i64 %18, label %22 [
    i64 -1, label %19
    i64 0, label %19
  ]

19:                                               ; preds = %15, %15
  %20 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %16, i64 1
  %21 = icmp eq %"class.WTF::AtomicString"* %20, %12
  br i1 %21, label %32, label %15

22:                                               ; preds = %15, %13
  %23 = phi %"class.WTF::AtomicString"* [ %8, %13 ], [ %16, %15 ]
  %24 = icmp eq %"class.WTF::AtomicString"* %23, %12
  br i1 %24, label %32, label %25

25:                                               ; preds = %22
  %26 = bitcast %"class.WTF::StringView"* %3 to i8*
  %27 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 0
  %28 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  %29 = bitcast i8** %28 to %"class.WTF::StringImpl"**
  %30 = bitcast %"class.WTF::StringView"* %3 to i64*
  %31 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  br label %61

32:                                               ; preds = %19, %72, %84, %81, %2, %22
  %33 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %1, i64 0, i32 3, i32 0, i32 0
  %34 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %33, align 8
  %35 = icmp eq %"class.blink::ElementData"* %34, null
  br i1 %35, label %86, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %34, i64 0, i32 0, i32 0, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = and i32 %38, 1
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %48, label %41

41:                                               ; preds = %36
  %42 = bitcast %"class.blink::ElementData"* %34 to %"class.blink::UniqueElementData"*
  %43 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %34, i64 1, i32 1
  %44 = bitcast %"class.blink::Member.20"* %43 to %"class.blink::Attribute"**
  %45 = load %"class.blink::Attribute"*, %"class.blink::Attribute"** %44, align 8
  %46 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %42, i64 0, i32 2, i32 0, i32 0, i32 2
  %47 = load i32, i32* %46, align 4
  br label %53

48:                                               ; preds = %36
  %49 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %34, i64 1
  %50 = bitcast %"class.blink::ElementData"* %49 to %"class.blink::Attribute"*
  %51 = lshr i32 %38, 1
  %52 = and i32 %51, 268435455
  br label %53

53:                                               ; preds = %41, %48
  %54 = phi i32 [ %52, %48 ], [ %47, %41 ]
  %55 = phi %"class.blink::Attribute"* [ %50, %48 ], [ %45, %41 ]
  %56 = zext i32 %54 to i64
  %57 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %55, i64 %56
  %58 = icmp eq i32 %54, 0
  br i1 %58, label %86, label %59

59:                                               ; preds = %53
  %60 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  br label %87

61:                                               ; preds = %25, %84
  %62 = phi %"class.WTF::AtomicString"* [ %23, %25 ], [ %78, %84 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #10
  %63 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %62, i64 0, i32 0, i32 0, i32 0
  %64 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %63, align 8
  %65 = icmp eq %"class.WTF::StringImpl"* %64, null
  br i1 %65, label %66, label %68

66:                                               ; preds = %61
  store i8* null, i8** %28, align 8
  %67 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %67, i64* %30, align 8
  br label %72

68:                                               ; preds = %61
  store %"class.WTF::StringImpl"* %64, %"class.WTF::StringImpl"** %27, align 8
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 1
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 1
  store %"class.WTF::StringImpl"* %71, %"class.WTF::StringImpl"** %29, align 8
  br label %72

72:                                               ; preds = %66, %68
  %73 = phi i32 [ %70, %68 ], [ 0, %66 ]
  store i32 %73, i32* %31, align 8
  %74 = call i64 @_ZNK5blink7Element24WeakLowercaseIfNecessaryERKN3WTF10StringViewE(%"class.blink::Element"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %3) #10
  call void @_ZNK5blink7Element26SynchronizeAttributeHintedERKN3WTF12AtomicStringENS1_17AtomicStringTable10WeakResultE(%"class.blink::Element"* %1, %"class.WTF::AtomicString"* dereferenceable(8) %62, i64 %74) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #10
  %75 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %62, i64 1
  %76 = icmp eq %"class.WTF::AtomicString"* %75, %12
  br i1 %76, label %32, label %77

77:                                               ; preds = %72, %81
  %78 = phi %"class.WTF::AtomicString"* [ %82, %81 ], [ %75, %72 ]
  %79 = bitcast %"class.WTF::AtomicString"* %78 to i64*
  %80 = load i64, i64* %79, align 8
  switch i64 %80, label %84 [
    i64 -1, label %81
    i64 0, label %81
  ]

81:                                               ; preds = %77, %77
  %82 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %78, i64 1
  %83 = icmp eq %"class.WTF::AtomicString"* %82, %12
  br i1 %83, label %32, label %77

84:                                               ; preds = %77
  %85 = icmp eq %"class.WTF::AtomicString"* %78, %12
  br i1 %85, label %32, label %61

86:                                               ; preds = %147, %32, %53
  ret void

87:                                               ; preds = %59, %147
  %88 = phi %"class.blink::Attribute"* [ %55, %59 ], [ %148, %147 ]
  %89 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %88, i64 0, i32 0
  %90 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %7, align 8
  %91 = icmp eq %"class.WTF::AtomicString"* %90, null
  br i1 %91, label %147, label %92

92:                                               ; preds = %87
  %93 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %88, i64 0, i32 0, i32 0, i32 0
  %94 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %93, align 8
  %95 = load i32, i32* %9, align 8
  %96 = add i32 %95, -1
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %94, i64 0, i32 3, i32 0, i32 0, i32 0
  %99 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %98, align 8
  %100 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %99, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %101 = load atomic i32, i32* %100 monotonic, align 4
  %102 = lshr i32 %101, 8
  %103 = and i32 %102, %96
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %90, i64 %104
  %106 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %105, i64 0, i32 0, i32 0, i32 0
  %107 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %106, align 8
  %108 = icmp eq %"class.WTF::StringImpl"* %107, null
  br i1 %108, label %147, label %109

109:                                              ; preds = %92
  %110 = xor i32 %102, -1
  %111 = lshr i32 %101, 31
  %112 = add nsw i32 %111, %110
  %113 = shl i32 %112, 12
  %114 = xor i32 %113, %112
  %115 = lshr i32 %114, 7
  %116 = xor i32 %115, %114
  %117 = shl i32 %116, 2
  %118 = xor i32 %117, %116
  %119 = lshr i32 %118, 20
  %120 = xor i32 %119, %118
  %121 = or i32 %120, 1
  %122 = zext i32 %121 to i64
  br label %123

123:                                              ; preds = %133, %109
  %124 = phi %"class.WTF::StringImpl"* [ %107, %109 ], [ %140, %133 ]
  %125 = phi %"class.WTF::AtomicString"* [ %105, %109 ], [ %138, %133 ]
  %126 = phi i64 [ %104, %109 ], [ %137, %133 ]
  %127 = phi i64 [ 0, %109 ], [ %135, %133 ]
  %128 = bitcast %"class.WTF::AtomicString"* %125 to i8**
  %129 = load i8*, i8** %128, align 8
  %130 = icmp ne i8* %129, inttoptr (i64 -1 to i8*)
  %131 = icmp eq %"class.WTF::StringImpl"* %124, %99
  %132 = and i1 %131, %130
  br i1 %132, label %142, label %133

133:                                              ; preds = %123
  %134 = icmp eq i64 %127, 0
  %135 = select i1 %134, i64 %122, i64 %127
  %136 = add i64 %135, %126
  %137 = and i64 %136, %97
  %138 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %90, i64 %137
  %139 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %138, i64 0, i32 0, i32 0, i32 0
  %140 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %139, align 8
  %141 = icmp eq %"class.WTF::StringImpl"* %140, null
  br i1 %141, label %147, label %123

142:                                              ; preds = %123
  %143 = icmp eq %"class.WTF::AtomicString"* %125, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %142
  %145 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %88, i64 0, i32 1
  %146 = call dereferenceable(16) %"class.blink::CustomElementReaction"* @_ZN5blink28CustomElementReactionFactory22CreateAttributeChangedERNS_23CustomElementDefinitionERKNS_13QualifiedNameERKN3WTF12AtomicStringES9_(%"class.blink::CustomElementDefinition"* dereferenceable(96) %0, %"class.blink::QualifiedName"* dereferenceable(8) %89, %"class.WTF::AtomicString"* dereferenceable(8) %60, %"class.WTF::AtomicString"* dereferenceable(8) %145) #10
  call void @_ZN5blink13CustomElement7EnqueueERNS_7ElementERNS_21CustomElementReactionE(%"class.blink::Element"* dereferenceable(104) %1, %"class.blink::CustomElementReaction"* dereferenceable(16) %146) #10
  br label %147

147:                                              ; preds = %133, %142, %92, %87, %144
  %148 = getelementptr inbounds %"class.blink::Attribute", %"class.blink::Attribute"* %88, i64 1
  %149 = icmp eq %"class.blink::Attribute"* %148, %57
  br i1 %149, label %86, label %87
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23CustomElementDefinition24EnqueueConnectedCallbackERNS_7ElementE(%"class.blink::CustomElementDefinition"*, %"class.blink::Element"* dereferenceable(104)) local_unnamed_addr #0 align 2 {
  %3 = tail call dereferenceable(16) %"class.blink::CustomElementReaction"* @_ZN5blink28CustomElementReactionFactory15CreateConnectedERNS_23CustomElementDefinitionE(%"class.blink::CustomElementDefinition"* dereferenceable(96) %0) #10
  tail call void @_ZN5blink13CustomElement7EnqueueERNS_7ElementERNS_21CustomElementReactionE(%"class.blink::Element"* dereferenceable(104) %1, %"class.blink::CustomElementReaction"* dereferenceable(16) %3) #10
  ret void
}

declare dereferenceable(56) %"class.blink::CustomElementReactionStack"* @_ZN5blink26CustomElementReactionStack7CurrentEv() local_unnamed_addr #4

declare void @_ZN5blink26CustomElementReactionStack10ClearQueueERNS_7ElementE(%"class.blink::CustomElementReactionStack"*, %"class.blink::Element"* dereferenceable(104)) local_unnamed_addr #4

declare dereferenceable(184) %"class.blink::ElementInternals"* @_ZN5blink7Element22EnsureElementInternalsEv(%"class.blink::Element"*) local_unnamed_addr #4

declare void @_ZN5blink16ElementInternals10DidUpgradeEv(%"class.blink::ElementInternals"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23CustomElementDefinition18AddDefaultStylesToERNS_7ElementE(%"class.blink::CustomElementDefinition"*, %"class.blink::Element"* dereferenceable(104)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::AtomicString", align 8
  %4 = alloca %"class.blink::StyleChangeReasonForTracing", align 8
  %5 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase40is_custom_element_default_style_enabled_E, align 1, !range !7
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %122, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 9, i32 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %122, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 9
  %13 = getelementptr inbounds %"class.blink::HeapVector.34", %"class.blink::HeapVector.34"* %12, i64 0, i32 0, i32 0, i32 0, i32 0
  %14 = load %"class.blink::Member.40"*, %"class.blink::Member.40"** %13, align 8
  %15 = zext i32 %9 to i64
  %16 = getelementptr inbounds %"class.blink::Member.40", %"class.blink::Member.40"* %14, i64 %15
  %17 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %1, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %18 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %17, align 8
  %19 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %18, i64 0, i32 2, i32 0, i32 0
  br label %20

20:                                               ; preds = %11, %30
  %21 = phi %"class.blink::Member.40"* [ %14, %11 ], [ %31, %30 ]
  %22 = getelementptr inbounds %"class.blink::Member.40", %"class.blink::Member.40"* %21, i64 0, i32 0, i32 0
  %23 = load %"class.blink::CSSStyleSheet"*, %"class.blink::CSSStyleSheet"** %22, align 8
  %24 = getelementptr inbounds %"class.blink::CSSStyleSheet", %"class.blink::CSSStyleSheet"* %23, i64 0, i32 14, i32 0, i32 0
  %25 = load %"class.blink::Document"*, %"class.blink::Document"** %24, align 8
  %26 = icmp eq %"class.blink::Document"* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %20
  %28 = load %"class.blink::Document"*, %"class.blink::Document"** %19, align 8
  %29 = icmp eq %"class.blink::Document"* %25, %28
  br i1 %29, label %30, label %122

30:                                               ; preds = %20, %27
  %31 = getelementptr inbounds %"class.blink::Member.40", %"class.blink::Member.40"* %21, i64 1
  %32 = icmp eq %"class.blink::Member.40"* %31, %16
  br i1 %32, label %33, label %20

33:                                               ; preds = %30
  %34 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 5
  %35 = load i8, i8* %34, align 1, !range !7
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %79

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %1, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %39 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %38, align 8
  %40 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %39, i64 0, i32 2, i32 0, i32 0
  %41 = load %"class.blink::Document"*, %"class.blink::Document"** %40, align 8
  %42 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %41, i64 0, i32 59, i32 0, i32 0
  %43 = load %"class.blink::StyleEngine"*, %"class.blink::StyleEngine"** %42, align 8
  tail call void @_ZN5blink11StyleEngine31AddedCustomElementDefaultStylesERKNS_10HeapVectorINS_6MemberINS_13CSSStyleSheetEEELj0EEE(%"class.blink::StyleEngine"* %43, %"class.blink::HeapVector.34"* dereferenceable(16) %12) #10
  store i8 1, i8* %34, align 1
  %44 = bitcast %"class.WTF::AtomicString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #10
  %45 = tail call %"class.WTF::StringImpl"* @_ZNK5blink7Element28LocalNameForSelectorMatchingEv(%"class.blink::Element"* %1) #10
  %46 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %3, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %45, %"class.WTF::StringImpl"** %46, align 8
  %47 = load %"class.blink::Member.40"*, %"class.blink::Member.40"** %13, align 8
  %48 = load i32, i32* %8, align 4
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds %"class.blink::Member.40", %"class.blink::Member.40"* %47, i64 %49
  %51 = icmp eq i32 %48, 0
  br i1 %51, label %54, label %71

52:                                               ; preds = %71
  %53 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %46, align 8
  br label %54

54:                                               ; preds = %52, %37
  %55 = phi %"class.WTF::StringImpl"* [ %53, %52 ], [ %45, %37 ]
  %56 = icmp eq %"class.WTF::StringImpl"* %55, null
  br i1 %56, label %70, label %57

57:                                               ; preds = %54
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = and i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 0
  %63 = load i32, i32* %62, align 4
  br i1 %61, label %64, label %66

64:                                               ; preds = %57
  %65 = add i32 %63, -1
  store i32 %65, i32* %62, align 4
  br label %66

66:                                               ; preds = %64, %57
  %67 = phi i32 [ %65, %64 ], [ %63, %57 ]
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %55) #10
  br label %70

70:                                               ; preds = %54, %66, %69
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #10
  br label %79

71:                                               ; preds = %37, %71
  %72 = phi %"class.blink::Member.40"* [ %77, %71 ], [ %47, %37 ]
  %73 = getelementptr inbounds %"class.blink::Member.40", %"class.blink::Member.40"* %72, i64 0, i32 0, i32 0
  %74 = load %"class.blink::CSSStyleSheet"*, %"class.blink::CSSStyleSheet"** %73, align 8
  %75 = getelementptr inbounds %"class.blink::CSSStyleSheet", %"class.blink::CSSStyleSheet"* %74, i64 0, i32 15, i32 0
  %76 = call { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %75, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %3, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %3) #10
  %77 = getelementptr inbounds %"class.blink::Member.40", %"class.blink::Member.40"* %72, i64 1
  %78 = icmp eq %"class.blink::Member.40"* %77, %50
  br i1 %78, label %52, label %71

79:                                               ; preds = %33, %70
  %80 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %1, i64 0, i32 0, i32 0
  %81 = bitcast %"class.blink::StyleChangeReasonForTracing"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %81) #10
  %82 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %83 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %82, i64 0, i32 0, i32 0, i32 0
  %84 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %83, align 8
  %85 = icmp eq %"class.WTF::StringImpl"* %84, null
  br i1 %85, label %103, label %86

86:                                               ; preds = %79
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %88 = load atomic i32, i32* %87 monotonic, align 4
  %89 = and i32 %88, 2
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %103

91:                                               ; preds = %86
  %92 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 0
  %93 = load i32, i32* %92, align 4
  %94 = zext i32 %93 to i33
  %95 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %94, i33 1) #10
  %96 = extractvalue { i33, i1 } %95, 1
  %97 = extractvalue { i33, i1 } %95, 0
  %98 = icmp slt i33 %97, 0
  %99 = or i1 %96, %98
  br i1 %99, label %100, label %101, !prof !2

100:                                              ; preds = %91
  call void @llvm.trap() #10
  unreachable

101:                                              ; preds = %91
  %102 = trunc i33 %97 to i32
  store i32 %102, i32* %92, align 4
  br label %103

103:                                              ; preds = %79, %86, %101
  %104 = getelementptr inbounds %"class.blink::StyleChangeReasonForTracing", %"class.blink::StyleChangeReasonForTracing"* %4, i64 0, i32 0
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink19style_change_reason24kActiveStylesheetsUpdateE, i64 0, i64 0), i8** %104, align 8
  %105 = getelementptr inbounds %"class.blink::StyleChangeReasonForTracing", %"class.blink::StyleChangeReasonForTracing"* %4, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %84, %"class.WTF::StringImpl"** %105, align 8
  call void @_ZN5blink4Node19SetNeedsStyleRecalcENS_15StyleChangeTypeERKNS_27StyleChangeReasonForTracingE(%"class.blink::Node"* %80, i32 32768, %"class.blink::StyleChangeReasonForTracing"* nonnull dereferenceable(16) %4) #10
  %106 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %105, align 8
  %107 = icmp eq %"class.WTF::StringImpl"* %106, null
  br i1 %107, label %121, label %108

108:                                              ; preds = %103
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = load atomic i32, i32* %109 monotonic, align 4
  %111 = and i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 0
  %114 = load i32, i32* %113, align 4
  br i1 %112, label %115, label %117

115:                                              ; preds = %108
  %116 = add i32 %114, -1
  store i32 %116, i32* %113, align 4
  br label %117

117:                                              ; preds = %115, %108
  %118 = phi i32 [ %116, %115 ], [ %114, %108 ]
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %121

120:                                              ; preds = %117
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %106) #10
  br label %121

121:                                              ; preds = %103, %117, %120
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %81) #10
  br label %122

122:                                              ; preds = %27, %7, %2, %121
  ret void
}

declare void @_ZN5blink11StyleEngine31AddedCustomElementDefaultStylesERKNS_10HeapVectorINS_6MemberINS_13CSSStyleSheetEEELj0EEE(%"class.blink::StyleEngine"*, %"class.blink::HeapVector.34"* dereferenceable(16)) local_unnamed_addr #4

declare %"class.WTF::StringImpl"* @_ZNK5blink7Element28LocalNameForSelectorMatchingEv(%"class.blink::Element"*) local_unnamed_addr #4

declare void @_ZN5blink4Node19SetNeedsStyleRecalcENS_15StyleChangeTypeERKNS_27StyleChangeReasonForTracingE(%"class.blink::Node"*, i32, %"class.blink::StyleChangeReasonForTracing"* dereferenceable(16)) local_unnamed_addr #4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink23CustomElementDefinition27HasAttributeChangedCallbackERKNS_13QualifiedNameE(%"class.blink::CustomElementDefinition"* nocapture readonly, %"class.blink::QualifiedName"* nocapture readonly dereferenceable(8)) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 3, i32 0, i32 0
  %4 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %3, align 8
  %5 = icmp eq %"class.WTF::AtomicString"* %4, null
  br i1 %5, label %57, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %1, i64 0, i32 0, i32 0
  %8 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 3, i32 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = add i32 %10, -1
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %8, i64 0, i32 3, i32 0, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = lshr i32 %16, 8
  %18 = and i32 %17, %11
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 %19
  %21 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %20, i64 0, i32 0, i32 0, i32 0
  %22 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %21, align 8
  %23 = icmp eq %"class.WTF::StringImpl"* %22, null
  br i1 %23, label %57, label %24

24:                                               ; preds = %6
  %25 = xor i32 %17, -1
  %26 = lshr i32 %16, 31
  %27 = add nsw i32 %26, %25
  %28 = shl i32 %27, 12
  %29 = xor i32 %28, %27
  %30 = lshr i32 %29, 7
  %31 = xor i32 %30, %29
  %32 = shl i32 %31, 2
  %33 = xor i32 %32, %31
  %34 = lshr i32 %33, 20
  %35 = xor i32 %34, %33
  %36 = or i32 %35, 1
  %37 = zext i32 %36 to i64
  br label %38

38:                                               ; preds = %48, %24
  %39 = phi %"class.WTF::StringImpl"* [ %22, %24 ], [ %55, %48 ]
  %40 = phi %"class.WTF::AtomicString"* [ %20, %24 ], [ %53, %48 ]
  %41 = phi i64 [ %19, %24 ], [ %52, %48 ]
  %42 = phi i64 [ 0, %24 ], [ %50, %48 ]
  %43 = bitcast %"class.WTF::AtomicString"* %40 to i8**
  %44 = load i8*, i8** %43, align 8
  %45 = icmp ne i8* %44, inttoptr (i64 -1 to i8*)
  %46 = icmp eq %"class.WTF::StringImpl"* %39, %14
  %47 = and i1 %46, %45
  br i1 %47, label %57, label %48

48:                                               ; preds = %38
  %49 = icmp eq i64 %42, 0
  %50 = select i1 %49, i64 %37, i64 %42
  %51 = add i64 %50, %41
  %52 = and i64 %51, %12
  %53 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 %52
  %54 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %53, i64 0, i32 0, i32 0, i32 0
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8
  %56 = icmp eq %"class.WTF::StringImpl"* %55, null
  br i1 %56, label %57, label %38

57:                                               ; preds = %38, %48, %2, %6
  %58 = phi %"class.WTF::AtomicString"* [ null, %2 ], [ null, %6 ], [ null, %48 ], [ %40, %38 ]
  %59 = icmp ne %"class.WTF::AtomicString"* %58, null
  ret i1 %59
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink23CustomElementDefinition32HasStyleAttributeChangedCallbackEv(%"class.blink::CustomElementDefinition"* nocapture readonly) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.blink::CustomElementDefinition", %"class.blink::CustomElementDefinition"* %0, i64 0, i32 4
  %3 = load i8, i8* %2, align 8, !range !7
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

declare void @_ZN5blink13CustomElement7EnqueueERNS_7ElementERNS_21CustomElementReactionE(%"class.blink::Element"* dereferenceable(104), %"class.blink::CustomElementReaction"* dereferenceable(16)) local_unnamed_addr #4

declare dereferenceable(16) %"class.blink::CustomElementReaction"* @_ZN5blink28CustomElementReactionFactory13CreateUpgradeERNS_23CustomElementDefinitionE(%"class.blink::CustomElementDefinition"* dereferenceable(96)) local_unnamed_addr #4

declare dereferenceable(16) %"class.blink::CustomElementReaction"* @_ZN5blink28CustomElementReactionFactory15CreateConnectedERNS_23CustomElementDefinitionE(%"class.blink::CustomElementDefinition"* dereferenceable(96)) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23CustomElementDefinition27EnqueueDisconnectedCallbackERNS_7ElementE(%"class.blink::CustomElementDefinition"*, %"class.blink::Element"* dereferenceable(104)) local_unnamed_addr #0 align 2 {
  %3 = tail call dereferenceable(16) %"class.blink::CustomElementReaction"* @_ZN5blink28CustomElementReactionFactory18CreateDisconnectedERNS_23CustomElementDefinitionE(%"class.blink::CustomElementDefinition"* dereferenceable(96) %0) #10
  tail call void @_ZN5blink13CustomElement7EnqueueERNS_7ElementERNS_21CustomElementReactionE(%"class.blink::Element"* dereferenceable(104) %1, %"class.blink::CustomElementReaction"* dereferenceable(16) %3) #10
  ret void
}

declare dereferenceable(16) %"class.blink::CustomElementReaction"* @_ZN5blink28CustomElementReactionFactory18CreateDisconnectedERNS_23CustomElementDefinitionE(%"class.blink::CustomElementDefinition"* dereferenceable(96)) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23CustomElementDefinition22EnqueueAdoptedCallbackERNS_7ElementERNS_8DocumentES4_(%"class.blink::CustomElementDefinition"*, %"class.blink::Element"* dereferenceable(104), %"class.blink::Document"* dereferenceable(2848), %"class.blink::Document"* dereferenceable(2848)) local_unnamed_addr #0 align 2 {
  %5 = tail call dereferenceable(16) %"class.blink::CustomElementReaction"* @_ZN5blink28CustomElementReactionFactory13CreateAdoptedERNS_23CustomElementDefinitionERNS_8DocumentES4_(%"class.blink::CustomElementDefinition"* dereferenceable(96) %0, %"class.blink::Document"* dereferenceable(2848) %2, %"class.blink::Document"* dereferenceable(2848) %3) #10
  tail call void @_ZN5blink13CustomElement7EnqueueERNS_7ElementERNS_21CustomElementReactionE(%"class.blink::Element"* dereferenceable(104) %1, %"class.blink::CustomElementReaction"* dereferenceable(16) %5) #10
  ret void
}

declare dereferenceable(16) %"class.blink::CustomElementReaction"* @_ZN5blink28CustomElementReactionFactory13CreateAdoptedERNS_23CustomElementDefinitionERNS_8DocumentES4_(%"class.blink::CustomElementDefinition"* dereferenceable(96), %"class.blink::Document"* dereferenceable(2848), %"class.blink::Document"* dereferenceable(2848)) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23CustomElementDefinition31EnqueueAttributeChangedCallbackERNS_7ElementERKNS_13QualifiedNameERKN3WTF12AtomicStringES9_(%"class.blink::CustomElementDefinition"*, %"class.blink::Element"* dereferenceable(104), %"class.blink::QualifiedName"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %6 = tail call dereferenceable(16) %"class.blink::CustomElementReaction"* @_ZN5blink28CustomElementReactionFactory22CreateAttributeChangedERNS_23CustomElementDefinitionERKNS_13QualifiedNameERKN3WTF12AtomicStringES9_(%"class.blink::CustomElementDefinition"* dereferenceable(96) %0, %"class.blink::QualifiedName"* dereferenceable(8) %2, %"class.WTF::AtomicString"* dereferenceable(8) %3, %"class.WTF::AtomicString"* dereferenceable(8) %4) #10
  tail call void @_ZN5blink13CustomElement7EnqueueERNS_7ElementERNS_21CustomElementReactionE(%"class.blink::Element"* dereferenceable(104) %1, %"class.blink::CustomElementReaction"* dereferenceable(16) %6) #10
  ret void
}

declare dereferenceable(16) %"class.blink::CustomElementReaction"* @_ZN5blink28CustomElementReactionFactory22CreateAttributeChangedERNS_23CustomElementDefinitionERKNS_13QualifiedNameERKN3WTF12AtomicStringES9_(%"class.blink::CustomElementDefinition"* dereferenceable(96), %"class.blink::QualifiedName"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK5blink23CustomElementDefinition18NameInHeapSnapshotEv(%"class.blink::CustomElementDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0)
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj(%"class.WTF::HashTable"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %16, label %5

5:                                                ; preds = %2, %5
  %6 = phi i32 [ %9, %5 ], [ %1, %2 ]
  %7 = phi i32 [ %8, %5 ], [ %1, %2 ]
  %8 = or i32 %7, %6
  %9 = lshr i32 %6, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %5

11:                                               ; preds = %5
  %12 = shl i32 %8, 1
  %13 = add i32 %12, 2
  %14 = icmp ugt i32 %13, 8
  %15 = select i1 %14, i32 %13, i32 8
  br label %16

16:                                               ; preds = %11, %2
  %17 = phi i32 [ 8, %2 ], [ %15, %11 ]
  %18 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = icmp ugt i32 %17, %19
  br i1 %20, label %21, label %32

21:                                               ; preds = %16
  %22 = icmp slt i32 %17, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %21
  %24 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0), i32 1094, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.4, i64 0, i64 0)) #10
  %25 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #10
  br label %26

26:                                               ; preds = %21, %23
  %27 = zext i32 %17 to i64
  %28 = shl nuw nsw i64 %27, 3
  %29 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv, i64 0, i64 0)) #10
  call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 0, i64 %28, i1 false) #10
  %30 = bitcast i8* %29 to %"class.WTF::AtomicString"*
  %31 = call %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_(%"class.WTF::HashTable"* %0, %"class.WTF::AtomicString"* %30, i32 %17, %"class.WTF::AtomicString"* null) #10
  br label %32

32:                                               ; preds = %26, %16
  ret void
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_(%"class.WTF::HashTable"*, %"class.WTF::AtomicString"*, i32, %"class.WTF::AtomicString"*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"class.WTF::AtomicString"* %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  br i1 %8, label %10, label %13

10:                                               ; preds = %4
  %11 = bitcast %"class.WTF::HashTable"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %4
  %14 = add i32 %2, -1
  %15 = zext i32 %14 to i64
  %16 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %9, align 8
  %17 = ptrtoint %"class.WTF::AtomicString"* %16 to i64
  br label %61

18:                                               ; preds = %157
  %19 = bitcast %"class.WTF::HashTable"* %0 to i64*
  br label %20

20:                                               ; preds = %10, %18
  %21 = phi i64* [ %11, %10 ], [ %19, %18 ]
  %22 = phi i64 [ %12, %10 ], [ %158, %18 ]
  %23 = phi %"class.WTF::AtomicString"* [ null, %10 ], [ %161, %18 ]
  %24 = phi i32 [ 0, %10 ], [ %159, %18 ]
  store atomic i64 %5, i64* %21 monotonic, align 8
  store i32 %2, i32* %6, align 8
  %25 = inttoptr i64 %22 to %"class.WTF::AtomicString"*
  %26 = icmp eq i64 %22, 0
  br i1 %26, label %57, label %27

27:                                               ; preds = %20
  %28 = icmp eq i32 %24, 0
  br i1 %28, label %55, label %29

29:                                               ; preds = %27
  %30 = zext i32 %24 to i64
  br label %31

31:                                               ; preds = %52, %29
  %32 = phi i64 [ 0, %29 ], [ %53, %52 ]
  %33 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %25, i64 %32
  %34 = bitcast %"class.WTF::AtomicString"* %33 to i8**
  %35 = load i8*, i8** %34, align 8
  %36 = bitcast i8* %35 to %"class.WTF::StringImpl"*
  %37 = ptrtoint i8* %35 to i64
  switch i64 %37, label %38 [
    i64 -1, label %52
    i64 0, label %52
  ]

38:                                               ; preds = %31
  %39 = getelementptr inbounds i8, i8* %35, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = bitcast i8* %35 to i32*
  %45 = load i32, i32* %44, align 4
  br i1 %43, label %46, label %48

46:                                               ; preds = %38
  %47 = add i32 %45, -1
  store i32 %47, i32* %44, align 4
  br label %48

48:                                               ; preds = %46, %38
  %49 = phi i32 [ %47, %46 ], [ %45, %38 ]
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %48
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %36) #10
  br label %52

52:                                               ; preds = %51, %48, %31, %31
  %53 = add nuw nsw i64 %32, 1
  %54 = icmp eq i64 %53, %30
  br i1 %54, label %55, label %31

55:                                               ; preds = %52, %27
  %56 = inttoptr i64 %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %56) #10
  br label %57

57:                                               ; preds = %20, %55
  %58 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %59 = load i32, i32* %58, align 8
  %60 = and i32 %59, -2147483648
  store i32 %60, i32* %58, align 8
  ret %"class.WTF::AtomicString"* %23

61:                                               ; preds = %13, %157
  %62 = phi i64 [ %17, %13 ], [ %158, %157 ]
  %63 = phi i32 [ %7, %13 ], [ %159, %157 ]
  %64 = phi %"class.WTF::AtomicString"* [ %16, %13 ], [ %160, %157 ]
  %65 = phi %"class.WTF::AtomicString"* [ null, %13 ], [ %161, %157 ]
  %66 = phi i32 [ 0, %13 ], [ %162, %157 ]
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %64, i64 %67
  %69 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %68, i64 0, i32 0, i32 0, i32 0
  %70 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %69, align 8
  %71 = ptrtoint %"class.WTF::StringImpl"* %70 to i64
  switch i64 %71, label %72 [
    i64 -1, label %157
    i64 0, label %157
  ]

72:                                               ; preds = %61
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %70, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = load atomic i32, i32* %73 monotonic, align 4
  %75 = lshr i32 %74, 8
  %76 = and i32 %75, %14
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 %77
  %79 = ptrtoint %"class.WTF::AtomicString"* %78 to i64
  %80 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %78, i64 0, i32 0, i32 0, i32 0
  %81 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %80, align 8
  %82 = icmp eq %"class.WTF::StringImpl"* %81, null
  br i1 %82, label %99, label %83

83:                                               ; preds = %72
  %84 = xor i32 %75, -1
  %85 = lshr i32 %74, 31
  %86 = add nsw i32 %85, %84
  %87 = shl i32 %86, 12
  %88 = xor i32 %87, %86
  %89 = lshr i32 %88, 7
  %90 = xor i32 %89, %88
  %91 = shl i32 %90, 2
  %92 = xor i32 %91, %90
  %93 = lshr i32 %92, 20
  %94 = xor i32 %93, %92
  %95 = or i32 %94, 1
  %96 = zext i32 %95 to i64
  br label %105

97:                                               ; preds = %117
  %98 = ptrtoint %"class.WTF::AtomicString"* %123 to i64
  br label %99

99:                                               ; preds = %97, %72
  %100 = phi i64 [ %79, %72 ], [ %98, %97 ]
  %101 = phi %"class.WTF::AtomicString"* [ null, %72 ], [ %118, %97 ]
  %102 = icmp eq %"class.WTF::AtomicString"* %101, null
  %103 = ptrtoint %"class.WTF::AtomicString"* %101 to i64
  %104 = select i1 %102, i64 %100, i64 %103
  br label %128

105:                                              ; preds = %117, %83
  %106 = phi %"class.WTF::AtomicString"* [ null, %83 ], [ %118, %117 ]
  %107 = phi %"class.WTF::StringImpl"* [ %81, %83 ], [ %126, %117 ]
  %108 = phi i64 [ %79, %83 ], [ %124, %117 ]
  %109 = phi %"class.WTF::AtomicString"* [ %78, %83 ], [ %123, %117 ]
  %110 = phi i64 [ %77, %83 ], [ %122, %117 ]
  %111 = phi i64 [ 0, %83 ], [ %120, %117 ]
  %112 = bitcast %"class.WTF::AtomicString"* %109 to i8**
  %113 = load i8*, i8** %112, align 8
  %114 = icmp eq i8* %113, inttoptr (i64 -1 to i8*)
  br i1 %114, label %117, label %115

115:                                              ; preds = %105
  %116 = icmp eq %"class.WTF::StringImpl"* %107, %70
  br i1 %116, label %128, label %117

117:                                              ; preds = %115, %105
  %118 = phi %"class.WTF::AtomicString"* [ %106, %115 ], [ %109, %105 ]
  %119 = icmp eq i64 %111, 0
  %120 = select i1 %119, i64 %96, i64 %111
  %121 = add i64 %120, %110
  %122 = and i64 %121, %15
  %123 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 %122
  %124 = ptrtoint %"class.WTF::AtomicString"* %123 to i64
  %125 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %123, i64 0, i32 0, i32 0, i32 0
  %126 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %125, align 8
  %127 = icmp eq %"class.WTF::StringImpl"* %126, null
  br i1 %127, label %97, label %105

128:                                              ; preds = %115, %99
  %129 = phi i64 [ %104, %99 ], [ %108, %115 ]
  %130 = inttoptr i64 %129 to %"class.WTF::AtomicString"*
  %131 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %130, i64 0, i32 0, i32 0, i32 0
  %132 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %131, align 8
  %133 = icmp eq %"class.WTF::StringImpl"* %132, null
  br i1 %133, label %147, label %134

134:                                              ; preds = %128
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %132, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %136 = load atomic i32, i32* %135 monotonic, align 4
  %137 = and i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %132, i64 0, i32 0
  %140 = load i32, i32* %139, align 4
  br i1 %138, label %141, label %143

141:                                              ; preds = %134
  %142 = add i32 %140, -1
  store i32 %142, i32* %139, align 4
  br label %143

143:                                              ; preds = %141, %134
  %144 = phi i32 [ %142, %141 ], [ %140, %134 ]
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %147

146:                                              ; preds = %143
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %132) #10
  br label %147

147:                                              ; preds = %128, %143, %146
  %148 = bitcast %"class.WTF::AtomicString"* %68 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = inttoptr i64 %129 to i64*
  store i64 %149, i64* %150, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %69, align 8
  %151 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %9, align 8
  %152 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %151, i64 %67
  %153 = icmp eq %"class.WTF::AtomicString"* %152, %3
  %154 = select i1 %153, %"class.WTF::AtomicString"* %130, %"class.WTF::AtomicString"* %65
  %155 = load i32, i32* %6, align 8
  %156 = ptrtoint %"class.WTF::AtomicString"* %151 to i64
  br label %157

157:                                              ; preds = %61, %61, %147
  %158 = phi i64 [ %62, %61 ], [ %156, %147 ], [ %62, %61 ]
  %159 = phi i32 [ %63, %61 ], [ %155, %147 ], [ %63, %61 ]
  %160 = phi %"class.WTF::AtomicString"* [ %64, %61 ], [ %151, %147 ], [ %64, %61 ]
  %161 = phi %"class.WTF::AtomicString"* [ %65, %61 ], [ %154, %147 ], [ %65, %61 ]
  %162 = add i32 %66, 1
  %163 = icmp eq i32 %162, %159
  br i1 %163, label %18, label %61
}

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #4

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %4, align 8
  %6 = icmp eq %"class.WTF::AtomicString"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable"* %0, %"class.WTF::AtomicString"* null)
  %9 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"class.WTF::AtomicString"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = and i32 %20, %14
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %11, i64 %22
  %24 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %23, i64 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %72, label %27

27:                                               ; preds = %10
  %28 = xor i32 %20, -1
  %29 = lshr i32 %19, 31
  %30 = add nsw i32 %29, %28
  %31 = shl i32 %30, 12
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 7
  %34 = xor i32 %33, %32
  %35 = shl i32 %34, 2
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 20
  %38 = xor i32 %37, %36
  %39 = or i32 %38, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %27, %52
  %42 = phi %"class.WTF::StringImpl"* [ %25, %27 ], [ %60, %52 ]
  %43 = phi %"class.WTF::AtomicString"* [ %23, %27 ], [ %58, %52 ]
  %44 = phi %"class.WTF::AtomicString"* [ null, %27 ], [ %53, %52 ]
  %45 = phi i64 [ %22, %27 ], [ %57, %52 ]
  %46 = phi i64 [ 0, %27 ], [ %55, %52 ]
  %47 = bitcast %"class.WTF::AtomicString"* %43 to i8**
  %48 = load i8*, i8** %47, align 8
  %49 = icmp eq i8* %48, inttoptr (i64 -1 to i8*)
  br i1 %49, label %52, label %50

50:                                               ; preds = %41
  %51 = icmp eq %"class.WTF::StringImpl"* %42, %17
  br i1 %51, label %125, label %52

52:                                               ; preds = %41, %50
  %53 = phi %"class.WTF::AtomicString"* [ %44, %50 ], [ %43, %41 ]
  %54 = icmp eq i64 %46, 0
  %55 = select i1 %54, i64 %40, i64 %46
  %56 = add i64 %55, %45
  %57 = and i64 %56, %15
  %58 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %11, i64 %57
  %59 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %58, i64 0, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %62, label %41

62:                                               ; preds = %52
  %63 = icmp eq %"class.WTF::AtomicString"* %53, null
  br i1 %63, label %72, label %64

64:                                               ; preds = %62
  %65 = bitcast %"class.WTF::AtomicString"* %53 to i64*
  store i64 0, i64* %65, align 8
  %66 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %67 = load i32, i32* %66, align 8
  %68 = add i32 %67, 2147483647
  %69 = and i32 %68, 2147483647
  %70 = and i32 %67, -2147483648
  %71 = or i32 %69, %70
  store i32 %71, i32* %66, align 8
  br label %72

72:                                               ; preds = %10, %62, %64
  %73 = phi %"class.WTF::AtomicString"* [ %53, %64 ], [ %58, %62 ], [ %23, %10 ]
  %74 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %75 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %74, align 8
  %76 = icmp eq %"class.WTF::StringImpl"* %75, null
  br i1 %76, label %94, label %77

77:                                               ; preds = %72
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %79 = load atomic i32, i32* %78 monotonic, align 4
  %80 = and i32 %79, 2
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %94

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = zext i32 %84 to i33
  %86 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %85, i33 1) #10
  %87 = extractvalue { i33, i1 } %86, 1
  %88 = extractvalue { i33, i1 } %86, 0
  %89 = icmp slt i33 %88, 0
  %90 = or i1 %87, %89
  br i1 %90, label %91, label %92, !prof !2

91:                                               ; preds = %82
  tail call void @llvm.trap() #10
  unreachable

92:                                               ; preds = %82
  %93 = trunc i33 %88 to i32
  store i32 %93, i32* %83, align 4
  br label %94

94:                                               ; preds = %92, %77, %72
  %95 = ptrtoint %"class.WTF::StringImpl"* %75 to i64
  %96 = bitcast %"class.WTF::AtomicString"* %73 to i64*
  %97 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %73, i64 0, i32 0, i32 0, i32 0
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8
  store i64 %95, i64* %96, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %99, label %113, label %100

100:                                              ; preds = %94
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 0
  %106 = load i32, i32* %105, align 4
  br i1 %104, label %107, label %109

107:                                              ; preds = %100
  %108 = add i32 %106, -1
  store i32 %108, i32* %105, align 4
  br label %109

109:                                              ; preds = %107, %100
  %110 = phi i32 [ %108, %107 ], [ %106, %100 ]
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %98) #10
  br label %113

113:                                              ; preds = %94, %109, %112
  %114 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %115 = load i32, i32* %114, align 4
  %116 = add i32 %115, 1
  store i32 %116, i32* %114, align 4
  %117 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %118 = load i32, i32* %117, align 8
  %119 = add i32 %118, %116
  %120 = shl i32 %119, 1
  %121 = load i32, i32* %12, align 8
  %122 = icmp ult i32 %120, %121
  br i1 %122, label %125, label %123

123:                                              ; preds = %113
  %124 = tail call %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable"* %0, %"class.WTF::AtomicString"* %73)
  br label %125

125:                                              ; preds = %50, %113, %123
  %126 = phi i8 [ 1, %113 ], [ 1, %123 ], [ 0, %50 ]
  %127 = phi %"class.WTF::AtomicString"* [ %73, %113 ], [ %124, %123 ], [ %43, %50 ]
  %128 = insertvalue { %"class.WTF::AtomicString"*, i8 } undef, %"class.WTF::AtomicString"* %127, 0
  %129 = insertvalue { %"class.WTF::AtomicString"*, i8 } %128, i8 %126, 1
  ret { %"class.WTF::AtomicString"*, i8 } %129
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable"*, %"class.WTF::AtomicString"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #10
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #10
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* %22, i8* %23) #10
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #10
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #10
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 3
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv, i64 0, i64 0)) #10
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #10
  %36 = bitcast i8* %35 to %"class.WTF::AtomicString"*
  %37 = call %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_(%"class.WTF::HashTable"* %0, %"class.WTF::AtomicString"* %36, i32 %32, %"class.WTF::AtomicString"* %1) #10
  ret %"class.WTF::AtomicString"* %37
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #4

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #4

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIN5blink6MemberINS1_7ElementEEELj1ENS1_13HeapAllocatorEE22ReallyDeallocateBufferEPS4_(%"class.WTF::VectorBuffer"*, %"class.blink::Member"*) local_unnamed_addr #9 comdat align 2 {
  %3 = bitcast %"class.blink::Member"* %1 to i8*
  tail call void @_ZN5blink13HeapAllocator17FreeVectorBackingEPv(i8* %3) #10
  ret void
}

declare void @_ZN5blink13HeapAllocator17FreeVectorBackingEPv(i8*) local_unnamed_addr #4

declare %"class.blink::ContainerNode"* @_ZNK5blink4Node10parentNodeEv(%"class.blink::Node"*) local_unnamed_addr #4

declare void @_ZNK5blink7Element24SynchronizeAllAttributesEv(%"class.blink::Element"*) local_unnamed_addr #4

declare void @_ZNK5blink7Element26SynchronizeAttributeHintedERKN3WTF12AtomicStringENS1_17AtomicStringTable10WeakResultE(%"class.blink::Element"*, %"class.WTF::AtomicString"* dereferenceable(8), i64) local_unnamed_addr #4

declare i64 @_ZNK5blink7Element24WeakLowercaseIfNecessaryERKN3WTF10StringViewE(%"class.blink::Element"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #4

declare zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::Member"*
  %4 = getelementptr inbounds i8, i8* %1, i64 -2
  %5 = bitcast i8* %4 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = lshr i16 %6, 2
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %9, label %17, !prof !2

9:                                                ; preds = %2
  %10 = getelementptr inbounds i8, i8* %1, i64 -8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, -131072
  %13 = inttoptr i64 %12 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 4144
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 16
  br label %20

17:                                               ; preds = %2
  %18 = zext i16 %7 to i64
  %19 = shl nuw nsw i64 %18, 3
  br label %20

20:                                               ; preds = %17, %9
  %21 = phi i64 [ %16, %9 ], [ %19, %17 ]
  %22 = add i64 %21, -8
  %23 = lshr i64 %22, 3
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %41, label %25

25:                                               ; preds = %20
  %26 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  br label %27

27:                                               ; preds = %38, %25
  %28 = phi i64 [ 0, %25 ], [ %39, %38 ]
  %29 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %3, i64 %28
  %30 = bitcast %"class.blink::Member"* %29 to i64*
  %31 = load atomic i64, i64* %30 monotonic, align 8
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = inttoptr i64 %31 to i8*
  %35 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %26, align 8
  %36 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %35, i64 5
  %37 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %36, align 8
  tail call void %37(%"class.blink::Visitor"* %0, i8* nonnull %34, i8* nonnull %34, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_7ElementEE5TraceEPNS_7VisitorEPKv) #10
  br label %38

38:                                               ; preds = %33, %27
  %39 = add nuw nsw i64 %28, 1
  %40 = icmp eq i64 %39, %23
  br i1 %40, label %41, label %27

41:                                               ; preds = %38, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_7ElementEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::Element"*
  %4 = bitcast i8* %1 to void (%"class.blink::Element"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::Element"*, %"class.blink::Visitor"*)**, void (%"class.blink::Element"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::Element"*, %"class.blink::Visitor"*)*, void (%"class.blink::Element"*, %"class.blink::Visitor"*)** %5, i64 5
  %7 = load void (%"class.blink::Element"*, %"class.blink::Visitor"*)*, void (%"class.blink::Element"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::Element"* %3, %"class.blink::Visitor"* %0) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17HeapVectorBackingINS_6MemberINS_13CSSStyleSheetEEEN3WTF12VectorTraitsIS4_EEEEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::Member.40"*
  %4 = getelementptr inbounds i8, i8* %1, i64 -2
  %5 = bitcast i8* %4 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = lshr i16 %6, 2
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %9, label %17, !prof !2

9:                                                ; preds = %2
  %10 = getelementptr inbounds i8, i8* %1, i64 -8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, -131072
  %13 = inttoptr i64 %12 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 4144
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 16
  br label %20

17:                                               ; preds = %2
  %18 = zext i16 %7 to i64
  %19 = shl nuw nsw i64 %18, 3
  br label %20

20:                                               ; preds = %17, %9
  %21 = phi i64 [ %16, %9 ], [ %19, %17 ]
  %22 = add i64 %21, -8
  %23 = lshr i64 %22, 3
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %41, label %25

25:                                               ; preds = %20
  %26 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  br label %27

27:                                               ; preds = %38, %25
  %28 = phi i64 [ 0, %25 ], [ %39, %38 ]
  %29 = getelementptr inbounds %"class.blink::Member.40", %"class.blink::Member.40"* %3, i64 %28
  %30 = bitcast %"class.blink::Member.40"* %29 to i64*
  %31 = load atomic i64, i64* %30 monotonic, align 8
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = inttoptr i64 %31 to i8*
  %35 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %26, align 8
  %36 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %35, i64 5
  %37 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %36, align 8
  tail call void %37(%"class.blink::Visitor"* %0, i8* nonnull %34, i8* nonnull %34, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_13CSSStyleSheetEE5TraceEPNS_7VisitorEPKv) #10
  br label %38

38:                                               ; preds = %33, %27
  %39 = add nuw nsw i64 %28, 1
  %40 = icmp eq i64 %39, %23
  br i1 %40, label %41, label %27

41:                                               ; preds = %38, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_13CSSStyleSheetEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::CSSStyleSheet"*
  tail call void @_ZNK5blink13CSSStyleSheet5TraceEPNS_7VisitorE(%"class.blink::CSSStyleSheet"* %3, %"class.blink::Visitor"* %0) #10
  ret void
}

declare void @_ZNK5blink13CSSStyleSheet5TraceEPNS_7VisitorE(%"class.blink::CSSStyleSheet"*, %"class.blink::Visitor"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::HTMLElement"* @_ZN5blink25MakeGarbageCollectedTraitINS_11HTMLElementEE4CallIJNS_13QualifiedNameERNS_8DocumentEEEEPS1_DpOT_(%"class.blink::QualifiedName"* dereferenceable(8), %"class.blink::Document"* dereferenceable(2848)) local_unnamed_addr #0 comdat align 2 {
  %3 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** bitcast ([0 x i8]* @_ZN5blink11ThreadState26main_thread_state_storage_E to %"class.blink::ThreadHeap"**), align 8
  %4 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %8 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %7, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #10
  br label %9

9:                                                ; preds = %6, %2
  %10 = phi i32 [ %4, %2 ], [ %8, %6 ]
  %11 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %3, i64 0, i32 19, i64 6
  %12 = bitcast %"class.blink::BaseArena"** %11 to %"class.blink::NormalPageArena"**
  %13 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %12, align 8
  %14 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 4
  %15 = load i64, i64* %14, align 8
  %16 = icmp ult i64 %15, 112
  br i1 %16, label %47, label %17, !prof !2

17:                                               ; preds = %9
  %18 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 3
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 112
  store i8* %20, i8** %18, align 8
  %21 = add i64 %15, -112
  store i64 %21, i64* %14, align 8
  %22 = bitcast i8* %19 to i32*
  store i32 0, i32* %22, align 4
  %23 = getelementptr inbounds i8, i8* %19, i64 4
  %24 = bitcast i8* %23 to i16*
  %25 = trunc i32 %10 to i16
  %26 = shl i16 %25, 2
  store atomic i16 %26, i16* %24 monotonic, align 2
  %27 = getelementptr inbounds i8, i8* %19, i64 6
  %28 = bitcast i8* %27 to i16*
  store i16 56, i16* %28, align 2
  %29 = ptrtoint i8* %19 to i64
  %30 = and i64 %29, -131072
  %31 = inttoptr i64 %30 to i8*
  %32 = getelementptr inbounds i8, i8* %31, i64 4400
  %33 = bitcast i8* %32 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %34 = bitcast i8* %32 to i64*
  %35 = load i64, i64* %34, align 16
  %36 = sub i64 %29, %35
  %37 = lshr i64 %36, 3
  %38 = lshr i64 %36, 6
  %39 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %33, i64 0, i32 0, i32 1, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = trunc i64 %37 to i32
  %42 = and i32 %41, 7
  %43 = shl i32 1, %42
  %44 = trunc i32 %43 to i8
  %45 = or i8 %40, %44
  store atomic i8 %45, i8* %39 release, align 1
  %46 = getelementptr inbounds i8, i8* %19, i64 8
  br label %50

47:                                               ; preds = %9
  %48 = zext i32 %10 to i64
  %49 = tail call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %13, i64 112, i64 %48) #10
  br label %50

50:                                               ; preds = %17, %47
  %51 = phi i8* [ %46, %17 ], [ %49, %47 ]
  %52 = bitcast i8* %51 to %"class.blink::HTMLElement"*
  %53 = bitcast i8* %51 to %"class.blink::Element"*
  tail call void @_ZN5blink7ElementC2ERKNS_13QualifiedNameEPNS_8DocumentENS_4Node16ConstructionTypeE(%"class.blink::Element"* %53, %"class.blink::QualifiedName"* dereferenceable(8) %0, %"class.blink::Document"* %1, i32 1026) #10
  %54 = bitcast i8* %51 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [172 x i8*], [3 x i8*] }, { [172 x i8*], [3 x i8*] }* @_ZTVN5blink11HTMLElementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %54, align 8
  %55 = getelementptr inbounds i8, i8* %51, i64 80
  %56 = bitcast i8* %55 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [172 x i8*], [3 x i8*] }, { [172 x i8*], [3 x i8*] }* @_ZTVN5blink11HTMLElementE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %56, align 8
  %57 = getelementptr inbounds i8, i8* %51, i64 -4
  %58 = bitcast i8* %57 to i16*
  %59 = load atomic i16, i16* %58 monotonic, align 2
  %60 = or i16 %59, 1
  store atomic i16 %60, i16* %58 release, align 2
  ret %"class.blink::HTMLElement"* %52
}

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #4

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_15ScriptWrappableEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::ScriptWrappable"*
  %4 = bitcast i8* %1 to void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)**, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)** %5, i64 5
  %7 = load void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)*, void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::ScriptWrappable"* %3, %"class.blink::Visitor"* %0) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_15ScriptWrappableEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::ScriptWrappable"*
  %3 = bitcast i8* %0 to void (%"class.blink::ScriptWrappable"*)***
  %4 = load void (%"class.blink::ScriptWrappable"*)**, void (%"class.blink::ScriptWrappable"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.blink::ScriptWrappable"*)*, void (%"class.blink::ScriptWrappable"*)** %4, i64 1
  %6 = load void (%"class.blink::ScriptWrappable"*)*, void (%"class.blink::ScriptWrappable"*)** %5, align 8
  tail call void %6(%"class.blink::ScriptWrappable"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_15ScriptWrappableEE7GetNameEPKv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::NameClient"*
  %3 = bitcast i8* %0 to i8* (%"class.blink::NameClient"*)***
  %4 = load i8* (%"class.blink::NameClient"*)**, i8* (%"class.blink::NameClient"*)*** %3, align 8
  %5 = load i8* (%"class.blink::NameClient"*)*, i8* (%"class.blink::NameClient"*)** %4, align 8
  %6 = tail call i8* %5(%"class.blink::NameClient"* %2) #10
  %7 = insertvalue { i8*, i8 } undef, i8* %6, 0
  %8 = insertvalue { i8*, i8 } %7, i8 0, 1
  ret { i8*, i8 } %8
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #4

declare void @_ZN5blink7ElementC2ERKNS_13QualifiedNameEPNS_8DocumentENS_4Node16ConstructionTypeE(%"class.blink::Element"*, %"class.blink::QualifiedName"* dereferenceable(8), %"class.blink::Document"*, i32) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::HTMLElement"* @_ZN5blink25MakeGarbageCollectedTraitINS_11HTMLElementEE4CallIJRKNS_13QualifiedNameERNS_8DocumentEEEEPS1_DpOT_(%"class.blink::QualifiedName"* dereferenceable(8), %"class.blink::Document"* dereferenceable(2848)) local_unnamed_addr #0 comdat align 2 {
  %3 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** bitcast ([0 x i8]* @_ZN5blink11ThreadState26main_thread_state_storage_E to %"class.blink::ThreadHeap"**), align 8
  %4 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %8 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %7, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_15ScriptWrappableEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #10
  br label %9

9:                                                ; preds = %6, %2
  %10 = phi i32 [ %4, %2 ], [ %8, %6 ]
  %11 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %3, i64 0, i32 19, i64 6
  %12 = bitcast %"class.blink::BaseArena"** %11 to %"class.blink::NormalPageArena"**
  %13 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %12, align 8
  %14 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 4
  %15 = load i64, i64* %14, align 8
  %16 = icmp ult i64 %15, 112
  br i1 %16, label %47, label %17, !prof !2

17:                                               ; preds = %9
  %18 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 3
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 112
  store i8* %20, i8** %18, align 8
  %21 = add i64 %15, -112
  store i64 %21, i64* %14, align 8
  %22 = bitcast i8* %19 to i32*
  store i32 0, i32* %22, align 4
  %23 = getelementptr inbounds i8, i8* %19, i64 4
  %24 = bitcast i8* %23 to i16*
  %25 = trunc i32 %10 to i16
  %26 = shl i16 %25, 2
  store atomic i16 %26, i16* %24 monotonic, align 2
  %27 = getelementptr inbounds i8, i8* %19, i64 6
  %28 = bitcast i8* %27 to i16*
  store i16 56, i16* %28, align 2
  %29 = ptrtoint i8* %19 to i64
  %30 = and i64 %29, -131072
  %31 = inttoptr i64 %30 to i8*
  %32 = getelementptr inbounds i8, i8* %31, i64 4400
  %33 = bitcast i8* %32 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %34 = bitcast i8* %32 to i64*
  %35 = load i64, i64* %34, align 16
  %36 = sub i64 %29, %35
  %37 = lshr i64 %36, 3
  %38 = lshr i64 %36, 6
  %39 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %33, i64 0, i32 0, i32 1, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = trunc i64 %37 to i32
  %42 = and i32 %41, 7
  %43 = shl i32 1, %42
  %44 = trunc i32 %43 to i8
  %45 = or i8 %40, %44
  store atomic i8 %45, i8* %39 release, align 1
  %46 = getelementptr inbounds i8, i8* %19, i64 8
  br label %50

47:                                               ; preds = %9
  %48 = zext i32 %10 to i64
  %49 = tail call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %13, i64 112, i64 %48) #10
  br label %50

50:                                               ; preds = %17, %47
  %51 = phi i8* [ %46, %17 ], [ %49, %47 ]
  %52 = bitcast i8* %51 to %"class.blink::HTMLElement"*
  %53 = bitcast i8* %51 to %"class.blink::Element"*
  tail call void @_ZN5blink7ElementC2ERKNS_13QualifiedNameEPNS_8DocumentENS_4Node16ConstructionTypeE(%"class.blink::Element"* %53, %"class.blink::QualifiedName"* dereferenceable(8) %0, %"class.blink::Document"* %1, i32 1026) #10
  %54 = bitcast i8* %51 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [172 x i8*], [3 x i8*] }, { [172 x i8*], [3 x i8*] }* @_ZTVN5blink11HTMLElementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %54, align 8
  %55 = getelementptr inbounds i8, i8* %51, i64 80
  %56 = bitcast i8* %55 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [172 x i8*], [3 x i8*] }, { [172 x i8*], [3 x i8*] }* @_ZTVN5blink11HTMLElementE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %56, align 8
  %57 = getelementptr inbounds i8, i8* %51, i64 -4
  %58 = bitcast i8* %57 to i16*
  %59 = load atomic i16, i16* %58 monotonic, align 2
  %60 = or i16 %59, 1
  store atomic i16 %60, i16* %58 release, align 2
  ret %"class.blink::HTMLElement"* %52
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj1ENS1_13HeapAllocatorEE14AppendSlowCaseIPS3_EEvOT_(%"class.WTF::Vector"*, %"class.blink::Element"** dereferenceable(8)) local_unnamed_addr #9 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  tail call void @_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj1ENS1_13HeapAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"* %0, i32 %5) #10
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.blink::Member"*, %"class.blink::Member"** %6, align 8
  %8 = load i32, i32* %3, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %7, i64 %9
  %11 = bitcast %"class.blink::Element"** %1 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.blink::Member"* %10 to i64*
  store atomic i64 %12, i64* %13 monotonic, align 8
  %14 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %2
  %17 = inttoptr i64 %12 to i8*
  %18 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %17) #10
  br label %19

19:                                               ; preds = %2, %16
  %20 = load i32, i32* %3, align 4
  %21 = add i32 %20, 1
  store i32 %21, i32* %3, align 4
  ret void
}

declare zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj1ENS1_13HeapAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #10
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #10
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.16, i64 0, i64 0), i8* %15, i8* %16) #10
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.17, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #10
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #10
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #10
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  call void @_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj1ENS1_13HeapAllocatorEE15ReserveCapacityEj(%"class.WTF::Vector"* %0, i32 %27)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj1ENS1_13HeapAllocatorEE15ReserveCapacityEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, %1
  br i1 %6, label %7, label %75, !prof !3

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.blink::Member"*, %"class.blink::Member"** %8, align 8
  %10 = icmp eq %"class.blink::Member"* %9, null
  br i1 %10, label %11, label %30

11:                                               ; preds = %7
  %12 = icmp ugt i32 %1, 1
  br i1 %12, label %13, label %26

13:                                               ; preds = %11
  %14 = zext i32 %1 to i64
  %15 = tail call i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_7ElementEEEEEmm(i64 %14) #10
  %16 = lshr i64 %15, 3
  %17 = tail call %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE4CallEm(i64 %16) #10
  %18 = ptrtoint %"class.blink::HeapVectorBacking"* %17 to i64
  %19 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %18, i64* %19 monotonic, align 8
  %20 = trunc i64 %16 to i32
  store i32 %20, i32* %4, align 8
  %21 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %75, label %23

23:                                               ; preds = %13
  %24 = getelementptr inbounds %"class.blink::HeapVectorBacking", %"class.blink::HeapVectorBacking"* %17, i64 0, i32 0
  %25 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %24) #10
  br label %75

26:                                               ; preds = %11
  %27 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %28 = ptrtoint i8* %27 to i64
  %29 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %28, i64* %29 monotonic, align 8
  store i32 1, i32* %4, align 8
  br label %75

30:                                               ; preds = %7
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %32 = bitcast i8* %31 to %"class.blink::Member"*
  %33 = icmp eq %"class.blink::Member"* %9, %32
  br i1 %33, label %49, label %34

34:                                               ; preds = %30
  %35 = icmp ult i32 %1, 2
  br i1 %35, label %41, label %36

36:                                               ; preds = %34
  %37 = zext i32 %1 to i64
  %38 = tail call i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_7ElementEEEEEmm(i64 %37) #10
  %39 = load %"class.blink::Member"*, %"class.blink::Member"** %8, align 8
  %40 = icmp eq %"class.blink::Member"* %39, null
  br i1 %40, label %49, label %41

41:                                               ; preds = %34, %36
  %42 = phi i64 [ %38, %36 ], [ 8, %34 ]
  %43 = phi %"class.blink::Member"* [ %39, %36 ], [ %9, %34 ]
  %44 = bitcast %"class.blink::Member"* %43 to i8*
  %45 = tail call zeroext i1 @_ZN5blink13HeapAllocator19ExpandVectorBackingEPvm(i8* nonnull %44, i64 %42) #10
  br i1 %45, label %46, label %49

46:                                               ; preds = %41
  %47 = lshr i64 %42, 3
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %4, align 8
  br label %75

49:                                               ; preds = %30, %36, %41
  %50 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %51 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %50, i64 0, i32 1
  %52 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %51) #10
  %53 = icmp eq i8* %52, null
  br i1 %53, label %54, label %56, !prof !2

54:                                               ; preds = %49
  %55 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %51, i8* %55) #10
  br label %56

56:                                               ; preds = %54, %49
  %57 = phi i8* [ %55, %54 ], [ %52, %49 ]
  %58 = bitcast i8* %57 to %"class.blink::ThreadState"**
  %59 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %58, align 8
  %60 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %59, i64 0, i32 6
  %61 = load i8, i8* %60, align 8, !range !7
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %67, label %63

63:                                               ; preds = %56
  %64 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %59, i64 0, i32 16
  %65 = load i32, i32* %64, align 4
  %66 = icmp eq i32 %65, 1
  br i1 %66, label %71, label %67

67:                                               ; preds = %56, %63
  %68 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %59, i64 0, i32 13
  %69 = load i64, i64* %68, align 8
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %74, label %71

71:                                               ; preds = %63, %67
  %72 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %72) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.17, i64 0, i64 0), i32 1810, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.18, i64 0, i64 0)) #10
  %73 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %72) #10
  br label %74

74:                                               ; preds = %67, %71
  call void @_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj1ENS1_13HeapAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %1)
  br label %75

75:                                               ; preds = %46, %26, %23, %13, %2, %74
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink6MemberINS1_7ElementEEELj1ENS1_13HeapAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp ult i32 %1, 2
  br i1 %3, label %4, label %43

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.blink::Member"*, %"class.blink::Member"** %5, align 8
  %7 = icmp eq %"class.blink::Member"* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = bitcast i8* %8 to %"class.blink::Member"*
  %10 = icmp eq %"class.blink::Member"* %6, %9
  %11 = or i1 %10, %7
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = ptrtoint i8* %8 to i64
  %14 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 1, i32* %15, align 8
  br label %102

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0
  %21 = ptrtoint i8* %8 to i64
  %22 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %21, i64* %22 monotonic, align 8
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 1, i32* %23, align 8
  %24 = icmp eq i8* %8, null
  %25 = bitcast %"class.blink::Member"* %6 to i8*
  %26 = shl nuw nsw i64 %19, 3
  br i1 %24, label %42, label %27, !prof !2

27:                                               ; preds = %16
  tail call void @_ZN3WTF17AtomicWriteMemcpyEPvPKvm(i8* nonnull %8, i8* nonnull %25, i64 %26) #10
  %28 = icmp eq i32 %18, 0
  br i1 %28, label %42, label %29

29:                                               ; preds = %27, %39
  %30 = phi i64 [ %32, %39 ], [ %19, %27 ]
  %31 = phi %"class.blink::Member"* [ %40, %39 ], [ %9, %27 ]
  %32 = add nsw i64 %30, -1
  %33 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %29
  %36 = bitcast %"class.blink::Member"* %31 to i8**
  %37 = load i8*, i8** %36, align 8
  %38 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %37) #10
  br label %39

39:                                               ; preds = %35, %29
  %40 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %31, i64 1
  %41 = icmp eq i64 %32, 0
  br i1 %41, label %42, label %29

42:                                               ; preds = %39, %16, %27
  tail call void @_ZN3WTF13AtomicMemzeroEPvm(i8* %25, i64 %26) #10
  tail call void @_ZN3WTF12VectorBufferIN5blink6MemberINS1_7ElementEEELj1ENS1_13HeapAllocatorEE22ReallyDeallocateBufferEPS4_(%"class.WTF::VectorBuffer"* %20, %"class.blink::Member"* %6) #10
  br label %102

43:                                               ; preds = %2
  %44 = zext i32 %1 to i64
  %45 = tail call i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_7ElementEEEEEmm(i64 %44) #10
  %46 = lshr i64 %45, 3
  %47 = tail call %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE4CallEm(i64 %46) #10
  %48 = ptrtoint %"class.blink::HeapVectorBacking"* %47 to i64
  %49 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %50 = load %"class.blink::Member"*, %"class.blink::Member"** %49, align 8
  %51 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %52 = icmp ne %"class.blink::HeapVectorBacking"* %47, null
  %53 = icmp ne %"class.blink::Member"* %50, null
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %81, !prof !3

55:                                               ; preds = %43
  %56 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %57 = bitcast i8* %56 to %"class.blink::Member"*
  %58 = icmp ne %"class.blink::Member"* %50, %57
  %59 = load i32, i32* %51, align 4
  %60 = zext i32 %59 to i64
  %61 = bitcast %"class.blink::Member"* %50 to i8*
  %62 = shl nuw nsw i64 %60, 3
  %63 = getelementptr inbounds %"class.blink::HeapVectorBacking", %"class.blink::HeapVectorBacking"* %47, i64 0, i32 0
  tail call void @_ZN3WTF17AtomicWriteMemcpyEPvPKvm(i8* nonnull %63, i8* nonnull %61, i64 %62) #10
  %64 = icmp eq i32 %59, 0
  %65 = or i1 %58, %64
  br i1 %65, label %81, label %66

66:                                               ; preds = %55
  %67 = bitcast %"class.blink::HeapVectorBacking"* %47 to %"class.blink::Member"*
  br label %68

68:                                               ; preds = %66, %78
  %69 = phi i64 [ %71, %78 ], [ %60, %66 ]
  %70 = phi %"class.blink::Member"* [ %79, %78 ], [ %67, %66 ]
  %71 = add nsw i64 %69, -1
  %72 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %78, label %74

74:                                               ; preds = %68
  %75 = bitcast %"class.blink::Member"* %70 to i8**
  %76 = load i8*, i8** %75, align 8
  %77 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %76) #10
  br label %78

78:                                               ; preds = %74, %68
  %79 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %70, i64 1
  %80 = icmp eq i64 %71, 0
  br i1 %80, label %81, label %68

81:                                               ; preds = %78, %43, %55
  %82 = bitcast %"class.WTF::Vector"* %0 to i8**
  %83 = load i8*, i8** %82, align 8
  %84 = load i32, i32* %51, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @_ZN3WTF13AtomicMemzeroEPvm(i8* %83, i64 %86) #10
  %87 = load %"class.blink::Member"*, %"class.blink::Member"** %49, align 8
  %88 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %89 = bitcast i8* %88 to %"class.blink::Member"*
  %90 = icmp eq %"class.blink::Member"* %87, %89
  br i1 %90, label %93, label %91, !prof !3

91:                                               ; preds = %81
  %92 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIN5blink6MemberINS1_7ElementEEELj1ENS1_13HeapAllocatorEE22ReallyDeallocateBufferEPS4_(%"class.WTF::VectorBuffer"* %92, %"class.blink::Member"* %87) #10
  br label %93

93:                                               ; preds = %81, %91
  %94 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %48, i64* %94 monotonic, align 8
  %95 = trunc i64 %46 to i32
  %96 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %95, i32* %96, align 8
  %97 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %102, label %99

99:                                               ; preds = %93
  %100 = getelementptr inbounds %"class.blink::HeapVectorBacking", %"class.blink::HeapVectorBacking"* %47, i64 0, i32 0
  %101 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %100) #10
  br label %102

102:                                              ; preds = %99, %93, %42, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN5blink13HeapAllocator13QuantizedSizeINS_6MemberINS_7ElementEEEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 16777216
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 16777216) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.19, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.20, i64 0, i64 0), i32 39, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = shl i64 %0, 3
  ret i64 %20
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::HeapVectorBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE4CallEm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp eq i64 %0, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 0) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.21, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.22, i64 0, i64 0), i32 86, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = shl i64 %0, 3
  %21 = call i8* @_ZN5blink17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS3_EEE14AllocateObjectIS7_EEPvm(i64 %20)
  %22 = bitcast i8* %21 to %"class.blink::HeapVectorBacking"*
  %23 = getelementptr inbounds i8, i8* %21, i64 -4
  %24 = bitcast i8* %23 to i16*
  %25 = load atomic i16, i16* %24 monotonic, align 2
  %26 = or i16 %25, 1
  store atomic i16 %26, i16* %24 release, align 2
  ret %"class.blink::HeapVectorBacking"* %22
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS3_EEE14AllocateObjectIS7_EEPvm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** bitcast ([0 x i8]* @_ZN5blink11ThreadState26main_thread_state_storage_E to %"class.blink::ThreadHeap"**), align 8
  %6 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %10 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %9, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #10
  br label %11

11:                                               ; preds = %1, %8
  %12 = phi i32 [ %6, %1 ], [ %10, %8 ]
  %13 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %5, i64 0, i32 19, i64 4
  %14 = bitcast %"class.blink::BaseArena"** %13 to %"class.blink::NormalPageArena"**
  %15 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %14, align 8
  %16 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #10
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #10
  %19 = icmp ult i64 %0, -8
  br i1 %19, label %20, label %21

20:                                               ; preds = %11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #10
  store i8* null, i8** %17, align 8
  br label %31

21:                                               ; preds = %11
  %22 = add nsw i64 %0, 8
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %22) #10
  %24 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.14, i64 0, i64 0), i8* %23, i8* %24) #10
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #10
  store i8* %26, i8** %17, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %31, label %28

28:                                               ; preds = %21
  %29 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.15, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #10
  %30 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #10
  br label %31

31:                                               ; preds = %20, %21, %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  %32 = add i64 %0, 15
  %33 = and i64 %32, -8
  %34 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %15, i64 0, i32 4
  %35 = load i64, i64* %34, align 8
  %36 = icmp ult i64 %35, %33
  br i1 %36, label %69, label %37, !prof !2

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %15, i64 0, i32 3
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 %33
  store i8* %40, i8** %38, align 8
  %41 = sub i64 %35, %33
  store i64 %41, i64* %34, align 8
  %42 = bitcast i8* %39 to i32*
  store i32 0, i32* %42, align 4
  %43 = getelementptr inbounds i8, i8* %39, i64 4
  %44 = bitcast i8* %43 to i16*
  %45 = trunc i32 %12 to i16
  %46 = shl i16 %45, 2
  store atomic i16 %46, i16* %44 monotonic, align 2
  %47 = lshr exact i64 %33, 1
  %48 = trunc i64 %47 to i16
  %49 = getelementptr inbounds i8, i8* %39, i64 6
  %50 = bitcast i8* %49 to i16*
  store i16 %48, i16* %50, align 2
  %51 = ptrtoint i8* %39 to i64
  %52 = and i64 %51, -131072
  %53 = inttoptr i64 %52 to i8*
  %54 = getelementptr inbounds i8, i8* %53, i64 4400
  %55 = bitcast i8* %54 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %56 = bitcast i8* %54 to i64*
  %57 = load i64, i64* %56, align 16
  %58 = sub i64 %51, %57
  %59 = lshr i64 %58, 3
  %60 = lshr i64 %58, 6
  %61 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %55, i64 0, i32 0, i32 1, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = trunc i64 %59 to i32
  %64 = and i32 %63, 7
  %65 = shl i32 1, %64
  %66 = trunc i32 %65 to i8
  %67 = or i8 %62, %66
  store atomic i8 %67, i8* %61 release, align 1
  %68 = getelementptr inbounds i8, i8* %39, i64 8
  br label %72

69:                                               ; preds = %31
  %70 = zext i32 %12 to i64
  %71 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %15, i64 %33, i64 %70) #10
  br label %72

72:                                               ; preds = %37, %69
  %73 = phi i8* [ %68, %37 ], [ %71, %69 ]
  ret i8* %73
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17HeapVectorBackingINS_6MemberINS_7ElementEEEN3WTF12VectorTraitsIS4_EEEEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.23, i64 0, i64 0), i8 1 }
}

declare zeroext i1 @_ZN5blink13HeapAllocator19ExpandVectorBackingEPvm(i8*, i64) local_unnamed_addr #4

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #4

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #4

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #4

declare void @_ZN3WTF17AtomicWriteMemcpyEPvPKvm(i8*, i8*, i64) local_unnamed_addr #4

declare void @_ZN3WTF13AtomicMemzeroEPvm(i8*, i64) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZN5blink18CreateElementFlags15ByCreateElementEv: argument 0"}
!6 = distinct !{!6, !"_ZN5blink18CreateElementFlags15ByCreateElementEv"}
!7 = !{i8 0, i8 2}
