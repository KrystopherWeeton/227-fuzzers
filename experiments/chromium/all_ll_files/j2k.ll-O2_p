; ModuleID = '../../third_party/pdfium/third_party/libopenjpeg20/j2k.c'
source_filename = "../../third_party/pdfium/third_party/libopenjpeg20/j2k.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.j2k_prog_order = type { i32, [5 x i8] }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.opj_dec_memory_marker_handler = type { i32, i32, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)* }
%struct.opj_j2k = type { i32, %union.anon, %struct.opj_image*, %struct.opj_image*, %struct.opj_cp, %struct.opj_procedure_list*, %struct.opj_procedure_list*, %struct.opj_codestream_index*, i32, %struct.opj_tcd*, %struct.opj_thread_pool_t*, i32, i32, i32 }
%union.anon = type { %struct.opj_j2k_dec }
%struct.opj_j2k_dec = type { i32, %struct.opj_tcp*, i8*, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32*, i8 }
%struct.opj_tcp = type { i32, i32, i32, i32, i32, [100 x float], i32, [32 x %struct.opj_poc], i32, %struct.opj_ppx_struct*, i8*, i8*, i32, i32, [100 x float], %struct.opj_tccp*, i32, i32, i8*, i32, double*, float*, float*, %struct.opj_mct_data*, i32, i32, %struct.opj_simple_mcc_decorrelation_data*, i32, i32, i8 }
%struct.opj_poc = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [5 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.opj_ppx_struct = type { i8*, i32 }
%struct.opj_tccp = type { i32, i32, i32, i32, i32, i32, i32, [97 x %struct.opj_stepsize], i32, i32, [33 x i32], [33 x i32], i32 }
%struct.opj_stepsize = type { i32, i32 }
%struct.opj_mct_data = type { i32, i32, i32, i8*, i32 }
%struct.opj_simple_mcc_decorrelation_data = type { i32, i32, %struct.opj_mct_data*, %struct.opj_mct_data*, i8 }
%struct.opj_image = type { i32, i32, i32, i32, i32, i32, %struct.opj_image_comp*, i8*, i32 }
%struct.opj_image_comp = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, i16 }
%struct.opj_cp = type { i16, i32, i32, i32, i32, i8*, i32, i32, i32, %struct.opj_ppx_struct*, i8*, i32, i32, i8*, i8*, i8*, i32, i32, i32, %struct.opj_tcp*, %union.anon.0, i8 }
%union.anon.0 = type { %struct.opj_encoding_param }
%struct.opj_encoding_param = type { i32, i32, i32*, i8, i8 }
%struct.opj_procedure_list = type { i32, i32, void ()** }
%struct.opj_codestream_index = type { i64, i64, i64, i32, %struct.opj_marker_info*, i32, i32, %struct.opj_tile_index* }
%struct.opj_marker_info = type { i16, i64, i32 }
%struct.opj_tile_index = type { i32, i32, i32, i32, %struct.opj_tp_index*, i32, %struct.opj_marker_info*, i32, i32, %struct.opj_packet_info* }
%struct.opj_tp_index = type { i64, i64, i64 }
%struct.opj_packet_info = type { i64, i64, i64, double }
%struct.opj_tcd = type { i32, i32, i32, i32, i32, %struct.opj_tcd_image*, %struct.opj_image*, %struct.opj_cp*, %struct.opj_tcp*, i32, i8, %struct.opj_thread_pool_t*, i32, i32, i32, i32, i32, i32* }
%struct.opj_tcd_image = type { %struct.opj_tcd_tile* }
%struct.opj_tcd_tile = type { i32, i32, i32, i32, i32, %struct.opj_tcd_tilecomp*, i32, double, [100 x double], i32 }
%struct.opj_tcd_tilecomp = type { i32, i32, i32, i32, i32, i32, i32, %struct.opj_tcd_resolution*, i32, i32*, i32, i64, i64, i32*, i32, i32, i32, i32, i32 }
%struct.opj_tcd_resolution = type { i32, i32, i32, i32, i32, i32, i32, [3 x %struct.opj_tcd_band], i32, i32, i32, i32 }
%struct.opj_tcd_band = type { i32, i32, i32, i32, i32, %struct.opj_tcd_precinct*, i32, i32, float }
%struct.opj_tcd_precinct = type { i32, i32, i32, i32, i32, i32, %union.anon.1, i32, %struct.opj_tgt_tree*, %struct.opj_tgt_tree* }
%union.anon.1 = type { %struct.opj_tcd_cblk_enc* }
%struct.opj_tcd_cblk_enc = type { i8*, %struct.opj_tcd_layer*, %struct.opj_tcd_pass*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.opj_tcd_layer = type { i32, i32, double, i8* }
%struct.opj_tcd_pass = type { i32, double, i32, i8 }
%struct.opj_tgt_tree = type { i32, i32, i32, %struct.opj_tgt_node*, i32 }
%struct.opj_tgt_node = type { %struct.opj_tgt_node*, i32, i32, i32 }
%struct.opj_thread_pool_t = type opaque
%struct.opj_event_mgr = type { i8*, i8*, i8*, void (i8*, i8*)*, void (i8*, i8*)*, void (i8*, i8*)* }
%struct.opj_dparameters = type { i32, i32, [4096 x i8], [4096 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.opj_cparameters = type { i32, i32, i32, i32, i32, i32, i32, i32, i32*, i8*, i32, i32, [32 x %struct.opj_poc], i32, i32, [100 x float], [100 x float], i32, i32, i32, i32, i32, i32, i32, i32, [33 x i32], [33 x i32], [4096 x i8], [4096 x i8], i32, [4096 x i8], i32, i32, i32, i32, i32, i32, i32, i32, [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32], i32, i32, i32, i32, [16 x i32], [16 x i32], i32, i32, i32, i8, i8, i8, i32, i8*, i32, i16 }
%struct.opj_stream_private = type { i8*, void (i8*)*, i64, i64 (i8*, i64, i8*)*, i64 (i8*, i64, i8*)*, i64 (i64, i8*)*, i32 (i64, i8*)*, i8*, i8*, i64 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)*, i32 (%struct.opj_stream_private*, i64, %struct.opj_event_mgr*)*, i64, i64, i64, i32 }
%struct.opj_codestream_info_v2 = type { i32, i32, i32, i32, i32, i32, i32, %struct.opj_tile_v2_info, %struct.opj_tile_v2_info* }
%struct.opj_tile_v2_info = type { i32, i32, i32, i32, i32, %struct.opj_tccp_info* }
%struct.opj_tccp_info = type { i32, i32, i32, i32, i32, i32, i32, i32, [97 x i32], [97 x i32], i32, i32, [33 x i32], [33 x i32] }
%struct.opj_j2k_enc = type { i32, i32, i64, i8*, i8*, i32, i8*, i32, i8*, i32, i32, i32 }
%struct.opj_tcd_marker_info = type { i32, i32, i32* }
%struct.opj_codestream_info = type { double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, i32, %struct.opj_marker_info*, i32, i32, i32, i32, %struct.opj_tile_info* }
%struct.opj_tile_info = type { double*, i32, i32, i32, i32, [33 x i32], [33 x i32], [33 x i32], [33 x i32], %struct.opj_packet_info*, i32, double, i32, %struct.opj_marker_info*, i32, i32, %struct.opj_tp_info* }
%struct.opj_tp_info = type { i32, i32, i32, i32, i32 }

@j2k_prog_order_list = internal constant [6 x %struct.j2k_prog_order] [%struct.j2k_prog_order { i32 4, [5 x i8] c"CPRL\00" }, %struct.j2k_prog_order { i32 0, [5 x i8] c"LRCP\00" }, %struct.j2k_prog_order { i32 3, [5 x i8] c"PCRL\00" }, %struct.j2k_prog_order { i32 1, [5 x i8] c"RLCP\00" }, %struct.j2k_prog_order { i32 2, [5 x i8] c"RPCL\00" }, %struct.j2k_prog_order { i32 -1, [5 x i8] zeroinitializer }], align 16
@.str = private unnamed_addr constant [56 x i8] c"Invalid number of resolutions : %d not in range [1,%d]\0A\00", align 1
@.str.1 = private unnamed_addr constant [71 x i8] c"Invalid value for cblockw_init: %d not a power of 2 in range [4,1024]\0A\00", align 1
@.str.2 = private unnamed_addr constant [75 x i8] c"Invalid value for cblockh_init: %d not a power of 2 not in range [4,1024]\0A\00", align 1
@.str.3 = private unnamed_addr constant [66 x i8] c"Invalid value for cblockw_init * cblockh_init: should be <= 4096\0A\00", align 1
@.str.4 = private unnamed_addr constant [137 x i8] c"Deprecated fields cp_cinema or cp_rsiz are used\0APlease consider using only the rsiz field\0ASee openjpeg.h documentation for more details\0A\00", align 1
@.str.5 = private unnamed_addr constant [102 x i8] c"tcp_rates[%d]=%f (corrected as %f) should be strictly lesser than tcp_rates[%d]=%f (corrected as %f)\0A\00", align 1
@.str.6 = private unnamed_addr constant [84 x i8] c"tcp_rates[%d]=%f (corrected as %f) should be strictly lesser than tcp_rates[%d]=%f\0A\00", align 1
@.str.7 = private unnamed_addr constant [84 x i8] c"tcp_rates[%d]=%f should be strictly lesser than tcp_rates[%d]=%f (corrected as %f)\0A\00", align 1
@.str.8 = private unnamed_addr constant [66 x i8] c"tcp_rates[%d]=%f should be strictly lesser than tcp_rates[%d]=%f\0A\00", align 1
@.str.9 = private unnamed_addr constant [77 x i8] c"tcp_distoratio[%d]=%f should be strictly greater than tcp_distoratio[%d]=%f\0A\00", align 1
@.str.10 = private unnamed_addr constant [92 x i8] c"The desired maximum codestream size has limited\0Aat least one of the desired quality layers\0A\00", align 1
@.str.11 = private unnamed_addr constant [62 x i8] c"JPEG 2000 Scalable Digital Cinema profiles not yet supported\0A\00", align 1
@.str.12 = private unnamed_addr constant [55 x i8] c"JPEG 2000 Long Term Storage profile not yet supported\0A\00", align 1
@.str.13 = private unnamed_addr constant [48 x i8] c"JPEG 2000 Broadcast profiles not yet supported\0A\00", align 1
@.str.14 = private unnamed_addr constant [88 x i8] c"JPEG 2000 Part-2 profile defined\0Abut no Part-2 extension enabled.\0AProfile set to NONE.\0A\00", align 1
@.str.15 = private unnamed_addr constant [59 x i8] c"Unsupported Part-2 extension enabled\0AProfile set to NONE.\0A\00", align 1
@.str.16 = private unnamed_addr constant [72 x i8] c"Not enough memory to allocate copy of user encoding parameters matrix \0A\00", align 1
@.str.17 = private unnamed_addr constant [54 x i8] c"Not enough memory to allocate copy of comment string\0A\00", align 1
@opj_j2k_setup_encoder.comment = internal constant [29 x i8] c"Created by OpenJPEG version \00", align 16
@.str.18 = private unnamed_addr constant [46 x i8] c"Not enough memory to allocate comment string\0A\00", align 1
@.str.19 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.20 = private unnamed_addr constant [20 x i8] c"Invalid tile width\0A\00", align 1
@.str.21 = private unnamed_addr constant [21 x i8] c"Invalid tile height\0A\00", align 1
@.str.22 = private unnamed_addr constant [54 x i8] c"Not enough memory to allocate tile coding parameters\0A\00", align 1
@.str.23 = private unnamed_addr constant [28 x i8] c"Invalid compno0 for POC %d\0A\00", align 1
@.str.24 = private unnamed_addr constant [64 x i8] c"Not enough memory to allocate tile component coding parameters\0A\00", align 1
@.str.25 = private unnamed_addr constant [43 x i8] c"Not enough memory to allocate temp buffer\0A\00", align 1
@.str.26 = private unnamed_addr constant [58 x i8] c"Not enough memory to allocate encoder MCT coding matrix \0A\00", align 1
@.str.27 = private unnamed_addr constant [60 x i8] c"Not enough memory to allocate encoder MCT decoding matrix \0A\00", align 1
@.str.28 = private unnamed_addr constant [48 x i8] c"Failed to inverse encoder MCT decoding matrix \0A\00", align 1
@.str.29 = private unnamed_addr constant [50 x i8] c"Not enough memory to allocate encoder MCT norms \0A\00", align 1
@.str.30 = private unnamed_addr constant [34 x i8] c"Failed to setup j2k mct encoding\0A\00", align 1
@.str.31 = private unnamed_addr constant [71 x i8] c"Cannot perform MCT on components with different sizes. Disabling MCT.\0A\00", align 1
@MCT_ELEMENT_SIZE = internal unnamed_addr constant [4 x i32] [i32 2, i32 4, i32 4, i32 8], align 16
@j2k_mct_write_functions_from_float = internal unnamed_addr constant [4 x void (i8*, i8*, i32)*] [void (i8*, i8*, i32)* @opj_j2k_write_float_to_int16, void (i8*, i8*, i32)* @opj_j2k_write_float_to_int32, void (i8*, i8*, i32)* @opj_j2k_write_float_to_float, void (i8*, i8*, i32)* @opj_j2k_write_float_to_float64], align 16
@.str.32 = private unnamed_addr constant [18 x i8] c"Stream too short\0A\00", align 1
@.str.33 = private unnamed_addr constant [26 x i8] c"Inconsistent marker size\0A\00", align 1
@.str.34 = private unnamed_addr constant [43 x i8] c"Marker is not compliant with its position\0A\00", align 1
@.str.35 = private unnamed_addr constant [45 x i8] c"Marker size inconsistent with stream length\0A\00", align 1
@.str.36 = private unnamed_addr constant [34 x i8] c"Not enough memory to read header\0A\00", align 1
@.str.37 = private unnamed_addr constant [29 x i8] c"Not sure how that happened.\0A\00", align 1
@.str.38 = private unnamed_addr constant [47 x i8] c"Fail to read the current marker segment (%#x)\0A\00", align 1
@.str.39 = private unnamed_addr constant [36 x i8] c"Not enough memory to add tl marker\0A\00", align 1
@.str.40 = private unnamed_addr constant [46 x i8] c"opj_j2k_apply_nb_tile_parts_correction error\0A\00", align 1
@.str.41 = private unnamed_addr constant [41 x i8] c"Non conformant codestream TPsot==TNsot.\0A\00", align 1
@.str.42 = private unnamed_addr constant [97 x i8] c"Tile %u has TPsot == 0 and TNsot == 0, but no other tile-parts were found. EOC is also missing.\0A\00", align 1
@.str.43 = private unnamed_addr constant [26 x i8] c"Failed to merge PPT data\0A\00", align 1
@.str.44 = private unnamed_addr constant [34 x i8] c"Cannot decode tile, memory error\0A\00", align 1
@.str.45 = private unnamed_addr constant [39 x i8] c"Header of tile %d / %d has been read.\0A\00", align 1
@.str.46 = private unnamed_addr constant [19 x i8] c"Failed to decode.\0A\00", align 1
@.str.47 = private unnamed_addr constant [30 x i8] c"Stream does not end with EOC\0A\00", align 1
@.str.48 = private unnamed_addr constant [32 x i8] c"Stream too short, expected SOT\0A\00", align 1
@.str.49 = private unnamed_addr constant [73 x i8] c"opj_read_header() should be called before opj_set_decoded_components().\0A\00", align 1
@.str.50 = private unnamed_addr constant [29 x i8] c"Invalid component index: %u\0A\00", align 1
@.str.51 = private unnamed_addr constant [39 x i8] c"Component index %u used several times\0A\00", align 1
@.str.52 = private unnamed_addr constant [81 x i8] c"Need to decode the main header before begin to decode the remaining codestream.\0A\00", align 1
@.str.53 = private unnamed_addr constant [69 x i8] c"No decoded area parameters, set the decoded area to the whole image\0A\00", align 1
@.str.54 = private unnamed_addr constant [66 x i8] c"Left position of the decoded area (region_x0=%d) should be >= 0.\0A\00", align 1
@.str.55 = private unnamed_addr constant [87 x i8] c"Left position of the decoded area (region_x0=%d) is outside the image area (Xsiz=%d).\0A\00", align 1
@.str.56 = private unnamed_addr constant [88 x i8] c"Left position of the decoded area (region_x0=%d) is outside the image area (XOsiz=%d).\0A\00", align 1
@.str.57 = private unnamed_addr constant [64 x i8] c"Up position of the decoded area (region_y0=%d) should be >= 0.\0A\00", align 1
@.str.58 = private unnamed_addr constant [85 x i8] c"Up position of the decoded area (region_y0=%d) is outside the image area (Ysiz=%d).\0A\00", align 1
@.str.59 = private unnamed_addr constant [86 x i8] c"Up position of the decoded area (region_y0=%d) is outside the image area (YOsiz=%d).\0A\00", align 1
@.str.60 = private unnamed_addr constant [66 x i8] c"Right position of the decoded area (region_x1=%d) should be > 0.\0A\00", align 1
@.str.61 = private unnamed_addr constant [89 x i8] c"Right position of the decoded area (region_x1=%d) is outside the image area (XOsiz=%d).\0A\00", align 1
@.str.62 = private unnamed_addr constant [88 x i8] c"Right position of the decoded area (region_x1=%d) is outside the image area (Xsiz=%d).\0A\00", align 1
@.str.63 = private unnamed_addr constant [67 x i8] c"Bottom position of the decoded area (region_y1=%d) should be > 0.\0A\00", align 1
@.str.64 = private unnamed_addr constant [90 x i8] c"Bottom position of the decoded area (region_y1=%d) is outside the image area (YOsiz=%d).\0A\00", align 1
@.str.65 = private unnamed_addr constant [89 x i8] c"Bottom position of the decoded area (region_y1=%d) is outside the image area (Ysiz=%d).\0A\00", align 1
@.str.66 = private unnamed_addr constant [38 x i8] c"Setting decoding area to %d,%d,%d,%d\0A\00", align 1
@.str.67 = private unnamed_addr constant [12 x i8] c"Wrong flag\0A\00", align 1
@stdout = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.68 = private unnamed_addr constant [37 x i8] c"[DEV] Dump an image_header struct {\0A\00", align 1
@.str.69 = private unnamed_addr constant [14 x i8] c"Image info {\0A\00", align 1
@.str.70 = private unnamed_addr constant [17 x i8] c"%s x0=%d, y0=%d\0A\00", align 1
@.str.71 = private unnamed_addr constant [17 x i8] c"%s x1=%d, y1=%d\0A\00", align 1
@.str.72 = private unnamed_addr constant [16 x i8] c"%s numcomps=%d\0A\00", align 1
@.str.73 = private unnamed_addr constant [20 x i8] c"%s\09 component %d {\0A\00", align 1
@.str.74 = private unnamed_addr constant [5 x i8] c"%s}\0A\00", align 1
@.str.75 = private unnamed_addr constant [3 x i8] c"}\0A\00", align 1
@.str.76 = private unnamed_addr constant [42 x i8] c"[DEV] Dump an image_comp_header struct {\0A\00", align 1
@.str.77 = private unnamed_addr constant [17 x i8] c"%s dx=%d, dy=%d\0A\00", align 1
@.str.78 = private unnamed_addr constant [12 x i8] c"%s prec=%d\0A\00", align 1
@.str.79 = private unnamed_addr constant [12 x i8] c"%s sgnd=%d\0A\00", align 1
@.str.80 = private unnamed_addr constant [38 x i8] c"We need an image previously created.\0A\00", align 1
@.str.81 = private unnamed_addr constant [44 x i8] c"Image has less components than codestream.\0A\00", align 1
@.str.82 = private unnamed_addr constant [61 x i8] c"Tile index provided by the user is incorrect %d (max = %d) \0A\00", align 1
@.str.83 = private unnamed_addr constant [76 x i8] c"Resolution factor is greater than the maximum resolution in the component.\0A\00", align 1
@.str.84 = private unnamed_addr constant [5 x i8] c"PLT=\00", align 1
@.str.85 = private unnamed_addr constant [8 x i8] c"PLT=YES\00", align 1
@.str.86 = private unnamed_addr constant [7 x i8] c"PLT=NO\00", align 1
@.str.87 = private unnamed_addr constant [31 x i8] c"Invalid value for option: %s.\0A\00", align 1
@.str.88 = private unnamed_addr constant [21 x i8] c"Invalid option: %s.\0A\00", align 1
@.str.89 = private unnamed_addr constant [38 x i8] c"Error allocating tile component data.\00", align 1
@.str.90 = private unnamed_addr constant [39 x i8] c"Not enough memory to encode all tiles\0A\00", align 1
@.str.91 = private unnamed_addr constant [47 x i8] c"Size mismatch between tile data and sent data.\00", align 1
@.str.92 = private unnamed_addr constant [33 x i8] c"Failed to allocate image header.\00", align 1
@.str.93 = private unnamed_addr constant [57 x i8] c"Error while opj_j2k_pre_write_tile with tile index = %d\0A\00", align 1
@.str.94 = private unnamed_addr constant [58 x i8] c"Error while opj_j2k_post_write_tile with tile index = %d\0A\00", align 1
@.str.95 = private unnamed_addr constant [16 x i8] c"OPJ_NUM_THREADS\00", align 1
@.str.96 = private unnamed_addr constant [9 x i8] c"ALL_CPUS\00", align 1
@.str.97 = private unnamed_addr constant [173 x i8] c"JPEG 2000 Profile-3 and 4 (2k/4k dc profile) requires:\0A1 single quality layer-> Number of layers forced to 1 (rather than %d)\0A-> Rate of the last layer (%3.1f) will be used\00", align 1
@.str.98 = private unnamed_addr constant [146 x i8] c"JPEG 2000 Profile-3 (2k dc profile) requires:\0ANumber of decomposition levels <= 5\0A-> Number of decomposition levels forced to 5 (rather than %d)\0A\00", align 1
@.str.99 = private unnamed_addr constant [154 x i8] c"JPEG 2000 Profile-4 (4k dc profile) requires:\0ANumber of decomposition levels >= 1 && <= 6\0A-> Number of decomposition levels forced to 1 (rather than %d)\0A\00", align 1
@.str.100 = private unnamed_addr constant [154 x i8] c"JPEG 2000 Profile-4 (4k dc profile) requires:\0ANumber of decomposition levels >= 1 && <= 6\0A-> Number of decomposition levels forced to 6 (rather than %d)\0A\00", align 1
@.str.101 = private unnamed_addr constant [149 x i8] c"JPEG 2000 Profile-3 and 4 (2k/4k dc profile) requires:\0AMaximum 1302083 compressed bytes @ 24fps\0AAs no rate has been given, this limit will be used.\0A\00", align 1
@.str.102 = private unnamed_addr constant [173 x i8] c"JPEG 2000 Profile-3 and 4 (2k/4k dc profile) requires:\0AMaximum 1302083 compressed bytes @ 24fps\0A-> Specified rate exceeds this limit. Rate will be forced to 1302083 bytes.\0A\00", align 1
@.str.103 = private unnamed_addr constant [149 x i8] c"JPEG 2000 Profile-3 and 4 (2k/4k dc profile) requires:\0AMaximum 1041666 compressed bytes @ 24fps\0AAs no rate has been given, this limit will be used.\0A\00", align 1
@.str.104 = private unnamed_addr constant [173 x i8] c"JPEG 2000 Profile-3 and 4 (2k/4k dc profile) requires:\0AMaximum 1041666 compressed bytes @ 24fps\0A-> Specified rate exceeds this limit. Rate will be forced to 1041666 bytes.\0A\00", align 1
@.str.105 = private unnamed_addr constant [166 x i8] c"JPEG 2000 Profile-3 (2k dc profile) requires:\0A3 components-> Number of components of input image (%d) is not compliant\0A-> Non-profile-3 codestream will be generated\0A\00", align 1
@.str.106 = private unnamed_addr constant [217 x i8] c"JPEG 2000 Profile-3 (2k dc profile) requires:\0APrecision of each component shall be 12 bits unsigned-> At least component %d of input image (%d bits, %s) is not compliant\0A-> Non-profile-3 codestream will be generated\0A\00", align 1
@.str.107 = private unnamed_addr constant [171 x i8] c"JPEG 2000 Profile-3 (2k dc profile) requires:\0Awidth <= 2048 and height <= 1080\0A-> Input image size %d x %d is not compliant\0A-> Non-profile-3 codestream will be generated\0A\00", align 1
@.str.108 = private unnamed_addr constant [165 x i8] c"JPEG 2000 Profile-4 (4k dc profile) requires:\0Awidth <= 4096 and height <= 2160\0A-> Image size %d x %d is not compliant\0A-> Non-profile-4 codestream will be generated\0A\00", align 1
@.str.109 = private unnamed_addr constant [106 x i8] c"IMF profile require mainlevel <= 11.\0A-> %d is thus not compliant\0A-> Non-IMF codestream will be generated\0A\00", align 1
@tabMaxSubLevelFromMainLevel = internal unnamed_addr constant [12 x i16] [i16 15, i16 1, i16 1, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9], align 16
@.str.110 = private unnamed_addr constant [124 x i8] c"IMF profile require sublevel <= %d for mainlevel = %d.\0A-> %d is thus not compliant\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.111 = private unnamed_addr constant [145 x i8] c"IMF profiles require at most 3 components.\0A-> Number of components of input image (%d) is not compliant\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.112 = private unnamed_addr constant [115 x i8] c"IMF profiles require image origin to be at 0,0.\0A-> %d,%d is not compliant\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.113 = private unnamed_addr constant [114 x i8] c"IMF profiles require tile origin to be at 0,0.\0A-> %d,%d is not compliant\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.114 = private unnamed_addr constant [156 x i8] c"IMF 2K/4K/8K single tile profiles require tile to be greater or equal to image size.\0A-> %d,%d is lesser than %d,%d\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.115 = private unnamed_addr constant [244 x i8] c"IMF 2K_R/4K_R/8K_R single/multiple tile profiles require tile to be greater or equal to image size,\0Aor to be (1024,1024), or (2048,2048) for 4K_R/8K_R or (4096,4096) for 8K_R.\0A-> %d,%d is non conformant\0A-> Non-IMF codestream will be generated\0A\00", align 1
@__const.opj_j2k_is_imf_compliant.signed_str = private unnamed_addr constant [7 x i8] c"signed\00", align 1
@__const.opj_j2k_is_imf_compliant.unsigned_str = private unnamed_addr constant [9 x i8] c"unsigned\00", align 1
@.str.116 = private unnamed_addr constant [189 x i8] c"IMF profiles require precision of each component to b in [8-16] bits unsigned-> At least component %d of input image (%d bits, %s) is not compliant\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.117 = private unnamed_addr constant [97 x i8] c"IMF profiles require XRSiz1 == 1. Here it is set to %d.\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.118 = private unnamed_addr constant [102 x i8] c"IMF profiles require XRSiz2 == 1 or 2. Here it is set to %d.\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.119 = private unnamed_addr constant [132 x i8] c"IMF profiles require XRSiz%d to be the same as XRSiz2. Here it is set to %d instead of %d.\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.120 = private unnamed_addr constant [112 x i8] c"IMF profiles require YRsiz == 1. Here it is set to %d for component i.\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.121 = private unnamed_addr constant [148 x i8] c"IMF 2K/2K_R profile require:\0Awidth <= 2048 and height <= 1556\0A-> Input image size %d x %d is not compliant\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.122 = private unnamed_addr constant [148 x i8] c"IMF 4K/4K_R profile require:\0Awidth <= 4096 and height <= 3112\0A-> Input image size %d x %d is not compliant\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.123 = private unnamed_addr constant [148 x i8] c"IMF 8K/8K_R profile require:\0Awidth <= 8192 and height <= 6224\0A-> Input image size %d x %d is not compliant\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.124 = private unnamed_addr constant [133 x i8] c"IMF profile forbid RGN / region of interest marker.\0A-> Compression parameters specify a ROI\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.125 = private unnamed_addr constant [133 x i8] c"IMF profile require code block size to be 32x32.\0A-> Compression parameters set it to %dx%d.\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.126 = private unnamed_addr constant [131 x i8] c"IMF profile require progression order to be CPRL.\0A-> Compression parameters set it to %d.\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.127 = private unnamed_addr constant [111 x i8] c"IMF profile forbid POC markers.\0A-> Compression parameters set %d POC.\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.128 = private unnamed_addr constant [147 x i8] c"IMF profile forbid mode switch in code block style.\0A-> Compression parameters set code block style to %d.\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.129 = private unnamed_addr constant [147 x i8] c"IMF 2K/4K/8K profiles require 9-7 Irreversible Transform.\0A-> Compression parameters set it to reversible.\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.130 = private unnamed_addr constant [147 x i8] c"IMF 2K/4K/8K profiles require 5-3 reversible Transform.\0A-> Compression parameters set it to irreversible.\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.131 = private unnamed_addr constant [122 x i8] c"IMF 2K/4K/8K profiles require 1 single quality layer.\0A-> Number of layers is %d.\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.132 = private unnamed_addr constant [120 x i8] c"IMF 2K profile requires 1 <= NL <= 5:\0A-> Number of decomposition levels is %d.\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.133 = private unnamed_addr constant [120 x i8] c"IMF 4K profile requires 1 <= NL <= 6:\0A-> Number of decomposition levels is %d.\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.134 = private unnamed_addr constant [120 x i8] c"IMF 8K profile requires 1 <= NL <= 7:\0A-> Number of decomposition levels is %d.\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.135 = private unnamed_addr constant [140 x i8] c"IMF 2K_R profile requires 1 <= NL <= 5 for XTsiz >= 2048:\0A-> Number of decomposition levels is %d.\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.136 = private unnamed_addr constant [147 x i8] c"IMF 2K_R profile requires 1 <= NL <= 4 for XTsiz in [1024,2048[:\0A-> Number of decomposition levels is %d.\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.137 = private unnamed_addr constant [140 x i8] c"IMF 4K_R profile requires 1 <= NL <= 6 for XTsiz >= 4096:\0A-> Number of decomposition levels is %d.\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.138 = private unnamed_addr constant [147 x i8] c"IMF 4K_R profile requires 1 <= NL <= 5 for XTsiz in [2048,4096[:\0A-> Number of decomposition levels is %d.\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.139 = private unnamed_addr constant [147 x i8] c"IMF 4K_R profile requires 1 <= NL <= 4 for XTsiz in [1024,2048[:\0A-> Number of decomposition levels is %d.\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.140 = private unnamed_addr constant [140 x i8] c"IMF 4K_R profile requires 1 <= NL <= 7 for XTsiz >= 8192:\0A-> Number of decomposition levels is %d.\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.141 = private unnamed_addr constant [147 x i8] c"IMF 4K_R profile requires 1 <= NL <= 6 for XTsiz in [4096,8192[:\0A-> Number of decomposition levels is %d.\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.142 = private unnamed_addr constant [143 x i8] c"IMF profiles require PPx = PPy = 7 for NLLL band, else 8.\0A-> Supplied values are different from that.\0A-> Non-IMF codestream will be generated\0A\00", align 1
@.str.143 = private unnamed_addr constant [48 x i8] c"Not enough memory for checking the poc values.\0A\00", align 1
@.str.144 = private unnamed_addr constant [39 x i8] c"Missing packets possible loss of data\0A\00", align 1
@.str.145 = private unnamed_addr constant [24 x i8] c"Expected a SOC marker \0A\00", align 1
@.str.146 = private unnamed_addr constant [51 x i8] c"A marker ID was expected (0xff--) instead of %.8x\0A\00", align 1
@.str.147 = private unnamed_addr constant [55 x i8] c"Unknow marker have been detected and generated error.\0A\00", align 1
@.str.148 = private unnamed_addr constant [21 x i8] c"Invalid marker size\0A\00", align 1
@.str.149 = private unnamed_addr constant [59 x i8] c"Marker handler function failed to read the marker segment\0A\00", align 1
@.str.150 = private unnamed_addr constant [36 x i8] c"Not enough memory to add mh marker\0A\00", align 1
@.str.151 = private unnamed_addr constant [46 x i8] c"required SIZ marker not found in main header\0A\00", align 1
@.str.152 = private unnamed_addr constant [46 x i8] c"required COD marker not found in main header\0A\00", align 1
@.str.153 = private unnamed_addr constant [46 x i8] c"required QCD marker not found in main header\0A\00", align 1
@.str.154 = private unnamed_addr constant [26 x i8] c"Failed to merge PPM data\0A\00", align 1
@.str.155 = private unnamed_addr constant [41 x i8] c"Main header has been correctly decoded.\0A\00", align 1
@.str.156 = private unnamed_addr constant [38 x i8] c"Start to read j2k main header (%ld).\0A\00", align 1
@.str.157 = private unnamed_addr constant [16 x i8] c"Unknown marker\0A\00", align 1
@.str.158 = private unnamed_addr constant [31 x i8] c"Not enough bytes to read Nppm\0A\00", align 1
@.str.159 = private unnamed_addr constant [23 x i8] c"Corrupted PPM markers\0A\00", align 1
@.str.160 = private unnamed_addr constant [38 x i8] c"Not enough memory to read PPM marker\0A\00", align 1
@j2k_memory_marker_handler_tab = internal unnamed_addr constant [21 x %struct.opj_dec_memory_marker_handler] [%struct.opj_dec_memory_marker_handler { i32 65424, i32 12, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)* @opj_j2k_read_sot }, %struct.opj_dec_memory_marker_handler { i32 65362, i32 20, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)* @opj_j2k_read_cod }, %struct.opj_dec_memory_marker_handler { i32 65363, i32 20, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)* @opj_j2k_read_coc }, %struct.opj_dec_memory_marker_handler { i32 65374, i32 20, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)* @opj_j2k_read_rgn }, %struct.opj_dec_memory_marker_handler { i32 65372, i32 20, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)* @opj_j2k_read_qcd }, %struct.opj_dec_memory_marker_handler { i32 65373, i32 20, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)* @opj_j2k_read_qcc }, %struct.opj_dec_memory_marker_handler { i32 65375, i32 20, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)* @opj_j2k_read_poc }, %struct.opj_dec_memory_marker_handler { i32 65361, i32 2, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)* @opj_j2k_read_siz }, %struct.opj_dec_memory_marker_handler { i32 65365, i32 4, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)* @opj_j2k_read_tlm }, %struct.opj_dec_memory_marker_handler { i32 65367, i32 4, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)* @opj_j2k_read_plm }, %struct.opj_dec_memory_marker_handler { i32 65368, i32 16, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)* @opj_j2k_read_plt }, %struct.opj_dec_memory_marker_handler { i32 65376, i32 4, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)* @opj_j2k_read_ppm }, %struct.opj_dec_memory_marker_handler { i32 65377, i32 16, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)* @opj_j2k_read_ppt }, %struct.opj_dec_memory_marker_handler { i32 65425, i32 0, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)* null }, %struct.opj_dec_memory_marker_handler { i32 65379, i32 4, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)* @opj_j2k_read_crg }, %struct.opj_dec_memory_marker_handler { i32 65380, i32 20, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)* @opj_j2k_read_com }, %struct.opj_dec_memory_marker_handler { i32 65396, i32 20, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)* @opj_j2k_read_mct }, %struct.opj_dec_memory_marker_handler { i32 65400, i32 4, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)* @opj_j2k_read_cbd }, %struct.opj_dec_memory_marker_handler { i32 65397, i32 20, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)* @opj_j2k_read_mcc }, %struct.opj_dec_memory_marker_handler { i32 65399, i32 20, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)* @opj_j2k_read_mco }, %struct.opj_dec_memory_marker_handler { i32 0, i32 20, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)* null }], align 16
@.str.161 = private unnamed_addr constant [26 x i8] c"Error reading SOT marker\0A\00", align 1
@.str.162 = private unnamed_addr constant [24 x i8] c"Invalid tile number %d\0A\00", align 1
@.str.163 = private unnamed_addr constant [65 x i8] c"Invalid tile part index for tile number %d. Got %d, expected %d\0A\00", align 1
@.str.164 = private unnamed_addr constant [37 x i8] c"Empty SOT marker detected: Psot=%d.\0A\00", align 1
@.str.165 = private unnamed_addr constant [61 x i8] c"Psot value is not correct regards to the JPEG2000 norm: %d.\0A\00", align 1
@.str.166 = private unnamed_addr constant [111 x i8] c"Psot value of the current tile-part is equal to zero, we assuming it is the last tile-part of the codestream.\0A\00", align 1
@.str.167 = private unnamed_addr constant [100 x i8] c"In SOT marker, TPSot (%d) is not valid regards to the previous number of tile-part (%d), giving up\0A\00", align 1
@.str.168 = private unnamed_addr constant [99 x i8] c"In SOT marker, TPSot (%d) is not valid regards to the current number of tile-part (%d), giving up\0A\00", align 1
@.str.169 = private unnamed_addr constant [108 x i8] c"In SOT marker, TPSot (%d) is not valid regards to the current number of tile-part (header) (%d), giving up\0A\00", align 1
@.str.170 = private unnamed_addr constant [68 x i8] c"Not enough memory to read SOT marker. Tile index allocation failed\0A\00", align 1
@.str.171 = private unnamed_addr constant [26 x i8] c"Error reading COD marker\0A\00", align 1
@.str.172 = private unnamed_addr constant [34 x i8] c"Unknown Scod value in COD marker\0A\00", align 1
@.str.173 = private unnamed_addr constant [41 x i8] c"Unknown progression order in COD marker\0A\00", align 1
@.str.174 = private unnamed_addr constant [68 x i8] c"Invalid number of layers in COD marker : %d not in range [1-65535]\0A\00", align 1
@.str.175 = private unnamed_addr constant [43 x i8] c"Invalid multiple component transformation\0A\00", align 1
@.str.176 = private unnamed_addr constant [35 x i8] c"Error reading SPCod SPCoc element\0A\00", align 1
@.str.177 = private unnamed_addr constant [77 x i8] c"Invalid value for numresolutions : %d, max value is set in openjpeg.h at %d\0A\00", align 1
@.str.178 = private unnamed_addr constant [178 x i8] c"Error decoding component %d.\0AThe number of resolutions to remove (%d) is greater or equal than the number of resolutions of this component (%d)\0AModify the cp_reduce parameter.\0A\0A\00", align 1
@.str.179 = private unnamed_addr constant [68 x i8] c"Error reading SPCod SPCoc element, Invalid cblkw/cblkh combination\0A\00", align 1
@.str.180 = private unnamed_addr constant [67 x i8] c"Error reading SPCod SPCoc element, Invalid code-block style found\0A\00", align 1
@.str.181 = private unnamed_addr constant [65 x i8] c"Error reading SPCod SPCoc element, Invalid transformation found\0A\00", align 1
@.str.182 = private unnamed_addr constant [23 x i8] c"Invalid precinct size\0A\00", align 1
@.str.183 = private unnamed_addr constant [26 x i8] c"Error reading COC marker\0A\00", align 1
@.str.184 = private unnamed_addr constant [53 x i8] c"Error reading COC marker (bad number of components)\0A\00", align 1
@.str.185 = private unnamed_addr constant [26 x i8] c"Error reading RGN marker\0A\00", align 1
@.str.186 = private unnamed_addr constant [57 x i8] c"bad component number in RGN (%d when there are only %d)\0A\00", align 1
@.str.187 = private unnamed_addr constant [26 x i8] c"Error reading QCD marker\0A\00", align 1
@.str.188 = private unnamed_addr constant [36 x i8] c"Error reading SQcd or SQcc element\0A\00", align 1
@.str.189 = private unnamed_addr constant [216 x i8] c"While reading CCP_QNTSTY element inside QCD or QCC marker segment, number of subbands (%d) is greater to OPJ_J2K_MAXBANDS (%d). So we limit the number of elements stored to OPJ_J2K_MAXBANDS (%d) and skip the rest. \0A\00", align 1
@.str.190 = private unnamed_addr constant [26 x i8] c"Error reading QCC marker\0A\00", align 1
@.str.191 = private unnamed_addr constant [69 x i8] c"Invalid component number: %d, regarding the number of components %d\0A\00", align 1
@.str.192 = private unnamed_addr constant [26 x i8] c"Error reading POC marker\0A\00", align 1
@.str.193 = private unnamed_addr constant [18 x i8] c"Too many POCs %d\0A\00", align 1
@.str.194 = private unnamed_addr constant [28 x i8] c"Error with SIZ marker size\0A\00", align 1
@.str.195 = private unnamed_addr constant [61 x i8] c"Error with SIZ marker: number of component is illegal -> %d\0A\00", align 1
@.str.196 = private unnamed_addr constant [114 x i8] c"Error with SIZ marker: number of component is not compatible with the remaining number of parameters ( %d vs %d)\0A\00", align 1
@.str.197 = private unnamed_addr constant [64 x i8] c"Error with SIZ marker: negative or zero image size (%ld x %ld)\0A\00", align 1
@.str.198 = private unnamed_addr constant [61 x i8] c"Error with SIZ marker: invalid tile size (tdx: %d, tdy: %d)\0A\00", align 1
@.str.199 = private unnamed_addr constant [44 x i8] c"Error with SIZ marker: illegal tile offset\0A\00", align 1
@.str.200 = private unnamed_addr constant [61 x i8] c"Error with SIZ marker: IHDR w(%u) h(%u) vs. SIZ w(%u) h(%u)\0A\00", align 1
@.str.201 = private unnamed_addr constant [48 x i8] c"Not enough memory to take in charge SIZ marker\0A\00", align 1
@.str.202 = private unnamed_addr constant [145 x i8] c"Despite JP2 BPC!=255, precision and/or sgnd values for comp[%d] is different than comp[0]:\0A        [0] prec(%d) sgnd(%d) [%d] prec(%d) sgnd(%d)\0A\00", align 1
@.str.203 = private unnamed_addr constant [105 x i8] c"Invalid values for comp = %d : dx=%u dy=%u (should be between 1 and 255 according to the JPEG2000 norm)\0A\00", align 1
@.str.204 = private unnamed_addr constant [133 x i8] c"Invalid values for comp = %d : prec=%u (should be between 1 and 38 according to the JPEG2000 norm. OpenJpeg only supports up to 31)\0A\00", align 1
@.str.205 = private unnamed_addr constant [83 x i8] c"Invalid number of tiles : %u x %u (maximum fixed by jpeg2000 norm is 65535 tiles)\0A\00", align 1
@.str.206 = private unnamed_addr constant [26 x i8] c"Error reading TLM marker\0A\00", align 1
@.str.207 = private unnamed_addr constant [26 x i8] c"Error reading PLM marker\0A\00", align 1
@.str.208 = private unnamed_addr constant [26 x i8] c"Error reading PLT marker\0A\00", align 1
@.str.209 = private unnamed_addr constant [26 x i8] c"Error reading PPM marker\0A\00", align 1
@.str.210 = private unnamed_addr constant [22 x i8] c"Zppm %u already read\0A\00", align 1
@.str.211 = private unnamed_addr constant [26 x i8] c"Error reading PPT marker\0A\00", align 1
@.str.212 = private unnamed_addr constant [101 x i8] c"Error reading PPT marker: packet header have been previously found in the main header (PPM marker).\0A\00", align 1
@.str.213 = private unnamed_addr constant [38 x i8] c"Not enough memory to read PPT marker\0A\00", align 1
@.str.214 = private unnamed_addr constant [22 x i8] c"Zppt %u already read\0A\00", align 1
@.str.215 = private unnamed_addr constant [26 x i8] c"Error reading CRG marker\0A\00", align 1
@.str.216 = private unnamed_addr constant [26 x i8] c"Error reading MCT marker\0A\00", align 1
@.str.217 = private unnamed_addr constant [60 x i8] c"Cannot take in charge mct data within multiple MCT records\0A\00", align 1
@.str.218 = private unnamed_addr constant [38 x i8] c"Not enough memory to read MCT marker\0A\00", align 1
@.str.219 = private unnamed_addr constant [44 x i8] c"Cannot take in charge multiple MCT markers\0A\00", align 1
@.str.220 = private unnamed_addr constant [26 x i8] c"Crror reading CBD marker\0A\00", align 1
@.str.221 = private unnamed_addr constant [26 x i8] c"Error reading MCC marker\0A\00", align 1
@.str.222 = private unnamed_addr constant [46 x i8] c"Cannot take in charge multiple data spanning\0A\00", align 1
@.str.223 = private unnamed_addr constant [38 x i8] c"Not enough memory to read MCC marker\0A\00", align 1
@.str.224 = private unnamed_addr constant [44 x i8] c"Cannot take in charge multiple collections\0A\00", align 1
@.str.225 = private unnamed_addr constant [66 x i8] c"Cannot take in charge collections other than array decorrelation\0A\00", align 1
@.str.226 = private unnamed_addr constant [54 x i8] c"Cannot take in charge collections with indix shuffle\0A\00", align 1
@.str.227 = private unnamed_addr constant [66 x i8] c"Cannot take in charge collections without same number of indixes\0A\00", align 1
@.str.228 = private unnamed_addr constant [26 x i8] c"Error reading MCO marker\0A\00", align 1
@.str.229 = private unnamed_addr constant [55 x i8] c"Cannot take in charge multiple transformation stages.\0A\00", align 1
@j2k_mct_read_functions_to_float = internal unnamed_addr constant [4 x void (i8*, i8*, i32)*] [void (i8*, i8*, i32)* @opj_j2k_read_int16_to_float, void (i8*, i8*, i32)* @opj_j2k_read_int32_to_float, void (i8*, i8*, i32)* @opj_j2k_read_float32_to_float, void (i8*, i8*, i32)* @opj_j2k_read_float64_to_float], align 16
@j2k_mct_read_functions_to_int32 = internal unnamed_addr constant [4 x void (i8*, i8*, i32)*] [void (i8*, i8*, i32)* @opj_j2k_read_int16_to_int32, void (i8*, i8*, i32)* @opj_j2k_read_int32_to_int32, void (i8*, i8*, i32)* @opj_j2k_read_float32_to_int32, void (i8*, i8*, i32)* @opj_j2k_read_float64_to_int32], align 16
@.str.230 = private unnamed_addr constant [55 x i8] c"Tile part length size inconsistent with stream length\0A\00", align 1
@.str.231 = private unnamed_addr constant [87 x i8] c"p_j2k->m_specific_param.m_decoder.m_sot_length > UINT_MAX - OPJ_COMMON_CBLK_DATA_EXTRA\00", align 1
@.str.232 = private unnamed_addr constant [101 x i8] c"*l_tile_len > UINT_MAX - OPJ_COMMON_CBLK_DATA_EXTRA - p_j2k->m_specific_param.m_decoder.m_sot_length\00", align 1
@.str.233 = private unnamed_addr constant [34 x i8] c"Not enough memory to decode tile\0A\00", align 1
@.str.234 = private unnamed_addr constant [45 x i8] c"opj_j2k_merge_ppt() has already been called\0A\00", align 1
@.str.235 = private unnamed_addr constant [51 x i8] c"Image coordinates above INT_MAX are not supported\0A\00", align 1
@.str.236 = private unnamed_addr constant [69 x i8] c"Size x of the decoded component image is incorrect (comp[%d].w=%d).\0A\00", align 1
@.str.237 = private unnamed_addr constant [69 x i8] c"Size y of the decoded component image is incorrect (comp[%d].h=%d).\0A\00", align 1
@.str.238 = private unnamed_addr constant [18 x i8] c"\09 default tile {\0A\00", align 1
@.str.239 = private unnamed_addr constant [13 x i8] c"\09\09 csty=%#x\0A\00", align 1
@.str.240 = private unnamed_addr constant [12 x i8] c"\09\09 prg=%#x\0A\00", align 1
@.str.241 = private unnamed_addr constant [17 x i8] c"\09\09 numlayers=%d\0A\00", align 1
@.str.242 = private unnamed_addr constant [11 x i8] c"\09\09 mct=%x\0A\00", align 1
@.str.243 = private unnamed_addr constant [14 x i8] c"\09\09 comp %d {\0A\00", align 1
@.str.244 = private unnamed_addr constant [14 x i8] c"\09\09\09 csty=%#x\0A\00", align 1
@.str.245 = private unnamed_addr constant [23 x i8] c"\09\09\09 numresolutions=%d\0A\00", align 1
@.str.246 = private unnamed_addr constant [16 x i8] c"\09\09\09 cblkw=2^%d\0A\00", align 1
@.str.247 = private unnamed_addr constant [16 x i8] c"\09\09\09 cblkh=2^%d\0A\00", align 1
@.str.248 = private unnamed_addr constant [17 x i8] c"\09\09\09 cblksty=%#x\0A\00", align 1
@.str.249 = private unnamed_addr constant [15 x i8] c"\09\09\09 qmfbid=%d\0A\00", align 1
@.str.250 = private unnamed_addr constant [24 x i8] c"\09\09\09 preccintsize (w,h)=\00", align 1
@.str.251 = private unnamed_addr constant [9 x i8] c"(%d,%d) \00", align 1
@.str.253 = private unnamed_addr constant [15 x i8] c"\09\09\09 qntsty=%d\0A\00", align 1
@.str.254 = private unnamed_addr constant [17 x i8] c"\09\09\09 numgbits=%d\0A\00", align 1
@.str.255 = private unnamed_addr constant [21 x i8] c"\09\09\09 stepsizes (m,e)=\00", align 1
@.str.256 = private unnamed_addr constant [17 x i8] c"\09\09\09 roishift=%d\0A\00", align 1
@.str.257 = private unnamed_addr constant [6 x i8] c"\09\09 }\0A\00", align 1
@.str.258 = private unnamed_addr constant [5 x i8] c"\09 }\0A\00", align 1
@.str.259 = private unnamed_addr constant [38 x i8] c"Codestream index from main header: {\0A\00", align 1
@.str.260 = private unnamed_addr constant [65 x i8] c"\09 Main header start position=%li\0A\09 Main header end position=%li\0A\00", align 1
@.str.261 = private unnamed_addr constant [18 x i8] c"\09 Marker list: {\0A\00", align 1
@.str.262 = private unnamed_addr constant [30 x i8] c"\09\09 type=%#x, pos=%li, len=%d\0A\00", align 1
@.str.263 = private unnamed_addr constant [17 x i8] c"\09 Tile index: {\0A\00", align 1
@.str.264 = private unnamed_addr constant [36 x i8] c"\09\09 nb of tile-part in tile [%d]=%d\0A\00", align 1
@.str.265 = private unnamed_addr constant [63 x i8] c"\09\09\09 tile-part[%d]: star_pos=%li, end_header=%li, end_pos=%li.\0A\00", align 1
@.str.266 = private unnamed_addr constant [37 x i8] c"Codestream info from main header: {\0A\00", align 1
@.str.267 = private unnamed_addr constant [18 x i8] c"\09 tx0=%d, ty0=%d\0A\00", align 1
@.str.268 = private unnamed_addr constant [18 x i8] c"\09 tdx=%d, tdy=%d\0A\00", align 1
@.str.269 = private unnamed_addr constant [16 x i8] c"\09 tw=%d, th=%d\0A\00", align 1
@.str.270 = private unnamed_addr constant [27 x i8] c"Failed to decode tile 1/1\0A\00", align 1
@.str.271 = private unnamed_addr constant [29 x i8] c"Failed to decode tile %d/%d\0A\00", align 1
@.str.272 = private unnamed_addr constant [30 x i8] c"Tile %d/%d has been decoded.\0A\00", align 1
@.str.273 = private unnamed_addr constant [44 x i8] c"Image data has been updated with tile %d.\0A\0A\00", align 1
@.str.274 = private unnamed_addr constant [31 x i8] c"Failed to decode component %d\0A\00", align 1
@.str.275 = private unnamed_addr constant [38 x i8] c"Failed to decode all used components\0A\00", align 1
@.str.276 = private unnamed_addr constant [28 x i8] c"Problem with seek function\0A\00", align 1
@.str.277 = private unnamed_addr constant [67 x i8] c"Tile read, decoded and updated is not the desired one (%d vs %d).\0A\00", align 1
@.str.278 = private unnamed_addr constant [37 x i8] c"The given tile index does not match.\00", align 1
@.str.279 = private unnamed_addr constant [21 x i8] c"tile number %d / %d\0A\00", align 1
@.str.280 = private unnamed_addr constant [55 x i8] c"Not enough bytes in output buffer to write SOT marker\0A\00", align 1
@.str.281 = private unnamed_addr constant [55 x i8] c"Not enough bytes in output buffer to write SOD marker\0A\00", align 1
@.str.282 = private unnamed_addr constant [57 x i8] c"Cannot encode tile: opj_tcd_marker_info_create() failed\0A\00", align 1
@.str.283 = private unnamed_addr constant [20 x i8] c"Cannot encode tile\0A\00", align 1
@.str.284 = private unnamed_addr constant [24 x i8] c"Cannot allocate memory\0A\00", align 1
@.str.285 = private unnamed_addr constant [67 x i8] c"More than 255 PLT markers would be needed for current tile-part !\0A\00", align 1
@.str.286 = private unnamed_addr constant [70 x i8] c"Number of resolutions is too high in comparison to the size of tiles\0A\00", align 1
@.str.287 = private unnamed_addr constant [38 x i8] c"Not enough memory for the SIZ marker\0A\00", align 1
@.str.288 = private unnamed_addr constant [39 x i8] c"Not enough memory to write COD marker\0A\00", align 1
@.str.289 = private unnamed_addr constant [26 x i8] c"Error writing COD marker\0A\00", align 1
@.str.290 = private unnamed_addr constant [35 x i8] c"Error writing SPCod SPCoc element\0A\00", align 1
@.str.291 = private unnamed_addr constant [39 x i8] c"Not enough memory to write QCD marker\0A\00", align 1
@.str.292 = private unnamed_addr constant [26 x i8] c"Error writing QCD marker\0A\00", align 1
@.str.293 = private unnamed_addr constant [33 x i8] c"Error writing SQcd SQcc element\0A\00", align 1
@.str.294 = private unnamed_addr constant [39 x i8] c"Not enough memory to write COC marker\0A\00", align 1
@.str.295 = private unnamed_addr constant [39 x i8] c"Not enough memory to write QCC marker\0A\00", align 1
@.str.296 = private unnamed_addr constant [39 x i8] c"Not enough memory to write TLM marker\0A\00", align 1
@.str.297 = private unnamed_addr constant [39 x i8] c"Not enough memory to write POC marker\0A\00", align 1
@.str.298 = private unnamed_addr constant [43 x i8] c"Not enough memory to write the COM marker\0A\00", align 1
@.str.299 = private unnamed_addr constant [39 x i8] c"Not enough memory to write CBD marker\0A\00", align 1
@.str.300 = private unnamed_addr constant [39 x i8] c"Not enough memory to write MCT marker\0A\00", align 1
@.str.301 = private unnamed_addr constant [39 x i8] c"Not enough memory to write MCC marker\0A\00", align 1
@.str.302 = private unnamed_addr constant [39 x i8] c"Not enough memory to write MCO marker\0A\00", align 1
@.str.303 = private unnamed_addr constant [40 x i8] c"Not enough memory to create Tile Coder\0A\00", align 1
@.str.304 = private unnamed_addr constant [67 x i8] c"Not enough memory to allocate m_encoded_tile_data. %u MB required\0A\00", align 1
@switch.table.opj_j2k_setup_encoder = private unnamed_addr constant [3 x i32] [i32 1302083, i32 651041, i32 1302083], align 4
@switch.table.opj_j2k_setup_encoder.305 = private unnamed_addr constant [3 x i32] [i32 1041666, i32 520833, i32 1041666], align 4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @opj_j2k_convert_progression_order(i32) local_unnamed_addr #0 {
  switch i32 %0, label %9 [
    i32 4, label %6
    i32 0, label %2
    i32 3, label %3
    i32 1, label %4
    i32 2, label %5
  ]

2:                                                ; preds = %1
  br label %6

3:                                                ; preds = %1
  br label %6

4:                                                ; preds = %1
  br label %6

5:                                                ; preds = %1
  br label %6

6:                                                ; preds = %1, %5, %4, %3, %2, %9
  %7 = phi %struct.j2k_prog_order* [ getelementptr inbounds ([6 x %struct.j2k_prog_order], [6 x %struct.j2k_prog_order]* @j2k_prog_order_list, i64 0, i64 0), %1 ], [ getelementptr inbounds ([6 x %struct.j2k_prog_order], [6 x %struct.j2k_prog_order]* @j2k_prog_order_list, i64 0, i64 5), %9 ], [ getelementptr inbounds ([6 x %struct.j2k_prog_order], [6 x %struct.j2k_prog_order]* @j2k_prog_order_list, i64 0, i64 1), %2 ], [ getelementptr inbounds ([6 x %struct.j2k_prog_order], [6 x %struct.j2k_prog_order]* @j2k_prog_order_list, i64 0, i64 2), %3 ], [ getelementptr inbounds ([6 x %struct.j2k_prog_order], [6 x %struct.j2k_prog_order]* @j2k_prog_order_list, i64 0, i64 3), %4 ], [ getelementptr inbounds ([6 x %struct.j2k_prog_order], [6 x %struct.j2k_prog_order]* @j2k_prog_order_list, i64 0, i64 4), %5 ]
  %8 = getelementptr inbounds %struct.j2k_prog_order, %struct.j2k_prog_order* %7, i64 0, i32 1, i64 0
  ret i8* %8

9:                                                ; preds = %1
  br label %6
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @opj_j2k_setup_decoder(%struct.opj_j2k*, %struct.opj_dparameters* readonly) local_unnamed_addr #2 {
  %3 = icmp ne %struct.opj_j2k* %0, null
  %4 = icmp ne %struct.opj_dparameters* %1, null
  %5 = and i1 %3, %4
  br i1 %5, label %6, label %17

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.opj_dparameters, %struct.opj_dparameters* %1, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 20, i32 0, i32 1
  store i32 %8, i32* %9, align 4
  %10 = getelementptr inbounds %struct.opj_dparameters, %struct.opj_dparameters* %1, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 20, i32 0, i32 0
  store i32 %11, i32* %12, align 8
  %13 = getelementptr inbounds %struct.opj_dparameters, %struct.opj_dparameters* %1, i64 0, i32 16
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %14, 2
  %16 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 13
  store i32 %15, i32* %16, align 8
  br label %17

17:                                               ; preds = %6, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_j2k_set_threads(%struct.opj_j2k* nocapture, i32) local_unnamed_addr #3 {
  %3 = tail call i32 @opj_has_thread_support() #12
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %18, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 9
  %7 = load %struct.opj_tcd*, %struct.opj_tcd** %6, align 8
  %8 = icmp eq %struct.opj_tcd* %7, null
  br i1 %8, label %9, label %18

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 10
  %11 = load %struct.opj_thread_pool_t*, %struct.opj_thread_pool_t** %10, align 8
  tail call void @opj_thread_pool_destroy(%struct.opj_thread_pool_t* %11) #12
  store %struct.opj_thread_pool_t* null, %struct.opj_thread_pool_t** %10, align 8
  %12 = icmp sgt i32 %1, -1
  br i1 %12, label %13, label %16

13:                                               ; preds = %9
  %14 = tail call %struct.opj_thread_pool_t* @opj_thread_pool_create(i32 %1) #12
  store %struct.opj_thread_pool_t* %14, %struct.opj_thread_pool_t** %10, align 8
  %15 = icmp eq %struct.opj_thread_pool_t* %14, null
  br i1 %15, label %16, label %18

16:                                               ; preds = %9, %13
  %17 = tail call %struct.opj_thread_pool_t* @opj_thread_pool_create(i32 0) #12
  store %struct.opj_thread_pool_t* %17, %struct.opj_thread_pool_t** %10, align 8
  br label %18

18:                                               ; preds = %5, %2, %13, %16
  %19 = phi i32 [ 0, %16 ], [ 1, %13 ], [ 0, %2 ], [ 0, %5 ]
  ret i32 %19
}

declare hidden i32 @opj_has_thread_support() local_unnamed_addr #4

declare void @opj_thread_pool_destroy(%struct.opj_thread_pool_t*) local_unnamed_addr #4

declare %struct.opj_thread_pool_t* @opj_thread_pool_create(i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden %struct.opj_j2k* @opj_j2k_create_compress() local_unnamed_addr #3 {
  %1 = tail call i8* @opj_calloc(i64 1, i64 328) #12
  %2 = bitcast i8* %1 to %struct.opj_j2k*
  %3 = icmp eq i8* %1, null
  br i1 %3, label %58, label %4

4:                                                ; preds = %0
  %5 = bitcast i8* %1 to i32*
  store i32 0, i32* %5, align 8
  %6 = getelementptr inbounds i8, i8* %1, i64 256
  %7 = load i8, i8* %6, align 8
  %8 = and i8 %7, -3
  store i8 %8, i8* %6, align 8
  %9 = tail call i8* @opj_malloc(i64 1000) #12
  %10 = getelementptr inbounds i8, i8* %1, i64 64
  %11 = bitcast i8* %10 to i8**
  store i8* %9, i8** %11, align 8
  %12 = icmp eq i8* %9, null
  br i1 %12, label %13, label %14

13:                                               ; preds = %4
  tail call void @opj_j2k_destroy(%struct.opj_j2k* nonnull %2)
  br label %58

14:                                               ; preds = %4
  %15 = getelementptr inbounds i8, i8* %1, i64 72
  %16 = bitcast i8* %15 to i32*
  store i32 1000, i32* %16, align 8
  %17 = tail call %struct.opj_procedure_list* @opj_procedure_list_create() #12
  %18 = getelementptr inbounds i8, i8* %1, i64 272
  %19 = bitcast i8* %18 to %struct.opj_procedure_list**
  store %struct.opj_procedure_list* %17, %struct.opj_procedure_list** %19, align 8
  %20 = icmp eq %struct.opj_procedure_list* %17, null
  br i1 %20, label %21, label %22

21:                                               ; preds = %14
  tail call void @opj_j2k_destroy(%struct.opj_j2k* nonnull %2)
  br label %58

22:                                               ; preds = %14
  %23 = tail call %struct.opj_procedure_list* @opj_procedure_list_create() #12
  %24 = getelementptr inbounds i8, i8* %1, i64 264
  %25 = bitcast i8* %24 to %struct.opj_procedure_list**
  store %struct.opj_procedure_list* %23, %struct.opj_procedure_list** %25, align 8
  %26 = icmp eq %struct.opj_procedure_list* %23, null
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  tail call void @opj_j2k_destroy(%struct.opj_j2k* nonnull %2)
  br label %58

28:                                               ; preds = %22
  %29 = tail call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.95, i64 0, i64 0)) #12
  %30 = icmp eq i8* %29, null
  br i1 %30, label %48, label %31

31:                                               ; preds = %28
  %32 = tail call i32 @opj_has_thread_support() #12
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %48, label %34

34:                                               ; preds = %31
  %35 = tail call i32 @opj_get_num_cpus() #12
  %36 = tail call i32 @strcmp(i8* nonnull %29, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.96, i64 0, i64 0)) #13
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %48, label %38

38:                                               ; preds = %34
  %39 = tail call i64 @strtol(i8* nocapture nonnull %29, i8** null, i32 10) #12
  %40 = trunc i64 %39 to i32
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %48, label %42

42:                                               ; preds = %38
  %43 = icmp eq i32 %35, 0
  %44 = shl i32 %35, 1
  %45 = select i1 %43, i32 64, i32 %44
  %46 = icmp slt i32 %45, %40
  %47 = select i1 %46, i32 %45, i32 %40
  br label %48

48:                                               ; preds = %28, %31, %34, %38, %42
  %49 = phi i32 [ %47, %42 ], [ 0, %31 ], [ 0, %28 ], [ %35, %34 ], [ 0, %38 ]
  %50 = tail call %struct.opj_thread_pool_t* @opj_thread_pool_create(i32 %49) #12
  %51 = getelementptr inbounds i8, i8* %1, i64 304
  %52 = bitcast i8* %51 to %struct.opj_thread_pool_t**
  store %struct.opj_thread_pool_t* %50, %struct.opj_thread_pool_t** %52, align 8
  %53 = icmp eq %struct.opj_thread_pool_t* %50, null
  br i1 %53, label %54, label %58

54:                                               ; preds = %48
  %55 = tail call %struct.opj_thread_pool_t* @opj_thread_pool_create(i32 0) #12
  store %struct.opj_thread_pool_t* %55, %struct.opj_thread_pool_t** %52, align 8
  %56 = icmp eq %struct.opj_thread_pool_t* %55, null
  br i1 %56, label %57, label %58

57:                                               ; preds = %54
  tail call void @opj_j2k_destroy(%struct.opj_j2k* nonnull %2)
  br label %58

58:                                               ; preds = %48, %54, %0, %57, %27, %21, %13
  %59 = phi %struct.opj_j2k* [ null, %57 ], [ null, %27 ], [ null, %21 ], [ null, %13 ], [ null, %0 ], [ %2, %54 ], [ %2, %48 ]
  ret %struct.opj_j2k* %59
}

declare i8* @opj_calloc(i64, i64) local_unnamed_addr #4

declare i8* @opj_malloc(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @opj_j2k_destroy(%struct.opj_j2k*) local_unnamed_addr #3 {
  %2 = icmp eq %struct.opj_j2k* %0, null
  br i1 %2, label %131, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %25, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 1
  %9 = load %struct.opj_tcp*, %struct.opj_tcp** %8, align 8
  %10 = icmp eq %struct.opj_tcp* %9, null
  br i1 %10, label %14, label %11

11:                                               ; preds = %7
  tail call fastcc void @opj_j2k_tcp_destroy(%struct.opj_tcp* nonnull %9)
  %12 = bitcast %struct.opj_tcp** %8 to i8**
  %13 = load i8*, i8** %12, align 8
  tail call void @opj_free(i8* %13) #12
  store %struct.opj_tcp* null, %struct.opj_tcp** %8, align 8
  br label %14

14:                                               ; preds = %7, %11
  %15 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 2
  %16 = load i8*, i8** %15, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %14
  tail call void @opj_free(i8* nonnull %16) #12
  store i8* null, i8** %15, align 8
  %19 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 3
  store i32 0, i32* %19, align 8
  br label %20

20:                                               ; preds = %14, %18
  %21 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 13
  %22 = bitcast i32** %21 to i8**
  %23 = load i8*, i8** %22, align 8
  tail call void @opj_free(i8* %23) #12
  store i32* null, i32** %21, align 8
  %24 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 12
  store i32 0, i32* %24, align 4
  br label %44

25:                                               ; preds = %3
  %26 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 7
  %27 = bitcast i32* %26 to i8**
  %28 = load i8*, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %31, label %30

30:                                               ; preds = %25
  tail call void @opj_free(i8* nonnull %28) #12
  store i8* null, i8** %27, align 8
  br label %31

31:                                               ; preds = %25, %30
  %32 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 2
  %33 = load i8*, i8** %32, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %37, label %35

35:                                               ; preds = %31
  tail call void @opj_free(i8* nonnull %33) #12
  %36 = bitcast i8** %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 16, i1 false)
  br label %37

37:                                               ; preds = %31, %35
  %38 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 10
  %39 = bitcast i64* %38 to i8**
  %40 = load i8*, i8** %39, align 8
  %41 = icmp eq i8* %40, null
  br i1 %41, label %44, label %42

42:                                               ; preds = %37
  tail call void @opj_free(i8* nonnull %40) #12
  store i8* null, i8** %39, align 8
  %43 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 11
  store i32 0, i32* %43, align 8
  br label %44

44:                                               ; preds = %37, %42, %20
  %45 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 9
  %46 = load %struct.opj_tcd*, %struct.opj_tcd** %45, align 8
  tail call void @opj_tcd_destroy(%struct.opj_tcd* %46) #12
  %47 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4
  %48 = icmp eq %struct.opj_cp* %47, null
  br i1 %48, label %116, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %51 = load %struct.opj_tcp*, %struct.opj_tcp** %50, align 8
  %52 = icmp eq %struct.opj_tcp* %51, null
  br i1 %52, label %72, label %53

53:                                               ; preds = %49
  %54 = bitcast %struct.opj_tcp* %51 to i8*
  %55 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 7
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 6
  %58 = load i32, i32* %57, align 8
  %59 = mul i32 %58, %56
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %70, label %61

61:                                               ; preds = %53, %61
  %62 = phi i32 [ %65, %61 ], [ 0, %53 ]
  %63 = phi %struct.opj_tcp* [ %64, %61 ], [ %51, %53 ]
  tail call fastcc void @opj_j2k_tcp_destroy(%struct.opj_tcp* %63) #12
  %64 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %63, i64 1
  %65 = add nuw i32 %62, 1
  %66 = icmp eq i32 %65, %59
  br i1 %66, label %67, label %61

67:                                               ; preds = %61
  %68 = bitcast %struct.opj_tcp** %50 to i8**
  %69 = load i8*, i8** %68, align 8
  br label %70

70:                                               ; preds = %67, %53
  %71 = phi i8* [ %69, %67 ], [ %54, %53 ]
  tail call void @opj_free(i8* %71) #12
  store %struct.opj_tcp* null, %struct.opj_tcp** %50, align 8
  br label %72

72:                                               ; preds = %70, %49
  %73 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 9
  %74 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %73, align 8
  %75 = icmp eq %struct.opj_ppx_struct* %74, null
  br i1 %75, label %102, label %76

76:                                               ; preds = %72
  %77 = bitcast %struct.opj_ppx_struct* %74 to i8*
  %78 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 8
  %79 = load i32, i32* %78, align 8
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %100, label %81

81:                                               ; preds = %76, %95
  %82 = phi i32 [ %91, %95 ], [ %79, %76 ]
  %83 = phi %struct.opj_ppx_struct* [ %96, %95 ], [ %74, %76 ]
  %84 = phi i64 [ %92, %95 ], [ 0, %76 ]
  %85 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %83, i64 %84, i32 0
  %86 = load i8*, i8** %85, align 8
  %87 = icmp eq i8* %86, null
  br i1 %87, label %90, label %88

88:                                               ; preds = %81
  tail call void @opj_free(i8* nonnull %86) #12
  %89 = load i32, i32* %78, align 8
  br label %90

90:                                               ; preds = %88, %81
  %91 = phi i32 [ %82, %81 ], [ %89, %88 ]
  %92 = add nuw nsw i64 %84, 1
  %93 = zext i32 %91 to i64
  %94 = icmp ult i64 %92, %93
  br i1 %94, label %95, label %97

95:                                               ; preds = %90
  %96 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %73, align 8
  br label %81

97:                                               ; preds = %90
  %98 = bitcast %struct.opj_ppx_struct** %73 to i8**
  %99 = load i8*, i8** %98, align 8
  br label %100

100:                                              ; preds = %97, %76
  %101 = phi i8* [ %99, %97 ], [ %77, %76 ]
  store i32 0, i32* %78, align 8
  tail call void @opj_free(i8* %101) #12
  store %struct.opj_ppx_struct* null, %struct.opj_ppx_struct** %73, align 8
  br label %102

102:                                              ; preds = %100, %72
  %103 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 14
  %104 = load i8*, i8** %103, align 8
  tail call void @opj_free(i8* %104) #12
  store i8* null, i8** %103, align 8
  %105 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 10
  store i8* null, i8** %105, align 8
  %106 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 5
  %107 = load i8*, i8** %106, align 8
  tail call void @opj_free(i8* %107) #12
  store i8* null, i8** %106, align 8
  %108 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 21
  %109 = load i8, i8* %108, align 8
  %110 = and i8 %109, 2
  %111 = icmp eq i8 %110, 0
  br i1 %111, label %112, label %116

112:                                              ; preds = %102
  %113 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 20, i32 0, i32 2
  %114 = bitcast i32** %113 to i8**
  %115 = load i8*, i8** %114, align 8
  tail call void @opj_free(i8* %115) #12
  store i32* null, i32** %113, align 8
  br label %116

116:                                              ; preds = %44, %102, %112
  %117 = bitcast %struct.opj_cp* %47 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %117, i8 0, i64 152, i1 false)
  %118 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 5
  %119 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %118, align 8
  tail call void @opj_procedure_list_destroy(%struct.opj_procedure_list* %119) #12
  store %struct.opj_procedure_list* null, %struct.opj_procedure_list** %118, align 8
  %120 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 6
  %121 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %120, align 8
  tail call void @opj_procedure_list_destroy(%struct.opj_procedure_list* %121) #12
  store %struct.opj_procedure_list* null, %struct.opj_procedure_list** %118, align 8
  %122 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 7
  %123 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %122, align 8
  tail call void @j2k_destroy_cstr_index(%struct.opj_codestream_index* %123)
  store %struct.opj_codestream_index* null, %struct.opj_codestream_index** %122, align 8
  %124 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %125 = load %struct.opj_image*, %struct.opj_image** %124, align 8
  tail call void @opj_image_destroy(%struct.opj_image* %125) #12
  store %struct.opj_image* null, %struct.opj_image** %124, align 8
  %126 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 3
  %127 = load %struct.opj_image*, %struct.opj_image** %126, align 8
  tail call void @opj_image_destroy(%struct.opj_image* %127) #12
  store %struct.opj_image* null, %struct.opj_image** %126, align 8
  %128 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 10
  %129 = load %struct.opj_thread_pool_t*, %struct.opj_thread_pool_t** %128, align 8
  tail call void @opj_thread_pool_destroy(%struct.opj_thread_pool_t* %129) #12
  store %struct.opj_thread_pool_t* null, %struct.opj_thread_pool_t** %128, align 8
  %130 = bitcast %struct.opj_j2k* %0 to i8*
  tail call void @opj_free(i8* nonnull %130) #12
  br label %131

131:                                              ; preds = %1, %116
  ret void
}

declare %struct.opj_procedure_list* @opj_procedure_list_create() local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_j2k_setup_encoder(%struct.opj_j2k*, %struct.opj_cparameters*, %struct.opj_image* readonly, %struct.opj_event_mgr*) local_unnamed_addr #3 {
  %5 = alloca [7 x i8], align 1
  %6 = alloca [9 x i8], align 1
  %7 = icmp ne %struct.opj_j2k* %0, null
  %8 = icmp ne %struct.opj_cparameters* %1, null
  %9 = and i1 %7, %8
  %10 = icmp ne %struct.opj_image* %2, null
  %11 = and i1 %9, %10
  br i1 %11, label %12, label %2137

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 17
  %14 = load i32, i32* %13, align 8
  %15 = add i32 %14, -1
  %16 = icmp ugt i32 %15, 32
  br i1 %16, label %17, label %19

17:                                               ; preds = %12
  %18 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0), i32 %14, i32 33) #12
  br label %2137

19:                                               ; preds = %12
  %20 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 18
  %21 = load i32, i32* %20, align 4
  %22 = add i32 %21, -4
  %23 = icmp ugt i32 %22, 1020
  br i1 %23, label %24, label %26

24:                                               ; preds = %19
  %25 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.1, i64 0, i64 0), i32 %21) #12
  br label %2137

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 19
  %28 = load i32, i32* %27, align 8
  %29 = add i32 %28, -4
  %30 = icmp ugt i32 %29, 1020
  br i1 %30, label %31, label %33

31:                                               ; preds = %26
  %32 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.2, i64 0, i64 0), i32 %28) #12
  br label %2137

33:                                               ; preds = %26
  %34 = mul nsw i32 %28, %21
  %35 = icmp sgt i32 %34, 4096
  br i1 %35, label %36, label %38

36:                                               ; preds = %33
  %37 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.3, i64 0, i64 0)) #12
  br label %2137

38:                                               ; preds = %33, %38
  %39 = phi i32 [ %42, %38 ], [ 0, %33 ]
  %40 = phi i32 [ %41, %38 ], [ %21, %33 ]
  %41 = lshr i32 %40, 1
  %42 = add nuw nsw i32 %39, 1
  %43 = icmp ugt i32 %40, 3
  br i1 %43, label %38, label %44

44:                                               ; preds = %38
  %45 = icmp sgt i32 %28, 1
  br i1 %45, label %46, label %52

46:                                               ; preds = %44, %46
  %47 = phi i32 [ %50, %46 ], [ 0, %44 ]
  %48 = phi i32 [ %49, %46 ], [ %28, %44 ]
  %49 = lshr i32 %48, 1
  %50 = add nuw nsw i32 %47, 1
  %51 = icmp ugt i32 %48, 3
  br i1 %51, label %46, label %52

52:                                               ; preds = %46, %44
  %53 = phi i32 [ 0, %44 ], [ %50, %46 ]
  %54 = shl i32 2, %39
  %55 = icmp eq i32 %21, %54
  br i1 %55, label %58, label %56

56:                                               ; preds = %52
  %57 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.1, i64 0, i64 0), i32 %21) #12
  br label %2137

58:                                               ; preds = %52
  %59 = shl i32 1, %53
  %60 = icmp eq i32 %28, %59
  br i1 %60, label %63, label %61

61:                                               ; preds = %58
  %62 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.1, i64 0, i64 0), i32 %28) #12
  br label %2137

63:                                               ; preds = %58
  %64 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 6
  store i32 1, i32* %64, align 8
  %65 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 7
  store i32 1, i32* %65, align 4
  %66 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 59
  %67 = load i16, i16* %66, align 4
  %68 = icmp eq i16 %67, 0
  br i1 %68, label %69, label %99

69:                                               ; preds = %63
  %70 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 50
  %71 = load i32, i32* %70, align 4
  %72 = add i32 %71, -1
  %73 = icmp ult i32 %72, 3
  br i1 %73, label %74, label %87

74:                                               ; preds = %69
  %75 = zext i32 %72 to i48
  %76 = shl nuw nsw i48 %75, 4
  %77 = lshr i48 17180065795, %76
  %78 = trunc i48 %77 to i16
  %79 = sext i32 %72 to i64
  %80 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table.opj_j2k_setup_encoder, i64 0, i64 %79
  %81 = load i32, i32* %80, align 4
  %82 = sext i32 %72 to i64
  %83 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table.opj_j2k_setup_encoder.305, i64 0, i64 %82
  %84 = load i32, i32* %83, align 4
  store i16 %78, i16* %66, align 4
  %85 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 58
  store i32 %81, i32* %85, align 8
  %86 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 51
  store i32 %84, i32* %86, align 8
  br label %87

87:                                               ; preds = %69, %74
  %88 = phi i32 [ 0, %69 ], [ 1, %74 ]
  %89 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 52
  %90 = load i32, i32* %89, align 4
  switch i32 %90, label %93 [
    i32 3, label %95
    i32 4, label %91
    i32 33024, label %92
  ]

91:                                               ; preds = %87
  br label %95

92:                                               ; preds = %87
  br label %95

93:                                               ; preds = %87
  %94 = icmp eq i32 %88, 0
  br i1 %94, label %99, label %97

95:                                               ; preds = %87, %92, %91
  %96 = phi i16 [ 4, %91 ], [ -32512, %92 ], [ 3, %87 ]
  store i16 %96, i16* %66, align 4
  br label %97

97:                                               ; preds = %95, %93
  %98 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([137 x i8], [137 x i8]* @.str.4, i64 0, i64 0)) #12
  br label %99

99:                                               ; preds = %97, %93, %63
  %100 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 14
  %101 = load i32, i32* %100, align 4
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %107

103:                                              ; preds = %99
  store i32 1, i32* %100, align 4
  %104 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 5
  store i32 1, i32* %104, align 4
  %105 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 0
  store float 0.000000e+00, float* %105, align 8
  %106 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 5
  br label %192

107:                                              ; preds = %99
  %108 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 5
  %109 = load i32, i32* %108, align 4
  %110 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 5
  %111 = icmp eq i32 %109, 0
  br i1 %111, label %157, label %112

112:                                              ; preds = %107
  %113 = icmp ugt i32 %101, 1
  br i1 %113, label %114, label %192

114:                                              ; preds = %112, %151
  %115 = phi i64 [ %152, %151 ], [ 1, %112 ]
  %116 = phi i32 [ %153, %151 ], [ 1, %112 ]
  %117 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %115
  %118 = load float, float* %117, align 4
  %119 = add nsw i64 %115, -1
  %120 = add i32 %116, -1
  %121 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %119
  %122 = load float, float* %121, align 4
  %123 = fcmp ole float %118, 1.000000e+00
  %124 = select i1 %123, float 1.000000e+00, float %118
  %125 = fcmp ole float %122, 1.000000e+00
  %126 = select i1 %125, float 1.000000e+00, float %122
  %127 = fcmp ult float %124, %126
  br i1 %127, label %151, label %128

128:                                              ; preds = %114
  %129 = fcmp une float %124, %118
  %130 = fcmp une float %126, %122
  %131 = fpext float %118 to double
  br i1 %129, label %132, label %142

132:                                              ; preds = %128
  %133 = fpext float %124 to double
  %134 = fpext float %122 to double
  br i1 %130, label %135, label %139

135:                                              ; preds = %132
  %136 = fpext float %126 to double
  %137 = trunc i64 %115 to i32
  %138 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([102 x i8], [102 x i8]* @.str.5, i64 0, i64 0), i32 %137, double %131, double %133, i32 %120, double %134, double %136) #12
  br label %151

139:                                              ; preds = %132
  %140 = trunc i64 %115 to i32
  %141 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.6, i64 0, i64 0), i32 %140, double %131, double %133, i32 %120, double %134) #12
  br label %151

142:                                              ; preds = %128
  %143 = fpext float %122 to double
  br i1 %130, label %144, label %148

144:                                              ; preds = %142
  %145 = fpext float %126 to double
  %146 = trunc i64 %115 to i32
  %147 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.7, i64 0, i64 0), i32 %146, double %131, i32 %120, double %143, double %145) #12
  br label %151

148:                                              ; preds = %142
  %149 = trunc i64 %115 to i32
  %150 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.8, i64 0, i64 0), i32 %149, double %131, i32 %120, double %143) #12
  br label %151

151:                                              ; preds = %114, %135, %144, %148, %139
  %152 = add nuw nsw i64 %115, 1
  %153 = add nuw i32 %116, 1
  %154 = load i32, i32* %100, align 4
  %155 = zext i32 %154 to i64
  %156 = icmp ult i64 %152, %155
  br i1 %156, label %114, label %192

157:                                              ; preds = %107
  %158 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 7
  %159 = load i32, i32* %158, align 4
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %192, label %161

161:                                              ; preds = %157
  %162 = icmp ugt i32 %101, 1
  br i1 %162, label %163, label %192

163:                                              ; preds = %161, %186
  %164 = phi i32 [ %187, %186 ], [ %101, %161 ]
  %165 = phi i64 [ %188, %186 ], [ 1, %161 ]
  %166 = phi i32 [ %189, %186 ], [ 1, %161 ]
  %167 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 16, i64 %165
  %168 = load float, float* %167, align 4
  %169 = add nsw i64 %165, -1
  %170 = add i32 %166, -1
  %171 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 16, i64 %169
  %172 = load float, float* %171, align 4
  %173 = fcmp olt float %168, %172
  br i1 %173, label %174, label %186

174:                                              ; preds = %163
  %175 = add i32 %164, -1
  %176 = zext i32 %175 to i64
  %177 = icmp eq i64 %165, %176
  %178 = fcmp oeq float %168, 0.000000e+00
  %179 = and i1 %177, %178
  br i1 %179, label %186, label %180

180:                                              ; preds = %174
  %181 = fpext float %168 to double
  %182 = fpext float %172 to double
  %183 = trunc i64 %165 to i32
  %184 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.9, i64 0, i64 0), i32 %183, double %181, i32 %170, double %182) #12
  %185 = load i32, i32* %100, align 4
  br label %186

186:                                              ; preds = %174, %163, %180
  %187 = phi i32 [ %164, %174 ], [ %164, %163 ], [ %185, %180 ]
  %188 = add nuw nsw i64 %165, 1
  %189 = add nuw i32 %166, 1
  %190 = zext i32 %187 to i64
  %191 = icmp ult i64 %188, %190
  br i1 %191, label %163, label %192

192:                                              ; preds = %151, %186, %103, %112, %161, %157
  %193 = phi i32* [ %110, %112 ], [ %110, %161 ], [ %110, %157 ], [ %106, %103 ], [ %110, %186 ], [ %110, %151 ]
  %194 = phi i32 [ 1, %112 ], [ 1, %161 ], [ %101, %157 ], [ 1, %103 ], [ %187, %186 ], [ %154, %151 ]
  %195 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 58
  %196 = load i32, i32* %195, align 8
  %197 = icmp slt i32 %196, 1
  br i1 %197, label %198, label %239

198:                                              ; preds = %192
  %199 = add nsw i32 %194, -1
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %200
  %202 = load float, float* %201, align 4
  %203 = fcmp ogt float %202, 0.000000e+00
  br i1 %203, label %204, label %238

204:                                              ; preds = %198
  %205 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 4
  %206 = load i32, i32* %205, align 8
  %207 = uitofp i32 %206 to double
  %208 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 6
  %209 = load %struct.opj_image_comp*, %struct.opj_image_comp** %208, align 8
  %210 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %209, i64 0, i32 2
  %211 = load i32, i32* %210, align 8
  %212 = uitofp i32 %211 to double
  %213 = fmul double %207, %212
  %214 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %209, i64 0, i32 3
  %215 = load i32, i32* %214, align 4
  %216 = uitofp i32 %215 to double
  %217 = fmul double %213, %216
  %218 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %209, i64 0, i32 6
  %219 = load i32, i32* %218, align 8
  %220 = uitofp i32 %219 to double
  %221 = fmul double %217, %220
  %222 = fpext float %202 to double
  %223 = fmul double %222, 8.000000e+00
  %224 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %209, i64 0, i32 0
  %225 = load i32, i32* %224, align 8
  %226 = uitofp i32 %225 to double
  %227 = fmul double %223, %226
  %228 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %209, i64 0, i32 1
  %229 = load i32, i32* %228, align 4
  %230 = uitofp i32 %229 to double
  %231 = fmul double %227, %230
  %232 = fdiv double %221, %231
  %233 = fptrunc double %232 to float
  %234 = fcmp ogt float %233, 0x41E0000000000000
  %235 = tail call float @llvm.floor.f32(float %233)
  %236 = fptosi float %235 to i32
  %237 = select i1 %234, i32 2147483647, i32 %236
  store i32 %237, i32* %195, align 8
  br label %339

238:                                              ; preds = %198
  store i32 0, i32* %195, align 8
  br label %339

239:                                              ; preds = %192
  %240 = load i16, i16* %66, align 4
  %241 = add i16 %240, -1024
  %242 = icmp ult i16 %241, 1436
  %243 = icmp eq i32 %194, 1
  %244 = and i1 %242, %243
  br i1 %244, label %245, label %273

245:                                              ; preds = %239
  %246 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 0
  %247 = load float, float* %246, align 8
  %248 = fcmp oeq float %247, 0.000000e+00
  br i1 %248, label %249, label %273

249:                                              ; preds = %245
  %250 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 4
  %251 = load i32, i32* %250, align 8
  %252 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 6
  %253 = load %struct.opj_image_comp*, %struct.opj_image_comp** %252, align 8
  %254 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %253, i64 0, i32 2
  %255 = load i32, i32* %254, align 8
  %256 = mul i32 %255, %251
  %257 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %253, i64 0, i32 3
  %258 = load i32, i32* %257, align 4
  %259 = mul i32 %256, %258
  %260 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %253, i64 0, i32 6
  %261 = load i32, i32* %260, align 8
  %262 = mul i32 %259, %261
  %263 = uitofp i32 %262 to float
  %264 = shl i32 %196, 3
  %265 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %253, i64 0, i32 0
  %266 = load i32, i32* %265, align 8
  %267 = mul i32 %264, %266
  %268 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %253, i64 0, i32 1
  %269 = load i32, i32* %268, align 4
  %270 = mul i32 %267, %269
  %271 = uitofp i32 %270 to float
  %272 = fdiv float %263, %271
  store float %272, float* %246, align 8
  br label %273

273:                                              ; preds = %249, %245, %239
  %274 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 4
  %275 = load i32, i32* %274, align 8
  %276 = uitofp i32 %275 to double
  %277 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 6
  %278 = load %struct.opj_image_comp*, %struct.opj_image_comp** %277, align 8
  %279 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %278, i64 0, i32 2
  %280 = load i32, i32* %279, align 8
  %281 = uitofp i32 %280 to double
  %282 = fmul double %276, %281
  %283 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %278, i64 0, i32 3
  %284 = load i32, i32* %283, align 4
  %285 = uitofp i32 %284 to double
  %286 = fmul double %282, %285
  %287 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %278, i64 0, i32 6
  %288 = load i32, i32* %287, align 8
  %289 = uitofp i32 %288 to double
  %290 = fmul double %286, %289
  %291 = sitofp i32 %196 to double
  %292 = fmul double %291, 8.000000e+00
  %293 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %278, i64 0, i32 0
  %294 = load i32, i32* %293, align 8
  %295 = uitofp i32 %294 to double
  %296 = fmul double %292, %295
  %297 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %278, i64 0, i32 1
  %298 = load i32, i32* %297, align 4
  %299 = uitofp i32 %298 to double
  %300 = fmul double %296, %299
  %301 = fdiv double %290, %300
  %302 = fptrunc double %301 to float
  %303 = icmp eq i32 %194, 0
  br i1 %303, label %339, label %304

304:                                              ; preds = %273
  %305 = zext i32 %194 to i64
  %306 = and i64 %305, 1
  %307 = icmp eq i32 %194, 1
  br i1 %307, label %324, label %308

308:                                              ; preds = %304
  %309 = sub nsw i64 %305, %306
  br label %310

310:                                              ; preds = %2199, %308
  %311 = phi i64 [ 0, %308 ], [ %2201, %2199 ]
  %312 = phi i32 [ 0, %308 ], [ %2200, %2199 ]
  %313 = phi i64 [ %309, %308 ], [ %2202, %2199 ]
  %314 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %311
  %315 = load float, float* %314, align 4
  %316 = fcmp olt float %315, %302
  br i1 %316, label %317, label %318

317:                                              ; preds = %310
  store float %302, float* %314, align 4
  br label %318

318:                                              ; preds = %310, %317
  %319 = phi i32 [ 1, %317 ], [ %312, %310 ]
  %320 = or i64 %311, 1
  %321 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %320
  %322 = load float, float* %321, align 4
  %323 = fcmp olt float %322, %302
  br i1 %323, label %2198, label %2199

324:                                              ; preds = %2199, %304
  %325 = phi i32 [ undef, %304 ], [ %2200, %2199 ]
  %326 = phi i64 [ 0, %304 ], [ %2201, %2199 ]
  %327 = phi i32 [ 0, %304 ], [ %2200, %2199 ]
  %328 = icmp eq i64 %306, 0
  br i1 %328, label %334, label %329

329:                                              ; preds = %324
  %330 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %326
  %331 = load float, float* %330, align 4
  %332 = fcmp olt float %331, %302
  br i1 %332, label %333, label %334

333:                                              ; preds = %329
  store float %302, float* %330, align 4
  br label %334

334:                                              ; preds = %333, %329, %324
  %335 = phi i32 [ %325, %324 ], [ 1, %333 ], [ %327, %329 ]
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %339, label %337

337:                                              ; preds = %334
  %338 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.10, i64 0, i64 0)) #12
  br label %339

339:                                              ; preds = %273, %337, %334, %204, %238
  %340 = load i16, i16* %66, align 4
  %341 = add i16 %340, -3
  %342 = icmp ult i16 %341, 4
  br i1 %342, label %343, label %621

343:                                              ; preds = %339
  %344 = add nsw i16 %340, -5
  %345 = icmp ult i16 %344, 2
  br i1 %345, label %346, label %348

346:                                              ; preds = %343
  %347 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.11, i64 0, i64 0)) #12
  store i16 0, i16* %66, align 4
  br label %1217

348:                                              ; preds = %343
  %349 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 4
  store i32 1, i32* %349, align 8
  %350 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 54
  store i8 67, i8* %350, align 1
  %351 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 53
  store i8 1, i8* %351, align 8
  %352 = bitcast %struct.opj_cparameters* %1 to <4 x i32>*
  store <4 x i32> <i32 0, i32 0, i32 0, i32 1>, <4 x i32>* %352, align 8
  %353 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 31
  %354 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 22
  store i32 -1, i32* %354, align 4
  %355 = bitcast i32* %353 to <4 x i32>*
  store <4 x i32> <i32 0, i32 0, i32 1, i32 1>, <4 x i32>* %355, align 4
  %356 = bitcast i32* %20 to <4 x i32>*
  store <4 x i32> <i32 32, i32 32, i32 0, i32 1>, <4 x i32>* %356, align 4
  %357 = load i32, i32* %100, align 4
  %358 = icmp sgt i32 %357, 1
  br i1 %358, label %359, label %375

359:                                              ; preds = %348
  %360 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15
  %361 = add nsw i32 %357, -1
  %362 = sext i32 %361 to i64
  %363 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %362
  %364 = load float, float* %363, align 4
  %365 = fpext float %364 to double
  %366 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([173 x i8], [173 x i8]* @.str.97, i64 0, i64 0), i32 %357, double %365) #12
  %367 = load i32, i32* %100, align 4
  %368 = add nsw i32 %367, -1
  %369 = sext i32 %368 to i64
  %370 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %369
  %371 = bitcast float* %370 to i32*
  %372 = load i32, i32* %371, align 4
  %373 = bitcast [100 x float]* %360 to i32*
  store i32 %372, i32* %373, align 8
  store i32 1, i32* %100, align 4
  %374 = load i16, i16* %66, align 4
  br label %375

375:                                              ; preds = %359, %348
  %376 = phi i16 [ %374, %359 ], [ %340, %348 ]
  switch i16 %376, label %377 [
    i16 3, label %379
    i16 4, label %382
  ]

377:                                              ; preds = %375
  %378 = load i32, i32* %13, align 8
  br label %404

379:                                              ; preds = %375
  %380 = load i32, i32* %13, align 8
  %381 = icmp sgt i32 %380, 6
  br i1 %381, label %393, label %404

382:                                              ; preds = %375
  %383 = load i32, i32* %13, align 8
  %384 = icmp slt i32 %383, 2
  br i1 %384, label %385, label %391

385:                                              ; preds = %382
  %386 = add nsw i32 %383, 1
  %387 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([154 x i8], [154 x i8]* @.str.99, i64 0, i64 0), i32 %386) #12
  store i32 1, i32* %13, align 8
  %388 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 10
  %389 = load i32, i32* %388, align 8
  %390 = or i32 %389, 1
  store i32 %390, i32* %388, align 8
  br label %410

391:                                              ; preds = %382
  %392 = icmp sgt i32 %383, 7
  br i1 %392, label %393, label %399

393:                                              ; preds = %391, %379
  %394 = phi i32 [ %380, %379 ], [ %383, %391 ]
  %395 = phi i8* [ getelementptr inbounds ([146 x i8], [146 x i8]* @.str.98, i64 0, i64 0), %379 ], [ getelementptr inbounds ([154 x i8], [154 x i8]* @.str.100, i64 0, i64 0), %391 ]
  %396 = phi i32 [ 6, %379 ], [ 7, %391 ]
  %397 = add nuw nsw i32 %394, 1
  %398 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* %395, i32 %397) #12
  store i32 %396, i32* %13, align 8
  br label %399

399:                                              ; preds = %393, %391
  %400 = phi i32 [ %383, %391 ], [ %396, %393 ]
  %401 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 10
  %402 = load i32, i32* %401, align 8
  %403 = or i32 %402, 1
  store i32 %403, i32* %401, align 8
  br label %414

404:                                              ; preds = %379, %377
  %405 = phi i32 [ %378, %377 ], [ %380, %379 ]
  %406 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 10
  %407 = load i32, i32* %406, align 8
  %408 = or i32 %407, 1
  store i32 %408, i32* %406, align 8
  %409 = icmp eq i32 %405, 1
  br i1 %409, label %410, label %414

410:                                              ; preds = %404, %385
  %411 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 24
  store i32 1, i32* %411, align 4
  %412 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 0
  store i32 128, i32* %412, align 8
  %413 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 0
  store i32 128, i32* %413, align 4
  br label %499

414:                                              ; preds = %404, %399
  %415 = phi i32 [ %400, %399 ], [ %405, %404 ]
  %416 = add i32 %415, -1
  %417 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 24
  store i32 %416, i32* %417, align 4
  %418 = icmp sgt i32 %416, 0
  br i1 %418, label %419, label %499

419:                                              ; preds = %414
  %420 = zext i32 %416 to i64
  %421 = icmp ult i32 %416, 4
  br i1 %421, label %491, label %422

422:                                              ; preds = %419
  %423 = and i64 %420, 4294967292
  %424 = add nsw i64 %423, -4
  %425 = lshr exact i64 %424, 2
  %426 = add nuw nsw i64 %425, 1
  %427 = and i64 %426, 7
  %428 = icmp ult i64 %424, 28
  br i1 %428, label %476, label %429

429:                                              ; preds = %422
  %430 = sub nsw i64 %426, %427
  br label %431

431:                                              ; preds = %431, %429
  %432 = phi i64 [ 0, %429 ], [ %473, %431 ]
  %433 = phi i64 [ %430, %429 ], [ %474, %431 ]
  %434 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %432
  %435 = bitcast i32* %434 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %435, align 4
  %436 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %432
  %437 = bitcast i32* %436 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %437, align 4
  %438 = or i64 %432, 4
  %439 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %438
  %440 = bitcast i32* %439 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %440, align 4
  %441 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %438
  %442 = bitcast i32* %441 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %442, align 4
  %443 = or i64 %432, 8
  %444 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %443
  %445 = bitcast i32* %444 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %445, align 4
  %446 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %443
  %447 = bitcast i32* %446 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %447, align 4
  %448 = or i64 %432, 12
  %449 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %448
  %450 = bitcast i32* %449 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %450, align 4
  %451 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %448
  %452 = bitcast i32* %451 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %452, align 4
  %453 = or i64 %432, 16
  %454 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %453
  %455 = bitcast i32* %454 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %455, align 4
  %456 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %453
  %457 = bitcast i32* %456 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %457, align 4
  %458 = or i64 %432, 20
  %459 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %458
  %460 = bitcast i32* %459 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %460, align 4
  %461 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %458
  %462 = bitcast i32* %461 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %462, align 4
  %463 = or i64 %432, 24
  %464 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %463
  %465 = bitcast i32* %464 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %465, align 4
  %466 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %463
  %467 = bitcast i32* %466 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %467, align 4
  %468 = or i64 %432, 28
  %469 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %468
  %470 = bitcast i32* %469 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %470, align 4
  %471 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %468
  %472 = bitcast i32* %471 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %472, align 4
  %473 = add i64 %432, 32
  %474 = add i64 %433, -8
  %475 = icmp eq i64 %474, 0
  br i1 %475, label %476, label %431, !llvm.loop !2

476:                                              ; preds = %431, %422
  %477 = phi i64 [ 0, %422 ], [ %473, %431 ]
  %478 = icmp eq i64 %427, 0
  br i1 %478, label %489, label %479

479:                                              ; preds = %476, %479
  %480 = phi i64 [ %486, %479 ], [ %477, %476 ]
  %481 = phi i64 [ %487, %479 ], [ %427, %476 ]
  %482 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %480
  %483 = bitcast i32* %482 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %483, align 4
  %484 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %480
  %485 = bitcast i32* %484 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %485, align 4
  %486 = add i64 %480, 4
  %487 = add i64 %481, -1
  %488 = icmp eq i64 %487, 0
  br i1 %488, label %489, label %479, !llvm.loop !4

489:                                              ; preds = %479, %476
  %490 = icmp eq i64 %423, %420
  br i1 %490, label %499, label %491

491:                                              ; preds = %489, %419
  %492 = phi i64 [ 0, %419 ], [ %423, %489 ]
  br label %493

493:                                              ; preds = %491, %493
  %494 = phi i64 [ %497, %493 ], [ %492, %491 ]
  %495 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %494
  store i32 256, i32* %495, align 4
  %496 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %494
  store i32 256, i32* %496, align 4
  %497 = add nuw nsw i64 %494, 1
  %498 = icmp eq i64 %497, %420
  br i1 %498, label %499, label %493, !llvm.loop !6

499:                                              ; preds = %493, %489, %414, %410
  %500 = phi i32 [ %415, %414 ], [ 1, %410 ], [ %415, %489 ], [ %415, %493 ]
  %501 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 11
  store i32 4, i32* %501, align 4
  %502 = load i16, i16* %66, align 4
  %503 = icmp eq i16 %502, 4
  br i1 %503, label %504, label %520

504:                                              ; preds = %499
  %505 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 0, i32 11
  store i32 1, i32* %505, align 4
  %506 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 0, i32 0
  store i32 0, i32* %506, align 4
  %507 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 0, i32 1
  store i32 0, i32* %507, align 4
  %508 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 0, i32 2
  store i32 1, i32* %508, align 4
  %509 = add nsw i32 %500, -1
  %510 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 0, i32 3
  store i32 %509, i32* %510, align 4
  %511 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 0, i32 4
  store i32 3, i32* %511, align 4
  %512 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 0, i32 8
  store i32 4, i32* %512, align 4
  %513 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 1, i32 11
  store i32 1, i32* %513, align 4
  %514 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 1, i32 0
  store i32 %509, i32* %514, align 4
  %515 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 1, i32 1
  store i32 0, i32* %515, align 4
  %516 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 1, i32 2
  store i32 1, i32* %516, align 4
  %517 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 1, i32 3
  store i32 %500, i32* %517, align 4
  %518 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 1, i32 4
  store i32 3, i32* %518, align 4
  %519 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 1, i32 8
  store i32 4, i32* %519, align 4
  br label %520

520:                                              ; preds = %504, %499
  %521 = phi i32 [ 2, %504 ], [ 0, %499 ]
  %522 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 13
  store i32 %521, i32* %522, align 8
  store i32 1, i32* %193, align 4
  %523 = load i32, i32* %195, align 8
  %524 = icmp slt i32 %523, 1
  br i1 %524, label %525, label %527

525:                                              ; preds = %520
  store i32 1302083, i32* %195, align 8
  %526 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.101, i64 0, i64 0)) #12
  br label %531

527:                                              ; preds = %520
  %528 = icmp sgt i32 %523, 1302083
  br i1 %528, label %529, label %531

529:                                              ; preds = %527
  %530 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([173 x i8], [173 x i8]* @.str.102, i64 0, i64 0)) #12
  store i32 1302083, i32* %195, align 8
  br label %531

531:                                              ; preds = %529, %527, %525
  %532 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 51
  %533 = load i32, i32* %532, align 8
  %534 = icmp slt i32 %533, 1
  br i1 %534, label %535, label %537

535:                                              ; preds = %531
  store i32 1041666, i32* %532, align 8
  %536 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([149 x i8], [149 x i8]* @.str.103, i64 0, i64 0)) #12
  br label %541

537:                                              ; preds = %531
  %538 = icmp sgt i32 %533, 1041666
  br i1 %538, label %539, label %541

539:                                              ; preds = %537
  %540 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([173 x i8], [173 x i8]* @.str.104, i64 0, i64 0)) #12
  store i32 1041666, i32* %532, align 8
  br label %541

541:                                              ; preds = %535, %537, %539
  %542 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 4
  %543 = load i32, i32* %542, align 8
  %544 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 6
  %545 = load %struct.opj_image_comp*, %struct.opj_image_comp** %544, align 8
  %546 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %545, i64 0, i32 2
  %547 = load i32, i32* %546, align 8
  %548 = mul i32 %547, %543
  %549 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %545, i64 0, i32 3
  %550 = load i32, i32* %549, align 4
  %551 = mul i32 %548, %550
  %552 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %545, i64 0, i32 6
  %553 = load i32, i32* %552, align 8
  %554 = mul i32 %551, %553
  %555 = uitofp i32 %554 to float
  %556 = load i32, i32* %195, align 8
  %557 = shl i32 %556, 3
  %558 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %545, i64 0, i32 0
  %559 = load i32, i32* %558, align 8
  %560 = mul i32 %557, %559
  %561 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %545, i64 0, i32 1
  %562 = load i32, i32* %561, align 4
  %563 = mul i32 %560, %562
  %564 = uitofp i32 %563 to float
  %565 = fdiv float %555, %564
  %566 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 0
  store float %565, float* %566, align 8
  %567 = load i16, i16* %66, align 4
  %568 = load i32, i32* %542, align 8
  %569 = icmp eq i32 %568, 3
  br i1 %569, label %570, label %580

570:                                              ; preds = %541
  %571 = load %struct.opj_image_comp*, %struct.opj_image_comp** %544, align 8
  %572 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %571, i64 0, i32 7
  %573 = load i32, i32* %572, align 4
  %574 = icmp ne i32 %573, 12
  %575 = zext i1 %574 to i32
  %576 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %571, i64 0, i32 8
  %577 = load i32, i32* %576, align 8
  %578 = or i32 %577, %575
  %579 = icmp eq i32 %578, 0
  br i1 %579, label %591, label %582

580:                                              ; preds = %541
  %581 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([166 x i8], [166 x i8]* @.str.105, i64 0, i64 0), i32 %568) #12
  br label %620

582:                                              ; preds = %2139, %591, %570
  %583 = phi i32 [ %573, %570 ], [ %593, %591 ], [ %2141, %2139 ]
  %584 = phi i32 [ %577, %570 ], [ %597, %591 ], [ %2145, %2139 ]
  %585 = phi i32 [ 0, %570 ], [ 1, %591 ], [ 2, %2139 ]
  %586 = getelementptr inbounds [7 x i8], [7 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 7, i8* nonnull %586) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %586, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @__const.opj_j2k_is_imf_compliant.signed_str, i64 0, i64 0), i64 7, i1 false) #12
  %587 = getelementptr inbounds [9 x i8], [9 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 9, i8* nonnull %587) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %587, i8* align 1 getelementptr inbounds ([9 x i8], [9 x i8]* @__const.opj_j2k_is_imf_compliant.unsigned_str, i64 0, i64 0), i64 9, i1 false) #12
  %588 = icmp eq i32 %584, 0
  %589 = select i1 %588, i8* %587, i8* %586
  %590 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([217 x i8], [217 x i8]* @.str.106, i64 0, i64 0), i32 %585, i32 %583, i8* %589) #12
  call void @llvm.lifetime.end.p0i8(i64 9, i8* nonnull %587) #12
  call void @llvm.lifetime.end.p0i8(i64 7, i8* nonnull %586) #12
  br label %620

591:                                              ; preds = %570
  %592 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %571, i64 1, i32 7
  %593 = load i32, i32* %592, align 4
  %594 = icmp ne i32 %593, 12
  %595 = zext i1 %594 to i32
  %596 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %571, i64 1, i32 8
  %597 = load i32, i32* %596, align 8
  %598 = or i32 %597, %595
  %599 = icmp eq i32 %598, 0
  br i1 %599, label %2139, label %582

600:                                              ; preds = %2148
  %601 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %571, i64 0, i32 2
  %602 = load i32, i32* %601, align 8
  %603 = icmp ugt i32 %602, 2048
  %604 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %571, i64 0, i32 3
  %605 = load i32, i32* %604, align 4
  %606 = icmp ugt i32 %605, 1080
  %607 = or i1 %603, %606
  br i1 %607, label %608, label %1217

608:                                              ; preds = %600
  %609 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.107, i64 0, i64 0), i32 %602, i32 %605) #12
  br label %620

610:                                              ; preds = %2148
  %611 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %571, i64 0, i32 2
  %612 = load i32, i32* %611, align 8
  %613 = icmp ugt i32 %612, 4096
  %614 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %571, i64 0, i32 3
  %615 = load i32, i32* %614, align 4
  %616 = icmp ugt i32 %615, 2160
  %617 = or i1 %613, %616
  br i1 %617, label %618, label %1217

618:                                              ; preds = %610
  %619 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([165 x i8], [165 x i8]* @.str.108, i64 0, i64 0), i32 %612, i32 %615) #12
  br label %620

620:                                              ; preds = %580, %582, %618, %608
  store i16 0, i16* %66, align 4
  br label %1217

621:                                              ; preds = %339
  %622 = icmp eq i16 %340, 7
  br i1 %622, label %623, label %625

623:                                              ; preds = %621
  %624 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.12, i64 0, i64 0)) #12
  store i16 0, i16* %66, align 4
  br label %1217

625:                                              ; preds = %621
  %626 = add i16 %340, -256
  %627 = icmp ult i16 %626, 524
  br i1 %627, label %628, label %630

628:                                              ; preds = %625
  %629 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13, i64 0, i64 0)) #12
  store i16 0, i16* %66, align 4
  br label %1217

630:                                              ; preds = %625
  %631 = add i16 %340, -1024
  %632 = icmp ult i16 %631, 1436
  br i1 %632, label %633, label %1210

633:                                              ; preds = %630
  %634 = and i16 %340, -256
  %635 = load i32, i32* %20, align 4
  %636 = icmp eq i32 %635, 64
  br i1 %636, label %637, label %641

637:                                              ; preds = %633
  %638 = load i32, i32* %27, align 8
  %639 = icmp eq i32 %638, 64
  br i1 %639, label %640, label %641

640:                                              ; preds = %637
  store i32 32, i32* %20, align 4
  store i32 32, i32* %27, align 8
  br label %641

641:                                              ; preds = %640, %637, %633
  %642 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 54
  store i8 67, i8* %642, align 1
  %643 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 53
  store i8 1, i8* %643, align 8
  %644 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 11
  %645 = load i32, i32* %644, align 4
  %646 = icmp eq i32 %645, 0
  br i1 %646, label %647, label %648

647:                                              ; preds = %641
  store i32 4, i32* %644, align 4
  br label %648

648:                                              ; preds = %647, %641
  switch i16 %634, label %651 [
    i16 1024, label %649
    i16 1280, label %649
    i16 1536, label %649
  ]

649:                                              ; preds = %648, %648, %648
  %650 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 21
  store i32 1, i32* %650, align 8
  br label %651

651:                                              ; preds = %649, %648
  %652 = load i32, i32* %13, align 8
  %653 = icmp eq i32 %652, 6
  br i1 %653, label %654, label %704

654:                                              ; preds = %651
  %655 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 0
  %656 = load i32, i32* %655, align 8
  %657 = icmp eq i32 %656, 0
  br i1 %657, label %658, label %704

658:                                              ; preds = %654
  %659 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 1
  %660 = load i32, i32* %659, align 4
  %661 = icmp eq i32 %660, 0
  br i1 %661, label %662, label %704

662:                                              ; preds = %658
  %663 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 0
  %664 = load i32, i32* %663, align 8
  %665 = icmp eq i32 %664, 0
  %666 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 3
  %667 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 2
  %668 = select i1 %665, i32* %667, i32* %666
  %669 = load i32, i32* %668, align 4
  %670 = zext i16 %634 to i32
  %671 = add nsw i32 %670, -1024
  %672 = lshr exact i32 %671, 8
  switch i32 %672, label %691 [
    i32 0, label %689
    i32 5, label %683
    i32 4, label %677
    i32 3, label %673
  ]

673:                                              ; preds = %662
  %674 = icmp ugt i32 %669, 2047
  br i1 %674, label %689, label %675

675:                                              ; preds = %673
  %676 = icmp ugt i32 %669, 1023
  br i1 %676, label %689, label %691

677:                                              ; preds = %662
  %678 = icmp ugt i32 %669, 4095
  br i1 %678, label %691, label %679

679:                                              ; preds = %677
  %680 = icmp ugt i32 %669, 2047
  br i1 %680, label %689, label %681

681:                                              ; preds = %679
  %682 = icmp ugt i32 %669, 1023
  br i1 %682, label %689, label %691

683:                                              ; preds = %662
  %684 = icmp ugt i32 %669, 4095
  br i1 %684, label %691, label %685

685:                                              ; preds = %683
  %686 = icmp ugt i32 %669, 2047
  br i1 %686, label %689, label %687

687:                                              ; preds = %685
  %688 = icmp ugt i32 %669, 1023
  br i1 %688, label %689, label %691

689:                                              ; preds = %687, %685, %681, %679, %675, %673, %662
  %690 = phi i32 [ 6, %662 ], [ 6, %673 ], [ 5, %675 ], [ 6, %679 ], [ 5, %681 ], [ 6, %685 ], [ 5, %687 ]
  store i32 %690, i32* %13, align 8
  br label %691

691:                                              ; preds = %689, %687, %683, %681, %677, %675, %662
  %692 = phi i32 [ 6, %683 ], [ 6, %677 ], [ 6, %687 ], [ 6, %681 ], [ 6, %675 ], [ 6, %662 ], [ %690, %689 ]
  br i1 %665, label %693, label %704

693:                                              ; preds = %691
  %694 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 3
  %695 = load i32, i32* %667, align 8
  %696 = add nsw i32 %692, -1
  %697 = shl i32 1, %696
  %698 = icmp ult i32 %695, %697
  br i1 %698, label %699, label %701

699:                                              ; preds = %701, %693
  store i32 %696, i32* %13, align 8
  %700 = icmp sgt i32 %696, 0
  br i1 %700, label %2149, label %704

701:                                              ; preds = %693
  %702 = load i32, i32* %694, align 4
  %703 = icmp ult i32 %702, %697
  br i1 %703, label %699, label %704

704:                                              ; preds = %701, %699, %2154, %2157, %2164, %2167, %2174, %2177, %2184, %2187, %2194, %2197, %691, %658, %654, %651
  %705 = phi i32 [ %692, %691 ], [ 6, %658 ], [ 6, %654 ], [ %652, %651 ], [ %692, %701 ], [ %696, %699 ], [ %696, %2154 ], [ %2151, %2157 ], [ %2151, %2164 ], [ %2161, %2167 ], [ %2161, %2174 ], [ %2171, %2177 ], [ %2171, %2184 ], [ %2181, %2187 ], [ %2181, %2194 ], [ %2191, %2197 ]
  %706 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 10
  %707 = load i32, i32* %706, align 8
  %708 = icmp eq i32 %707, 0
  br i1 %708, label %709, label %802

709:                                              ; preds = %704
  store i32 1, i32* %706, align 8
  %710 = icmp eq i32 %705, 1
  br i1 %710, label %711, label %715

711:                                              ; preds = %709
  %712 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 24
  store i32 1, i32* %712, align 4
  %713 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 0
  store i32 128, i32* %713, align 8
  %714 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 0
  store i32 128, i32* %714, align 4
  br label %802

715:                                              ; preds = %709
  %716 = add i32 %705, -1
  %717 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 24
  store i32 %716, i32* %717, align 4
  %718 = icmp sgt i32 %716, 0
  br i1 %718, label %719, label %802

719:                                              ; preds = %715
  %720 = zext i32 %716 to i64
  %721 = icmp ult i32 %716, 4
  br i1 %721, label %791, label %722

722:                                              ; preds = %719
  %723 = and i64 %720, 4294967292
  %724 = add nsw i64 %723, -4
  %725 = lshr exact i64 %724, 2
  %726 = add nuw nsw i64 %725, 1
  %727 = and i64 %726, 7
  %728 = icmp ult i64 %724, 28
  br i1 %728, label %776, label %729

729:                                              ; preds = %722
  %730 = sub nsw i64 %726, %727
  br label %731

731:                                              ; preds = %731, %729
  %732 = phi i64 [ 0, %729 ], [ %773, %731 ]
  %733 = phi i64 [ %730, %729 ], [ %774, %731 ]
  %734 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %732
  %735 = bitcast i32* %734 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %735, align 4
  %736 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %732
  %737 = bitcast i32* %736 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %737, align 4
  %738 = or i64 %732, 4
  %739 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %738
  %740 = bitcast i32* %739 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %740, align 4
  %741 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %738
  %742 = bitcast i32* %741 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %742, align 4
  %743 = or i64 %732, 8
  %744 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %743
  %745 = bitcast i32* %744 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %745, align 4
  %746 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %743
  %747 = bitcast i32* %746 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %747, align 4
  %748 = or i64 %732, 12
  %749 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %748
  %750 = bitcast i32* %749 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %750, align 4
  %751 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %748
  %752 = bitcast i32* %751 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %752, align 4
  %753 = or i64 %732, 16
  %754 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %753
  %755 = bitcast i32* %754 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %755, align 4
  %756 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %753
  %757 = bitcast i32* %756 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %757, align 4
  %758 = or i64 %732, 20
  %759 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %758
  %760 = bitcast i32* %759 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %760, align 4
  %761 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %758
  %762 = bitcast i32* %761 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %762, align 4
  %763 = or i64 %732, 24
  %764 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %763
  %765 = bitcast i32* %764 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %765, align 4
  %766 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %763
  %767 = bitcast i32* %766 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %767, align 4
  %768 = or i64 %732, 28
  %769 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %768
  %770 = bitcast i32* %769 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %770, align 4
  %771 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %768
  %772 = bitcast i32* %771 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %772, align 4
  %773 = add i64 %732, 32
  %774 = add i64 %733, -8
  %775 = icmp eq i64 %774, 0
  br i1 %775, label %776, label %731, !llvm.loop !8

776:                                              ; preds = %731, %722
  %777 = phi i64 [ 0, %722 ], [ %773, %731 ]
  %778 = icmp eq i64 %727, 0
  br i1 %778, label %789, label %779

779:                                              ; preds = %776, %779
  %780 = phi i64 [ %786, %779 ], [ %777, %776 ]
  %781 = phi i64 [ %787, %779 ], [ %727, %776 ]
  %782 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %780
  %783 = bitcast i32* %782 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %783, align 4
  %784 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %780
  %785 = bitcast i32* %784 to <4 x i32>*
  store <4 x i32> <i32 256, i32 256, i32 256, i32 256>, <4 x i32>* %785, align 4
  %786 = add i64 %780, 4
  %787 = add i64 %781, -1
  %788 = icmp eq i64 %787, 0
  br i1 %788, label %789, label %779, !llvm.loop !9

789:                                              ; preds = %779, %776
  %790 = icmp eq i64 %723, %720
  br i1 %790, label %799, label %791

791:                                              ; preds = %789, %719
  %792 = phi i64 [ 0, %719 ], [ %723, %789 ]
  br label %793

793:                                              ; preds = %791, %793
  %794 = phi i64 [ %797, %793 ], [ %792, %791 ]
  %795 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %794
  store i32 256, i32* %795, align 4
  %796 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %794
  store i32 256, i32* %796, align 4
  %797 = add nuw nsw i64 %794, 1
  %798 = icmp eq i64 %797, %720
  br i1 %798, label %799, label %793, !llvm.loop !10

799:                                              ; preds = %793, %789
  %800 = load i16, i16* %66, align 4
  %801 = and i16 %800, -256
  br label %802

802:                                              ; preds = %799, %704, %711, %715
  %803 = phi i16 [ %801, %799 ], [ %634, %704 ], [ %634, %711 ], [ %634, %715 ]
  %804 = phi i16 [ %800, %799 ], [ %340, %704 ], [ %340, %711 ], [ %340, %715 ]
  %805 = and i16 %804, 15
  %806 = lshr i16 %804, 4
  %807 = and i16 %806, 15
  %808 = add nsw i32 %705, -1
  %809 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 0
  %810 = load i32, i32* %809, align 8
  %811 = icmp eq i32 %810, 0
  %812 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 3
  %813 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 2
  %814 = select i1 %811, i32* %813, i32* %812
  %815 = load i32, i32* %814, align 4
  %816 = zext i16 %805 to i32
  %817 = icmp ugt i16 %805, 11
  br i1 %817, label %818, label %820

818:                                              ; preds = %802
  %819 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([106 x i8], [106 x i8]* @.str.109, i64 0, i64 0), i32 %816) #12
  br label %820

820:                                              ; preds = %818, %802
  %821 = phi i32 [ 0, %818 ], [ 1, %802 ]
  %822 = zext i16 %805 to i64
  %823 = getelementptr inbounds [12 x i16], [12 x i16]* @tabMaxSubLevelFromMainLevel, i64 0, i64 %822
  %824 = load i16, i16* %823, align 2
  %825 = icmp ugt i16 %807, %824
  br i1 %825, label %826, label %830

826:                                              ; preds = %820
  %827 = zext i16 %807 to i32
  %828 = zext i16 %824 to i32
  %829 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @.str.110, i64 0, i64 0), i32 %828, i32 %816, i32 %827) #12
  br label %830

830:                                              ; preds = %826, %820
  %831 = phi i32 [ 0, %826 ], [ %821, %820 ]
  %832 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 4
  %833 = load i32, i32* %832, align 8
  %834 = icmp ugt i32 %833, 3
  br i1 %834, label %835, label %837

835:                                              ; preds = %830
  %836 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([145 x i8], [145 x i8]* @.str.111, i64 0, i64 0), i32 %833) #12
  br label %837

837:                                              ; preds = %835, %830
  %838 = phi i32 [ 0, %835 ], [ %831, %830 ]
  %839 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 0
  %840 = load i32, i32* %839, align 8
  %841 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 1
  %842 = load i32, i32* %841, align 4
  %843 = or i32 %842, %840
  %844 = icmp eq i32 %843, 0
  br i1 %844, label %849, label %845

845:                                              ; preds = %837
  %846 = icmp ne i32 %842, 0
  %847 = zext i1 %846 to i32
  %848 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([115 x i8], [115 x i8]* @.str.112, i64 0, i64 0), i32 %840, i32 %847) #12
  br label %849

849:                                              ; preds = %845, %837
  %850 = phi i32 [ 0, %845 ], [ %838, %837 ]
  %851 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 1
  %852 = load i32, i32* %851, align 4
  %853 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 2
  %854 = load i32, i32* %853, align 8
  %855 = or i32 %854, %852
  %856 = icmp eq i32 %855, 0
  br i1 %856, label %859, label %857

857:                                              ; preds = %849
  %858 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([114 x i8], [114 x i8]* @.str.113, i64 0, i64 0), i32 %852, i32 %854) #12
  br label %859

859:                                              ; preds = %857, %849
  %860 = phi i32 [ 0, %857 ], [ %850, %849 ]
  %861 = load i32, i32* %809, align 8
  %862 = icmp eq i32 %861, 0
  br i1 %862, label %892, label %863

863:                                              ; preds = %859
  switch i16 %803, label %876 [
    i16 1024, label %864
    i16 1280, label %864
    i16 1536, label %864
  ]

864:                                              ; preds = %863, %863, %863
  %865 = load i32, i32* %812, align 4
  %866 = load i32, i32* %813, align 8
  %867 = icmp ult i32 %865, %866
  %868 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 4
  %869 = load i32, i32* %868, align 8
  %870 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 3
  %871 = load i32, i32* %870, align 4
  %872 = icmp ult i32 %869, %871
  %873 = or i1 %867, %872
  br i1 %873, label %874, label %892

874:                                              ; preds = %864
  %875 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([156 x i8], [156 x i8]* @.str.114, i64 0, i64 0), i32 %865, i32 %869, i32 %866, i32 %871) #12
  br label %892

876:                                              ; preds = %863
  %877 = load i32, i32* %812, align 4
  %878 = load i32, i32* %813, align 8
  %879 = icmp ult i32 %877, %878
  %880 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 4
  %881 = load i32, i32* %880, align 8
  br i1 %879, label %886, label %882

882:                                              ; preds = %876
  %883 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 3
  %884 = load i32, i32* %883, align 4
  %885 = icmp ult i32 %881, %884
  br i1 %885, label %886, label %892

886:                                              ; preds = %876, %882
  %887 = icmp eq i32 %877, 1024
  %888 = icmp eq i32 %881, 1024
  %889 = and i1 %887, %888
  br i1 %889, label %892, label %890

890:                                              ; preds = %886
  %891 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([244 x i8], [244 x i8]* @.str.115, i64 0, i64 0), i32 %877, i32 %881) #12
  br label %892

892:                                              ; preds = %890, %886, %882, %874, %864, %859
  %893 = phi i32 [ 0, %874 ], [ %860, %882 ], [ 0, %890 ], [ %860, %859 ], [ %860, %864 ], [ %860, %886 ]
  %894 = load i32, i32* %832, align 8
  %895 = icmp eq i32 %894, 0
  br i1 %895, label %977, label %896

896:                                              ; preds = %892
  %897 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 6
  %898 = getelementptr inbounds [7 x i8], [7 x i8]* %5, i64 0, i64 0
  %899 = getelementptr inbounds [9 x i8], [9 x i8]* %6, i64 0, i64 0
  br label %902

900:                                              ; preds = %924
  %901 = icmp eq i32 %925, 0
  br i1 %901, label %977, label %930

902:                                              ; preds = %924, %896
  %903 = phi i32 [ %894, %896 ], [ %925, %924 ]
  %904 = phi i64 [ 0, %896 ], [ %927, %924 ]
  %905 = phi i32 [ %893, %896 ], [ %926, %924 ]
  %906 = load %struct.opj_image_comp*, %struct.opj_image_comp** %897, align 8
  %907 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %906, i64 %904, i32 7
  %908 = load i32, i32* %907, align 4
  %909 = add i32 %908, -8
  %910 = icmp ult i32 %909, 9
  br i1 %910, label %911, label %915

911:                                              ; preds = %902
  %912 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %906, i64 %904, i32 8
  %913 = load i32, i32* %912, align 8
  %914 = icmp eq i32 %913, 0
  br i1 %914, label %924, label %915

915:                                              ; preds = %911, %902
  call void @llvm.lifetime.start.p0i8(i64 7, i8* nonnull %898) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %898, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @__const.opj_j2k_is_imf_compliant.signed_str, i64 0, i64 0), i64 7, i1 false) #12
  call void @llvm.lifetime.start.p0i8(i64 9, i8* nonnull %899) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %899, i8* align 1 getelementptr inbounds ([9 x i8], [9 x i8]* @__const.opj_j2k_is_imf_compliant.unsigned_str, i64 0, i64 0), i64 9, i1 false) #12
  %916 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %906, i64 %904, i32 8
  %917 = load i32, i32* %916, align 8
  %918 = icmp eq i32 %917, 0
  %919 = select i1 %918, i8* %899, i8* %898
  %920 = load i32, i32* %907, align 4
  %921 = trunc i64 %904 to i32
  %922 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.116, i64 0, i64 0), i32 %921, i32 %920, i8* %919) #12
  call void @llvm.lifetime.end.p0i8(i64 9, i8* nonnull %899) #12
  call void @llvm.lifetime.end.p0i8(i64 7, i8* nonnull %898) #12
  %923 = load i32, i32* %832, align 8
  br label %924

924:                                              ; preds = %915, %911
  %925 = phi i32 [ %923, %915 ], [ %903, %911 ]
  %926 = phi i32 [ 0, %915 ], [ %905, %911 ]
  %927 = add nuw nsw i64 %904, 1
  %928 = zext i32 %925 to i64
  %929 = icmp ult i64 %927, %928
  br i1 %929, label %902, label %900

930:                                              ; preds = %900, %971
  %931 = phi i64 [ %973, %971 ], [ 0, %900 ]
  %932 = phi i32 [ %972, %971 ], [ %926, %900 ]
  %933 = trunc i64 %931 to i32
  switch i32 %933, label %949 [
    i32 0, label %934
    i32 1, label %941
  ]

934:                                              ; preds = %930
  %935 = load %struct.opj_image_comp*, %struct.opj_image_comp** %897, align 8
  %936 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %935, i64 0, i32 0
  %937 = load i32, i32* %936, align 8
  %938 = icmp eq i32 %937, 1
  br i1 %938, label %963, label %939

939:                                              ; preds = %934
  %940 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.117, i64 0, i64 0), i32 %937) #12
  br label %963

941:                                              ; preds = %930
  %942 = load %struct.opj_image_comp*, %struct.opj_image_comp** %897, align 8
  %943 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %942, i64 %931, i32 0
  %944 = load i32, i32* %943, align 8
  %945 = add i32 %944, -1
  %946 = icmp ult i32 %945, 2
  br i1 %946, label %963, label %947

947:                                              ; preds = %941
  %948 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([102 x i8], [102 x i8]* @.str.118, i64 0, i64 0), i32 %944) #12
  br label %963

949:                                              ; preds = %930
  %950 = icmp ugt i64 %931, 1
  br i1 %950, label %951, label %963

951:                                              ; preds = %949
  %952 = load %struct.opj_image_comp*, %struct.opj_image_comp** %897, align 8
  %953 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %952, i64 %931, i32 0
  %954 = load i32, i32* %953, align 8
  %955 = add nuw nsw i64 %931, 4294967295
  %956 = and i64 %955, 4294967295
  %957 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %952, i64 %956, i32 0
  %958 = load i32, i32* %957, align 8
  %959 = icmp eq i32 %954, %958
  br i1 %959, label %963, label %960

960:                                              ; preds = %951
  %961 = add i32 %933, 1
  %962 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.119, i64 0, i64 0), i32 %961, i32 %954, i32 %958) #12
  br label %963

963:                                              ; preds = %960, %951, %949, %947, %941, %939, %934
  %964 = phi i32 [ 0, %960 ], [ %932, %951 ], [ %932, %949 ], [ %932, %941 ], [ 0, %947 ], [ %932, %934 ], [ 0, %939 ]
  %965 = load %struct.opj_image_comp*, %struct.opj_image_comp** %897, align 8
  %966 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %965, i64 %931, i32 1
  %967 = load i32, i32* %966, align 4
  %968 = icmp eq i32 %967, 1
  br i1 %968, label %971, label %969

969:                                              ; preds = %963
  %970 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.120, i64 0, i64 0), i32 %967, i32 %933) #12
  br label %971

971:                                              ; preds = %969, %963
  %972 = phi i32 [ 0, %969 ], [ %964, %963 ]
  %973 = add nuw nsw i64 %931, 1
  %974 = load i32, i32* %832, align 8
  %975 = zext i32 %974 to i64
  %976 = icmp ult i64 %973, %975
  br i1 %976, label %930, label %977

977:                                              ; preds = %971, %900, %892
  %978 = phi i32 [ %926, %900 ], [ %893, %892 ], [ %972, %971 ]
  %979 = zext i16 %803 to i32
  %980 = add nsw i32 %979, -1024
  %981 = lshr exact i32 %980, 8
  switch i32 %981, label %1209 [
    i32 0, label %982
    i32 3, label %982
    i32 1, label %994
    i32 4, label %994
    i32 2, label %1006
    i32 5, label %1006
  ]

982:                                              ; preds = %977, %977
  %983 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 6
  %984 = load %struct.opj_image_comp*, %struct.opj_image_comp** %983, align 8
  %985 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %984, i64 0, i32 2
  %986 = load i32, i32* %985, align 8
  %987 = icmp ugt i32 %986, 2048
  %988 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %984, i64 0, i32 3
  %989 = load i32, i32* %988, align 4
  %990 = icmp ugt i32 %989, 1556
  %991 = or i1 %987, %990
  br i1 %991, label %992, label %1018

992:                                              ; preds = %982
  %993 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([148 x i8], [148 x i8]* @.str.121, i64 0, i64 0), i32 %986, i32 %989) #12
  br label %1018

994:                                              ; preds = %977, %977
  %995 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 6
  %996 = load %struct.opj_image_comp*, %struct.opj_image_comp** %995, align 8
  %997 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %996, i64 0, i32 2
  %998 = load i32, i32* %997, align 8
  %999 = icmp ugt i32 %998, 4096
  %1000 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %996, i64 0, i32 3
  %1001 = load i32, i32* %1000, align 4
  %1002 = icmp ugt i32 %1001, 3112
  %1003 = or i1 %999, %1002
  br i1 %1003, label %1004, label %1018

1004:                                             ; preds = %994
  %1005 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([148 x i8], [148 x i8]* @.str.122, i64 0, i64 0), i32 %998, i32 %1001) #12
  br label %1018

1006:                                             ; preds = %977, %977
  %1007 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 6
  %1008 = load %struct.opj_image_comp*, %struct.opj_image_comp** %1007, align 8
  %1009 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %1008, i64 0, i32 2
  %1010 = load i32, i32* %1009, align 8
  %1011 = icmp ugt i32 %1010, 8192
  %1012 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %1008, i64 0, i32 3
  %1013 = load i32, i32* %1012, align 4
  %1014 = icmp ugt i32 %1013, 6224
  %1015 = or i1 %1011, %1014
  br i1 %1015, label %1016, label %1018

1016:                                             ; preds = %1006
  %1017 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([148 x i8], [148 x i8]* @.str.123, i64 0, i64 0), i32 %1010, i32 %1013) #12
  br label %1018

1018:                                             ; preds = %1016, %1006, %1004, %994, %992, %982
  %1019 = phi i32 [ 0, %1016 ], [ %978, %1006 ], [ 0, %1004 ], [ %978, %994 ], [ 0, %992 ], [ %978, %982 ]
  %1020 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 22
  %1021 = load i32, i32* %1020, align 4
  %1022 = icmp eq i32 %1021, -1
  br i1 %1022, label %1025, label %1023

1023:                                             ; preds = %1018
  %1024 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([133 x i8], [133 x i8]* @.str.124, i64 0, i64 0)) #12
  br label %1025

1025:                                             ; preds = %1023, %1018
  %1026 = phi i32 [ 0, %1023 ], [ %1019, %1018 ]
  %1027 = load i32, i32* %20, align 4
  %1028 = icmp eq i32 %1027, 32
  %1029 = load i32, i32* %27, align 8
  %1030 = icmp eq i32 %1029, 32
  %1031 = and i1 %1028, %1030
  br i1 %1031, label %1034, label %1032

1032:                                             ; preds = %1025
  %1033 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([133 x i8], [133 x i8]* @.str.125, i64 0, i64 0), i32 %1027, i32 %1029) #12
  br label %1034

1034:                                             ; preds = %1032, %1025
  %1035 = phi i32 [ 0, %1032 ], [ %1026, %1025 ]
  %1036 = load i32, i32* %644, align 4
  %1037 = icmp eq i32 %1036, 4
  br i1 %1037, label %1040, label %1038

1038:                                             ; preds = %1034
  %1039 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.126, i64 0, i64 0), i32 %1036) #12
  br label %1040

1040:                                             ; preds = %1038, %1034
  %1041 = phi i32 [ 0, %1038 ], [ %1035, %1034 ]
  %1042 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 13
  %1043 = load i32, i32* %1042, align 8
  %1044 = icmp eq i32 %1043, 0
  br i1 %1044, label %1047, label %1045

1045:                                             ; preds = %1040
  %1046 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([111 x i8], [111 x i8]* @.str.127, i64 0, i64 0), i32 %1043) #12
  br label %1047

1047:                                             ; preds = %1045, %1040
  %1048 = phi i32 [ 0, %1045 ], [ %1041, %1040 ]
  %1049 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 20
  %1050 = load i32, i32* %1049, align 4
  %1051 = icmp eq i32 %1050, 0
  br i1 %1051, label %1054, label %1052

1052:                                             ; preds = %1047
  %1053 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.128, i64 0, i64 0), i32 %1050) #12
  br label %1054

1054:                                             ; preds = %1052, %1047
  %1055 = phi i32 [ 0, %1052 ], [ %1048, %1047 ]
  switch i16 %803, label %1062 [
    i16 1024, label %1056
    i16 1280, label %1056
    i16 1536, label %1056
  ]

1056:                                             ; preds = %1054, %1054, %1054
  %1057 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 21
  %1058 = load i32, i32* %1057, align 8
  %1059 = icmp eq i32 %1058, 1
  br i1 %1059, label %1068, label %1060

1060:                                             ; preds = %1056
  %1061 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.129, i64 0, i64 0)) #12
  br label %1068

1062:                                             ; preds = %1054
  %1063 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 21
  %1064 = load i32, i32* %1063, align 8
  %1065 = icmp eq i32 %1064, 0
  br i1 %1065, label %1068, label %1066

1066:                                             ; preds = %1062
  %1067 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.130, i64 0, i64 0)) #12
  br label %1068

1068:                                             ; preds = %1066, %1062, %1060, %1056
  %1069 = phi i32 [ 0, %1060 ], [ %1055, %1056 ], [ 0, %1066 ], [ %1055, %1062 ]
  %1070 = load i32, i32* %100, align 4
  %1071 = icmp eq i32 %1070, 1
  br i1 %1071, label %1074, label %1072

1072:                                             ; preds = %1068
  %1073 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.131, i64 0, i64 0), i32 %1070) #12
  br label %1074

1074:                                             ; preds = %1072, %1068
  %1075 = phi i32 [ 0, %1072 ], [ %1069, %1068 ]
  switch i32 %981, label %1166 [
    i32 0, label %1076
    i32 1, label %1082
    i32 2, label %1088
    i32 3, label %1094
    i32 4, label %1110
    i32 5, label %1134
  ]

1076:                                             ; preds = %1074
  %1077 = icmp sgt i32 %808, 0
  %1078 = icmp slt i32 %705, 7
  %1079 = and i1 %1078, %1077
  br i1 %1079, label %1166, label %1080

1080:                                             ; preds = %1076
  %1081 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.132, i64 0, i64 0), i32 %808) #12
  br label %1166

1082:                                             ; preds = %1074
  %1083 = icmp sgt i32 %808, 0
  %1084 = icmp slt i32 %705, 8
  %1085 = and i1 %1084, %1083
  br i1 %1085, label %1166, label %1086

1086:                                             ; preds = %1082
  %1087 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.133, i64 0, i64 0), i32 %808) #12
  br label %1166

1088:                                             ; preds = %1074
  %1089 = icmp sgt i32 %808, 0
  %1090 = icmp slt i32 %705, 9
  %1091 = and i1 %1090, %1089
  br i1 %1091, label %1166, label %1092

1092:                                             ; preds = %1088
  %1093 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.134, i64 0, i64 0), i32 %808) #12
  br label %1166

1094:                                             ; preds = %1074
  %1095 = icmp ugt i32 %815, 2047
  br i1 %1095, label %1096, label %1102

1096:                                             ; preds = %1094
  %1097 = icmp sgt i32 %808, 0
  %1098 = icmp slt i32 %705, 7
  %1099 = and i1 %1098, %1097
  br i1 %1099, label %1166, label %1100

1100:                                             ; preds = %1096
  %1101 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.135, i64 0, i64 0), i32 %808) #12
  br label %1166

1102:                                             ; preds = %1094
  %1103 = icmp ugt i32 %815, 1023
  br i1 %1103, label %1104, label %1166

1104:                                             ; preds = %1102
  %1105 = icmp sgt i32 %808, 0
  %1106 = icmp slt i32 %705, 6
  %1107 = and i1 %1106, %1105
  br i1 %1107, label %1166, label %1108

1108:                                             ; preds = %1104
  %1109 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.136, i64 0, i64 0), i32 %808) #12
  br label %1166

1110:                                             ; preds = %1074
  %1111 = icmp ugt i32 %815, 4095
  br i1 %1111, label %1112, label %1118

1112:                                             ; preds = %1110
  %1113 = icmp sgt i32 %808, 0
  %1114 = icmp slt i32 %705, 8
  %1115 = and i1 %1114, %1113
  br i1 %1115, label %1166, label %1116

1116:                                             ; preds = %1112
  %1117 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.137, i64 0, i64 0), i32 %808) #12
  br label %1166

1118:                                             ; preds = %1110
  %1119 = icmp ugt i32 %815, 2047
  br i1 %1119, label %1120, label %1126

1120:                                             ; preds = %1118
  %1121 = icmp sgt i32 %808, 0
  %1122 = icmp slt i32 %705, 7
  %1123 = and i1 %1122, %1121
  br i1 %1123, label %1166, label %1124

1124:                                             ; preds = %1120
  %1125 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.138, i64 0, i64 0), i32 %808) #12
  br label %1166

1126:                                             ; preds = %1118
  %1127 = icmp ugt i32 %815, 1023
  br i1 %1127, label %1128, label %1166

1128:                                             ; preds = %1126
  %1129 = icmp sgt i32 %808, 0
  %1130 = icmp slt i32 %705, 6
  %1131 = and i1 %1130, %1129
  br i1 %1131, label %1166, label %1132

1132:                                             ; preds = %1128
  %1133 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.139, i64 0, i64 0), i32 %808) #12
  br label %1166

1134:                                             ; preds = %1074
  %1135 = icmp ugt i32 %815, 8191
  br i1 %1135, label %1136, label %1142

1136:                                             ; preds = %1134
  %1137 = icmp sgt i32 %808, 0
  %1138 = icmp slt i32 %705, 9
  %1139 = and i1 %1138, %1137
  br i1 %1139, label %1166, label %1140

1140:                                             ; preds = %1136
  %1141 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.140, i64 0, i64 0), i32 %808) #12
  br label %1166

1142:                                             ; preds = %1134
  %1143 = icmp ugt i32 %815, 4095
  br i1 %1143, label %1144, label %1150

1144:                                             ; preds = %1142
  %1145 = icmp sgt i32 %808, 0
  %1146 = icmp slt i32 %705, 8
  %1147 = and i1 %1146, %1145
  br i1 %1147, label %1166, label %1148

1148:                                             ; preds = %1144
  %1149 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.141, i64 0, i64 0), i32 %808) #12
  br label %1166

1150:                                             ; preds = %1142
  %1151 = icmp ugt i32 %815, 2047
  br i1 %1151, label %1152, label %1158

1152:                                             ; preds = %1150
  %1153 = icmp sgt i32 %808, 0
  %1154 = icmp slt i32 %705, 7
  %1155 = and i1 %1154, %1153
  br i1 %1155, label %1166, label %1156

1156:                                             ; preds = %1152
  %1157 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.138, i64 0, i64 0), i32 %808) #12
  br label %1166

1158:                                             ; preds = %1150
  %1159 = icmp ugt i32 %815, 1023
  br i1 %1159, label %1160, label %1166

1160:                                             ; preds = %1158
  %1161 = icmp sgt i32 %808, 0
  %1162 = icmp slt i32 %705, 6
  %1163 = and i1 %1162, %1161
  br i1 %1163, label %1166, label %1164

1164:                                             ; preds = %1160
  %1165 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.139, i64 0, i64 0), i32 %808) #12
  br label %1166

1166:                                             ; preds = %1164, %1160, %1158, %1156, %1152, %1148, %1144, %1140, %1136, %1132, %1128, %1126, %1124, %1120, %1116, %1112, %1108, %1104, %1102, %1100, %1096, %1092, %1088, %1086, %1082, %1080, %1076, %1074
  %1167 = phi i32 [ %1075, %1074 ], [ %1075, %1136 ], [ 0, %1140 ], [ %1075, %1144 ], [ 0, %1148 ], [ %1075, %1152 ], [ 0, %1156 ], [ %1075, %1160 ], [ 0, %1164 ], [ %1075, %1158 ], [ %1075, %1112 ], [ 0, %1116 ], [ %1075, %1120 ], [ 0, %1124 ], [ %1075, %1128 ], [ 0, %1132 ], [ %1075, %1126 ], [ %1075, %1096 ], [ 0, %1100 ], [ %1075, %1104 ], [ 0, %1108 ], [ %1075, %1102 ], [ %1075, %1088 ], [ 0, %1092 ], [ %1075, %1082 ], [ 0, %1086 ], [ %1075, %1076 ], [ 0, %1080 ]
  %1168 = load i32, i32* %13, align 8
  %1169 = icmp eq i32 %1168, 1
  %1170 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 24
  %1171 = load i32, i32* %1170, align 4
  br i1 %1169, label %1174, label %1172

1172:                                             ; preds = %1166
  %1173 = icmp sgt i32 %1171, 0
  br i1 %1173, label %1186, label %1206

1174:                                             ; preds = %1166
  %1175 = icmp eq i32 %1171, 1
  br i1 %1175, label %1176, label %1184

1176:                                             ; preds = %1174
  %1177 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 0
  %1178 = load i32, i32* %1177, align 8
  %1179 = icmp eq i32 %1178, 128
  br i1 %1179, label %1180, label %1184

1180:                                             ; preds = %1176
  %1181 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 0
  %1182 = load i32, i32* %1181, align 4
  %1183 = icmp eq i32 %1182, 128
  br i1 %1183, label %1206, label %1184

1184:                                             ; preds = %1180, %1176, %1174
  %1185 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([143 x i8], [143 x i8]* @.str.142, i64 0, i64 0), i32 %808) #12
  br label %1209

1186:                                             ; preds = %1172, %1200
  %1187 = phi i32 [ %1201, %1200 ], [ %1171, %1172 ]
  %1188 = phi i64 [ %1203, %1200 ], [ 0, %1172 ]
  %1189 = phi i32 [ %1202, %1200 ], [ %1167, %1172 ]
  %1190 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %1188
  %1191 = load i32, i32* %1190, align 4
  %1192 = icmp eq i32 %1191, 256
  br i1 %1192, label %1193, label %1197

1193:                                             ; preds = %1186
  %1194 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %1188
  %1195 = load i32, i32* %1194, align 4
  %1196 = icmp eq i32 %1195, 256
  br i1 %1196, label %1200, label %1197

1197:                                             ; preds = %1193, %1186
  %1198 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([143 x i8], [143 x i8]* @.str.142, i64 0, i64 0), i32 %808) #12
  %1199 = load i32, i32* %1170, align 4
  br label %1200

1200:                                             ; preds = %1197, %1193
  %1201 = phi i32 [ %1199, %1197 ], [ %1187, %1193 ]
  %1202 = phi i32 [ 0, %1197 ], [ %1189, %1193 ]
  %1203 = add nuw nsw i64 %1188, 1
  %1204 = sext i32 %1201 to i64
  %1205 = icmp slt i64 %1203, %1204
  br i1 %1205, label %1186, label %1206

1206:                                             ; preds = %1200, %1172, %1180
  %1207 = phi i32 [ %1167, %1180 ], [ %1167, %1172 ], [ %1202, %1200 ]
  %1208 = icmp eq i32 %1207, 0
  br i1 %1208, label %1209, label %1217

1209:                                             ; preds = %1184, %977, %1206
  store i16 0, i16* %66, align 4
  br label %1217

1210:                                             ; preds = %630
  %1211 = icmp slt i16 %340, 0
  br i1 %1211, label %1212, label %1217

1212:                                             ; preds = %1210
  switch i16 %340, label %1215 [
    i16 -32768, label %1213
    i16 -32512, label %1217
  ]

1213:                                             ; preds = %1212
  %1214 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.14, i64 0, i64 0)) #12
  store i16 0, i16* %66, align 4
  br label %1217

1215:                                             ; preds = %1212
  %1216 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.15, i64 0, i64 0)) #12
  store i16 0, i16* %66, align 4
  br label %1217

1217:                                             ; preds = %610, %600, %2148, %1212, %1206, %623, %1209, %1213, %1215, %1210, %628, %346, %620
  %1218 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 51
  %1219 = load i32, i32* %1218, align 8
  %1220 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 20, i32 0, i32 0
  store i32 %1219, i32* %1220, align 8
  %1221 = load i16, i16* %66, align 4
  %1222 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 0
  store i16 %1221, i16* %1222, align 8
  %1223 = load i32, i32* %193, align 4
  %1224 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 20, i32 0, i32 4
  %1225 = trunc i32 %1223 to i8
  %1226 = and i8 %1225, 1
  %1227 = load i8, i8* %1224, align 1
  %1228 = and i8 %1227, -2
  %1229 = or i8 %1228, %1226
  store i8 %1229, i8* %1224, align 1
  %1230 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 6
  %1231 = load i32, i32* %1230, align 8
  %1232 = trunc i32 %1231 to i8
  %1233 = shl i8 %1232, 1
  %1234 = and i8 %1233, 2
  %1235 = and i8 %1229, -3
  %1236 = or i8 %1234, %1235
  store i8 %1236, i8* %1224, align 1
  %1237 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 7
  %1238 = load i32, i32* %1237, align 4
  %1239 = trunc i32 %1238 to i8
  %1240 = shl i8 %1239, 2
  %1241 = and i8 %1240, 4
  %1242 = and i8 %1236, -5
  %1243 = or i8 %1242, %1241
  store i8 %1243, i8* %1224, align 1
  %1244 = load i32, i32* %1230, align 8
  %1245 = icmp eq i32 %1244, 0
  br i1 %1245, label %1266, label %1246

1246:                                             ; preds = %1217
  %1247 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 8
  %1248 = load i32*, i32** %1247, align 8
  %1249 = icmp eq i32* %1248, null
  br i1 %1249, label %1266, label %1250

1250:                                             ; preds = %1246
  %1251 = load i32, i32* %100, align 4
  %1252 = sext i32 %1251 to i64
  %1253 = load i32, i32* %13, align 8
  %1254 = sext i32 %1253 to i64
  %1255 = mul nsw i64 %1252, 12
  %1256 = mul i64 %1255, %1254
  %1257 = call i8* @opj_malloc(i64 %1256) #12
  %1258 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 20, i32 0, i32 2
  %1259 = bitcast i32** %1258 to i8**
  store i8* %1257, i8** %1259, align 8
  %1260 = icmp eq i8* %1257, null
  br i1 %1260, label %1261, label %1263

1261:                                             ; preds = %1250
  %1262 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.16, i64 0, i64 0)) #12
  br label %2137

1263:                                             ; preds = %1250
  %1264 = bitcast i32** %1247 to i8**
  %1265 = load i8*, i8** %1264, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %1257, i8* align 4 %1265, i64 %1256, i1 false)
  br label %1266

1266:                                             ; preds = %1263, %1246, %1217
  %1267 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 3
  %1268 = load i32, i32* %1267, align 4
  %1269 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 3
  store i32 %1268, i32* %1269, align 4
  %1270 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 4
  %1271 = load i32, i32* %1270, align 8
  %1272 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 4
  store i32 %1271, i32* %1272, align 8
  %1273 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 1
  %1274 = load i32, i32* %1273, align 4
  %1275 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 1
  store i32 %1274, i32* %1275, align 4
  %1276 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 2
  %1277 = load i32, i32* %1276, align 8
  %1278 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 2
  store i32 %1277, i32* %1278, align 8
  %1279 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 9
  %1280 = load i8*, i8** %1279, align 8
  %1281 = icmp eq i8* %1280, null
  br i1 %1281, label %1293, label %1282

1282:                                             ; preds = %1266
  %1283 = call i64 @strlen(i8* nonnull %1280) #13
  %1284 = add i64 %1283, 1
  %1285 = call i8* @opj_malloc(i64 %1284) #12
  %1286 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 5
  store i8* %1285, i8** %1286, align 8
  %1287 = icmp eq i8* %1285, null
  br i1 %1287, label %1288, label %1290

1288:                                             ; preds = %1282
  %1289 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.17, i64 0, i64 0)) #12
  br label %2137

1290:                                             ; preds = %1282
  %1291 = load i8*, i8** %1279, align 8
  %1292 = call i8* @strcpy(i8* nonnull %1285, i8* %1291) #12
  br label %1304

1293:                                             ; preds = %1266
  %1294 = call i8* @opj_version() #12
  %1295 = call i64 @strlen(i8* %1294) #13
  %1296 = add i64 %1295, 29
  %1297 = call i8* @opj_malloc(i64 %1296) #12
  %1298 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 5
  store i8* %1297, i8** %1298, align 8
  %1299 = icmp eq i8* %1297, null
  br i1 %1299, label %1300, label %1302

1300:                                             ; preds = %1293
  %1301 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.18, i64 0, i64 0)) #12
  br label %2137

1302:                                             ; preds = %1293
  %1303 = call i32 (i8*, i8*, ...) @sprintf(i8* nonnull %1297, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @opj_j2k_setup_encoder.comment, i64 0, i64 0), i8* %1294) #12
  br label %1304

1304:                                             ; preds = %1302, %1290
  %1305 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 0
  %1306 = load i32, i32* %1305, align 8
  %1307 = icmp eq i32 %1306, 0
  br i1 %1307, label %1339, label %1308

1308:                                             ; preds = %1304
  %1309 = load i32, i32* %1269, align 4
  %1310 = icmp eq i32 %1309, 0
  br i1 %1310, label %1311, label %1313

1311:                                             ; preds = %1308
  %1312 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.20, i64 0, i64 0)) #12
  br label %2137

1313:                                             ; preds = %1308
  %1314 = load i32, i32* %1272, align 8
  %1315 = icmp eq i32 %1314, 0
  br i1 %1315, label %1316, label %1318

1316:                                             ; preds = %1313
  %1317 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.21, i64 0, i64 0)) #12
  br label %2137

1318:                                             ; preds = %1313
  %1319 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 2
  %1320 = load i32, i32* %1319, align 8
  %1321 = load i32, i32* %1275, align 4
  %1322 = sub i32 %1320, %1321
  %1323 = zext i32 %1322 to i64
  %1324 = zext i32 %1309 to i64
  %1325 = add nsw i64 %1324, -1
  %1326 = add nuw nsw i64 %1325, %1323
  %1327 = udiv i64 %1326, %1324
  %1328 = trunc i64 %1327 to i32
  store i32 %1328, i32* %64, align 8
  %1329 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 3
  %1330 = load i32, i32* %1329, align 4
  %1331 = load i32, i32* %1278, align 8
  %1332 = sub i32 %1330, %1331
  %1333 = zext i32 %1332 to i64
  %1334 = zext i32 %1314 to i64
  %1335 = add nsw i64 %1334, -1
  %1336 = add nuw nsw i64 %1335, %1333
  %1337 = udiv i64 %1336, %1334
  %1338 = trunc i64 %1337 to i32
  store i32 %1338, i32* %65, align 4
  br label %1348

1339:                                             ; preds = %1304
  %1340 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 2
  %1341 = load i32, i32* %1340, align 8
  %1342 = load i32, i32* %1275, align 4
  %1343 = sub i32 %1341, %1342
  store i32 %1343, i32* %1269, align 4
  %1344 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 3
  %1345 = load i32, i32* %1344, align 4
  %1346 = load i32, i32* %1278, align 8
  %1347 = sub i32 %1345, %1346
  store i32 %1347, i32* %1272, align 8
  br label %1348

1348:                                             ; preds = %1339, %1318
  %1349 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 53
  %1350 = load i8, i8* %1349, align 8
  %1351 = icmp eq i8 %1350, 0
  br i1 %1351, label %1358, label %1352

1352:                                             ; preds = %1348
  %1353 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 54
  %1354 = load i8, i8* %1353, align 1
  %1355 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 20, i32 0, i32 3
  store i8 %1354, i8* %1355, align 8
  %1356 = load i8, i8* %1224, align 1
  %1357 = or i8 %1356, 8
  store i8 %1357, i8* %1224, align 1
  br label %1358

1358:                                             ; preds = %1348, %1352
  %1359 = load i32, i32* %64, align 8
  %1360 = load i32, i32* %65, align 4
  %1361 = mul i32 %1360, %1359
  %1362 = zext i32 %1361 to i64
  %1363 = call i8* @opj_calloc(i64 %1362, i64 5696) #12
  %1364 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %1365 = bitcast %struct.opj_tcp** %1364 to i8**
  store i8* %1363, i8** %1365, align 8
  %1366 = icmp eq i8* %1363, null
  %1367 = bitcast i8* %1363 to %struct.opj_tcp*
  br i1 %1366, label %1386, label %1368

1368:                                             ; preds = %1358
  %1369 = load i32, i32* %64, align 8
  %1370 = load i32, i32* %65, align 4
  %1371 = mul i32 %1370, %1369
  %1372 = icmp eq i32 %1371, 0
  br i1 %1372, label %2132, label %1373

1373:                                             ; preds = %1368
  %1374 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 10
  %1375 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 11
  %1376 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 55
  %1377 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 13
  %1378 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 4
  %1379 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 57
  %1380 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 6
  %1381 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 20
  %1382 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 21
  %1383 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 22
  %1384 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 23
  %1385 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 24
  br label %1388

1386:                                             ; preds = %1358
  %1387 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.22, i64 0, i64 0)) #12
  br label %2137

1388:                                             ; preds = %2130, %1373
  %1389 = phi %struct.opj_tcp* [ %1367, %1373 ], [ %2131, %2130 ]
  %1390 = phi i64 [ 0, %1373 ], [ %2124, %2130 ]
  %1391 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1389, i64 %1390
  %1392 = load i32, i32* %100, align 4
  %1393 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1389, i64 %1390, i32 2
  store i32 %1392, i32* %1393, align 8
  %1394 = icmp eq i32 %1392, 0
  br i1 %1394, label %1442, label %1395

1395:                                             ; preds = %1388
  %1396 = zext i32 %1392 to i64
  br label %1397

1397:                                             ; preds = %1439, %1395
  %1398 = phi i64 [ 0, %1395 ], [ %1440, %1439 ]
  %1399 = load i16, i16* %1222, align 8
  %1400 = add i16 %1399, -3
  %1401 = icmp ult i16 %1400, 4
  %1402 = add i16 %1399, -1024
  %1403 = icmp ult i16 %1402, 1436
  %1404 = or i1 %1401, %1403
  %1405 = load i8, i8* %1224, align 1
  %1406 = and i8 %1405, 4
  %1407 = icmp eq i8 %1406, 0
  br i1 %1404, label %1408, label %1418

1408:                                             ; preds = %1397
  br i1 %1407, label %1415, label %1409

1409:                                             ; preds = %1408
  %1410 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 16, i64 %1398
  %1411 = bitcast float* %1410 to i32*
  %1412 = load i32, i32* %1411, align 4
  %1413 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1389, i64 %1390, i32 14, i64 %1398
  %1414 = bitcast float* %1413 to i32*
  store i32 %1412, i32* %1414, align 4
  br label %1415

1415:                                             ; preds = %1408, %1409
  %1416 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %1398
  %1417 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1389, i64 %1390, i32 5, i64 %1398
  br label %1425

1418:                                             ; preds = %1397
  br i1 %1407, label %1422, label %1419

1419:                                             ; preds = %1418
  %1420 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 16, i64 %1398
  %1421 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1389, i64 %1390, i32 14, i64 %1398
  br label %1425

1422:                                             ; preds = %1418
  %1423 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 15, i64 %1398
  %1424 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1389, i64 %1390, i32 5, i64 %1398
  br label %1425

1425:                                             ; preds = %1419, %1422, %1415
  %1426 = phi float* [ %1421, %1419 ], [ %1424, %1422 ], [ %1417, %1415 ]
  %1427 = phi float* [ %1420, %1419 ], [ %1423, %1422 ], [ %1416, %1415 ]
  %1428 = bitcast float* %1427 to i32*
  %1429 = load i32, i32* %1428, align 4
  %1430 = bitcast float* %1426 to i32*
  store i32 %1429, i32* %1430, align 4
  %1431 = load i8, i8* %1224, align 1
  %1432 = and i8 %1431, 4
  %1433 = icmp eq i8 %1432, 0
  br i1 %1433, label %1434, label %1439

1434:                                             ; preds = %1425
  %1435 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1389, i64 %1390, i32 5, i64 %1398
  %1436 = load float, float* %1435, align 4
  %1437 = fcmp ugt float %1436, 1.000000e+00
  br i1 %1437, label %1439, label %1438

1438:                                             ; preds = %1434
  store float 0.000000e+00, float* %1435, align 4
  br label %1439

1439:                                             ; preds = %1434, %1425, %1438
  %1440 = add nuw nsw i64 %1398, 1
  %1441 = icmp eq i64 %1440, %1396
  br i1 %1441, label %1442, label %1397

1442:                                             ; preds = %1439, %1388
  %1443 = load i32, i32* %1374, align 8
  %1444 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1391, i64 0, i32 0
  store i32 %1443, i32* %1444, align 8
  %1445 = load i32, i32* %1375, align 4
  %1446 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1389, i64 %1390, i32 1
  store i32 %1445, i32* %1446, align 4
  %1447 = load i8, i8* %1376, align 2
  %1448 = sext i8 %1447 to i32
  %1449 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1389, i64 %1390, i32 4
  store i32 %1448, i32* %1449, align 8
  %1450 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1389, i64 %1390, i32 29
  %1451 = load i8, i8* %1450, align 8
  %1452 = and i8 %1451, -5
  store i8 %1452, i8* %1450, align 8
  %1453 = load i32, i32* %1377, align 8
  %1454 = icmp eq i32 %1453, 0
  br i1 %1454, label %1784, label %1455

1455:                                             ; preds = %1442
  %1456 = add nuw nsw i64 %1390, 1
  br label %1457

1457:                                             ; preds = %1455, %1500
  %1458 = phi i32 [ %1453, %1455 ], [ %1501, %1500 ]
  %1459 = phi i64 [ 0, %1455 ], [ %1503, %1500 ]
  %1460 = phi i32 [ 0, %1455 ], [ %1502, %1500 ]
  %1461 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 %1459, i32 11
  %1462 = load i32, i32* %1461, align 4
  %1463 = zext i32 %1462 to i64
  %1464 = icmp eq i64 %1456, %1463
  br i1 %1464, label %1465, label %1500

1465:                                             ; preds = %1457
  %1466 = zext i32 %1460 to i64
  %1467 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 %1466, i32 1
  %1468 = load i32, i32* %1467, align 4
  %1469 = load i32, i32* %1378, align 8
  %1470 = icmp ult i32 %1468, %1469
  br i1 %1470, label %1471, label %1497

1471:                                             ; preds = %1465
  %1472 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 %1466, i32 0
  %1473 = load i32, i32* %1472, align 4
  %1474 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1389, i64 %1390, i32 7, i64 %1466, i32 0
  store i32 %1473, i32* %1474, align 4
  %1475 = load i32, i32* %1467, align 4
  %1476 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1389, i64 %1390, i32 7, i64 %1466, i32 1
  store i32 %1475, i32* %1476, align 4
  %1477 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 %1466, i32 2
  %1478 = load i32, i32* %1477, align 4
  %1479 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1389, i64 %1390, i32 7, i64 %1466, i32 2
  store i32 %1478, i32* %1479, align 4
  %1480 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 %1466, i32 3
  %1481 = load i32, i32* %1480, align 4
  %1482 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1389, i64 %1390, i32 7, i64 %1466, i32 3
  store i32 %1481, i32* %1482, align 4
  %1483 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 %1466, i32 4
  %1484 = load i32, i32* %1483, align 4
  %1485 = load i32, i32* %1378, align 8
  %1486 = icmp ult i32 %1484, %1485
  %1487 = select i1 %1486, i32 %1484, i32 %1485
  %1488 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1389, i64 %1390, i32 7, i64 %1466, i32 4
  store i32 %1487, i32* %1488, align 4
  %1489 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 %1466, i32 8
  %1490 = load i32, i32* %1489, align 4
  %1491 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1389, i64 %1390, i32 7, i64 %1466, i32 8
  store i32 %1490, i32* %1491, align 4
  %1492 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 %1466, i32 11
  %1493 = load i32, i32* %1492, align 4
  %1494 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1389, i64 %1390, i32 7, i64 %1466, i32 11
  store i32 %1493, i32* %1494, align 4
  %1495 = add i32 %1460, 1
  %1496 = load i32, i32* %1377, align 8
  br label %1500

1497:                                             ; preds = %1465
  %1498 = trunc i64 %1459 to i32
  %1499 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.23, i64 0, i64 0), i32 %1498) #12
  br label %2137

1500:                                             ; preds = %1471, %1457
  %1501 = phi i32 [ %1458, %1457 ], [ %1496, %1471 ]
  %1502 = phi i32 [ %1460, %1457 ], [ %1495, %1471 ]
  %1503 = add nuw nsw i64 %1459, 1
  %1504 = zext i32 %1501 to i64
  %1505 = icmp ult i64 %1503, %1504
  br i1 %1505, label %1457, label %1506

1506:                                             ; preds = %1500
  %1507 = icmp eq i32 %1502, 0
  br i1 %1507, label %1787, label %1508

1508:                                             ; preds = %1506
  %1509 = load i32, i32* %13, align 8
  %1510 = load i32, i32* %1378, align 8
  %1511 = load i32, i32* %100, align 4
  %1512 = mul i32 %1510, %1509
  %1513 = mul i32 %1512, %1511
  %1514 = zext i32 %1513 to i64
  %1515 = call i8* @opj_calloc(i64 %1514, i64 4) #12
  %1516 = bitcast i8* %1515 to i32*
  %1517 = icmp eq i8* %1515, null
  br i1 %1517, label %1523, label %1518

1518:                                             ; preds = %1508
  %1519 = icmp eq i32 %1501, 0
  br i1 %1519, label %1525, label %1520

1520:                                             ; preds = %1518
  %1521 = add nuw nsw i64 %1390, 1
  %1522 = zext i32 %1501 to i64
  br label %1543

1523:                                             ; preds = %1508
  %1524 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.143, i64 0, i64 0)) #12
  br label %1780

1525:                                             ; preds = %1616, %1518
  %1526 = icmp eq i32 %1511, 0
  br i1 %1526, label %1779, label %1527

1527:                                             ; preds = %1525
  %1528 = icmp eq i32 %1509, 0
  %1529 = icmp eq i32 %1510, 0
  %1530 = add i32 %1510, -1
  %1531 = add i32 %1510, -8
  %1532 = lshr i32 %1531, 3
  %1533 = add nuw nsw i32 %1532, 1
  %1534 = icmp ult i32 %1510, 8
  %1535 = and i32 %1510, -8
  %1536 = and i32 %1533, 1
  %1537 = icmp eq i32 %1532, 0
  %1538 = sub nuw nsw i32 %1533, %1536
  %1539 = icmp eq i32 %1536, 0
  %1540 = icmp eq i32 %1510, %1535
  %1541 = and i32 %1510, 3
  %1542 = icmp eq i32 %1541, 0
  br label %1619

1543:                                             ; preds = %1616, %1520
  %1544 = phi i64 [ 0, %1520 ], [ %1617, %1616 ]
  %1545 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 %1544, i32 11
  %1546 = load i32, i32* %1545, align 4
  %1547 = zext i32 %1546 to i64
  %1548 = icmp eq i64 %1521, %1547
  br i1 %1548, label %1549, label %1616

1549:                                             ; preds = %1543
  %1550 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 %1544, i32 0
  %1551 = load i32, i32* %1550, align 4
  %1552 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 %1544, i32 3
  %1553 = load i32, i32* %1552, align 4
  %1554 = icmp ult i32 %1553, %1509
  %1555 = select i1 %1554, i32 %1553, i32 %1509
  %1556 = icmp ult i32 %1551, %1555
  br i1 %1556, label %1557, label %1616

1557:                                             ; preds = %1549
  %1558 = mul i32 %1551, %1510
  %1559 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 %1544, i32 1
  %1560 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 %1544, i32 4
  %1561 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 12, i64 %1544, i32 2
  %1562 = load i32, i32* %1560, align 4
  br label %1563

1563:                                             ; preds = %1607, %1557
  %1564 = phi i32 [ %1553, %1557 ], [ %1608, %1607 ]
  %1565 = phi i32 [ %1562, %1557 ], [ %1609, %1607 ]
  %1566 = phi i32 [ %1562, %1557 ], [ %1610, %1607 ]
  %1567 = phi i32 [ %1551, %1557 ], [ %1612, %1607 ]
  %1568 = phi i32 [ %1558, %1557 ], [ %1611, %1607 ]
  %1569 = load i32, i32* %1559, align 4
  %1570 = icmp ult i32 %1566, %1510
  %1571 = select i1 %1570, i32 %1566, i32 %1510
  %1572 = icmp ult i32 %1569, %1571
  br i1 %1572, label %1573, label %1607

1573:                                             ; preds = %1563
  %1574 = add i32 %1569, %1568
  %1575 = load i32, i32* %1561, align 4
  br label %1576

1576:                                             ; preds = %1597, %1573
  %1577 = phi i32 [ %1598, %1597 ], [ %1565, %1573 ]
  %1578 = phi i32 [ %1599, %1597 ], [ %1575, %1573 ]
  %1579 = phi i32 [ %1600, %1597 ], [ %1574, %1573 ]
  %1580 = phi i32 [ %1601, %1597 ], [ %1569, %1573 ]
  %1581 = icmp ult i32 %1578, %1511
  %1582 = select i1 %1581, i32 %1578, i32 %1511
  %1583 = icmp eq i32 %1582, 0
  br i1 %1583, label %1597, label %1584

1584:                                             ; preds = %1576, %1584
  %1585 = phi i32 [ %1589, %1584 ], [ %1579, %1576 ]
  %1586 = phi i32 [ %1590, %1584 ], [ 0, %1576 ]
  %1587 = zext i32 %1585 to i64
  %1588 = getelementptr inbounds i32, i32* %1516, i64 %1587
  store i32 1, i32* %1588, align 4
  %1589 = add i32 %1585, %1512
  %1590 = add nuw i32 %1586, 1
  %1591 = load i32, i32* %1561, align 4
  %1592 = icmp ult i32 %1591, %1511
  %1593 = select i1 %1592, i32 %1591, i32 %1511
  %1594 = icmp ult i32 %1590, %1593
  br i1 %1594, label %1584, label %1595

1595:                                             ; preds = %1584
  %1596 = load i32, i32* %1560, align 4
  br label %1597

1597:                                             ; preds = %1595, %1576
  %1598 = phi i32 [ %1596, %1595 ], [ %1577, %1576 ]
  %1599 = phi i32 [ %1591, %1595 ], [ %1578, %1576 ]
  %1600 = add i32 %1579, 1
  %1601 = add nuw i32 %1580, 1
  %1602 = icmp ult i32 %1598, %1510
  %1603 = select i1 %1602, i32 %1598, i32 %1510
  %1604 = icmp ult i32 %1601, %1603
  br i1 %1604, label %1576, label %1605

1605:                                             ; preds = %1597
  %1606 = load i32, i32* %1552, align 4
  br label %1607

1607:                                             ; preds = %1605, %1563
  %1608 = phi i32 [ %1606, %1605 ], [ %1564, %1563 ]
  %1609 = phi i32 [ %1598, %1605 ], [ %1565, %1563 ]
  %1610 = phi i32 [ %1598, %1605 ], [ %1566, %1563 ]
  %1611 = add i32 %1568, %1510
  %1612 = add nuw i32 %1567, 1
  %1613 = icmp ult i32 %1608, %1509
  %1614 = select i1 %1613, i32 %1608, i32 %1509
  %1615 = icmp ult i32 %1612, %1614
  br i1 %1615, label %1563, label %1616

1616:                                             ; preds = %1607, %1549, %1543
  %1617 = add nuw nsw i64 %1544, 1
  %1618 = icmp eq i64 %1617, %1522
  br i1 %1618, label %1525, label %1543

1619:                                             ; preds = %1770, %1527
  %1620 = phi i32 [ 0, %1527 ], [ %1772, %1770 ]
  %1621 = phi i32 [ 0, %1527 ], [ %1773, %1770 ]
  %1622 = phi i32 [ 0, %1527 ], [ %1771, %1770 ]
  br i1 %1528, label %1770, label %1623

1623:                                             ; preds = %1619, %1765
  %1624 = phi i32 [ %1767, %1765 ], [ %1620, %1619 ]
  %1625 = phi i32 [ %1768, %1765 ], [ 0, %1619 ]
  %1626 = phi i32 [ %1766, %1765 ], [ %1622, %1619 ]
  br i1 %1529, label %1765, label %1627

1627:                                             ; preds = %1623
  %1628 = xor i32 %1626, -1
  %1629 = icmp ugt i32 %1530, %1628
  %1630 = or i1 %1534, %1629
  br i1 %1630, label %1701, label %1631

1631:                                             ; preds = %1627
  %1632 = add i32 %1626, %1535
  %1633 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %1624, i32 0
  br i1 %1537, label %1671, label %1634

1634:                                             ; preds = %1631, %1634
  %1635 = phi i32 [ %1668, %1634 ], [ 0, %1631 ]
  %1636 = phi <4 x i32> [ %1666, %1634 ], [ %1633, %1631 ]
  %1637 = phi <4 x i32> [ %1667, %1634 ], [ zeroinitializer, %1631 ]
  %1638 = phi i32 [ %1669, %1634 ], [ %1538, %1631 ]
  %1639 = add i32 %1626, %1635
  %1640 = zext i32 %1639 to i64
  %1641 = getelementptr inbounds i32, i32* %1516, i64 %1640
  %1642 = bitcast i32* %1641 to <4 x i32>*
  %1643 = load <4 x i32>, <4 x i32>* %1642, align 4
  %1644 = getelementptr inbounds i32, i32* %1641, i64 4
  %1645 = bitcast i32* %1644 to <4 x i32>*
  %1646 = load <4 x i32>, <4 x i32>* %1645, align 4
  %1647 = icmp ne <4 x i32> %1643, <i32 1, i32 1, i32 1, i32 1>
  %1648 = icmp ne <4 x i32> %1646, <i32 1, i32 1, i32 1, i32 1>
  %1649 = zext <4 x i1> %1647 to <4 x i32>
  %1650 = zext <4 x i1> %1648 to <4 x i32>
  %1651 = or <4 x i32> %1636, %1649
  %1652 = or <4 x i32> %1637, %1650
  %1653 = or i32 %1635, 8
  %1654 = add i32 %1626, %1653
  %1655 = zext i32 %1654 to i64
  %1656 = getelementptr inbounds i32, i32* %1516, i64 %1655
  %1657 = bitcast i32* %1656 to <4 x i32>*
  %1658 = load <4 x i32>, <4 x i32>* %1657, align 4
  %1659 = getelementptr inbounds i32, i32* %1656, i64 4
  %1660 = bitcast i32* %1659 to <4 x i32>*
  %1661 = load <4 x i32>, <4 x i32>* %1660, align 4
  %1662 = icmp ne <4 x i32> %1658, <i32 1, i32 1, i32 1, i32 1>
  %1663 = icmp ne <4 x i32> %1661, <i32 1, i32 1, i32 1, i32 1>
  %1664 = zext <4 x i1> %1662 to <4 x i32>
  %1665 = zext <4 x i1> %1663 to <4 x i32>
  %1666 = or <4 x i32> %1651, %1664
  %1667 = or <4 x i32> %1652, %1665
  %1668 = add i32 %1635, 16
  %1669 = add i32 %1638, -2
  %1670 = icmp eq i32 %1669, 0
  br i1 %1670, label %1671, label %1634, !llvm.loop !11

1671:                                             ; preds = %1634, %1631
  %1672 = phi <4 x i32> [ undef, %1631 ], [ %1666, %1634 ]
  %1673 = phi <4 x i32> [ undef, %1631 ], [ %1667, %1634 ]
  %1674 = phi i32 [ 0, %1631 ], [ %1668, %1634 ]
  %1675 = phi <4 x i32> [ %1633, %1631 ], [ %1666, %1634 ]
  %1676 = phi <4 x i32> [ zeroinitializer, %1631 ], [ %1667, %1634 ]
  br i1 %1539, label %1692, label %1677

1677:                                             ; preds = %1671
  %1678 = add i32 %1626, %1674
  %1679 = zext i32 %1678 to i64
  %1680 = getelementptr inbounds i32, i32* %1516, i64 %1679
  %1681 = getelementptr inbounds i32, i32* %1680, i64 4
  %1682 = bitcast i32* %1681 to <4 x i32>*
  %1683 = load <4 x i32>, <4 x i32>* %1682, align 4
  %1684 = icmp ne <4 x i32> %1683, <i32 1, i32 1, i32 1, i32 1>
  %1685 = zext <4 x i1> %1684 to <4 x i32>
  %1686 = or <4 x i32> %1676, %1685
  %1687 = bitcast i32* %1680 to <4 x i32>*
  %1688 = load <4 x i32>, <4 x i32>* %1687, align 4
  %1689 = icmp ne <4 x i32> %1688, <i32 1, i32 1, i32 1, i32 1>
  %1690 = zext <4 x i1> %1689 to <4 x i32>
  %1691 = or <4 x i32> %1675, %1690
  br label %1692

1692:                                             ; preds = %1671, %1677
  %1693 = phi <4 x i32> [ %1672, %1671 ], [ %1691, %1677 ]
  %1694 = phi <4 x i32> [ %1673, %1671 ], [ %1686, %1677 ]
  %1695 = or <4 x i32> %1694, %1693
  %1696 = shufflevector <4 x i32> %1695, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1697 = or <4 x i32> %1695, %1696
  %1698 = shufflevector <4 x i32> %1697, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1699 = or <4 x i32> %1697, %1698
  %1700 = extractelement <4 x i32> %1699, i32 0
  br i1 %1540, label %1762, label %1701

1701:                                             ; preds = %1692, %1627
  %1702 = phi i32 [ %1624, %1627 ], [ %1700, %1692 ]
  %1703 = phi i32 [ 0, %1627 ], [ %1535, %1692 ]
  %1704 = phi i32 [ %1626, %1627 ], [ %1632, %1692 ]
  %1705 = xor i32 %1703, -1
  %1706 = add i32 %1510, %1705
  br i1 %1542, label %1722, label %1707

1707:                                             ; preds = %1701, %1707
  %1708 = phi i32 [ %1717, %1707 ], [ %1702, %1701 ]
  %1709 = phi i32 [ %1719, %1707 ], [ %1703, %1701 ]
  %1710 = phi i32 [ %1718, %1707 ], [ %1704, %1701 ]
  %1711 = phi i32 [ %1720, %1707 ], [ %1541, %1701 ]
  %1712 = zext i32 %1710 to i64
  %1713 = getelementptr inbounds i32, i32* %1516, i64 %1712
  %1714 = load i32, i32* %1713, align 4
  %1715 = icmp ne i32 %1714, 1
  %1716 = zext i1 %1715 to i32
  %1717 = or i32 %1708, %1716
  %1718 = add i32 %1710, 1
  %1719 = add nuw i32 %1709, 1
  %1720 = add i32 %1711, -1
  %1721 = icmp eq i32 %1720, 0
  br i1 %1721, label %1722, label %1707, !llvm.loop !12

1722:                                             ; preds = %1707, %1701
  %1723 = phi i32 [ undef, %1701 ], [ %1717, %1707 ]
  %1724 = phi i32 [ %1702, %1701 ], [ %1717, %1707 ]
  %1725 = phi i32 [ %1703, %1701 ], [ %1719, %1707 ]
  %1726 = phi i32 [ %1704, %1701 ], [ %1718, %1707 ]
  %1727 = icmp ult i32 %1706, 3
  br i1 %1727, label %1762, label %1728

1728:                                             ; preds = %1722, %1728
  %1729 = phi i32 [ %1758, %1728 ], [ %1724, %1722 ]
  %1730 = phi i32 [ %1760, %1728 ], [ %1725, %1722 ]
  %1731 = phi i32 [ %1759, %1728 ], [ %1726, %1722 ]
  %1732 = zext i32 %1731 to i64
  %1733 = getelementptr inbounds i32, i32* %1516, i64 %1732
  %1734 = load i32, i32* %1733, align 4
  %1735 = icmp ne i32 %1734, 1
  %1736 = zext i1 %1735 to i32
  %1737 = or i32 %1729, %1736
  %1738 = add i32 %1731, 1
  %1739 = zext i32 %1738 to i64
  %1740 = getelementptr inbounds i32, i32* %1516, i64 %1739
  %1741 = load i32, i32* %1740, align 4
  %1742 = icmp ne i32 %1741, 1
  %1743 = zext i1 %1742 to i32
  %1744 = or i32 %1737, %1743
  %1745 = add i32 %1731, 2
  %1746 = zext i32 %1745 to i64
  %1747 = getelementptr inbounds i32, i32* %1516, i64 %1746
  %1748 = load i32, i32* %1747, align 4
  %1749 = icmp ne i32 %1748, 1
  %1750 = zext i1 %1749 to i32
  %1751 = or i32 %1744, %1750
  %1752 = add i32 %1731, 3
  %1753 = zext i32 %1752 to i64
  %1754 = getelementptr inbounds i32, i32* %1516, i64 %1753
  %1755 = load i32, i32* %1754, align 4
  %1756 = icmp ne i32 %1755, 1
  %1757 = zext i1 %1756 to i32
  %1758 = or i32 %1751, %1757
  %1759 = add i32 %1731, 4
  %1760 = add nuw i32 %1730, 4
  %1761 = icmp eq i32 %1760, %1510
  br i1 %1761, label %1762, label %1728, !llvm.loop !13

1762:                                             ; preds = %1722, %1728, %1692
  %1763 = phi i32 [ %1700, %1692 ], [ %1723, %1722 ], [ %1758, %1728 ]
  %1764 = add i32 %1626, %1510
  br label %1765

1765:                                             ; preds = %1762, %1623
  %1766 = phi i32 [ %1626, %1623 ], [ %1764, %1762 ]
  %1767 = phi i32 [ %1624, %1623 ], [ %1763, %1762 ]
  %1768 = add nuw i32 %1625, 1
  %1769 = icmp eq i32 %1768, %1509
  br i1 %1769, label %1770, label %1623

1770:                                             ; preds = %1765, %1619
  %1771 = phi i32 [ %1622, %1619 ], [ %1766, %1765 ]
  %1772 = phi i32 [ %1620, %1619 ], [ %1767, %1765 ]
  %1773 = add nuw i32 %1621, 1
  %1774 = icmp eq i32 %1773, %1511
  br i1 %1774, label %1775, label %1619

1775:                                             ; preds = %1770
  %1776 = icmp eq i32 %1772, 0
  br i1 %1776, label %1779, label %1777

1777:                                             ; preds = %1775
  %1778 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.144, i64 0, i64 0)) #12
  br label %1779

1779:                                             ; preds = %1777, %1775, %1525
  call void @opj_free(i8* nonnull %1515) #12
  br label %1780

1780:                                             ; preds = %1523, %1779
  %1781 = load i8, i8* %1450, align 8
  %1782 = or i8 %1781, 4
  store i8 %1782, i8* %1450, align 8
  %1783 = add i32 %1502, -1
  br label %1784

1784:                                             ; preds = %1442, %1780
  %1785 = phi i32 [ %1783, %1780 ], [ 0, %1442 ]
  %1786 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1389, i64 %1390, i32 6
  store i32 %1785, i32* %1786, align 4
  br label %1787

1787:                                             ; preds = %1784, %1506
  %1788 = load i32, i32* %1378, align 8
  %1789 = zext i32 %1788 to i64
  %1790 = call i8* @opj_calloc(i64 %1789, i64 1080) #12
  %1791 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1389, i64 %1390, i32 15
  %1792 = bitcast %struct.opj_tccp** %1791 to i8**
  store i8* %1790, i8** %1792, align 8
  %1793 = icmp eq i8* %1790, null
  br i1 %1793, label %1794, label %1796

1794:                                             ; preds = %1787
  %1795 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.24, i64 0, i64 0)) #12
  br label %2137

1796:                                             ; preds = %1787
  %1797 = load i8*, i8** %1379, align 8
  %1798 = icmp eq i8* %1797, null
  br i1 %1798, label %1868, label %1799

1799:                                             ; preds = %1796
  %1800 = load i32, i32* %1378, align 8
  %1801 = shl i32 %1800, 2
  %1802 = mul i32 %1801, %1800
  %1803 = zext i32 %1802 to i64
  %1804 = call i8* @opj_malloc(i64 %1803) #12
  %1805 = bitcast i8* %1804 to float*
  %1806 = load i8*, i8** %1379, align 8
  %1807 = getelementptr inbounds i8, i8* %1806, i64 %1803
  %1808 = bitcast i8* %1807 to i32*
  %1809 = icmp eq i8* %1804, null
  br i1 %1809, label %1810, label %1812

1810:                                             ; preds = %1799
  %1811 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.25, i64 0, i64 0)) #12
  br label %2137

1812:                                             ; preds = %1799
  store i32 2, i32* %1449, align 8
  %1813 = call i8* @opj_malloc(i64 %1803) #12
  %1814 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1389, i64 %1390, i32 22
  %1815 = bitcast float** %1814 to i8**
  store i8* %1813, i8** %1815, align 8
  %1816 = icmp eq i8* %1813, null
  br i1 %1816, label %1817, label %1819

1817:                                             ; preds = %1812
  call void @opj_free(i8* nonnull %1804) #12
  %1818 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.26, i64 0, i64 0)) #12
  br label %2137

1819:                                             ; preds = %1812
  %1820 = load i8*, i8** %1379, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %1813, i8* align 1 %1820, i64 %1803, i1 false)
  %1821 = load i8*, i8** %1379, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %1804, i8* align 1 %1821, i64 %1803, i1 false)
  %1822 = call i8* @opj_malloc(i64 %1803) #12
  %1823 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1389, i64 %1390, i32 21
  %1824 = bitcast float** %1823 to i8**
  store i8* %1822, i8** %1824, align 8
  %1825 = icmp eq i8* %1822, null
  br i1 %1825, label %1826, label %1828

1826:                                             ; preds = %1819
  call void @opj_free(i8* nonnull %1804) #12
  %1827 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.27, i64 0, i64 0)) #12
  br label %2137

1828:                                             ; preds = %1819
  %1829 = bitcast i8* %1822 to float*
  %1830 = load i32, i32* %1378, align 8
  %1831 = call i32 @opj_matrix_inversion_f(float* nonnull %1805, float* nonnull %1829, i32 %1830) #12
  %1832 = icmp eq i32 %1831, 0
  br i1 %1832, label %1833, label %1835

1833:                                             ; preds = %1828
  call void @opj_free(i8* nonnull %1804) #12
  %1834 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.28, i64 0, i64 0)) #12
  br label %2137

1835:                                             ; preds = %1828
  %1836 = load i32, i32* %1378, align 8
  %1837 = zext i32 %1836 to i64
  %1838 = shl nuw nsw i64 %1837, 3
  %1839 = call i8* @opj_malloc(i64 %1838) #12
  %1840 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %1389, i64 %1390, i32 20
  %1841 = bitcast double** %1840 to i8**
  store i8* %1839, i8** %1841, align 8
  %1842 = icmp eq i8* %1839, null
  br i1 %1842, label %1843, label %1845

1843:                                             ; preds = %1835
  call void @opj_free(i8* nonnull %1804) #12
  %1844 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.29, i64 0, i64 0)) #12
  br label %2137

1845:                                             ; preds = %1835
  %1846 = bitcast i8* %1839 to double*
  %1847 = load i32, i32* %1378, align 8
  %1848 = load float*, float** %1823, align 8
  call void @opj_calculate_norms(double* nonnull %1846, i32 %1847, float* %1848) #12
  call void @opj_free(i8* nonnull %1804) #12
  %1849 = load i32, i32* %1378, align 8
  %1850 = icmp eq i32 %1849, 0
  br i1 %1850, label %1861, label %1851

1851:                                             ; preds = %1845, %1851
  %1852 = phi i64 [ %1857, %1851 ], [ 0, %1845 ]
  %1853 = load %struct.opj_tccp*, %struct.opj_tccp** %1791, align 8
  %1854 = getelementptr inbounds i32, i32* %1808, i64 %1852
  %1855 = load i32, i32* %1854, align 4
  %1856 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1853, i64 %1852, i32 12
  store i32 %1855, i32* %1856, align 4
  %1857 = add nuw nsw i64 %1852, 1
  %1858 = load i32, i32* %1378, align 8
  %1859 = zext i32 %1858 to i64
  %1860 = icmp ult i64 %1857, %1859
  br i1 %1860, label %1851, label %1861

1861:                                             ; preds = %1851, %1845
  %1862 = call i32 @opj_j2k_setup_mct_encoding(%struct.opj_tcp* %1391, %struct.opj_image* nonnull %2)
  %1863 = icmp eq i32 %1862, 0
  br i1 %1863, label %1866, label %1864

1864:                                             ; preds = %1861
  %1865 = load i32, i32* %1378, align 8
  br label %1922

1866:                                             ; preds = %1861
  %1867 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.30, i64 0, i64 0)) #12
  br label %2137

1868:                                             ; preds = %1796
  %1869 = load i32, i32* %1449, align 8
  %1870 = icmp eq i32 %1869, 1
  br i1 %1870, label %1871, label %1897

1871:                                             ; preds = %1868
  %1872 = load i32, i32* %1378, align 8
  %1873 = icmp ugt i32 %1872, 2
  br i1 %1873, label %1874, label %1899

1874:                                             ; preds = %1871
  %1875 = load %struct.opj_image_comp*, %struct.opj_image_comp** %1380, align 8
  %1876 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %1875, i64 0, i32 0
  %1877 = load i32, i32* %1876, align 8
  %1878 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %1875, i64 1, i32 0
  %1879 = load i32, i32* %1878, align 8
  %1880 = icmp eq i32 %1877, %1879
  br i1 %1880, label %1881, label %1895

1881:                                             ; preds = %1874
  %1882 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %1875, i64 2, i32 0
  %1883 = load i32, i32* %1882, align 8
  %1884 = icmp eq i32 %1877, %1883
  br i1 %1884, label %1885, label %1895

1885:                                             ; preds = %1881
  %1886 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %1875, i64 0, i32 1
  %1887 = load i32, i32* %1886, align 4
  %1888 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %1875, i64 1, i32 1
  %1889 = load i32, i32* %1888, align 4
  %1890 = icmp eq i32 %1887, %1889
  br i1 %1890, label %1891, label %1895

1891:                                             ; preds = %1885
  %1892 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %1875, i64 2, i32 1
  %1893 = load i32, i32* %1892, align 4
  %1894 = icmp eq i32 %1887, %1893
  br i1 %1894, label %1897, label %1895

1895:                                             ; preds = %1891, %1885, %1881, %1874
  %1896 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.31, i64 0, i64 0)) #12
  store i32 0, i32* %1449, align 8
  br label %1897

1897:                                             ; preds = %1868, %1895, %1891
  %1898 = load i32, i32* %1378, align 8
  br label %1899

1899:                                             ; preds = %1897, %1871
  %1900 = phi i32 [ %1898, %1897 ], [ %1872, %1871 ]
  %1901 = icmp eq i32 %1900, 0
  br i1 %1901, label %2123, label %1902

1902:                                             ; preds = %1899, %1917
  %1903 = phi i32 [ %1918, %1917 ], [ %1900, %1899 ]
  %1904 = phi i64 [ %1919, %1917 ], [ 0, %1899 ]
  %1905 = load %struct.opj_image_comp*, %struct.opj_image_comp** %1380, align 8
  %1906 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %1905, i64 %1904, i32 8
  %1907 = load i32, i32* %1906, align 8
  %1908 = icmp eq i32 %1907, 0
  br i1 %1908, label %1909, label %1917

1909:                                             ; preds = %1902
  %1910 = load %struct.opj_tccp*, %struct.opj_tccp** %1791, align 8
  %1911 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %1905, i64 %1904, i32 6
  %1912 = load i32, i32* %1911, align 8
  %1913 = add i32 %1912, -1
  %1914 = shl i32 1, %1913
  %1915 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1910, i64 %1904, i32 12
  store i32 %1914, i32* %1915, align 4
  %1916 = load i32, i32* %1378, align 8
  br label %1917

1917:                                             ; preds = %1902, %1909
  %1918 = phi i32 [ %1903, %1902 ], [ %1916, %1909 ]
  %1919 = add nuw nsw i64 %1904, 1
  %1920 = zext i32 %1918 to i64
  %1921 = icmp ult i64 %1919, %1920
  br i1 %1921, label %1902, label %1922

1922:                                             ; preds = %1917, %1864
  %1923 = phi i32 [ %1865, %1864 ], [ %1918, %1917 ]
  %1924 = icmp eq i32 %1923, 0
  br i1 %1924, label %2123, label %1925

1925:                                             ; preds = %1922, %2115
  %1926 = phi i64 [ %2119, %2115 ], [ 0, %1922 ]
  %1927 = load %struct.opj_tccp*, %struct.opj_tccp** %1791, align 8
  %1928 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926
  %1929 = load i32, i32* %1374, align 8
  %1930 = and i32 %1929, 1
  %1931 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1928, i64 0, i32 0
  store i32 %1930, i32* %1931, align 4
  %1932 = load i32, i32* %13, align 8
  %1933 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926, i32 1
  store i32 %1932, i32* %1933, align 4
  %1934 = load i32, i32* %20, align 4
  %1935 = icmp sgt i32 %1934, 1
  br i1 %1935, label %1936, label %1942

1936:                                             ; preds = %1925, %1936
  %1937 = phi i32 [ %1940, %1936 ], [ 0, %1925 ]
  %1938 = phi i32 [ %1939, %1936 ], [ %1934, %1925 ]
  %1939 = lshr i32 %1938, 1
  %1940 = add nuw nsw i32 %1937, 1
  %1941 = icmp ugt i32 %1938, 3
  br i1 %1941, label %1936, label %1942

1942:                                             ; preds = %1936, %1925
  %1943 = phi i32 [ 0, %1925 ], [ %1940, %1936 ]
  %1944 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926, i32 2
  store i32 %1943, i32* %1944, align 4
  %1945 = load i32, i32* %27, align 8
  %1946 = icmp sgt i32 %1945, 1
  br i1 %1946, label %1947, label %1953

1947:                                             ; preds = %1942, %1947
  %1948 = phi i32 [ %1951, %1947 ], [ 0, %1942 ]
  %1949 = phi i32 [ %1950, %1947 ], [ %1945, %1942 ]
  %1950 = lshr i32 %1949, 1
  %1951 = add nuw nsw i32 %1948, 1
  %1952 = icmp ugt i32 %1949, 3
  br i1 %1952, label %1947, label %1953

1953:                                             ; preds = %1947, %1942
  %1954 = phi i32 [ 0, %1942 ], [ %1951, %1947 ]
  %1955 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926, i32 3
  store i32 %1954, i32* %1955, align 4
  %1956 = load i32, i32* %1381, align 4
  %1957 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926, i32 4
  store i32 %1956, i32* %1957, align 4
  %1958 = load i32, i32* %1382, align 8
  %1959 = icmp eq i32 %1958, 0
  %1960 = zext i1 %1959 to i32
  %1961 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926, i32 5
  store i32 %1960, i32* %1961, align 4
  %1962 = load i32, i32* %1382, align 8
  %1963 = icmp eq i32 %1962, 0
  %1964 = select i1 %1963, i32 0, i32 2
  %1965 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926, i32 6
  store i32 %1964, i32* %1965, align 4
  %1966 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926, i32 8
  store i32 2, i32* %1966, align 4
  %1967 = load i32, i32* %1383, align 4
  %1968 = zext i32 %1967 to i64
  %1969 = icmp eq i64 %1926, %1968
  br i1 %1969, label %1970, label %1972

1970:                                             ; preds = %1953
  %1971 = load i32, i32* %1384, align 8
  br label %1972

1972:                                             ; preds = %1953, %1970
  %1973 = phi i32 [ %1971, %1970 ], [ 0, %1953 ]
  %1974 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926, i32 9
  store i32 %1973, i32* %1974, align 4
  %1975 = load i32, i32* %1374, align 8
  %1976 = and i32 %1975, 1
  %1977 = icmp eq i32 %1976, 0
  br i1 %1977, label %1983, label %1978

1978:                                             ; preds = %1972
  %1979 = icmp sgt i32 %1932, 0
  br i1 %1979, label %1980, label %2115

1980:                                             ; preds = %1978
  %1981 = sext i32 %1932 to i64
  %1982 = zext i32 %1932 to i64
  br label %2039

1983:                                             ; preds = %1972
  %1984 = icmp eq i32 %1932, 0
  br i1 %1984, label %2115, label %1985

1985:                                             ; preds = %1983
  %1986 = zext i32 %1932 to i64
  %1987 = icmp ult i32 %1932, 4
  br i1 %1987, label %1988, label %1990

1988:                                             ; preds = %2037, %1985
  %1989 = phi i64 [ 0, %1985 ], [ %1991, %2037 ]
  br label %2109

1990:                                             ; preds = %1985
  %1991 = and i64 %1986, 4294967292
  %1992 = add nsw i64 %1991, -4
  %1993 = lshr exact i64 %1992, 2
  %1994 = add nuw nsw i64 %1993, 1
  %1995 = and i64 %1994, 3
  %1996 = icmp ult i64 %1992, 12
  br i1 %1996, label %2024, label %1997

1997:                                             ; preds = %1990
  %1998 = sub nsw i64 %1994, %1995
  br label %1999

1999:                                             ; preds = %1999, %1997
  %2000 = phi i64 [ 0, %1997 ], [ %2021, %1999 ]
  %2001 = phi i64 [ %1998, %1997 ], [ %2022, %1999 ]
  %2002 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926, i32 10, i64 %2000
  %2003 = bitcast i32* %2002 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %2003, align 4
  %2004 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926, i32 11, i64 %2000
  %2005 = bitcast i32* %2004 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %2005, align 4
  %2006 = or i64 %2000, 4
  %2007 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926, i32 10, i64 %2006
  %2008 = bitcast i32* %2007 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %2008, align 4
  %2009 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926, i32 11, i64 %2006
  %2010 = bitcast i32* %2009 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %2010, align 4
  %2011 = or i64 %2000, 8
  %2012 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926, i32 10, i64 %2011
  %2013 = bitcast i32* %2012 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %2013, align 4
  %2014 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926, i32 11, i64 %2011
  %2015 = bitcast i32* %2014 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %2015, align 4
  %2016 = or i64 %2000, 12
  %2017 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926, i32 10, i64 %2016
  %2018 = bitcast i32* %2017 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %2018, align 4
  %2019 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926, i32 11, i64 %2016
  %2020 = bitcast i32* %2019 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %2020, align 4
  %2021 = add i64 %2000, 16
  %2022 = add i64 %2001, -4
  %2023 = icmp eq i64 %2022, 0
  br i1 %2023, label %2024, label %1999, !llvm.loop !14

2024:                                             ; preds = %1999, %1990
  %2025 = phi i64 [ 0, %1990 ], [ %2021, %1999 ]
  %2026 = icmp eq i64 %1995, 0
  br i1 %2026, label %2037, label %2027

2027:                                             ; preds = %2024, %2027
  %2028 = phi i64 [ %2034, %2027 ], [ %2025, %2024 ]
  %2029 = phi i64 [ %2035, %2027 ], [ %1995, %2024 ]
  %2030 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926, i32 10, i64 %2028
  %2031 = bitcast i32* %2030 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %2031, align 4
  %2032 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926, i32 11, i64 %2028
  %2033 = bitcast i32* %2032 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %2033, align 4
  %2034 = add i64 %2028, 4
  %2035 = add i64 %2029, -1
  %2036 = icmp eq i64 %2035, 0
  br i1 %2036, label %2037, label %2027, !llvm.loop !15

2037:                                             ; preds = %2027, %2024
  %2038 = icmp eq i64 %1991, %1986
  br i1 %2038, label %2115, label %1988

2039:                                             ; preds = %2104, %1980
  %2040 = phi i64 [ 0, %1980 ], [ %2107, %2104 ]
  %2041 = phi i64 [ %1981, %1980 ], [ %2042, %2104 ]
  %2042 = add nsw i64 %2041, -1
  %2043 = load i32, i32* %1385, align 4
  %2044 = sext i32 %2043 to i64
  %2045 = icmp slt i64 %2040, %2044
  br i1 %2045, label %2046, label %2072

2046:                                             ; preds = %2039
  %2047 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %2040
  %2048 = load i32, i32* %2047, align 4
  %2049 = icmp slt i32 %2048, 1
  br i1 %2049, label %2058, label %2050

2050:                                             ; preds = %2046
  %2051 = icmp eq i32 %2048, 1
  br i1 %2051, label %2058, label %2052

2052:                                             ; preds = %2050, %2052
  %2053 = phi i32 [ %2056, %2052 ], [ 0, %2050 ]
  %2054 = phi i32 [ %2055, %2052 ], [ %2048, %2050 ]
  %2055 = lshr i32 %2054, 1
  %2056 = add nuw nsw i32 %2053, 1
  %2057 = icmp ugt i32 %2054, 3
  br i1 %2057, label %2052, label %2058

2058:                                             ; preds = %2052, %2050, %2046
  %2059 = phi i32 [ 1, %2046 ], [ 0, %2050 ], [ %2056, %2052 ]
  %2060 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926, i32 10, i64 %2042
  store i32 %2059, i32* %2060, align 4
  %2061 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %2040
  %2062 = load i32, i32* %2061, align 4
  %2063 = icmp slt i32 %2062, 1
  br i1 %2063, label %2104, label %2064

2064:                                             ; preds = %2058
  %2065 = icmp eq i32 %2062, 1
  br i1 %2065, label %2104, label %2066

2066:                                             ; preds = %2064, %2066
  %2067 = phi i32 [ %2070, %2066 ], [ 0, %2064 ]
  %2068 = phi i32 [ %2069, %2066 ], [ %2062, %2064 ]
  %2069 = lshr i32 %2068, 1
  %2070 = add nuw nsw i32 %2067, 1
  %2071 = icmp ugt i32 %2068, 3
  br i1 %2071, label %2066, label %2104

2072:                                             ; preds = %2039
  %2073 = add nsw i32 %2043, -1
  %2074 = sext i32 %2073 to i64
  %2075 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 25, i64 %2074
  %2076 = load i32, i32* %2075, align 4
  %2077 = trunc i64 %2040 to i32
  %2078 = sub nsw i32 %2077, %2073
  %2079 = ashr i32 %2076, %2078
  %2080 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 26, i64 %2074
  %2081 = load i32, i32* %2080, align 4
  %2082 = ashr i32 %2081, %2078
  %2083 = icmp slt i32 %2079, 1
  br i1 %2083, label %2092, label %2084

2084:                                             ; preds = %2072
  %2085 = icmp eq i32 %2079, 1
  br i1 %2085, label %2092, label %2086

2086:                                             ; preds = %2084, %2086
  %2087 = phi i32 [ %2090, %2086 ], [ 0, %2084 ]
  %2088 = phi i32 [ %2089, %2086 ], [ %2079, %2084 ]
  %2089 = lshr i32 %2088, 1
  %2090 = add nuw nsw i32 %2087, 1
  %2091 = icmp ugt i32 %2088, 3
  br i1 %2091, label %2086, label %2092

2092:                                             ; preds = %2086, %2084, %2072
  %2093 = phi i32 [ 1, %2072 ], [ 0, %2084 ], [ %2090, %2086 ]
  %2094 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926, i32 10, i64 %2042
  store i32 %2093, i32* %2094, align 4
  %2095 = icmp slt i32 %2082, 1
  br i1 %2095, label %2104, label %2096

2096:                                             ; preds = %2092
  %2097 = icmp eq i32 %2082, 1
  br i1 %2097, label %2104, label %2098

2098:                                             ; preds = %2096, %2098
  %2099 = phi i32 [ %2102, %2098 ], [ 0, %2096 ]
  %2100 = phi i32 [ %2101, %2098 ], [ %2082, %2096 ]
  %2101 = lshr i32 %2100, 1
  %2102 = add nuw nsw i32 %2099, 1
  %2103 = icmp ugt i32 %2100, 3
  br i1 %2103, label %2098, label %2104

2104:                                             ; preds = %2098, %2066, %2096, %2092, %2064, %2058
  %2105 = phi i32 [ 1, %2058 ], [ 0, %2064 ], [ 1, %2092 ], [ 0, %2096 ], [ %2070, %2066 ], [ %2102, %2098 ]
  %2106 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926, i32 11, i64 %2042
  store i32 %2105, i32* %2106, align 4
  %2107 = add nuw nsw i64 %2040, 1
  %2108 = icmp eq i64 %2107, %1982
  br i1 %2108, label %2115, label %2039

2109:                                             ; preds = %1988, %2109
  %2110 = phi i64 [ %2113, %2109 ], [ %1989, %1988 ]
  %2111 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926, i32 10, i64 %2110
  store i32 15, i32* %2111, align 4
  %2112 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %1927, i64 %1926, i32 11, i64 %2110
  store i32 15, i32* %2112, align 4
  %2113 = add nuw nsw i64 %2110, 1
  %2114 = icmp eq i64 %2113, %1986
  br i1 %2114, label %2115, label %2109, !llvm.loop !16

2115:                                             ; preds = %2104, %2109, %2037, %1983, %1978
  %2116 = load %struct.opj_image_comp*, %struct.opj_image_comp** %1380, align 8
  %2117 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %2116, i64 %1926, i32 6
  %2118 = load i32, i32* %2117, align 8
  call void @opj_dwt_calc_explicit_stepsizes(%struct.opj_tccp* %1928, i32 %2118) #12
  %2119 = add nuw nsw i64 %1926, 1
  %2120 = load i32, i32* %1378, align 8
  %2121 = zext i32 %2120 to i64
  %2122 = icmp ult i64 %2119, %2121
  br i1 %2122, label %1925, label %2123

2123:                                             ; preds = %2115, %1899, %1922
  %2124 = add nuw nsw i64 %1390, 1
  %2125 = load i32, i32* %64, align 8
  %2126 = load i32, i32* %65, align 4
  %2127 = mul i32 %2126, %2125
  %2128 = zext i32 %2127 to i64
  %2129 = icmp ult i64 %2124, %2128
  br i1 %2129, label %2130, label %2132

2130:                                             ; preds = %2123
  %2131 = load %struct.opj_tcp*, %struct.opj_tcp** %1364, align 8
  br label %1388

2132:                                             ; preds = %2123, %1368
  %2133 = getelementptr inbounds %struct.opj_cparameters, %struct.opj_cparameters* %1, i64 0, i32 57
  %2134 = load i8*, i8** %2133, align 8
  %2135 = icmp eq i8* %2134, null
  br i1 %2135, label %2137, label %2136

2136:                                             ; preds = %2132
  call void @opj_free(i8* nonnull %2134) #12
  store i8* null, i8** %2133, align 8
  br label %2137

2137:                                             ; preds = %1810, %1817, %1826, %1843, %1866, %1833, %1794, %1497, %2136, %2132, %1300, %1261, %4, %1386, %1316, %1311, %1288, %61, %56, %36, %31, %24, %17
  %2138 = phi i32 [ 0, %17 ], [ 0, %24 ], [ 0, %31 ], [ 0, %36 ], [ 0, %56 ], [ 0, %61 ], [ 0, %1311 ], [ 0, %1316 ], [ 0, %1386 ], [ 0, %1288 ], [ 0, %1300 ], [ 0, %1261 ], [ 0, %4 ], [ 1, %2132 ], [ 1, %2136 ], [ 0, %1497 ], [ 0, %1794 ], [ 0, %1833 ], [ 0, %1866 ], [ 0, %1843 ], [ 0, %1826 ], [ 0, %1817 ], [ 0, %1810 ]
  ret i32 %2138

2139:                                             ; preds = %591
  %2140 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %571, i64 2, i32 7
  %2141 = load i32, i32* %2140, align 4
  %2142 = icmp ne i32 %2141, 12
  %2143 = zext i1 %2142 to i32
  %2144 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %571, i64 2, i32 8
  %2145 = load i32, i32* %2144, align 8
  %2146 = or i32 %2145, %2143
  %2147 = icmp eq i32 %2146, 0
  br i1 %2147, label %2148, label %582

2148:                                             ; preds = %2139
  switch i16 %567, label %1217 [
    i16 3, label %600
    i16 4, label %610
  ]

2149:                                             ; preds = %699
  %2150 = load i32, i32* %667, align 8
  %2151 = add nsw i32 %692, -2
  %2152 = shl i32 1, %2151
  %2153 = icmp ult i32 %2150, %2152
  br i1 %2153, label %2157, label %2154

2154:                                             ; preds = %2149
  %2155 = load i32, i32* %694, align 4
  %2156 = icmp ult i32 %2155, %2152
  br i1 %2156, label %2157, label %704

2157:                                             ; preds = %2154, %2149
  store i32 %2151, i32* %13, align 8
  %2158 = icmp sgt i32 %2151, 0
  br i1 %2158, label %2159, label %704

2159:                                             ; preds = %2157
  %2160 = load i32, i32* %667, align 8
  %2161 = add nsw i32 %692, -3
  %2162 = shl i32 1, %2161
  %2163 = icmp ult i32 %2160, %2162
  br i1 %2163, label %2167, label %2164

2164:                                             ; preds = %2159
  %2165 = load i32, i32* %694, align 4
  %2166 = icmp ult i32 %2165, %2162
  br i1 %2166, label %2167, label %704

2167:                                             ; preds = %2164, %2159
  store i32 %2161, i32* %13, align 8
  %2168 = icmp sgt i32 %2161, 0
  br i1 %2168, label %2169, label %704

2169:                                             ; preds = %2167
  %2170 = load i32, i32* %667, align 8
  %2171 = add nsw i32 %692, -4
  %2172 = shl i32 1, %2171
  %2173 = icmp ult i32 %2170, %2172
  br i1 %2173, label %2177, label %2174

2174:                                             ; preds = %2169
  %2175 = load i32, i32* %694, align 4
  %2176 = icmp ult i32 %2175, %2172
  br i1 %2176, label %2177, label %704

2177:                                             ; preds = %2174, %2169
  store i32 %2171, i32* %13, align 8
  %2178 = icmp sgt i32 %2171, 0
  br i1 %2178, label %2179, label %704

2179:                                             ; preds = %2177
  %2180 = load i32, i32* %667, align 8
  %2181 = add nsw i32 %692, -5
  %2182 = shl i32 1, %2181
  %2183 = icmp ult i32 %2180, %2182
  br i1 %2183, label %2187, label %2184

2184:                                             ; preds = %2179
  %2185 = load i32, i32* %694, align 4
  %2186 = icmp ult i32 %2185, %2182
  br i1 %2186, label %2187, label %704

2187:                                             ; preds = %2184, %2179
  store i32 %2181, i32* %13, align 8
  %2188 = icmp sgt i32 %2181, 0
  br i1 %2188, label %2189, label %704

2189:                                             ; preds = %2187
  %2190 = load i32, i32* %667, align 8
  %2191 = add nsw i32 %692, -6
  %2192 = shl i32 1, %2191
  %2193 = icmp ult i32 %2190, %2192
  br i1 %2193, label %2197, label %2194

2194:                                             ; preds = %2189
  %2195 = load i32, i32* %694, align 4
  %2196 = icmp ult i32 %2195, %2192
  br i1 %2196, label %2197, label %704

2197:                                             ; preds = %2194, %2189
  store i32 %2191, i32* %13, align 8
  br label %704

2198:                                             ; preds = %318
  store float %302, float* %321, align 4
  br label %2199

2199:                                             ; preds = %2198, %318
  %2200 = phi i32 [ 1, %2198 ], [ %319, %318 ]
  %2201 = add nuw nsw i64 %311, 2
  %2202 = add i64 %313, -2
  %2203 = icmp eq i64 %2202, 0
  br i1 %2203, label %324, label %310
}

declare i32 @opj_event_msg(%struct.opj_event_mgr*, i32, i8*, ...) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare i8* @strcpy(i8* returned, i8* nocapture readonly) local_unnamed_addr #6

declare hidden i8* @opj_version() local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare i32 @sprintf(i8* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #6

declare void @opj_free(i8*) local_unnamed_addr #4

declare i32 @opj_matrix_inversion_f(float*, float*, i32) local_unnamed_addr #4

declare void @opj_calculate_norms(double*, i32, float*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_j2k_setup_mct_encoding(%struct.opj_tcp* nocapture, %struct.opj_image* nocapture readonly) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 2
  br i1 %5, label %6, label %234

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 21
  %8 = load float*, float** %7, align 8
  %9 = icmp eq float* %8, null
  %10 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 24
  %11 = load i32, i32* %10, align 8
  br i1 %9, label %70, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 25
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %11, %14
  br i1 %15, label %16, label %39

16:                                               ; preds = %12
  %17 = add i32 %11, 10
  store i32 %17, i32* %13, align 4
  %18 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 23
  %19 = bitcast %struct.opj_mct_data** %18 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = zext i32 %17 to i64
  %22 = shl nuw nsw i64 %21, 5
  %23 = tail call i8* @opj_realloc(i8* %20, i64 %22) #12
  %24 = icmp eq i8* %23, null
  br i1 %24, label %25, label %28

25:                                               ; preds = %16
  %26 = load i8*, i8** %19, align 8
  tail call void @opj_free(i8* %26) #12
  %27 = bitcast %struct.opj_mct_data** %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 16, i1 false)
  br label %234

28:                                               ; preds = %16
  %29 = bitcast i8* %23 to %struct.opj_mct_data*
  store i8* %23, i8** %19, align 8
  %30 = load i32, i32* %10, align 8
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %29, i64 %31
  %33 = bitcast %struct.opj_mct_data* %32 to i8*
  %34 = load i32, i32* %13, align 4
  %35 = sub i32 %34, %30
  %36 = zext i32 %35 to i64
  %37 = shl nuw nsw i64 %36, 5
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 %37, i1 false)
  %38 = load i32, i32* %10, align 8
  br label %39

39:                                               ; preds = %28, %12
  %40 = phi i32 [ %38, %28 ], [ %11, %12 ]
  %41 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 23
  %42 = load %struct.opj_mct_data*, %struct.opj_mct_data** %41, align 8
  %43 = zext i32 %40 to i64
  %44 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %42, i64 %43
  %45 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %42, i64 %43, i32 3
  %46 = load i8*, i8** %45, align 8
  %47 = icmp eq i8* %46, null
  br i1 %47, label %49, label %48

48:                                               ; preds = %39
  tail call void @opj_free(i8* nonnull %46) #12
  store i8* null, i8** %45, align 8
  br label %49

49:                                               ; preds = %39, %48
  %50 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %42, i64 %43, i32 2
  store i32 1, i32* %50, align 8
  %51 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %42, i64 %43, i32 1
  store i32 1, i32* %51, align 4
  %52 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %44, i64 0, i32 0
  store i32 2, i32* %52, align 8
  %53 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 4
  %54 = load i32, i32* %53, align 8
  %55 = mul i32 %54, %54
  %56 = shl i32 %55, 2
  %57 = zext i32 %56 to i64
  %58 = tail call i8* @opj_malloc(i64 %57) #12
  store i8* %58, i8** %45, align 8
  %59 = icmp eq i8* %58, null
  br i1 %59, label %234, label %60

60:                                               ; preds = %49
  %61 = load i32, i32* %52, align 8
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds [4 x void (i8*, i8*, i32)*], [4 x void (i8*, i8*, i32)*]* @j2k_mct_write_functions_from_float, i64 0, i64 %62
  %64 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %63, align 8
  %65 = bitcast float** %7 to i8**
  %66 = load i8*, i8** %65, align 8
  tail call void %64(i8* %66, i8* nonnull %58, i32 %55) #12
  %67 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %42, i64 %43, i32 4
  store i32 %56, i32* %67, align 8
  %68 = load i32, i32* %10, align 8
  %69 = add i32 %68, 1
  store i32 %69, i32* %10, align 8
  br label %70

70:                                               ; preds = %6, %60
  %71 = phi i32 [ %69, %60 ], [ %11, %6 ]
  %72 = phi i32 [ 2, %60 ], [ 1, %6 ]
  %73 = phi %struct.opj_mct_data* [ %44, %60 ], [ null, %6 ]
  %74 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 24
  %75 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 25
  %76 = load i32, i32* %75, align 4
  %77 = icmp eq i32 %71, %76
  br i1 %77, label %78, label %104

78:                                               ; preds = %70
  %79 = add i32 %71, 10
  store i32 %79, i32* %75, align 4
  %80 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 23
  %81 = bitcast %struct.opj_mct_data** %80 to i8**
  %82 = load i8*, i8** %81, align 8
  %83 = zext i32 %79 to i64
  %84 = shl nuw nsw i64 %83, 5
  %85 = tail call i8* @opj_realloc(i8* %82, i64 %84) #12
  %86 = icmp eq i8* %85, null
  br i1 %86, label %101, label %87

87:                                               ; preds = %78
  %88 = bitcast i8* %85 to %struct.opj_mct_data*
  store i8* %85, i8** %81, align 8
  %89 = load i32, i32* %74, align 8
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %88, i64 %90
  %92 = bitcast %struct.opj_mct_data* %91 to i8*
  %93 = load i32, i32* %75, align 4
  %94 = sub i32 %93, %89
  %95 = zext i32 %94 to i64
  %96 = shl nuw nsw i64 %95, 5
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %92, i8 0, i64 %96, i1 false)
  %97 = icmp eq %struct.opj_mct_data* %73, null
  %98 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %91, i64 -1
  %99 = select i1 %97, %struct.opj_mct_data* null, %struct.opj_mct_data* %98
  %100 = load i32, i32* %74, align 8
  br label %104

101:                                              ; preds = %78
  %102 = load i8*, i8** %81, align 8
  tail call void @opj_free(i8* %102) #12
  %103 = bitcast %struct.opj_mct_data** %80 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %103, i8 0, i64 16, i1 false)
  br label %234

104:                                              ; preds = %87, %70
  %105 = phi i32 [ %71, %70 ], [ %100, %87 ]
  %106 = phi %struct.opj_mct_data* [ %73, %70 ], [ %99, %87 ]
  %107 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 23
  %108 = load %struct.opj_mct_data*, %struct.opj_mct_data** %107, align 8
  %109 = zext i32 %105 to i64
  %110 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %108, i64 %109
  %111 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %108, i64 %109, i32 3
  %112 = load i8*, i8** %111, align 8
  %113 = icmp eq i8* %112, null
  br i1 %113, label %115, label %114

114:                                              ; preds = %104
  tail call void @opj_free(i8* nonnull %112) #12
  store i8* null, i8** %111, align 8
  br label %115

115:                                              ; preds = %104, %114
  %116 = add nuw nsw i32 %72, 1
  %117 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %108, i64 %109, i32 2
  store i32 %72, i32* %117, align 8
  %118 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %108, i64 %109, i32 1
  store i32 2, i32* %118, align 4
  %119 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %110, i64 0, i32 0
  store i32 2, i32* %119, align 8
  %120 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 4
  %121 = load i32, i32* %120, align 8
  %122 = shl i32 %121, 2
  %123 = zext i32 %122 to i64
  %124 = tail call i8* @opj_malloc(i64 %123) #12
  store i8* %124, i8** %111, align 8
  %125 = icmp eq i8* %124, null
  br i1 %125, label %234, label %126

126:                                              ; preds = %115
  %127 = zext i32 %121 to i64
  %128 = shl nuw nsw i64 %127, 2
  %129 = tail call i8* @opj_malloc(i64 %128) #12
  %130 = icmp eq i8* %129, null
  br i1 %130, label %131, label %133

131:                                              ; preds = %126
  %132 = load i8*, i8** %111, align 8
  tail call void @opj_free(i8* %132) #12
  store i8* null, i8** %111, align 8
  br label %234

133:                                              ; preds = %126
  %134 = icmp eq i32 %121, 0
  br i1 %134, label %182, label %135

135:                                              ; preds = %133
  %136 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 15
  %137 = load %struct.opj_tccp*, %struct.opj_tccp** %136, align 8
  %138 = bitcast i8* %129 to float*
  %139 = add i32 %121, -1
  %140 = and i32 %121, 3
  %141 = icmp ult i32 %139, 3
  br i1 %141, label %167, label %142

142:                                              ; preds = %135
  %143 = sub i32 %121, %140
  br label %144

144:                                              ; preds = %144, %142
  %145 = phi %struct.opj_tccp* [ %137, %142 ], [ %164, %144 ]
  %146 = phi float* [ %138, %142 ], [ %163, %144 ]
  %147 = phi i32 [ %143, %142 ], [ %165, %144 ]
  %148 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %145, i64 0, i32 12
  %149 = load i32, i32* %148, align 4
  %150 = sitofp i32 %149 to float
  %151 = getelementptr inbounds float, float* %146, i64 1
  store float %150, float* %146, align 4
  %152 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %145, i64 1, i32 12
  %153 = load i32, i32* %152, align 4
  %154 = sitofp i32 %153 to float
  %155 = getelementptr inbounds float, float* %146, i64 2
  store float %154, float* %151, align 4
  %156 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %145, i64 2, i32 12
  %157 = load i32, i32* %156, align 4
  %158 = sitofp i32 %157 to float
  %159 = getelementptr inbounds float, float* %146, i64 3
  store float %158, float* %155, align 4
  %160 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %145, i64 3, i32 12
  %161 = load i32, i32* %160, align 4
  %162 = sitofp i32 %161 to float
  %163 = getelementptr inbounds float, float* %146, i64 4
  store float %162, float* %159, align 4
  %164 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %145, i64 4
  %165 = add i32 %147, -4
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %167, label %144

167:                                              ; preds = %144, %135
  %168 = phi %struct.opj_tccp* [ %137, %135 ], [ %164, %144 ]
  %169 = phi float* [ %138, %135 ], [ %163, %144 ]
  %170 = icmp eq i32 %140, 0
  br i1 %170, label %182, label %171

171:                                              ; preds = %167, %171
  %172 = phi %struct.opj_tccp* [ %179, %171 ], [ %168, %167 ]
  %173 = phi float* [ %178, %171 ], [ %169, %167 ]
  %174 = phi i32 [ %180, %171 ], [ %140, %167 ]
  %175 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %172, i64 0, i32 12
  %176 = load i32, i32* %175, align 4
  %177 = sitofp i32 %176 to float
  %178 = getelementptr inbounds float, float* %173, i64 1
  store float %177, float* %173, align 4
  %179 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %172, i64 1
  %180 = add i32 %174, -1
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %182, label %171, !llvm.loop !17

182:                                              ; preds = %167, %171, %133
  %183 = load i32, i32* %119, align 8
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds [4 x void (i8*, i8*, i32)*], [4 x void (i8*, i8*, i32)*]* @j2k_mct_write_functions_from_float, i64 0, i64 %184
  %186 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %185, align 8
  %187 = load i8*, i8** %111, align 8
  tail call void %186(i8* nonnull %129, i8* %187, i32 %121) #12
  tail call void @opj_free(i8* nonnull %129) #12
  %188 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %108, i64 %109, i32 4
  store i32 %122, i32* %188, align 8
  %189 = load i32, i32* %74, align 8
  %190 = add i32 %189, 1
  store i32 %190, i32* %74, align 8
  %191 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 27
  %192 = load i32, i32* %191, align 8
  %193 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 28
  %194 = load i32, i32* %193, align 4
  %195 = icmp eq i32 %192, %194
  br i1 %195, label %196, label %219

196:                                              ; preds = %182
  %197 = add i32 %192, 10
  store i32 %197, i32* %193, align 4
  %198 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 26
  %199 = bitcast %struct.opj_simple_mcc_decorrelation_data** %198 to i8**
  %200 = load i8*, i8** %199, align 8
  %201 = zext i32 %197 to i64
  %202 = shl nuw nsw i64 %201, 5
  %203 = tail call i8* @opj_realloc(i8* %200, i64 %202) #12
  %204 = icmp eq i8* %203, null
  br i1 %204, label %205, label %208

205:                                              ; preds = %196
  %206 = load i8*, i8** %199, align 8
  tail call void @opj_free(i8* %206) #12
  %207 = bitcast %struct.opj_simple_mcc_decorrelation_data** %198 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %207, i8 0, i64 16, i1 false)
  br label %234

208:                                              ; preds = %196
  %209 = bitcast i8* %203 to %struct.opj_simple_mcc_decorrelation_data*
  store i8* %203, i8** %199, align 8
  %210 = load i32, i32* %191, align 8
  %211 = zext i32 %210 to i64
  %212 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %209, i64 %211
  %213 = bitcast %struct.opj_simple_mcc_decorrelation_data* %212 to i8*
  %214 = load i32, i32* %193, align 4
  %215 = sub i32 %214, %210
  %216 = zext i32 %215 to i64
  %217 = shl nuw nsw i64 %216, 5
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %213, i8 0, i64 %217, i1 false)
  %218 = load i32, i32* %191, align 8
  br label %219

219:                                              ; preds = %208, %182
  %220 = phi i32 [ %218, %208 ], [ %192, %182 ]
  %221 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 26
  %222 = load %struct.opj_simple_mcc_decorrelation_data*, %struct.opj_simple_mcc_decorrelation_data** %221, align 8
  %223 = zext i32 %220 to i64
  %224 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %222, i64 %223, i32 2
  store %struct.opj_mct_data* %106, %struct.opj_mct_data** %224, align 8
  %225 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %222, i64 %223, i32 4
  %226 = load i8, i8* %225, align 8
  %227 = or i8 %226, 1
  store i8 %227, i8* %225, align 8
  %228 = load i32, i32* %120, align 8
  %229 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %222, i64 %223, i32 1
  store i32 %228, i32* %229, align 4
  %230 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %222, i64 %223, i32 0
  store i32 %116, i32* %230, align 8
  %231 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %222, i64 %223, i32 3
  store %struct.opj_mct_data* %110, %struct.opj_mct_data** %231, align 8
  %232 = load i32, i32* %191, align 8
  %233 = add i32 %232, 1
  store i32 %233, i32* %191, align 8
  br label %234

234:                                              ; preds = %101, %205, %115, %49, %25, %2, %219, %131
  %235 = phi i32 [ 1, %219 ], [ 0, %205 ], [ 0, %131 ], [ 0, %101 ], [ 0, %25 ], [ 1, %2 ], [ 0, %49 ], [ 0, %115 ]
  ret i32 %235
}

declare void @opj_dwt_calc_explicit_stepsizes(%struct.opj_tccp*, i32) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @opj_j2k_end_decompress(%struct.opj_j2k* nocapture readnone, %struct.opj_stream_private* nocapture readnone, %struct.opj_event_mgr* nocapture readnone) local_unnamed_addr #7 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_j2k_read_header(%struct.opj_stream_private*, %struct.opj_j2k*, %struct.opj_image** nocapture, %struct.opj_event_mgr*) local_unnamed_addr #3 {
  %5 = tail call %struct.opj_image* @opj_image_create0() #12
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %1, i64 0, i32 2
  store %struct.opj_image* %5, %struct.opj_image** %6, align 8
  %7 = icmp eq %struct.opj_image* %5, null
  br i1 %7, label %91, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %1, i64 0, i32 6
  %10 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %9, align 8
  %11 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %10, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_build_decoder to void ()*), %struct.opj_event_mgr* %3) #12
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %17, label %13

13:                                               ; preds = %8
  %14 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %9, align 8
  %15 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %14, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_decoding_validation to void ()*), %struct.opj_event_mgr* %3) #12
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %8, %13
  %18 = load %struct.opj_image*, %struct.opj_image** %6, align 8
  tail call void @opj_image_destroy(%struct.opj_image* %18) #12
  store %struct.opj_image* null, %struct.opj_image** %6, align 8
  br label %91

19:                                               ; preds = %13
  %20 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %9, align 8
  %21 = tail call i32 @opj_procedure_list_get_nb_procedures(%struct.opj_procedure_list* %20) #12
  %22 = tail call void ()** @opj_procedure_list_get_first_procedure(%struct.opj_procedure_list* %20) #12
  %23 = icmp eq i32 %21, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %19
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %20) #12
  br label %45

25:                                               ; preds = %19
  %26 = bitcast void ()** %22 to i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)**
  br label %27

27:                                               ; preds = %36, %25
  %28 = phi i32 [ %40, %36 ], [ 0, %25 ]
  %29 = phi i32 [ %38, %36 ], [ 1, %25 ]
  %30 = phi i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** [ %39, %36 ], [ %26, %25 ]
  %31 = icmp eq i32 %29, 0
  br i1 %31, label %36, label %32

32:                                               ; preds = %27
  %33 = load i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %30, align 8
  %34 = tail call i32 %33(%struct.opj_j2k* %1, %struct.opj_stream_private* %0, %struct.opj_event_mgr* %3) #12
  %35 = icmp ne i32 %34, 0
  br label %36

36:                                               ; preds = %32, %27
  %37 = phi i1 [ false, %27 ], [ %35, %32 ]
  %38 = zext i1 %37 to i32
  %39 = getelementptr inbounds i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %30, i64 1
  %40 = add nuw i32 %28, 1
  %41 = icmp eq i32 %40, %21
  br i1 %41, label %42, label %27

42:                                               ; preds = %36
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %20) #12
  br i1 %37, label %45, label %43

43:                                               ; preds = %42
  %44 = load %struct.opj_image*, %struct.opj_image** %6, align 8
  tail call void @opj_image_destroy(%struct.opj_image* %44) #12
  store %struct.opj_image* null, %struct.opj_image** %6, align 8
  br label %91

45:                                               ; preds = %42, %24
  %46 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %1, i64 0, i32 5
  %47 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %46, align 8
  %48 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %47, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_read_header_procedure to void ()*), %struct.opj_event_mgr* %3) #12
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %54, label %50

50:                                               ; preds = %45
  %51 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %46, align 8
  %52 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %51, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_copy_default_tcp_and_create_tcd to void ()*), %struct.opj_event_mgr* %3) #12
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %45, %50
  %55 = load %struct.opj_image*, %struct.opj_image** %6, align 8
  tail call void @opj_image_destroy(%struct.opj_image* %55) #12
  store %struct.opj_image* null, %struct.opj_image** %6, align 8
  br label %91

56:                                               ; preds = %50
  %57 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %46, align 8
  %58 = tail call i32 @opj_procedure_list_get_nb_procedures(%struct.opj_procedure_list* %57) #12
  %59 = tail call void ()** @opj_procedure_list_get_first_procedure(%struct.opj_procedure_list* %57) #12
  %60 = icmp eq i32 %58, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %56
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %57) #12
  br label %82

62:                                               ; preds = %56
  %63 = bitcast void ()** %59 to i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)**
  br label %64

64:                                               ; preds = %73, %62
  %65 = phi i32 [ %77, %73 ], [ 0, %62 ]
  %66 = phi i32 [ %75, %73 ], [ 1, %62 ]
  %67 = phi i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** [ %76, %73 ], [ %63, %62 ]
  %68 = icmp eq i32 %66, 0
  br i1 %68, label %73, label %69

69:                                               ; preds = %64
  %70 = load i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %67, align 8
  %71 = tail call i32 %70(%struct.opj_j2k* %1, %struct.opj_stream_private* %0, %struct.opj_event_mgr* %3) #12
  %72 = icmp ne i32 %71, 0
  br label %73

73:                                               ; preds = %69, %64
  %74 = phi i1 [ false, %64 ], [ %72, %69 ]
  %75 = zext i1 %74 to i32
  %76 = getelementptr inbounds i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %67, i64 1
  %77 = add nuw i32 %65, 1
  %78 = icmp eq i32 %77, %58
  br i1 %78, label %79, label %64

79:                                               ; preds = %73
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %57) #12
  br i1 %74, label %82, label %80

80:                                               ; preds = %79
  %81 = load %struct.opj_image*, %struct.opj_image** %6, align 8
  tail call void @opj_image_destroy(%struct.opj_image* %81) #12
  store %struct.opj_image* null, %struct.opj_image** %6, align 8
  br label %91

82:                                               ; preds = %79, %61
  %83 = tail call %struct.opj_image* @opj_image_create0() #12
  store %struct.opj_image* %83, %struct.opj_image** %2, align 8
  %84 = icmp eq %struct.opj_image* %83, null
  br i1 %84, label %91, label %85

85:                                               ; preds = %82
  %86 = load %struct.opj_image*, %struct.opj_image** %6, align 8
  tail call void @opj_copy_image_header(%struct.opj_image* %86, %struct.opj_image* nonnull %83) #12
  %87 = tail call fastcc i32 @opj_j2k_allocate_tile_element_cstr_index(%struct.opj_j2k* %1)
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %91

89:                                               ; preds = %85
  %90 = load %struct.opj_image*, %struct.opj_image** %2, align 8
  tail call void @opj_image_destroy(%struct.opj_image* %90) #12
  store %struct.opj_image* null, %struct.opj_image** %2, align 8
  br label %91

91:                                               ; preds = %85, %82, %4, %89, %80, %54, %43, %17
  %92 = phi i32 [ 0, %89 ], [ 0, %80 ], [ 0, %54 ], [ 0, %43 ], [ 0, %17 ], [ 0, %4 ], [ 0, %82 ], [ 1, %85 ]
  ret i32 %92
}

declare %struct.opj_image* @opj_image_create0() local_unnamed_addr #4

declare hidden void @opj_image_destroy(%struct.opj_image*) local_unnamed_addr #4

declare void @opj_copy_image_header(%struct.opj_image*, %struct.opj_image*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @opj_j2k_allocate_tile_element_cstr_index(%struct.opj_j2k* nocapture readonly) unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 6
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 7
  %5 = load i32, i32* %4, align 4
  %6 = mul i32 %5, %3
  %7 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 7
  %8 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %7, align 8
  %9 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %8, i64 0, i32 6
  store i32 %6, i32* %9, align 4
  %10 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %7, align 8
  %11 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %10, i64 0, i32 6
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i64
  %14 = tail call i8* @opj_calloc(i64 %13, i64 56) #12
  %15 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %7, align 8
  %16 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %15, i64 0, i32 7
  %17 = bitcast %struct.opj_tile_index** %16 to i8**
  store i8* %14, i8** %17, align 8
  %18 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %7, align 8
  %19 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %18, i64 0, i32 7
  %20 = load %struct.opj_tile_index*, %struct.opj_tile_index** %19, align 8
  %21 = icmp eq %struct.opj_tile_index* %20, null
  br i1 %21, label %58, label %22

22:                                               ; preds = %1
  %23 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %18, i64 0, i32 6
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %58, label %31

26:                                               ; preds = %31
  %27 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %51, i64 0, i32 6
  %28 = load i32, i32* %27, align 4
  %29 = zext i32 %28 to i64
  %30 = icmp ult i64 %57, %29
  br i1 %30, label %31, label %58

31:                                               ; preds = %22, %26
  %32 = phi %struct.opj_tile_index* [ %53, %26 ], [ %20, %22 ]
  %33 = phi i64 [ %57, %26 ], [ 0, %22 ]
  %34 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %32, i64 %33, i32 7
  store i32 100, i32* %34, align 8
  %35 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %7, align 8
  %36 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %35, i64 0, i32 7
  %37 = load %struct.opj_tile_index*, %struct.opj_tile_index** %36, align 8
  %38 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %37, i64 %33, i32 5
  store i32 0, i32* %38, align 8
  %39 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %7, align 8
  %40 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %39, i64 0, i32 7
  %41 = load %struct.opj_tile_index*, %struct.opj_tile_index** %40, align 8
  %42 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %41, i64 %33, i32 7
  %43 = load i32, i32* %42, align 8
  %44 = zext i32 %43 to i64
  %45 = tail call i8* @opj_calloc(i64 %44, i64 24) #12
  %46 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %7, align 8
  %47 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %46, i64 0, i32 7
  %48 = load %struct.opj_tile_index*, %struct.opj_tile_index** %47, align 8
  %49 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %48, i64 %33, i32 6
  %50 = bitcast %struct.opj_marker_info** %49 to i8**
  store i8* %45, i8** %50, align 8
  %51 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %7, align 8
  %52 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %51, i64 0, i32 7
  %53 = load %struct.opj_tile_index*, %struct.opj_tile_index** %52, align 8
  %54 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %53, i64 %33, i32 6
  %55 = load %struct.opj_marker_info*, %struct.opj_marker_info** %54, align 8
  %56 = icmp eq %struct.opj_marker_info* %55, null
  %57 = add nuw nsw i64 %33, 1
  br i1 %56, label %58, label %26

58:                                               ; preds = %31, %26, %22, %1
  %59 = phi i32 [ 0, %1 ], [ 1, %22 ], [ 0, %31 ], [ 1, %26 ]
  ret i32 %59
}

declare i8* @opj_realloc(i8*, i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @opj_j2k_tcp_destroy(%struct.opj_tcp*) unnamed_addr #3 {
  %2 = icmp eq %struct.opj_tcp* %0, null
  br i1 %2, label %103, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 9
  %5 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %4, align 8
  %6 = icmp eq %struct.opj_ppx_struct* %5, null
  br i1 %6, label %33, label %7

7:                                                ; preds = %3
  %8 = bitcast %struct.opj_ppx_struct* %5 to i8*
  %9 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 8
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %31, label %12

12:                                               ; preds = %7, %26
  %13 = phi i32 [ %22, %26 ], [ %10, %7 ]
  %14 = phi %struct.opj_ppx_struct* [ %27, %26 ], [ %5, %7 ]
  %15 = phi i64 [ %23, %26 ], [ 0, %7 ]
  %16 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %14, i64 %15, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %12
  tail call void @opj_free(i8* nonnull %17) #12
  %20 = load i32, i32* %9, align 8
  br label %21

21:                                               ; preds = %12, %19
  %22 = phi i32 [ %13, %12 ], [ %20, %19 ]
  %23 = add nuw nsw i64 %15, 1
  %24 = zext i32 %22 to i64
  %25 = icmp ult i64 %23, %24
  br i1 %25, label %26, label %28

26:                                               ; preds = %21
  %27 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %4, align 8
  br label %12

28:                                               ; preds = %21
  %29 = bitcast %struct.opj_ppx_struct** %4 to i8**
  %30 = load i8*, i8** %29, align 8
  br label %31

31:                                               ; preds = %7, %28
  %32 = phi i8* [ %30, %28 ], [ %8, %7 ]
  store i32 0, i32* %9, align 8
  tail call void @opj_free(i8* %32) #12
  store %struct.opj_ppx_struct* null, %struct.opj_ppx_struct** %4, align 8
  br label %33

33:                                               ; preds = %3, %31
  %34 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 11
  %35 = load i8*, i8** %34, align 8
  %36 = icmp eq i8* %35, null
  br i1 %36, label %38, label %37

37:                                               ; preds = %33
  tail call void @opj_free(i8* nonnull %35) #12
  store i8* null, i8** %34, align 8
  br label %38

38:                                               ; preds = %33, %37
  %39 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 15
  %40 = load %struct.opj_tccp*, %struct.opj_tccp** %39, align 8
  %41 = icmp eq %struct.opj_tccp* %40, null
  br i1 %41, label %44, label %42

42:                                               ; preds = %38
  %43 = bitcast %struct.opj_tccp* %40 to i8*
  tail call void @opj_free(i8* nonnull %43) #12
  store %struct.opj_tccp* null, %struct.opj_tccp** %39, align 8
  br label %44

44:                                               ; preds = %38, %42
  %45 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 22
  %46 = load float*, float** %45, align 8
  %47 = icmp eq float* %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %44
  %49 = bitcast float* %46 to i8*
  tail call void @opj_free(i8* nonnull %49) #12
  store float* null, float** %45, align 8
  br label %50

50:                                               ; preds = %44, %48
  %51 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 21
  %52 = load float*, float** %51, align 8
  %53 = icmp eq float* %52, null
  br i1 %53, label %56, label %54

54:                                               ; preds = %50
  %55 = bitcast float* %52 to i8*
  tail call void @opj_free(i8* nonnull %55) #12
  store float* null, float** %51, align 8
  br label %56

56:                                               ; preds = %50, %54
  %57 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 26
  %58 = load %struct.opj_simple_mcc_decorrelation_data*, %struct.opj_simple_mcc_decorrelation_data** %57, align 8
  %59 = icmp eq %struct.opj_simple_mcc_decorrelation_data* %58, null
  br i1 %59, label %63, label %60

60:                                               ; preds = %56
  %61 = bitcast %struct.opj_simple_mcc_decorrelation_data* %58 to i8*
  tail call void @opj_free(i8* nonnull %61) #12
  %62 = bitcast %struct.opj_simple_mcc_decorrelation_data** %57 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 16, i1 false)
  br label %63

63:                                               ; preds = %56, %60
  %64 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 23
  %65 = load %struct.opj_mct_data*, %struct.opj_mct_data** %64, align 8
  %66 = icmp eq %struct.opj_mct_data* %65, null
  br i1 %66, label %91, label %67

67:                                               ; preds = %63
  %68 = bitcast %struct.opj_mct_data* %65 to i8*
  %69 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 24
  %70 = load i32, i32* %69, align 8
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %89, label %72

72:                                               ; preds = %67, %81
  %73 = phi i32 [ %82, %81 ], [ %70, %67 ]
  %74 = phi i32 [ %84, %81 ], [ 0, %67 ]
  %75 = phi %struct.opj_mct_data* [ %83, %81 ], [ %65, %67 ]
  %76 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %75, i64 0, i32 3
  %77 = load i8*, i8** %76, align 8
  %78 = icmp eq i8* %77, null
  br i1 %78, label %81, label %79

79:                                               ; preds = %72
  tail call void @opj_free(i8* nonnull %77) #12
  store i8* null, i8** %76, align 8
  %80 = load i32, i32* %69, align 8
  br label %81

81:                                               ; preds = %72, %79
  %82 = phi i32 [ %73, %72 ], [ %80, %79 ]
  %83 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %75, i64 1
  %84 = add nuw i32 %74, 1
  %85 = icmp ult i32 %84, %82
  br i1 %85, label %72, label %86

86:                                               ; preds = %81
  %87 = bitcast %struct.opj_mct_data** %64 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %67, %86
  %90 = phi i8* [ %88, %86 ], [ %68, %67 ]
  tail call void @opj_free(i8* %90) #12
  store %struct.opj_mct_data* null, %struct.opj_mct_data** %64, align 8
  br label %91

91:                                               ; preds = %63, %89
  %92 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 20
  %93 = load double*, double** %92, align 8
  %94 = icmp eq double* %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %91
  %96 = bitcast double* %93 to i8*
  tail call void @opj_free(i8* nonnull %96) #12
  store double* null, double** %92, align 8
  br label %97

97:                                               ; preds = %91, %95
  %98 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 18
  %99 = load i8*, i8** %98, align 8
  %100 = icmp eq i8* %99, null
  br i1 %100, label %103, label %101

101:                                              ; preds = %97
  tail call void @opj_free(i8* nonnull %99) #12
  store i8* null, i8** %98, align 8
  %102 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 19
  store i32 0, i32* %102, align 8
  br label %103

103:                                              ; preds = %101, %97, %1
  ret void
}

declare void @opj_tcd_destroy(%struct.opj_tcd*) local_unnamed_addr #4

declare void @opj_procedure_list_destroy(%struct.opj_procedure_list*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @j2k_destroy_cstr_index(%struct.opj_codestream_index*) local_unnamed_addr #3 {
  %2 = icmp eq %struct.opj_codestream_index* %0, null
  br i1 %2, label %59, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %0, i64 0, i32 4
  %5 = load %struct.opj_marker_info*, %struct.opj_marker_info** %4, align 8
  %6 = icmp eq %struct.opj_marker_info* %5, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = bitcast %struct.opj_marker_info* %5 to i8*
  tail call void @opj_free(i8* nonnull %8) #12
  store %struct.opj_marker_info* null, %struct.opj_marker_info** %4, align 8
  br label %9

9:                                                ; preds = %3, %7
  %10 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %0, i64 0, i32 7
  %11 = load %struct.opj_tile_index*, %struct.opj_tile_index** %10, align 8
  %12 = icmp eq %struct.opj_tile_index* %11, null
  br i1 %12, label %57, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %0, i64 0, i32 6
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %54, label %17

17:                                               ; preds = %13, %48
  %18 = phi %struct.opj_tile_index* [ %49, %48 ], [ %11, %13 ]
  %19 = phi i64 [ %50, %48 ], [ 0, %13 ]
  %20 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %18, i64 %19, i32 9
  %21 = load %struct.opj_packet_info*, %struct.opj_packet_info** %20, align 8
  %22 = icmp eq %struct.opj_packet_info* %21, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %17
  %24 = bitcast %struct.opj_packet_info* %21 to i8*
  tail call void @opj_free(i8* nonnull %24) #12
  %25 = load %struct.opj_tile_index*, %struct.opj_tile_index** %10, align 8
  %26 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %25, i64 %19, i32 9
  store %struct.opj_packet_info* null, %struct.opj_packet_info** %26, align 8
  %27 = load %struct.opj_tile_index*, %struct.opj_tile_index** %10, align 8
  br label %28

28:                                               ; preds = %17, %23
  %29 = phi %struct.opj_tile_index* [ %18, %17 ], [ %27, %23 ]
  %30 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %29, i64 %19, i32 4
  %31 = load %struct.opj_tp_index*, %struct.opj_tp_index** %30, align 8
  %32 = icmp eq %struct.opj_tp_index* %31, null
  br i1 %32, label %38, label %33

33:                                               ; preds = %28
  %34 = bitcast %struct.opj_tp_index* %31 to i8*
  tail call void @opj_free(i8* nonnull %34) #12
  %35 = load %struct.opj_tile_index*, %struct.opj_tile_index** %10, align 8
  %36 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %35, i64 %19, i32 4
  store %struct.opj_tp_index* null, %struct.opj_tp_index** %36, align 8
  %37 = load %struct.opj_tile_index*, %struct.opj_tile_index** %10, align 8
  br label %38

38:                                               ; preds = %28, %33
  %39 = phi %struct.opj_tile_index* [ %29, %28 ], [ %37, %33 ]
  %40 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %39, i64 %19, i32 6
  %41 = load %struct.opj_marker_info*, %struct.opj_marker_info** %40, align 8
  %42 = icmp eq %struct.opj_marker_info* %41, null
  br i1 %42, label %48, label %43

43:                                               ; preds = %38
  %44 = bitcast %struct.opj_marker_info* %41 to i8*
  tail call void @opj_free(i8* nonnull %44) #12
  %45 = load %struct.opj_tile_index*, %struct.opj_tile_index** %10, align 8
  %46 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %45, i64 %19, i32 6
  store %struct.opj_marker_info* null, %struct.opj_marker_info** %46, align 8
  %47 = load %struct.opj_tile_index*, %struct.opj_tile_index** %10, align 8
  br label %48

48:                                               ; preds = %38, %43
  %49 = phi %struct.opj_tile_index* [ %39, %38 ], [ %47, %43 ]
  %50 = add nuw nsw i64 %19, 1
  %51 = load i32, i32* %14, align 4
  %52 = zext i32 %51 to i64
  %53 = icmp ult i64 %50, %52
  br i1 %53, label %17, label %54

54:                                               ; preds = %48, %13
  %55 = phi %struct.opj_tile_index* [ %11, %13 ], [ %49, %48 ]
  %56 = bitcast %struct.opj_tile_index* %55 to i8*
  tail call void @opj_free(i8* %56) #12
  store %struct.opj_tile_index* null, %struct.opj_tile_index** %10, align 8
  br label %57

57:                                               ; preds = %9, %54
  %58 = bitcast %struct.opj_codestream_index* %0 to i8*
  tail call void @opj_free(i8* nonnull %58) #12
  br label %59

59:                                               ; preds = %1, %57
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_j2k_read_tile_header(%struct.opj_j2k*, i32* nocapture, i32*, i32* nocapture, i32* nocapture, i32* nocapture, i32* nocapture, i32* nocapture, i32* nocapture, %struct.opj_stream_private*, %struct.opj_event_mgr*) local_unnamed_addr #3 {
  %12 = alloca [10 x i8], align 1
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #12
  store i32 65424, i32* %19, align 4
  %22 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #12
  store i32 -1431655766, i32* %20, align 4
  %23 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 6
  %24 = load i32, i32* %23, align 8
  %25 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 7
  %26 = load i32, i32* %25, align 4
  %27 = mul i32 %26, %24
  %28 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 0
  %29 = load i32, i32* %28, align 8
  switch i32 %29, label %700 [
    i32 256, label %30
    i32 8, label %32
  ]

30:                                               ; preds = %11
  store i32 65497, i32* %19, align 4
  %31 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 14
  br label %495

32:                                               ; preds = %11
  %33 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 14
  %34 = load i8, i8* %33, align 8
  %35 = and i8 %34, 1
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %495

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 2
  %39 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 4
  %40 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 3
  %41 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %42 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 7
  %43 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 10
  %44 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %45 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 11
  %46 = getelementptr inbounds [10 x i8], [10 x i8]* %12, i64 0, i64 0
  %47 = getelementptr inbounds [10 x i8], [10 x i8]* %12, i64 0, i64 2
  %48 = getelementptr inbounds [10 x i8], [10 x i8]* %12, i64 0, i64 6
  %49 = getelementptr inbounds [10 x i8], [10 x i8]* %12, i64 0, i64 7
  %50 = bitcast i32* %13 to i8*
  %51 = bitcast i32* %14 to i8*
  %52 = bitcast i32* %15 to i8*
  %53 = bitcast i32* %16 to i8*
  %54 = bitcast i32* %17 to i8*
  %55 = bitcast i32* %18 to i8*
  %56 = zext i32 %27 to i64
  %57 = and i64 %56, 1
  %58 = icmp eq i32 %27, 1
  %59 = sub nsw i64 %56, %57
  %60 = icmp eq i64 %57, 0
  br label %61

61:                                               ; preds = %37, %477
  %62 = phi i32 [ 65424, %37 ], [ %482, %477 ]
  %63 = icmp eq i32 %62, 65427
  br i1 %63, label %212, label %64

64:                                               ; preds = %61, %208
  %65 = call i64 @opj_stream_get_number_byte_left(%struct.opj_stream_private* %9) #12
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %68

67:                                               ; preds = %64
  store i32 64, i32* %28, align 8
  br label %212

68:                                               ; preds = %64
  %69 = load i8*, i8** %38, align 8
  %70 = call i64 @opj_stream_read_data(%struct.opj_stream_private* %9, i8* %69, i64 2, %struct.opj_event_mgr* %10) #12
  %71 = icmp eq i64 %70, 2
  br i1 %71, label %74, label %72

72:                                               ; preds = %68
  %73 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.32, i64 0, i64 0)) #12
  br label %700

74:                                               ; preds = %68
  %75 = load i8*, i8** %38, align 8
  call void @opj_read_bytes_LE(i8* %75, i32* nonnull %20, i32 2) #12
  %76 = load i32, i32* %20, align 4
  %77 = icmp ult i32 %76, 2
  br i1 %77, label %78, label %80

78:                                               ; preds = %74
  %79 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.33, i64 0, i64 0)) #12
  br label %700

80:                                               ; preds = %74
  %81 = load i32, i32* %19, align 4
  %82 = icmp eq i32 %81, 32896
  br i1 %82, label %83, label %87

83:                                               ; preds = %80
  %84 = call i64 @opj_stream_get_number_byte_left(%struct.opj_stream_private* %9) #12
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %86, label %87

86:                                               ; preds = %83
  store i32 64, i32* %28, align 8
  br label %212

87:                                               ; preds = %83, %80
  %88 = load i32, i32* %28, align 8
  %89 = and i32 %88, 16
  %90 = icmp eq i32 %89, 0
  %91 = load i32, i32* %20, align 4
  br i1 %90, label %96, label %92

92:                                               ; preds = %87
  %93 = load i32, i32* %39, align 4
  %94 = sub i32 -2, %91
  %95 = add i32 %94, %93
  store i32 %95, i32* %39, align 4
  br label %96

96:                                               ; preds = %87, %92
  %97 = add i32 %91, -2
  store i32 %97, i32* %20, align 4
  %98 = load i32, i32* %19, align 4
  br label %99

99:                                               ; preds = %99, %96
  %100 = phi %struct.opj_dec_memory_marker_handler* [ getelementptr inbounds ([21 x %struct.opj_dec_memory_marker_handler], [21 x %struct.opj_dec_memory_marker_handler]* @j2k_memory_marker_handler_tab, i64 0, i64 0), %96 ], [ %106, %99 ]
  %101 = getelementptr inbounds %struct.opj_dec_memory_marker_handler, %struct.opj_dec_memory_marker_handler* %100, i64 0, i32 0
  %102 = load i32, i32* %101, align 8
  %103 = icmp eq i32 %102, 0
  %104 = icmp eq i32 %102, %98
  %105 = or i1 %103, %104
  %106 = getelementptr inbounds %struct.opj_dec_memory_marker_handler, %struct.opj_dec_memory_marker_handler* %100, i64 1
  br i1 %105, label %107, label %99

107:                                              ; preds = %99
  %108 = getelementptr inbounds %struct.opj_dec_memory_marker_handler, %struct.opj_dec_memory_marker_handler* %100, i64 0, i32 0
  %109 = getelementptr inbounds %struct.opj_dec_memory_marker_handler, %struct.opj_dec_memory_marker_handler* %100, i64 0, i32 1
  %110 = load i32, i32* %109, align 4
  %111 = and i32 %110, %88
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %115

113:                                              ; preds = %107
  %114 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.34, i64 0, i64 0)) #12
  br label %700

115:                                              ; preds = %107
  %116 = load i32, i32* %40, align 8
  %117 = icmp ugt i32 %97, %116
  br i1 %117, label %120, label %118

118:                                              ; preds = %115
  %119 = load i8*, i8** %38, align 8
  br label %137

120:                                              ; preds = %115
  %121 = zext i32 %97 to i64
  %122 = call i64 @opj_stream_get_number_byte_left(%struct.opj_stream_private* %9) #12
  %123 = icmp slt i64 %122, %121
  br i1 %123, label %124, label %126

124:                                              ; preds = %120
  %125 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.35, i64 0, i64 0)) #12
  br label %700

126:                                              ; preds = %120
  %127 = load i8*, i8** %38, align 8
  %128 = load i32, i32* %20, align 4
  %129 = zext i32 %128 to i64
  %130 = call i8* @opj_realloc(i8* %127, i64 %129) #12
  %131 = icmp eq i8* %130, null
  br i1 %131, label %132, label %135

132:                                              ; preds = %126
  %133 = load i8*, i8** %38, align 8
  call void @opj_free(i8* %133) #12
  store i8* null, i8** %38, align 8
  store i32 0, i32* %40, align 8
  %134 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.36, i64 0, i64 0)) #12
  br label %700

135:                                              ; preds = %126
  store i8* %130, i8** %38, align 8
  %136 = load i32, i32* %20, align 4
  store i32 %136, i32* %40, align 8
  br label %137

137:                                              ; preds = %118, %135
  %138 = phi i32 [ %97, %118 ], [ %136, %135 ]
  %139 = phi i8* [ %119, %118 ], [ %130, %135 ]
  %140 = zext i32 %138 to i64
  %141 = call i64 @opj_stream_read_data(%struct.opj_stream_private* %9, i8* %139, i64 %140, %struct.opj_event_mgr* %10) #12
  %142 = load i32, i32* %20, align 4
  %143 = zext i32 %142 to i64
  %144 = icmp eq i64 %141, %143
  br i1 %144, label %147, label %145

145:                                              ; preds = %137
  %146 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.32, i64 0, i64 0)) #12
  br label %700

147:                                              ; preds = %137
  %148 = getelementptr inbounds %struct.opj_dec_memory_marker_handler, %struct.opj_dec_memory_marker_handler* %100, i64 0, i32 2
  %149 = load i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)*, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)** %148, align 8
  %150 = icmp eq i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)* %149, null
  br i1 %150, label %151, label %153

151:                                              ; preds = %147
  %152 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.37, i64 0, i64 0)) #12
  br label %700

153:                                              ; preds = %147
  %154 = load i8*, i8** %38, align 8
  %155 = call i32 %149(%struct.opj_j2k* %0, i8* %154, i32 %142, %struct.opj_event_mgr* %10) #12
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %160

157:                                              ; preds = %153
  %158 = load i32, i32* %19, align 4
  %159 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.38, i64 0, i64 0), i32 %158) #12
  br label %700

160:                                              ; preds = %153
  %161 = load i32, i32* %41, align 8
  %162 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %42, align 8
  %163 = load i32, i32* %108, align 8
  %164 = call i64 @opj_stream_tell(%struct.opj_stream_private* %9) #12
  %165 = trunc i64 %164 to i32
  %166 = load i32, i32* %20, align 4
  %167 = sub i32 -4, %166
  %168 = add i32 %167, %165
  %169 = zext i32 %168 to i64
  %170 = add i32 %166, 4
  %171 = call fastcc i32 @opj_j2k_add_tlmarker(i32 %161, %struct.opj_codestream_index* %162, i32 %163, i64 %169, i32 %170)
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %175

173:                                              ; preds = %160
  %174 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.39, i64 0, i64 0)) #12
  br label %700

175:                                              ; preds = %160
  %176 = load i32, i32* %108, align 8
  %177 = icmp eq i32 %176, 65424
  br i1 %177, label %178, label %188

178:                                              ; preds = %175
  %179 = call i64 @opj_stream_tell(%struct.opj_stream_private* %9) #12
  %180 = trunc i64 %179 to i32
  %181 = load i32, i32* %20, align 4
  %182 = sub i32 -4, %181
  %183 = add i32 %182, %180
  %184 = zext i32 %183 to i64
  %185 = load i64, i64* %43, align 8
  %186 = icmp slt i64 %185, %184
  br i1 %186, label %187, label %188

187:                                              ; preds = %178
  store i64 %184, i64* %43, align 8
  br label %188

188:                                              ; preds = %178, %187, %175
  %189 = load i8, i8* %33, align 8
  %190 = and i8 %189, 4
  %191 = icmp eq i8 %190, 0
  br i1 %191, label %202, label %192

192:                                              ; preds = %188
  %193 = load i32, i32* %39, align 4
  %194 = zext i32 %193 to i64
  %195 = call i64 @opj_stream_skip(%struct.opj_stream_private* %9, i64 %194, %struct.opj_event_mgr* %10) #12
  %196 = load i32, i32* %39, align 4
  %197 = zext i32 %196 to i64
  %198 = icmp eq i64 %195, %197
  br i1 %198, label %201, label %199

199:                                              ; preds = %192
  %200 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.32, i64 0, i64 0)) #12
  br label %700

201:                                              ; preds = %192
  store i32 65427, i32* %19, align 4
  br label %212

202:                                              ; preds = %188
  %203 = load i8*, i8** %38, align 8
  %204 = call i64 @opj_stream_read_data(%struct.opj_stream_private* %9, i8* %203, i64 2, %struct.opj_event_mgr* %10) #12
  %205 = icmp eq i64 %204, 2
  br i1 %205, label %208, label %206

206:                                              ; preds = %202
  %207 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.32, i64 0, i64 0)) #12
  br label %700

208:                                              ; preds = %202
  %209 = load i8*, i8** %38, align 8
  call void @opj_read_bytes_LE(i8* %209, i32* nonnull %19, i32 2) #12
  %210 = load i32, i32* %19, align 4
  %211 = icmp eq i32 %210, 65427
  br i1 %211, label %212, label %64

212:                                              ; preds = %208, %201, %61, %86, %67
  %213 = call i64 @opj_stream_get_number_byte_left(%struct.opj_stream_private* %9) #12
  %214 = icmp eq i64 %213, 0
  br i1 %214, label %215, label %218

215:                                              ; preds = %212
  %216 = load i32, i32* %28, align 8
  %217 = icmp eq i32 %216, 64
  br i1 %217, label %485, label %218

218:                                              ; preds = %215, %212
  %219 = load i8, i8* %33, align 8
  %220 = and i8 %219, 4
  %221 = icmp eq i8 %220, 0
  br i1 %221, label %222, label %439

222:                                              ; preds = %218
  %223 = load %struct.opj_tcp*, %struct.opj_tcp** %44, align 8
  %224 = load i32, i32* %41, align 8
  %225 = zext i32 %224 to i64
  %226 = load i32, i32* %45, align 8
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %232, label %228

228:                                              ; preds = %222
  %229 = call i64 @opj_stream_get_number_byte_left(%struct.opj_stream_private* %9) #12
  %230 = trunc i64 %229 to i32
  %231 = add i32 %230, -2
  br label %237

232:                                              ; preds = %222
  %233 = load i32, i32* %39, align 4
  %234 = icmp ugt i32 %233, 1
  br i1 %234, label %235, label %239

235:                                              ; preds = %232
  %236 = add i32 %233, -2
  br label %237

237:                                              ; preds = %228, %235
  %238 = phi i32 [ %236, %235 ], [ %231, %228 ]
  store i32 %238, i32* %39, align 4
  br label %239

239:                                              ; preds = %237, %232
  %240 = phi i32 [ %233, %232 ], [ %238, %237 ]
  %241 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %223, i64 %225, i32 18
  %242 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %223, i64 %225, i32 19
  %243 = icmp eq i32 %240, 0
  br i1 %243, label %280, label %244

244:                                              ; preds = %239
  %245 = zext i32 %240 to i64
  %246 = call i64 @opj_stream_get_number_byte_left(%struct.opj_stream_private* %9) #12
  %247 = icmp slt i64 %246, %245
  br i1 %247, label %248, label %250

248:                                              ; preds = %244
  %249 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.230, i64 0, i64 0)) #12
  br label %700

250:                                              ; preds = %244
  %251 = load i32, i32* %39, align 4
  %252 = icmp ugt i32 %251, -3
  br i1 %252, label %253, label %255

253:                                              ; preds = %250
  %254 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.231, i64 0, i64 0)) #12
  br label %700

255:                                              ; preds = %250
  %256 = load i8*, i8** %241, align 8
  %257 = icmp eq i8* %256, null
  br i1 %257, label %273, label %258

258:                                              ; preds = %255
  %259 = load i32, i32* %242, align 4
  %260 = sub nuw i32 -3, %251
  %261 = icmp ugt i32 %259, %260
  br i1 %261, label %262, label %264

262:                                              ; preds = %258
  %263 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.232, i64 0, i64 0)) #12
  br label %700

264:                                              ; preds = %258
  %265 = add nuw i32 %251, 2
  %266 = add i32 %265, %259
  %267 = zext i32 %266 to i64
  %268 = call i8* @opj_realloc(i8* nonnull %256, i64 %267) #12
  %269 = icmp eq i8* %268, null
  br i1 %269, label %271, label %270

270:                                              ; preds = %264
  store i8* %268, i8** %241, align 8
  br label %280

271:                                              ; preds = %264
  %272 = load i8*, i8** %241, align 8
  call void @opj_free(i8* %272) #12
  store i8* null, i8** %241, align 8
  br label %278

273:                                              ; preds = %255
  %274 = add nuw i32 %251, 2
  %275 = zext i32 %274 to i64
  %276 = call i8* @opj_malloc(i64 %275) #12
  store i8* %276, i8** %241, align 8
  %277 = icmp eq i8* %276, null
  br i1 %277, label %278, label %280

278:                                              ; preds = %273, %271
  %279 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.233, i64 0, i64 0)) #12
  br label %700

280:                                              ; preds = %273, %270, %239
  %281 = phi i32 [ 0, %273 ], [ 1, %239 ], [ 0, %270 ]
  %282 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %42, align 8
  %283 = icmp eq %struct.opj_codestream_index* %282, null
  br i1 %283, label %313, label %284

284:                                              ; preds = %280
  %285 = call i64 @opj_stream_tell(%struct.opj_stream_private* %9) #12
  %286 = add nsw i64 %285, -2
  %287 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %282, i64 0, i32 7
  %288 = load %struct.opj_tile_index*, %struct.opj_tile_index** %287, align 8
  %289 = load i32, i32* %41, align 8
  %290 = zext i32 %289 to i64
  %291 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %288, i64 %290, i32 3
  %292 = load i32, i32* %291, align 4
  %293 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %288, i64 %290, i32 4
  %294 = load %struct.opj_tp_index*, %struct.opj_tp_index** %293, align 8
  %295 = zext i32 %292 to i64
  %296 = getelementptr inbounds %struct.opj_tp_index, %struct.opj_tp_index* %294, i64 %295, i32 1
  store i64 %286, i64* %296, align 8
  %297 = load i32, i32* %39, align 4
  %298 = zext i32 %297 to i64
  %299 = add i64 %285, %298
  %300 = load %struct.opj_tile_index*, %struct.opj_tile_index** %287, align 8
  %301 = load i32, i32* %41, align 8
  %302 = zext i32 %301 to i64
  %303 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %300, i64 %302, i32 4
  %304 = load %struct.opj_tp_index*, %struct.opj_tp_index** %303, align 8
  %305 = getelementptr inbounds %struct.opj_tp_index, %struct.opj_tp_index* %304, i64 %295, i32 2
  store i64 %299, i64* %305, align 8
  %306 = load i32, i32* %41, align 8
  %307 = load i32, i32* %39, align 4
  %308 = add i32 %307, 2
  %309 = call fastcc i32 @opj_j2k_add_tlmarker(i32 %306, %struct.opj_codestream_index* nonnull %282, i32 65427, i64 %286, i32 %308) #12
  %310 = icmp eq i32 %309, 0
  br i1 %310, label %311, label %313

311:                                              ; preds = %284
  %312 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.39, i64 0, i64 0)) #12
  br label %700

313:                                              ; preds = %284, %280
  %314 = icmp eq i32 %281, 0
  br i1 %314, label %315, label %323

315:                                              ; preds = %313
  %316 = load i8*, i8** %241, align 8
  %317 = load i32, i32* %242, align 4
  %318 = zext i32 %317 to i64
  %319 = getelementptr inbounds i8, i8* %316, i64 %318
  %320 = load i32, i32* %39, align 4
  %321 = zext i32 %320 to i64
  %322 = call i64 @opj_stream_read_data(%struct.opj_stream_private* %9, i8* %319, i64 %321, %struct.opj_event_mgr* %10) #12
  br label %323

323:                                              ; preds = %315, %313
  %324 = phi i64 [ %322, %315 ], [ 0, %313 ]
  %325 = load i32, i32* %39, align 4
  %326 = zext i32 %325 to i64
  %327 = icmp eq i64 %324, %326
  %328 = select i1 %327, i32 8, i32 64
  store i32 %328, i32* %28, align 8
  %329 = trunc i64 %324 to i32
  %330 = load i32, i32* %242, align 4
  %331 = add i32 %330, %329
  store i32 %331, i32* %242, align 4
  %332 = load i8, i8* %33, align 8
  %333 = and i8 %332, 9
  %334 = icmp eq i8 %333, 1
  br i1 %334, label %335, label %441

335:                                              ; preds = %323
  %336 = or i8 %332, 8
  store i8 %336, i8* %33, align 8
  %337 = load i32, i32* %41, align 8
  call void @llvm.lifetime.start.p0i8(i64 10, i8* nonnull %46) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %46, i8 -86, i64 10, i1 false) #12
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %50) #12
  store i32 -1431655766, i32* %13, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %51) #12
  store i32 -1431655766, i32* %14, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %52) #12
  store i32 -1431655766, i32* %15, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %53) #12
  store i32 -1431655766, i32* %16, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %54) #12
  store i32 -1431655766, i32* %17, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %55) #12
  store i32 -1431655766, i32* %18, align 4
  %338 = call i32 @opj_stream_has_seek(%struct.opj_stream_private* %9) #12
  %339 = icmp eq i32 %338, 0
  br i1 %339, label %402, label %340

340:                                              ; preds = %335
  %341 = call i64 @opj_stream_tell(%struct.opj_stream_private* %9) #12
  %342 = icmp eq i64 %341, -1
  br i1 %342, label %402, label %343

343:                                              ; preds = %340, %385
  %344 = call i64 @opj_stream_read_data(%struct.opj_stream_private* %9, i8* nonnull %46, i64 2, %struct.opj_event_mgr* %10) #12
  %345 = icmp eq i64 %344, 2
  br i1 %345, label %349, label %346

346:                                              ; preds = %343
  %347 = call i32 @opj_stream_seek(%struct.opj_stream_private* %9, i64 %341, %struct.opj_event_mgr* %10) #12
  %348 = icmp ne i32 %347, 0
  br label %402

349:                                              ; preds = %343
  call void @opj_read_bytes_LE(i8* nonnull %46, i32* nonnull %13, i32 2) #12
  %350 = load i32, i32* %13, align 4
  %351 = icmp eq i32 %350, 65424
  br i1 %351, label %355, label %352

352:                                              ; preds = %349
  %353 = call i32 @opj_stream_seek(%struct.opj_stream_private* %9, i64 %341, %struct.opj_event_mgr* %10) #12
  %354 = icmp ne i32 %353, 0
  br label %402

355:                                              ; preds = %349
  %356 = call i64 @opj_stream_read_data(%struct.opj_stream_private* %9, i8* nonnull %46, i64 2, %struct.opj_event_mgr* %10) #12
  %357 = icmp eq i64 %356, 2
  br i1 %357, label %360, label %358

358:                                              ; preds = %355
  %359 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.32, i64 0, i64 0)) #12
  br label %402

360:                                              ; preds = %355
  call void @opj_read_bytes_LE(i8* nonnull %46, i32* nonnull %14, i32 2) #12
  %361 = load i32, i32* %14, align 4
  %362 = icmp eq i32 %361, 10
  br i1 %362, label %365, label %363

363:                                              ; preds = %360
  %364 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.33, i64 0, i64 0)) #12
  br label %402

365:                                              ; preds = %360
  store i32 8, i32* %14, align 4
  %366 = call i64 @opj_stream_read_data(%struct.opj_stream_private* %9, i8* nonnull %46, i64 8, %struct.opj_event_mgr* %10) #12
  %367 = load i32, i32* %14, align 4
  %368 = zext i32 %367 to i64
  %369 = icmp eq i64 %366, %368
  br i1 %369, label %372, label %370

370:                                              ; preds = %365
  %371 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.32, i64 0, i64 0)) #12
  br label %402

372:                                              ; preds = %365
  %373 = icmp eq i32 %367, 8
  br i1 %373, label %376, label %374

374:                                              ; preds = %372
  %375 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.161, i64 0, i64 0)) #12
  br label %402

376:                                              ; preds = %372
  call void @opj_read_bytes_LE(i8* nonnull %46, i32* nonnull %15, i32 2) #12
  call void @opj_read_bytes_LE(i8* %47, i32* nonnull %16, i32 4) #12
  call void @opj_read_bytes_LE(i8* %48, i32* nonnull %17, i32 1) #12
  call void @opj_read_bytes_LE(i8* %49, i32* nonnull %18, i32 1) #12
  %377 = load i32, i32* %15, align 4
  %378 = icmp eq i32 %377, %337
  br i1 %378, label %395, label %379

379:                                              ; preds = %376
  %380 = load i32, i32* %16, align 4
  %381 = icmp ult i32 %380, 14
  br i1 %381, label %382, label %385

382:                                              ; preds = %379
  %383 = call i32 @opj_stream_seek(%struct.opj_stream_private* %9, i64 %341, %struct.opj_event_mgr* %10) #12
  %384 = icmp ne i32 %383, 0
  br label %402

385:                                              ; preds = %379
  %386 = add i32 %380, -12
  store i32 %386, i32* %16, align 4
  %387 = zext i32 %386 to i64
  %388 = call i64 @opj_stream_skip(%struct.opj_stream_private* %9, i64 %387, %struct.opj_event_mgr* %10) #12
  %389 = load i32, i32* %16, align 4
  %390 = zext i32 %389 to i64
  %391 = icmp eq i64 %388, %390
  br i1 %391, label %343, label %392

392:                                              ; preds = %385
  %393 = call i32 @opj_stream_seek(%struct.opj_stream_private* %9, i64 %341, %struct.opj_event_mgr* %10) #12
  %394 = icmp ne i32 %393, 0
  br label %402

395:                                              ; preds = %376
  %396 = load i32, i32* %17, align 4
  %397 = load i32, i32* %18, align 4
  %398 = icmp eq i32 %396, %397
  %399 = zext i1 %398 to i32
  %400 = call i32 @opj_stream_seek(%struct.opj_stream_private* %9, i64 %341, %struct.opj_event_mgr* %10) #12
  %401 = icmp ne i32 %400, 0
  br label %402

402:                                              ; preds = %335, %340, %346, %352, %358, %363, %370, %374, %382, %392, %395
  %403 = phi i32 [ 0, %335 ], [ 0, %340 ], [ %399, %395 ], [ 0, %382 ], [ 0, %392 ], [ 0, %374 ], [ 0, %370 ], [ 0, %363 ], [ 0, %358 ], [ 0, %352 ], [ 0, %346 ]
  %404 = phi i1 [ true, %335 ], [ true, %340 ], [ %401, %395 ], [ %384, %382 ], [ %394, %392 ], [ false, %374 ], [ false, %370 ], [ false, %363 ], [ false, %358 ], [ %354, %352 ], [ %348, %346 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %55) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %54) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %53) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %51) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %50) #12
  call void @llvm.lifetime.end.p0i8(i64 10, i8* nonnull %46) #12
  br i1 %404, label %407, label %405

405:                                              ; preds = %402
  %406 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.40, i64 0, i64 0)) #12
  br label %700

407:                                              ; preds = %402
  %408 = icmp eq i32 %403, 0
  br i1 %408, label %441, label %409

409:                                              ; preds = %407
  %410 = load i8, i8* %33, align 8
  %411 = and i8 %410, -18
  %412 = or i8 %411, 16
  store i8 %412, i8* %33, align 8
  switch i32 %27, label %413 [
    i32 0, label %437
    i32 1, label %428
  ]

413:                                              ; preds = %409, %704
  %414 = phi i64 [ %705, %704 ], [ 0, %409 ]
  %415 = phi i64 [ %706, %704 ], [ %59, %409 ]
  %416 = load %struct.opj_tcp*, %struct.opj_tcp** %44, align 8
  %417 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %416, i64 %414, i32 17
  %418 = load i32, i32* %417, align 4
  %419 = icmp eq i32 %418, 0
  br i1 %419, label %422, label %420

420:                                              ; preds = %413
  %421 = add i32 %418, 1
  store i32 %421, i32* %417, align 4
  br label %422

422:                                              ; preds = %413, %420
  %423 = or i64 %414, 1
  %424 = load %struct.opj_tcp*, %struct.opj_tcp** %44, align 8
  %425 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %424, i64 %423, i32 17
  %426 = load i32, i32* %425, align 4
  %427 = icmp eq i32 %426, 0
  br i1 %427, label %704, label %702

428:                                              ; preds = %704, %409
  %429 = phi i64 [ 0, %409 ], [ %705, %704 ]
  br i1 %60, label %437, label %430

430:                                              ; preds = %428
  %431 = load %struct.opj_tcp*, %struct.opj_tcp** %44, align 8
  %432 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %431, i64 %429, i32 17
  %433 = load i32, i32* %432, align 4
  %434 = icmp eq i32 %433, 0
  br i1 %434, label %437, label %435

435:                                              ; preds = %430
  %436 = add i32 %433, 1
  store i32 %436, i32* %432, align 4
  br label %437

437:                                              ; preds = %428, %430, %435, %409
  %438 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 2, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.41, i64 0, i64 0)) #12
  br label %441

439:                                              ; preds = %218
  %440 = and i8 %219, -6
  store i8 %440, i8* %33, align 8
  store i32 8, i32* %28, align 8
  br label %441

441:                                              ; preds = %407, %437, %323, %439
  %442 = load i8, i8* %33, align 8
  %443 = and i8 %442, 1
  %444 = icmp eq i8 %443, 0
  br i1 %444, label %447, label %445

445:                                              ; preds = %441
  %446 = load i32, i32* %19, align 4
  br label %487

447:                                              ; preds = %441
  %448 = load i8*, i8** %38, align 8
  %449 = call i64 @opj_stream_read_data(%struct.opj_stream_private* %9, i8* %448, i64 2, %struct.opj_event_mgr* %10) #12
  %450 = icmp eq i64 %449, 2
  br i1 %450, label %477, label %451

451:                                              ; preds = %447
  %452 = load i32, i32* %41, align 8
  %453 = add i32 %452, 1
  %454 = icmp eq i32 %453, %27
  %455 = icmp ne i32 %27, 0
  %456 = and i1 %454, %455
  br i1 %456, label %457, label %475

457:                                              ; preds = %451
  %458 = load %struct.opj_tcp*, %struct.opj_tcp** %44, align 8
  %459 = zext i32 %27 to i64
  br label %460

460:                                              ; preds = %469, %457
  %461 = phi i64 [ 0, %457 ], [ %470, %469 ]
  %462 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %458, i64 %461, i32 16
  %463 = load i32, i32* %462, align 8
  %464 = icmp eq i32 %463, 0
  br i1 %464, label %465, label %469

465:                                              ; preds = %460
  %466 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %458, i64 %461, i32 17
  %467 = load i32, i32* %466, align 4
  %468 = icmp eq i32 %467, 0
  br i1 %468, label %472, label %469

469:                                              ; preds = %460, %465
  %470 = add nuw nsw i64 %461, 1
  %471 = icmp eq i64 %470, %459
  br i1 %471, label %475, label %460

472:                                              ; preds = %465
  %473 = trunc i64 %461 to i32
  %474 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 4, i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.42, i64 0, i64 0), i32 %473) #12
  store i32 %473, i32* %41, align 8
  store i32 65497, i32* %19, align 4
  store i32 256, i32* %28, align 8
  br label %495

475:                                              ; preds = %469, %451
  %476 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.32, i64 0, i64 0)) #12
  br label %700

477:                                              ; preds = %447
  %478 = load i8*, i8** %38, align 8
  call void @opj_read_bytes_LE(i8* %478, i32* nonnull %19, i32 2) #12
  %479 = load i8, i8* %33, align 8
  %480 = and i8 %479, 1
  %481 = icmp eq i8 %480, 0
  %482 = load i32, i32* %19, align 4
  %483 = icmp ne i32 %482, 65497
  %484 = and i1 %481, %483
  br i1 %484, label %61, label %487

485:                                              ; preds = %215
  %486 = load i32, i32* %19, align 4
  br label %487

487:                                              ; preds = %477, %445, %485
  %488 = phi i32 [ %486, %485 ], [ %446, %445 ], [ %482, %477 ]
  %489 = icmp eq i32 %488, 65497
  br i1 %489, label %490, label %495

490:                                              ; preds = %487
  %491 = load i32, i32* %28, align 8
  %492 = icmp eq i32 %491, 256
  br i1 %492, label %495, label %493

493:                                              ; preds = %490
  %494 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  store i32 0, i32* %494, align 8
  store i32 256, i32* %28, align 8
  br label %495

495:                                              ; preds = %30, %32, %472, %490, %493, %487
  %496 = phi i8* [ %33, %472 ], [ %33, %490 ], [ %33, %493 ], [ %33, %487 ], [ %33, %32 ], [ %31, %30 ]
  %497 = load i8, i8* %496, align 8
  %498 = and i8 %497, 1
  %499 = icmp eq i8 %498, 0
  %500 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %501 = load %struct.opj_tcp*, %struct.opj_tcp** %500, align 8
  %502 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %503 = load i32, i32* %502, align 8
  br i1 %499, label %504, label %523

504:                                              ; preds = %495
  %505 = icmp ult i32 %503, %27
  br i1 %505, label %506, label %519

506:                                              ; preds = %504
  %507 = zext i32 %503 to i64
  %508 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %501, i64 %507
  br label %509

509:                                              ; preds = %515, %506
  %510 = phi i32 [ %516, %515 ], [ %503, %506 ]
  %511 = phi %struct.opj_tcp* [ %517, %515 ], [ %508, %506 ]
  %512 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %511, i64 0, i32 18
  %513 = load i8*, i8** %512, align 8
  %514 = icmp eq i8* %513, null
  br i1 %514, label %515, label %519

515:                                              ; preds = %509
  %516 = add i32 %510, 1
  store i32 %516, i32* %502, align 8
  %517 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %511, i64 1
  %518 = icmp eq i32 %516, %27
  br i1 %518, label %522, label %509

519:                                              ; preds = %509, %504
  %520 = phi i32 [ %503, %504 ], [ %510, %509 ]
  %521 = icmp eq i32 %520, %27
  br i1 %521, label %522, label %523

522:                                              ; preds = %515, %519
  store i32 0, i32* %8, align 4
  br label %700

523:                                              ; preds = %495, %519
  %524 = phi i32 [ %520, %519 ], [ %503, %495 ]
  %525 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %526 = zext i32 %524 to i64
  %527 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %501, i64 %526, i32 11
  %528 = load i8*, i8** %527, align 8
  %529 = icmp eq i8* %528, null
  br i1 %529, label %530, label %637

530:                                              ; preds = %523
  %531 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %501, i64 %526, i32 29
  %532 = load i8, i8* %531, align 8
  %533 = and i8 %532, 2
  %534 = icmp eq i8 %533, 0
  br i1 %534, label %641, label %535

535:                                              ; preds = %530
  %536 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %501, i64 %526, i32 8
  %537 = load i32, i32* %536, align 8
  %538 = icmp eq i32 %537, 0
  br i1 %538, label %584, label %539

539:                                              ; preds = %535
  %540 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %501, i64 %526, i32 9
  %541 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %540, align 8
  %542 = zext i32 %537 to i64
  %543 = icmp ult i32 %537, 9
  br i1 %543, label %573, label %544

544:                                              ; preds = %539
  %545 = and i64 %542, 7
  %546 = icmp eq i64 %545, 0
  %547 = select i1 %546, i64 8, i64 %545
  %548 = sub nsw i64 %542, %547
  br label %549

549:                                              ; preds = %549, %544
  %550 = phi i64 [ 0, %544 ], [ %564, %549 ]
  %551 = phi <4 x i32> [ zeroinitializer, %544 ], [ %562, %549 ]
  %552 = phi <4 x i32> [ zeroinitializer, %544 ], [ %563, %549 ]
  %553 = or i64 %550, 4
  %554 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %541, i64 %550, i32 1
  %555 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %541, i64 %553, i32 1
  %556 = bitcast i32* %554 to <16 x i32>*
  %557 = bitcast i32* %555 to <16 x i32>*
  %558 = load <16 x i32>, <16 x i32>* %556, align 8
  %559 = load <16 x i32>, <16 x i32>* %557, align 8
  %560 = shufflevector <16 x i32> %558, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %561 = shufflevector <16 x i32> %559, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %562 = add <4 x i32> %560, %551
  %563 = add <4 x i32> %561, %552
  %564 = add i64 %550, 8
  %565 = icmp eq i64 %564, %548
  br i1 %565, label %566, label %549, !llvm.loop !18

566:                                              ; preds = %549
  %567 = add <4 x i32> %563, %562
  %568 = shufflevector <4 x i32> %567, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %569 = add <4 x i32> %567, %568
  %570 = shufflevector <4 x i32> %569, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %571 = add <4 x i32> %569, %570
  %572 = extractelement <4 x i32> %571, i32 0
  br label %573

573:                                              ; preds = %566, %539
  %574 = phi i64 [ 0, %539 ], [ %548, %566 ]
  %575 = phi i32 [ 0, %539 ], [ %572, %566 ]
  br label %576

576:                                              ; preds = %573, %576
  %577 = phi i64 [ %582, %576 ], [ %574, %573 ]
  %578 = phi i32 [ %581, %576 ], [ %575, %573 ]
  %579 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %541, i64 %577, i32 1
  %580 = load i32, i32* %579, align 8
  %581 = add i32 %580, %578
  %582 = add nuw nsw i64 %577, 1
  %583 = icmp eq i64 %582, %542
  br i1 %583, label %584, label %576, !llvm.loop !19

584:                                              ; preds = %576, %535
  %585 = phi i32 [ 0, %535 ], [ %581, %576 ]
  %586 = zext i32 %585 to i64
  %587 = call i8* @opj_malloc(i64 %586) #12
  store i8* %587, i8** %527, align 8
  %588 = icmp eq i8* %587, null
  br i1 %588, label %637, label %589

589:                                              ; preds = %584
  %590 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %501, i64 %526, i32 13
  store i32 %585, i32* %590, align 4
  %591 = load i32, i32* %536, align 8
  %592 = icmp eq i32 %591, 0
  br i1 %592, label %627, label %593

593:                                              ; preds = %589
  %594 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %501, i64 %526, i32 9
  br label %595

595:                                              ; preds = %621, %593
  %596 = phi i32 [ %591, %593 ], [ %622, %621 ]
  %597 = phi i64 [ 0, %593 ], [ %624, %621 ]
  %598 = phi i32 [ 0, %593 ], [ %623, %621 ]
  %599 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %594, align 8
  %600 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %599, i64 %597, i32 0
  %601 = load i8*, i8** %600, align 8
  %602 = icmp eq i8* %601, null
  br i1 %602, label %621, label %603

603:                                              ; preds = %595
  %604 = load i8*, i8** %527, align 8
  %605 = zext i32 %598 to i64
  %606 = getelementptr inbounds i8, i8* %604, i64 %605
  %607 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %599, i64 %597, i32 1
  %608 = load i32, i32* %607, align 8
  %609 = zext i32 %608 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %606, i8* nonnull align 1 %601, i64 %609, i1 false) #12
  %610 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %594, align 8
  %611 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %610, i64 %597, i32 1
  %612 = load i32, i32* %611, align 8
  %613 = add i32 %612, %598
  %614 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %610, i64 %597, i32 0
  %615 = load i8*, i8** %614, align 8
  call void @opj_free(i8* %615) #12
  %616 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %594, align 8
  %617 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %616, i64 %597, i32 0
  store i8* null, i8** %617, align 8
  %618 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %594, align 8
  %619 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %618, i64 %597, i32 1
  store i32 0, i32* %619, align 8
  %620 = load i32, i32* %536, align 8
  br label %621

621:                                              ; preds = %603, %595
  %622 = phi i32 [ %620, %603 ], [ %596, %595 ]
  %623 = phi i32 [ %613, %603 ], [ %598, %595 ]
  %624 = add nuw nsw i64 %597, 1
  %625 = zext i32 %622 to i64
  %626 = icmp ult i64 %624, %625
  br i1 %626, label %595, label %627

627:                                              ; preds = %621, %589
  store i32 0, i32* %536, align 8
  %628 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %501, i64 %526, i32 9
  %629 = bitcast %struct.opj_ppx_struct** %628 to i8**
  %630 = load i8*, i8** %629, align 8
  call void @opj_free(i8* %630) #12
  store %struct.opj_ppx_struct* null, %struct.opj_ppx_struct** %628, align 8
  %631 = bitcast i8** %527 to i64*
  %632 = load i64, i64* %631, align 8
  %633 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %501, i64 %526, i32 10
  %634 = bitcast i8** %633 to i64*
  store i64 %632, i64* %634, align 8
  %635 = load i32, i32* %590, align 4
  %636 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %501, i64 %526, i32 12
  store i32 %635, i32* %636, align 8
  br label %641

637:                                              ; preds = %584, %523
  %638 = phi i8* [ getelementptr inbounds ([45 x i8], [45 x i8]* @.str.234, i64 0, i64 0), %523 ], [ getelementptr inbounds ([38 x i8], [38 x i8]* @.str.213, i64 0, i64 0), %584 ]
  %639 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* %638) #12
  %640 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.43, i64 0, i64 0)) #12
  br label %700

641:                                              ; preds = %627, %530
  %642 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 9
  %643 = load %struct.opj_tcd*, %struct.opj_tcd** %642, align 8
  %644 = load i32, i32* %525, align 8
  %645 = call i32 @opj_tcd_init_decode_tile(%struct.opj_tcd* %643, i32 %644, %struct.opj_event_mgr* %10) #12
  %646 = icmp eq i32 %645, 0
  br i1 %646, label %647, label %649

647:                                              ; preds = %641
  %648 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 1, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.44, i64 0, i64 0)) #12
  br label %700

649:                                              ; preds = %641
  %650 = load i32, i32* %525, align 8
  %651 = add i32 %650, 1
  %652 = load i32, i32* %25, align 4
  %653 = load i32, i32* %23, align 8
  %654 = mul i32 %653, %652
  %655 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %10, i32 4, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.45, i64 0, i64 0), i32 %651, i32 %654) #12
  %656 = load i32, i32* %525, align 8
  store i32 %656, i32* %1, align 4
  store i32 1, i32* %8, align 4
  %657 = icmp eq i32* %2, null
  br i1 %657, label %662, label %658

658:                                              ; preds = %649
  %659 = load %struct.opj_tcd*, %struct.opj_tcd** %642, align 8
  %660 = call i32 @opj_tcd_get_decoded_tile_size(%struct.opj_tcd* %659, i32 0) #12
  store i32 %660, i32* %2, align 4
  %661 = icmp eq i32 %660, -1
  br i1 %661, label %700, label %662

662:                                              ; preds = %649, %658
  %663 = load %struct.opj_tcd*, %struct.opj_tcd** %642, align 8
  %664 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %663, i64 0, i32 5
  %665 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %664, align 8
  %666 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %665, i64 0, i32 0
  %667 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %666, align 8
  %668 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %667, i64 0, i32 0
  %669 = load i32, i32* %668, align 8
  store i32 %669, i32* %3, align 4
  %670 = load %struct.opj_tcd*, %struct.opj_tcd** %642, align 8
  %671 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %670, i64 0, i32 5
  %672 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %671, align 8
  %673 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %672, i64 0, i32 0
  %674 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %673, align 8
  %675 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %674, i64 0, i32 1
  %676 = load i32, i32* %675, align 4
  store i32 %676, i32* %4, align 4
  %677 = load %struct.opj_tcd*, %struct.opj_tcd** %642, align 8
  %678 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %677, i64 0, i32 5
  %679 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %678, align 8
  %680 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %679, i64 0, i32 0
  %681 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %680, align 8
  %682 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %681, i64 0, i32 2
  %683 = load i32, i32* %682, align 8
  store i32 %683, i32* %5, align 4
  %684 = load %struct.opj_tcd*, %struct.opj_tcd** %642, align 8
  %685 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %684, i64 0, i32 5
  %686 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %685, align 8
  %687 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %686, i64 0, i32 0
  %688 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %687, align 8
  %689 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %688, i64 0, i32 3
  %690 = load i32, i32* %689, align 4
  store i32 %690, i32* %6, align 4
  %691 = load %struct.opj_tcd*, %struct.opj_tcd** %642, align 8
  %692 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %691, i64 0, i32 5
  %693 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %692, align 8
  %694 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %693, i64 0, i32 0
  %695 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %694, align 8
  %696 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %695, i64 0, i32 4
  %697 = load i32, i32* %696, align 8
  store i32 %697, i32* %7, align 4
  %698 = load i32, i32* %28, align 8
  %699 = or i32 %698, 128
  store i32 %699, i32* %28, align 8
  br label %700

700:                                              ; preds = %311, %262, %278, %253, %248, %658, %405, %132, %124, %11, %662, %647, %637, %522, %475, %206, %199, %173, %157, %151, %145, %113, %78, %72
  %701 = phi i32 [ 1, %662 ], [ 0, %647 ], [ 0, %637 ], [ 1, %522 ], [ 0, %475 ], [ 0, %72 ], [ 0, %78 ], [ 0, %145 ], [ 0, %173 ], [ 0, %199 ], [ 0, %206 ], [ 0, %157 ], [ 0, %151 ], [ 0, %132 ], [ 0, %113 ], [ 0, %11 ], [ 0, %124 ], [ 0, %405 ], [ 0, %658 ], [ 0, %248 ], [ 0, %253 ], [ 0, %278 ], [ 0, %262 ], [ 0, %311 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #12
  ret i32 %701

702:                                              ; preds = %422
  %703 = add i32 %426, 1
  store i32 %703, i32* %425, align 4
  br label %704

704:                                              ; preds = %702, %422
  %705 = add nuw nsw i64 %414, 2
  %706 = add i64 %415, -2
  %707 = icmp eq i64 %706, 0
  br i1 %707, label %428, label %413
}

declare i64 @opj_stream_get_number_byte_left(%struct.opj_stream_private*) local_unnamed_addr #4

declare i64 @opj_stream_read_data(%struct.opj_stream_private*, i8*, i64, %struct.opj_event_mgr*) local_unnamed_addr #4

declare void @opj_read_bytes_LE(i8*, i32*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @opj_j2k_add_tlmarker(i32, %struct.opj_codestream_index* nocapture readonly, i32, i64, i32) unnamed_addr #3 {
  %6 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %1, i64 0, i32 7
  %7 = load %struct.opj_tile_index*, %struct.opj_tile_index** %6, align 8
  %8 = zext i32 %0 to i64
  %9 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %7, i64 %8, i32 5
  %10 = load i32, i32* %9, align 8
  %11 = add i32 %10, 1
  %12 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %7, i64 %8, i32 7
  %13 = load i32, i32* %12, align 8
  %14 = icmp ugt i32 %11, %13
  br i1 %14, label %15, label %44

15:                                               ; preds = %5
  %16 = uitofp i32 %13 to float
  %17 = fadd float %16, 1.000000e+02
  %18 = fptoui float %17 to i32
  store i32 %18, i32* %12, align 8
  %19 = load %struct.opj_tile_index*, %struct.opj_tile_index** %6, align 8
  %20 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %19, i64 %8, i32 6
  %21 = bitcast %struct.opj_marker_info** %20 to i8**
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %19, i64 %8, i32 7
  %24 = load i32, i32* %23, align 8
  %25 = zext i32 %24 to i64
  %26 = mul nuw nsw i64 %25, 24
  %27 = tail call i8* @opj_realloc(i8* %22, i64 %26) #12
  %28 = icmp eq i8* %27, null
  %29 = load %struct.opj_tile_index*, %struct.opj_tile_index** %6, align 8
  %30 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %29, i64 %8, i32 6
  %31 = bitcast %struct.opj_marker_info** %30 to i8**
  br i1 %28, label %32, label %40

32:                                               ; preds = %15
  %33 = load i8*, i8** %31, align 8
  tail call void @opj_free(i8* %33) #12
  %34 = load %struct.opj_tile_index*, %struct.opj_tile_index** %6, align 8
  %35 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %34, i64 %8, i32 6
  store %struct.opj_marker_info* null, %struct.opj_marker_info** %35, align 8
  %36 = load %struct.opj_tile_index*, %struct.opj_tile_index** %6, align 8
  %37 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %36, i64 %8, i32 7
  store i32 0, i32* %37, align 8
  %38 = load %struct.opj_tile_index*, %struct.opj_tile_index** %6, align 8
  %39 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %38, i64 %8, i32 5
  store i32 0, i32* %39, align 8
  br label %83

40:                                               ; preds = %15
  store i8* %27, i8** %31, align 8
  %41 = load %struct.opj_tile_index*, %struct.opj_tile_index** %6, align 8
  %42 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %41, i64 %8, i32 5
  %43 = load i32, i32* %42, align 8
  br label %44

44:                                               ; preds = %40, %5
  %45 = phi i32 [ %43, %40 ], [ %10, %5 ]
  %46 = phi %struct.opj_tile_index* [ %41, %40 ], [ %7, %5 ]
  %47 = trunc i32 %2 to i16
  %48 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %46, i64 %8, i32 6
  %49 = load %struct.opj_marker_info*, %struct.opj_marker_info** %48, align 8
  %50 = zext i32 %45 to i64
  %51 = getelementptr inbounds %struct.opj_marker_info, %struct.opj_marker_info* %49, i64 %50, i32 0
  store i16 %47, i16* %51, align 8
  %52 = shl i64 %3, 32
  %53 = ashr exact i64 %52, 32
  %54 = load %struct.opj_tile_index*, %struct.opj_tile_index** %6, align 8
  %55 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %54, i64 %8, i32 6
  %56 = load %struct.opj_marker_info*, %struct.opj_marker_info** %55, align 8
  %57 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %54, i64 %8, i32 5
  %58 = load i32, i32* %57, align 8
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds %struct.opj_marker_info, %struct.opj_marker_info* %56, i64 %59, i32 1
  store i64 %53, i64* %60, align 8
  %61 = load %struct.opj_tile_index*, %struct.opj_tile_index** %6, align 8
  %62 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %61, i64 %8, i32 6
  %63 = load %struct.opj_marker_info*, %struct.opj_marker_info** %62, align 8
  %64 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %61, i64 %8, i32 5
  %65 = load i32, i32* %64, align 8
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds %struct.opj_marker_info, %struct.opj_marker_info* %63, i64 %66, i32 2
  store i32 %4, i32* %67, align 8
  %68 = load %struct.opj_tile_index*, %struct.opj_tile_index** %6, align 8
  %69 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %68, i64 %8, i32 5
  %70 = load i32, i32* %69, align 8
  %71 = add i32 %70, 1
  store i32 %71, i32* %69, align 8
  %72 = icmp eq i32 %2, 65424
  br i1 %72, label %73, label %83

73:                                               ; preds = %44
  %74 = load %struct.opj_tile_index*, %struct.opj_tile_index** %6, align 8
  %75 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %74, i64 %8, i32 4
  %76 = load %struct.opj_tp_index*, %struct.opj_tp_index** %75, align 8
  %77 = icmp eq %struct.opj_tp_index* %76, null
  br i1 %77, label %83, label %78

78:                                               ; preds = %73
  %79 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %74, i64 %8, i32 3
  %80 = load i32, i32* %79, align 4
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds %struct.opj_tp_index, %struct.opj_tp_index* %76, i64 %81, i32 0
  store i64 %3, i64* %82, align 8
  br label %83

83:                                               ; preds = %44, %73, %78, %32
  %84 = phi i32 [ 0, %32 ], [ 1, %78 ], [ 1, %73 ], [ 1, %44 ]
  ret i32 %84
}

declare i64 @opj_stream_tell(%struct.opj_stream_private*) local_unnamed_addr #4

declare i64 @opj_stream_skip(%struct.opj_stream_private*, i64, %struct.opj_event_mgr*) local_unnamed_addr #4

declare i32 @opj_tcd_init_decode_tile(%struct.opj_tcd*, i32, %struct.opj_event_mgr*) local_unnamed_addr #4

declare i32 @opj_tcd_get_decoded_tile_size(%struct.opj_tcd*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_j2k_decode_tile(%struct.opj_j2k* nocapture, i32, i8*, i32, %struct.opj_stream_private*, %struct.opj_event_mgr*) local_unnamed_addr #3 {
  %7 = alloca i32, align 4
  %8 = alloca [2 x i8], align 1
  %9 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #12
  store i32 -1431655766, i32* %7, align 4
  %10 = getelementptr inbounds [2 x i8], [2 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %10) #12
  store i8 -86, i8* %10, align 1
  %11 = getelementptr inbounds [2 x i8], [2 x i8]* %8, i64 0, i64 1
  store i8 -86, i8* %11, align 1
  %12 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = trunc i32 %13 to i8
  %15 = icmp slt i8 %14, 0
  br i1 %15, label %16, label %100

16:                                               ; preds = %6
  %17 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, %1
  br i1 %19, label %20, label %100

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %22 = load %struct.opj_tcp*, %struct.opj_tcp** %21, align 8
  %23 = zext i32 %1 to i64
  %24 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %22, i64 %23
  %25 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %22, i64 %23, i32 18
  %26 = load i8*, i8** %25, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %28, label %29

28:                                               ; preds = %20
  tail call fastcc void @opj_j2k_tcp_destroy(%struct.opj_tcp* %24)
  br label %100

29:                                               ; preds = %20
  %30 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 3
  %31 = load %struct.opj_image*, %struct.opj_image** %30, align 8
  %32 = icmp eq %struct.opj_image* %31, null
  br i1 %32, label %33, label %36

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %35 = load %struct.opj_image*, %struct.opj_image** %34, align 8
  br label %36

36:                                               ; preds = %29, %33
  %37 = phi %struct.opj_image* [ %35, %33 ], [ %31, %29 ]
  %38 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 9
  %39 = load %struct.opj_tcd*, %struct.opj_tcd** %38, align 8
  %40 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %37, i64 0, i32 0
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %37, i64 0, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %37, i64 0, i32 2
  %45 = load i32, i32* %44, align 8
  %46 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %37, i64 0, i32 3
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 12
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 13
  %51 = load i32*, i32** %50, align 8
  %52 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %22, i64 %23, i32 19
  %53 = load i32, i32* %52, align 8
  %54 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 7
  %55 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %54, align 8
  %56 = tail call i32 @opj_tcd_decode_tile(%struct.opj_tcd* %39, i32 %41, i32 %43, i32 %45, i32 %47, i32 %49, i32* %51, i8* nonnull %26, i32 %53, i32 %1, %struct.opj_codestream_index* %55, %struct.opj_event_mgr* %5) #12
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %62

58:                                               ; preds = %36
  tail call fastcc void @opj_j2k_tcp_destroy(%struct.opj_tcp* %24)
  %59 = load i32, i32* %12, align 8
  %60 = or i32 %59, 32768
  store i32 %60, i32* %12, align 8
  %61 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %5, i32 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.46, i64 0, i64 0)) #12
  br label %100

62:                                               ; preds = %36
  %63 = icmp eq i8* %2, null
  br i1 %63, label %72, label %64

64:                                               ; preds = %62
  %65 = load %struct.opj_tcd*, %struct.opj_tcd** %38, align 8
  %66 = tail call i32 @opj_tcd_update_tile_data(%struct.opj_tcd* %65, i8* nonnull %2, i32 %3) #12
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %100, label %68

68:                                               ; preds = %64
  %69 = load i8*, i8** %25, align 8
  %70 = icmp eq i8* %69, null
  br i1 %70, label %72, label %71

71:                                               ; preds = %68
  tail call void @opj_free(i8* nonnull %69) #12
  store i8* null, i8** %25, align 8
  store i32 0, i32* %52, align 8
  br label %72

72:                                               ; preds = %71, %68, %62
  %73 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 14
  %74 = load i8, i8* %73, align 8
  %75 = and i8 %74, -2
  store i8 %75, i8* %73, align 8
  %76 = load i32, i32* %12, align 8
  %77 = and i32 %76, -129
  store i32 %77, i32* %12, align 8
  %78 = tail call i64 @opj_stream_get_number_byte_left(%struct.opj_stream_private* %4) #12
  %79 = icmp eq i64 %78, 0
  %80 = load i32, i32* %12, align 8
  %81 = icmp eq i32 %80, 64
  %82 = and i1 %79, %81
  %83 = icmp eq i32 %80, 256
  %84 = or i1 %83, %82
  br i1 %84, label %100, label %85

85:                                               ; preds = %72
  %86 = call i64 @opj_stream_read_data(%struct.opj_stream_private* %4, i8* nonnull %10, i64 2, %struct.opj_event_mgr* %5) #12
  %87 = icmp eq i64 %86, 2
  br i1 %87, label %90, label %88

88:                                               ; preds = %85
  %89 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %5, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.32, i64 0, i64 0)) #12
  br label %100

90:                                               ; preds = %85
  call void @opj_read_bytes_LE(i8* nonnull %10, i32* nonnull %7, i32 2) #12
  %91 = load i32, i32* %7, align 4
  switch i32 %91, label %93 [
    i32 65497, label %92
    i32 65424, label %100
  ]

92:                                               ; preds = %90
  store i32 0, i32* %17, align 8
  store i32 256, i32* %12, align 8
  br label %100

93:                                               ; preds = %90
  %94 = call i64 @opj_stream_get_number_byte_left(%struct.opj_stream_private* %4) #12
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %98

96:                                               ; preds = %93
  store i32 64, i32* %12, align 8
  %97 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %5, i32 2, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.47, i64 0, i64 0)) #12
  br label %100

98:                                               ; preds = %93
  %99 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %5, i32 1, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.48, i64 0, i64 0)) #12
  br label %100

100:                                              ; preds = %72, %92, %90, %64, %6, %16, %98, %96, %88, %58, %28
  %101 = phi i32 [ 0, %88 ], [ 1, %96 ], [ 0, %98 ], [ 0, %58 ], [ 0, %28 ], [ 0, %16 ], [ 0, %6 ], [ 0, %64 ], [ 1, %90 ], [ 1, %92 ], [ 1, %72 ]
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %10) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #12
  ret i32 %101
}

declare i32 @opj_tcd_decode_tile(%struct.opj_tcd*, i32, i32, i32, i32, i32, i32*, i8*, i32, i32, %struct.opj_codestream_index*, %struct.opj_event_mgr*) local_unnamed_addr #4

declare i32 @opj_tcd_update_tile_data(%struct.opj_tcd*, i8*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_j2k_set_decoded_components(%struct.opj_j2k* nocapture, i32, i32* nocapture readonly, %struct.opj_event_mgr*) local_unnamed_addr #3 {
  %5 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %6 = load %struct.opj_image*, %struct.opj_image** %5, align 8
  %7 = icmp eq %struct.opj_image* %6, null
  br i1 %7, label %8, label %10

8:                                                ; preds = %4
  %9 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.49, i64 0, i64 0)) #12
  br label %57

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %6, i64 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = zext i32 %12 to i64
  %14 = tail call i8* @opj_calloc(i64 4, i64 %13) #12
  %15 = bitcast i8* %14 to i32*
  %16 = icmp eq i8* %14, null
  br i1 %16, label %57, label %17

17:                                               ; preds = %10
  %18 = icmp eq i32 %1, 0
  br i1 %18, label %41, label %19

19:                                               ; preds = %17
  %20 = zext i32 %1 to i64
  br label %21

21:                                               ; preds = %38, %19
  %22 = phi i64 [ 0, %19 ], [ %39, %38 ]
  %23 = getelementptr inbounds i32, i32* %2, i64 %22
  %24 = load i32, i32* %23, align 4
  %25 = load %struct.opj_image*, %struct.opj_image** %5, align 8
  %26 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %25, i64 0, i32 4
  %27 = load i32, i32* %26, align 8
  %28 = icmp ult i32 %24, %27
  br i1 %28, label %31, label %29

29:                                               ; preds = %21
  %30 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.50, i64 0, i64 0), i32 %24) #12
  tail call void @opj_free(i8* nonnull %14) #12
  br label %57

31:                                               ; preds = %21
  %32 = zext i32 %24 to i64
  %33 = getelementptr inbounds i32, i32* %15, i64 %32
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %31
  %37 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.51, i64 0, i64 0), i32 %24) #12
  tail call void @opj_free(i8* nonnull %14) #12
  br label %57

38:                                               ; preds = %31
  store i32 1, i32* %33, align 4
  %39 = add nuw nsw i64 %22, 1
  %40 = icmp eq i64 %39, %20
  br i1 %40, label %41, label %21

41:                                               ; preds = %38, %17
  tail call void @opj_free(i8* nonnull %14) #12
  %42 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 13
  %43 = bitcast i32** %42 to i8**
  %44 = load i8*, i8** %43, align 8
  tail call void @opj_free(i8* %44) #12
  br i1 %18, label %54, label %45

45:                                               ; preds = %41
  %46 = zext i32 %1 to i64
  %47 = shl nuw nsw i64 %46, 2
  %48 = tail call i8* @opj_malloc(i64 %47) #12
  store i8* %48, i8** %43, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %50, label %52

50:                                               ; preds = %45
  %51 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 12
  store i32 0, i32* %51, align 4
  br label %57

52:                                               ; preds = %45
  %53 = bitcast i32* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %48, i8* align 4 %53, i64 %47, i1 false)
  br label %55

54:                                               ; preds = %41
  store i32* null, i32** %42, align 8
  br label %55

55:                                               ; preds = %54, %52
  %56 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 12
  store i32 %1, i32* %56, align 4
  br label %57

57:                                               ; preds = %10, %55, %50, %36, %29, %8
  %58 = phi i32 [ 0, %8 ], [ 0, %29 ], [ 0, %36 ], [ 0, %50 ], [ 1, %55 ], [ 0, %10 ]
  ret i32 %58
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_j2k_set_decode_area(%struct.opj_j2k*, %struct.opj_image* nocapture, i32, i32, i32, i32, %struct.opj_event_mgr*) local_unnamed_addr #3 {
  %8 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %9 = load %struct.opj_image*, %struct.opj_image** %8, align 8
  %10 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 6
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %13, label %23

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 7
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %17, label %23

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %19 = load %struct.opj_tcp*, %struct.opj_tcp** %18, align 8
  %20 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %19, i64 0, i32 18
  %21 = load i8*, i8** %20, align 8
  %22 = icmp eq i8* %21, null
  br i1 %22, label %23, label %29

23:                                               ; preds = %17, %13, %7
  %24 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = icmp eq i32 %25, 8
  br i1 %26, label %29, label %27

27:                                               ; preds = %23
  %28 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %6, i32 1, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.52, i64 0, i64 0)) #12
  br label %205

29:                                               ; preds = %17, %23
  %30 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 4
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %45, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 20, i32 0, i32 0
  %35 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 6
  br label %36

36:                                               ; preds = %33, %36
  %37 = phi i64 [ 0, %33 ], [ %41, %36 ]
  %38 = load i32, i32* %34, align 8
  %39 = load %struct.opj_image_comp*, %struct.opj_image_comp** %35, align 8
  %40 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %39, i64 %37, i32 10
  store i32 %38, i32* %40, align 8
  %41 = add nuw nsw i64 %37, 1
  %42 = load i32, i32* %30, align 8
  %43 = zext i32 %42 to i64
  %44 = icmp ult i64 %41, %43
  br i1 %44, label %36, label %45

45:                                               ; preds = %36, %29
  %46 = or i32 %3, %2
  %47 = or i32 %46, %4
  %48 = or i32 %47, %5
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %72

50:                                               ; preds = %45
  %51 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %6, i32 4, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.53, i64 0, i64 0)) #12
  %52 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 5
  store i32 0, i32* %52, align 8
  %53 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 6
  store i32 0, i32* %53, align 4
  %54 = load i32, i32* %10, align 8
  %55 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 7
  store i32 %54, i32* %55, align 8
  %56 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 7
  %57 = load i32, i32* %56, align 4
  %58 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 8
  store i32 %57, i32* %58, align 4
  %59 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %9, i64 0, i32 0
  %60 = load i32, i32* %59, align 8
  %61 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 0
  store i32 %60, i32* %61, align 8
  %62 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %9, i64 0, i32 1
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 1
  store i32 %63, i32* %64, align 4
  %65 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %9, i64 0, i32 2
  %66 = load i32, i32* %65, align 8
  %67 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 2
  store i32 %66, i32* %67, align 8
  %68 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %9, i64 0, i32 3
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 3
  store i32 %69, i32* %70, align 4
  %71 = tail call fastcc i32 @opj_j2k_update_image_dimensions(%struct.opj_image* %1, %struct.opj_event_mgr* %6)
  br label %205

72:                                               ; preds = %45
  %73 = icmp slt i32 %2, 0
  br i1 %73, label %74, label %76

74:                                               ; preds = %72
  %75 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %6, i32 1, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.54, i64 0, i64 0), i32 %2) #12
  br label %205

76:                                               ; preds = %72
  %77 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %9, i64 0, i32 2
  %78 = load i32, i32* %77, align 8
  %79 = icmp ult i32 %78, %2
  br i1 %79, label %80, label %82

80:                                               ; preds = %76
  %81 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %6, i32 1, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.55, i64 0, i64 0), i32 %2, i32 %78) #12
  br label %205

82:                                               ; preds = %76
  %83 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %9, i64 0, i32 0
  %84 = load i32, i32* %83, align 8
  %85 = icmp ugt i32 %84, %2
  br i1 %85, label %86, label %90

86:                                               ; preds = %82
  %87 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %6, i32 2, i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.56, i64 0, i64 0), i32 %2, i32 %84) #12
  %88 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 5
  store i32 0, i32* %88, align 8
  %89 = load i32, i32* %83, align 8
  br label %98

90:                                               ; preds = %82
  %91 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 1
  %92 = load i32, i32* %91, align 4
  %93 = sub i32 %2, %92
  %94 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 3
  %95 = load i32, i32* %94, align 4
  %96 = udiv i32 %93, %95
  %97 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 5
  store i32 %96, i32* %97, align 8
  br label %98

98:                                               ; preds = %90, %86
  %99 = phi i32 [ %2, %90 ], [ %89, %86 ]
  %100 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 0
  store i32 %99, i32* %100, align 8
  %101 = icmp slt i32 %3, 0
  br i1 %101, label %102, label %104

102:                                              ; preds = %98
  %103 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %6, i32 1, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.57, i64 0, i64 0), i32 %3) #12
  br label %205

104:                                              ; preds = %98
  %105 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %9, i64 0, i32 3
  %106 = load i32, i32* %105, align 4
  %107 = icmp ult i32 %106, %3
  br i1 %107, label %108, label %110

108:                                              ; preds = %104
  %109 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %6, i32 1, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.58, i64 0, i64 0), i32 %3, i32 %106) #12
  br label %205

110:                                              ; preds = %104
  %111 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %9, i64 0, i32 1
  %112 = load i32, i32* %111, align 4
  %113 = icmp ugt i32 %112, %3
  br i1 %113, label %114, label %118

114:                                              ; preds = %110
  %115 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %6, i32 2, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @.str.59, i64 0, i64 0), i32 %3, i32 %112) #12
  %116 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 6
  store i32 0, i32* %116, align 4
  %117 = load i32, i32* %111, align 4
  br label %126

118:                                              ; preds = %110
  %119 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 2
  %120 = load i32, i32* %119, align 8
  %121 = sub i32 %3, %120
  %122 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 4
  %123 = load i32, i32* %122, align 8
  %124 = udiv i32 %121, %123
  %125 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 6
  store i32 %124, i32* %125, align 4
  br label %126

126:                                              ; preds = %118, %114
  %127 = phi i32 [ %3, %118 ], [ %117, %114 ]
  %128 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 1
  store i32 %127, i32* %128, align 4
  %129 = icmp slt i32 %4, 1
  br i1 %129, label %130, label %132

130:                                              ; preds = %126
  %131 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %6, i32 1, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.60, i64 0, i64 0), i32 %4) #12
  br label %205

132:                                              ; preds = %126
  %133 = load i32, i32* %83, align 8
  %134 = icmp ugt i32 %133, %4
  br i1 %134, label %135, label %137

135:                                              ; preds = %132
  %136 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %6, i32 1, i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.61, i64 0, i64 0), i32 %4, i32 %133) #12
  br label %205

137:                                              ; preds = %132
  %138 = load i32, i32* %77, align 8
  %139 = icmp ult i32 %138, %4
  br i1 %139, label %140, label %145

140:                                              ; preds = %137
  %141 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %6, i32 2, i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.62, i64 0, i64 0), i32 %4, i32 %138) #12
  %142 = load i32, i32* %10, align 8
  %143 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 7
  store i32 %142, i32* %143, align 8
  %144 = load i32, i32* %77, align 8
  br label %158

145:                                              ; preds = %137
  %146 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 1
  %147 = load i32, i32* %146, align 4
  %148 = sub nsw i32 %4, %147
  %149 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 3
  %150 = load i32, i32* %149, align 4
  %151 = sext i32 %148 to i64
  %152 = sext i32 %150 to i64
  %153 = add nsw i64 %151, -1
  %154 = add nsw i64 %153, %152
  %155 = sdiv i64 %154, %152
  %156 = trunc i64 %155 to i32
  %157 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 7
  store i32 %156, i32* %157, align 8
  br label %158

158:                                              ; preds = %145, %140
  %159 = phi i32 [ %4, %145 ], [ %144, %140 ]
  %160 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 2
  store i32 %159, i32* %160, align 8
  %161 = icmp slt i32 %5, 1
  br i1 %161, label %162, label %164

162:                                              ; preds = %158
  %163 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %6, i32 1, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.63, i64 0, i64 0), i32 %5) #12
  br label %205

164:                                              ; preds = %158
  %165 = load i32, i32* %111, align 4
  %166 = icmp ugt i32 %165, %5
  br i1 %166, label %167, label %169

167:                                              ; preds = %164
  %168 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %6, i32 1, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @.str.64, i64 0, i64 0), i32 %5, i32 %165) #12
  br label %205

169:                                              ; preds = %164
  %170 = load i32, i32* %105, align 4
  %171 = icmp ult i32 %170, %5
  br i1 %171, label %172, label %178

172:                                              ; preds = %169
  %173 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %6, i32 2, i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.65, i64 0, i64 0), i32 %5, i32 %170) #12
  %174 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 7
  %175 = load i32, i32* %174, align 4
  %176 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 8
  store i32 %175, i32* %176, align 4
  %177 = load i32, i32* %105, align 4
  br label %191

178:                                              ; preds = %169
  %179 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 2
  %180 = load i32, i32* %179, align 8
  %181 = sub nsw i32 %5, %180
  %182 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 4
  %183 = load i32, i32* %182, align 8
  %184 = sext i32 %181 to i64
  %185 = sext i32 %183 to i64
  %186 = add nsw i64 %184, -1
  %187 = add nsw i64 %186, %185
  %188 = sdiv i64 %187, %185
  %189 = trunc i64 %188 to i32
  %190 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 8
  store i32 %189, i32* %190, align 4
  br label %191

191:                                              ; preds = %178, %172
  %192 = phi i32 [ %5, %178 ], [ %177, %172 ]
  %193 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 3
  store i32 %192, i32* %193, align 4
  %194 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 14
  %195 = load i8, i8* %194, align 8
  %196 = or i8 %195, 2
  store i8 %196, i8* %194, align 8
  %197 = tail call fastcc i32 @opj_j2k_update_image_dimensions(%struct.opj_image* %1, %struct.opj_event_mgr* %6)
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %205, label %199

199:                                              ; preds = %191
  %200 = load i32, i32* %100, align 8
  %201 = load i32, i32* %128, align 4
  %202 = load i32, i32* %160, align 8
  %203 = load i32, i32* %193, align 4
  %204 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %6, i32 4, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.66, i64 0, i64 0), i32 %200, i32 %201, i32 %202, i32 %203) #12
  br label %205

205:                                              ; preds = %199, %191, %167, %162, %135, %130, %108, %102, %80, %74, %50, %27
  %206 = phi i32 [ 0, %74 ], [ 0, %80 ], [ 0, %102 ], [ 0, %108 ], [ 0, %130 ], [ 0, %135 ], [ 0, %162 ], [ 0, %167 ], [ %71, %50 ], [ 0, %27 ], [ 0, %191 ], [ %197, %199 ]
  ret i32 %206
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @opj_j2k_update_image_dimensions(%struct.opj_image* nocapture readonly, %struct.opj_event_mgr*) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %102, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 6
  %8 = load %struct.opj_image_comp*, %struct.opj_image_comp** %7, align 8
  %9 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 0
  %10 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 1
  %11 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 2
  %12 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 3
  br label %13

13:                                               ; preds = %6, %96
  %14 = phi %struct.opj_image_comp* [ %8, %6 ], [ %98, %96 ]
  %15 = phi i32 [ 0, %6 ], [ %99, %96 ]
  %16 = load i32, i32* %9, align 8
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %27, label %18

18:                                               ; preds = %13
  %19 = load i32, i32* %10, align 4
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %27, label %21

21:                                               ; preds = %18
  %22 = load i32, i32* %11, align 8
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %27, label %24

24:                                               ; preds = %21
  %25 = load i32, i32* %12, align 4
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %24, %21, %18, %13
  %28 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %1, i32 1, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.235, i64 0, i64 0)) #12
  br label %102

29:                                               ; preds = %24
  %30 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %14, i64 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = zext i32 %16 to i64
  %33 = zext i32 %31 to i64
  %34 = add nsw i64 %32, -1
  %35 = add nsw i64 %34, %33
  %36 = udiv i64 %35, %33
  %37 = trunc i64 %36 to i32
  %38 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %14, i64 0, i32 4
  store i32 %37, i32* %38, align 8
  %39 = load i32, i32* %10, align 4
  %40 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %14, i64 0, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = zext i32 %39 to i64
  %43 = zext i32 %41 to i64
  %44 = add nsw i64 %42, -1
  %45 = add nsw i64 %44, %43
  %46 = udiv i64 %45, %43
  %47 = trunc i64 %46 to i32
  %48 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %14, i64 0, i32 5
  store i32 %47, i32* %48, align 4
  %49 = load i32, i32* %11, align 8
  %50 = sext i32 %49 to i64
  %51 = sext i32 %31 to i64
  %52 = add nsw i64 %51, -1
  %53 = add nsw i64 %52, %50
  %54 = sdiv i64 %53, %51
  %55 = sext i32 %41 to i64
  %56 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %14, i64 0, i32 10
  %57 = load i32, i32* %56, align 8
  %58 = shl i64 %54, 32
  %59 = ashr exact i64 %58, 32
  %60 = zext i32 %57 to i64
  %61 = shl nsw i64 -1, %60
  %62 = xor i64 %61, -1
  %63 = add i64 %59, %62
  %64 = ashr i64 %63, %60
  %65 = trunc i64 %64 to i32
  %66 = shl i64 %36, 32
  %67 = ashr exact i64 %66, 32
  %68 = add i64 %67, %62
  %69 = ashr i64 %68, %60
  %70 = trunc i64 %69 to i32
  %71 = sub nsw i32 %65, %70
  %72 = icmp slt i32 %71, 0
  br i1 %72, label %73, label %75

73:                                               ; preds = %29
  %74 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %1, i32 1, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.236, i64 0, i64 0), i32 %15, i32 %71) #12
  br label %102

75:                                               ; preds = %29
  %76 = load i32, i32* %12, align 4
  %77 = sext i32 %76 to i64
  %78 = add nsw i64 %55, -1
  %79 = add nsw i64 %78, %77
  %80 = sdiv i64 %79, %55
  %81 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %14, i64 0, i32 2
  store i32 %71, i32* %81, align 8
  %82 = shl i64 %80, 32
  %83 = ashr exact i64 %82, 32
  %84 = add i64 %83, %62
  %85 = ashr i64 %84, %60
  %86 = trunc i64 %85 to i32
  %87 = shl i64 %46, 32
  %88 = ashr exact i64 %87, 32
  %89 = add i64 %88, %62
  %90 = ashr i64 %89, %60
  %91 = trunc i64 %90 to i32
  %92 = sub nsw i32 %86, %91
  %93 = icmp slt i32 %92, 0
  br i1 %93, label %94, label %96

94:                                               ; preds = %75
  %95 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %1, i32 1, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.237, i64 0, i64 0), i32 %15, i32 %92) #12
  br label %102

96:                                               ; preds = %75
  %97 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %14, i64 0, i32 3
  store i32 %92, i32* %97, align 4
  %98 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %14, i64 1
  %99 = add nuw i32 %15, 1
  %100 = load i32, i32* %3, align 8
  %101 = icmp ult i32 %99, %100
  br i1 %101, label %13, label %102

102:                                              ; preds = %96, %2, %94, %73, %27
  %103 = phi i32 [ 0, %27 ], [ 0, %73 ], [ 0, %94 ], [ 1, %2 ], [ 1, %96 ]
  ret i32 %103
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.opj_j2k* @opj_j2k_create_decompress() local_unnamed_addr #3 {
  %1 = tail call i8* @opj_calloc(i64 1, i64 328) #12
  %2 = bitcast i8* %1 to %struct.opj_j2k*
  %3 = icmp eq i8* %1, null
  br i1 %3, label %88, label %4

4:                                                ; preds = %0
  %5 = bitcast i8* %1 to i32*
  store i32 1, i32* %5, align 8
  %6 = getelementptr inbounds i8, i8* %1, i64 256
  %7 = load i8, i8* %6, align 8
  %8 = or i8 %7, 6
  store i8 %8, i8* %6, align 8
  %9 = tail call i8* @opj_calloc(i64 1, i64 5696) #12
  %10 = getelementptr inbounds i8, i8* %1, i64 16
  %11 = bitcast i8* %10 to i8**
  store i8* %9, i8** %11, align 8
  %12 = icmp eq i8* %9, null
  br i1 %12, label %13, label %14

13:                                               ; preds = %4
  tail call void @opj_j2k_destroy(%struct.opj_j2k* nonnull %2)
  br label %88

14:                                               ; preds = %4
  %15 = tail call i8* @opj_calloc(i64 1, i64 1000) #12
  %16 = getelementptr inbounds i8, i8* %1, i64 24
  %17 = bitcast i8* %16 to i8**
  store i8* %15, i8** %17, align 8
  %18 = icmp eq i8* %15, null
  br i1 %18, label %19, label %20

19:                                               ; preds = %14
  tail call void @opj_j2k_destroy(%struct.opj_j2k* nonnull %2)
  br label %88

20:                                               ; preds = %14
  %21 = getelementptr inbounds i8, i8* %1, i64 32
  %22 = bitcast i8* %21 to i32*
  store i32 1000, i32* %22, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 56
  %24 = bitcast i8* %23 to i32*
  store i32 -1, i32* %24, align 8
  %25 = getelementptr inbounds i8, i8* %1, i64 64
  %26 = bitcast i8* %25 to i64*
  store i64 0, i64* %26, align 8
  %27 = tail call i8* @opj_calloc(i64 1, i64 56) #12
  %28 = icmp eq i8* %27, null
  br i1 %28, label %39, label %29

29:                                               ; preds = %20
  %30 = getelementptr inbounds i8, i8* %27, i64 40
  %31 = bitcast i8* %30 to i32*
  store i32 100, i32* %31, align 8
  %32 = getelementptr inbounds i8, i8* %27, i64 24
  %33 = bitcast i8* %32 to i32*
  store i32 0, i32* %33, align 8
  %34 = tail call i8* @opj_calloc(i64 100, i64 24) #12
  %35 = getelementptr inbounds i8, i8* %27, i64 32
  %36 = bitcast i8* %35 to i8**
  store i8* %34, i8** %36, align 8
  %37 = icmp eq i8* %34, null
  br i1 %37, label %38, label %42

38:                                               ; preds = %29
  tail call void @opj_free(i8* nonnull %27) #12
  br label %39

39:                                               ; preds = %38, %20
  %40 = getelementptr inbounds i8, i8* %1, i64 280
  %41 = bitcast i8* %40 to %struct.opj_codestream_index**
  store %struct.opj_codestream_index* null, %struct.opj_codestream_index** %41, align 8
  tail call void @opj_j2k_destroy(%struct.opj_j2k* nonnull %2)
  br label %88

42:                                               ; preds = %29
  %43 = getelementptr inbounds i8, i8* %27, i64 48
  %44 = bitcast i8* %43 to %struct.opj_tile_index**
  store %struct.opj_tile_index* null, %struct.opj_tile_index** %44, align 8
  %45 = getelementptr inbounds i8, i8* %1, i64 280
  %46 = bitcast i8* %45 to i8**
  store i8* %27, i8** %46, align 8
  %47 = tail call %struct.opj_procedure_list* @opj_procedure_list_create() #12
  %48 = getelementptr inbounds i8, i8* %1, i64 272
  %49 = bitcast i8* %48 to %struct.opj_procedure_list**
  store %struct.opj_procedure_list* %47, %struct.opj_procedure_list** %49, align 8
  %50 = icmp eq %struct.opj_procedure_list* %47, null
  br i1 %50, label %51, label %52

51:                                               ; preds = %42
  tail call void @opj_j2k_destroy(%struct.opj_j2k* nonnull %2)
  br label %88

52:                                               ; preds = %42
  %53 = tail call %struct.opj_procedure_list* @opj_procedure_list_create() #12
  %54 = getelementptr inbounds i8, i8* %1, i64 264
  %55 = bitcast i8* %54 to %struct.opj_procedure_list**
  store %struct.opj_procedure_list* %53, %struct.opj_procedure_list** %55, align 8
  %56 = icmp eq %struct.opj_procedure_list* %53, null
  br i1 %56, label %57, label %58

57:                                               ; preds = %52
  tail call void @opj_j2k_destroy(%struct.opj_j2k* nonnull %2)
  br label %88

58:                                               ; preds = %52
  %59 = tail call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.95, i64 0, i64 0)) #12
  %60 = icmp eq i8* %59, null
  br i1 %60, label %78, label %61

61:                                               ; preds = %58
  %62 = tail call i32 @opj_has_thread_support() #12
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %78, label %64

64:                                               ; preds = %61
  %65 = tail call i32 @opj_get_num_cpus() #12
  %66 = tail call i32 @strcmp(i8* nonnull %59, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.96, i64 0, i64 0)) #13
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %78, label %68

68:                                               ; preds = %64
  %69 = tail call i64 @strtol(i8* nocapture nonnull %59, i8** null, i32 10) #12
  %70 = trunc i64 %69 to i32
  %71 = icmp slt i32 %70, 0
  br i1 %71, label %78, label %72

72:                                               ; preds = %68
  %73 = icmp eq i32 %65, 0
  %74 = shl i32 %65, 1
  %75 = select i1 %73, i32 64, i32 %74
  %76 = icmp slt i32 %75, %70
  %77 = select i1 %76, i32 %75, i32 %70
  br label %78

78:                                               ; preds = %58, %61, %64, %68, %72
  %79 = phi i32 [ %77, %72 ], [ 0, %61 ], [ 0, %58 ], [ %65, %64 ], [ 0, %68 ]
  %80 = tail call %struct.opj_thread_pool_t* @opj_thread_pool_create(i32 %79) #12
  %81 = getelementptr inbounds i8, i8* %1, i64 304
  %82 = bitcast i8* %81 to %struct.opj_thread_pool_t**
  store %struct.opj_thread_pool_t* %80, %struct.opj_thread_pool_t** %82, align 8
  %83 = icmp eq %struct.opj_thread_pool_t* %80, null
  br i1 %83, label %84, label %88

84:                                               ; preds = %78
  %85 = tail call %struct.opj_thread_pool_t* @opj_thread_pool_create(i32 0) #12
  store %struct.opj_thread_pool_t* %85, %struct.opj_thread_pool_t** %82, align 8
  %86 = icmp eq %struct.opj_thread_pool_t* %85, null
  br i1 %86, label %87, label %88

87:                                               ; preds = %84
  tail call void @opj_j2k_destroy(%struct.opj_j2k* nonnull %2)
  br label %88

88:                                               ; preds = %78, %84, %0, %87, %57, %51, %39, %19, %13
  %89 = phi %struct.opj_j2k* [ null, %87 ], [ null, %57 ], [ null, %51 ], [ null, %39 ], [ null, %19 ], [ null, %13 ], [ null, %0 ], [ %2, %84 ], [ %2, %78 ]
  ret %struct.opj_j2k* %89
}

; Function Attrs: nounwind ssp uwtable
define hidden void @j2k_dump(%struct.opj_j2k* nocapture readonly, i32, %struct._IO_FILE*) local_unnamed_addr #3 {
  %4 = and i32 %1, 384
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %3
  %7 = tail call i64 @fwrite(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.67, i64 0, i64 0), i64 11, i64 1, %struct._IO_FILE* %2)
  ret void

8:                                                ; preds = %3
  %9 = and i32 %1, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %16, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %13 = load %struct.opj_image*, %struct.opj_image** %12, align 8
  %14 = icmp eq %struct.opj_image* %13, null
  br i1 %14, label %16, label %15

15:                                               ; preds = %11
  tail call void @j2k_dump_image_header(%struct.opj_image* nonnull %13, i32 0, %struct._IO_FILE* %2)
  br label %16

16:                                               ; preds = %11, %8, %15
  %17 = and i32 %1, 2
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %46, label %19

19:                                               ; preds = %16
  %20 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %21 = load %struct.opj_image*, %struct.opj_image** %20, align 8
  %22 = icmp eq %struct.opj_image* %21, null
  br i1 %22, label %46, label %23

23:                                               ; preds = %19
  %24 = tail call i64 @fwrite(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.266, i64 0, i64 0), i64 36, i64 1, %struct._IO_FILE* %2) #12
  %25 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 2
  %28 = load i32, i32* %27, align 8
  %29 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.267, i64 0, i64 0), i32 %26, i32 %28) #12
  %30 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 3
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 4
  %33 = load i32, i32* %32, align 8
  %34 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.268, i64 0, i64 0), i32 %31, i32 %33) #12
  %35 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 6
  %36 = load i32, i32* %35, align 8
  %37 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 7
  %38 = load i32, i32* %37, align 4
  %39 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.269, i64 0, i64 0), i32 %36, i32 %38) #12
  %40 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 1
  %41 = load %struct.opj_tcp*, %struct.opj_tcp** %40, align 8
  %42 = load %struct.opj_image*, %struct.opj_image** %20, align 8
  %43 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %42, i64 0, i32 4
  %44 = load i32, i32* %43, align 8
  tail call fastcc void @opj_j2k_dump_tile_info(%struct.opj_tcp* %41, i32 %44, %struct._IO_FILE* %2) #12
  %45 = tail call i64 @fwrite(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.75, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %2) #12
  br label %46

46:                                               ; preds = %19, %16, %23
  %47 = and i32 %1, 8
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %75, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 7
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 6
  %53 = load i32, i32* %52, align 8
  %54 = mul i32 %53, %51
  %55 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %56 = load %struct.opj_image*, %struct.opj_image** %55, align 8
  %57 = icmp eq %struct.opj_image* %56, null
  %58 = icmp eq i32 %54, 0
  %59 = or i1 %57, %58
  br i1 %59, label %75, label %60

60:                                               ; preds = %49
  %61 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %62 = load %struct.opj_tcp*, %struct.opj_tcp** %61, align 8
  %63 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %56, i64 0, i32 4
  %64 = load i32, i32* %63, align 8
  tail call fastcc void @opj_j2k_dump_tile_info(%struct.opj_tcp* %62, i32 %64, %struct._IO_FILE* %2)
  %65 = icmp eq i32 %54, 1
  br i1 %65, label %75, label %66

66:                                               ; preds = %60, %66
  %67 = phi i32 [ %73, %66 ], [ 1, %60 ]
  %68 = phi %struct.opj_tcp* [ %69, %66 ], [ %62, %60 ]
  %69 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %68, i64 1
  %70 = load %struct.opj_image*, %struct.opj_image** %55, align 8
  %71 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %70, i64 0, i32 4
  %72 = load i32, i32* %71, align 8
  tail call fastcc void @opj_j2k_dump_tile_info(%struct.opj_tcp* %69, i32 %72, %struct._IO_FILE* %2)
  %73 = add nuw i32 %67, 1
  %74 = icmp eq i32 %73, %54
  br i1 %74, label %75, label %66

75:                                               ; preds = %66, %60, %49, %46
  %76 = and i32 %1, 16
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %254, label %78

78:                                               ; preds = %75
  %79 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 7
  %80 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %79, align 8
  %81 = tail call i64 @fwrite(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.259, i64 0, i64 0), i64 37, i64 1, %struct._IO_FILE* %2) #12
  %82 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %80, i64 0, i32 0
  %83 = load i64, i64* %82, align 8
  %84 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %80, i64 0, i32 1
  %85 = load i64, i64* %84, align 8
  %86 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.260, i64 0, i64 0), i64 %83, i64 %85) #12
  %87 = tail call i64 @fwrite(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.261, i64 0, i64 0), i64 17, i64 1, %struct._IO_FILE* %2) #12
  %88 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %80, i64 0, i32 4
  %89 = load %struct.opj_marker_info*, %struct.opj_marker_info** %88, align 8
  %90 = icmp eq %struct.opj_marker_info* %89, null
  br i1 %90, label %121, label %91

91:                                               ; preds = %78
  %92 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %80, i64 0, i32 3
  %93 = load i32, i32* %92, align 8
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %121, label %95

95:                                               ; preds = %91
  %96 = getelementptr inbounds %struct.opj_marker_info, %struct.opj_marker_info* %89, i64 0, i32 0
  %97 = load i16, i16* %96, align 8
  %98 = zext i16 %97 to i32
  %99 = getelementptr inbounds %struct.opj_marker_info, %struct.opj_marker_info* %89, i64 0, i32 1
  %100 = load i64, i64* %99, align 8
  %101 = getelementptr inbounds %struct.opj_marker_info, %struct.opj_marker_info* %89, i64 0, i32 2
  %102 = load i32, i32* %101, align 8
  %103 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.262, i64 0, i64 0), i32 %98, i64 %100, i32 %102) #12
  %104 = load i32, i32* %92, align 8
  %105 = icmp ugt i32 %104, 1
  br i1 %105, label %106, label %121

106:                                              ; preds = %95, %106
  %107 = phi i64 [ %117, %106 ], [ 1, %95 ]
  %108 = load %struct.opj_marker_info*, %struct.opj_marker_info** %88, align 8
  %109 = getelementptr inbounds %struct.opj_marker_info, %struct.opj_marker_info* %108, i64 %107, i32 0
  %110 = load i16, i16* %109, align 8
  %111 = zext i16 %110 to i32
  %112 = getelementptr inbounds %struct.opj_marker_info, %struct.opj_marker_info* %108, i64 %107, i32 1
  %113 = load i64, i64* %112, align 8
  %114 = getelementptr inbounds %struct.opj_marker_info, %struct.opj_marker_info* %108, i64 %107, i32 2
  %115 = load i32, i32* %114, align 8
  %116 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.262, i64 0, i64 0), i32 %111, i64 %113, i32 %115) #12
  %117 = add nuw nsw i64 %107, 1
  %118 = load i32, i32* %92, align 8
  %119 = zext i32 %118 to i64
  %120 = icmp ult i64 %117, %119
  br i1 %120, label %106, label %121

121:                                              ; preds = %106, %95, %91, %78
  %122 = tail call i64 @fwrite(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.258, i64 0, i64 0), i64 4, i64 1, %struct._IO_FILE* %2) #12
  %123 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %80, i64 0, i32 7
  %124 = load %struct.opj_tile_index*, %struct.opj_tile_index** %123, align 8
  %125 = icmp eq %struct.opj_tile_index* %124, null
  br i1 %125, label %252, label %126

126:                                              ; preds = %121
  %127 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %80, i64 0, i32 6
  %128 = load i32, i32* %127, align 4
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %252, label %130

130:                                              ; preds = %126
  %131 = zext i32 %128 to i64
  %132 = add nsw i64 %131, -1
  %133 = and i64 %131, 3
  %134 = icmp ult i64 %132, 3
  br i1 %134, label %159, label %135

135:                                              ; preds = %130
  %136 = sub nsw i64 %131, %133
  br label %137

137:                                              ; preds = %137, %135
  %138 = phi i64 [ 0, %135 ], [ %156, %137 ]
  %139 = phi i32 [ 0, %135 ], [ %155, %137 ]
  %140 = phi i64 [ %136, %135 ], [ %157, %137 ]
  %141 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %124, i64 %138, i32 1
  %142 = load i32, i32* %141, align 4
  %143 = add i32 %142, %139
  %144 = or i64 %138, 1
  %145 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %124, i64 %144, i32 1
  %146 = load i32, i32* %145, align 4
  %147 = add i32 %146, %143
  %148 = or i64 %138, 2
  %149 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %124, i64 %148, i32 1
  %150 = load i32, i32* %149, align 4
  %151 = add i32 %150, %147
  %152 = or i64 %138, 3
  %153 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %124, i64 %152, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = add i32 %154, %151
  %156 = add nuw nsw i64 %138, 4
  %157 = add i64 %140, -4
  %158 = icmp eq i64 %157, 0
  br i1 %158, label %159, label %137

159:                                              ; preds = %137, %130
  %160 = phi i32 [ undef, %130 ], [ %155, %137 ]
  %161 = phi i64 [ 0, %130 ], [ %156, %137 ]
  %162 = phi i32 [ 0, %130 ], [ %155, %137 ]
  %163 = icmp eq i64 %133, 0
  br i1 %163, label %174, label %164

164:                                              ; preds = %159, %164
  %165 = phi i64 [ %171, %164 ], [ %161, %159 ]
  %166 = phi i32 [ %170, %164 ], [ %162, %159 ]
  %167 = phi i64 [ %172, %164 ], [ %133, %159 ]
  %168 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %124, i64 %165, i32 1
  %169 = load i32, i32* %168, align 4
  %170 = add i32 %169, %166
  %171 = add nuw nsw i64 %165, 1
  %172 = add i64 %167, -1
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %174, label %164, !llvm.loop !20

174:                                              ; preds = %164, %159
  %175 = phi i32 [ %160, %159 ], [ %170, %164 ]
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %252, label %177

177:                                              ; preds = %174
  %178 = tail call i64 @fwrite(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.263, i64 0, i64 0), i64 16, i64 1, %struct._IO_FILE* %2) #12
  %179 = load i32, i32* %127, align 4
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %250, label %181

181:                                              ; preds = %177
  %182 = load %struct.opj_tile_index*, %struct.opj_tile_index** %123, align 8
  br label %183

183:                                              ; preds = %244, %181
  %184 = phi %struct.opj_tile_index* [ %182, %181 ], [ %245, %244 ]
  %185 = phi i64 [ 0, %181 ], [ %246, %244 ]
  %186 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %184, i64 %185, i32 1
  %187 = load i32, i32* %186, align 4
  %188 = trunc i64 %185 to i32
  %189 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.264, i64 0, i64 0), i32 %188, i32 %187) #12
  %190 = load %struct.opj_tile_index*, %struct.opj_tile_index** %123, align 8
  %191 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %190, i64 %185, i32 4
  %192 = load %struct.opj_tp_index*, %struct.opj_tp_index** %191, align 8
  %193 = icmp ne %struct.opj_tp_index* %192, null
  %194 = icmp ne i32 %187, 0
  %195 = and i1 %194, %193
  br i1 %195, label %196, label %215

196:                                              ; preds = %183
  %197 = zext i32 %187 to i64
  br label %198

198:                                              ; preds = %212, %196
  %199 = phi %struct.opj_tp_index* [ %192, %196 ], [ %214, %212 ]
  %200 = phi i64 [ 0, %196 ], [ %209, %212 ]
  %201 = getelementptr inbounds %struct.opj_tp_index, %struct.opj_tp_index* %199, i64 %200, i32 0
  %202 = load i64, i64* %201, align 8
  %203 = getelementptr inbounds %struct.opj_tp_index, %struct.opj_tp_index* %199, i64 %200, i32 1
  %204 = load i64, i64* %203, align 8
  %205 = getelementptr inbounds %struct.opj_tp_index, %struct.opj_tp_index* %199, i64 %200, i32 2
  %206 = load i64, i64* %205, align 8
  %207 = trunc i64 %200 to i32
  %208 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.265, i64 0, i64 0), i32 %207, i64 %202, i64 %204, i64 %206) #12
  %209 = add nuw nsw i64 %200, 1
  %210 = icmp eq i64 %209, %197
  %211 = load %struct.opj_tile_index*, %struct.opj_tile_index** %123, align 8
  br i1 %210, label %215, label %212

212:                                              ; preds = %198
  %213 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %211, i64 %185, i32 4
  %214 = load %struct.opj_tp_index*, %struct.opj_tp_index** %213, align 8
  br label %198

215:                                              ; preds = %198, %183
  %216 = phi %struct.opj_tile_index* [ %190, %183 ], [ %211, %198 ]
  %217 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %216, i64 %185, i32 6
  %218 = load %struct.opj_marker_info*, %struct.opj_marker_info** %217, align 8
  %219 = icmp eq %struct.opj_marker_info* %218, null
  br i1 %219, label %244, label %220

220:                                              ; preds = %215
  %221 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %216, i64 %185, i32 5
  %222 = load i32, i32* %221, align 8
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %244, label %224

224:                                              ; preds = %220, %241
  %225 = phi %struct.opj_marker_info* [ %243, %241 ], [ %218, %220 ]
  %226 = phi i64 [ %235, %241 ], [ 0, %220 ]
  %227 = getelementptr inbounds %struct.opj_marker_info, %struct.opj_marker_info* %225, i64 %226, i32 0
  %228 = load i16, i16* %227, align 8
  %229 = zext i16 %228 to i32
  %230 = getelementptr inbounds %struct.opj_marker_info, %struct.opj_marker_info* %225, i64 %226, i32 1
  %231 = load i64, i64* %230, align 8
  %232 = getelementptr inbounds %struct.opj_marker_info, %struct.opj_marker_info* %225, i64 %226, i32 2
  %233 = load i32, i32* %232, align 8
  %234 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.262, i64 0, i64 0), i32 %229, i64 %231, i32 %233) #12
  %235 = add nuw nsw i64 %226, 1
  %236 = load %struct.opj_tile_index*, %struct.opj_tile_index** %123, align 8
  %237 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %236, i64 %185, i32 5
  %238 = load i32, i32* %237, align 8
  %239 = zext i32 %238 to i64
  %240 = icmp ult i64 %235, %239
  br i1 %240, label %241, label %244

241:                                              ; preds = %224
  %242 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %236, i64 %185, i32 6
  %243 = load %struct.opj_marker_info*, %struct.opj_marker_info** %242, align 8
  br label %224

244:                                              ; preds = %224, %220, %215
  %245 = phi %struct.opj_tile_index* [ %216, %220 ], [ %216, %215 ], [ %236, %224 ]
  %246 = add nuw nsw i64 %185, 1
  %247 = load i32, i32* %127, align 4
  %248 = zext i32 %247 to i64
  %249 = icmp ult i64 %246, %248
  br i1 %249, label %183, label %250

250:                                              ; preds = %244, %177
  %251 = tail call i64 @fwrite(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.258, i64 0, i64 0), i64 4, i64 1, %struct._IO_FILE* %2) #12
  br label %252

252:                                              ; preds = %121, %126, %174, %250
  %253 = tail call i64 @fwrite(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.75, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %2) #12
  br label %254

254:                                              ; preds = %75, %252
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @j2k_dump_image_header(%struct.opj_image* nocapture readonly, i32, %struct._IO_FILE* nocapture) local_unnamed_addr #3 {
  %4 = alloca [2 x i8], align 1
  %5 = getelementptr inbounds [2 x i8], [2 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %5) #12
  store i8 -86, i8* %5, align 1
  %6 = getelementptr inbounds [2 x i8], [2 x i8]* %4, i64 0, i64 1
  store i8 -86, i8* %6, align 1
  %7 = icmp eq i32 %1, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %3
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %10 = tail call i64 @fwrite(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.68, i64 0, i64 0), i64 36, i64 1, %struct._IO_FILE* %9)
  br label %13

11:                                               ; preds = %3
  %12 = tail call i64 @fwrite(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.69, i64 0, i64 0), i64 13, i64 1, %struct._IO_FILE* %2)
  store i8 9, i8* %5, align 1
  br label %13

13:                                               ; preds = %11, %8
  %14 = phi i8* [ %6, %11 ], [ %5, %8 ]
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.70, i64 0, i64 0), i8* nonnull %5, i32 %16, i32 %18)
  %20 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.71, i64 0, i64 0), i8* nonnull %5, i32 %21, i32 %23)
  %25 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 4
  %26 = load i32, i32* %25, align 8
  %27 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.72, i64 0, i64 0), i8* nonnull %5, i32 %26)
  %28 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %0, i64 0, i32 6
  %29 = load %struct.opj_image_comp*, %struct.opj_image_comp** %28, align 8
  %30 = icmp eq %struct.opj_image_comp* %29, null
  br i1 %30, label %45, label %31

31:                                               ; preds = %13
  %32 = load i32, i32* %25, align 8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %45, label %34

34:                                               ; preds = %31, %34
  %35 = phi i64 [ %41, %34 ], [ 0, %31 ]
  %36 = trunc i64 %35 to i32
  %37 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.73, i64 0, i64 0), i8* nonnull %5, i32 %36)
  %38 = load %struct.opj_image_comp*, %struct.opj_image_comp** %28, align 8
  %39 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %38, i64 %35
  call void @j2k_dump_image_comp_header(%struct.opj_image_comp* %39, i32 %1, %struct._IO_FILE* %2)
  %40 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.74, i64 0, i64 0), i8* nonnull %5)
  %41 = add nuw nsw i64 %35, 1
  %42 = load i32, i32* %25, align 8
  %43 = zext i32 %42 to i64
  %44 = icmp ult i64 %41, %43
  br i1 %44, label %34, label %45

45:                                               ; preds = %34, %31, %13
  %46 = call i64 @fwrite(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.75, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %2)
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %5) #12
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc void @opj_j2k_dump_tile_info(%struct.opj_tcp* readonly, i32, %struct._IO_FILE*) unnamed_addr #8 {
  %4 = icmp eq %struct.opj_tcp* %0, null
  br i1 %4, label %98, label %5

5:                                                ; preds = %3
  %6 = tail call i64 @fwrite(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.238, i64 0, i64 0), i64 17, i64 1, %struct._IO_FILE* %2)
  %7 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.239, i64 0, i64 0), i32 %8)
  %10 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.240, i64 0, i64 0), i32 %11)
  %13 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 2
  %14 = load i32, i32* %13, align 8
  %15 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.241, i64 0, i64 0), i32 %14)
  %16 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 4
  %17 = load i32, i32* %16, align 8
  %18 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.242, i64 0, i64 0), i32 %17)
  %19 = icmp sgt i32 %1, 0
  br i1 %19, label %20, label %96

20:                                               ; preds = %5
  %21 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 15
  %22 = zext i32 %1 to i64
  br label %23

23:                                               ; preds = %88, %20
  %24 = phi i64 [ 0, %20 ], [ %94, %88 ]
  %25 = load %struct.opj_tccp*, %struct.opj_tccp** %21, align 8
  %26 = trunc i64 %24 to i32
  %27 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.243, i64 0, i64 0), i32 %26)
  %28 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %24, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.244, i64 0, i64 0), i32 %29)
  %31 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %24, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.245, i64 0, i64 0), i32 %32)
  %34 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %24, i32 2
  %35 = load i32, i32* %34, align 4
  %36 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.246, i64 0, i64 0), i32 %35)
  %37 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %24, i32 3
  %38 = load i32, i32* %37, align 4
  %39 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.247, i64 0, i64 0), i32 %38)
  %40 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %24, i32 4
  %41 = load i32, i32* %40, align 4
  %42 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.248, i64 0, i64 0), i32 %41)
  %43 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %24, i32 5
  %44 = load i32, i32* %43, align 4
  %45 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.249, i64 0, i64 0), i32 %44)
  %46 = tail call i64 @fwrite(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.250, i64 0, i64 0), i64 23, i64 1, %struct._IO_FILE* %2)
  %47 = load i32, i32* %31, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %60, label %49

49:                                               ; preds = %23, %49
  %50 = phi i64 [ %56, %49 ], [ 0, %23 ]
  %51 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %24, i32 10, i64 %50
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %24, i32 11, i64 %50
  %54 = load i32, i32* %53, align 4
  %55 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.251, i64 0, i64 0), i32 %52, i32 %54)
  %56 = add nuw nsw i64 %50, 1
  %57 = load i32, i32* %31, align 4
  %58 = zext i32 %57 to i64
  %59 = icmp ult i64 %56, %58
  br i1 %59, label %49, label %60

60:                                               ; preds = %49, %23
  %61 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %2)
  %62 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %24, i32 6
  %63 = load i32, i32* %62, align 4
  %64 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.253, i64 0, i64 0), i32 %63)
  %65 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %24, i32 8
  %66 = load i32, i32* %65, align 4
  %67 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.254, i64 0, i64 0), i32 %66)
  %68 = tail call i64 @fwrite(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.255, i64 0, i64 0), i64 20, i64 1, %struct._IO_FILE* %2)
  %69 = load i32, i32* %62, align 4
  %70 = icmp eq i32 %69, 1
  br i1 %70, label %76, label %71

71:                                               ; preds = %60
  %72 = load i32, i32* %31, align 4
  %73 = mul nsw i32 %72, 3
  %74 = add nsw i32 %73, -2
  %75 = icmp sgt i32 %74, 0
  br i1 %75, label %76, label %88

76:                                               ; preds = %60, %71
  %77 = phi i32 [ %74, %71 ], [ 1, %60 ]
  %78 = zext i32 %77 to i64
  br label %79

79:                                               ; preds = %79, %76
  %80 = phi i64 [ 0, %76 ], [ %86, %79 ]
  %81 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %24, i32 7, i64 %80, i32 1
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %24, i32 7, i64 %80, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.251, i64 0, i64 0), i32 %82, i32 %84)
  %86 = add nuw nsw i64 %80, 1
  %87 = icmp eq i64 %86, %78
  br i1 %87, label %88, label %79

88:                                               ; preds = %79, %71
  %89 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %2)
  %90 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %24, i32 9
  %91 = load i32, i32* %90, align 4
  %92 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.256, i64 0, i64 0), i32 %91)
  %93 = tail call i64 @fwrite(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.257, i64 0, i64 0), i64 5, i64 1, %struct._IO_FILE* %2)
  %94 = add nuw nsw i64 %24, 1
  %95 = icmp eq i64 %94, %22
  br i1 %95, label %96, label %23

96:                                               ; preds = %88, %5
  %97 = tail call i64 @fwrite(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.258, i64 0, i64 0), i64 4, i64 1, %struct._IO_FILE* %2)
  br label %98

98:                                               ; preds = %3, %96
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @j2k_dump_image_comp_header(%struct.opj_image_comp* nocapture readonly, i32, %struct._IO_FILE* nocapture) local_unnamed_addr #3 {
  %4 = alloca [3 x i8], align 1
  %5 = getelementptr inbounds [3 x i8], [3 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %5) #12
  store i8 -86, i8* %5, align 1
  %6 = getelementptr inbounds [3 x i8], [3 x i8]* %4, i64 0, i64 1
  store i8 -86, i8* %6, align 1
  %7 = getelementptr inbounds [3 x i8], [3 x i8]* %4, i64 0, i64 2
  store i8 -86, i8* %7, align 1
  %8 = icmp ne i32 %1, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %3
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %11 = tail call i64 @fwrite(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.76, i64 0, i64 0), i64 41, i64 1, %struct._IO_FILE* %10)
  br label %13

12:                                               ; preds = %3
  store i8 9, i8* %5, align 1
  store i8 9, i8* %6, align 1
  br label %13

13:                                               ; preds = %12, %9
  %14 = phi i8* [ %7, %12 ], [ %5, %9 ]
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %0, i64 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %0, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.77, i64 0, i64 0), i8* nonnull %5, i32 %16, i32 %18)
  %20 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %0, i64 0, i32 6
  %21 = load i32, i32* %20, align 8
  %22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.78, i64 0, i64 0), i8* nonnull %5, i32 %21)
  %23 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %0, i64 0, i32 8
  %24 = load i32, i32* %23, align 8
  %25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.79, i64 0, i64 0), i8* nonnull %5, i32 %24)
  br i1 %8, label %26, label %28

26:                                               ; preds = %13
  %27 = call i64 @fwrite(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.75, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %2)
  br label %28

28:                                               ; preds = %26, %13
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %5) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.opj_codestream_info_v2* @j2k_get_cstr_info(%struct.opj_j2k* nocapture readonly) local_unnamed_addr #3 {
  %2 = alloca %struct.opj_codestream_info_v2*, align 8
  %3 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %4 = load %struct.opj_image*, %struct.opj_image** %3, align 8
  %5 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %4, i64 0, i32 4
  %6 = load i32, i32* %5, align 8
  %7 = bitcast %struct.opj_codestream_info_v2** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #12
  %8 = tail call i8* @opj_calloc(i64 1, i64 72) #12
  %9 = bitcast %struct.opj_codestream_info_v2** %2 to i8**
  store i8* %8, i8** %9, align 8
  %10 = icmp eq i8* %8, null
  br i1 %10, label %221, label %11

11:                                               ; preds = %1
  %12 = load %struct.opj_image*, %struct.opj_image** %3, align 8
  %13 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %12, i64 0, i32 4
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds i8, i8* %8, i64 24
  %16 = bitcast i8* %15 to i32*
  store i32 %14, i32* %16, align 8
  %17 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = bitcast i8* %8 to i32*
  store i32 %18, i32* %19, align 8
  %20 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = load %struct.opj_codestream_info_v2*, %struct.opj_codestream_info_v2** %2, align 8
  %23 = getelementptr inbounds %struct.opj_codestream_info_v2, %struct.opj_codestream_info_v2* %22, i64 0, i32 1
  store i32 %21, i32* %23, align 4
  %24 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 3
  %25 = load i32, i32* %24, align 4
  %26 = load %struct.opj_codestream_info_v2*, %struct.opj_codestream_info_v2** %2, align 8
  %27 = getelementptr inbounds %struct.opj_codestream_info_v2, %struct.opj_codestream_info_v2* %26, i64 0, i32 2
  store i32 %25, i32* %27, align 8
  %28 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 4
  %29 = load i32, i32* %28, align 8
  %30 = getelementptr inbounds %struct.opj_codestream_info_v2, %struct.opj_codestream_info_v2* %26, i64 0, i32 3
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 6
  %32 = load i32, i32* %31, align 8
  %33 = getelementptr inbounds %struct.opj_codestream_info_v2, %struct.opj_codestream_info_v2* %26, i64 0, i32 4
  store i32 %32, i32* %33, align 8
  %34 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 7
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %struct.opj_codestream_info_v2, %struct.opj_codestream_info_v2* %26, i64 0, i32 5
  store i32 %35, i32* %36, align 4
  %37 = getelementptr inbounds %struct.opj_codestream_info_v2, %struct.opj_codestream_info_v2* %26, i64 0, i32 8
  store %struct.opj_tile_v2_info* null, %struct.opj_tile_v2_info** %37, align 8
  %38 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 1
  %39 = load %struct.opj_tcp*, %struct.opj_tcp** %38, align 8
  %40 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %39, i64 0, i32 0
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %struct.opj_codestream_info_v2, %struct.opj_codestream_info_v2* %26, i64 0, i32 7, i32 1
  store i32 %41, i32* %42, align 4
  %43 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %39, i64 0, i32 1
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %struct.opj_codestream_info_v2, %struct.opj_codestream_info_v2* %26, i64 0, i32 7, i32 2
  store i32 %44, i32* %45, align 8
  %46 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %39, i64 0, i32 2
  %47 = load i32, i32* %46, align 8
  %48 = getelementptr inbounds %struct.opj_codestream_info_v2, %struct.opj_codestream_info_v2* %26, i64 0, i32 7, i32 3
  store i32 %47, i32* %48, align 4
  %49 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %39, i64 0, i32 4
  %50 = load i32, i32* %49, align 8
  %51 = getelementptr inbounds %struct.opj_codestream_info_v2, %struct.opj_codestream_info_v2* %26, i64 0, i32 7, i32 4
  store i32 %50, i32* %51, align 8
  %52 = getelementptr inbounds %struct.opj_codestream_info_v2, %struct.opj_codestream_info_v2* %26, i64 0, i32 6
  %53 = load i32, i32* %52, align 8
  %54 = zext i32 %53 to i64
  %55 = tail call i8* @opj_calloc(i64 %54, i64 1080) #12
  %56 = getelementptr inbounds %struct.opj_codestream_info_v2, %struct.opj_codestream_info_v2* %26, i64 0, i32 7, i32 5
  %57 = bitcast %struct.opj_tccp_info** %56 to i8**
  store i8* %55, i8** %57, align 8
  %58 = icmp eq i8* %55, null
  %59 = bitcast i8* %55 to %struct.opj_tccp_info*
  br i1 %58, label %65, label %60

60:                                               ; preds = %11
  %61 = icmp eq i32 %6, 0
  br i1 %61, label %221, label %62

62:                                               ; preds = %60
  %63 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %39, i64 0, i32 15
  %64 = zext i32 %6 to i64
  br label %66

65:                                               ; preds = %11
  call void @opj_destroy_cstr_info(%struct.opj_codestream_info_v2** nonnull %2) #12
  br label %221

66:                                               ; preds = %218, %62
  %67 = phi %struct.opj_tccp_info* [ %59, %62 ], [ %220, %218 ]
  %68 = phi i64 [ 0, %62 ], [ %215, %218 ]
  %69 = load %struct.opj_tccp*, %struct.opj_tccp** %63, align 8
  %70 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %69, i64 %68, i32 0
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds %struct.opj_tccp_info, %struct.opj_tccp_info* %67, i64 %68, i32 1
  store i32 %71, i32* %72, align 4
  %73 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %69, i64 %68, i32 1
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds %struct.opj_tccp_info, %struct.opj_tccp_info* %67, i64 %68, i32 2
  store i32 %74, i32* %75, align 4
  %76 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %69, i64 %68, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds %struct.opj_tccp_info, %struct.opj_tccp_info* %67, i64 %68, i32 3
  store i32 %77, i32* %78, align 4
  %79 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %69, i64 %68, i32 3
  %80 = load i32, i32* %79, align 4
  %81 = getelementptr inbounds %struct.opj_tccp_info, %struct.opj_tccp_info* %67, i64 %68, i32 4
  store i32 %80, i32* %81, align 4
  %82 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %69, i64 %68, i32 4
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr inbounds %struct.opj_tccp_info, %struct.opj_tccp_info* %67, i64 %68, i32 5
  store i32 %83, i32* %84, align 4
  %85 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %69, i64 %68, i32 5
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds %struct.opj_tccp_info, %struct.opj_tccp_info* %67, i64 %68, i32 6
  store i32 %86, i32* %87, align 4
  %88 = load i32, i32* %73, align 4
  %89 = icmp ult i32 %88, 33
  br i1 %89, label %90, label %102

90:                                               ; preds = %66
  %91 = getelementptr inbounds %struct.opj_tccp_info, %struct.opj_tccp_info* %67, i64 %68, i32 13, i64 0
  %92 = bitcast i32* %91 to i8*
  %93 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %69, i64 %68, i32 11, i64 0
  %94 = bitcast i32* %93 to i8*
  %95 = zext i32 %88 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %92, i8* align 4 %94, i64 %95, i1 false)
  %96 = getelementptr inbounds %struct.opj_tccp_info, %struct.opj_tccp_info* %67, i64 %68, i32 12, i64 0
  %97 = bitcast i32* %96 to i8*
  %98 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %69, i64 %68, i32 10, i64 0
  %99 = bitcast i32* %98 to i8*
  %100 = load i32, i32* %73, align 4
  %101 = zext i32 %100 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %97, i8* align 4 %99, i64 %101, i1 false)
  br label %102

102:                                              ; preds = %90, %66
  %103 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %69, i64 %68, i32 6
  %104 = load i32, i32* %103, align 4
  %105 = getelementptr inbounds %struct.opj_tccp_info, %struct.opj_tccp_info* %67, i64 %68, i32 7
  store i32 %104, i32* %105, align 4
  %106 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %69, i64 %68, i32 8
  %107 = load i32, i32* %106, align 4
  %108 = getelementptr inbounds %struct.opj_tccp_info, %struct.opj_tccp_info* %67, i64 %68, i32 10
  store i32 %107, i32* %108, align 4
  %109 = load i32, i32* %103, align 4
  %110 = icmp eq i32 %109, 1
  br i1 %110, label %117, label %111

111:                                              ; preds = %102
  %112 = load i32, i32* %73, align 4
  %113 = mul nsw i32 %112, 3
  %114 = add nsw i32 %113, -2
  %115 = add i32 %113, -3
  %116 = icmp ult i32 %115, 96
  br i1 %116, label %117, label %211

117:                                              ; preds = %102, %111
  %118 = phi i32 [ %114, %111 ], [ 1, %102 ]
  %119 = sext i32 %118 to i64
  %120 = icmp sgt i64 %119, 1
  %121 = select i1 %120, i64 %119, i64 1
  %122 = icmp ult i64 %121, 4
  br i1 %122, label %199, label %123

123:                                              ; preds = %117
  %124 = getelementptr %struct.opj_tccp_info, %struct.opj_tccp_info* %67, i64 %68, i32 8, i64 0
  %125 = icmp sgt i64 %119, 1
  %126 = select i1 %125, i64 %119, i64 1
  %127 = getelementptr %struct.opj_tccp_info, %struct.opj_tccp_info* %67, i64 %68, i32 8, i64 %126
  %128 = getelementptr %struct.opj_tccp_info, %struct.opj_tccp_info* %67, i64 %68, i32 9, i64 0
  %129 = getelementptr %struct.opj_tccp_info, %struct.opj_tccp_info* %67, i64 %68, i32 9, i64 %126
  %130 = getelementptr %struct.opj_tccp, %struct.opj_tccp* %69, i64 %68, i32 7, i64 0
  %131 = getelementptr %struct.opj_tccp, %struct.opj_tccp* %69, i64 %68, i32 7, i64 %126
  %132 = icmp ult i32* %124, %129
  %133 = icmp ult i32* %128, %127
  %134 = and i1 %132, %133
  %135 = getelementptr inbounds %struct.opj_stepsize, %struct.opj_stepsize* %131, i64 0, i32 0
  %136 = icmp ult i32* %124, %135
  %137 = bitcast i32* %127 to %struct.opj_stepsize*
  %138 = icmp ult %struct.opj_stepsize* %130, %137
  %139 = and i1 %136, %138
  %140 = or i1 %134, %139
  %141 = getelementptr inbounds %struct.opj_stepsize, %struct.opj_stepsize* %131, i64 0, i32 0
  %142 = icmp ult i32* %128, %141
  %143 = bitcast i32* %129 to %struct.opj_stepsize*
  %144 = icmp ult %struct.opj_stepsize* %130, %143
  %145 = and i1 %142, %144
  %146 = or i1 %140, %145
  br i1 %146, label %199, label %147

147:                                              ; preds = %123
  %148 = and i64 %121, 9223372036854775804
  %149 = add nsw i64 %148, -4
  %150 = lshr exact i64 %149, 2
  %151 = add nuw nsw i64 %150, 1
  %152 = and i64 %151, 1
  %153 = icmp eq i64 %149, 0
  br i1 %153, label %183, label %154

154:                                              ; preds = %147
  %155 = sub nuw nsw i64 %151, %152
  br label %156

156:                                              ; preds = %156, %154
  %157 = phi i64 [ 0, %154 ], [ %180, %156 ]
  %158 = phi i64 [ %155, %154 ], [ %181, %156 ]
  %159 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %69, i64 %68, i32 7, i64 %157, i32 1
  %160 = getelementptr inbounds i32, i32* %159, i64 -1
  %161 = bitcast i32* %160 to <8 x i32>*
  %162 = load <8 x i32>, <8 x i32>* %161, align 4
  %163 = shufflevector <8 x i32> %162, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %164 = shufflevector <8 x i32> %162, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %165 = getelementptr inbounds %struct.opj_tccp_info, %struct.opj_tccp_info* %67, i64 %68, i32 8, i64 %157
  %166 = bitcast i32* %165 to <4 x i32>*
  store <4 x i32> %164, <4 x i32>* %166, align 4, !alias.scope !21, !noalias !24
  %167 = getelementptr inbounds %struct.opj_tccp_info, %struct.opj_tccp_info* %67, i64 %68, i32 9, i64 %157
  %168 = bitcast i32* %167 to <4 x i32>*
  store <4 x i32> %163, <4 x i32>* %168, align 4, !alias.scope !27, !noalias !28
  %169 = or i64 %157, 4
  %170 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %69, i64 %68, i32 7, i64 %169, i32 1
  %171 = getelementptr inbounds i32, i32* %170, i64 -1
  %172 = bitcast i32* %171 to <8 x i32>*
  %173 = load <8 x i32>, <8 x i32>* %172, align 4
  %174 = shufflevector <8 x i32> %173, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %175 = shufflevector <8 x i32> %173, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %176 = getelementptr inbounds %struct.opj_tccp_info, %struct.opj_tccp_info* %67, i64 %68, i32 8, i64 %169
  %177 = bitcast i32* %176 to <4 x i32>*
  store <4 x i32> %175, <4 x i32>* %177, align 4, !alias.scope !21, !noalias !24
  %178 = getelementptr inbounds %struct.opj_tccp_info, %struct.opj_tccp_info* %67, i64 %68, i32 9, i64 %169
  %179 = bitcast i32* %178 to <4 x i32>*
  store <4 x i32> %174, <4 x i32>* %179, align 4, !alias.scope !27, !noalias !28
  %180 = add i64 %157, 8
  %181 = add i64 %158, -2
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %183, label %156, !llvm.loop !29

183:                                              ; preds = %156, %147
  %184 = phi i64 [ 0, %147 ], [ %180, %156 ]
  %185 = icmp eq i64 %152, 0
  br i1 %185, label %197, label %186

186:                                              ; preds = %183
  %187 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %69, i64 %68, i32 7, i64 %184, i32 1
  %188 = getelementptr inbounds i32, i32* %187, i64 -1
  %189 = bitcast i32* %188 to <8 x i32>*
  %190 = load <8 x i32>, <8 x i32>* %189, align 4
  %191 = shufflevector <8 x i32> %190, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %192 = shufflevector <8 x i32> %190, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %193 = getelementptr inbounds %struct.opj_tccp_info, %struct.opj_tccp_info* %67, i64 %68, i32 8, i64 %184
  %194 = bitcast i32* %193 to <4 x i32>*
  store <4 x i32> %192, <4 x i32>* %194, align 4, !alias.scope !21, !noalias !24
  %195 = getelementptr inbounds %struct.opj_tccp_info, %struct.opj_tccp_info* %67, i64 %68, i32 9, i64 %184
  %196 = bitcast i32* %195 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %196, align 4, !alias.scope !27, !noalias !28
  br label %197

197:                                              ; preds = %183, %186
  %198 = icmp eq i64 %121, %148
  br i1 %198, label %211, label %199

199:                                              ; preds = %197, %123, %117
  %200 = phi i64 [ 0, %123 ], [ 0, %117 ], [ %148, %197 ]
  br label %201

201:                                              ; preds = %199, %201
  %202 = phi i64 [ %209, %201 ], [ %200, %199 ]
  %203 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %69, i64 %68, i32 7, i64 %202, i32 1
  %204 = load i32, i32* %203, align 4
  %205 = getelementptr inbounds %struct.opj_tccp_info, %struct.opj_tccp_info* %67, i64 %68, i32 8, i64 %202
  store i32 %204, i32* %205, align 4
  %206 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %69, i64 %68, i32 7, i64 %202, i32 0
  %207 = load i32, i32* %206, align 4
  %208 = getelementptr inbounds %struct.opj_tccp_info, %struct.opj_tccp_info* %67, i64 %68, i32 9, i64 %202
  store i32 %207, i32* %208, align 4
  %209 = add nuw nsw i64 %202, 1
  %210 = icmp slt i64 %209, %119
  br i1 %210, label %201, label %211, !llvm.loop !30

211:                                              ; preds = %201, %197, %111
  %212 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %69, i64 %68, i32 9
  %213 = load i32, i32* %212, align 4
  %214 = getelementptr inbounds %struct.opj_tccp_info, %struct.opj_tccp_info* %67, i64 %68, i32 11
  store i32 %213, i32* %214, align 4
  %215 = add nuw nsw i64 %68, 1
  %216 = icmp eq i64 %215, %64
  %217 = load %struct.opj_codestream_info_v2*, %struct.opj_codestream_info_v2** %2, align 8
  br i1 %216, label %221, label %218

218:                                              ; preds = %211
  %219 = getelementptr inbounds %struct.opj_codestream_info_v2, %struct.opj_codestream_info_v2* %217, i64 0, i32 7, i32 5
  %220 = load %struct.opj_tccp_info*, %struct.opj_tccp_info** %219, align 8
  br label %66

221:                                              ; preds = %211, %60, %1, %65
  %222 = phi %struct.opj_codestream_info_v2* [ null, %65 ], [ null, %1 ], [ %26, %60 ], [ %217, %211 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #12
  ret %struct.opj_codestream_info_v2* %222
}

declare hidden void @opj_destroy_cstr_info(%struct.opj_codestream_info_v2**) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden %struct.opj_codestream_index* @j2k_get_cstr_index(%struct.opj_j2k* nocapture readonly) local_unnamed_addr #3 {
  %2 = tail call i8* @opj_calloc(i64 1, i64 56) #12
  %3 = bitcast i8* %2 to %struct.opj_codestream_index*
  %4 = icmp eq i8* %2, null
  br i1 %4, label %198, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 7
  %7 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %6, align 8
  %8 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %7, i64 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = bitcast i8* %2 to i64*
  store i64 %9, i64* %10, align 8
  %11 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %6, align 8
  %12 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %11, i64 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 8
  %15 = bitcast i8* %14 to i64*
  store i64 %13, i64* %15, align 8
  %16 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %6, align 8
  %17 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %16, i64 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds i8, i8* %2, i64 16
  %20 = bitcast i8* %19 to i64*
  store i64 %18, i64* %20, align 8
  %21 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %6, align 8
  %22 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %21, i64 0, i32 3
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds i8, i8* %2, i64 24
  %25 = bitcast i8* %24 to i32*
  store i32 %23, i32* %25, align 8
  %26 = zext i32 %23 to i64
  %27 = mul nuw nsw i64 %26, 24
  %28 = tail call i8* @opj_malloc(i64 %27) #12
  %29 = getelementptr inbounds i8, i8* %2, i64 32
  %30 = bitcast i8* %29 to %struct.opj_marker_info**
  %31 = bitcast i8* %29 to i8**
  store i8* %28, i8** %31, align 8
  %32 = icmp eq i8* %28, null
  br i1 %32, label %33, label %34

33:                                               ; preds = %5
  tail call void @opj_free(i8* nonnull %2) #12
  br label %198

34:                                               ; preds = %5
  %35 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %6, align 8
  %36 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %35, i64 0, i32 4
  %37 = load %struct.opj_marker_info*, %struct.opj_marker_info** %36, align 8
  %38 = icmp eq %struct.opj_marker_info* %37, null
  br i1 %38, label %44, label %39

39:                                               ; preds = %34
  %40 = bitcast %struct.opj_marker_info* %37 to i8*
  %41 = load i32, i32* %25, align 8
  %42 = zext i32 %41 to i64
  %43 = mul nuw nsw i64 %42, 24
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %40, i64 %43, i1 false)
  br label %45

44:                                               ; preds = %34
  tail call void @opj_free(i8* nonnull %28) #12
  store %struct.opj_marker_info* null, %struct.opj_marker_info** %30, align 8
  br label %45

45:                                               ; preds = %44, %39
  %46 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %6, align 8
  %47 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %46, i64 0, i32 6
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds i8, i8* %2, i64 44
  %50 = bitcast i8* %49 to i32*
  store i32 %48, i32* %50, align 4
  %51 = zext i32 %48 to i64
  %52 = tail call i8* @opj_calloc(i64 %51, i64 56) #12
  %53 = getelementptr inbounds i8, i8* %2, i64 48
  %54 = bitcast i8* %53 to %struct.opj_tile_index**
  %55 = bitcast i8* %53 to i8**
  store i8* %52, i8** %55, align 8
  %56 = icmp eq i8* %52, null
  %57 = bitcast i8* %52 to %struct.opj_tile_index*
  br i1 %56, label %58, label %60

58:                                               ; preds = %45
  %59 = load i8*, i8** %31, align 8
  tail call void @opj_free(i8* %59) #12
  tail call void @opj_free(i8* nonnull %2) #12
  br label %198

60:                                               ; preds = %45
  %61 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %6, align 8
  %62 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %61, i64 0, i32 7
  %63 = load %struct.opj_tile_index*, %struct.opj_tile_index** %62, align 8
  %64 = icmp eq %struct.opj_tile_index* %63, null
  br i1 %64, label %68, label %65

65:                                               ; preds = %60
  %66 = load i32, i32* %50, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %198, label %69

68:                                               ; preds = %60
  tail call void @opj_free(i8* nonnull %52) #12
  store %struct.opj_tile_index* null, %struct.opj_tile_index** %54, align 8
  br label %198

69:                                               ; preds = %65, %193
  %70 = phi %struct.opj_tile_index* [ %197, %193 ], [ %57, %65 ]
  %71 = phi %struct.opj_tile_index* [ %196, %193 ], [ %63, %65 ]
  %72 = phi i64 [ %189, %193 ], [ 0, %65 ]
  %73 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %71, i64 %72, i32 5
  %74 = load i32, i32* %73, align 8
  %75 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %70, i64 %72, i32 5
  store i32 %74, i32* %75, align 8
  %76 = load %struct.opj_tile_index*, %struct.opj_tile_index** %54, align 8
  %77 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %76, i64 %72, i32 5
  %78 = load i32, i32* %77, align 8
  %79 = zext i32 %78 to i64
  %80 = mul nuw nsw i64 %79, 24
  %81 = tail call i8* @opj_malloc(i64 %80) #12
  %82 = load %struct.opj_tile_index*, %struct.opj_tile_index** %54, align 8
  %83 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %82, i64 %72, i32 6
  %84 = bitcast %struct.opj_marker_info** %83 to i8**
  store i8* %81, i8** %84, align 8
  %85 = load %struct.opj_tile_index*, %struct.opj_tile_index** %54, align 8
  %86 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %85, i64 %72, i32 6
  %87 = load %struct.opj_marker_info*, %struct.opj_marker_info** %86, align 8
  %88 = icmp eq %struct.opj_marker_info* %87, null
  br i1 %88, label %89, label %107

89:                                               ; preds = %69
  %90 = trunc i64 %72 to i32
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %103, label %92

92:                                               ; preds = %89
  %93 = and i64 %72, 4294967295
  br label %94

94:                                               ; preds = %94, %92
  %95 = phi i64 [ 0, %92 ], [ %100, %94 ]
  %96 = phi %struct.opj_tile_index* [ %85, %92 ], [ %101, %94 ]
  %97 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %96, i64 %95, i32 6
  %98 = bitcast %struct.opj_marker_info** %97 to i8**
  %99 = load i8*, i8** %98, align 8
  tail call void @opj_free(i8* %99) #12
  %100 = add nuw nsw i64 %95, 1
  %101 = load %struct.opj_tile_index*, %struct.opj_tile_index** %54, align 8
  %102 = icmp eq i64 %100, %93
  br i1 %102, label %103, label %94

103:                                              ; preds = %94, %89
  %104 = phi %struct.opj_tile_index* [ %85, %89 ], [ %101, %94 ]
  %105 = bitcast %struct.opj_tile_index* %104 to i8*
  tail call void @opj_free(i8* %105) #12
  %106 = load i8*, i8** %31, align 8
  tail call void @opj_free(i8* %106) #12
  tail call void @opj_free(i8* nonnull %2) #12
  br label %198

107:                                              ; preds = %69
  %108 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %6, align 8
  %109 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %108, i64 0, i32 7
  %110 = load %struct.opj_tile_index*, %struct.opj_tile_index** %109, align 8
  %111 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %110, i64 %72, i32 6
  %112 = load %struct.opj_marker_info*, %struct.opj_marker_info** %111, align 8
  %113 = icmp eq %struct.opj_marker_info* %112, null
  %114 = bitcast %struct.opj_marker_info* %87 to i8*
  br i1 %113, label %121, label %115

115:                                              ; preds = %107
  %116 = bitcast %struct.opj_marker_info* %112 to i8*
  %117 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %85, i64 %72, i32 5
  %118 = load i32, i32* %117, align 8
  %119 = zext i32 %118 to i64
  %120 = mul nuw nsw i64 %119, 24
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %114, i8* nonnull align 8 %116, i64 %120, i1 false)
  br label %124

121:                                              ; preds = %107
  tail call void @opj_free(i8* nonnull %114) #12
  %122 = load %struct.opj_tile_index*, %struct.opj_tile_index** %54, align 8
  %123 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %122, i64 %72, i32 6
  store %struct.opj_marker_info* null, %struct.opj_marker_info** %123, align 8
  br label %124

124:                                              ; preds = %121, %115
  %125 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %6, align 8
  %126 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %125, i64 0, i32 7
  %127 = load %struct.opj_tile_index*, %struct.opj_tile_index** %126, align 8
  %128 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %127, i64 %72, i32 1
  %129 = load i32, i32* %128, align 4
  %130 = load %struct.opj_tile_index*, %struct.opj_tile_index** %54, align 8
  %131 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %130, i64 %72, i32 1
  store i32 %129, i32* %131, align 4
  %132 = load %struct.opj_tile_index*, %struct.opj_tile_index** %54, align 8
  %133 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %132, i64 %72, i32 1
  %134 = load i32, i32* %133, align 4
  %135 = zext i32 %134 to i64
  %136 = mul nuw nsw i64 %135, 24
  %137 = tail call i8* @opj_malloc(i64 %136) #12
  %138 = load %struct.opj_tile_index*, %struct.opj_tile_index** %54, align 8
  %139 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %138, i64 %72, i32 4
  %140 = bitcast %struct.opj_tp_index** %139 to i8**
  store i8* %137, i8** %140, align 8
  %141 = load %struct.opj_tile_index*, %struct.opj_tile_index** %54, align 8
  %142 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %141, i64 %72, i32 4
  %143 = load %struct.opj_tp_index*, %struct.opj_tp_index** %142, align 8
  %144 = icmp eq %struct.opj_tp_index* %143, null
  br i1 %144, label %145, label %167

145:                                              ; preds = %124
  %146 = trunc i64 %72 to i32
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %163, label %148

148:                                              ; preds = %145
  %149 = and i64 %72, 4294967295
  br label %150

150:                                              ; preds = %150, %148
  %151 = phi i64 [ 0, %148 ], [ %160, %150 ]
  %152 = phi %struct.opj_tile_index* [ %141, %148 ], [ %161, %150 ]
  %153 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %152, i64 %151, i32 6
  %154 = bitcast %struct.opj_marker_info** %153 to i8**
  %155 = load i8*, i8** %154, align 8
  tail call void @opj_free(i8* %155) #12
  %156 = load %struct.opj_tile_index*, %struct.opj_tile_index** %54, align 8
  %157 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %156, i64 %151, i32 4
  %158 = bitcast %struct.opj_tp_index** %157 to i8**
  %159 = load i8*, i8** %158, align 8
  tail call void @opj_free(i8* %159) #12
  %160 = add nuw nsw i64 %151, 1
  %161 = load %struct.opj_tile_index*, %struct.opj_tile_index** %54, align 8
  %162 = icmp eq i64 %160, %149
  br i1 %162, label %163, label %150

163:                                              ; preds = %150, %145
  %164 = phi %struct.opj_tile_index* [ %141, %145 ], [ %161, %150 ]
  %165 = bitcast %struct.opj_tile_index* %164 to i8*
  tail call void @opj_free(i8* %165) #12
  %166 = load i8*, i8** %31, align 8
  tail call void @opj_free(i8* %166) #12
  tail call void @opj_free(i8* nonnull %2) #12
  br label %198

167:                                              ; preds = %124
  %168 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %6, align 8
  %169 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %168, i64 0, i32 7
  %170 = load %struct.opj_tile_index*, %struct.opj_tile_index** %169, align 8
  %171 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %170, i64 %72, i32 4
  %172 = load %struct.opj_tp_index*, %struct.opj_tp_index** %171, align 8
  %173 = icmp eq %struct.opj_tp_index* %172, null
  %174 = bitcast %struct.opj_tp_index* %143 to i8*
  br i1 %173, label %181, label %175

175:                                              ; preds = %167
  %176 = bitcast %struct.opj_tp_index* %172 to i8*
  %177 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %141, i64 %72, i32 1
  %178 = load i32, i32* %177, align 4
  %179 = zext i32 %178 to i64
  %180 = mul nuw nsw i64 %179, 24
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %174, i8* nonnull align 8 %176, i64 %180, i1 false)
  br label %184

181:                                              ; preds = %167
  tail call void @opj_free(i8* nonnull %174) #12
  %182 = load %struct.opj_tile_index*, %struct.opj_tile_index** %54, align 8
  %183 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %182, i64 %72, i32 4
  store %struct.opj_tp_index* null, %struct.opj_tp_index** %183, align 8
  br label %184

184:                                              ; preds = %181, %175
  %185 = load %struct.opj_tile_index*, %struct.opj_tile_index** %54, align 8
  %186 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %185, i64 %72, i32 8
  store i32 0, i32* %186, align 4
  %187 = load %struct.opj_tile_index*, %struct.opj_tile_index** %54, align 8
  %188 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %187, i64 %72, i32 9
  store %struct.opj_packet_info* null, %struct.opj_packet_info** %188, align 8
  %189 = add nuw nsw i64 %72, 1
  %190 = load i32, i32* %50, align 4
  %191 = zext i32 %190 to i64
  %192 = icmp ult i64 %189, %191
  br i1 %192, label %193, label %198

193:                                              ; preds = %184
  %194 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %6, align 8
  %195 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %194, i64 0, i32 7
  %196 = load %struct.opj_tile_index*, %struct.opj_tile_index** %195, align 8
  %197 = load %struct.opj_tile_index*, %struct.opj_tile_index** %54, align 8
  br label %69

198:                                              ; preds = %184, %65, %68, %103, %163, %1, %58, %33
  %199 = phi %struct.opj_codestream_index* [ null, %58 ], [ null, %33 ], [ null, %1 ], [ null, %163 ], [ null, %103 ], [ %3, %68 ], [ %3, %65 ], [ %3, %184 ]
  ret %struct.opj_codestream_index* %199
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_j2k_decode(%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_image*, %struct.opj_event_mgr*) local_unnamed_addr #3 {
  %5 = icmp eq %struct.opj_image* %2, null
  br i1 %5, label %96, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 20, i32 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %54, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %12 = load %struct.opj_image*, %struct.opj_image** %11, align 8
  %13 = icmp eq %struct.opj_image* %12, null
  br i1 %13, label %54, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %12, i64 0, i32 4
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %54, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %12, i64 0, i32 6
  %20 = load %struct.opj_image_comp*, %struct.opj_image_comp** %19, align 8
  %21 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %20, i64 0, i32 10
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, %8
  br i1 %23, label %24, label %54

24:                                               ; preds = %18
  %25 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 4
  %26 = load i32, i32* %25, align 8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %54, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 6
  %30 = load %struct.opj_image_comp*, %struct.opj_image_comp** %29, align 8
  %31 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %30, i64 0, i32 10
  %32 = load i32, i32* %31, align 8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %54

34:                                               ; preds = %28
  %35 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %30, i64 0, i32 11
  %36 = load i32*, i32** %35, align 8
  %37 = icmp eq i32* %36, null
  br i1 %37, label %38, label %54

38:                                               ; preds = %34
  %39 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %30, i64 0, i32 10
  store i32 %8, i32* %39, align 8
  %40 = load i32, i32* %25, align 8
  %41 = icmp ugt i32 %40, 1
  br i1 %41, label %42, label %51

42:                                               ; preds = %38, %42
  %43 = phi i64 [ %47, %42 ], [ 1, %38 ]
  %44 = load i32, i32* %7, align 8
  %45 = load %struct.opj_image_comp*, %struct.opj_image_comp** %29, align 8
  %46 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %45, i64 %43, i32 10
  store i32 %44, i32* %46, align 8
  %47 = add nuw nsw i64 %43, 1
  %48 = load i32, i32* %25, align 8
  %49 = zext i32 %48 to i64
  %50 = icmp ult i64 %47, %49
  br i1 %50, label %42, label %51

51:                                               ; preds = %42, %38
  %52 = tail call fastcc i32 @opj_j2k_update_image_dimensions(%struct.opj_image* nonnull %2, %struct.opj_event_mgr* %3)
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %96, label %54

54:                                               ; preds = %51, %24, %14, %10, %6, %34, %28, %18
  %55 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 3
  %56 = load %struct.opj_image*, %struct.opj_image** %55, align 8
  %57 = icmp eq %struct.opj_image* %56, null
  br i1 %57, label %58, label %61

58:                                               ; preds = %54
  %59 = tail call %struct.opj_image* @opj_image_create0() #12
  store %struct.opj_image* %59, %struct.opj_image** %55, align 8
  %60 = icmp eq %struct.opj_image* %59, null
  br i1 %60, label %96, label %61

61:                                               ; preds = %58, %54
  %62 = phi %struct.opj_image* [ %59, %58 ], [ %56, %54 ]
  tail call void @opj_copy_image_header(%struct.opj_image* nonnull %2, %struct.opj_image* nonnull %62) #12
  %63 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 5
  %64 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %63, align 8
  %65 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %64, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_decode_tiles to void ()*), %struct.opj_event_mgr* %3) #12
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %96, label %67

67:                                               ; preds = %61
  %68 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %63, align 8
  %69 = tail call i32 @opj_procedure_list_get_nb_procedures(%struct.opj_procedure_list* %68) #12
  %70 = tail call void ()** @opj_procedure_list_get_first_procedure(%struct.opj_procedure_list* %68) #12
  %71 = icmp eq i32 %69, 0
  br i1 %71, label %72, label %73

72:                                               ; preds = %67
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %68) #12
  br label %94

73:                                               ; preds = %67
  %74 = bitcast void ()** %70 to i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)**
  br label %75

75:                                               ; preds = %84, %73
  %76 = phi i32 [ %88, %84 ], [ 0, %73 ]
  %77 = phi i32 [ %86, %84 ], [ 1, %73 ]
  %78 = phi i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** [ %87, %84 ], [ %74, %73 ]
  %79 = icmp eq i32 %77, 0
  br i1 %79, label %84, label %80

80:                                               ; preds = %75
  %81 = load i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %78, align 8
  %82 = tail call i32 %81(%struct.opj_j2k* %0, %struct.opj_stream_private* %1, %struct.opj_event_mgr* %3) #12
  %83 = icmp ne i32 %82, 0
  br label %84

84:                                               ; preds = %80, %75
  %85 = phi i1 [ false, %75 ], [ %83, %80 ]
  %86 = zext i1 %85 to i32
  %87 = getelementptr inbounds i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %78, i64 1
  %88 = add nuw i32 %76, 1
  %89 = icmp eq i32 %88, %69
  br i1 %89, label %90, label %75

90:                                               ; preds = %84
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %68) #12
  br i1 %85, label %94, label %91

91:                                               ; preds = %90
  %92 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %93 = load %struct.opj_image*, %struct.opj_image** %92, align 8
  tail call void @opj_image_destroy(%struct.opj_image* %93) #12
  store %struct.opj_image* null, %struct.opj_image** %92, align 8
  br label %96

94:                                               ; preds = %90, %72
  %95 = tail call fastcc i32 @opj_j2k_move_data_from_codec_to_output_image(%struct.opj_j2k* %0, %struct.opj_image* nonnull %2)
  br label %96

96:                                               ; preds = %51, %61, %58, %4, %94, %91
  %97 = phi i32 [ %95, %94 ], [ 0, %91 ], [ 0, %51 ], [ 0, %4 ], [ 0, %58 ], [ 0, %61 ]
  ret i32 %97
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @opj_j2k_move_data_from_codec_to_output_image(%struct.opj_j2k* nocapture, %struct.opj_image* nocapture) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 12
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %13

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 4
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %143, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 3
  %12 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 6
  br label %113

13:                                               ; preds = %2
  %14 = zext i32 %4 to i64
  %15 = shl nuw nsw i64 %14, 6
  %16 = tail call i8* @opj_malloc(i64 %15) #12
  %17 = bitcast i8* %16 to %struct.opj_image_comp*
  %18 = icmp eq i8* %16, null
  br i1 %18, label %25, label %19

19:                                               ; preds = %13
  %20 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 4
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %28, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 6
  br label %35

25:                                               ; preds = %13
  %26 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %27 = load %struct.opj_image*, %struct.opj_image** %26, align 8
  tail call void @opj_image_destroy(%struct.opj_image* %27) #12
  store %struct.opj_image* null, %struct.opj_image** %26, align 8
  br label %143

28:                                               ; preds = %35, %19
  %29 = phi i32 [ 0, %19 ], [ %44, %35 ]
  %30 = load i32, i32* %3, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %49, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 13
  %34 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 3
  br label %55

35:                                               ; preds = %23, %35
  %36 = phi i64 [ 0, %23 ], [ %43, %35 ]
  %37 = load %struct.opj_image_comp*, %struct.opj_image_comp** %24, align 8
  %38 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %37, i64 %36, i32 11
  %39 = bitcast i32** %38 to i8**
  %40 = load i8*, i8** %39, align 8
  tail call void @opj_image_data_free(i8* %40) #12
  %41 = load %struct.opj_image_comp*, %struct.opj_image_comp** %24, align 8
  %42 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %41, i64 %36, i32 11
  store i32* null, i32** %42, align 8
  %43 = add nuw nsw i64 %36, 1
  %44 = load i32, i32* %20, align 8
  %45 = zext i32 %44 to i64
  %46 = icmp ult i64 %43, %45
  br i1 %46, label %35, label %28

47:                                               ; preds = %55
  %48 = load i32, i32* %20, align 8
  br label %49

49:                                               ; preds = %47, %28
  %50 = phi i32 [ %87, %47 ], [ 0, %28 ]
  %51 = phi i32 [ %48, %47 ], [ %29, %28 ]
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %108, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 3
  br label %90

55:                                               ; preds = %32, %55
  %56 = phi i64 [ 0, %32 ], [ %86, %55 ]
  %57 = load i32*, i32** %33, align 8
  %58 = getelementptr inbounds i32, i32* %57, i64 %56
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %17, i64 %56
  %61 = bitcast %struct.opj_image_comp* %60 to i8*
  %62 = load %struct.opj_image*, %struct.opj_image** %34, align 8
  %63 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %62, i64 0, i32 6
  %64 = load %struct.opj_image_comp*, %struct.opj_image_comp** %63, align 8
  %65 = zext i32 %59 to i64
  %66 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %64, i64 %65
  %67 = bitcast %struct.opj_image_comp* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %67, i64 64, i1 false)
  %68 = load %struct.opj_image*, %struct.opj_image** %34, align 8
  %69 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %68, i64 0, i32 6
  %70 = load %struct.opj_image_comp*, %struct.opj_image_comp** %69, align 8
  %71 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %70, i64 %65, i32 9
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %17, i64 %56, i32 9
  store i32 %72, i32* %73, align 4
  %74 = load %struct.opj_image*, %struct.opj_image** %34, align 8
  %75 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %74, i64 0, i32 6
  %76 = load %struct.opj_image_comp*, %struct.opj_image_comp** %75, align 8
  %77 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %76, i64 %65, i32 11
  %78 = bitcast i32** %77 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %17, i64 %56, i32 11
  %81 = bitcast i32** %80 to i64*
  store i64 %79, i64* %81, align 8
  %82 = load %struct.opj_image*, %struct.opj_image** %34, align 8
  %83 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %82, i64 0, i32 6
  %84 = load %struct.opj_image_comp*, %struct.opj_image_comp** %83, align 8
  %85 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %84, i64 %65, i32 11
  store i32* null, i32** %85, align 8
  %86 = add nuw nsw i64 %56, 1
  %87 = load i32, i32* %3, align 4
  %88 = zext i32 %87 to i64
  %89 = icmp ult i64 %86, %88
  br i1 %89, label %55, label %47

90:                                               ; preds = %53, %90
  %91 = phi i64 [ 0, %53 ], [ %102, %90 ]
  %92 = load %struct.opj_image*, %struct.opj_image** %54, align 8
  %93 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %92, i64 0, i32 6
  %94 = load %struct.opj_image_comp*, %struct.opj_image_comp** %93, align 8
  %95 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %94, i64 %91, i32 11
  %96 = bitcast i32** %95 to i8**
  %97 = load i8*, i8** %96, align 8
  tail call void @opj_image_data_free(i8* %97) #12
  %98 = load %struct.opj_image*, %struct.opj_image** %54, align 8
  %99 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %98, i64 0, i32 6
  %100 = load %struct.opj_image_comp*, %struct.opj_image_comp** %99, align 8
  %101 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %100, i64 %91, i32 11
  store i32* null, i32** %101, align 8
  %102 = add nuw nsw i64 %91, 1
  %103 = load i32, i32* %20, align 8
  %104 = zext i32 %103 to i64
  %105 = icmp ult i64 %102, %104
  br i1 %105, label %90, label %106

106:                                              ; preds = %90
  %107 = load i32, i32* %3, align 4
  br label %108

108:                                              ; preds = %106, %49
  %109 = phi i32 [ %107, %106 ], [ %50, %49 ]
  store i32 %109, i32* %20, align 8
  %110 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 6
  %111 = bitcast %struct.opj_image_comp** %110 to i8**
  %112 = load i8*, i8** %111, align 8
  tail call void @opj_free(i8* %112) #12
  store i8* %16, i8** %111, align 8
  br label %143

113:                                              ; preds = %10, %113
  %114 = phi i64 [ 0, %10 ], [ %139, %113 ]
  %115 = load %struct.opj_image*, %struct.opj_image** %11, align 8
  %116 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %115, i64 0, i32 6
  %117 = load %struct.opj_image_comp*, %struct.opj_image_comp** %116, align 8
  %118 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %117, i64 %114, i32 9
  %119 = load i32, i32* %118, align 4
  %120 = load %struct.opj_image_comp*, %struct.opj_image_comp** %12, align 8
  %121 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %120, i64 %114, i32 9
  store i32 %119, i32* %121, align 4
  %122 = load %struct.opj_image_comp*, %struct.opj_image_comp** %12, align 8
  %123 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %122, i64 %114, i32 11
  %124 = bitcast i32** %123 to i8**
  %125 = load i8*, i8** %124, align 8
  tail call void @opj_image_data_free(i8* %125) #12
  %126 = load %struct.opj_image*, %struct.opj_image** %11, align 8
  %127 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %126, i64 0, i32 6
  %128 = load %struct.opj_image_comp*, %struct.opj_image_comp** %127, align 8
  %129 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %128, i64 %114, i32 11
  %130 = bitcast i32** %129 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = load %struct.opj_image_comp*, %struct.opj_image_comp** %12, align 8
  %133 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %132, i64 %114, i32 11
  %134 = bitcast i32** %133 to i64*
  store i64 %131, i64* %134, align 8
  %135 = load %struct.opj_image*, %struct.opj_image** %11, align 8
  %136 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %135, i64 0, i32 6
  %137 = load %struct.opj_image_comp*, %struct.opj_image_comp** %136, align 8
  %138 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %137, i64 %114, i32 11
  store i32* null, i32** %138, align 8
  %139 = add nuw nsw i64 %114, 1
  %140 = load i32, i32* %7, align 8
  %141 = zext i32 %140 to i64
  %142 = icmp ult i64 %139, %141
  br i1 %142, label %113, label %143

143:                                              ; preds = %113, %6, %108, %25
  %144 = phi i32 [ 0, %25 ], [ 1, %108 ], [ 1, %6 ], [ 1, %113 ]
  ret i32 %144
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_j2k_get_tile(%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_image*, %struct.opj_event_mgr*, i32) local_unnamed_addr #3 {
  %6 = icmp eq %struct.opj_image* %2, null
  br i1 %6, label %7, label %9

7:                                                ; preds = %5
  %8 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.80, i64 0, i64 0)) #12
  br label %226

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 4
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %13 = load %struct.opj_image*, %struct.opj_image** %12, align 8
  %14 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %13, i64 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = icmp ult i32 %11, %15
  br i1 %16, label %17, label %19

17:                                               ; preds = %9
  %18 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.81, i64 0, i64 0)) #12
  br label %226

19:                                               ; preds = %9
  %20 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 6
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 7
  %23 = load i32, i32* %22, align 4
  %24 = mul i32 %23, %21
  %25 = icmp ugt i32 %24, %4
  br i1 %25, label %29, label %26

26:                                               ; preds = %19
  %27 = add i32 %24, -1
  %28 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.82, i64 0, i64 0), i32 %4, i32 %27) #12
  br label %226

29:                                               ; preds = %19
  %30 = urem i32 %4, %21
  %31 = udiv i32 %4, %21
  %32 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = mul i32 %33, %30
  %35 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = add i32 %34, %36
  %38 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 0
  store i32 %37, i32* %38, align 8
  %39 = load %struct.opj_image*, %struct.opj_image** %12, align 8
  %40 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %39, i64 0, i32 0
  %41 = load i32, i32* %40, align 8
  %42 = icmp ult i32 %37, %41
  %43 = select i1 %42, i32 %41, i32 %37
  store i32 %43, i32* %38, align 8
  %44 = add nuw i32 %30, 1
  %45 = load i32, i32* %32, align 4
  %46 = mul i32 %45, %44
  %47 = load i32, i32* %35, align 4
  %48 = add i32 %46, %47
  %49 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 2
  store i32 %48, i32* %49, align 8
  %50 = load %struct.opj_image*, %struct.opj_image** %12, align 8
  %51 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %50, i64 0, i32 2
  %52 = load i32, i32* %51, align 8
  %53 = icmp ugt i32 %48, %52
  %54 = select i1 %53, i32 %52, i32 %48
  store i32 %54, i32* %49, align 8
  %55 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 4
  %56 = load i32, i32* %55, align 8
  %57 = mul i32 %56, %31
  %58 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 2
  %59 = load i32, i32* %58, align 8
  %60 = add i32 %57, %59
  %61 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 1
  store i32 %60, i32* %61, align 4
  %62 = load %struct.opj_image*, %struct.opj_image** %12, align 8
  %63 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %62, i64 0, i32 1
  %64 = load i32, i32* %63, align 4
  %65 = icmp ult i32 %60, %64
  %66 = select i1 %65, i32 %64, i32 %60
  store i32 %66, i32* %61, align 4
  %67 = add nuw i32 %31, 1
  %68 = load i32, i32* %55, align 8
  %69 = mul i32 %68, %67
  %70 = load i32, i32* %58, align 8
  %71 = add i32 %69, %70
  %72 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 3
  store i32 %71, i32* %72, align 4
  %73 = load %struct.opj_image*, %struct.opj_image** %12, align 8
  %74 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %73, i64 0, i32 3
  %75 = load i32, i32* %74, align 4
  %76 = icmp ugt i32 %71, %75
  %77 = select i1 %76, i32 %75, i32 %71
  store i32 %77, i32* %72, align 4
  %78 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 6
  %79 = load %struct.opj_image*, %struct.opj_image** %12, align 8
  %80 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %79, i64 0, i32 4
  %81 = load i32, i32* %80, align 8
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %162, label %83

83:                                               ; preds = %29
  %84 = load %struct.opj_image_comp*, %struct.opj_image_comp** %78, align 8
  br label %85

85:                                               ; preds = %83, %85
  %86 = phi i64 [ 0, %83 ], [ %154, %85 ]
  %87 = phi %struct.opj_image* [ %79, %83 ], [ %155, %85 ]
  %88 = phi %struct.opj_image_comp* [ %84, %83 ], [ %153, %85 ]
  %89 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %87, i64 0, i32 6
  %90 = load %struct.opj_image_comp*, %struct.opj_image_comp** %89, align 8
  %91 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %90, i64 %86, i32 10
  %92 = load i32, i32* %91, align 8
  %93 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %88, i64 0, i32 10
  store i32 %92, i32* %93, align 8
  %94 = load i32, i32* %38, align 8
  %95 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %88, i64 0, i32 0
  %96 = load i32, i32* %95, align 8
  %97 = zext i32 %94 to i64
  %98 = zext i32 %96 to i64
  %99 = add nsw i64 %97, -1
  %100 = add nsw i64 %99, %98
  %101 = udiv i64 %100, %98
  %102 = trunc i64 %101 to i32
  %103 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %88, i64 0, i32 4
  store i32 %102, i32* %103, align 8
  %104 = load i32, i32* %61, align 4
  %105 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %88, i64 0, i32 1
  %106 = load i32, i32* %105, align 4
  %107 = zext i32 %104 to i64
  %108 = zext i32 %106 to i64
  %109 = add nsw i64 %107, -1
  %110 = add nsw i64 %109, %108
  %111 = udiv i64 %110, %108
  %112 = trunc i64 %111 to i32
  %113 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %88, i64 0, i32 5
  store i32 %112, i32* %113, align 4
  %114 = load i32, i32* %49, align 8
  %115 = sext i32 %114 to i64
  %116 = sext i32 %96 to i64
  %117 = add nsw i64 %116, -1
  %118 = add nsw i64 %117, %115
  %119 = sdiv i64 %118, %116
  %120 = load i32, i32* %72, align 4
  %121 = sext i32 %120 to i64
  %122 = sext i32 %106 to i64
  %123 = add nsw i64 %122, -1
  %124 = add nsw i64 %123, %121
  %125 = sdiv i64 %124, %122
  %126 = shl i64 %119, 32
  %127 = ashr exact i64 %126, 32
  %128 = zext i32 %92 to i64
  %129 = shl nsw i64 -1, %128
  %130 = xor i64 %129, -1
  %131 = add i64 %127, %130
  %132 = ashr i64 %131, %128
  %133 = trunc i64 %132 to i32
  %134 = shl i64 %101, 32
  %135 = ashr exact i64 %134, 32
  %136 = add i64 %135, %130
  %137 = ashr i64 %136, %128
  %138 = trunc i64 %137 to i32
  %139 = sub nsw i32 %133, %138
  %140 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %88, i64 0, i32 2
  store i32 %139, i32* %140, align 8
  %141 = shl i64 %125, 32
  %142 = ashr exact i64 %141, 32
  %143 = add i64 %142, %130
  %144 = ashr i64 %143, %128
  %145 = trunc i64 %144 to i32
  %146 = shl i64 %111, 32
  %147 = ashr exact i64 %146, 32
  %148 = add i64 %147, %130
  %149 = ashr i64 %148, %128
  %150 = trunc i64 %149 to i32
  %151 = sub nsw i32 %145, %150
  %152 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %88, i64 0, i32 3
  store i32 %151, i32* %152, align 4
  %153 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %88, i64 1
  %154 = add nuw nsw i64 %86, 1
  %155 = load %struct.opj_image*, %struct.opj_image** %12, align 8
  %156 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %155, i64 0, i32 4
  %157 = load i32, i32* %156, align 8
  %158 = zext i32 %157 to i64
  %159 = icmp ult i64 %154, %158
  br i1 %159, label %85, label %160

160:                                              ; preds = %85
  %161 = load i32, i32* %10, align 8
  br label %162

162:                                              ; preds = %160, %29
  %163 = phi i32 [ %11, %29 ], [ %161, %160 ]
  %164 = phi i32 [ 0, %29 ], [ %157, %160 ]
  %165 = icmp ugt i32 %163, %164
  br i1 %165, label %166, label %184

166:                                              ; preds = %162
  %167 = zext i32 %164 to i64
  br label %168

168:                                              ; preds = %166, %168
  %169 = phi i64 [ %167, %166 ], [ %176, %168 ]
  %170 = load %struct.opj_image_comp*, %struct.opj_image_comp** %78, align 8
  %171 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %170, i64 %169, i32 11
  %172 = bitcast i32** %171 to i8**
  %173 = load i8*, i8** %172, align 8
  tail call void @opj_image_data_free(i8* %173) #12
  %174 = load %struct.opj_image_comp*, %struct.opj_image_comp** %78, align 8
  %175 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %174, i64 %169, i32 11
  store i32* null, i32** %175, align 8
  %176 = add nuw nsw i64 %169, 1
  %177 = load i32, i32* %10, align 8
  %178 = zext i32 %177 to i64
  %179 = icmp ult i64 %176, %178
  br i1 %179, label %168, label %180

180:                                              ; preds = %168
  %181 = load %struct.opj_image*, %struct.opj_image** %12, align 8
  %182 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %181, i64 0, i32 4
  %183 = load i32, i32* %182, align 8
  store i32 %183, i32* %10, align 8
  br label %184

184:                                              ; preds = %180, %162
  %185 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 3
  %186 = load %struct.opj_image*, %struct.opj_image** %185, align 8
  %187 = icmp eq %struct.opj_image* %186, null
  br i1 %187, label %189, label %188

188:                                              ; preds = %184
  tail call void @opj_image_destroy(%struct.opj_image* nonnull %186) #12
  br label %189

189:                                              ; preds = %184, %188
  %190 = tail call %struct.opj_image* @opj_image_create0() #12
  store %struct.opj_image* %190, %struct.opj_image** %185, align 8
  %191 = icmp eq %struct.opj_image* %190, null
  br i1 %191, label %226, label %192

192:                                              ; preds = %189
  tail call void @opj_copy_image_header(%struct.opj_image* nonnull %2, %struct.opj_image* nonnull %190) #12
  %193 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 9
  store i32 %4, i32* %193, align 8
  %194 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 5
  %195 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %194, align 8
  %196 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %195, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_decode_one_tile to void ()*), %struct.opj_event_mgr* %3) #12
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %226, label %198

198:                                              ; preds = %192
  %199 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %194, align 8
  %200 = tail call i32 @opj_procedure_list_get_nb_procedures(%struct.opj_procedure_list* %199) #12
  %201 = tail call void ()** @opj_procedure_list_get_first_procedure(%struct.opj_procedure_list* %199) #12
  %202 = icmp eq i32 %200, 0
  br i1 %202, label %203, label %204

203:                                              ; preds = %198
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %199) #12
  br label %224

204:                                              ; preds = %198
  %205 = bitcast void ()** %201 to i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)**
  br label %206

206:                                              ; preds = %215, %204
  %207 = phi i32 [ %219, %215 ], [ 0, %204 ]
  %208 = phi i32 [ %217, %215 ], [ 1, %204 ]
  %209 = phi i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** [ %218, %215 ], [ %205, %204 ]
  %210 = icmp eq i32 %208, 0
  br i1 %210, label %215, label %211

211:                                              ; preds = %206
  %212 = load i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %209, align 8
  %213 = tail call i32 %212(%struct.opj_j2k* %0, %struct.opj_stream_private* %1, %struct.opj_event_mgr* %3) #12
  %214 = icmp ne i32 %213, 0
  br label %215

215:                                              ; preds = %211, %206
  %216 = phi i1 [ false, %206 ], [ %214, %211 ]
  %217 = zext i1 %216 to i32
  %218 = getelementptr inbounds i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %209, i64 1
  %219 = add nuw i32 %207, 1
  %220 = icmp eq i32 %219, %200
  br i1 %220, label %221, label %206

221:                                              ; preds = %215
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %199) #12
  br i1 %216, label %224, label %222

222:                                              ; preds = %221
  %223 = load %struct.opj_image*, %struct.opj_image** %12, align 8
  tail call void @opj_image_destroy(%struct.opj_image* %223) #12
  store %struct.opj_image* null, %struct.opj_image** %12, align 8
  br label %226

224:                                              ; preds = %221, %203
  %225 = tail call fastcc i32 @opj_j2k_move_data_from_codec_to_output_image(%struct.opj_j2k* %0, %struct.opj_image* nonnull %2)
  br label %226

226:                                              ; preds = %192, %189, %224, %222, %26, %17, %7
  %227 = phi i32 [ 0, %17 ], [ 0, %26 ], [ %225, %224 ], [ 0, %222 ], [ 0, %7 ], [ 0, %189 ], [ 0, %192 ]
  ret i32 %227
}

declare hidden void @opj_image_data_free(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_j2k_set_decoded_resolution_factor(%struct.opj_j2k* nocapture, i32, %struct.opj_event_mgr*) local_unnamed_addr #3 {
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 20, i32 0, i32 0
  store i32 %1, i32* %4, align 8
  %5 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %6 = load %struct.opj_image*, %struct.opj_image** %5, align 8
  %7 = icmp eq %struct.opj_image* %6, null
  br i1 %7, label %49, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %6, i64 0, i32 6
  %10 = load %struct.opj_image_comp*, %struct.opj_image_comp** %9, align 8
  %11 = icmp eq %struct.opj_image_comp* %10, null
  br i1 %11, label %49, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 1
  %14 = load %struct.opj_tcp*, %struct.opj_tcp** %13, align 8
  %15 = icmp eq %struct.opj_tcp* %14, null
  br i1 %15, label %49, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %14, i64 0, i32 15
  %18 = load %struct.opj_tccp*, %struct.opj_tccp** %17, align 8
  %19 = icmp eq %struct.opj_tccp* %18, null
  br i1 %19, label %49, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %6, i64 0, i32 4
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %49, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %18, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = icmp ugt i32 %26, %1
  br i1 %27, label %30, label %28

28:                                               ; preds = %42, %24
  %29 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.83, i64 0, i64 0)) #12
  br label %49

30:                                               ; preds = %24, %42
  %31 = phi %struct.opj_image* [ %37, %42 ], [ %6, %24 ]
  %32 = phi i64 [ %36, %42 ], [ 0, %24 ]
  %33 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %31, i64 0, i32 6
  %34 = load %struct.opj_image_comp*, %struct.opj_image_comp** %33, align 8
  %35 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %34, i64 %32, i32 10
  store i32 %1, i32* %35, align 8
  %36 = add nuw nsw i64 %32, 1
  %37 = load %struct.opj_image*, %struct.opj_image** %5, align 8
  %38 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %37, i64 0, i32 4
  %39 = load i32, i32* %38, align 8
  %40 = zext i32 %39 to i64
  %41 = icmp ult i64 %36, %40
  br i1 %41, label %42, label %49

42:                                               ; preds = %30
  %43 = load %struct.opj_tcp*, %struct.opj_tcp** %13, align 8
  %44 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %43, i64 0, i32 15
  %45 = load %struct.opj_tccp*, %struct.opj_tccp** %44, align 8
  %46 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %45, i64 %36, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = icmp ugt i32 %47, %1
  br i1 %48, label %30, label %28

49:                                               ; preds = %30, %20, %3, %8, %12, %16, %28
  %50 = phi i32 [ 0, %28 ], [ 0, %16 ], [ 0, %12 ], [ 0, %8 ], [ 0, %3 ], [ 1, %20 ], [ 1, %30 ]
  ret i32 %50
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_j2k_encoder_set_extra_options(%struct.opj_j2k* nocapture, i8** readonly, %struct.opj_event_mgr*) local_unnamed_addr #3 {
  %4 = icmp eq i8** %1, null
  br i1 %4, label %30, label %5

5:                                                ; preds = %3
  %6 = load i8*, i8** %1, align 8
  %7 = icmp eq i8* %6, null
  br i1 %7, label %30, label %8

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 12
  br label %10

10:                                               ; preds = %8, %25
  %11 = phi i8* [ %6, %8 ], [ %28, %25 ]
  %12 = phi i8** [ %1, %8 ], [ %27, %25 ]
  %13 = tail call i32 @strncmp(i8* nonnull %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.84, i64 0, i64 0), i64 4) #13
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %23

15:                                               ; preds = %10
  %16 = tail call i32 @strcmp(i8* nonnull %11, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.85, i64 0, i64 0)) #13
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %25, label %18

18:                                               ; preds = %15
  %19 = tail call i32 @strcmp(i8* nonnull %11, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.86, i64 0, i64 0)) #13
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %18
  %22 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.87, i64 0, i64 0), i8* nonnull %11) #12
  br label %30

23:                                               ; preds = %10
  %24 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.88, i64 0, i64 0), i8* nonnull %11) #12
  br label %30

25:                                               ; preds = %18, %15
  %26 = phi i32 [ 1, %15 ], [ 0, %18 ]
  store i32 %26, i32* %9, align 4
  %27 = getelementptr inbounds i8*, i8** %12, i64 1
  %28 = load i8*, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %30, label %10

30:                                               ; preds = %25, %5, %3, %23, %21
  %31 = phi i32 [ 0, %21 ], [ 0, %23 ], [ 1, %3 ], [ 1, %5 ], [ 1, %25 ]
  ret i32 %31
}

; Function Attrs: nofree nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #9

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_j2k_encode(%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*) local_unnamed_addr #3 {
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 9
  %5 = load %struct.opj_tcd*, %struct.opj_tcd** %4, align 8
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 7
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 6
  %9 = load i32, i32* %8, align 8
  %10 = mul i32 %9, %7
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %73

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %5, i64 0, i32 6
  %14 = load %struct.opj_image*, %struct.opj_image** %13, align 8
  %15 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %14, i64 0, i32 4
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %76, label %18

18:                                               ; preds = %12
  %19 = zext i32 %16 to i64
  %20 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %14, i64 0, i32 6
  %21 = load %struct.opj_image_comp*, %struct.opj_image_comp** %20, align 8
  %22 = add nsw i64 %19, -1
  %23 = and i64 %19, 3
  %24 = icmp ult i64 %22, 3
  br i1 %24, label %55, label %25

25:                                               ; preds = %18
  %26 = sub nsw i64 %19, %23
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi i64 [ 0, %25 ], [ %52, %27 ]
  %29 = phi i32 [ 1, %25 ], [ %51, %27 ]
  %30 = phi i64 [ %26, %25 ], [ %53, %27 ]
  %31 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %21, i64 %28, i32 11
  %32 = bitcast i32** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = or i64 %28, 1
  %35 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %21, i64 %34, i32 11
  %36 = bitcast i32** %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = or i64 %37, %33
  %39 = or i64 %28, 2
  %40 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %21, i64 %39, i32 11
  %41 = bitcast i32** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = or i64 %42, %38
  %44 = or i64 %28, 3
  %45 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %21, i64 %44, i32 11
  %46 = bitcast i32** %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = or i64 %47, %43
  %49 = and i64 %48, 15
  %50 = icmp eq i64 %49, 0
  %51 = select i1 %50, i32 %29, i32 0
  %52 = add nuw nsw i64 %28, 4
  %53 = add i64 %30, -4
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %27

55:                                               ; preds = %27, %18
  %56 = phi i32 [ undef, %18 ], [ %51, %27 ]
  %57 = phi i64 [ 0, %18 ], [ %52, %27 ]
  %58 = phi i32 [ 1, %18 ], [ %51, %27 ]
  %59 = icmp eq i64 %23, 0
  br i1 %59, label %73, label %60

60:                                               ; preds = %55, %60
  %61 = phi i64 [ %70, %60 ], [ %57, %55 ]
  %62 = phi i32 [ %69, %60 ], [ %58, %55 ]
  %63 = phi i64 [ %71, %60 ], [ %23, %55 ]
  %64 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %21, i64 %61, i32 11
  %65 = bitcast i32** %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = and i64 %66, 15
  %68 = icmp eq i64 %67, 0
  %69 = select i1 %68, i32 %62, i32 0
  %70 = add nuw nsw i64 %61, 1
  %71 = add i64 %63, -1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %60, !llvm.loop !31

73:                                               ; preds = %55, %60, %3
  %74 = phi i32 [ 0, %3 ], [ %56, %55 ], [ %69, %60 ]
  %75 = icmp eq i32 %10, 0
  br i1 %75, label %1111, label %76

76:                                               ; preds = %12, %73
  %77 = phi i32 [ %74, %73 ], [ 1, %12 ]
  %78 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %79 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1
  %80 = bitcast %union.anon* %79 to %struct.opj_j2k_enc*
  %81 = getelementptr inbounds %struct.opj_j2k_enc, %struct.opj_j2k_enc* %80, i64 0, i32 1
  %82 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %83 = getelementptr inbounds %union.anon, %union.anon* %79, i64 0, i32 0, i32 0
  %84 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %5, i64 0, i32 5
  %85 = icmp eq i32 %77, 0
  %86 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %5, i64 0, i32 6
  %87 = zext i32 %10 to i64
  br label %90

88:                                               ; preds = %1100
  %89 = icmp eq i64 %100, %87
  br i1 %89, label %1108, label %90

90:                                               ; preds = %88, %76
  %91 = phi i64 [ 0, %76 ], [ %100, %88 ]
  %92 = phi i8* [ null, %76 ], [ %1102, %88 ]
  %93 = phi i64 [ 0, %76 ], [ %1101, %88 ]
  %94 = load i32, i32* %78, align 8
  %95 = zext i32 %94 to i64
  %96 = icmp eq i64 %91, %95
  br i1 %96, label %99, label %97

97:                                               ; preds = %90
  %98 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.278, i64 0, i64 0)) #12
  br label %122

99:                                               ; preds = %90
  %100 = add nuw nsw i64 %91, 1
  %101 = load i32, i32* %8, align 8
  %102 = load i32, i32* %6, align 4
  %103 = mul i32 %102, %101
  %104 = trunc i64 %100 to i32
  %105 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.279, i64 0, i64 0), i32 %104, i32 %103) #12
  store i32 0, i32* %81, align 4
  %106 = load %struct.opj_tcp*, %struct.opj_tcp** %82, align 8
  %107 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %106, i64 %91, i32 17
  %108 = load i32, i32* %107, align 4
  %109 = load %struct.opj_tcd*, %struct.opj_tcd** %4, align 8
  %110 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %109, i64 0, i32 3
  store i32 %108, i32* %110, align 4
  store i32 0, i32* %83, align 8
  %111 = load %struct.opj_tcd*, %struct.opj_tcd** %4, align 8
  %112 = load i32, i32* %78, align 8
  %113 = tail call i32 @opj_tcd_init_encode_tile(%struct.opj_tcd* %111, i32 %112, %struct.opj_event_mgr* %2) #12
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %122, label %115

115:                                              ; preds = %99
  %116 = load %struct.opj_tcd*, %struct.opj_tcd** %4, align 8
  %117 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %116, i64 0, i32 6
  %118 = load %struct.opj_image*, %struct.opj_image** %117, align 8
  %119 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %118, i64 0, i32 4
  %120 = load i32, i32* %119, align 8
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %159, label %125

122:                                              ; preds = %99, %97
  %123 = icmp eq i8* %92, null
  br i1 %123, label %1111, label %124

124:                                              ; preds = %122
  tail call void @opj_free(i8* nonnull %92) #12
  br label %1111

125:                                              ; preds = %115, %150
  %126 = phi i64 [ %151, %150 ], [ 0, %115 ]
  %127 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %84, align 8
  %128 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %127, i64 0, i32 0
  %129 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %128, align 8
  %130 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %129, i64 0, i32 5
  %131 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %130, align 8
  br i1 %85, label %142, label %132

132:                                              ; preds = %125
  %133 = load %struct.opj_image*, %struct.opj_image** %86, align 8
  %134 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %133, i64 0, i32 6
  %135 = load %struct.opj_image_comp*, %struct.opj_image_comp** %134, align 8
  %136 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %135, i64 %126, i32 11
  %137 = bitcast i32** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %131, i64 %126, i32 9
  %140 = bitcast i32** %139 to i64*
  store i64 %138, i64* %140, align 8
  %141 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %131, i64 %126, i32 10
  store i32 0, i32* %141, align 8
  br label %150

142:                                              ; preds = %125
  %143 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %131, i64 %126
  %144 = tail call i32 @opj_alloc_tile_component_data(%struct.opj_tcd_tilecomp* %143) #12
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %150

146:                                              ; preds = %142
  %147 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.89, i64 0, i64 0)) #12
  %148 = icmp eq i8* %92, null
  br i1 %148, label %1111, label %149

149:                                              ; preds = %146
  tail call void @opj_free(i8* nonnull %92) #12
  br label %1111

150:                                              ; preds = %142, %132
  %151 = add nuw nsw i64 %126, 1
  %152 = load %struct.opj_tcd*, %struct.opj_tcd** %4, align 8
  %153 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %152, i64 0, i32 6
  %154 = load %struct.opj_image*, %struct.opj_image** %153, align 8
  %155 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %154, i64 0, i32 4
  %156 = load i32, i32* %155, align 8
  %157 = zext i32 %156 to i64
  %158 = icmp ult i64 %151, %157
  br i1 %158, label %125, label %159

159:                                              ; preds = %150, %115
  %160 = phi %struct.opj_tcd* [ %116, %115 ], [ %152, %150 ]
  %161 = tail call i64 @opj_tcd_get_encoder_input_buffer_size(%struct.opj_tcd* %160) #12
  br i1 %85, label %162, label %1100

162:                                              ; preds = %159
  %163 = icmp ugt i64 %161, %93
  br i1 %163, label %164, label %172

164:                                              ; preds = %162
  %165 = tail call i8* @opj_realloc(i8* %92, i64 %161) #12
  %166 = icmp eq i8* %165, null
  br i1 %166, label %167, label %174

167:                                              ; preds = %164
  %168 = icmp eq i8* %92, null
  br i1 %168, label %170, label %169

169:                                              ; preds = %167
  tail call void @opj_free(i8* nonnull %92) #12
  br label %170

170:                                              ; preds = %169, %167
  %171 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.90, i64 0, i64 0)) #12
  br label %1111

172:                                              ; preds = %162
  %173 = icmp eq i8* %92, null
  br i1 %173, label %1111, label %174

174:                                              ; preds = %164, %172
  %175 = phi i8* [ %92, %172 ], [ %165, %164 ]
  %176 = phi i64 [ %93, %172 ], [ %161, %164 ]
  %177 = load %struct.opj_tcd*, %struct.opj_tcd** %4, align 8
  %178 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %177, i64 0, i32 6
  %179 = load %struct.opj_image*, %struct.opj_image** %178, align 8
  %180 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %179, i64 0, i32 4
  %181 = load i32, i32* %180, align 8
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %1094, label %183

183:                                              ; preds = %174
  %184 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %177, i64 0, i32 5
  br label %185

185:                                              ; preds = %1084, %183
  %186 = phi i64 [ 0, %183 ], [ %1086, %1084 ]
  %187 = phi %struct.opj_image* [ %179, %183 ], [ %1087, %1084 ]
  %188 = phi i8* [ %175, %183 ], [ %1085, %1084 ]
  %189 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %184, align 8
  %190 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %189, i64 0, i32 0
  %191 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %190, align 8
  %192 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %191, i64 0, i32 5
  %193 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %192, align 8
  %194 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %187, i64 0, i32 6
  %195 = load %struct.opj_image_comp*, %struct.opj_image_comp** %194, align 8
  %196 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %195, i64 %186, i32 6
  %197 = load i32, i32* %196, align 8
  %198 = lshr i32 %197, 3
  %199 = and i32 %197, 7
  %200 = icmp ne i32 %199, 0
  %201 = zext i1 %200 to i32
  %202 = add nuw nsw i32 %198, %201
  %203 = icmp eq i32 %202, 3
  %204 = or i1 %200, %203
  %205 = select i1 %203, i32 4, i32 %202
  %206 = select i1 %204, i32 %205, i32 %198
  %207 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %193, i64 %186, i32 2
  %208 = load i32, i32* %207, align 8
  %209 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %193, i64 %186, i32 0
  %210 = load i32, i32* %209, align 8
  %211 = sub i32 %208, %210
  %212 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %193, i64 %186, i32 3
  %213 = load i32, i32* %212, align 4
  %214 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %193, i64 %186, i32 1
  %215 = load i32, i32* %214, align 4
  %216 = sub i32 %213, %215
  %217 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %187, i64 0, i32 0
  %218 = load i32, i32* %217, align 8
  %219 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %195, i64 %186, i32 0
  %220 = load i32, i32* %219, align 8
  %221 = zext i32 %218 to i64
  %222 = zext i32 %220 to i64
  %223 = add nsw i64 %221, -1
  %224 = add nsw i64 %223, %222
  %225 = udiv i64 %224, %222
  %226 = trunc i64 %225 to i32
  %227 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %187, i64 0, i32 1
  %228 = load i32, i32* %227, align 4
  %229 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %195, i64 %186, i32 1
  %230 = load i32, i32* %229, align 4
  %231 = zext i32 %228 to i64
  %232 = zext i32 %230 to i64
  %233 = add nsw i64 %231, -1
  %234 = add nsw i64 %233, %232
  %235 = udiv i64 %234, %232
  %236 = trunc i64 %235 to i32
  %237 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %187, i64 0, i32 2
  %238 = load i32, i32* %237, align 8
  %239 = sub nsw i32 %238, %218
  %240 = sext i32 %239 to i64
  %241 = sext i32 %220 to i64
  %242 = add nsw i64 %241, -1
  %243 = add nsw i64 %242, %240
  %244 = sdiv i64 %243, %241
  %245 = trunc i64 %244 to i32
  %246 = sub i32 %245, %211
  %247 = sub i32 %210, %226
  %248 = sub i32 %215, %236
  %249 = mul i32 %248, %245
  %250 = add i32 %247, %249
  %251 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %195, i64 %186, i32 11
  %252 = load i32*, i32** %251, align 8
  %253 = zext i32 %250 to i64
  %254 = getelementptr inbounds i32, i32* %252, i64 %253
  switch i32 %206, label %1084 [
    i32 1, label %255
    i32 2, label %580
    i32 4, label %909
  ]

255:                                              ; preds = %185
  %256 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %195, i64 %186, i32 8
  %257 = load i32, i32* %256, align 8
  %258 = icmp eq i32 %257, 0
  %259 = icmp ne i32 %216, 0
  br i1 %258, label %284, label %260

260:                                              ; preds = %255
  br i1 %259, label %261, label %1084

261:                                              ; preds = %260
  %262 = icmp eq i32 %211, 0
  %263 = zext i32 %246 to i64
  %264 = xor i32 %210, -1
  %265 = add i32 %208, %264
  %266 = zext i32 %265 to i64
  %267 = add nuw nsw i64 %266, 1
  %268 = zext i32 %265 to i64
  %269 = and i64 %267, 8589934584
  %270 = add nsw i64 %269, -8
  %271 = lshr exact i64 %270, 3
  %272 = add nuw nsw i64 %271, 1
  %273 = sub i32 %208, %210
  %274 = xor i32 %210, -1
  %275 = add i32 %208, %274
  %276 = icmp ult i64 %267, 8
  %277 = and i64 %267, 8589934584
  %278 = trunc i64 %277 to i32
  %279 = and i64 %272, 1
  %280 = icmp eq i64 %270, 0
  %281 = sub nuw nsw i64 %272, %279
  %282 = icmp eq i64 %279, 0
  %283 = icmp eq i64 %267, %277
  br label %308

284:                                              ; preds = %255
  br i1 %259, label %285, label %1084

285:                                              ; preds = %284
  %286 = icmp eq i32 %211, 0
  %287 = zext i32 %246 to i64
  %288 = xor i32 %210, -1
  %289 = add i32 %208, %288
  %290 = zext i32 %289 to i64
  %291 = add nuw nsw i64 %290, 1
  %292 = zext i32 %289 to i64
  %293 = and i64 %291, 8589934584
  %294 = add nsw i64 %293, -8
  %295 = lshr exact i64 %294, 3
  %296 = add nuw nsw i64 %295, 1
  %297 = sub i32 %208, %210
  %298 = xor i32 %210, -1
  %299 = add i32 %208, %298
  %300 = icmp ult i64 %291, 8
  %301 = and i64 %291, 8589934584
  %302 = trunc i64 %301 to i32
  %303 = and i64 %296, 1
  %304 = icmp eq i64 %294, 0
  %305 = sub nuw nsw i64 %296, %303
  %306 = icmp eq i64 %303, 0
  %307 = icmp eq i64 %291, %301
  br label %444

308:                                              ; preds = %438, %261
  %309 = phi i8* [ %188, %261 ], [ %440, %438 ]
  %310 = phi i32* [ %254, %261 ], [ %441, %438 ]
  %311 = phi i32 [ 0, %261 ], [ %442, %438 ]
  %312 = bitcast i32* %310 to i8*
  br i1 %262, label %438, label %313

313:                                              ; preds = %308
  br i1 %276, label %373, label %314

314:                                              ; preds = %313
  %315 = getelementptr i8, i8* %309, i64 1
  %316 = getelementptr i8, i8* %315, i64 %268
  %317 = getelementptr i32, i32* %310, i64 1
  %318 = getelementptr i32, i32* %317, i64 %268
  %319 = bitcast i32* %318 to i8*
  %320 = icmp ult i8* %309, %319
  %321 = icmp ugt i8* %316, %312
  %322 = and i1 %320, %321
  br i1 %322, label %373, label %323

323:                                              ; preds = %314
  %324 = getelementptr i8, i8* %309, i64 %277
  %325 = getelementptr i32, i32* %310, i64 %277
  br i1 %280, label %357, label %326

326:                                              ; preds = %323, %326
  %327 = phi i64 [ %354, %326 ], [ 0, %323 ]
  %328 = phi i64 [ %355, %326 ], [ %281, %323 ]
  %329 = getelementptr i8, i8* %309, i64 %327
  %330 = getelementptr i32, i32* %310, i64 %327
  %331 = bitcast i32* %330 to <4 x i32>*
  %332 = load <4 x i32>, <4 x i32>* %331, align 4, !alias.scope !32
  %333 = getelementptr i32, i32* %330, i64 4
  %334 = bitcast i32* %333 to <4 x i32>*
  %335 = load <4 x i32>, <4 x i32>* %334, align 4, !alias.scope !32
  %336 = trunc <4 x i32> %332 to <4 x i8>
  %337 = trunc <4 x i32> %335 to <4 x i8>
  %338 = bitcast i8* %329 to <4 x i8>*
  store <4 x i8> %336, <4 x i8>* %338, align 1, !alias.scope !35, !noalias !32
  %339 = getelementptr i8, i8* %329, i64 4
  %340 = bitcast i8* %339 to <4 x i8>*
  store <4 x i8> %337, <4 x i8>* %340, align 1, !alias.scope !35, !noalias !32
  %341 = or i64 %327, 8
  %342 = getelementptr i8, i8* %309, i64 %341
  %343 = getelementptr i32, i32* %310, i64 %341
  %344 = bitcast i32* %343 to <4 x i32>*
  %345 = load <4 x i32>, <4 x i32>* %344, align 4, !alias.scope !32
  %346 = getelementptr i32, i32* %343, i64 4
  %347 = bitcast i32* %346 to <4 x i32>*
  %348 = load <4 x i32>, <4 x i32>* %347, align 4, !alias.scope !32
  %349 = trunc <4 x i32> %345 to <4 x i8>
  %350 = trunc <4 x i32> %348 to <4 x i8>
  %351 = bitcast i8* %342 to <4 x i8>*
  store <4 x i8> %349, <4 x i8>* %351, align 1, !alias.scope !35, !noalias !32
  %352 = getelementptr i8, i8* %342, i64 4
  %353 = bitcast i8* %352 to <4 x i8>*
  store <4 x i8> %350, <4 x i8>* %353, align 1, !alias.scope !35, !noalias !32
  %354 = add i64 %327, 16
  %355 = add i64 %328, -2
  %356 = icmp eq i64 %355, 0
  br i1 %356, label %357, label %326, !llvm.loop !37

357:                                              ; preds = %326, %323
  %358 = phi i64 [ 0, %323 ], [ %354, %326 ]
  br i1 %282, label %372, label %359

359:                                              ; preds = %357
  %360 = getelementptr i8, i8* %309, i64 %358
  %361 = getelementptr i32, i32* %310, i64 %358
  %362 = bitcast i32* %361 to <4 x i32>*
  %363 = load <4 x i32>, <4 x i32>* %362, align 4, !alias.scope !32
  %364 = getelementptr i32, i32* %361, i64 4
  %365 = bitcast i32* %364 to <4 x i32>*
  %366 = load <4 x i32>, <4 x i32>* %365, align 4, !alias.scope !32
  %367 = trunc <4 x i32> %363 to <4 x i8>
  %368 = trunc <4 x i32> %366 to <4 x i8>
  %369 = bitcast i8* %360 to <4 x i8>*
  store <4 x i8> %367, <4 x i8>* %369, align 1, !alias.scope !35, !noalias !32
  %370 = getelementptr i8, i8* %360, i64 4
  %371 = bitcast i8* %370 to <4 x i8>*
  store <4 x i8> %368, <4 x i8>* %371, align 1, !alias.scope !35, !noalias !32
  br label %372

372:                                              ; preds = %357, %359
  br i1 %283, label %438, label %373

373:                                              ; preds = %372, %314, %313
  %374 = phi i8* [ %309, %314 ], [ %309, %313 ], [ %324, %372 ]
  %375 = phi i32* [ %310, %314 ], [ %310, %313 ], [ %325, %372 ]
  %376 = phi i32 [ 0, %314 ], [ 0, %313 ], [ %278, %372 ]
  %377 = sub i32 %273, %376
  %378 = sub i32 %275, %376
  %379 = and i32 %377, 7
  %380 = icmp eq i32 %379, 0
  br i1 %380, label %393, label %381

381:                                              ; preds = %373, %381
  %382 = phi i8* [ %388, %381 ], [ %374, %373 ]
  %383 = phi i32* [ %389, %381 ], [ %375, %373 ]
  %384 = phi i32 [ %390, %381 ], [ %376, %373 ]
  %385 = phi i32 [ %391, %381 ], [ %379, %373 ]
  %386 = load i32, i32* %383, align 4
  %387 = trunc i32 %386 to i8
  store i8 %387, i8* %382, align 1
  %388 = getelementptr inbounds i8, i8* %382, i64 1
  %389 = getelementptr inbounds i32, i32* %383, i64 1
  %390 = add nuw i32 %384, 1
  %391 = add i32 %385, -1
  %392 = icmp eq i32 %391, 0
  br i1 %392, label %393, label %381, !llvm.loop !38

393:                                              ; preds = %381, %373
  %394 = phi i8* [ undef, %373 ], [ %388, %381 ]
  %395 = phi i32* [ undef, %373 ], [ %389, %381 ]
  %396 = phi i8* [ %374, %373 ], [ %388, %381 ]
  %397 = phi i32* [ %375, %373 ], [ %389, %381 ]
  %398 = phi i32 [ %376, %373 ], [ %390, %381 ]
  %399 = icmp ult i32 %378, 7
  br i1 %399, label %438, label %400

400:                                              ; preds = %393, %400
  %401 = phi i8* [ %434, %400 ], [ %396, %393 ]
  %402 = phi i32* [ %435, %400 ], [ %397, %393 ]
  %403 = phi i32 [ %436, %400 ], [ %398, %393 ]
  %404 = load i32, i32* %402, align 4
  %405 = trunc i32 %404 to i8
  store i8 %405, i8* %401, align 1
  %406 = getelementptr inbounds i8, i8* %401, i64 1
  %407 = getelementptr inbounds i32, i32* %402, i64 1
  %408 = load i32, i32* %407, align 4
  %409 = trunc i32 %408 to i8
  store i8 %409, i8* %406, align 1
  %410 = getelementptr inbounds i8, i8* %401, i64 2
  %411 = getelementptr inbounds i32, i32* %402, i64 2
  %412 = load i32, i32* %411, align 4
  %413 = trunc i32 %412 to i8
  store i8 %413, i8* %410, align 1
  %414 = getelementptr inbounds i8, i8* %401, i64 3
  %415 = getelementptr inbounds i32, i32* %402, i64 3
  %416 = load i32, i32* %415, align 4
  %417 = trunc i32 %416 to i8
  store i8 %417, i8* %414, align 1
  %418 = getelementptr inbounds i8, i8* %401, i64 4
  %419 = getelementptr inbounds i32, i32* %402, i64 4
  %420 = load i32, i32* %419, align 4
  %421 = trunc i32 %420 to i8
  store i8 %421, i8* %418, align 1
  %422 = getelementptr inbounds i8, i8* %401, i64 5
  %423 = getelementptr inbounds i32, i32* %402, i64 5
  %424 = load i32, i32* %423, align 4
  %425 = trunc i32 %424 to i8
  store i8 %425, i8* %422, align 1
  %426 = getelementptr inbounds i8, i8* %401, i64 6
  %427 = getelementptr inbounds i32, i32* %402, i64 6
  %428 = load i32, i32* %427, align 4
  %429 = trunc i32 %428 to i8
  store i8 %429, i8* %426, align 1
  %430 = getelementptr inbounds i8, i8* %401, i64 7
  %431 = getelementptr inbounds i32, i32* %402, i64 7
  %432 = load i32, i32* %431, align 4
  %433 = trunc i32 %432 to i8
  store i8 %433, i8* %430, align 1
  %434 = getelementptr inbounds i8, i8* %401, i64 8
  %435 = getelementptr inbounds i32, i32* %402, i64 8
  %436 = add nuw i32 %403, 8
  %437 = icmp eq i32 %436, %211
  br i1 %437, label %438, label %400, !llvm.loop !39

438:                                              ; preds = %393, %400, %372, %308
  %439 = phi i32* [ %310, %308 ], [ %325, %372 ], [ %395, %393 ], [ %435, %400 ]
  %440 = phi i8* [ %309, %308 ], [ %324, %372 ], [ %394, %393 ], [ %434, %400 ]
  %441 = getelementptr inbounds i32, i32* %439, i64 %263
  %442 = add nuw i32 %311, 1
  %443 = icmp eq i32 %442, %216
  br i1 %443, label %1084, label %308

444:                                              ; preds = %574, %285
  %445 = phi i8* [ %188, %285 ], [ %576, %574 ]
  %446 = phi i32* [ %254, %285 ], [ %577, %574 ]
  %447 = phi i32 [ 0, %285 ], [ %578, %574 ]
  %448 = bitcast i32* %446 to i8*
  br i1 %286, label %574, label %449

449:                                              ; preds = %444
  br i1 %300, label %509, label %450

450:                                              ; preds = %449
  %451 = getelementptr i8, i8* %445, i64 1
  %452 = getelementptr i8, i8* %451, i64 %292
  %453 = getelementptr i32, i32* %446, i64 1
  %454 = getelementptr i32, i32* %453, i64 %292
  %455 = bitcast i32* %454 to i8*
  %456 = icmp ult i8* %445, %455
  %457 = icmp ugt i8* %452, %448
  %458 = and i1 %456, %457
  br i1 %458, label %509, label %459

459:                                              ; preds = %450
  %460 = getelementptr i8, i8* %445, i64 %301
  %461 = getelementptr i32, i32* %446, i64 %301
  br i1 %304, label %493, label %462

462:                                              ; preds = %459, %462
  %463 = phi i64 [ %490, %462 ], [ 0, %459 ]
  %464 = phi i64 [ %491, %462 ], [ %305, %459 ]
  %465 = getelementptr i8, i8* %445, i64 %463
  %466 = getelementptr i32, i32* %446, i64 %463
  %467 = bitcast i32* %466 to <4 x i32>*
  %468 = load <4 x i32>, <4 x i32>* %467, align 4, !alias.scope !40
  %469 = getelementptr i32, i32* %466, i64 4
  %470 = bitcast i32* %469 to <4 x i32>*
  %471 = load <4 x i32>, <4 x i32>* %470, align 4, !alias.scope !40
  %472 = trunc <4 x i32> %468 to <4 x i8>
  %473 = trunc <4 x i32> %471 to <4 x i8>
  %474 = bitcast i8* %465 to <4 x i8>*
  store <4 x i8> %472, <4 x i8>* %474, align 1, !alias.scope !43, !noalias !40
  %475 = getelementptr i8, i8* %465, i64 4
  %476 = bitcast i8* %475 to <4 x i8>*
  store <4 x i8> %473, <4 x i8>* %476, align 1, !alias.scope !43, !noalias !40
  %477 = or i64 %463, 8
  %478 = getelementptr i8, i8* %445, i64 %477
  %479 = getelementptr i32, i32* %446, i64 %477
  %480 = bitcast i32* %479 to <4 x i32>*
  %481 = load <4 x i32>, <4 x i32>* %480, align 4, !alias.scope !40
  %482 = getelementptr i32, i32* %479, i64 4
  %483 = bitcast i32* %482 to <4 x i32>*
  %484 = load <4 x i32>, <4 x i32>* %483, align 4, !alias.scope !40
  %485 = trunc <4 x i32> %481 to <4 x i8>
  %486 = trunc <4 x i32> %484 to <4 x i8>
  %487 = bitcast i8* %478 to <4 x i8>*
  store <4 x i8> %485, <4 x i8>* %487, align 1, !alias.scope !43, !noalias !40
  %488 = getelementptr i8, i8* %478, i64 4
  %489 = bitcast i8* %488 to <4 x i8>*
  store <4 x i8> %486, <4 x i8>* %489, align 1, !alias.scope !43, !noalias !40
  %490 = add i64 %463, 16
  %491 = add i64 %464, -2
  %492 = icmp eq i64 %491, 0
  br i1 %492, label %493, label %462, !llvm.loop !45

493:                                              ; preds = %462, %459
  %494 = phi i64 [ 0, %459 ], [ %490, %462 ]
  br i1 %306, label %508, label %495

495:                                              ; preds = %493
  %496 = getelementptr i8, i8* %445, i64 %494
  %497 = getelementptr i32, i32* %446, i64 %494
  %498 = bitcast i32* %497 to <4 x i32>*
  %499 = load <4 x i32>, <4 x i32>* %498, align 4, !alias.scope !40
  %500 = getelementptr i32, i32* %497, i64 4
  %501 = bitcast i32* %500 to <4 x i32>*
  %502 = load <4 x i32>, <4 x i32>* %501, align 4, !alias.scope !40
  %503 = trunc <4 x i32> %499 to <4 x i8>
  %504 = trunc <4 x i32> %502 to <4 x i8>
  %505 = bitcast i8* %496 to <4 x i8>*
  store <4 x i8> %503, <4 x i8>* %505, align 1, !alias.scope !43, !noalias !40
  %506 = getelementptr i8, i8* %496, i64 4
  %507 = bitcast i8* %506 to <4 x i8>*
  store <4 x i8> %504, <4 x i8>* %507, align 1, !alias.scope !43, !noalias !40
  br label %508

508:                                              ; preds = %493, %495
  br i1 %307, label %574, label %509

509:                                              ; preds = %508, %450, %449
  %510 = phi i8* [ %445, %450 ], [ %445, %449 ], [ %460, %508 ]
  %511 = phi i32* [ %446, %450 ], [ %446, %449 ], [ %461, %508 ]
  %512 = phi i32 [ 0, %450 ], [ 0, %449 ], [ %302, %508 ]
  %513 = sub i32 %297, %512
  %514 = sub i32 %299, %512
  %515 = and i32 %513, 7
  %516 = icmp eq i32 %515, 0
  br i1 %516, label %529, label %517

517:                                              ; preds = %509, %517
  %518 = phi i8* [ %524, %517 ], [ %510, %509 ]
  %519 = phi i32* [ %525, %517 ], [ %511, %509 ]
  %520 = phi i32 [ %526, %517 ], [ %512, %509 ]
  %521 = phi i32 [ %527, %517 ], [ %515, %509 ]
  %522 = load i32, i32* %519, align 4
  %523 = trunc i32 %522 to i8
  store i8 %523, i8* %518, align 1
  %524 = getelementptr inbounds i8, i8* %518, i64 1
  %525 = getelementptr inbounds i32, i32* %519, i64 1
  %526 = add nuw i32 %520, 1
  %527 = add i32 %521, -1
  %528 = icmp eq i32 %527, 0
  br i1 %528, label %529, label %517, !llvm.loop !46

529:                                              ; preds = %517, %509
  %530 = phi i8* [ undef, %509 ], [ %524, %517 ]
  %531 = phi i32* [ undef, %509 ], [ %525, %517 ]
  %532 = phi i8* [ %510, %509 ], [ %524, %517 ]
  %533 = phi i32* [ %511, %509 ], [ %525, %517 ]
  %534 = phi i32 [ %512, %509 ], [ %526, %517 ]
  %535 = icmp ult i32 %514, 7
  br i1 %535, label %574, label %536

536:                                              ; preds = %529, %536
  %537 = phi i8* [ %570, %536 ], [ %532, %529 ]
  %538 = phi i32* [ %571, %536 ], [ %533, %529 ]
  %539 = phi i32 [ %572, %536 ], [ %534, %529 ]
  %540 = load i32, i32* %538, align 4
  %541 = trunc i32 %540 to i8
  store i8 %541, i8* %537, align 1
  %542 = getelementptr inbounds i8, i8* %537, i64 1
  %543 = getelementptr inbounds i32, i32* %538, i64 1
  %544 = load i32, i32* %543, align 4
  %545 = trunc i32 %544 to i8
  store i8 %545, i8* %542, align 1
  %546 = getelementptr inbounds i8, i8* %537, i64 2
  %547 = getelementptr inbounds i32, i32* %538, i64 2
  %548 = load i32, i32* %547, align 4
  %549 = trunc i32 %548 to i8
  store i8 %549, i8* %546, align 1
  %550 = getelementptr inbounds i8, i8* %537, i64 3
  %551 = getelementptr inbounds i32, i32* %538, i64 3
  %552 = load i32, i32* %551, align 4
  %553 = trunc i32 %552 to i8
  store i8 %553, i8* %550, align 1
  %554 = getelementptr inbounds i8, i8* %537, i64 4
  %555 = getelementptr inbounds i32, i32* %538, i64 4
  %556 = load i32, i32* %555, align 4
  %557 = trunc i32 %556 to i8
  store i8 %557, i8* %554, align 1
  %558 = getelementptr inbounds i8, i8* %537, i64 5
  %559 = getelementptr inbounds i32, i32* %538, i64 5
  %560 = load i32, i32* %559, align 4
  %561 = trunc i32 %560 to i8
  store i8 %561, i8* %558, align 1
  %562 = getelementptr inbounds i8, i8* %537, i64 6
  %563 = getelementptr inbounds i32, i32* %538, i64 6
  %564 = load i32, i32* %563, align 4
  %565 = trunc i32 %564 to i8
  store i8 %565, i8* %562, align 1
  %566 = getelementptr inbounds i8, i8* %537, i64 7
  %567 = getelementptr inbounds i32, i32* %538, i64 7
  %568 = load i32, i32* %567, align 4
  %569 = trunc i32 %568 to i8
  store i8 %569, i8* %566, align 1
  %570 = getelementptr inbounds i8, i8* %537, i64 8
  %571 = getelementptr inbounds i32, i32* %538, i64 8
  %572 = add nuw i32 %539, 8
  %573 = icmp eq i32 %572, %211
  br i1 %573, label %574, label %536, !llvm.loop !47

574:                                              ; preds = %529, %536, %508, %444
  %575 = phi i32* [ %446, %444 ], [ %461, %508 ], [ %531, %529 ], [ %571, %536 ]
  %576 = phi i8* [ %445, %444 ], [ %460, %508 ], [ %530, %529 ], [ %570, %536 ]
  %577 = getelementptr inbounds i32, i32* %575, i64 %287
  %578 = add nuw i32 %447, 1
  %579 = icmp eq i32 %578, %216
  br i1 %579, label %1084, label %444

580:                                              ; preds = %185
  %581 = bitcast i8* %188 to i16*
  %582 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %195, i64 %186, i32 8
  %583 = load i32, i32* %582, align 8
  %584 = icmp eq i32 %583, 0
  %585 = icmp ne i32 %216, 0
  br i1 %584, label %610, label %586

586:                                              ; preds = %580
  br i1 %585, label %587, label %906

587:                                              ; preds = %586
  %588 = icmp eq i32 %211, 0
  %589 = zext i32 %246 to i64
  %590 = xor i32 %210, -1
  %591 = add i32 %208, %590
  %592 = zext i32 %591 to i64
  %593 = add nuw nsw i64 %592, 1
  %594 = zext i32 %591 to i64
  %595 = and i64 %593, 8589934584
  %596 = add nsw i64 %595, -8
  %597 = lshr exact i64 %596, 3
  %598 = add nuw nsw i64 %597, 1
  %599 = sub i32 %208, %210
  %600 = xor i32 %210, -1
  %601 = add i32 %208, %600
  %602 = icmp ult i64 %593, 8
  %603 = and i64 %593, 8589934584
  %604 = trunc i64 %603 to i32
  %605 = and i64 %598, 1
  %606 = icmp eq i64 %596, 0
  %607 = sub nuw nsw i64 %598, %605
  %608 = icmp eq i64 %605, 0
  %609 = icmp eq i64 %593, %603
  br label %634

610:                                              ; preds = %580
  br i1 %585, label %611, label %906

611:                                              ; preds = %610
  %612 = icmp eq i32 %211, 0
  %613 = zext i32 %246 to i64
  %614 = xor i32 %210, -1
  %615 = add i32 %208, %614
  %616 = zext i32 %615 to i64
  %617 = add nuw nsw i64 %616, 1
  %618 = zext i32 %615 to i64
  %619 = and i64 %617, 8589934584
  %620 = add nsw i64 %619, -8
  %621 = lshr exact i64 %620, 3
  %622 = add nuw nsw i64 %621, 1
  %623 = sub i32 %208, %210
  %624 = xor i32 %210, -1
  %625 = add i32 %208, %624
  %626 = icmp ult i64 %617, 8
  %627 = and i64 %617, 8589934584
  %628 = trunc i64 %627 to i32
  %629 = and i64 %622, 1
  %630 = icmp eq i64 %620, 0
  %631 = sub nuw nsw i64 %622, %629
  %632 = icmp eq i64 %629, 0
  %633 = icmp eq i64 %617, %627
  br label %770

634:                                              ; preds = %764, %587
  %635 = phi i16* [ %581, %587 ], [ %766, %764 ]
  %636 = phi i32* [ %254, %587 ], [ %767, %764 ]
  %637 = phi i32 [ 0, %587 ], [ %768, %764 ]
  br i1 %588, label %764, label %638

638:                                              ; preds = %634
  br i1 %602, label %699, label %639

639:                                              ; preds = %638
  %640 = getelementptr i16, i16* %635, i64 1
  %641 = getelementptr i16, i16* %640, i64 %594
  %642 = getelementptr i32, i32* %636, i64 1
  %643 = getelementptr i32, i32* %642, i64 %594
  %644 = bitcast i32* %643 to i16*
  %645 = icmp ult i16* %635, %644
  %646 = bitcast i16* %641 to i32*
  %647 = icmp ult i32* %636, %646
  %648 = and i1 %645, %647
  br i1 %648, label %699, label %649

649:                                              ; preds = %639
  %650 = getelementptr i16, i16* %635, i64 %603
  %651 = getelementptr i32, i32* %636, i64 %603
  br i1 %606, label %683, label %652

652:                                              ; preds = %649, %652
  %653 = phi i64 [ %680, %652 ], [ 0, %649 ]
  %654 = phi i64 [ %681, %652 ], [ %607, %649 ]
  %655 = getelementptr i16, i16* %635, i64 %653
  %656 = getelementptr i32, i32* %636, i64 %653
  %657 = bitcast i32* %656 to <4 x i32>*
  %658 = load <4 x i32>, <4 x i32>* %657, align 4, !alias.scope !48
  %659 = getelementptr i32, i32* %656, i64 4
  %660 = bitcast i32* %659 to <4 x i32>*
  %661 = load <4 x i32>, <4 x i32>* %660, align 4, !alias.scope !48
  %662 = trunc <4 x i32> %658 to <4 x i16>
  %663 = trunc <4 x i32> %661 to <4 x i16>
  %664 = bitcast i16* %655 to <4 x i16>*
  store <4 x i16> %662, <4 x i16>* %664, align 2, !alias.scope !51, !noalias !48
  %665 = getelementptr i16, i16* %655, i64 4
  %666 = bitcast i16* %665 to <4 x i16>*
  store <4 x i16> %663, <4 x i16>* %666, align 2, !alias.scope !51, !noalias !48
  %667 = or i64 %653, 8
  %668 = getelementptr i16, i16* %635, i64 %667
  %669 = getelementptr i32, i32* %636, i64 %667
  %670 = bitcast i32* %669 to <4 x i32>*
  %671 = load <4 x i32>, <4 x i32>* %670, align 4, !alias.scope !48
  %672 = getelementptr i32, i32* %669, i64 4
  %673 = bitcast i32* %672 to <4 x i32>*
  %674 = load <4 x i32>, <4 x i32>* %673, align 4, !alias.scope !48
  %675 = trunc <4 x i32> %671 to <4 x i16>
  %676 = trunc <4 x i32> %674 to <4 x i16>
  %677 = bitcast i16* %668 to <4 x i16>*
  store <4 x i16> %675, <4 x i16>* %677, align 2, !alias.scope !51, !noalias !48
  %678 = getelementptr i16, i16* %668, i64 4
  %679 = bitcast i16* %678 to <4 x i16>*
  store <4 x i16> %676, <4 x i16>* %679, align 2, !alias.scope !51, !noalias !48
  %680 = add i64 %653, 16
  %681 = add i64 %654, -2
  %682 = icmp eq i64 %681, 0
  br i1 %682, label %683, label %652, !llvm.loop !53

683:                                              ; preds = %652, %649
  %684 = phi i64 [ 0, %649 ], [ %680, %652 ]
  br i1 %608, label %698, label %685

685:                                              ; preds = %683
  %686 = getelementptr i16, i16* %635, i64 %684
  %687 = getelementptr i32, i32* %636, i64 %684
  %688 = bitcast i32* %687 to <4 x i32>*
  %689 = load <4 x i32>, <4 x i32>* %688, align 4, !alias.scope !48
  %690 = getelementptr i32, i32* %687, i64 4
  %691 = bitcast i32* %690 to <4 x i32>*
  %692 = load <4 x i32>, <4 x i32>* %691, align 4, !alias.scope !48
  %693 = trunc <4 x i32> %689 to <4 x i16>
  %694 = trunc <4 x i32> %692 to <4 x i16>
  %695 = bitcast i16* %686 to <4 x i16>*
  store <4 x i16> %693, <4 x i16>* %695, align 2, !alias.scope !51, !noalias !48
  %696 = getelementptr i16, i16* %686, i64 4
  %697 = bitcast i16* %696 to <4 x i16>*
  store <4 x i16> %694, <4 x i16>* %697, align 2, !alias.scope !51, !noalias !48
  br label %698

698:                                              ; preds = %683, %685
  br i1 %609, label %764, label %699

699:                                              ; preds = %698, %639, %638
  %700 = phi i16* [ %635, %639 ], [ %635, %638 ], [ %650, %698 ]
  %701 = phi i32* [ %636, %639 ], [ %636, %638 ], [ %651, %698 ]
  %702 = phi i32 [ 0, %639 ], [ 0, %638 ], [ %604, %698 ]
  %703 = sub i32 %599, %702
  %704 = sub i32 %601, %702
  %705 = and i32 %703, 7
  %706 = icmp eq i32 %705, 0
  br i1 %706, label %719, label %707

707:                                              ; preds = %699, %707
  %708 = phi i16* [ %715, %707 ], [ %700, %699 ]
  %709 = phi i32* [ %712, %707 ], [ %701, %699 ]
  %710 = phi i32 [ %716, %707 ], [ %702, %699 ]
  %711 = phi i32 [ %717, %707 ], [ %705, %699 ]
  %712 = getelementptr inbounds i32, i32* %709, i64 1
  %713 = load i32, i32* %709, align 4
  %714 = trunc i32 %713 to i16
  %715 = getelementptr inbounds i16, i16* %708, i64 1
  store i16 %714, i16* %708, align 2
  %716 = add nuw i32 %710, 1
  %717 = add i32 %711, -1
  %718 = icmp eq i32 %717, 0
  br i1 %718, label %719, label %707, !llvm.loop !54

719:                                              ; preds = %707, %699
  %720 = phi i32* [ undef, %699 ], [ %712, %707 ]
  %721 = phi i16* [ undef, %699 ], [ %715, %707 ]
  %722 = phi i16* [ %700, %699 ], [ %715, %707 ]
  %723 = phi i32* [ %701, %699 ], [ %712, %707 ]
  %724 = phi i32 [ %702, %699 ], [ %716, %707 ]
  %725 = icmp ult i32 %704, 7
  br i1 %725, label %764, label %726

726:                                              ; preds = %719, %726
  %727 = phi i16* [ %761, %726 ], [ %722, %719 ]
  %728 = phi i32* [ %758, %726 ], [ %723, %719 ]
  %729 = phi i32 [ %762, %726 ], [ %724, %719 ]
  %730 = getelementptr inbounds i32, i32* %728, i64 1
  %731 = load i32, i32* %728, align 4
  %732 = trunc i32 %731 to i16
  %733 = getelementptr inbounds i16, i16* %727, i64 1
  store i16 %732, i16* %727, align 2
  %734 = getelementptr inbounds i32, i32* %728, i64 2
  %735 = load i32, i32* %730, align 4
  %736 = trunc i32 %735 to i16
  %737 = getelementptr inbounds i16, i16* %727, i64 2
  store i16 %736, i16* %733, align 2
  %738 = getelementptr inbounds i32, i32* %728, i64 3
  %739 = load i32, i32* %734, align 4
  %740 = trunc i32 %739 to i16
  %741 = getelementptr inbounds i16, i16* %727, i64 3
  store i16 %740, i16* %737, align 2
  %742 = getelementptr inbounds i32, i32* %728, i64 4
  %743 = load i32, i32* %738, align 4
  %744 = trunc i32 %743 to i16
  %745 = getelementptr inbounds i16, i16* %727, i64 4
  store i16 %744, i16* %741, align 2
  %746 = getelementptr inbounds i32, i32* %728, i64 5
  %747 = load i32, i32* %742, align 4
  %748 = trunc i32 %747 to i16
  %749 = getelementptr inbounds i16, i16* %727, i64 5
  store i16 %748, i16* %745, align 2
  %750 = getelementptr inbounds i32, i32* %728, i64 6
  %751 = load i32, i32* %746, align 4
  %752 = trunc i32 %751 to i16
  %753 = getelementptr inbounds i16, i16* %727, i64 6
  store i16 %752, i16* %749, align 2
  %754 = getelementptr inbounds i32, i32* %728, i64 7
  %755 = load i32, i32* %750, align 4
  %756 = trunc i32 %755 to i16
  %757 = getelementptr inbounds i16, i16* %727, i64 7
  store i16 %756, i16* %753, align 2
  %758 = getelementptr inbounds i32, i32* %728, i64 8
  %759 = load i32, i32* %754, align 4
  %760 = trunc i32 %759 to i16
  %761 = getelementptr inbounds i16, i16* %727, i64 8
  store i16 %760, i16* %757, align 2
  %762 = add nuw i32 %729, 8
  %763 = icmp eq i32 %762, %211
  br i1 %763, label %764, label %726, !llvm.loop !55

764:                                              ; preds = %719, %726, %698, %634
  %765 = phi i32* [ %636, %634 ], [ %651, %698 ], [ %720, %719 ], [ %758, %726 ]
  %766 = phi i16* [ %635, %634 ], [ %650, %698 ], [ %721, %719 ], [ %761, %726 ]
  %767 = getelementptr inbounds i32, i32* %765, i64 %589
  %768 = add nuw i32 %637, 1
  %769 = icmp eq i32 %768, %216
  br i1 %769, label %906, label %634

770:                                              ; preds = %900, %611
  %771 = phi i16* [ %581, %611 ], [ %902, %900 ]
  %772 = phi i32* [ %254, %611 ], [ %903, %900 ]
  %773 = phi i32 [ 0, %611 ], [ %904, %900 ]
  br i1 %612, label %900, label %774

774:                                              ; preds = %770
  br i1 %626, label %835, label %775

775:                                              ; preds = %774
  %776 = getelementptr i16, i16* %771, i64 1
  %777 = getelementptr i16, i16* %776, i64 %618
  %778 = getelementptr i32, i32* %772, i64 1
  %779 = getelementptr i32, i32* %778, i64 %618
  %780 = bitcast i32* %779 to i16*
  %781 = icmp ult i16* %771, %780
  %782 = bitcast i16* %777 to i32*
  %783 = icmp ult i32* %772, %782
  %784 = and i1 %781, %783
  br i1 %784, label %835, label %785

785:                                              ; preds = %775
  %786 = getelementptr i16, i16* %771, i64 %627
  %787 = getelementptr i32, i32* %772, i64 %627
  br i1 %630, label %819, label %788

788:                                              ; preds = %785, %788
  %789 = phi i64 [ %816, %788 ], [ 0, %785 ]
  %790 = phi i64 [ %817, %788 ], [ %631, %785 ]
  %791 = getelementptr i16, i16* %771, i64 %789
  %792 = getelementptr i32, i32* %772, i64 %789
  %793 = bitcast i32* %792 to <4 x i32>*
  %794 = load <4 x i32>, <4 x i32>* %793, align 4, !alias.scope !56
  %795 = getelementptr i32, i32* %792, i64 4
  %796 = bitcast i32* %795 to <4 x i32>*
  %797 = load <4 x i32>, <4 x i32>* %796, align 4, !alias.scope !56
  %798 = trunc <4 x i32> %794 to <4 x i16>
  %799 = trunc <4 x i32> %797 to <4 x i16>
  %800 = bitcast i16* %791 to <4 x i16>*
  store <4 x i16> %798, <4 x i16>* %800, align 2, !alias.scope !59, !noalias !56
  %801 = getelementptr i16, i16* %791, i64 4
  %802 = bitcast i16* %801 to <4 x i16>*
  store <4 x i16> %799, <4 x i16>* %802, align 2, !alias.scope !59, !noalias !56
  %803 = or i64 %789, 8
  %804 = getelementptr i16, i16* %771, i64 %803
  %805 = getelementptr i32, i32* %772, i64 %803
  %806 = bitcast i32* %805 to <4 x i32>*
  %807 = load <4 x i32>, <4 x i32>* %806, align 4, !alias.scope !56
  %808 = getelementptr i32, i32* %805, i64 4
  %809 = bitcast i32* %808 to <4 x i32>*
  %810 = load <4 x i32>, <4 x i32>* %809, align 4, !alias.scope !56
  %811 = trunc <4 x i32> %807 to <4 x i16>
  %812 = trunc <4 x i32> %810 to <4 x i16>
  %813 = bitcast i16* %804 to <4 x i16>*
  store <4 x i16> %811, <4 x i16>* %813, align 2, !alias.scope !59, !noalias !56
  %814 = getelementptr i16, i16* %804, i64 4
  %815 = bitcast i16* %814 to <4 x i16>*
  store <4 x i16> %812, <4 x i16>* %815, align 2, !alias.scope !59, !noalias !56
  %816 = add i64 %789, 16
  %817 = add i64 %790, -2
  %818 = icmp eq i64 %817, 0
  br i1 %818, label %819, label %788, !llvm.loop !61

819:                                              ; preds = %788, %785
  %820 = phi i64 [ 0, %785 ], [ %816, %788 ]
  br i1 %632, label %834, label %821

821:                                              ; preds = %819
  %822 = getelementptr i16, i16* %771, i64 %820
  %823 = getelementptr i32, i32* %772, i64 %820
  %824 = bitcast i32* %823 to <4 x i32>*
  %825 = load <4 x i32>, <4 x i32>* %824, align 4, !alias.scope !56
  %826 = getelementptr i32, i32* %823, i64 4
  %827 = bitcast i32* %826 to <4 x i32>*
  %828 = load <4 x i32>, <4 x i32>* %827, align 4, !alias.scope !56
  %829 = trunc <4 x i32> %825 to <4 x i16>
  %830 = trunc <4 x i32> %828 to <4 x i16>
  %831 = bitcast i16* %822 to <4 x i16>*
  store <4 x i16> %829, <4 x i16>* %831, align 2, !alias.scope !59, !noalias !56
  %832 = getelementptr i16, i16* %822, i64 4
  %833 = bitcast i16* %832 to <4 x i16>*
  store <4 x i16> %830, <4 x i16>* %833, align 2, !alias.scope !59, !noalias !56
  br label %834

834:                                              ; preds = %819, %821
  br i1 %633, label %900, label %835

835:                                              ; preds = %834, %775, %774
  %836 = phi i16* [ %771, %775 ], [ %771, %774 ], [ %786, %834 ]
  %837 = phi i32* [ %772, %775 ], [ %772, %774 ], [ %787, %834 ]
  %838 = phi i32 [ 0, %775 ], [ 0, %774 ], [ %628, %834 ]
  %839 = sub i32 %623, %838
  %840 = sub i32 %625, %838
  %841 = and i32 %839, 7
  %842 = icmp eq i32 %841, 0
  br i1 %842, label %855, label %843

843:                                              ; preds = %835, %843
  %844 = phi i16* [ %851, %843 ], [ %836, %835 ]
  %845 = phi i32* [ %848, %843 ], [ %837, %835 ]
  %846 = phi i32 [ %852, %843 ], [ %838, %835 ]
  %847 = phi i32 [ %853, %843 ], [ %841, %835 ]
  %848 = getelementptr inbounds i32, i32* %845, i64 1
  %849 = load i32, i32* %845, align 4
  %850 = trunc i32 %849 to i16
  %851 = getelementptr inbounds i16, i16* %844, i64 1
  store i16 %850, i16* %844, align 2
  %852 = add nuw i32 %846, 1
  %853 = add i32 %847, -1
  %854 = icmp eq i32 %853, 0
  br i1 %854, label %855, label %843, !llvm.loop !62

855:                                              ; preds = %843, %835
  %856 = phi i32* [ undef, %835 ], [ %848, %843 ]
  %857 = phi i16* [ undef, %835 ], [ %851, %843 ]
  %858 = phi i16* [ %836, %835 ], [ %851, %843 ]
  %859 = phi i32* [ %837, %835 ], [ %848, %843 ]
  %860 = phi i32 [ %838, %835 ], [ %852, %843 ]
  %861 = icmp ult i32 %840, 7
  br i1 %861, label %900, label %862

862:                                              ; preds = %855, %862
  %863 = phi i16* [ %897, %862 ], [ %858, %855 ]
  %864 = phi i32* [ %894, %862 ], [ %859, %855 ]
  %865 = phi i32 [ %898, %862 ], [ %860, %855 ]
  %866 = getelementptr inbounds i32, i32* %864, i64 1
  %867 = load i32, i32* %864, align 4
  %868 = trunc i32 %867 to i16
  %869 = getelementptr inbounds i16, i16* %863, i64 1
  store i16 %868, i16* %863, align 2
  %870 = getelementptr inbounds i32, i32* %864, i64 2
  %871 = load i32, i32* %866, align 4
  %872 = trunc i32 %871 to i16
  %873 = getelementptr inbounds i16, i16* %863, i64 2
  store i16 %872, i16* %869, align 2
  %874 = getelementptr inbounds i32, i32* %864, i64 3
  %875 = load i32, i32* %870, align 4
  %876 = trunc i32 %875 to i16
  %877 = getelementptr inbounds i16, i16* %863, i64 3
  store i16 %876, i16* %873, align 2
  %878 = getelementptr inbounds i32, i32* %864, i64 4
  %879 = load i32, i32* %874, align 4
  %880 = trunc i32 %879 to i16
  %881 = getelementptr inbounds i16, i16* %863, i64 4
  store i16 %880, i16* %877, align 2
  %882 = getelementptr inbounds i32, i32* %864, i64 5
  %883 = load i32, i32* %878, align 4
  %884 = trunc i32 %883 to i16
  %885 = getelementptr inbounds i16, i16* %863, i64 5
  store i16 %884, i16* %881, align 2
  %886 = getelementptr inbounds i32, i32* %864, i64 6
  %887 = load i32, i32* %882, align 4
  %888 = trunc i32 %887 to i16
  %889 = getelementptr inbounds i16, i16* %863, i64 6
  store i16 %888, i16* %885, align 2
  %890 = getelementptr inbounds i32, i32* %864, i64 7
  %891 = load i32, i32* %886, align 4
  %892 = trunc i32 %891 to i16
  %893 = getelementptr inbounds i16, i16* %863, i64 7
  store i16 %892, i16* %889, align 2
  %894 = getelementptr inbounds i32, i32* %864, i64 8
  %895 = load i32, i32* %890, align 4
  %896 = trunc i32 %895 to i16
  %897 = getelementptr inbounds i16, i16* %863, i64 8
  store i16 %896, i16* %893, align 2
  %898 = add nuw i32 %865, 8
  %899 = icmp eq i32 %898, %211
  br i1 %899, label %900, label %862, !llvm.loop !63

900:                                              ; preds = %855, %862, %834, %770
  %901 = phi i32* [ %772, %770 ], [ %787, %834 ], [ %856, %855 ], [ %894, %862 ]
  %902 = phi i16* [ %771, %770 ], [ %786, %834 ], [ %857, %855 ], [ %897, %862 ]
  %903 = getelementptr inbounds i32, i32* %901, i64 %613
  %904 = add nuw i32 %773, 1
  %905 = icmp eq i32 %904, %216
  br i1 %905, label %906, label %770

906:                                              ; preds = %764, %900, %610, %586
  %907 = phi i16* [ %581, %610 ], [ %581, %586 ], [ %902, %900 ], [ %766, %764 ]
  %908 = bitcast i16* %907 to i8*
  br label %1084

909:                                              ; preds = %185
  %910 = bitcast i8* %188 to i32*
  %911 = icmp eq i32 %216, 0
  br i1 %911, label %1081, label %912

912:                                              ; preds = %909
  %913 = icmp eq i32 %211, 0
  %914 = zext i32 %246 to i64
  %915 = xor i32 %210, -1
  %916 = add i32 %208, %915
  %917 = zext i32 %916 to i64
  %918 = add nuw nsw i64 %917, 1
  %919 = zext i32 %916 to i64
  %920 = and i64 %918, 8589934584
  %921 = add nsw i64 %920, -8
  %922 = lshr exact i64 %921, 3
  %923 = add nuw nsw i64 %922, 1
  %924 = sub i32 %208, %210
  %925 = xor i32 %210, -1
  %926 = add i32 %208, %925
  %927 = icmp ult i64 %918, 8
  %928 = and i64 %918, 8589934584
  %929 = trunc i64 %928 to i32
  %930 = and i64 %923, 3
  %931 = icmp ult i64 %921, 24
  %932 = sub nsw i64 %923, %930
  %933 = icmp eq i64 %930, 0
  %934 = icmp eq i64 %918, %928
  br label %935

935:                                              ; preds = %1075, %912
  %936 = phi i32* [ %910, %912 ], [ %1077, %1075 ]
  %937 = phi i32* [ %254, %912 ], [ %1078, %1075 ]
  %938 = phi i32 [ 0, %912 ], [ %1079, %1075 ]
  br i1 %913, label %1075, label %939

939:                                              ; preds = %935
  br i1 %927, label %1019, label %940

940:                                              ; preds = %939
  %941 = getelementptr i32, i32* %936, i64 1
  %942 = getelementptr i32, i32* %941, i64 %919
  %943 = getelementptr i32, i32* %937, i64 1
  %944 = getelementptr i32, i32* %943, i64 %919
  %945 = icmp ult i32* %936, %944
  %946 = icmp ult i32* %937, %942
  %947 = and i1 %945, %946
  br i1 %947, label %1019, label %948

948:                                              ; preds = %940
  %949 = getelementptr i32, i32* %936, i64 %928
  %950 = getelementptr i32, i32* %937, i64 %928
  br i1 %931, label %1000, label %951

951:                                              ; preds = %948, %951
  %952 = phi i64 [ %997, %951 ], [ 0, %948 ]
  %953 = phi i64 [ %998, %951 ], [ %932, %948 ]
  %954 = getelementptr i32, i32* %936, i64 %952
  %955 = getelementptr i32, i32* %937, i64 %952
  %956 = bitcast i32* %955 to <4 x i32>*
  %957 = load <4 x i32>, <4 x i32>* %956, align 4, !alias.scope !64
  %958 = getelementptr i32, i32* %955, i64 4
  %959 = bitcast i32* %958 to <4 x i32>*
  %960 = load <4 x i32>, <4 x i32>* %959, align 4, !alias.scope !64
  %961 = bitcast i32* %954 to <4 x i32>*
  store <4 x i32> %957, <4 x i32>* %961, align 4, !alias.scope !67, !noalias !64
  %962 = getelementptr i32, i32* %954, i64 4
  %963 = bitcast i32* %962 to <4 x i32>*
  store <4 x i32> %960, <4 x i32>* %963, align 4, !alias.scope !67, !noalias !64
  %964 = or i64 %952, 8
  %965 = getelementptr i32, i32* %936, i64 %964
  %966 = getelementptr i32, i32* %937, i64 %964
  %967 = bitcast i32* %966 to <4 x i32>*
  %968 = load <4 x i32>, <4 x i32>* %967, align 4, !alias.scope !64
  %969 = getelementptr i32, i32* %966, i64 4
  %970 = bitcast i32* %969 to <4 x i32>*
  %971 = load <4 x i32>, <4 x i32>* %970, align 4, !alias.scope !64
  %972 = bitcast i32* %965 to <4 x i32>*
  store <4 x i32> %968, <4 x i32>* %972, align 4, !alias.scope !67, !noalias !64
  %973 = getelementptr i32, i32* %965, i64 4
  %974 = bitcast i32* %973 to <4 x i32>*
  store <4 x i32> %971, <4 x i32>* %974, align 4, !alias.scope !67, !noalias !64
  %975 = or i64 %952, 16
  %976 = getelementptr i32, i32* %936, i64 %975
  %977 = getelementptr i32, i32* %937, i64 %975
  %978 = bitcast i32* %977 to <4 x i32>*
  %979 = load <4 x i32>, <4 x i32>* %978, align 4, !alias.scope !64
  %980 = getelementptr i32, i32* %977, i64 4
  %981 = bitcast i32* %980 to <4 x i32>*
  %982 = load <4 x i32>, <4 x i32>* %981, align 4, !alias.scope !64
  %983 = bitcast i32* %976 to <4 x i32>*
  store <4 x i32> %979, <4 x i32>* %983, align 4, !alias.scope !67, !noalias !64
  %984 = getelementptr i32, i32* %976, i64 4
  %985 = bitcast i32* %984 to <4 x i32>*
  store <4 x i32> %982, <4 x i32>* %985, align 4, !alias.scope !67, !noalias !64
  %986 = or i64 %952, 24
  %987 = getelementptr i32, i32* %936, i64 %986
  %988 = getelementptr i32, i32* %937, i64 %986
  %989 = bitcast i32* %988 to <4 x i32>*
  %990 = load <4 x i32>, <4 x i32>* %989, align 4, !alias.scope !64
  %991 = getelementptr i32, i32* %988, i64 4
  %992 = bitcast i32* %991 to <4 x i32>*
  %993 = load <4 x i32>, <4 x i32>* %992, align 4, !alias.scope !64
  %994 = bitcast i32* %987 to <4 x i32>*
  store <4 x i32> %990, <4 x i32>* %994, align 4, !alias.scope !67, !noalias !64
  %995 = getelementptr i32, i32* %987, i64 4
  %996 = bitcast i32* %995 to <4 x i32>*
  store <4 x i32> %993, <4 x i32>* %996, align 4, !alias.scope !67, !noalias !64
  %997 = add i64 %952, 32
  %998 = add i64 %953, -4
  %999 = icmp eq i64 %998, 0
  br i1 %999, label %1000, label %951, !llvm.loop !69

1000:                                             ; preds = %951, %948
  %1001 = phi i64 [ 0, %948 ], [ %997, %951 ]
  br i1 %933, label %1018, label %1002

1002:                                             ; preds = %1000, %1002
  %1003 = phi i64 [ %1015, %1002 ], [ %1001, %1000 ]
  %1004 = phi i64 [ %1016, %1002 ], [ %930, %1000 ]
  %1005 = getelementptr i32, i32* %936, i64 %1003
  %1006 = getelementptr i32, i32* %937, i64 %1003
  %1007 = bitcast i32* %1006 to <4 x i32>*
  %1008 = load <4 x i32>, <4 x i32>* %1007, align 4, !alias.scope !64
  %1009 = getelementptr i32, i32* %1006, i64 4
  %1010 = bitcast i32* %1009 to <4 x i32>*
  %1011 = load <4 x i32>, <4 x i32>* %1010, align 4, !alias.scope !64
  %1012 = bitcast i32* %1005 to <4 x i32>*
  store <4 x i32> %1008, <4 x i32>* %1012, align 4, !alias.scope !67, !noalias !64
  %1013 = getelementptr i32, i32* %1005, i64 4
  %1014 = bitcast i32* %1013 to <4 x i32>*
  store <4 x i32> %1011, <4 x i32>* %1014, align 4, !alias.scope !67, !noalias !64
  %1015 = add i64 %1003, 8
  %1016 = add i64 %1004, -1
  %1017 = icmp eq i64 %1016, 0
  br i1 %1017, label %1018, label %1002, !llvm.loop !70

1018:                                             ; preds = %1002, %1000
  br i1 %934, label %1075, label %1019

1019:                                             ; preds = %1018, %940, %939
  %1020 = phi i32* [ %936, %940 ], [ %936, %939 ], [ %949, %1018 ]
  %1021 = phi i32* [ %937, %940 ], [ %937, %939 ], [ %950, %1018 ]
  %1022 = phi i32 [ 0, %940 ], [ 0, %939 ], [ %929, %1018 ]
  %1023 = sub i32 %924, %1022
  %1024 = sub i32 %926, %1022
  %1025 = and i32 %1023, 7
  %1026 = icmp eq i32 %1025, 0
  br i1 %1026, label %1038, label %1027

1027:                                             ; preds = %1019, %1027
  %1028 = phi i32* [ %1034, %1027 ], [ %1020, %1019 ]
  %1029 = phi i32* [ %1032, %1027 ], [ %1021, %1019 ]
  %1030 = phi i32 [ %1035, %1027 ], [ %1022, %1019 ]
  %1031 = phi i32 [ %1036, %1027 ], [ %1025, %1019 ]
  %1032 = getelementptr inbounds i32, i32* %1029, i64 1
  %1033 = load i32, i32* %1029, align 4
  %1034 = getelementptr inbounds i32, i32* %1028, i64 1
  store i32 %1033, i32* %1028, align 4
  %1035 = add nuw i32 %1030, 1
  %1036 = add i32 %1031, -1
  %1037 = icmp eq i32 %1036, 0
  br i1 %1037, label %1038, label %1027, !llvm.loop !71

1038:                                             ; preds = %1027, %1019
  %1039 = phi i32* [ undef, %1019 ], [ %1032, %1027 ]
  %1040 = phi i32* [ undef, %1019 ], [ %1034, %1027 ]
  %1041 = phi i32* [ %1020, %1019 ], [ %1034, %1027 ]
  %1042 = phi i32* [ %1021, %1019 ], [ %1032, %1027 ]
  %1043 = phi i32 [ %1022, %1019 ], [ %1035, %1027 ]
  %1044 = icmp ult i32 %1024, 7
  br i1 %1044, label %1075, label %1045

1045:                                             ; preds = %1038, %1045
  %1046 = phi i32* [ %1072, %1045 ], [ %1041, %1038 ]
  %1047 = phi i32* [ %1070, %1045 ], [ %1042, %1038 ]
  %1048 = phi i32 [ %1073, %1045 ], [ %1043, %1038 ]
  %1049 = getelementptr inbounds i32, i32* %1047, i64 1
  %1050 = load i32, i32* %1047, align 4
  %1051 = getelementptr inbounds i32, i32* %1046, i64 1
  store i32 %1050, i32* %1046, align 4
  %1052 = getelementptr inbounds i32, i32* %1047, i64 2
  %1053 = load i32, i32* %1049, align 4
  %1054 = getelementptr inbounds i32, i32* %1046, i64 2
  store i32 %1053, i32* %1051, align 4
  %1055 = getelementptr inbounds i32, i32* %1047, i64 3
  %1056 = load i32, i32* %1052, align 4
  %1057 = getelementptr inbounds i32, i32* %1046, i64 3
  store i32 %1056, i32* %1054, align 4
  %1058 = getelementptr inbounds i32, i32* %1047, i64 4
  %1059 = load i32, i32* %1055, align 4
  %1060 = getelementptr inbounds i32, i32* %1046, i64 4
  store i32 %1059, i32* %1057, align 4
  %1061 = getelementptr inbounds i32, i32* %1047, i64 5
  %1062 = load i32, i32* %1058, align 4
  %1063 = getelementptr inbounds i32, i32* %1046, i64 5
  store i32 %1062, i32* %1060, align 4
  %1064 = getelementptr inbounds i32, i32* %1047, i64 6
  %1065 = load i32, i32* %1061, align 4
  %1066 = getelementptr inbounds i32, i32* %1046, i64 6
  store i32 %1065, i32* %1063, align 4
  %1067 = getelementptr inbounds i32, i32* %1047, i64 7
  %1068 = load i32, i32* %1064, align 4
  %1069 = getelementptr inbounds i32, i32* %1046, i64 7
  store i32 %1068, i32* %1066, align 4
  %1070 = getelementptr inbounds i32, i32* %1047, i64 8
  %1071 = load i32, i32* %1067, align 4
  %1072 = getelementptr inbounds i32, i32* %1046, i64 8
  store i32 %1071, i32* %1069, align 4
  %1073 = add nuw i32 %1048, 8
  %1074 = icmp eq i32 %1073, %211
  br i1 %1074, label %1075, label %1045, !llvm.loop !72

1075:                                             ; preds = %1038, %1045, %1018, %935
  %1076 = phi i32* [ %937, %935 ], [ %950, %1018 ], [ %1039, %1038 ], [ %1070, %1045 ]
  %1077 = phi i32* [ %936, %935 ], [ %949, %1018 ], [ %1040, %1038 ], [ %1072, %1045 ]
  %1078 = getelementptr inbounds i32, i32* %1076, i64 %914
  %1079 = add nuw i32 %938, 1
  %1080 = icmp eq i32 %1079, %216
  br i1 %1080, label %1081, label %935

1081:                                             ; preds = %1075, %909
  %1082 = phi i32* [ %910, %909 ], [ %1077, %1075 ]
  %1083 = bitcast i32* %1082 to i8*
  br label %1084

1084:                                             ; preds = %438, %574, %1081, %906, %284, %260, %185
  %1085 = phi i8* [ %188, %185 ], [ %1083, %1081 ], [ %908, %906 ], [ %188, %284 ], [ %188, %260 ], [ %576, %574 ], [ %440, %438 ]
  %1086 = add nuw nsw i64 %186, 1
  %1087 = load %struct.opj_image*, %struct.opj_image** %178, align 8
  %1088 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1087, i64 0, i32 4
  %1089 = load i32, i32* %1088, align 8
  %1090 = zext i32 %1089 to i64
  %1091 = icmp ult i64 %1086, %1090
  br i1 %1091, label %185, label %1092

1092:                                             ; preds = %1084
  %1093 = load %struct.opj_tcd*, %struct.opj_tcd** %4, align 8
  br label %1094

1094:                                             ; preds = %1092, %174
  %1095 = phi %struct.opj_tcd* [ %1093, %1092 ], [ %177, %174 ]
  %1096 = tail call i32 @opj_tcd_copy_tile_data(%struct.opj_tcd* %1095, i8* nonnull %175, i64 %161) #12
  %1097 = icmp eq i32 %1096, 0
  br i1 %1097, label %1098, label %1100

1098:                                             ; preds = %1094
  %1099 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.91, i64 0, i64 0)) #12
  tail call void @opj_free(i8* nonnull %175) #12
  br label %1111

1100:                                             ; preds = %1094, %159
  %1101 = phi i64 [ %93, %159 ], [ %176, %1094 ]
  %1102 = phi i8* [ %92, %159 ], [ %175, %1094 ]
  %1103 = tail call fastcc i32 @opj_j2k_post_write_tile(%struct.opj_j2k* %0, %struct.opj_stream_private* %1, %struct.opj_event_mgr* %2)
  %1104 = icmp eq i32 %1103, 0
  br i1 %1104, label %1105, label %88

1105:                                             ; preds = %1100
  %1106 = icmp eq i8* %1102, null
  br i1 %1106, label %1111, label %1107

1107:                                             ; preds = %1105
  tail call void @opj_free(i8* nonnull %1102) #12
  br label %1111

1108:                                             ; preds = %88
  %1109 = icmp eq i8* %1102, null
  br i1 %1109, label %1111, label %1110

1110:                                             ; preds = %1108
  tail call void @opj_free(i8* nonnull %1102) #12
  br label %1111

1111:                                             ; preds = %172, %73, %170, %146, %1110, %1108, %1107, %1105, %149, %124, %122, %1098
  %1112 = phi i32 [ 0, %1098 ], [ 0, %170 ], [ 0, %122 ], [ 0, %124 ], [ 0, %149 ], [ 0, %1105 ], [ 0, %1107 ], [ 1, %1108 ], [ 1, %1110 ], [ 0, %146 ], [ 1, %73 ], [ 0, %172 ]
  ret i32 %1112
}

declare i32 @opj_alloc_tile_component_data(%struct.opj_tcd_tilecomp*) local_unnamed_addr #4

declare i64 @opj_tcd_get_encoder_input_buffer_size(%struct.opj_tcd*) local_unnamed_addr #4

declare i32 @opj_tcd_copy_tile_data(%struct.opj_tcd*, i8*, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @opj_j2k_post_write_tile(%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*) unnamed_addr #3 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 9
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 7
  %9 = bitcast i32* %8 to i8**
  %10 = load i8*, i8** %9, align 8
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #12
  %12 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 9
  %13 = load %struct.opj_tcd*, %struct.opj_tcd** %12, align 8
  %14 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %13, i64 0, i32 4
  store i32 0, i32* %14, align 8
  %15 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 0
  store i32 0, i32* %15, align 8
  store i32 0, i32* %5, align 4
  %16 = call fastcc i32 @opj_j2k_write_sot(%struct.opj_j2k* %0, i8* %10, i32 %7, i32* nonnull %5, %struct.opj_event_mgr* %2) #12
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %69, label %18

18:                                               ; preds = %3
  %19 = load i32, i32* %5, align 4
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %10, i64 %20
  %22 = sub i32 %7, %19
  %23 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 0
  %24 = load i16, i16* %23, align 8
  %25 = add i16 %24, -3
  %26 = icmp ult i16 %25, 4
  br i1 %26, label %43, label %27

27:                                               ; preds = %18
  %28 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %29 = load %struct.opj_tcp*, %struct.opj_tcp** %28, align 8
  %30 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %31 = load i32, i32* %30, align 8
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %29, i64 %32, i32 29
  %34 = load i8, i8* %33, align 8
  %35 = and i8 %34, 4
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %43, label %37

37:                                               ; preds = %27
  store i32 0, i32* %5, align 4
  call fastcc void @opj_j2k_write_poc_in_memory(%struct.opj_j2k* %0, i8* %21, i32* nonnull %5) #12
  %38 = load i32, i32* %5, align 4
  %39 = add i32 %38, %19
  %40 = zext i32 %38 to i64
  %41 = getelementptr inbounds i8, i8* %21, i64 %40
  %42 = sub i32 %22, %38
  br label %43

43:                                               ; preds = %37, %27, %18
  %44 = phi i32 [ %42, %37 ], [ %22, %27 ], [ %22, %18 ]
  %45 = phi i8* [ %41, %37 ], [ %21, %27 ], [ %21, %18 ]
  %46 = phi i32 [ %39, %37 ], [ %19, %27 ], [ %19, %18 ]
  store i32 0, i32* %5, align 4
  %47 = call fastcc i32 @opj_j2k_write_sod(%struct.opj_j2k* %0, %struct.opj_tcd* %13, i8* %45, i32* nonnull %5, i32 %44, %struct.opj_event_mgr* %2) #12
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %69, label %49

49:                                               ; preds = %43
  %50 = load i32, i32* %5, align 4
  %51 = add i32 %50, %46
  %52 = getelementptr inbounds i8, i8* %10, i64 6
  call void @opj_write_bytes_LE(i8* %52, i32 %51, i32 4) #12
  %53 = load i16, i16* %23, align 8
  %54 = add i16 %53, -3
  %55 = icmp ult i16 %54, 4
  %56 = add i16 %53, -1024
  %57 = icmp ult i16 %56, 1436
  %58 = or i1 %55, %57
  br i1 %58, label %59, label %70

59:                                               ; preds = %49
  %60 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 3
  %61 = bitcast i32* %60 to i8**
  %62 = load i8*, i8** %61, align 8
  %63 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %64 = load i32, i32* %63, align 8
  call void @opj_write_bytes_LE(i8* %62, i32 %64, i32 1) #12
  %65 = load i8*, i8** %61, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 1
  store i8* %66, i8** %61, align 8
  call void @opj_write_bytes_LE(i8* %66, i32 %51, i32 4) #12
  %67 = load i8*, i8** %61, align 8
  %68 = getelementptr inbounds i8, i8* %67, i64 4
  store i8* %68, i8** %61, align 8
  br label %70

69:                                               ; preds = %3, %43
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #12
  br label %213

70:                                               ; preds = %59, %49
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #12
  %71 = zext i32 %51 to i64
  %72 = getelementptr inbounds i8, i8* %10, i64 %71
  %73 = sub i32 %7, %51
  %74 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %74) #12
  store i32 -1431655766, i32* %4, align 4
  %75 = load %struct.opj_tcd*, %struct.opj_tcd** %12, align 8
  %76 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4
  %77 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %78 = load %struct.opj_tcp*, %struct.opj_tcp** %77, align 8
  %79 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %80 = load i32, i32* %79, align 8
  %81 = zext i32 %80 to i64
  %82 = call fastcc i32 @opj_j2k_get_num_tp(%struct.opj_cp* %76, i32 0, i32 %80) #12
  %83 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1
  %84 = bitcast %union.anon* %83 to %struct.opj_j2k_enc*
  %85 = getelementptr inbounds %struct.opj_j2k_enc, %struct.opj_j2k_enc* %84, i64 0, i32 1
  %86 = load i32, i32* %85, align 4
  %87 = add i32 %86, 1
  store i32 %87, i32* %85, align 4
  %88 = icmp ugt i32 %82, 1
  br i1 %88, label %89, label %94

89:                                               ; preds = %70
  %90 = getelementptr inbounds %union.anon, %union.anon* %83, i64 0, i32 0, i32 0
  %91 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %76, i64 0, i32 0
  %92 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 3
  %93 = bitcast i32* %92 to i8**
  br label %107

94:                                               ; preds = %142, %70
  %95 = phi i32 [ %73, %70 ], [ %127, %142 ]
  %96 = phi i8* [ %72, %70 ], [ %124, %142 ]
  %97 = phi i32 [ 0, %70 ], [ %126, %142 ]
  %98 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %78, i64 %81, i32 6
  %99 = load i32, i32* %98, align 4
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %203, label %101

101:                                              ; preds = %94
  %102 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %75, i64 0, i32 4
  %103 = getelementptr inbounds %union.anon, %union.anon* %83, i64 0, i32 0, i32 0
  %104 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %76, i64 0, i32 0
  %105 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 3
  %106 = bitcast i32* %105 to i8**
  br label %147

107:                                              ; preds = %142, %89
  %108 = phi i32 [ 0, %89 ], [ %126, %142 ]
  %109 = phi i32 [ 1, %89 ], [ %145, %142 ]
  %110 = phi i8* [ %72, %89 ], [ %124, %142 ]
  %111 = phi i32 [ %73, %89 ], [ %127, %142 ]
  store i32 %109, i32* %90, align 8
  store i32 0, i32* %4, align 4
  %112 = call fastcc i32 @opj_j2k_write_sot(%struct.opj_j2k* %0, i8* %110, i32 %111, i32* nonnull %4, %struct.opj_event_mgr* %2) #12
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %202, label %114

114:                                              ; preds = %107
  %115 = load i32, i32* %4, align 4
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds i8, i8* %110, i64 %116
  %118 = sub i32 %111, %115
  store i32 0, i32* %4, align 4
  %119 = call fastcc i32 @opj_j2k_write_sod(%struct.opj_j2k* %0, %struct.opj_tcd* %75, i8* %117, i32* nonnull %4, i32 %118, %struct.opj_event_mgr* %2) #12
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %202, label %121

121:                                              ; preds = %114
  %122 = load i32, i32* %4, align 4
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %117, i64 %123
  %125 = add i32 %122, %115
  %126 = add i32 %125, %108
  %127 = sub i32 %118, %122
  %128 = getelementptr inbounds i8, i8* %110, i64 6
  call void @opj_write_bytes_LE(i8* %128, i32 %125, i32 4) #12
  %129 = load i16, i16* %91, align 8
  %130 = add i16 %129, -3
  %131 = icmp ult i16 %130, 4
  %132 = add i16 %129, -1024
  %133 = icmp ult i16 %132, 1436
  %134 = or i1 %131, %133
  br i1 %134, label %135, label %142

135:                                              ; preds = %121
  %136 = load i8*, i8** %93, align 8
  %137 = load i32, i32* %79, align 8
  call void @opj_write_bytes_LE(i8* %136, i32 %137, i32 1) #12
  %138 = load i8*, i8** %93, align 8
  %139 = getelementptr inbounds i8, i8* %138, i64 1
  store i8* %139, i8** %93, align 8
  call void @opj_write_bytes_LE(i8* %139, i32 %125, i32 4) #12
  %140 = load i8*, i8** %93, align 8
  %141 = getelementptr inbounds i8, i8* %140, i64 4
  store i8* %141, i8** %93, align 8
  br label %142

142:                                              ; preds = %135, %121
  %143 = load i32, i32* %85, align 4
  %144 = add i32 %143, 1
  store i32 %144, i32* %85, align 4
  %145 = add nuw i32 %109, 1
  %146 = icmp eq i32 %145, %82
  br i1 %146, label %94, label %107

147:                                              ; preds = %195, %101
  %148 = phi i32 [ 1, %101 ], [ %199, %195 ]
  %149 = phi i32 [ %97, %101 ], [ %198, %195 ]
  %150 = phi i8* [ %96, %101 ], [ %197, %195 ]
  %151 = phi i32 [ %95, %101 ], [ %196, %195 ]
  store i32 %148, i32* %102, align 8
  %152 = load i32, i32* %79, align 8
  %153 = call fastcc i32 @opj_j2k_get_num_tp(%struct.opj_cp* %76, i32 %148, i32 %152) #12
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %195, label %155

155:                                              ; preds = %147, %190
  %156 = phi i32 [ %172, %190 ], [ %149, %147 ]
  %157 = phi i32 [ %193, %190 ], [ 0, %147 ]
  %158 = phi i8* [ %174, %190 ], [ %150, %147 ]
  %159 = phi i32 [ %175, %190 ], [ %151, %147 ]
  store i32 %157, i32* %103, align 8
  store i32 0, i32* %4, align 4
  %160 = call fastcc i32 @opj_j2k_write_sot(%struct.opj_j2k* %0, i8* %158, i32 %159, i32* nonnull %4, %struct.opj_event_mgr* %2) #12
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %202, label %162

162:                                              ; preds = %155
  %163 = load i32, i32* %4, align 4
  %164 = zext i32 %163 to i64
  %165 = getelementptr inbounds i8, i8* %158, i64 %164
  %166 = sub i32 %159, %163
  store i32 0, i32* %4, align 4
  %167 = call fastcc i32 @opj_j2k_write_sod(%struct.opj_j2k* %0, %struct.opj_tcd* %75, i8* %165, i32* nonnull %4, i32 %166, %struct.opj_event_mgr* %2) #12
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %202, label %169

169:                                              ; preds = %162
  %170 = load i32, i32* %4, align 4
  %171 = add i32 %170, %163
  %172 = add i32 %171, %156
  %173 = zext i32 %170 to i64
  %174 = getelementptr inbounds i8, i8* %165, i64 %173
  %175 = sub i32 %166, %170
  %176 = getelementptr inbounds i8, i8* %158, i64 6
  call void @opj_write_bytes_LE(i8* %176, i32 %171, i32 4) #12
  %177 = load i16, i16* %104, align 8
  %178 = add i16 %177, -3
  %179 = icmp ult i16 %178, 4
  %180 = add i16 %177, -1024
  %181 = icmp ult i16 %180, 1436
  %182 = or i1 %179, %181
  br i1 %182, label %183, label %190

183:                                              ; preds = %169
  %184 = load i8*, i8** %106, align 8
  %185 = load i32, i32* %79, align 8
  call void @opj_write_bytes_LE(i8* %184, i32 %185, i32 1) #12
  %186 = load i8*, i8** %106, align 8
  %187 = getelementptr inbounds i8, i8* %186, i64 1
  store i8* %187, i8** %106, align 8
  call void @opj_write_bytes_LE(i8* %187, i32 %171, i32 4) #12
  %188 = load i8*, i8** %106, align 8
  %189 = getelementptr inbounds i8, i8* %188, i64 4
  store i8* %189, i8** %106, align 8
  br label %190

190:                                              ; preds = %183, %169
  %191 = load i32, i32* %85, align 4
  %192 = add i32 %191, 1
  store i32 %192, i32* %85, align 4
  %193 = add nuw i32 %157, 1
  %194 = icmp eq i32 %193, %153
  br i1 %194, label %195, label %155

195:                                              ; preds = %190, %147
  %196 = phi i32 [ %151, %147 ], [ %175, %190 ]
  %197 = phi i8* [ %150, %147 ], [ %174, %190 ]
  %198 = phi i32 [ %149, %147 ], [ %172, %190 ]
  %199 = add i32 %148, 1
  %200 = load i32, i32* %98, align 4
  %201 = icmp ugt i32 %199, %200
  br i1 %201, label %203, label %147

202:                                              ; preds = %107, %114, %155, %162
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %74) #12
  br label %213

203:                                              ; preds = %195, %94
  %204 = phi i32 [ %97, %94 ], [ %198, %195 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %74) #12
  %205 = add i32 %51, %204
  %206 = load i8*, i8** %9, align 8
  %207 = zext i32 %205 to i64
  %208 = call i64 @opj_stream_write_data(%struct.opj_stream_private* %1, i8* %206, i64 %207, %struct.opj_event_mgr* %2) #12
  %209 = icmp eq i64 %208, %207
  br i1 %209, label %210, label %213

210:                                              ; preds = %203
  %211 = load i32, i32* %79, align 8
  %212 = add i32 %211, 1
  store i32 %212, i32* %79, align 8
  br label %213

213:                                              ; preds = %202, %69, %203, %210
  %214 = phi i32 [ 1, %210 ], [ 0, %203 ], [ 0, %69 ], [ 0, %202 ]
  ret i32 %214
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_j2k_end_compress(%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*) local_unnamed_addr #3 {
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 5
  %5 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %4, align 8
  %6 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %5, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_write_eoc to void ()*), %struct.opj_event_mgr* %2) #12
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %56, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 0
  %10 = load i16, i16* %9, align 8
  %11 = add i16 %10, -3
  %12 = icmp ult i16 %11, 4
  %13 = add i16 %10, -1024
  %14 = icmp ult i16 %13, 1436
  %15 = or i1 %12, %14
  br i1 %15, label %16, label %20

16:                                               ; preds = %8
  %17 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %4, align 8
  %18 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %17, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_write_updated_tlm to void ()*), %struct.opj_event_mgr* %2) #12
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %56, label %20

20:                                               ; preds = %16, %8
  %21 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %4, align 8
  %22 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %21, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_write_epc to void ()*), %struct.opj_event_mgr* %2) #12
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %56, label %24

24:                                               ; preds = %20
  %25 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %4, align 8
  %26 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %25, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_end_encoding to void ()*), %struct.opj_event_mgr* %2) #12
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %56, label %28

28:                                               ; preds = %24
  %29 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %4, align 8
  %30 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %29, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_destroy_header_memory to void ()*), %struct.opj_event_mgr* %2) #12
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %56, label %32

32:                                               ; preds = %28
  %33 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %4, align 8
  %34 = tail call i32 @opj_procedure_list_get_nb_procedures(%struct.opj_procedure_list* %33) #12
  %35 = tail call void ()** @opj_procedure_list_get_first_procedure(%struct.opj_procedure_list* %33) #12
  %36 = icmp eq i32 %34, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %32
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %33) #12
  br label %56

38:                                               ; preds = %32
  %39 = bitcast void ()** %35 to i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)**
  br label %40

40:                                               ; preds = %50, %38
  %41 = phi i32 [ %53, %50 ], [ 0, %38 ]
  %42 = phi i32 [ %51, %50 ], [ 1, %38 ]
  %43 = phi i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** [ %52, %50 ], [ %39, %38 ]
  %44 = icmp eq i32 %42, 0
  br i1 %44, label %50, label %45

45:                                               ; preds = %40
  %46 = load i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %43, align 8
  %47 = tail call i32 %46(%struct.opj_j2k* %0, %struct.opj_stream_private* %1, %struct.opj_event_mgr* %2) #12
  %48 = icmp ne i32 %47, 0
  %49 = zext i1 %48 to i32
  br label %50

50:                                               ; preds = %45, %40
  %51 = phi i32 [ 0, %40 ], [ %49, %45 ]
  %52 = getelementptr inbounds i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %43, i64 1
  %53 = add nuw i32 %41, 1
  %54 = icmp eq i32 %53, %34
  br i1 %54, label %55, label %40

55:                                               ; preds = %50
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %33) #12
  ret i32 %51

56:                                               ; preds = %24, %20, %16, %3, %37, %28
  %57 = phi i32 [ 0, %28 ], [ 1, %37 ], [ 0, %3 ], [ 0, %16 ], [ 0, %20 ], [ 0, %24 ]
  ret i32 %57
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_j2k_start_compress(%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_image*, %struct.opj_event_mgr*) local_unnamed_addr #3 {
  %5 = tail call %struct.opj_image* @opj_image_create0() #12
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  store %struct.opj_image* %5, %struct.opj_image** %6, align 8
  %7 = icmp eq %struct.opj_image* %5, null
  br i1 %7, label %8, label %10

8:                                                ; preds = %4
  %9 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.92, i64 0, i64 0)) #12
  br label %185

10:                                               ; preds = %4
  tail call void @opj_copy_image_header(%struct.opj_image* %2, %struct.opj_image* nonnull %5) #12
  %11 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 6
  %12 = load %struct.opj_image_comp*, %struct.opj_image_comp** %11, align 8
  %13 = icmp eq %struct.opj_image_comp* %12, null
  br i1 %13, label %40, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %2, i64 0, i32 4
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %40, label %18

18:                                               ; preds = %14, %38
  %19 = phi i32 [ %34, %38 ], [ %16, %14 ]
  %20 = phi %struct.opj_image_comp* [ %39, %38 ], [ %12, %14 ]
  %21 = phi i64 [ %35, %38 ], [ 0, %14 ]
  %22 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %20, i64 %21, i32 11
  %23 = load i32*, i32** %22, align 8
  %24 = icmp eq i32* %23, null
  br i1 %24, label %33, label %25

25:                                               ; preds = %18
  %26 = load %struct.opj_image*, %struct.opj_image** %6, align 8
  %27 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %26, i64 0, i32 6
  %28 = load %struct.opj_image_comp*, %struct.opj_image_comp** %27, align 8
  %29 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %28, i64 %21, i32 11
  store i32* %23, i32** %29, align 8
  %30 = load %struct.opj_image_comp*, %struct.opj_image_comp** %11, align 8
  %31 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %30, i64 %21, i32 11
  store i32* null, i32** %31, align 8
  %32 = load i32, i32* %15, align 8
  br label %33

33:                                               ; preds = %18, %25
  %34 = phi i32 [ %19, %18 ], [ %32, %25 ]
  %35 = add nuw nsw i64 %21, 1
  %36 = zext i32 %34 to i64
  %37 = icmp ult i64 %35, %36
  br i1 %37, label %38, label %40

38:                                               ; preds = %33
  %39 = load %struct.opj_image_comp*, %struct.opj_image_comp** %11, align 8
  br label %18

40:                                               ; preds = %33, %14, %10
  %41 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 6
  %42 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %41, align 8
  %43 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %42, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_build_encoder to void ()*), %struct.opj_event_mgr* %3) #12
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %185, label %45

45:                                               ; preds = %40
  %46 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %41, align 8
  %47 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %46, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_encoding_validation to void ()*), %struct.opj_event_mgr* %3) #12
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %185, label %49

49:                                               ; preds = %45
  %50 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %41, align 8
  %51 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %50, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_mct_validation to void ()*), %struct.opj_event_mgr* %3) #12
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %185, label %53

53:                                               ; preds = %49
  %54 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %41, align 8
  %55 = tail call i32 @opj_procedure_list_get_nb_procedures(%struct.opj_procedure_list* %54) #12
  %56 = tail call void ()** @opj_procedure_list_get_first_procedure(%struct.opj_procedure_list* %54) #12
  %57 = icmp eq i32 %55, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %53
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %54) #12
  br label %77

59:                                               ; preds = %53
  %60 = bitcast void ()** %56 to i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)**
  br label %61

61:                                               ; preds = %70, %59
  %62 = phi i32 [ %74, %70 ], [ 0, %59 ]
  %63 = phi i32 [ %72, %70 ], [ 1, %59 ]
  %64 = phi i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** [ %73, %70 ], [ %60, %59 ]
  %65 = icmp eq i32 %63, 0
  br i1 %65, label %70, label %66

66:                                               ; preds = %61
  %67 = load i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %64, align 8
  %68 = tail call i32 %67(%struct.opj_j2k* %0, %struct.opj_stream_private* %1, %struct.opj_event_mgr* %3) #12
  %69 = icmp ne i32 %68, 0
  br label %70

70:                                               ; preds = %66, %61
  %71 = phi i1 [ false, %61 ], [ %69, %66 ]
  %72 = zext i1 %71 to i32
  %73 = getelementptr inbounds i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %64, i64 1
  %74 = add nuw i32 %62, 1
  %75 = icmp eq i32 %74, %55
  br i1 %75, label %76, label %61

76:                                               ; preds = %70
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %54) #12
  br i1 %71, label %77, label %185

77:                                               ; preds = %76, %58
  %78 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 5
  %79 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %78, align 8
  %80 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %79, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_init_info to void ()*), %struct.opj_event_mgr* %3) #12
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %185, label %82

82:                                               ; preds = %77
  %83 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %78, align 8
  %84 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %83, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_write_soc to void ()*), %struct.opj_event_mgr* %3) #12
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %185, label %86

86:                                               ; preds = %82
  %87 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %78, align 8
  %88 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %87, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_write_siz to void ()*), %struct.opj_event_mgr* %3) #12
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %185, label %90

90:                                               ; preds = %86
  %91 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %78, align 8
  %92 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %91, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_write_cod to void ()*), %struct.opj_event_mgr* %3) #12
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %185, label %94

94:                                               ; preds = %90
  %95 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %78, align 8
  %96 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %95, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_write_qcd to void ()*), %struct.opj_event_mgr* %3) #12
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %185, label %98

98:                                               ; preds = %94
  %99 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %78, align 8
  %100 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %99, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_write_all_coc to void ()*), %struct.opj_event_mgr* %3) #12
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %185, label %102

102:                                              ; preds = %98
  %103 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %78, align 8
  %104 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %103, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_write_all_qcc to void ()*), %struct.opj_event_mgr* %3) #12
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %185, label %106

106:                                              ; preds = %102
  %107 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 0
  %108 = load i16, i16* %107, align 8
  %109 = add i16 %108, -3
  %110 = icmp ult i16 %109, 4
  %111 = add i16 %108, -1024
  %112 = icmp ult i16 %111, 1436
  %113 = or i1 %110, %112
  br i1 %113, label %114, label %125

114:                                              ; preds = %106
  %115 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %78, align 8
  %116 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %115, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_write_tlm to void ()*), %struct.opj_event_mgr* %3) #12
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %185, label %118

118:                                              ; preds = %114
  %119 = load i16, i16* %107, align 8
  %120 = icmp eq i16 %119, 4
  br i1 %120, label %121, label %125

121:                                              ; preds = %118
  %122 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %78, align 8
  %123 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %122, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_write_poc to void ()*), %struct.opj_event_mgr* %3) #12
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %185, label %125

125:                                              ; preds = %121, %118, %106
  %126 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %78, align 8
  %127 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %126, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_write_regions to void ()*), %struct.opj_event_mgr* %3) #12
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %185, label %129

129:                                              ; preds = %125
  %130 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 5
  %131 = load i8*, i8** %130, align 8
  %132 = icmp eq i8* %131, null
  br i1 %132, label %137, label %133

133:                                              ; preds = %129
  %134 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %78, align 8
  %135 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %134, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_write_com to void ()*), %struct.opj_event_mgr* %3) #12
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %185, label %137

137:                                              ; preds = %133, %129
  %138 = load i16, i16* %107, align 8
  %139 = and i16 %138, -32512
  %140 = icmp eq i16 %139, -32512
  br i1 %140, label %141, label %145

141:                                              ; preds = %137
  %142 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %78, align 8
  %143 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %142, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_write_mct_data_group to void ()*), %struct.opj_event_mgr* %3) #12
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %185, label %145

145:                                              ; preds = %141, %137
  %146 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 7
  %147 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %146, align 8
  %148 = icmp eq %struct.opj_codestream_index* %147, null
  br i1 %148, label %153, label %149

149:                                              ; preds = %145
  %150 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %78, align 8
  %151 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %150, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_get_end_header to void ()*), %struct.opj_event_mgr* %3) #12
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %185, label %153

153:                                              ; preds = %149, %145
  %154 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %78, align 8
  %155 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %154, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_create_tcd to void ()*), %struct.opj_event_mgr* %3) #12
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %185, label %157

157:                                              ; preds = %153
  %158 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %78, align 8
  %159 = tail call i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list* %158, void ()* bitcast (i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)* @opj_j2k_update_rates to void ()*), %struct.opj_event_mgr* %3) #12
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %185, label %161

161:                                              ; preds = %157
  %162 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %78, align 8
  %163 = tail call i32 @opj_procedure_list_get_nb_procedures(%struct.opj_procedure_list* %162) #12
  %164 = tail call void ()** @opj_procedure_list_get_first_procedure(%struct.opj_procedure_list* %162) #12
  %165 = icmp eq i32 %163, 0
  br i1 %165, label %166, label %167

166:                                              ; preds = %161
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %162) #12
  br label %185

167:                                              ; preds = %161
  %168 = bitcast void ()** %164 to i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)**
  br label %169

169:                                              ; preds = %179, %167
  %170 = phi i32 [ %182, %179 ], [ 0, %167 ]
  %171 = phi i32 [ %180, %179 ], [ 1, %167 ]
  %172 = phi i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** [ %181, %179 ], [ %168, %167 ]
  %173 = icmp eq i32 %171, 0
  br i1 %173, label %179, label %174

174:                                              ; preds = %169
  %175 = load i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %172, align 8
  %176 = tail call i32 %175(%struct.opj_j2k* %0, %struct.opj_stream_private* %1, %struct.opj_event_mgr* %3) #12
  %177 = icmp ne i32 %176, 0
  %178 = zext i1 %177 to i32
  br label %179

179:                                              ; preds = %174, %169
  %180 = phi i32 [ 0, %169 ], [ %178, %174 ]
  %181 = getelementptr inbounds i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)*, i32 (%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*)** %172, i64 1
  %182 = add nuw i32 %170, 1
  %183 = icmp eq i32 %182, %163
  br i1 %183, label %184, label %169

184:                                              ; preds = %179
  tail call void @opj_procedure_list_clear(%struct.opj_procedure_list* %162) #12
  ret i32 %180

185:                                              ; preds = %76, %153, %149, %141, %133, %125, %121, %114, %102, %98, %94, %90, %86, %82, %77, %45, %40, %166, %157, %49, %8
  %186 = phi i32 [ 0, %8 ], [ 0, %49 ], [ 0, %76 ], [ 0, %157 ], [ 1, %166 ], [ 0, %40 ], [ 0, %45 ], [ 0, %77 ], [ 0, %82 ], [ 0, %86 ], [ 0, %90 ], [ 0, %94 ], [ 0, %98 ], [ 0, %102 ], [ 0, %114 ], [ 0, %121 ], [ 0, %125 ], [ 0, %133 ], [ 0, %141 ], [ 0, %149 ], [ 0, %153 ]
  ret i32 %186
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_j2k_write_tile(%struct.opj_j2k*, i32, i8*, i32, %struct.opj_stream_private*, %struct.opj_event_mgr*) local_unnamed_addr #3 {
  %7 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, %1
  br i1 %9, label %12, label %10

10:                                               ; preds = %6
  %11 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %5, i32 1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.278, i64 0, i64 0)) #12
  br label %43

12:                                               ; preds = %6
  %13 = add i32 %1, 1
  %14 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 6
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 7
  %17 = load i32, i32* %16, align 4
  %18 = mul i32 %17, %15
  %19 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %5, i32 4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.279, i64 0, i64 0), i32 %13, i32 %18) #12
  %20 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1
  %21 = bitcast %union.anon* %20 to %struct.opj_j2k_enc*
  %22 = getelementptr inbounds %struct.opj_j2k_enc, %struct.opj_j2k_enc* %21, i64 0, i32 1
  store i32 0, i32* %22, align 4
  %23 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %24 = load %struct.opj_tcp*, %struct.opj_tcp** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %24, i64 %25, i32 17
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 9
  %29 = load %struct.opj_tcd*, %struct.opj_tcd** %28, align 8
  %30 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %29, i64 0, i32 3
  store i32 %27, i32* %30, align 4
  %31 = getelementptr inbounds %union.anon, %union.anon* %20, i64 0, i32 0, i32 0
  store i32 0, i32* %31, align 8
  %32 = load %struct.opj_tcd*, %struct.opj_tcd** %28, align 8
  %33 = load i32, i32* %7, align 8
  %34 = tail call i32 @opj_tcd_init_encode_tile(%struct.opj_tcd* %32, i32 %33, %struct.opj_event_mgr* %5) #12
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %43, label %36

36:                                               ; preds = %12
  %37 = load %struct.opj_tcd*, %struct.opj_tcd** %28, align 8
  %38 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %37, i64 0, i32 6
  %39 = load %struct.opj_image*, %struct.opj_image** %38, align 8
  %40 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %39, i64 0, i32 4
  %41 = load i32, i32* %40, align 8
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %68, label %53

43:                                               ; preds = %10, %12
  %44 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %5, i32 1, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.93, i64 0, i64 0), i32 %1) #12
  ret i32 0

45:                                               ; preds = %53
  %46 = load %struct.opj_tcd*, %struct.opj_tcd** %28, align 8
  %47 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %46, i64 0, i32 6
  %48 = load %struct.opj_image*, %struct.opj_image** %47, align 8
  %49 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %48, i64 0, i32 4
  %50 = load i32, i32* %49, align 8
  %51 = zext i32 %50 to i64
  %52 = icmp ult i64 %65, %51
  br i1 %52, label %53, label %68

53:                                               ; preds = %36, %45
  %54 = phi i64 [ %65, %45 ], [ 0, %36 ]
  %55 = phi %struct.opj_tcd* [ %46, %45 ], [ %37, %36 ]
  %56 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %55, i64 0, i32 5
  %57 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %56, align 8
  %58 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %57, i64 0, i32 0
  %59 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %58, align 8
  %60 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %59, i64 0, i32 5
  %61 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %60, align 8
  %62 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %61, i64 %54
  %63 = tail call i32 @opj_alloc_tile_component_data(%struct.opj_tcd_tilecomp* %62) #12
  %64 = icmp eq i32 %63, 0
  %65 = add nuw nsw i64 %54, 1
  br i1 %64, label %66, label %45

66:                                               ; preds = %53
  %67 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %5, i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.89, i64 0, i64 0)) #12
  br label %80

68:                                               ; preds = %45, %36
  %69 = phi %struct.opj_tcd* [ %37, %36 ], [ %46, %45 ]
  %70 = zext i32 %3 to i64
  %71 = tail call i32 @opj_tcd_copy_tile_data(%struct.opj_tcd* %69, i8* %2, i64 %70) #12
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %75

73:                                               ; preds = %68
  %74 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %5, i32 1, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.91, i64 0, i64 0)) #12
  br label %80

75:                                               ; preds = %68
  %76 = tail call fastcc i32 @opj_j2k_post_write_tile(%struct.opj_j2k* %0, %struct.opj_stream_private* %4, %struct.opj_event_mgr* %5)
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %80

78:                                               ; preds = %75
  %79 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %5, i32 1, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.94, i64 0, i64 0), i32 %1) #12
  br label %80

80:                                               ; preds = %73, %78, %66, %75
  %81 = phi i32 [ 1, %75 ], [ 0, %66 ], [ 0, %78 ], [ 0, %73 ]
  ret i32 %81
}

; Function Attrs: nofree nounwind readonly
declare i8* @getenv(i8* nocapture) local_unnamed_addr #9

declare hidden i32 @opj_get_num_cpus() local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #6

declare i32 @opj_procedure_list_add_procedure(%struct.opj_procedure_list*, void ()*, %struct.opj_event_mgr*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_read_header_procedure(%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*) #3 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca [2 x i8], align 1
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #12
  store i32 -1431655766, i32* %9, align 4
  %12 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #12
  store i32 -1431655766, i32* %10, align 4
  %13 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 0
  store i32 1, i32* %13, align 8
  %14 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %14) #12
  store i8 -86, i8* %14, align 1
  %15 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 1
  store i8 -86, i8* %15, align 1
  %16 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #12
  store i32 -1431655766, i32* %8, align 4
  %17 = call i64 @opj_stream_read_data(%struct.opj_stream_private* %1, i8* nonnull %14, i64 2, %struct.opj_event_mgr* %2) #12
  %18 = icmp eq i64 %17, 2
  br i1 %18, label %19, label %61

19:                                               ; preds = %3
  call void @opj_read_bytes_LE(i8* nonnull %14, i32* nonnull %8, i32 2) #12
  %20 = load i32, i32* %8, align 4
  %21 = icmp eq i32 %20, 65359
  br i1 %21, label %22, label %61

22:                                               ; preds = %19
  store i32 2, i32* %13, align 8
  %23 = call i64 @opj_stream_tell(%struct.opj_stream_private* %1) #12
  %24 = add nsw i64 %23, -2
  %25 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 7
  %26 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %25, align 8
  %27 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %26, i64 0, i32 0
  store i64 %24, i64* %27, align 8
  %28 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %25, align 8
  %29 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %28, i64 0, i32 0
  %30 = load i64, i64* %29, align 8
  %31 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 4, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.156, i64 0, i64 0), i64 %30) #12
  %32 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %25, align 8
  %33 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %32, i64 0, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %32, i64 0, i32 3
  %36 = load i32, i32* %35, align 8
  %37 = add i32 %36, 1
  %38 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %32, i64 0, i32 5
  %39 = load i32, i32* %38, align 8
  %40 = icmp ugt i32 %37, %39
  br i1 %40, label %44, label %41

41:                                               ; preds = %22
  %42 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %32, i64 0, i32 4
  %43 = load %struct.opj_marker_info*, %struct.opj_marker_info** %42, align 8
  br label %63

44:                                               ; preds = %22
  %45 = uitofp i32 %39 to float
  %46 = fadd float %45, 1.000000e+02
  %47 = fptoui float %46 to i32
  store i32 %47, i32* %38, align 8
  %48 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %32, i64 0, i32 4
  %49 = bitcast %struct.opj_marker_info** %48 to i8**
  %50 = load i8*, i8** %49, align 8
  %51 = zext i32 %47 to i64
  %52 = mul nuw nsw i64 %51, 24
  %53 = call i8* @opj_realloc(i8* %50, i64 %52) #12
  %54 = icmp eq i8* %53, null
  br i1 %54, label %58, label %55

55:                                               ; preds = %44
  store i8* %53, i8** %49, align 8
  %56 = bitcast i8* %53 to %struct.opj_marker_info*
  %57 = load i32, i32* %35, align 8
  br label %63

58:                                               ; preds = %44
  %59 = load i8*, i8** %49, align 8
  call void @opj_free(i8* %59) #12
  store %struct.opj_marker_info* null, %struct.opj_marker_info** %48, align 8
  store i32 0, i32* %38, align 8
  store i32 0, i32* %35, align 8
  %60 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.150, i64 0, i64 0)) #12
  br label %61

61:                                               ; preds = %58, %3, %19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #12
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %14) #12
  %62 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.145, i64 0, i64 0)) #12
  br label %531

63:                                               ; preds = %55, %41
  %64 = phi i32 [ %36, %41 ], [ %57, %55 ]
  %65 = phi %struct.opj_marker_info* [ %43, %41 ], [ %56, %55 ]
  %66 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %32, i64 0, i32 4
  %67 = zext i32 %64 to i64
  %68 = getelementptr inbounds %struct.opj_marker_info, %struct.opj_marker_info* %65, i64 %67, i32 0
  store i16 -177, i16* %68, align 8
  %69 = shl i64 %34, 32
  %70 = ashr exact i64 %69, 32
  %71 = load %struct.opj_marker_info*, %struct.opj_marker_info** %66, align 8
  %72 = load i32, i32* %35, align 8
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds %struct.opj_marker_info, %struct.opj_marker_info* %71, i64 %73, i32 1
  store i64 %70, i64* %74, align 8
  %75 = load %struct.opj_marker_info*, %struct.opj_marker_info** %66, align 8
  %76 = load i32, i32* %35, align 8
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds %struct.opj_marker_info, %struct.opj_marker_info* %75, i64 %77, i32 2
  store i32 2, i32* %78, align 8
  %79 = load i32, i32* %35, align 8
  %80 = add i32 %79, 1
  store i32 %80, i32* %35, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #12
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %14) #12
  %81 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 2
  %82 = load i8*, i8** %81, align 8
  %83 = call i64 @opj_stream_read_data(%struct.opj_stream_private* %1, i8* %82, i64 2, %struct.opj_event_mgr* %2) #12
  %84 = icmp eq i64 %83, 2
  br i1 %84, label %87, label %85

85:                                               ; preds = %63
  %86 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.32, i64 0, i64 0)) #12
  br label %531

87:                                               ; preds = %63
  %88 = load i8*, i8** %81, align 8
  call void @opj_read_bytes_LE(i8* %88, i32* nonnull %9, i32 2) #12
  %89 = load i32, i32* %9, align 4
  %90 = icmp eq i32 %89, 65424
  br i1 %90, label %336, label %91

91:                                               ; preds = %87
  %92 = bitcast i32* %6 to i8*
  %93 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 3
  br label %94

94:                                               ; preds = %91, %327
  %95 = phi i32 [ %89, %91 ], [ %329, %327 ]
  %96 = phi i32 [ 0, %91 ], [ %216, %327 ]
  %97 = phi i32 [ 0, %91 ], [ %214, %327 ]
  %98 = phi i32 [ 0, %91 ], [ %212, %327 ]
  %99 = icmp ult i32 %95, 65280
  br i1 %99, label %100, label %102

100:                                              ; preds = %94
  %101 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.146, i64 0, i64 0), i32 %95) #12
  br label %531

102:                                              ; preds = %94, %102
  %103 = phi %struct.opj_dec_memory_marker_handler* [ %109, %102 ], [ getelementptr inbounds ([21 x %struct.opj_dec_memory_marker_handler], [21 x %struct.opj_dec_memory_marker_handler]* @j2k_memory_marker_handler_tab, i64 0, i64 0), %94 ]
  %104 = getelementptr inbounds %struct.opj_dec_memory_marker_handler, %struct.opj_dec_memory_marker_handler* %103, i64 0, i32 0
  %105 = load i32, i32* %104, align 8
  %106 = icmp eq i32 %105, 0
  %107 = icmp eq i32 %105, %95
  %108 = or i1 %106, %107
  %109 = getelementptr inbounds %struct.opj_dec_memory_marker_handler, %struct.opj_dec_memory_marker_handler* %103, i64 1
  br i1 %108, label %110, label %102

110:                                              ; preds = %102
  br i1 %106, label %111, label %207

111:                                              ; preds = %110
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %92) #12
  store i32 -1431655766, i32* %6, align 4
  %112 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 2, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.157, i64 0, i64 0)) #12
  %113 = load i8*, i8** %81, align 8
  %114 = call i64 @opj_stream_read_data(%struct.opj_stream_private* %1, i8* %113, i64 2, %struct.opj_event_mgr* %2) #12
  %115 = icmp eq i64 %114, 2
  br i1 %115, label %116, label %176

116:                                              ; preds = %111, %171
  %117 = phi i32 [ %172, %171 ], [ 2, %111 ]
  %118 = load i8*, i8** %81, align 8
  call void @opj_read_bytes_LE(i8* %118, i32* nonnull %6, i32 2) #12
  %119 = load i32, i32* %6, align 4
  %120 = icmp ult i32 %119, 65280
  br i1 %120, label %171, label %121

121:                                              ; preds = %116, %121
  %122 = phi %struct.opj_dec_memory_marker_handler* [ %128, %121 ], [ getelementptr inbounds ([21 x %struct.opj_dec_memory_marker_handler], [21 x %struct.opj_dec_memory_marker_handler]* @j2k_memory_marker_handler_tab, i64 0, i64 0), %116 ]
  %123 = getelementptr inbounds %struct.opj_dec_memory_marker_handler, %struct.opj_dec_memory_marker_handler* %122, i64 0, i32 0
  %124 = load i32, i32* %123, align 8
  %125 = icmp eq i32 %124, 0
  %126 = icmp eq i32 %124, %119
  %127 = or i1 %125, %126
  %128 = getelementptr inbounds %struct.opj_dec_memory_marker_handler, %struct.opj_dec_memory_marker_handler* %122, i64 1
  br i1 %127, label %129, label %121

129:                                              ; preds = %121
  %130 = load i32, i32* %13, align 8
  %131 = getelementptr inbounds %struct.opj_dec_memory_marker_handler, %struct.opj_dec_memory_marker_handler* %122, i64 0, i32 1
  %132 = load i32, i32* %131, align 4
  %133 = and i32 %132, %130
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %176, label %135

135:                                              ; preds = %129
  switch i32 %124, label %137 [
    i32 0, label %169
    i32 65424, label %136
  ]

136:                                              ; preds = %135
  store i32 65424, i32* %9, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %92) #12
  br label %331

137:                                              ; preds = %135
  %138 = getelementptr inbounds %struct.opj_dec_memory_marker_handler, %struct.opj_dec_memory_marker_handler* %122, i64 0, i32 0
  %139 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %25, align 8
  %140 = call i64 @opj_stream_tell(%struct.opj_stream_private* %1) #12
  %141 = trunc i64 %140 to i32
  %142 = sub i32 %141, %117
  %143 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %139, i64 0, i32 3
  %144 = load i32, i32* %143, align 8
  %145 = add i32 %144, 1
  %146 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %139, i64 0, i32 5
  %147 = load i32, i32* %146, align 8
  %148 = icmp ugt i32 %145, %147
  br i1 %148, label %152, label %149

149:                                              ; preds = %137
  %150 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %139, i64 0, i32 4
  %151 = load %struct.opj_marker_info*, %struct.opj_marker_info** %150, align 8
  br label %180

152:                                              ; preds = %137
  %153 = uitofp i32 %147 to float
  %154 = fadd float %153, 1.000000e+02
  %155 = fptoui float %154 to i32
  store i32 %155, i32* %146, align 8
  %156 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %139, i64 0, i32 4
  %157 = bitcast %struct.opj_marker_info** %156 to i8**
  %158 = load i8*, i8** %157, align 8
  %159 = zext i32 %155 to i64
  %160 = mul nuw nsw i64 %159, 24
  %161 = call i8* @opj_realloc(i8* %158, i64 %160) #12
  %162 = icmp eq i8* %161, null
  br i1 %162, label %166, label %163

163:                                              ; preds = %152
  store i8* %161, i8** %157, align 8
  %164 = bitcast i8* %161 to %struct.opj_marker_info*
  %165 = load i32, i32* %143, align 8
  br label %180

166:                                              ; preds = %152
  %167 = bitcast %struct.opj_marker_info** %156 to i8**
  %168 = load i8*, i8** %167, align 8
  call void @opj_free(i8* %168) #12
  store %struct.opj_marker_info* null, %struct.opj_marker_info** %156, align 8
  store i32 0, i32* %146, align 8
  store i32 0, i32* %143, align 8
  br label %176

169:                                              ; preds = %135
  %170 = add i32 %117, 2
  br label %171

171:                                              ; preds = %169, %116
  %172 = phi i32 [ %117, %116 ], [ %170, %169 ]
  %173 = load i8*, i8** %81, align 8
  %174 = call i64 @opj_stream_read_data(%struct.opj_stream_private* %1, i8* %173, i64 2, %struct.opj_event_mgr* %2) #12
  %175 = icmp eq i64 %174, 2
  br i1 %175, label %116, label %176

176:                                              ; preds = %111, %129, %171, %166
  %177 = phi i8* [ getelementptr inbounds ([36 x i8], [36 x i8]* @.str.150, i64 0, i64 0), %166 ], [ getelementptr inbounds ([43 x i8], [43 x i8]* @.str.34, i64 0, i64 0), %129 ], [ getelementptr inbounds ([18 x i8], [18 x i8]* @.str.32, i64 0, i64 0), %171 ], [ getelementptr inbounds ([18 x i8], [18 x i8]* @.str.32, i64 0, i64 0), %111 ]
  %178 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* %177) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %92) #12
  %179 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.147, i64 0, i64 0)) #12
  br label %531

180:                                              ; preds = %149, %163
  %181 = phi i32 [ %144, %149 ], [ %165, %163 ]
  %182 = phi %struct.opj_marker_info* [ %151, %149 ], [ %164, %163 ]
  %183 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %139, i64 0, i32 4
  %184 = zext i32 %181 to i64
  %185 = getelementptr inbounds %struct.opj_marker_info, %struct.opj_marker_info* %182, i64 %184, i32 0
  store i16 0, i16* %185, align 8
  %186 = sext i32 %142 to i64
  %187 = load %struct.opj_marker_info*, %struct.opj_marker_info** %183, align 8
  %188 = load i32, i32* %143, align 8
  %189 = zext i32 %188 to i64
  %190 = getelementptr inbounds %struct.opj_marker_info, %struct.opj_marker_info* %187, i64 %189, i32 1
  store i64 %186, i64* %190, align 8
  %191 = load %struct.opj_marker_info*, %struct.opj_marker_info** %183, align 8
  %192 = load i32, i32* %143, align 8
  %193 = zext i32 %192 to i64
  %194 = getelementptr inbounds %struct.opj_marker_info, %struct.opj_marker_info* %191, i64 %193, i32 2
  store i32 %117, i32* %194, align 8
  %195 = load i32, i32* %143, align 8
  %196 = add i32 %195, 1
  store i32 %196, i32* %143, align 8
  %197 = load i32, i32* %138, align 8
  store i32 %197, i32* %9, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %92) #12
  %198 = icmp eq i32 %197, 65424
  br i1 %198, label %331, label %199

199:                                              ; preds = %180, %199
  %200 = phi %struct.opj_dec_memory_marker_handler* [ %206, %199 ], [ getelementptr inbounds ([21 x %struct.opj_dec_memory_marker_handler], [21 x %struct.opj_dec_memory_marker_handler]* @j2k_memory_marker_handler_tab, i64 0, i64 0), %180 ]
  %201 = getelementptr inbounds %struct.opj_dec_memory_marker_handler, %struct.opj_dec_memory_marker_handler* %200, i64 0, i32 0
  %202 = load i32, i32* %201, align 8
  %203 = icmp eq i32 %202, 0
  %204 = icmp eq i32 %202, %197
  %205 = or i1 %203, %204
  %206 = getelementptr inbounds %struct.opj_dec_memory_marker_handler, %struct.opj_dec_memory_marker_handler* %200, i64 1
  br i1 %205, label %207, label %199

207:                                              ; preds = %199, %110
  %208 = phi i32 [ %105, %110 ], [ %202, %199 ]
  %209 = phi %struct.opj_dec_memory_marker_handler* [ %103, %110 ], [ %200, %199 ]
  %210 = getelementptr inbounds %struct.opj_dec_memory_marker_handler, %struct.opj_dec_memory_marker_handler* %209, i64 0, i32 0
  %211 = icmp eq i32 %208, 65361
  %212 = select i1 %211, i32 1, i32 %98
  %213 = icmp eq i32 %208, 65362
  %214 = select i1 %213, i32 1, i32 %97
  %215 = icmp eq i32 %208, 65372
  %216 = select i1 %215, i32 1, i32 %96
  %217 = load i32, i32* %13, align 8
  %218 = getelementptr inbounds %struct.opj_dec_memory_marker_handler, %struct.opj_dec_memory_marker_handler* %209, i64 0, i32 1
  %219 = load i32, i32* %218, align 4
  %220 = and i32 %219, %217
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %222, label %224

222:                                              ; preds = %207
  %223 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.34, i64 0, i64 0)) #12
  br label %531

224:                                              ; preds = %207
  %225 = load i8*, i8** %81, align 8
  %226 = call i64 @opj_stream_read_data(%struct.opj_stream_private* %1, i8* %225, i64 2, %struct.opj_event_mgr* %2) #12
  %227 = icmp eq i64 %226, 2
  br i1 %227, label %230, label %228

228:                                              ; preds = %224
  %229 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.32, i64 0, i64 0)) #12
  br label %531

230:                                              ; preds = %224
  %231 = load i8*, i8** %81, align 8
  call void @opj_read_bytes_LE(i8* %231, i32* nonnull %10, i32 2) #12
  %232 = load i32, i32* %10, align 4
  %233 = icmp ult i32 %232, 2
  br i1 %233, label %234, label %236

234:                                              ; preds = %230
  %235 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.148, i64 0, i64 0)) #12
  br label %531

236:                                              ; preds = %230
  %237 = add i32 %232, -2
  store i32 %237, i32* %10, align 4
  %238 = load i32, i32* %93, align 8
  %239 = icmp ugt i32 %237, %238
  %240 = load i8*, i8** %81, align 8
  br i1 %239, label %241, label %250

241:                                              ; preds = %236
  %242 = zext i32 %237 to i64
  %243 = call i8* @opj_realloc(i8* %240, i64 %242) #12
  %244 = icmp eq i8* %243, null
  br i1 %244, label %245, label %248

245:                                              ; preds = %241
  %246 = load i8*, i8** %81, align 8
  call void @opj_free(i8* %246) #12
  store i8* null, i8** %81, align 8
  store i32 0, i32* %93, align 8
  %247 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.36, i64 0, i64 0)) #12
  br label %531

248:                                              ; preds = %241
  store i8* %243, i8** %81, align 8
  %249 = load i32, i32* %10, align 4
  store i32 %249, i32* %93, align 8
  br label %250

250:                                              ; preds = %236, %248
  %251 = phi i32 [ %249, %248 ], [ %237, %236 ]
  %252 = phi i8* [ %243, %248 ], [ %240, %236 ]
  %253 = zext i32 %251 to i64
  %254 = call i64 @opj_stream_read_data(%struct.opj_stream_private* %1, i8* %252, i64 %253, %struct.opj_event_mgr* %2) #12
  %255 = load i32, i32* %10, align 4
  %256 = zext i32 %255 to i64
  %257 = icmp eq i64 %254, %256
  br i1 %257, label %260, label %258

258:                                              ; preds = %250
  %259 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.32, i64 0, i64 0)) #12
  br label %531

260:                                              ; preds = %250
  %261 = getelementptr inbounds %struct.opj_dec_memory_marker_handler, %struct.opj_dec_memory_marker_handler* %209, i64 0, i32 2
  %262 = load i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)*, i32 (%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*)** %261, align 8
  %263 = load i8*, i8** %81, align 8
  %264 = call i32 %262(%struct.opj_j2k* %0, i8* %263, i32 %255, %struct.opj_event_mgr* %2) #12
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %266, label %268

266:                                              ; preds = %260
  %267 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.149, i64 0, i64 0)) #12
  br label %531

268:                                              ; preds = %260
  %269 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %25, align 8
  %270 = load i32, i32* %210, align 8
  %271 = call i64 @opj_stream_tell(%struct.opj_stream_private* %1) #12
  %272 = trunc i64 %271 to i32
  %273 = load i32, i32* %10, align 4
  %274 = sub i32 -4, %273
  %275 = add i32 %274, %272
  %276 = add i32 %273, 4
  %277 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %269, i64 0, i32 3
  %278 = load i32, i32* %277, align 8
  %279 = add i32 %278, 1
  %280 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %269, i64 0, i32 5
  %281 = load i32, i32* %280, align 8
  %282 = icmp ugt i32 %279, %281
  br i1 %282, label %286, label %283

283:                                              ; preds = %268
  %284 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %269, i64 0, i32 4
  %285 = load %struct.opj_marker_info*, %struct.opj_marker_info** %284, align 8
  br label %304

286:                                              ; preds = %268
  %287 = uitofp i32 %281 to float
  %288 = fadd float %287, 1.000000e+02
  %289 = fptoui float %288 to i32
  store i32 %289, i32* %280, align 8
  %290 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %269, i64 0, i32 4
  %291 = bitcast %struct.opj_marker_info** %290 to i8**
  %292 = load i8*, i8** %291, align 8
  %293 = zext i32 %289 to i64
  %294 = mul nuw nsw i64 %293, 24
  %295 = call i8* @opj_realloc(i8* %292, i64 %294) #12
  %296 = icmp eq i8* %295, null
  br i1 %296, label %300, label %297

297:                                              ; preds = %286
  store i8* %295, i8** %291, align 8
  %298 = bitcast i8* %295 to %struct.opj_marker_info*
  %299 = load i32, i32* %277, align 8
  br label %304

300:                                              ; preds = %286
  %301 = bitcast %struct.opj_marker_info** %290 to i8**
  %302 = load i8*, i8** %301, align 8
  call void @opj_free(i8* %302) #12
  store %struct.opj_marker_info* null, %struct.opj_marker_info** %290, align 8
  store i32 0, i32* %280, align 8
  store i32 0, i32* %277, align 8
  %303 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.150, i64 0, i64 0)) #12
  br label %531

304:                                              ; preds = %297, %283
  %305 = phi i32 [ %278, %283 ], [ %299, %297 ]
  %306 = phi %struct.opj_marker_info* [ %285, %283 ], [ %298, %297 ]
  %307 = trunc i32 %270 to i16
  %308 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %269, i64 0, i32 4
  %309 = zext i32 %305 to i64
  %310 = getelementptr inbounds %struct.opj_marker_info, %struct.opj_marker_info* %306, i64 %309, i32 0
  store i16 %307, i16* %310, align 8
  %311 = sext i32 %275 to i64
  %312 = load %struct.opj_marker_info*, %struct.opj_marker_info** %308, align 8
  %313 = load i32, i32* %277, align 8
  %314 = zext i32 %313 to i64
  %315 = getelementptr inbounds %struct.opj_marker_info, %struct.opj_marker_info* %312, i64 %314, i32 1
  store i64 %311, i64* %315, align 8
  %316 = load %struct.opj_marker_info*, %struct.opj_marker_info** %308, align 8
  %317 = load i32, i32* %277, align 8
  %318 = zext i32 %317 to i64
  %319 = getelementptr inbounds %struct.opj_marker_info, %struct.opj_marker_info* %316, i64 %318, i32 2
  store i32 %276, i32* %319, align 8
  %320 = load i32, i32* %277, align 8
  %321 = add i32 %320, 1
  store i32 %321, i32* %277, align 8
  %322 = load i8*, i8** %81, align 8
  %323 = call i64 @opj_stream_read_data(%struct.opj_stream_private* %1, i8* %322, i64 2, %struct.opj_event_mgr* %2) #12
  %324 = icmp eq i64 %323, 2
  br i1 %324, label %327, label %325

325:                                              ; preds = %304
  %326 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.32, i64 0, i64 0)) #12
  br label %531

327:                                              ; preds = %304
  %328 = load i8*, i8** %81, align 8
  call void @opj_read_bytes_LE(i8* %328, i32* nonnull %9, i32 2) #12
  %329 = load i32, i32* %9, align 4
  %330 = icmp eq i32 %329, 65424
  br i1 %330, label %331, label %94

331:                                              ; preds = %180, %327, %136
  %332 = phi i32 [ %98, %136 ], [ %98, %180 ], [ %212, %327 ]
  %333 = phi i32 [ %97, %136 ], [ %97, %180 ], [ %214, %327 ]
  %334 = phi i32 [ %96, %136 ], [ %96, %180 ], [ %216, %327 ]
  %335 = icmp eq i32 %332, 0
  br i1 %335, label %336, label %338

336:                                              ; preds = %87, %331
  %337 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.151, i64 0, i64 0)) #12
  br label %531

338:                                              ; preds = %331
  %339 = icmp eq i32 %333, 0
  br i1 %339, label %340, label %342

340:                                              ; preds = %338
  %341 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.152, i64 0, i64 0)) #12
  br label %531

342:                                              ; preds = %338
  %343 = icmp eq i32 %334, 0
  br i1 %343, label %344, label %346

344:                                              ; preds = %342
  %345 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.153, i64 0, i64 0)) #12
  br label %531

346:                                              ; preds = %342
  %347 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 21
  %348 = load i8, i8* %347, align 8
  %349 = and i8 %348, 1
  %350 = icmp eq i8 %349, 0
  br i1 %350, label %524, label %351

351:                                              ; preds = %346
  %352 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 8
  %353 = load i32, i32* %352, align 8
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %420, label %355

355:                                              ; preds = %351
  %356 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 9
  %357 = bitcast i32* %4 to i8*
  br label %358

358:                                              ; preds = %408, %355
  %359 = phi i32 [ %353, %355 ], [ %409, %408 ]
  %360 = phi i32 [ %353, %355 ], [ %410, %408 ]
  %361 = phi i64 [ 0, %355 ], [ %413, %408 ]
  %362 = phi i32 [ 0, %355 ], [ %412, %408 ]
  %363 = phi i32 [ 0, %355 ], [ %411, %408 ]
  %364 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %356, align 8
  %365 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %364, i64 %361, i32 0
  %366 = load i8*, i8** %365, align 8
  %367 = icmp eq i8* %366, null
  br i1 %367, label %408, label %368

368:                                              ; preds = %358
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %357) #12
  store i32 -1431655766, i32* %4, align 4
  %369 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %364, i64 %361, i32 1
  %370 = load i32, i32* %369, align 8
  %371 = icmp ugt i32 %370, %362
  %372 = sub i32 %370, %362
  %373 = call i32 @llvm.usub.sat.i32(i32 %362, i32 %370) #12
  %374 = icmp eq i32 %372, 0
  %375 = xor i1 %371, true
  %376 = or i1 %374, %375
  br i1 %376, label %402, label %377

377:                                              ; preds = %368
  %378 = zext i32 %362 to i64
  %379 = getelementptr inbounds i8, i8* %366, i64 %378
  %380 = select i1 %371, i8* %379, i8* %366
  br label %381

381:                                              ; preds = %387, %377
  %382 = phi i32 [ %391, %387 ], [ %363, %377 ]
  %383 = phi i32 [ %396, %387 ], [ %373, %377 ]
  %384 = phi i32 [ %397, %387 ], [ %372, %377 ]
  %385 = phi i8* [ %398, %387 ], [ %380, %377 ]
  %386 = icmp ult i32 %384, 4
  br i1 %386, label %406, label %387

387:                                              ; preds = %381
  call void @opj_read_bytes_LE(i8* %385, i32* nonnull %4, i32 4) #12
  %388 = getelementptr inbounds i8, i8* %385, i64 4
  %389 = add i32 %384, -4
  %390 = load i32, i32* %4, align 4
  %391 = add i32 %390, %382
  %392 = icmp ugt i32 %390, %389
  %393 = zext i32 %390 to i64
  %394 = getelementptr inbounds i8, i8* %388, i64 %393
  %395 = sub i32 %390, %389
  %396 = select i1 %392, i32 %395, i32 %383
  %397 = call i32 @llvm.usub.sat.i32(i32 %389, i32 %390) #12
  %398 = select i1 %392, i8* %388, i8* %394
  %399 = icmp eq i32 %397, 0
  br i1 %399, label %400, label %381

400:                                              ; preds = %387
  %401 = load i32, i32* %352, align 8
  br label %402

402:                                              ; preds = %400, %368
  %403 = phi i32 [ %359, %368 ], [ %401, %400 ]
  %404 = phi i32 [ %363, %368 ], [ %391, %400 ]
  %405 = phi i32 [ %373, %368 ], [ %396, %400 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %357) #12
  br label %408

406:                                              ; preds = %381
  %407 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.158, i64 0, i64 0)) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %357) #12
  br label %522

408:                                              ; preds = %402, %358
  %409 = phi i32 [ %359, %358 ], [ %403, %402 ]
  %410 = phi i32 [ %360, %358 ], [ %403, %402 ]
  %411 = phi i32 [ %363, %358 ], [ %404, %402 ]
  %412 = phi i32 [ %362, %358 ], [ %405, %402 ]
  %413 = add nuw nsw i64 %361, 1
  %414 = zext i32 %410 to i64
  %415 = icmp ult i64 %413, %414
  br i1 %415, label %358, label %416

416:                                              ; preds = %408
  %417 = icmp eq i32 %412, 0
  br i1 %417, label %420, label %418

418:                                              ; preds = %416
  %419 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.159, i64 0, i64 0)) #12
  br label %522

420:                                              ; preds = %416, %351
  %421 = phi i32 [ %411, %416 ], [ 0, %351 ]
  %422 = zext i32 %421 to i64
  %423 = call i8* @opj_malloc(i64 %422) #12
  %424 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 14
  store i8* %423, i8** %424, align 8
  %425 = icmp eq i8* %423, null
  br i1 %425, label %426, label %428

426:                                              ; preds = %420
  %427 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.160, i64 0, i64 0)) #12
  br label %522

428:                                              ; preds = %420
  %429 = ptrtoint i8* %423 to i64
  %430 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 11
  store i32 %421, i32* %430, align 8
  %431 = load i32, i32* %352, align 8
  %432 = icmp eq i32 %431, 0
  br i1 %432, label %513, label %433

433:                                              ; preds = %428
  %434 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 9
  %435 = bitcast i32* %5 to i8*
  br label %436

436:                                              ; preds = %502, %433
  %437 = phi i32 [ %431, %433 ], [ %503, %502 ]
  %438 = phi i64 [ 0, %433 ], [ %506, %502 ]
  %439 = phi i32 [ 0, %433 ], [ %505, %502 ]
  %440 = phi i32 [ 0, %433 ], [ %504, %502 ]
  %441 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %434, align 8
  %442 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %441, i64 %438, i32 0
  %443 = load i8*, i8** %442, align 8
  %444 = icmp eq i8* %443, null
  br i1 %444, label %502, label %445

445:                                              ; preds = %436
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %435) #12
  store i32 -1431655766, i32* %5, align 4
  %446 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %441, i64 %438, i32 1
  %447 = load i32, i32* %446, align 8
  %448 = icmp ult i32 %439, %447
  %449 = load i8*, i8** %424, align 8
  %450 = zext i32 %440 to i64
  %451 = getelementptr inbounds i8, i8* %449, i64 %450
  br i1 %448, label %456, label %452

452:                                              ; preds = %445
  %453 = zext i32 %447 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %451, i8* nonnull align 1 %443, i64 %453, i1 false) #12
  %454 = sub i32 %439, %447
  %455 = add i32 %447, %440
  br label %489

456:                                              ; preds = %445
  %457 = zext i32 %439 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %451, i8* nonnull align 1 %443, i64 %457, i1 false) #12
  %458 = sub i32 %447, %439
  %459 = add i32 %440, %439
  %460 = icmp eq i32 %458, 0
  br i1 %460, label %489, label %461

461:                                              ; preds = %456
  %462 = getelementptr inbounds i8, i8* %443, i64 %457
  br label %463

463:                                              ; preds = %481, %461
  %464 = phi i32 [ %487, %481 ], [ %459, %461 ]
  %465 = phi i32 [ %484, %481 ], [ %458, %461 ]
  %466 = phi i8* [ %486, %481 ], [ %462, %461 ]
  %467 = icmp ult i32 %465, 4
  br i1 %467, label %500, label %468

468:                                              ; preds = %463
  call void @opj_read_bytes_LE(i8* %466, i32* nonnull %5, i32 4) #12
  %469 = getelementptr inbounds i8, i8* %466, i64 4
  %470 = add i32 %465, -4
  %471 = load i32, i32* %5, align 4
  %472 = icmp ult i32 %470, %471
  %473 = load i8*, i8** %424, align 8
  %474 = zext i32 %464 to i64
  %475 = getelementptr inbounds i8, i8* %473, i64 %474
  br i1 %472, label %476, label %481

476:                                              ; preds = %468
  %477 = zext i32 %470 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %475, i8* align 1 %469, i64 %477, i1 false) #12
  %478 = load i32, i32* %5, align 4
  %479 = sub i32 %478, %470
  %480 = add i32 %470, %464
  br label %489

481:                                              ; preds = %468
  %482 = zext i32 %471 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %475, i8* align 1 %469, i64 %482, i1 false) #12
  %483 = load i32, i32* %5, align 4
  %484 = sub i32 %470, %483
  %485 = zext i32 %483 to i64
  %486 = getelementptr inbounds i8, i8* %469, i64 %485
  %487 = add i32 %483, %464
  %488 = icmp eq i32 %484, 0
  br i1 %488, label %489, label %463

489:                                              ; preds = %481, %476, %456, %452
  %490 = phi i32 [ %459, %456 ], [ %455, %452 ], [ %480, %476 ], [ %487, %481 ]
  %491 = phi i32 [ 0, %456 ], [ %454, %452 ], [ %479, %476 ], [ 0, %481 ]
  %492 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %434, align 8
  %493 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %492, i64 %438, i32 0
  %494 = load i8*, i8** %493, align 8
  call void @opj_free(i8* %494) #12
  %495 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %434, align 8
  %496 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %495, i64 %438, i32 0
  store i8* null, i8** %496, align 8
  %497 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %434, align 8
  %498 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %497, i64 %438, i32 1
  store i32 0, i32* %498, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %435) #12
  %499 = load i32, i32* %352, align 8
  br label %502

500:                                              ; preds = %463
  %501 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.158, i64 0, i64 0)) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %435) #12
  br label %522

502:                                              ; preds = %489, %436
  %503 = phi i32 [ %437, %436 ], [ %499, %489 ]
  %504 = phi i32 [ %440, %436 ], [ %490, %489 ]
  %505 = phi i32 [ %439, %436 ], [ %491, %489 ]
  %506 = add nuw nsw i64 %438, 1
  %507 = zext i32 %503 to i64
  %508 = icmp ult i64 %506, %507
  br i1 %508, label %436, label %509

509:                                              ; preds = %502
  %510 = bitcast i8** %424 to i64*
  %511 = load i64, i64* %510, align 8
  %512 = load i32, i32* %430, align 8
  br label %513

513:                                              ; preds = %509, %428
  %514 = phi i32 [ %512, %509 ], [ %421, %428 ]
  %515 = phi i64 [ %511, %509 ], [ %429, %428 ]
  %516 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 10
  %517 = bitcast i8** %516 to i64*
  store i64 %515, i64* %517, align 8
  %518 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 16
  store i32 %514, i32* %518, align 8
  store i32 0, i32* %352, align 8
  %519 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 9
  %520 = bitcast %struct.opj_ppx_struct** %519 to i8**
  %521 = load i8*, i8** %520, align 8
  call void @opj_free(i8* %521) #12
  store %struct.opj_ppx_struct* null, %struct.opj_ppx_struct** %519, align 8
  br label %524

522:                                              ; preds = %406, %418, %426, %500
  %523 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.154, i64 0, i64 0)) #12
  br label %531

524:                                              ; preds = %513, %346
  %525 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 4, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.155, i64 0, i64 0)) #12
  %526 = call i64 @opj_stream_tell(%struct.opj_stream_private* %1) #12
  %527 = add i64 %526, 4294967294
  %528 = and i64 %527, 4294967295
  %529 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %25, align 8
  %530 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %529, i64 0, i32 1
  store i64 %528, i64* %530, align 8
  store i32 8, i32* %13, align 8
  br label %531

531:                                              ; preds = %245, %524, %522, %344, %340, %336, %325, %300, %266, %258, %234, %228, %222, %176, %100, %85, %61
  %532 = phi i32 [ 0, %85 ], [ 0, %100 ], [ 0, %336 ], [ 0, %340 ], [ 0, %344 ], [ 1, %524 ], [ 0, %522 ], [ 0, %228 ], [ 0, %234 ], [ 0, %258 ], [ 0, %300 ], [ 0, %325 ], [ 0, %266 ], [ 0, %245 ], [ 0, %222 ], [ 0, %176 ], [ 0, %61 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #12
  ret i32 %532
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_copy_default_tcp_and_create_tcd(%struct.opj_j2k*, %struct.opj_stream_private* nocapture readnone, %struct.opj_event_mgr*) #3 {
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %5 = load %struct.opj_image*, %struct.opj_image** %4, align 8
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4
  %7 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 7
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 6
  %10 = load i32, i32* %9, align 8
  %11 = mul i32 %10, %8
  %12 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 1
  %15 = load %struct.opj_tcp*, %struct.opj_tcp** %14, align 8
  %16 = icmp eq i32 %11, 0
  br i1 %16, label %158, label %17

17:                                               ; preds = %3
  %18 = shl i32 %13, 2
  %19 = mul i32 %18, %13
  %20 = mul i32 %13, 1080
  %21 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %22 = load %struct.opj_tcp*, %struct.opj_tcp** %21, align 8
  %23 = bitcast %struct.opj_tcp* %15 to i8*
  %24 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %15, i64 0, i32 21
  %25 = zext i32 %19 to i64
  %26 = bitcast float** %24 to i8**
  %27 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %15, i64 0, i32 25
  %28 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %15, i64 0, i32 23
  %29 = bitcast %struct.opj_mct_data** %28 to i8**
  %30 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %15, i64 0, i32 24
  %31 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %15, i64 0, i32 28
  %32 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %15, i64 0, i32 26
  %33 = bitcast %struct.opj_simple_mcc_decorrelation_data** %32 to i8**
  %34 = bitcast %struct.opj_mct_data** %28 to i64*
  %35 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %15, i64 0, i32 15
  %36 = bitcast %struct.opj_tccp** %35 to i8**
  %37 = zext i32 %20 to i64
  br label %38

38:                                               ; preds = %152, %17
  %39 = phi i32 [ 0, %17 ], [ %156, %152 ]
  %40 = phi %struct.opj_tcp* [ %22, %17 ], [ %155, %152 ]
  %41 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %40, i64 0, i32 15
  %42 = load %struct.opj_tccp*, %struct.opj_tccp** %41, align 8
  %43 = bitcast %struct.opj_tcp* %40 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %23, i64 5696, i1 false)
  %44 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %40, i64 0, i32 29
  %45 = load i8, i8* %44, align 8
  %46 = and i8 %45, -4
  store i8 %46, i8* %44, align 8
  %47 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %40, i64 0, i32 10
  store i8* null, i8** %47, align 8
  %48 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %40, i64 0, i32 16
  store i32 -1, i32* %48, align 8
  %49 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %40, i64 0, i32 21
  store float* null, float** %49, align 8
  %50 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %40, i64 0, i32 25
  store i32 0, i32* %50, align 4
  %51 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %40, i64 0, i32 23
  store %struct.opj_mct_data* null, %struct.opj_mct_data** %51, align 8
  %52 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %40, i64 0, i32 28
  store i32 0, i32* %52, align 4
  %53 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %40, i64 0, i32 26
  store %struct.opj_simple_mcc_decorrelation_data* null, %struct.opj_simple_mcc_decorrelation_data** %53, align 8
  store %struct.opj_tccp* %42, %struct.opj_tccp** %41, align 8
  %54 = load float*, float** %24, align 8
  %55 = icmp eq float* %54, null
  br i1 %55, label %62, label %56

56:                                               ; preds = %38
  %57 = tail call i8* @opj_malloc(i64 %25) #12
  %58 = bitcast float** %49 to i8**
  store i8* %57, i8** %58, align 8
  %59 = icmp eq i8* %57, null
  br i1 %59, label %170, label %60

60:                                               ; preds = %56
  %61 = load i8*, i8** %26, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %57, i8* align 4 %61, i64 %25, i1 false)
  br label %62

62:                                               ; preds = %38, %60
  %63 = load i32, i32* %27, align 4
  %64 = shl i32 %63, 5
  %65 = zext i32 %64 to i64
  %66 = tail call i8* @opj_malloc(i64 %65) #12
  %67 = bitcast %struct.opj_mct_data** %51 to i8**
  store i8* %66, i8** %67, align 8
  %68 = icmp eq i8* %66, null
  br i1 %68, label %170, label %69

69:                                               ; preds = %62
  %70 = load i8*, i8** %29, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %66, i8* align 8 %70, i64 %65, i1 false)
  %71 = load i32, i32* %30, align 8
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %102, label %73

73:                                               ; preds = %69
  %74 = load %struct.opj_mct_data*, %struct.opj_mct_data** %51, align 8
  %75 = load %struct.opj_mct_data*, %struct.opj_mct_data** %28, align 8
  br label %76

76:                                               ; preds = %73, %94
  %77 = phi %struct.opj_mct_data* [ %96, %94 ], [ %74, %73 ]
  %78 = phi %struct.opj_mct_data* [ %95, %94 ], [ %75, %73 ]
  %79 = phi i32 [ %99, %94 ], [ 0, %73 ]
  %80 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %78, i64 0, i32 3
  %81 = load i8*, i8** %80, align 8
  %82 = icmp eq i8* %81, null
  br i1 %82, label %94, label %83

83:                                               ; preds = %76
  %84 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %78, i64 0, i32 4
  %85 = load i32, i32* %84, align 8
  %86 = zext i32 %85 to i64
  %87 = tail call i8* @opj_malloc(i64 %86) #12
  %88 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %77, i64 0, i32 3
  store i8* %87, i8** %88, align 8
  %89 = icmp eq i8* %87, null
  br i1 %89, label %170, label %90

90:                                               ; preds = %83
  %91 = load i8*, i8** %80, align 8
  %92 = load i32, i32* %84, align 8
  %93 = zext i32 %92 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %87, i8* align 1 %91, i64 %93, i1 false)
  br label %94

94:                                               ; preds = %76, %90
  %95 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %78, i64 1
  %96 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %77, i64 1
  %97 = load i32, i32* %50, align 4
  %98 = add i32 %97, 1
  store i32 %98, i32* %50, align 4
  %99 = add nuw i32 %79, 1
  %100 = load i32, i32* %30, align 8
  %101 = icmp ult i32 %99, %100
  br i1 %101, label %76, label %102

102:                                              ; preds = %94, %69
  %103 = load i32, i32* %31, align 4
  %104 = shl i32 %103, 5
  %105 = zext i32 %104 to i64
  %106 = tail call i8* @opj_malloc(i64 %105) #12
  %107 = bitcast %struct.opj_simple_mcc_decorrelation_data** %53 to i8**
  store i8* %106, i8** %107, align 8
  %108 = icmp eq i8* %106, null
  br i1 %108, label %170, label %109

109:                                              ; preds = %102
  %110 = load i8*, i8** %33, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %106, i8* align 8 %110, i64 %105, i1 false)
  %111 = load i32, i32* %31, align 4
  store i32 %111, i32* %52, align 4
  %112 = load i32, i32* %31, align 4
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %152, label %114

114:                                              ; preds = %109
  %115 = load %struct.opj_simple_mcc_decorrelation_data*, %struct.opj_simple_mcc_decorrelation_data** %53, align 8
  %116 = load %struct.opj_simple_mcc_decorrelation_data*, %struct.opj_simple_mcc_decorrelation_data** %32, align 8
  br label %117

117:                                              ; preds = %114, %146
  %118 = phi %struct.opj_simple_mcc_decorrelation_data* [ %148, %146 ], [ %115, %114 ]
  %119 = phi %struct.opj_simple_mcc_decorrelation_data* [ %147, %146 ], [ %116, %114 ]
  %120 = phi i32 [ %149, %146 ], [ 0, %114 ]
  %121 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %119, i64 0, i32 2
  %122 = load %struct.opj_mct_data*, %struct.opj_mct_data** %121, align 8
  %123 = icmp eq %struct.opj_mct_data* %122, null
  br i1 %123, label %133, label %124

124:                                              ; preds = %117
  %125 = load i64, i64* %34, align 8
  %126 = ptrtoint %struct.opj_mct_data* %122 to i64
  %127 = sub i64 %126, %125
  %128 = lshr exact i64 %127, 5
  %129 = load %struct.opj_mct_data*, %struct.opj_mct_data** %51, align 8
  %130 = and i64 %128, 4294967295
  %131 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %129, i64 %130
  %132 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %118, i64 0, i32 2
  store %struct.opj_mct_data* %131, %struct.opj_mct_data** %132, align 8
  br label %133

133:                                              ; preds = %117, %124
  %134 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %119, i64 0, i32 3
  %135 = load %struct.opj_mct_data*, %struct.opj_mct_data** %134, align 8
  %136 = icmp eq %struct.opj_mct_data* %135, null
  br i1 %136, label %146, label %137

137:                                              ; preds = %133
  %138 = load i64, i64* %34, align 8
  %139 = ptrtoint %struct.opj_mct_data* %135 to i64
  %140 = sub i64 %139, %138
  %141 = lshr exact i64 %140, 5
  %142 = load %struct.opj_mct_data*, %struct.opj_mct_data** %51, align 8
  %143 = and i64 %141, 4294967295
  %144 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %142, i64 %143
  %145 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %118, i64 0, i32 3
  store %struct.opj_mct_data* %144, %struct.opj_mct_data** %145, align 8
  br label %146

146:                                              ; preds = %133, %137
  %147 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %119, i64 1
  %148 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %118, i64 1
  %149 = add nuw i32 %120, 1
  %150 = load i32, i32* %31, align 4
  %151 = icmp ult i32 %149, %150
  br i1 %151, label %117, label %152

152:                                              ; preds = %146, %109
  %153 = bitcast %struct.opj_tccp* %42 to i8*
  %154 = load i8*, i8** %36, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %153, i8* align 4 %154, i64 %37, i1 false)
  %155 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %40, i64 1
  %156 = add nuw i32 %39, 1
  %157 = icmp eq i32 %156, %11
  br i1 %157, label %158, label %38

158:                                              ; preds = %152, %3
  %159 = tail call %struct.opj_tcd* @opj_tcd_create(i32 1) #12
  %160 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 9
  store %struct.opj_tcd* %159, %struct.opj_tcd** %160, align 8
  %161 = icmp eq %struct.opj_tcd* %159, null
  br i1 %161, label %170, label %162

162:                                              ; preds = %158
  %163 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 10
  %164 = load %struct.opj_thread_pool_t*, %struct.opj_thread_pool_t** %163, align 8
  %165 = tail call i32 @opj_tcd_init(%struct.opj_tcd* nonnull %159, %struct.opj_image* %5, %struct.opj_cp* %6, %struct.opj_thread_pool_t* %164) #12
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %167, label %170

167:                                              ; preds = %162
  %168 = load %struct.opj_tcd*, %struct.opj_tcd** %160, align 8
  tail call void @opj_tcd_destroy(%struct.opj_tcd* %168) #12
  store %struct.opj_tcd* null, %struct.opj_tcd** %160, align 8
  %169 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.44, i64 0, i64 0)) #12
  br label %170

170:                                              ; preds = %102, %62, %56, %83, %162, %158, %167
  %171 = phi i32 [ 0, %167 ], [ 0, %158 ], [ 1, %162 ], [ 0, %83 ], [ 0, %56 ], [ 0, %62 ], [ 0, %102 ]
  ret i32 %171
}

declare %struct.opj_tcd* @opj_tcd_create(i32) local_unnamed_addr #4

declare i32 @opj_tcd_init(%struct.opj_tcd*, %struct.opj_image*, %struct.opj_cp*, %struct.opj_thread_pool_t*) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @opj_j2k_build_decoder(%struct.opj_j2k* nocapture readnone, %struct.opj_stream_private* nocapture readnone, %struct.opj_event_mgr* nocapture readnone) #7 {
  ret i32 1
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @opj_j2k_decoding_validation(%struct.opj_j2k* nocapture readonly, %struct.opj_stream_private* nocapture readnone, %struct.opj_event_mgr* nocapture readnone) #0 {
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  %7 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 5
  %8 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %7, align 8
  %9 = icmp ne %struct.opj_procedure_list* %8, null
  %10 = and i1 %6, %9
  %11 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 6
  %12 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %11, align 8
  %13 = icmp ne %struct.opj_procedure_list* %12, null
  %14 = and i1 %10, %13
  %15 = zext i1 %14 to i32
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define internal void @opj_j2k_write_float_to_int16(i8* nocapture readonly, i8*, i32) #3 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %17, label %5

5:                                                ; preds = %3
  %6 = bitcast i8* %0 to float*
  br label %7

7:                                                ; preds = %7, %5
  %8 = phi i32 [ %15, %7 ], [ 0, %5 ]
  %9 = phi float* [ %11, %7 ], [ %6, %5 ]
  %10 = phi i8* [ %14, %7 ], [ %1, %5 ]
  %11 = getelementptr inbounds float, float* %9, i64 1
  %12 = load float, float* %9, align 4
  %13 = fptoui float %12 to i32
  tail call void @opj_write_bytes_LE(i8* %10, i32 %13, i32 2) #12
  %14 = getelementptr inbounds i8, i8* %10, i64 2
  %15 = add nuw i32 %8, 1
  %16 = icmp eq i32 %15, %2
  br i1 %16, label %17, label %7

17:                                               ; preds = %7, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @opj_j2k_write_float_to_int32(i8* nocapture readonly, i8*, i32) #3 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %17, label %5

5:                                                ; preds = %3
  %6 = bitcast i8* %0 to float*
  br label %7

7:                                                ; preds = %7, %5
  %8 = phi i32 [ %15, %7 ], [ 0, %5 ]
  %9 = phi float* [ %11, %7 ], [ %6, %5 ]
  %10 = phi i8* [ %14, %7 ], [ %1, %5 ]
  %11 = getelementptr inbounds float, float* %9, i64 1
  %12 = load float, float* %9, align 4
  %13 = fptoui float %12 to i32
  tail call void @opj_write_bytes_LE(i8* %10, i32 %13, i32 4) #12
  %14 = getelementptr inbounds i8, i8* %10, i64 4
  %15 = add nuw i32 %8, 1
  %16 = icmp eq i32 %15, %2
  br i1 %16, label %17, label %7

17:                                               ; preds = %7, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @opj_j2k_write_float_to_float(i8* nocapture readonly, i8*, i32) #3 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %16, label %5

5:                                                ; preds = %3
  %6 = bitcast i8* %0 to float*
  br label %7

7:                                                ; preds = %7, %5
  %8 = phi i32 [ %14, %7 ], [ 0, %5 ]
  %9 = phi float* [ %11, %7 ], [ %6, %5 ]
  %10 = phi i8* [ %13, %7 ], [ %1, %5 ]
  %11 = getelementptr inbounds float, float* %9, i64 1
  %12 = load float, float* %9, align 4
  tail call void @opj_write_float_LE(i8* %10, float %12) #12
  %13 = getelementptr inbounds i8, i8* %10, i64 4
  %14 = add nuw i32 %8, 1
  %15 = icmp eq i32 %14, %2
  br i1 %15, label %16, label %7

16:                                               ; preds = %7, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @opj_j2k_write_float_to_float64(i8* nocapture readonly, i8*, i32) #3 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %17, label %5

5:                                                ; preds = %3
  %6 = bitcast i8* %0 to float*
  br label %7

7:                                                ; preds = %7, %5
  %8 = phi i32 [ %15, %7 ], [ 0, %5 ]
  %9 = phi float* [ %11, %7 ], [ %6, %5 ]
  %10 = phi i8* [ %14, %7 ], [ %1, %5 ]
  %11 = getelementptr inbounds float, float* %9, i64 1
  %12 = load float, float* %9, align 4
  %13 = fpext float %12 to double
  tail call void @opj_write_double_LE(i8* %10, double %13) #12
  %14 = getelementptr inbounds i8, i8* %10, i64 8
  %15 = add nuw i32 %8, 1
  %16 = icmp eq i32 %15, %2
  br i1 %16, label %17, label %7

17:                                               ; preds = %7, %3
  ret void
}

declare void @opj_write_bytes_LE(i8*, i32, i32) local_unnamed_addr #4

declare void @opj_write_float_LE(i8*, float) local_unnamed_addr #4

declare void @opj_write_double_LE(i8*, double) local_unnamed_addr #4

declare i32 @opj_procedure_list_get_nb_procedures(%struct.opj_procedure_list*) local_unnamed_addr #4

declare void ()** @opj_procedure_list_get_first_procedure(%struct.opj_procedure_list*) local_unnamed_addr #4

declare void @opj_procedure_list_clear(%struct.opj_procedure_list*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_read_sot(%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*) #3 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #12
  store i32 -1431655766, i32* %5, align 4
  %9 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #12
  store i32 0, i32* %6, align 4
  %10 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #12
  store i32 -1431655766, i32* %7, align 4
  %11 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %12 = icmp eq i32 %2, 8
  br i1 %12, label %16, label %13

13:                                               ; preds = %4
  %14 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.161, i64 0, i64 0)) #12
  %15 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.161, i64 0, i64 0)) #12
  br label %323

16:                                               ; preds = %4
  tail call void @opj_read_bytes_LE(i8* %1, i32* %11, i32 2) #12
  %17 = getelementptr inbounds i8, i8* %1, i64 2
  call void @opj_read_bytes_LE(i8* %17, i32* nonnull %5, i32 4) #12
  %18 = getelementptr inbounds i8, i8* %1, i64 6
  call void @opj_read_bytes_LE(i8* %18, i32* nonnull %7, i32 1) #12
  %19 = getelementptr inbounds i8, i8* %1, i64 7
  call void @opj_read_bytes_LE(i8* %19, i32* nonnull %6, i32 1) #12
  %20 = load i32, i32* %11, align 8
  %21 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 6
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 7
  %24 = load i32, i32* %23, align 4
  %25 = mul i32 %24, %22
  %26 = icmp ult i32 %20, %25
  br i1 %26, label %29, label %27

27:                                               ; preds = %16
  %28 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.162, i64 0, i64 0), i32 %20) #12
  br label %323

29:                                               ; preds = %16
  %30 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %31 = load %struct.opj_tcp*, %struct.opj_tcp** %30, align 8
  %32 = zext i32 %20 to i64
  %33 = urem i32 %20, %22
  %34 = udiv i32 %20, %22
  %35 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 9
  %36 = load i32, i32* %35, align 8
  %37 = icmp slt i32 %36, 0
  %38 = icmp eq i32 %20, %36
  %39 = or i1 %37, %38
  br i1 %39, label %42, label %40

40:                                               ; preds = %29
  %41 = load i32, i32* %7, align 4
  br label %50

42:                                               ; preds = %29
  %43 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %31, i64 %32, i32 16
  %44 = load i32, i32* %43, align 8
  %45 = add nsw i32 %44, 1
  %46 = load i32, i32* %7, align 4
  %47 = icmp eq i32 %45, %46
  br i1 %47, label %50, label %48

48:                                               ; preds = %42
  %49 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.163, i64 0, i64 0), i32 %20, i32 %46, i32 %45) #12
  br label %323

50:                                               ; preds = %40, %42
  %51 = phi i32 [ %41, %40 ], [ %45, %42 ]
  %52 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %31, i64 %32, i32 16
  store i32 %51, i32* %52, align 8
  %53 = load i32, i32* %5, align 4
  %54 = add i32 %53, -1
  %55 = icmp ult i32 %54, 13
  br i1 %55, label %56, label %63

56:                                               ; preds = %50
  %57 = icmp eq i32 %53, 12
  br i1 %57, label %58, label %61

58:                                               ; preds = %56
  %59 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.164, i64 0, i64 0), i32 12) #12
  %60 = load i32, i32* %5, align 4
  br label %63

61:                                               ; preds = %56
  %62 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.165, i64 0, i64 0), i32 %53) #12
  br label %323

63:                                               ; preds = %58, %50
  %64 = phi i32 [ %60, %58 ], [ %53, %50 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %69

66:                                               ; preds = %63
  %67 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 4, i8* getelementptr inbounds ([111 x i8], [111 x i8]* @.str.166, i64 0, i64 0)) #12
  %68 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 11
  store i32 1, i32* %68, align 8
  br label %69

69:                                               ; preds = %63, %66
  %70 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %31, i64 %32, i32 17
  %71 = load i32, i32* %70, align 4
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %79, label %73

73:                                               ; preds = %69
  %74 = load i32, i32* %7, align 4
  %75 = icmp ult i32 %74, %71
  br i1 %75, label %79, label %76

76:                                               ; preds = %73
  %77 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([100 x i8], [100 x i8]* @.str.167, i64 0, i64 0), i32 %74, i32 %71) #12
  %78 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 11
  store i32 1, i32* %78, align 8
  br label %323

79:                                               ; preds = %73, %69
  %80 = load i32, i32* %6, align 4
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %102, label %82

82:                                               ; preds = %79
  %83 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 14
  %84 = load i8, i8* %83, align 8
  %85 = lshr i8 %84, 4
  %86 = and i8 %85, 1
  %87 = zext i8 %86 to i32
  %88 = add i32 %80, %87
  store i32 %88, i32* %6, align 4
  %89 = load i32, i32* %70, align 4
  %90 = load i32, i32* %7, align 4
  %91 = add i32 %89, -1
  %92 = icmp ult i32 %91, %90
  br i1 %92, label %93, label %96

93:                                               ; preds = %82
  %94 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([99 x i8], [99 x i8]* @.str.168, i64 0, i64 0), i32 %90, i32 %89) #12
  %95 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 11
  store i32 1, i32* %95, align 8
  br label %323

96:                                               ; preds = %82
  %97 = icmp ult i32 %90, %88
  br i1 %97, label %101, label %98

98:                                               ; preds = %96
  %99 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([108 x i8], [108 x i8]* @.str.169, i64 0, i64 0), i32 %90, i32 %88) #12
  %100 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 11
  store i32 1, i32* %100, align 8
  br label %323

101:                                              ; preds = %96
  store i32 %88, i32* %70, align 4
  br label %103

102:                                              ; preds = %79
  br i1 %72, label %112, label %103

103:                                              ; preds = %101, %102
  %104 = phi i32 [ %88, %101 ], [ %71, %102 ]
  %105 = load i32, i32* %7, align 4
  %106 = add i32 %105, 1
  %107 = icmp eq i32 %104, %106
  br i1 %107, label %108, label %112

108:                                              ; preds = %103
  %109 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 14
  %110 = load i8, i8* %109, align 8
  %111 = or i8 %110, 1
  store i8 %111, i8* %109, align 8
  br label %112

112:                                              ; preds = %102, %103, %108
  %113 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 11
  %114 = load i32, i32* %113, align 8
  %115 = icmp eq i32 %114, 0
  %116 = load i32, i32* %5, align 4
  %117 = add i32 %116, -12
  %118 = select i1 %115, i32 %117, i32 0
  %119 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 4
  store i32 %118, i32* %119, align 4
  %120 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 0
  store i32 16, i32* %120, align 8
  %121 = load i32, i32* %35, align 8
  %122 = icmp eq i32 %121, -1
  br i1 %122, label %123, label %146

123:                                              ; preds = %112
  %124 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 5
  %125 = load i32, i32* %124, align 8
  %126 = icmp ult i32 %33, %125
  br i1 %126, label %141, label %127

127:                                              ; preds = %123
  %128 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 7
  %129 = load i32, i32* %128, align 8
  %130 = icmp ult i32 %33, %129
  br i1 %130, label %131, label %141

131:                                              ; preds = %127
  %132 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 6
  %133 = load i32, i32* %132, align 4
  %134 = icmp ult i32 %34, %133
  br i1 %134, label %141, label %135

135:                                              ; preds = %131
  %136 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 8
  %137 = load i32, i32* %136, align 4
  %138 = icmp uge i32 %34, %137
  %139 = zext i1 %138 to i8
  %140 = shl nuw nsw i8 %139, 2
  br label %141

141:                                              ; preds = %127, %135, %131, %123
  %142 = phi i8 [ 4, %131 ], [ 4, %127 ], [ 4, %123 ], [ %140, %135 ]
  %143 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 14
  %144 = load i8, i8* %143, align 8
  %145 = and i8 %144, -5
  br label %154

146:                                              ; preds = %112
  %147 = load i32, i32* %11, align 8
  %148 = icmp ne i32 %147, %121
  %149 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 14
  %150 = zext i1 %148 to i8
  %151 = load i8, i8* %149, align 8
  %152 = shl nuw nsw i8 %150, 2
  %153 = and i8 %151, -5
  br label %154

154:                                              ; preds = %146, %141
  %155 = phi i8 [ %153, %146 ], [ %142, %141 ]
  %156 = phi i8 [ %152, %146 ], [ %145, %141 ]
  %157 = phi i8* [ %149, %146 ], [ %143, %141 ]
  %158 = or i8 %156, %155
  store i8 %158, i8* %157, align 8
  %159 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 7
  %160 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %159, align 8
  %161 = icmp eq %struct.opj_codestream_index* %160, null
  br i1 %161, label %323, label %162

162:                                              ; preds = %154
  %163 = load i32, i32* %11, align 8
  %164 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %160, i64 0, i32 7
  %165 = load %struct.opj_tile_index*, %struct.opj_tile_index** %164, align 8
  %166 = zext i32 %163 to i64
  %167 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %165, i64 %166, i32 0
  store i32 %163, i32* %167, align 8
  %168 = load i32, i32* %7, align 4
  %169 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %159, align 8
  %170 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %169, i64 0, i32 7
  %171 = load %struct.opj_tile_index*, %struct.opj_tile_index** %170, align 8
  %172 = load i32, i32* %11, align 8
  %173 = zext i32 %172 to i64
  %174 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %171, i64 %173, i32 3
  store i32 %168, i32* %174, align 4
  %175 = load i32, i32* %6, align 4
  %176 = icmp eq i32 %175, 0
  %177 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %159, align 8
  %178 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %177, i64 0, i32 7
  %179 = load %struct.opj_tile_index*, %struct.opj_tile_index** %178, align 8
  %180 = load i32, i32* %11, align 8
  %181 = zext i32 %180 to i64
  br i1 %176, label %244, label %182

182:                                              ; preds = %162
  %183 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %179, i64 %181, i32 1
  store i32 %175, i32* %183, align 4
  %184 = load i32, i32* %6, align 4
  %185 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %159, align 8
  %186 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %185, i64 0, i32 7
  %187 = load %struct.opj_tile_index*, %struct.opj_tile_index** %186, align 8
  %188 = load i32, i32* %11, align 8
  %189 = zext i32 %188 to i64
  %190 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %187, i64 %189, i32 2
  store i32 %184, i32* %190, align 8
  %191 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %159, align 8
  %192 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %191, i64 0, i32 7
  %193 = load %struct.opj_tile_index*, %struct.opj_tile_index** %192, align 8
  %194 = load i32, i32* %11, align 8
  %195 = zext i32 %194 to i64
  %196 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %193, i64 %195, i32 4
  %197 = load %struct.opj_tp_index*, %struct.opj_tp_index** %196, align 8
  %198 = icmp eq %struct.opj_tp_index* %197, null
  br i1 %198, label %199, label %220

199:                                              ; preds = %182
  %200 = load i32, i32* %6, align 4
  %201 = zext i32 %200 to i64
  %202 = call i8* @opj_calloc(i64 %201, i64 24) #12
  %203 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %159, align 8
  %204 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %203, i64 0, i32 7
  %205 = load %struct.opj_tile_index*, %struct.opj_tile_index** %204, align 8
  %206 = load i32, i32* %11, align 8
  %207 = zext i32 %206 to i64
  %208 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %205, i64 %207, i32 4
  %209 = bitcast %struct.opj_tp_index** %208 to i8**
  store i8* %202, i8** %209, align 8
  %210 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %159, align 8
  %211 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %210, i64 0, i32 7
  %212 = load %struct.opj_tile_index*, %struct.opj_tile_index** %211, align 8
  %213 = load i32, i32* %11, align 8
  %214 = zext i32 %213 to i64
  %215 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %212, i64 %214, i32 4
  %216 = load %struct.opj_tp_index*, %struct.opj_tp_index** %215, align 8
  %217 = icmp eq %struct.opj_tp_index* %216, null
  br i1 %217, label %218, label %323

218:                                              ; preds = %199
  %219 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.170, i64 0, i64 0)) #12
  br label %323

220:                                              ; preds = %182
  %221 = bitcast %struct.opj_tp_index* %197 to i8*
  %222 = load i32, i32* %6, align 4
  %223 = zext i32 %222 to i64
  %224 = mul nuw nsw i64 %223, 24
  %225 = call i8* @opj_realloc(i8* nonnull %221, i64 %224) #12
  %226 = icmp eq i8* %225, null
  %227 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %159, align 8
  %228 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %227, i64 0, i32 7
  %229 = load %struct.opj_tile_index*, %struct.opj_tile_index** %228, align 8
  %230 = load i32, i32* %11, align 8
  %231 = zext i32 %230 to i64
  %232 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %229, i64 %231, i32 4
  %233 = bitcast %struct.opj_tp_index** %232 to i8**
  br i1 %226, label %234, label %243

234:                                              ; preds = %220
  %235 = load i8*, i8** %233, align 8
  call void @opj_free(i8* %235) #12
  %236 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %159, align 8
  %237 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %236, i64 0, i32 7
  %238 = load %struct.opj_tile_index*, %struct.opj_tile_index** %237, align 8
  %239 = load i32, i32* %11, align 8
  %240 = zext i32 %239 to i64
  %241 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %238, i64 %240, i32 4
  store %struct.opj_tp_index* null, %struct.opj_tp_index** %241, align 8
  %242 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.170, i64 0, i64 0)) #12
  br label %323

243:                                              ; preds = %220
  store i8* %225, i8** %233, align 8
  br label %323

244:                                              ; preds = %162
  %245 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %179, i64 %181, i32 4
  %246 = load %struct.opj_tp_index*, %struct.opj_tp_index** %245, align 8
  %247 = icmp eq %struct.opj_tp_index* %246, null
  br i1 %247, label %248, label %277

248:                                              ; preds = %244
  %249 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %179, i64 %181, i32 2
  store i32 10, i32* %249, align 8
  %250 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %159, align 8
  %251 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %250, i64 0, i32 7
  %252 = load %struct.opj_tile_index*, %struct.opj_tile_index** %251, align 8
  %253 = load i32, i32* %11, align 8
  %254 = zext i32 %253 to i64
  %255 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %252, i64 %254, i32 2
  %256 = load i32, i32* %255, align 8
  %257 = zext i32 %256 to i64
  %258 = call i8* @opj_calloc(i64 %257, i64 24) #12
  %259 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %159, align 8
  %260 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %259, i64 0, i32 7
  %261 = load %struct.opj_tile_index*, %struct.opj_tile_index** %260, align 8
  %262 = load i32, i32* %11, align 8
  %263 = zext i32 %262 to i64
  %264 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %261, i64 %263, i32 4
  %265 = bitcast %struct.opj_tp_index** %264 to i8**
  store i8* %258, i8** %265, align 8
  %266 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %159, align 8
  %267 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %266, i64 0, i32 7
  %268 = load %struct.opj_tile_index*, %struct.opj_tile_index** %267, align 8
  %269 = load i32, i32* %11, align 8
  %270 = zext i32 %269 to i64
  %271 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %268, i64 %270, i32 4
  %272 = load %struct.opj_tp_index*, %struct.opj_tp_index** %271, align 8
  %273 = icmp eq %struct.opj_tp_index* %272, null
  br i1 %273, label %274, label %277

274:                                              ; preds = %248
  %275 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %268, i64 %270, i32 2
  store i32 0, i32* %275, align 8
  %276 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.170, i64 0, i64 0)) #12
  br label %323

277:                                              ; preds = %248, %244
  %278 = phi i64 [ %270, %248 ], [ %181, %244 ]
  %279 = phi %struct.opj_tile_index* [ %268, %248 ], [ %179, %244 ]
  %280 = load i32, i32* %7, align 4
  %281 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %279, i64 %278, i32 2
  %282 = load i32, i32* %281, align 8
  %283 = icmp ult i32 %280, %282
  br i1 %283, label %323, label %284

284:                                              ; preds = %277
  %285 = add i32 %280, 1
  store i32 %285, i32* %281, align 8
  %286 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %159, align 8
  %287 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %286, i64 0, i32 7
  %288 = load %struct.opj_tile_index*, %struct.opj_tile_index** %287, align 8
  %289 = load i32, i32* %11, align 8
  %290 = zext i32 %289 to i64
  %291 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %288, i64 %290, i32 4
  %292 = bitcast %struct.opj_tp_index** %291 to i8**
  %293 = load i8*, i8** %292, align 8
  %294 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %288, i64 %290, i32 2
  %295 = load i32, i32* %294, align 8
  %296 = zext i32 %295 to i64
  %297 = mul nuw nsw i64 %296, 24
  %298 = call i8* @opj_realloc(i8* %293, i64 %297) #12
  %299 = icmp eq i8* %298, null
  %300 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %159, align 8
  %301 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %300, i64 0, i32 7
  %302 = load %struct.opj_tile_index*, %struct.opj_tile_index** %301, align 8
  %303 = load i32, i32* %11, align 8
  %304 = zext i32 %303 to i64
  %305 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %302, i64 %304, i32 4
  %306 = bitcast %struct.opj_tp_index** %305 to i8**
  br i1 %299, label %307, label %322

307:                                              ; preds = %284
  %308 = load i8*, i8** %306, align 8
  call void @opj_free(i8* %308) #12
  %309 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %159, align 8
  %310 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %309, i64 0, i32 7
  %311 = load %struct.opj_tile_index*, %struct.opj_tile_index** %310, align 8
  %312 = load i32, i32* %11, align 8
  %313 = zext i32 %312 to i64
  %314 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %311, i64 %313, i32 4
  store %struct.opj_tp_index* null, %struct.opj_tp_index** %314, align 8
  %315 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %159, align 8
  %316 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %315, i64 0, i32 7
  %317 = load %struct.opj_tile_index*, %struct.opj_tile_index** %316, align 8
  %318 = load i32, i32* %11, align 8
  %319 = zext i32 %318 to i64
  %320 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %317, i64 %319, i32 2
  store i32 0, i32* %320, align 8
  %321 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.170, i64 0, i64 0)) #12
  br label %323

322:                                              ; preds = %284
  store i8* %298, i8** %306, align 8
  br label %323

323:                                              ; preds = %154, %277, %199, %243, %322, %307, %234, %274, %218, %98, %93, %76, %61, %48, %27, %13
  %324 = phi i32 [ 0, %27 ], [ 0, %48 ], [ 0, %76 ], [ 0, %93 ], [ 0, %98 ], [ 0, %234 ], [ 0, %218 ], [ 0, %307 ], [ 0, %274 ], [ 0, %61 ], [ 0, %13 ], [ 1, %322 ], [ 1, %243 ], [ 1, %199 ], [ 1, %277 ], [ 1, %154 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #12
  ret i32 %324
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_read_cod(%struct.opj_j2k* nocapture, i8*, i32, %struct.opj_event_mgr*) #3 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %2, i32* %5, align 4
  %7 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #12
  store i32 -1431655766, i32* %6, align 4
  %8 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %9 = load %struct.opj_image*, %struct.opj_image** %8, align 8
  %10 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 16
  br i1 %12, label %13, label %20

13:                                               ; preds = %4
  %14 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %15 = load %struct.opj_tcp*, %struct.opj_tcp** %14, align 8
  %16 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %17 = load i32, i32* %16, align 8
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %15, i64 %18
  br label %23

20:                                               ; preds = %4
  %21 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 1
  %22 = load %struct.opj_tcp*, %struct.opj_tcp** %21, align 8
  br label %23

23:                                               ; preds = %20, %13
  %24 = phi %struct.opj_tcp* [ %19, %13 ], [ %22, %20 ]
  %25 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %24, i64 0, i32 29
  %26 = load i8, i8* %25, align 8
  %27 = or i8 %26, 1
  store i8 %27, i8* %25, align 8
  %28 = icmp ult i32 %2, 5
  br i1 %28, label %29, label %31

29:                                               ; preds = %23
  %30 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.171, i64 0, i64 0)) #12
  br label %151

31:                                               ; preds = %23
  %32 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %24, i64 0, i32 0
  tail call void @opj_read_bytes_LE(i8* %1, i32* %32, i32 1) #12
  %33 = load i32, i32* %32, align 8
  %34 = icmp ugt i32 %33, 7
  br i1 %34, label %35, label %37

35:                                               ; preds = %31
  %36 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.172, i64 0, i64 0)) #12
  br label %151

37:                                               ; preds = %31
  %38 = getelementptr inbounds i8, i8* %1, i64 1
  call void @opj_read_bytes_LE(i8* %38, i32* nonnull %6, i32 1) #12
  %39 = getelementptr inbounds i8, i8* %1, i64 2
  %40 = load i32, i32* %6, align 4
  %41 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %24, i64 0, i32 1
  store i32 %40, i32* %41, align 4
  %42 = icmp sgt i32 %40, 4
  br i1 %42, label %43, label %45

43:                                               ; preds = %37
  %44 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.173, i64 0, i64 0)) #12
  store i32 -1, i32* %41, align 4
  br label %45

45:                                               ; preds = %43, %37
  %46 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %24, i64 0, i32 2
  call void @opj_read_bytes_LE(i8* %39, i32* %46, i32 2) #12
  %47 = load i32, i32* %46, align 8
  %48 = add i32 %47, -1
  %49 = icmp ugt i32 %48, 65534
  br i1 %49, label %50, label %52

50:                                               ; preds = %45
  %51 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.174, i64 0, i64 0), i32 %47) #12
  br label %151

52:                                               ; preds = %45
  %53 = getelementptr inbounds i8, i8* %1, i64 4
  %54 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 20, i32 0, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq i32 %55, 0
  %57 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %24, i64 0, i32 3
  %58 = select i1 %56, i32 %47, i32 %55
  store i32 %58, i32* %57, align 4
  %59 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %24, i64 0, i32 4
  call void @opj_read_bytes_LE(i8* %53, i32* %59, i32 1) #12
  %60 = getelementptr inbounds i8, i8* %1, i64 5
  %61 = load i32, i32* %59, align 8
  %62 = icmp ugt i32 %61, 1
  br i1 %62, label %63, label %65

63:                                               ; preds = %52
  %64 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.175, i64 0, i64 0)) #12
  br label %151

65:                                               ; preds = %52
  %66 = add i32 %2, -5
  store i32 %66, i32* %5, align 4
  %67 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %9, i64 0, i32 4
  %68 = load i32, i32* %67, align 8
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %82, label %70

70:                                               ; preds = %65
  %71 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %24, i64 0, i32 15
  br label %72

72:                                               ; preds = %70, %72
  %73 = phi i64 [ 0, %70 ], [ %78, %72 ]
  %74 = load i32, i32* %32, align 8
  %75 = and i32 %74, 1
  %76 = load %struct.opj_tccp*, %struct.opj_tccp** %71, align 8
  %77 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %76, i64 %73, i32 0
  store i32 %75, i32* %77, align 4
  %78 = add nuw nsw i64 %73, 1
  %79 = load i32, i32* %67, align 8
  %80 = zext i32 %79 to i64
  %81 = icmp ult i64 %78, %80
  br i1 %81, label %72, label %82

82:                                               ; preds = %72, %65
  %83 = call fastcc i32 @opj_j2k_read_SPCod_SPCoc(%struct.opj_j2k* %0, i32 0, i8* %60, i32* nonnull %5, %struct.opj_event_mgr* %3)
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %87

85:                                               ; preds = %82
  %86 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.171, i64 0, i64 0)) #12
  br label %151

87:                                               ; preds = %82
  %88 = load i32, i32* %5, align 4
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %92, label %90

90:                                               ; preds = %87
  %91 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.171, i64 0, i64 0)) #12
  br label %151

92:                                               ; preds = %87
  %93 = load i32, i32* %10, align 8
  %94 = icmp eq i32 %93, 16
  br i1 %94, label %95, label %102

95:                                               ; preds = %92
  %96 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %97 = load %struct.opj_tcp*, %struct.opj_tcp** %96, align 8
  %98 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %99 = load i32, i32* %98, align 8
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %97, i64 %100
  br label %105

102:                                              ; preds = %92
  %103 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 1
  %104 = load %struct.opj_tcp*, %struct.opj_tcp** %103, align 8
  br label %105

105:                                              ; preds = %102, %95
  %106 = phi %struct.opj_tcp* [ %101, %95 ], [ %104, %102 ]
  %107 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %106, i64 0, i32 15
  %108 = load %struct.opj_tccp*, %struct.opj_tccp** %107, align 8
  %109 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %108, i64 0, i32 1
  %110 = load %struct.opj_image*, %struct.opj_image** %8, align 8
  %111 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %110, i64 0, i32 4
  %112 = load i32, i32* %111, align 8
  %113 = icmp ugt i32 %112, 1
  br i1 %113, label %114, label %151

114:                                              ; preds = %105
  %115 = load i32, i32* %109, align 4
  %116 = shl i32 %115, 2
  %117 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %108, i64 0, i32 2
  %118 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %108, i64 0, i32 3
  %119 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %108, i64 0, i32 4
  %120 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %108, i64 0, i32 5
  %121 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %108, i64 0, i32 10, i64 0
  %122 = bitcast i32* %121 to i8*
  %123 = zext i32 %116 to i64
  %124 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %108, i64 0, i32 11, i64 0
  %125 = bitcast i32* %124 to i8*
  br label %126

126:                                              ; preds = %148, %114
  %127 = phi i32 [ %115, %114 ], [ %150, %148 ]
  %128 = phi %struct.opj_tccp* [ %108, %114 ], [ %149, %148 ]
  %129 = phi i32 [ 1, %114 ], [ %143, %148 ]
  %130 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %128, i64 1, i32 1
  store i32 %127, i32* %130, align 4
  %131 = load i32, i32* %117, align 4
  %132 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %128, i64 1, i32 2
  store i32 %131, i32* %132, align 4
  %133 = load i32, i32* %118, align 4
  %134 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %128, i64 1, i32 3
  store i32 %133, i32* %134, align 4
  %135 = load i32, i32* %119, align 4
  %136 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %128, i64 1, i32 4
  store i32 %135, i32* %136, align 4
  %137 = load i32, i32* %120, align 4
  %138 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %128, i64 1, i32 5
  store i32 %137, i32* %138, align 4
  %139 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %128, i64 1, i32 10, i64 0
  %140 = bitcast i32* %139 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %140, i8* align 4 %122, i64 %123, i1 false) #12
  %141 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %128, i64 1, i32 11, i64 0
  %142 = bitcast i32* %141 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %142, i8* align 4 %125, i64 %123, i1 false) #12
  %143 = add nuw i32 %129, 1
  %144 = load %struct.opj_image*, %struct.opj_image** %8, align 8
  %145 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %144, i64 0, i32 4
  %146 = load i32, i32* %145, align 8
  %147 = icmp ult i32 %143, %146
  br i1 %147, label %148, label %151

148:                                              ; preds = %126
  %149 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %128, i64 1
  %150 = load i32, i32* %109, align 4
  br label %126

151:                                              ; preds = %126, %105, %90, %85, %63, %50, %35, %29
  %152 = phi i32 [ 0, %29 ], [ 0, %35 ], [ 0, %50 ], [ 0, %63 ], [ 0, %90 ], [ 0, %85 ], [ 1, %105 ], [ 1, %126 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #12
  ret i32 %152
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_read_coc(%struct.opj_j2k* nocapture, i8*, i32, %struct.opj_event_mgr*) #3 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %2, i32* %5, align 4
  %7 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #12
  store i32 -1431655766, i32* %6, align 4
  %8 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 16
  br i1 %10, label %11, label %18

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %13 = load %struct.opj_tcp*, %struct.opj_tcp** %12, align 8
  %14 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %15 = load i32, i32* %14, align 8
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %16
  br label %21

18:                                               ; preds = %4
  %19 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 1
  %20 = load %struct.opj_tcp*, %struct.opj_tcp** %19, align 8
  br label %21

21:                                               ; preds = %18, %11
  %22 = phi %struct.opj_tcp* [ %17, %11 ], [ %20, %18 ]
  %23 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %24 = load %struct.opj_image*, %struct.opj_image** %23, align 8
  %25 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %24, i64 0, i32 4
  %26 = load i32, i32* %25, align 8
  %27 = icmp ult i32 %26, 257
  %28 = select i1 %27, i32 1, i32 2
  %29 = icmp ult i32 %28, %2
  br i1 %29, label %32, label %30

30:                                               ; preds = %21
  %31 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.183, i64 0, i64 0)) #12
  br label %58

32:                                               ; preds = %21
  %33 = xor i32 %28, -1
  %34 = add i32 %33, %2
  store i32 %34, i32* %5, align 4
  call void @opj_read_bytes_LE(i8* %1, i32* nonnull %6, i32 %28) #12
  %35 = zext i32 %28 to i64
  %36 = getelementptr inbounds i8, i8* %1, i64 %35
  %37 = load i32, i32* %6, align 4
  %38 = load i32, i32* %25, align 8
  %39 = icmp ult i32 %37, %38
  br i1 %39, label %42, label %40

40:                                               ; preds = %32
  %41 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.184, i64 0, i64 0)) #12
  br label %58

42:                                               ; preds = %32
  %43 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %22, i64 0, i32 15
  %44 = load %struct.opj_tccp*, %struct.opj_tccp** %43, align 8
  %45 = zext i32 %37 to i64
  %46 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %44, i64 %45, i32 0
  call void @opj_read_bytes_LE(i8* %36, i32* %46, i32 1) #12
  %47 = getelementptr inbounds i8, i8* %36, i64 1
  %48 = load i32, i32* %6, align 4
  %49 = call fastcc i32 @opj_j2k_read_SPCod_SPCoc(%struct.opj_j2k* %0, i32 %48, i8* %47, i32* nonnull %5, %struct.opj_event_mgr* %3)
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %42
  %52 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.183, i64 0, i64 0)) #12
  br label %58

53:                                               ; preds = %42
  %54 = load i32, i32* %5, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %58, label %56

56:                                               ; preds = %53
  %57 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.183, i64 0, i64 0)) #12
  br label %58

58:                                               ; preds = %53, %56, %51, %40, %30
  %59 = phi i32 [ 0, %30 ], [ 0, %40 ], [ 0, %56 ], [ 0, %51 ], [ 1, %53 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #12
  ret i32 %59
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_read_rgn(%struct.opj_j2k* nocapture readonly, i8*, i32, %struct.opj_event_mgr*) #3 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #12
  store i32 -1431655766, i32* %5, align 4
  %8 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #12
  store i32 -1431655766, i32* %6, align 4
  %9 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %10 = load %struct.opj_image*, %struct.opj_image** %9, align 8
  %11 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %10, i64 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = icmp ult i32 %12, 257
  %14 = select i1 %13, i32 1, i32 2
  %15 = add nuw nsw i32 %14, 2
  %16 = icmp eq i32 %15, %2
  br i1 %16, label %19, label %17

17:                                               ; preds = %4
  %18 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.185, i64 0, i64 0)) #12
  br label %47

19:                                               ; preds = %4
  %20 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 0
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 16
  br i1 %22, label %23, label %30

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %25 = load %struct.opj_tcp*, %struct.opj_tcp** %24, align 8
  %26 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %27 = load i32, i32* %26, align 8
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %25, i64 %28
  br label %33

30:                                               ; preds = %19
  %31 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 1
  %32 = load %struct.opj_tcp*, %struct.opj_tcp** %31, align 8
  br label %33

33:                                               ; preds = %30, %23
  %34 = phi %struct.opj_tcp* [ %29, %23 ], [ %32, %30 ]
  call void @opj_read_bytes_LE(i8* %1, i32* nonnull %5, i32 %14) #12
  %35 = zext i32 %14 to i64
  %36 = getelementptr inbounds i8, i8* %1, i64 %35
  call void @opj_read_bytes_LE(i8* %36, i32* nonnull %6, i32 1) #12
  %37 = load i32, i32* %5, align 4
  %38 = icmp ult i32 %37, %12
  br i1 %38, label %41, label %39

39:                                               ; preds = %33
  %40 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.186, i64 0, i64 0), i32 %37, i32 %12) #12
  br label %47

41:                                               ; preds = %33
  %42 = getelementptr inbounds i8, i8* %36, i64 1
  %43 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %34, i64 0, i32 15
  %44 = load %struct.opj_tccp*, %struct.opj_tccp** %43, align 8
  %45 = zext i32 %37 to i64
  %46 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %44, i64 %45, i32 9
  call void @opj_read_bytes_LE(i8* %42, i32* %46, i32 1) #12
  br label %47

47:                                               ; preds = %41, %39, %17
  %48 = phi i32 [ 0, %17 ], [ 0, %39 ], [ 1, %41 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #12
  ret i32 %48
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_read_qcd(%struct.opj_j2k* nocapture readonly, i8*, i32, %struct.opj_event_mgr*) #3 {
  %5 = alloca i32, align 4
  store i32 %2, i32* %5, align 4
  %6 = call fastcc i32 @opj_j2k_read_SQcd_SQcc(%struct.opj_j2k* %0, i32 0, i8* %1, i32* nonnull %5, %struct.opj_event_mgr* %3)
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %10

8:                                                ; preds = %4
  %9 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.187, i64 0, i64 0)) #12
  br label %58

10:                                               ; preds = %4
  %11 = load i32, i32* %5, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %10
  %14 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.187, i64 0, i64 0)) #12
  br label %58

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 16
  br i1 %18, label %19, label %26

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %21 = load %struct.opj_tcp*, %struct.opj_tcp** %20, align 8
  %22 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %23 = load i32, i32* %22, align 8
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %21, i64 %24
  br label %29

26:                                               ; preds = %15
  %27 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 1
  %28 = load %struct.opj_tcp*, %struct.opj_tcp** %27, align 8
  br label %29

29:                                               ; preds = %26, %19
  %30 = phi %struct.opj_tcp* [ %25, %19 ], [ %28, %26 ]
  %31 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %30, i64 0, i32 15
  %32 = load %struct.opj_tccp*, %struct.opj_tccp** %31, align 8
  %33 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %34 = load %struct.opj_image*, %struct.opj_image** %33, align 8
  %35 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %34, i64 0, i32 4
  %36 = load i32, i32* %35, align 8
  %37 = icmp ugt i32 %36, 1
  br i1 %37, label %38, label %58

38:                                               ; preds = %29
  %39 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %32, i64 0, i32 6
  %40 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %32, i64 0, i32 8
  %41 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %32, i64 0, i32 7, i64 0
  %42 = bitcast %struct.opj_stepsize* %41 to i8*
  br label %43

43:                                               ; preds = %43, %38
  %44 = phi %struct.opj_tccp* [ %32, %38 ], [ %46, %43 ]
  %45 = phi i32 [ 1, %38 ], [ %53, %43 ]
  %46 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %44, i64 1
  %47 = load i32, i32* %39, align 4
  %48 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %44, i64 1, i32 6
  store i32 %47, i32* %48, align 4
  %49 = load i32, i32* %40, align 4
  %50 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %44, i64 1, i32 8
  store i32 %49, i32* %50, align 4
  %51 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %44, i64 1, i32 7, i64 0
  %52 = bitcast %struct.opj_stepsize* %51 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %52, i8* align 4 %42, i64 776, i1 false) #12
  %53 = add nuw i32 %45, 1
  %54 = load %struct.opj_image*, %struct.opj_image** %33, align 8
  %55 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %54, i64 0, i32 4
  %56 = load i32, i32* %55, align 8
  %57 = icmp ult i32 %53, %56
  br i1 %57, label %43, label %58

58:                                               ; preds = %43, %29, %13, %8
  %59 = phi i32 [ 0, %13 ], [ 0, %8 ], [ 1, %29 ], [ 1, %43 ]
  ret i32 %59
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_read_qcc(%struct.opj_j2k* nocapture readonly, i8*, i32, %struct.opj_event_mgr*) #3 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %2, i32* %5, align 4
  %7 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #12
  store i32 -1431655766, i32* %6, align 4
  %8 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %9 = load %struct.opj_image*, %struct.opj_image** %8, align 8
  %10 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %9, i64 0, i32 4
  %11 = load i32, i32* %10, align 8
  %12 = icmp ult i32 %11, 257
  br i1 %12, label %13, label %17

13:                                               ; preds = %4
  %14 = icmp eq i32 %2, 0
  br i1 %14, label %15, label %21

15:                                               ; preds = %13
  %16 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.190, i64 0, i64 0)) #12
  br label %44

17:                                               ; preds = %4
  %18 = icmp ult i32 %2, 2
  br i1 %18, label %19, label %21

19:                                               ; preds = %17
  %20 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.190, i64 0, i64 0)) #12
  br label %44

21:                                               ; preds = %17, %13
  %22 = phi i32 [ 1, %13 ], [ 2, %17 ]
  %23 = phi i64 [ 1, %13 ], [ 2, %17 ]
  %24 = phi i32 [ -1, %13 ], [ -2, %17 ]
  call void @opj_read_bytes_LE(i8* %1, i32* nonnull %6, i32 %22) #12
  %25 = add i32 %24, %2
  store i32 %25, i32* %5, align 4
  %26 = load i32, i32* %6, align 4
  %27 = load %struct.opj_image*, %struct.opj_image** %8, align 8
  %28 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %27, i64 0, i32 4
  %29 = load i32, i32* %28, align 8
  %30 = icmp ult i32 %26, %29
  br i1 %30, label %33, label %31

31:                                               ; preds = %21
  %32 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.191, i64 0, i64 0), i32 %26, i32 %29) #12
  br label %44

33:                                               ; preds = %21
  %34 = getelementptr inbounds i8, i8* %1, i64 %23
  %35 = call fastcc i32 @opj_j2k_read_SQcd_SQcc(%struct.opj_j2k* %0, i32 %26, i8* %34, i32* nonnull %5, %struct.opj_event_mgr* %3)
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %33
  %38 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.190, i64 0, i64 0)) #12
  br label %44

39:                                               ; preds = %33
  %40 = load i32, i32* %5, align 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %39
  %43 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.190, i64 0, i64 0)) #12
  br label %44

44:                                               ; preds = %39, %42, %37, %31, %19, %15
  %45 = phi i32 [ 0, %15 ], [ 0, %31 ], [ 0, %42 ], [ 0, %37 ], [ 0, %19 ], [ 1, %39 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #12
  ret i32 %45
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_read_poc(%struct.opj_j2k* nocapture readonly, i8*, i32, %struct.opj_event_mgr*) #3 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #12
  store i32 -1431655766, i32* %5, align 4
  %7 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %8 = load %struct.opj_image*, %struct.opj_image** %7, align 8
  %9 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %8, i64 0, i32 4
  %10 = load i32, i32* %9, align 8
  %11 = icmp ult i32 %10, 257
  %12 = select i1 %11, i32 1, i32 2
  %13 = shl nuw nsw i32 %12, 1
  %14 = add nuw nsw i32 %13, 5
  %15 = udiv i32 %2, %14
  %16 = urem i32 %2, %14
  %17 = icmp ugt i32 %14, %2
  %18 = icmp ne i32 %16, 0
  %19 = or i1 %18, %17
  br i1 %19, label %20, label %22

20:                                               ; preds = %4
  %21 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.192, i64 0, i64 0)) #12
  br label %90

22:                                               ; preds = %4
  %23 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 0
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 16
  br i1 %25, label %26, label %33

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %28 = load %struct.opj_tcp*, %struct.opj_tcp** %27, align 8
  %29 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %30 = load i32, i32* %29, align 8
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %28, i64 %31
  br label %36

33:                                               ; preds = %22
  %34 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 1
  %35 = load %struct.opj_tcp*, %struct.opj_tcp** %34, align 8
  br label %36

36:                                               ; preds = %33, %26
  %37 = phi %struct.opj_tcp* [ %32, %26 ], [ %35, %33 ]
  %38 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %37, i64 0, i32 29
  %39 = load i8, i8* %38, align 8
  %40 = and i8 %39, 4
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %36
  %43 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %37, i64 0, i32 6
  %44 = load i32, i32* %43, align 4
  %45 = add i32 %44, 1
  br label %46

46:                                               ; preds = %36, %42
  %47 = phi i32 [ %45, %42 ], [ 0, %36 ]
  %48 = add i32 %47, %15
  %49 = icmp ugt i32 %48, 31
  br i1 %49, label %50, label %52

50:                                               ; preds = %46
  %51 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.193, i64 0, i64 0), i32 %48) #12
  br label %90

52:                                               ; preds = %46
  %53 = or i8 %39, 4
  store i8 %53, i8* %38, align 8
  %54 = icmp ult i32 %47, %48
  br i1 %54, label %55, label %87

55:                                               ; preds = %52
  %56 = zext i32 %47 to i64
  %57 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %37, i64 0, i32 7, i64 %56
  %58 = zext i32 %12 to i64
  %59 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %37, i64 0, i32 2
  br label %60

60:                                               ; preds = %55, %60
  %61 = phi %struct.opj_poc* [ %57, %55 ], [ %84, %60 ]
  %62 = phi i32 [ %47, %55 ], [ %85, %60 ]
  %63 = phi i8* [ %1, %55 ], [ %78, %60 ]
  %64 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %61, i64 0, i32 0
  call void @opj_read_bytes_LE(i8* %63, i32* %64, i32 1) #12
  %65 = getelementptr inbounds i8, i8* %63, i64 1
  %66 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %61, i64 0, i32 1
  call void @opj_read_bytes_LE(i8* %65, i32* %66, i32 %12) #12
  %67 = getelementptr inbounds i8, i8* %65, i64 %58
  %68 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %61, i64 0, i32 2
  call void @opj_read_bytes_LE(i8* %67, i32* %68, i32 2) #12
  %69 = load i32, i32* %68, align 4
  %70 = load i32, i32* %59, align 8
  %71 = icmp ult i32 %69, %70
  %72 = select i1 %71, i32 %69, i32 %70
  store i32 %72, i32* %68, align 4
  %73 = getelementptr inbounds i8, i8* %67, i64 2
  %74 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %61, i64 0, i32 3
  call void @opj_read_bytes_LE(i8* %73, i32* %74, i32 1) #12
  %75 = getelementptr inbounds i8, i8* %73, i64 1
  %76 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %61, i64 0, i32 4
  call void @opj_read_bytes_LE(i8* %75, i32* %76, i32 %12) #12
  %77 = getelementptr inbounds i8, i8* %75, i64 %58
  call void @opj_read_bytes_LE(i8* %77, i32* nonnull %5, i32 1) #12
  %78 = getelementptr inbounds i8, i8* %77, i64 1
  %79 = load i32, i32* %5, align 4
  %80 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %61, i64 0, i32 9
  store i32 %79, i32* %80, align 4
  %81 = load i32, i32* %76, align 4
  %82 = icmp ult i32 %81, %10
  %83 = select i1 %82, i32 %81, i32 %10
  store i32 %83, i32* %76, align 4
  %84 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %61, i64 1
  %85 = add nuw i32 %62, 1
  %86 = icmp ult i32 %85, %48
  br i1 %86, label %60, label %87

87:                                               ; preds = %60, %52
  %88 = add i32 %48, -1
  %89 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %37, i64 0, i32 6
  store i32 %88, i32* %89, align 4
  br label %90

90:                                               ; preds = %87, %50, %20
  %91 = phi i32 [ 0, %20 ], [ 0, %50 ], [ 1, %87 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #12
  ret i32 %91
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_read_siz(%struct.opj_j2k*, i8*, i32, %struct.opj_event_mgr*) #3 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #12
  store i32 -1431655766, i32* %5, align 4
  %8 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %9 = load %struct.opj_image*, %struct.opj_image** %8, align 8
  %10 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4
  %11 = icmp ult i32 %2, 36
  br i1 %11, label %12, label %14

12:                                               ; preds = %4
  %13 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.194, i64 0, i64 0)) #12
  br label %371

14:                                               ; preds = %4
  %15 = add i32 %2, -36
  %16 = udiv i32 %15, 3
  %17 = urem i32 %15, 3
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %14
  %20 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.194, i64 0, i64 0)) #12
  br label %371

21:                                               ; preds = %14
  call void @opj_read_bytes_LE(i8* %1, i32* nonnull %5, i32 2) #12
  %22 = getelementptr inbounds i8, i8* %1, i64 2
  %23 = load i32, i32* %5, align 4
  %24 = trunc i32 %23 to i16
  %25 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %10, i64 0, i32 0
  store i16 %24, i16* %25, align 8
  %26 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %9, i64 0, i32 2
  call void @opj_read_bytes_LE(i8* %22, i32* %26, i32 4) #12
  %27 = getelementptr inbounds i8, i8* %1, i64 6
  %28 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %9, i64 0, i32 3
  call void @opj_read_bytes_LE(i8* %27, i32* %28, i32 4) #12
  %29 = getelementptr inbounds i8, i8* %1, i64 10
  %30 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %9, i64 0, i32 0
  call void @opj_read_bytes_LE(i8* %29, i32* %30, i32 4) #12
  %31 = getelementptr inbounds i8, i8* %1, i64 14
  %32 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %9, i64 0, i32 1
  call void @opj_read_bytes_LE(i8* %31, i32* %32, i32 4) #12
  %33 = getelementptr inbounds i8, i8* %1, i64 18
  %34 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 3
  call void @opj_read_bytes_LE(i8* %33, i32* %34, i32 4) #12
  %35 = getelementptr inbounds i8, i8* %1, i64 22
  %36 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 4
  call void @opj_read_bytes_LE(i8* %35, i32* %36, i32 4) #12
  %37 = getelementptr inbounds i8, i8* %1, i64 26
  %38 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 1
  call void @opj_read_bytes_LE(i8* %37, i32* %38, i32 4) #12
  %39 = getelementptr inbounds i8, i8* %1, i64 30
  %40 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 2
  call void @opj_read_bytes_LE(i8* %39, i32* %40, i32 4) #12
  %41 = getelementptr inbounds i8, i8* %1, i64 34
  call void @opj_read_bytes_LE(i8* %41, i32* nonnull %5, i32 2) #12
  %42 = getelementptr inbounds i8, i8* %1, i64 36
  %43 = load i32, i32* %5, align 4
  %44 = icmp ult i32 %43, 16385
  br i1 %44, label %45, label %49

45:                                               ; preds = %21
  %46 = and i32 %43, 65535
  %47 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %9, i64 0, i32 4
  store i32 %46, i32* %47, align 8
  %48 = icmp eq i32 %46, %16
  br i1 %48, label %53, label %51

49:                                               ; preds = %21
  %50 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.195, i64 0, i64 0), i32 %43) #12
  br label %371

51:                                               ; preds = %45
  %52 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([114 x i8], [114 x i8]* @.str.196, i64 0, i64 0), i32 %46, i32 %16) #12
  br label %371

53:                                               ; preds = %45
  %54 = load i32, i32* %30, align 8
  %55 = load i32, i32* %26, align 8
  %56 = icmp ugt i32 %55, %54
  br i1 %56, label %60, label %57

57:                                               ; preds = %53
  %58 = load i32, i32* %28, align 4
  %59 = load i32, i32* %32, align 4
  br label %64

60:                                               ; preds = %53
  %61 = load i32, i32* %32, align 4
  %62 = load i32, i32* %28, align 4
  %63 = icmp ugt i32 %62, %61
  br i1 %63, label %74, label %64

64:                                               ; preds = %57, %60
  %65 = phi i32 [ %59, %57 ], [ %61, %60 ]
  %66 = phi i32 [ %58, %57 ], [ %62, %60 ]
  %67 = zext i32 %55 to i64
  %68 = zext i32 %54 to i64
  %69 = sub nsw i64 %67, %68
  %70 = zext i32 %66 to i64
  %71 = zext i32 %65 to i64
  %72 = sub nsw i64 %70, %71
  %73 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.197, i64 0, i64 0), i64 %69, i64 %72) #12
  br label %371

74:                                               ; preds = %60
  %75 = load i32, i32* %34, align 4
  %76 = icmp eq i32 %75, 0
  %77 = load i32, i32* %36, align 8
  br i1 %76, label %80, label %78

78:                                               ; preds = %74
  %79 = icmp eq i32 %77, 0
  br i1 %79, label %80, label %83

80:                                               ; preds = %74, %78
  %81 = phi i32 [ 0, %78 ], [ %77, %74 ]
  %82 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.198, i64 0, i64 0), i32 %75, i32 %81) #12
  br label %371

83:                                               ; preds = %78
  %84 = load i32, i32* %38, align 4
  %85 = zext i32 %84 to i64
  %86 = zext i32 %75 to i64
  %87 = add nuw nsw i64 %85, %86
  %88 = load i32, i32* %40, align 8
  %89 = zext i32 %88 to i64
  %90 = zext i32 %77 to i64
  %91 = add nuw nsw i64 %89, %90
  %92 = icmp ugt i32 %84, %54
  br i1 %92, label %109, label %93

93:                                               ; preds = %83
  %94 = lshr i64 %91, 32
  %95 = trunc i64 %94 to i32
  %96 = sub nsw i32 0, %95
  %97 = trunc i64 %91 to i32
  %98 = or i32 %96, %97
  %99 = lshr i64 %87, 32
  %100 = trunc i64 %99 to i32
  %101 = sub nsw i32 0, %100
  %102 = trunc i64 %87 to i32
  %103 = or i32 %101, %102
  %104 = icmp ule i32 %88, %61
  %105 = icmp ugt i32 %103, %54
  %106 = and i1 %104, %105
  %107 = icmp ugt i32 %98, %61
  %108 = and i1 %106, %107
  br i1 %108, label %111, label %109

109:                                              ; preds = %93, %83
  %110 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.199, i64 0, i64 0)) #12
  br label %371

111:                                              ; preds = %93
  %112 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 13
  %113 = load i32, i32* %112, align 8
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %131

115:                                              ; preds = %111
  %116 = sub i32 %55, %54
  %117 = sub i32 %62, %61
  %118 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 11
  %119 = load i32, i32* %118, align 8
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %131, label %121

121:                                              ; preds = %115
  %122 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 12
  %123 = load i32, i32* %122, align 4
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %131, label %125

125:                                              ; preds = %121
  %126 = icmp eq i32 %119, %116
  %127 = icmp eq i32 %123, %117
  %128 = and i1 %126, %127
  br i1 %128, label %131, label %129

129:                                              ; preds = %125
  %130 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.200, i64 0, i64 0), i32 %119, i32 %123, i32 %116, i32 %117) #12
  br label %371

131:                                              ; preds = %125, %121, %115, %111
  %132 = zext i32 %16 to i64
  %133 = call i8* @opj_calloc(i64 %132, i64 64) #12
  %134 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %9, i64 0, i32 6
  %135 = bitcast %struct.opj_image_comp** %134 to i8**
  store i8* %133, i8** %135, align 8
  %136 = icmp eq i8* %133, null
  br i1 %136, label %137, label %139

137:                                              ; preds = %131
  store i32 0, i32* %47, align 8
  %138 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.201, i64 0, i64 0)) #12
  br label %371

139:                                              ; preds = %131
  %140 = load i32, i32* %47, align 8
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %205, label %142

142:                                              ; preds = %139
  %143 = bitcast i8* %133 to %struct.opj_image_comp*
  %144 = bitcast i32* %6 to i8*
  %145 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 21
  %146 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 20, i32 0, i32 0
  br label %147

147:                                              ; preds = %142, %197
  %148 = phi %struct.opj_image_comp* [ %143, %142 ], [ %201, %197 ]
  %149 = phi i32 [ 0, %142 ], [ %176, %197 ]
  %150 = phi i32 [ 0, %142 ], [ %175, %197 ]
  %151 = phi i32 [ 0, %142 ], [ %202, %197 ]
  %152 = phi i8* [ %42, %142 ], [ %180, %197 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %144) #12
  store i32 -1431655766, i32* %6, align 4
  call void @opj_read_bytes_LE(i8* %152, i32* nonnull %6, i32 1) #12
  %153 = getelementptr inbounds i8, i8* %152, i64 1
  %154 = load i32, i32* %6, align 4
  %155 = and i32 %154, 127
  %156 = add nuw nsw i32 %155, 1
  %157 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %148, i64 0, i32 6
  store i32 %156, i32* %157, align 8
  %158 = lshr i32 %154, 7
  %159 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %148, i64 0, i32 8
  store i32 %158, i32* %159, align 8
  %160 = load i32, i32* %112, align 8
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %162, label %174

162:                                              ; preds = %147
  %163 = icmp eq i32 %151, 0
  br i1 %163, label %174, label %164

164:                                              ; preds = %162
  %165 = load i8, i8* %145, align 8
  %166 = and i8 %165, 4
  %167 = icmp eq i8 %166, 0
  br i1 %167, label %168, label %174

168:                                              ; preds = %164
  %169 = icmp eq i32 %156, %150
  %170 = icmp eq i32 %158, %149
  %171 = and i1 %170, %169
  br i1 %171, label %174, label %172

172:                                              ; preds = %168
  %173 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([145 x i8], [145 x i8]* @.str.202, i64 0, i64 0), i32 %151, i32 %150, i32 %149, i32 %151, i32 %156, i32 %158) #12
  br label %174

174:                                              ; preds = %162, %168, %164, %172, %147
  %175 = phi i32 [ %150, %164 ], [ %150, %172 ], [ %150, %147 ], [ %150, %168 ], [ %156, %162 ]
  %176 = phi i32 [ %149, %164 ], [ %149, %172 ], [ %149, %147 ], [ %149, %168 ], [ %158, %162 ]
  call void @opj_read_bytes_LE(i8* %153, i32* nonnull %6, i32 1) #12
  %177 = getelementptr inbounds i8, i8* %152, i64 2
  %178 = load i32, i32* %6, align 4
  %179 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %148, i64 0, i32 0
  store i32 %178, i32* %179, align 8
  call void @opj_read_bytes_LE(i8* %177, i32* nonnull %6, i32 1) #12
  %180 = getelementptr inbounds i8, i8* %152, i64 3
  %181 = load i32, i32* %6, align 4
  %182 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %148, i64 0, i32 1
  store i32 %181, i32* %182, align 4
  %183 = load i32, i32* %179, align 8
  %184 = add i32 %183, -1
  %185 = icmp ugt i32 %184, 254
  %186 = add i32 %181, -1
  %187 = icmp ugt i32 %186, 254
  %188 = or i1 %187, %185
  br i1 %188, label %189, label %191

189:                                              ; preds = %174
  %190 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.203, i64 0, i64 0), i32 %151, i32 %183, i32 %181) #12
  br label %196

191:                                              ; preds = %174
  %192 = load i32, i32* %157, align 8
  %193 = icmp ugt i32 %192, 31
  br i1 %193, label %194, label %197

194:                                              ; preds = %191
  %195 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([133 x i8], [133 x i8]* @.str.204, i64 0, i64 0), i32 %151, i32 %192) #12
  br label %196

196:                                              ; preds = %189, %194
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %144) #12
  br label %371

197:                                              ; preds = %191
  %198 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %148, i64 0, i32 9
  store i32 0, i32* %198, align 4
  %199 = load i32, i32* %146, align 8
  %200 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %148, i64 0, i32 10
  store i32 %199, i32* %200, align 8
  %201 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %148, i64 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %144) #12
  %202 = add nuw i32 %151, 1
  %203 = load i32, i32* %47, align 8
  %204 = icmp ult i32 %202, %203
  br i1 %204, label %147, label %205

205:                                              ; preds = %197, %139
  %206 = load i32, i32* %34, align 4
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %371, label %208

208:                                              ; preds = %205
  %209 = load i32, i32* %36, align 8
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %371, label %211

211:                                              ; preds = %208
  %212 = load i32, i32* %26, align 8
  %213 = load i32, i32* %38, align 4
  %214 = sub i32 %212, %213
  %215 = zext i32 %214 to i64
  %216 = zext i32 %206 to i64
  %217 = add nsw i64 %216, -1
  %218 = add nuw nsw i64 %217, %215
  %219 = udiv i64 %218, %216
  %220 = trunc i64 %219 to i32
  %221 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 6
  store i32 %220, i32* %221, align 8
  %222 = load i32, i32* %28, align 4
  %223 = load i32, i32* %40, align 8
  %224 = sub i32 %222, %223
  %225 = zext i32 %224 to i64
  %226 = zext i32 %209 to i64
  %227 = add nsw i64 %226, -1
  %228 = add nuw nsw i64 %227, %225
  %229 = udiv i64 %228, %226
  %230 = trunc i64 %229 to i32
  %231 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 7
  store i32 %230, i32* %231, align 4
  %232 = icmp eq i32 %220, 0
  %233 = icmp eq i32 %230, 0
  %234 = or i1 %232, %233
  br i1 %234, label %238, label %235

235:                                              ; preds = %211
  %236 = udiv i32 65535, %230
  %237 = icmp ult i32 %236, %220
  br i1 %237, label %238, label %240

238:                                              ; preds = %235, %211
  %239 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.205, i64 0, i64 0), i32 %220, i32 %230) #12
  br label %371

240:                                              ; preds = %235
  %241 = mul i32 %230, %220
  %242 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 14
  %243 = load i8, i8* %242, align 8
  %244 = and i8 %243, 2
  %245 = icmp eq i8 %244, 0
  %246 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 5
  br i1 %245, label %269, label %247

247:                                              ; preds = %240
  %248 = load i32, i32* %246, align 8
  %249 = sub i32 %248, %213
  %250 = udiv i32 %249, %206
  store i32 %250, i32* %246, align 8
  %251 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 6
  %252 = load i32, i32* %251, align 4
  %253 = sub i32 %252, %223
  %254 = udiv i32 %253, %209
  store i32 %254, i32* %251, align 4
  %255 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 7
  %256 = load i32, i32* %255, align 8
  %257 = sub i32 %256, %213
  %258 = zext i32 %257 to i64
  %259 = add nuw nsw i64 %217, %258
  %260 = udiv i64 %259, %216
  %261 = trunc i64 %260 to i32
  store i32 %261, i32* %255, align 8
  %262 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 8
  %263 = load i32, i32* %262, align 4
  %264 = sub i32 %263, %223
  %265 = zext i32 %264 to i64
  %266 = add nuw nsw i64 %227, %265
  %267 = udiv i64 %266, %226
  %268 = trunc i64 %267 to i32
  store i32 %268, i32* %262, align 4
  br label %273

269:                                              ; preds = %240
  store i32 0, i32* %246, align 8
  %270 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 6
  store i32 0, i32* %270, align 4
  %271 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 7
  store i32 %220, i32* %271, align 8
  %272 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 8
  store i32 %230, i32* %272, align 4
  br label %273

273:                                              ; preds = %269, %247
  %274 = zext i32 %241 to i64
  %275 = call i8* @opj_calloc(i64 %274, i64 5696) #12
  %276 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %277 = bitcast %struct.opj_tcp** %276 to i8**
  store i8* %275, i8** %277, align 8
  %278 = icmp eq i8* %275, null
  br i1 %278, label %279, label %281

279:                                              ; preds = %273
  %280 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.201, i64 0, i64 0)) #12
  br label %371

281:                                              ; preds = %273
  %282 = load i32, i32* %47, align 8
  %283 = zext i32 %282 to i64
  %284 = call i8* @opj_calloc(i64 %283, i64 1080) #12
  %285 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 1
  %286 = load %struct.opj_tcp*, %struct.opj_tcp** %285, align 8
  %287 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %286, i64 0, i32 15
  %288 = bitcast %struct.opj_tccp** %287 to i8**
  store i8* %284, i8** %288, align 8
  %289 = load %struct.opj_tcp*, %struct.opj_tcp** %285, align 8
  %290 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %289, i64 0, i32 15
  %291 = load %struct.opj_tccp*, %struct.opj_tccp** %290, align 8
  %292 = icmp eq %struct.opj_tccp* %291, null
  br i1 %292, label %293, label %295

293:                                              ; preds = %281
  %294 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.201, i64 0, i64 0)) #12
  br label %371

295:                                              ; preds = %281
  %296 = call i8* @opj_calloc(i64 10, i64 32) #12
  %297 = load %struct.opj_tcp*, %struct.opj_tcp** %285, align 8
  %298 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %297, i64 0, i32 23
  %299 = bitcast %struct.opj_mct_data** %298 to i8**
  store i8* %296, i8** %299, align 8
  %300 = load %struct.opj_tcp*, %struct.opj_tcp** %285, align 8
  %301 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %300, i64 0, i32 23
  %302 = load %struct.opj_mct_data*, %struct.opj_mct_data** %301, align 8
  %303 = icmp eq %struct.opj_mct_data* %302, null
  br i1 %303, label %304, label %306

304:                                              ; preds = %295
  %305 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.201, i64 0, i64 0)) #12
  br label %371

306:                                              ; preds = %295
  %307 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %300, i64 0, i32 25
  store i32 10, i32* %307, align 4
  %308 = call i8* @opj_calloc(i64 10, i64 32) #12
  %309 = load %struct.opj_tcp*, %struct.opj_tcp** %285, align 8
  %310 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %309, i64 0, i32 26
  %311 = bitcast %struct.opj_simple_mcc_decorrelation_data** %310 to i8**
  store i8* %308, i8** %311, align 8
  %312 = load %struct.opj_tcp*, %struct.opj_tcp** %285, align 8
  %313 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %312, i64 0, i32 26
  %314 = load %struct.opj_simple_mcc_decorrelation_data*, %struct.opj_simple_mcc_decorrelation_data** %313, align 8
  %315 = icmp eq %struct.opj_simple_mcc_decorrelation_data* %314, null
  br i1 %315, label %316, label %318

316:                                              ; preds = %306
  %317 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.201, i64 0, i64 0)) #12
  br label %371

318:                                              ; preds = %306
  %319 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %312, i64 0, i32 28
  store i32 10, i32* %319, align 4
  %320 = load i32, i32* %47, align 8
  %321 = icmp eq i32 %320, 0
  br i1 %321, label %344, label %322

322:                                              ; preds = %318, %339
  %323 = phi i32 [ %340, %339 ], [ %320, %318 ]
  %324 = phi i64 [ %341, %339 ], [ 0, %318 ]
  %325 = load %struct.opj_image_comp*, %struct.opj_image_comp** %134, align 8
  %326 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %325, i64 %324, i32 8
  %327 = load i32, i32* %326, align 8
  %328 = icmp eq i32 %327, 0
  br i1 %328, label %329, label %339

329:                                              ; preds = %322
  %330 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %325, i64 %324, i32 6
  %331 = load i32, i32* %330, align 8
  %332 = add i32 %331, -1
  %333 = shl i32 1, %332
  %334 = load %struct.opj_tcp*, %struct.opj_tcp** %285, align 8
  %335 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %334, i64 0, i32 15
  %336 = load %struct.opj_tccp*, %struct.opj_tccp** %335, align 8
  %337 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %336, i64 %324, i32 12
  store i32 %333, i32* %337, align 4
  %338 = load i32, i32* %47, align 8
  br label %339

339:                                              ; preds = %322, %329
  %340 = phi i32 [ %323, %322 ], [ %338, %329 ]
  %341 = add nuw nsw i64 %324, 1
  %342 = zext i32 %340 to i64
  %343 = icmp ult i64 %341, %342
  br i1 %343, label %322, label %344

344:                                              ; preds = %339, %318
  %345 = phi i32 [ 0, %318 ], [ %340, %339 ]
  %346 = icmp eq i32 %241, 0
  br i1 %346, label %369, label %347

347:                                              ; preds = %344
  %348 = load %struct.opj_tcp*, %struct.opj_tcp** %276, align 8
  %349 = zext i32 %345 to i64
  %350 = call i8* @opj_calloc(i64 %349, i64 1080) #12
  %351 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %348, i64 0, i32 15
  %352 = bitcast %struct.opj_tccp** %351 to i8**
  store i8* %350, i8** %352, align 8
  %353 = icmp eq i8* %350, null
  br i1 %353, label %354, label %356

354:                                              ; preds = %361, %347
  %355 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.201, i64 0, i64 0)) #12
  br label %371

356:                                              ; preds = %347, %361
  %357 = phi i32 [ %359, %361 ], [ 0, %347 ]
  %358 = phi %struct.opj_tcp* [ %362, %361 ], [ %348, %347 ]
  %359 = add nuw i32 %357, 1
  %360 = icmp ult i32 %359, %241
  br i1 %360, label %361, label %369

361:                                              ; preds = %356
  %362 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %358, i64 1
  %363 = load i32, i32* %47, align 8
  %364 = zext i32 %363 to i64
  %365 = call i8* @opj_calloc(i64 %364, i64 1080) #12
  %366 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %358, i64 1, i32 15
  %367 = bitcast %struct.opj_tccp** %366 to i8**
  store i8* %365, i8** %367, align 8
  %368 = icmp eq i8* %365, null
  br i1 %368, label %354, label %356

369:                                              ; preds = %356, %344
  %370 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 0
  store i32 4, i32* %370, align 8
  call void @opj_image_comp_header_update(%struct.opj_image* %9, %struct.opj_cp* %10) #12
  br label %371

371:                                              ; preds = %196, %205, %208, %129, %369, %354, %316, %304, %293, %279, %238, %137, %109, %80, %64, %51, %49, %19, %12
  %372 = phi i32 [ 0, %12 ], [ 0, %19 ], [ 0, %51 ], [ 0, %64 ], [ 0, %80 ], [ 0, %109 ], [ 0, %137 ], [ 0, %238 ], [ 0, %279 ], [ 0, %293 ], [ 0, %354 ], [ 1, %369 ], [ 0, %316 ], [ 0, %304 ], [ 0, %49 ], [ 0, %129 ], [ 0, %208 ], [ 0, %205 ], [ 0, %196 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #12
  ret i32 %372
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_read_tlm(%struct.opj_j2k* nocapture readnone, i8*, i32, %struct.opj_event_mgr*) #3 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #12
  store i32 -1431655766, i32* %5, align 4
  %8 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #12
  store i32 -1431655766, i32* %6, align 4
  %9 = icmp ult i32 %2, 2
  br i1 %9, label %10, label %12

10:                                               ; preds = %4
  %11 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.206, i64 0, i64 0)) #12
  br label %26

12:                                               ; preds = %4
  %13 = add i32 %2, -2
  call void @opj_read_bytes_LE(i8* %1, i32* nonnull %5, i32 1) #12
  %14 = getelementptr inbounds i8, i8* %1, i64 1
  call void @opj_read_bytes_LE(i8* %14, i32* nonnull %6, i32 1) #12
  %15 = load i32, i32* %6, align 4
  %16 = lshr i32 %15, 4
  %17 = and i32 %16, 3
  %18 = lshr i32 %15, 5
  %19 = and i32 %18, 2
  %20 = add nuw nsw i32 %19, 2
  %21 = add nuw nsw i32 %20, %17
  %22 = urem i32 %13, %21
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %26, label %24

24:                                               ; preds = %12
  %25 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.206, i64 0, i64 0)) #12
  br label %26

26:                                               ; preds = %12, %24, %10
  %27 = phi i32 [ 0, %10 ], [ 0, %24 ], [ 1, %12 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #12
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_read_plm(%struct.opj_j2k* nocapture readnone, i8* nocapture readnone, i32, %struct.opj_event_mgr*) #3 {
  %5 = icmp eq i32 %2, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %4
  %7 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.207, i64 0, i64 0)) #12
  br label %8

8:                                                ; preds = %4, %6
  %9 = phi i32 [ 0, %6 ], [ 1, %4 ]
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_read_plt(%struct.opj_j2k* nocapture readnone, i8*, i32, %struct.opj_event_mgr*) #3 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #12
  store i32 -1431655766, i32* %5, align 4
  %8 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #12
  store i32 -1431655766, i32* %6, align 4
  %9 = icmp eq i32 %2, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %4
  %11 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.208, i64 0, i64 0)) #12
  br label %35

12:                                               ; preds = %4
  call void @opj_read_bytes_LE(i8* %1, i32* nonnull %5, i32 1) #12
  %13 = add i32 %2, -1
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %35, label %15

15:                                               ; preds = %12, %27
  %16 = phi i8* [ %19, %27 ], [ %1, %12 ]
  %17 = phi i32 [ %29, %27 ], [ 0, %12 ]
  %18 = phi i32 [ %28, %27 ], [ 0, %12 ]
  %19 = getelementptr inbounds i8, i8* %16, i64 1
  call void @opj_read_bytes_LE(i8* %19, i32* nonnull %6, i32 1) #12
  %20 = load i32, i32* %6, align 4
  %21 = trunc i32 %20 to i8
  %22 = icmp slt i8 %21, 0
  br i1 %22, label %23, label %27

23:                                               ; preds = %15
  %24 = and i32 %20, 127
  %25 = or i32 %24, %18
  %26 = shl i32 %25, 7
  br label %27

27:                                               ; preds = %15, %23
  %28 = phi i32 [ %26, %23 ], [ 0, %15 ]
  %29 = add nuw i32 %17, 1
  %30 = icmp eq i32 %29, %13
  br i1 %30, label %31, label %15

31:                                               ; preds = %27
  %32 = icmp eq i32 %28, 0
  br i1 %32, label %35, label %33

33:                                               ; preds = %31
  %34 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.208, i64 0, i64 0)) #12
  br label %35

35:                                               ; preds = %12, %31, %33, %10
  %36 = phi i32 [ 0, %10 ], [ 0, %33 ], [ 1, %31 ], [ 1, %12 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #12
  ret i32 %36
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_read_ppm(%struct.opj_j2k* nocapture, i8*, i32, %struct.opj_event_mgr*) #3 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #12
  store i32 -1431655766, i32* %5, align 4
  %7 = icmp ult i32 %2, 2
  br i1 %7, label %8, label %10

8:                                                ; preds = %4
  %9 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.209, i64 0, i64 0)) #12
  br label %85

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 21
  %12 = load i8, i8* %11, align 8
  %13 = or i8 %12, 1
  store i8 %13, i8* %11, align 8
  call void @opj_read_bytes_LE(i8* %1, i32* nonnull %5, i32 1) #12
  %14 = getelementptr inbounds i8, i8* %1, i64 1
  %15 = add i32 %2, -1
  %16 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 9
  %17 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %16, align 8
  %18 = icmp eq %struct.opj_ppx_struct* %17, null
  br i1 %18, label %19, label %31

19:                                               ; preds = %10
  %20 = load i32, i32* %5, align 4
  %21 = add i32 %20, 1
  %22 = zext i32 %21 to i64
  %23 = call i8* @opj_calloc(i64 %22, i64 16) #12
  %24 = bitcast %struct.opj_ppx_struct** %16 to i8**
  store i8* %23, i8** %24, align 8
  %25 = icmp eq i8* %23, null
  br i1 %25, label %26, label %28

26:                                               ; preds = %19
  %27 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.160, i64 0, i64 0)) #12
  br label %85

28:                                               ; preds = %19
  %29 = bitcast i8* %23 to %struct.opj_ppx_struct*
  %30 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 8
  store i32 %21, i32* %30, align 8
  br label %56

31:                                               ; preds = %10
  %32 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 8
  %33 = load i32, i32* %32, align 8
  %34 = load i32, i32* %5, align 4
  %35 = icmp ugt i32 %33, %34
  br i1 %35, label %56, label %36

36:                                               ; preds = %31
  %37 = add i32 %34, 1
  %38 = bitcast %struct.opj_ppx_struct* %17 to i8*
  %39 = zext i32 %37 to i64
  %40 = shl nuw nsw i64 %39, 4
  %41 = call i8* @opj_realloc(i8* nonnull %38, i64 %40) #12
  %42 = icmp eq i8* %41, null
  br i1 %42, label %43, label %45

43:                                               ; preds = %36
  %44 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.160, i64 0, i64 0)) #12
  br label %85

45:                                               ; preds = %36
  %46 = bitcast i8* %41 to %struct.opj_ppx_struct*
  %47 = bitcast %struct.opj_ppx_struct** %16 to i8**
  store i8* %41, i8** %47, align 8
  %48 = load i32, i32* %32, align 8
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %46, i64 %49
  %51 = bitcast %struct.opj_ppx_struct* %50 to i8*
  %52 = sub i32 %37, %48
  %53 = zext i32 %52 to i64
  %54 = shl nuw nsw i64 %53, 4
  call void @llvm.memset.p0i8.i64(i8* align 8 %51, i8 0, i64 %54, i1 false)
  store i32 %37, i32* %32, align 8
  %55 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %16, align 8
  br label %56

56:                                               ; preds = %45, %28, %31
  %57 = phi %struct.opj_ppx_struct* [ %55, %45 ], [ %29, %28 ], [ %17, %31 ]
  %58 = load i32, i32* %5, align 4
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %57, i64 %59, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = icmp eq i8* %61, null
  br i1 %62, label %65, label %63

63:                                               ; preds = %56
  %64 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.210, i64 0, i64 0), i32 %58) #12
  br label %85

65:                                               ; preds = %56
  %66 = zext i32 %15 to i64
  %67 = call i8* @opj_malloc(i64 %66) #12
  %68 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %16, align 8
  %69 = load i32, i32* %5, align 4
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %68, i64 %70, i32 0
  store i8* %67, i8** %71, align 8
  %72 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %16, align 8
  %73 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %72, i64 %70, i32 0
  %74 = load i8*, i8** %73, align 8
  %75 = icmp eq i8* %74, null
  br i1 %75, label %76, label %78

76:                                               ; preds = %65
  %77 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.160, i64 0, i64 0)) #12
  br label %85

78:                                               ; preds = %65
  %79 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %72, i64 %70, i32 1
  store i32 %15, i32* %79, align 8
  %80 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %16, align 8
  %81 = load i32, i32* %5, align 4
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %80, i64 %82, i32 0
  %84 = load i8*, i8** %83, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %84, i8* align 1 %14, i64 %66, i1 false)
  br label %85

85:                                               ; preds = %43, %26, %78, %76, %63, %8
  %86 = phi i32 [ 0, %8 ], [ 0, %63 ], [ 0, %76 ], [ 1, %78 ], [ 0, %26 ], [ 0, %43 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #12
  ret i32 %86
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_read_ppt(%struct.opj_j2k* nocapture readonly, i8*, i32, %struct.opj_event_mgr*) #3 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #12
  store i32 -1431655766, i32* %5, align 4
  %7 = icmp ult i32 %2, 2
  br i1 %7, label %8, label %10

8:                                                ; preds = %4
  %9 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.211, i64 0, i64 0)) #12
  br label %97

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 21
  %12 = load i8, i8* %11, align 8
  %13 = and i8 %12, 1
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %10
  %16 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.212, i64 0, i64 0)) #12
  br label %97

17:                                               ; preds = %10
  %18 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %19 = load %struct.opj_tcp*, %struct.opj_tcp** %18, align 8
  %20 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %21 = load i32, i32* %20, align 8
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %19, i64 %22, i32 29
  %24 = load i8, i8* %23, align 8
  %25 = or i8 %24, 2
  store i8 %25, i8* %23, align 8
  call void @opj_read_bytes_LE(i8* %1, i32* nonnull %5, i32 1) #12
  %26 = getelementptr inbounds i8, i8* %1, i64 1
  %27 = add i32 %2, -1
  %28 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %19, i64 %22, i32 9
  %29 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %28, align 8
  %30 = icmp eq %struct.opj_ppx_struct* %29, null
  br i1 %30, label %31, label %43

31:                                               ; preds = %17
  %32 = load i32, i32* %5, align 4
  %33 = add i32 %32, 1
  %34 = zext i32 %33 to i64
  %35 = call i8* @opj_calloc(i64 %34, i64 16) #12
  %36 = bitcast %struct.opj_ppx_struct** %28 to i8**
  store i8* %35, i8** %36, align 8
  %37 = icmp eq i8* %35, null
  br i1 %37, label %38, label %40

38:                                               ; preds = %31
  %39 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.213, i64 0, i64 0)) #12
  br label %97

40:                                               ; preds = %31
  %41 = bitcast i8* %35 to %struct.opj_ppx_struct*
  %42 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %19, i64 %22, i32 8
  store i32 %33, i32* %42, align 8
  br label %68

43:                                               ; preds = %17
  %44 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %19, i64 %22, i32 8
  %45 = load i32, i32* %44, align 8
  %46 = load i32, i32* %5, align 4
  %47 = icmp ugt i32 %45, %46
  br i1 %47, label %68, label %48

48:                                               ; preds = %43
  %49 = add i32 %46, 1
  %50 = bitcast %struct.opj_ppx_struct* %29 to i8*
  %51 = zext i32 %49 to i64
  %52 = shl nuw nsw i64 %51, 4
  %53 = call i8* @opj_realloc(i8* nonnull %50, i64 %52) #12
  %54 = icmp eq i8* %53, null
  br i1 %54, label %55, label %57

55:                                               ; preds = %48
  %56 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.213, i64 0, i64 0)) #12
  br label %97

57:                                               ; preds = %48
  %58 = bitcast i8* %53 to %struct.opj_ppx_struct*
  %59 = bitcast %struct.opj_ppx_struct** %28 to i8**
  store i8* %53, i8** %59, align 8
  %60 = load i32, i32* %44, align 8
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %58, i64 %61
  %63 = bitcast %struct.opj_ppx_struct* %62 to i8*
  %64 = sub i32 %49, %60
  %65 = zext i32 %64 to i64
  %66 = shl nuw nsw i64 %65, 4
  call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 %66, i1 false)
  store i32 %49, i32* %44, align 8
  %67 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %28, align 8
  br label %68

68:                                               ; preds = %57, %40, %43
  %69 = phi %struct.opj_ppx_struct* [ %67, %57 ], [ %41, %40 ], [ %29, %43 ]
  %70 = load i32, i32* %5, align 4
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %69, i64 %71, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = icmp eq i8* %73, null
  br i1 %74, label %77, label %75

75:                                               ; preds = %68
  %76 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.214, i64 0, i64 0), i32 %70) #12
  br label %97

77:                                               ; preds = %68
  %78 = zext i32 %27 to i64
  %79 = call i8* @opj_malloc(i64 %78) #12
  %80 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %28, align 8
  %81 = load i32, i32* %5, align 4
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %80, i64 %82, i32 0
  store i8* %79, i8** %83, align 8
  %84 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %28, align 8
  %85 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %84, i64 %82, i32 0
  %86 = load i8*, i8** %85, align 8
  %87 = icmp eq i8* %86, null
  br i1 %87, label %88, label %90

88:                                               ; preds = %77
  %89 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.213, i64 0, i64 0)) #12
  br label %97

90:                                               ; preds = %77
  %91 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %84, i64 %82, i32 1
  store i32 %27, i32* %91, align 8
  %92 = load %struct.opj_ppx_struct*, %struct.opj_ppx_struct** %28, align 8
  %93 = load i32, i32* %5, align 4
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds %struct.opj_ppx_struct, %struct.opj_ppx_struct* %92, i64 %94, i32 0
  %96 = load i8*, i8** %95, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %96, i8* align 1 %26, i64 %78, i1 false)
  br label %97

97:                                               ; preds = %55, %38, %90, %88, %75, %15, %8
  %98 = phi i32 [ 0, %8 ], [ 0, %15 ], [ 0, %75 ], [ 0, %88 ], [ 1, %90 ], [ 0, %38 ], [ 0, %55 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #12
  ret i32 %98
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_read_crg(%struct.opj_j2k* nocapture readonly, i8* nocapture readnone, i32, %struct.opj_event_mgr*) #3 {
  %5 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %6 = load %struct.opj_image*, %struct.opj_image** %5, align 8
  %7 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %6, i64 0, i32 4
  %8 = load i32, i32* %7, align 8
  %9 = shl i32 %8, 2
  %10 = icmp eq i32 %9, %2
  br i1 %10, label %13, label %11

11:                                               ; preds = %4
  %12 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.215, i64 0, i64 0)) #12
  br label %13

13:                                               ; preds = %4, %11
  %14 = phi i32 [ 0, %11 ], [ 1, %4 ]
  ret i32 %14
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @opj_j2k_read_com(%struct.opj_j2k* nocapture readnone, i8* nocapture readnone, i32, %struct.opj_event_mgr* nocapture readnone) #7 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_read_mct(%struct.opj_j2k* nocapture readonly, i8*, i32, %struct.opj_event_mgr*) #3 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #12
  store i32 -1431655766, i32* %5, align 4
  %7 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 16
  br i1 %9, label %10, label %17

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %12 = load %struct.opj_tcp*, %struct.opj_tcp** %11, align 8
  %13 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %14 = load i32, i32* %13, align 8
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %12, i64 %15
  br label %20

17:                                               ; preds = %4
  %18 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 1
  %19 = load %struct.opj_tcp*, %struct.opj_tcp** %18, align 8
  br label %20

20:                                               ; preds = %17, %10
  %21 = phi %struct.opj_tcp* [ %16, %10 ], [ %19, %17 ]
  %22 = icmp ult i32 %2, 2
  br i1 %22, label %23, label %25

23:                                               ; preds = %20
  %24 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.216, i64 0, i64 0)) #12
  br label %164

25:                                               ; preds = %20
  call void @opj_read_bytes_LE(i8* %1, i32* nonnull %5, i32 2) #12
  %26 = getelementptr inbounds i8, i8* %1, i64 2
  %27 = load i32, i32* %5, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %31, label %29

29:                                               ; preds = %25
  %30 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.217, i64 0, i64 0)) #12
  br label %164

31:                                               ; preds = %25
  %32 = icmp ult i32 %2, 7
  br i1 %32, label %33, label %35

33:                                               ; preds = %31
  %34 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.216, i64 0, i64 0)) #12
  br label %164

35:                                               ; preds = %31
  call void @opj_read_bytes_LE(i8* %26, i32* nonnull %5, i32 2) #12
  %36 = getelementptr inbounds i8, i8* %1, i64 4
  %37 = load i32, i32* %5, align 4
  %38 = and i32 %37, 255
  %39 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %21, i64 0, i32 23
  %40 = load %struct.opj_mct_data*, %struct.opj_mct_data** %39, align 8
  %41 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %21, i64 0, i32 24
  %42 = load i32, i32* %41, align 8
  %43 = icmp eq i32 %42, 0
  %44 = bitcast %struct.opj_mct_data* %40 to i8*
  br i1 %43, label %59, label %45

45:                                               ; preds = %35, %51
  %46 = phi %struct.opj_mct_data* [ %52, %51 ], [ %40, %35 ]
  %47 = phi i32 [ %53, %51 ], [ 0, %35 ]
  %48 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %46, i64 0, i32 2
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %49, %38
  br i1 %50, label %55, label %51

51:                                               ; preds = %45
  %52 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %46, i64 1
  %53 = add nuw i32 %47, 1
  %54 = icmp ult i32 %53, %42
  br i1 %54, label %45, label %55

55:                                               ; preds = %51, %45
  %56 = phi i32 [ %53, %51 ], [ %47, %45 ]
  %57 = phi %struct.opj_mct_data* [ %52, %51 ], [ %46, %45 ]
  %58 = icmp eq i32 %56, %42
  br i1 %58, label %59, label %129

59:                                               ; preds = %35, %55
  %60 = phi i32 [ %56, %55 ], [ 0, %35 ]
  %61 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %21, i64 0, i32 25
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %60, %62
  br i1 %63, label %64, label %124

64:                                               ; preds = %59
  %65 = add i32 %60, 10
  store i32 %65, i32* %61, align 4
  %66 = bitcast %struct.opj_mct_data** %39 to i8**
  %67 = zext i32 %65 to i64
  %68 = shl nuw nsw i64 %67, 5
  %69 = call i8* @opj_realloc(i8* %44, i64 %68) #12
  %70 = bitcast i8* %69 to %struct.opj_mct_data*
  %71 = icmp eq i8* %69, null
  br i1 %71, label %72, label %76

72:                                               ; preds = %64
  %73 = load i8*, i8** %66, align 8
  call void @opj_free(i8* %73) #12
  %74 = bitcast %struct.opj_mct_data** %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 16, i1 false)
  %75 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.218, i64 0, i64 0)) #12
  br label %164

76:                                               ; preds = %64
  %77 = load %struct.opj_mct_data*, %struct.opj_mct_data** %39, align 8
  %78 = icmp eq %struct.opj_mct_data* %77, %70
  br i1 %78, label %113, label %79

79:                                               ; preds = %76
  %80 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %21, i64 0, i32 27
  %81 = load i32, i32* %80, align 8
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %113, label %83

83:                                               ; preds = %79
  %84 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %21, i64 0, i32 26
  %85 = bitcast %struct.opj_mct_data** %39 to i64*
  br label %86

86:                                               ; preds = %83, %108
  %87 = phi i64 [ 0, %83 ], [ %109, %108 ]
  %88 = load %struct.opj_simple_mcc_decorrelation_data*, %struct.opj_simple_mcc_decorrelation_data** %84, align 8
  %89 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %88, i64 %87, i32 2
  %90 = load %struct.opj_mct_data*, %struct.opj_mct_data** %89, align 8
  %91 = icmp eq %struct.opj_mct_data* %90, null
  br i1 %91, label %98, label %92

92:                                               ; preds = %86
  %93 = load i64, i64* %85, align 8
  %94 = ptrtoint %struct.opj_mct_data* %90 to i64
  %95 = sub i64 %94, %93
  %96 = ashr exact i64 %95, 5
  %97 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %70, i64 %96
  store %struct.opj_mct_data* %97, %struct.opj_mct_data** %89, align 8
  br label %98

98:                                               ; preds = %86, %92
  %99 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %88, i64 %87, i32 3
  %100 = load %struct.opj_mct_data*, %struct.opj_mct_data** %99, align 8
  %101 = icmp eq %struct.opj_mct_data* %100, null
  br i1 %101, label %108, label %102

102:                                              ; preds = %98
  %103 = load i64, i64* %85, align 8
  %104 = ptrtoint %struct.opj_mct_data* %100 to i64
  %105 = sub i64 %104, %103
  %106 = ashr exact i64 %105, 5
  %107 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %70, i64 %106
  store %struct.opj_mct_data* %107, %struct.opj_mct_data** %99, align 8
  br label %108

108:                                              ; preds = %98, %102
  %109 = add nuw nsw i64 %87, 1
  %110 = load i32, i32* %80, align 8
  %111 = zext i32 %110 to i64
  %112 = icmp ult i64 %109, %111
  br i1 %112, label %86, label %113

113:                                              ; preds = %108, %79, %76
  store i8* %69, i8** %66, align 8
  %114 = load i32, i32* %41, align 8
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %70, i64 %115
  %117 = bitcast %struct.opj_mct_data* %116 to i8*
  %118 = load i32, i32* %61, align 4
  %119 = sub i32 %118, %114
  %120 = zext i32 %119 to i64
  %121 = shl nuw nsw i64 %120, 5
  call void @llvm.memset.p0i8.i64(i8* align 8 %117, i8 0, i64 %121, i1 false)
  %122 = load %struct.opj_mct_data*, %struct.opj_mct_data** %39, align 8
  %123 = load i32, i32* %41, align 8
  br label %124

124:                                              ; preds = %113, %59
  %125 = phi i32 [ %123, %113 ], [ %42, %59 ]
  %126 = phi %struct.opj_mct_data* [ %122, %113 ], [ %40, %59 ]
  %127 = zext i32 %125 to i64
  %128 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %126, i64 %127
  br label %129

129:                                              ; preds = %124, %55
  %130 = phi %struct.opj_mct_data* [ %128, %124 ], [ %57, %55 ]
  %131 = phi i32 [ 1, %124 ], [ 0, %55 ]
  %132 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %130, i64 0, i32 3
  %133 = load i8*, i8** %132, align 8
  %134 = icmp eq i8* %133, null
  br i1 %134, label %137, label %135

135:                                              ; preds = %129
  call void @opj_free(i8* nonnull %133) #12
  store i8* null, i8** %132, align 8
  %136 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %130, i64 0, i32 4
  store i32 0, i32* %136, align 8
  br label %137

137:                                              ; preds = %129, %135
  %138 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %130, i64 0, i32 2
  store i32 %38, i32* %138, align 8
  %139 = load i32, i32* %5, align 4
  %140 = lshr i32 %139, 8
  %141 = and i32 %140, 3
  %142 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %130, i64 0, i32 1
  store i32 %141, i32* %142, align 4
  %143 = lshr i32 %139, 10
  %144 = and i32 %143, 3
  %145 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %130, i64 0, i32 0
  store i32 %144, i32* %145, align 8
  call void @opj_read_bytes_LE(i8* %36, i32* nonnull %5, i32 2) #12
  %146 = getelementptr inbounds i8, i8* %1, i64 6
  %147 = load i32, i32* %5, align 4
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %151, label %149

149:                                              ; preds = %137
  %150 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.219, i64 0, i64 0)) #12
  br label %164

151:                                              ; preds = %137
  %152 = add i32 %2, -6
  %153 = zext i32 %152 to i64
  %154 = call i8* @opj_malloc(i64 %153) #12
  store i8* %154, i8** %132, align 8
  %155 = icmp eq i8* %154, null
  br i1 %155, label %156, label %158

156:                                              ; preds = %151
  %157 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.216, i64 0, i64 0)) #12
  br label %164

158:                                              ; preds = %151
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %154, i8* align 1 %146, i64 %153, i1 false)
  %159 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %130, i64 0, i32 4
  store i32 %152, i32* %159, align 8
  %160 = icmp eq i32 %131, 0
  br i1 %160, label %164, label %161

161:                                              ; preds = %158
  %162 = load i32, i32* %41, align 8
  %163 = add i32 %162, 1
  store i32 %163, i32* %41, align 8
  br label %164

164:                                              ; preds = %161, %158, %72, %156, %149, %33, %29, %23
  %165 = phi i32 [ 0, %23 ], [ 1, %29 ], [ 0, %33 ], [ 1, %149 ], [ 0, %156 ], [ 0, %72 ], [ 1, %158 ], [ 1, %161 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #12
  ret i32 %165
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_read_cbd(%struct.opj_j2k* nocapture readonly, i8*, i32, %struct.opj_event_mgr*) #3 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #12
  store i32 -1431655766, i32* %5, align 4
  %8 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #12
  store i32 -1431655766, i32* %6, align 4
  %9 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %10 = load %struct.opj_image*, %struct.opj_image** %9, align 8
  %11 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %10, i64 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = add i32 %12, 2
  %14 = icmp eq i32 %13, %2
  br i1 %14, label %17, label %15

15:                                               ; preds = %4
  %16 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.220, i64 0, i64 0)) #12
  br label %48

17:                                               ; preds = %4
  call void @opj_read_bytes_LE(i8* %1, i32* nonnull %5, i32 2) #12
  %18 = load i32, i32* %5, align 4
  %19 = icmp eq i32 %18, %12
  br i1 %19, label %22, label %20

20:                                               ; preds = %17
  %21 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.220, i64 0, i64 0)) #12
  br label %48

22:                                               ; preds = %17
  %23 = icmp eq i32 %12, 0
  br i1 %23, label %48, label %24

24:                                               ; preds = %22
  %25 = load %struct.opj_image*, %struct.opj_image** %9, align 8
  %26 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %25, i64 0, i32 6
  %27 = load %struct.opj_image_comp*, %struct.opj_image_comp** %26, align 8
  %28 = getelementptr inbounds i8, i8* %1, i64 2
  br label %29

29:                                               ; preds = %43, %24
  %30 = phi %struct.opj_image_comp* [ %45, %43 ], [ %27, %24 ]
  %31 = phi i32 [ %46, %43 ], [ 0, %24 ]
  %32 = phi i8* [ %44, %43 ], [ %28, %24 ]
  call void @opj_read_bytes_LE(i8* %32, i32* nonnull %6, i32 1) #12
  %33 = load i32, i32* %6, align 4
  %34 = lshr i32 %33, 7
  %35 = and i32 %34, 1
  %36 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %30, i64 0, i32 8
  store i32 %35, i32* %36, align 8
  %37 = and i32 %33, 127
  %38 = add nuw nsw i32 %37, 1
  %39 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %30, i64 0, i32 6
  store i32 %38, i32* %39, align 8
  %40 = icmp ugt i32 %37, 30
  br i1 %40, label %41, label %43

41:                                               ; preds = %29
  %42 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([133 x i8], [133 x i8]* @.str.204, i64 0, i64 0), i32 %31, i32 %38) #12
  br label %48

43:                                               ; preds = %29
  %44 = getelementptr inbounds i8, i8* %32, i64 1
  %45 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %30, i64 1
  %46 = add nuw i32 %31, 1
  %47 = icmp eq i32 %46, %12
  br i1 %47, label %48, label %29

48:                                               ; preds = %43, %22, %41, %20, %15
  %49 = phi i32 [ 0, %15 ], [ 0, %20 ], [ 0, %41 ], [ 1, %22 ], [ 1, %43 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #12
  ret i32 %49
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_read_mcc(%struct.opj_j2k* nocapture readonly, i8*, i32, %struct.opj_event_mgr*) #3 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #12
  store i32 -1431655766, i32* %5, align 4
  %10 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #12
  store i32 -1431655766, i32* %6, align 4
  %11 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #12
  store i32 -1431655766, i32* %7, align 4
  %12 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #12
  store i32 -1431655766, i32* %8, align 4
  %13 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 16
  br i1 %15, label %16, label %23

16:                                               ; preds = %4
  %17 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %18 = load %struct.opj_tcp*, %struct.opj_tcp** %17, align 8
  %19 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %20 = load i32, i32* %19, align 8
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %18, i64 %21
  br label %26

23:                                               ; preds = %4
  %24 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 1
  %25 = load %struct.opj_tcp*, %struct.opj_tcp** %24, align 8
  br label %26

26:                                               ; preds = %23, %16
  %27 = phi %struct.opj_tcp* [ %22, %16 ], [ %25, %23 ]
  %28 = icmp ult i32 %2, 2
  br i1 %28, label %29, label %31

29:                                               ; preds = %26
  %30 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.221, i64 0, i64 0)) #12
  br label %270

31:                                               ; preds = %26
  call void @opj_read_bytes_LE(i8* %1, i32* nonnull %5, i32 2) #12
  %32 = getelementptr inbounds i8, i8* %1, i64 2
  %33 = load i32, i32* %5, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %37, label %35

35:                                               ; preds = %31
  %36 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.222, i64 0, i64 0)) #12
  br label %270

37:                                               ; preds = %31
  %38 = icmp ult i32 %2, 7
  br i1 %38, label %39, label %41

39:                                               ; preds = %37
  %40 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.221, i64 0, i64 0)) #12
  br label %270

41:                                               ; preds = %37
  call void @opj_read_bytes_LE(i8* %32, i32* nonnull %6, i32 1) #12
  %42 = getelementptr inbounds i8, i8* %1, i64 3
  %43 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %27, i64 0, i32 26
  %44 = load %struct.opj_simple_mcc_decorrelation_data*, %struct.opj_simple_mcc_decorrelation_data** %43, align 8
  %45 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %27, i64 0, i32 27
  %46 = load i32, i32* %45, align 8
  %47 = icmp eq i32 %46, 0
  %48 = bitcast %struct.opj_simple_mcc_decorrelation_data* %44 to i8*
  br i1 %47, label %65, label %49

49:                                               ; preds = %41
  %50 = load i32, i32* %6, align 4
  br label %51

51:                                               ; preds = %49, %57
  %52 = phi %struct.opj_simple_mcc_decorrelation_data* [ %44, %49 ], [ %58, %57 ]
  %53 = phi i32 [ 0, %49 ], [ %59, %57 ]
  %54 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %52, i64 0, i32 0
  %55 = load i32, i32* %54, align 8
  %56 = icmp eq i32 %55, %50
  br i1 %56, label %61, label %57

57:                                               ; preds = %51
  %58 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %52, i64 1
  %59 = add nuw i32 %53, 1
  %60 = icmp ult i32 %59, %46
  br i1 %60, label %51, label %61

61:                                               ; preds = %57, %51
  %62 = phi i32 [ %59, %57 ], [ %53, %51 ]
  %63 = phi %struct.opj_simple_mcc_decorrelation_data* [ %58, %57 ], [ %52, %51 ]
  %64 = icmp eq i32 %62, %46
  br i1 %64, label %65, label %98

65:                                               ; preds = %41, %61
  %66 = phi i32 [ %62, %61 ], [ 0, %41 ]
  %67 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %27, i64 0, i32 28
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %66, %68
  br i1 %69, label %70, label %93

70:                                               ; preds = %65
  %71 = add i32 %66, 10
  store i32 %71, i32* %67, align 4
  %72 = bitcast %struct.opj_simple_mcc_decorrelation_data** %43 to i8**
  %73 = zext i32 %71 to i64
  %74 = shl nuw nsw i64 %73, 5
  %75 = call i8* @opj_realloc(i8* %48, i64 %74) #12
  %76 = icmp eq i8* %75, null
  br i1 %76, label %77, label %81

77:                                               ; preds = %70
  %78 = load i8*, i8** %72, align 8
  call void @opj_free(i8* %78) #12
  %79 = bitcast %struct.opj_simple_mcc_decorrelation_data** %43 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %79, i8 0, i64 16, i1 false)
  %80 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.223, i64 0, i64 0)) #12
  br label %270

81:                                               ; preds = %70
  %82 = bitcast i8* %75 to %struct.opj_simple_mcc_decorrelation_data*
  store i8* %75, i8** %72, align 8
  %83 = load i32, i32* %45, align 8
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %82, i64 %84
  %86 = bitcast %struct.opj_simple_mcc_decorrelation_data* %85 to i8*
  %87 = load i32, i32* %67, align 4
  %88 = sub i32 %87, %83
  %89 = zext i32 %88 to i64
  %90 = shl nuw nsw i64 %89, 5
  call void @llvm.memset.p0i8.i64(i8* align 8 %86, i8 0, i64 %90, i1 false)
  %91 = load %struct.opj_simple_mcc_decorrelation_data*, %struct.opj_simple_mcc_decorrelation_data** %43, align 8
  %92 = load i32, i32* %45, align 8
  br label %93

93:                                               ; preds = %81, %65
  %94 = phi i32 [ %92, %81 ], [ %46, %65 ]
  %95 = phi %struct.opj_simple_mcc_decorrelation_data* [ %91, %81 ], [ %44, %65 ]
  %96 = zext i32 %94 to i64
  %97 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %95, i64 %96
  br label %98

98:                                               ; preds = %93, %61
  %99 = phi %struct.opj_simple_mcc_decorrelation_data* [ %97, %93 ], [ %63, %61 ]
  %100 = phi i32 [ 1, %93 ], [ 0, %61 ]
  %101 = load i32, i32* %6, align 4
  %102 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %99, i64 0, i32 0
  store i32 %101, i32* %102, align 8
  call void @opj_read_bytes_LE(i8* %42, i32* nonnull %5, i32 2) #12
  %103 = load i32, i32* %5, align 4
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %107, label %105

105:                                              ; preds = %98
  %106 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.222, i64 0, i64 0)) #12
  br label %270

107:                                              ; preds = %98
  %108 = getelementptr inbounds i8, i8* %1, i64 5
  call void @opj_read_bytes_LE(i8* %108, i32* nonnull %7, i32 2) #12
  %109 = load i32, i32* %7, align 4
  %110 = icmp ugt i32 %109, 1
  br i1 %110, label %111, label %113

111:                                              ; preds = %107
  %112 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.224, i64 0, i64 0)) #12
  br label %270

113:                                              ; preds = %107
  %114 = add i32 %2, -7
  %115 = icmp eq i32 %109, 0
  br i1 %115, label %260, label %116

116:                                              ; preds = %113
  %117 = getelementptr inbounds i8, i8* %1, i64 7
  %118 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %99, i64 0, i32 1
  %119 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %99, i64 0, i32 4
  %120 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %99, i64 0, i32 2
  %121 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %99, i64 0, i32 3
  %122 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %27, i64 0, i32 23
  %123 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %27, i64 0, i32 24
  %124 = bitcast %struct.opj_mct_data** %120 to i8*
  br label %125

125:                                              ; preds = %116, %256
  %126 = phi i32 [ 0, %116 ], [ %257, %256 ]
  %127 = phi i32 [ %114, %116 ], [ %185, %256 ]
  %128 = phi i8* [ %117, %116 ], [ %203, %256 ]
  %129 = icmp ult i32 %127, 3
  br i1 %129, label %130, label %132

130:                                              ; preds = %125
  %131 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.221, i64 0, i64 0)) #12
  br label %270

132:                                              ; preds = %125
  call void @opj_read_bytes_LE(i8* %128, i32* nonnull %5, i32 1) #12
  %133 = load i32, i32* %5, align 4
  %134 = icmp eq i32 %133, 1
  br i1 %134, label %137, label %135

135:                                              ; preds = %132
  %136 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.225, i64 0, i64 0)) #12
  br label %270

137:                                              ; preds = %132
  %138 = getelementptr inbounds i8, i8* %128, i64 1
  call void @opj_read_bytes_LE(i8* %138, i32* nonnull %8, i32 2) #12
  %139 = add i32 %127, -3
  %140 = load i32, i32* %8, align 4
  %141 = lshr i32 %140, 15
  %142 = add nuw nsw i32 %141, 1
  %143 = and i32 %140, 32767
  store i32 %143, i32* %118, align 4
  %144 = mul i32 %142, %143
  %145 = add nuw i32 %144, 2
  %146 = icmp ult i32 %139, %145
  br i1 %146, label %147, label %149

147:                                              ; preds = %137
  %148 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.221, i64 0, i64 0)) #12
  br label %270

149:                                              ; preds = %137
  %150 = getelementptr inbounds i8, i8* %128, i64 3
  %151 = sub i32 %139, %145
  %152 = icmp eq i32 %143, 0
  br i1 %152, label %167, label %153

153:                                              ; preds = %149
  %154 = zext i32 %142 to i64
  br label %155

155:                                              ; preds = %153, %162
  %156 = phi i32 [ 0, %153 ], [ %164, %162 ]
  %157 = phi i8* [ %150, %153 ], [ %163, %162 ]
  call void @opj_read_bytes_LE(i8* %157, i32* nonnull %5, i32 %142) #12
  %158 = load i32, i32* %5, align 4
  %159 = icmp eq i32 %158, %156
  br i1 %159, label %162, label %160

160:                                              ; preds = %155
  %161 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.226, i64 0, i64 0)) #12
  br label %270

162:                                              ; preds = %155
  %163 = getelementptr inbounds i8, i8* %157, i64 %154
  %164 = add nuw i32 %156, 1
  %165 = load i32, i32* %118, align 4
  %166 = icmp ult i32 %164, %165
  br i1 %166, label %155, label %167

167:                                              ; preds = %162, %149
  %168 = phi i8* [ %150, %149 ], [ %163, %162 ]
  call void @opj_read_bytes_LE(i8* %168, i32* nonnull %8, i32 2) #12
  %169 = getelementptr inbounds i8, i8* %168, i64 2
  %170 = load i32, i32* %8, align 4
  %171 = lshr i32 %170, 15
  %172 = add nuw nsw i32 %171, 1
  %173 = and i32 %170, 32767
  store i32 %173, i32* %8, align 4
  %174 = load i32, i32* %118, align 4
  %175 = icmp eq i32 %173, %174
  br i1 %175, label %178, label %176

176:                                              ; preds = %167
  %177 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.227, i64 0, i64 0)) #12
  br label %270

178:                                              ; preds = %167
  %179 = mul i32 %172, %173
  %180 = add nuw i32 %179, 3
  %181 = icmp ult i32 %151, %180
  br i1 %181, label %182, label %184

182:                                              ; preds = %178
  %183 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.221, i64 0, i64 0)) #12
  br label %270

184:                                              ; preds = %178
  %185 = sub i32 %151, %180
  %186 = icmp eq i32 %173, 0
  br i1 %186, label %201, label %187

187:                                              ; preds = %184
  %188 = zext i32 %172 to i64
  br label %189

189:                                              ; preds = %187, %196
  %190 = phi i32 [ 0, %187 ], [ %198, %196 ]
  %191 = phi i8* [ %169, %187 ], [ %197, %196 ]
  call void @opj_read_bytes_LE(i8* %191, i32* nonnull %5, i32 %172) #12
  %192 = load i32, i32* %5, align 4
  %193 = icmp eq i32 %192, %190
  br i1 %193, label %196, label %194

194:                                              ; preds = %189
  %195 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.226, i64 0, i64 0)) #12
  br label %270

196:                                              ; preds = %189
  %197 = getelementptr inbounds i8, i8* %191, i64 %188
  %198 = add nuw i32 %190, 1
  %199 = load i32, i32* %118, align 4
  %200 = icmp ult i32 %198, %199
  br i1 %200, label %189, label %201

201:                                              ; preds = %196, %184
  %202 = phi i8* [ %169, %184 ], [ %197, %196 ]
  call void @opj_read_bytes_LE(i8* %202, i32* nonnull %5, i32 3) #12
  %203 = getelementptr inbounds i8, i8* %202, i64 3
  %204 = load i32, i32* %5, align 4
  %205 = lshr i32 %204, 16
  %206 = trunc i32 %205 to i8
  %207 = and i8 %206, 1
  %208 = load i8, i8* %119, align 8
  %209 = and i8 %208, -2
  %210 = or i8 %207, %209
  %211 = xor i8 %210, 1
  store i8 %211, i8* %119, align 8
  %212 = and i32 %204, 255
  call void @llvm.memset.p0i8.i64(i8* align 8 %124, i8 0, i64 16, i1 false)
  store i32 %212, i32* %6, align 4
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %233, label %214

214:                                              ; preds = %201
  %215 = load i32, i32* %123, align 8
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %231, label %217

217:                                              ; preds = %214
  %218 = load %struct.opj_mct_data*, %struct.opj_mct_data** %122, align 8
  br label %219

219:                                              ; preds = %217, %225
  %220 = phi %struct.opj_mct_data* [ %226, %225 ], [ %218, %217 ]
  %221 = phi i32 [ %227, %225 ], [ 0, %217 ]
  %222 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %220, i64 0, i32 2
  %223 = load i32, i32* %222, align 8
  %224 = icmp eq i32 %223, %212
  br i1 %224, label %229, label %225

225:                                              ; preds = %219
  %226 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %220, i64 1
  %227 = add nuw i32 %221, 1
  %228 = icmp ult i32 %227, %215
  br i1 %228, label %219, label %231

229:                                              ; preds = %219
  store %struct.opj_mct_data* %220, %struct.opj_mct_data** %120, align 8
  %230 = icmp eq %struct.opj_mct_data* %220, null
  br i1 %230, label %231, label %233

231:                                              ; preds = %214, %229, %225
  %232 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.221, i64 0, i64 0)) #12
  br label %270

233:                                              ; preds = %201, %229
  %234 = lshr i32 %204, 8
  %235 = and i32 %234, 255
  store i32 %235, i32* %6, align 4
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %256, label %237

237:                                              ; preds = %233
  %238 = load i32, i32* %123, align 8
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %254, label %240

240:                                              ; preds = %237
  %241 = load %struct.opj_mct_data*, %struct.opj_mct_data** %122, align 8
  br label %242

242:                                              ; preds = %240, %248
  %243 = phi %struct.opj_mct_data* [ %249, %248 ], [ %241, %240 ]
  %244 = phi i32 [ %250, %248 ], [ 0, %240 ]
  %245 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %243, i64 0, i32 2
  %246 = load i32, i32* %245, align 8
  %247 = icmp eq i32 %246, %235
  br i1 %247, label %252, label %248

248:                                              ; preds = %242
  %249 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %243, i64 1
  %250 = add nuw i32 %244, 1
  %251 = icmp ult i32 %250, %238
  br i1 %251, label %242, label %254

252:                                              ; preds = %242
  store %struct.opj_mct_data* %243, %struct.opj_mct_data** %121, align 8
  %253 = icmp eq %struct.opj_mct_data* %243, null
  br i1 %253, label %254, label %256

254:                                              ; preds = %237, %252, %248
  %255 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.221, i64 0, i64 0)) #12
  br label %270

256:                                              ; preds = %233, %252
  %257 = add nuw i32 %126, 1
  %258 = load i32, i32* %7, align 4
  %259 = icmp ult i32 %257, %258
  br i1 %259, label %125, label %260

260:                                              ; preds = %256, %113
  %261 = phi i32 [ %114, %113 ], [ %185, %256 ]
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %265, label %263

263:                                              ; preds = %260
  %264 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.221, i64 0, i64 0)) #12
  br label %270

265:                                              ; preds = %260
  %266 = icmp eq i32 %100, 0
  br i1 %266, label %270, label %267

267:                                              ; preds = %265
  %268 = load i32, i32* %45, align 8
  %269 = add i32 %268, 1
  store i32 %269, i32* %45, align 8
  br label %270

270:                                              ; preds = %267, %265, %77, %263, %254, %231, %194, %182, %176, %160, %147, %135, %130, %111, %105, %39, %35, %29
  %271 = phi i32 [ 0, %29 ], [ 1, %35 ], [ 0, %39 ], [ 1, %105 ], [ 1, %111 ], [ 0, %130 ], [ 1, %135 ], [ 0, %147 ], [ 1, %160 ], [ 1, %176 ], [ 0, %182 ], [ 1, %194 ], [ 0, %231 ], [ 0, %254 ], [ 0, %263 ], [ 0, %77 ], [ 1, %265 ], [ 1, %267 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #12
  ret i32 %271
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_read_mco(%struct.opj_j2k* nocapture readonly, i8*, i32, %struct.opj_event_mgr*) #3 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #12
  store i32 -1431655766, i32* %5, align 4
  %8 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #12
  store i32 -1431655766, i32* %6, align 4
  %9 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %10 = load %struct.opj_image*, %struct.opj_image** %9, align 8
  %11 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 16
  br i1 %13, label %14, label %21

14:                                               ; preds = %4
  %15 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %16 = load %struct.opj_tcp*, %struct.opj_tcp** %15, align 8
  %17 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %18 = load i32, i32* %17, align 8
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %16, i64 %19
  br label %24

21:                                               ; preds = %4
  %22 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 1
  %23 = load %struct.opj_tcp*, %struct.opj_tcp** %22, align 8
  br label %24

24:                                               ; preds = %21, %14
  %25 = phi %struct.opj_tcp* [ %20, %14 ], [ %23, %21 ]
  %26 = icmp eq i32 %2, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %24
  %28 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.228, i64 0, i64 0)) #12
  br label %175

29:                                               ; preds = %24
  call void @opj_read_bytes_LE(i8* %1, i32* nonnull %6, i32 1) #12
  %30 = load i32, i32* %6, align 4
  %31 = icmp ugt i32 %30, 1
  br i1 %31, label %32, label %34

32:                                               ; preds = %29
  %33 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.229, i64 0, i64 0)) #12
  br label %175

34:                                               ; preds = %29
  %35 = add nuw nsw i32 %30, 1
  %36 = icmp eq i32 %35, %2
  br i1 %36, label %39, label %37

37:                                               ; preds = %34
  %38 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %3, i32 2, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.228, i64 0, i64 0)) #12
  br label %175

39:                                               ; preds = %34
  %40 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %25, i64 0, i32 15
  %41 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %10, i64 0, i32 4
  %42 = load i32, i32* %41, align 8
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %54, label %44

44:                                               ; preds = %39
  %45 = load %struct.opj_tccp*, %struct.opj_tccp** %40, align 8
  br label %46

46:                                               ; preds = %44, %46
  %47 = phi %struct.opj_tccp* [ %50, %46 ], [ %45, %44 ]
  %48 = phi i32 [ %51, %46 ], [ 0, %44 ]
  %49 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %47, i64 0, i32 12
  store i32 0, i32* %49, align 4
  %50 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %47, i64 1
  %51 = add nuw i32 %48, 1
  %52 = load i32, i32* %41, align 8
  %53 = icmp ult i32 %51, %52
  br i1 %53, label %46, label %54

54:                                               ; preds = %46, %39
  %55 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %25, i64 0, i32 21
  %56 = load float*, float** %55, align 8
  %57 = icmp eq float* %56, null
  br i1 %57, label %61, label %58

58:                                               ; preds = %54
  %59 = bitcast float* %56 to i8*
  call void @opj_free(i8* nonnull %59) #12
  store float* null, float** %55, align 8
  %60 = load i32, i32* %6, align 4
  br label %61

61:                                               ; preds = %54, %58
  %62 = phi i32 [ %30, %54 ], [ %60, %58 ]
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %175, label %64

64:                                               ; preds = %61
  %65 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %25, i64 0, i32 26
  %66 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %25, i64 0, i32 27
  %67 = bitcast float** %55 to i8**
  br label %68

68:                                               ; preds = %64, %171
  %69 = phi i8* [ %1, %64 ], [ %71, %171 ]
  %70 = phi i32 [ 0, %64 ], [ %172, %171 ]
  %71 = getelementptr inbounds i8, i8* %69, i64 1
  call void @opj_read_bytes_LE(i8* %71, i32* nonnull %5, i32 1) #12
  %72 = load %struct.opj_image*, %struct.opj_image** %9, align 8
  %73 = load %struct.opj_simple_mcc_decorrelation_data*, %struct.opj_simple_mcc_decorrelation_data** %65, align 8
  %74 = load i32, i32* %66, align 8
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %171, label %76

76:                                               ; preds = %68
  %77 = load i32, i32* %5, align 4
  %78 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %73, i64 0, i32 0
  %79 = load i32, i32* %78, align 8
  %80 = icmp eq i32 %79, %77
  br label %81

81:                                               ; preds = %83, %76
  %82 = phi i32 [ 0, %76 ], [ %84, %83 ]
  br i1 %80, label %86, label %83

83:                                               ; preds = %81
  %84 = add nuw i32 %82, 1
  %85 = icmp eq i32 %84, %74
  br i1 %85, label %171, label %81

86:                                               ; preds = %81
  %87 = icmp eq i32 %74, 0
  br i1 %87, label %171, label %88

88:                                               ; preds = %86
  %89 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %73, i64 0, i32 1
  %90 = load i32, i32* %89, align 4
  %91 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %72, i64 0, i32 4
  %92 = load i32, i32* %91, align 8
  %93 = icmp eq i32 %90, %92
  br i1 %93, label %94, label %171

94:                                               ; preds = %88
  %95 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %73, i64 0, i32 2
  %96 = load %struct.opj_mct_data*, %struct.opj_mct_data** %95, align 8
  %97 = icmp eq %struct.opj_mct_data* %96, null
  br i1 %97, label %124, label %98

98:                                               ; preds = %94
  %99 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %96, i64 0, i32 0
  %100 = load i32, i32* %99, align 8
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds [4 x i32], [4 x i32]* @MCT_ELEMENT_SIZE, i64 0, i64 %101
  %103 = load i32, i32* %102, align 4
  %104 = mul i32 %90, %90
  %105 = mul i32 %103, %104
  %106 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %96, i64 0, i32 4
  %107 = load i32, i32* %106, align 8
  %108 = icmp eq i32 %107, %105
  br i1 %108, label %109, label %175

109:                                              ; preds = %98
  %110 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %96, i64 0, i32 3
  %111 = load i8*, i8** %110, align 8
  %112 = icmp eq i8* %111, null
  br i1 %112, label %175, label %113

113:                                              ; preds = %109
  %114 = shl i32 %104, 2
  %115 = zext i32 %114 to i64
  %116 = call i8* @opj_malloc(i64 %115) #12
  store i8* %116, i8** %67, align 8
  %117 = icmp eq i8* %116, null
  br i1 %117, label %175, label %118

118:                                              ; preds = %113
  %119 = load i32, i32* %99, align 8
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds [4 x void (i8*, i8*, i32)*], [4 x void (i8*, i8*, i32)*]* @j2k_mct_read_functions_to_float, i64 0, i64 %120
  %122 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %121, align 8
  %123 = load i8*, i8** %110, align 8
  call void %122(i8* %123, i8* nonnull %116, i32 %104) #12
  br label %124

124:                                              ; preds = %118, %94
  %125 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %73, i64 0, i32 3
  %126 = load %struct.opj_mct_data*, %struct.opj_mct_data** %125, align 8
  %127 = icmp eq %struct.opj_mct_data* %126, null
  br i1 %127, label %171, label %128

128:                                              ; preds = %124
  %129 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %126, i64 0, i32 0
  %130 = load i32, i32* %129, align 8
  %131 = zext i32 %130 to i64
  %132 = getelementptr inbounds [4 x i32], [4 x i32]* @MCT_ELEMENT_SIZE, i64 0, i64 %131
  %133 = load i32, i32* %132, align 4
  %134 = load i32, i32* %91, align 8
  %135 = mul i32 %134, %133
  %136 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %126, i64 0, i32 4
  %137 = load i32, i32* %136, align 8
  %138 = icmp eq i32 %137, %135
  br i1 %138, label %139, label %175

139:                                              ; preds = %128
  %140 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %126, i64 0, i32 3
  %141 = load i8*, i8** %140, align 8
  %142 = icmp eq i8* %141, null
  br i1 %142, label %175, label %143

143:                                              ; preds = %139
  %144 = shl i32 %134, 2
  %145 = zext i32 %144 to i64
  %146 = call i8* @opj_malloc(i64 %145) #12
  %147 = icmp eq i8* %146, null
  br i1 %147, label %175, label %148

148:                                              ; preds = %143
  %149 = load i32, i32* %129, align 8
  %150 = zext i32 %149 to i64
  %151 = getelementptr inbounds [4 x void (i8*, i8*, i32)*], [4 x void (i8*, i8*, i32)*]* @j2k_mct_read_functions_to_int32, i64 0, i64 %150
  %152 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** %151, align 8
  %153 = load i8*, i8** %140, align 8
  call void %152(i8* %153, i8* nonnull %146, i32 %134) #12
  %154 = load i32, i32* %91, align 8
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %170, label %156

156:                                              ; preds = %148
  %157 = load %struct.opj_tccp*, %struct.opj_tccp** %40, align 8
  %158 = bitcast i8* %146 to i32*
  br label %159

159:                                              ; preds = %159, %156
  %160 = phi %struct.opj_tccp* [ %166, %159 ], [ %157, %156 ]
  %161 = phi i32* [ %163, %159 ], [ %158, %156 ]
  %162 = phi i32 [ %167, %159 ], [ 0, %156 ]
  %163 = getelementptr inbounds i32, i32* %161, i64 1
  %164 = load i32, i32* %161, align 4
  %165 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %160, i64 0, i32 12
  store i32 %164, i32* %165, align 4
  %166 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %160, i64 1
  %167 = add nuw i32 %162, 1
  %168 = load i32, i32* %91, align 8
  %169 = icmp ult i32 %167, %168
  br i1 %169, label %159, label %170

170:                                              ; preds = %159, %148
  call void @opj_free(i8* nonnull %146) #12
  br label %171

171:                                              ; preds = %83, %170, %124, %88, %86, %68
  %172 = add nuw i32 %70, 1
  %173 = load i32, i32* %6, align 4
  %174 = icmp ult i32 %172, %173
  br i1 %174, label %68, label %175

175:                                              ; preds = %171, %109, %98, %113, %139, %128, %143, %61, %37, %32, %27
  %176 = phi i32 [ 0, %27 ], [ 1, %32 ], [ 0, %37 ], [ 1, %61 ], [ 1, %171 ], [ 0, %109 ], [ 0, %98 ], [ 0, %113 ], [ 0, %139 ], [ 0, %128 ], [ 0, %143 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #12
  ret i32 %176
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @opj_j2k_read_SPCod_SPCoc(%struct.opj_j2k* nocapture, i32, i8*, i32* nocapture, %struct.opj_event_mgr*) unnamed_addr #3 {
  %6 = alloca i32, align 4
  %7 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #12
  store i32 -1431655766, i32* %6, align 4
  %8 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 16
  br i1 %10, label %11, label %18

11:                                               ; preds = %5
  %12 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %13 = load %struct.opj_tcp*, %struct.opj_tcp** %12, align 8
  %14 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %15 = load i32, i32* %14, align 8
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %16
  br label %21

18:                                               ; preds = %5
  %19 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 1
  %20 = load %struct.opj_tcp*, %struct.opj_tcp** %19, align 8
  br label %21

21:                                               ; preds = %18, %11
  %22 = phi %struct.opj_tcp* [ %17, %11 ], [ %20, %18 ]
  %23 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %24 = load %struct.opj_image*, %struct.opj_image** %23, align 8
  %25 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %24, i64 0, i32 4
  %26 = load i32, i32* %25, align 8
  %27 = icmp ugt i32 %26, %1
  br i1 %27, label %28, label %189

28:                                               ; preds = %21
  %29 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %22, i64 0, i32 15
  %30 = load %struct.opj_tccp*, %struct.opj_tccp** %29, align 8
  %31 = zext i32 %1 to i64
  %32 = load i32, i32* %3, align 4
  %33 = icmp ult i32 %32, 5
  br i1 %33, label %34, label %36

34:                                               ; preds = %28
  %35 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.176, i64 0, i64 0)) #12
  br label %189

36:                                               ; preds = %28
  %37 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 1
  tail call void @opj_read_bytes_LE(i8* %2, i32* %37, i32 1) #12
  %38 = load i32, i32* %37, align 4
  %39 = add i32 %38, 1
  store i32 %39, i32* %37, align 4
  %40 = icmp ugt i32 %39, 33
  br i1 %40, label %41, label %43

41:                                               ; preds = %36
  %42 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.177, i64 0, i64 0), i32 %39, i32 33) #12
  br label %189

43:                                               ; preds = %36
  %44 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 20, i32 0, i32 0
  %45 = load i32, i32* %44, align 8
  %46 = icmp ult i32 %45, %39
  br i1 %46, label %51, label %47

47:                                               ; preds = %43
  %48 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([178 x i8], [178 x i8]* @.str.178, i64 0, i64 0), i32 %1, i32 %45, i32 %39) #12
  %49 = load i32, i32* %8, align 8
  %50 = or i32 %49, 32768
  store i32 %50, i32* %8, align 8
  br label %189

51:                                               ; preds = %43
  %52 = getelementptr inbounds i8, i8* %2, i64 1
  %53 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 2
  tail call void @opj_read_bytes_LE(i8* %52, i32* %53, i32 1) #12
  %54 = getelementptr inbounds i8, i8* %2, i64 2
  %55 = load i32, i32* %53, align 4
  %56 = add i32 %55, 2
  store i32 %56, i32* %53, align 4
  %57 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 3
  tail call void @opj_read_bytes_LE(i8* %54, i32* %57, i32 1) #12
  %58 = load i32, i32* %57, align 4
  %59 = add i32 %58, 2
  store i32 %59, i32* %57, align 4
  %60 = load i32, i32* %53, align 4
  %61 = icmp ugt i32 %60, 10
  %62 = icmp ugt i32 %59, 10
  %63 = or i1 %62, %61
  %64 = add i32 %60, %59
  %65 = icmp ugt i32 %64, 12
  %66 = or i1 %63, %65
  br i1 %66, label %67, label %69

67:                                               ; preds = %51
  %68 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.179, i64 0, i64 0)) #12
  br label %189

69:                                               ; preds = %51
  %70 = getelementptr inbounds i8, i8* %2, i64 3
  %71 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 4
  tail call void @opj_read_bytes_LE(i8* %70, i32* %71, i32 1) #12
  %72 = load i32, i32* %71, align 4
  %73 = and i32 %72, 192
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %77, label %75

75:                                               ; preds = %69
  %76 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.180, i64 0, i64 0)) #12
  br label %189

77:                                               ; preds = %69
  %78 = getelementptr inbounds i8, i8* %2, i64 4
  %79 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 5
  tail call void @opj_read_bytes_LE(i8* %78, i32* %79, i32 1) #12
  %80 = getelementptr inbounds i8, i8* %2, i64 5
  %81 = load i32, i32* %79, align 4
  %82 = icmp ugt i32 %81, 1
  br i1 %82, label %83, label %85

83:                                               ; preds = %77
  %84 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.181, i64 0, i64 0)) #12
  br label %189

85:                                               ; preds = %77
  %86 = load i32, i32* %3, align 4
  %87 = add i32 %86, -5
  store i32 %87, i32* %3, align 4
  %88 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 0
  %89 = load i32, i32* %88, align 4
  %90 = and i32 %89, 1
  %91 = icmp eq i32 %90, 0
  %92 = load i32, i32* %37, align 4
  br i1 %91, label %93, label %149

93:                                               ; preds = %85
  %94 = icmp eq i32 %92, 0
  br i1 %94, label %189, label %95

95:                                               ; preds = %93
  %96 = zext i32 %92 to i64
  %97 = icmp ult i32 %92, 4
  br i1 %97, label %98, label %100

98:                                               ; preds = %147, %95
  %99 = phi i64 [ 0, %95 ], [ %101, %147 ]
  br label %183

100:                                              ; preds = %95
  %101 = and i64 %96, 4294967292
  %102 = add nsw i64 %101, -4
  %103 = lshr exact i64 %102, 2
  %104 = add nuw nsw i64 %103, 1
  %105 = and i64 %104, 3
  %106 = icmp ult i64 %102, 12
  br i1 %106, label %134, label %107

107:                                              ; preds = %100
  %108 = sub nsw i64 %104, %105
  br label %109

109:                                              ; preds = %109, %107
  %110 = phi i64 [ 0, %107 ], [ %131, %109 ]
  %111 = phi i64 [ %108, %107 ], [ %132, %109 ]
  %112 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 10, i64 %110
  %113 = bitcast i32* %112 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %113, align 4
  %114 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 11, i64 %110
  %115 = bitcast i32* %114 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %115, align 4
  %116 = or i64 %110, 4
  %117 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 10, i64 %116
  %118 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %118, align 4
  %119 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 11, i64 %116
  %120 = bitcast i32* %119 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %120, align 4
  %121 = or i64 %110, 8
  %122 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 10, i64 %121
  %123 = bitcast i32* %122 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %123, align 4
  %124 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 11, i64 %121
  %125 = bitcast i32* %124 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %125, align 4
  %126 = or i64 %110, 12
  %127 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 10, i64 %126
  %128 = bitcast i32* %127 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %128, align 4
  %129 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 11, i64 %126
  %130 = bitcast i32* %129 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %130, align 4
  %131 = add i64 %110, 16
  %132 = add i64 %111, -4
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %109, !llvm.loop !73

134:                                              ; preds = %109, %100
  %135 = phi i64 [ 0, %100 ], [ %131, %109 ]
  %136 = icmp eq i64 %105, 0
  br i1 %136, label %147, label %137

137:                                              ; preds = %134, %137
  %138 = phi i64 [ %144, %137 ], [ %135, %134 ]
  %139 = phi i64 [ %145, %137 ], [ %105, %134 ]
  %140 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 10, i64 %138
  %141 = bitcast i32* %140 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %141, align 4
  %142 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 11, i64 %138
  %143 = bitcast i32* %142 to <4 x i32>*
  store <4 x i32> <i32 15, i32 15, i32 15, i32 15>, <4 x i32>* %143, align 4
  %144 = add i64 %138, 4
  %145 = add i64 %139, -1
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %147, label %137, !llvm.loop !74

147:                                              ; preds = %137, %134
  %148 = icmp eq i64 %101, %96
  br i1 %148, label %189, label %98

149:                                              ; preds = %85
  %150 = icmp ult i32 %87, %92
  br i1 %150, label %153, label %151

151:                                              ; preds = %149
  %152 = icmp eq i32 %92, 0
  br i1 %152, label %179, label %155

153:                                              ; preds = %149
  %154 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.176, i64 0, i64 0)) #12
  br label %189

155:                                              ; preds = %151, %168
  %156 = phi i64 [ %173, %168 ], [ 0, %151 ]
  %157 = phi i8* [ %158, %168 ], [ %80, %151 ]
  call void @opj_read_bytes_LE(i8* %157, i32* nonnull %6, i32 1) #12
  %158 = getelementptr inbounds i8, i8* %157, i64 1
  %159 = icmp eq i64 %156, 0
  %160 = load i32, i32* %6, align 4
  %161 = and i32 %160, 15
  br i1 %159, label %168, label %162

162:                                              ; preds = %155
  %163 = icmp eq i32 %161, 0
  %164 = icmp ult i32 %160, 16
  %165 = or i1 %164, %163
  br i1 %165, label %166, label %168

166:                                              ; preds = %162
  %167 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.182, i64 0, i64 0)) #12
  br label %189

168:                                              ; preds = %155, %162
  %169 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 10, i64 %156
  store i32 %161, i32* %169, align 4
  %170 = load i32, i32* %6, align 4
  %171 = lshr i32 %170, 4
  %172 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 11, i64 %156
  store i32 %171, i32* %172, align 4
  %173 = add nuw nsw i64 %156, 1
  %174 = load i32, i32* %37, align 4
  %175 = zext i32 %174 to i64
  %176 = icmp ult i64 %173, %175
  br i1 %176, label %155, label %177

177:                                              ; preds = %168
  %178 = load i32, i32* %3, align 4
  br label %179

179:                                              ; preds = %177, %151
  %180 = phi i32 [ %87, %151 ], [ %178, %177 ]
  %181 = phi i32 [ 0, %151 ], [ %174, %177 ]
  %182 = sub i32 %180, %181
  store i32 %182, i32* %3, align 4
  br label %189

183:                                              ; preds = %98, %183
  %184 = phi i64 [ %187, %183 ], [ %99, %98 ]
  %185 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 10, i64 %184
  store i32 15, i32* %185, align 4
  %186 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 11, i64 %184
  store i32 15, i32* %186, align 4
  %187 = add nuw nsw i64 %184, 1
  %188 = icmp ult i64 %187, %96
  br i1 %188, label %183, label %189, !llvm.loop !75

189:                                              ; preds = %183, %147, %93, %179, %21, %166, %153, %83, %75, %67, %47, %41, %34
  %190 = phi i32 [ 0, %34 ], [ 0, %41 ], [ 0, %47 ], [ 0, %67 ], [ 0, %75 ], [ 0, %83 ], [ 0, %153 ], [ 0, %166 ], [ 0, %21 ], [ 1, %179 ], [ 1, %93 ], [ 1, %147 ], [ 1, %183 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #12
  ret i32 %190
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @opj_j2k_read_SQcd_SQcc(%struct.opj_j2k* nocapture readonly, i32, i8*, i32* nocapture, %struct.opj_event_mgr*) unnamed_addr #3 {
  %6 = alloca i32, align 4
  %7 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #12
  store i32 -1431655766, i32* %6, align 4
  %8 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 16
  br i1 %10, label %11, label %18

11:                                               ; preds = %5
  %12 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %13 = load %struct.opj_tcp*, %struct.opj_tcp** %12, align 8
  %14 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %15 = load i32, i32* %14, align 8
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %13, i64 %16
  br label %21

18:                                               ; preds = %5
  %19 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 1
  %20 = load %struct.opj_tcp*, %struct.opj_tcp** %19, align 8
  br label %21

21:                                               ; preds = %18, %11
  %22 = phi %struct.opj_tcp* [ %17, %11 ], [ %20, %18 ]
  %23 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %24 = load %struct.opj_image*, %struct.opj_image** %23, align 8
  %25 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %24, i64 0, i32 4
  %26 = load i32, i32* %25, align 8
  %27 = icmp ugt i32 %26, %1
  br i1 %27, label %28, label %123

28:                                               ; preds = %21
  %29 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %22, i64 0, i32 15
  %30 = load %struct.opj_tccp*, %struct.opj_tccp** %29, align 8
  %31 = zext i32 %1 to i64
  %32 = load i32, i32* %3, align 4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %36

34:                                               ; preds = %28
  %35 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.188, i64 0, i64 0)) #12
  br label %123

36:                                               ; preds = %28
  %37 = add i32 %32, -1
  store i32 %37, i32* %3, align 4
  call void @opj_read_bytes_LE(i8* %2, i32* nonnull %6, i32 1) #12
  %38 = getelementptr inbounds i8, i8* %2, i64 1
  %39 = load i32, i32* %6, align 4
  %40 = and i32 %39, 31
  %41 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 6
  store i32 %40, i32* %41, align 4
  %42 = load i32, i32* %6, align 4
  %43 = lshr i32 %42, 5
  %44 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 8
  store i32 %43, i32* %44, align 4
  %45 = icmp eq i32 %40, 1
  br i1 %45, label %60, label %46

46:                                               ; preds = %36
  %47 = icmp ne i32 %40, 0
  %48 = load i32, i32* %3, align 4
  %49 = zext i1 %47 to i32
  %50 = lshr i32 %48, %49
  %51 = icmp ugt i32 %50, 97
  br i1 %51, label %52, label %55

52:                                               ; preds = %46
  %53 = call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 2, i8* getelementptr inbounds ([216 x i8], [216 x i8]* @.str.189, i64 0, i64 0), i32 %50, i32 97, i32 97) #12
  %54 = load i32, i32* %41, align 4
  br label %55

55:                                               ; preds = %46, %52
  %56 = phi i32 [ %54, %52 ], [ %40, %46 ]
  %57 = icmp eq i32 %56, 0
  %58 = icmp ne i32 %50, 0
  br i1 %57, label %63, label %59

59:                                               ; preds = %55
  br i1 %58, label %60, label %97

60:                                               ; preds = %36, %59
  %61 = phi i32 [ %50, %59 ], [ 1, %36 ]
  %62 = zext i32 %61 to i64
  br label %82

63:                                               ; preds = %55
  br i1 %58, label %64, label %79

64:                                               ; preds = %63
  %65 = zext i32 %50 to i64
  br label %66

66:                                               ; preds = %76, %64
  %67 = phi i64 [ 0, %64 ], [ %77, %76 ]
  %68 = phi i8* [ %38, %64 ], [ %69, %76 ]
  call void @opj_read_bytes_LE(i8* %68, i32* nonnull %6, i32 1) #12
  %69 = getelementptr inbounds i8, i8* %68, i64 1
  %70 = icmp ult i64 %67, 97
  br i1 %70, label %71, label %76

71:                                               ; preds = %66
  %72 = load i32, i32* %6, align 4
  %73 = lshr i32 %72, 3
  %74 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 7, i64 %67, i32 0
  store i32 %73, i32* %74, align 4
  %75 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 7, i64 %67, i32 1
  store i32 0, i32* %75, align 4
  br label %76

76:                                               ; preds = %66, %71
  %77 = add nuw nsw i64 %67, 1
  %78 = icmp eq i64 %77, %65
  br i1 %78, label %79, label %66

79:                                               ; preds = %76, %63
  %80 = load i32, i32* %3, align 4
  %81 = sub i32 %80, %50
  br label %102

82:                                               ; preds = %94, %60
  %83 = phi i64 [ 0, %60 ], [ %95, %94 ]
  %84 = phi i8* [ %38, %60 ], [ %85, %94 ]
  call void @opj_read_bytes_LE(i8* %84, i32* nonnull %6, i32 2) #12
  %85 = getelementptr inbounds i8, i8* %84, i64 2
  %86 = icmp ult i64 %83, 97
  br i1 %86, label %87, label %94

87:                                               ; preds = %82
  %88 = load i32, i32* %6, align 4
  %89 = lshr i32 %88, 11
  %90 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 7, i64 %83, i32 0
  store i32 %89, i32* %90, align 4
  %91 = load i32, i32* %6, align 4
  %92 = and i32 %91, 2047
  %93 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 7, i64 %83, i32 1
  store i32 %92, i32* %93, align 4
  br label %94

94:                                               ; preds = %82, %87
  %95 = add nuw nsw i64 %83, 1
  %96 = icmp eq i64 %95, %62
  br i1 %96, label %97, label %82

97:                                               ; preds = %94, %59
  %98 = phi i32 [ %50, %59 ], [ %61, %94 ]
  %99 = load i32, i32* %3, align 4
  %100 = shl i32 %98, 1
  %101 = sub i32 %99, %100
  br label %102

102:                                              ; preds = %97, %79
  %103 = phi i32 [ %101, %97 ], [ %81, %79 ]
  store i32 %103, i32* %3, align 4
  %104 = load i32, i32* %41, align 4
  %105 = icmp eq i32 %104, 1
  br i1 %105, label %106, label %123

106:                                              ; preds = %102
  %107 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 7, i64 0, i32 0
  %108 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 7, i64 0, i32 1
  br label %109

109:                                              ; preds = %109, %106
  %110 = phi i64 [ 1, %106 ], [ %121, %109 ]
  %111 = load i32, i32* %107, align 4
  %112 = trunc i64 %110 to i32
  %113 = add i32 %112, -1
  %114 = udiv i32 %113, 3
  %115 = sub nsw i32 %111, %114
  %116 = icmp sgt i32 %115, 0
  %117 = select i1 %116, i32 %115, i32 0
  %118 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 7, i64 %110, i32 0
  store i32 %117, i32* %118, align 4
  %119 = load i32, i32* %108, align 4
  %120 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %30, i64 %31, i32 7, i64 %110, i32 1
  store i32 %119, i32* %120, align 4
  %121 = add nuw nsw i64 %110, 1
  %122 = icmp eq i64 %121, 97
  br i1 %122, label %123, label %109

123:                                              ; preds = %109, %102, %21, %34
  %124 = phi i32 [ 0, %34 ], [ 0, %21 ], [ 1, %102 ], [ 1, %109 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #12
  ret i32 %124
}

declare void @opj_image_comp_header_update(%struct.opj_image*, %struct.opj_cp*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal void @opj_j2k_read_int16_to_float(i8*, i8* nocapture, i32) #3 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #12
  store i32 -1431655766, i32* %4, align 4
  %6 = icmp eq i32 %2, 0
  br i1 %6, label %19, label %7

7:                                                ; preds = %3
  %8 = bitcast i8* %1 to float*
  br label %9

9:                                                ; preds = %9, %7
  %10 = phi i32 [ %17, %9 ], [ 0, %7 ]
  %11 = phi float* [ %16, %9 ], [ %8, %7 ]
  %12 = phi i8* [ %13, %9 ], [ %0, %7 ]
  call void @opj_read_bytes_LE(i8* %12, i32* nonnull %4, i32 2) #12
  %13 = getelementptr inbounds i8, i8* %12, i64 2
  %14 = load i32, i32* %4, align 4
  %15 = uitofp i32 %14 to float
  %16 = getelementptr inbounds float, float* %11, i64 1
  store float %15, float* %11, align 4
  %17 = add nuw i32 %10, 1
  %18 = icmp eq i32 %17, %2
  br i1 %18, label %19, label %9

19:                                               ; preds = %9, %3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @opj_j2k_read_int32_to_float(i8*, i8* nocapture, i32) #3 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #12
  store i32 -1431655766, i32* %4, align 4
  %6 = icmp eq i32 %2, 0
  br i1 %6, label %19, label %7

7:                                                ; preds = %3
  %8 = bitcast i8* %1 to float*
  br label %9

9:                                                ; preds = %9, %7
  %10 = phi i32 [ %17, %9 ], [ 0, %7 ]
  %11 = phi float* [ %16, %9 ], [ %8, %7 ]
  %12 = phi i8* [ %13, %9 ], [ %0, %7 ]
  call void @opj_read_bytes_LE(i8* %12, i32* nonnull %4, i32 4) #12
  %13 = getelementptr inbounds i8, i8* %12, i64 4
  %14 = load i32, i32* %4, align 4
  %15 = uitofp i32 %14 to float
  %16 = getelementptr inbounds float, float* %11, i64 1
  store float %15, float* %11, align 4
  %17 = add nuw i32 %10, 1
  %18 = icmp eq i32 %17, %2
  br i1 %18, label %19, label %9

19:                                               ; preds = %9, %3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @opj_j2k_read_float32_to_float(i8*, i8* nocapture, i32) #3 {
  %4 = alloca float, align 4
  %5 = bitcast float* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #12
  store float 0xFFFFFFFFE0000000, float* %4, align 4
  %6 = icmp eq i32 %2, 0
  br i1 %6, label %20, label %7

7:                                                ; preds = %3
  %8 = bitcast i8* %1 to float*
  %9 = bitcast float* %4 to i32*
  br label %10

10:                                               ; preds = %10, %7
  %11 = phi i32 [ 0, %7 ], [ %18, %10 ]
  %12 = phi float* [ %8, %7 ], [ %16, %10 ]
  %13 = phi i8* [ %0, %7 ], [ %14, %10 ]
  call void @opj_read_float_LE(i8* %13, float* nonnull %4) #12
  %14 = getelementptr inbounds i8, i8* %13, i64 4
  %15 = load i32, i32* %9, align 4
  %16 = getelementptr inbounds float, float* %12, i64 1
  %17 = bitcast float* %12 to i32*
  store i32 %15, i32* %17, align 4
  %18 = add nuw i32 %11, 1
  %19 = icmp eq i32 %18, %2
  br i1 %19, label %20, label %10

20:                                               ; preds = %10, %3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @opj_j2k_read_float64_to_float(i8*, i8* nocapture, i32) #3 {
  %4 = alloca double, align 8
  %5 = bitcast double* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %4, align 8
  %6 = icmp eq i32 %2, 0
  br i1 %6, label %19, label %7

7:                                                ; preds = %3
  %8 = bitcast i8* %1 to float*
  br label %9

9:                                                ; preds = %9, %7
  %10 = phi i32 [ %17, %9 ], [ 0, %7 ]
  %11 = phi float* [ %16, %9 ], [ %8, %7 ]
  %12 = phi i8* [ %13, %9 ], [ %0, %7 ]
  call void @opj_read_double_LE(i8* %12, double* nonnull %4) #12
  %13 = getelementptr inbounds i8, i8* %12, i64 8
  %14 = load double, double* %4, align 8
  %15 = fptrunc double %14 to float
  %16 = getelementptr inbounds float, float* %11, i64 1
  store float %15, float* %11, align 4
  %17 = add nuw i32 %10, 1
  %18 = icmp eq i32 %17, %2
  br i1 %18, label %19, label %9

19:                                               ; preds = %9, %3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #12
  ret void
}

declare void @opj_read_float_LE(i8*, float*) local_unnamed_addr #4

declare void @opj_read_double_LE(i8*, double*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal void @opj_j2k_read_int16_to_int32(i8*, i8* nocapture, i32) #3 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #12
  store i32 -1431655766, i32* %4, align 4
  %6 = icmp eq i32 %2, 0
  br i1 %6, label %18, label %7

7:                                                ; preds = %3
  %8 = bitcast i8* %1 to i32*
  br label %9

9:                                                ; preds = %9, %7
  %10 = phi i32 [ %16, %9 ], [ 0, %7 ]
  %11 = phi i32* [ %15, %9 ], [ %8, %7 ]
  %12 = phi i8* [ %13, %9 ], [ %0, %7 ]
  call void @opj_read_bytes_LE(i8* %12, i32* nonnull %4, i32 2) #12
  %13 = getelementptr inbounds i8, i8* %12, i64 2
  %14 = load i32, i32* %4, align 4
  %15 = getelementptr inbounds i32, i32* %11, i64 1
  store i32 %14, i32* %11, align 4
  %16 = add nuw i32 %10, 1
  %17 = icmp eq i32 %16, %2
  br i1 %17, label %18, label %9

18:                                               ; preds = %9, %3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @opj_j2k_read_int32_to_int32(i8*, i8* nocapture, i32) #3 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #12
  store i32 -1431655766, i32* %4, align 4
  %6 = icmp eq i32 %2, 0
  br i1 %6, label %18, label %7

7:                                                ; preds = %3
  %8 = bitcast i8* %1 to i32*
  br label %9

9:                                                ; preds = %9, %7
  %10 = phi i32 [ %16, %9 ], [ 0, %7 ]
  %11 = phi i32* [ %15, %9 ], [ %8, %7 ]
  %12 = phi i8* [ %13, %9 ], [ %0, %7 ]
  call void @opj_read_bytes_LE(i8* %12, i32* nonnull %4, i32 4) #12
  %13 = getelementptr inbounds i8, i8* %12, i64 4
  %14 = load i32, i32* %4, align 4
  %15 = getelementptr inbounds i32, i32* %11, i64 1
  store i32 %14, i32* %11, align 4
  %16 = add nuw i32 %10, 1
  %17 = icmp eq i32 %16, %2
  br i1 %17, label %18, label %9

18:                                               ; preds = %9, %3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @opj_j2k_read_float32_to_int32(i8*, i8* nocapture, i32) #3 {
  %4 = alloca float, align 4
  %5 = bitcast float* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #12
  store float 0xFFFFFFFFE0000000, float* %4, align 4
  %6 = icmp eq i32 %2, 0
  br i1 %6, label %19, label %7

7:                                                ; preds = %3
  %8 = bitcast i8* %1 to i32*
  br label %9

9:                                                ; preds = %9, %7
  %10 = phi i32 [ %17, %9 ], [ 0, %7 ]
  %11 = phi i32* [ %16, %9 ], [ %8, %7 ]
  %12 = phi i8* [ %13, %9 ], [ %0, %7 ]
  call void @opj_read_float_LE(i8* %12, float* nonnull %4) #12
  %13 = getelementptr inbounds i8, i8* %12, i64 4
  %14 = load float, float* %4, align 4
  %15 = fptosi float %14 to i32
  %16 = getelementptr inbounds i32, i32* %11, i64 1
  store i32 %15, i32* %11, align 4
  %17 = add nuw i32 %10, 1
  %18 = icmp eq i32 %17, %2
  br i1 %18, label %19, label %9

19:                                               ; preds = %9, %3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @opj_j2k_read_float64_to_int32(i8*, i8* nocapture, i32) #3 {
  %4 = alloca double, align 8
  %5 = bitcast double* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %4, align 8
  %6 = icmp eq i32 %2, 0
  br i1 %6, label %19, label %7

7:                                                ; preds = %3
  %8 = bitcast i8* %1 to i32*
  br label %9

9:                                                ; preds = %9, %7
  %10 = phi i32 [ %17, %9 ], [ 0, %7 ]
  %11 = phi i32* [ %16, %9 ], [ %8, %7 ]
  %12 = phi i8* [ %13, %9 ], [ %0, %7 ]
  call void @opj_read_double_LE(i8* %12, double* nonnull %4) #12
  %13 = getelementptr inbounds i8, i8* %12, i64 8
  %14 = load double, double* %4, align 8
  %15 = fptosi double %14 to i32
  %16 = getelementptr inbounds i32, i32* %11, i64 1
  store i32 %15, i32* %11, align 4
  %17 = add nuw i32 %10, 1
  %18 = icmp eq i32 %17, %2
  br i1 %18, label %19, label %9

19:                                               ; preds = %9, %3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #12
  ret void
}

declare i32 @opj_stream_has_seek(%struct.opj_stream_private*) local_unnamed_addr #4

declare i32 @opj_stream_seek(%struct.opj_stream_private*, i64, %struct.opj_event_mgr*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_decode_tiles(%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*) #3 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #12
  store i32 1, i32* %4, align 4
  %12 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #12
  store i32 -1431655766, i32* %5, align 4
  %13 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #12
  store i32 -1431655766, i32* %6, align 4
  %14 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #12
  store i32 -1431655766, i32* %7, align 4
  %15 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #12
  store i32 -1431655766, i32* %8, align 4
  %16 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #12
  store i32 -1431655766, i32* %9, align 4
  %17 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #12
  store i32 -1431655766, i32* %10, align 4
  %18 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 6
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %119

21:                                               ; preds = %3
  %22 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 7
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %25, label %119

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %119

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 2
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %119

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 3
  %35 = load %struct.opj_image*, %struct.opj_image** %34, align 8
  %36 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %35, i64 0, i32 0
  %37 = load i32, i32* %36, align 8
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %119

39:                                               ; preds = %33
  %40 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %35, i64 0, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %119

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %35, i64 0, i32 2
  %45 = load i32, i32* %44, align 8
  %46 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 3
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %45, %47
  br i1 %48, label %49, label %119

49:                                               ; preds = %43
  %50 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %35, i64 0, i32 3
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 4
  %53 = load i32, i32* %52, align 8
  %54 = icmp eq i32 %51, %53
  br i1 %54, label %55, label %119

55:                                               ; preds = %49
  %56 = call i32 @opj_j2k_read_tile_header(%struct.opj_j2k* %0, i32* nonnull %5, i32* null, i32* nonnull %6, i32* nonnull %7, i32* nonnull %8, i32* nonnull %9, i32* nonnull %10, i32* nonnull %4, %struct.opj_stream_private* %1, %struct.opj_event_mgr* %2)
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %223, label %58

58:                                               ; preds = %55
  %59 = load i32, i32* %5, align 4
  %60 = tail call i32 @opj_j2k_decode_tile(%struct.opj_j2k* %0, i32 %59, i8* null, i32 0, %struct.opj_stream_private* %1, %struct.opj_event_mgr* %2)
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %69, label %62

62:                                               ; preds = %58
  %63 = load %struct.opj_image*, %struct.opj_image** %34, align 8
  %64 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %63, i64 0, i32 4
  %65 = load i32, i32* %64, align 8
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %223, label %67

67:                                               ; preds = %62
  %68 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 9
  br label %71

69:                                               ; preds = %58
  %70 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.270, i64 0, i64 0)) #12
  br label %223

71:                                               ; preds = %67, %71
  %72 = phi i64 [ 0, %67 ], [ %113, %71 ]
  %73 = phi %struct.opj_image* [ %63, %67 ], [ %114, %71 ]
  %74 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %73, i64 0, i32 6
  %75 = load %struct.opj_image_comp*, %struct.opj_image_comp** %74, align 8
  %76 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %75, i64 %72, i32 11
  %77 = bitcast i32** %76 to i8**
  %78 = load i8*, i8** %77, align 8
  tail call void @opj_image_data_free(i8* %78) #12
  %79 = load %struct.opj_tcd*, %struct.opj_tcd** %68, align 8
  %80 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %79, i64 0, i32 5
  %81 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %80, align 8
  %82 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %81, i64 0, i32 0
  %83 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %82, align 8
  %84 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %83, i64 0, i32 5
  %85 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %84, align 8
  %86 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %85, i64 %72, i32 9
  %87 = bitcast i32** %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = load %struct.opj_image*, %struct.opj_image** %34, align 8
  %90 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %89, i64 0, i32 6
  %91 = load %struct.opj_image_comp*, %struct.opj_image_comp** %90, align 8
  %92 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %91, i64 %72, i32 11
  %93 = bitcast i32** %92 to i64*
  store i64 %88, i64* %93, align 8
  %94 = load %struct.opj_tcd*, %struct.opj_tcd** %68, align 8
  %95 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %94, i64 0, i32 6
  %96 = load %struct.opj_image*, %struct.opj_image** %95, align 8
  %97 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %96, i64 0, i32 6
  %98 = load %struct.opj_image_comp*, %struct.opj_image_comp** %97, align 8
  %99 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %98, i64 %72, i32 9
  %100 = load i32, i32* %99, align 4
  %101 = load %struct.opj_image*, %struct.opj_image** %34, align 8
  %102 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %101, i64 0, i32 6
  %103 = load %struct.opj_image_comp*, %struct.opj_image_comp** %102, align 8
  %104 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %103, i64 %72, i32 9
  store i32 %100, i32* %104, align 4
  %105 = load %struct.opj_tcd*, %struct.opj_tcd** %68, align 8
  %106 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %105, i64 0, i32 5
  %107 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %106, align 8
  %108 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %107, i64 0, i32 0
  %109 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %108, align 8
  %110 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %109, i64 0, i32 5
  %111 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %110, align 8
  %112 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %111, i64 %72, i32 9
  store i32* null, i32** %112, align 8
  %113 = add nuw nsw i64 %72, 1
  %114 = load %struct.opj_image*, %struct.opj_image** %34, align 8
  %115 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %114, i64 0, i32 4
  %116 = load i32, i32* %115, align 8
  %117 = zext i32 %116 to i64
  %118 = icmp ult i64 %113, %117
  br i1 %118, label %71, label %223

119:                                              ; preds = %49, %43, %39, %33, %29, %25, %21, %3
  %120 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 7
  %121 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %122 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %123 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 0
  %124 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 9
  %125 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 3
  %126 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  br label %127

127:                                              ; preds = %213, %119
  %128 = phi i32 [ %216, %213 ], [ %19, %119 ]
  %129 = phi i32 [ %214, %213 ], [ 0, %119 ]
  %130 = icmp eq i32 %128, 1
  br i1 %130, label %131, label %142

131:                                              ; preds = %127
  %132 = load i32, i32* %120, align 4
  %133 = icmp eq i32 %132, 1
  br i1 %133, label %134, label %142

134:                                              ; preds = %131
  %135 = load %struct.opj_tcp*, %struct.opj_tcp** %121, align 8
  %136 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %135, i64 0, i32 18
  %137 = load i8*, i8** %136, align 8
  %138 = icmp eq i8* %137, null
  br i1 %138, label %142, label %139

139:                                              ; preds = %134
  store i32 0, i32* %5, align 4
  store i32 0, i32* %122, align 8
  %140 = load i32, i32* %123, align 8
  %141 = or i32 %140, 128
  store i32 %141, i32* %123, align 8
  br label %150

142:                                              ; preds = %134, %131, %127
  %143 = call i32 @opj_j2k_read_tile_header(%struct.opj_j2k* %0, i32* nonnull %5, i32* null, i32* nonnull %6, i32* nonnull %7, i32* nonnull %8, i32* nonnull %9, i32* nonnull %10, i32* nonnull %4, %struct.opj_stream_private* %1, %struct.opj_event_mgr* %2)
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %223, label %145

145:                                              ; preds = %142
  %146 = load i32, i32* %4, align 4
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %219, label %148

148:                                              ; preds = %145
  %149 = load i32, i32* %5, align 4
  br label %150

150:                                              ; preds = %148, %139
  %151 = phi i32 [ %149, %148 ], [ 0, %139 ]
  %152 = tail call i32 @opj_j2k_decode_tile(%struct.opj_j2k* %0, i32 %151, i8* null, i32 0, %struct.opj_stream_private* %1, %struct.opj_event_mgr* %2)
  %153 = icmp eq i32 %152, 0
  %154 = add i32 %151, 1
  %155 = load i32, i32* %120, align 4
  %156 = load i32, i32* %18, align 8
  %157 = mul i32 %156, %155
  br i1 %153, label %158, label %160

158:                                              ; preds = %150
  %159 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.271, i64 0, i64 0), i32 %154, i32 %157) #12
  br label %223

160:                                              ; preds = %150
  %161 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 4, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.272, i64 0, i64 0), i32 %154, i32 %157) #12
  %162 = load %struct.opj_tcd*, %struct.opj_tcd** %124, align 8
  %163 = load %struct.opj_image*, %struct.opj_image** %125, align 8
  %164 = tail call fastcc i32 @opj_j2k_update_image_data(%struct.opj_tcd* %162, %struct.opj_image* %163)
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %223, label %166

166:                                              ; preds = %160
  %167 = load i32, i32* %18, align 8
  %168 = icmp eq i32 %167, 1
  br i1 %168, label %169, label %198

169:                                              ; preds = %166
  %170 = load i32, i32* %120, align 4
  %171 = icmp eq i32 %170, 1
  br i1 %171, label %172, label %198

172:                                              ; preds = %169
  %173 = load %struct.opj_image*, %struct.opj_image** %125, align 8
  %174 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %173, i64 0, i32 0
  %175 = load i32, i32* %174, align 8
  %176 = load %struct.opj_image*, %struct.opj_image** %126, align 8
  %177 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %176, i64 0, i32 0
  %178 = load i32, i32* %177, align 8
  %179 = icmp eq i32 %175, %178
  br i1 %179, label %180, label %206

180:                                              ; preds = %172
  %181 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %173, i64 0, i32 1
  %182 = load i32, i32* %181, align 4
  %183 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %176, i64 0, i32 1
  %184 = load i32, i32* %183, align 4
  %185 = icmp eq i32 %182, %184
  br i1 %185, label %186, label %206

186:                                              ; preds = %180
  %187 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %173, i64 0, i32 2
  %188 = load i32, i32* %187, align 8
  %189 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %176, i64 0, i32 2
  %190 = load i32, i32* %189, align 8
  %191 = icmp eq i32 %188, %190
  br i1 %191, label %192, label %206

192:                                              ; preds = %186
  %193 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %173, i64 0, i32 3
  %194 = load i32, i32* %193, align 4
  %195 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %176, i64 0, i32 3
  %196 = load i32, i32* %195, align 4
  %197 = icmp eq i32 %194, %196
  br i1 %197, label %198, label %206

198:                                              ; preds = %192, %169, %166
  %199 = load %struct.opj_tcp*, %struct.opj_tcp** %121, align 8
  %200 = zext i32 %151 to i64
  %201 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %199, i64 %200, i32 18
  %202 = load i8*, i8** %201, align 8
  %203 = icmp eq i8* %202, null
  br i1 %203, label %206, label %204

204:                                              ; preds = %198
  tail call void @opj_free(i8* nonnull %202) #12
  store i8* null, i8** %201, align 8
  %205 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %199, i64 %200, i32 19
  store i32 0, i32* %205, align 8
  br label %206

206:                                              ; preds = %204, %198, %172, %180, %186, %192
  %207 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 4, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.273, i64 0, i64 0), i32 %154) #12
  %208 = tail call i64 @opj_stream_get_number_byte_left(%struct.opj_stream_private* %1) #12
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %210, label %213

210:                                              ; preds = %206
  %211 = load i32, i32* %123, align 8
  %212 = icmp eq i32 %211, 64
  br i1 %212, label %219, label %213

213:                                              ; preds = %210, %206
  %214 = add i32 %129, 1
  %215 = load i32, i32* %120, align 4
  %216 = load i32, i32* %18, align 8
  %217 = mul i32 %216, %215
  %218 = icmp eq i32 %214, %217
  br i1 %218, label %219, label %127

219:                                              ; preds = %145, %213, %210
  %220 = tail call fastcc i32 @opj_j2k_are_all_used_components_decoded(%struct.opj_j2k* %0, %struct.opj_event_mgr* %2)
  %221 = icmp ne i32 %220, 0
  %222 = zext i1 %221 to i32
  br label %223

223:                                              ; preds = %160, %142, %71, %62, %219, %69, %55, %158
  %224 = phi i32 [ 0, %158 ], [ 0, %69 ], [ 0, %55 ], [ %222, %219 ], [ 1, %62 ], [ 1, %71 ], [ 0, %142 ], [ 0, %160 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #12
  ret i32 %224
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @opj_j2k_update_image_data(%struct.opj_tcd* nocapture readonly, %struct.opj_image* nocapture readonly) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 6
  %4 = load %struct.opj_image*, %struct.opj_image** %3, align 8
  %5 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %4, i64 0, i32 4
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %272, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %1, i64 0, i32 6
  %10 = load %struct.opj_image_comp*, %struct.opj_image_comp** %9, align 8
  %11 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %4, i64 0, i32 6
  %12 = load %struct.opj_image_comp*, %struct.opj_image_comp** %11, align 8
  %13 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 5
  %14 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %13, align 8
  %15 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %14, i64 0, i32 0
  %16 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %15, align 8
  %17 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %16, i64 0, i32 5
  %18 = load %struct.opj_tcd_tilecomp*, %struct.opj_tcd_tilecomp** %17, align 8
  %19 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 16
  br label %20

20:                                               ; preds = %8, %265
  %21 = phi i32 [ 0, %8 ], [ %266, %265 ]
  %22 = phi %struct.opj_tcd_tilecomp* [ %18, %8 ], [ %269, %265 ]
  %23 = phi %struct.opj_image_comp* [ %10, %8 ], [ %267, %265 ]
  %24 = phi %struct.opj_image_comp* [ %12, %8 ], [ %268, %265 ]
  %25 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %24, i64 0, i32 9
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %23, i64 0, i32 9
  store i32 %26, i32* %27, align 4
  %28 = load i32, i32* %19, align 8
  %29 = icmp eq i32 %28, 0
  %30 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %22, i64 0, i32 7
  %31 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %30, align 8
  %32 = load i32, i32* %25, align 4
  %33 = zext i32 %32 to i64
  br i1 %29, label %51, label %34

34:                                               ; preds = %20
  %35 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %31, i64 %33, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %31, i64 %33, i32 1
  %38 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %31, i64 %33, i32 2
  %39 = load i32, i32* %38, align 8
  %40 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %31, i64 %33, i32 3
  %41 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %22, i64 0, i32 6
  %42 = load i32, i32* %41, align 8
  %43 = add i32 %42, -1
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %31, i64 %44, i32 2
  %46 = load i32, i32* %45, align 8
  %47 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %31, i64 %44, i32 0
  %48 = load i32, i32* %47, align 8
  %49 = sub nsw i32 %46, %48
  %50 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %22, i64 0, i32 9
  br label %60

51:                                               ; preds = %20
  %52 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %31, i64 %33, i32 8
  %53 = load i32, i32* %52, align 8
  %54 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %31, i64 %33, i32 9
  %55 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %31, i64 %33, i32 10
  %56 = load i32, i32* %55, align 8
  %57 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %31, i64 %33, i32 11
  %58 = sub i32 %56, %53
  %59 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %22, i64 0, i32 13
  br label %60

60:                                               ; preds = %51, %34
  %61 = phi i32 [ %36, %34 ], [ %53, %51 ]
  %62 = phi i32 [ %39, %34 ], [ %56, %51 ]
  %63 = phi i32* [ %37, %34 ], [ %54, %51 ]
  %64 = phi i32* [ %40, %34 ], [ %57, %51 ]
  %65 = phi i32 [ %49, %34 ], [ %58, %51 ]
  %66 = phi i32** [ %50, %34 ], [ %59, %51 ]
  %67 = load i32*, i32** %66, align 8
  %68 = load i32, i32* %64, align 4
  %69 = load i32, i32* %63, align 4
  %70 = icmp eq i32* %67, null
  br i1 %70, label %265, label %71

71:                                               ; preds = %60
  %72 = sub nsw i32 %62, %61
  %73 = sub nsw i32 %68, %69
  %74 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %23, i64 0, i32 4
  %75 = load i32, i32* %74, align 8
  %76 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %23, i64 0, i32 10
  %77 = load i32, i32* %76, align 8
  %78 = zext i32 %75 to i64
  %79 = zext i32 %77 to i64
  %80 = shl nsw i64 -1, %79
  %81 = xor i64 %80, -1
  %82 = add i64 %81, %78
  %83 = lshr i64 %82, %79
  %84 = trunc i64 %83 to i32
  %85 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %23, i64 0, i32 5
  %86 = load i32, i32* %85, align 4
  %87 = zext i32 %86 to i64
  %88 = add i64 %81, %87
  %89 = lshr i64 %88, %79
  %90 = trunc i64 %89 to i32
  %91 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %23, i64 0, i32 2
  %92 = load i32, i32* %91, align 8
  %93 = add i32 %92, %84
  %94 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %23, i64 0, i32 3
  %95 = load i32, i32* %94, align 4
  %96 = add i32 %95, %90
  %97 = or i32 %62, %61
  %98 = or i32 %97, %68
  %99 = or i32 %98, %69
  %100 = icmp slt i32 %99, 0
  br i1 %100, label %272, label %101

101:                                              ; preds = %71
  %102 = icmp ugt i32 %61, %84
  br i1 %102, label %103, label %109

103:                                              ; preds = %101
  %104 = sub i32 %61, %84
  %105 = icmp ugt i32 %62, %93
  br i1 %105, label %106, label %116

106:                                              ; preds = %103
  %107 = sub i32 %93, %61
  %108 = sub i32 %72, %107
  br label %116

109:                                              ; preds = %101
  %110 = sub nsw i32 %84, %61
  %111 = icmp ugt i32 %62, %93
  br i1 %111, label %114, label %112

112:                                              ; preds = %109
  %113 = sub i32 %72, %110
  br label %116

114:                                              ; preds = %109
  %115 = sub nsw i32 %62, %93
  br label %116

116:                                              ; preds = %103, %112, %114, %106
  %117 = phi i32 [ %107, %106 ], [ %113, %112 ], [ %92, %114 ], [ %72, %103 ]
  %118 = phi i32 [ 0, %106 ], [ %110, %112 ], [ %110, %114 ], [ 0, %103 ]
  %119 = phi i32 [ %108, %106 ], [ 0, %112 ], [ %115, %114 ], [ 0, %103 ]
  %120 = phi i32 [ %104, %106 ], [ 0, %112 ], [ 0, %114 ], [ %104, %103 ]
  %121 = icmp ugt i32 %69, %90
  br i1 %121, label %122, label %128

122:                                              ; preds = %116
  %123 = sub i32 %69, %90
  %124 = icmp ugt i32 %68, %96
  br i1 %124, label %125, label %135

125:                                              ; preds = %122
  %126 = sub i32 %96, %69
  %127 = sub i32 %73, %126
  br label %135

128:                                              ; preds = %116
  %129 = sub nsw i32 %90, %69
  %130 = icmp ugt i32 %68, %96
  br i1 %130, label %133, label %131

131:                                              ; preds = %128
  %132 = sub i32 %73, %129
  br label %135

133:                                              ; preds = %128
  %134 = sub nsw i32 %68, %96
  br label %135

135:                                              ; preds = %122, %131, %133, %125
  %136 = phi i32 [ %126, %125 ], [ %132, %131 ], [ %95, %133 ], [ %73, %122 ]
  %137 = phi i32 [ 0, %125 ], [ %129, %131 ], [ %129, %133 ], [ 0, %122 ]
  %138 = phi i32 [ %127, %125 ], [ 0, %131 ], [ %134, %133 ], [ 0, %122 ]
  %139 = phi i32 [ %123, %125 ], [ 0, %131 ], [ 0, %133 ], [ %123, %122 ]
  %140 = or i32 %118, %117
  %141 = or i32 %140, %119
  %142 = or i32 %141, %136
  %143 = or i32 %142, %137
  %144 = or i32 %143, %138
  %145 = icmp slt i32 %144, 0
  br i1 %145, label %272, label %146

146:                                              ; preds = %135
  %147 = sext i32 %118 to i64
  %148 = sext i32 %137 to i64
  %149 = zext i32 %65 to i64
  %150 = mul nsw i64 %148, %149
  %151 = add nsw i64 %150, %147
  %152 = zext i32 %120 to i64
  %153 = zext i32 %139 to i64
  %154 = zext i32 %92 to i64
  %155 = mul nuw i64 %153, %154
  %156 = add nuw i64 %155, %152
  %157 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %23, i64 0, i32 11
  %158 = load i32*, i32** %157, align 8
  %159 = icmp eq i32* %158, null
  %160 = or i64 %156, %151
  %161 = icmp eq i64 %160, 0
  %162 = and i1 %161, %159
  %163 = icmp eq i32 %65, %92
  %164 = and i1 %163, %162
  %165 = icmp eq i32 %117, %92
  %166 = and i1 %165, %164
  %167 = icmp eq i32 %136, %95
  %168 = and i1 %167, %166
  br i1 %168, label %169, label %180

169:                                              ; preds = %146
  br i1 %29, label %175, label %170

170:                                              ; preds = %169
  %171 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %22, i64 0, i32 9
  %172 = bitcast i32** %171 to i64*
  %173 = load i64, i64* %172, align 8
  %174 = bitcast i32** %157 to i64*
  store i64 %173, i64* %174, align 8
  store i32* null, i32** %171, align 8
  br label %265

175:                                              ; preds = %169
  %176 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %22, i64 0, i32 13
  %177 = bitcast i32** %176 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = bitcast i32** %157 to i64*
  store i64 %178, i64* %179, align 8
  store i32* null, i32** %176, align 8
  br label %265

180:                                              ; preds = %146
  br i1 %159, label %181, label %206

181:                                              ; preds = %180
  %182 = zext i32 %95 to i64
  %183 = icmp eq i32 %95, 0
  br i1 %183, label %272, label %184

184:                                              ; preds = %181
  %185 = udiv i64 -1, %182
  %186 = icmp ult i64 %185, %154
  br i1 %186, label %272, label %187

187:                                              ; preds = %184
  %188 = mul nuw i64 %182, %154
  %189 = icmp ugt i64 %188, 4611686018427387903
  br i1 %189, label %272, label %190

190:                                              ; preds = %187
  %191 = shl i64 %188, 2
  %192 = tail call i8* @opj_image_data_alloc(i64 %191) #12
  %193 = bitcast i32** %157 to i8**
  store i8* %192, i8** %193, align 8
  %194 = icmp eq i8* %192, null
  br i1 %194, label %272, label %195

195:                                              ; preds = %190
  %196 = load i32, i32* %91, align 8
  %197 = icmp eq i32 %196, %117
  %198 = load i32, i32* %94, align 4
  %199 = icmp eq i32 %198, %136
  %200 = and i1 %197, %199
  br i1 %200, label %206, label %201

201:                                              ; preds = %195
  %202 = zext i32 %196 to i64
  %203 = zext i32 %198 to i64
  %204 = shl nuw nsw i64 %202, 2
  %205 = mul i64 %204, %203
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %192, i8 0, i64 %205, i1 false)
  br label %206

206:                                              ; preds = %195, %201, %180
  %207 = icmp eq i32 %136, 0
  br i1 %207, label %265, label %208

208:                                              ; preds = %206
  %209 = getelementptr inbounds i32, i32* %67, i64 %151
  %210 = load i32*, i32** %157, align 8
  %211 = getelementptr inbounds i32, i32* %210, i64 %156
  %212 = zext i32 %117 to i64
  %213 = shl nuw nsw i64 %212, 2
  %214 = add i32 %136, -1
  %215 = and i32 %136, 3
  %216 = icmp ult i32 %214, 3
  br i1 %216, label %249, label %217

217:                                              ; preds = %208
  %218 = sub i32 %136, %215
  br label %219

219:                                              ; preds = %219, %217
  %220 = phi i32* [ %209, %217 ], [ %246, %219 ]
  %221 = phi i32* [ %211, %217 ], [ %245, %219 ]
  %222 = phi i32 [ %218, %217 ], [ %247, %219 ]
  %223 = bitcast i32* %221 to i8*
  %224 = bitcast i32* %220 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %223, i8* align 4 %224, i64 %213, i1 false)
  %225 = load i32, i32* %91, align 8
  %226 = zext i32 %225 to i64
  %227 = getelementptr inbounds i32, i32* %221, i64 %226
  %228 = getelementptr inbounds i32, i32* %220, i64 %149
  %229 = bitcast i32* %227 to i8*
  %230 = bitcast i32* %228 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %229, i8* align 4 %230, i64 %213, i1 false)
  %231 = load i32, i32* %91, align 8
  %232 = zext i32 %231 to i64
  %233 = getelementptr inbounds i32, i32* %227, i64 %232
  %234 = getelementptr inbounds i32, i32* %228, i64 %149
  %235 = bitcast i32* %233 to i8*
  %236 = bitcast i32* %234 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %235, i8* align 4 %236, i64 %213, i1 false)
  %237 = load i32, i32* %91, align 8
  %238 = zext i32 %237 to i64
  %239 = getelementptr inbounds i32, i32* %233, i64 %238
  %240 = getelementptr inbounds i32, i32* %234, i64 %149
  %241 = bitcast i32* %239 to i8*
  %242 = bitcast i32* %240 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %241, i8* align 4 %242, i64 %213, i1 false)
  %243 = load i32, i32* %91, align 8
  %244 = zext i32 %243 to i64
  %245 = getelementptr inbounds i32, i32* %239, i64 %244
  %246 = getelementptr inbounds i32, i32* %240, i64 %149
  %247 = add i32 %222, -4
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %249, label %219

249:                                              ; preds = %219, %208
  %250 = phi i32* [ %209, %208 ], [ %246, %219 ]
  %251 = phi i32* [ %211, %208 ], [ %245, %219 ]
  %252 = icmp eq i32 %215, 0
  br i1 %252, label %265, label %253

253:                                              ; preds = %249, %253
  %254 = phi i32* [ %262, %253 ], [ %250, %249 ]
  %255 = phi i32* [ %261, %253 ], [ %251, %249 ]
  %256 = phi i32 [ %263, %253 ], [ %215, %249 ]
  %257 = bitcast i32* %255 to i8*
  %258 = bitcast i32* %254 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %257, i8* align 4 %258, i64 %213, i1 false)
  %259 = load i32, i32* %91, align 8
  %260 = zext i32 %259 to i64
  %261 = getelementptr inbounds i32, i32* %255, i64 %260
  %262 = getelementptr inbounds i32, i32* %254, i64 %149
  %263 = add i32 %256, -1
  %264 = icmp eq i32 %263, 0
  br i1 %264, label %265, label %253, !llvm.loop !76

265:                                              ; preds = %249, %253, %206, %60, %175, %170
  %266 = add nuw i32 %21, 1
  %267 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %23, i64 1
  %268 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %24, i64 1
  %269 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %22, i64 1
  %270 = load i32, i32* %5, align 8
  %271 = icmp ult i32 %266, %270
  br i1 %271, label %20, label %272

272:                                              ; preds = %265, %135, %71, %187, %184, %181, %190, %2
  %273 = phi i32 [ 1, %2 ], [ 0, %190 ], [ 0, %181 ], [ 0, %184 ], [ 0, %187 ], [ 0, %71 ], [ 0, %135 ], [ 1, %265 ]
  ret i32 %273
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @opj_j2k_are_all_used_components_decoded(%struct.opj_j2k* nocapture readonly, %struct.opj_event_mgr*) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 12
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 13
  %8 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 3
  br label %15

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 3
  %11 = load %struct.opj_image*, %struct.opj_image** %10, align 8
  %12 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %11, i64 0, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %64, label %38

15:                                               ; preds = %6, %32
  %16 = phi i32 [ %4, %6 ], [ %33, %32 ]
  %17 = phi i64 [ 0, %6 ], [ %35, %32 ]
  %18 = phi i32 [ 1, %6 ], [ %34, %32 ]
  %19 = load i32*, i32** %7, align 8
  %20 = getelementptr inbounds i32, i32* %19, i64 %17
  %21 = load i32, i32* %20, align 4
  %22 = load %struct.opj_image*, %struct.opj_image** %8, align 8
  %23 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %22, i64 0, i32 6
  %24 = load %struct.opj_image_comp*, %struct.opj_image_comp** %23, align 8
  %25 = zext i32 %21 to i64
  %26 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %24, i64 %25, i32 11
  %27 = load i32*, i32** %26, align 8
  %28 = icmp eq i32* %27, null
  br i1 %28, label %29, label %32

29:                                               ; preds = %15
  %30 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %1, i32 2, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.274, i64 0, i64 0), i32 %21) #12
  %31 = load i32, i32* %3, align 4
  br label %32

32:                                               ; preds = %29, %15
  %33 = phi i32 [ %31, %29 ], [ %16, %15 ]
  %34 = phi i32 [ 0, %29 ], [ %18, %15 ]
  %35 = add nuw nsw i64 %17, 1
  %36 = zext i32 %33 to i64
  %37 = icmp ult i64 %35, %36
  br i1 %37, label %15, label %59

38:                                               ; preds = %9, %51
  %39 = phi %struct.opj_image* [ %52, %51 ], [ %11, %9 ]
  %40 = phi i64 [ %54, %51 ], [ 0, %9 ]
  %41 = phi i32 [ %53, %51 ], [ 1, %9 ]
  %42 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %39, i64 0, i32 6
  %43 = load %struct.opj_image_comp*, %struct.opj_image_comp** %42, align 8
  %44 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %43, i64 %40, i32 11
  %45 = load i32*, i32** %44, align 8
  %46 = icmp eq i32* %45, null
  br i1 %46, label %47, label %51

47:                                               ; preds = %38
  %48 = trunc i64 %40 to i32
  %49 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %1, i32 2, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.274, i64 0, i64 0), i32 %48) #12
  %50 = load %struct.opj_image*, %struct.opj_image** %10, align 8
  br label %51

51:                                               ; preds = %38, %47
  %52 = phi %struct.opj_image* [ %50, %47 ], [ %39, %38 ]
  %53 = phi i32 [ 0, %47 ], [ %41, %38 ]
  %54 = add nuw nsw i64 %40, 1
  %55 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %52, i64 0, i32 4
  %56 = load i32, i32* %55, align 8
  %57 = zext i32 %56 to i64
  %58 = icmp ult i64 %54, %57
  br i1 %58, label %38, label %59

59:                                               ; preds = %32, %51
  %60 = phi i32 [ %53, %51 ], [ %34, %32 ]
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %59
  %63 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %1, i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.275, i64 0, i64 0)) #12
  br label %64

64:                                               ; preds = %9, %59, %62
  %65 = phi i32 [ 0, %62 ], [ 1, %59 ], [ 1, %9 ]
  ret i32 %65
}

declare hidden i8* @opj_image_data_alloc(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_decode_one_tile(%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*) #3 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #12
  store i32 1, i32* %4, align 4
  %12 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #12
  store i32 -1431655766, i32* %5, align 4
  %13 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #12
  store i32 -1431655766, i32* %6, align 4
  %14 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #12
  store i32 -1431655766, i32* %7, align 4
  %15 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #12
  store i32 -1431655766, i32* %8, align 4
  %16 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #12
  store i32 -1431655766, i32* %9, align 4
  %17 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #12
  store i32 -1431655766, i32* %10, align 4
  %18 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 7
  %19 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %18, align 8
  %20 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %19, i64 0, i32 7
  %21 = load %struct.opj_tile_index*, %struct.opj_tile_index** %20, align 8
  %22 = icmp eq %struct.opj_tile_index* %21, null
  br i1 %22, label %26, label %23

23:                                               ; preds = %3
  %24 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 9
  %25 = load i32, i32* %24, align 8
  br label %36

26:                                               ; preds = %3
  %27 = tail call fastcc i32 @opj_j2k_allocate_tile_element_cstr_index(%struct.opj_j2k* %0)
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %167, label %29

29:                                               ; preds = %26
  %30 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %18, align 8
  %31 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %30, i64 0, i32 7
  %32 = load %struct.opj_tile_index*, %struct.opj_tile_index** %31, align 8
  %33 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 9
  %34 = load i32, i32* %33, align 8
  %35 = icmp eq %struct.opj_tile_index* %32, null
  br i1 %35, label %70, label %36

36:                                               ; preds = %23, %29
  %37 = phi i32 [ %25, %23 ], [ %34, %29 ]
  %38 = phi %struct.opj_tile_index* [ %21, %23 ], [ %32, %29 ]
  %39 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %38, i64 0, i32 4
  %40 = load %struct.opj_tp_index*, %struct.opj_tp_index** %39, align 8
  %41 = icmp eq %struct.opj_tp_index* %40, null
  br i1 %41, label %70, label %42

42:                                               ; preds = %36
  %43 = zext i32 %37 to i64
  %44 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %38, i64 %43, i32 1
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %55

47:                                               ; preds = %42
  %48 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 10
  %49 = load i64, i64* %48, align 8
  %50 = add nsw i64 %49, 2
  %51 = tail call i32 @opj_stream_read_seek(%struct.opj_stream_private* %1, i64 %50, %struct.opj_event_mgr* %2) #12
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %65

53:                                               ; preds = %47
  %54 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.276, i64 0, i64 0)) #12
  br label %167

55:                                               ; preds = %42
  %56 = getelementptr inbounds %struct.opj_tile_index, %struct.opj_tile_index* %38, i64 %43, i32 4
  %57 = load %struct.opj_tp_index*, %struct.opj_tp_index** %56, align 8
  %58 = getelementptr inbounds %struct.opj_tp_index, %struct.opj_tp_index* %57, i64 0, i32 0
  %59 = load i64, i64* %58, align 8
  %60 = add nsw i64 %59, 2
  %61 = tail call i32 @opj_stream_read_seek(%struct.opj_stream_private* %1, i64 %60, %struct.opj_event_mgr* %2) #12
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %55
  %64 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.276, i64 0, i64 0)) #12
  br label %167

65:                                               ; preds = %55, %47
  %66 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 0
  %67 = load i32, i32* %66, align 8
  %68 = icmp eq i32 %67, 256
  br i1 %68, label %69, label %70

69:                                               ; preds = %65
  store i32 8, i32* %66, align 8
  br label %70

70:                                               ; preds = %36, %29, %69, %65
  %71 = phi i32 [ %37, %36 ], [ %34, %29 ], [ %37, %69 ], [ %37, %65 ]
  %72 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 6
  %73 = load i32, i32* %72, align 8
  %74 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 7
  %75 = load i32, i32* %74, align 4
  %76 = mul i32 %75, %73
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %97, label %78

78:                                               ; preds = %70
  %79 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %80 = zext i32 %76 to i64
  %81 = add nsw i64 %80, -1
  %82 = and i64 %80, 3
  %83 = icmp ult i64 %81, 3
  br i1 %83, label %86, label %84

84:                                               ; preds = %78
  %85 = sub nsw i64 %80, %82
  br label %105

86:                                               ; preds = %105, %78
  %87 = phi i64 [ 0, %78 ], [ %119, %105 ]
  %88 = icmp eq i64 %82, 0
  br i1 %88, label %97, label %89

89:                                               ; preds = %86, %89
  %90 = phi i64 [ %94, %89 ], [ %87, %86 ]
  %91 = phi i64 [ %95, %89 ], [ %82, %86 ]
  %92 = load %struct.opj_tcp*, %struct.opj_tcp** %79, align 8
  %93 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %92, i64 %90, i32 16
  store i32 -1, i32* %93, align 8
  %94 = add nuw nsw i64 %90, 1
  %95 = add i64 %91, -1
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %97, label %89, !llvm.loop !77

97:                                               ; preds = %86, %89, %70
  %98 = call i32 @opj_j2k_read_tile_header(%struct.opj_j2k* %0, i32* nonnull %5, i32* null, i32* nonnull %6, i32* nonnull %7, i32* nonnull %8, i32* nonnull %9, i32* nonnull %10, i32* nonnull %4, %struct.opj_stream_private* %1, %struct.opj_event_mgr* %2)
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %167, label %100

100:                                              ; preds = %97
  %101 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 9
  %102 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 3
  %103 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %104 = add i32 %71, 1
  br label %122

105:                                              ; preds = %105, %84
  %106 = phi i64 [ 0, %84 ], [ %119, %105 ]
  %107 = phi i64 [ %85, %84 ], [ %120, %105 ]
  %108 = load %struct.opj_tcp*, %struct.opj_tcp** %79, align 8
  %109 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %108, i64 %106, i32 16
  store i32 -1, i32* %109, align 8
  %110 = or i64 %106, 1
  %111 = load %struct.opj_tcp*, %struct.opj_tcp** %79, align 8
  %112 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %111, i64 %110, i32 16
  store i32 -1, i32* %112, align 8
  %113 = or i64 %106, 2
  %114 = load %struct.opj_tcp*, %struct.opj_tcp** %79, align 8
  %115 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %114, i64 %113, i32 16
  store i32 -1, i32* %115, align 8
  %116 = or i64 %106, 3
  %117 = load %struct.opj_tcp*, %struct.opj_tcp** %79, align 8
  %118 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %117, i64 %116, i32 16
  store i32 -1, i32* %118, align 8
  %119 = add nuw nsw i64 %106, 4
  %120 = add i64 %107, -4
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %86, label %105

122:                                              ; preds = %100, %159
  %123 = load i32, i32* %4, align 4
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %163, label %125

125:                                              ; preds = %122
  %126 = load i32, i32* %5, align 4
  %127 = tail call i32 @opj_j2k_decode_tile(%struct.opj_j2k* %0, i32 %126, i8* null, i32 0, %struct.opj_stream_private* %1, %struct.opj_event_mgr* %2)
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %167, label %129

129:                                              ; preds = %125
  %130 = add i32 %126, 1
  %131 = load i32, i32* %74, align 4
  %132 = load i32, i32* %72, align 8
  %133 = mul i32 %132, %131
  %134 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 4, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.272, i64 0, i64 0), i32 %130, i32 %133) #12
  %135 = load %struct.opj_tcd*, %struct.opj_tcd** %101, align 8
  %136 = load %struct.opj_image*, %struct.opj_image** %102, align 8
  %137 = tail call fastcc i32 @opj_j2k_update_image_data(%struct.opj_tcd* %135, %struct.opj_image* %136)
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %167, label %139

139:                                              ; preds = %129
  %140 = load %struct.opj_tcp*, %struct.opj_tcp** %103, align 8
  %141 = zext i32 %126 to i64
  %142 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %140, i64 %141, i32 18
  %143 = load i8*, i8** %142, align 8
  %144 = icmp eq i8* %143, null
  br i1 %144, label %147, label %145

145:                                              ; preds = %139
  tail call void @opj_free(i8* nonnull %143) #12
  store i8* null, i8** %142, align 8
  %146 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %140, i64 %141, i32 19
  store i32 0, i32* %146, align 8
  br label %147

147:                                              ; preds = %139, %145
  %148 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 4, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.273, i64 0, i64 0), i32 %130) #12
  %149 = icmp eq i32 %126, %71
  br i1 %149, label %150, label %159

150:                                              ; preds = %147
  %151 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %18, align 8
  %152 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %151, i64 0, i32 1
  %153 = load i64, i64* %152, align 8
  %154 = add nsw i64 %153, 2
  %155 = tail call i32 @opj_stream_read_seek(%struct.opj_stream_private* %1, i64 %154, %struct.opj_event_mgr* %2) #12
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %163

157:                                              ; preds = %150
  %158 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.276, i64 0, i64 0)) #12
  br label %167

159:                                              ; preds = %147
  %160 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 2, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.277, i64 0, i64 0), i32 %130, i32 %104) #12
  %161 = call i32 @opj_j2k_read_tile_header(%struct.opj_j2k* %0, i32* nonnull %5, i32* null, i32* nonnull %6, i32* nonnull %7, i32* nonnull %8, i32* nonnull %9, i32* nonnull %10, i32* nonnull %4, %struct.opj_stream_private* %1, %struct.opj_event_mgr* %2)
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %167, label %122

163:                                              ; preds = %122, %150
  %164 = tail call fastcc i32 @opj_j2k_are_all_used_components_decoded(%struct.opj_j2k* %0, %struct.opj_event_mgr* %2)
  %165 = icmp ne i32 %164, 0
  %166 = zext i1 %165 to i32
  br label %167

167:                                              ; preds = %159, %125, %129, %97, %163, %26, %157, %63, %53
  %168 = phi i32 [ 0, %157 ], [ 0, %63 ], [ 0, %53 ], [ 0, %26 ], [ %166, %163 ], [ 0, %97 ], [ 0, %129 ], [ 0, %125 ], [ 0, %159 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #12
  ret i32 %168
}

declare i32 @opj_stream_read_seek(%struct.opj_stream_private*, i64, %struct.opj_event_mgr*) local_unnamed_addr #4

declare i32 @opj_tcd_init_encode_tile(%struct.opj_tcd*, i32, %struct.opj_event_mgr*) local_unnamed_addr #4

declare i64 @opj_stream_write_data(%struct.opj_stream_private*, i8*, i64, %struct.opj_event_mgr*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @opj_j2k_write_sot(%struct.opj_j2k* nocapture readonly, i8*, i32, i32* nocapture, %struct.opj_event_mgr*) unnamed_addr #3 {
  %6 = icmp ult i32 %2, 12
  br i1 %6, label %7, label %9

7:                                                ; preds = %5
  %8 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.280, i64 0, i64 0)) #12
  br label %26

9:                                                ; preds = %5
  tail call void @opj_write_bytes_LE(i8* %1, i32 65424, i32 2) #12
  %10 = getelementptr inbounds i8, i8* %1, i64 2
  tail call void @opj_write_bytes_LE(i8* %10, i32 10, i32 2) #12
  %11 = getelementptr inbounds i8, i8* %1, i64 4
  %12 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %13 = load i32, i32* %12, align 8
  tail call void @opj_write_bytes_LE(i8* %11, i32 %13, i32 2) #12
  %14 = getelementptr inbounds i8, i8* %1, i64 10
  %15 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1
  %16 = bitcast %union.anon* %15 to %struct.opj_j2k_enc*
  %17 = getelementptr inbounds %struct.opj_j2k_enc, %struct.opj_j2k_enc* %16, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  tail call void @opj_write_bytes_LE(i8* %14, i32 %18, i32 1) #12
  %19 = getelementptr inbounds i8, i8* %1, i64 11
  %20 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %21 = load %struct.opj_tcp*, %struct.opj_tcp** %20, align 8
  %22 = load i32, i32* %12, align 8
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %21, i64 %23, i32 17
  %25 = load i32, i32* %24, align 4
  tail call void @opj_write_bytes_LE(i8* %19, i32 %25, i32 1) #12
  store i32 12, i32* %3, align 4
  br label %26

26:                                               ; preds = %9, %7
  %27 = phi i32 [ 0, %7 ], [ 1, %9 ]
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @opj_j2k_write_poc_in_memory(%struct.opj_j2k* nocapture readonly, i8*, i32* nocapture) unnamed_addr #3 {
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %5 = load %struct.opj_tcp*, %struct.opj_tcp** %4, align 8
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %7 = load i32, i32* %6, align 8
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %8, i32 15
  %10 = load %struct.opj_tccp*, %struct.opj_tccp** %9, align 8
  %11 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %12 = load %struct.opj_image*, %struct.opj_image** %11, align 8
  %13 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %12, i64 0, i32 4
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %8, i32 6
  %16 = load i32, i32* %15, align 4
  %17 = add i32 %16, 1
  %18 = icmp ult i32 %14, 257
  %19 = select i1 %18, i32 1, i32 2
  %20 = shl nuw nsw i32 %19, 1
  %21 = add nuw nsw i32 %20, 5
  %22 = mul i32 %21, %17
  %23 = add i32 %22, 4
  tail call void @opj_write_bytes_LE(i8* %1, i32 65375, i32 2) #12
  %24 = getelementptr inbounds i8, i8* %1, i64 2
  %25 = add i32 %22, 2
  tail call void @opj_write_bytes_LE(i8* %24, i32 %25, i32 2) #12
  %26 = icmp eq i32 %17, 0
  br i1 %26, label %69, label %27

27:                                               ; preds = %3
  %28 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %8, i32 7, i64 0
  %29 = getelementptr inbounds i8, i8* %1, i64 4
  %30 = zext i32 %19 to i64
  %31 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %8, i32 2
  %32 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %10, i64 0, i32 1
  br label %33

33:                                               ; preds = %33, %27
  %34 = phi %struct.opj_poc* [ %28, %27 ], [ %66, %33 ]
  %35 = phi i32 [ 0, %27 ], [ %67, %33 ]
  %36 = phi i8* [ %29, %27 ], [ %54, %33 ]
  %37 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %34, i64 0, i32 0
  %38 = load i32, i32* %37, align 4
  tail call void @opj_write_bytes_LE(i8* %36, i32 %38, i32 1) #12
  %39 = getelementptr inbounds i8, i8* %36, i64 1
  %40 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %34, i64 0, i32 1
  %41 = load i32, i32* %40, align 4
  tail call void @opj_write_bytes_LE(i8* %39, i32 %41, i32 %19) #12
  %42 = getelementptr inbounds i8, i8* %39, i64 %30
  %43 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %34, i64 0, i32 2
  %44 = load i32, i32* %43, align 4
  tail call void @opj_write_bytes_LE(i8* %42, i32 %44, i32 2) #12
  %45 = getelementptr inbounds i8, i8* %42, i64 2
  %46 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %34, i64 0, i32 3
  %47 = load i32, i32* %46, align 4
  tail call void @opj_write_bytes_LE(i8* %45, i32 %47, i32 1) #12
  %48 = getelementptr inbounds i8, i8* %45, i64 1
  %49 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %34, i64 0, i32 4
  %50 = load i32, i32* %49, align 4
  tail call void @opj_write_bytes_LE(i8* %48, i32 %50, i32 %19) #12
  %51 = getelementptr inbounds i8, i8* %48, i64 %30
  %52 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %34, i64 0, i32 9
  %53 = load i32, i32* %52, align 4
  tail call void @opj_write_bytes_LE(i8* %51, i32 %53, i32 1) #12
  %54 = getelementptr inbounds i8, i8* %51, i64 1
  %55 = load i32, i32* %43, align 4
  %56 = load i32, i32* %31, align 8
  %57 = icmp slt i32 %55, %56
  %58 = select i1 %57, i32 %55, i32 %56
  store i32 %58, i32* %43, align 4
  %59 = load i32, i32* %46, align 4
  %60 = load i32, i32* %32, align 4
  %61 = icmp slt i32 %59, %60
  %62 = select i1 %61, i32 %59, i32 %60
  store i32 %62, i32* %46, align 4
  %63 = load i32, i32* %49, align 4
  %64 = icmp slt i32 %63, %14
  %65 = select i1 %64, i32 %63, i32 %14
  store i32 %65, i32* %49, align 4
  %66 = getelementptr inbounds %struct.opj_poc, %struct.opj_poc* %34, i64 1
  %67 = add nuw i32 %35, 1
  %68 = icmp eq i32 %67, %17
  br i1 %68, label %69, label %33

69:                                               ; preds = %33, %3
  store i32 %23, i32* %2, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @opj_j2k_write_sod(%struct.opj_j2k* nocapture readonly, %struct.opj_tcd*, i8*, i32*, i32, %struct.opj_event_mgr*) unnamed_addr #3 {
  %7 = alloca [5 x i8], align 1
  %8 = icmp ult i32 %4, 4
  br i1 %8, label %9, label %11

9:                                                ; preds = %6
  %10 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %5, i32 1, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.281, i64 0, i64 0)) #12
  br label %161

11:                                               ; preds = %6
  tail call void @opj_write_bytes_LE(i8* %2, i32 65427, i32 2) #12
  %12 = add i32 %4, -4
  %13 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1
  %14 = bitcast %union.anon* %13 to %struct.opj_j2k_enc*
  %15 = getelementptr inbounds %union.anon, %union.anon* %13, i64 0, i32 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %1, i64 0, i32 1
  store i32 %16, i32* %17, align 4
  %18 = getelementptr inbounds %struct.opj_j2k_enc, %struct.opj_j2k_enc* %14, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %1, i64 0, i32 2
  store i32 %19, i32* %20, align 8
  %21 = load i32, i32* %18, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %29

23:                                               ; preds = %11
  %24 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %1, i64 0, i32 5
  %25 = load %struct.opj_tcd_image*, %struct.opj_tcd_image** %24, align 8
  %26 = getelementptr inbounds %struct.opj_tcd_image, %struct.opj_tcd_image* %25, i64 0, i32 0
  %27 = load %struct.opj_tcd_tile*, %struct.opj_tcd_tile** %26, align 8
  %28 = getelementptr inbounds %struct.opj_tcd_tile, %struct.opj_tcd_tile* %27, i64 0, i32 9
  store i32 0, i32* %28, align 8
  br label %29

29:                                               ; preds = %23, %11
  store i32 0, i32* %3, align 4
  %30 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 12
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %38, label %33

33:                                               ; preds = %29
  %34 = tail call %struct.opj_tcd_marker_info* @opj_tcd_marker_info_create(i32 %31) #12
  %35 = icmp eq %struct.opj_tcd_marker_info* %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %33
  %37 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %5, i32 1, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.282, i64 0, i64 0)) #12
  br label %161

38:                                               ; preds = %29, %33
  %39 = phi %struct.opj_tcd_marker_info* [ %34, %33 ], [ null, %29 ]
  %40 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 13
  %41 = bitcast i32** %40 to i32*
  %42 = load i32, i32* %41, align 8
  %43 = icmp ult i32 %12, %42
  br i1 %43, label %44, label %46

44:                                               ; preds = %38
  %45 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %5, i32 1, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.281, i64 0, i64 0)) #12
  tail call void @opj_tcd_marker_info_destroy(%struct.opj_tcd_marker_info* %39) #12
  br label %161

46:                                               ; preds = %38
  %47 = sub i32 %12, %42
  %48 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %49 = load i32, i32* %48, align 8
  %50 = getelementptr inbounds i8, i8* %2, i64 2
  %51 = tail call i32 @opj_tcd_encode_tile(%struct.opj_tcd* %1, i32 %49, i8* %50, i32* %3, i32 %47, %struct.opj_codestream_info* null, %struct.opj_tcd_marker_info* %39, %struct.opj_event_mgr* %5) #12
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %55

53:                                               ; preds = %46
  %54 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %5, i32 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.283, i64 0, i64 0)) #12
  tail call void @opj_tcd_marker_info_destroy(%struct.opj_tcd_marker_info* %39) #12
  br label %161

55:                                               ; preds = %46
  %56 = load i32, i32* %3, align 4
  %57 = add i32 %56, 2
  store i32 %57, i32* %3, align 4
  %58 = load i32, i32* %30, align 4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %160, label %60

60:                                               ; preds = %55
  %61 = load i32, i32* %41, align 8
  %62 = zext i32 %61 to i64
  %63 = tail call i8* @opj_malloc(i64 %62) #12
  %64 = icmp eq i8* %63, null
  br i1 %64, label %65, label %67

65:                                               ; preds = %60
  %66 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %5, i32 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.284, i64 0, i64 0)) #12
  tail call void @opj_tcd_marker_info_destroy(%struct.opj_tcd_marker_info* %39) #12
  br label %161

67:                                               ; preds = %60
  %68 = getelementptr inbounds i8, i8* %63, i64 2
  tail call void @opj_write_bytes_LE(i8* nonnull %63, i32 65368, i32 2) #12
  %69 = getelementptr inbounds i8, i8* %63, i64 4
  tail call void @opj_write_bytes_LE(i8* %69, i32 0, i32 1) #12
  %70 = getelementptr inbounds i8, i8* %63, i64 5
  %71 = getelementptr inbounds %struct.opj_tcd_marker_info, %struct.opj_tcd_marker_info* %39, i64 0, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %146, label %74

74:                                               ; preds = %67
  %75 = getelementptr inbounds [5 x i8], [5 x i8]* %7, i64 0, i64 0
  %76 = getelementptr inbounds %struct.opj_tcd_marker_info, %struct.opj_tcd_marker_info* %39, i64 0, i32 2
  %77 = getelementptr inbounds [5 x i8], [5 x i8]* %7, i64 0, i64 1
  %78 = bitcast i8* %77 to i32*
  br label %79

79:                                               ; preds = %136, %74
  %80 = phi i64 [ 0, %74 ], [ %138, %136 ]
  %81 = phi i8* [ %68, %74 ], [ %121, %136 ]
  %82 = phi i16 [ 3, %74 ], [ %123, %136 ]
  %83 = phi i8 [ 0, %74 ], [ %119, %136 ]
  %84 = phi i8* [ %70, %74 ], [ %137, %136 ]
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %75) #12
  store i32 -1431655766, i32* %78, align 1
  %85 = load i32*, i32** %76, align 8
  %86 = getelementptr inbounds i32, i32* %85, i64 %80
  %87 = load i32, i32* %86, align 4
  %88 = trunc i32 %87 to i8
  %89 = and i8 %88, 127
  store i8 %89, i8* %75, align 1
  %90 = lshr i32 %87, 7
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %103, label %92

92:                                               ; preds = %79, %92
  %93 = phi i64 [ %98, %92 ], [ 1, %79 ]
  %94 = phi i32 [ %99, %92 ], [ %90, %79 ]
  %95 = trunc i32 %94 to i8
  %96 = or i8 %95, -128
  %97 = getelementptr inbounds [5 x i8], [5 x i8]* %7, i64 0, i64 %93
  store i8 %96, i8* %97, align 1
  %98 = add nuw nsw i64 %93, 1
  %99 = lshr i32 %94, 7
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %92

101:                                              ; preds = %92
  %102 = trunc i64 %98 to i8
  br label %103

103:                                              ; preds = %101, %79
  %104 = phi i8 [ 1, %79 ], [ %102, %101 ]
  %105 = zext i16 %82 to i32
  %106 = zext i8 %104 to i32
  %107 = add nuw nsw i32 %106, %105
  %108 = icmp ugt i32 %107, 65535
  br i1 %108, label %109, label %117

109:                                              ; preds = %103
  %110 = icmp eq i8 %83, -1
  br i1 %110, label %144, label %111

111:                                              ; preds = %109
  tail call void @opj_write_bytes_LE(i8* %81, i32 %105, i32 2) #12
  tail call void @opj_write_bytes_LE(i8* %84, i32 65368, i32 2) #12
  %112 = getelementptr inbounds i8, i8* %84, i64 2
  %113 = getelementptr inbounds i8, i8* %84, i64 4
  %114 = add nuw i8 %83, 1
  %115 = zext i8 %114 to i32
  tail call void @opj_write_bytes_LE(i8* %113, i32 %115, i32 1) #12
  %116 = getelementptr inbounds i8, i8* %84, i64 5
  br label %117

117:                                              ; preds = %111, %103
  %118 = phi i8* [ %116, %111 ], [ %84, %103 ]
  %119 = phi i8 [ %114, %111 ], [ %83, %103 ]
  %120 = phi i16 [ 3, %111 ], [ %82, %103 ]
  %121 = phi i8* [ %112, %111 ], [ %81, %103 ]
  %122 = zext i8 %104 to i16
  %123 = add i16 %120, %122
  %124 = icmp eq i8 %104, 0
  br i1 %124, label %136, label %125

125:                                              ; preds = %117
  %126 = zext i8 %104 to i64
  br label %127

127:                                              ; preds = %127, %125
  %128 = phi i64 [ %126, %125 ], [ %130, %127 ]
  %129 = phi i8* [ %118, %125 ], [ %134, %127 ]
  %130 = add nsw i64 %128, -1
  %131 = getelementptr inbounds [5 x i8], [5 x i8]* %7, i64 0, i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  tail call void @opj_write_bytes_LE(i8* %129, i32 %133, i32 1) #12
  %134 = getelementptr inbounds i8, i8* %129, i64 1
  %135 = icmp eq i64 %128, 1
  br i1 %135, label %136, label %127

136:                                              ; preds = %127, %117
  %137 = phi i8* [ %118, %117 ], [ %134, %127 ]
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %75) #12
  %138 = add nuw nsw i64 %80, 1
  %139 = load i32, i32* %71, align 4
  %140 = zext i32 %139 to i64
  %141 = icmp ult i64 %138, %140
  br i1 %141, label %79, label %142

142:                                              ; preds = %136
  %143 = zext i16 %123 to i32
  br label %146

144:                                              ; preds = %109
  %145 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %5, i32 1, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.285, i64 0, i64 0)) #12
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %75) #12
  tail call void @opj_tcd_marker_info_destroy(%struct.opj_tcd_marker_info* %39) #12
  tail call void @opj_free(i8* nonnull %63) #12
  br label %161

146:                                              ; preds = %142, %67
  %147 = phi i8* [ %70, %67 ], [ %137, %142 ]
  %148 = phi i32 [ 3, %67 ], [ %143, %142 ]
  %149 = phi i8* [ %68, %67 ], [ %121, %142 ]
  %150 = ptrtoint i8* %147 to i64
  %151 = ptrtoint i8* %63 to i64
  %152 = sub i64 %150, %151
  %153 = trunc i64 %152 to i32
  tail call void @opj_write_bytes_LE(i8* %149, i32 %148, i32 2) #12
  %154 = and i64 %152, 4294967295
  %155 = getelementptr inbounds i8, i8* %2, i64 %154
  %156 = load i32, i32* %3, align 4
  %157 = zext i32 %156 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %155, i8* align 1 %2, i64 %157, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* nonnull align 1 %63, i64 %154, i1 false)
  tail call void @opj_free(i8* nonnull %63) #12
  %158 = load i32, i32* %3, align 4
  %159 = add i32 %158, %153
  store i32 %159, i32* %3, align 4
  br label %160

160:                                              ; preds = %146, %55
  tail call void @opj_tcd_marker_info_destroy(%struct.opj_tcd_marker_info* %39) #12
  br label %161

161:                                              ; preds = %65, %144, %160, %53, %44, %36, %9
  %162 = phi i32 [ 0, %9 ], [ 0, %36 ], [ 0, %44 ], [ 1, %160 ], [ 0, %53 ], [ 0, %144 ], [ 0, %65 ]
  ret i32 %162
}

declare %struct.opj_tcd_marker_info* @opj_tcd_marker_info_create(i32) local_unnamed_addr #4

declare void @opj_tcd_marker_info_destroy(%struct.opj_tcd_marker_info*) local_unnamed_addr #4

declare i32 @opj_tcd_encode_tile(%struct.opj_tcd*, i32, i8*, i32*, i32, %struct.opj_codestream_info*, %struct.opj_tcd_marker_info*, %struct.opj_event_mgr*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc i32 @opj_j2k_get_num_tp(%struct.opj_cp* nocapture, i32, i32) unnamed_addr #2 {
  %4 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %0, i64 0, i32 19
  %5 = load %struct.opj_tcp*, %struct.opj_tcp** %4, align 8
  %6 = zext i32 %2 to i64
  %7 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 1
  %8 = load i32, i32* %7, align 4
  switch i32 %8, label %88 [
    i32 4, label %13
    i32 0, label %9
    i32 3, label %10
    i32 1, label %11
    i32 2, label %12
  ]

9:                                                ; preds = %3
  br label %13

10:                                               ; preds = %3
  br label %13

11:                                               ; preds = %3
  br label %13

12:                                               ; preds = %3
  br label %13

13:                                               ; preds = %3, %12, %11, %10, %9, %88
  %14 = phi %struct.j2k_prog_order* [ getelementptr inbounds ([6 x %struct.j2k_prog_order], [6 x %struct.j2k_prog_order]* @j2k_prog_order_list, i64 0, i64 0), %3 ], [ getelementptr inbounds ([6 x %struct.j2k_prog_order], [6 x %struct.j2k_prog_order]* @j2k_prog_order_list, i64 0, i64 5), %88 ], [ getelementptr inbounds ([6 x %struct.j2k_prog_order], [6 x %struct.j2k_prog_order]* @j2k_prog_order_list, i64 0, i64 1), %9 ], [ getelementptr inbounds ([6 x %struct.j2k_prog_order], [6 x %struct.j2k_prog_order]* @j2k_prog_order_list, i64 0, i64 2), %10 ], [ getelementptr inbounds ([6 x %struct.j2k_prog_order], [6 x %struct.j2k_prog_order]* @j2k_prog_order_list, i64 0, i64 3), %11 ], [ getelementptr inbounds ([6 x %struct.j2k_prog_order], [6 x %struct.j2k_prog_order]* @j2k_prog_order_list, i64 0, i64 4), %12 ]
  %15 = zext i32 %1 to i64
  %16 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %0, i64 0, i32 20, i32 0, i32 4
  %17 = load i8, i8* %16, align 1
  %18 = and i8 %17, 8
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %48, label %20

20:                                               ; preds = %13
  %21 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 7, i64 %15, i32 20
  %22 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 7, i64 %15, i32 23
  %23 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 7, i64 %15, i32 21
  %24 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %5, i64 %6, i32 7, i64 %15, i32 22
  %25 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %0, i64 0, i32 20, i32 0, i32 3
  %26 = load i8, i8* %25, align 8
  %27 = zext i8 %26 to i32
  %28 = getelementptr inbounds %struct.j2k_prog_order, %struct.j2k_prog_order* %14, i64 0, i32 1, i64 0
  %29 = load i8, i8* %28, align 1
  %30 = sext i8 %29 to i32
  switch i32 %30, label %37 [
    i32 67, label %34
    i32 82, label %31
    i32 80, label %32
    i32 76, label %33
  ]

31:                                               ; preds = %20
  br label %34

32:                                               ; preds = %20
  br label %34

33:                                               ; preds = %20
  br label %34

34:                                               ; preds = %20, %31, %32, %33
  %35 = phi i32* [ %21, %33 ], [ %22, %32 ], [ %23, %31 ], [ %24, %20 ]
  %36 = load i32, i32* %35, align 4
  br label %37

37:                                               ; preds = %34, %20
  %38 = phi i32 [ 1, %20 ], [ %36, %34 ]
  %39 = icmp eq i32 %27, %30
  br i1 %39, label %40, label %44

40:                                               ; preds = %85, %71, %57, %37
  %41 = phi i32 [ %38, %37 ], [ %58, %57 ], [ %72, %71 ], [ %86, %85 ]
  %42 = phi i32 [ 0, %37 ], [ 1, %57 ], [ 2, %71 ], [ 3, %85 ]
  %43 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %0, i64 0, i32 20, i32 0, i32 1
  store i32 %42, i32* %43, align 4
  br label %48

44:                                               ; preds = %37
  %45 = getelementptr inbounds %struct.j2k_prog_order, %struct.j2k_prog_order* %14, i64 0, i32 1, i64 1
  %46 = load i8, i8* %45, align 1
  %47 = sext i8 %46 to i32
  switch i32 %47, label %57 [
    i32 67, label %52
    i32 82, label %51
    i32 80, label %50
    i32 76, label %53
  ]

48:                                               ; preds = %85, %13, %40
  %49 = phi i32 [ %41, %40 ], [ 1, %13 ], [ %86, %85 ]
  ret i32 %49

50:                                               ; preds = %44
  br label %53

51:                                               ; preds = %44
  br label %53

52:                                               ; preds = %44
  br label %53

53:                                               ; preds = %44, %50, %51, %52
  %54 = phi i32* [ %24, %52 ], [ %23, %51 ], [ %22, %50 ], [ %21, %44 ]
  %55 = load i32, i32* %54, align 4
  %56 = mul i32 %55, %38
  br label %57

57:                                               ; preds = %53, %44
  %58 = phi i32 [ %38, %44 ], [ %56, %53 ]
  %59 = icmp eq i32 %27, %47
  br i1 %59, label %40, label %60

60:                                               ; preds = %57
  %61 = getelementptr inbounds %struct.j2k_prog_order, %struct.j2k_prog_order* %14, i64 0, i32 1, i64 2
  %62 = load i8, i8* %61, align 1
  %63 = sext i8 %62 to i32
  switch i32 %63, label %71 [
    i32 67, label %66
    i32 82, label %65
    i32 80, label %64
    i32 76, label %67
  ]

64:                                               ; preds = %60
  br label %67

65:                                               ; preds = %60
  br label %67

66:                                               ; preds = %60
  br label %67

67:                                               ; preds = %60, %64, %65, %66
  %68 = phi i32* [ %24, %66 ], [ %23, %65 ], [ %22, %64 ], [ %21, %60 ]
  %69 = load i32, i32* %68, align 4
  %70 = mul i32 %69, %58
  br label %71

71:                                               ; preds = %67, %60
  %72 = phi i32 [ %58, %60 ], [ %70, %67 ]
  %73 = icmp eq i32 %27, %63
  br i1 %73, label %40, label %74

74:                                               ; preds = %71
  %75 = getelementptr inbounds %struct.j2k_prog_order, %struct.j2k_prog_order* %14, i64 0, i32 1, i64 3
  %76 = load i8, i8* %75, align 1
  %77 = sext i8 %76 to i32
  switch i32 %77, label %85 [
    i32 67, label %80
    i32 82, label %79
    i32 80, label %78
    i32 76, label %81
  ]

78:                                               ; preds = %74
  br label %81

79:                                               ; preds = %74
  br label %81

80:                                               ; preds = %74
  br label %81

81:                                               ; preds = %74, %78, %79, %80
  %82 = phi i32* [ %24, %80 ], [ %23, %79 ], [ %22, %78 ], [ %21, %74 ]
  %83 = load i32, i32* %82, align 4
  %84 = mul i32 %83, %72
  br label %85

85:                                               ; preds = %81, %74
  %86 = phi i32 [ %72, %74 ], [ %84, %81 ]
  %87 = icmp eq i32 %27, %77
  br i1 %87, label %40, label %48

88:                                               ; preds = %3
  br label %13
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_write_eoc(%struct.opj_j2k* nocapture readonly, %struct.opj_stream_private*, %struct.opj_event_mgr*) #3 {
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 10
  %5 = bitcast i64* %4 to i8**
  %6 = load i8*, i8** %5, align 8
  tail call void @opj_write_bytes_LE(i8* %6, i32 65497, i32 2) #12
  %7 = load i8*, i8** %5, align 8
  %8 = tail call i64 @opj_stream_write_data(%struct.opj_stream_private* %1, i8* %7, i64 2, %struct.opj_event_mgr* %2) #12
  %9 = icmp eq i64 %8, 2
  br i1 %9, label %10, label %14

10:                                               ; preds = %3
  %11 = tail call i32 @opj_stream_flush(%struct.opj_stream_private* %1, %struct.opj_event_mgr* %2) #12
  %12 = icmp ne i32 %11, 0
  %13 = zext i1 %12 to i32
  br label %14

14:                                               ; preds = %10, %3
  %15 = phi i32 [ 0, %3 ], [ %13, %10 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_write_updated_tlm(%struct.opj_j2k* nocapture readonly, %struct.opj_stream_private*, %struct.opj_event_mgr*) #3 {
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 5
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 1
  %7 = bitcast %struct.opj_tcp** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = add nsw i64 %8, 6
  %10 = tail call i64 @opj_stream_tell(%struct.opj_stream_private* %1) #12
  %11 = tail call i32 @opj_stream_seek(%struct.opj_stream_private* %1, i64 %9, %struct.opj_event_mgr* %2) #12
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %24, label %13

13:                                               ; preds = %3
  %14 = mul i32 %5, 5
  %15 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 2
  %16 = load i8*, i8** %15, align 8
  %17 = zext i32 %14 to i64
  %18 = tail call i64 @opj_stream_write_data(%struct.opj_stream_private* %1, i8* %16, i64 %17, %struct.opj_event_mgr* %2) #12
  %19 = icmp eq i64 %18, %17
  br i1 %19, label %20, label %24

20:                                               ; preds = %13
  %21 = tail call i32 @opj_stream_seek(%struct.opj_stream_private* %1, i64 %10, %struct.opj_event_mgr* %2) #12
  %22 = icmp ne i32 %21, 0
  %23 = zext i1 %22 to i32
  br label %24

24:                                               ; preds = %20, %13, %3
  %25 = phi i32 [ 0, %3 ], [ 0, %13 ], [ %23, %20 ]
  ret i32 %25
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_write_epc(%struct.opj_j2k* nocapture readonly, %struct.opj_stream_private*, %struct.opj_event_mgr* nocapture readnone) #3 {
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 7
  %5 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %4, align 8
  %6 = icmp eq %struct.opj_codestream_index* %5, null
  br i1 %6, label %13, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @opj_stream_tell(%struct.opj_stream_private* %1) #12
  %9 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %5, i64 0, i32 2
  %10 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %5, i64 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %8, %11
  store i64 %12, i64* %9, align 8
  br label %13

13:                                               ; preds = %3, %7
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_end_encoding(%struct.opj_j2k* nocapture, %struct.opj_stream_private* nocapture readnone, %struct.opj_event_mgr* nocapture readnone) #3 {
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 9
  %5 = load %struct.opj_tcd*, %struct.opj_tcd** %4, align 8
  tail call void @opj_tcd_destroy(%struct.opj_tcd* %5) #12
  store %struct.opj_tcd* null, %struct.opj_tcd** %4, align 8
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 2
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %3
  tail call void @opj_free(i8* nonnull %7) #12
  %10 = bitcast i8** %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false)
  br label %11

11:                                               ; preds = %3, %9
  %12 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 7
  %13 = bitcast i32* %12 to i8**
  %14 = load i8*, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %17, label %16

16:                                               ; preds = %11
  tail call void @opj_free(i8* nonnull %14) #12
  store i8* null, i8** %13, align 8
  br label %17

17:                                               ; preds = %11, %16
  %18 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 9
  store i32 0, i32* %18, align 8
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_destroy_header_memory(%struct.opj_j2k* nocapture, %struct.opj_stream_private* nocapture readnone, %struct.opj_event_mgr* nocapture readnone) #3 {
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 10
  %5 = bitcast i64* %4 to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  br i1 %7, label %9, label %8

8:                                                ; preds = %3
  tail call void @opj_free(i8* nonnull %6) #12
  store i8* null, i8** %5, align 8
  br label %9

9:                                                ; preds = %3, %8
  %10 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 11
  store i32 0, i32* %10, align 8
  ret i32 1
}

declare i32 @opj_stream_flush(%struct.opj_stream_private*, %struct.opj_event_mgr*) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @opj_j2k_build_encoder(%struct.opj_j2k* nocapture readnone, %struct.opj_stream_private* nocapture readnone, %struct.opj_event_mgr* nocapture readnone) #7 {
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_encoding_validation(%struct.opj_j2k* nocapture readonly, %struct.opj_stream_private* nocapture readnone, %struct.opj_event_mgr*) #3 {
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  %7 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 5
  %8 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %7, align 8
  %9 = icmp ne %struct.opj_procedure_list* %8, null
  %10 = and i1 %6, %9
  %11 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 6
  %12 = load %struct.opj_procedure_list*, %struct.opj_procedure_list** %11, align 8
  %13 = icmp ne %struct.opj_procedure_list* %12, null
  %14 = and i1 %10, %13
  %15 = zext i1 %14 to i32
  %16 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %17 = load %struct.opj_tcp*, %struct.opj_tcp** %16, align 8
  %18 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %17, i64 0, i32 15
  %19 = load %struct.opj_tccp*, %struct.opj_tccp** %18, align 8
  %20 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %19, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = add i32 %21, -1
  %23 = icmp ugt i32 %22, 31
  br i1 %23, label %33, label %24

24:                                               ; preds = %3
  %25 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 3
  %26 = load i32, i32* %25, align 4
  %27 = shl i32 1, %22
  %28 = icmp ult i32 %26, %27
  br i1 %28, label %33, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 4
  %31 = load i32, i32* %30, align 8
  %32 = icmp ult i32 %31, %27
  br i1 %32, label %33, label %35

33:                                               ; preds = %29, %24, %3
  %34 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.286, i64 0, i64 0)) #12
  br label %35

35:                                               ; preds = %33, %29
  %36 = phi i32 [ %15, %29 ], [ 0, %33 ]
  ret i32 %36
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @opj_j2k_mct_validation(%struct.opj_j2k* nocapture readonly, %struct.opj_stream_private* nocapture readnone, %struct.opj_event_mgr* nocapture readnone) #0 {
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 0
  %5 = load i16, i16* %4, align 8
  %6 = and i16 %5, -32256
  %7 = icmp eq i16 %6, -32256
  br i1 %7, label %8, label %120

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 7
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 6
  %12 = load i32, i32* %11, align 8
  %13 = mul i32 %12, %10
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %120, label %15

15:                                               ; preds = %8
  %16 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %17 = load %struct.opj_tcp*, %struct.opj_tcp** %16, align 8
  %18 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  br label %19

19:                                               ; preds = %115, %15
  %20 = phi %struct.opj_tcp* [ %17, %15 ], [ %117, %115 ]
  %21 = phi i32 [ 0, %15 ], [ %118, %115 ]
  %22 = phi i32 [ 1, %15 ], [ %116, %115 ]
  %23 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %20, i64 0, i32 4
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 2
  br i1 %25, label %26, label %115

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %20, i64 0, i32 22
  %28 = load float*, float** %27, align 8
  %29 = icmp ne float* %28, null
  %30 = zext i1 %29 to i32
  %31 = and i32 %22, %30
  %32 = load %struct.opj_image*, %struct.opj_image** %18, align 8
  %33 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %32, i64 0, i32 4
  %34 = load i32, i32* %33, align 8
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %115, label %36

36:                                               ; preds = %26
  %37 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %20, i64 0, i32 15
  %38 = load %struct.opj_tccp*, %struct.opj_tccp** %37, align 8
  %39 = add i32 %34, -1
  %40 = zext i32 %39 to i64
  %41 = add nuw nsw i64 %40, 1
  %42 = icmp ult i64 %41, 8
  br i1 %42, label %99, label %43

43:                                               ; preds = %36
  %44 = and i64 %41, 8589934584
  %45 = getelementptr %struct.opj_tccp, %struct.opj_tccp* %38, i64 %44
  %46 = trunc i64 %44 to i32
  %47 = insertelement <4 x i32> <i32 undef, i32 -1, i32 -1, i32 -1>, i32 %31, i32 0
  br label %48

48:                                               ; preds = %48, %43
  %49 = phi i64 [ 0, %43 ], [ %89, %48 ]
  %50 = phi <4 x i32> [ %47, %43 ], [ %87, %48 ]
  %51 = phi <4 x i32> [ <i32 -1, i32 -1, i32 -1, i32 -1>, %43 ], [ %88, %48 ]
  %52 = or i64 %49, 1
  %53 = or i64 %49, 2
  %54 = or i64 %49, 3
  %55 = or i64 %49, 4
  %56 = or i64 %49, 5
  %57 = or i64 %49, 6
  %58 = or i64 %49, 7
  %59 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %38, i64 %49, i32 5
  %60 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %38, i64 %52, i32 5
  %61 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %38, i64 %53, i32 5
  %62 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %38, i64 %54, i32 5
  %63 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %38, i64 %55, i32 5
  %64 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %38, i64 %56, i32 5
  %65 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %38, i64 %57, i32 5
  %66 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %38, i64 %58, i32 5
  %67 = load i32, i32* %59, align 4
  %68 = load i32, i32* %60, align 4
  %69 = load i32, i32* %61, align 4
  %70 = load i32, i32* %62, align 4
  %71 = insertelement <4 x i32> undef, i32 %67, i32 0
  %72 = insertelement <4 x i32> %71, i32 %68, i32 1
  %73 = insertelement <4 x i32> %72, i32 %69, i32 2
  %74 = insertelement <4 x i32> %73, i32 %70, i32 3
  %75 = load i32, i32* %63, align 4
  %76 = load i32, i32* %64, align 4
  %77 = load i32, i32* %65, align 4
  %78 = load i32, i32* %66, align 4
  %79 = insertelement <4 x i32> undef, i32 %75, i32 0
  %80 = insertelement <4 x i32> %79, i32 %76, i32 1
  %81 = insertelement <4 x i32> %80, i32 %77, i32 2
  %82 = insertelement <4 x i32> %81, i32 %78, i32 3
  %83 = and <4 x i32> %74, <i32 1, i32 1, i32 1, i32 1>
  %84 = and <4 x i32> %82, <i32 1, i32 1, i32 1, i32 1>
  %85 = xor <4 x i32> %83, <i32 1, i32 1, i32 1, i32 1>
  %86 = xor <4 x i32> %84, <i32 1, i32 1, i32 1, i32 1>
  %87 = and <4 x i32> %85, %50
  %88 = and <4 x i32> %86, %51
  %89 = add i64 %49, 8
  %90 = icmp eq i64 %89, %44
  br i1 %90, label %91, label %48, !llvm.loop !78

91:                                               ; preds = %48
  %92 = and <4 x i32> %88, %87
  %93 = shufflevector <4 x i32> %92, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %94 = and <4 x i32> %92, %93
  %95 = shufflevector <4 x i32> %94, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %96 = and <4 x i32> %94, %95
  %97 = extractelement <4 x i32> %96, i32 0
  %98 = icmp eq i64 %41, %44
  br i1 %98, label %115, label %99

99:                                               ; preds = %91, %36
  %100 = phi %struct.opj_tccp* [ %38, %36 ], [ %45, %91 ]
  %101 = phi i32 [ 0, %36 ], [ %46, %91 ]
  %102 = phi i32 [ %31, %36 ], [ %97, %91 ]
  br label %103

103:                                              ; preds = %99, %103
  %104 = phi %struct.opj_tccp* [ %112, %103 ], [ %100, %99 ]
  %105 = phi i32 [ %113, %103 ], [ %101, %99 ]
  %106 = phi i32 [ %111, %103 ], [ %102, %99 ]
  %107 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %104, i64 0, i32 5
  %108 = load i32, i32* %107, align 4
  %109 = and i32 %108, 1
  %110 = xor i32 %109, 1
  %111 = and i32 %110, %106
  %112 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %104, i64 1
  %113 = add nuw i32 %105, 1
  %114 = icmp ult i32 %113, %34
  br i1 %114, label %103, label %115, !llvm.loop !79

115:                                              ; preds = %103, %91, %26, %19
  %116 = phi i32 [ %22, %19 ], [ %31, %26 ], [ %97, %91 ], [ %111, %103 ]
  %117 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %20, i64 1
  %118 = add nuw i32 %21, 1
  %119 = icmp eq i32 %118, %13
  br i1 %119, label %120, label %19

120:                                              ; preds = %115, %8, %3
  %121 = phi i32 [ 1, %3 ], [ 1, %8 ], [ %116, %115 ]
  ret i32 %121
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_init_info(%struct.opj_j2k*, %struct.opj_stream_private* nocapture readnone, %struct.opj_event_mgr* nocapture readnone) #3 {
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4
  %5 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 5
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %7 = load %struct.opj_image*, %struct.opj_image** %6, align 8
  %8 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 6
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 7
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, %9
  store i32 0, i32* %5, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %36, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %16 = load %struct.opj_tcp*, %struct.opj_tcp** %15, align 8
  br label %17

17:                                               ; preds = %31, %14
  %18 = phi %struct.opj_tcp* [ %33, %31 ], [ %16, %14 ]
  %19 = phi i32 [ %34, %31 ], [ 0, %14 ]
  tail call void @opj_pi_update_encoding_parameters(%struct.opj_image* %7, %struct.opj_cp* %4, i32 %19) #12
  %20 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %18, i64 0, i32 6
  br label %21

21:                                               ; preds = %21, %17
  %22 = phi i32 [ 0, %17 ], [ %28, %21 ]
  %23 = phi i32 [ 0, %17 ], [ %27, %21 ]
  %24 = tail call fastcc i32 @opj_j2k_get_num_tp(%struct.opj_cp* %4, i32 %22, i32 %19) #12
  %25 = load i32, i32* %5, align 4
  %26 = add i32 %25, %24
  store i32 %26, i32* %5, align 4
  %27 = add i32 %24, %23
  %28 = add i32 %22, 1
  %29 = load i32, i32* %20, align 4
  %30 = icmp ugt i32 %28, %29
  br i1 %30, label %31, label %21

31:                                               ; preds = %21
  %32 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %18, i64 0, i32 17
  store i32 %27, i32* %32, align 4
  %33 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %18, i64 1
  %34 = add nuw i32 %19, 1
  %35 = icmp eq i32 %34, %12
  br i1 %35, label %36, label %17

36:                                               ; preds = %31, %3
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_write_soc(%struct.opj_j2k* nocapture readonly, %struct.opj_stream_private*, %struct.opj_event_mgr*) #3 {
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 10
  %5 = bitcast i64* %4 to i8**
  %6 = load i8*, i8** %5, align 8
  tail call void @opj_write_bytes_LE(i8* %6, i32 65359, i32 2) #12
  %7 = tail call i64 @opj_stream_write_data(%struct.opj_stream_private* %1, i8* %6, i64 2, %struct.opj_event_mgr* %2) #12
  %8 = icmp eq i64 %7, 2
  %9 = zext i1 %8 to i32
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_write_siz(%struct.opj_j2k* nocapture, %struct.opj_stream_private*, %struct.opj_event_mgr*) #3 {
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %5 = load %struct.opj_image*, %struct.opj_image** %4, align 8
  %6 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 4
  %7 = load i32, i32* %6, align 8
  %8 = mul i32 %7, 3
  %9 = add i32 %8, 40
  %10 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 6
  %11 = load %struct.opj_image_comp*, %struct.opj_image_comp** %10, align 8
  %12 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 11
  %13 = load i32, i32* %12, align 8
  %14 = icmp ugt i32 %9, %13
  %15 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 10
  %16 = bitcast i64* %15 to i8**
  %17 = load i8*, i8** %16, align 8
  br i1 %14, label %18, label %26

18:                                               ; preds = %3
  %19 = zext i32 %9 to i64
  %20 = tail call i8* @opj_realloc(i8* %17, i64 %19) #12
  %21 = icmp eq i8* %20, null
  br i1 %21, label %22, label %25

22:                                               ; preds = %18
  %23 = load i8*, i8** %16, align 8
  tail call void @opj_free(i8* %23) #12
  store i8* null, i8** %16, align 8
  store i32 0, i32* %12, align 8
  %24 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.287, i64 0, i64 0)) #12
  br label %92

25:                                               ; preds = %18
  store i8* %20, i8** %16, align 8
  store i32 %9, i32* %12, align 8
  br label %26

26:                                               ; preds = %3, %25
  %27 = phi i8* [ %20, %25 ], [ %17, %3 ]
  tail call void @opj_write_bytes_LE(i8* %27, i32 65361, i32 2) #12
  %28 = getelementptr inbounds i8, i8* %27, i64 2
  %29 = add i32 %8, 38
  tail call void @opj_write_bytes_LE(i8* %28, i32 %29, i32 2) #12
  %30 = getelementptr inbounds i8, i8* %27, i64 4
  %31 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 0
  %32 = load i16, i16* %31, align 8
  %33 = zext i16 %32 to i32
  tail call void @opj_write_bytes_LE(i8* %30, i32 %33, i32 2) #12
  %34 = getelementptr inbounds i8, i8* %27, i64 6
  %35 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 2
  %36 = load i32, i32* %35, align 8
  tail call void @opj_write_bytes_LE(i8* %34, i32 %36, i32 4) #12
  %37 = getelementptr inbounds i8, i8* %27, i64 10
  %38 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 3
  %39 = load i32, i32* %38, align 4
  tail call void @opj_write_bytes_LE(i8* %37, i32 %39, i32 4) #12
  %40 = getelementptr inbounds i8, i8* %27, i64 14
  %41 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 0
  %42 = load i32, i32* %41, align 8
  tail call void @opj_write_bytes_LE(i8* %40, i32 %42, i32 4) #12
  %43 = getelementptr inbounds i8, i8* %27, i64 18
  %44 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 1
  %45 = load i32, i32* %44, align 4
  tail call void @opj_write_bytes_LE(i8* %43, i32 %45, i32 4) #12
  %46 = getelementptr inbounds i8, i8* %27, i64 22
  %47 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 3
  %48 = load i32, i32* %47, align 4
  tail call void @opj_write_bytes_LE(i8* %46, i32 %48, i32 4) #12
  %49 = getelementptr inbounds i8, i8* %27, i64 26
  %50 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 4
  %51 = load i32, i32* %50, align 8
  tail call void @opj_write_bytes_LE(i8* %49, i32 %51, i32 4) #12
  %52 = getelementptr inbounds i8, i8* %27, i64 30
  %53 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 1
  %54 = load i32, i32* %53, align 4
  tail call void @opj_write_bytes_LE(i8* %52, i32 %54, i32 4) #12
  %55 = getelementptr inbounds i8, i8* %27, i64 34
  %56 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 2
  %57 = load i32, i32* %56, align 8
  tail call void @opj_write_bytes_LE(i8* %55, i32 %57, i32 4) #12
  %58 = getelementptr inbounds i8, i8* %27, i64 38
  %59 = load i32, i32* %6, align 8
  tail call void @opj_write_bytes_LE(i8* %58, i32 %59, i32 2) #12
  %60 = load i32, i32* %6, align 8
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %86, label %62

62:                                               ; preds = %26
  %63 = getelementptr inbounds i8, i8* %27, i64 40
  br label %64

64:                                               ; preds = %62, %64
  %65 = phi %struct.opj_image_comp* [ %82, %64 ], [ %11, %62 ]
  %66 = phi i8* [ %81, %64 ], [ %63, %62 ]
  %67 = phi i32 [ %83, %64 ], [ 0, %62 ]
  %68 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %65, i64 0, i32 6
  %69 = load i32, i32* %68, align 8
  %70 = add i32 %69, -1
  %71 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %65, i64 0, i32 8
  %72 = load i32, i32* %71, align 8
  %73 = shl i32 %72, 7
  %74 = add i32 %70, %73
  tail call void @opj_write_bytes_LE(i8* %66, i32 %74, i32 1) #12
  %75 = getelementptr inbounds i8, i8* %66, i64 1
  %76 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %65, i64 0, i32 0
  %77 = load i32, i32* %76, align 8
  tail call void @opj_write_bytes_LE(i8* %75, i32 %77, i32 1) #12
  %78 = getelementptr inbounds i8, i8* %66, i64 2
  %79 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %65, i64 0, i32 1
  %80 = load i32, i32* %79, align 4
  tail call void @opj_write_bytes_LE(i8* %78, i32 %80, i32 1) #12
  %81 = getelementptr inbounds i8, i8* %66, i64 3
  %82 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %65, i64 1
  %83 = add nuw i32 %67, 1
  %84 = load i32, i32* %6, align 8
  %85 = icmp ult i32 %83, %84
  br i1 %85, label %64, label %86

86:                                               ; preds = %64, %26
  %87 = load i8*, i8** %16, align 8
  %88 = zext i32 %9 to i64
  %89 = tail call i64 @opj_stream_write_data(%struct.opj_stream_private* %1, i8* %87, i64 %88, %struct.opj_event_mgr* %2) #12
  %90 = icmp eq i64 %89, %88
  %91 = zext i1 %90 to i32
  br label %92

92:                                               ; preds = %86, %22
  %93 = phi i32 [ 0, %22 ], [ %91, %86 ]
  ret i32 %93
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_write_cod(%struct.opj_j2k* nocapture, %struct.opj_stream_private*, %struct.opj_event_mgr*) #3 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #12
  store i32 -1431655766, i32* %4, align 4
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %7 = load %struct.opj_tcp*, %struct.opj_tcp** %6, align 8
  %8 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %7, i64 %10, i32 15
  %12 = load %struct.opj_tccp*, %struct.opj_tccp** %11, align 8
  %13 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %12, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %12, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = add i32 %19, 5
  br label %21

21:                                               ; preds = %3, %17
  %22 = phi i32 [ %20, %17 ], [ 5, %3 ]
  %23 = add i32 %22, 9
  store i32 %23, i32* %4, align 4
  %24 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 11
  %25 = load i32, i32* %24, align 8
  %26 = icmp ugt i32 %23, %25
  %27 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 10
  %28 = bitcast i64* %27 to i8**
  %29 = load i8*, i8** %28, align 8
  br i1 %26, label %30, label %38

30:                                               ; preds = %21
  %31 = zext i32 %23 to i64
  %32 = tail call i8* @opj_realloc(i8* %29, i64 %31) #12
  %33 = icmp eq i8* %32, null
  br i1 %33, label %34, label %37

34:                                               ; preds = %30
  %35 = load i8*, i8** %28, align 8
  tail call void @opj_free(i8* %35) #12
  store i8* null, i8** %28, align 8
  store i32 0, i32* %24, align 8
  %36 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.288, i64 0, i64 0)) #12
  br label %71

37:                                               ; preds = %30
  store i8* %32, i8** %28, align 8
  store i32 %23, i32* %24, align 8
  br label %38

38:                                               ; preds = %21, %37
  %39 = phi i8* [ %32, %37 ], [ %29, %21 ]
  tail call void @opj_write_bytes_LE(i8* %39, i32 65362, i32 2) #12
  %40 = getelementptr inbounds i8, i8* %39, i64 2
  %41 = add i32 %22, 7
  tail call void @opj_write_bytes_LE(i8* %40, i32 %41, i32 2) #12
  %42 = getelementptr inbounds i8, i8* %39, i64 4
  %43 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %7, i64 %10, i32 0
  %44 = load i32, i32* %43, align 8
  tail call void @opj_write_bytes_LE(i8* %42, i32 %44, i32 1) #12
  %45 = getelementptr inbounds i8, i8* %39, i64 5
  %46 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %7, i64 %10, i32 1
  %47 = load i32, i32* %46, align 4
  tail call void @opj_write_bytes_LE(i8* %45, i32 %47, i32 1) #12
  %48 = getelementptr inbounds i8, i8* %39, i64 6
  %49 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %7, i64 %10, i32 2
  %50 = load i32, i32* %49, align 8
  tail call void @opj_write_bytes_LE(i8* %48, i32 %50, i32 2) #12
  %51 = getelementptr inbounds i8, i8* %39, i64 8
  %52 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %7, i64 %10, i32 4
  %53 = load i32, i32* %52, align 8
  tail call void @opj_write_bytes_LE(i8* %51, i32 %53, i32 1) #12
  %54 = getelementptr inbounds i8, i8* %39, i64 9
  store i32 %22, i32* %4, align 4
  %55 = load i32, i32* %8, align 8
  %56 = call fastcc i32 @opj_j2k_write_SPCod_SPCoc(%struct.opj_j2k* %0, i32 %55, i8* %54, i32* nonnull %4, %struct.opj_event_mgr* %2)
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %60

58:                                               ; preds = %38
  %59 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.289, i64 0, i64 0)) #12
  br label %71

60:                                               ; preds = %38
  %61 = load i32, i32* %4, align 4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %65, label %63

63:                                               ; preds = %60
  %64 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.289, i64 0, i64 0)) #12
  br label %71

65:                                               ; preds = %60
  %66 = load i8*, i8** %28, align 8
  %67 = zext i32 %23 to i64
  %68 = tail call i64 @opj_stream_write_data(%struct.opj_stream_private* %1, i8* %66, i64 %67, %struct.opj_event_mgr* %2) #12
  %69 = icmp eq i64 %68, %67
  %70 = zext i1 %69 to i32
  br label %71

71:                                               ; preds = %65, %34, %63, %58
  %72 = phi i32 [ 0, %63 ], [ 0, %58 ], [ 0, %34 ], [ %70, %65 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #12
  ret i32 %72
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_write_qcd(%struct.opj_j2k* nocapture, %struct.opj_stream_private*, %struct.opj_event_mgr*) #3 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #12
  store i32 -1431655766, i32* %4, align 4
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %9 = load %struct.opj_tcp*, %struct.opj_tcp** %8, align 8
  %10 = zext i32 %7 to i64
  %11 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %9, i64 %10, i32 15
  %12 = load %struct.opj_tccp*, %struct.opj_tccp** %11, align 8
  %13 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %12, i64 0, i32 6
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %21, label %16

16:                                               ; preds = %3
  %17 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %12, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = mul i32 %18, 3
  %20 = add i32 %19, -2
  br label %21

21:                                               ; preds = %3, %16
  %22 = phi i32 [ %20, %16 ], [ 1, %3 ]
  %23 = icmp eq i32 %14, 0
  %24 = add i32 %22, 1
  %25 = shl i32 %22, 1
  %26 = or i32 %25, 1
  %27 = select i1 %23, i32 %24, i32 %26
  %28 = add i32 %27, 4
  store i32 %28, i32* %4, align 4
  %29 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 11
  %30 = load i32, i32* %29, align 8
  %31 = icmp ugt i32 %28, %30
  %32 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 10
  %33 = bitcast i64* %32 to i8**
  %34 = load i8*, i8** %33, align 8
  br i1 %31, label %35, label %43

35:                                               ; preds = %21
  %36 = zext i32 %28 to i64
  %37 = tail call i8* @opj_realloc(i8* %34, i64 %36) #12
  %38 = icmp eq i8* %37, null
  br i1 %38, label %39, label %42

39:                                               ; preds = %35
  %40 = load i8*, i8** %33, align 8
  tail call void @opj_free(i8* %40) #12
  store i8* null, i8** %33, align 8
  store i32 0, i32* %29, align 8
  %41 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.291, i64 0, i64 0)) #12
  br label %64

42:                                               ; preds = %35
  store i8* %37, i8** %33, align 8
  store i32 %28, i32* %29, align 8
  br label %43

43:                                               ; preds = %21, %42
  %44 = phi i8* [ %37, %42 ], [ %34, %21 ]
  tail call void @opj_write_bytes_LE(i8* %44, i32 65372, i32 2) #12
  %45 = getelementptr inbounds i8, i8* %44, i64 2
  %46 = add i32 %27, 2
  tail call void @opj_write_bytes_LE(i8* %45, i32 %46, i32 2) #12
  %47 = getelementptr inbounds i8, i8* %44, i64 4
  store i32 %27, i32* %4, align 4
  %48 = load i32, i32* %6, align 8
  %49 = call fastcc i32 @opj_j2k_write_SQcd_SQcc(%struct.opj_j2k* %0, i32 %48, i32 0, i8* %47, i32* nonnull %4, %struct.opj_event_mgr* %2)
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %43
  %52 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.292, i64 0, i64 0)) #12
  br label %64

53:                                               ; preds = %43
  %54 = load i32, i32* %4, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %58, label %56

56:                                               ; preds = %53
  %57 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.292, i64 0, i64 0)) #12
  br label %64

58:                                               ; preds = %53
  %59 = load i8*, i8** %33, align 8
  %60 = zext i32 %28 to i64
  %61 = tail call i64 @opj_stream_write_data(%struct.opj_stream_private* %1, i8* %59, i64 %60, %struct.opj_event_mgr* %2) #12
  %62 = icmp eq i64 %61, %60
  %63 = zext i1 %62 to i32
  br label %64

64:                                               ; preds = %58, %39, %56, %51
  %65 = phi i32 [ 0, %56 ], [ 0, %51 ], [ 0, %39 ], [ %63, %58 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #12
  ret i32 %65
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_write_all_coc(%struct.opj_j2k* nocapture, %struct.opj_stream_private*, %struct.opj_event_mgr*) #3 {
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %6 = load %struct.opj_image*, %struct.opj_image** %5, align 8
  %7 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %6, i64 0, i32 4
  %8 = load i32, i32* %7, align 8
  %9 = icmp ugt i32 %8, 1
  br i1 %9, label %10, label %158

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %12 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %13 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 11
  %14 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 10
  %15 = bitcast i64* %14 to i8**
  %16 = bitcast i32* %4 to i8*
  br label %17

17:                                               ; preds = %10, %151
  %18 = phi %struct.opj_image* [ %6, %10 ], [ %152, %151 ]
  %19 = phi i64 [ 1, %10 ], [ %153, %151 ]
  %20 = phi i32 [ %8, %10 ], [ %155, %151 ]
  %21 = load %struct.opj_tcp*, %struct.opj_tcp** %11, align 8
  %22 = load i32, i32* %12, align 8
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %21, i64 %23, i32 15
  %25 = load %struct.opj_tccp*, %struct.opj_tccp** %24, align 8
  %26 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %19, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %27, %29
  br i1 %30, label %31, label %81

31:                                               ; preds = %17
  %32 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %19, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %33, %35
  br i1 %36, label %37, label %81

37:                                               ; preds = %31
  %38 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 0, i32 2
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %19, i32 2
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %39, %41
  br i1 %42, label %43, label %81

43:                                               ; preds = %37
  %44 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 0, i32 3
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %19, i32 3
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %45, %47
  br i1 %48, label %49, label %81

49:                                               ; preds = %43
  %50 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 0, i32 4
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %19, i32 4
  %53 = load i32, i32* %52, align 4
  %54 = icmp eq i32 %51, %53
  br i1 %54, label %55, label %81

55:                                               ; preds = %49
  %56 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 0, i32 5
  %57 = load i32, i32* %56, align 4
  %58 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %19, i32 5
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %57, %59
  br i1 %60, label %61, label %81

61:                                               ; preds = %55
  %62 = icmp eq i32 %33, 0
  br i1 %62, label %151, label %63

63:                                               ; preds = %61
  %64 = zext i32 %33 to i64
  br label %67

65:                                               ; preds = %74
  %66 = icmp eq i64 %80, %64
  br i1 %66, label %151, label %67

67:                                               ; preds = %65, %63
  %68 = phi i64 [ 0, %63 ], [ %80, %65 ]
  %69 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 0, i32 10, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %19, i32 10, i64 %68
  %72 = load i32, i32* %71, align 4
  %73 = icmp eq i32 %70, %72
  br i1 %73, label %74, label %81

74:                                               ; preds = %67
  %75 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 0, i32 11, i64 %68
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %19, i32 11, i64 %68
  %78 = load i32, i32* %77, align 4
  %79 = icmp eq i32 %76, %78
  %80 = add nuw nsw i64 %68, 1
  br i1 %79, label %65, label %81

81:                                               ; preds = %74, %67, %17, %31, %37, %43, %49, %55
  %82 = icmp ult i32 %20, 257
  %83 = select i1 %82, i32 6, i32 7
  %84 = and i32 %29, 1
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %90, label %86

86:                                               ; preds = %81
  %87 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %19, i32 1
  %88 = load i32, i32* %87, align 4
  %89 = add i32 %88, 5
  br label %90

90:                                               ; preds = %86, %81
  %91 = phi i32 [ %89, %86 ], [ 5, %81 ]
  %92 = add i32 %91, %83
  %93 = load i32, i32* %13, align 8
  %94 = icmp ugt i32 %92, %93
  %95 = load i8*, i8** %15, align 8
  br i1 %94, label %96, label %115

96:                                               ; preds = %90
  %97 = zext i32 %92 to i64
  %98 = tail call i8* @opj_realloc(i8* %95, i64 %97) #12
  %99 = icmp eq i8* %98, null
  br i1 %99, label %100, label %103

100:                                              ; preds = %96
  %101 = load i8*, i8** %15, align 8
  tail call void @opj_free(i8* %101) #12
  store i8* null, i8** %15, align 8
  store i32 0, i32* %13, align 8
  %102 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.294, i64 0, i64 0)) #12
  br label %158

103:                                              ; preds = %96
  store i8* %98, i8** %15, align 8
  store i32 %92, i32* %13, align 8
  %104 = load %struct.opj_tcp*, %struct.opj_tcp** %11, align 8
  %105 = load i32, i32* %12, align 8
  %106 = load %struct.opj_image*, %struct.opj_image** %5, align 8
  %107 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %106, i64 0, i32 4
  %108 = load i32, i32* %107, align 8
  %109 = zext i32 %105 to i64
  %110 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %104, i64 %109, i32 15
  %111 = load %struct.opj_tccp*, %struct.opj_tccp** %110, align 8
  %112 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %111, i64 %19, i32 0
  %113 = load i32, i32* %112, align 4
  %114 = and i32 %113, 1
  br label %115

115:                                              ; preds = %103, %90
  %116 = phi i32 [ %114, %103 ], [ %84, %90 ]
  %117 = phi i64 [ %109, %103 ], [ %23, %90 ]
  %118 = phi %struct.opj_tccp* [ %111, %103 ], [ %25, %90 ]
  %119 = phi i32 [ %108, %103 ], [ %20, %90 ]
  %120 = phi %struct.opj_tcp* [ %104, %103 ], [ %21, %90 ]
  %121 = phi i8* [ %98, %103 ], [ %95, %90 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #12
  store i32 -1431655766, i32* %4, align 4
  %122 = icmp ult i32 %119, 257
  %123 = select i1 %122, i32 1, i32 2
  %124 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %120, i64 %117, i32 15
  %125 = icmp eq i32 %116, 0
  br i1 %125, label %130, label %126

126:                                              ; preds = %115
  %127 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %118, i64 %19, i32 1
  %128 = load i32, i32* %127, align 4
  %129 = add i32 %128, 5
  br label %130

130:                                              ; preds = %115, %126
  %131 = phi i32 [ %129, %126 ], [ 5, %115 ]
  tail call void @opj_write_bytes_LE(i8* %121, i32 65363, i32 2) #12
  %132 = getelementptr inbounds i8, i8* %121, i64 2
  %133 = add nuw nsw i32 %123, 3
  %134 = add i32 %133, %131
  tail call void @opj_write_bytes_LE(i8* %132, i32 %134, i32 2) #12
  %135 = getelementptr inbounds i8, i8* %121, i64 4
  %136 = trunc i64 %19 to i32
  tail call void @opj_write_bytes_LE(i8* %135, i32 %136, i32 %123) #12
  %137 = zext i32 %123 to i64
  %138 = getelementptr inbounds i8, i8* %135, i64 %137
  %139 = load %struct.opj_tccp*, %struct.opj_tccp** %124, align 8
  %140 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %139, i64 %19, i32 0
  %141 = load i32, i32* %140, align 4
  tail call void @opj_write_bytes_LE(i8* %138, i32 %141, i32 1) #12
  %142 = getelementptr inbounds i8, i8* %138, i64 1
  store i32 %131, i32* %4, align 4
  %143 = load i32, i32* %12, align 8
  %144 = call fastcc i32 @opj_j2k_write_SPCod_SPCoc(%struct.opj_j2k* %0, i32 %143, i8* %142, i32* nonnull %4, %struct.opj_event_mgr* %2) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #12
  %145 = load i8*, i8** %15, align 8
  %146 = zext i32 %92 to i64
  %147 = tail call i64 @opj_stream_write_data(%struct.opj_stream_private* %1, i8* %145, i64 %146, %struct.opj_event_mgr* %2) #12
  %148 = icmp eq i64 %147, %146
  br i1 %148, label %149, label %158

149:                                              ; preds = %130
  %150 = load %struct.opj_image*, %struct.opj_image** %5, align 8
  br label %151

151:                                              ; preds = %65, %149, %61
  %152 = phi %struct.opj_image* [ %150, %149 ], [ %18, %61 ], [ %18, %65 ]
  %153 = add nuw nsw i64 %19, 1
  %154 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %152, i64 0, i32 4
  %155 = load i32, i32* %154, align 8
  %156 = zext i32 %155 to i64
  %157 = icmp ult i64 %153, %156
  br i1 %157, label %17, label %158

158:                                              ; preds = %151, %130, %3, %100
  %159 = phi i32 [ 0, %100 ], [ 1, %3 ], [ 1, %151 ], [ 0, %130 ]
  ret i32 %159
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_write_all_qcc(%struct.opj_j2k* nocapture, %struct.opj_stream_private*, %struct.opj_event_mgr*) #3 {
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %6 = load %struct.opj_image*, %struct.opj_image** %5, align 8
  %7 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %6, i64 0, i32 4
  %8 = load i32, i32* %7, align 8
  %9 = icmp ugt i32 %8, 1
  br i1 %9, label %10, label %162

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %12 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %13 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 11
  %14 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 10
  %15 = bitcast i64* %14 to i8**
  %16 = bitcast i32* %4 to i8*
  br label %17

17:                                               ; preds = %10, %155
  %18 = phi %struct.opj_image* [ %6, %10 ], [ %156, %155 ]
  %19 = phi i64 [ 1, %10 ], [ %157, %155 ]
  %20 = phi i32 [ %8, %10 ], [ %159, %155 ]
  %21 = load i32, i32* %11, align 8
  %22 = load %struct.opj_tcp*, %struct.opj_tcp** %12, align 8
  %23 = zext i32 %21 to i64
  %24 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %22, i64 %23, i32 15
  %25 = load %struct.opj_tccp*, %struct.opj_tccp** %24, align 8
  %26 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 0, i32 6
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %19, i32 6
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %27, %29
  br i1 %30, label %31, label %77

31:                                               ; preds = %17
  %32 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 0, i32 8
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %19, i32 8
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %33, %35
  br i1 %36, label %37, label %77

37:                                               ; preds = %31
  %38 = icmp eq i32 %27, 1
  br i1 %38, label %50, label %39

39:                                               ; preds = %37
  %40 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 0, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = mul i32 %41, 3
  %43 = add i32 %42, -2
  %44 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %19, i32 1
  %45 = load i32, i32* %44, align 4
  %46 = mul i32 %45, 3
  %47 = icmp eq i32 %42, %46
  br i1 %47, label %48, label %77

48:                                               ; preds = %39
  %49 = icmp eq i32 %43, 0
  br i1 %49, label %155, label %50

50:                                               ; preds = %48, %37
  %51 = phi i32 [ %43, %48 ], [ 1, %37 ]
  %52 = zext i32 %51 to i64
  br label %55

53:                                               ; preds = %55
  %54 = icmp eq i64 %62, %52
  br i1 %54, label %63, label %55

55:                                               ; preds = %53, %50
  %56 = phi i64 [ 0, %50 ], [ %62, %53 ]
  %57 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 0, i32 7, i64 %56, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %19, i32 7, i64 %56, i32 0
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %58, %60
  %62 = add nuw nsw i64 %56, 1
  br i1 %61, label %53, label %77

63:                                               ; preds = %53
  %64 = icmp ne i32 %27, 0
  %65 = icmp ne i32 %51, 0
  %66 = and i1 %64, %65
  br i1 %66, label %69, label %155

67:                                               ; preds = %69
  %68 = icmp eq i64 %76, %52
  br i1 %68, label %155, label %69

69:                                               ; preds = %63, %67
  %70 = phi i64 [ %76, %67 ], [ 0, %63 ]
  %71 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 0, i32 7, i64 %70, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %19, i32 7, i64 %70, i32 1
  %74 = load i32, i32* %73, align 4
  %75 = icmp eq i32 %72, %74
  %76 = add nuw nsw i64 %70, 1
  br i1 %75, label %67, label %77

77:                                               ; preds = %55, %69, %17, %31, %39
  %78 = icmp eq i32 %29, 1
  br i1 %78, label %84, label %79

79:                                               ; preds = %77
  %80 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %25, i64 %19, i32 1
  %81 = load i32, i32* %80, align 4
  %82 = mul i32 %81, 3
  %83 = add i32 %82, -2
  br label %84

84:                                               ; preds = %79, %77
  %85 = phi i32 [ %83, %79 ], [ 1, %77 ]
  %86 = icmp eq i32 %29, 0
  %87 = add i32 %85, 1
  %88 = shl i32 %85, 1
  %89 = or i32 %88, 1
  %90 = select i1 %86, i32 %87, i32 %89
  %91 = icmp ugt i32 %20, 256
  %92 = select i1 %91, i32 6, i32 5
  %93 = add i32 %92, %90
  %94 = load i32, i32* %13, align 8
  %95 = icmp ugt i32 %93, %94
  %96 = load i8*, i8** %15, align 8
  br i1 %95, label %97, label %112

97:                                               ; preds = %84
  %98 = zext i32 %93 to i64
  %99 = tail call i8* @opj_realloc(i8* %96, i64 %98) #12
  %100 = icmp eq i8* %99, null
  br i1 %100, label %101, label %104

101:                                              ; preds = %97
  %102 = load i8*, i8** %15, align 8
  tail call void @opj_free(i8* %102) #12
  store i8* null, i8** %15, align 8
  store i32 0, i32* %13, align 8
  %103 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.295, i64 0, i64 0)) #12
  br label %162

104:                                              ; preds = %97
  store i8* %99, i8** %15, align 8
  store i32 %93, i32* %13, align 8
  %105 = load i32, i32* %11, align 8
  %106 = load %struct.opj_tcp*, %struct.opj_tcp** %12, align 8
  %107 = zext i32 %105 to i64
  %108 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %106, i64 %107, i32 15
  %109 = load %struct.opj_tccp*, %struct.opj_tccp** %108, align 8
  %110 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %109, i64 %19, i32 6
  %111 = load i32, i32* %110, align 4
  br label %112

112:                                              ; preds = %104, %84
  %113 = phi i32 [ %111, %104 ], [ %29, %84 ]
  %114 = phi %struct.opj_tccp* [ %109, %104 ], [ %25, %84 ]
  %115 = phi i8* [ %99, %104 ], [ %96, %84 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #12
  store i32 -1431655766, i32* %4, align 4
  %116 = icmp eq i32 %113, 1
  br i1 %116, label %122, label %117

117:                                              ; preds = %112
  %118 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %114, i64 %19, i32 1
  %119 = load i32, i32* %118, align 4
  %120 = mul i32 %119, 3
  %121 = add i32 %120, -2
  br label %122

122:                                              ; preds = %117, %112
  %123 = phi i32 [ %121, %117 ], [ 1, %112 ]
  %124 = icmp eq i32 %113, 0
  %125 = add i32 %123, 1
  %126 = shl i32 %123, 1
  %127 = or i32 %126, 1
  %128 = select i1 %124, i32 %125, i32 %127
  %129 = add i32 %128, 6
  store i32 %129, i32* %4, align 4
  tail call void @opj_write_bytes_LE(i8* %115, i32 65373, i32 2) #12
  %130 = getelementptr inbounds i8, i8* %115, i64 2
  %131 = load %struct.opj_image*, %struct.opj_image** %5, align 8
  %132 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %131, i64 0, i32 4
  %133 = load i32, i32* %132, align 8
  %134 = icmp ult i32 %133, 257
  br i1 %134, label %135, label %139

135:                                              ; preds = %122
  %136 = add i32 %128, 3
  tail call void @opj_write_bytes_LE(i8* %130, i32 %136, i32 2) #12
  %137 = getelementptr inbounds i8, i8* %115, i64 4
  %138 = trunc i64 %19 to i32
  tail call void @opj_write_bytes_LE(i8* %137, i32 %138, i32 1) #12
  br label %143

139:                                              ; preds = %122
  %140 = add i32 %128, 4
  tail call void @opj_write_bytes_LE(i8* %130, i32 %140, i32 2) #12
  %141 = getelementptr inbounds i8, i8* %115, i64 4
  %142 = trunc i64 %19 to i32
  tail call void @opj_write_bytes_LE(i8* %141, i32 %142, i32 2) #12
  br label %143

143:                                              ; preds = %135, %139
  %144 = phi i64 [ 5, %135 ], [ 6, %139 ]
  %145 = phi i32 [ %138, %135 ], [ %142, %139 ]
  %146 = getelementptr inbounds i8, i8* %115, i64 %144
  store i32 %128, i32* %4, align 4
  %147 = load i32, i32* %11, align 8
  %148 = call fastcc i32 @opj_j2k_write_SQcd_SQcc(%struct.opj_j2k* %0, i32 %147, i32 %145, i8* %146, i32* nonnull %4, %struct.opj_event_mgr* %2) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #12
  %149 = load i8*, i8** %15, align 8
  %150 = zext i32 %93 to i64
  %151 = tail call i64 @opj_stream_write_data(%struct.opj_stream_private* %1, i8* %149, i64 %150, %struct.opj_event_mgr* %2) #12
  %152 = icmp eq i64 %151, %150
  br i1 %152, label %153, label %162

153:                                              ; preds = %143
  %154 = load %struct.opj_image*, %struct.opj_image** %5, align 8
  br label %155

155:                                              ; preds = %67, %153, %63, %48
  %156 = phi %struct.opj_image* [ %154, %153 ], [ %18, %63 ], [ %18, %48 ], [ %18, %67 ]
  %157 = add nuw nsw i64 %19, 1
  %158 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %156, i64 0, i32 4
  %159 = load i32, i32* %158, align 8
  %160 = zext i32 %159 to i64
  %161 = icmp ult i64 %157, %160
  br i1 %161, label %17, label %162

162:                                              ; preds = %155, %143, %3, %101
  %163 = phi i32 [ 0, %101 ], [ 1, %3 ], [ 1, %155 ], [ 0, %143 ]
  ret i32 %163
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_write_tlm(%struct.opj_j2k* nocapture, %struct.opj_stream_private*, %struct.opj_event_mgr*) #3 {
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 5
  %5 = load i32, i32* %4, align 8
  %6 = mul i32 %5, 5
  %7 = add i32 %6, 6
  %8 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 11
  %9 = load i32, i32* %8, align 8
  %10 = icmp ugt i32 %7, %9
  %11 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 10
  %12 = bitcast i64* %11 to i8**
  %13 = load i8*, i8** %12, align 8
  %14 = zext i32 %7 to i64
  br i1 %10, label %15, label %22

15:                                               ; preds = %3
  %16 = tail call i8* @opj_realloc(i8* %13, i64 %14) #12
  %17 = icmp eq i8* %16, null
  br i1 %17, label %18, label %21

18:                                               ; preds = %15
  %19 = load i8*, i8** %12, align 8
  tail call void @opj_free(i8* %19) #12
  store i8* null, i8** %12, align 8
  store i32 0, i32* %8, align 8
  %20 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.296, i64 0, i64 0)) #12
  br label %35

21:                                               ; preds = %15
  store i8* %16, i8** %12, align 8
  store i32 %7, i32* %8, align 8
  br label %22

22:                                               ; preds = %3, %21
  %23 = phi i8* [ %16, %21 ], [ %13, %3 ]
  %24 = tail call i64 @opj_stream_tell(%struct.opj_stream_private* %1) #12
  %25 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 1
  %26 = bitcast %struct.opj_tcp** %25 to i64*
  store i64 %24, i64* %26, align 8
  tail call void @opj_write_bytes_LE(i8* %23, i32 65365, i32 2) #12
  %27 = getelementptr inbounds i8, i8* %23, i64 2
  %28 = add i32 %6, 4
  tail call void @opj_write_bytes_LE(i8* %27, i32 %28, i32 2) #12
  %29 = getelementptr inbounds i8, i8* %23, i64 4
  tail call void @opj_write_bytes_LE(i8* %29, i32 0, i32 1) #12
  %30 = getelementptr inbounds i8, i8* %23, i64 5
  tail call void @opj_write_bytes_LE(i8* %30, i32 80, i32 1) #12
  %31 = load i8*, i8** %12, align 8
  %32 = tail call i64 @opj_stream_write_data(%struct.opj_stream_private* %1, i8* %31, i64 %14, %struct.opj_event_mgr* %2) #12
  %33 = icmp eq i64 %32, %14
  %34 = zext i1 %33 to i32
  br label %35

35:                                               ; preds = %22, %18
  %36 = phi i32 [ 0, %18 ], [ %34, %22 ]
  ret i32 %36
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_write_poc(%struct.opj_j2k* nocapture, %struct.opj_stream_private*, %struct.opj_event_mgr*) #3 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #12
  store i32 0, i32* %4, align 4
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %7 = load %struct.opj_tcp*, %struct.opj_tcp** %6, align 8
  %8 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %12 = load %struct.opj_image*, %struct.opj_image** %11, align 8
  %13 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %12, i64 0, i32 4
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %7, i64 %10, i32 6
  %16 = load i32, i32* %15, align 4
  %17 = add i32 %16, 1
  %18 = icmp ult i32 %14, 257
  %19 = select i1 %18, i32 7, i32 9
  %20 = mul i32 %19, %17
  %21 = add i32 %20, 4
  %22 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 11
  %23 = load i32, i32* %22, align 8
  %24 = icmp ugt i32 %21, %23
  %25 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 10
  %26 = bitcast i64* %25 to i8**
  %27 = load i8*, i8** %26, align 8
  %28 = zext i32 %21 to i64
  br i1 %24, label %29, label %36

29:                                               ; preds = %3
  %30 = tail call i8* @opj_realloc(i8* %27, i64 %28) #12
  %31 = icmp eq i8* %30, null
  br i1 %31, label %32, label %35

32:                                               ; preds = %29
  %33 = load i8*, i8** %26, align 8
  tail call void @opj_free(i8* %33) #12
  store i8* null, i8** %26, align 8
  store i32 0, i32* %22, align 8
  %34 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.297, i64 0, i64 0)) #12
  br label %42

35:                                               ; preds = %29
  store i8* %30, i8** %26, align 8
  store i32 %21, i32* %22, align 8
  br label %36

36:                                               ; preds = %3, %35
  %37 = phi i8* [ %30, %35 ], [ %27, %3 ]
  call fastcc void @opj_j2k_write_poc_in_memory(%struct.opj_j2k* %0, i8* %37, i32* nonnull %4)
  %38 = load i8*, i8** %26, align 8
  %39 = tail call i64 @opj_stream_write_data(%struct.opj_stream_private* %1, i8* %38, i64 %28, %struct.opj_event_mgr* %2) #12
  %40 = icmp eq i64 %39, %28
  %41 = zext i1 %40 to i32
  br label %42

42:                                               ; preds = %36, %32
  %43 = phi i32 [ 0, %32 ], [ %41, %36 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #12
  ret i32 %43
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_write_regions(%struct.opj_j2k* nocapture readonly, %struct.opj_stream_private*, %struct.opj_event_mgr*) #3 {
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %5 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %6 = load %struct.opj_image*, %struct.opj_image** %5, align 8
  %7 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %6, i64 0, i32 4
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %55, label %10

10:                                               ; preds = %3
  %11 = load %struct.opj_tcp*, %struct.opj_tcp** %4, align 8
  %12 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %11, i64 0, i32 15
  %13 = load %struct.opj_tccp*, %struct.opj_tccp** %12, align 8
  %14 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 10
  %15 = bitcast i64* %14 to i8**
  br label %16

16:                                               ; preds = %10, %47
  %17 = phi %struct.opj_image* [ %6, %10 ], [ %48, %47 ]
  %18 = phi i64 [ 0, %10 ], [ %50, %47 ]
  %19 = phi i32 [ %8, %10 ], [ %52, %47 ]
  %20 = phi %struct.opj_tccp* [ %13, %10 ], [ %49, %47 ]
  %21 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %20, i64 0, i32 9
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %47, label %24

24:                                               ; preds = %16
  %25 = load %struct.opj_tcp*, %struct.opj_tcp** %4, align 8
  %26 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %25, i64 0, i32 15
  %27 = load %struct.opj_tccp*, %struct.opj_tccp** %26, align 8
  %28 = icmp ult i32 %19, 257
  %29 = select i1 %28, i32 1, i32 2
  %30 = add nuw nsw i32 %29, 6
  %31 = load i8*, i8** %15, align 8
  tail call void @opj_write_bytes_LE(i8* %31, i32 65374, i32 2) #12
  %32 = getelementptr inbounds i8, i8* %31, i64 2
  %33 = or i32 %29, 4
  tail call void @opj_write_bytes_LE(i8* %32, i32 %33, i32 2) #12
  %34 = getelementptr inbounds i8, i8* %31, i64 4
  %35 = trunc i64 %18 to i32
  tail call void @opj_write_bytes_LE(i8* %34, i32 %35, i32 %29) #12
  %36 = zext i32 %29 to i64
  %37 = getelementptr inbounds i8, i8* %34, i64 %36
  tail call void @opj_write_bytes_LE(i8* %37, i32 0, i32 1) #12
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  %39 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %27, i64 %18, i32 9
  %40 = load i32, i32* %39, align 4
  tail call void @opj_write_bytes_LE(i8* %38, i32 %40, i32 1) #12
  %41 = load i8*, i8** %15, align 8
  %42 = zext i32 %30 to i64
  %43 = tail call i64 @opj_stream_write_data(%struct.opj_stream_private* %1, i8* %41, i64 %42, %struct.opj_event_mgr* %2) #12
  %44 = icmp eq i64 %43, %42
  br i1 %44, label %45, label %55

45:                                               ; preds = %24
  %46 = load %struct.opj_image*, %struct.opj_image** %5, align 8
  br label %47

47:                                               ; preds = %45, %16
  %48 = phi %struct.opj_image* [ %46, %45 ], [ %17, %16 ]
  %49 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %20, i64 1
  %50 = add nuw nsw i64 %18, 1
  %51 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %48, i64 0, i32 4
  %52 = load i32, i32* %51, align 8
  %53 = zext i32 %52 to i64
  %54 = icmp ult i64 %50, %53
  br i1 %54, label %16, label %55

55:                                               ; preds = %47, %24, %3
  %56 = phi i32 [ 1, %3 ], [ 0, %24 ], [ 1, %47 ]
  ret i32 %56
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_write_com(%struct.opj_j2k* nocapture, %struct.opj_stream_private*, %struct.opj_event_mgr*) #3 {
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 5
  %5 = load i8*, i8** %4, align 8
  %6 = tail call i64 @strlen(i8* %5) #13
  %7 = trunc i64 %6 to i32
  %8 = add i32 %7, 6
  %9 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 11
  %10 = load i32, i32* %9, align 8
  %11 = icmp ugt i32 %8, %10
  %12 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 10
  %13 = bitcast i64* %12 to i8**
  %14 = load i8*, i8** %13, align 8
  %15 = zext i32 %8 to i64
  br i1 %11, label %16, label %23

16:                                               ; preds = %3
  %17 = tail call i8* @opj_realloc(i8* %14, i64 %15) #12
  %18 = icmp eq i8* %17, null
  br i1 %18, label %19, label %22

19:                                               ; preds = %16
  %20 = load i8*, i8** %13, align 8
  tail call void @opj_free(i8* %20) #12
  store i8* null, i8** %13, align 8
  store i32 0, i32* %9, align 8
  %21 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.298, i64 0, i64 0)) #12
  br label %34

22:                                               ; preds = %16
  store i8* %17, i8** %13, align 8
  store i32 %8, i32* %9, align 8
  br label %23

23:                                               ; preds = %3, %22
  %24 = phi i8* [ %17, %22 ], [ %14, %3 ]
  tail call void @opj_write_bytes_LE(i8* %24, i32 65380, i32 2) #12
  %25 = getelementptr inbounds i8, i8* %24, i64 2
  %26 = add i32 %7, 4
  tail call void @opj_write_bytes_LE(i8* %25, i32 %26, i32 2) #12
  %27 = getelementptr inbounds i8, i8* %24, i64 4
  tail call void @opj_write_bytes_LE(i8* %27, i32 1, i32 2) #12
  %28 = getelementptr inbounds i8, i8* %24, i64 6
  %29 = and i64 %6, 4294967295
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %28, i8* align 1 %5, i64 %29, i1 false)
  %30 = load i8*, i8** %13, align 8
  %31 = tail call i64 @opj_stream_write_data(%struct.opj_stream_private* %1, i8* %30, i64 %15, %struct.opj_event_mgr* %2) #12
  %32 = icmp eq i64 %31, %15
  %33 = zext i1 %32 to i32
  br label %34

34:                                               ; preds = %23, %19
  %35 = phi i32 [ 0, %19 ], [ %33, %23 ]
  ret i32 %35
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_write_mct_data_group(%struct.opj_j2k* nocapture, %struct.opj_stream_private*, %struct.opj_event_mgr*) #3 {
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %5 = load %struct.opj_image*, %struct.opj_image** %4, align 8
  %6 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 4
  %7 = load i32, i32* %6, align 8
  %8 = add i32 %7, 6
  %9 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 11
  %10 = load i32, i32* %9, align 8
  %11 = icmp ugt i32 %8, %10
  %12 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 10
  %13 = bitcast i64* %12 to i8**
  %14 = load i8*, i8** %13, align 8
  br i1 %11, label %15, label %23

15:                                               ; preds = %3
  %16 = zext i32 %8 to i64
  %17 = tail call i8* @opj_realloc(i8* %14, i64 %16) #12
  %18 = icmp eq i8* %17, null
  br i1 %18, label %19, label %22

19:                                               ; preds = %15
  %20 = load i8*, i8** %13, align 8
  tail call void @opj_free(i8* %20) #12
  store i8* null, i8** %13, align 8
  store i32 0, i32* %9, align 8
  %21 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.299, i64 0, i64 0)) #12
  br label %270

22:                                               ; preds = %15
  store i8* %17, i8** %13, align 8
  store i32 %8, i32* %9, align 8
  br label %23

23:                                               ; preds = %22, %3
  %24 = phi i8* [ %17, %22 ], [ %14, %3 ]
  tail call void @opj_write_bytes_LE(i8* %24, i32 65400, i32 2) #12
  %25 = getelementptr inbounds i8, i8* %24, i64 2
  %26 = add i32 %7, 4
  tail call void @opj_write_bytes_LE(i8* %25, i32 %26, i32 2) #12
  %27 = getelementptr inbounds i8, i8* %24, i64 4
  %28 = load i32, i32* %6, align 8
  tail call void @opj_write_bytes_LE(i8* %27, i32 %28, i32 2) #12
  %29 = load i32, i32* %6, align 8
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %51, label %31

31:                                               ; preds = %23
  %32 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 6
  %33 = load %struct.opj_image_comp*, %struct.opj_image_comp** %32, align 8
  %34 = getelementptr inbounds i8, i8* %24, i64 6
  br label %35

35:                                               ; preds = %35, %31
  %36 = phi %struct.opj_image_comp* [ %47, %35 ], [ %33, %31 ]
  %37 = phi i8* [ %46, %35 ], [ %34, %31 ]
  %38 = phi i32 [ %48, %35 ], [ 0, %31 ]
  %39 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %36, i64 0, i32 8
  %40 = load i32, i32* %39, align 8
  %41 = shl i32 %40, 7
  %42 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %36, i64 0, i32 6
  %43 = load i32, i32* %42, align 8
  %44 = add i32 %43, -1
  %45 = or i32 %44, %41
  tail call void @opj_write_bytes_LE(i8* %37, i32 %45, i32 1) #12
  %46 = getelementptr inbounds i8, i8* %37, i64 1
  %47 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %36, i64 1
  %48 = add nuw i32 %38, 1
  %49 = load i32, i32* %6, align 8
  %50 = icmp ult i32 %48, %49
  br i1 %50, label %35, label %51

51:                                               ; preds = %35, %23
  %52 = load i8*, i8** %13, align 8
  %53 = zext i32 %8 to i64
  %54 = tail call i64 @opj_stream_write_data(%struct.opj_stream_private* %1, i8* %52, i64 %53, %struct.opj_event_mgr* %2) #12
  %55 = icmp eq i64 %54, %53
  br i1 %55, label %56, label %270

56:                                               ; preds = %51
  %57 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %58 = load %struct.opj_tcp*, %struct.opj_tcp** %57, align 8
  %59 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 8
  %60 = load i32, i32* %59, align 8
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %58, i64 %61, i32 24
  %63 = load i32, i32* %62, align 8
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %116, label %65

65:                                               ; preds = %56
  %66 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %58, i64 %61, i32 23
  %67 = load %struct.opj_mct_data*, %struct.opj_mct_data** %66, align 8
  br label %68

68:                                               ; preds = %65, %111
  %69 = phi %struct.opj_mct_data* [ %112, %111 ], [ %67, %65 ]
  %70 = phi i32 [ %113, %111 ], [ 0, %65 ]
  %71 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %69, i64 0, i32 4
  %72 = load i32, i32* %71, align 8
  %73 = add i32 %72, 10
  %74 = load i32, i32* %9, align 8
  %75 = icmp ugt i32 %73, %74
  %76 = load i8*, i8** %13, align 8
  %77 = zext i32 %73 to i64
  br i1 %75, label %78, label %85

78:                                               ; preds = %68
  %79 = tail call i8* @opj_realloc(i8* %76, i64 %77) #12
  %80 = icmp eq i8* %79, null
  br i1 %80, label %81, label %84

81:                                               ; preds = %78
  %82 = load i8*, i8** %13, align 8
  tail call void @opj_free(i8* %82) #12
  store i8* null, i8** %13, align 8
  store i32 0, i32* %9, align 8
  %83 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.300, i64 0, i64 0)) #12
  br label %270

84:                                               ; preds = %78
  store i8* %79, i8** %13, align 8
  store i32 %73, i32* %9, align 8
  br label %85

85:                                               ; preds = %68, %84
  %86 = phi i8* [ %79, %84 ], [ %76, %68 ]
  tail call void @opj_write_bytes_LE(i8* %86, i32 65396, i32 2) #12
  %87 = getelementptr inbounds i8, i8* %86, i64 2
  %88 = add i32 %72, 8
  tail call void @opj_write_bytes_LE(i8* %87, i32 %88, i32 2) #12
  %89 = getelementptr inbounds i8, i8* %86, i64 4
  tail call void @opj_write_bytes_LE(i8* %89, i32 0, i32 2) #12
  %90 = getelementptr inbounds i8, i8* %86, i64 6
  %91 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %69, i64 0, i32 2
  %92 = load i32, i32* %91, align 8
  %93 = and i32 %92, 255
  %94 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %69, i64 0, i32 1
  %95 = load i32, i32* %94, align 4
  %96 = shl i32 %95, 8
  %97 = or i32 %96, %93
  %98 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %69, i64 0, i32 0
  %99 = load i32, i32* %98, align 8
  %100 = shl i32 %99, 10
  %101 = or i32 %97, %100
  tail call void @opj_write_bytes_LE(i8* %90, i32 %101, i32 2) #12
  %102 = getelementptr inbounds i8, i8* %86, i64 8
  tail call void @opj_write_bytes_LE(i8* %102, i32 0, i32 2) #12
  %103 = getelementptr inbounds i8, i8* %86, i64 10
  %104 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %69, i64 0, i32 3
  %105 = load i8*, i8** %104, align 8
  %106 = load i32, i32* %71, align 8
  %107 = zext i32 %106 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %103, i8* align 1 %105, i64 %107, i1 false) #12
  %108 = load i8*, i8** %13, align 8
  %109 = tail call i64 @opj_stream_write_data(%struct.opj_stream_private* %1, i8* %108, i64 %77, %struct.opj_event_mgr* %2) #12
  %110 = icmp eq i64 %109, %77
  br i1 %110, label %111, label %270

111:                                              ; preds = %85
  %112 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %69, i64 1
  %113 = add nuw i32 %70, 1
  %114 = load i32, i32* %62, align 8
  %115 = icmp ult i32 %113, %114
  br i1 %115, label %68, label %116

116:                                              ; preds = %111, %56
  %117 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %58, i64 %61, i32 27
  %118 = load i32, i32* %117, align 8
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %223, label %120

120:                                              ; preds = %116
  %121 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %58, i64 %61, i32 26
  %122 = load %struct.opj_simple_mcc_decorrelation_data*, %struct.opj_simple_mcc_decorrelation_data** %121, align 8
  br label %123

123:                                              ; preds = %120, %218
  %124 = phi %struct.opj_simple_mcc_decorrelation_data* [ %219, %218 ], [ %122, %120 ]
  %125 = phi i32 [ %220, %218 ], [ 0, %120 ]
  %126 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %124, i64 0, i32 1
  %127 = load i32, i32* %126, align 4
  %128 = icmp ugt i32 %127, 255
  %129 = select i1 %128, i32 2, i32 1
  %130 = select i1 %128, i32 32768, i32 0
  %131 = shl i32 %127, 1
  %132 = mul i32 %129, %131
  %133 = add i32 %132, 19
  %134 = load i32, i32* %9, align 8
  %135 = icmp ugt i32 %133, %134
  %136 = load i8*, i8** %13, align 8
  br i1 %135, label %137, label %145

137:                                              ; preds = %123
  %138 = zext i32 %133 to i64
  %139 = tail call i8* @opj_realloc(i8* %136, i64 %138) #12
  %140 = icmp eq i8* %139, null
  br i1 %140, label %141, label %144

141:                                              ; preds = %137
  %142 = load i8*, i8** %13, align 8
  tail call void @opj_free(i8* %142) #12
  store i8* null, i8** %13, align 8
  store i32 0, i32* %9, align 8
  %143 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.301, i64 0, i64 0)) #12
  br label %270

144:                                              ; preds = %137
  store i8* %139, i8** %13, align 8
  store i32 %133, i32* %9, align 8
  br label %145

145:                                              ; preds = %144, %123
  %146 = phi i8* [ %139, %144 ], [ %136, %123 ]
  tail call void @opj_write_bytes_LE(i8* %146, i32 65397, i32 2) #12
  %147 = getelementptr inbounds i8, i8* %146, i64 2
  %148 = add i32 %132, 17
  tail call void @opj_write_bytes_LE(i8* %147, i32 %148, i32 2) #12
  %149 = getelementptr inbounds i8, i8* %146, i64 4
  tail call void @opj_write_bytes_LE(i8* %149, i32 0, i32 2) #12
  %150 = getelementptr inbounds i8, i8* %146, i64 6
  %151 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %124, i64 0, i32 0
  %152 = load i32, i32* %151, align 8
  tail call void @opj_write_bytes_LE(i8* %150, i32 %152, i32 1) #12
  %153 = getelementptr inbounds i8, i8* %146, i64 7
  tail call void @opj_write_bytes_LE(i8* %153, i32 0, i32 2) #12
  %154 = getelementptr inbounds i8, i8* %146, i64 9
  tail call void @opj_write_bytes_LE(i8* %154, i32 1, i32 2) #12
  %155 = getelementptr inbounds i8, i8* %146, i64 11
  tail call void @opj_write_bytes_LE(i8* %155, i32 1, i32 1) #12
  %156 = getelementptr inbounds i8, i8* %146, i64 12
  %157 = load i32, i32* %126, align 4
  %158 = or i32 %157, %130
  tail call void @opj_write_bytes_LE(i8* %156, i32 %158, i32 2) #12
  %159 = getelementptr inbounds i8, i8* %146, i64 14
  %160 = load i32, i32* %126, align 4
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %171, label %162

162:                                              ; preds = %145
  %163 = zext i32 %129 to i64
  br label %164

164:                                              ; preds = %164, %162
  %165 = phi i8* [ %159, %162 ], [ %167, %164 ]
  %166 = phi i32 [ 0, %162 ], [ %168, %164 ]
  tail call void @opj_write_bytes_LE(i8* %165, i32 %166, i32 %129) #12
  %167 = getelementptr inbounds i8, i8* %165, i64 %163
  %168 = add nuw i32 %166, 1
  %169 = load i32, i32* %126, align 4
  %170 = icmp ult i32 %168, %169
  br i1 %170, label %164, label %171

171:                                              ; preds = %164, %145
  %172 = phi i8* [ %159, %145 ], [ %167, %164 ]
  %173 = phi i32 [ 0, %145 ], [ %169, %164 ]
  %174 = or i32 %173, %130
  tail call void @opj_write_bytes_LE(i8* %172, i32 %174, i32 2) #12
  %175 = getelementptr inbounds i8, i8* %172, i64 2
  %176 = load i32, i32* %126, align 4
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %187, label %178

178:                                              ; preds = %171
  %179 = zext i32 %129 to i64
  br label %180

180:                                              ; preds = %180, %178
  %181 = phi i8* [ %175, %178 ], [ %183, %180 ]
  %182 = phi i32 [ 0, %178 ], [ %184, %180 ]
  tail call void @opj_write_bytes_LE(i8* %181, i32 %182, i32 %129) #12
  %183 = getelementptr inbounds i8, i8* %181, i64 %179
  %184 = add nuw i32 %182, 1
  %185 = load i32, i32* %126, align 4
  %186 = icmp ult i32 %184, %185
  br i1 %186, label %180, label %187

187:                                              ; preds = %180, %171
  %188 = phi i8* [ %175, %171 ], [ %183, %180 ]
  %189 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %124, i64 0, i32 4
  %190 = load i8, i8* %189, align 8
  %191 = and i8 %190, 1
  %192 = xor i8 %191, 1
  %193 = zext i8 %192 to i32
  %194 = shl nuw nsw i32 %193, 16
  %195 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %124, i64 0, i32 2
  %196 = load %struct.opj_mct_data*, %struct.opj_mct_data** %195, align 8
  %197 = icmp eq %struct.opj_mct_data* %196, null
  br i1 %197, label %202, label %198

198:                                              ; preds = %187
  %199 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %196, i64 0, i32 2
  %200 = load i32, i32* %199, align 8
  %201 = or i32 %200, %194
  br label %202

202:                                              ; preds = %198, %187
  %203 = phi i32 [ %201, %198 ], [ %194, %187 ]
  %204 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %124, i64 0, i32 3
  %205 = load %struct.opj_mct_data*, %struct.opj_mct_data** %204, align 8
  %206 = icmp eq %struct.opj_mct_data* %205, null
  br i1 %206, label %212, label %207

207:                                              ; preds = %202
  %208 = getelementptr inbounds %struct.opj_mct_data, %struct.opj_mct_data* %205, i64 0, i32 2
  %209 = load i32, i32* %208, align 8
  %210 = shl i32 %209, 8
  %211 = or i32 %210, %203
  br label %212

212:                                              ; preds = %202, %207
  %213 = phi i32 [ %211, %207 ], [ %203, %202 ]
  tail call void @opj_write_bytes_LE(i8* %188, i32 %213, i32 3) #12
  %214 = load i8*, i8** %13, align 8
  %215 = zext i32 %133 to i64
  %216 = tail call i64 @opj_stream_write_data(%struct.opj_stream_private* %1, i8* %214, i64 %215, %struct.opj_event_mgr* %2) #12
  %217 = icmp eq i64 %216, %215
  br i1 %217, label %218, label %270

218:                                              ; preds = %212
  %219 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %124, i64 1
  %220 = add nuw i32 %125, 1
  %221 = load i32, i32* %117, align 8
  %222 = icmp ult i32 %220, %221
  br i1 %222, label %123, label %223

223:                                              ; preds = %218, %116
  %224 = load %struct.opj_tcp*, %struct.opj_tcp** %57, align 8
  %225 = load i32, i32* %59, align 8
  %226 = zext i32 %225 to i64
  %227 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %224, i64 %226, i32 27
  %228 = load i32, i32* %227, align 8
  %229 = add i32 %228, 5
  %230 = load i32, i32* %9, align 8
  %231 = icmp ugt i32 %229, %230
  %232 = load i8*, i8** %13, align 8
  br i1 %231, label %233, label %241

233:                                              ; preds = %223
  %234 = zext i32 %229 to i64
  %235 = tail call i8* @opj_realloc(i8* %232, i64 %234) #12
  %236 = icmp eq i8* %235, null
  br i1 %236, label %237, label %240

237:                                              ; preds = %233
  %238 = load i8*, i8** %13, align 8
  tail call void @opj_free(i8* %238) #12
  store i8* null, i8** %13, align 8
  store i32 0, i32* %9, align 8
  %239 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.302, i64 0, i64 0)) #12
  br label %269

240:                                              ; preds = %233
  store i8* %235, i8** %13, align 8
  store i32 %229, i32* %9, align 8
  br label %241

241:                                              ; preds = %240, %223
  %242 = phi i8* [ %235, %240 ], [ %232, %223 ]
  tail call void @opj_write_bytes_LE(i8* %242, i32 65399, i32 2) #12
  %243 = getelementptr inbounds i8, i8* %242, i64 2
  %244 = add i32 %228, 3
  tail call void @opj_write_bytes_LE(i8* %243, i32 %244, i32 2) #12
  %245 = getelementptr inbounds i8, i8* %242, i64 4
  %246 = load i32, i32* %227, align 8
  tail call void @opj_write_bytes_LE(i8* %245, i32 %246, i32 1) #12
  %247 = load i32, i32* %227, align 8
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %264, label %249

249:                                              ; preds = %241
  %250 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %224, i64 %226, i32 26
  %251 = load %struct.opj_simple_mcc_decorrelation_data*, %struct.opj_simple_mcc_decorrelation_data** %250, align 8
  %252 = getelementptr inbounds i8, i8* %242, i64 5
  br label %253

253:                                              ; preds = %253, %249
  %254 = phi i32 [ %261, %253 ], [ 0, %249 ]
  %255 = phi %struct.opj_simple_mcc_decorrelation_data* [ %260, %253 ], [ %251, %249 ]
  %256 = phi i8* [ %259, %253 ], [ %252, %249 ]
  %257 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %255, i64 0, i32 0
  %258 = load i32, i32* %257, align 8
  tail call void @opj_write_bytes_LE(i8* %256, i32 %258, i32 1) #12
  %259 = getelementptr inbounds i8, i8* %256, i64 1
  %260 = getelementptr inbounds %struct.opj_simple_mcc_decorrelation_data, %struct.opj_simple_mcc_decorrelation_data* %255, i64 1
  %261 = add nuw i32 %254, 1
  %262 = load i32, i32* %227, align 8
  %263 = icmp ult i32 %261, %262
  br i1 %263, label %253, label %264

264:                                              ; preds = %253, %241
  %265 = load i8*, i8** %13, align 8
  %266 = zext i32 %229 to i64
  %267 = tail call i64 @opj_stream_write_data(%struct.opj_stream_private* %1, i8* %265, i64 %266, %struct.opj_event_mgr* %2) #12
  %268 = icmp eq i64 %267, %266
  br i1 %268, label %270, label %269

269:                                              ; preds = %264, %237
  br label %270

270:                                              ; preds = %85, %212, %264, %51, %269, %141, %81, %19
  %271 = phi i32 [ 0, %51 ], [ 0, %19 ], [ 0, %81 ], [ 0, %141 ], [ 0, %269 ], [ 1, %264 ], [ 0, %212 ], [ 0, %85 ]
  ret i32 %271
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_get_end_header(%struct.opj_j2k* nocapture readonly, %struct.opj_stream_private*, %struct.opj_event_mgr* nocapture readnone) #3 {
  %4 = tail call i64 @opj_stream_tell(%struct.opj_stream_private* %1) #12
  %5 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 7
  %6 = load %struct.opj_codestream_index*, %struct.opj_codestream_index** %5, align 8
  %7 = getelementptr inbounds %struct.opj_codestream_index, %struct.opj_codestream_index* %6, i64 0, i32 1
  store i64 %4, i64* %7, align 8
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_create_tcd(%struct.opj_j2k*, %struct.opj_stream_private* nocapture readnone, %struct.opj_event_mgr*) #3 {
  %4 = tail call %struct.opj_tcd* @opj_tcd_create(i32 0) #12
  %5 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 9
  store %struct.opj_tcd* %4, %struct.opj_tcd** %5, align 8
  %6 = icmp eq %struct.opj_tcd* %4, null
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.303, i64 0, i64 0)) #12
  br label %19

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %11 = load %struct.opj_image*, %struct.opj_image** %10, align 8
  %12 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4
  %13 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 10
  %14 = load %struct.opj_thread_pool_t*, %struct.opj_thread_pool_t** %13, align 8
  %15 = tail call i32 @opj_tcd_init(%struct.opj_tcd* nonnull %4, %struct.opj_image* %11, %struct.opj_cp* %12, %struct.opj_thread_pool_t* %14) #12
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %9
  %18 = load %struct.opj_tcd*, %struct.opj_tcd** %5, align 8
  tail call void @opj_tcd_destroy(%struct.opj_tcd* %18) #12
  store %struct.opj_tcd* null, %struct.opj_tcd** %5, align 8
  br label %19

19:                                               ; preds = %9, %17, %7
  %20 = phi i32 [ 0, %17 ], [ 0, %7 ], [ 1, %9 ]
  ret i32 %20
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @opj_j2k_update_rates(%struct.opj_j2k*, %struct.opj_stream_private*, %struct.opj_event_mgr*) #3 {
  %4 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 2
  %5 = load %struct.opj_image*, %struct.opj_image** %4, align 8
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %7 = load %struct.opj_tcp*, %struct.opj_tcp** %6, align 8
  %8 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 6
  %9 = load %struct.opj_image_comp*, %struct.opj_image_comp** %8, align 8
  %10 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %9, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %9, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %9, i64 0, i32 6
  %17 = load i32, i32* %16, align 8
  %18 = tail call i64 @opj_stream_tell(%struct.opj_stream_private* %1) #12
  %19 = sitofp i64 %18 to float
  %20 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 7
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 6
  %23 = load i32, i32* %22, align 8
  %24 = mul i32 %23, %21
  %25 = uitofp i32 %24 to float
  %26 = fdiv float %19, %25
  %27 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 20, i32 0, i32 4
  %28 = load i8, i8* %27, align 1
  %29 = and i8 %28, 8
  %30 = icmp eq i8 %29, 0
  %31 = select i1 %30, float (%struct.opj_tcp*)* @opj_j2k_get_default_stride, float (%struct.opj_tcp*)* @opj_j2k_get_tp_stride
  %32 = icmp eq i32 %21, 0
  br i1 %32, label %227, label %33

33:                                               ; preds = %3
  %34 = mul i32 %17, %15
  %35 = shl i32 %11, 3
  %36 = mul i32 %35, %13
  %37 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 1
  %38 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 3
  %39 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 0
  %40 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 2
  %41 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 4
  %42 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 1
  %43 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 2
  %44 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %5, i64 0, i32 3
  %45 = uitofp i32 %34 to double
  %46 = uitofp i32 %36 to float
  br label %47

47:                                               ; preds = %33, %121
  %48 = phi i32 [ %23, %33 ], [ %122, %121 ]
  %49 = phi i32 [ %21, %33 ], [ %123, %121 ]
  %50 = phi i32 [ %23, %33 ], [ %124, %121 ]
  %51 = phi i32 [ 0, %33 ], [ %54, %121 ]
  %52 = phi %struct.opj_tcp* [ %7, %33 ], [ %125, %121 ]
  %53 = icmp eq i32 %50, 0
  %54 = add nuw i32 %51, 1
  br i1 %53, label %121, label %55

55:                                               ; preds = %47, %115
  %56 = phi i32 [ %73, %115 ], [ 0, %47 ]
  %57 = phi %struct.opj_tcp* [ %116, %115 ], [ %52, %47 ]
  %58 = tail call float %31(%struct.opj_tcp* %57) #12, !callees !80
  %59 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %57, i64 0, i32 2
  %60 = load i32, i32* %59, align 8
  %61 = uitofp i32 %60 to float
  %62 = fdiv float %58, %61
  %63 = load i32, i32* %37, align 4
  %64 = load i32, i32* %38, align 4
  %65 = mul i32 %64, %56
  %66 = add i32 %65, %63
  %67 = load i32, i32* %39, align 8
  %68 = load i32, i32* %40, align 8
  %69 = load i32, i32* %41, align 8
  %70 = mul i32 %69, %51
  %71 = add i32 %70, %68
  %72 = load i32, i32* %42, align 4
  %73 = add nuw i32 %56, 1
  %74 = mul i32 %64, %73
  %75 = add i32 %74, %63
  %76 = load i32, i32* %43, align 8
  %77 = mul i32 %69, %54
  %78 = add i32 %77, %68
  %79 = load i32, i32* %44, align 4
  %80 = icmp eq i32 %60, 0
  br i1 %80, label %115, label %81

81:                                               ; preds = %55
  %82 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %57, i64 0, i32 5, i64 0
  %83 = icmp slt i32 %78, %79
  %84 = select i1 %83, i32 %78, i32 %79
  %85 = icmp slt i32 %75, %76
  %86 = select i1 %85, i32 %75, i32 %76
  %87 = icmp sgt i32 %71, %72
  %88 = select i1 %87, i32 %71, i32 %72
  %89 = icmp sgt i32 %66, %67
  %90 = select i1 %89, i32 %66, i32 %67
  %91 = sub nsw i32 %86, %90
  %92 = uitofp i32 %91 to double
  %93 = fmul double %45, %92
  %94 = sub nsw i32 %84, %88
  %95 = uitofp i32 %94 to double
  %96 = fmul double %93, %95
  br label %97

97:                                               ; preds = %81, %110
  %98 = phi i32 [ %60, %81 ], [ %111, %110 ]
  %99 = phi float* [ %82, %81 ], [ %112, %110 ]
  %100 = phi i32 [ 0, %81 ], [ %113, %110 ]
  %101 = load float, float* %99, align 4
  %102 = fcmp ogt float %101, 0.000000e+00
  br i1 %102, label %103, label %110

103:                                              ; preds = %97
  %104 = fmul float %101, %46
  %105 = fpext float %104 to double
  %106 = fdiv double %96, %105
  %107 = fptrunc double %106 to float
  %108 = fsub float %107, %62
  store float %108, float* %99, align 4
  %109 = load i32, i32* %59, align 8
  br label %110

110:                                              ; preds = %103, %97
  %111 = phi i32 [ %109, %103 ], [ %98, %97 ]
  %112 = getelementptr inbounds float, float* %99, i64 1
  %113 = add nuw i32 %100, 1
  %114 = icmp ult i32 %113, %111
  br i1 %114, label %97, label %115

115:                                              ; preds = %110, %55
  %116 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %57, i64 1
  %117 = load i32, i32* %22, align 8
  %118 = icmp ult i32 %73, %117
  br i1 %118, label %55, label %119

119:                                              ; preds = %115
  %120 = load i32, i32* %20, align 4
  br label %121

121:                                              ; preds = %47, %119
  %122 = phi i32 [ %117, %119 ], [ %48, %47 ]
  %123 = phi i32 [ %120, %119 ], [ %49, %47 ]
  %124 = phi i32 [ %117, %119 ], [ 0, %47 ]
  %125 = phi %struct.opj_tcp* [ %116, %119 ], [ %52, %47 ]
  %126 = icmp ult i32 %54, %123
  br i1 %126, label %47, label %127

127:                                              ; preds = %121
  %128 = icmp eq i32 %123, 0
  br i1 %128, label %227, label %129

129:                                              ; preds = %127
  %130 = load %struct.opj_tcp*, %struct.opj_tcp** %6, align 8
  %131 = fadd float %26, 2.000000e+00
  br label %132

132:                                              ; preds = %129, %220
  %133 = phi i32 [ %122, %129 ], [ %221, %220 ]
  %134 = phi i32 [ %123, %129 ], [ %222, %220 ]
  %135 = phi i32 [ %122, %129 ], [ %223, %220 ]
  %136 = phi i32 [ 0, %129 ], [ %225, %220 ]
  %137 = phi %struct.opj_tcp* [ %130, %129 ], [ %224, %220 ]
  %138 = icmp eq i32 %135, 0
  br i1 %138, label %220, label %139

139:                                              ; preds = %132, %213
  %140 = phi i32 [ %215, %213 ], [ 0, %132 ]
  %141 = phi %struct.opj_tcp* [ %214, %213 ], [ %137, %132 ]
  %142 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %141, i64 0, i32 5, i64 0
  %143 = load float, float* %142, align 4
  %144 = fcmp ogt float %143, 0.000000e+00
  br i1 %144, label %145, label %149

145:                                              ; preds = %139
  %146 = fsub float %143, %26
  store float %146, float* %142, align 4
  %147 = fcmp olt float %146, 3.000000e+01
  br i1 %147, label %148, label %149

148:                                              ; preds = %145
  store float 3.000000e+01, float* %142, align 4
  br label %149

149:                                              ; preds = %145, %148, %139
  %150 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %141, i64 0, i32 5, i64 1
  %151 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %141, i64 0, i32 2
  %152 = load i32, i32* %151, align 8
  %153 = add i32 %152, -1
  %154 = icmp ugt i32 %153, 1
  %155 = load float, float* %150, align 4
  %156 = fcmp ogt float %155, 0.000000e+00
  br i1 %154, label %157, label %201

157:                                              ; preds = %149
  %158 = add i32 %152, -2
  %159 = and i32 %158, 1
  %160 = icmp eq i32 %152, 3
  br i1 %160, label %180, label %161

161:                                              ; preds = %157
  %162 = sub i32 %158, %159
  br label %163

163:                                              ; preds = %619, %161
  %164 = phi i1 [ %156, %161 ], [ %622, %619 ]
  %165 = phi float [ %155, %161 ], [ %621, %619 ]
  %166 = phi float* [ %150, %161 ], [ %620, %619 ]
  %167 = phi i32 [ %162, %161 ], [ %623, %619 ]
  br i1 %164, label %168, label %176

168:                                              ; preds = %163
  %169 = fsub float %165, %26
  store float %169, float* %166, align 4
  %170 = getelementptr inbounds float, float* %166, i64 -1
  %171 = load float, float* %170, align 4
  %172 = fadd float %171, 1.000000e+01
  %173 = fcmp olt float %169, %172
  br i1 %173, label %174, label %176

174:                                              ; preds = %168
  %175 = fadd float %171, 2.000000e+01
  store float %175, float* %166, align 4
  br label %176

176:                                              ; preds = %168, %174, %163
  %177 = getelementptr inbounds float, float* %166, i64 1
  %178 = load float, float* %177, align 4
  %179 = fcmp ogt float %178, 0.000000e+00
  br i1 %179, label %612, label %619

180:                                              ; preds = %619, %157
  %181 = phi float* [ undef, %157 ], [ %620, %619 ]
  %182 = phi float [ undef, %157 ], [ %621, %619 ]
  %183 = phi i1 [ undef, %157 ], [ %622, %619 ]
  %184 = phi i1 [ %156, %157 ], [ %622, %619 ]
  %185 = phi float [ %155, %157 ], [ %621, %619 ]
  %186 = phi float* [ %150, %157 ], [ %620, %619 ]
  %187 = icmp eq i32 %159, 0
  br i1 %187, label %201, label %188

188:                                              ; preds = %180
  br i1 %184, label %189, label %197

189:                                              ; preds = %188
  %190 = fsub float %185, %26
  store float %190, float* %186, align 4
  %191 = getelementptr inbounds float, float* %186, i64 -1
  %192 = load float, float* %191, align 4
  %193 = fadd float %192, 1.000000e+01
  %194 = fcmp olt float %190, %193
  br i1 %194, label %195, label %197

195:                                              ; preds = %189
  %196 = fadd float %192, 2.000000e+01
  store float %196, float* %186, align 4
  br label %197

197:                                              ; preds = %195, %189, %188
  %198 = getelementptr inbounds float, float* %186, i64 1
  %199 = load float, float* %198, align 4
  %200 = fcmp ogt float %199, 0.000000e+00
  br label %201

201:                                              ; preds = %197, %180, %149
  %202 = phi float* [ %150, %149 ], [ %181, %180 ], [ %198, %197 ]
  %203 = phi float [ %155, %149 ], [ %182, %180 ], [ %199, %197 ]
  %204 = phi i1 [ %156, %149 ], [ %183, %180 ], [ %200, %197 ]
  br i1 %204, label %205, label %213

205:                                              ; preds = %201
  %206 = fsub float %203, %131
  store float %206, float* %202, align 4
  %207 = getelementptr inbounds float, float* %202, i64 -1
  %208 = load float, float* %207, align 4
  %209 = fadd float %208, 1.000000e+01
  %210 = fcmp olt float %206, %209
  br i1 %210, label %211, label %213

211:                                              ; preds = %205
  %212 = fadd float %208, 2.000000e+01
  store float %212, float* %202, align 4
  br label %213

213:                                              ; preds = %205, %211, %201
  %214 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %141, i64 1
  %215 = add nuw i32 %140, 1
  %216 = load i32, i32* %22, align 8
  %217 = icmp ult i32 %215, %216
  br i1 %217, label %139, label %218

218:                                              ; preds = %213
  %219 = load i32, i32* %20, align 4
  br label %220

220:                                              ; preds = %218, %132
  %221 = phi i32 [ %133, %132 ], [ %216, %218 ]
  %222 = phi i32 [ %134, %132 ], [ %219, %218 ]
  %223 = phi i32 [ 0, %132 ], [ %216, %218 ]
  %224 = phi %struct.opj_tcp* [ %137, %132 ], [ %214, %218 ]
  %225 = add nuw i32 %136, 1
  %226 = icmp ult i32 %225, %222
  br i1 %226, label %132, label %227

227:                                              ; preds = %220, %3, %127
  %228 = phi i32 [ %122, %127 ], [ %23, %3 ], [ %221, %220 ]
  %229 = phi i32 [ 0, %127 ], [ 0, %3 ], [ %222, %220 ]
  %230 = load i32, i32* %14, align 8
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %273, label %232

232:                                              ; preds = %227
  %233 = load %struct.opj_image_comp*, %struct.opj_image_comp** %8, align 8
  %234 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 3
  %235 = load i32, i32* %234, align 4
  %236 = zext i32 %235 to i64
  %237 = add nsw i64 %236, -1
  %238 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 4
  %239 = load i32, i32* %238, align 8
  %240 = zext i32 %239 to i64
  %241 = add nsw i64 %240, -1
  br label %242

242:                                              ; preds = %232, %242
  %243 = phi i64 [ 0, %232 ], [ %263, %242 ]
  %244 = phi i32 [ 0, %232 ], [ %265, %242 ]
  %245 = phi %struct.opj_image_comp* [ %233, %232 ], [ %264, %242 ]
  %246 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %245, i64 0, i32 0
  %247 = load i32, i32* %246, align 8
  %248 = zext i32 %247 to i64
  %249 = add nsw i64 %237, %248
  %250 = udiv i64 %249, %248
  %251 = and i64 %250, 4294967295
  %252 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %245, i64 0, i32 1
  %253 = load i32, i32* %252, align 4
  %254 = zext i32 %253 to i64
  %255 = add nsw i64 %241, %254
  %256 = udiv i64 %255, %254
  %257 = and i64 %256, 4294967295
  %258 = mul nuw i64 %257, %251
  %259 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %245, i64 0, i32 6
  %260 = load i32, i32* %259, align 8
  %261 = zext i32 %260 to i64
  %262 = mul i64 %258, %261
  %263 = add i64 %262, %243
  %264 = getelementptr inbounds %struct.opj_image_comp, %struct.opj_image_comp* %245, i64 1
  %265 = add nuw i32 %244, 1
  %266 = icmp ult i32 %265, %230
  br i1 %266, label %242, label %267

267:                                              ; preds = %242
  %268 = uitofp i64 %263 to double
  %269 = fmul double %268, 1.400000e+00
  %270 = fmul double %269, 1.250000e-01
  %271 = fptoui double %270 to i64
  %272 = add i64 %271, 500
  br label %273

273:                                              ; preds = %267, %227
  %274 = phi i64 [ 500, %227 ], [ %272, %267 ]
  %275 = load %struct.opj_image*, %struct.opj_image** %4, align 8
  %276 = getelementptr inbounds %struct.opj_image, %struct.opj_image* %275, i64 0, i32 4
  %277 = load i32, i32* %276, align 8
  %278 = add i32 %277, -1
  %279 = mul i32 %228, %229
  %280 = icmp eq i32 %279, 0
  br i1 %280, label %330, label %281

281:                                              ; preds = %273
  %282 = load %struct.opj_tcp*, %struct.opj_tcp** %6, align 8
  %283 = add i32 %279, -1
  %284 = and i32 %279, 3
  %285 = icmp ult i32 %283, 3
  br i1 %285, label %311, label %286

286:                                              ; preds = %281
  %287 = sub i32 %279, %284
  br label %288

288:                                              ; preds = %288, %286
  %289 = phi %struct.opj_tcp* [ %282, %286 ], [ %308, %288 ]
  %290 = phi i32 [ 0, %286 ], [ %307, %288 ]
  %291 = phi i32 [ %287, %286 ], [ %309, %288 ]
  %292 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %289, i64 0, i32 17
  %293 = load i32, i32* %292, align 4
  %294 = icmp ugt i32 %290, %293
  %295 = select i1 %294, i32 %290, i32 %293
  %296 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %289, i64 1, i32 17
  %297 = load i32, i32* %296, align 4
  %298 = icmp ugt i32 %295, %297
  %299 = select i1 %298, i32 %295, i32 %297
  %300 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %289, i64 2, i32 17
  %301 = load i32, i32* %300, align 4
  %302 = icmp ugt i32 %299, %301
  %303 = select i1 %302, i32 %299, i32 %301
  %304 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %289, i64 3, i32 17
  %305 = load i32, i32* %304, align 4
  %306 = icmp ugt i32 %303, %305
  %307 = select i1 %306, i32 %303, i32 %305
  %308 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %289, i64 4
  %309 = add i32 %291, -4
  %310 = icmp eq i32 %309, 0
  br i1 %310, label %311, label %288

311:                                              ; preds = %288, %281
  %312 = phi i32 [ undef, %281 ], [ %307, %288 ]
  %313 = phi %struct.opj_tcp* [ %282, %281 ], [ %308, %288 ]
  %314 = phi i32 [ 0, %281 ], [ %307, %288 ]
  %315 = icmp eq i32 %284, 0
  br i1 %315, label %327, label %316

316:                                              ; preds = %311, %316
  %317 = phi %struct.opj_tcp* [ %324, %316 ], [ %313, %311 ]
  %318 = phi i32 [ %323, %316 ], [ %314, %311 ]
  %319 = phi i32 [ %325, %316 ], [ %284, %311 ]
  %320 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %317, i64 0, i32 17
  %321 = load i32, i32* %320, align 4
  %322 = icmp ugt i32 %318, %321
  %323 = select i1 %322, i32 %318, i32 %321
  %324 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %317, i64 1
  %325 = add i32 %319, -1
  %326 = icmp eq i32 %325, 0
  br i1 %326, label %327, label %316, !llvm.loop !81

327:                                              ; preds = %316, %311
  %328 = phi i32 [ %312, %311 ], [ %323, %316 ]
  %329 = mul i32 %328, 12
  br label %330

330:                                              ; preds = %327, %273
  %331 = phi i32 [ 0, %273 ], [ %329, %327 ]
  %332 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4
  %333 = getelementptr inbounds %struct.opj_cp, %struct.opj_cp* %332, i64 0, i32 0
  %334 = load i16, i16* %333, align 8
  %335 = add i16 %334, -3
  %336 = icmp ult i16 %335, 4
  br i1 %336, label %462, label %337

337:                                              ; preds = %330
  br i1 %280, label %338, label %341

338:                                              ; preds = %337
  %339 = mul i32 %278, 6
  %340 = add i32 %331, %339
  br label %456

341:                                              ; preds = %337
  %342 = icmp eq i32 %277, 0
  %343 = zext i32 %279 to i64
  %344 = zext i32 %277 to i64
  %345 = and i64 %344, 1
  %346 = icmp eq i32 %277, 1
  %347 = sub nsw i64 %344, %345
  %348 = icmp eq i64 %345, 0
  br label %349

349:                                              ; preds = %394, %341
  %350 = phi i64 [ 0, %341 ], [ %396, %394 ]
  %351 = phi i32 [ 0, %341 ], [ %395, %394 ]
  br i1 %342, label %394, label %352

352:                                              ; preds = %349
  %353 = load %struct.opj_tcp*, %struct.opj_tcp** %6, align 8
  %354 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %353, i64 %350, i32 15
  %355 = load %struct.opj_tccp*, %struct.opj_tccp** %354, align 8
  br i1 %346, label %377, label %356

356:                                              ; preds = %352, %605
  %357 = phi i64 [ %609, %605 ], [ 0, %352 ]
  %358 = phi i32 [ %608, %605 ], [ %351, %352 ]
  %359 = phi i64 [ %610, %605 ], [ %347, %352 ]
  %360 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %355, i64 %357, i32 0
  %361 = load i32, i32* %360, align 4
  %362 = and i32 %361, 1
  %363 = icmp eq i32 %362, 0
  br i1 %363, label %368, label %364

364:                                              ; preds = %356
  %365 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %355, i64 %357, i32 1
  %366 = load i32, i32* %365, align 4
  %367 = add i32 %366, 5
  br label %368

368:                                              ; preds = %364, %356
  %369 = phi i32 [ %367, %364 ], [ 5, %356 ]
  %370 = icmp ugt i32 %358, %369
  %371 = select i1 %370, i32 %358, i32 %369
  %372 = or i64 %357, 1
  %373 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %355, i64 %372, i32 0
  %374 = load i32, i32* %373, align 4
  %375 = and i32 %374, 1
  %376 = icmp eq i32 %375, 0
  br i1 %376, label %605, label %601

377:                                              ; preds = %605, %352
  %378 = phi i32 [ undef, %352 ], [ %608, %605 ]
  %379 = phi i64 [ 0, %352 ], [ %609, %605 ]
  %380 = phi i32 [ %351, %352 ], [ %608, %605 ]
  br i1 %348, label %394, label %381

381:                                              ; preds = %377
  %382 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %355, i64 %379, i32 0
  %383 = load i32, i32* %382, align 4
  %384 = and i32 %383, 1
  %385 = icmp eq i32 %384, 0
  br i1 %385, label %390, label %386

386:                                              ; preds = %381
  %387 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %355, i64 %379, i32 1
  %388 = load i32, i32* %387, align 4
  %389 = add i32 %388, 5
  br label %390

390:                                              ; preds = %381, %386
  %391 = phi i32 [ %389, %386 ], [ 5, %381 ]
  %392 = icmp ugt i32 %380, %391
  %393 = select i1 %392, i32 %380, i32 %391
  br label %394

394:                                              ; preds = %390, %377, %349
  %395 = phi i32 [ %351, %349 ], [ %378, %377 ], [ %393, %390 ]
  %396 = add nuw nsw i64 %350, 1
  %397 = icmp eq i64 %396, %343
  br i1 %397, label %398, label %349

398:                                              ; preds = %394
  %399 = add i32 %395, 6
  %400 = mul i32 %399, %278
  %401 = and i64 %344, 1
  %402 = icmp eq i32 %277, 1
  %403 = sub nsw i64 %344, %401
  %404 = icmp eq i64 %401, 0
  br label %405

405:                                              ; preds = %450, %398
  %406 = phi i64 [ 0, %398 ], [ %452, %450 ]
  %407 = phi i32 [ 0, %398 ], [ %451, %450 ]
  br i1 %342, label %450, label %408

408:                                              ; preds = %405
  %409 = load %struct.opj_tcp*, %struct.opj_tcp** %6, align 8
  %410 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %409, i64 %406, i32 15
  %411 = load %struct.opj_tccp*, %struct.opj_tccp** %410, align 8
  br i1 %402, label %433, label %412

412:                                              ; preds = %408, %594
  %413 = phi i64 [ %598, %594 ], [ 0, %408 ]
  %414 = phi i32 [ %597, %594 ], [ %407, %408 ]
  %415 = phi i64 [ %599, %594 ], [ %403, %408 ]
  %416 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %411, i64 %413, i32 0
  %417 = load i32, i32* %416, align 4
  %418 = and i32 %417, 1
  %419 = icmp eq i32 %418, 0
  br i1 %419, label %424, label %420

420:                                              ; preds = %412
  %421 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %411, i64 %413, i32 1
  %422 = load i32, i32* %421, align 4
  %423 = add i32 %422, 5
  br label %424

424:                                              ; preds = %420, %412
  %425 = phi i32 [ %423, %420 ], [ 5, %412 ]
  %426 = icmp ugt i32 %414, %425
  %427 = select i1 %426, i32 %414, i32 %425
  %428 = or i64 %413, 1
  %429 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %411, i64 %428, i32 0
  %430 = load i32, i32* %429, align 4
  %431 = and i32 %430, 1
  %432 = icmp eq i32 %431, 0
  br i1 %432, label %594, label %590

433:                                              ; preds = %594, %408
  %434 = phi i32 [ undef, %408 ], [ %597, %594 ]
  %435 = phi i64 [ 0, %408 ], [ %598, %594 ]
  %436 = phi i32 [ %407, %408 ], [ %597, %594 ]
  br i1 %404, label %450, label %437

437:                                              ; preds = %433
  %438 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %411, i64 %435, i32 0
  %439 = load i32, i32* %438, align 4
  %440 = and i32 %439, 1
  %441 = icmp eq i32 %440, 0
  br i1 %441, label %446, label %442

442:                                              ; preds = %437
  %443 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %411, i64 %435, i32 1
  %444 = load i32, i32* %443, align 4
  %445 = add i32 %444, 5
  br label %446

446:                                              ; preds = %437, %442
  %447 = phi i32 [ %445, %442 ], [ 5, %437 ]
  %448 = icmp ugt i32 %436, %447
  %449 = select i1 %448, i32 %436, i32 %447
  br label %450

450:                                              ; preds = %446, %433, %405
  %451 = phi i32 [ %407, %405 ], [ %434, %433 ], [ %449, %446 ]
  %452 = add nuw nsw i64 %406, 1
  %453 = icmp eq i64 %452, %343
  br i1 %453, label %454, label %405

454:                                              ; preds = %450
  %455 = add i32 %400, %331
  br label %456

456:                                              ; preds = %454, %338
  %457 = phi i32 [ %340, %338 ], [ %455, %454 ]
  %458 = phi i32 [ 0, %338 ], [ %451, %454 ]
  %459 = add i32 %458, 6
  %460 = mul i32 %459, %278
  %461 = add i32 %460, %457
  br label %462

462:                                              ; preds = %456, %330
  %463 = phi i32 [ %461, %456 ], [ %331, %330 ]
  br i1 %280, label %514, label %464

464:                                              ; preds = %462
  %465 = load %struct.opj_tcp*, %struct.opj_tcp** %6, align 8
  %466 = add i32 %279, -1
  %467 = and i32 %279, 3
  %468 = icmp ult i32 %466, 3
  br i1 %468, label %494, label %469

469:                                              ; preds = %464
  %470 = sub i32 %279, %467
  br label %471

471:                                              ; preds = %471, %469
  %472 = phi i32 [ 0, %469 ], [ %490, %471 ]
  %473 = phi %struct.opj_tcp* [ %465, %469 ], [ %491, %471 ]
  %474 = phi i32 [ %470, %469 ], [ %492, %471 ]
  %475 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %473, i64 0, i32 6
  %476 = load i32, i32* %475, align 4
  %477 = icmp ugt i32 %472, %476
  %478 = select i1 %477, i32 %472, i32 %476
  %479 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %473, i64 1, i32 6
  %480 = load i32, i32* %479, align 4
  %481 = icmp ugt i32 %478, %480
  %482 = select i1 %481, i32 %478, i32 %480
  %483 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %473, i64 2, i32 6
  %484 = load i32, i32* %483, align 4
  %485 = icmp ugt i32 %482, %484
  %486 = select i1 %485, i32 %482, i32 %484
  %487 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %473, i64 3, i32 6
  %488 = load i32, i32* %487, align 4
  %489 = icmp ugt i32 %486, %488
  %490 = select i1 %489, i32 %486, i32 %488
  %491 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %473, i64 4
  %492 = add i32 %474, -4
  %493 = icmp eq i32 %492, 0
  br i1 %493, label %494, label %471

494:                                              ; preds = %471, %464
  %495 = phi i32 [ undef, %464 ], [ %490, %471 ]
  %496 = phi i32 [ 0, %464 ], [ %490, %471 ]
  %497 = phi %struct.opj_tcp* [ %465, %464 ], [ %491, %471 ]
  %498 = icmp eq i32 %467, 0
  br i1 %498, label %510, label %499

499:                                              ; preds = %494, %499
  %500 = phi i32 [ %506, %499 ], [ %496, %494 ]
  %501 = phi %struct.opj_tcp* [ %507, %499 ], [ %497, %494 ]
  %502 = phi i32 [ %508, %499 ], [ %467, %494 ]
  %503 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %501, i64 0, i32 6
  %504 = load i32, i32* %503, align 4
  %505 = icmp ugt i32 %500, %504
  %506 = select i1 %505, i32 %500, i32 %504
  %507 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %501, i64 1
  %508 = add i32 %502, -1
  %509 = icmp eq i32 %508, 0
  br i1 %509, label %510, label %499, !llvm.loop !82

510:                                              ; preds = %499, %494
  %511 = phi i32 [ %495, %494 ], [ %506, %499 ]
  %512 = mul i32 %511, 9
  %513 = add i32 %512, 13
  br label %514

514:                                              ; preds = %510, %462
  %515 = phi i32 [ 13, %462 ], [ %513, %510 ]
  %516 = add i32 %515, %463
  %517 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 12
  %518 = load i32, i32* %517, align 4
  %519 = icmp eq i32 %518, 0
  br i1 %519, label %553, label %520

520:                                              ; preds = %514
  br i1 %280, label %539, label %521

521:                                              ; preds = %520
  %522 = tail call i32 @opj_get_encoding_packet_count(%struct.opj_image* %275, %struct.opj_cp* %332, i32 0) #12
  %523 = load i32, i32* %20, align 4
  %524 = load i32, i32* %22, align 8
  %525 = mul i32 %524, %523
  %526 = icmp ugt i32 %525, 1
  br i1 %526, label %527, label %539

527:                                              ; preds = %521, %527
  %528 = phi i32 [ %534, %527 ], [ 1, %521 ]
  %529 = phi i32 [ %533, %527 ], [ %522, %521 ]
  %530 = load %struct.opj_image*, %struct.opj_image** %4, align 8
  %531 = tail call i32 @opj_get_encoding_packet_count(%struct.opj_image* %530, %struct.opj_cp* %332, i32 %528) #12
  %532 = icmp ugt i32 %529, %531
  %533 = select i1 %532, i32 %529, i32 %531
  %534 = add nuw i32 %528, 1
  %535 = load i32, i32* %20, align 4
  %536 = load i32, i32* %22, align 8
  %537 = mul i32 %536, %535
  %538 = icmp ult i32 %534, %537
  br i1 %538, label %527, label %539

539:                                              ; preds = %527, %521, %520
  %540 = phi i32 [ 0, %520 ], [ %522, %521 ], [ %533, %527 ]
  %541 = zext i32 %540 to i64
  %542 = add nuw nsw i64 %541, 16381
  %543 = udiv i64 %542, 16382
  %544 = trunc i64 %543 to i32
  %545 = mul nuw nsw i32 %544, 6
  %546 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 13
  %547 = bitcast i32** %546 to i32*
  %548 = mul i32 %540, 5
  %549 = add i32 %548, %516
  %550 = add i32 %549, 1
  %551 = add i32 %550, %545
  store i32 %551, i32* %547, align 8
  %552 = add i32 %551, %549
  br label %553

553:                                              ; preds = %514, %539
  %554 = phi i32 [ %552, %539 ], [ %516, %514 ]
  %555 = zext i32 %554 to i64
  %556 = add i64 %274, %555
  %557 = icmp ult i64 %556, 4294967295
  %558 = select i1 %557, i64 %556, i64 4294967295
  %559 = trunc i64 %558 to i32
  %560 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 9
  store i32 %559, i32* %560, align 8
  %561 = tail call i8* @opj_malloc(i64 %558) #12
  %562 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 7
  %563 = bitcast i32* %562 to i8**
  store i8* %561, i8** %563, align 8
  %564 = icmp eq i8* %561, null
  br i1 %564, label %565, label %569

565:                                              ; preds = %553
  %566 = lshr i64 %558, 20
  %567 = trunc i64 %566 to i32
  %568 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %2, i32 1, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.304, i64 0, i64 0), i32 %567) #12
  br label %588

569:                                              ; preds = %553
  %570 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 0
  %571 = load i16, i16* %570, align 8
  %572 = add i16 %571, -3
  %573 = icmp ult i16 %572, 4
  %574 = add i16 %571, -1024
  %575 = icmp ult i16 %574, 1436
  %576 = or i1 %573, %575
  br i1 %576, label %577, label %588

577:                                              ; preds = %569
  %578 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 5
  %579 = load i32, i32* %578, align 8
  %580 = mul i32 %579, 5
  %581 = zext i32 %580 to i64
  %582 = tail call i8* @opj_malloc(i64 %581) #12
  %583 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 2
  store i8* %582, i8** %583, align 8
  %584 = icmp eq i8* %582, null
  br i1 %584, label %588, label %585

585:                                              ; preds = %577
  %586 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 1, i32 0, i32 3
  %587 = bitcast i32* %586 to i8**
  store i8* %582, i8** %587, align 8
  br label %588

588:                                              ; preds = %569, %585, %577, %565
  %589 = phi i32 [ 0, %565 ], [ 0, %577 ], [ 1, %585 ], [ 1, %569 ]
  ret i32 %589

590:                                              ; preds = %424
  %591 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %411, i64 %428, i32 1
  %592 = load i32, i32* %591, align 4
  %593 = add i32 %592, 5
  br label %594

594:                                              ; preds = %590, %424
  %595 = phi i32 [ %593, %590 ], [ 5, %424 ]
  %596 = icmp ugt i32 %427, %595
  %597 = select i1 %596, i32 %427, i32 %595
  %598 = add nuw nsw i64 %413, 2
  %599 = add i64 %415, -2
  %600 = icmp eq i64 %599, 0
  br i1 %600, label %433, label %412

601:                                              ; preds = %368
  %602 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %355, i64 %372, i32 1
  %603 = load i32, i32* %602, align 4
  %604 = add i32 %603, 5
  br label %605

605:                                              ; preds = %601, %368
  %606 = phi i32 [ %604, %601 ], [ 5, %368 ]
  %607 = icmp ugt i32 %371, %606
  %608 = select i1 %607, i32 %371, i32 %606
  %609 = add nuw nsw i64 %357, 2
  %610 = add i64 %359, -2
  %611 = icmp eq i64 %610, 0
  br i1 %611, label %377, label %356

612:                                              ; preds = %176
  %613 = fsub float %178, %26
  store float %613, float* %177, align 4
  %614 = load float, float* %166, align 4
  %615 = fadd float %614, 1.000000e+01
  %616 = fcmp olt float %613, %615
  br i1 %616, label %617, label %619

617:                                              ; preds = %612
  %618 = fadd float %614, 2.000000e+01
  store float %618, float* %177, align 4
  br label %619

619:                                              ; preds = %617, %612, %176
  %620 = getelementptr inbounds float, float* %166, i64 2
  %621 = load float, float* %620, align 4
  %622 = fcmp ogt float %621, 0.000000e+00
  %623 = add i32 %167, -2
  %624 = icmp eq i32 %623, 0
  br i1 %624, label %180, label %163
}

declare void @opj_pi_update_encoding_parameters(%struct.opj_image*, %struct.opj_cp*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @opj_j2k_write_SPCod_SPCoc(%struct.opj_j2k* nocapture readonly, i32, i8*, i32* nocapture, %struct.opj_event_mgr*) unnamed_addr #3 {
  %6 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %7 = load %struct.opj_tcp*, %struct.opj_tcp** %6, align 8
  %8 = zext i32 %1 to i64
  %9 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %7, i64 %8, i32 15
  %10 = load %struct.opj_tccp*, %struct.opj_tccp** %9, align 8
  %11 = load i32, i32* %3, align 4
  %12 = icmp ult i32 %11, 5
  br i1 %12, label %13, label %15

13:                                               ; preds = %5
  %14 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.290, i64 0, i64 0)) #12
  br label %68

15:                                               ; preds = %5
  %16 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %10, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = add i32 %17, -1
  tail call void @opj_write_bytes_LE(i8* %2, i32 %18, i32 1) #12
  %19 = getelementptr inbounds i8, i8* %2, i64 1
  %20 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %10, i64 0, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = add i32 %21, -2
  tail call void @opj_write_bytes_LE(i8* %19, i32 %22, i32 1) #12
  %23 = getelementptr inbounds i8, i8* %2, i64 2
  %24 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %10, i64 0, i32 3
  %25 = load i32, i32* %24, align 4
  %26 = add i32 %25, -2
  tail call void @opj_write_bytes_LE(i8* %23, i32 %26, i32 1) #12
  %27 = getelementptr inbounds i8, i8* %2, i64 3
  %28 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %10, i64 0, i32 4
  %29 = load i32, i32* %28, align 4
  tail call void @opj_write_bytes_LE(i8* %27, i32 %29, i32 1) #12
  %30 = getelementptr inbounds i8, i8* %2, i64 4
  %31 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %10, i64 0, i32 5
  %32 = load i32, i32* %31, align 4
  tail call void @opj_write_bytes_LE(i8* %30, i32 %32, i32 1) #12
  %33 = load i32, i32* %3, align 4
  %34 = add i32 %33, -5
  store i32 %34, i32* %3, align 4
  %35 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %10, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = and i32 %36, 1
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %68, label %39

39:                                               ; preds = %15
  %40 = load i32, i32* %16, align 4
  %41 = icmp ult i32 %34, %40
  br i1 %41, label %46, label %42

42:                                               ; preds = %39
  %43 = icmp eq i32 %40, 0
  br i1 %43, label %64, label %44

44:                                               ; preds = %42
  %45 = getelementptr inbounds i8, i8* %2, i64 5
  br label %48

46:                                               ; preds = %39
  %47 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %4, i32 1, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.290, i64 0, i64 0)) #12
  br label %68

48:                                               ; preds = %44, %48
  %49 = phi i64 [ 0, %44 ], [ %58, %48 ]
  %50 = phi i8* [ %45, %44 ], [ %57, %48 ]
  %51 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %10, i64 0, i32 10, i64 %49
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %10, i64 0, i32 11, i64 %49
  %54 = load i32, i32* %53, align 4
  %55 = shl i32 %54, 4
  %56 = add i32 %55, %52
  tail call void @opj_write_bytes_LE(i8* %50, i32 %56, i32 1) #12
  %57 = getelementptr inbounds i8, i8* %50, i64 1
  %58 = add nuw nsw i64 %49, 1
  %59 = load i32, i32* %16, align 4
  %60 = zext i32 %59 to i64
  %61 = icmp ult i64 %58, %60
  br i1 %61, label %48, label %62

62:                                               ; preds = %48
  %63 = load i32, i32* %3, align 4
  br label %64

64:                                               ; preds = %62, %42
  %65 = phi i32 [ %34, %42 ], [ %63, %62 ]
  %66 = phi i32 [ 0, %42 ], [ %59, %62 ]
  %67 = sub i32 %65, %66
  store i32 %67, i32* %3, align 4
  br label %68

68:                                               ; preds = %64, %15, %46, %13
  %69 = phi i32 [ 0, %13 ], [ 0, %46 ], [ 1, %15 ], [ 1, %64 ]
  ret i32 %69
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @opj_j2k_write_SQcd_SQcc(%struct.opj_j2k* nocapture readonly, i32, i32, i8*, i32* nocapture, %struct.opj_event_mgr*) unnamed_addr #3 {
  %7 = getelementptr inbounds %struct.opj_j2k, %struct.opj_j2k* %0, i64 0, i32 4, i32 19
  %8 = load %struct.opj_tcp*, %struct.opj_tcp** %7, align 8
  %9 = zext i32 %1 to i64
  %10 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %8, i64 %9, i32 15
  %11 = load %struct.opj_tccp*, %struct.opj_tccp** %10, align 8
  %12 = zext i32 %2 to i64
  %13 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %11, i64 %12, i32 6
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %44, label %16

16:                                               ; preds = %6
  %17 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %11, i64 %12, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = mul i32 %18, 3
  %20 = add i32 %19, -2
  %21 = icmp eq i32 %14, 0
  br i1 %21, label %22, label %44

22:                                               ; preds = %16
  %23 = add i32 %19, -1
  %24 = load i32, i32* %4, align 4
  %25 = icmp ult i32 %24, %23
  br i1 %25, label %26, label %28

26:                                               ; preds = %22
  %27 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %5, i32 1, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.293, i64 0, i64 0)) #12
  br label %77

28:                                               ; preds = %22
  %29 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %11, i64 %12, i32 8
  %30 = load i32, i32* %29, align 4
  %31 = shl i32 %30, 5
  tail call void @opj_write_bytes_LE(i8* %3, i32 %31, i32 1) #12
  %32 = icmp eq i32 %20, 0
  br i1 %32, label %73, label %33

33:                                               ; preds = %28
  %34 = zext i32 %20 to i64
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %42, %35 ]
  %37 = phi i8* [ %3, %33 ], [ %38, %35 ]
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  %39 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %11, i64 %12, i32 7, i64 %36, i32 0
  %40 = load i32, i32* %39, align 4
  %41 = shl i32 %40, 3
  tail call void @opj_write_bytes_LE(i8* %38, i32 %41, i32 1) #12
  %42 = add nuw nsw i64 %36, 1
  %43 = icmp eq i64 %42, %34
  br i1 %43, label %73, label %35

44:                                               ; preds = %6, %16
  %45 = phi i32 [ %20, %16 ], [ 1, %6 ]
  %46 = shl i32 %45, 1
  %47 = or i32 %46, 1
  %48 = load i32, i32* %4, align 4
  %49 = icmp ult i32 %48, %47
  br i1 %49, label %50, label %52

50:                                               ; preds = %44
  %51 = tail call i32 (%struct.opj_event_mgr*, i32, i8*, ...) @opj_event_msg(%struct.opj_event_mgr* %5, i32 1, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.293, i64 0, i64 0)) #12
  br label %77

52:                                               ; preds = %44
  %53 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %11, i64 %12, i32 8
  %54 = load i32, i32* %53, align 4
  %55 = shl i32 %54, 5
  %56 = add i32 %55, %14
  tail call void @opj_write_bytes_LE(i8* %3, i32 %56, i32 1) #12
  %57 = icmp eq i32 %45, 0
  br i1 %57, label %73, label %58

58:                                               ; preds = %52
  %59 = getelementptr inbounds i8, i8* %3, i64 1
  %60 = zext i32 %45 to i64
  br label %61

61:                                               ; preds = %61, %58
  %62 = phi i64 [ 0, %58 ], [ %71, %61 ]
  %63 = phi i8* [ %59, %58 ], [ %70, %61 ]
  %64 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %11, i64 %12, i32 7, i64 %62, i32 0
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %11, i64 %12, i32 7, i64 %62, i32 1
  %67 = load i32, i32* %66, align 4
  %68 = shl i32 %65, 11
  %69 = add i32 %68, %67
  tail call void @opj_write_bytes_LE(i8* %63, i32 %69, i32 2) #12
  %70 = getelementptr inbounds i8, i8* %63, i64 2
  %71 = add nuw nsw i64 %62, 1
  %72 = icmp eq i64 %71, %60
  br i1 %72, label %73, label %61

73:                                               ; preds = %35, %61, %28, %52
  %74 = phi i32 [ %47, %52 ], [ 1, %28 ], [ %47, %61 ], [ %23, %35 ]
  %75 = load i32, i32* %4, align 4
  %76 = sub i32 %75, %74
  store i32 %76, i32* %4, align 4
  br label %77

77:                                               ; preds = %73, %50, %26
  %78 = phi i32 [ 0, %26 ], [ 1, %73 ], [ 0, %50 ]
  ret i32 %78
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal float @opj_j2k_get_tp_stride(%struct.opj_tcp* nocapture readonly) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.opj_tcp, %struct.opj_tcp* %0, i64 0, i32 17
  %3 = load i32, i32* %2, align 4
  %4 = mul i32 %3, 14
  %5 = add i32 %4, -14
  %6 = uitofp i32 %5 to float
  ret float %6
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal float @opj_j2k_get_default_stride(%struct.opj_tcp* nocapture readnone) unnamed_addr #7 {
  ret float 0.000000e+00
}

declare i32 @opj_get_encoding_packet_count(%struct.opj_image*, %struct.opj_cp*, i32) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #10

; Function Attrs: nofree nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #11

; Function Attrs: nofree nounwind
declare i32 @fputc(i32, %struct._IO_FILE* nocapture) local_unnamed_addr #11

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.usub.sat.i32(i32, i32) #10

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { nofree nounwind }
attributes #12 = { nounwind }
attributes #13 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !5}
!10 = distinct !{!10, !7, !3}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !5}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !3}
!15 = distinct !{!15, !5}
!16 = distinct !{!16, !7, !3}
!17 = distinct !{!17, !5}
!18 = distinct !{!18, !3}
!19 = distinct !{!19, !7, !3}
!20 = distinct !{!20, !5}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25, !26}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !23}
!27 = !{!25}
!28 = !{!26}
!29 = distinct !{!29, !3}
!30 = distinct !{!30, !3}
!31 = distinct !{!31, !5}
!32 = !{!33}
!33 = distinct !{!33, !34}
!34 = distinct !{!34, !"LVerDomain"}
!35 = !{!36}
!36 = distinct !{!36, !34}
!37 = distinct !{!37, !3}
!38 = distinct !{!38, !5}
!39 = distinct !{!39, !3}
!40 = !{!41}
!41 = distinct !{!41, !42}
!42 = distinct !{!42, !"LVerDomain"}
!43 = !{!44}
!44 = distinct !{!44, !42}
!45 = distinct !{!45, !3}
!46 = distinct !{!46, !5}
!47 = distinct !{!47, !3}
!48 = !{!49}
!49 = distinct !{!49, !50}
!50 = distinct !{!50, !"LVerDomain"}
!51 = !{!52}
!52 = distinct !{!52, !50}
!53 = distinct !{!53, !3}
!54 = distinct !{!54, !5}
!55 = distinct !{!55, !3}
!56 = !{!57}
!57 = distinct !{!57, !58}
!58 = distinct !{!58, !"LVerDomain"}
!59 = !{!60}
!60 = distinct !{!60, !58}
!61 = distinct !{!61, !3}
!62 = distinct !{!62, !5}
!63 = distinct !{!63, !3}
!64 = !{!65}
!65 = distinct !{!65, !66}
!66 = distinct !{!66, !"LVerDomain"}
!67 = !{!68}
!68 = distinct !{!68, !66}
!69 = distinct !{!69, !3}
!70 = distinct !{!70, !5}
!71 = distinct !{!71, !5}
!72 = distinct !{!72, !3}
!73 = distinct !{!73, !3}
!74 = distinct !{!74, !5}
!75 = distinct !{!75, !7, !3}
!76 = distinct !{!76, !5}
!77 = distinct !{!77, !5}
!78 = distinct !{!78, !3}
!79 = distinct !{!79, !7, !3}
!80 = !{float (%struct.opj_tcp*)* @opj_j2k_get_default_stride, float (%struct.opj_tcp*)* @opj_j2k_get_tp_stride}
!81 = distinct !{!81, !5}
!82 = distinct !{!82, !5}
