; ModuleID = '../../third_party/pdfium/third_party/lcms/src/cmscam02.c'
source_filename = "../../third_party/pdfium/third_party/lcms/src/cmscam02.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct._cmsContext_struct = type { %struct._cmsContext_struct*, %struct._cmsSubAllocator*, [15 x i8*], %struct._cmsMemPluginChunkType }
%struct._cmsSubAllocator = type { %struct._cmsContext_struct*, %struct._cmsSubAllocator_chunk_st* }
%struct._cmsSubAllocator_chunk_st = type { i8*, i32, i32, %struct._cmsSubAllocator_chunk_st* }
%struct._cmsMemPluginChunkType = type { i8* (%struct._cmsContext_struct*, i32)*, i8* (%struct._cmsContext_struct*, i32)*, void (%struct._cmsContext_struct*, i8*)*, i8* (%struct._cmsContext_struct*, i8*, i32)*, i8* (%struct._cmsContext_struct*, i32, i32)*, i8* (%struct._cmsContext_struct*, i8*, i32)* }
%struct.cmsViewingConditions = type { %struct.cmsCIEXYZ, double, double, i32, double }
%struct.cmsCIEXYZ = type { double, double, double }
%struct.cmsJCh = type { double, double, double }

@switch.table.cmsCIECAM02Init = private unnamed_addr constant [3 x double] [double 9.000000e-01, double 8.000000e-01, double 8.000000e-01], align 8
@switch.table.cmsCIECAM02Init.1 = private unnamed_addr constant [3 x double] [double 5.900000e-01, double 5.250000e-01, double 4.100000e-01], align 8
@switch.table.cmsCIECAM02Init.2 = private unnamed_addr constant [3 x double] [double 0x3FEE666666666666, double 8.000000e-01, double 8.000000e-01], align 8

; Function Attrs: nounwind ssp uwtable
define hidden i8* @cmsCIECAM02Init(%struct._cmsContext_struct*, %struct.cmsViewingConditions* nocapture readonly) local_unnamed_addr #0 {
  %3 = alloca { [3 x double], [3 x double], [3 x double] }, align 8
  %4 = alloca { double, double, double, double, double }, align 8
  %5 = alloca { double, double, double, double, double, double, [2 x double], [2 x double], [2 x double] }, align 8
  %6 = alloca { [3 x double], [3 x double], [3 x double] }, align 8
  %7 = alloca { double, double, double, double, double }, align 8
  %8 = alloca { double, double, double, double, double, double, [2 x double], [2 x double], [2 x double] }, align 8
  %9 = tail call i8* @_cmsMallocZero(%struct._cmsContext_struct* %0, i32 368) #5
  %10 = icmp eq i8* %9, null
  br i1 %10, label %269, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds i8, i8* %9, i64 360
  %13 = bitcast i8* %12 to %struct._cmsContext_struct**
  store %struct._cmsContext_struct* %0, %struct._cmsContext_struct** %13, align 8
  %14 = bitcast %struct.cmsViewingConditions* %1 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast i8* %9 to i64*
  store i64 %15, i64* %16, align 8
  %17 = getelementptr inbounds %struct.cmsViewingConditions, %struct.cmsViewingConditions* %1, i64 0, i32 0, i32 1
  %18 = bitcast double* %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds i8, i8* %9, i64 8
  %21 = bitcast i8* %20 to i64*
  store i64 %19, i64* %21, align 8
  %22 = getelementptr inbounds %struct.cmsViewingConditions, %struct.cmsViewingConditions* %1, i64 0, i32 0, i32 2
  %23 = bitcast double* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds i8, i8* %9, i64 16
  %26 = bitcast i8* %25 to i64*
  store i64 %24, i64* %26, align 8
  %27 = getelementptr inbounds %struct.cmsViewingConditions, %struct.cmsViewingConditions* %1, i64 0, i32 2
  %28 = bitcast double* %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds i8, i8* %9, i64 264
  %31 = bitcast i8* %30 to i64*
  store i64 %29, i64* %31, align 8
  %32 = getelementptr inbounds %struct.cmsViewingConditions, %struct.cmsViewingConditions* %1, i64 0, i32 1
  %33 = bitcast double* %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds i8, i8* %9, i64 272
  %36 = bitcast i8* %35 to i64*
  store i64 %34, i64* %36, align 8
  %37 = getelementptr inbounds %struct.cmsViewingConditions, %struct.cmsViewingConditions* %1, i64 0, i32 4
  %38 = bitcast double* %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds i8, i8* %9, i64 352
  %41 = bitcast i8* %40 to double*
  %42 = bitcast i8* %40 to i64*
  store i64 %39, i64* %42, align 8
  %43 = getelementptr inbounds %struct.cmsViewingConditions, %struct.cmsViewingConditions* %1, i64 0, i32 3
  %44 = load i32, i32* %43, align 8
  %45 = getelementptr inbounds i8, i8* %9, i64 304
  %46 = bitcast i8* %45 to i32*
  store i32 %44, i32* %46, align 8
  %47 = bitcast i64 %34 to double
  %48 = bitcast i64 %19 to double
  %49 = add i32 %44, -2
  %50 = icmp ult i32 %49, 3
  br i1 %50, label %51, label %61

51:                                               ; preds = %11
  %52 = sext i32 %49 to i64
  %53 = getelementptr inbounds [3 x double], [3 x double]* @switch.table.cmsCIECAM02Init, i64 0, i64 %52
  %54 = load double, double* %53, align 8
  %55 = sext i32 %49 to i64
  %56 = getelementptr inbounds [3 x double], [3 x double]* @switch.table.cmsCIECAM02Init.1, i64 0, i64 %55
  %57 = load double, double* %56, align 8
  %58 = sext i32 %49 to i64
  %59 = getelementptr inbounds [3 x double], [3 x double]* @switch.table.cmsCIECAM02Init.2, i64 0, i64 %58
  %60 = load double, double* %59, align 8
  br label %61

61:                                               ; preds = %11, %51
  %62 = phi double [ %54, %51 ], [ 1.000000e+00, %11 ]
  %63 = phi double [ %57, %51 ], [ 6.900000e-01, %11 ]
  %64 = phi double [ %60, %51 ], [ 1.000000e+00, %11 ]
  %65 = getelementptr inbounds i8, i8* %9, i64 280
  %66 = bitcast i8* %65 to double*
  store double %62, double* %66, align 8
  %67 = getelementptr inbounds i8, i8* %9, i64 288
  %68 = bitcast i8* %67 to double*
  store double %63, double* %68, align 8
  %69 = getelementptr inbounds i8, i8* %9, i64 296
  %70 = bitcast i8* %69 to double*
  store double %64, double* %70, align 8
  %71 = fdiv double %47, %48
  %72 = getelementptr inbounds i8, i8* %9, i64 312
  %73 = bitcast i8* %72 to double*
  store double %71, double* %73, align 8
  %74 = tail call double @sqrt(double %71) #3
  %75 = tail call double @llvm.fabs.f64(double %74) #5
  %76 = fcmp oeq double %71, 0xFFF0000000000000
  %77 = fadd double %75, 1.480000e+00
  %78 = select i1 %76, double 0x7FF0000000000000, double %77
  %79 = getelementptr inbounds i8, i8* %9, i64 336
  %80 = bitcast i8* %79 to double*
  store double %78, double* %80, align 8
  %81 = load double, double* %73, align 8
  %82 = fdiv double 1.000000e+00, %81
  %83 = tail call double @pow(double %82, double 2.000000e-01) #5
  %84 = fmul double %83, 7.250000e-01
  %85 = getelementptr inbounds i8, i8* %9, i64 320
  %86 = bitcast i8* %85 to double*
  store double %84, double* %86, align 8
  %87 = bitcast i8* %30 to double*
  %88 = load double, double* %87, align 8
  %89 = fmul double %88, 5.000000e+00
  %90 = fadd double %89, 1.000000e+00
  %91 = fdiv double 1.000000e+00, %90
  %92 = tail call double @pow(double %91, double 4.000000e+00) #5
  %93 = fmul double %92, 2.000000e-01
  %94 = load double, double* %87, align 8
  %95 = fmul double %94, 5.000000e+00
  %96 = fmul double %93, %95
  %97 = tail call double @pow(double %91, double 4.000000e+00) #5
  %98 = fsub double 1.000000e+00, %97
  %99 = fmul double %98, %98
  %100 = fmul double %99, 1.000000e-01
  %101 = load double, double* %87, align 8
  %102 = fmul double %101, 5.000000e+00
  %103 = tail call double @pow(double %102, double 0x3FD5555555555555) #5
  %104 = fmul double %103, %100
  %105 = fadd double %96, %104
  %106 = getelementptr inbounds i8, i8* %9, i64 344
  %107 = bitcast i8* %106 to double*
  store double %105, double* %107, align 8
  %108 = load double, double* %41, align 8
  %109 = fcmp oeq double %108, -1.000000e+00
  br i1 %109, label %110, label %120

110:                                              ; preds = %61
  %111 = getelementptr inbounds i8, i8* %9, i64 280
  %112 = bitcast i8* %111 to double*
  %113 = load double, double* %112, align 8
  %114 = load double, double* %87, align 8
  %115 = fsub double -4.200000e+01, %114
  %116 = fdiv double %115, 9.200000e+01
  %117 = tail call double @exp(double %116) #5
  %118 = fmul double %117, 0x3FD1C71C71C71C72
  %119 = fsub double %113, %118
  store double %119, double* %41, align 8
  br label %120

120:                                              ; preds = %110, %61
  %121 = phi double [ %119, %110 ], [ %108, %61 ]
  %122 = bitcast i8* %85 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = getelementptr inbounds i8, i8* %9, i64 328
  %125 = bitcast i8* %124 to i64*
  store i64 %123, i64* %125, align 8
  %126 = bitcast i8* %9 to <2 x double>*
  %127 = load <2 x double>, <2 x double>* %126, align 1
  %128 = bitcast i8* %25 to double*
  %129 = load double, double* %128, align 1
  %130 = getelementptr inbounds i8, i8* %9, i64 24
  %131 = getelementptr inbounds i8, i8* %9, i64 40
  %132 = bitcast i8* %131 to double*
  %133 = getelementptr inbounds i8, i8* %9, i64 48
  %134 = extractelement <2 x double> %127, i32 1
  %135 = shufflevector <2 x double> %127, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %136 = shufflevector <2 x double> %135, <2 x double> %127, <2 x i32> <i32 0, i32 2>
  %137 = fmul <2 x double> %136, <double 4.296000e-01, double 7.036000e-01>
  %138 = fmul <2 x double> %127, <double 7.328000e-01, double 1.697500e+00>
  %139 = fadd <2 x double> %138, %137
  %140 = fsub <2 x double> %138, %137
  %141 = shufflevector <2 x double> %139, <2 x double> %140, <2 x i32> <i32 0, i32 3>
  %142 = insertelement <2 x double> undef, double %129, i32 0
  %143 = shufflevector <2 x double> %142, <2 x double> undef, <2 x i32> zeroinitializer
  %144 = fmul <2 x double> %143, <double 1.624000e-01, double 6.100000e-03>
  %145 = fsub <2 x double> %141, %144
  %146 = fadd <2 x double> %141, %144
  %147 = shufflevector <2 x double> %145, <2 x double> %146, <2 x i32> <i32 0, i32 3>
  %148 = fmul <2 x double> %127, <double 3.000000e-03, double 1.360000e-02>
  %149 = extractelement <2 x double> %148, i32 0
  %150 = extractelement <2 x double> %148, i32 1
  %151 = fadd double %149, %150
  %152 = fmul double %129, 9.834000e-01
  %153 = fadd double %151, %152
  %154 = getelementptr inbounds i8, i8* %9, i64 64
  %155 = bitcast i8* %154 to double*
  %156 = getelementptr inbounds i8, i8* %9, i64 72
  %157 = fsub double 1.000000e+00, %121
  %158 = insertelement <2 x double> undef, double %121, i32 0
  %159 = shufflevector <2 x double> %158, <2 x double> undef, <2 x i32> zeroinitializer
  %160 = fdiv <2 x double> %159, %147
  %161 = shufflevector <2 x double> %127, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %162 = fmul <2 x double> %161, %160
  %163 = insertelement <2 x double> undef, double %157, i32 0
  %164 = shufflevector <2 x double> %163, <2 x double> undef, <2 x i32> zeroinitializer
  %165 = fadd <2 x double> %164, %162
  %166 = fmul <2 x double> %147, %165
  %167 = fdiv double %121, %153
  %168 = fmul double %134, %167
  %169 = fadd double %157, %168
  %170 = fmul double %153, %169
  %171 = bitcast i8* %130 to <2 x double>*
  store <2 x double> %147, <2 x double>* %171, align 8
  store double %153, double* %132, align 8
  %172 = getelementptr inbounds i8, i8* %9, i64 88
  %173 = bitcast i8* %172 to double*
  %174 = getelementptr inbounds i8, i8* %9, i64 96
  %175 = extractelement <2 x double> %166, i32 0
  %176 = shufflevector <2 x double> %166, <2 x double> undef, <2 x i32> zeroinitializer
  %177 = fmul <2 x double> %176, <double 0x3FE7B619F212AE38, double 0x3FD24339FEDAE324>
  %178 = extractelement <2 x double> %166, i32 1
  %179 = shufflevector <2 x double> %166, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %180 = fmul <2 x double> %179, <double 0x3FCBE83EA743F4F8, double 0x3FE3F975331550A9>
  %181 = fadd <2 x double> %177, %180
  %182 = insertelement <2 x double> undef, double %170, i32 0
  %183 = shufflevector <2 x double> %182, <2 x double> undef, <2 x i32> zeroinitializer
  %184 = fmul <2 x double> %183, <double 0x3FA4FEB5CD1DD6DE, double 0x3FB7276E6BE9EE25>
  %185 = fadd <2 x double> %181, %184
  %186 = fmul double %175, 0x3F83B7D84901D191
  %187 = fmul double %178, -5.698000e-03
  %188 = fsub double %187, %186
  %189 = fmul double %170, 0x3FF03EC679CC74B8
  %190 = fadd double %188, %189
  %191 = bitcast i8* %133 to <2 x double>*
  store <2 x double> %166, <2 x double>* %191, align 8
  store double %170, double* %155, align 8
  %192 = bitcast i8* %156 to <2 x double>*
  store <2 x double> %185, <2 x double>* %192, align 8
  store double %190, double* %173, align 8
  %193 = bitcast { [3 x double], [3 x double], [3 x double] }* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %193)
  %194 = bitcast { double, double, double, double, double }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %194)
  %195 = bitcast { double, double, double, double, double, double, [2 x double], [2 x double], [2 x double] }* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %195)
  %196 = bitcast { [3 x double], [3 x double], [3 x double] }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %196)
  %197 = bitcast { double, double, double, double, double }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %197)
  %198 = bitcast { double, double, double, double, double, double, [2 x double], [2 x double], [2 x double] }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %198)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %196, i8* nonnull align 1 %9, i64 72, i1 false)
  %199 = getelementptr inbounds i8, i8* %9, i64 120
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %197, i8* align 1 %199, i64 40, i1 false)
  %200 = getelementptr inbounds i8, i8* %9, i64 168
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %198, i8* align 1 %200, i64 96, i1 false)
  %201 = extractelement <2 x double> %185, i32 0
  %202 = fcmp olt double %201, 0.000000e+00
  %203 = load double, double* %107, align 8, !noalias !2
  %204 = fmul double %201, %203
  br i1 %202, label %205, label %209

205:                                              ; preds = %120
  %206 = fdiv double %204, -1.000000e+02
  %207 = tail call double @pow(double %206, double 4.200000e-01) #5, !noalias !2
  %208 = fmul double %207, -4.000000e+02
  br label %213

209:                                              ; preds = %120
  %210 = fdiv double %204, 1.000000e+02
  %211 = tail call double @pow(double %210, double 4.200000e-01) #5, !noalias !2
  %212 = fmul double %211, 4.000000e+02
  br label %213

213:                                              ; preds = %209, %205
  %214 = phi double [ %211, %209 ], [ %207, %205 ]
  %215 = phi double [ %212, %209 ], [ %208, %205 ]
  %216 = fadd double %214, 2.713000e+01
  %217 = fdiv double %215, %216
  %218 = fadd double %217, 1.000000e-01
  %219 = extractelement <2 x double> %185, i32 1
  %220 = fcmp olt double %219, 0.000000e+00
  %221 = load double, double* %107, align 8, !noalias !2
  %222 = fmul double %219, %221
  br i1 %220, label %227, label %223

223:                                              ; preds = %213
  %224 = fdiv double %222, 1.000000e+02
  %225 = tail call double @pow(double %224, double 4.200000e-01) #5, !noalias !2
  %226 = fmul double %225, 4.000000e+02
  br label %231

227:                                              ; preds = %213
  %228 = fdiv double %222, -1.000000e+02
  %229 = tail call double @pow(double %228, double 4.200000e-01) #5, !noalias !2
  %230 = fmul double %229, -4.000000e+02
  br label %231

231:                                              ; preds = %227, %223
  %232 = phi double [ %229, %227 ], [ %225, %223 ]
  %233 = phi double [ %230, %227 ], [ %226, %223 ]
  %234 = fadd double %232, 2.713000e+01
  %235 = fdiv double %233, %234
  %236 = fadd double %235, 1.000000e-01
  %237 = fcmp olt double %190, 0.000000e+00
  %238 = load double, double* %107, align 8, !noalias !2
  %239 = fmul double %190, %238
  br i1 %237, label %244, label %240

240:                                              ; preds = %231
  %241 = fdiv double %239, 1.000000e+02
  %242 = tail call double @pow(double %241, double 4.200000e-01) #5, !noalias !2
  %243 = fmul double %242, 4.000000e+02
  br label %248

244:                                              ; preds = %231
  %245 = fdiv double %239, -1.000000e+02
  %246 = tail call double @pow(double %245, double 4.200000e-01) #5, !noalias !2
  %247 = fmul double %246, -4.000000e+02
  br label %248

248:                                              ; preds = %240, %244
  %249 = phi double [ %242, %240 ], [ %246, %244 ]
  %250 = phi double [ %243, %240 ], [ %247, %244 ]
  %251 = fadd double %249, 2.713000e+01
  %252 = fdiv double %250, %251
  %253 = fadd double %252, 1.000000e-01
  %254 = fmul double %218, 2.000000e+00
  %255 = fadd double %254, %236
  %256 = fdiv double %253, 2.000000e+01
  %257 = fadd double %255, %256
  %258 = fadd double %257, -3.050000e-01
  %259 = load double, double* %86, align 8, !noalias !2
  %260 = fmul double %259, %258
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %193, i8* nonnull align 8 %196, i64 72, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %194, i8* nonnull align 8 %197, i64 40, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %195, i8* nonnull align 8 %198, i64 96, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %196)
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %197)
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %198)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %9, i8* nonnull align 8 %193, i64 72, i1 false)
  %261 = bitcast i8* %156 to <2 x double>*
  store <2 x double> %185, <2 x double>* %261, align 8
  store double %190, double* %173, align 8
  %262 = bitcast i8* %174 to double*
  store double %218, double* %262, align 8
  %263 = getelementptr inbounds i8, i8* %9, i64 104
  %264 = bitcast i8* %263 to double*
  store double %236, double* %264, align 8
  %265 = getelementptr inbounds i8, i8* %9, i64 112
  %266 = bitcast i8* %265 to double*
  store double %253, double* %266, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %199, i8* nonnull align 8 %194, i64 40, i1 false)
  %267 = getelementptr inbounds i8, i8* %9, i64 160
  %268 = bitcast i8* %267 to double*
  store double %260, double* %268, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %200, i8* nonnull align 8 %195, i64 96, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %193)
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %194)
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %195)
  br label %269

269:                                              ; preds = %2, %248
  ret i8* %9
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @_cmsMallocZero(%struct._cmsContext_struct*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @cmsCIECAM02Done(i8*) local_unnamed_addr #0 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %7, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds i8, i8* %0, i64 360
  %5 = bitcast i8* %4 to %struct._cmsContext_struct**
  %6 = load %struct._cmsContext_struct*, %struct._cmsContext_struct** %5, align 8
  tail call void @_cmsFree(%struct._cmsContext_struct* %6, i8* nonnull %0) #5
  br label %7

7:                                                ; preds = %1, %3
  ret void
}

declare void @_cmsFree(%struct._cmsContext_struct*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @cmsCIECAM02Forward(i8* nocapture readonly, %struct.cmsCIEXYZ* nocapture readonly, %struct.cmsJCh* nocapture) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %1, i64 0, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %1, i64 0, i32 1
  %7 = bitcast double* %6 to <2 x double>*
  %8 = load <2 x double>, <2 x double>* %7, align 8
  %9 = fmul double %5, 7.036000e-01
  %10 = fmul <2 x double> %8, <double 1.697500e+00, double 6.100000e-03>
  %11 = extractelement <2 x double> %10, i32 0
  %12 = fsub double %11, %9
  %13 = extractelement <2 x double> %10, i32 1
  %14 = fadd double %12, %13
  %15 = insertelement <2 x double> undef, double %5, i32 0
  %16 = shufflevector <2 x double> %15, <2 x double> undef, <2 x i32> zeroinitializer
  %17 = fmul <2 x double> %16, <double 7.328000e-01, double 3.000000e-03>
  %18 = shufflevector <2 x double> %8, <2 x double> undef, <2 x i32> zeroinitializer
  %19 = fmul <2 x double> %18, <double 4.296000e-01, double 1.360000e-02>
  %20 = fadd <2 x double> %17, %19
  %21 = shufflevector <2 x double> %8, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %22 = fmul <2 x double> %21, <double 1.624000e-01, double 9.834000e-01>
  %23 = fsub <2 x double> %20, %22
  %24 = fadd <2 x double> %20, %22
  %25 = shufflevector <2 x double> %23, <2 x double> %24, <2 x i32> <i32 0, i32 3>
  %26 = getelementptr inbounds i8, i8* %0, i64 8
  %27 = bitcast i8* %26 to double*
  %28 = load double, double* %27, align 8, !noalias !5
  %29 = getelementptr inbounds i8, i8* %0, i64 352
  %30 = bitcast i8* %29 to double*
  %31 = load double, double* %30, align 8, !noalias !5
  %32 = fsub double 1.000000e+00, %31
  %33 = getelementptr inbounds i8, i8* %0, i64 24
  %34 = bitcast i8* %33 to double*
  %35 = load double, double* %34, align 8, !noalias !5
  %36 = getelementptr inbounds i8, i8* %0, i64 32
  %37 = bitcast i8* %36 to double*
  %38 = load double, double* %37, align 8, !noalias !5
  %39 = fdiv double %31, %38
  %40 = fmul double %28, %39
  %41 = fadd double %32, %40
  %42 = fmul double %14, %41
  %43 = getelementptr inbounds i8, i8* %0, i64 40
  %44 = bitcast i8* %43 to double*
  %45 = load double, double* %44, align 8, !noalias !5
  %46 = insertelement <2 x double> undef, double %31, i32 0
  %47 = shufflevector <2 x double> %46, <2 x double> undef, <2 x i32> zeroinitializer
  %48 = insertelement <2 x double> undef, double %35, i32 0
  %49 = insertelement <2 x double> %48, double %45, i32 1
  %50 = fdiv <2 x double> %47, %49
  %51 = insertelement <2 x double> undef, double %28, i32 0
  %52 = shufflevector <2 x double> %51, <2 x double> undef, <2 x i32> zeroinitializer
  %53 = fmul <2 x double> %52, %50
  %54 = insertelement <2 x double> undef, double %32, i32 0
  %55 = shufflevector <2 x double> %54, <2 x double> undef, <2 x i32> zeroinitializer
  %56 = fadd <2 x double> %55, %53
  %57 = fmul <2 x double> %25, %56
  %58 = fmul double %42, 0x3FCBE83EA743F4F8
  %59 = fmul <2 x double> %57, <double 0x3FE7B619F212AE38, double 0x3FA4FEB5CD1DD6DE>
  %60 = extractelement <2 x double> %59, i32 0
  %61 = fadd double %60, %58
  %62 = extractelement <2 x double> %59, i32 1
  %63 = fadd double %61, %62
  %64 = extractelement <2 x double> %57, i32 0
  %65 = fmul double %64, 0x3FD24339FEDAE324
  %66 = fmul double %42, 0x3FE3F975331550A9
  %67 = fadd double %65, %66
  %68 = extractelement <2 x double> %57, i32 1
  %69 = fmul double %68, 0x3FB7276E6BE9EE25
  %70 = fadd double %67, %69
  %71 = fmul double %64, 0x3F83B7D84901D191
  %72 = fmul double %42, -5.698000e-03
  %73 = fsub double %72, %71
  %74 = fmul double %68, 0x3FF03EC679CC74B8
  %75 = fadd double %73, %74
  %76 = getelementptr inbounds i8, i8* %0, i64 344
  %77 = bitcast i8* %76 to double*
  %78 = fcmp olt double %63, 0.000000e+00
  %79 = load double, double* %77, align 8, !noalias !8
  %80 = fmul double %63, %79
  br i1 %78, label %81, label %85

81:                                               ; preds = %3
  %82 = fdiv double %80, -1.000000e+02
  %83 = tail call double @pow(double %82, double 4.200000e-01) #5, !noalias !8
  %84 = fmul double %83, -4.000000e+02
  br label %89

85:                                               ; preds = %3
  %86 = fdiv double %80, 1.000000e+02
  %87 = tail call double @pow(double %86, double 4.200000e-01) #5, !noalias !8
  %88 = fmul double %87, 4.000000e+02
  br label %89

89:                                               ; preds = %85, %81
  %90 = phi double [ %87, %85 ], [ %83, %81 ]
  %91 = phi double [ %88, %85 ], [ %84, %81 ]
  %92 = fadd double %90, 2.713000e+01
  %93 = fdiv double %91, %92
  %94 = fadd double %93, 1.000000e-01
  %95 = fcmp olt double %70, 0.000000e+00
  %96 = load double, double* %77, align 8, !noalias !8
  %97 = fmul double %70, %96
  br i1 %95, label %102, label %98

98:                                               ; preds = %89
  %99 = fdiv double %97, 1.000000e+02
  %100 = tail call double @pow(double %99, double 4.200000e-01) #5, !noalias !8
  %101 = fmul double %100, 4.000000e+02
  br label %106

102:                                              ; preds = %89
  %103 = fdiv double %97, -1.000000e+02
  %104 = tail call double @pow(double %103, double 4.200000e-01) #5, !noalias !8
  %105 = fmul double %104, -4.000000e+02
  br label %106

106:                                              ; preds = %102, %98
  %107 = phi double [ %104, %102 ], [ %100, %98 ]
  %108 = phi double [ %105, %102 ], [ %101, %98 ]
  %109 = fadd double %107, 2.713000e+01
  %110 = fdiv double %108, %109
  %111 = fadd double %110, 1.000000e-01
  %112 = fcmp olt double %75, 0.000000e+00
  %113 = load double, double* %77, align 8, !noalias !8
  %114 = fmul double %75, %113
  br i1 %112, label %119, label %115

115:                                              ; preds = %106
  %116 = fdiv double %114, 1.000000e+02
  %117 = tail call double @pow(double %116, double 4.200000e-01) #5, !noalias !8
  %118 = fmul double %117, 4.000000e+02
  br label %123

119:                                              ; preds = %106
  %120 = fdiv double %114, -1.000000e+02
  %121 = tail call double @pow(double %120, double 4.200000e-01) #5, !noalias !8
  %122 = fmul double %121, -4.000000e+02
  br label %123

123:                                              ; preds = %115, %119
  %124 = phi double [ %117, %115 ], [ %121, %119 ]
  %125 = phi double [ %118, %115 ], [ %122, %119 ]
  %126 = fadd double %124, 2.713000e+01
  %127 = fmul double %94, 2.000000e+00
  %128 = fadd double %127, %111
  %129 = fmul double %111, 1.200000e+01
  %130 = insertelement <2 x double> undef, double %129, i32 0
  %131 = insertelement <2 x double> %130, double %125, i32 1
  %132 = insertelement <2 x double> <double 1.100000e+01, double undef>, double %126, i32 1
  %133 = fdiv <2 x double> %131, %132
  %134 = extractelement <2 x double> %133, i32 1
  %135 = fadd double %134, 1.000000e-01
  %136 = fdiv double %135, 2.000000e+01
  %137 = fadd double %128, %136
  %138 = fadd double %137, -3.050000e-01
  %139 = getelementptr inbounds i8, i8* %0, i64 320
  %140 = bitcast i8* %139 to double*
  %141 = load double, double* %140, align 8, !noalias !8
  %142 = fmul double %141, %138
  %143 = fdiv double %135, 1.100000e+01
  %144 = extractelement <2 x double> %133, i32 0
  %145 = fsub double %94, %144
  %146 = fadd double %145, %143
  %147 = fadd double %94, %111
  %148 = fmul double %135, 2.000000e+00
  %149 = fsub double %147, %148
  %150 = fdiv double %149, 9.000000e+00
  %151 = fcmp oeq double %146, 0.000000e+00
  br i1 %151, label %152, label %157

152:                                              ; preds = %123
  %153 = fcmp oeq double %150, 0.000000e+00
  br i1 %153, label %175, label %154

154:                                              ; preds = %152
  %155 = fcmp ogt double %150, 0.000000e+00
  br i1 %155, label %175, label %156

156:                                              ; preds = %154
  br label %175

157:                                              ; preds = %123
  %158 = fcmp ogt double %146, 0.000000e+00
  %159 = fdiv double %150, %146
  br i1 %158, label %160, label %171

160:                                              ; preds = %157
  %161 = fcmp ogt double %150, 0.000000e+00
  br i1 %161, label %162, label %165

162:                                              ; preds = %160
  %163 = tail call double @atan(double %159) #5, !noalias !11
  %164 = fmul double %163, 0x404CA5DC1A53B118
  br label %175

165:                                              ; preds = %160
  %166 = fcmp oeq double %150, 0.000000e+00
  br i1 %166, label %175, label %167

167:                                              ; preds = %165
  %168 = tail call double @atan(double %159) #5, !noalias !11
  %169 = fmul double %168, 0x404CA5DC1A53B118
  %170 = fadd double %169, 3.600000e+02
  br label %175

171:                                              ; preds = %157
  %172 = tail call double @atan(double %159) #5, !noalias !11
  %173 = fmul double %172, 0x404CA5DC1A53B118
  %174 = fadd double %173, 1.800000e+02
  br label %175

175:                                              ; preds = %165, %154, %152, %171, %167, %162, %156
  %176 = phi double [ 2.700000e+02, %156 ], [ %164, %162 ], [ %170, %167 ], [ %174, %171 ], [ 0.000000e+00, %152 ], [ 9.000000e+01, %154 ], [ 0.000000e+00, %165 ]
  %177 = getelementptr inbounds i8, i8* %0, i64 296
  %178 = bitcast i8* %177 to double*
  %179 = load double, double* %178, align 8, !noalias !11
  %180 = fmul double %179, 0x408E0C4EC4EC4EC5
  %181 = getelementptr inbounds i8, i8* %0, i64 328
  %182 = bitcast i8* %181 to double*
  %183 = load double, double* %182, align 8, !noalias !11
  %184 = fmul double %180, %183
  %185 = fmul double %176, 0x3F91DF46A25CA311
  %186 = fadd double %185, 2.000000e+00
  %187 = tail call double @cos(double %186) #5, !noalias !11
  %188 = fadd double %187, 3.800000e+00
  %189 = fmul double %184, %188
  %190 = getelementptr inbounds i8, i8* %0, i64 160
  %191 = bitcast i8* %190 to double*
  %192 = load double, double* %191, align 8, !noalias !11
  %193 = fdiv double %142, %192
  %194 = getelementptr inbounds i8, i8* %0, i64 288
  %195 = bitcast i8* %194 to double*
  %196 = load double, double* %195, align 8, !noalias !11
  %197 = getelementptr inbounds i8, i8* %0, i64 336
  %198 = bitcast i8* %197 to double*
  %199 = load double, double* %198, align 8, !noalias !11
  %200 = fmul double %196, %199
  %201 = tail call double @pow(double %193, double %200) #5, !noalias !11
  %202 = fmul double %201, 1.000000e+02
  %203 = load double, double* %195, align 8, !noalias !11
  %204 = fdiv double 4.000000e+00, %203
  %205 = fdiv double %202, 1.000000e+02
  %206 = tail call double @sqrt(double %205) #3, !noalias !11
  %207 = tail call double @llvm.fabs.f64(double %206) #5
  %208 = fcmp oeq double %205, 0xFFF0000000000000
  %209 = select i1 %208, double 0x7FF0000000000000, double %207
  %210 = fmul double %204, %209
  %211 = load double, double* %191, align 8, !noalias !11
  %212 = fadd double %211, 4.000000e+00
  %213 = fmul double %212, %210
  %214 = load double, double* %77, align 8, !noalias !11
  %215 = tail call double @pow(double %214, double 2.500000e-01) #5, !noalias !11
  %216 = fmul double %215, %213
  %217 = fmul double %146, %146
  %218 = fmul double %150, %150
  %219 = fadd double %217, %218
  %220 = tail call double @sqrt(double %219) #3, !noalias !11
  %221 = tail call double @llvm.fabs.f64(double %220) #5
  %222 = fmul double %189, %221
  %223 = fmul double %135, 1.050000e+00
  %224 = fadd double %147, %223
  %225 = fdiv double %222, %224
  %226 = tail call double @pow(double %225, double 9.000000e-01) #5, !noalias !11
  %227 = tail call double @sqrt(double %205) #3, !noalias !11
  %228 = tail call double @llvm.fabs.f64(double %227) #5
  %229 = select i1 %208, double 0x7FF0000000000000, double %228
  %230 = fmul double %226, %229
  %231 = getelementptr inbounds i8, i8* %0, i64 312
  %232 = bitcast i8* %231 to double*
  %233 = load double, double* %232, align 8, !noalias !11
  %234 = tail call double @pow(double 2.900000e-01, double %233) #5, !noalias !11
  %235 = fsub double 1.640000e+00, %234
  %236 = tail call double @pow(double %235, double 7.300000e-01) #5, !noalias !11
  %237 = fmul double %230, %236
  %238 = load double, double* %77, align 8, !noalias !11
  %239 = tail call double @pow(double %238, double 2.500000e-01) #5, !noalias !11
  %240 = fmul double %237, %239
  %241 = fdiv double %240, %216
  %242 = fcmp olt double %241, 0.000000e+00
  br i1 %242, label %243, label %245, !prof !14

243:                                              ; preds = %175
  %244 = tail call double @sqrt(double %241) #3, !noalias !11
  br label %245

245:                                              ; preds = %175, %243
  %246 = getelementptr inbounds %struct.cmsJCh, %struct.cmsJCh* %2, i64 0, i32 0
  store double %202, double* %246, align 8
  %247 = getelementptr inbounds %struct.cmsJCh, %struct.cmsJCh* %2, i64 0, i32 1
  store double %237, double* %247, align 8
  %248 = getelementptr inbounds %struct.cmsJCh, %struct.cmsJCh* %2, i64 0, i32 2
  store double %176, double* %248, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cmsCIECAM02Reverse(i8* nocapture readonly, %struct.cmsJCh* nocapture readonly, %struct.cmsCIEXYZ* nocapture) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.cmsJCh, %struct.cmsJCh* %1, i64 0, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %struct.cmsJCh, %struct.cmsJCh* %1, i64 0, i32 1
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds %struct.cmsJCh, %struct.cmsJCh* %1, i64 0, i32 2
  %9 = load double, double* %8, align 8
  %10 = fdiv double %5, 1.000000e+02
  %11 = tail call double @sqrt(double %10) #3, !noalias !15
  %12 = tail call double @llvm.fabs.f64(double %11) #5
  %13 = fcmp oeq double %10, 0xFFF0000000000000
  %14 = select i1 %13, double 0x7FF0000000000000, double %12
  %15 = getelementptr inbounds i8, i8* %0, i64 312
  %16 = bitcast i8* %15 to double*
  %17 = load double, double* %16, align 8, !noalias !15
  %18 = tail call double @pow(double 2.900000e-01, double %17) #5, !noalias !15
  %19 = fsub double 1.640000e+00, %18
  %20 = tail call double @pow(double %19, double 7.300000e-01) #5, !noalias !15
  %21 = fmul double %14, %20
  %22 = fdiv double %7, %21
  %23 = tail call double @pow(double %22, double 0x3FF1C71C71C71C72) #5, !noalias !15
  %24 = getelementptr inbounds i8, i8* %0, i64 296
  %25 = bitcast i8* %24 to double*
  %26 = load double, double* %25, align 8, !noalias !15
  %27 = fmul double %26, 0x408E0C4EC4EC4EC5
  %28 = getelementptr inbounds i8, i8* %0, i64 328
  %29 = bitcast i8* %28 to double*
  %30 = load double, double* %29, align 8, !noalias !15
  %31 = fmul double %27, %30
  %32 = fmul double %9, 0x3F91DF46A25CA311
  %33 = fadd double %32, 2.000000e+00
  %34 = tail call double @cos(double %33) #5, !noalias !15
  %35 = fadd double %34, 3.800000e+00
  %36 = fmul double %31, %35
  %37 = getelementptr inbounds i8, i8* %0, i64 160
  %38 = bitcast i8* %37 to double*
  %39 = load double, double* %38, align 8, !noalias !15
  %40 = getelementptr inbounds i8, i8* %0, i64 288
  %41 = bitcast i8* %40 to double*
  %42 = load double, double* %41, align 8, !noalias !15
  %43 = getelementptr inbounds i8, i8* %0, i64 336
  %44 = bitcast i8* %43 to double*
  %45 = load double, double* %44, align 8, !noalias !15
  %46 = fmul double %42, %45
  %47 = fdiv double 1.000000e+00, %46
  %48 = tail call double @pow(double %10, double %47) #5, !noalias !15
  %49 = fmul double %39, %48
  %50 = fdiv double %36, %23
  %51 = getelementptr inbounds i8, i8* %0, i64 320
  %52 = bitcast i8* %51 to double*
  %53 = load double, double* %52, align 8, !noalias !15
  %54 = fdiv double %49, %53
  %55 = fadd double %54, 3.050000e-01
  %56 = tail call double @sin(double %32) #5, !noalias !15
  %57 = tail call double @llvm.fabs.f64(double %56) #5
  %58 = tail call double @cos(double %32) #5, !noalias !15
  %59 = tail call double @llvm.fabs.f64(double %58) #5
  %60 = fcmp ult double %57, %59
  br i1 %60, label %78, label %61

61:                                               ; preds = %3
  %62 = tail call double @sin(double %32) #5, !noalias !15
  %63 = fdiv double %50, %62
  %64 = fmul double %55, 3.050000e+00
  %65 = fmul double %64, 0x3FD4FBCDA3AC10C9
  %66 = tail call double @cos(double %32) #5, !noalias !15
  %67 = tail call double @sin(double %32) #5, !noalias !15
  %68 = fdiv double %66, %67
  %69 = fmul double %68, 0x3FDE9BD37A6F4DE9
  %70 = fadd double %63, %69
  %71 = fadd double %70, 0xBF93B4D2EE4D002F
  %72 = fadd double %71, 0x4012DC0DDE0FB12D
  %73 = fdiv double %65, %72
  %74 = tail call double @cos(double %32) #5, !noalias !15
  %75 = tail call double @sin(double %32) #5, !noalias !15
  %76 = fdiv double %74, %75
  %77 = fmul double %76, %73
  br label %94

78:                                               ; preds = %3
  %79 = tail call double @cos(double %32) #5, !noalias !15
  %80 = fdiv double %50, %79
  %81 = fmul double %55, 3.050000e+00
  %82 = fmul double %81, 0x3FD4FBCDA3AC10C9
  %83 = fadd double %80, 0x3FDE9BD37A6F4DE9
  %84 = tail call double @sin(double %32) #5, !noalias !15
  %85 = tail call double @cos(double %32) #5, !noalias !15
  %86 = fdiv double %84, %85
  %87 = fmul double %86, 0x4012C8590B21642D
  %88 = fadd double %83, %87
  %89 = fdiv double %82, %88
  %90 = tail call double @sin(double %32) #5, !noalias !15
  %91 = tail call double @cos(double %32) #5, !noalias !15
  %92 = fdiv double %90, %91
  %93 = fmul double %92, %89
  br label %94

94:                                               ; preds = %61, %78
  %95 = phi double [ %89, %78 ], [ %77, %61 ]
  %96 = phi double [ %93, %78 ], [ %73, %61 ]
  %97 = fmul double %55, 0x3FD4FBCDA3AC10C9
  %98 = fmul double %95, 0x3FD492B3E95FCB73
  %99 = fadd double %97, %98
  %100 = fmul double %96, 0x3FCA466E93115594
  %101 = fadd double %99, %100
  %102 = fmul double %95, 0x3FE4527985BF6830
  %103 = fsub double %97, %102
  %104 = fmul double %96, 0x3FC7CFD43547B58E
  %105 = fsub double %103, %104
  %106 = fmul double %95, 0x3FC4123F221F04ED
  %107 = fsub double %97, %106
  %108 = fmul double %96, 0x4011F6259688D980
  %109 = fsub double %107, %108
  %110 = getelementptr inbounds i8, i8* %0, i64 344
  %111 = bitcast i8* %110 to double*
  %112 = fadd double %101, -1.000000e-01
  %113 = fcmp olt double %112, 0.000000e+00
  %114 = select i1 %113, double -1.000000e+00, double 1.000000e+00
  %115 = load double, double* %111, align 8, !noalias !18
  %116 = fdiv double 1.000000e+02, %115
  %117 = fmul double %114, %116
  %118 = tail call double @llvm.fabs.f64(double %112) #5
  %119 = fmul double %118, 2.713000e+01
  %120 = fsub double 4.000000e+02, %118
  %121 = fdiv double %119, %120
  %122 = tail call double @pow(double %121, double 0x40030C30C30C30C3) #5, !noalias !18
  %123 = fmul double %122, %117
  %124 = fadd double %105, -1.000000e-01
  %125 = fcmp olt double %124, 0.000000e+00
  %126 = select i1 %125, double -1.000000e+00, double 1.000000e+00
  %127 = load double, double* %111, align 8, !noalias !18
  %128 = fdiv double 1.000000e+02, %127
  %129 = fmul double %126, %128
  %130 = tail call double @llvm.fabs.f64(double %124) #5
  %131 = fmul double %130, 2.713000e+01
  %132 = fsub double 4.000000e+02, %130
  %133 = fdiv double %131, %132
  %134 = tail call double @pow(double %133, double 0x40030C30C30C30C3) #5, !noalias !18
  %135 = fmul double %134, %129
  %136 = fadd double %109, -1.000000e-01
  %137 = fcmp olt double %136, 0.000000e+00
  %138 = select i1 %137, double -1.000000e+00, double 1.000000e+00
  %139 = load double, double* %111, align 8, !noalias !18
  %140 = fdiv double 1.000000e+02, %139
  %141 = fmul double %138, %140
  %142 = tail call double @llvm.fabs.f64(double %136) #5
  %143 = fmul double %142, 2.713000e+01
  %144 = fsub double 4.000000e+02, %142
  %145 = fdiv double %143, %144
  %146 = tail call double @pow(double %145, double 0x40030C30C30C30C3) #5, !noalias !18
  %147 = fmul double %146, %141
  %148 = fmul double %123, 0x3FF8F249DF5F3018
  %149 = fmul double %135, 0x3FE16E5EA75C2336
  %150 = fsub double %148, %149
  %151 = fmul double %147, 0x3F8D91DEAABEDCA0
  %152 = fsub double %150, %151
  %153 = fmul double %123, 0x3FE6DBC443794205
  %154 = fmul double %135, 0x3FFD9ADE4046FFDE
  %155 = fsub double %154, %153
  %156 = fmul double %147, 0x3FC166C5EFA969C8
  %157 = fsub double %155, %156
  %158 = fmul double %123, 0x3F8611789ABDD357
  %159 = fmul double %135, 0x3F756044DD566727
  %160 = fadd double %158, %159
  %161 = fmul double %147, 0x3FEF7CF9CCDE6036
  %162 = fadd double %160, %161
  %163 = getelementptr inbounds i8, i8* %0, i64 8
  %164 = bitcast i8* %163 to double*
  %165 = load double, double* %164, align 8, !noalias !21
  %166 = getelementptr inbounds i8, i8* %0, i64 352
  %167 = bitcast i8* %166 to double*
  %168 = load double, double* %167, align 8, !noalias !21
  %169 = fmul double %165, %168
  %170 = getelementptr inbounds i8, i8* %0, i64 24
  %171 = bitcast i8* %170 to double*
  %172 = load double, double* %171, align 8, !noalias !21
  %173 = fdiv double %169, %172
  %174 = fadd double %173, 1.000000e+00
  %175 = fsub double %174, %168
  %176 = fdiv double %152, %175
  %177 = getelementptr inbounds i8, i8* %0, i64 32
  %178 = bitcast i8* %177 to double*
  %179 = load double, double* %178, align 8, !noalias !21
  %180 = fdiv double %169, %179
  %181 = fadd double %180, 1.000000e+00
  %182 = fsub double %181, %168
  %183 = fdiv double %157, %182
  %184 = getelementptr inbounds i8, i8* %0, i64 40
  %185 = bitcast i8* %184 to double*
  %186 = load double, double* %185, align 8, !noalias !21
  %187 = fdiv double %169, %186
  %188 = fadd double %187, 1.000000e+00
  %189 = fsub double %188, %168
  %190 = fdiv double %162, %189
  %191 = insertelement <2 x double> undef, double %176, i32 0
  %192 = shufflevector <2 x double> %191, <2 x double> undef, <2 x i32> zeroinitializer
  %193 = fmul <2 x double> %192, <double 0x3FF189B951C5C572, double 4.543690e-01>
  %194 = insertelement <2 x double> undef, double %183, i32 0
  %195 = shufflevector <2 x double> %194, <2 x double> undef, <2 x i32> zeroinitializer
  %196 = fmul <2 x double> %195, <double 2.788690e-01, double 4.735330e-01>
  %197 = fsub <2 x double> %193, %196
  %198 = fadd <2 x double> %193, %196
  %199 = shufflevector <2 x double> %197, <2 x double> %198, <2 x i32> <i32 0, i32 3>
  %200 = insertelement <2 x double> undef, double %190, i32 0
  %201 = shufflevector <2 x double> %200, <2 x double> undef, <2 x i32> zeroinitializer
  %202 = fmul <2 x double> %201, <double 1.827450e-01, double 7.209800e-02>
  %203 = fadd <2 x double> %199, %202
  %204 = fmul double %176, 0x3F83B7D84901D191
  %205 = fmul double %183, -5.698000e-03
  %206 = fsub double %205, %204
  %207 = fmul double %190, 0x3FF03EC679CC74B8
  %208 = fadd double %206, %207
  %209 = bitcast %struct.cmsCIEXYZ* %2 to <2 x double>*
  store <2 x double> %203, <2 x double>* %209, align 8
  %210 = getelementptr inbounds %struct.cmsCIEXYZ, %struct.cmsCIEXYZ* %2, i64 0, i32 2
  store double %208, double* %210, align 8
  ret void
}

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @atan(double) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @cos(double) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @sin(double) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #4

declare double @sqrt(double) local_unnamed_addr

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"NonlinearCompression: argument 0"}
!4 = distinct !{!4, !"NonlinearCompression"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"ChromaticAdaptation: argument 0"}
!7 = distinct !{!7, !"ChromaticAdaptation"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"NonlinearCompression: argument 0"}
!10 = distinct !{!10, !"NonlinearCompression"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"ComputeCorrelates: argument 0"}
!13 = distinct !{!13, !"ComputeCorrelates"}
!14 = !{!"branch_weights", i32 1, i32 2000}
!15 = !{!16}
!16 = distinct !{!16, !17, !"InverseCorrelates: argument 0"}
!17 = distinct !{!17, !"InverseCorrelates"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"InverseNonlinearity: argument 0"}
!20 = distinct !{!20, !"InverseNonlinearity"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"InverseChromaticAdaptation: argument 0"}
!23 = distinct !{!23, !"InverseChromaticAdaptation"}
