; ModuleID = '../../net/proxy_resolution/proxy_bypass_rules.cc'
source_filename = "../../net/proxy_resolution/proxy_bypass_rules.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::ProxyBypassRules" = type { %"class.net::SchemeHostPortMatcher" }
%"class.net::SchemeHostPortMatcher" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.net::SchemeHostPortMatcherRule"* }
%"class.net::SchemeHostPortMatcherRule" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.base::StringTokenizerT" = type <{ %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i8, [3 x i8], i32, [4 x i8] }>
%"class.std::__1::__wrap_iter" = type { i8* }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr.9" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %class.GURL* }
%"class.net::IPAddress" = type { %"class.net::IPAddressBytes" }
%"class.net::IPAddressBytes" = type { %"struct.std::__1::array", i8 }
%"struct.std::__1::array" = type { [16 x i8] }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.net::(anonymous namespace)::BypassSimpleHostnamesRule" = type { %"class.net::SchemeHostPortMatcherRule" }
%"class.net::(anonymous namespace)::SubtractImplicitBypassesRule" = type { %"class.net::SchemeHostPortMatcherRule" }

$_ZN3net25SchemeHostPortMatcherRuleD2Ev = comdat any

$_ZN4base16StringTokenizerTINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_11__wrap_iterIPKcEEE12QuickGetNextEv = comdat any

$_ZN4base16StringTokenizerTINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_11__wrap_iterIPKcEEE11FullGetNextEv = comdat any

@_ZN3net16ProxyBypassRules20kBypassListDelimeterE = hidden local_unnamed_addr constant [2 x i8] c";\00", align 1
@_ZN3net12_GLOBAL__N_122kBypassSimpleHostnamesE = internal constant [8 x i8] c"<local>\00", align 1
@_ZN3net12_GLOBAL__N_125kSubtractImplicitBypassesE = internal constant [12 x i8] c"<-loopback>\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"[::ffff\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"169.254.\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@_ZTVN3net12_GLOBAL__N_125BypassSimpleHostnamesRuleE = internal unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::SchemeHostPortMatcherRule"*)* @_ZN3net25SchemeHostPortMatcherRuleD2Ev to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::BypassSimpleHostnamesRule"*)* @_ZN3net12_GLOBAL__N_125BypassSimpleHostnamesRuleD0Ev to i8*), i8* bitcast (i32 (%"class.net::(anonymous namespace)::BypassSimpleHostnamesRule"*, %class.GURL*)* @_ZNK3net12_GLOBAL__N_125BypassSimpleHostnamesRule8EvaluateERK4GURL to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.net::(anonymous namespace)::BypassSimpleHostnamesRule"*)* @_ZNK3net12_GLOBAL__N_125BypassSimpleHostnamesRule8ToStringEv to i8*), i8* bitcast (i1 (%"class.net::SchemeHostPortMatcherRule"*)* @_ZNK3net25SchemeHostPortMatcherRule21IsHostnamePatternRuleEv to i8*)] }, align 8
@_ZTVN3net12_GLOBAL__N_128SubtractImplicitBypassesRuleE = internal unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::SchemeHostPortMatcherRule"*)* @_ZN3net25SchemeHostPortMatcherRuleD2Ev to i8*), i8* bitcast (void (%"class.net::(anonymous namespace)::SubtractImplicitBypassesRule"*)* @_ZN3net12_GLOBAL__N_128SubtractImplicitBypassesRuleD0Ev to i8*), i8* bitcast (i32 (%"class.net::(anonymous namespace)::SubtractImplicitBypassesRule"*, %class.GURL*)* @_ZNK3net12_GLOBAL__N_128SubtractImplicitBypassesRule8EvaluateERK4GURL to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.net::(anonymous namespace)::SubtractImplicitBypassesRule"*)* @_ZNK3net12_GLOBAL__N_128SubtractImplicitBypassesRule8ToStringEv to i8*), i8* bitcast (i1 (%"class.net::SchemeHostPortMatcherRule"*)* @_ZNK3net25SchemeHostPortMatcherRule21IsHostnamePatternRuleEv to i8*)] }, align 8

@_ZN3net16ProxyBypassRulesC1Ev = hidden unnamed_addr alias void (%"class.net::ProxyBypassRules"*), void (%"class.net::ProxyBypassRules"*)* @_ZN3net16ProxyBypassRulesC2Ev
@_ZN3net16ProxyBypassRulesC1ERKS0_ = hidden unnamed_addr alias void (%"class.net::ProxyBypassRules"*, %"class.net::ProxyBypassRules"*), void (%"class.net::ProxyBypassRules"*, %"class.net::ProxyBypassRules"*)* @_ZN3net16ProxyBypassRulesC2ERKS0_
@_ZN3net16ProxyBypassRulesC1EOS0_ = hidden unnamed_addr alias void (%"class.net::ProxyBypassRules"*, %"class.net::ProxyBypassRules"*), void (%"class.net::ProxyBypassRules"*, %"class.net::ProxyBypassRules"*)* @_ZN3net16ProxyBypassRulesC2EOS0_
@_ZN3net16ProxyBypassRulesD1Ev = hidden unnamed_addr alias void (%"class.net::ProxyBypassRules"*), void (%"class.net::ProxyBypassRules"*)* @_ZN3net16ProxyBypassRulesD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net16ProxyBypassRulesC2Ev(%"class.net::ProxyBypassRules"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.net::ProxyBypassRules"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net16ProxyBypassRulesC2ERKS0_(%"class.net::ProxyBypassRules"*, %"class.net::ProxyBypassRules"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"class.net::ProxyBypassRules"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #9
  %5 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %1, i64 0, i32 0
  call void @_ZNK3net21SchemeHostPortMatcher8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %3, %"class.net::SchemeHostPortMatcher"* %6) #9
  call void @_ZN3net16ProxyBypassRules15ParseFromStringERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.net::ProxyBypassRules"* %0, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %3) #9
  %7 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %7, i64 0, i32 1, i32 0
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  call void @_ZdlPv(i8* %13) #10
  br label %14

14:                                               ; preds = %2, %11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.net::ProxyBypassRules"* @_ZN3net16ProxyBypassRulesaSERKS0_(%"class.net::ProxyBypassRules"* returned, %"class.net::ProxyBypassRules"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #9
  %5 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %1, i64 0, i32 0
  call void @_ZNK3net21SchemeHostPortMatcher8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %3, %"class.net::SchemeHostPortMatcher"* %5) #9
  call void @_ZN3net16ProxyBypassRules15ParseFromStringERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.net::ProxyBypassRules"* %0, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %3)
  %6 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %6, i64 0, i32 1, i32 0
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  call void @_ZdlPv(i8* %12) #10
  br label %13

13:                                               ; preds = %2, %10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #9
  ret %"class.net::ProxyBypassRules"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net16ProxyBypassRulesC2EOS0_(%"class.net::ProxyBypassRules"* nocapture, %"class.net::ProxyBypassRules"* nocapture dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.net::ProxyBypassRules"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #9
  %4 = bitcast %"class.net::ProxyBypassRules"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.net::ProxyBypassRules"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::unique_ptr"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %11 = bitcast %"class.std::__1::unique_ptr"** %10 to i64*
  store i64 %9, i64* %11, align 8
  %12 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %1, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast %"class.std::__1::unique_ptr"** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::unique_ptr"** %15 to i64*
  store i64 %14, i64* %16, align 8
  %17 = bitcast %"class.net::ProxyBypassRules"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 24, i1 false) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.net::ProxyBypassRules"* @_ZN3net16ProxyBypassRulesaSEOS0_(%"class.net::ProxyBypassRules"* returned, %"class.net::ProxyBypassRules"* nocapture dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %3, align 8
  %5 = icmp eq %"class.std::__1::unique_ptr"* %4, null
  br i1 %5, label %30, label %6

6:                                                ; preds = %2
  %7 = bitcast %"class.std::__1::unique_ptr"* %4 to i8*
  %8 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %9 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %8, align 8
  %10 = icmp eq %"class.std::__1::unique_ptr"* %9, %4
  br i1 %10, label %27, label %11

11:                                               ; preds = %6, %22
  %12 = phi %"class.std::__1::unique_ptr"* [ %13, %22 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %12, i64 -1
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 0, i32 0, i32 0, i32 0
  %15 = load %"class.net::SchemeHostPortMatcherRule"*, %"class.net::SchemeHostPortMatcherRule"** %14, align 8
  store %"class.net::SchemeHostPortMatcherRule"* null, %"class.net::SchemeHostPortMatcherRule"** %14, align 8
  %16 = icmp eq %"class.net::SchemeHostPortMatcherRule"* %15, null
  br i1 %16, label %22, label %17

17:                                               ; preds = %11
  %18 = bitcast %"class.net::SchemeHostPortMatcherRule"* %15 to void (%"class.net::SchemeHostPortMatcherRule"*)***
  %19 = load void (%"class.net::SchemeHostPortMatcherRule"*)**, void (%"class.net::SchemeHostPortMatcherRule"*)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.net::SchemeHostPortMatcherRule"*)*, void (%"class.net::SchemeHostPortMatcherRule"*)** %19, i64 1
  %21 = load void (%"class.net::SchemeHostPortMatcherRule"*)*, void (%"class.net::SchemeHostPortMatcherRule"*)** %20, align 8
  tail call void %21(%"class.net::SchemeHostPortMatcherRule"* nonnull %15) #9
  br label %22

22:                                               ; preds = %17, %11
  %23 = icmp eq %"class.std::__1::unique_ptr"* %13, %4
  br i1 %23, label %24, label %11

24:                                               ; preds = %22
  %25 = bitcast %"class.net::ProxyBypassRules"* %0 to i8**
  %26 = load i8*, i8** %25, align 8
  br label %27

27:                                               ; preds = %24, %6
  %28 = phi i8* [ %26, %24 ], [ %7, %6 ]
  store %"class.std::__1::unique_ptr"* %4, %"class.std::__1::unique_ptr"** %8, align 8
  tail call void @_ZdlPv(i8* %28) #10
  %29 = bitcast %"class.net::ProxyBypassRules"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 24, i1 false) #9
  br label %30

30:                                               ; preds = %2, %27
  %31 = bitcast %"class.net::ProxyBypassRules"* %1 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %"class.net::ProxyBypassRules"* %0 to i64*
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %35 = bitcast %"class.std::__1::unique_ptr"** %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %38 = bitcast %"class.std::__1::unique_ptr"** %37 to i64*
  store i64 %36, i64* %38, align 8
  %39 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %1, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %40 = bitcast %"class.std::__1::unique_ptr"** %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %0, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %43 = bitcast %"class.std::__1::unique_ptr"** %42 to i64*
  store i64 %41, i64* %43, align 8
  %44 = bitcast %"class.net::ProxyBypassRules"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 24, i1 false) #9
  ret %"class.net::ProxyBypassRules"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net16ProxyBypassRulesD2Ev(%"class.net::ProxyBypassRules"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %2, align 8
  %4 = icmp eq %"class.std::__1::unique_ptr"* %3, null
  br i1 %4, label %28, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.std::__1::unique_ptr"* %3 to i8*
  %7 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %8 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %7, align 8
  %9 = icmp eq %"class.std::__1::unique_ptr"* %8, %3
  br i1 %9, label %26, label %10

10:                                               ; preds = %5, %21
  %11 = phi %"class.std::__1::unique_ptr"* [ %12, %21 ], [ %8, %5 ]
  %12 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %11, i64 -1
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %12, i64 0, i32 0, i32 0, i32 0
  %14 = load %"class.net::SchemeHostPortMatcherRule"*, %"class.net::SchemeHostPortMatcherRule"** %13, align 8
  store %"class.net::SchemeHostPortMatcherRule"* null, %"class.net::SchemeHostPortMatcherRule"** %13, align 8
  %15 = icmp eq %"class.net::SchemeHostPortMatcherRule"* %14, null
  br i1 %15, label %21, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.net::SchemeHostPortMatcherRule"* %14 to void (%"class.net::SchemeHostPortMatcherRule"*)***
  %18 = load void (%"class.net::SchemeHostPortMatcherRule"*)**, void (%"class.net::SchemeHostPortMatcherRule"*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.net::SchemeHostPortMatcherRule"*)*, void (%"class.net::SchemeHostPortMatcherRule"*)** %18, i64 1
  %20 = load void (%"class.net::SchemeHostPortMatcherRule"*)*, void (%"class.net::SchemeHostPortMatcherRule"*)** %19, align 8
  tail call void %20(%"class.net::SchemeHostPortMatcherRule"* nonnull %14) #9
  br label %21

21:                                               ; preds = %16, %10
  %22 = icmp eq %"class.std::__1::unique_ptr"* %12, %3
  br i1 %22, label %23, label %10

23:                                               ; preds = %21
  %24 = bitcast %"class.net::ProxyBypassRules"* %0 to i8**
  %25 = load i8*, i8** %24, align 8
  br label %26

26:                                               ; preds = %23, %5
  %27 = phi i8* [ %25, %23 ], [ %6, %5 ]
  store %"class.std::__1::unique_ptr"* %3, %"class.std::__1::unique_ptr"** %7, align 8
  tail call void @_ZdlPv(i8* %27) #10
  br label %28

28:                                               ; preds = %1, %26
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net16ProxyBypassRules15ParseFromStringERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.net::ProxyBypassRules"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::StringTokenizerT", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %0, i64 0, i32 0
  tail call void @_ZN3net21SchemeHostPortMatcher5ClearEv(%"class.net::SchemeHostPortMatcher"* %5) #9
  %6 = bitcast %"class.base::StringTokenizerT"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %6) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 96, i1 false)
  %7 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #9
  %8 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %8, i64 0, i32 1, i32 0
  store i8 2, i8* %9, align 1
  %10 = bitcast %"class.std::__1::basic_string"* %4 to i16*
  store i16 15148, i16* %10, align 8
  %11 = getelementptr inbounds i8, i8* %7, i64 2
  store i8 0, i8* %11, align 2
  %12 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %3, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %3, i64 0, i32 1, i32 0
  %14 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %3, i64 0, i32 2, i32 0
  %15 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %3, i64 0, i32 3, i32 0
  %16 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %3, i64 0, i32 4
  %17 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  %19 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %3, i64 0, i32 5
  %20 = bitcast %"class.std::__1::basic_string"* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 24, i1 false) #9
  %21 = load i8, i8* %18, align 1
  %22 = icmp slt i8 %21, 0
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %28 = zext i8 %21 to i64
  %29 = select i1 %22, i8* %24, i8* %27
  %30 = select i1 %22, i64 %26, i64 %28
  %31 = getelementptr inbounds i8, i8* %29, i64 %30
  store i8* %29, i8** %12, align 8
  store i8* %29, i8** %13, align 8
  store i8* %29, i8** %14, align 8
  store i8* %31, i8** %15, align 8
  %32 = bitcast %"class.std::__1::basic_string"* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* nonnull align 8 %7, i64 24, i1 false) #9
  %33 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %3, i64 0, i32 6
  store i32 0, i32* %33, align 8
  %34 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %3, i64 0, i32 7
  store i8 1, i8* %34, align 4
  %35 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %3, i64 0, i32 9
  store i32 0, i32* %35, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #9
  %36 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %3, i64 0, i32 5
  %37 = bitcast %"class.std::__1::basic_string"* %36 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %37, i64 0, i32 1, i32 0
  %39 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %3, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %40 = bitcast i8** %14 to i64*
  br label %41

41:                                               ; preds = %55, %2
  %42 = phi i32 [ %63, %55 ], [ 0, %2 ]
  %43 = phi i64 [ %62, %55 ], [ 0, %2 ]
  %44 = phi i8 [ %61, %55 ], [ 0, %2 ]
  %45 = icmp slt i8 %44, 0
  %46 = zext i8 %44 to i64
  %47 = select i1 %45, i64 %43, i64 %46
  %48 = icmp eq i64 %47, 0
  %49 = icmp eq i32 %42, 0
  %50 = and i1 %48, %49
  br i1 %50, label %51, label %53

51:                                               ; preds = %41
  %52 = call zeroext i1 @_ZN4base16StringTokenizerTINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_11__wrap_iterIPKcEEE12QuickGetNextEv(%"class.base::StringTokenizerT"* nonnull %3) #9
  br i1 %52, label %55, label %64

53:                                               ; preds = %41
  %54 = call zeroext i1 @_ZN4base16StringTokenizerTINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_11__wrap_iterIPKcEEE11FullGetNextEv(%"class.base::StringTokenizerT"* nonnull %3) #9
  br i1 %54, label %55, label %64

55:                                               ; preds = %51, %53
  %56 = load i8*, i8** %13, align 8
  %57 = load i64, i64* %40, align 8
  %58 = ptrtoint i8* %56 to i64
  %59 = sub i64 %57, %58
  %60 = call zeroext i1 @_ZN3net16ProxyBypassRules17AddRuleFromStringEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.net::ProxyBypassRules"* %0, i8* %56, i64 %59)
  %61 = load i8, i8* %38, align 1
  %62 = load i64, i64* %39, align 8
  %63 = load i32, i32* %33, align 8
  br label %41

64:                                               ; preds = %51, %53
  %65 = load i8, i8* %38, align 1
  %66 = icmp slt i8 %65, 0
  br i1 %66, label %67, label %70

67:                                               ; preds = %64
  %68 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %36, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  call void @_ZdlPv(i8* %69) #10
  br label %70

70:                                               ; preds = %67, %64
  %71 = bitcast %"class.std::__1::basic_string"* %16 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %72 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %71, i64 0, i32 1, i32 0
  %73 = load i8, i8* %72, align 1
  %74 = icmp slt i8 %73, 0
  br i1 %74, label %75, label %78

75:                                               ; preds = %70
  %76 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %77 = load i8*, i8** %76, align 8
  call void @_ZdlPv(i8* %77) #10
  br label %78

78:                                               ; preds = %70, %75
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %6) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3net16ProxyBypassRules8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.net::ProxyBypassRules"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %1, i64 0, i32 0
  tail call void @_ZNK3net21SchemeHostPortMatcher8ToStringEv(%"class.std::__1::basic_string"* sret %0, %"class.net::SchemeHostPortMatcher"* %3) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net16ProxyBypassRules11ReplaceRuleEmNSt3__110unique_ptrINS_25SchemeHostPortMatcherRuleENS1_14default_deleteIS3_EEEE(%"class.net::ProxyBypassRules"*, i64, %"class.net::SchemeHostPortMatcherRule"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %0, i64 0, i32 0
  tail call void @_ZN3net21SchemeHostPortMatcher11ReplaceRuleEmNSt3__110unique_ptrINS_25SchemeHostPortMatcherRuleENS1_14default_deleteIS3_EEEE(%"class.net::SchemeHostPortMatcher"* %4, i64 %1, %"class.net::SchemeHostPortMatcherRule"* %2) #9
  ret void
}

declare void @_ZN3net21SchemeHostPortMatcher11ReplaceRuleEmNSt3__110unique_ptrINS_25SchemeHostPortMatcherRuleENS1_14default_deleteIS3_EEEE(%"class.net::SchemeHostPortMatcher"*, i64, %"class.net::SchemeHostPortMatcherRule"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3net16ProxyBypassRules7MatchesERK4GURLb(%"class.net::ProxyBypassRules"*, %class.GURL* dereferenceable(120), i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %0, i64 0, i32 0
  %5 = tail call i32 @_ZNK3net21SchemeHostPortMatcher8EvaluateERK4GURL(%"class.net::SchemeHostPortMatcher"* %4, %class.GURL* dereferenceable(120) %1) #9
  switch i32 %5, label %8 [
    i32 1, label %6
    i32 2, label %11
  ]

6:                                                ; preds = %3
  %7 = xor i1 %2, true
  br label %11

8:                                                ; preds = %3
  %9 = tail call zeroext i1 @_ZN3net16ProxyBypassRules20MatchesImplicitRulesERK4GURL(%class.GURL* dereferenceable(120) %1)
  %10 = or i1 %9, %2
  br label %11

11:                                               ; preds = %3, %8, %6
  %12 = phi i1 [ %10, %8 ], [ %7, %6 ], [ %2, %3 ]
  ret i1 %12
}

declare i32 @_ZNK3net21SchemeHostPortMatcher8EvaluateERK4GURL(%"class.net::SchemeHostPortMatcher"*, %class.GURL* dereferenceable(120)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net16ProxyBypassRules20MatchesImplicitRulesERK4GURL(%class.GURL* dereferenceable(120)) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.net::IPAddress", align 1
  %3 = alloca %"class.base::BasicStringPiece", align 8
  %4 = alloca %"class.net::IPAddress", align 1
  %5 = alloca %"class.base::BasicStringPiece", align 8
  %6 = tail call zeroext i1 @_ZN3net11IsLocalhostERK4GURL(%class.GURL* dereferenceable(120) %0) #9
  br i1 %6, label %100, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.GURL, %class.GURL* %0, i64 0, i32 2, i32 3, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %9, 1
  br i1 %10, label %25, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %class.GURL, %class.GURL* %0, i64 0, i32 2, i32 3, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = sext i32 %13 to i64
  %15 = bitcast %class.GURL* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  %19 = getelementptr inbounds %class.GURL, %class.GURL* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = bitcast %class.GURL* %0 to i8*
  %22 = select i1 %18, i8* %20, i8* %21
  %23 = getelementptr inbounds i8, i8* %22, i64 %14
  %24 = sext i32 %9 to i64
  br label %25

25:                                               ; preds = %11, %7
  %26 = phi i8* [ %23, %11 ], [ null, %7 ]
  %27 = phi i64 [ %24, %11 ], [ 0, %7 ]
  %28 = tail call zeroext i1 @_ZN4base10StartsWithENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_NS_11CompareCaseE(i8* %26, i64 %27, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), i64 7, i32 0) #9
  br i1 %28, label %29, label %45

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %30) #9
  %31 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %4, i64 0, i32 0, i32 0, i32 0, i64 12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %30, i8 -86, i64 17, i1 false) #9
  call void @_ZN3net9IPAddressC1Ev(%"class.net::IPAddress"* nonnull %4) #9
  %32 = bitcast %"class.base::BasicStringPiece"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32) #9
  %33 = call { i8*, i64 } @_ZNK4GURL19HostNoBracketsPieceEv(%class.GURL* %0) #9
  %34 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 0, i32 0
  %35 = extractvalue { i8*, i64 } %33, 0
  store i8* %35, i8** %34, align 8
  %36 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %5, i64 0, i32 1
  %37 = extractvalue { i8*, i64 } %33, 1
  store i64 %37, i64* %36, align 8
  %38 = call zeroext i1 @_ZN3net9IPAddress19AssignFromIPLiteralERKN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.net::IPAddress"* nonnull %4, %"class.base::BasicStringPiece"* nonnull dereferenceable(16) %5) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32) #9
  br i1 %38, label %39, label %41

39:                                               ; preds = %29
  %40 = call zeroext i1 @_ZNK3net9IPAddress16IsIPv4MappedIPv6Ev(%"class.net::IPAddress"* nonnull %4) #9
  br i1 %40, label %42, label %41

41:                                               ; preds = %29, %39
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %30) #9
  br label %45

42:                                               ; preds = %39
  %43 = load i8, i8* %31, align 1
  %44 = icmp eq i8 %43, 127
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %30) #9
  br i1 %44, label %100, label %45

45:                                               ; preds = %25, %41, %42
  %46 = load i32, i32* %8, align 4
  %47 = icmp slt i32 %46, 1
  br i1 %47, label %62, label %48

48:                                               ; preds = %45
  %49 = getelementptr inbounds %class.GURL, %class.GURL* %0, i64 0, i32 2, i32 3, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = sext i32 %50 to i64
  %52 = bitcast %class.GURL* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %53 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %52, i64 0, i32 1, i32 0
  %54 = load i8, i8* %53, align 1
  %55 = icmp slt i8 %54, 0
  %56 = getelementptr inbounds %class.GURL, %class.GURL* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = load i8*, i8** %56, align 8
  %58 = bitcast %class.GURL* %0 to i8*
  %59 = select i1 %55, i8* %57, i8* %58
  %60 = getelementptr inbounds i8, i8* %59, i64 %51
  %61 = sext i32 %46 to i64
  br label %62

62:                                               ; preds = %48, %45
  %63 = phi i8* [ %60, %48 ], [ null, %45 ]
  %64 = phi i64 [ %61, %48 ], [ 0, %45 ]
  %65 = call zeroext i1 @_ZN4base10StartsWithENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_NS_11CompareCaseE(i8* %63, i64 %64, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i64 8, i32 0) #9
  br i1 %65, label %87, label %66

66:                                               ; preds = %62
  %67 = load i32, i32* %8, align 4
  %68 = icmp slt i32 %67, 1
  br i1 %68, label %83, label %69

69:                                               ; preds = %66
  %70 = getelementptr inbounds %class.GURL, %class.GURL* %0, i64 0, i32 2, i32 3, i32 0
  %71 = load i32, i32* %70, align 4
  %72 = sext i32 %71 to i64
  %73 = bitcast %class.GURL* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %74 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %73, i64 0, i32 1, i32 0
  %75 = load i8, i8* %74, align 1
  %76 = icmp slt i8 %75, 0
  %77 = getelementptr inbounds %class.GURL, %class.GURL* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = load i8*, i8** %77, align 8
  %79 = bitcast %class.GURL* %0 to i8*
  %80 = select i1 %76, i8* %78, i8* %79
  %81 = getelementptr inbounds i8, i8* %80, i64 %72
  %82 = sext i32 %67 to i64
  br label %83

83:                                               ; preds = %69, %66
  %84 = phi i8* [ %81, %69 ], [ null, %66 ]
  %85 = phi i64 [ %82, %69 ], [ 0, %66 ]
  %86 = call zeroext i1 @_ZN4base10StartsWithENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_NS_11CompareCaseE(i8* %84, i64 %85, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i64 1, i32 0) #9
  br i1 %86, label %87, label %100

87:                                               ; preds = %83, %62
  %88 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %2, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %88) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %88, i8 -86, i64 17, i1 false) #9
  call void @_ZN3net9IPAddressC1Ev(%"class.net::IPAddress"* nonnull %2) #9
  %89 = bitcast %"class.base::BasicStringPiece"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %89) #9
  %90 = call { i8*, i64 } @_ZNK4GURL19HostNoBracketsPieceEv(%class.GURL* %0) #9
  %91 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %3, i64 0, i32 0
  %92 = extractvalue { i8*, i64 } %90, 0
  store i8* %92, i8** %91, align 8
  %93 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %3, i64 0, i32 1
  %94 = extractvalue { i8*, i64 } %90, 1
  store i64 %94, i64* %93, align 8
  %95 = call zeroext i1 @_ZN3net9IPAddress19AssignFromIPLiteralERKN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.net::IPAddress"* nonnull %2, %"class.base::BasicStringPiece"* nonnull dereferenceable(16) %3) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %89) #9
  br i1 %95, label %96, label %98

96:                                               ; preds = %87
  %97 = call zeroext i1 @_ZNK3net9IPAddress11IsLinkLocalEv(%"class.net::IPAddress"* nonnull %2) #9
  br label %98

98:                                               ; preds = %96, %87
  %99 = phi i1 [ %97, %96 ], [ false, %87 ]
  call void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"* nonnull %2) #9
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %88) #9
  br label %100

100:                                              ; preds = %98, %83, %42, %1
  %101 = phi i1 [ true, %42 ], [ true, %1 ], [ %99, %98 ], [ false, %83 ]
  ret i1 %101
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3net16ProxyBypassRuleseqERKS0_(%"class.net::ProxyBypassRules"* nocapture readonly, %"class.net::ProxyBypassRules"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %6 = bitcast %"class.std::__1::unique_ptr"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.net::ProxyBypassRules"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %12 = bitcast %"class.std::__1::unique_ptr"** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.net::ProxyBypassRules"* %1 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = sub i64 %13, %15
  %17 = icmp eq i64 %10, %16
  br i1 %17, label %18, label %106

18:                                               ; preds = %2
  %19 = icmp eq i64 %7, %9
  br i1 %19, label %106, label %20

20:                                               ; preds = %18
  %21 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %22 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  %23 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %24 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %25 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %24, i64 0, i32 1, i32 0
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %27 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %28 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %27, i64 0, i32 1, i32 0
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %38

32:                                               ; preds = %104
  %33 = load i64, i64* %6, align 8
  %34 = load i64, i64* %8, align 8
  %35 = sub i64 %33, %34
  %36 = ashr exact i64 %35, 3
  %37 = icmp ult i64 %105, %36
  br i1 %37, label %38, label %106

38:                                               ; preds = %20, %32
  %39 = phi i64 [ %9, %20 ], [ %34, %32 ]
  %40 = phi i64 [ 0, %20 ], [ %105, %32 ]
  %41 = inttoptr i64 %39 to %"class.std::__1::unique_ptr"*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21) #9
  %42 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %41, i64 %40, i32 0, i32 0, i32 0
  %43 = load %"class.net::SchemeHostPortMatcherRule"*, %"class.net::SchemeHostPortMatcherRule"** %42, align 8
  %44 = bitcast %"class.net::SchemeHostPortMatcherRule"* %43 to void (%"class.std::__1::basic_string"*, %"class.net::SchemeHostPortMatcherRule"*)***
  %45 = load void (%"class.std::__1::basic_string"*, %"class.net::SchemeHostPortMatcherRule"*)**, void (%"class.std::__1::basic_string"*, %"class.net::SchemeHostPortMatcherRule"*)*** %44, align 8
  %46 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.net::SchemeHostPortMatcherRule"*)*, void (%"class.std::__1::basic_string"*, %"class.net::SchemeHostPortMatcherRule"*)** %45, i64 3
  %47 = load void (%"class.std::__1::basic_string"*, %"class.net::SchemeHostPortMatcherRule"*)*, void (%"class.std::__1::basic_string"*, %"class.net::SchemeHostPortMatcherRule"*)** %46, align 8
  call void %47(%"class.std::__1::basic_string"* nonnull sret %3, %"class.net::SchemeHostPortMatcherRule"* %43) #9
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #9
  %48 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %23, align 8
  %49 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %48, i64 %40, i32 0, i32 0, i32 0
  %50 = load %"class.net::SchemeHostPortMatcherRule"*, %"class.net::SchemeHostPortMatcherRule"** %49, align 8
  %51 = bitcast %"class.net::SchemeHostPortMatcherRule"* %50 to void (%"class.std::__1::basic_string"*, %"class.net::SchemeHostPortMatcherRule"*)***
  %52 = load void (%"class.std::__1::basic_string"*, %"class.net::SchemeHostPortMatcherRule"*)**, void (%"class.std::__1::basic_string"*, %"class.net::SchemeHostPortMatcherRule"*)*** %51, align 8
  %53 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.net::SchemeHostPortMatcherRule"*)*, void (%"class.std::__1::basic_string"*, %"class.net::SchemeHostPortMatcherRule"*)** %52, i64 3
  %54 = load void (%"class.std::__1::basic_string"*, %"class.net::SchemeHostPortMatcherRule"*)*, void (%"class.std::__1::basic_string"*, %"class.net::SchemeHostPortMatcherRule"*)** %53, align 8
  call void %54(%"class.std::__1::basic_string"* nonnull sret %4, %"class.net::SchemeHostPortMatcherRule"* %50) #9
  %55 = load i8, i8* %25, align 1
  %56 = icmp slt i8 %55, 0
  %57 = load i64, i64* %26, align 8
  %58 = zext i8 %55 to i64
  %59 = select i1 %56, i64 %57, i64 %58
  %60 = load i8, i8* %28, align 1
  %61 = icmp slt i8 %60, 0
  %62 = load i64, i64* %29, align 8
  %63 = zext i8 %60 to i64
  %64 = select i1 %61, i64 %62, i64 %63
  %65 = icmp eq i64 %59, %64
  br i1 %65, label %66, label %94

66:                                               ; preds = %38
  %67 = load i8*, i8** %30, align 8
  %68 = select i1 %56, i8* %67, i8* %21
  %69 = load i8*, i8** %31, align 8
  %70 = select i1 %61, i8* %69, i8* %22
  %71 = icmp eq i64 %59, 0
  br i1 %56, label %78, label %72

72:                                               ; preds = %66
  br i1 %71, label %94, label %73

73:                                               ; preds = %72
  %74 = ptrtoint i8* %67 to i64
  %75 = trunc i64 %74 to i8
  %76 = load i8, i8* %70, align 1
  %77 = icmp eq i8 %76, %75
  br i1 %77, label %82, label %94

78:                                               ; preds = %66
  br i1 %71, label %94, label %79

79:                                               ; preds = %78
  %80 = call i32 @bcmp(i8* %68, i8* %70, i64 %59) #9
  %81 = icmp ne i32 %80, 0
  br label %94

82:                                               ; preds = %73, %89
  %83 = phi i64 [ %86, %89 ], [ %58, %73 ]
  %84 = phi i8* [ %87, %89 ], [ %21, %73 ]
  %85 = phi i8* [ %90, %89 ], [ %70, %73 ]
  %86 = add i64 %83, -1
  %87 = getelementptr inbounds i8, i8* %84, i64 1
  %88 = icmp eq i64 %86, 0
  br i1 %88, label %94, label %89

89:                                               ; preds = %82
  %90 = getelementptr inbounds i8, i8* %85, i64 1
  %91 = load i8, i8* %87, align 1
  %92 = load i8, i8* %90, align 1
  %93 = icmp eq i8 %91, %92
  br i1 %93, label %82, label %94

94:                                               ; preds = %82, %89, %73, %38, %72, %78, %79
  %95 = phi i1 [ true, %38 ], [ %81, %79 ], [ false, %78 ], [ false, %72 ], [ true, %73 ], [ false, %82 ], [ true, %89 ]
  br i1 %61, label %96, label %99

96:                                               ; preds = %94
  %97 = load i8*, i8** %31, align 8
  call void @_ZdlPv(i8* %97) #10
  %98 = load i8, i8* %25, align 1
  br label %99

99:                                               ; preds = %94, %96
  %100 = phi i8 [ %55, %94 ], [ %98, %96 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #9
  %101 = icmp slt i8 %100, 0
  br i1 %101, label %102, label %104

102:                                              ; preds = %99
  %103 = load i8*, i8** %30, align 8
  call void @_ZdlPv(i8* %103) #10
  br label %104

104:                                              ; preds = %99, %102
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21) #9
  %105 = add nuw i64 %40, 1
  br i1 %95, label %106, label %32

106:                                              ; preds = %104, %32, %18, %2
  %107 = phi i1 [ false, %2 ], [ true, %18 ], [ false, %104 ], [ true, %32 ]
  ret i1 %107
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net16ProxyBypassRules5ClearEv(%"class.net::ProxyBypassRules"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %0, i64 0, i32 0
  tail call void @_ZN3net21SchemeHostPortMatcher5ClearEv(%"class.net::SchemeHostPortMatcher"* %2) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net16ProxyBypassRules17AddRuleFromStringEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.net::ProxyBypassRules"*, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = tail call { i8*, i64 } @_ZN4base19TrimWhitespaceASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_13TrimPositionsE(i8* %1, i64 %2, i32 3) #9
  %5 = extractvalue { i8*, i64 } %4, 0
  %6 = extractvalue { i8*, i64 } %4, 1
  %7 = tail call zeroext i1 @_ZN4base20LowerCaseEqualsASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %5, i64 %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @_ZN3net12_GLOBAL__N_122kBypassSimpleHostnamesE, i64 0, i64 0), i64 7) #9
  br i1 %7, label %14, label %8

8:                                                ; preds = %3
  %9 = tail call zeroext i1 @_ZN4base20LowerCaseEqualsASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %5, i64 %6, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @_ZN3net12_GLOBAL__N_125kSubtractImplicitBypassesE, i64 0, i64 0), i64 11) #9
  br i1 %9, label %14, label %10

10:                                               ; preds = %8
  %11 = tail call %"class.net::SchemeHostPortMatcherRule"* @_ZN3net25SchemeHostPortMatcherRule22FromUntrimmedRawStringEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(i8* %1, i64 %2) #9
  %12 = ptrtoint %"class.net::SchemeHostPortMatcherRule"* %11 to i64
  %13 = icmp eq %"class.net::SchemeHostPortMatcherRule"* %11, null
  br i1 %13, label %23, label %19

14:                                               ; preds = %8, %3
  %15 = phi i32 (...)** [ bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net12_GLOBAL__N_125BypassSimpleHostnamesRuleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %3 ], [ bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net12_GLOBAL__N_128SubtractImplicitBypassesRuleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), %8 ]
  %16 = tail call i8* @_Znwm(i64 8) #10
  %17 = bitcast i8* %16 to i32 (...)***
  store i32 (...)** %15, i32 (...)*** %17, align 8
  %18 = ptrtoint i8* %16 to i64
  br label %19

19:                                               ; preds = %14, %10
  %20 = phi i64 [ %12, %10 ], [ %18, %14 ]
  %21 = inttoptr i64 %20 to %"class.net::SchemeHostPortMatcherRule"*
  %22 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %0, i64 0, i32 0
  tail call void @_ZN3net21SchemeHostPortMatcher13AddAsLastRuleENSt3__110unique_ptrINS_25SchemeHostPortMatcherRuleENS1_14default_deleteIS3_EEEE(%"class.net::SchemeHostPortMatcher"* %22, %"class.net::SchemeHostPortMatcherRule"* nonnull %21) #9
  br label %23

23:                                               ; preds = %10, %19
  %24 = phi i1 [ true, %19 ], [ false, %10 ]
  ret i1 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net16ProxyBypassRules34PrependRuleToBypassSimpleHostnamesEv(%"class.net::ProxyBypassRules"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %0, i64 0, i32 0
  %3 = tail call i8* @_Znwm(i64 8) #10
  %4 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net12_GLOBAL__N_125BypassSimpleHostnamesRuleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = bitcast i8* %3 to %"class.net::SchemeHostPortMatcherRule"*
  tail call void @_ZN3net21SchemeHostPortMatcher14AddAsFirstRuleENSt3__110unique_ptrINS_25SchemeHostPortMatcherRuleENS1_14default_deleteIS3_EEEE(%"class.net::SchemeHostPortMatcher"* %2, %"class.net::SchemeHostPortMatcherRule"* nonnull %5) #9
  ret void
}

declare void @_ZN3net21SchemeHostPortMatcher14AddAsFirstRuleENSt3__110unique_ptrINS_25SchemeHostPortMatcherRuleENS1_14default_deleteIS3_EEEE(%"class.net::SchemeHostPortMatcher"*, %"class.net::SchemeHostPortMatcherRule"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3net21SchemeHostPortMatcher13AddAsLastRuleENSt3__110unique_ptrINS_25SchemeHostPortMatcherRuleENS1_14default_deleteIS3_EEEE(%"class.net::SchemeHostPortMatcher"*, %"class.net::SchemeHostPortMatcherRule"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net16ProxyBypassRules26AddRulesToSubtractImplicitEv(%"class.net::ProxyBypassRules"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %0, i64 0, i32 0
  %3 = tail call i8* @_Znwm(i64 8) #10
  %4 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net12_GLOBAL__N_128SubtractImplicitBypassesRuleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = bitcast i8* %3 to %"class.net::SchemeHostPortMatcherRule"*
  tail call void @_ZN3net21SchemeHostPortMatcher13AddAsLastRuleENSt3__110unique_ptrINS_25SchemeHostPortMatcherRuleENS1_14default_deleteIS3_EEEE(%"class.net::SchemeHostPortMatcher"* %2, %"class.net::SchemeHostPortMatcherRule"* nonnull %5) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net16ProxyBypassRules26GetRulesToSubtractImplicitEv(%"class.std::__1::basic_string"* noalias sret) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.net::ProxyBypassRules", align 8
  %3 = bitcast %"class.net::ProxyBypassRules"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #9
  %4 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %2, i64 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 24, i1 false) #9
  %6 = getelementptr inbounds %"class.net::ProxyBypassRules", %"class.net::ProxyBypassRules"* %2, i64 0, i32 0
  %7 = tail call i8* @_Znwm(i64 8) #10
  %8 = bitcast i8* %7 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net12_GLOBAL__N_128SubtractImplicitBypassesRuleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = bitcast i8* %7 to %"class.net::SchemeHostPortMatcherRule"*
  call void @_ZN3net21SchemeHostPortMatcher13AddAsLastRuleENSt3__110unique_ptrINS_25SchemeHostPortMatcherRuleENS1_14default_deleteIS3_EEEE(%"class.net::SchemeHostPortMatcher"* nonnull %6, %"class.net::SchemeHostPortMatcherRule"* nonnull %9) #9
  call void @_ZNK3net21SchemeHostPortMatcher8ToStringEv(%"class.std::__1::basic_string"* sret %0, %"class.net::SchemeHostPortMatcher"* nonnull %6) #9
  %10 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %4, align 8
  %11 = icmp eq %"class.std::__1::unique_ptr"* %10, null
  br i1 %11, label %34, label %12

12:                                               ; preds = %1
  %13 = bitcast %"class.std::__1::unique_ptr"* %10 to i8*
  %14 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %5, align 8
  %15 = icmp eq %"class.std::__1::unique_ptr"* %14, %10
  br i1 %15, label %32, label %16

16:                                               ; preds = %12, %27
  %17 = phi %"class.std::__1::unique_ptr"* [ %18, %27 ], [ %14, %12 ]
  %18 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %17, i64 -1
  %19 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %18, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.net::SchemeHostPortMatcherRule"*, %"class.net::SchemeHostPortMatcherRule"** %19, align 8
  store %"class.net::SchemeHostPortMatcherRule"* null, %"class.net::SchemeHostPortMatcherRule"** %19, align 8
  %21 = icmp eq %"class.net::SchemeHostPortMatcherRule"* %20, null
  br i1 %21, label %27, label %22

22:                                               ; preds = %16
  %23 = bitcast %"class.net::SchemeHostPortMatcherRule"* %20 to void (%"class.net::SchemeHostPortMatcherRule"*)***
  %24 = load void (%"class.net::SchemeHostPortMatcherRule"*)**, void (%"class.net::SchemeHostPortMatcherRule"*)*** %23, align 8
  %25 = getelementptr inbounds void (%"class.net::SchemeHostPortMatcherRule"*)*, void (%"class.net::SchemeHostPortMatcherRule"*)** %24, i64 1
  %26 = load void (%"class.net::SchemeHostPortMatcherRule"*)*, void (%"class.net::SchemeHostPortMatcherRule"*)** %25, align 8
  call void %26(%"class.net::SchemeHostPortMatcherRule"* nonnull %20) #9
  br label %27

27:                                               ; preds = %22, %16
  %28 = icmp eq %"class.std::__1::unique_ptr"* %18, %10
  br i1 %28, label %29, label %16

29:                                               ; preds = %27
  %30 = bitcast %"class.net::ProxyBypassRules"* %2 to i8**
  %31 = load i8*, i8** %30, align 8
  br label %32

32:                                               ; preds = %29, %12
  %33 = phi i8* [ %31, %29 ], [ %13, %12 ]
  store %"class.std::__1::unique_ptr"* %10, %"class.std::__1::unique_ptr"** %5, align 8
  call void @_ZdlPv(i8* %33) #10
  br label %34

34:                                               ; preds = %1, %32
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #9
  ret void
}

declare void @_ZNK3net21SchemeHostPortMatcher8ToStringEv(%"class.std::__1::basic_string"* sret, %"class.net::SchemeHostPortMatcher"*) local_unnamed_addr #2

declare void @_ZN3net21SchemeHostPortMatcher5ClearEv(%"class.net::SchemeHostPortMatcher"*) local_unnamed_addr #2

declare zeroext i1 @_ZN3net11IsLocalhostERK4GURL(%class.GURL* dereferenceable(120)) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

declare { i8*, i64 } @_ZN4base19TrimWhitespaceASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_13TrimPositionsE(i8*, i64, i32) local_unnamed_addr #2

declare zeroext i1 @_ZN4base20LowerCaseEqualsASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8*, i64, i8*, i64) local_unnamed_addr #2

declare %"class.net::SchemeHostPortMatcherRule"* @_ZN3net25SchemeHostPortMatcherRule22FromUntrimmedRawStringEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(i8*, i64) local_unnamed_addr #2

declare zeroext i1 @_ZN4base10StartsWithENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_NS_11CompareCaseE(i8*, i64, i8*, i64, i32) local_unnamed_addr #2

declare void @_ZN3net9IPAddressC1Ev(%"class.net::IPAddress"*) unnamed_addr #2

declare zeroext i1 @_ZN3net9IPAddress19AssignFromIPLiteralERKN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.net::IPAddress"*, %"class.base::BasicStringPiece"* dereferenceable(16)) local_unnamed_addr #2

declare { i8*, i64 } @_ZNK4GURL19HostNoBracketsPieceEv(%class.GURL*) local_unnamed_addr #2

declare zeroext i1 @_ZNK3net9IPAddress16IsIPv4MappedIPv6Ev(%"class.net::IPAddress"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3net9IPAddressD1Ev(%"class.net::IPAddress"*) unnamed_addr #4

declare zeroext i1 @_ZNK3net9IPAddress11IsLinkLocalEv(%"class.net::IPAddress"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_125BypassSimpleHostnamesRuleD0Ev(%"class.net::(anonymous namespace)::BypassSimpleHostnamesRule"*) unnamed_addr #6 align 2 {
  %2 = bitcast %"class.net::(anonymous namespace)::BypassSimpleHostnamesRule"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZNK3net12_GLOBAL__N_125BypassSimpleHostnamesRule8EvaluateERK4GURL(%"class.net::(anonymous namespace)::BypassSimpleHostnamesRule"* nocapture readnone, %class.GURL* dereferenceable(120)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 3, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = icmp slt i32 %4, 1
  br i1 %5, label %27, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 3, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  %10 = bitcast %class.GURL* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  %14 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = bitcast %class.GURL* %1 to i8*
  %17 = select i1 %13, i8* %15, i8* %16
  %18 = getelementptr inbounds i8, i8* %17, i64 %9
  %19 = sext i32 %4 to i64
  %20 = tail call i8* @memchr(i8* %18, i32 46, i64 %19) #9
  %21 = icmp eq i8* %20, null
  br i1 %21, label %27, label %22

22:                                               ; preds = %6
  %23 = ptrtoint i8* %20 to i64
  %24 = ptrtoint i8* %18 to i64
  %25 = sub i64 %23, %24
  %26 = icmp eq i64 %25, -1
  br i1 %26, label %27, label %31

27:                                               ; preds = %2, %6, %22
  %28 = tail call zeroext i1 @_ZNK4GURL15HostIsIPAddressEv(%class.GURL* %1) #9
  %29 = xor i1 %28, true
  %30 = zext i1 %29 to i32
  br label %31

31:                                               ; preds = %27, %22
  %32 = phi i32 [ 0, %22 ], [ %30, %27 ]
  ret i32 %32
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK3net12_GLOBAL__N_125BypassSimpleHostnamesRule8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.net::(anonymous namespace)::BypassSimpleHostnamesRule"* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  store i8 7, i8* %4, align 1
  %5 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @_ZN3net12_GLOBAL__N_122kBypassSimpleHostnamesE, i64 0, i64 0), i64 7, i1 false) #9
  %6 = getelementptr inbounds i8, i8* %5, i64 7
  store i8 0, i8* %6, align 1
  ret void
}

declare zeroext i1 @_ZNK3net25SchemeHostPortMatcherRule21IsHostnamePatternRuleEv(%"class.net::SchemeHostPortMatcherRule"*) unnamed_addr #2

declare zeroext i1 @_ZNK4GURL15HostIsIPAddressEv(%class.GURL*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3net25SchemeHostPortMatcherRuleD2Ev(%"class.net::SchemeHostPortMatcherRule"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN3net12_GLOBAL__N_128SubtractImplicitBypassesRuleD0Ev(%"class.net::(anonymous namespace)::SubtractImplicitBypassesRule"*) unnamed_addr #6 align 2 {
  %2 = bitcast %"class.net::(anonymous namespace)::SubtractImplicitBypassesRule"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZNK3net12_GLOBAL__N_128SubtractImplicitBypassesRule8EvaluateERK4GURL(%"class.net::(anonymous namespace)::SubtractImplicitBypassesRule"* nocapture readnone, %class.GURL* dereferenceable(120)) unnamed_addr #0 align 2 {
  %3 = tail call zeroext i1 @_ZN3net16ProxyBypassRules20MatchesImplicitRulesERK4GURL(%class.GURL* dereferenceable(120) %1)
  %4 = select i1 %3, i32 2, i32 0
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK3net12_GLOBAL__N_128SubtractImplicitBypassesRule8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.net::(anonymous namespace)::SubtractImplicitBypassesRule"* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  store i8 11, i8* %4, align 1
  %5 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 1 getelementptr inbounds ([12 x i8], [12 x i8]* @_ZN3net12_GLOBAL__N_125kSubtractImplicitBypassesE, i64 0, i64 0), i64 11, i1 false) #9
  %6 = getelementptr inbounds i8, i8* %5, i64 11
  store i8 0, i8* %6, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4base16StringTokenizerTINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_11__wrap_iterIPKcEEE12QuickGetNextEv(%"class.base::StringTokenizerT"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %0, i64 0, i32 7
  store i8 0, i8* %2, align 4
  %3 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %0, i64 0, i32 1
  %5 = bitcast %"class.std::__1::__wrap_iter"* %3 to i64*
  %6 = bitcast %"class.std::__1::__wrap_iter"* %4 to i64*
  %7 = load i64, i64* %5, align 8
  store i64 %7, i64* %6, align 8
  %8 = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %3, i64 0, i32 0
  %9 = inttoptr i64 %7 to i8*
  %10 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %0, i64 0, i32 3, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = icmp eq i8* %11, %9
  br i1 %12, label %17, label %13

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %0, i64 0, i32 4
  %15 = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %4, i64 0, i32 0
  %16 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %0, i64 0, i32 9
  br label %18

17:                                               ; preds = %34, %1
  store i8 1, i8* %2, align 4
  br label %61

18:                                               ; preds = %13, %34
  %19 = phi i8* [ %9, %13 ], [ %36, %34 ]
  %20 = getelementptr inbounds i8, i8* %19, i64 1
  store i8* %20, i8** %8, align 8
  %21 = load i8, i8* %19, align 1
  %22 = tail call i64 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcm(%"class.std::__1::basic_string"* %14, i8 signext %21, i64 0) #9
  %23 = icmp eq i64 %22, -1
  br i1 %23, label %24, label %34

24:                                               ; preds = %18
  %25 = load i32, i32* %16, align 8
  %26 = icmp eq i32 %25, 1
  br i1 %26, label %27, label %30

27:                                               ; preds = %24
  %28 = load i8*, i8** %15, align 8
  %29 = load i8, i8* %28, align 1
  switch i8 %29, label %30 [
    i8 32, label %34
    i8 13, label %34
    i8 10, label %34
    i8 9, label %34
    i8 12, label %34
  ]

30:                                               ; preds = %27, %24
  %31 = load i8*, i8** %8, align 8
  %32 = load i8*, i8** %10, align 8
  %33 = icmp eq i8* %31, %32
  br i1 %33, label %61, label %39

34:                                               ; preds = %27, %27, %27, %27, %27, %18
  %35 = load i64, i64* %5, align 8
  store i64 %35, i64* %6, align 8
  %36 = inttoptr i64 %35 to i8*
  %37 = load i8*, i8** %10, align 8
  %38 = icmp eq i8* %37, %36
  br i1 %38, label %17, label %18

39:                                               ; preds = %30, %52
  %40 = phi i8* [ %53, %52 ], [ %31, %30 ]
  %41 = load i8, i8* %40, align 1
  %42 = tail call i64 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcm(%"class.std::__1::basic_string"* %14, i8 signext %41, i64 0) #9
  %43 = icmp eq i64 %42, -1
  br i1 %43, label %44, label %61

44:                                               ; preds = %39
  %45 = load i8*, i8** %8, align 8
  %46 = load i32, i32* %16, align 8
  %47 = icmp eq i32 %46, 1
  br i1 %47, label %48, label %52

48:                                               ; preds = %44
  %49 = load i8, i8* %45, align 1
  %50 = add i8 %49, -9
  %51 = icmp ult i8 %50, 24
  br i1 %51, label %56, label %52

52:                                               ; preds = %56, %48, %44
  %53 = getelementptr inbounds i8, i8* %45, i64 1
  store i8* %53, i8** %8, align 8
  %54 = load i8*, i8** %10, align 8
  %55 = icmp eq i8* %53, %54
  br i1 %55, label %61, label %39

56:                                               ; preds = %48
  %57 = zext i8 %50 to i32
  %58 = lshr i32 8388635, %57
  %59 = and i32 %58, 1
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %52, label %61

61:                                               ; preds = %17, %30, %52, %39, %56
  %62 = phi i1 [ true, %56 ], [ false, %17 ], [ true, %30 ], [ true, %52 ], [ true, %39 ]
  ret i1 %62
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4base16StringTokenizerTINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_11__wrap_iterIPKcEEE11FullGetNextEv(%"class.base::StringTokenizerT"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %0, i64 0, i32 2, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %0, i64 0, i32 3, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %3, %5
  %7 = ptrtoint i8* %3 to i64
  br i1 %6, label %22, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %0, i64 0, i32 9
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %22

12:                                               ; preds = %8, %16
  %13 = phi i64 [ %19, %16 ], [ %7, %8 ]
  %14 = phi i8* [ %17, %16 ], [ %3, %8 ]
  %15 = load i8, i8* %14, align 1
  switch i8 %15, label %22 [
    i8 32, label %16
    i8 13, label %16
    i8 10, label %16
    i8 9, label %16
    i8 12, label %16
  ]

16:                                               ; preds = %12, %12, %12, %12, %12
  %17 = getelementptr inbounds i8, i8* %14, i64 1
  store i8* %17, i8** %2, align 8
  %18 = icmp eq i8* %17, %5
  %19 = ptrtoint i8* %17 to i64
  br i1 %18, label %20, label %12

20:                                               ; preds = %16
  %21 = ptrtoint i8* %17 to i64
  br label %22

22:                                               ; preds = %12, %20, %8, %1
  %23 = phi i64 [ %7, %8 ], [ %7, %1 ], [ %21, %20 ], [ %13, %12 ]
  %24 = phi i8* [ %3, %8 ], [ %3, %1 ], [ %5, %20 ], [ %14, %12 ]
  %25 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %0, i64 0, i32 6
  %26 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %0, i64 0, i32 2, i32 0
  %27 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %0, i64 0, i32 7
  %28 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %0, i64 0, i32 1
  %29 = bitcast %"class.std::__1::__wrap_iter"* %28 to i64*
  %30 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %0, i64 0, i32 4
  %31 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %0, i64 0, i32 9
  %32 = getelementptr inbounds %"class.base::StringTokenizerT", %"class.base::StringTokenizerT"* %0, i64 0, i32 5
  %33 = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %28, i64 0, i32 0
  %34 = load i8, i8* %27, align 4, !range !2
  %35 = icmp eq i8 %34, 0
  br label %36

36:                                               ; preds = %113, %22
  %37 = phi i8* [ %5, %22 ], [ %106, %113 ]
  %38 = phi i64 [ %23, %22 ], [ %118, %113 ]
  %39 = phi i8* [ %24, %22 ], [ %114, %113 ]
  %40 = phi i1 [ %35, %22 ], [ false, %113 ]
  %41 = phi i8 [ 0, %22 ], [ %108, %113 ]
  %42 = phi i8 [ 0, %22 ], [ %109, %113 ]
  %43 = phi i8 [ 0, %22 ], [ %110, %113 ]
  br i1 %40, label %105, label %44

44:                                               ; preds = %36
  store i8 0, i8* %27, align 4
  store i64 %38, i64* %29, align 8
  %45 = inttoptr i64 %38 to i8*
  %46 = icmp eq i8* %37, %45
  br i1 %46, label %91, label %47

47:                                               ; preds = %44, %76
  %48 = phi i8* [ %77, %76 ], [ %37, %44 ]
  %49 = phi i8* [ %82, %76 ], [ %39, %44 ]
  %50 = phi i8* [ %82, %76 ], [ %45, %44 ]
  %51 = phi i8 [ %81, %76 ], [ %43, %44 ]
  %52 = phi i8 [ %80, %76 ], [ %42, %44 ]
  %53 = phi i8 [ %79, %76 ], [ %41, %44 ]
  %54 = load i8, i8* %50, align 1
  %55 = icmp eq i8 %51, 0
  br i1 %55, label %63, label %56

56:                                               ; preds = %47
  %57 = icmp eq i8 %52, 0
  br i1 %57, label %58, label %76

58:                                               ; preds = %56
  %59 = icmp eq i8 %54, 92
  br i1 %59, label %76, label %60

60:                                               ; preds = %58
  %61 = icmp eq i8 %53, %54
  %62 = select i1 %61, i8 0, i8 %51
  br label %76

63:                                               ; preds = %47
  %64 = tail call i64 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcm(%"class.std::__1::basic_string"* %30, i8 signext %54, i64 0) #9
  %65 = icmp eq i64 %64, -1
  br i1 %65, label %66, label %84

66:                                               ; preds = %63
  %67 = load i32, i32* %31, align 8
  %68 = icmp eq i32 %67, 1
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  switch i8 %54, label %70 [
    i8 32, label %84
    i8 13, label %84
    i8 10, label %84
    i8 9, label %84
    i8 12, label %84
  ]

70:                                               ; preds = %69, %66
  %71 = tail call i64 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcm(%"class.std::__1::basic_string"* %32, i8 signext %54, i64 0) #9
  %72 = icmp ne i64 %71, -1
  %73 = zext i1 %72 to i8
  %74 = load i8*, i8** %26, align 8
  %75 = load i8*, i8** %4, align 8
  br label %76

76:                                               ; preds = %60, %70, %56, %58
  %77 = phi i8* [ %48, %58 ], [ %48, %56 ], [ %75, %70 ], [ %48, %60 ]
  %78 = phi i8* [ %49, %58 ], [ %49, %56 ], [ %74, %70 ], [ %49, %60 ]
  %79 = phi i8 [ %53, %58 ], [ %53, %56 ], [ %54, %70 ], [ %53, %60 ]
  %80 = phi i8 [ 1, %58 ], [ 0, %56 ], [ %52, %70 ], [ 0, %60 ]
  %81 = phi i8 [ %51, %58 ], [ %51, %56 ], [ %73, %70 ], [ %62, %60 ]
  %82 = getelementptr inbounds i8, i8* %78, i64 1
  store i8* %82, i8** %26, align 8
  %83 = icmp eq i8* %82, %77
  br i1 %83, label %84, label %47

84:                                               ; preds = %76, %69, %69, %69, %69, %69, %63
  %85 = phi i8 [ %53, %63 ], [ %53, %69 ], [ %53, %69 ], [ %53, %69 ], [ %53, %69 ], [ %53, %69 ], [ %79, %76 ]
  %86 = phi i8 [ %52, %63 ], [ %52, %69 ], [ %52, %69 ], [ %52, %69 ], [ %52, %69 ], [ %52, %69 ], [ %80, %76 ]
  %87 = phi i8 [ 0, %63 ], [ 0, %69 ], [ 0, %69 ], [ 0, %69 ], [ 0, %69 ], [ 0, %69 ], [ %81, %76 ]
  %88 = load i8*, i8** %33, align 8
  %89 = load i8*, i8** %26, align 8
  %90 = ptrtoint i8* %89 to i64
  br label %91

91:                                               ; preds = %84, %44
  %92 = phi i64 [ %38, %44 ], [ %90, %84 ]
  %93 = phi i8* [ %39, %44 ], [ %89, %84 ]
  %94 = phi i8* [ %37, %44 ], [ %88, %84 ]
  %95 = phi i8 [ %41, %44 ], [ %85, %84 ]
  %96 = phi i8 [ %42, %44 ], [ %86, %84 ]
  %97 = phi i8 [ %43, %44 ], [ %87, %84 ]
  %98 = icmp eq i8* %94, %93
  br i1 %98, label %99, label %119

99:                                               ; preds = %91
  %100 = load i32, i32* %25, align 8
  %101 = and i32 %100, 2
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %119

103:                                              ; preds = %99
  %104 = load i8*, i8** %4, align 8
  br label %105

105:                                              ; preds = %103, %36
  %106 = phi i8* [ %37, %36 ], [ %104, %103 ]
  %107 = phi i64 [ %38, %36 ], [ %92, %103 ]
  %108 = phi i8 [ %41, %36 ], [ %95, %103 ]
  %109 = phi i8 [ %42, %36 ], [ %96, %103 ]
  %110 = phi i8 [ %43, %36 ], [ %97, %103 ]
  store i8 1, i8* %27, align 4
  store i64 %107, i64* %29, align 8
  %111 = inttoptr i64 %107 to i8*
  %112 = icmp eq i8* %106, %111
  br i1 %112, label %119, label %113

113:                                              ; preds = %105
  %114 = getelementptr inbounds i8, i8* %111, i64 1
  store i8* %114, i8** %26, align 8
  %115 = load i32, i32* %25, align 8
  %116 = and i32 %115, 1
  %117 = icmp eq i32 %116, 0
  %118 = ptrtoint i8* %114 to i64
  br i1 %117, label %36, label %119

119:                                              ; preds = %91, %113, %105, %99
  %120 = phi i1 [ true, %99 ], [ true, %91 ], [ false, %105 ], [ true, %113 ]
  ret i1 %120
}

; Function Attrs: nounwind
declare i64 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcm(%"class.std::__1::basic_string"*, i8 signext, i64) local_unnamed_addr #4

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind readonly }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
