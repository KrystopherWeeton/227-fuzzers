; ModuleID = '../../third_party/blink/renderer/modules/credentialmanager/authenticator_attestation_response.cc'
source_filename = "../../third_party/blink/renderer/modules/credentialmanager/authenticator_attestation_response.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.blink::WrapperTypeInfo" = type { i16, void (%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Template"*)*, void (%"class.v8::Context"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Template"*, i64)*, i8*, %"struct.blink::WrapperTypeInfo"*, i8 }
%"class.v8::Isolate" = type { i8 }
%"class.blink::DOMWrapperWorld" = type opaque
%"class.v8::Template" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::Object" = type { i8 }
%"class.blink::AuthenticatorAttestationResponse" = type <{ %"class.blink::AuthenticatorResponse", %"class.blink::Member", %"class.WTF::Vector", %"class.blink::Member", %"class.blink::Member", i32, [4 x i8] }>
%"class.blink::AuthenticatorResponse" = type { %"class.blink::ScriptWrappable", %"class.blink::Member" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i32*, i32, i32 }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::DOMArrayBuffer"* }
%"class.blink::DOMArrayBuffer" = type { %"class.blink::DOMArrayBufferBase.base", [7 x i8] }
%"class.blink::DOMArrayBufferBase.base" = type <{ %"class.blink::ScriptWrappable", %"class.blink::ArrayBufferContents", i8 }>
%"class.blink::ArrayBufferContents" = type { %"class.std::__1::shared_ptr" }
%"class.std::__1::shared_ptr" = type { %"class.v8::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::BackingStore" = type { i8 }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.WTF::Vector.0" = type { %"class.WTF::VectorBuffer.1" }
%"class.WTF::VectorBuffer.1" = type { %"class.WTF::VectorBufferBase.2" }
%"class.WTF::VectorBufferBase.2" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.137", %"class.std::__1::unique_ptr.137", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.147", %"class.std::__1::unique_ptr.153", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.165", %"class.std::__1::unique_ptr.171", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.178", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.6", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.22", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.45", %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.59", %"class.std::__1::unique_ptr.66", %"class.std::__1::unique_ptr.73", %"class.std::__1::unique_ptr.73", %"class.std::__1::unique_ptr.80", %"class.std::__1::unique_ptr.87", %"class.std::__1::unique_ptr.94", %"class.std::__1::unique_ptr.117", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.37" = type { %"struct.std::__1::__atomic_base.38" }
%"struct.std::__1::__atomic_base.38" = type { %"struct.std::__1::__atomic_base.39" }
%"struct.std::__1::__atomic_base.39" = type { %"struct.std::__1::__cxx_atomic_impl.40" }
%"struct.std::__1::__cxx_atomic_impl.40" = type { %"struct.std::__1::__cxx_atomic_base_impl.41" }
%"struct.std::__1::__cxx_atomic_base_impl.41" = type { i64 }
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"class.blink::Worklist.48"* }
%"class.blink::Worklist.48" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.std::__1::unique_ptr.52" = type { %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"class.blink::Worklist.55"* }
%"class.blink::Worklist.55" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.std::__1::unique_ptr.59" = type { %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"class.blink::Worklist.62"* }
%"class.blink::Worklist.62" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.std::__1::unique_ptr.66" = type { %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %"class.blink::Worklist.69"* }
%"class.blink::Worklist.69" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.blink::Worklist.76"* }
%"class.blink::Worklist.76" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"class.blink::Worklist.83"* }
%"class.blink::Worklist.83" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.std::__1::unique_ptr.87" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %"class.blink::Worklist.90"* }
%"class.blink::Worklist.90" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.std::__1::unique_ptr.94" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.97", %"class.std::__1::__compressed_pair.104", %"class.std::__1::__compressed_pair.109", %"class.std::__1::__compressed_pair.111", [4 x i8] }>
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99", %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { i64 }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.112" = type { float }
%"class.std::__1::unique_ptr.117" = type { %"class.std::__1::__compressed_pair.118" }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.120", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.129" }
%"class.WTF::Vector.129" = type { %"class.WTF::VectorBuffer.130" }
%"class.WTF::VectorBuffer.130" = type { %"class.WTF::VectorBufferBase.131" }
%"class.WTF::VectorBufferBase.131" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.137" = type { %"class.std::__1::__compressed_pair.138" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.145" }
%"class.WTF::VectorBuffer.145" = type { %"class.WTF::VectorBufferBase.146" }
%"class.WTF::VectorBufferBase.146" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.147" = type { %"class.std::__1::__compressed_pair.148" }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.153" = type { %"class.std::__1::__compressed_pair.154" }
%"class.std::__1::__compressed_pair.154" = type { %"struct.std::__1::__compressed_pair_elem.155" }
%"struct.std::__1::__compressed_pair_elem.155" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.159" }
%"class.std::__1::unique_ptr.159" = type { %"class.std::__1::__compressed_pair.160" }
%"class.std::__1::__compressed_pair.160" = type { %"struct.std::__1::__compressed_pair_elem.161" }
%"struct.std::__1::__compressed_pair_elem.161" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.48"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.55"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.62"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.69"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.76"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.182" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.182" = type { %"struct.std::__1::__compressed_pair_elem.183" }
%"struct.std::__1::__compressed_pair_elem.183" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.165" = type { %"class.std::__1::__compressed_pair.166" }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.167" }
%"struct.std::__1::__compressed_pair_elem.167" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.171" = type { %"class.std::__1::__compressed_pair.172" }
%"class.std::__1::__compressed_pair.172" = type { %"struct.std::__1::__compressed_pair_elem.173" }
%"struct.std::__1::__compressed_pair_elem.173" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.177 }
%class.scoped_refptr.177 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.178" = type { %"struct.std::__1::__atomic_base.179" }
%"struct.std::__1::__atomic_base.179" = type { %"struct.std::__1::__cxx_atomic_impl.180" }
%"struct.std::__1::__cxx_atomic_impl.180" = type { %"struct.std::__1::__cxx_atomic_base_impl.181" }
%"struct.std::__1::__cxx_atomic_base_impl.181" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.v8::Value" = type { i8 }
%"class.blink::ScriptState" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.193" }
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.194" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN3WTF23CodeUnitCompareLessThanERKNS_6StringES2_ = comdat any

$_ZNK5blink15ScriptWrappable18HasPendingActivityEv = comdat any

$_ZNK5blink15ScriptWrappable17HasEventListenersEv = comdat any

$_ZNK5blink32AuthenticatorAttestationResponse18GetWrapperTypeInfoEv = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm = comdat any

$_ZNSt3__16__sortIRPFbRKN3WTF6StringES4_EPS2_EEvT0_S9_T_ = comdat any

$_ZNSt3__17__sort4IRPFbRKN3WTF6StringES4_EPS2_EEjT0_S9_S9_S9_T_ = comdat any

$_ZNSt3__118__insertion_sort_3IRPFbRKN3WTF6StringES4_EPS2_EEvT0_S9_T_ = comdat any

$_ZNSt3__127__insertion_sort_incompleteIRPFbRKN3WTF6StringES4_EPS2_EEbT0_S9_T_ = comdat any

$_ZN5blink10TraceTraitINS_14DOMArrayBufferEE5TraceEPNS_7VisitorEPKv = comdat any

@_ZTVN5blink32AuthenticatorAttestationResponseE = hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (i8* (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv to i8*), i8* bitcast (void (%"class.blink::AuthenticatorAttestationResponse"*)* @_ZN5blink32AuthenticatorAttestationResponseD2Ev to i8*), i8* bitcast (void (%"class.blink::AuthenticatorAttestationResponse"*)* @_ZN5blink32AuthenticatorAttestationResponseD0Ev to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18HasPendingActivityEv to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable17HasEventListenersEv to i8*), i8* bitcast (void (%"class.blink::AuthenticatorAttestationResponse"*, %"class.blink::Visitor"*)* @_ZNK5blink32AuthenticatorAttestationResponse5TraceEPNS_7VisitorE to i8*), i8* bitcast (%"struct.blink::WrapperTypeInfo"* (%"class.blink::AuthenticatorAttestationResponse"*)* @_ZNK5blink32AuthenticatorAttestationResponse18GetWrapperTypeInfoEv to i8*), i8* bitcast (%"class.v8::Value"* (%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*)* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE to i8*), i8* bitcast (%"class.v8::Object"* (%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*)* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE to i8*)] }, align 8
@_ZN5blink32AuthenticatorAttestationResponse18wrapper_type_info_E = external local_unnamed_addr constant %"struct.blink::WrapperTypeInfo"*, align 8
@.str.2 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.3 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv = private unnamed_addr constant [59 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::String]\00", align 1

@_ZN5blink32AuthenticatorAttestationResponseC1EPNS_14DOMArrayBufferES2_N3WTF6VectorINS_5mojom22AuthenticatorTransportELj0ENS3_18PartitionAllocatorEEES2_S2_i = hidden unnamed_addr alias void (%"class.blink::AuthenticatorAttestationResponse"*, %"class.blink::DOMArrayBuffer"*, %"class.blink::DOMArrayBuffer"*, %"class.WTF::Vector"*, %"class.blink::DOMArrayBuffer"*, %"class.blink::DOMArrayBuffer"*, i32), void (%"class.blink::AuthenticatorAttestationResponse"*, %"class.blink::DOMArrayBuffer"*, %"class.blink::DOMArrayBuffer"*, %"class.WTF::Vector"*, %"class.blink::DOMArrayBuffer"*, %"class.blink::DOMArrayBuffer"*, i32)* @_ZN5blink32AuthenticatorAttestationResponseC2EPNS_14DOMArrayBufferES2_N3WTF6VectorINS_5mojom22AuthenticatorTransportELj0ENS3_18PartitionAllocatorEEES2_S2_i
@_ZN5blink32AuthenticatorAttestationResponseD1Ev = hidden unnamed_addr alias void (%"class.blink::AuthenticatorAttestationResponse"*), void (%"class.blink::AuthenticatorAttestationResponse"*)* @_ZN5blink32AuthenticatorAttestationResponseD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink32AuthenticatorAttestationResponseC2EPNS_14DOMArrayBufferES2_N3WTF6VectorINS_5mojom22AuthenticatorTransportELj0ENS3_18PartitionAllocatorEEES2_S2_i(%"class.blink::AuthenticatorAttestationResponse"*, %"class.blink::DOMArrayBuffer"*, %"class.blink::DOMArrayBuffer"*, %"class.WTF::Vector"* nocapture, %"class.blink::DOMArrayBuffer"*, %"class.blink::DOMArrayBuffer"*, i32) unnamed_addr #0 align 2 {
  %8 = getelementptr inbounds %"class.blink::AuthenticatorAttestationResponse", %"class.blink::AuthenticatorAttestationResponse"* %0, i64 0, i32 0
  tail call void @_ZN5blink21AuthenticatorResponseC2EPNS_14DOMArrayBufferE(%"class.blink::AuthenticatorResponse"* %8, %"class.blink::DOMArrayBuffer"* %1) #5
  %9 = getelementptr inbounds %"class.blink::AuthenticatorAttestationResponse", %"class.blink::AuthenticatorAttestationResponse"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink32AuthenticatorAttestationResponseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %"class.blink::AuthenticatorAttestationResponse", %"class.blink::AuthenticatorAttestationResponse"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.blink::DOMArrayBuffer"* %2, %"class.blink::DOMArrayBuffer"** %10, align 8
  %11 = getelementptr inbounds %"class.blink::AuthenticatorAttestationResponse", %"class.blink::AuthenticatorAttestationResponse"* %0, i64 0, i32 2
  %12 = getelementptr inbounds %"class.blink::AuthenticatorAttestationResponse", %"class.blink::AuthenticatorAttestationResponse"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.blink::AuthenticatorAttestationResponse", %"class.blink::AuthenticatorAttestationResponse"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %14 = bitcast %"class.WTF::Vector"* %3 to i64*
  %15 = bitcast %"class.WTF::Vector"* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 16, i1 false) #5
  %16 = load i64, i64* %14, align 8
  %17 = bitcast %"class.WTF::Vector"* %11 to i64*
  store atomic i64 0, i64* %14 monotonic, align 8
  store atomic i64 %16, i64* %17 monotonic, align 8
  %18 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 1
  %19 = load i32, i32* %12, align 4
  %20 = load i32, i32* %18, align 4
  store i32 %20, i32* %12, align 4
  store i32 %19, i32* %18, align 4
  %21 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 2
  %22 = load i32, i32* %13, align 4
  %23 = load i32, i32* %21, align 4
  store i32 %23, i32* %13, align 4
  store i32 %22, i32* %21, align 4
  %24 = getelementptr inbounds %"class.blink::AuthenticatorAttestationResponse", %"class.blink::AuthenticatorAttestationResponse"* %0, i64 0, i32 3, i32 0, i32 0
  store %"class.blink::DOMArrayBuffer"* %4, %"class.blink::DOMArrayBuffer"** %24, align 8
  %25 = getelementptr inbounds %"class.blink::AuthenticatorAttestationResponse", %"class.blink::AuthenticatorAttestationResponse"* %0, i64 0, i32 4, i32 0, i32 0
  store %"class.blink::DOMArrayBuffer"* %5, %"class.blink::DOMArrayBuffer"** %25, align 8
  %26 = getelementptr inbounds %"class.blink::AuthenticatorAttestationResponse", %"class.blink::AuthenticatorAttestationResponse"* %0, i64 0, i32 5
  store i32 %6, i32* %26, align 8
  ret void
}

declare void @_ZN5blink21AuthenticatorResponseC2EPNS_14DOMArrayBufferE(%"class.blink::AuthenticatorResponse"*, %"class.blink::DOMArrayBuffer"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink32AuthenticatorAttestationResponseD2Ev(%"class.blink::AuthenticatorAttestationResponse"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::AuthenticatorAttestationResponse", %"class.blink::AuthenticatorAttestationResponse"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink32AuthenticatorAttestationResponseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::AuthenticatorAttestationResponse", %"class.blink::AuthenticatorAttestationResponse"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  %6 = bitcast i32* %4 to i8*
  br i1 %5, label %13, label %7, !prof !2

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::AuthenticatorAttestationResponse", %"class.blink::AuthenticatorAttestationResponse"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %12, label %11, !prof !3

11:                                               ; preds = %7
  store i32 0, i32* %8, align 4
  br label %12

12:                                               ; preds = %11, %7
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %6) #5
  store i32* null, i32** %3, align 8
  br label %13

13:                                               ; preds = %1, %12
  %14 = getelementptr inbounds %"class.blink::AuthenticatorAttestationResponse", %"class.blink::AuthenticatorAttestationResponse"* %0, i64 0, i32 0
  tail call void @_ZN5blink21AuthenticatorResponseD2Ev(%"class.blink::AuthenticatorResponse"* %14) #5
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5blink21AuthenticatorResponseD2Ev(%"class.blink::AuthenticatorResponse"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink32AuthenticatorAttestationResponseD0Ev(%"class.blink::AuthenticatorAttestationResponse"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::AuthenticatorAttestationResponse", %"class.blink::AuthenticatorAttestationResponse"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink32AuthenticatorAttestationResponseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::AuthenticatorAttestationResponse", %"class.blink::AuthenticatorAttestationResponse"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  %6 = bitcast i32* %4 to i8*
  br i1 %5, label %13, label %7, !prof !2

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::AuthenticatorAttestationResponse", %"class.blink::AuthenticatorAttestationResponse"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %12, label %11, !prof !3

11:                                               ; preds = %7
  store i32 0, i32* %8, align 4
  br label %12

12:                                               ; preds = %11, %7
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %6) #5
  store i32* null, i32** %3, align 8
  br label %13

13:                                               ; preds = %1, %12
  %14 = getelementptr inbounds %"class.blink::AuthenticatorAttestationResponse", %"class.blink::AuthenticatorAttestationResponse"* %0, i64 0, i32 0
  tail call void @_ZN5blink21AuthenticatorResponseD2Ev(%"class.blink::AuthenticatorResponse"* %14) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink32AuthenticatorAttestationResponse13getTransportsEv(%"class.WTF::Vector.0"* noalias nocapture sret, %"class.blink::AuthenticatorAttestationResponse"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, align 8
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.WTF::Vector.0", %"class.WTF::Vector.0"* %0, i64 0, i32 0, i32 0, i32 2
  %7 = bitcast %"class.WTF::Vector.0"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false) #5
  %8 = getelementptr inbounds %"class.blink::AuthenticatorAttestationResponse", %"class.blink::AuthenticatorAttestationResponse"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds %"class.blink::AuthenticatorAttestationResponse", %"class.blink::AuthenticatorAttestationResponse"* %1, i64 0, i32 2, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds i32, i32* %9, i64 %12
  %14 = icmp eq i32 %11, 0
  br i1 %14, label %20, label %15

15:                                               ; preds = %2
  %16 = bitcast i32* %4 to i8*
  %17 = bitcast %"class.WTF::Vector.0"* %0 to i64*
  br label %25

18:                                               ; preds = %67
  %19 = zext i32 %76 to i64
  br label %20

20:                                               ; preds = %18, %2
  %21 = phi i64 [ %19, %18 ], [ 0, %2 ]
  %22 = phi %"class.WTF::String"* [ %68, %18 ], [ null, %2 ]
  %23 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %22, i64 %21
  %24 = bitcast i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24)
  store i1 (%"class.WTF::String"*, %"class.WTF::String"*)* @_ZN3WTF23CodeUnitCompareLessThanERKNS_6StringES2_, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %3, align 8
  call void @_ZNSt3__16__sortIRPFbRKN3WTF6StringES4_EPS2_EEvT0_S9_T_(%"class.WTF::String"* %22, %"class.WTF::String"* %23, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** nonnull dereferenceable(8) %3) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24)
  ret void

25:                                               ; preds = %15, %67
  %26 = phi %"class.WTF::String"* [ null, %15 ], [ %68, %67 ]
  %27 = phi i8* [ null, %15 ], [ %69, %67 ]
  %28 = phi i8* [ null, %15 ], [ %70, %67 ]
  %29 = phi %"class.WTF::String"* [ null, %15 ], [ %71, %67 ]
  %30 = phi i32 [ 0, %15 ], [ %72, %67 ]
  %31 = phi i32 [ 0, %15 ], [ %76, %67 ]
  %32 = phi i32* [ %9, %15 ], [ %77, %67 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #5
  store i32 -1431655766, i32* %4, align 4
  %33 = load i32, i32* %32, align 4
  store i32 %33, i32* %4, align 4
  %34 = call %"class.WTF::StringImpl"* @_ZN4mojo13TypeConverterIN3WTF6StringEN5blink5mojom22AuthenticatorTransportEE7ConvertERKS5_(i32* nonnull dereferenceable(4) %4) #5
  %35 = ptrtoint %"class.WTF::StringImpl"* %34 to i64
  %36 = icmp eq i32 %31, %30
  br i1 %36, label %37, label %67, !prof !3

37:                                               ; preds = %25
  %38 = add i32 %30, 1
  %39 = lshr i32 %30, 2
  %40 = add i32 %38, %39
  %41 = icmp ugt i32 %40, 4
  %42 = select i1 %41, i32 %40, i32 4
  %43 = icmp ugt i32 %42, %38
  %44 = select i1 %43, i32 %42, i32 %38
  %45 = icmp ult i32 %30, %44
  br i1 %45, label %46, label %67, !prof !2

46:                                               ; preds = %37
  %47 = icmp eq %"class.WTF::String"* %29, null
  %48 = zext i32 %44 to i64
  %49 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64 %48) #5
  %50 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %49, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_6StringEEEPKcv, i64 0, i64 0)) #5
  br i1 %47, label %51, label %56

51:                                               ; preds = %46
  %52 = ptrtoint i8* %50 to i64
  store atomic i64 %52, i64* %17 monotonic, align 8
  %53 = lshr i64 %49, 3
  %54 = trunc i64 %53 to i32
  store i32 %54, i32* %5, align 8
  %55 = bitcast i8* %50 to %"class.WTF::String"*
  br label %67

56:                                               ; preds = %46
  %57 = lshr i64 %49, 3
  %58 = ptrtoint i8* %50 to i64
  %59 = icmp eq i8* %50, null
  br i1 %59, label %63, label %60, !prof !3

60:                                               ; preds = %56
  %61 = zext i32 %30 to i64
  %62 = shl nuw nsw i64 %61, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %50, i8* nonnull align 8 %28, i64 %62, i1 false) #5
  br label %63

63:                                               ; preds = %56, %60
  %64 = phi i8* [ %27, %60 ], [ %28, %56 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %64) #5
  store atomic i64 %58, i64* %17 monotonic, align 8
  %65 = trunc i64 %57 to i32
  store i32 %65, i32* %5, align 8
  %66 = bitcast i8* %50 to %"class.WTF::String"*
  br label %67

67:                                               ; preds = %63, %51, %37, %25
  %68 = phi %"class.WTF::String"* [ %66, %63 ], [ %55, %51 ], [ %26, %37 ], [ %26, %25 ]
  %69 = phi i8* [ %50, %63 ], [ %50, %51 ], [ %27, %37 ], [ %27, %25 ]
  %70 = phi i8* [ %50, %63 ], [ %50, %51 ], [ %28, %37 ], [ %28, %25 ]
  %71 = phi %"class.WTF::String"* [ %66, %63 ], [ %55, %51 ], [ %29, %37 ], [ %29, %25 ]
  %72 = phi i32 [ %65, %63 ], [ %54, %51 ], [ %30, %37 ], [ %30, %25 ]
  %73 = zext i32 %31 to i64
  %74 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %71, i64 %73
  %75 = bitcast %"class.WTF::String"* %74 to i64*
  store i64 %35, i64* %75, align 8
  %76 = add i32 %31, 1
  store i32 %76, i32* %6, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #5
  %77 = getelementptr inbounds i32, i32* %32, i64 1
  %78 = icmp eq i32* %77, %13
  br i1 %78, label %18, label %25
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3WTF23CodeUnitCompareLessThanERKNS_6StringES2_(%"class.WTF::String"* dereferenceable(8), %"class.WTF::String"* dereferenceable(8)) #4 comdat {
  %3 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %4, null
  %8 = icmp ne %"class.WTF::StringImpl"* %6, null
  br i1 %7, label %9, label %15

9:                                                ; preds = %2
  br i1 %8, label %10, label %168

10:                                               ; preds = %9
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp ne i32 %12, 0
  %14 = sext i1 %13 to i32
  br label %168

15:                                               ; preds = %2
  br i1 %8, label %21, label %16

16:                                               ; preds = %15
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = icmp ne i32 %18, 0
  %20 = zext i1 %19 to i32
  br label %168

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load atomic i32, i32* %26 monotonic, align 4
  %28 = and i32 %27, 1
  %29 = icmp ne i32 %28, 0
  br i1 %25, label %94, label %30

30:                                               ; preds = %21
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = icmp ult i32 %32, %34
  %36 = select i1 %35, i32 %32, i32 %34
  %37 = icmp eq i32 %36, 0
  br i1 %29, label %38, label %64

38:                                               ; preds = %30
  br i1 %37, label %59, label %39

39:                                               ; preds = %38
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  %41 = bitcast %"class.WTF::StringImpl"* %40 to i8*
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 1
  %43 = bitcast %"class.WTF::StringImpl"* %42 to i8*
  br label %44

44:                                               ; preds = %51, %39
  %45 = phi i32 [ %54, %51 ], [ 0, %39 ]
  %46 = phi i8* [ %53, %51 ], [ %41, %39 ]
  %47 = phi i8* [ %52, %51 ], [ %43, %39 ]
  %48 = load i8, i8* %47, align 1
  %49 = load i8, i8* %46, align 1
  %50 = icmp eq i8 %48, %49
  br i1 %50, label %51, label %56

51:                                               ; preds = %44
  %52 = getelementptr inbounds i8, i8* %47, i64 1
  %53 = getelementptr inbounds i8, i8* %46, i64 1
  %54 = add nuw i32 %45, 1
  %55 = icmp ult i32 %54, %36
  br i1 %55, label %44, label %59

56:                                               ; preds = %44
  %57 = icmp ugt i8 %48, %49
  %58 = select i1 %57, i32 1, i32 -1
  br label %168

59:                                               ; preds = %51, %38
  %60 = icmp eq i32 %32, %34
  br i1 %60, label %168, label %61

61:                                               ; preds = %59
  %62 = icmp ugt i32 %32, %34
  %63 = select i1 %62, i32 1, i32 -1
  br label %168

64:                                               ; preds = %30
  br i1 %37, label %89, label %65

65:                                               ; preds = %64
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  %67 = bitcast %"class.WTF::StringImpl"* %66 to i16*
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 1
  %69 = bitcast %"class.WTF::StringImpl"* %68 to i8*
  br label %70

70:                                               ; preds = %79, %65
  %71 = phi i32 [ %82, %79 ], [ 0, %65 ]
  %72 = phi i16* [ %81, %79 ], [ %67, %65 ]
  %73 = phi i8* [ %80, %79 ], [ %69, %65 ]
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = load i16, i16* %72, align 2
  %77 = zext i16 %76 to i32
  %78 = icmp eq i32 %75, %77
  br i1 %78, label %79, label %84

79:                                               ; preds = %70
  %80 = getelementptr inbounds i8, i8* %73, i64 1
  %81 = getelementptr inbounds i16, i16* %72, i64 1
  %82 = add nuw i32 %71, 1
  %83 = icmp ult i32 %82, %36
  br i1 %83, label %70, label %89

84:                                               ; preds = %70
  %85 = zext i8 %74 to i32
  %86 = zext i16 %76 to i32
  %87 = icmp ugt i32 %85, %86
  %88 = select i1 %87, i32 1, i32 -1
  br label %168

89:                                               ; preds = %79, %64
  %90 = icmp eq i32 %32, %34
  br i1 %90, label %168, label %91

91:                                               ; preds = %89
  %92 = icmp ugt i32 %32, %34
  %93 = select i1 %92, i32 1, i32 -1
  br label %168

94:                                               ; preds = %21
  br i1 %29, label %95, label %135

95:                                               ; preds = %94
  %96 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 1
  %99 = load i32, i32* %98, align 4
  %100 = icmp ult i32 %97, %99
  %101 = select i1 %100, i32 %97, i32 %99
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %127, label %103

103:                                              ; preds = %95
  %104 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 1
  %105 = bitcast %"class.WTF::StringImpl"* %104 to i16*
  %106 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  %107 = bitcast %"class.WTF::StringImpl"* %106 to i8*
  br label %108

108:                                              ; preds = %117, %103
  %109 = phi i32 [ %120, %117 ], [ 0, %103 ]
  %110 = phi i16* [ %119, %117 ], [ %105, %103 ]
  %111 = phi i8* [ %118, %117 ], [ %107, %103 ]
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = load i16, i16* %110, align 2
  %115 = zext i16 %114 to i32
  %116 = icmp eq i32 %113, %115
  br i1 %116, label %117, label %122

117:                                              ; preds = %108
  %118 = getelementptr inbounds i8, i8* %111, i64 1
  %119 = getelementptr inbounds i16, i16* %110, i64 1
  %120 = add nuw i32 %109, 1
  %121 = icmp ult i32 %120, %101
  br i1 %121, label %108, label %127

122:                                              ; preds = %108
  %123 = zext i8 %112 to i32
  %124 = zext i16 %114 to i32
  %125 = icmp ugt i32 %123, %124
  %126 = select i1 %125, i32 1, i32 -1
  br label %132

127:                                              ; preds = %117, %95
  %128 = icmp eq i32 %97, %99
  br i1 %128, label %132, label %129

129:                                              ; preds = %127
  %130 = icmp ugt i32 %97, %99
  %131 = select i1 %130, i32 1, i32 -1
  br label %132

132:                                              ; preds = %129, %127, %122
  %133 = phi i32 [ %126, %122 ], [ %131, %129 ], [ 0, %127 ]
  %134 = sub nsw i32 0, %133
  br label %168

135:                                              ; preds = %94
  %136 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 1
  %137 = load i32, i32* %136, align 4
  %138 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %139 = load i32, i32* %138, align 4
  %140 = icmp ult i32 %137, %139
  %141 = select i1 %140, i32 %137, i32 %139
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %163, label %143

143:                                              ; preds = %135
  %144 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  %145 = bitcast %"class.WTF::StringImpl"* %144 to i16*
  %146 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 1
  %147 = bitcast %"class.WTF::StringImpl"* %146 to i16*
  br label %148

148:                                              ; preds = %155, %143
  %149 = phi i32 [ %158, %155 ], [ 0, %143 ]
  %150 = phi i16* [ %157, %155 ], [ %145, %143 ]
  %151 = phi i16* [ %156, %155 ], [ %147, %143 ]
  %152 = load i16, i16* %151, align 2
  %153 = load i16, i16* %150, align 2
  %154 = icmp eq i16 %152, %153
  br i1 %154, label %155, label %160

155:                                              ; preds = %148
  %156 = getelementptr inbounds i16, i16* %151, i64 1
  %157 = getelementptr inbounds i16, i16* %150, i64 1
  %158 = add nuw i32 %149, 1
  %159 = icmp ult i32 %158, %141
  br i1 %159, label %148, label %163

160:                                              ; preds = %148
  %161 = icmp ugt i16 %152, %153
  %162 = select i1 %161, i32 1, i32 -1
  br label %168

163:                                              ; preds = %155, %135
  %164 = icmp eq i32 %137, %139
  br i1 %164, label %168, label %165

165:                                              ; preds = %163
  %166 = icmp ugt i32 %137, %139
  %167 = select i1 %166, i32 1, i32 -1
  br label %168

168:                                              ; preds = %9, %10, %16, %56, %59, %61, %84, %89, %91, %132, %160, %163, %165
  %169 = phi i32 [ %20, %16 ], [ 0, %9 ], [ %14, %10 ], [ %134, %132 ], [ %58, %56 ], [ %63, %61 ], [ 0, %59 ], [ %88, %84 ], [ %93, %91 ], [ 0, %89 ], [ %162, %160 ], [ %167, %165 ], [ 0, %163 ]
  %170 = icmp slt i32 %169, 0
  ret i1 %170
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink32AuthenticatorAttestationResponse5TraceEPNS_7VisitorE(%"class.blink::AuthenticatorAttestationResponse"*, %"class.blink::Visitor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::AuthenticatorAttestationResponse", %"class.blink::AuthenticatorAttestationResponse"* %0, i64 0, i32 1
  %4 = bitcast %"class.blink::Member"* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %1, i8* nonnull %8, i8* nonnull %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_14DOMArrayBufferEE5TraceEPNS_7VisitorEPKv) #5
  br label %13

13:                                               ; preds = %2, %7
  %14 = getelementptr inbounds %"class.blink::AuthenticatorAttestationResponse", %"class.blink::AuthenticatorAttestationResponse"* %0, i64 0, i32 3
  %15 = bitcast %"class.blink::Member"* %14 to i64*
  %16 = load atomic i64, i64* %15 monotonic, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %13
  %19 = inttoptr i64 %16 to i8*
  %20 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %21 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %21, i64 5
  %23 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %22, align 8
  tail call void %23(%"class.blink::Visitor"* %1, i8* nonnull %19, i8* nonnull %19, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_14DOMArrayBufferEE5TraceEPNS_7VisitorEPKv) #5
  br label %24

24:                                               ; preds = %13, %18
  %25 = getelementptr inbounds %"class.blink::AuthenticatorAttestationResponse", %"class.blink::AuthenticatorAttestationResponse"* %0, i64 0, i32 4
  %26 = bitcast %"class.blink::Member"* %25 to i64*
  %27 = load atomic i64, i64* %26 monotonic, align 8
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %35, label %29

29:                                               ; preds = %24
  %30 = inttoptr i64 %27 to i8*
  %31 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %32 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %32, i64 5
  %34 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %33, align 8
  tail call void %34(%"class.blink::Visitor"* %1, i8* nonnull %30, i8* nonnull %30, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_14DOMArrayBufferEE5TraceEPNS_7VisitorEPKv) #5
  br label %35

35:                                               ; preds = %24, %29
  %36 = getelementptr inbounds %"class.blink::AuthenticatorAttestationResponse", %"class.blink::AuthenticatorAttestationResponse"* %0, i64 0, i32 0
  tail call void @_ZNK5blink21AuthenticatorResponse5TraceEPNS_7VisitorE(%"class.blink::AuthenticatorResponse"* %36, %"class.blink::Visitor"* %1) #5
  ret void
}

declare void @_ZNK5blink21AuthenticatorResponse5TraceEPNS_7VisitorE(%"class.blink::AuthenticatorResponse"*, %"class.blink::Visitor"*) unnamed_addr #1

declare i8* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv(%"class.blink::ScriptWrappable"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable18HasPendingActivityEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable17HasEventListenersEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.blink::WrapperTypeInfo"* @_ZNK5blink32AuthenticatorAttestationResponse18GetWrapperTypeInfoEv(%"class.blink::AuthenticatorAttestationResponse"*) unnamed_addr #0 comdat align 2 {
  %2 = load %"struct.blink::WrapperTypeInfo"*, %"struct.blink::WrapperTypeInfo"** @_ZN5blink32AuthenticatorAttestationResponse18wrapper_type_info_E, align 8
  ret %"struct.blink::WrapperTypeInfo"* %2
}

declare %"class.v8::Value"* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE(%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*) unnamed_addr #1

declare %"class.v8::Object"* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE(%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*) unnamed_addr #1

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN4mojo13TypeConverterIN3WTF6StringEN5blink5mojom22AuthenticatorTransportEE7ConvertERKS5_(i32* dereferenceable(4)) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_6StringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #5
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #5
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #5
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #5
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #5
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__sortIRPFbRKN3WTF6StringES4_EPS2_EEvT0_S9_T_(%"class.WTF::String"*, %"class.WTF::String"*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  br label %4

4:                                                ; preds = %285, %3
  %5 = phi %"class.WTF::String"* [ %1, %3 ], [ %266, %285 ]
  %6 = phi %"class.WTF::String"* [ %0, %3 ], [ %18, %285 ]
  %7 = ptrtoint %"class.WTF::String"* %5 to i64
  %8 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 -1
  %9 = bitcast %"class.WTF::String"* %8 to i64*
  %10 = bitcast %"class.WTF::String"* %8 to i64*
  %11 = bitcast %"class.WTF::String"* %8 to i64*
  %12 = bitcast %"class.WTF::String"* %8 to i64*
  %13 = bitcast %"class.WTF::String"* %8 to i64*
  %14 = ptrtoint %"class.WTF::String"* %5 to i64
  br label %15

15:                                               ; preds = %294, %4
  %16 = phi %"class.WTF::String"* [ %6, %4 ], [ %295, %294 ]
  br label %17

17:                                               ; preds = %216, %15
  %18 = phi %"class.WTF::String"* [ %16, %15 ], [ %207, %216 ]
  %19 = ptrtoint %"class.WTF::String"* %18 to i64
  %20 = sub i64 %7, %19
  %21 = ashr exact i64 %20, 3
  switch i64 %21, label %105 [
    i64 0, label %298
    i64 1, label %298
    i64 2, label %22
    i64 3, label %31
    i64 4, label %66
    i64 5, label %71
  ]

22:                                               ; preds = %17
  %23 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %24 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 -1
  %25 = tail call zeroext i1 %23(%"class.WTF::String"* dereferenceable(8) %24, %"class.WTF::String"* dereferenceable(8) %18) #5
  br i1 %25, label %26, label %298

26:                                               ; preds = %22
  %27 = bitcast %"class.WTF::String"* %18 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast %"class.WTF::String"* %24 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %27, align 8
  store i64 %28, i64* %29, align 8
  br label %298

31:                                               ; preds = %17
  %32 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 1
  %33 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 -1
  %34 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %35 = tail call zeroext i1 %34(%"class.WTF::String"* dereferenceable(8) %32, %"class.WTF::String"* dereferenceable(8) %18) #5
  %36 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %37 = tail call zeroext i1 %36(%"class.WTF::String"* dereferenceable(8) %33, %"class.WTF::String"* dereferenceable(8) %32) #5
  br i1 %35, label %51, label %38

38:                                               ; preds = %31
  br i1 %37, label %39, label %298

39:                                               ; preds = %38
  %40 = bitcast %"class.WTF::String"* %32 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = bitcast %"class.WTF::String"* %33 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %40, align 8
  store i64 %41, i64* %42, align 8
  %44 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %45 = tail call zeroext i1 %44(%"class.WTF::String"* dereferenceable(8) %32, %"class.WTF::String"* dereferenceable(8) %18) #5
  br i1 %45, label %46, label %298

46:                                               ; preds = %39
  %47 = bitcast %"class.WTF::String"* %18 to <2 x i64>*
  %48 = load <2 x i64>, <2 x i64>* %47, align 8
  %49 = shufflevector <2 x i64> %48, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %50 = bitcast %"class.WTF::String"* %18 to <2 x i64>*
  store <2 x i64> %49, <2 x i64>* %50, align 8
  br label %298

51:                                               ; preds = %31
  %52 = bitcast %"class.WTF::String"* %18 to i64*
  %53 = load i64, i64* %52, align 8
  br i1 %37, label %54, label %57

54:                                               ; preds = %51
  %55 = bitcast %"class.WTF::String"* %33 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %52, align 8
  store i64 %53, i64* %55, align 8
  br label %298

57:                                               ; preds = %51
  %58 = bitcast %"class.WTF::String"* %32 to i64*
  %59 = load i64, i64* %58, align 8
  store i64 %59, i64* %52, align 8
  store i64 %53, i64* %58, align 8
  %60 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %61 = tail call zeroext i1 %60(%"class.WTF::String"* dereferenceable(8) %33, %"class.WTF::String"* dereferenceable(8) %32) #5
  br i1 %61, label %62, label %298

62:                                               ; preds = %57
  %63 = load i64, i64* %58, align 8
  %64 = bitcast %"class.WTF::String"* %33 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %58, align 8
  store i64 %63, i64* %64, align 8
  br label %298

66:                                               ; preds = %17
  %67 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 1
  %68 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 2
  %69 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 -1
  %70 = tail call i32 @_ZNSt3__17__sort4IRPFbRKN3WTF6StringES4_EPS2_EEjT0_S9_S9_S9_T_(%"class.WTF::String"* %18, %"class.WTF::String"* %67, %"class.WTF::String"* %68, %"class.WTF::String"* %69, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  br label %298

71:                                               ; preds = %17
  %72 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 1
  %73 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 2
  %74 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 3
  %75 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 -1
  %76 = tail call i32 @_ZNSt3__17__sort4IRPFbRKN3WTF6StringES4_EPS2_EEjT0_S9_S9_S9_T_(%"class.WTF::String"* %18, %"class.WTF::String"* %72, %"class.WTF::String"* %73, %"class.WTF::String"* %74, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2) #5
  %77 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %78 = tail call zeroext i1 %77(%"class.WTF::String"* dereferenceable(8) %75, %"class.WTF::String"* dereferenceable(8) %74) #5
  br i1 %78, label %79, label %298

79:                                               ; preds = %71
  %80 = bitcast %"class.WTF::String"* %74 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = bitcast %"class.WTF::String"* %75 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %80, align 8
  store i64 %81, i64* %82, align 8
  %84 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %85 = tail call zeroext i1 %84(%"class.WTF::String"* dereferenceable(8) %74, %"class.WTF::String"* dereferenceable(8) %73) #5
  br i1 %85, label %86, label %298

86:                                               ; preds = %79
  %87 = bitcast %"class.WTF::String"* %73 to <2 x i64>*
  %88 = load <2 x i64>, <2 x i64>* %87, align 8
  %89 = shufflevector <2 x i64> %88, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %90 = bitcast %"class.WTF::String"* %73 to <2 x i64>*
  store <2 x i64> %89, <2 x i64>* %90, align 8
  %91 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %92 = tail call zeroext i1 %91(%"class.WTF::String"* dereferenceable(8) %73, %"class.WTF::String"* dereferenceable(8) %72) #5
  br i1 %92, label %93, label %298

93:                                               ; preds = %86
  %94 = bitcast %"class.WTF::String"* %72 to <2 x i64>*
  %95 = load <2 x i64>, <2 x i64>* %94, align 8
  %96 = shufflevector <2 x i64> %95, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %97 = bitcast %"class.WTF::String"* %72 to <2 x i64>*
  store <2 x i64> %96, <2 x i64>* %97, align 8
  %98 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %99 = tail call zeroext i1 %98(%"class.WTF::String"* dereferenceable(8) %72, %"class.WTF::String"* dereferenceable(8) %18) #5
  br i1 %99, label %100, label %298

100:                                              ; preds = %93
  %101 = bitcast %"class.WTF::String"* %18 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 8
  %103 = shufflevector <2 x i64> %102, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %104 = bitcast %"class.WTF::String"* %18 to <2 x i64>*
  store <2 x i64> %103, <2 x i64>* %104, align 8
  br label %298

105:                                              ; preds = %17
  %106 = icmp slt i64 %20, 56
  br i1 %106, label %107, label %108

107:                                              ; preds = %105
  tail call void @_ZNSt3__118__insertion_sort_3IRPFbRKN3WTF6StringES4_EPS2_EEvT0_S9_T_(%"class.WTF::String"* %18, %"class.WTF::String"* %5, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  br label %298

108:                                              ; preds = %105
  %109 = icmp sgt i64 %20, 7992
  %110 = sdiv i64 %21, 2
  %111 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 %110
  br i1 %109, label %112, label %145

112:                                              ; preds = %108
  %113 = sdiv i64 %21, 4
  %114 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 %113
  %115 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %111, i64 %113
  %116 = tail call i32 @_ZNSt3__17__sort4IRPFbRKN3WTF6StringES4_EPS2_EEjT0_S9_S9_S9_T_(%"class.WTF::String"* %18, %"class.WTF::String"* %114, %"class.WTF::String"* %111, %"class.WTF::String"* %115, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2) #5
  %117 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %118 = tail call zeroext i1 %117(%"class.WTF::String"* dereferenceable(8) %8, %"class.WTF::String"* dereferenceable(8) %115) #5
  br i1 %118, label %119, label %174

119:                                              ; preds = %112
  %120 = bitcast %"class.WTF::String"* %115 to i64*
  %121 = load i64, i64* %120, align 8
  %122 = load i64, i64* %12, align 8
  store i64 %122, i64* %120, align 8
  store i64 %121, i64* %12, align 8
  %123 = add i32 %116, 1
  %124 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %125 = tail call zeroext i1 %124(%"class.WTF::String"* dereferenceable(8) %115, %"class.WTF::String"* dereferenceable(8) %111) #5
  br i1 %125, label %126, label %174

126:                                              ; preds = %119
  %127 = bitcast %"class.WTF::String"* %111 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load i64, i64* %120, align 8
  store i64 %129, i64* %127, align 8
  store i64 %128, i64* %120, align 8
  %130 = add i32 %116, 2
  %131 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %132 = tail call zeroext i1 %131(%"class.WTF::String"* dereferenceable(8) %111, %"class.WTF::String"* dereferenceable(8) %114) #5
  br i1 %132, label %133, label %174

133:                                              ; preds = %126
  %134 = bitcast %"class.WTF::String"* %114 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = load i64, i64* %127, align 8
  store i64 %136, i64* %134, align 8
  store i64 %135, i64* %127, align 8
  %137 = add i32 %116, 3
  %138 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %139 = tail call zeroext i1 %138(%"class.WTF::String"* dereferenceable(8) %114, %"class.WTF::String"* dereferenceable(8) %18) #5
  br i1 %139, label %140, label %174

140:                                              ; preds = %133
  %141 = bitcast %"class.WTF::String"* %18 to i64*
  %142 = load i64, i64* %141, align 8
  %143 = load i64, i64* %134, align 8
  store i64 %143, i64* %141, align 8
  store i64 %142, i64* %134, align 8
  %144 = add i32 %116, 4
  br label %174

145:                                              ; preds = %108
  %146 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %147 = tail call zeroext i1 %146(%"class.WTF::String"* dereferenceable(8) %111, %"class.WTF::String"* dereferenceable(8) %18) #5
  %148 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %149 = tail call zeroext i1 %148(%"class.WTF::String"* dereferenceable(8) %8, %"class.WTF::String"* dereferenceable(8) %111) #5
  br i1 %147, label %161, label %150

150:                                              ; preds = %145
  br i1 %149, label %151, label %174

151:                                              ; preds = %150
  %152 = bitcast %"class.WTF::String"* %111 to i64*
  %153 = load i64, i64* %152, align 8
  %154 = load i64, i64* %9, align 8
  store i64 %154, i64* %152, align 8
  store i64 %153, i64* %9, align 8
  %155 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %156 = tail call zeroext i1 %155(%"class.WTF::String"* dereferenceable(8) %111, %"class.WTF::String"* dereferenceable(8) %18) #5
  br i1 %156, label %157, label %174

157:                                              ; preds = %151
  %158 = bitcast %"class.WTF::String"* %18 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = load i64, i64* %152, align 8
  store i64 %160, i64* %158, align 8
  store i64 %159, i64* %152, align 8
  br label %174

161:                                              ; preds = %145
  %162 = bitcast %"class.WTF::String"* %18 to i64*
  %163 = load i64, i64* %162, align 8
  br i1 %149, label %164, label %166

164:                                              ; preds = %161
  %165 = load i64, i64* %11, align 8
  store i64 %165, i64* %162, align 8
  store i64 %163, i64* %11, align 8
  br label %174

166:                                              ; preds = %161
  %167 = bitcast %"class.WTF::String"* %111 to i64*
  %168 = load i64, i64* %167, align 8
  store i64 %168, i64* %162, align 8
  store i64 %163, i64* %167, align 8
  %169 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %170 = tail call zeroext i1 %169(%"class.WTF::String"* dereferenceable(8) %8, %"class.WTF::String"* dereferenceable(8) %111) #5
  br i1 %170, label %171, label %174

171:                                              ; preds = %166
  %172 = load i64, i64* %167, align 8
  %173 = load i64, i64* %10, align 8
  store i64 %173, i64* %167, align 8
  store i64 %172, i64* %10, align 8
  br label %174

174:                                              ; preds = %171, %166, %164, %157, %151, %150, %140, %133, %126, %119, %112
  %175 = phi i32 [ %144, %140 ], [ %137, %133 ], [ %130, %126 ], [ %123, %119 ], [ %116, %112 ], [ 1, %164 ], [ 0, %150 ], [ 2, %157 ], [ 1, %151 ], [ 2, %171 ], [ 1, %166 ]
  %176 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %177 = tail call zeroext i1 %176(%"class.WTF::String"* dereferenceable(8) %18, %"class.WTF::String"* dereferenceable(8) %111) #5
  br i1 %177, label %232, label %178

178:                                              ; preds = %174, %223
  %179 = phi %"class.WTF::String"* [ %180, %223 ], [ %8, %174 ]
  %180 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %179, i64 -1
  %181 = icmp eq %"class.WTF::String"* %18, %180
  br i1 %181, label %182, label %223

182:                                              ; preds = %178
  %183 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 1
  %184 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %185 = tail call zeroext i1 %184(%"class.WTF::String"* dereferenceable(8) %18, %"class.WTF::String"* dereferenceable(8) %8) #5
  br i1 %185, label %200, label %186

186:                                              ; preds = %182
  %187 = icmp eq %"class.WTF::String"* %183, %8
  br i1 %187, label %298, label %188

188:                                              ; preds = %186, %197
  %189 = phi %"class.WTF::String"* [ %198, %197 ], [ %183, %186 ]
  %190 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %191 = tail call zeroext i1 %190(%"class.WTF::String"* dereferenceable(8) %18, %"class.WTF::String"* dereferenceable(8) %189) #5
  br i1 %191, label %192, label %197

192:                                              ; preds = %188
  %193 = bitcast %"class.WTF::String"* %189 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = load i64, i64* %13, align 8
  store i64 %195, i64* %193, align 8
  store i64 %194, i64* %13, align 8
  %196 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %189, i64 1
  br label %200

197:                                              ; preds = %188
  %198 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %189, i64 1
  %199 = icmp eq %"class.WTF::String"* %198, %8
  br i1 %199, label %298, label %188

200:                                              ; preds = %192, %182
  %201 = phi %"class.WTF::String"* [ %183, %182 ], [ %196, %192 ]
  %202 = icmp eq %"class.WTF::String"* %201, %8
  br i1 %202, label %298, label %203

203:                                              ; preds = %200, %218
  %204 = phi %"class.WTF::String"* [ %210, %218 ], [ %201, %200 ]
  %205 = phi %"class.WTF::String"* [ %214, %218 ], [ %8, %200 ]
  br label %206

206:                                              ; preds = %206, %203
  %207 = phi %"class.WTF::String"* [ %204, %203 ], [ %210, %206 ]
  %208 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %209 = tail call zeroext i1 %208(%"class.WTF::String"* dereferenceable(8) %18, %"class.WTF::String"* dereferenceable(8) %207) #5
  %210 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %207, i64 1
  br i1 %209, label %211, label %206

211:                                              ; preds = %206, %211
  %212 = phi %"class.WTF::String"* [ %214, %211 ], [ %205, %206 ]
  %213 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %214 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %212, i64 -1
  %215 = tail call zeroext i1 %213(%"class.WTF::String"* dereferenceable(8) %18, %"class.WTF::String"* dereferenceable(8) %214) #5
  br i1 %215, label %211, label %216

216:                                              ; preds = %211
  %217 = icmp ult %"class.WTF::String"* %207, %214
  br i1 %217, label %218, label %17

218:                                              ; preds = %216
  %219 = bitcast %"class.WTF::String"* %207 to i64*
  %220 = load i64, i64* %219, align 8
  %221 = bitcast %"class.WTF::String"* %214 to i64*
  %222 = load i64, i64* %221, align 8
  store i64 %222, i64* %219, align 8
  store i64 %220, i64* %221, align 8
  br label %203

223:                                              ; preds = %178
  %224 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %225 = tail call zeroext i1 %224(%"class.WTF::String"* dereferenceable(8) %180, %"class.WTF::String"* dereferenceable(8) %111) #5
  br i1 %225, label %226, label %178

226:                                              ; preds = %223
  %227 = bitcast %"class.WTF::String"* %18 to i64*
  %228 = load i64, i64* %227, align 8
  %229 = bitcast %"class.WTF::String"* %180 to i64*
  %230 = load i64, i64* %229, align 8
  store i64 %230, i64* %227, align 8
  store i64 %228, i64* %229, align 8
  %231 = add i32 %175, 1
  br label %232

232:                                              ; preds = %174, %226
  %233 = phi i32 [ %231, %226 ], [ %175, %174 ]
  %234 = phi %"class.WTF::String"* [ %180, %226 ], [ %8, %174 ]
  %235 = ptrtoint %"class.WTF::String"* %18 to i64
  %236 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 1
  %237 = icmp ult %"class.WTF::String"* %236, %234
  br i1 %237, label %238, label %263

238:                                              ; preds = %232, %255
  %239 = phi %"class.WTF::String"* [ %262, %255 ], [ %111, %232 ]
  %240 = phi i32 [ %260, %255 ], [ %233, %232 ]
  %241 = phi %"class.WTF::String"* [ %247, %255 ], [ %236, %232 ]
  %242 = phi %"class.WTF::String"* [ %251, %255 ], [ %234, %232 ]
  br label %243

243:                                              ; preds = %243, %238
  %244 = phi %"class.WTF::String"* [ %241, %238 ], [ %247, %243 ]
  %245 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %246 = tail call zeroext i1 %245(%"class.WTF::String"* dereferenceable(8) %244, %"class.WTF::String"* dereferenceable(8) %239) #5
  %247 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %244, i64 1
  br i1 %246, label %243, label %248

248:                                              ; preds = %243, %248
  %249 = phi %"class.WTF::String"* [ %251, %248 ], [ %242, %243 ]
  %250 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %251 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %249, i64 -1
  %252 = tail call zeroext i1 %250(%"class.WTF::String"* dereferenceable(8) %251, %"class.WTF::String"* dereferenceable(8) %239) #5
  br i1 %252, label %253, label %248

253:                                              ; preds = %248
  %254 = icmp ugt %"class.WTF::String"* %244, %251
  br i1 %254, label %263, label %255

255:                                              ; preds = %253
  %256 = bitcast %"class.WTF::String"* %244 to i64*
  %257 = load i64, i64* %256, align 8
  %258 = bitcast %"class.WTF::String"* %251 to i64*
  %259 = load i64, i64* %258, align 8
  store i64 %259, i64* %256, align 8
  store i64 %257, i64* %258, align 8
  %260 = add i32 %240, 1
  %261 = icmp eq %"class.WTF::String"* %239, %244
  %262 = select i1 %261, %"class.WTF::String"* %251, %"class.WTF::String"* %239
  br label %238

263:                                              ; preds = %253, %232
  %264 = phi %"class.WTF::String"* [ %111, %232 ], [ %239, %253 ]
  %265 = phi i32 [ %233, %232 ], [ %240, %253 ]
  %266 = phi %"class.WTF::String"* [ %236, %232 ], [ %244, %253 ]
  %267 = icmp eq %"class.WTF::String"* %266, %264
  br i1 %267, label %277, label %268

268:                                              ; preds = %263
  %269 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %270 = tail call zeroext i1 %269(%"class.WTF::String"* dereferenceable(8) %264, %"class.WTF::String"* dereferenceable(8) %266) #5
  br i1 %270, label %271, label %277

271:                                              ; preds = %268
  %272 = bitcast %"class.WTF::String"* %266 to i64*
  %273 = load i64, i64* %272, align 8
  %274 = bitcast %"class.WTF::String"* %264 to i64*
  %275 = load i64, i64* %274, align 8
  store i64 %275, i64* %272, align 8
  store i64 %273, i64* %274, align 8
  %276 = add i32 %265, 1
  br label %277

277:                                              ; preds = %263, %271, %268
  %278 = phi i32 [ %276, %271 ], [ %265, %268 ], [ %265, %263 ]
  %279 = icmp eq i32 %278, 0
  br i1 %279, label %280, label %287

280:                                              ; preds = %277
  %281 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbRKN3WTF6StringES4_EPS2_EEbT0_S9_T_(%"class.WTF::String"* %18, %"class.WTF::String"* %266, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  %282 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %266, i64 1
  %283 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbRKN3WTF6StringES4_EPS2_EEbT0_S9_T_(%"class.WTF::String"* %282, %"class.WTF::String"* %5, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  br i1 %283, label %284, label %286

284:                                              ; preds = %280
  br i1 %281, label %298, label %285

285:                                              ; preds = %284, %296
  br label %4

286:                                              ; preds = %280
  br i1 %281, label %294, label %287

287:                                              ; preds = %286, %277
  %288 = ptrtoint %"class.WTF::String"* %266 to i64
  %289 = sub i64 %288, %235
  %290 = sub i64 %14, %288
  %291 = icmp slt i64 %289, %290
  br i1 %291, label %292, label %296

292:                                              ; preds = %287
  tail call void @_ZNSt3__16__sortIRPFbRKN3WTF6StringES4_EPS2_EEvT0_S9_T_(%"class.WTF::String"* %18, %"class.WTF::String"* %266, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  %293 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %266, i64 1
  br label %294

294:                                              ; preds = %292, %286
  %295 = phi %"class.WTF::String"* [ %282, %286 ], [ %293, %292 ]
  br label %15

296:                                              ; preds = %287
  %297 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %266, i64 1
  tail call void @_ZNSt3__16__sortIRPFbRKN3WTF6StringES4_EPS2_EEvT0_S9_T_(%"class.WTF::String"* %297, %"class.WTF::String"* %5, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  br label %285

298:                                              ; preds = %284, %200, %17, %17, %186, %197, %100, %93, %86, %79, %71, %62, %57, %54, %46, %39, %38, %22, %26, %66, %107
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort4IRPFbRKN3WTF6StringES4_EPS2_EEjT0_S9_S9_S9_T_(%"class.WTF::String"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.WTF::String"*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %6 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %4, align 8
  %7 = tail call zeroext i1 %6(%"class.WTF::String"* dereferenceable(8) %1, %"class.WTF::String"* dereferenceable(8) %0) #5
  %8 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %4, align 8
  %9 = tail call zeroext i1 %8(%"class.WTF::String"* dereferenceable(8) %2, %"class.WTF::String"* dereferenceable(8) %1) #5
  br i1 %7, label %22, label %10

10:                                               ; preds = %5
  br i1 %9, label %11, label %37

11:                                               ; preds = %10
  %12 = bitcast %"class.WTF::String"* %1 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.WTF::String"* %2 to i64*
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* %12, align 8
  store i64 %13, i64* %14, align 8
  %16 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %4, align 8
  %17 = tail call zeroext i1 %16(%"class.WTF::String"* dereferenceable(8) %1, %"class.WTF::String"* dereferenceable(8) %0) #5
  br i1 %17, label %18, label %37

18:                                               ; preds = %11
  %19 = bitcast %"class.WTF::String"* %0 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = load i64, i64* %12, align 8
  store i64 %21, i64* %19, align 8
  store i64 %20, i64* %12, align 8
  br label %37

22:                                               ; preds = %5
  %23 = bitcast %"class.WTF::String"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  br i1 %9, label %25, label %28

25:                                               ; preds = %22
  %26 = bitcast %"class.WTF::String"* %2 to i64*
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %23, align 8
  store i64 %24, i64* %26, align 8
  br label %37

28:                                               ; preds = %22
  %29 = bitcast %"class.WTF::String"* %1 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %23, align 8
  store i64 %24, i64* %29, align 8
  %31 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %4, align 8
  %32 = tail call zeroext i1 %31(%"class.WTF::String"* dereferenceable(8) %2, %"class.WTF::String"* dereferenceable(8) %1) #5
  br i1 %32, label %33, label %37

33:                                               ; preds = %28
  %34 = load i64, i64* %29, align 8
  %35 = bitcast %"class.WTF::String"* %2 to i64*
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %29, align 8
  store i64 %34, i64* %35, align 8
  br label %37

37:                                               ; preds = %10, %11, %18, %25, %28, %33
  %38 = phi i32 [ 1, %25 ], [ 0, %10 ], [ 2, %18 ], [ 1, %11 ], [ 2, %33 ], [ 1, %28 ]
  %39 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %4, align 8
  %40 = tail call zeroext i1 %39(%"class.WTF::String"* dereferenceable(8) %3, %"class.WTF::String"* dereferenceable(8) %2) #5
  br i1 %40, label %41, label %61

41:                                               ; preds = %37
  %42 = bitcast %"class.WTF::String"* %2 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = bitcast %"class.WTF::String"* %3 to i64*
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %42, align 8
  store i64 %43, i64* %44, align 8
  %46 = add nuw nsw i32 %38, 1
  %47 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %4, align 8
  %48 = tail call zeroext i1 %47(%"class.WTF::String"* dereferenceable(8) %2, %"class.WTF::String"* dereferenceable(8) %1) #5
  br i1 %48, label %49, label %61

49:                                               ; preds = %41
  %50 = bitcast %"class.WTF::String"* %1 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = load i64, i64* %42, align 8
  store i64 %52, i64* %50, align 8
  store i64 %51, i64* %42, align 8
  %53 = add nuw nsw i32 %38, 2
  %54 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %4, align 8
  %55 = tail call zeroext i1 %54(%"class.WTF::String"* dereferenceable(8) %1, %"class.WTF::String"* dereferenceable(8) %0) #5
  br i1 %55, label %56, label %61

56:                                               ; preds = %49
  %57 = bitcast %"class.WTF::String"* %0 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = load i64, i64* %50, align 8
  store i64 %59, i64* %57, align 8
  store i64 %58, i64* %50, align 8
  %60 = add nuw nsw i32 %38, 3
  br label %61

61:                                               ; preds = %41, %56, %49, %37
  %62 = phi i32 [ %60, %56 ], [ %53, %49 ], [ %46, %41 ], [ %38, %37 ]
  ret i32 %62
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__118__insertion_sort_3IRPFbRKN3WTF6StringES4_EPS2_EEvT0_S9_T_(%"class.WTF::String"*, %"class.WTF::String"*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.WTF::String", align 8
  %5 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 2
  %6 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 1
  %7 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %8 = tail call zeroext i1 %7(%"class.WTF::String"* dereferenceable(8) %6, %"class.WTF::String"* dereferenceable(8) %0) #5
  %9 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %10 = tail call zeroext i1 %9(%"class.WTF::String"* dereferenceable(8) %5, %"class.WTF::String"* dereferenceable(8) %6) #5
  br i1 %8, label %24, label %11

11:                                               ; preds = %3
  br i1 %10, label %12, label %40

12:                                               ; preds = %11
  %13 = bitcast %"class.WTF::String"* %6 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 8
  %15 = shufflevector <2 x i64> %14, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %16 = bitcast %"class.WTF::String"* %6 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 8
  %17 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %18 = tail call zeroext i1 %17(%"class.WTF::String"* dereferenceable(8) %6, %"class.WTF::String"* dereferenceable(8) %0) #5
  br i1 %18, label %19, label %40

19:                                               ; preds = %12
  %20 = bitcast %"class.WTF::String"* %0 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 8
  %22 = shufflevector <2 x i64> %21, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %23 = bitcast %"class.WTF::String"* %0 to <2 x i64>*
  store <2 x i64> %22, <2 x i64>* %23, align 8
  br label %40

24:                                               ; preds = %3
  %25 = bitcast %"class.WTF::String"* %0 to i64*
  %26 = load i64, i64* %25, align 8
  br i1 %10, label %27, label %30

27:                                               ; preds = %24
  %28 = bitcast %"class.WTF::String"* %5 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %25, align 8
  store i64 %26, i64* %28, align 8
  br label %40

30:                                               ; preds = %24
  %31 = bitcast %"class.WTF::String"* %6 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %25, align 8
  store i64 %26, i64* %31, align 8
  %33 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %34 = tail call zeroext i1 %33(%"class.WTF::String"* dereferenceable(8) %5, %"class.WTF::String"* dereferenceable(8) %6) #5
  br i1 %34, label %35, label %40

35:                                               ; preds = %30
  %36 = bitcast %"class.WTF::String"* %6 to <2 x i64>*
  %37 = load <2 x i64>, <2 x i64>* %36, align 8
  %38 = shufflevector <2 x i64> %37, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %39 = bitcast %"class.WTF::String"* %6 to <2 x i64>*
  store <2 x i64> %38, <2 x i64>* %39, align 8
  br label %40

40:                                               ; preds = %11, %12, %19, %27, %30, %35
  %41 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 3
  %42 = icmp eq %"class.WTF::String"* %41, %1
  br i1 %42, label %47, label %43

43:                                               ; preds = %40
  %44 = bitcast %"class.WTF::String"* %4 to i8*
  %45 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  %46 = bitcast %"class.WTF::String"* %4 to i64*
  br label %48

47:                                               ; preds = %123, %40
  ret void

48:                                               ; preds = %43, %123
  %49 = phi %"class.WTF::String"* [ %41, %43 ], [ %124, %123 ]
  %50 = phi %"class.WTF::String"* [ %5, %43 ], [ %49, %123 ]
  %51 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %52 = call zeroext i1 %51(%"class.WTF::String"* dereferenceable(8) %49, %"class.WTF::String"* dereferenceable(8) %50) #5
  br i1 %52, label %53, label %123

53:                                               ; preds = %48
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #5
  %54 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %49, i64 0, i32 0, i32 0
  %55 = bitcast %"class.WTF::String"* %49 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %46, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %54, align 8
  br label %57

57:                                               ; preds = %82, %53
  %58 = phi %"class.WTF::String"* [ %49, %53 ], [ %59, %82 ]
  %59 = phi %"class.WTF::String"* [ %50, %53 ], [ %84, %82 ]
  %60 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %59, i64 0, i32 0, i32 0
  %61 = bitcast %"class.WTF::String"* %59 to i64*
  %62 = load i64, i64* %61, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %60, align 8
  %63 = bitcast %"class.WTF::String"* %58 to i64*
  %64 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %58, i64 0, i32 0, i32 0
  %65 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %64, align 8
  store i64 %62, i64* %63, align 8
  %66 = icmp eq %"class.WTF::StringImpl"* %65, null
  br i1 %66, label %80, label %67

67:                                               ; preds = %57
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  br i1 %71, label %74, label %76

74:                                               ; preds = %67
  %75 = add i32 %73, -1
  store i32 %75, i32* %72, align 4
  br label %76

76:                                               ; preds = %74, %67
  %77 = phi i32 [ %75, %74 ], [ %73, %67 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %80

79:                                               ; preds = %76
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %65) #5
  br label %80

80:                                               ; preds = %57, %76, %79
  %81 = icmp eq %"class.WTF::String"* %59, %0
  br i1 %81, label %86, label %82

82:                                               ; preds = %80
  %83 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %84 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %59, i64 -1
  %85 = call zeroext i1 %83(%"class.WTF::String"* nonnull dereferenceable(8) %4, %"class.WTF::String"* dereferenceable(8) %84) #5
  br i1 %85, label %57, label %86

86:                                               ; preds = %80, %82
  %87 = phi %"class.WTF::String"* [ %59, %82 ], [ %0, %80 ]
  %88 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %87, i64 0, i32 0, i32 0
  %89 = bitcast %"class.WTF::String"* %87 to i64*
  %90 = load i64, i64* %46, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %45, align 8
  %91 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %88, align 8
  store i64 %90, i64* %89, align 8
  %92 = icmp eq %"class.WTF::StringImpl"* %91, null
  br i1 %92, label %106, label %93

93:                                               ; preds = %86
  %94 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %95 = load atomic i32, i32* %94 monotonic, align 4
  %96 = and i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 0, i32 0
  %99 = load i32, i32* %98, align 4
  br i1 %97, label %100, label %102

100:                                              ; preds = %93
  %101 = add i32 %99, -1
  store i32 %101, i32* %98, align 4
  br label %102

102:                                              ; preds = %100, %93
  %103 = phi i32 [ %101, %100 ], [ %99, %93 ]
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %106

105:                                              ; preds = %102
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %91) #5
  br label %106

106:                                              ; preds = %86, %102, %105
  %107 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %45, align 8
  %108 = icmp eq %"class.WTF::StringImpl"* %107, null
  br i1 %108, label %122, label %109

109:                                              ; preds = %106
  %110 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %107, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %111 = load atomic i32, i32* %110 monotonic, align 4
  %112 = and i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %107, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  br i1 %113, label %116, label %118

116:                                              ; preds = %109
  %117 = add i32 %115, -1
  store i32 %117, i32* %114, align 4
  br label %118

118:                                              ; preds = %116, %109
  %119 = phi i32 [ %117, %116 ], [ %115, %109 ]
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %122

121:                                              ; preds = %118
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %107) #5
  br label %122

122:                                              ; preds = %106, %118, %121
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #5
  br label %123

123:                                              ; preds = %122, %48
  %124 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %49, i64 1
  %125 = icmp eq %"class.WTF::String"* %124, %1
  br i1 %125, label %47, label %48
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbRKN3WTF6StringES4_EPS2_EEbT0_S9_T_(%"class.WTF::String"*, %"class.WTF::String"*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.WTF::String", align 8
  %5 = ptrtoint %"class.WTF::String"* %1 to i64
  %6 = ptrtoint %"class.WTF::String"* %0 to i64
  %7 = sub i64 %5, %6
  %8 = ashr exact i64 %7, 3
  switch i64 %8, label %92 [
    i64 0, label %220
    i64 1, label %220
    i64 2, label %9
    i64 3, label %18
    i64 4, label %53
    i64 5, label %58
  ]

9:                                                ; preds = %3
  %10 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 -1
  %12 = tail call zeroext i1 %10(%"class.WTF::String"* dereferenceable(8) %11, %"class.WTF::String"* dereferenceable(8) %0) #5
  br i1 %12, label %13, label %220

13:                                               ; preds = %9
  %14 = bitcast %"class.WTF::String"* %0 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.WTF::String"* %11 to i64*
  %17 = load i64, i64* %16, align 8
  store i64 %17, i64* %14, align 8
  store i64 %15, i64* %16, align 8
  br label %220

18:                                               ; preds = %3
  %19 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 1
  %20 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 -1
  %21 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %22 = tail call zeroext i1 %21(%"class.WTF::String"* dereferenceable(8) %19, %"class.WTF::String"* dereferenceable(8) %0) #5
  %23 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %24 = tail call zeroext i1 %23(%"class.WTF::String"* dereferenceable(8) %20, %"class.WTF::String"* dereferenceable(8) %19) #5
  br i1 %22, label %38, label %25

25:                                               ; preds = %18
  br i1 %24, label %26, label %220

26:                                               ; preds = %25
  %27 = bitcast %"class.WTF::String"* %19 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast %"class.WTF::String"* %20 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %27, align 8
  store i64 %28, i64* %29, align 8
  %31 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %32 = tail call zeroext i1 %31(%"class.WTF::String"* dereferenceable(8) %19, %"class.WTF::String"* dereferenceable(8) %0) #5
  br i1 %32, label %33, label %220

33:                                               ; preds = %26
  %34 = bitcast %"class.WTF::String"* %0 to <2 x i64>*
  %35 = load <2 x i64>, <2 x i64>* %34, align 8
  %36 = shufflevector <2 x i64> %35, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %37 = bitcast %"class.WTF::String"* %0 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %37, align 8
  br label %220

38:                                               ; preds = %18
  %39 = bitcast %"class.WTF::String"* %0 to i64*
  %40 = load i64, i64* %39, align 8
  br i1 %24, label %41, label %44

41:                                               ; preds = %38
  %42 = bitcast %"class.WTF::String"* %20 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %39, align 8
  store i64 %40, i64* %42, align 8
  br label %220

44:                                               ; preds = %38
  %45 = bitcast %"class.WTF::String"* %19 to i64*
  %46 = load i64, i64* %45, align 8
  store i64 %46, i64* %39, align 8
  store i64 %40, i64* %45, align 8
  %47 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %48 = tail call zeroext i1 %47(%"class.WTF::String"* dereferenceable(8) %20, %"class.WTF::String"* dereferenceable(8) %19) #5
  br i1 %48, label %49, label %220

49:                                               ; preds = %44
  %50 = load i64, i64* %45, align 8
  %51 = bitcast %"class.WTF::String"* %20 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %45, align 8
  store i64 %50, i64* %51, align 8
  br label %220

53:                                               ; preds = %3
  %54 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 1
  %55 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 2
  %56 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 -1
  %57 = tail call i32 @_ZNSt3__17__sort4IRPFbRKN3WTF6StringES4_EPS2_EEjT0_S9_S9_S9_T_(%"class.WTF::String"* %0, %"class.WTF::String"* %54, %"class.WTF::String"* %55, %"class.WTF::String"* %56, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  br label %220

58:                                               ; preds = %3
  %59 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 1
  %60 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 2
  %61 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 3
  %62 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 -1
  %63 = tail call i32 @_ZNSt3__17__sort4IRPFbRKN3WTF6StringES4_EPS2_EEjT0_S9_S9_S9_T_(%"class.WTF::String"* %0, %"class.WTF::String"* %59, %"class.WTF::String"* %60, %"class.WTF::String"* %61, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2) #5
  %64 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %65 = tail call zeroext i1 %64(%"class.WTF::String"* dereferenceable(8) %62, %"class.WTF::String"* dereferenceable(8) %61) #5
  br i1 %65, label %66, label %220

66:                                               ; preds = %58
  %67 = bitcast %"class.WTF::String"* %61 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = bitcast %"class.WTF::String"* %62 to i64*
  %70 = load i64, i64* %69, align 8
  store i64 %70, i64* %67, align 8
  store i64 %68, i64* %69, align 8
  %71 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %72 = tail call zeroext i1 %71(%"class.WTF::String"* dereferenceable(8) %61, %"class.WTF::String"* dereferenceable(8) %60) #5
  br i1 %72, label %73, label %220

73:                                               ; preds = %66
  %74 = bitcast %"class.WTF::String"* %60 to <2 x i64>*
  %75 = load <2 x i64>, <2 x i64>* %74, align 8
  %76 = shufflevector <2 x i64> %75, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %77 = bitcast %"class.WTF::String"* %60 to <2 x i64>*
  store <2 x i64> %76, <2 x i64>* %77, align 8
  %78 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %79 = tail call zeroext i1 %78(%"class.WTF::String"* dereferenceable(8) %60, %"class.WTF::String"* dereferenceable(8) %59) #5
  br i1 %79, label %80, label %220

80:                                               ; preds = %73
  %81 = bitcast %"class.WTF::String"* %59 to <2 x i64>*
  %82 = load <2 x i64>, <2 x i64>* %81, align 8
  %83 = shufflevector <2 x i64> %82, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %84 = bitcast %"class.WTF::String"* %59 to <2 x i64>*
  store <2 x i64> %83, <2 x i64>* %84, align 8
  %85 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %86 = tail call zeroext i1 %85(%"class.WTF::String"* dereferenceable(8) %59, %"class.WTF::String"* dereferenceable(8) %0) #5
  br i1 %86, label %87, label %220

87:                                               ; preds = %80
  %88 = bitcast %"class.WTF::String"* %0 to <2 x i64>*
  %89 = load <2 x i64>, <2 x i64>* %88, align 8
  %90 = shufflevector <2 x i64> %89, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %91 = bitcast %"class.WTF::String"* %0 to <2 x i64>*
  store <2 x i64> %90, <2 x i64>* %91, align 8
  br label %220

92:                                               ; preds = %3
  %93 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 2
  %94 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 1
  %95 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %96 = tail call zeroext i1 %95(%"class.WTF::String"* dereferenceable(8) %94, %"class.WTF::String"* dereferenceable(8) %0) #5
  %97 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %98 = tail call zeroext i1 %97(%"class.WTF::String"* dereferenceable(8) %93, %"class.WTF::String"* dereferenceable(8) %94) #5
  br i1 %96, label %112, label %99

99:                                               ; preds = %92
  br i1 %98, label %100, label %128

100:                                              ; preds = %99
  %101 = bitcast %"class.WTF::String"* %94 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 8
  %103 = shufflevector <2 x i64> %102, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %104 = bitcast %"class.WTF::String"* %94 to <2 x i64>*
  store <2 x i64> %103, <2 x i64>* %104, align 8
  %105 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %106 = tail call zeroext i1 %105(%"class.WTF::String"* dereferenceable(8) %94, %"class.WTF::String"* dereferenceable(8) %0) #5
  br i1 %106, label %107, label %128

107:                                              ; preds = %100
  %108 = bitcast %"class.WTF::String"* %0 to <2 x i64>*
  %109 = load <2 x i64>, <2 x i64>* %108, align 8
  %110 = shufflevector <2 x i64> %109, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %111 = bitcast %"class.WTF::String"* %0 to <2 x i64>*
  store <2 x i64> %110, <2 x i64>* %111, align 8
  br label %128

112:                                              ; preds = %92
  %113 = bitcast %"class.WTF::String"* %0 to i64*
  %114 = load i64, i64* %113, align 8
  br i1 %98, label %115, label %118

115:                                              ; preds = %112
  %116 = bitcast %"class.WTF::String"* %93 to i64*
  %117 = load i64, i64* %116, align 8
  store i64 %117, i64* %113, align 8
  store i64 %114, i64* %116, align 8
  br label %128

118:                                              ; preds = %112
  %119 = bitcast %"class.WTF::String"* %94 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %113, align 8
  store i64 %114, i64* %119, align 8
  %121 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %122 = tail call zeroext i1 %121(%"class.WTF::String"* dereferenceable(8) %93, %"class.WTF::String"* dereferenceable(8) %94) #5
  br i1 %122, label %123, label %128

123:                                              ; preds = %118
  %124 = bitcast %"class.WTF::String"* %94 to <2 x i64>*
  %125 = load <2 x i64>, <2 x i64>* %124, align 8
  %126 = shufflevector <2 x i64> %125, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %127 = bitcast %"class.WTF::String"* %94 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %127, align 8
  br label %128

128:                                              ; preds = %99, %100, %107, %115, %118, %123
  %129 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 3
  %130 = icmp eq %"class.WTF::String"* %129, %1
  br i1 %130, label %220, label %131

131:                                              ; preds = %128
  %132 = bitcast %"class.WTF::String"* %4 to i8*
  %133 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  %134 = bitcast %"class.WTF::String"* %4 to i64*
  br label %135

135:                                              ; preds = %131, %213
  %136 = phi %"class.WTF::String"* [ %129, %131 ], [ %215, %213 ]
  %137 = phi i32 [ 0, %131 ], [ %214, %213 ]
  %138 = phi %"class.WTF::String"* [ %93, %131 ], [ %136, %213 ]
  %139 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %140 = call zeroext i1 %139(%"class.WTF::String"* dereferenceable(8) %136, %"class.WTF::String"* dereferenceable(8) %138) #5
  br i1 %140, label %141, label %213

141:                                              ; preds = %135
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %132) #5
  %142 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %136, i64 0, i32 0, i32 0
  %143 = bitcast %"class.WTF::String"* %136 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %134, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %142, align 8
  br label %145

145:                                              ; preds = %170, %141
  %146 = phi %"class.WTF::String"* [ %136, %141 ], [ %147, %170 ]
  %147 = phi %"class.WTF::String"* [ %138, %141 ], [ %172, %170 ]
  %148 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %147, i64 0, i32 0, i32 0
  %149 = bitcast %"class.WTF::String"* %147 to i64*
  %150 = load i64, i64* %149, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %148, align 8
  %151 = bitcast %"class.WTF::String"* %146 to i64*
  %152 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %146, i64 0, i32 0, i32 0
  %153 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %152, align 8
  store i64 %150, i64* %151, align 8
  %154 = icmp eq %"class.WTF::StringImpl"* %153, null
  br i1 %154, label %168, label %155

155:                                              ; preds = %145
  %156 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %153, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %157 = load atomic i32, i32* %156 monotonic, align 4
  %158 = and i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %153, i64 0, i32 0
  %161 = load i32, i32* %160, align 4
  br i1 %159, label %162, label %164

162:                                              ; preds = %155
  %163 = add i32 %161, -1
  store i32 %163, i32* %160, align 4
  br label %164

164:                                              ; preds = %162, %155
  %165 = phi i32 [ %163, %162 ], [ %161, %155 ]
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %167, label %168

167:                                              ; preds = %164
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %153) #5
  br label %168

168:                                              ; preds = %145, %164, %167
  %169 = icmp eq %"class.WTF::String"* %147, %0
  br i1 %169, label %174, label %170

170:                                              ; preds = %168
  %171 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %172 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %147, i64 -1
  %173 = call zeroext i1 %171(%"class.WTF::String"* nonnull dereferenceable(8) %4, %"class.WTF::String"* dereferenceable(8) %172) #5
  br i1 %173, label %145, label %174

174:                                              ; preds = %168, %170
  %175 = phi %"class.WTF::String"* [ %147, %170 ], [ %0, %168 ]
  %176 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %175, i64 0, i32 0, i32 0
  %177 = bitcast %"class.WTF::String"* %175 to i64*
  %178 = load i64, i64* %134, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %133, align 8
  %179 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %176, align 8
  store i64 %178, i64* %177, align 8
  %180 = icmp eq %"class.WTF::StringImpl"* %179, null
  br i1 %180, label %194, label %181

181:                                              ; preds = %174
  %182 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %179, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %183 = load atomic i32, i32* %182 monotonic, align 4
  %184 = and i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %179, i64 0, i32 0
  %187 = load i32, i32* %186, align 4
  br i1 %185, label %188, label %190

188:                                              ; preds = %181
  %189 = add i32 %187, -1
  store i32 %189, i32* %186, align 4
  br label %190

190:                                              ; preds = %188, %181
  %191 = phi i32 [ %189, %188 ], [ %187, %181 ]
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %193, label %194

193:                                              ; preds = %190
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %179) #5
  br label %194

194:                                              ; preds = %174, %190, %193
  %195 = add i32 %137, 1
  %196 = icmp eq i32 %195, 8
  %197 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %133, align 8
  %198 = icmp eq %"class.WTF::StringImpl"* %197, null
  br i1 %198, label %212, label %199

199:                                              ; preds = %194
  %200 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %197, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %201 = load atomic i32, i32* %200 monotonic, align 4
  %202 = and i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %197, i64 0, i32 0
  %205 = load i32, i32* %204, align 4
  br i1 %203, label %206, label %208

206:                                              ; preds = %199
  %207 = add i32 %205, -1
  store i32 %207, i32* %204, align 4
  br label %208

208:                                              ; preds = %206, %199
  %209 = phi i32 [ %207, %206 ], [ %205, %199 ]
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %212

211:                                              ; preds = %208
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %197) #5
  br label %212

212:                                              ; preds = %194, %208, %211
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %132) #5
  br i1 %196, label %217, label %213

213:                                              ; preds = %212, %135
  %214 = phi i32 [ %195, %212 ], [ %137, %135 ]
  %215 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %136, i64 1
  %216 = icmp eq %"class.WTF::String"* %215, %1
  br i1 %216, label %220, label %135

217:                                              ; preds = %212
  %218 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %136, i64 1
  %219 = icmp eq %"class.WTF::String"* %218, %1
  br label %220

220:                                              ; preds = %213, %217, %128, %87, %80, %73, %66, %58, %49, %44, %41, %33, %26, %25, %9, %13, %3, %3, %53
  %221 = phi i1 [ true, %53 ], [ true, %3 ], [ true, %3 ], [ true, %13 ], [ true, %9 ], [ true, %25 ], [ true, %26 ], [ true, %33 ], [ true, %41 ], [ true, %44 ], [ true, %49 ], [ true, %58 ], [ true, %66 ], [ true, %73 ], [ true, %80 ], [ true, %87 ], [ true, %128 ], [ %219, %217 ], [ true, %213 ]
  ret i1 %221
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_14DOMArrayBufferEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::ScriptWrappable"*
  tail call void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"* %3, %"class.blink::Visitor"* %0) #5
  ret void
}

declare void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
