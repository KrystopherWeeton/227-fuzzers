; ModuleID = '../../third_party/blink/renderer/core/dom/tree_walker.cc'
source_filename = "../../third_party/blink/renderer/core/dom/tree_walker.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.blink::WrapperTypeInfo" = type { i16, void (%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Template"*)*, void (%"class.v8::Context"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Template"*, i64)*, i8*, %"struct.blink::WrapperTypeInfo"*, i8 }
%"class.v8::Isolate" = type { i8 }
%"class.blink::DOMWrapperWorld" = type opaque
%"class.v8::Template" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::Object" = type { i8 }
%"class.blink::AtomicEntryFlag" = type { %"struct.std::__1::atomic.246" }
%"struct.std::__1::atomic.246" = type { %"struct.std::__1::__atomic_base.247" }
%"struct.std::__1::__atomic_base.247" = type { %"struct.std::__1::__atomic_base.248" }
%"struct.std::__1::__atomic_base.248" = type { %"struct.std::__1::__cxx_atomic_impl.249" }
%"struct.std::__1::__cxx_atomic_impl.249" = type { %"struct.std::__1::__cxx_atomic_base_impl.250" }
%"struct.std::__1::__cxx_atomic_base_impl.250" = type { i32 }
%"class.blink::TreeWalker" = type { %"class.blink::ScriptWrappable", %"class.blink::NodeIteratorBase.base", %"class.blink::Member" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::NodeIteratorBase.base" = type <{ %"class.blink::GarbageCollectedMixin", %"class.blink::Member", i32, [4 x i8], %"class.blink::Member.0", i8 }>
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member.0" = type { %"class.blink::MemberBase.1" }
%"class.blink::MemberBase.1" = type { %"class.blink::V8NodeFilter"* }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::Node"* }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member", %"class.blink::Member.182", %"class.blink::Member", %"class.blink::Member", %"class.blink::Member.184" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::Member.182" = type { %"class.blink::MemberBase.183" }
%"class.blink::MemberBase.183" = type { %"class.blink::TreeScope"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.188", %"class.blink::Member.190", %"class.blink::Member.182", %"class.blink::Member.192", %"class.blink::Member.192", %"class.blink::Member.217", %"class.blink::Member.219", %"class.blink::Member.221", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.226", %"class.blink::HeapVector.228" }
%"class.blink::Member.188" = type { %"class.blink::MemberBase.189" }
%"class.blink::MemberBase.189" = type { %"class.blink::ContainerNode"* }
%"class.blink::ContainerNode" = type { %"class.blink::Node", %"class.blink::Member", %"class.blink::Member" }
%"class.blink::Member.190" = type { %"class.blink::MemberBase.191" }
%"class.blink::MemberBase.191" = type { %"class.blink::Document"* }
%"class.blink::Document" = type opaque
%"class.blink::Member.192" = type { %"class.blink::MemberBase.193" }
%"class.blink::MemberBase.193" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::AtomicString", %"class.blink::Member.205" }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr.199 }
%class.scoped_refptr.199 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.200" }
%"struct.std::__1::atomic.200" = type { %"struct.std::__1::__atomic_base.201" }
%"struct.std::__1::__atomic_base.201" = type { %"struct.std::__1::__atomic_base.202" }
%"struct.std::__1::__atomic_base.202" = type { %"struct.std::__1::__cxx_atomic_impl.203" }
%"struct.std::__1::__cxx_atomic_impl.203" = type { %"struct.std::__1::__cxx_atomic_base_impl.204" }
%"struct.std::__1::__cxx_atomic_base_impl.204" = type { i32 }
%"class.blink::Member.205" = type { %"class.blink::MemberBase.206" }
%"class.blink::MemberBase.206" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member.209", i32, %"class.blink::HeapVector" }
%"class.blink::Member.209" = type { %"class.blink::MemberBase.210" }
%"class.blink::MemberBase.210" = type { %"class.blink::Element"* }
%"class.blink::Element" = type opaque
%"class.blink::HeapVector" = type { %"class.WTF::Vector.213" }
%"class.WTF::Vector.213" = type { %"class.WTF::VectorBuffer.214" }
%"class.WTF::VectorBuffer.214" = type { %"class.WTF::VectorBufferBase.215" }
%"class.WTF::VectorBufferBase.215" = type { %"class.blink::Member.209"*, i32, i32 }
%"class.blink::Member.217" = type { %"class.blink::MemberBase.218" }
%"class.blink::MemberBase.218" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.219" = type { %"class.blink::MemberBase.220" }
%"class.blink::MemberBase.220" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.221" = type { %"class.blink::MemberBase.222" }
%"class.blink::MemberBase.222" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.223" }
%"class.blink::Member.223" = type { %"class.blink::MemberBase.224" }
%"class.blink::MemberBase.224" = type { %"class.blink::HeapHashMap.225"* }
%"class.blink::HeapHashMap.225" = type opaque
%"class.blink::Member.226" = type { %"class.blink::MemberBase.227" }
%"class.blink::MemberBase.227" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::HeapVector.228" = type { %"class.WTF::Vector.231" }
%"class.WTF::Vector.231" = type { %"class.WTF::VectorBuffer.232" }
%"class.WTF::VectorBuffer.232" = type { %"class.WTF::VectorBufferBase.233" }
%"class.WTF::VectorBufferBase.233" = type { %"class.blink::Member.234"*, i32, i32 }
%"class.blink::Member.234" = type opaque
%"class.blink::Member.184" = type { %"class.blink::MemberBase.185" }
%"class.blink::MemberBase.185" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.blink::V8NodeFilter" = type { %"class.blink::CallbackInterfaceBase" }
%"class.blink::CallbackInterfaceBase" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference", i8, %"class.blink::Member.4", %"class.blink::Member.4" }
%"class.blink::Member.4" = type { %"class.blink::MemberBase.5" }
%"class.blink::MemberBase.5" = type { %"class.blink::ScriptState"* }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr, %"class.blink::Member.8", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%class.scoped_refptr = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::Member.8" = type { %"class.blink::MemberBase.9" }
%"class.blink::MemberBase.9" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent" }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.132", %"class.std::__1::unique_ptr.132", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.142", %"class.std::__1::unique_ptr.148", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.160", %"class.std::__1::unique_ptr.166", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.173", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.14", %"class.std::__1::unique_ptr.20", %"class.std::__1::unique_ptr.26", %"class.std::__1::unique_ptr.32", %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.45", %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.59", %"class.std::__1::unique_ptr.66", %"class.std::__1::unique_ptr.73", %"class.std::__1::unique_ptr.73", %"class.std::__1::unique_ptr.80", %"class.std::__1::unique_ptr.87", %"class.std::__1::unique_ptr.94", %"class.std::__1::unique_ptr.117", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.14" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.20" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.26" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.38" = type { %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.41" }
%"struct.std::__1::__atomic_base.41" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"class.blink::Worklist.48"* }
%"class.blink::Worklist.48" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.52" = type { %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"class.blink::Worklist.55"* }
%"class.blink::Worklist.55" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.59" = type { %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"class.blink::Worklist.62"* }
%"class.blink::Worklist.62" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.66" = type { %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %"class.blink::Worklist.69"* }
%"class.blink::Worklist.69" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.blink::Worklist.76"* }
%"class.blink::Worklist.76" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"class.blink::Worklist.83"* }
%"class.blink::Worklist.83" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.87" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %"class.blink::Worklist.90"* }
%"class.blink::Worklist.90" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.94" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.97", %"class.std::__1::__compressed_pair.104", %"class.std::__1::__compressed_pair.109", %"class.std::__1::__compressed_pair.111", [4 x i8] }>
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99", %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { i64 }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.112" = type { float }
%"class.std::__1::unique_ptr.117" = type { %"class.std::__1::__compressed_pair.118" }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.120", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.132" = type { %"class.std::__1::__compressed_pair.133" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.134" }
%"struct.std::__1::__compressed_pair_elem.134" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.140" }
%"class.WTF::VectorBuffer.140" = type { %"class.WTF::VectorBufferBase.141" }
%"class.WTF::VectorBufferBase.141" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.142" = type { %"class.std::__1::__compressed_pair.143" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.148" = type { %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.154" }
%"class.std::__1::unique_ptr.154" = type { %"class.std::__1::__compressed_pair.155" }
%"class.std::__1::__compressed_pair.155" = type { %"struct.std::__1::__compressed_pair_elem.156" }
%"struct.std::__1::__compressed_pair_elem.156" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.48"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.55"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.62"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.69"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.76"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.177" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.177" = type { %"struct.std::__1::__compressed_pair_elem.178" }
%"struct.std::__1::__compressed_pair_elem.178" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.160" = type { %"class.std::__1::__compressed_pair.161" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.166" = type { %"class.std::__1::__compressed_pair.167" }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.172 }
%class.scoped_refptr.172 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.173" = type { %"struct.std::__1::__atomic_base.174" }
%"struct.std::__1::__atomic_base.174" = type { %"struct.std::__1::__cxx_atomic_impl.175" }
%"struct.std::__1::__cxx_atomic_impl.175" = type { %"struct.std::__1::__cxx_atomic_base_impl.176" }
%"struct.std::__1::__cxx_atomic_base_impl.176" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::NodeIteratorBase" = type <{ %"class.blink::GarbageCollectedMixin", %"class.blink::Member", i32, [4 x i8], %"class.blink::Member.0", i8, [7 x i8] }>
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference.236" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference.236" = type { %"class.v8::TracedReference.237" }
%"class.v8::TracedReference.237" = type { %"class.v8::BasicTracedReference.238" }
%"class.v8::BasicTracedReference.238" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::Value" = type { i8 }

$_ZN5blink10TreeWalker16TraverseSiblingsINS_29PreviousNodeTraversalStrategyEEEPNS_4NodeERNS_14ExceptionStateE = comdat any

$_ZN5blink10TreeWalker16TraverseSiblingsINS_25NextNodeTraversalStrategyEEEPNS_4NodeERNS_14ExceptionStateE = comdat any

$_ZN5blink10TreeWalkerD2Ev = comdat any

$_ZN5blink10TreeWalkerD0Ev = comdat any

$_ZNK5blink15ScriptWrappable18HasPendingActivityEv = comdat any

$_ZNK5blink15ScriptWrappable17HasEventListenersEv = comdat any

$_ZNK5blink10TreeWalker18GetWrapperTypeInfoEv = comdat any

$_ZThn16_N5blink10TreeWalkerD1Ev = comdat any

$_ZThn16_N5blink10TreeWalkerD0Ev = comdat any

$_ZN5blink10TraceTraitINS_4NodeEE5TraceEPNS_7VisitorEPKv = comdat any

@_ZTVN5blink10TreeWalkerE = hidden unnamed_addr constant { [11 x i8*], [5 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (i8* (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv to i8*), i8* bitcast (void (%"class.blink::TreeWalker"*)* @_ZN5blink10TreeWalkerD2Ev to i8*), i8* bitcast (void (%"class.blink::TreeWalker"*)* @_ZN5blink10TreeWalkerD0Ev to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18HasPendingActivityEv to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable17HasEventListenersEv to i8*), i8* bitcast (void (%"class.blink::TreeWalker"*, %"class.blink::Visitor"*)* @_ZNK5blink10TreeWalker5TraceEPNS_7VisitorE to i8*), i8* bitcast (%"struct.blink::WrapperTypeInfo"* (%"class.blink::TreeWalker"*)* @_ZNK5blink10TreeWalker18GetWrapperTypeInfoEv to i8*), i8* bitcast (%"class.v8::Value"* (%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*)* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE to i8*), i8* bitcast (%"class.v8::Object"* (%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*)* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE to i8*)], [5 x i8*] [i8* inttoptr (i64 -16 to i8*), i8* null, i8* bitcast (void (%"class.blink::TreeWalker"*, %"class.blink::Visitor"*)* @_ZThn16_NK5blink10TreeWalker5TraceEPNS_7VisitorE to i8*), i8* bitcast (void (%"class.blink::TreeWalker"*)* @_ZThn16_N5blink10TreeWalkerD1Ev to i8*), i8* bitcast (void (%"class.blink::TreeWalker"*)* @_ZThn16_N5blink10TreeWalkerD0Ev to i8*)] }, align 8
@_ZTVN5blink15ScriptWrappableE = external unnamed_addr constant { [11 x i8*] }, align 8
@_ZN5blink10TreeWalker18wrapper_type_info_E = external local_unnamed_addr constant %"struct.blink::WrapperTypeInfo"*, align 8
@_ZN5blink11ThreadState25incremental_marking_flag_E = external local_unnamed_addr global %"class.blink::AtomicEntryFlag", align 4

@_ZN5blink10TreeWalkerC1EPNS_4NodeEjPNS_12V8NodeFilterE = hidden unnamed_addr alias void (%"class.blink::TreeWalker"*, %"class.blink::Node"*, i32, %"class.blink::V8NodeFilter"*), void (%"class.blink::TreeWalker"*, %"class.blink::Node"*, i32, %"class.blink::V8NodeFilter"*)* @_ZN5blink10TreeWalkerC2EPNS_4NodeEjPNS_12V8NodeFilterE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10TreeWalkerC2EPNS_4NodeEjPNS_12V8NodeFilterE(%"class.blink::TreeWalker"*, %"class.blink::Node"*, i32, %"class.blink::V8NodeFilter"*) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink15ScriptWrappableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64* null, i64** %6, align 8
  %7 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 1
  %8 = bitcast %"class.blink::NodeIteratorBase.base"* %7 to %"class.blink::NodeIteratorBase"*
  tail call void @_ZN5blink16NodeIteratorBaseC2EPNS_4NodeEjPNS_12V8NodeFilterE(%"class.blink::NodeIteratorBase"* %8, %"class.blink::Node"* %1, i32 %2, %"class.blink::V8NodeFilter"* %3) #3
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*], [5 x i8*] }, { [11 x i8*], [5 x i8*] }* @_ZTVN5blink10TreeWalkerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %9 = getelementptr inbounds %"class.blink::NodeIteratorBase.base", %"class.blink::NodeIteratorBase.base"* %7, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*], [5 x i8*] }, { [11 x i8*], [5 x i8*] }* @_ZTVN5blink10TreeWalkerE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 2
  %11 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 1, i32 1, i32 0, i32 0
  %12 = bitcast %"class.blink::Node"** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.blink::Member"* %10 to i64*
  store i64 %13, i64* %14, align 8
  ret void
}

declare void @_ZN5blink16NodeIteratorBaseC2EPNS_4NodeEjPNS_12V8NodeFilterE(%"class.blink::NodeIteratorBase"*, %"class.blink::Node"*, i32, %"class.blink::V8NodeFilter"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10TreeWalker14setCurrentNodeEPNS_4NodeE(%"class.blink::TreeWalker"* nocapture, %"class.blink::Node"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 2
  %4 = ptrtoint %"class.blink::Node"* %1 to i64
  %5 = bitcast %"class.blink::Member"* %3 to i64*
  store atomic i64 %4, i64* %5 monotonic, align 8
  %6 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.blink::Node"* %1 to i8*
  %10 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %9) #3
  br label %11

11:                                               ; preds = %2, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::Node"* @_ZN5blink10TreeWalker10parentNodeERNS_14ExceptionStateE(%"class.blink::TreeWalker"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %"class.blink::Node"*, %"class.blink::Node"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 1
  %6 = bitcast %"class.blink::NodeIteratorBase.base"* %5 to %"class.blink::NodeIteratorBase"*
  %7 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 1, i32 1, i32 0, i32 0
  %8 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %1, i64 0, i32 4
  br label %9

9:                                                ; preds = %21, %2
  %10 = phi %"class.blink::Node"* [ %4, %2 ], [ %15, %21 ]
  %11 = load %"class.blink::Node"*, %"class.blink::Node"** %7, align 8
  %12 = icmp eq %"class.blink::Node"* %10, %11
  br i1 %12, label %34, label %13

13:                                               ; preds = %9
  %14 = tail call %"class.blink::ContainerNode"* @_ZNK5blink4Node10parentNodeEv(%"class.blink::Node"* %10) #3
  %15 = getelementptr inbounds %"class.blink::ContainerNode", %"class.blink::ContainerNode"* %14, i64 0, i32 0
  %16 = icmp eq %"class.blink::ContainerNode"* %14, null
  br i1 %16, label %34, label %17

17:                                               ; preds = %13
  %18 = tail call i32 @_ZN5blink16NodeIteratorBase10AcceptNodeEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::NodeIteratorBase"* %6, %"class.blink::Node"* %15, %"class.blink::ExceptionState"* dereferenceable(72) %1) #3
  %19 = load i32, i32* %8, align 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %34

21:                                               ; preds = %17
  %22 = icmp eq i32 %18, 1
  br i1 %22, label %23, label %9

23:                                               ; preds = %21
  %24 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 2
  %25 = ptrtoint %"class.blink::ContainerNode"* %14 to i64
  %26 = bitcast %"class.blink::Member"* %24 to i64*
  store atomic i64 %25, i64* %26 monotonic, align 8
  %27 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %34, label %29

29:                                               ; preds = %23
  %30 = bitcast %"class.blink::ContainerNode"* %14 to i8*
  %31 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* nonnull %30) #3
  %32 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %24, i64 0, i32 0, i32 0
  %33 = load %"class.blink::Node"*, %"class.blink::Node"** %32, align 8
  br label %34

34:                                               ; preds = %17, %9, %13, %29, %23
  %35 = phi %"class.blink::Node"* [ %33, %29 ], [ %15, %23 ], [ null, %13 ], [ null, %9 ], [ null, %17 ]
  ret %"class.blink::Node"* %35
}

declare %"class.blink::ContainerNode"* @_ZNK5blink4Node10parentNodeEv(%"class.blink::Node"*) local_unnamed_addr #1

declare i32 @_ZN5blink16NodeIteratorBase10AcceptNodeEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::NodeIteratorBase"*, %"class.blink::Node"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::Node"* @_ZN5blink10TreeWalker10firstChildERNS_14ExceptionStateE(%"class.blink::TreeWalker"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.blink::Node"*, %"class.blink::Node"** %4, align 8
  %6 = icmp eq %"class.blink::Node"* %5, null
  br i1 %6, label %68, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %5, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %68, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %5, i64 1
  %14 = bitcast %"class.blink::Node"* %13 to %"class.blink::Node"**
  %15 = load %"class.blink::Node"*, %"class.blink::Node"** %14, align 8
  %16 = icmp eq %"class.blink::Node"* %15, null
  br i1 %16, label %68, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 1
  %19 = bitcast %"class.blink::NodeIteratorBase.base"* %18 to %"class.blink::NodeIteratorBase"*
  %20 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %1, i64 0, i32 4
  %21 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 1, i32 1, i32 0, i32 0
  %22 = tail call i32 @_ZN5blink16NodeIteratorBase10AcceptNodeEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::NodeIteratorBase"* %19, %"class.blink::Node"* nonnull %15, %"class.blink::ExceptionState"* dereferenceable(72) %1) #3
  %23 = load i32, i32* %20, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %68

25:                                               ; preds = %17, %63
  %26 = phi i32 [ %65, %63 ], [ %22, %17 ]
  %27 = phi %"class.blink::Node"* [ %64, %63 ], [ %15, %17 ]
  switch i32 %26, label %47 [
    i32 1, label %28
    i32 3, label %37
  ]

28:                                               ; preds = %25
  %29 = ptrtoint %"class.blink::Node"* %27 to i64
  %30 = bitcast %"class.blink::Member"* %3 to i64*
  store atomic i64 %29, i64* %30 monotonic, align 8
  %31 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %68, label %33

33:                                               ; preds = %28
  %34 = bitcast %"class.blink::Node"* %27 to i8*
  %35 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* nonnull %34) #3
  %36 = load %"class.blink::Node"*, %"class.blink::Node"** %4, align 8
  br label %68

37:                                               ; preds = %25
  %38 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %27, i64 0, i32 1
  %39 = load i32, i32* %38, align 8
  %40 = and i32 %39, 2
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %47, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %27, i64 1
  %44 = bitcast %"class.blink::Node"* %43 to %"class.blink::Node"**
  %45 = load %"class.blink::Node"*, %"class.blink::Node"** %44, align 8
  %46 = icmp eq %"class.blink::Node"* %45, null
  br i1 %46, label %47, label %63

47:                                               ; preds = %42, %37, %25
  br label %48

48:                                               ; preds = %47, %60
  %49 = phi %"class.blink::Node"* [ %57, %60 ], [ %27, %47 ]
  %50 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %49, i64 0, i32 5, i32 0, i32 0
  %51 = load %"class.blink::Node"*, %"class.blink::Node"** %50, align 8
  %52 = icmp eq %"class.blink::Node"* %51, null
  br i1 %52, label %53, label %63

53:                                               ; preds = %48
  %54 = tail call %"class.blink::ContainerNode"* @_ZNK5blink4Node10parentNodeEv(%"class.blink::Node"* nonnull %49) #3
  %55 = icmp eq %"class.blink::ContainerNode"* %54, null
  br i1 %55, label %68, label %56

56:                                               ; preds = %53
  %57 = getelementptr inbounds %"class.blink::ContainerNode", %"class.blink::ContainerNode"* %54, i64 0, i32 0
  %58 = load %"class.blink::Node"*, %"class.blink::Node"** %21, align 8
  %59 = icmp eq %"class.blink::Node"* %57, %58
  br i1 %59, label %68, label %60

60:                                               ; preds = %56
  %61 = load %"class.blink::Node"*, %"class.blink::Node"** %4, align 8
  %62 = icmp eq %"class.blink::Node"* %57, %61
  br i1 %62, label %68, label %48

63:                                               ; preds = %48, %42
  %64 = phi %"class.blink::Node"* [ %45, %42 ], [ %51, %48 ]
  %65 = tail call i32 @_ZN5blink16NodeIteratorBase10AcceptNodeEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::NodeIteratorBase"* %19, %"class.blink::Node"* nonnull %64, %"class.blink::ExceptionState"* dereferenceable(72) %1) #3
  %66 = load i32, i32* %20, align 8
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %25, label %68

68:                                               ; preds = %63, %60, %56, %53, %17, %7, %2, %33, %28, %12
  %69 = phi %"class.blink::Node"* [ null, %12 ], [ %27, %28 ], [ %36, %33 ], [ null, %2 ], [ null, %7 ], [ null, %17 ], [ null, %53 ], [ null, %56 ], [ null, %60 ], [ null, %63 ]
  ret %"class.blink::Node"* %69
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::Node"* @_ZN5blink10TreeWalker9lastChildERNS_14ExceptionStateE(%"class.blink::TreeWalker"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.blink::Node"*, %"class.blink::Node"** %4, align 8
  %6 = icmp eq %"class.blink::Node"* %5, null
  br i1 %6, label %68, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %5, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %68, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %5, i64 1, i32 0, i32 0, i32 1
  %14 = bitcast %"class.blink::TraceWrapperV8Reference"* %13 to %"class.blink::Node"**
  %15 = load %"class.blink::Node"*, %"class.blink::Node"** %14, align 8
  %16 = icmp eq %"class.blink::Node"* %15, null
  br i1 %16, label %68, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 1
  %19 = bitcast %"class.blink::NodeIteratorBase.base"* %18 to %"class.blink::NodeIteratorBase"*
  %20 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %1, i64 0, i32 4
  %21 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 1, i32 1, i32 0, i32 0
  %22 = tail call i32 @_ZN5blink16NodeIteratorBase10AcceptNodeEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::NodeIteratorBase"* %19, %"class.blink::Node"* nonnull %15, %"class.blink::ExceptionState"* dereferenceable(72) %1) #3
  %23 = load i32, i32* %20, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %68

25:                                               ; preds = %17, %63
  %26 = phi i32 [ %65, %63 ], [ %22, %17 ]
  %27 = phi %"class.blink::Node"* [ %64, %63 ], [ %15, %17 ]
  switch i32 %26, label %47 [
    i32 1, label %28
    i32 3, label %37
  ]

28:                                               ; preds = %25
  %29 = ptrtoint %"class.blink::Node"* %27 to i64
  %30 = bitcast %"class.blink::Member"* %3 to i64*
  store atomic i64 %29, i64* %30 monotonic, align 8
  %31 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %68, label %33

33:                                               ; preds = %28
  %34 = bitcast %"class.blink::Node"* %27 to i8*
  %35 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* nonnull %34) #3
  %36 = load %"class.blink::Node"*, %"class.blink::Node"** %4, align 8
  br label %68

37:                                               ; preds = %25
  %38 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %27, i64 0, i32 1
  %39 = load i32, i32* %38, align 8
  %40 = and i32 %39, 2
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %47, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %27, i64 1, i32 0, i32 0, i32 1
  %44 = bitcast %"class.blink::TraceWrapperV8Reference"* %43 to %"class.blink::Node"**
  %45 = load %"class.blink::Node"*, %"class.blink::Node"** %44, align 8
  %46 = icmp eq %"class.blink::Node"* %45, null
  br i1 %46, label %47, label %63

47:                                               ; preds = %37, %42, %25
  br label %48

48:                                               ; preds = %47, %60
  %49 = phi %"class.blink::Node"* [ %57, %60 ], [ %27, %47 ]
  %50 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %49, i64 0, i32 4, i32 0, i32 0
  %51 = load %"class.blink::Node"*, %"class.blink::Node"** %50, align 8
  %52 = icmp eq %"class.blink::Node"* %51, null
  br i1 %52, label %53, label %63

53:                                               ; preds = %48
  %54 = tail call %"class.blink::ContainerNode"* @_ZNK5blink4Node10parentNodeEv(%"class.blink::Node"* nonnull %49) #3
  %55 = icmp eq %"class.blink::ContainerNode"* %54, null
  br i1 %55, label %68, label %56

56:                                               ; preds = %53
  %57 = getelementptr inbounds %"class.blink::ContainerNode", %"class.blink::ContainerNode"* %54, i64 0, i32 0
  %58 = load %"class.blink::Node"*, %"class.blink::Node"** %21, align 8
  %59 = icmp eq %"class.blink::Node"* %57, %58
  br i1 %59, label %68, label %60

60:                                               ; preds = %56
  %61 = load %"class.blink::Node"*, %"class.blink::Node"** %4, align 8
  %62 = icmp eq %"class.blink::Node"* %57, %61
  br i1 %62, label %68, label %48

63:                                               ; preds = %48, %42
  %64 = phi %"class.blink::Node"* [ %45, %42 ], [ %51, %48 ]
  %65 = tail call i32 @_ZN5blink16NodeIteratorBase10AcceptNodeEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::NodeIteratorBase"* %19, %"class.blink::Node"* nonnull %64, %"class.blink::ExceptionState"* dereferenceable(72) %1) #3
  %66 = load i32, i32* %20, align 8
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %25, label %68

68:                                               ; preds = %63, %60, %56, %53, %17, %7, %2, %33, %28, %12
  %69 = phi %"class.blink::Node"* [ null, %12 ], [ %27, %28 ], [ %36, %33 ], [ null, %2 ], [ null, %7 ], [ null, %17 ], [ null, %53 ], [ null, %56 ], [ null, %60 ], [ null, %63 ]
  ret %"class.blink::Node"* %69
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::Node"* @_ZN5blink10TreeWalker15previousSiblingERNS_14ExceptionStateE(%"class.blink::TreeWalker"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %3 = tail call %"class.blink::Node"* @_ZN5blink10TreeWalker16TraverseSiblingsINS_29PreviousNodeTraversalStrategyEEEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::TreeWalker"* %0, %"class.blink::ExceptionState"* dereferenceable(72) %1)
  ret %"class.blink::Node"* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::Node"* @_ZN5blink10TreeWalker16TraverseSiblingsINS_29PreviousNodeTraversalStrategyEEEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::TreeWalker"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %"class.blink::Node"*, %"class.blink::Node"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 1
  %6 = bitcast %"class.blink::NodeIteratorBase.base"* %5 to %"class.blink::NodeIteratorBase"*
  %7 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 1, i32 1, i32 0, i32 0
  %8 = load %"class.blink::Node"*, %"class.blink::Node"** %7, align 8
  %9 = icmp eq %"class.blink::Node"* %4, %8
  br i1 %9, label %67, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %1, i64 0, i32 4
  br label %12

12:                                               ; preds = %10, %61
  %13 = phi %"class.blink::Node"* [ %56, %61 ], [ %4, %10 ]
  %14 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %13, i64 0, i32 4, i32 0, i32 0
  %15 = load %"class.blink::Node"*, %"class.blink::Node"** %14, align 8
  %16 = icmp eq %"class.blink::Node"* %15, null
  br i1 %16, label %53, label %17

17:                                               ; preds = %12, %50
  %18 = phi %"class.blink::Node"* [ %51, %50 ], [ %15, %12 ]
  %19 = tail call i32 @_ZN5blink16NodeIteratorBase10AcceptNodeEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::NodeIteratorBase"* %6, %"class.blink::Node"* nonnull %18, %"class.blink::ExceptionState"* dereferenceable(72) %1) #3
  %20 = load i32, i32* %11, align 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %67

22:                                               ; preds = %17
  %23 = icmp eq i32 %19, 1
  br i1 %23, label %24, label %35

24:                                               ; preds = %22
  %25 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 2
  %26 = ptrtoint %"class.blink::Node"* %18 to i64
  %27 = bitcast %"class.blink::Member"* %25 to i64*
  store atomic i64 %26, i64* %27 monotonic, align 8
  %28 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %67, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.blink::Node"* %18 to i8*
  %32 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* nonnull %31) #3
  %33 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %25, i64 0, i32 0, i32 0
  %34 = load %"class.blink::Node"*, %"class.blink::Node"** %33, align 8
  br label %67

35:                                               ; preds = %22
  %36 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %18, i64 0, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = and i32 %37, 2
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %47, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %18, i64 1, i32 0, i32 0, i32 1
  %42 = bitcast %"class.blink::TraceWrapperV8Reference"* %41 to %"class.blink::Node"**
  %43 = load %"class.blink::Node"*, %"class.blink::Node"** %42, align 8
  %44 = icmp ne i32 %19, 2
  %45 = icmp ne %"class.blink::Node"* %43, null
  %46 = and i1 %44, %45
  br i1 %46, label %50, label %47

47:                                               ; preds = %35, %40
  %48 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %18, i64 0, i32 4, i32 0, i32 0
  %49 = load %"class.blink::Node"*, %"class.blink::Node"** %48, align 8
  br label %50

50:                                               ; preds = %47, %40
  %51 = phi %"class.blink::Node"* [ %43, %40 ], [ %49, %47 ]
  %52 = icmp eq %"class.blink::Node"* %51, null
  br i1 %52, label %53, label %17

53:                                               ; preds = %50, %12
  %54 = phi %"class.blink::Node"* [ %13, %12 ], [ %18, %50 ]
  %55 = tail call %"class.blink::ContainerNode"* @_ZNK5blink4Node10parentNodeEv(%"class.blink::Node"* %54) #3
  %56 = getelementptr inbounds %"class.blink::ContainerNode", %"class.blink::ContainerNode"* %55, i64 0, i32 0
  %57 = icmp eq %"class.blink::ContainerNode"* %55, null
  br i1 %57, label %67, label %58

58:                                               ; preds = %53
  %59 = load %"class.blink::Node"*, %"class.blink::Node"** %7, align 8
  %60 = icmp eq %"class.blink::Node"* %56, %59
  br i1 %60, label %67, label %61

61:                                               ; preds = %58
  %62 = tail call i32 @_ZN5blink16NodeIteratorBase10AcceptNodeEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::NodeIteratorBase"* %6, %"class.blink::Node"* %56, %"class.blink::ExceptionState"* dereferenceable(72) %1) #3
  %63 = load i32, i32* %11, align 8
  %64 = icmp ne i32 %63, 0
  %65 = icmp eq i32 %62, 1
  %66 = or i1 %65, %64
  br i1 %66, label %67, label %12

67:                                               ; preds = %61, %58, %53, %17, %30, %24, %2
  %68 = phi %"class.blink::Node"* [ null, %2 ], [ %34, %30 ], [ %18, %24 ], [ null, %17 ], [ null, %53 ], [ null, %58 ], [ null, %61 ]
  ret %"class.blink::Node"* %68
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::Node"* @_ZN5blink10TreeWalker11nextSiblingERNS_14ExceptionStateE(%"class.blink::TreeWalker"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %3 = tail call %"class.blink::Node"* @_ZN5blink10TreeWalker16TraverseSiblingsINS_25NextNodeTraversalStrategyEEEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::TreeWalker"* %0, %"class.blink::ExceptionState"* dereferenceable(72) %1)
  ret %"class.blink::Node"* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::Node"* @_ZN5blink10TreeWalker16TraverseSiblingsINS_25NextNodeTraversalStrategyEEEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::TreeWalker"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %"class.blink::Node"*, %"class.blink::Node"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 1
  %6 = bitcast %"class.blink::NodeIteratorBase.base"* %5 to %"class.blink::NodeIteratorBase"*
  %7 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 1, i32 1, i32 0, i32 0
  %8 = load %"class.blink::Node"*, %"class.blink::Node"** %7, align 8
  %9 = icmp eq %"class.blink::Node"* %4, %8
  br i1 %9, label %67, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %1, i64 0, i32 4
  br label %12

12:                                               ; preds = %10, %61
  %13 = phi %"class.blink::Node"* [ %56, %61 ], [ %4, %10 ]
  %14 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %13, i64 0, i32 5, i32 0, i32 0
  %15 = load %"class.blink::Node"*, %"class.blink::Node"** %14, align 8
  %16 = icmp eq %"class.blink::Node"* %15, null
  br i1 %16, label %53, label %17

17:                                               ; preds = %12, %50
  %18 = phi %"class.blink::Node"* [ %51, %50 ], [ %15, %12 ]
  %19 = tail call i32 @_ZN5blink16NodeIteratorBase10AcceptNodeEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::NodeIteratorBase"* %6, %"class.blink::Node"* nonnull %18, %"class.blink::ExceptionState"* dereferenceable(72) %1) #3
  %20 = load i32, i32* %11, align 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %67

22:                                               ; preds = %17
  %23 = icmp eq i32 %19, 1
  br i1 %23, label %24, label %35

24:                                               ; preds = %22
  %25 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 2
  %26 = ptrtoint %"class.blink::Node"* %18 to i64
  %27 = bitcast %"class.blink::Member"* %25 to i64*
  store atomic i64 %26, i64* %27 monotonic, align 8
  %28 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %67, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.blink::Node"* %18 to i8*
  %32 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* nonnull %31) #3
  %33 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %25, i64 0, i32 0, i32 0
  %34 = load %"class.blink::Node"*, %"class.blink::Node"** %33, align 8
  br label %67

35:                                               ; preds = %22
  %36 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %18, i64 0, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = and i32 %37, 2
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %47, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %18, i64 1
  %42 = bitcast %"class.blink::Node"* %41 to %"class.blink::Node"**
  %43 = load %"class.blink::Node"*, %"class.blink::Node"** %42, align 8
  %44 = icmp ne i32 %19, 2
  %45 = icmp ne %"class.blink::Node"* %43, null
  %46 = and i1 %44, %45
  br i1 %46, label %50, label %47

47:                                               ; preds = %35, %40
  %48 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %18, i64 0, i32 5, i32 0, i32 0
  %49 = load %"class.blink::Node"*, %"class.blink::Node"** %48, align 8
  br label %50

50:                                               ; preds = %47, %40
  %51 = phi %"class.blink::Node"* [ %43, %40 ], [ %49, %47 ]
  %52 = icmp eq %"class.blink::Node"* %51, null
  br i1 %52, label %53, label %17

53:                                               ; preds = %50, %12
  %54 = phi %"class.blink::Node"* [ %13, %12 ], [ %18, %50 ]
  %55 = tail call %"class.blink::ContainerNode"* @_ZNK5blink4Node10parentNodeEv(%"class.blink::Node"* %54) #3
  %56 = getelementptr inbounds %"class.blink::ContainerNode", %"class.blink::ContainerNode"* %55, i64 0, i32 0
  %57 = icmp eq %"class.blink::ContainerNode"* %55, null
  br i1 %57, label %67, label %58

58:                                               ; preds = %53
  %59 = load %"class.blink::Node"*, %"class.blink::Node"** %7, align 8
  %60 = icmp eq %"class.blink::Node"* %56, %59
  br i1 %60, label %67, label %61

61:                                               ; preds = %58
  %62 = tail call i32 @_ZN5blink16NodeIteratorBase10AcceptNodeEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::NodeIteratorBase"* %6, %"class.blink::Node"* %56, %"class.blink::ExceptionState"* dereferenceable(72) %1) #3
  %63 = load i32, i32* %11, align 8
  %64 = icmp ne i32 %63, 0
  %65 = icmp eq i32 %62, 1
  %66 = or i1 %65, %64
  br i1 %66, label %67, label %12

67:                                               ; preds = %61, %58, %53, %17, %30, %24, %2
  %68 = phi %"class.blink::Node"* [ null, %2 ], [ %34, %30 ], [ %18, %24 ], [ null, %17 ], [ null, %53 ], [ null, %58 ], [ null, %61 ]
  ret %"class.blink::Node"* %68
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::Node"* @_ZN5blink10TreeWalker12previousNodeERNS_14ExceptionStateE(%"class.blink::TreeWalker"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.blink::Node"*, %"class.blink::Node"** %4, align 8
  %6 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 1
  %7 = bitcast %"class.blink::NodeIteratorBase.base"* %6 to %"class.blink::NodeIteratorBase"*
  %8 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 1, i32 1, i32 0, i32 0
  %9 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %1, i64 0, i32 4
  br label %10

10:                                               ; preds = %84, %2
  %11 = phi %"class.blink::Node"* [ %5, %2 ], [ %80, %84 ]
  %12 = load %"class.blink::Node"*, %"class.blink::Node"** %8, align 8
  %13 = icmp eq %"class.blink::Node"* %11, %12
  br i1 %13, label %95, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %11, i64 0, i32 4, i32 0, i32 0
  %16 = load %"class.blink::Node"*, %"class.blink::Node"** %15, align 8
  %17 = icmp eq %"class.blink::Node"* %16, null
  br i1 %17, label %72, label %18

18:                                               ; preds = %14, %65
  %19 = phi %"class.blink::Node"* [ %68, %65 ], [ %16, %14 ]
  %20 = tail call i32 @_ZN5blink16NodeIteratorBase10AcceptNodeEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::NodeIteratorBase"* %7, %"class.blink::Node"* nonnull %19, %"class.blink::ExceptionState"* dereferenceable(72) %1) #3
  %21 = load i32, i32* %9, align 8
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %95

23:                                               ; preds = %18
  %24 = icmp eq i32 %20, 2
  br i1 %24, label %65, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %19, i64 0, i32 1
  %27 = load i32, i32* %26, align 8
  %28 = and i32 %27, 2
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %52, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %19, i64 1, i32 0, i32 0, i32 1
  %32 = bitcast %"class.blink::TraceWrapperV8Reference"* %31 to %"class.blink::Node"**
  %33 = load %"class.blink::Node"*, %"class.blink::Node"** %32, align 8
  %34 = icmp eq %"class.blink::Node"* %33, null
  br i1 %34, label %52, label %45

35:                                               ; preds = %50
  %36 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %46, i64 0, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = and i32 %37, 2
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %52, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %46, i64 1, i32 0, i32 0, i32 1
  %42 = bitcast %"class.blink::TraceWrapperV8Reference"* %41 to %"class.blink::Node"**
  %43 = load %"class.blink::Node"*, %"class.blink::Node"** %42, align 8
  %44 = icmp eq %"class.blink::Node"* %43, null
  br i1 %44, label %52, label %45

45:                                               ; preds = %30, %40
  %46 = phi %"class.blink::Node"* [ %43, %40 ], [ %33, %30 ]
  %47 = tail call i32 @_ZN5blink16NodeIteratorBase10AcceptNodeEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::NodeIteratorBase"* %7, %"class.blink::Node"* nonnull %46, %"class.blink::ExceptionState"* dereferenceable(72) %1) #3
  %48 = load i32, i32* %9, align 8
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %95

50:                                               ; preds = %45
  %51 = icmp eq i32 %47, 2
  br i1 %51, label %65, label %35

52:                                               ; preds = %35, %40, %30, %25
  %53 = phi %"class.blink::Node"* [ %19, %25 ], [ %19, %30 ], [ %46, %40 ], [ %46, %35 ]
  %54 = phi i32 [ %20, %25 ], [ %20, %30 ], [ %47, %40 ], [ %47, %35 ]
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %56, label %65

56:                                               ; preds = %52
  %57 = ptrtoint %"class.blink::Node"* %53 to i64
  %58 = bitcast %"class.blink::Member"* %3 to i64*
  store atomic i64 %57, i64* %58 monotonic, align 8
  %59 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %95, label %61

61:                                               ; preds = %56
  %62 = bitcast %"class.blink::Node"* %53 to i8*
  %63 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %62) #3
  %64 = load %"class.blink::Node"*, %"class.blink::Node"** %4, align 8
  br label %95

65:                                               ; preds = %50, %23, %52
  %66 = phi %"class.blink::Node"* [ %19, %23 ], [ %53, %52 ], [ %46, %50 ]
  %67 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %66, i64 0, i32 4, i32 0, i32 0
  %68 = load %"class.blink::Node"*, %"class.blink::Node"** %67, align 8
  %69 = icmp eq %"class.blink::Node"* %68, null
  br i1 %69, label %70, label %18

70:                                               ; preds = %65
  %71 = load %"class.blink::Node"*, %"class.blink::Node"** %8, align 8
  br label %72

72:                                               ; preds = %70, %14
  %73 = phi %"class.blink::Node"* [ %12, %14 ], [ %71, %70 ]
  %74 = phi %"class.blink::Node"* [ %11, %14 ], [ %66, %70 ]
  %75 = icmp eq %"class.blink::Node"* %74, %73
  br i1 %75, label %95, label %76

76:                                               ; preds = %72
  %77 = tail call %"class.blink::ContainerNode"* @_ZNK5blink4Node10parentNodeEv(%"class.blink::Node"* %74) #3
  %78 = icmp eq %"class.blink::ContainerNode"* %77, null
  br i1 %78, label %95, label %79

79:                                               ; preds = %76
  %80 = getelementptr inbounds %"class.blink::ContainerNode", %"class.blink::ContainerNode"* %77, i64 0, i32 0
  %81 = tail call i32 @_ZN5blink16NodeIteratorBase10AcceptNodeEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::NodeIteratorBase"* %7, %"class.blink::Node"* %80, %"class.blink::ExceptionState"* dereferenceable(72) %1) #3
  %82 = load i32, i32* %9, align 8
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %95

84:                                               ; preds = %79
  %85 = icmp eq i32 %81, 1
  br i1 %85, label %86, label %10

86:                                               ; preds = %84
  %87 = ptrtoint %"class.blink::ContainerNode"* %77 to i64
  %88 = bitcast %"class.blink::Member"* %3 to i64*
  store atomic i64 %87, i64* %88 monotonic, align 8
  %89 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %95, label %91

91:                                               ; preds = %86
  %92 = bitcast %"class.blink::ContainerNode"* %77 to i8*
  %93 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* nonnull %92) #3
  %94 = load %"class.blink::Node"*, %"class.blink::Node"** %4, align 8
  br label %95

95:                                               ; preds = %79, %76, %10, %72, %18, %45, %61, %56, %91, %86
  %96 = phi %"class.blink::Node"* [ %94, %91 ], [ %80, %86 ], [ %53, %56 ], [ %64, %61 ], [ null, %45 ], [ null, %18 ], [ null, %72 ], [ null, %10 ], [ null, %76 ], [ null, %79 ]
  ret %"class.blink::Node"* %96
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::Node"* @_ZN5blink10TreeWalker8nextNodeERNS_14ExceptionStateE(%"class.blink::TreeWalker"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %"class.blink::Node"*, %"class.blink::Node"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 1
  %6 = bitcast %"class.blink::NodeIteratorBase.base"* %5 to %"class.blink::NodeIteratorBase"*
  %7 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %1, i64 0, i32 4
  %8 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 2
  %9 = bitcast %"class.blink::Member"* %8 to i64*
  %10 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %8, i64 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 1, i32 1, i32 0, i32 0
  br label %12

12:                                               ; preds = %30, %2
  %13 = phi %"class.blink::Node"* [ %4, %2 ], [ %31, %30 ]
  %14 = icmp eq %"class.blink::Node"* %13, null
  br i1 %14, label %32, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %13, i64 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = and i32 %17, 2
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %32, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %13, i64 1
  %22 = bitcast %"class.blink::Node"* %21 to %"class.blink::Node"**
  %23 = load %"class.blink::Node"*, %"class.blink::Node"** %22, align 8
  %24 = icmp eq %"class.blink::Node"* %23, null
  br i1 %24, label %32, label %25

25:                                               ; preds = %20
  %26 = tail call i32 @_ZN5blink16NodeIteratorBase10AcceptNodeEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::NodeIteratorBase"* %6, %"class.blink::Node"* nonnull %23, %"class.blink::ExceptionState"* dereferenceable(72) %1) #3
  %27 = load i32, i32* %7, align 8
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %67

29:                                               ; preds = %25
  switch i32 %26, label %30 [
    i32 1, label %34
    i32 2, label %32
  ]

30:                                               ; preds = %58, %29
  %31 = phi %"class.blink::Node"* [ %23, %29 ], [ %54, %58 ]
  br label %12

32:                                               ; preds = %20, %12, %15, %29
  %33 = phi %"class.blink::Node"* [ %13, %20 ], [ null, %12 ], [ %13, %15 ], [ %23, %29 ]
  br label %42

34:                                               ; preds = %29
  %35 = ptrtoint %"class.blink::Node"* %23 to i64
  store atomic i64 %35, i64* %9 monotonic, align 8
  %36 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %67, label %38

38:                                               ; preds = %34
  %39 = bitcast %"class.blink::Node"* %23 to i8*
  %40 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* nonnull %39) #3
  %41 = load %"class.blink::Node"*, %"class.blink::Node"** %10, align 8
  br label %67

42:                                               ; preds = %32, %58
  %43 = phi %"class.blink::Node"* [ %54, %58 ], [ %33, %32 ]
  %44 = load %"class.blink::Node"*, %"class.blink::Node"** %11, align 8
  %45 = icmp eq %"class.blink::Node"* %43, %44
  br i1 %45, label %67, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %43, i64 0, i32 5, i32 0, i32 0
  %48 = load %"class.blink::Node"*, %"class.blink::Node"** %47, align 8
  %49 = icmp eq %"class.blink::Node"* %48, null
  br i1 %49, label %50, label %53

50:                                               ; preds = %46
  %51 = tail call %"class.blink::Node"* @_ZN5blink13NodeTraversal19NextAncestorSiblingERKNS_4NodeEPS2_(%"class.blink::Node"* dereferenceable(64) %43, %"class.blink::Node"* %44) #3
  %52 = icmp eq %"class.blink::Node"* %51, null
  br i1 %52, label %67, label %53

53:                                               ; preds = %46, %50
  %54 = phi %"class.blink::Node"* [ %51, %50 ], [ %48, %46 ]
  %55 = tail call i32 @_ZN5blink16NodeIteratorBase10AcceptNodeEPNS_4NodeERNS_14ExceptionStateE(%"class.blink::NodeIteratorBase"* %6, %"class.blink::Node"* nonnull %54, %"class.blink::ExceptionState"* dereferenceable(72) %1) #3
  %56 = load i32, i32* %7, align 8
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %67

58:                                               ; preds = %53
  switch i32 %55, label %42 [
    i32 1, label %59
    i32 3, label %30
  ]

59:                                               ; preds = %58
  %60 = ptrtoint %"class.blink::Node"* %54 to i64
  store atomic i64 %60, i64* %9 monotonic, align 8
  %61 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %67, label %63

63:                                               ; preds = %59
  %64 = bitcast %"class.blink::Node"* %54 to i8*
  %65 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %64) #3
  %66 = load %"class.blink::Node"*, %"class.blink::Node"** %10, align 8
  br label %67

67:                                               ; preds = %25, %53, %50, %42, %38, %34, %63, %59
  %68 = phi %"class.blink::Node"* [ %66, %63 ], [ %54, %59 ], [ %41, %38 ], [ %23, %34 ], [ null, %42 ], [ null, %50 ], [ null, %53 ], [ null, %25 ]
  ret %"class.blink::Node"* %68
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink10TreeWalker5TraceEPNS_7VisitorE(%"class.blink::TreeWalker"*, %"class.blink::Visitor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 2
  %4 = bitcast %"class.blink::Member"* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %1, i8* nonnull %8, i8* nonnull %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_4NodeEE5TraceEPNS_7VisitorEPKv) #3
  br label %13

13:                                               ; preds = %2, %7
  %14 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 0
  tail call void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"* %14, %"class.blink::Visitor"* %1) #3
  %15 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 0, i32 1
  %16 = bitcast %"class.blink::NodeIteratorBase.base"* %15 to %"class.blink::NodeIteratorBase"*
  tail call void @_ZNK5blink16NodeIteratorBase5TraceEPNS_7VisitorE(%"class.blink::NodeIteratorBase"* %16, %"class.blink::Visitor"* %1) #3
  ret void
}

declare void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*) unnamed_addr #1

declare void @_ZNK5blink16NodeIteratorBase5TraceEPNS_7VisitorE(%"class.blink::NodeIteratorBase"*, %"class.blink::Visitor"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn16_NK5blink10TreeWalker5TraceEPNS_7VisitorE(%"class.blink::TreeWalker"*, %"class.blink::Visitor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::TreeWalker", %"class.blink::TreeWalker"* %0, i64 -1, i32 1, i32 5
  %4 = getelementptr inbounds i8, i8* %3, i64 56
  %5 = bitcast i8* %4 to i64*
  %6 = load atomic i64, i64* %5 monotonic, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = inttoptr i64 %6 to i8*
  %10 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %11 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, i64 5
  %13 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %12, align 8
  tail call void %13(%"class.blink::Visitor"* %1, i8* nonnull %9, i8* nonnull %9, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_4NodeEE5TraceEPNS_7VisitorEPKv) #3
  br label %14

14:                                               ; preds = %2, %8
  %15 = bitcast i8* %3 to %"class.blink::ScriptWrappable"*
  tail call void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"* %15, %"class.blink::Visitor"* %1) #3
  %16 = getelementptr inbounds i8, i8* %3, i64 16
  %17 = bitcast i8* %16 to %"class.blink::NodeIteratorBase"*
  tail call void @_ZNK5blink16NodeIteratorBase5TraceEPNS_7VisitorE(%"class.blink::NodeIteratorBase"* %17, %"class.blink::Visitor"* %1) #3
  ret void
}

declare i8* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv(%"class.blink::ScriptWrappable"*) unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TreeWalkerD2Ev(%"class.blink::TreeWalker"*) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TreeWalkerD0Ev(%"class.blink::TreeWalker"*) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable18HasPendingActivityEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable17HasEventListenersEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.blink::WrapperTypeInfo"* @_ZNK5blink10TreeWalker18GetWrapperTypeInfoEv(%"class.blink::TreeWalker"*) unnamed_addr #0 comdat align 2 {
  %2 = load %"struct.blink::WrapperTypeInfo"*, %"struct.blink::WrapperTypeInfo"** @_ZN5blink10TreeWalker18wrapper_type_info_E, align 8
  ret %"struct.blink::WrapperTypeInfo"* %2
}

declare %"class.v8::Value"* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE(%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*) unnamed_addr #1

declare %"class.v8::Object"* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE(%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*) unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn16_N5blink10TreeWalkerD1Ev(%"class.blink::TreeWalker"*) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn16_N5blink10TreeWalkerD0Ev(%"class.blink::TreeWalker"*) unnamed_addr #2 comdat align 2 {
  ret void
}

declare %"class.blink::Node"* @_ZN5blink13NodeTraversal19NextAncestorSiblingERKNS_4NodeEPS2_(%"class.blink::Node"* dereferenceable(64), %"class.blink::Node"*) local_unnamed_addr #1

declare zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_4NodeEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::Node"*
  %4 = bitcast i8* %1 to void (%"class.blink::Node"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::Node"*, %"class.blink::Visitor"*)**, void (%"class.blink::Node"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::Node"*, %"class.blink::Visitor"*)*, void (%"class.blink::Node"*, %"class.blink::Visitor"*)** %5, i64 5
  %7 = load void (%"class.blink::Node"*, %"class.blink::Visitor"*)*, void (%"class.blink::Node"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::Node"* %3, %"class.blink::Visitor"* %0) #3
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
