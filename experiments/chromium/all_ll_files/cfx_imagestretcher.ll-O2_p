; ModuleID = '../../third_party/pdfium/core/fxge/dib/cfx_imagestretcher.cpp'
source_filename = "../../third_party/pdfium/core/fxge/dib/cfx_imagestretcher.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_ImageStretcher = type <{ %"class.fxcrt::UnownedPtr", %"class.fxcrt::RetainPtr", %"class.std::__1::unique_ptr.10", %struct.FXDIB_ResampleOptions, i32, i32, %struct.FX_RECT, i16, [2 x i8] }>
%"class.fxcrt::UnownedPtr" = type { %class.ScanlineComposerIface* }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFX_DIBBase* }
%class.CFX_DIBBase = type { %"class.fxcrt::Retainable", i16, i32, i32, i32, %"class.fxcrt::RetainPtr.0", %"class.std::__1::vector" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::RetainPtr.0" = type { %"class.std::__1::unique_ptr.1" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %class.CFX_DIBitmap* }
%class.CFX_DIBitmap = type { %class.CFX_DIBBase, %"class.fxcrt::MaybeOwned" }
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr.22", %"class.fxcrt::UnownedPtr.25" }
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { i8* }
%"class.fxcrt::UnownedPtr.25" = type { i8* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { i32* }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %class.CStretchEngine* }
%class.CStretchEngine = type { i16, i32, i32, i32, %"class.fxcrt::RetainPtr", %"class.pdfium::span", i32, i32, %"class.fxcrt::UnownedPtr", i32, i32, %struct.FX_RECT, %"class.std::__1::vector.14", %"class.std::__1::vector.14", %"class.std::__1::vector.14", %"class.std::__1::vector.14", %struct.FX_RECT, i32, i32, %struct.FXDIB_ResampleOptions, i8, i8, i32, %"class.CStretchEngine::CWeightTable" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.13", i64 }
%"class.fxcrt::UnownedPtr.13" = type { i32* }
%"class.std::__1::vector.14" = type { %"class.std::__1::__vector_base.15" }
%"class.std::__1::__vector_base.15" = type { i8*, i8*, %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.CStretchEngine::CWeightTable" = type { i32, i32, i64, %"class.std::__1::vector.14" }
%struct.FXDIB_ResampleOptions = type { i8, i8, i8, i8 }
%struct.FX_RECT = type { i32, i32, i32, i32 }
%class.ScanlineComposerIface = type { i32 (...)** }
%class.PauseIndicatorIface = type opaque

@_ZN18CFX_ImageStretcherC1EP21ScanlineComposerIfaceRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEiiRK7FX_RECTRK21FXDIB_ResampleOptions = hidden unnamed_addr alias void (%class.CFX_ImageStretcher*, %class.ScanlineComposerIface*, %"class.fxcrt::RetainPtr"*, i32, i32, %struct.FX_RECT*, %struct.FXDIB_ResampleOptions*), void (%class.CFX_ImageStretcher*, %class.ScanlineComposerIface*, %"class.fxcrt::RetainPtr"*, i32, i32, %struct.FX_RECT*, %struct.FXDIB_ResampleOptions*)* @_ZN18CFX_ImageStretcherC2EP21ScanlineComposerIfaceRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEiiRK7FX_RECTRK21FXDIB_ResampleOptions
@_ZN18CFX_ImageStretcherD1Ev = hidden unnamed_addr alias void (%class.CFX_ImageStretcher*), void (%class.CFX_ImageStretcher*)* @_ZN18CFX_ImageStretcherD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CFX_ImageStretcherC2EP21ScanlineComposerIfaceRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEiiRK7FX_RECTRK21FXDIB_ResampleOptions(%class.CFX_ImageStretcher* nocapture, %class.ScanlineComposerIface*, %"class.fxcrt::RetainPtr"* nocapture readonly dereferenceable(8), i32, i32, %struct.FX_RECT* nocapture readonly dereferenceable(16), %struct.FXDIB_ResampleOptions* nocapture readonly dereferenceable(4)) unnamed_addr #0 align 2 {
  %8 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 0, i32 0
  store %class.ScanlineComposerIface* %1, %class.ScanlineComposerIface** %8, align 8
  %9 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 1
  %10 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %10, align 8
  %12 = ptrtoint %class.CFX_DIBBase* %11 to i64
  %13 = bitcast %"class.fxcrt::RetainPtr"* %9 to i64*
  store i64 %12, i64* %13, align 8
  %14 = icmp eq %class.CFX_DIBBase* %11, null
  br i1 %14, label %19, label %15

15:                                               ; preds = %7
  %16 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %11, i64 0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = add nsw i64 %17, 1
  store i64 %18, i64* %16, align 8
  br label %19

19:                                               ; preds = %7, %15
  %20 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 2
  %21 = bitcast %"class.std::__1::unique_ptr.10"* %20 to i64*
  store i64 0, i64* %21, align 8
  %22 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 3, i32 0
  %23 = bitcast %struct.FXDIB_ResampleOptions* %6 to i32*
  %24 = bitcast i8* %22 to i32*
  %25 = load i32, i32* %23, align 1
  store i32 %25, i32* %24, align 8
  %26 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 4
  store i32 %3, i32* %26, align 4
  %27 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 5
  store i32 %4, i32* %27, align 8
  %28 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 6
  %29 = bitcast %struct.FX_RECT* %28 to i8*
  %30 = bitcast %struct.FX_RECT* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %29, i8* align 4 %30, i64 16, i1 false)
  %31 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 7
  %32 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %10, align 8
  %33 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %32, i64 0, i32 1
  %34 = load i16, i16* %33, align 8
  switch i16 %34, label %42 [
    i16 257, label %43
    i16 1, label %35
    i16 8, label %36
  ]

35:                                               ; preds = %19
  br label %43

36:                                               ; preds = %19
  %37 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %32, i64 0, i32 6, i32 0, i32 0
  %38 = load i32*, i32** %37, align 8
  %39 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %32, i64 0, i32 6, i32 0, i32 1
  %40 = load i32*, i32** %39, align 8
  %41 = icmp eq i32* %38, %40
  br i1 %41, label %42, label %43

42:                                               ; preds = %36, %19
  br label %43

43:                                               ; preds = %19, %35, %36, %42
  %44 = phi i16 [ 8, %35 ], [ %34, %42 ], [ 264, %19 ], [ 24, %36 ]
  store i16 %44, i16* %31, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CFX_ImageStretcherD2Ev(%class.CFX_ImageStretcher* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %class.CStretchEngine*, %class.CStretchEngine** %2, align 8
  store %class.CStretchEngine* null, %class.CStretchEngine** %2, align 8
  %4 = icmp eq %class.CStretchEngine* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  tail call void @_ZN14CStretchEngineD1Ev(%class.CStretchEngine* nonnull %3) #7
  %6 = bitcast %class.CStretchEngine* %3 to i8*
  tail call void @_ZdlPv(i8* %6) #8
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %9 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %8, align 8
  store %class.CFX_DIBBase* null, %class.CFX_DIBBase** %8, align 8
  %10 = icmp eq %class.CFX_DIBBase* %9, null
  br i1 %10, label %22, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %9, i64 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add nsw i64 %13, -1
  store i64 %14, i64* %12, align 8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %22

16:                                               ; preds = %11
  %17 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %9, i64 0, i32 0
  %18 = bitcast %class.CFX_DIBBase* %9 to void (%"class.fxcrt::Retainable"*)***
  %19 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %18, align 8
  %20 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %19, i64 1
  %21 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %20, align 8
  tail call void %21(%"class.fxcrt::Retainable"* nonnull %17) #7
  br label %22

22:                                               ; preds = %7, %11, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN18CFX_ImageStretcher5StartEv(%class.CFX_ImageStretcher*) local_unnamed_addr #0 align 2 {
  %2 = alloca [256 x i32], align 16
  %3 = alloca %"class.pdfium::span", align 8
  %4 = alloca %"class.pdfium::span", align 8
  %5 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 4
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %121, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 5
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %121, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %14 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %13, align 8
  %15 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %14, i64 0, i32 1
  %16 = load i16, i16* %15, align 8
  %17 = icmp eq i16 %16, 1
  br i1 %17, label %18, label %98

18:                                               ; preds = %12
  %19 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %14, i64 0, i32 6, i32 0, i32 0
  %20 = load i32*, i32** %19, align 8
  %21 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %14, i64 0, i32 6, i32 0, i32 1
  %22 = load i32*, i32** %21, align 8
  %23 = icmp eq i32* %20, %22
  br i1 %23, label %98, label %24

24:                                               ; preds = %18
  %25 = bitcast [256 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %25) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 1024, i1 false)
  %26 = tail call i32 @_ZNK11CFX_DIBBase14GetPaletteArgbEi(%class.CFX_DIBBase* %14, i32 0) #7
  %27 = tail call { i64, i64 } @_Z10ArgbDecodej(i32 %26) #7
  %28 = extractvalue { i64, i64 } %27, 0
  %29 = trunc i64 %28 to i32
  %30 = lshr i64 %28, 32
  %31 = trunc i64 %30 to i32
  %32 = extractvalue { i64, i64 } %27, 1
  %33 = trunc i64 %32 to i32
  %34 = lshr i64 %32, 32
  %35 = trunc i64 %34 to i32
  %36 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %13, align 8
  %37 = tail call i32 @_ZNK11CFX_DIBBase14GetPaletteArgbEi(%class.CFX_DIBBase* %36, i32 1) #7
  %38 = tail call { i64, i64 } @_Z10ArgbDecodej(i32 %37) #7
  %39 = extractvalue { i64, i64 } %38, 0
  %40 = trunc i64 %39 to i32
  %41 = lshr i64 %39, 32
  %42 = trunc i64 %41 to i32
  %43 = extractvalue { i64, i64 } %38, 1
  %44 = trunc i64 %43 to i32
  %45 = lshr i64 %43, 32
  %46 = trunc i64 %45 to i32
  %47 = sub nsw i32 %40, %29
  %48 = sub nsw i32 %42, %31
  %49 = sub nsw i32 %44, %33
  %50 = sub nsw i32 %46, %35
  br label %74

51:                                               ; preds = %74
  %52 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 0, i32 0
  %53 = load %class.ScanlineComposerIface*, %class.ScanlineComposerIface** %52, align 8
  %54 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 6, i32 2
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 6, i32 0
  %57 = load i32, i32* %56, align 4
  %58 = sub nsw i32 %55, %57
  %59 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 6, i32 3
  %60 = load i32, i32* %59, align 4
  %61 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 6, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = sub nsw i32 %60, %62
  %64 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 7
  %65 = load i16, i16* %64, align 4
  %66 = getelementptr inbounds [256 x i32], [256 x i32]* %2, i64 0, i64 0
  %67 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %3, i64 0, i32 0, i32 0
  store i32* %66, i32** %67, align 8
  %68 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %3, i64 0, i32 1
  store i64 256, i64* %68, align 8
  %69 = bitcast %class.ScanlineComposerIface* %53 to i1 (%class.ScanlineComposerIface*, i32, i32, i16, %"class.pdfium::span"*)***
  %70 = load i1 (%class.ScanlineComposerIface*, i32, i32, i16, %"class.pdfium::span"*)**, i1 (%class.ScanlineComposerIface*, i32, i32, i16, %"class.pdfium::span"*)*** %69, align 8
  %71 = getelementptr inbounds i1 (%class.ScanlineComposerIface*, i32, i32, i16, %"class.pdfium::span"*)*, i1 (%class.ScanlineComposerIface*, i32, i32, i16, %"class.pdfium::span"*)** %70, i64 3
  %72 = load i1 (%class.ScanlineComposerIface*, i32, i32, i16, %"class.pdfium::span"*)*, i1 (%class.ScanlineComposerIface*, i32, i32, i16, %"class.pdfium::span"*)** %71, align 8
  %73 = call zeroext i1 %72(%class.ScanlineComposerIface* %53, i32 %58, i32 %63, i16 zeroext %65, %"class.pdfium::span"* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %25) #7
  br i1 %73, label %119, label %121

74:                                               ; preds = %74, %24
  %75 = phi i64 [ 0, %24 ], [ %96, %74 ]
  %76 = trunc i64 %75 to i32
  %77 = mul nsw i32 %47, %76
  %78 = sdiv i32 %77, 255
  %79 = add nsw i32 %78, %29
  %80 = mul nsw i32 %48, %76
  %81 = sdiv i32 %80, 255
  %82 = add nsw i32 %81, %31
  %83 = mul nsw i32 %49, %76
  %84 = sdiv i32 %83, 255
  %85 = add nsw i32 %84, %33
  %86 = mul nsw i32 %50, %76
  %87 = sdiv i32 %86, 255
  %88 = add nsw i32 %87, %35
  %89 = shl i32 %79, 24
  %90 = shl i32 %82, 16
  %91 = shl i32 %85, 8
  %92 = or i32 %89, %88
  %93 = or i32 %92, %90
  %94 = or i32 %93, %91
  %95 = getelementptr inbounds [256 x i32], [256 x i32]* %2, i64 0, i64 %75
  store i32 %94, i32* %95, align 4
  %96 = add nuw nsw i64 %75, 1
  %97 = icmp eq i64 %96, 256
  br i1 %97, label %51, label %74

98:                                               ; preds = %18, %12
  %99 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 0, i32 0
  %100 = load %class.ScanlineComposerIface*, %class.ScanlineComposerIface** %99, align 8
  %101 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 6, i32 2
  %102 = load i32, i32* %101, align 4
  %103 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 6, i32 0
  %104 = load i32, i32* %103, align 4
  %105 = sub nsw i32 %102, %104
  %106 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 6, i32 3
  %107 = load i32, i32* %106, align 4
  %108 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 6, i32 1
  %109 = load i32, i32* %108, align 4
  %110 = sub nsw i32 %107, %109
  %111 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 7
  %112 = load i16, i16* %111, align 4
  %113 = bitcast %"class.pdfium::span"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %113, i8 0, i64 16, i1 false) #7
  %114 = bitcast %class.ScanlineComposerIface* %100 to i1 (%class.ScanlineComposerIface*, i32, i32, i16, %"class.pdfium::span"*)***
  %115 = load i1 (%class.ScanlineComposerIface*, i32, i32, i16, %"class.pdfium::span"*)**, i1 (%class.ScanlineComposerIface*, i32, i32, i16, %"class.pdfium::span"*)*** %114, align 8
  %116 = getelementptr inbounds i1 (%class.ScanlineComposerIface*, i32, i32, i16, %"class.pdfium::span"*)*, i1 (%class.ScanlineComposerIface*, i32, i32, i16, %"class.pdfium::span"*)** %115, i64 3
  %117 = load i1 (%class.ScanlineComposerIface*, i32, i32, i16, %"class.pdfium::span"*)*, i1 (%class.ScanlineComposerIface*, i32, i32, i16, %"class.pdfium::span"*)** %116, align 8
  %118 = call zeroext i1 %117(%class.ScanlineComposerIface* %100, i32 %105, i32 %110, i16 zeroext %112, %"class.pdfium::span"* nonnull %4) #7
  br i1 %118, label %119, label %121

119:                                              ; preds = %98, %51
  %120 = call zeroext i1 @_ZN18CFX_ImageStretcher12StartStretchEv(%class.CFX_ImageStretcher* %0)
  br label %121

121:                                              ; preds = %98, %1, %8, %51, %119
  %122 = phi i1 [ %120, %119 ], [ false, %51 ], [ false, %8 ], [ false, %1 ], [ false, %98 ]
  ret i1 %122
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare { i64, i64 } @_Z10ArgbDecodej(i32) local_unnamed_addr #2

declare i32 @_ZNK11CFX_DIBBase14GetPaletteArgbEi(%class.CFX_DIBBase*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN18CFX_ImageStretcher12StartStretchEv(%class.CFX_ImageStretcher*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 0, i32 0
  %3 = load %class.ScanlineComposerIface*, %class.ScanlineComposerIface** %2, align 8
  %4 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 7
  %5 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 4
  %6 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 5
  %7 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 6
  %8 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 1
  %9 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 3
  %10 = tail call i8* @_Znwm(i64 256) #8
  %11 = bitcast i8* %10 to %class.CStretchEngine*
  %12 = load i16, i16* %4, align 2
  %13 = load i32, i32* %5, align 4
  %14 = load i32, i32* %6, align 4
  tail call void @_ZN14CStretchEngineC1EP21ScanlineComposerIface12FXDIB_FormatiiRK7FX_RECTRKN5fxcrt9RetainPtrI11CFX_DIBBaseEERK21FXDIB_ResampleOptions(%class.CStretchEngine* nonnull %11, %class.ScanlineComposerIface* %3, i16 zeroext %12, i32 %13, i32 %14, %struct.FX_RECT* dereferenceable(16) %7, %"class.fxcrt::RetainPtr"* dereferenceable(8) %8, %struct.FXDIB_ResampleOptions* dereferenceable(4) %9) #7
  %15 = ptrtoint i8* %10 to i64
  %16 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 2
  %17 = getelementptr inbounds %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.10"* %16, i64 0, i32 0, i32 0, i32 0
  %18 = load %class.CStretchEngine*, %class.CStretchEngine** %17, align 8
  %19 = bitcast %"class.std::__1::unique_ptr.10"* %16 to i64*
  store i64 %15, i64* %19, align 8
  %20 = icmp eq %class.CStretchEngine* %18, null
  %21 = bitcast i8* %10 to %class.CStretchEngine*
  br i1 %20, label %25, label %22

22:                                               ; preds = %1
  tail call void @_ZN14CStretchEngineD1Ev(%class.CStretchEngine* nonnull %18) #7
  %23 = bitcast %class.CStretchEngine* %18 to i8*
  tail call void @_ZdlPv(i8* %23) #8
  %24 = load %class.CStretchEngine*, %class.CStretchEngine** %17, align 8
  br label %25

25:                                               ; preds = %22, %1
  %26 = phi %class.CStretchEngine* [ %24, %22 ], [ %21, %1 ]
  %27 = tail call zeroext i1 @_ZN14CStretchEngine16StartStretchHorzEv(%class.CStretchEngine* %26) #7
  %28 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  %29 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %28, align 8
  %30 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %29, i64 0, i32 3
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %38, label %33

33:                                               ; preds = %25
  %34 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %29, i64 0, i32 2
  %35 = load i32, i32* %34, align 4
  %36 = sdiv i32 1000000, %31
  %37 = icmp sgt i32 %36, %35
  br i1 %37, label %38, label %41

38:                                               ; preds = %25, %33
  %39 = load %class.CStretchEngine*, %class.CStretchEngine** %17, align 8
  %40 = tail call zeroext i1 @_ZN14CStretchEngine8ContinueEP19PauseIndicatorIface(%class.CStretchEngine* %39, %class.PauseIndicatorIface* null) #7
  br label %41

41:                                               ; preds = %33, %38
  %42 = phi i1 [ false, %38 ], [ true, %33 ]
  ret i1 %42
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN18CFX_ImageStretcher8ContinueEP19PauseIndicatorIface(%class.CFX_ImageStretcher* nocapture readonly, %class.PauseIndicatorIface*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %class.CStretchEngine*, %class.CStretchEngine** %3, align 8
  %5 = icmp eq %class.CStretchEngine* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = tail call zeroext i1 @_ZN14CStretchEngine8ContinueEP19PauseIndicatorIface(%class.CStretchEngine* nonnull %4, %class.PauseIndicatorIface* %1) #7
  br label %8

8:                                                ; preds = %2, %6
  %9 = phi i1 [ false, %2 ], [ %7, %6 ]
  ret i1 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN18CFX_ImageStretcher15ContinueStretchEP19PauseIndicatorIface(%class.CFX_ImageStretcher* nocapture readonly, %class.PauseIndicatorIface*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %class.CStretchEngine*, %class.CStretchEngine** %3, align 8
  %5 = icmp eq %class.CStretchEngine* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = tail call zeroext i1 @_ZN14CStretchEngine8ContinueEP19PauseIndicatorIface(%class.CStretchEngine* nonnull %4, %class.PauseIndicatorIface* %1) #7
  br label %8

8:                                                ; preds = %2, %6
  %9 = phi i1 [ false, %2 ], [ %7, %6 ]
  ret i1 %9
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN18CFX_ImageStretcher6sourceEv(%"class.fxcrt::RetainPtr"* noalias nocapture sret, %class.CFX_ImageStretcher* nocapture readonly) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %class.CFX_ImageStretcher, %class.CFX_ImageStretcher* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %4 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %3, align 8
  %5 = ptrtoint %class.CFX_DIBBase* %4 to i64
  %6 = bitcast %"class.fxcrt::RetainPtr"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = icmp eq %class.CFX_DIBBase* %4, null
  br i1 %7, label %12, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %4, i64 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = add nsw i64 %10, 1
  store i64 %11, i64* %9, align 8
  br label %12

12:                                               ; preds = %2, %8
  ret void
}

declare zeroext i1 @_ZN14CStretchEngine16StartStretchHorzEv(%class.CStretchEngine*) local_unnamed_addr #2

declare zeroext i1 @_ZN14CStretchEngine8ContinueEP19PauseIndicatorIface(%class.CStretchEngine*, %class.PauseIndicatorIface*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN14CStretchEngineD1Ev(%class.CStretchEngine*) unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

declare void @_ZN14CStretchEngineC1EP21ScanlineComposerIface12FXDIB_FormatiiRK7FX_RECTRKN5fxcrt9RetainPtrI11CFX_DIBBaseEERK21FXDIB_ResampleOptions(%class.CStretchEngine*, %class.ScanlineComposerIface*, i16 zeroext, i32, i32, %struct.FX_RECT* dereferenceable(16), %"class.fxcrt::RetainPtr"* dereferenceable(8), %struct.FXDIB_ResampleOptions* dereferenceable(4)) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
