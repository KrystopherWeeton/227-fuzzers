; ModuleID = '../../third_party/blink/renderer/platform/wtf/text/text_codec_utf8.cc'
source_filename = "../../third_party/blink/renderer/platform/wtf/text/text_codec_utf8.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::TextCodec" = type { i32 (...)** }
%"class.WTF::TextEncoding" = type opaque
%"class.WTF::TextCodecUTF8" = type { %"class.WTF::TextCodec", i32, [4 x i8] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

$_ZN3WTF13TextCodecUTF812EncodeCommonIDsEENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKT_j = comdat any

$_ZN3WTF13TextCodecUTF812EncodeCommonIhEENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKT_j = comdat any

$_ZN3WTF13TextCodecUTF816EncodeIntoCommonIDsEENS_9TextCodec16EncodeIntoResultEPKT_jPhm = comdat any

$_ZN3WTF13TextCodecUTF8D0Ev = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm = comdat any

@.str = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"unicode11utf8\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"unicode20utf8\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"utf8\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"x-unicode20utf8\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"unicode-1-1-utf-8\00", align 1
@_ZTVN3WTF13TextCodecUTF8E = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.WTF::TextCodec"*)* @_ZN3WTF9TextCodecD2Ev to i8*), i8* bitcast (void (%"class.WTF::TextCodecUTF8"*)* @_ZN3WTF13TextCodecUTF8D0Ev to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.WTF::TextCodecUTF8"*, i8*, i32, i32, i1, i8*)* @_ZN3WTF13TextCodecUTF86DecodeEPKcjNS_13FlushBehaviorEbRb to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.WTF::TextCodecUTF8"*, i16*, i32, i32)* @_ZN3WTF13TextCodecUTF86EncodeEPKDsjNS_19UnencodableHandlingE to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.WTF::TextCodecUTF8"*, i8*, i32, i32)* @_ZN3WTF13TextCodecUTF86EncodeEPKhjNS_19UnencodableHandlingE to i8*), i8* bitcast ({ i32, i64 } (%"class.WTF::TextCodecUTF8"*, i8*, i32, i8*, i64)* @_ZN3WTF13TextCodecUTF810EncodeIntoEPKhjPhm to i8*), i8* bitcast ({ i32, i64 } (%"class.WTF::TextCodecUTF8"*, i16*, i32, i8*, i64)* @_ZN3WTF13TextCodecUTF810EncodeIntoEPKDsjPhm to i8*)] }, align 8
@_ZZN3WTFL22NonASCIISequenceLengthEhE8kLengths = internal unnamed_addr constant <{ [245 x i8], [11 x i8] }> <{ [245 x i8] cx i8] zeroinitializer }>, align 16
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.6 = private unnamed_addr constant [53 x i8] c"length <= std::numeric_limits<wtf_size_t>::max() / 3\00", align 1
@.str.7 = private unnamed_addr constant [70 x i8] c"../../third_party/blink/renderer/platform/wtf/text/text_codec_utf8.cc\00", align 1
@.str.8 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.9 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv = private unnamed_addr constant [61 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned char]\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN3WTF14IsNonCharacterEi(i32) local_unnamed_addr #0 {
  %2 = icmp ugt i32 %0, -4
  ret i1 %2
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::TextCodec"* @_ZN3WTF13TextCodecUTF86CreateERKNS_12TextEncodingEPKv(%"class.WTF::TextEncoding"* nocapture readnone, i8* nocapture readnone) #1 align 2 {
  %3 = tail call noalias i8* @malloc(i64 16) #12
  %4 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN3WTF13TextCodecUTF8E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  %6 = bitcast i8* %5 to i32*
  store i32 0, i32* %6, align 8
  %7 = bitcast i8* %3 to %"class.WTF::TextCodec"*
  ret %"class.WTF::TextCodec"* %7
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF13TextCodecUTF821RegisterEncodingNamesEPFvPKcS2_E(void (i8*, i8*)* nocapture) local_unnamed_addr #1 align 2 {
  tail call void %0(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0)) #12
  tail call void %0(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0)) #12
  tail call void %0(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0)) #12
  tail call void %0(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0)) #12
  tail call void %0(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0)) #12
  tail call void %0(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0)) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF13TextCodecUTF814RegisterCodecsEPFvPKcPFNSt3__110unique_ptrINS_9TextCodecENS3_14default_deleteIS5_EEEERKNS_12TextEncodingEPKvESD_E(void (i8*, %"class.WTF::TextCodec"* (%"class.WTF::TextEncoding"*, i8*)*, i8*)* nocapture) local_unnamed_addr #1 align 2 {
  tail call void %0(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), %"class.WTF::TextCodec"* (%"class.WTF::TextEncoding"*, i8*)* nonnull @_ZN3WTF13TextCodecUTF86CreateERKNS_12TextEncodingEPKv, i8* null) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF13TextCodecUTF827ConsumePartialSequenceBytesEi(%"class.WTF::TextCodecUTF8"* nocapture, i32) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.WTF::TextCodecUTF8", %"class.WTF::TextCodecUTF8"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = sub nsw i32 %4, %1
  store i32 %5, i32* %3, align 8
  %6 = getelementptr inbounds %"class.WTF::TextCodecUTF8", %"class.WTF::TextCodecUTF8"* %0, i64 0, i32 2, i64 0
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %"class.WTF::TextCodecUTF8", %"class.WTF::TextCodecUTF8"* %0, i64 0, i32 2, i64 %7
  %9 = sext i32 %5 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %6, i8* align 1 %8, i64 %9, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF13TextCodecUTF811HandleErrorEiRPDsbRb(%"class.WTF::TextCodecUTF8"* nocapture, i32, i16** nocapture dereferenceable(8), i1 zeroext, i8* nocapture dereferenceable(1)) local_unnamed_addr #1 align 2 {
  store i8 1, i8* %4, align 1
  br i1 %3, label %17, label %6

6:                                                ; preds = %5
  %7 = load i16*, i16** %2, align 8
  %8 = getelementptr inbounds i16, i16* %7, i64 1
  store i16* %8, i16** %2, align 8
  store i16 -3, i16* %7, align 2
  %9 = sub nsw i32 0, %1
  %10 = getelementptr inbounds %"class.WTF::TextCodecUTF8", %"class.WTF::TextCodecUTF8"* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = add nsw i32 %11, %1
  store i32 %12, i32* %10, align 8
  %13 = getelementptr inbounds %"class.WTF::TextCodecUTF8", %"class.WTF::TextCodecUTF8"* %0, i64 0, i32 2, i64 0
  %14 = sext i32 %9 to i64
  %15 = getelementptr inbounds %"class.WTF::TextCodecUTF8", %"class.WTF::TextCodecUTF8"* %0, i64 0, i32 2, i64 %14
  %16 = sext i32 %12 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %13, i8* align 1 %15, i64 %16, i1 false) #12
  br label %17

17:                                               ; preds = %5, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3WTF13TextCodecUTF821HandlePartialSequenceIhEEbRPT_RPKhS6_bbRb(%"class.WTF::TextCodecUTF8"* nocapture, i8** nocapture dereferenceable(8), i8** nocapture dereferenceable(8), i8*, i1 zeroext, i1 zeroext, i8* nocapture readnone dereferenceable(1)) local_unnamed_addr #1 align 2 {
  %8 = getelementptr inbounds %"class.WTF::TextCodecUTF8", %"class.WTF::TextCodecUTF8"* %0, i64 0, i32 2, i64 0
  %9 = getelementptr inbounds %"class.WTF::TextCodecUTF8", %"class.WTF::TextCodecUTF8"* %0, i64 0, i32 1
  %10 = ptrtoint i8* %3 to i64
  %11 = getelementptr inbounds %"class.WTF::TextCodecUTF8", %"class.WTF::TextCodecUTF8"* %0, i64 0, i32 2, i64 1
  br label %12

12:                                               ; preds = %65, %7
  %13 = load i8, i8* %8, align 4
  %14 = icmp sgt i8 %13, -1
  br i1 %14, label %15, label %21

15:                                               ; preds = %12
  %16 = load i8*, i8** %1, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  store i8* %17, i8** %1, align 8
  store i8 %13, i8* %16, align 1
  %18 = load i32, i32* %9, align 8
  %19 = add nsw i32 %18, -1
  store i32 %19, i32* %9, align 8
  %20 = sext i32 %19 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %8, i8* align 1 %11, i64 %20, i1 false) #12
  br label %65

21:                                               ; preds = %12
  %22 = zext i8 %13 to i64
  %23 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [245 x i8], [11 x i8] }>* @_ZZN3WTFL22NonASCIISequenceLengthEhE8kLengths to [256 x i8]*), i64 0, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = icmp eq i8 %24, 0
  br i1 %26, label %68, label %27

27:                                               ; preds = %21
  %28 = load i32, i32* %9, align 8
  %29 = icmp slt i32 %28, %25
  br i1 %29, label %30, label %55

30:                                               ; preds = %27
  %31 = sub nsw i32 %25, %28
  %32 = sext i32 %31 to i64
  %33 = load i8*, i8** %2, align 8
  %34 = ptrtoint i8* %33 to i64
  %35 = sub i64 %10, %34
  %36 = icmp slt i64 %35, %32
  br i1 %36, label %37, label %47

37:                                               ; preds = %30
  br i1 %4, label %68, label %38

38:                                               ; preds = %37
  %39 = sext i32 %28 to i64
  %40 = getelementptr inbounds %"class.WTF::TextCodecUTF8", %"class.WTF::TextCodecUTF8"* %0, i64 0, i32 2, i64 %39
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* align 1 %33, i64 %35, i1 false)
  %41 = bitcast i8** %2 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = sub i64 %10, %42
  %44 = load i32, i32* %9, align 8
  %45 = trunc i64 %43 to i32
  %46 = add i32 %44, %45
  store i32 %46, i32* %9, align 8
  br label %68

47:                                               ; preds = %30
  %48 = sext i32 %28 to i64
  %49 = getelementptr inbounds %"class.WTF::TextCodecUTF8", %"class.WTF::TextCodecUTF8"* %0, i64 0, i32 2, i64 %48
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %49, i8* align 1 %33, i64 %32, i1 false)
  %50 = load i32, i32* %9, align 8
  %51 = sub nsw i32 %25, %50
  %52 = load i8*, i8** %2, align 8
  %53 = sext i32 %51 to i64
  %54 = getelementptr inbounds i8, i8* %52, i64 %53
  store i8* %54, i8** %2, align 8
  store i32 %25, i32* %9, align 8
  br label %55

55:                                               ; preds = %47, %27
  %56 = phi i32 [ %25, %47 ], [ %28, %27 ]
  %57 = tail call fastcc i32 @_ZN3WTFL22DecodeNonASCIISequenceEPKhj(i8* %8, i32 %25)
  %58 = icmp ugt i32 %57, 255
  br i1 %58, label %68, label %59

59:                                               ; preds = %55
  %60 = sub nsw i32 %56, %25
  store i32 %60, i32* %9, align 8
  %61 = trunc i32 %57 to i8
  %62 = load i8*, i8** %1, align 8
  %63 = getelementptr inbounds i8, i8* %62, i64 1
  store i8* %63, i8** %1, align 8
  store i8 %61, i8* %62, align 1
  %64 = load i32, i32* %9, align 8
  br label %65

65:                                               ; preds = %59, %15
  %66 = phi i32 [ %64, %59 ], [ %19, %15 ]
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %12

68:                                               ; preds = %55, %21, %65, %37, %38
  %69 = phi i1 [ true, %37 ], [ false, %38 ], [ true, %21 ], [ true, %55 ], [ false, %65 ]
  ret i1 %69
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: inlinehint norecurse nounwind readonly ssp uwtable
define internal fastcc i32 @_ZN3WTFL22DecodeNonASCIISequenceEPKhj(i8* nocapture readonly, i32) unnamed_addr #3 {
  %3 = icmp eq i32 %1, 2
  br i1 %3, label %4, label %19

4:                                                ; preds = %2
  %5 = load i8, i8* %0, align 1
  %6 = zext i8 %5 to i32
  %7 = icmp ult i8 %5, -62
  br i1 %7, label %99, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %0, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = icmp sgt i8 %10, -1
  %12 = icmp ugt i8 %10, -65
  %13 = or i1 %11, %12
  br i1 %13, label %99, label %14

14:                                               ; preds = %8
  %15 = zext i8 %10 to i32
  %16 = shl nuw nsw i32 %6, 6
  %17 = add nsw i32 %16, -12416
  %18 = add nsw i32 %17, %15
  br label %99

19:                                               ; preds = %2
  %20 = icmp eq i32 %1, 3
  %21 = load i8, i8* %0, align 1
  br i1 %20, label %22, label %56

22:                                               ; preds = %19
  switch i8 %21, label %34 [
    i8 -32, label %23
    i8 -19, label %28
  ]

23:                                               ; preds = %22
  %24 = getelementptr inbounds i8, i8* %0, i64 1
  %25 = load i8, i8* %24, align 1
  %26 = and i8 %25, -32
  %27 = icmp eq i8 %26, -96
  br i1 %27, label %40, label %99

28:                                               ; preds = %22
  %29 = getelementptr inbounds i8, i8* %0, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = icmp sgt i8 %30, -1
  %32 = icmp ugt i8 %30, -97
  %33 = or i1 %31, %32
  br i1 %33, label %99, label %40

34:                                               ; preds = %22
  %35 = getelementptr inbounds i8, i8* %0, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = icmp sgt i8 %36, -1
  %38 = icmp ugt i8 %36, -65
  %39 = or i1 %37, %38
  br i1 %39, label %99, label %40

40:                                               ; preds = %23, %34, %28
  %41 = phi i8 [ %25, %23 ], [ %36, %34 ], [ %30, %28 ]
  %42 = getelementptr inbounds i8, i8* %0, i64 2
  %43 = load i8, i8* %42, align 1
  %44 = icmp sgt i8 %43, -1
  %45 = icmp ugt i8 %43, -65
  %46 = or i1 %44, %45
  br i1 %46, label %99, label %47

47:                                               ; preds = %40
  %48 = zext i8 %43 to i32
  %49 = zext i8 %21 to i32
  %50 = shl nuw nsw i32 %49, 12
  %51 = zext i8 %41 to i32
  %52 = shl nuw nsw i32 %51, 6
  %53 = add nsw i32 %50, -925824
  %54 = add nsw i32 %53, %48
  %55 = add nsw i32 %54, %52
  br label %99

56:                                               ; preds = %19
  switch i8 %21, label %68 [
    i8 -16, label %57
    i8 -12, label %62
  ]

57:                                               ; preds = %56
  %58 = getelementptr inbounds i8, i8* %0, i64 1
  %59 = load i8, i8* %58, align 1
  %60 = add i8 %59, 112
  %61 = icmp ugt i8 %60, 47
  br i1 %61, label %99, label %74

62:                                               ; preds = %56
  %63 = getelementptr inbounds i8, i8* %0, i64 1
  %64 = load i8, i8* %63, align 1
  %65 = icmp sgt i8 %64, -1
  %66 = icmp ugt i8 %64, -113
  %67 = or i1 %65, %66
  br i1 %67, label %99, label %74

68:                                               ; preds = %56
  %69 = getelementptr inbounds i8, i8* %0, i64 1
  %70 = load i8, i8* %69, align 1
  %71 = icmp sgt i8 %70, -1
  %72 = icmp ugt i8 %70, -65
  %73 = or i1 %71, %72
  br i1 %73, label %99, label %74

74:                                               ; preds = %68, %62, %57
  %75 = phi i8 [ %70, %68 ], [ %64, %62 ], [ %59, %57 ]
  %76 = getelementptr inbounds i8, i8* %0, i64 2
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = icmp sgt i8 %77, -1
  %80 = icmp ugt i8 %77, -65
  %81 = or i1 %79, %80
  br i1 %81, label %99, label %82

82:                                               ; preds = %74
  %83 = getelementptr inbounds i8, i8* %0, i64 3
  %84 = load i8, i8* %83, align 1
  %85 = icmp sgt i8 %84, -1
  %86 = icmp ugt i8 %84, -65
  %87 = or i1 %85, %86
  br i1 %87, label %99, label %88

88:                                               ; preds = %82
  %89 = zext i8 %84 to i32
  %90 = zext i8 %21 to i32
  %91 = shl nuw nsw i32 %90, 18
  %92 = zext i8 %75 to i32
  %93 = shl nuw nsw i32 %92, 12
  %94 = shl nuw nsw i32 %78, 6
  %95 = add nsw i32 %91, -63447168
  %96 = add nsw i32 %95, %94
  %97 = add nsw i32 %96, %89
  %98 = add nsw i32 %97, %93
  br label %99

99:                                               ; preds = %23, %82, %74, %68, %62, %57, %40, %34, %28, %8, %4, %88, %47, %14
  %100 = phi i32 [ %18, %14 ], [ %55, %47 ], [ %98, %88 ], [ -1, %4 ], [ -1, %8 ], [ -1, %23 ], [ -1, %28 ], [ -1, %34 ], [ -2, %40 ], [ -1, %57 ], [ -1, %62 ], [ -1, %68 ], [ -2, %74 ], [ -3, %82 ]
  ret i32 %100
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3WTF13TextCodecUTF821HandlePartialSequenceIDsEEbRPT_RPKhS6_bbRb(%"class.WTF::TextCodecUTF8"* nocapture, i16** nocapture dereferenceable(8), i8** nocapture dereferenceable(8), i8*, i1 zeroext, i1 zeroext, i8* nocapture dereferenceable(1)) local_unnamed_addr #1 align 2 {
  %8 = getelementptr inbounds %"class.WTF::TextCodecUTF8", %"class.WTF::TextCodecUTF8"* %0, i64 0, i32 2, i64 0
  %9 = getelementptr inbounds %"class.WTF::TextCodecUTF8", %"class.WTF::TextCodecUTF8"* %0, i64 0, i32 1
  %10 = ptrtoint i8* %3 to i64
  %11 = getelementptr inbounds %"class.WTF::TextCodecUTF8", %"class.WTF::TextCodecUTF8"* %0, i64 0, i32 2, i64 1
  br label %12

12:                                               ; preds = %103, %7
  %13 = load i8, i8* %8, align 4
  %14 = icmp sgt i8 %13, -1
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = zext i8 %13 to i16
  %17 = load i16*, i16** %1, align 8
  %18 = getelementptr inbounds i16, i16* %17, i64 1
  store i16* %18, i16** %1, align 8
  store i16 %16, i16* %17, align 2
  %19 = load i32, i32* %9, align 8
  %20 = add nsw i32 %19, -1
  store i32 %20, i32* %9, align 8
  %21 = sext i32 %20 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %8, i8* align 1 %11, i64 %21, i1 false) #12
  br label %103

22:                                               ; preds = %12
  %23 = zext i8 %13 to i64
  %24 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [245 x i8], [11 x i8] }>* @_ZZN3WTFL22NonASCIISequenceLengthEhE8kLengths to [256 x i8]*), i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = icmp eq i8 %25, 0
  br i1 %27, label %28, label %35

28:                                               ; preds = %22
  store i8 1, i8* %6, align 1
  br i1 %5, label %106, label %29

29:                                               ; preds = %28
  %30 = load i16*, i16** %1, align 8
  %31 = getelementptr inbounds i16, i16* %30, i64 1
  store i16* %31, i16** %1, align 8
  store i16 -3, i16* %30, align 2
  %32 = load i32, i32* %9, align 8
  %33 = add nsw i32 %32, -1
  store i32 %33, i32* %9, align 8
  %34 = sext i32 %33 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %8, i8* align 1 %11, i64 %34, i1 false) #12
  br label %103

35:                                               ; preds = %22
  %36 = load i32, i32* %9, align 8
  %37 = icmp slt i32 %36, %26
  br i1 %37, label %38, label %70

38:                                               ; preds = %35
  %39 = sub nsw i32 %26, %36
  %40 = sext i32 %39 to i64
  %41 = load i8*, i8** %2, align 8
  %42 = ptrtoint i8* %41 to i64
  %43 = sub i64 %10, %42
  %44 = icmp slt i64 %43, %40
  br i1 %44, label %45, label %62

45:                                               ; preds = %38
  br i1 %4, label %55, label %46

46:                                               ; preds = %45
  %47 = sext i32 %36 to i64
  %48 = getelementptr inbounds %"class.WTF::TextCodecUTF8", %"class.WTF::TextCodecUTF8"* %0, i64 0, i32 2, i64 %47
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %48, i8* align 1 %41, i64 %43, i1 false)
  %49 = bitcast i8** %2 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = sub i64 %10, %50
  %52 = load i32, i32* %9, align 8
  %53 = trunc i64 %51 to i32
  %54 = add i32 %52, %53
  store i32 %54, i32* %9, align 8
  br label %106

55:                                               ; preds = %45
  store i8 1, i8* %6, align 1
  br i1 %5, label %106, label %56

56:                                               ; preds = %55
  %57 = load i16*, i16** %1, align 8
  %58 = getelementptr inbounds i16, i16* %57, i64 1
  store i16* %58, i16** %1, align 8
  store i16 -3, i16* %57, align 2
  %59 = load i32, i32* %9, align 8
  %60 = add nsw i32 %59, -1
  store i32 %60, i32* %9, align 8
  %61 = sext i32 %60 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %8, i8* align 1 %11, i64 %61, i1 false) #12
  br label %103

62:                                               ; preds = %38
  %63 = sext i32 %36 to i64
  %64 = getelementptr inbounds %"class.WTF::TextCodecUTF8", %"class.WTF::TextCodecUTF8"* %0, i64 0, i32 2, i64 %63
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %64, i8* align 1 %41, i64 %40, i1 false)
  %65 = load i32, i32* %9, align 8
  %66 = sub nsw i32 %26, %65
  %67 = load i8*, i8** %2, align 8
  %68 = sext i32 %66 to i64
  %69 = getelementptr inbounds i8, i8* %67, i64 %68
  store i8* %69, i8** %2, align 8
  store i32 %26, i32* %9, align 8
  br label %70

70:                                               ; preds = %62, %35
  %71 = phi i32 [ %26, %62 ], [ %36, %35 ]
  %72 = tail call fastcc i32 @_ZN3WTFL22DecodeNonASCIISequenceEPKhj(i8* %8, i32 %26)
  %73 = icmp ugt i32 %72, -4
  br i1 %73, label %74, label %84

74:                                               ; preds = %70
  store i8 1, i8* %6, align 1
  br i1 %5, label %106, label %75

75:                                               ; preds = %74
  %76 = load i16*, i16** %1, align 8
  %77 = getelementptr inbounds i16, i16* %76, i64 1
  store i16* %77, i16** %1, align 8
  store i16 -3, i16* %76, align 2
  %78 = sub nsw i32 0, %72
  %79 = load i32, i32* %9, align 8
  %80 = add nsw i32 %79, %72
  store i32 %80, i32* %9, align 8
  %81 = sext i32 %78 to i64
  %82 = getelementptr inbounds %"class.WTF::TextCodecUTF8", %"class.WTF::TextCodecUTF8"* %0, i64 0, i32 2, i64 %81
  %83 = sext i32 %80 to i64
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %8, i8* align 1 %82, i64 %83, i1 false) #12
  br label %103

84:                                               ; preds = %70
  %85 = sub nsw i32 %71, %26
  store i32 %85, i32* %9, align 8
  %86 = load i16*, i16** %1, align 8
  %87 = icmp ult i32 %72, 65536
  br i1 %87, label %88, label %91

88:                                               ; preds = %84
  %89 = trunc i32 %72 to i16
  %90 = getelementptr inbounds i16, i16* %86, i64 1
  store i16 %89, i16* %86, align 2
  br label %100

91:                                               ; preds = %84
  %92 = lshr i32 %72, 10
  %93 = trunc i32 %92 to i16
  %94 = add i16 %93, -10304
  %95 = getelementptr inbounds i16, i16* %86, i64 1
  store i16 %94, i16* %86, align 2
  %96 = trunc i32 %72 to i16
  %97 = and i16 %96, 1023
  %98 = or i16 %97, -9216
  %99 = getelementptr inbounds i16, i16* %86, i64 2
  store i16 %98, i16* %95, align 2
  br label %100

100:                                              ; preds = %88, %91
  %101 = phi i16* [ %90, %88 ], [ %99, %91 ]
  store i16* %101, i16** %1, align 8
  %102 = load i32, i32* %9, align 8
  br label %103

103:                                              ; preds = %75, %56, %29, %100, %15
  %104 = phi i32 [ %80, %75 ], [ %60, %56 ], [ %33, %29 ], [ %102, %100 ], [ %20, %15 ]
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %12

106:                                              ; preds = %74, %55, %28, %103, %46
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN3WTF13TextCodecUTF86DecodeEPKcjNS_13FlushBehaviorEbRb(%"class.WTF::TextCodecUTF8"* nocapture, i8*, i32, i32, i1 zeroext, i8* nocapture dereferenceable(1)) unnamed_addr #1 align 2 {
  %7 = alloca i16*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i16*, align 8
  %10 = alloca i8*, align 8
  %11 = icmp ne i32 %3, 0
  %12 = getelementptr inbounds %"class.WTF::TextCodecUTF8", %"class.WTF::TextCodecUTF8"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = sext i32 %13 to i33
  %15 = zext i32 %2 to i33
  %16 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %14, i33 %15) #12
  %17 = extractvalue { i33, i1 } %16, 1
  %18 = extractvalue { i33, i1 } %16, 0
  %19 = icmp slt i33 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %21, label %22, !prof !2

21:                                               ; preds = %6
  tail call void @llvm.trap() #12
  unreachable

22:                                               ; preds = %6
  %23 = trunc i33 %18 to i32
  %24 = bitcast i8** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #12
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %8, align 8
  %25 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %23, i8** nonnull dereferenceable(8) %8) #12
  %26 = ptrtoint %"class.WTF::StringImpl"* %25 to i64
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #12
  %27 = zext i32 %2 to i64
  %28 = getelementptr inbounds i8, i8* %1, i64 %27
  %29 = ptrtoint i8* %28 to i64
  %30 = and i64 %29, -8
  %31 = inttoptr i64 %30 to i8*
  %32 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %32, label %40, label %33

33:                                               ; preds = %22
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %40, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 1
  %39 = bitcast %"class.WTF::StringImpl"* %38 to i8*
  br label %40

40:                                               ; preds = %22, %33, %37
  %41 = phi i8* [ %39, %37 ], [ null, %33 ], [ null, %22 ]
  %42 = load i32, i32* %12, align 8
  %43 = getelementptr inbounds %"class.WTF::TextCodecUTF8", %"class.WTF::TextCodecUTF8"* %0, i64 0, i32 2, i64 0
  %44 = getelementptr inbounds %"class.WTF::TextCodecUTF8", %"class.WTF::TextCodecUTF8"* %0, i64 0, i32 2, i64 1
  br label %45

45:                                               ; preds = %184, %40
  %46 = phi i32 [ %185, %184 ], [ %42, %40 ]
  %47 = phi i8* [ %182, %184 ], [ %1, %40 ]
  %48 = phi i8* [ %183, %184 ], [ %41, %40 ]
  %49 = icmp eq i32 %46, 0
  br i1 %49, label %112, label %50

50:                                               ; preds = %45
  %51 = ptrtoint i8* %47 to i64
  br label %52

52:                                               ; preds = %95, %50
  %53 = phi i32 [ %46, %50 ], [ %97, %95 ]
  %54 = phi i64 [ %51, %50 ], [ %96, %95 ]
  %55 = phi i8* [ %48, %50 ], [ %98, %95 ]
  %56 = load i8, i8* %43, align 4
  %57 = icmp sgt i8 %56, -1
  br i1 %57, label %58, label %62

58:                                               ; preds = %52
  store i8 %56, i8* %55, align 1
  %59 = load i32, i32* %12, align 8
  %60 = add nsw i32 %59, -1
  store i32 %60, i32* %12, align 8
  %61 = sext i32 %60 to i64
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %43, i8* align 1 %44, i64 %61, i1 false) #12
  br label %95

62:                                               ; preds = %52
  %63 = zext i8 %56 to i64
  %64 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [245 x i8], [11 x i8] }>* @_ZZN3WTFL22NonASCIISequenceLengthEhE8kLengths to [256 x i8]*), i64 0, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = icmp eq i8 %65, 0
  br i1 %67, label %109, label %68

68:                                               ; preds = %62
  %69 = icmp slt i32 %53, %66
  br i1 %69, label %70, label %86

70:                                               ; preds = %68
  %71 = sub nsw i32 %66, %53
  %72 = sext i32 %71 to i64
  %73 = inttoptr i64 %54 to i8*
  %74 = sub i64 %29, %54
  %75 = icmp slt i64 %74, %72
  br i1 %75, label %76, label %78

76:                                               ; preds = %70
  %77 = inttoptr i64 %54 to i8*
  br i1 %11, label %255, label %102

78:                                               ; preds = %70
  %79 = sext i32 %53 to i64
  %80 = getelementptr inbounds %"class.WTF::TextCodecUTF8", %"class.WTF::TextCodecUTF8"* %0, i64 0, i32 2, i64 %79
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %80, i8* align 1 %73, i64 %72, i1 false) #12
  %81 = load i32, i32* %12, align 8
  %82 = sub nsw i32 %66, %81
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i8, i8* %73, i64 %83
  %85 = ptrtoint i8* %84 to i64
  store i32 %66, i32* %12, align 8
  br label %86

86:                                               ; preds = %78, %68
  %87 = phi i64 [ %85, %78 ], [ %54, %68 ]
  %88 = phi i32 [ %66, %78 ], [ %53, %68 ]
  %89 = call fastcc i32 @_ZN3WTFL22DecodeNonASCIISequenceEPKhj(i8* %43, i32 %66) #12
  %90 = icmp ugt i32 %89, 255
  br i1 %90, label %109, label %91

91:                                               ; preds = %86
  %92 = sub nsw i32 %88, %66
  store i32 %92, i32* %12, align 8
  %93 = trunc i32 %89 to i8
  store i8 %93, i8* %55, align 1
  %94 = load i32, i32* %12, align 8
  br label %95

95:                                               ; preds = %91, %58
  %96 = phi i64 [ %54, %58 ], [ %87, %91 ]
  %97 = phi i32 [ %60, %58 ], [ %94, %91 ]
  %98 = getelementptr inbounds i8, i8* %55, i64 1
  %99 = icmp eq i32 %97, 0
  br i1 %99, label %100, label %52

100:                                              ; preds = %95
  %101 = inttoptr i64 %96 to i8*
  br label %112

102:                                              ; preds = %76
  %103 = sext i32 %53 to i64
  %104 = getelementptr inbounds %"class.WTF::TextCodecUTF8", %"class.WTF::TextCodecUTF8"* %0, i64 0, i32 2, i64 %103
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %104, i8* align 1 %77, i64 %74, i1 false) #12
  %105 = load i32, i32* %12, align 8
  %106 = trunc i64 %74 to i32
  %107 = add i32 %105, %106
  store i32 %107, i32* %12, align 8
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %112, label %187

109:                                              ; preds = %62, %86
  %110 = phi i64 [ %87, %86 ], [ %54, %62 ]
  %111 = inttoptr i64 %110 to i8*
  br label %257

112:                                              ; preds = %100, %102, %45
  %113 = phi i8* [ %47, %45 ], [ %77, %102 ], [ %101, %100 ]
  %114 = phi i8* [ %48, %45 ], [ %55, %102 ], [ %98, %100 ]
  %115 = icmp ult i8* %113, %28
  br i1 %115, label %116, label %181

116:                                              ; preds = %112, %152
  %117 = phi i8* [ %154, %152 ], [ %114, %112 ]
  %118 = phi i8* [ %153, %152 ], [ %113, %112 ]
  %119 = load i8, i8* %118, align 1
  %120 = icmp sgt i8 %119, -1
  br i1 %120, label %121, label %156

121:                                              ; preds = %116
  %122 = ptrtoint i8* %118 to i64
  %123 = and i64 %122, 7
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %146

125:                                              ; preds = %121
  %126 = icmp ult i8* %118, %31
  br i1 %126, label %127, label %139

127:                                              ; preds = %125, %134
  %128 = phi i8* [ %137, %134 ], [ %117, %125 ]
  %129 = phi i8* [ %136, %134 ], [ %118, %125 ]
  %130 = bitcast i8* %129 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = and i64 %131, -9187201950435737472
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %139

134:                                              ; preds = %127
  %135 = bitcast i8* %128 to i64*
  store i64 %131, i64* %135, align 1
  %136 = getelementptr inbounds i8, i8* %129, i64 8
  %137 = getelementptr inbounds i8, i8* %128, i64 8
  %138 = icmp ult i8* %136, %31
  br i1 %138, label %127, label %139

139:                                              ; preds = %134, %127, %125
  %140 = phi i8* [ %118, %125 ], [ %129, %127 ], [ %136, %134 ]
  %141 = phi i8* [ %117, %125 ], [ %128, %127 ], [ %137, %134 ]
  %142 = icmp eq i8* %140, %28
  br i1 %142, label %181, label %143

143:                                              ; preds = %139
  %144 = load i8, i8* %140, align 1
  %145 = icmp sgt i8 %144, -1
  br i1 %145, label %146, label %152

146:                                              ; preds = %143, %121
  %147 = phi i8 [ %144, %143 ], [ %119, %121 ]
  %148 = phi i8* [ %140, %143 ], [ %118, %121 ]
  %149 = phi i8* [ %141, %143 ], [ %117, %121 ]
  %150 = getelementptr inbounds i8, i8* %148, i64 1
  %151 = getelementptr inbounds i8, i8* %149, i64 1
  store i8 %147, i8* %149, align 1
  br label %152

152:                                              ; preds = %146, %143, %177
  %153 = phi i8* [ %150, %146 ], [ %140, %143 ], [ %178, %177 ]
  %154 = phi i8* [ %151, %146 ], [ %141, %143 ], [ %180, %177 ]
  %155 = icmp ult i8* %153, %28
  br i1 %155, label %116, label %181

156:                                              ; preds = %116
  %157 = zext i8 %119 to i64
  %158 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [245 x i8], [11 x i8] }>* @_ZZN3WTFL22NonASCIISequenceLengthEhE8kLengths to [256 x i8]*), i64 0, i64 %157
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = icmp eq i8 %159, 0
  br i1 %161, label %174, label %162

162:                                              ; preds = %156
  %163 = zext i8 %159 to i64
  %164 = ptrtoint i8* %118 to i64
  %165 = sub i64 %29, %164
  %166 = icmp slt i64 %165, %163
  br i1 %166, label %167, label %171

167:                                              ; preds = %162
  %168 = trunc i64 %165 to i32
  store i32 %168, i32* %12, align 8
  %169 = shl i64 %165, 32
  %170 = ashr exact i64 %169, 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %43, i8* align 1 %118, i64 %170, i1 false)
  br label %181

171:                                              ; preds = %162
  %172 = call fastcc i32 @_ZN3WTFL22DecodeNonASCIISequenceEPKhj(i8* %118, i32 %160)
  %173 = icmp ugt i32 %172, -4
  br i1 %173, label %174, label %175

174:                                              ; preds = %156, %171
  store i8 1, i8* %5, align 1
  br i1 %4, label %181, label %257

175:                                              ; preds = %171
  %176 = icmp sgt i32 %172, 255
  br i1 %176, label %257, label %177

177:                                              ; preds = %175
  %178 = getelementptr inbounds i8, i8* %118, i64 %163
  %179 = trunc i32 %172 to i8
  %180 = getelementptr inbounds i8, i8* %117, i64 1
  store i8 %179, i8* %117, align 1
  br label %152

181:                                              ; preds = %139, %152, %112, %174, %167
  %182 = phi i8* [ %28, %167 ], [ %118, %174 ], [ %113, %112 ], [ %28, %139 ], [ %153, %152 ]
  %183 = phi i8* [ %117, %167 ], [ %117, %174 ], [ %114, %112 ], [ %141, %139 ], [ %154, %152 ]
  br i1 %11, label %184, label %187

184:                                              ; preds = %181
  %185 = load i32, i32* %12, align 8
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %187, label %45

187:                                              ; preds = %102, %184, %181
  %188 = phi i8* [ %183, %184 ], [ %183, %181 ], [ %55, %102 ]
  br i1 %32, label %189, label %191

189:                                              ; preds = %187
  %190 = load i32, i32* inttoptr (i64 4 to i32*), align 4
  br label %198

191:                                              ; preds = %187
  %192 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 1
  %193 = load i32, i32* %192, align 4
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %198, label %195

195:                                              ; preds = %191
  %196 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 1
  %197 = ptrtoint %"class.WTF::StringImpl"* %196 to i64
  br label %198

198:                                              ; preds = %189, %191, %195
  %199 = phi i32 [ %193, %195 ], [ 0, %191 ], [ %190, %189 ]
  %200 = phi i64 [ %197, %195 ], [ 0, %191 ], [ 0, %189 ]
  %201 = ptrtoint i8* %188 to i64
  %202 = sub i64 %201, %200
  %203 = trunc i64 %202 to i32
  %204 = icmp eq i32 %199, %203
  br i1 %204, label %221, label %205

205:                                              ; preds = %198
  %206 = call %"class.WTF::StringImpl"* @_ZNK3WTF10StringImpl9SubstringEjj(%"class.WTF::StringImpl"* %25, i32 0, i32 %203) #12
  %207 = ptrtoint %"class.WTF::StringImpl"* %206 to i64
  br i1 %32, label %221, label %208

208:                                              ; preds = %205
  %209 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %210 = load atomic i32, i32* %209 monotonic, align 4
  %211 = and i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 0
  %214 = load i32, i32* %213, align 4
  br i1 %212, label %215, label %217

215:                                              ; preds = %208
  %216 = add i32 %214, -1
  store i32 %216, i32* %213, align 4
  br label %217

217:                                              ; preds = %215, %208
  %218 = phi i32 [ %216, %215 ], [ %214, %208 ]
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %220, label %221

220:                                              ; preds = %217
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %25) #12
  br label %221

221:                                              ; preds = %198, %205, %217, %220
  %222 = phi i64 [ %26, %198 ], [ %207, %205 ], [ %207, %220 ], [ %207, %217 ]
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %229, label %224

224:                                              ; preds = %221
  %225 = inttoptr i64 %222 to %"class.WTF::StringImpl"*
  %226 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %225, i64 0, i32 1
  %227 = load i32, i32* %226, align 4
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %229, label %250

229:                                              ; preds = %224, %221
  %230 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %231 = ptrtoint %"class.WTF::StringImpl"* %230 to i64
  %232 = icmp eq %"class.WTF::StringImpl"* %230, null
  br i1 %232, label %250, label %233

233:                                              ; preds = %229
  %234 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %230, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %235 = load atomic i32, i32* %234 monotonic, align 4
  %236 = and i32 %235, 2
  %237 = icmp eq i32 %236, 0
  br i1 %237, label %238, label %250

238:                                              ; preds = %233
  %239 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %230, i64 0, i32 0
  %240 = load i32, i32* %239, align 4
  %241 = zext i32 %240 to i33
  %242 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %241, i33 1) #12
  %243 = extractvalue { i33, i1 } %242, 1
  %244 = extractvalue { i33, i1 } %242, 0
  %245 = icmp slt i33 %244, 0
  %246 = or i1 %243, %245
  br i1 %246, label %247, label %248, !prof !2

247:                                              ; preds = %238
  call void @llvm.trap() #12
  unreachable

248:                                              ; preds = %238
  %249 = trunc i33 %244 to i32
  store i32 %249, i32* %239, align 4
  br label %250

250:                                              ; preds = %224, %229, %233, %248
  %251 = phi i64 [ %222, %229 ], [ %222, %248 ], [ %222, %233 ], [ 0, %224 ]
  %252 = phi i64 [ %231, %229 ], [ %231, %248 ], [ %231, %233 ], [ %222, %224 ]
  %253 = inttoptr i64 %251 to %"class.WTF::StringImpl"*
  %254 = inttoptr i64 %252 to %"class.WTF::StringImpl"*
  br label %594

255:                                              ; preds = %76
  %256 = inttoptr i64 %54 to i8*
  br label %257

257:                                              ; preds = %174, %175, %255, %109
  %258 = phi i8* [ %111, %109 ], [ %256, %255 ], [ %118, %175 ], [ %118, %174 ]
  %259 = phi i8* [ %48, %109 ], [ %48, %255 ], [ %117, %175 ], [ %117, %174 ]
  %260 = load i32, i32* %12, align 8
  %261 = sext i32 %260 to i33
  %262 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %261, i33 %15) #12
  %263 = extractvalue { i33, i1 } %262, 1
  %264 = extractvalue { i33, i1 } %262, 0
  %265 = icmp slt i33 %264, 0
  %266 = or i1 %263, %265
  br i1 %266, label %267, label %268, !prof !2

267:                                              ; preds = %257
  call void @llvm.trap() #12
  unreachable

268:                                              ; preds = %257
  %269 = trunc i33 %264 to i32
  %270 = bitcast i16** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %270) #12
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %7, align 8
  %271 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %269, i16** nonnull dereferenceable(8) %7) #12
  %272 = ptrtoint %"class.WTF::StringImpl"* %271 to i64
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %270) #12
  %273 = icmp eq %"class.WTF::StringImpl"* %271, null
  br i1 %273, label %281, label %274

274:                                              ; preds = %268
  %275 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %271, i64 0, i32 1
  %276 = load i32, i32* %275, align 4
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %281, label %278

278:                                              ; preds = %274
  %279 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %271, i64 1
  %280 = bitcast %"class.WTF::StringImpl"* %279 to i16*
  br label %281

281:                                              ; preds = %268, %274, %278
  %282 = phi i16* [ %280, %278 ], [ null, %274 ], [ null, %268 ]
  %283 = bitcast i16* %282 to i8*
  br i1 %32, label %291, label %284

284:                                              ; preds = %281
  %285 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 1
  %286 = load i32, i32* %285, align 4
  %287 = icmp eq i32 %286, 0
  br i1 %287, label %291, label %288

288:                                              ; preds = %284
  %289 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 1
  %290 = bitcast %"class.WTF::StringImpl"* %289 to i8*
  br label %291

291:                                              ; preds = %281, %284, %288
  %292 = phi i8* [ %290, %288 ], [ null, %284 ], [ null, %281 ]
  %293 = ptrtoint i8* %292 to i64
  %294 = icmp ult i8* %292, %259
  br i1 %294, label %295, label %380

295:                                              ; preds = %291
  %296 = sub i64 0, %293
  %297 = getelementptr i8, i8* %259, i64 %296
  %298 = ptrtoint i8* %297 to i64
  %299 = icmp ult i8* %297, inttoptr (i64 16 to i8*)
  br i1 %299, label %369, label %300

300:                                              ; preds = %295
  %301 = sub i64 0, %293
  %302 = getelementptr i8, i8* %259, i64 %301
  %303 = ptrtoint i8* %302 to i64
  %304 = getelementptr i16, i16* %282, i64 %303
  %305 = bitcast i16* %304 to i8*
  %306 = icmp ugt i8* %259, %283
  %307 = icmp ult i8* %292, %305
  %308 = and i1 %306, %307
  br i1 %308, label %369, label %309

309:                                              ; preds = %300
  %310 = and i64 %298, -16
  %311 = getelementptr i8, i8* %292, i64 %310
  %312 = getelementptr i16, i16* %282, i64 %310
  %313 = add i64 %310, -16
  %314 = lshr exact i64 %313, 4
  %315 = add nuw nsw i64 %314, 1
  %316 = and i64 %315, 1
  %317 = icmp eq i64 %313, 0
  br i1 %317, label %351, label %318

318:                                              ; preds = %309
  %319 = sub nuw nsw i64 %315, %316
  br label %320

320:                                              ; preds = %320, %318
  %321 = phi i64 [ 0, %318 ], [ %348, %320 ]
  %322 = phi i64 [ %319, %318 ], [ %349, %320 ]
  %323 = getelementptr i8, i8* %292, i64 %321
  %324 = getelementptr i16, i16* %282, i64 %321
  %325 = bitcast i8* %323 to <8 x i8>*
  %326 = load <8 x i8>, <8 x i8>* %325, align 1, !alias.scope !3
  %327 = getelementptr i8, i8* %323, i64 8
  %328 = bitcast i8* %327 to <8 x i8>*
  %329 = load <8 x i8>, <8 x i8>* %328, align 1, !alias.scope !3
  %330 = zext <8 x i8> %326 to <8 x i16>
  %331 = zext <8 x i8> %329 to <8 x i16>
  %332 = bitcast i16* %324 to <8 x i16>*
  store <8 x i16> %330, <8 x i16>* %332, align 2, !alias.scope !6, !noalias !3
  %333 = getelementptr i16, i16* %324, i64 8
  %334 = bitcast i16* %333 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %334, align 2, !alias.scope !6, !noalias !3
  %335 = or i64 %321, 16
  %336 = getelementptr i8, i8* %292, i64 %335
  %337 = getelementptr i16, i16* %282, i64 %335
  %338 = bitcast i8* %336 to <8 x i8>*
  %339 = load <8 x i8>, <8 x i8>* %338, align 1, !alias.scope !3
  %340 = getelementptr i8, i8* %336, i64 8
  %341 = bitcast i8* %340 to <8 x i8>*
  %342 = load <8 x i8>, <8 x i8>* %341, align 1, !alias.scope !3
  %343 = zext <8 x i8> %339 to <8 x i16>
  %344 = zext <8 x i8> %342 to <8 x i16>
  %345 = bitcast i16* %337 to <8 x i16>*
  store <8 x i16> %343, <8 x i16>* %345, align 2, !alias.scope !6, !noalias !3
  %346 = getelementptr i16, i16* %337, i64 8
  %347 = bitcast i16* %346 to <8 x i16>*
  store <8 x i16> %344, <8 x i16>* %347, align 2, !alias.scope !6, !noalias !3
  %348 = add i64 %321, 32
  %349 = add i64 %322, -2
  %350 = icmp eq i64 %349, 0
  br i1 %350, label %351, label %320, !llvm.loop !8

351:                                              ; preds = %320, %309
  %352 = phi i64 [ 0, %309 ], [ %348, %320 ]
  %353 = icmp eq i64 %316, 0
  br i1 %353, label %367, label %354

354:                                              ; preds = %351
  %355 = getelementptr i8, i8* %292, i64 %352
  %356 = getelementptr i16, i16* %282, i64 %352
  %357 = bitcast i8* %355 to <8 x i8>*
  %358 = load <8 x i8>, <8 x i8>* %357, align 1, !alias.scope !3
  %359 = getelementptr i8, i8* %355, i64 8
  %360 = bitcast i8* %359 to <8 x i8>*
  %361 = load <8 x i8>, <8 x i8>* %360, align 1, !alias.scope !3
  %362 = zext <8 x i8> %358 to <8 x i16>
  %363 = zext <8 x i8> %361 to <8 x i16>
  %364 = bitcast i16* %356 to <8 x i16>*
  store <8 x i16> %362, <8 x i16>* %364, align 2, !alias.scope !6, !noalias !3
  %365 = getelementptr i16, i16* %356, i64 8
  %366 = bitcast i16* %365 to <8 x i16>*
  store <8 x i16> %363, <8 x i16>* %366, align 2, !alias.scope !6, !noalias !3
  br label %367

367:                                              ; preds = %351, %354
  %368 = icmp eq i64 %310, %298
  br i1 %368, label %380, label %369

369:                                              ; preds = %367, %300, %295
  %370 = phi i8* [ %292, %300 ], [ %292, %295 ], [ %311, %367 ]
  %371 = phi i16* [ %282, %300 ], [ %282, %295 ], [ %312, %367 ]
  br label %372

372:                                              ; preds = %369, %372
  %373 = phi i8* [ %375, %372 ], [ %370, %369 ]
  %374 = phi i16* [ %378, %372 ], [ %371, %369 ]
  %375 = getelementptr inbounds i8, i8* %373, i64 1
  %376 = load i8, i8* %373, align 1
  %377 = zext i8 %376 to i16
  %378 = getelementptr inbounds i16, i16* %374, i64 1
  store i16 %377, i16* %374, align 2
  %379 = icmp eq i8* %375, %259
  br i1 %379, label %380, label %372, !llvm.loop !10

380:                                              ; preds = %372, %367, %291
  %381 = phi i16* [ %282, %291 ], [ %312, %367 ], [ %378, %372 ]
  %382 = load i32, i32* %12, align 8
  %383 = bitcast i16** %9 to i8*
  %384 = bitcast i8** %10 to i8*
  br label %385

385:                                              ; preds = %380, %513
  %386 = phi i32 [ %382, %380 ], [ %514, %513 ]
  %387 = phi i8* [ %258, %380 ], [ %511, %513 ]
  %388 = phi i16* [ %381, %380 ], [ %512, %513 ]
  %389 = icmp eq i32 %386, 0
  br i1 %389, label %396, label %390

390:                                              ; preds = %385
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %383) #12
  store i16* %388, i16** %9, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %384) #12
  store i8* %387, i8** %10, align 8
  %391 = call zeroext i1 @_ZN3WTF13TextCodecUTF821HandlePartialSequenceIDsEEbRPT_RPKhS6_bbRb(%"class.WTF::TextCodecUTF8"* %0, i16** nonnull dereferenceable(8) %9, i8** nonnull dereferenceable(8) %10, i8* %28, i1 zeroext %11, i1 zeroext %4, i8* dereferenceable(1) %5)
  %392 = load i16*, i16** %9, align 8
  %393 = load i8*, i8** %10, align 8
  %394 = load i32, i32* %12, align 8
  %395 = icmp eq i32 %394, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %384) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %383) #12
  br i1 %395, label %396, label %516

396:                                              ; preds = %385, %390
  %397 = phi i8* [ %393, %390 ], [ %387, %385 ]
  %398 = phi i16* [ %392, %390 ], [ %388, %385 ]
  %399 = icmp ult i8* %397, %28
  br i1 %399, label %400, label %510

400:                                              ; preds = %396, %466
  %401 = phi i16* [ %468, %466 ], [ %398, %396 ]
  %402 = phi i8* [ %467, %466 ], [ %397, %396 ]
  %403 = load i8, i8* %402, align 1
  %404 = icmp sgt i8 %403, -1
  br i1 %404, label %405, label %470

405:                                              ; preds = %400
  %406 = ptrtoint i8* %402 to i64
  %407 = and i64 %406, 7
  %408 = icmp eq i64 %407, 0
  br i1 %408, label %409, label %459

409:                                              ; preds = %405
  %410 = icmp ult i8* %402, %31
  br i1 %410, label %411, label %452

411:                                              ; preds = %409, %418
  %412 = phi i16* [ %450, %418 ], [ %401, %409 ]
  %413 = phi i8* [ %449, %418 ], [ %402, %409 ]
  %414 = bitcast i8* %413 to i64*
  %415 = load i64, i64* %414, align 8
  %416 = and i64 %415, -9187201950435737472
  %417 = icmp eq i64 %416, 0
  br i1 %417, label %418, label %452

418:                                              ; preds = %411
  %419 = trunc i64 %415 to i16
  %420 = and i16 %419, 255
  store i16 %420, i16* %412, align 2
  %421 = getelementptr inbounds i8, i8* %413, i64 1
  %422 = load i8, i8* %421, align 1
  %423 = zext i8 %422 to i16
  %424 = getelementptr inbounds i16, i16* %412, i64 1
  store i16 %423, i16* %424, align 2
  %425 = getelementptr inbounds i8, i8* %413, i64 2
  %426 = load i8, i8* %425, align 1
  %427 = zext i8 %426 to i16
  %428 = getelementptr inbounds i16, i16* %412, i64 2
  store i16 %427, i16* %428, align 2
  %429 = getelementptr inbounds i8, i8* %413, i64 3
  %430 = load i8, i8* %429, align 1
  %431 = zext i8 %430 to i16
  %432 = getelementptr inbounds i16, i16* %412, i64 3
  store i16 %431, i16* %432, align 2
  %433 = getelementptr inbounds i8, i8* %413, i64 4
  %434 = load i8, i8* %433, align 1
  %435 = zext i8 %434 to i16
  %436 = getelementptr inbounds i16, i16* %412, i64 4
  store i16 %435, i16* %436, align 2
  %437 = getelementptr inbounds i8, i8* %413, i64 5
  %438 = load i8, i8* %437, align 1
  %439 = zext i8 %438 to i16
  %440 = getelementptr inbounds i16, i16* %412, i64 5
  store i16 %439, i16* %440, align 2
  %441 = getelementptr inbounds i8, i8* %413, i64 6
  %442 = load i8, i8* %441, align 1
  %443 = zext i8 %442 to i16
  %444 = getelementptr inbounds i16, i16* %412, i64 6
  store i16 %443, i16* %444, align 2
  %445 = getelementptr inbounds i8, i8* %413, i64 7
  %446 = load i8, i8* %445, align 1
  %447 = zext i8 %446 to i16
  %448 = getelementptr inbounds i16, i16* %412, i64 7
  store i16 %447, i16* %448, align 2
  %449 = getelementptr inbounds i8, i8* %413, i64 8
  %450 = getelementptr inbounds i16, i16* %412, i64 8
  %451 = icmp ult i8* %449, %31
  br i1 %451, label %411, label %452

452:                                              ; preds = %418, %411, %409
  %453 = phi i8* [ %402, %409 ], [ %413, %411 ], [ %449, %418 ]
  %454 = phi i16* [ %401, %409 ], [ %412, %411 ], [ %450, %418 ]
  %455 = icmp eq i8* %453, %28
  br i1 %455, label %510, label %456

456:                                              ; preds = %452
  %457 = load i8, i8* %453, align 1
  %458 = icmp sgt i8 %457, -1
  br i1 %458, label %459, label %466

459:                                              ; preds = %456, %405
  %460 = phi i8 [ %457, %456 ], [ %403, %405 ]
  %461 = phi i8* [ %453, %456 ], [ %402, %405 ]
  %462 = phi i16* [ %454, %456 ], [ %401, %405 ]
  %463 = getelementptr inbounds i8, i8* %461, i64 1
  %464 = zext i8 %460 to i16
  %465 = getelementptr inbounds i16, i16* %462, i64 1
  store i16 %464, i16* %462, align 2
  br label %466

466:                                              ; preds = %490, %498, %501, %459, %456
  %467 = phi i8* [ %463, %459 ], [ %453, %456 ], [ %494, %490 ], [ %496, %498 ], [ %496, %501 ]
  %468 = phi i16* [ %465, %459 ], [ %454, %456 ], [ %491, %490 ], [ %500, %498 ], [ %509, %501 ]
  %469 = icmp ult i8* %467, %28
  br i1 %469, label %400, label %510

470:                                              ; preds = %400
  %471 = zext i8 %403 to i64
  %472 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [245 x i8], [11 x i8] }>* @_ZZN3WTFL22NonASCIISequenceLengthEhE8kLengths to [256 x i8]*), i64 0, i64 %471
  %473 = load i8, i8* %472, align 1
  %474 = zext i8 %473 to i32
  %475 = icmp eq i8 %473, 0
  br i1 %475, label %488, label %476

476:                                              ; preds = %470
  %477 = zext i8 %473 to i64
  %478 = ptrtoint i8* %402 to i64
  %479 = sub i64 %29, %478
  %480 = icmp slt i64 %479, %477
  br i1 %480, label %481, label %485

481:                                              ; preds = %476
  %482 = trunc i64 %479 to i32
  store i32 %482, i32* %12, align 8
  %483 = shl i64 %479, 32
  %484 = ashr exact i64 %483, 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %43, i8* align 1 %402, i64 %484, i1 false)
  br label %510

485:                                              ; preds = %476
  %486 = call fastcc i32 @_ZN3WTFL22DecodeNonASCIISequenceEPKhj(i8* %402, i32 %474)
  %487 = icmp ugt i32 %486, -4
  br i1 %487, label %488, label %495

488:                                              ; preds = %470, %485
  %489 = phi i32 [ %486, %485 ], [ -1, %470 ]
  store i8 1, i8* %5, align 1
  br i1 %4, label %510, label %490

490:                                              ; preds = %488
  %491 = getelementptr inbounds i16, i16* %401, i64 1
  store i16 -3, i16* %401, align 2
  %492 = sext i32 %489 to i64
  %493 = sub nsw i64 0, %492
  %494 = getelementptr inbounds i8, i8* %402, i64 %493
  br label %466

495:                                              ; preds = %485
  %496 = getelementptr inbounds i8, i8* %402, i64 %477
  %497 = icmp ult i32 %486, 65536
  br i1 %497, label %498, label %501

498:                                              ; preds = %495
  %499 = trunc i32 %486 to i16
  %500 = getelementptr inbounds i16, i16* %401, i64 1
  store i16 %499, i16* %401, align 2
  br label %466

501:                                              ; preds = %495
  %502 = lshr i32 %486, 10
  %503 = trunc i32 %502 to i16
  %504 = add i16 %503, -10304
  %505 = getelementptr inbounds i16, i16* %401, i64 1
  store i16 %504, i16* %401, align 2
  %506 = trunc i32 %486 to i16
  %507 = and i16 %506, 1023
  %508 = or i16 %507, -9216
  %509 = getelementptr inbounds i16, i16* %401, i64 2
  store i16 %508, i16* %505, align 2
  br label %466

510:                                              ; preds = %452, %466, %488, %396, %481
  %511 = phi i8* [ %28, %481 ], [ %397, %396 ], [ %28, %452 ], [ %467, %466 ], [ %402, %488 ]
  %512 = phi i16* [ %401, %481 ], [ %398, %396 ], [ %454, %452 ], [ %468, %466 ], [ %401, %488 ]
  br i1 %11, label %513, label %516

513:                                              ; preds = %510
  %514 = load i32, i32* %12, align 8
  %515 = icmp eq i32 %514, 0
  br i1 %515, label %516, label %385

516:                                              ; preds = %513, %510, %390
  %517 = phi i16* [ %512, %513 ], [ %512, %510 ], [ %392, %390 ]
  br i1 %273, label %518, label %520

518:                                              ; preds = %516
  %519 = load i32, i32* inttoptr (i64 4 to i32*), align 4
  br label %527

520:                                              ; preds = %516
  %521 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %271, i64 0, i32 1
  %522 = load i32, i32* %521, align 4
  %523 = icmp eq i32 %522, 0
  br i1 %523, label %527, label %524

524:                                              ; preds = %520
  %525 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %271, i64 1
  %526 = ptrtoint %"class.WTF::StringImpl"* %525 to i64
  br label %527

527:                                              ; preds = %518, %520, %524
  %528 = phi i32 [ %522, %524 ], [ 0, %520 ], [ %519, %518 ]
  %529 = phi i64 [ %526, %524 ], [ 0, %520 ], [ 0, %518 ]
  %530 = ptrtoint i16* %517 to i64
  %531 = sub i64 %530, %529
  %532 = lshr exact i64 %531, 1
  %533 = trunc i64 %532 to i32
  %534 = icmp eq i32 %528, %533
  br i1 %534, label %551, label %535

535:                                              ; preds = %527
  %536 = call %"class.WTF::StringImpl"* @_ZNK3WTF10StringImpl9SubstringEjj(%"class.WTF::StringImpl"* %271, i32 0, i32 %533) #12
  %537 = ptrtoint %"class.WTF::StringImpl"* %536 to i64
  br i1 %273, label %551, label %538

538:                                              ; preds = %535
  %539 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %271, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %540 = load atomic i32, i32* %539 monotonic, align 4
  %541 = and i32 %540, 2
  %542 = icmp eq i32 %541, 0
  %543 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %271, i64 0, i32 0
  %544 = load i32, i32* %543, align 4
  br i1 %542, label %545, label %547

545:                                              ; preds = %538
  %546 = add i32 %544, -1
  store i32 %546, i32* %543, align 4
  br label %547

547:                                              ; preds = %545, %538
  %548 = phi i32 [ %546, %545 ], [ %544, %538 ]
  %549 = icmp eq i32 %548, 0
  br i1 %549, label %550, label %551

550:                                              ; preds = %547
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %271) #12
  br label %551

551:                                              ; preds = %527, %535, %547, %550
  %552 = phi i64 [ %272, %527 ], [ %537, %535 ], [ %537, %550 ], [ %537, %547 ]
  %553 = icmp eq i64 %552, 0
  br i1 %553, label %559, label %554

554:                                              ; preds = %551
  %555 = inttoptr i64 %552 to %"class.WTF::StringImpl"*
  %556 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %555, i64 0, i32 1
  %557 = load i32, i32* %556, align 4
  %558 = icmp eq i32 %557, 0
  br i1 %558, label %559, label %594

559:                                              ; preds = %554, %551
  %560 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %561 = icmp eq %"class.WTF::StringImpl"* %560, null
  br i1 %561, label %579, label %562

562:                                              ; preds = %559
  %563 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %560, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %564 = load atomic i32, i32* %563 monotonic, align 4
  %565 = and i32 %564, 2
  %566 = icmp eq i32 %565, 0
  br i1 %566, label %567, label %579

567:                                              ; preds = %562
  %568 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %560, i64 0, i32 0
  %569 = load i32, i32* %568, align 4
  %570 = zext i32 %569 to i33
  %571 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %570, i33 1) #12
  %572 = extractvalue { i33, i1 } %571, 1
  %573 = extractvalue { i33, i1 } %571, 0
  %574 = icmp slt i33 %573, 0
  %575 = or i1 %572, %574
  br i1 %575, label %576, label %577, !prof !2

576:                                              ; preds = %567
  call void @llvm.trap() #12
  unreachable

577:                                              ; preds = %567
  %578 = trunc i33 %573 to i32
  store i32 %578, i32* %568, align 4
  br label %579

579:                                              ; preds = %559, %562, %577
  %580 = inttoptr i64 %552 to %"class.WTF::StringImpl"*
  br i1 %553, label %594, label %581

581:                                              ; preds = %579
  %582 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %580, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %583 = load atomic i32, i32* %582 monotonic, align 4
  %584 = and i32 %583, 2
  %585 = icmp eq i32 %584, 0
  %586 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %580, i64 0, i32 0
  %587 = load i32, i32* %586, align 4
  br i1 %585, label %588, label %590

588:                                              ; preds = %581
  %589 = add i32 %587, -1
  store i32 %589, i32* %586, align 4
  br label %590

590:                                              ; preds = %588, %581
  %591 = phi i32 [ %589, %588 ], [ %587, %581 ]
  %592 = icmp eq i32 %591, 0
  br i1 %592, label %593, label %594

593:                                              ; preds = %590
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %580) #12
  br label %594

594:                                              ; preds = %554, %593, %590, %579, %250
  %595 = phi %"class.WTF::StringImpl"* [ %253, %250 ], [ %25, %579 ], [ %25, %590 ], [ %25, %593 ], [ %25, %554 ]
  %596 = phi %"class.WTF::StringImpl"* [ %254, %250 ], [ %560, %579 ], [ %560, %590 ], [ %560, %593 ], [ %555, %554 ]
  %597 = icmp eq %"class.WTF::StringImpl"* %595, null
  br i1 %597, label %611, label %598

598:                                              ; preds = %594
  %599 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %595, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %600 = load atomic i32, i32* %599 monotonic, align 4
  %601 = and i32 %600, 2
  %602 = icmp eq i32 %601, 0
  %603 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %595, i64 0, i32 0
  %604 = load i32, i32* %603, align 4
  br i1 %602, label %605, label %607

605:                                              ; preds = %598
  %606 = add i32 %604, -1
  store i32 %606, i32* %603, align 4
  br label %607

607:                                              ; preds = %605, %598
  %608 = phi i32 [ %606, %605 ], [ %604, %598 ]
  %609 = icmp eq i32 %608, 0
  br i1 %609, label %610, label %611

610:                                              ; preds = %607
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %595) #12
  br label %611

611:                                              ; preds = %594, %607, %610
  ret %"class.WTF::StringImpl"* %596
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF13TextCodecUTF86EncodeEPKDsjNS_19UnencodableHandlingE(%"class.std::__1::basic_string"* noalias sret, %"class.WTF::TextCodecUTF8"*, i16*, i32, i32) unnamed_addr #1 align 2 {
  tail call void @_ZN3WTF13TextCodecUTF812EncodeCommonIDsEENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKT_j(%"class.std::__1::basic_string"* sret %0, %"class.WTF::TextCodecUTF8"* %1, i16* %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13TextCodecUTF812EncodeCommonIDsEENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKT_j(%"class.std::__1::basic_string"* noalias sret, %"class.WTF::TextCodecUTF8"*, i16*, i32) local_unnamed_addr #1 comdat align 2 {
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #12
  %9 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %9, align 8
  %10 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %3, 1431655765
  br i1 %11, label %13, label %12

12:                                               ; preds = %4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %9, align 8
  br label %22

13:                                               ; preds = %4
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %3) #12
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 1431655765) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %5, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6, i64 0, i64 0), i8* %14, i8* %15) #12
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %9, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.7, i64 0, i64 0), i32 476, %"class.logging::CheckOpResult"* nonnull %6) #12
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #12
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #12
  %23 = mul i32 %3, 3
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %29, label %25

25:                                               ; preds = %22
  %26 = zext i32 %23 to i64
  %27 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %26) #12
  %28 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #12
  br label %29

29:                                               ; preds = %22, %25
  %30 = phi i8* [ null, %22 ], [ %28, %25 ]
  %31 = phi i64 [ 0, %22 ], [ %26, %25 ]
  call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 0, i64 %31, i1 false) #12
  %32 = icmp eq i32 %3, 0
  br i1 %32, label %33, label %37

33:                                               ; preds = %29
  %34 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %35 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %34, i64 0, i32 1, i32 0
  store i8 0, i8* %35, align 1
  %36 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %141

37:                                               ; preds = %29, %115
  %38 = phi i32 [ %118, %115 ], [ 0, %29 ]
  %39 = phi i32 [ %62, %115 ], [ 0, %29 ]
  %40 = add nuw i32 %39, 1
  %41 = zext i32 %39 to i64
  %42 = getelementptr inbounds i16, i16* %2, i64 %41
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i32
  %45 = and i32 %44, 64512
  %46 = icmp ne i32 %45, 55296
  %47 = icmp eq i32 %40, %3
  %48 = or i1 %47, %46
  br i1 %48, label %61, label %49

49:                                               ; preds = %37
  %50 = zext i32 %40 to i64
  %51 = getelementptr inbounds i16, i16* %2, i64 %50
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i32
  %54 = and i32 %53, 64512
  %55 = icmp eq i32 %54, 56320
  br i1 %55, label %56, label %61

56:                                               ; preds = %49
  %57 = add i32 %39, 2
  %58 = shl nuw nsw i32 %44, 10
  %59 = add nsw i32 %58, -56613888
  %60 = add nsw i32 %59, %53
  br label %61

61:                                               ; preds = %37, %49, %56
  %62 = phi i32 [ %40, %37 ], [ %57, %56 ], [ %40, %49 ]
  %63 = phi i32 [ %44, %37 ], [ %60, %56 ], [ %44, %49 ]
  %64 = and i32 %63, -2048
  %65 = icmp eq i32 %64, 55296
  %66 = select i1 %65, i32 65533, i32 %63
  %67 = icmp ult i32 %66, 128
  br i1 %67, label %68, label %71

68:                                               ; preds = %61
  %69 = trunc i32 %66 to i8
  %70 = add i32 %38, 1
  br label %115

71:                                               ; preds = %61
  %72 = icmp ult i32 %66, 2048
  br i1 %72, label %73, label %77

73:                                               ; preds = %71
  %74 = lshr i32 %66, 6
  %75 = trunc i32 %74 to i8
  %76 = or i8 %75, -64
  br label %105

77:                                               ; preds = %71
  %78 = icmp ult i32 %66, 65536
  br i1 %78, label %79, label %83

79:                                               ; preds = %77
  %80 = lshr i32 %66, 12
  %81 = trunc i32 %80 to i8
  %82 = or i8 %81, -32
  br label %94

83:                                               ; preds = %77
  %84 = lshr i32 %66, 18
  %85 = trunc i32 %84 to i8
  %86 = or i8 %85, -16
  %87 = add i32 %38, 1
  %88 = zext i32 %38 to i64
  %89 = getelementptr inbounds i8, i8* %30, i64 %88
  store i8 %86, i8* %89, align 1
  %90 = lshr i32 %66, 12
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 63
  %93 = or i8 %92, -128
  br label %94

94:                                               ; preds = %83, %79
  %95 = phi i32 [ 2, %83 ], [ 1, %79 ]
  %96 = phi i32 [ %87, %83 ], [ %38, %79 ]
  %97 = phi i8 [ %93, %83 ], [ %82, %79 ]
  %98 = add i32 %38, %95
  %99 = zext i32 %96 to i64
  %100 = getelementptr inbounds i8, i8* %30, i64 %99
  store i8 %97, i8* %100, align 1
  %101 = lshr i32 %66, 6
  %102 = trunc i32 %101 to i8
  %103 = and i8 %102, 63
  %104 = or i8 %103, -128
  br label %105

105:                                              ; preds = %94, %73
  %106 = phi i32 [ %98, %94 ], [ %38, %73 ]
  %107 = phi i8 [ %104, %94 ], [ %76, %73 ]
  %108 = zext i32 %106 to i64
  %109 = getelementptr inbounds i8, i8* %30, i64 %108
  store i8 %107, i8* %109, align 1
  %110 = add i32 %106, 1
  %111 = trunc i32 %66 to i8
  %112 = and i8 %111, 63
  %113 = or i8 %112, -128
  %114 = add i32 %106, 2
  br label %115

115:                                              ; preds = %105, %68
  %116 = phi i32 [ %110, %105 ], [ %38, %68 ]
  %117 = phi i8 [ %113, %105 ], [ %69, %68 ]
  %118 = phi i32 [ %114, %105 ], [ %70, %68 ]
  %119 = zext i32 %116 to i64
  %120 = getelementptr inbounds i8, i8* %30, i64 %119
  store i8 %117, i8* %120, align 1
  %121 = icmp ult i32 %62, %3
  br i1 %121, label %37, label %122

122:                                              ; preds = %115
  %123 = zext i32 %118 to i64
  %124 = icmp ult i32 %118, 23
  br i1 %124, label %133, label %125

125:                                              ; preds = %122
  %126 = add nuw nsw i64 %123, 16
  %127 = and i64 %126, 8589934576
  %128 = call i8* @_Znwm(i64 %127) #13
  %129 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %128, i8** %129, align 8
  %130 = or i64 %127, -9223372036854775808
  %131 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %130, i64* %131, align 8
  %132 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %123, i64* %132, align 8
  br label %139

133:                                              ; preds = %122
  %134 = trunc i32 %118 to i8
  %135 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %136 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %135, i64 0, i32 1, i32 0
  store i8 %134, i8* %136, align 1
  %137 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %138 = icmp eq i32 %118, 0
  br i1 %138, label %141, label %139

139:                                              ; preds = %133, %125
  %140 = phi i8* [ %128, %125 ], [ %137, %133 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %140, i8* align 1 %30, i64 %123, i1 false) #12
  br label %141

141:                                              ; preds = %33, %133, %139
  %142 = phi i64 [ %123, %133 ], [ %123, %139 ], [ 0, %33 ]
  %143 = phi i8* [ %137, %133 ], [ %140, %139 ], [ %36, %33 ]
  %144 = getelementptr inbounds i8, i8* %143, i64 %142
  store i8 0, i8* %144, align 1
  %145 = icmp eq i8* %30, null
  br i1 %145, label %147, label %146, !prof !11

146:                                              ; preds = %141
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %30) #12
  br label %147

147:                                              ; preds = %141, %146
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF13TextCodecUTF86EncodeEPKhjNS_19UnencodableHandlingE(%"class.std::__1::basic_string"* noalias sret, %"class.WTF::TextCodecUTF8"*, i8*, i32, i32) unnamed_addr #1 align 2 {
  tail call void @_ZN3WTF13TextCodecUTF812EncodeCommonIhEENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKT_j(%"class.std::__1::basic_string"* sret %0, %"class.WTF::TextCodecUTF8"* %1, i8* %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13TextCodecUTF812EncodeCommonIhEENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPKT_j(%"class.std::__1::basic_string"* noalias sret, %"class.WTF::TextCodecUTF8"*, i8*, i32) local_unnamed_addr #1 comdat align 2 {
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #12
  %9 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %9, align 8
  %10 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %3, 1431655765
  br i1 %11, label %13, label %12

12:                                               ; preds = %4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %9, align 8
  br label %22

13:                                               ; preds = %4
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %3) #12
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 1431655765) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %5, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6, i64 0, i64 0), i8* %14, i8* %15) #12
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %9, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.7, i64 0, i64 0), i32 476, %"class.logging::CheckOpResult"* nonnull %6) #12
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #12
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #12
  %23 = mul i32 %3, 3
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %29, label %25

25:                                               ; preds = %22
  %26 = zext i32 %23 to i64
  %27 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %26) #12
  %28 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #12
  br label %29

29:                                               ; preds = %22, %25
  %30 = phi i8* [ null, %22 ], [ %28, %25 ]
  %31 = phi i64 [ 0, %22 ], [ %26, %25 ]
  call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 0, i64 %31, i1 false) #12
  %32 = icmp eq i32 %3, 0
  br i1 %32, label %33, label %37

33:                                               ; preds = %29
  %34 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %35 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %34, i64 0, i32 1, i32 0
  store i8 0, i8* %35, align 1
  %36 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  br label %81

37:                                               ; preds = %29
  %38 = zext i32 %3 to i64
  br label %39

39:                                               ; preds = %54, %37
  %40 = phi i64 [ 0, %37 ], [ %42, %54 ]
  %41 = phi i32 [ 0, %37 ], [ %58, %54 ]
  %42 = add nuw nsw i64 %40, 1
  %43 = getelementptr inbounds i8, i8* %2, i64 %40
  %44 = load i8, i8* %43, align 1
  %45 = icmp sgt i8 %44, -1
  br i1 %45, label %54, label %46

46:                                               ; preds = %39
  %47 = lshr i8 %44, 6
  %48 = or i8 %47, -64
  %49 = zext i32 %41 to i64
  %50 = getelementptr inbounds i8, i8* %30, i64 %49
  store i8 %48, i8* %50, align 1
  %51 = add i32 %41, 1
  %52 = and i8 %44, 63
  %53 = or i8 %52, -128
  br label %54

54:                                               ; preds = %39, %46
  %55 = phi i32 [ 2, %46 ], [ 1, %39 ]
  %56 = phi i32 [ %51, %46 ], [ %41, %39 ]
  %57 = phi i8 [ %53, %46 ], [ %44, %39 ]
  %58 = add i32 %41, %55
  %59 = zext i32 %56 to i64
  %60 = getelementptr inbounds i8, i8* %30, i64 %59
  store i8 %57, i8* %60, align 1
  %61 = icmp eq i64 %42, %38
  br i1 %61, label %62, label %39

62:                                               ; preds = %54
  %63 = zext i32 %58 to i64
  %64 = icmp ult i32 %58, 23
  br i1 %64, label %73, label %65

65:                                               ; preds = %62
  %66 = add nuw nsw i64 %63, 16
  %67 = and i64 %66, 8589934576
  %68 = call i8* @_Znwm(i64 %67) #13
  %69 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %68, i8** %69, align 8
  %70 = or i64 %67, -9223372036854775808
  %71 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %70, i64* %71, align 8
  %72 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %63, i64* %72, align 8
  br label %79

73:                                               ; preds = %62
  %74 = trunc i32 %58 to i8
  %75 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %76 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %75, i64 0, i32 1, i32 0
  store i8 %74, i8* %76, align 1
  %77 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %78 = icmp eq i32 %58, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %73, %65
  %80 = phi i8* [ %68, %65 ], [ %77, %73 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %80, i8* align 1 %30, i64 %63, i1 false) #12
  br label %81

81:                                               ; preds = %33, %73, %79
  %82 = phi i64 [ %63, %73 ], [ %63, %79 ], [ 0, %33 ]
  %83 = phi i8* [ %77, %73 ], [ %80, %79 ], [ %36, %33 ]
  %84 = getelementptr inbounds i8, i8* %83, i64 %82
  store i8 0, i8* %84, align 1
  %85 = icmp eq i8* %30, null
  br i1 %85, label %87, label %86, !prof !11

86:                                               ; preds = %81
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %30) #12
  br label %87

87:                                               ; preds = %81, %86
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden { i32, i64 } @_ZN3WTF13TextCodecUTF810EncodeIntoEPKDsjPhm(%"class.WTF::TextCodecUTF8"*, i16*, i32, i8*, i64) unnamed_addr #1 align 2 {
  %6 = tail call { i32, i64 } @_ZN3WTF13TextCodecUTF816EncodeIntoCommonIDsEENS_9TextCodec16EncodeIntoResultEPKT_jPhm(%"class.WTF::TextCodecUTF8"* %0, i16* %1, i32 %2, i8* %3, i64 %4)
  ret { i32, i64 } %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i32, i64 } @_ZN3WTF13TextCodecUTF816EncodeIntoCommonIDsEENS_9TextCodec16EncodeIntoResultEPKT_jPhm(%"class.WTF::TextCodecUTF8"*, i16*, i32, i8*, i64) local_unnamed_addr #1 comdat align 2 {
  %6 = icmp ne i32 %2, 0
  %7 = icmp ne i64 %4, 0
  %8 = and i1 %7, %6
  br i1 %8, label %9, label %111

9:                                                ; preds = %5, %102
  %10 = phi i32 [ %34, %102 ], [ 0, %5 ]
  %11 = phi i64 [ %106, %102 ], [ 0, %5 ]
  %12 = add nuw i32 %10, 1
  %13 = zext i32 %10 to i64
  %14 = getelementptr inbounds i16, i16* %1, i64 %13
  %15 = load i16, i16* %14, align 2
  %16 = zext i16 %15 to i32
  %17 = and i32 %16, 64512
  %18 = icmp ne i32 %17, 55296
  %19 = icmp eq i32 %12, %2
  %20 = or i1 %19, %18
  br i1 %20, label %33, label %21

21:                                               ; preds = %9
  %22 = zext i32 %12 to i64
  %23 = getelementptr inbounds i16, i16* %1, i64 %22
  %24 = load i16, i16* %23, align 2
  %25 = zext i16 %24 to i32
  %26 = and i32 %25, 64512
  %27 = icmp eq i32 %26, 56320
  br i1 %27, label %28, label %33

28:                                               ; preds = %21
  %29 = add i32 %10, 2
  %30 = shl nuw nsw i32 %16, 10
  %31 = add nsw i32 %30, -56613888
  %32 = add nsw i32 %31, %25
  br label %33

33:                                               ; preds = %9, %21, %28
  %34 = phi i32 [ %12, %9 ], [ %29, %28 ], [ %12, %21 ]
  %35 = phi i32 [ %16, %9 ], [ %32, %28 ], [ %16, %21 ]
  %36 = and i32 %35, -2048
  %37 = icmp eq i32 %36, 55296
  %38 = select i1 %37, i32 65533, i32 %35
  %39 = icmp ult i32 %38, 128
  br i1 %39, label %40, label %42

40:                                               ; preds = %33
  %41 = trunc i32 %38 to i8
  br label %102

42:                                               ; preds = %33
  %43 = icmp ult i32 %38, 2048
  br i1 %43, label %44, label %55

44:                                               ; preds = %42
  %45 = add nuw i64 %11, 1
  %46 = icmp ult i64 %45, %4
  br i1 %46, label %47, label %55

47:                                               ; preds = %44
  %48 = lshr i32 %38, 6
  %49 = trunc i32 %48 to i8
  %50 = or i8 %49, -64
  %51 = getelementptr inbounds i8, i8* %3, i64 %11
  store i8 %50, i8* %51, align 1
  %52 = trunc i32 %38 to i8
  %53 = and i8 %52, 63
  %54 = or i8 %53, -128
  br label %102

55:                                               ; preds = %44, %42
  %56 = icmp ult i32 %38, 55296
  %57 = and i32 %38, -8192
  %58 = icmp eq i32 %57, 57344
  %59 = or i1 %56, %58
  %60 = add i64 %11, 2
  %61 = icmp ult i64 %60, %4
  %62 = and i1 %61, %59
  br i1 %62, label %63, label %77

63:                                               ; preds = %55
  %64 = lshr i32 %38, 12
  %65 = trunc i32 %64 to i8
  %66 = or i8 %65, -32
  %67 = add nuw i64 %11, 1
  %68 = getelementptr inbounds i8, i8* %3, i64 %11
  store i8 %66, i8* %68, align 1
  %69 = lshr i32 %38, 6
  %70 = trunc i32 %69 to i8
  %71 = and i8 %70, 63
  %72 = or i8 %71, -128
  %73 = getelementptr inbounds i8, i8* %3, i64 %67
  store i8 %72, i8* %73, align 1
  %74 = trunc i32 %38 to i8
  %75 = and i8 %74, 63
  %76 = or i8 %75, -128
  br label %102

77:                                               ; preds = %55
  %78 = add nsw i32 %38, -65536
  %79 = icmp ult i32 %78, 1048576
  %80 = add i64 %11, 3
  %81 = icmp ult i64 %80, %4
  %82 = and i1 %81, %79
  br i1 %82, label %83, label %111

83:                                               ; preds = %77
  %84 = lshr i32 %38, 18
  %85 = trunc i32 %84 to i8
  %86 = or i8 %85, -16
  %87 = add nuw i64 %11, 1
  %88 = getelementptr inbounds i8, i8* %3, i64 %11
  store i8 %86, i8* %88, align 1
  %89 = lshr i32 %38, 12
  %90 = trunc i32 %89 to i8
  %91 = and i8 %90, 63
  %92 = or i8 %91, -128
  %93 = getelementptr inbounds i8, i8* %3, i64 %87
  store i8 %92, i8* %93, align 1
  %94 = lshr i32 %38, 6
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 63
  %97 = or i8 %96, -128
  %98 = getelementptr inbounds i8, i8* %3, i64 %60
  store i8 %97, i8* %98, align 1
  %99 = trunc i32 %38 to i8
  %100 = and i8 %99, 63
  %101 = or i8 %100, -128
  br label %102

102:                                              ; preds = %47, %83, %63, %40
  %103 = phi i64 [ 2, %47 ], [ 4, %83 ], [ 3, %63 ], [ 1, %40 ]
  %104 = phi i64 [ %45, %47 ], [ %80, %83 ], [ %60, %63 ], [ %11, %40 ]
  %105 = phi i8 [ %54, %47 ], [ %101, %83 ], [ %76, %63 ], [ %41, %40 ]
  %106 = add i64 %11, %103
  %107 = getelementptr inbounds i8, i8* %3, i64 %104
  store i8 %105, i8* %107, align 1
  %108 = icmp ult i32 %34, %2
  %109 = icmp ult i64 %106, %4
  %110 = and i1 %109, %108
  br i1 %110, label %9, label %111

111:                                              ; preds = %77, %102, %5
  %112 = phi i64 [ 0, %5 ], [ %11, %77 ], [ %106, %102 ]
  %113 = phi i32 [ 0, %5 ], [ %10, %77 ], [ %34, %102 ]
  %114 = insertvalue { i32, i64 } undef, i32 %113, 0
  %115 = insertvalue { i32, i64 } %114, i64 %112, 1
  ret { i32, i64 } %115
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden { i32, i64 } @_ZN3WTF13TextCodecUTF810EncodeIntoEPKhjPhm(%"class.WTF::TextCodecUTF8"* nocapture readnone, i8* nocapture readonly, i32, i8* nocapture, i64) unnamed_addr #4 align 2 {
  %6 = icmp ne i32 %2, 0
  %7 = icmp ne i64 %4, 0
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %49

9:                                                ; preds = %5
  %10 = zext i32 %2 to i64
  br label %11

11:                                               ; preds = %37, %9
  %12 = phi i64 [ 0, %9 ], [ %14, %37 ]
  %13 = phi i64 [ 0, %9 ], [ %40, %37 ]
  %14 = add nuw nsw i64 %12, 1
  %15 = getelementptr inbounds i8, i8* %1, i64 %12
  %16 = load i8, i8* %15, align 1
  %17 = icmp sgt i8 %16, -1
  %18 = add nuw i64 %13, 1
  br i1 %17, label %37, label %19

19:                                               ; preds = %11
  %20 = icmp ult i64 %18, %4
  br i1 %20, label %26, label %21

21:                                               ; preds = %19
  %22 = add i64 %13, 2
  %23 = icmp ult i64 %22, %4
  br i1 %23, label %24, label %45

24:                                               ; preds = %21
  %25 = getelementptr inbounds i8, i8* %3, i64 %13
  store i8 -32, i8* %25, align 1
  br label %26

26:                                               ; preds = %19, %24
  %27 = phi i8 [ -128, %24 ], [ -64, %19 ]
  %28 = phi i64 [ %18, %24 ], [ %13, %19 ]
  %29 = phi i64 [ 3, %24 ], [ 2, %19 ]
  %30 = phi i64 [ %22, %24 ], [ %18, %19 ]
  %31 = lshr i8 %16, 6
  %32 = or i8 %31, %27
  %33 = getelementptr inbounds i8, i8* %3, i64 %28
  store i8 %32, i8* %33, align 1
  %34 = and i8 %16, 63
  %35 = or i8 %34, -128
  %36 = add i64 %13, %29
  br label %37

37:                                               ; preds = %26, %11
  %38 = phi i64 [ %13, %11 ], [ %30, %26 ]
  %39 = phi i8 [ %16, %11 ], [ %35, %26 ]
  %40 = phi i64 [ %18, %11 ], [ %36, %26 ]
  %41 = getelementptr inbounds i8, i8* %3, i64 %38
  store i8 %39, i8* %41, align 1
  %42 = icmp ult i64 %14, %10
  %43 = icmp ult i64 %40, %4
  %44 = and i1 %42, %43
  br i1 %44, label %11, label %45

45:                                               ; preds = %37, %21
  %46 = phi i64 [ %13, %21 ], [ %40, %37 ]
  %47 = phi i64 [ %12, %21 ], [ %14, %37 ]
  %48 = trunc i64 %47 to i32
  br label %49

49:                                               ; preds = %5, %45
  %50 = phi i64 [ 0, %5 ], [ %46, %45 ]
  %51 = phi i32 [ 0, %5 ], [ %48, %45 ]
  %52 = insertvalue { i32, i64 } undef, i32 %51, 0
  %53 = insertvalue { i32, i64 } %52, i64 %50, 1
  ret { i32, i64 } %53
}

; Function Attrs: nounwind
declare void @_ZN3WTF9TextCodecD2Ev(%"class.WTF::TextCodec"*) unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13TextCodecUTF8D0Ev(%"class.WTF::TextCodecUTF8"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.WTF::TextCodecUTF8", %"class.WTF::TextCodecUTF8"* %0, i64 0, i32 0
  tail call void @_ZN3WTF9TextCodecD2Ev(%"class.WTF::TextCodec"* %2) #12
  %3 = bitcast %"class.WTF::TextCodecUTF8"* %0 to i8*
  tail call void @free(i8* %3) #12
  ret void
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #8

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #10

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32, i8** dereferenceable(8)) local_unnamed_addr #10

declare %"class.WTF::StringImpl"* @_ZNK3WTF10StringImpl9SubstringEjj(%"class.WTF::StringImpl"*, i32, i32) local_unnamed_addr #10

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** dereferenceable(8)) local_unnamed_addr #10

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #10

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #10

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #10

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #12
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #12
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.8, i64 0, i64 0), i8* %11, i8* %12) #12
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.9, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #12
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #12
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #12
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #12
  ret i64 %20
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #10

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #10

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #10

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #11

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #10

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { inlinehint norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !9}
!11 = !{!"branch_weights", i32 2000, i32 1}
