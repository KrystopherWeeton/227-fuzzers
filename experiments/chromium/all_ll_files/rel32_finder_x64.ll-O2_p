; ModuleID = '../../courgette/rel32_finder_x64.cc'
source_filename = "../../courgette/rel32_finder_x64.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.courgette::Rel32FinderX64" = type <{ %"class.courgette::Rel32Finder", i32, [4 x i8] }>
%"class.courgette::Rel32Finder" = type { i32 (...)**, i32, i32, %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN9courgette11Rel32FinderD2Ev = comdat any

$_ZN9courgette14Rel32FinderX64D0Ev = comdat any

$_ZN9courgette11Rel32FinderD0Ev = comdat any

$_ZTVN9courgette11Rel32FinderE = comdat any

@_ZTVN9courgette14Rel32FinderX64E = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.courgette::Rel32Finder"*)* @_ZN9courgette11Rel32FinderD2Ev to i8*), i8* bitcast (void (%"class.courgette::Rel32FinderX64"*)* @_ZN9courgette14Rel32FinderX64D0Ev to i8*), i8* bitcast (void (%"class.courgette::Rel32FinderX64"*, i8*, i8*, i32, i32, %"class.std::__1::vector"*)* @_ZN9courgette14Rel32FinderX644FindEPKhS2_jjRKNSt3__16vectorIjNS3_9allocatorIjEEEE to i8*)] }, align 8
@_ZTVN9courgette11Rel32FinderE = linkonce_odr hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.courgette::Rel32Finder"*)* @_ZN9courgette11Rel32FinderD2Ev to i8*), i8* bitcast (void (%"class.courgette::Rel32Finder"*)* @_ZN9courgette11Rel32FinderD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8

@_ZN9courgette14Rel32FinderX64C1Ejjj = hidden unnamed_addr alias void (%"class.courgette::Rel32FinderX64"*, i32, i32, i32), void (%"class.courgette::Rel32FinderX64"*, i32, i32, i32)* @_ZN9courgette14Rel32FinderX64C2Ejjj

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9courgette14Rel32FinderX64C2Ejjj(%"class.courgette::Rel32FinderX64"*, i32, i32, i32) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.courgette::Rel32FinderX64", %"class.courgette::Rel32FinderX64"* %0, i64 0, i32 0
  tail call void @_ZN9courgette11Rel32FinderC2Ejj(%"class.courgette::Rel32Finder"* %5, i32 %1, i32 %2) #8
  %6 = getelementptr inbounds %"class.courgette::Rel32FinderX64", %"class.courgette::Rel32FinderX64"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN9courgette14Rel32FinderX64E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = getelementptr inbounds %"class.courgette::Rel32FinderX64", %"class.courgette::Rel32FinderX64"* %0, i64 0, i32 1
  store i32 %3, i32* %7, align 8
  ret void
}

declare void @_ZN9courgette11Rel32FinderC2Ejj(%"class.courgette::Rel32Finder"*, i32, i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9courgette14Rel32FinderX644FindEPKhS2_jjRKNSt3__16vectorIjNS3_9allocatorIjEEEE(%"class.courgette::Rel32FinderX64"*, i8*, i8* readnone, i32, i32, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %7 = icmp ult i8* %1, %2
  br i1 %7, label %8, label %209

8:                                                ; preds = %6
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %10 = load i32*, i32** %9, align 8
  %11 = zext i32 %3 to i64
  %12 = sub nsw i64 0, %11
  %13 = getelementptr inbounds i8, i8* %1, i64 %12
  %14 = ptrtoint i8* %13 to i64
  %15 = getelementptr inbounds %"class.courgette::Rel32FinderX64", %"class.courgette::Rel32FinderX64"* %0, i64 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.courgette::Rel32FinderX64", %"class.courgette::Rel32FinderX64"* %0, i64 0, i32 0, i32 2
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %18 = getelementptr inbounds %"class.courgette::Rel32FinderX64", %"class.courgette::Rel32FinderX64"* %0, i64 0, i32 1
  %19 = getelementptr inbounds %"class.courgette::Rel32FinderX64", %"class.courgette::Rel32FinderX64"* %0, i64 0, i32 0, i32 3
  %20 = getelementptr inbounds %"class.courgette::Rel32FinderX64", %"class.courgette::Rel32FinderX64"* %0, i64 0, i32 0, i32 3, i32 0, i32 1
  %21 = getelementptr inbounds %"class.courgette::Rel32FinderX64", %"class.courgette::Rel32FinderX64"* %0, i64 0, i32 0, i32 3, i32 0, i32 2, i32 0, i32 0
  %22 = bitcast i32** %20 to i64*
  %23 = bitcast %"class.std::__1::vector"* %19 to i64*
  %24 = bitcast i32** %21 to i64*
  %25 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %19, i64 0, i32 0, i32 0
  br label %26

26:                                               ; preds = %8, %205
  %27 = phi i8* [ %1, %8 ], [ %207, %205 ]
  %28 = phi i32* [ %10, %8 ], [ %206, %205 ]
  %29 = ptrtoint i8* %27 to i64
  %30 = sub i64 %29, %14
  %31 = trunc i64 %30 to i32
  %32 = load i32, i32* %15, align 8
  %33 = icmp ugt i32 %32, %31
  br i1 %33, label %41, label %34

34:                                               ; preds = %26
  %35 = load i32, i32* %16, align 4
  %36 = icmp ugt i32 %35, %31
  br i1 %36, label %37, label %41

37:                                               ; preds = %34
  %38 = sub i32 %35, %31
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %27, i64 %39
  br label %205

41:                                               ; preds = %26, %34
  %42 = getelementptr inbounds i8, i8* %27, i64 5
  %43 = icmp ugt i8* %42, %2
  br i1 %43, label %50, label %44

44:                                               ; preds = %41
  %45 = load i8, i8* %27, align 1
  %46 = and i8 %45, -2
  %47 = icmp eq i8 %46, -24
  %48 = getelementptr inbounds i8, i8* %27, i64 1
  %49 = select i1 %47, i8* %48, i8* null
  br label %50

50:                                               ; preds = %44, %41
  %51 = phi i8* [ null, %41 ], [ %49, %44 ]
  %52 = getelementptr inbounds i8, i8* %27, i64 6
  %53 = icmp ugt i8* %52, %2
  br i1 %53, label %76, label %54

54:                                               ; preds = %50
  %55 = load i8, i8* %27, align 1
  switch i8 %55, label %76 [
    i8 15, label %56
    i8 -1, label %66
    i8 -119, label %69
    i8 -117, label %69
    i8 -115, label %69
  ]

56:                                               ; preds = %54
  %57 = getelementptr inbounds i8, i8* %27, i64 1
  %58 = load i8, i8* %57, align 1
  %59 = and i8 %58, -16
  %60 = icmp eq i8 %59, -128
  br i1 %60, label %61, label %76

61:                                               ; preds = %56
  %62 = and i8 %58, -2
  %63 = icmp eq i8 %62, -118
  %64 = getelementptr inbounds i8, i8* %27, i64 2
  %65 = select i1 %63, i8* %51, i8* %64
  br label %76

66:                                               ; preds = %54
  %67 = getelementptr inbounds i8, i8* %27, i64 1
  %68 = load i8, i8* %67, align 1
  switch i8 %68, label %76 [
    i8 21, label %74
    i8 37, label %74
  ]

69:                                               ; preds = %54, %54, %54
  %70 = getelementptr inbounds i8, i8* %27, i64 1
  %71 = load i8, i8* %70, align 1
  %72 = and i8 %71, -57
  %73 = icmp eq i8 %72, 5
  br i1 %73, label %74, label %76

74:                                               ; preds = %66, %66, %69
  %75 = getelementptr inbounds i8, i8* %27, i64 2
  br label %76

76:                                               ; preds = %54, %56, %66, %61, %50, %74, %69
  %77 = phi i8* [ %75, %74 ], [ %51, %69 ], [ %51, %50 ], [ %65, %61 ], [ %51, %66 ], [ %51, %56 ], [ %51, %54 ]
  %78 = phi i8 [ 1, %74 ], [ 0, %69 ], [ 0, %50 ], [ 0, %61 ], [ 0, %66 ], [ 0, %56 ], [ 0, %54 ]
  %79 = getelementptr inbounds i8, i8* %27, i64 7
  %80 = icmp ugt i8* %79, %2
  br i1 %80, label %98, label %81

81:                                               ; preds = %76
  %82 = load i8, i8* %27, align 1
  %83 = and i8 %82, -14
  %84 = icmp eq i8 %83, 64
  %85 = icmp eq i8 %82, 102
  %86 = or i1 %85, %84
  br i1 %86, label %87, label %98

87:                                               ; preds = %81
  %88 = getelementptr inbounds i8, i8* %27, i64 1
  %89 = load i8, i8* %88, align 1
  switch i8 %89, label %98 [
    i8 -119, label %90
    i8 -117, label %90
    i8 -115, label %90
  ]

90:                                               ; preds = %87, %87, %87
  %91 = getelementptr inbounds i8, i8* %27, i64 2
  %92 = load i8, i8* %91, align 1
  %93 = and i8 %92, -57
  %94 = icmp eq i8 %93, 5
  %95 = getelementptr inbounds i8, i8* %27, i64 3
  %96 = select i1 %94, i8* %95, i8* %77
  %97 = select i1 %94, i8 1, i8 %78
  br label %98

98:                                               ; preds = %90, %87, %81, %76
  %99 = phi i8* [ %77, %76 ], [ %77, %81 ], [ %77, %87 ], [ %96, %90 ]
  %100 = phi i8 [ %78, %76 ], [ %78, %81 ], [ %78, %87 ], [ %97, %90 ]
  %101 = icmp eq i8* %99, null
  br i1 %101, label %202, label %102

102:                                              ; preds = %98
  %103 = ptrtoint i8* %99 to i64
  %104 = sub i64 %103, %14
  %105 = trunc i64 %104 to i32
  %106 = load i32*, i32** %17, align 8
  %107 = icmp eq i32* %28, %106
  br i1 %107, label %125, label %108

108:                                              ; preds = %102
  %109 = add i32 %105, -3
  br label %110

110:                                              ; preds = %108, %114
  %111 = phi i32* [ %28, %108 ], [ %115, %114 ]
  %112 = load i32, i32* %111, align 4
  %113 = icmp ult i32 %112, %109
  br i1 %113, label %114, label %117

114:                                              ; preds = %110
  %115 = getelementptr inbounds i32, i32* %111, i64 1
  %116 = icmp eq i32* %115, %106
  br i1 %116, label %125, label %110

117:                                              ; preds = %110
  %118 = add i32 %105, 4
  %119 = icmp ult i32 %112, %118
  br i1 %119, label %120, label %125

120:                                              ; preds = %117
  %121 = sub i32 4, %31
  %122 = add i32 %121, %112
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %27, i64 %123
  br label %205

125:                                              ; preds = %114, %102, %117
  %126 = phi i32* [ %111, %117 ], [ %28, %102 ], [ %106, %114 ]
  %127 = add i32 %105, 4
  %128 = bitcast i8* %99 to i32*
  %129 = load i32, i32* %128, align 4
  %130 = add i32 %127, %129
  %131 = load i32, i32* %18, align 8
  %132 = icmp ult i32 %130, %131
  br i1 %132, label %133, label %202

133:                                              ; preds = %125
  %134 = and i8 %100, 1
  %135 = icmp eq i8 %134, 0
  br i1 %135, label %136, label %140

136:                                              ; preds = %133
  %137 = icmp uge i32 %130, %3
  %138 = icmp ult i32 %130, %4
  %139 = and i1 %137, %138
  br i1 %139, label %140, label %202

140:                                              ; preds = %136, %133
  %141 = load i32*, i32** %20, align 8
  %142 = load i32*, i32** %21, align 8
  %143 = icmp eq i32* %141, %142
  %144 = ptrtoint i32* %142 to i64
  br i1 %143, label %148, label %145

145:                                              ; preds = %140
  store i32 %105, i32* %141, align 4
  %146 = getelementptr inbounds i32, i32* %141, i64 1
  %147 = ptrtoint i32* %146 to i64
  store i64 %147, i64* %22, align 8
  br label %200

148:                                              ; preds = %140
  %149 = ptrtoint i32* %141 to i64
  %150 = load i64, i64* %23, align 8
  %151 = sub i64 %149, %150
  %152 = ashr exact i64 %151, 2
  %153 = add nsw i64 %152, 1
  %154 = icmp ugt i64 %153, 4611686018427387903
  br i1 %154, label %155, label %157

155:                                              ; preds = %148
  %156 = bitcast %"class.std::__1::vector"* %19 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %156) #9
  unreachable

157:                                              ; preds = %148
  %158 = sub i64 %144, %150
  %159 = ashr exact i64 %158, 2
  %160 = icmp ult i64 %159, 2305843009213693951
  br i1 %160, label %161, label %169

161:                                              ; preds = %157
  %162 = ashr exact i64 %158, 1
  %163 = icmp ult i64 %162, %153
  %164 = select i1 %163, i64 %153, i64 %162
  %165 = icmp eq i64 %164, 0
  br i1 %165, label %174, label %166

166:                                              ; preds = %161
  %167 = icmp ugt i64 %164, 4611686018427387903
  br i1 %167, label %168, label %169

168:                                              ; preds = %166
  tail call void @abort() #9
  unreachable

169:                                              ; preds = %166, %157
  %170 = phi i64 [ %164, %166 ], [ 4611686018427387903, %157 ]
  %171 = shl i64 %170, 2
  %172 = tail call i8* @_Znwm(i64 %171) #10
  %173 = bitcast i8* %172 to i32*
  br label %174

174:                                              ; preds = %169, %161
  %175 = phi i64 [ %170, %169 ], [ 0, %161 ]
  %176 = phi i32* [ %173, %169 ], [ null, %161 ]
  %177 = getelementptr inbounds i32, i32* %176, i64 %152
  %178 = getelementptr inbounds i32, i32* %176, i64 %175
  %179 = ptrtoint i32* %178 to i64
  store i32 %105, i32* %177, align 4
  %180 = getelementptr inbounds i32, i32* %177, i64 1
  %181 = ptrtoint i32* %180 to i64
  %182 = load i32*, i32** %25, align 8
  %183 = load i64, i64* %22, align 8
  %184 = ptrtoint i32* %182 to i64
  %185 = sub i64 %183, %184
  %186 = ashr exact i64 %185, 2
  %187 = sub nsw i64 0, %186
  %188 = getelementptr inbounds i32, i32* %177, i64 %187
  %189 = ptrtoint i32* %188 to i64
  %190 = icmp sgt i64 %185, 0
  br i1 %190, label %191, label %195

191:                                              ; preds = %174
  %192 = bitcast i32* %188 to i8*
  %193 = bitcast i32* %182 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %192, i8* align 4 %193, i64 %185, i1 false) #8
  %194 = load i32*, i32** %25, align 8
  br label %195

195:                                              ; preds = %191, %174
  %196 = phi i32* [ %182, %174 ], [ %194, %191 ]
  store i64 %189, i64* %23, align 8
  store i64 %181, i64* %22, align 8
  store i64 %179, i64* %24, align 8
  %197 = icmp eq i32* %196, null
  br i1 %197, label %200, label %198

198:                                              ; preds = %195
  %199 = bitcast i32* %196 to i8*
  tail call void @_ZdlPv(i8* %199) #10
  br label %200

200:                                              ; preds = %145, %195, %198
  %201 = getelementptr inbounds i8, i8* %99, i64 4
  br label %205

202:                                              ; preds = %125, %136, %98
  %203 = phi i32* [ %28, %98 ], [ %126, %136 ], [ %126, %125 ]
  %204 = getelementptr inbounds i8, i8* %27, i64 1
  br label %205

205:                                              ; preds = %120, %200, %202, %37
  %206 = phi i32* [ %203, %202 ], [ %28, %37 ], [ %126, %200 ], [ %111, %120 ]
  %207 = phi i8* [ %204, %202 ], [ %40, %37 ], [ %201, %200 ], [ %124, %120 ]
  %208 = icmp ult i8* %207, %2
  br i1 %208, label %26, label %209

209:                                              ; preds = %205, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9courgette11Rel32FinderD2Ev(%"class.courgette::Rel32Finder"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.courgette::Rel32Finder", %"class.courgette::Rel32Finder"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN9courgette11Rel32FinderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.courgette::Rel32Finder", %"class.courgette::Rel32Finder"* %0, i64 0, i32 3, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"class.courgette::Rel32Finder", %"class.courgette::Rel32Finder"* %0, i64 0, i32 3, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9courgette14Rel32FinderX64D0Ev(%"class.courgette::Rel32FinderX64"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.courgette::Rel32FinderX64", %"class.courgette::Rel32FinderX64"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN9courgette11Rel32FinderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.courgette::Rel32FinderX64", %"class.courgette::Rel32FinderX64"* %0, i64 0, i32 0, i32 3, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %"class.courgette::Rel32FinderX64", %"class.courgette::Rel32FinderX64"* %0, i64 0, i32 0, i32 3, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.courgette::Rel32FinderX64"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9courgette11Rel32FinderD0Ev(%"class.courgette::Rel32Finder"*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #9
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
