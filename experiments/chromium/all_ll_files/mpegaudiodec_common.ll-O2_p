; ModuleID = '../../third_party/ffmpeg/libavcodec/mpegaudiodec_common.c'
source_filename = "../../third_party/ffmpeg/libavcodec/mpegaudiodec_common.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.VLC = type { i32, [2 x i16]*, i32, i32 }

@division_tab3 = internal global [64 x i16] zeroinitializer, align 16
@division_tab5 = internal global [256 x i16] zeroinitializer, align 16
@division_tab9 = internal global [2048 x i16] zeroinitializer, align 16
@ff_division_tabs = hidden local_unnamed_addr constant [4 x i16*] [i16* getelementptr inbounds ([64 x i16], [64 x i16]* @division_tab3, i32 0, i32 0), i16* getelementptr inbounds ([256 x i16], [256 x i16]* @division_tab5, i32 0, i32 0), i16* null, i16* getelementptr inbounds ([2048 x i16], [2048 x i16]* @division_tab9, i32 0, i32 0)], align 16
@ff_slen_table = hidden local_unnamed_addr constant [2 x [16 x i8]] [[16 x i8] c"\00\00\00\00\03\01\01\01\02\02\02\03\03\03\04\04", [16 x i8] c"\00\01\02\03\00\01\02\03\01\02\03\01\02\03\02\03"], align 16
@ff_lsf_nsf_table = hidden local_unnamed_addr constant [6 x [3 x [4 x i8]]] [[3 x [4 x i8]] [[4 x i8] c"\06\05\05\05", [4 x i8] c"\09\09\09\09", [4 x i8] c"\06\09\09\09"], [3 x [4 x i8]] [[4 x i8] c"\06\05\07\03", [4 x i8] c"\09\09\0C\06", [4 x i8] c"\06\09\0C\06"], [3 x [4 x i8]] [[4 x i8] c"\0B\0A\00\00", [4 x i8] c"\12\12\00\00", [4 x i8] c"\0F\12\00\00"], [3 x [4 x i8]] [[4 x i8] c"\07\07\07\00", [4 x i8] c"\0C\0C\0C\00", [4 x i8] c"\06\0F\0C\00"], [3 x [4 x i8]] [[4 x i8] c"\06\06\06\03", [4 x i8] c"\0C\09\09\06", [4 x i8] c"\06\0C\09\06"], [3 x [4 x i8]] [[4 x i8] c"\08\08\05\00", [4 x i8] c"\0F\0C\09\00", [4 x i8] c"\06\12\09\00"]], align 16
@ff_mpa_huff_data = hidden local_unnamed_addr constant [32 x [2 x i8]] [[2 x i8] zeroinitializer, [2 x i8] c"\01\00", [2 x i8] c"\02\00", [2 x i8] c"\03\00", [2 x i8] zeroinitializer, [2 x i8] c"\04\00", [2 x i8] c"\05\00", [2 x i8] c"\06\00", [2 x i8] c"\07\00", [2 x i8] c"\08\00", [2 x i8] c"\09\00", [2 x i8] c"\0A\00", [2 x i8] c"\0B\00", [2 x i8] c"\0C\00", [2 x i8] zeroinitializer, [2 x i8] c"\0D\00", [2 x i8] c"\0E\01", [2 x i8] c"\0E\02", [2 x i8] c"\0E\03", [2 x i8] c"\0E\04", [2 x i8] c"\0E\06", [2 x i8] c"\0E\08", [2 x i8] c"\0E\0A", [2 x i8] c"\0E\0D", [2 x i8] c"\0F\04", [2 x i8] c"\0F\05", [2 x i8] c"\0F\06", [2 x i8] c"\0F\07", [2 x i8] c"\0F\08", [2 x i8] c"\0F\09", [2 x i8] c"\0F\0B", [2 x i8] c"\0F\0D"], align 16
@ff_band_size_long = hidden local_unnamed_addr constant [9 x [22 x i8]] [[22 x i8] c"\04\04\04\04\04\04\06\06\08\08\0A\0C\10\14\18\1C\22*26L\9E", [22 x i8] c"\04\04\04\04\04\04\06\06\06\08\0A\0C\10\12\16\1C\22(.66\C0", [22 x i8] c"\04\04\04\04\04\04\06\06\08\0A\0C\10\14\18\1E&.8DTf\1A", [22 x i8] c"\06\06\06\06\06\06\08\0A\0C\0E\10\14\18\1C &.4<D:6", [22 x i8] c"\06\06\06\06\06\06\08\0A\0C\0E\10\12\16\1A &.4@FL$", [22 x i8] c"\06\06\06\06\06\06\08\0A\0C\0E\10\14\18\1C &.4<D:6", [22 x i8] c"\06\06\06\06\06\06\08\0A\0C\0E\10\14\18\1C &.4<D:6", [22 x i8] c"\06\06\06\06\06\06\08\0A\0C\0E\10\14\18\1C &.4<D:6", [22 x i8] c"\0C\0C\0C\0C\0C\0C\10\14\18\1C (08@LZ\02\02\02\02\02"], align 16
@ff_band_size_short = hidden local_unnamed_addr constant [9 x [13 x i8]] [[13 x i8] c"\04\04\04\04\06\08\0A\0C\0E\12\16\1E8", [13 x i8] c"\04\04\04\04\06\06\0A\0C\0E\10\14\1AB", [13 x i8] c"\04\04\04\04\06\08\0C\10\14\1A\22*\0C", [13 x i8] c"\04\04\04\06\06\08\0A\0E\12\1A *\12", [13 x i8] c"\04\04\04\06\08\0A\0C\0E\12\18 ,\0C", [13 x i8] c"\04\04\04\06\08\0A\0C\0E\12\18\1E(\12", [13 x i8] c"\04\04\04\06\08\0A\0C\0E\12\18\1E(\12", [13 x i8] c"\04\04\04\06\08\0A\0C\0E\12\18\1E(\12", [13 x i8] c"\08\08\08\0C\10\14\18\1C$\02\02\02\1A"], align 16
@ff_mpa_pretab = hidden local_unnamed_addr constant [2 x [22 x i8]] [[22 x i8] zeroinitializer, [22 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\01\01\01\01\02\02\03\03\03\02\00"], align 16
@ff_mpegaudiodec_common_init_static.init_static_once = internal global i32 0, align 4
@ff_table_4_3_exp = common hidden local_unnamed_addr global [32828 x i8] zeroinitializer, align 16
@ff_table_4_3_value = common hidden local_unnamed_addr global [32828 x i32] zeroinitializer, align 16
@ff_scale_factor_modshift = common hidden local_unnamed_addr global [64 x i16] zeroinitializer, align 16
@ff_huff_vlc = common hidden global [16 x %struct.VLC] zeroinitializer, align 16
@ff_huff_quad_vlc = common hidden global [2 x %struct.VLC] zeroinitializer, align 16
@ff_band_index_long = common hidden local_unnamed_addr global [9 x [23 x i16]] zeroinitializer, align 16
@mpa_huffsymbols = internal unnamed_addr constant [1378 x i8] c"\11\01\10\00\22\02\12! \11\01\10\00\22\02\12! \10\11\01\003#21\13\030\22\12!\02 \11\01\10\003\03#20\131\22\02\12! \01\11\10\00UETS5D%R\15Q\054PC3$B\14A@\04#2\03\1310\22\12!\02 \11\01\10\00UTES5D%R\05\15Q4CP3$B\14A\04@#2\131\030\22\02 \12!\11\01\10\00UE5ST\05D%R\15Q4CP\04$B3@\14A#2\131\030\22\02\12! \11\01\10\00wgvWufGtVe7sFUTc'rd\07pbE5\06SD\17q6&%R\15Q4C\16a`\05P$B3\04\14A@#2\03\1310\22\12!\02 \11\01\10\00wgvufGtWUVe7sFET5S'rd\07q\17p6c`D%R\05\15b&\06\16aQ4PC3$B\14A\04@#2\131\030\22!\12\02 \11\01\10\00wgvWufGteV7sU'rFd\17q\07p6cETD\06\05&ba\16`5S%R\15Q4CP\04$B\143A#2@\030\131\22\12!\02 \00\11\01\10\FE\FC\FD\ED\FF\EF\DF\EE\CF\DE\BF\FB\CE\DC\AF\E9\EC\DD\FA\CD\BE\EB\9F\F9\EA\BD\DB\8F\F8\CC\AE\9E\8E\7F~\F7\DA\AD\BC\CB\F6o\E8_\9D\D9\F5\E7\AC\BBO\F4\CA\E6\F3?\8D\D8/\F2n\9C\0F\C9^\AB}\D7N\C8\D6>\B9\9B\AA\1F\F1\F0\BA\E5\E4\8Cm\E3\E2.\0E\1E\E1\E0]\D5|\C7M\8B\B8\D4\9A\A9l\C6=\D3{-\D2\1D\B7\5C\C5\99z\C3\A7\97K\D1\0D\D0\8A\A8L\C4k\B6<,\C2[\B5\89\1C\C1\98\0C\C0\B4j\A6y;\B3\88Z+\A5i\A4x\87\94wv\B2\1B\B1\0B\B0\96J:\A3Y\95*\A2\1A\A1\0Ah\A0\86I\939X\85g)\92Wu8\83fGtVes\19\91\09\90H\84rFd(\82\187'\17qU\07p6cET&b5\81\08\80\16a\06`SD%R\05\15Q4CP$B3\14A\04@#2\131\030\22\12!\02 \11\01\10\00\FF\EF\FE\DF\EE\FD\CF\FC\DE\ED\BF\FB\CE\EC\DD\AF\FA\BE\EB\CD\DC\9F\F9\EA\BD\DB\8F\F8\CC\9E\E9\7F\F7\AD\DA\BCo\AE\0F\CB\F6\8E\E8_\9D\F5~\E7\AC\CA\BB\D9\8DO\F4?\F3\D8\E6/\F2n\F0\1F\F1\9C\C9^\AB\BA\E5}\D7N\E4\8C\C8>m\D6\E3\9B\B9.\AA\E2\1E\E1\0E\E0]\D5|\C7M\8B\D4\B8\9A\A9l\C6=\D3\D2-\0D\1D{\B7\D1\5C\D0\C5\8A\A8L\C4k\B6\99\0C<\C3z\A7\A6\C0\0B\C2,[\B5\1C\89\98\C1K\B4j;y\B3\97\88+Z\B2\A5\1B\B1\B0i\96J\A4x\87:\A3Y\95*\A2\1A\A1\0A\A0h\86I\949\93w\09X\85)gv\92\91\19\90H\84Wu8\83fG(\82\18\81t\08\80Ve7sF'rd\17Uq\07p6cET&b\16\06`5aSD%R\15Q\05P4C$B3A\14\04#2@\03\1310\22\12!\02 \11\01\10\00\EF\FE\DF\FD\CF\FC\BF\FB\AF\FA\9F\F9\F8\8F\7F\F7o\F6\FF_\F5O\F4\F3\F0?\CE\EC\DD\DE\E9\EA\D9\EE\ED\EB\BE\CD\DC\DB\AE\CC\AD\DA~\AC\CA\C9}^\BD\F2/\0F\1F\F1\9E\BC\CB\8E\E8\9D\E7\BB\8D\D8n\E6\9C\AB\BA\E5\D7N\E4\8C\C8>m\D6\9B\B9\AA\E1\D4\B8\A9{\B7\D0\E3\0E\E0]\D5|\C7M\8B\9Al\C6=\5C\C5\0D\8A\A8\99L\B6z<[\89\1C\C0\98y\E2.\1E\D3-\D2\D1;\97\88\1D\C4k\C3\A7,\C2\B5\C1\0CK\B4j\A6\B3Z\A5+\B2\1B\B1\0B\B0i\96J\A4x\87\A3:Y*\95h\A1\86w\94IWg\A2\1A\0A\A09\93X\85)\92v\09\19\91\90H\84u8\83f(\82Gt\18\81\80\08V7seF'rdU\07\17qp6cET&b\16a\06`S5D%RQ\15\054CP$B3\14A\04@#2\131\030\22\12!\02 \11\01\10\00\EF\FE\DF\FD\CF\FC\BF\FB\FA\AF\9F\F9\F8\8F\7F\F7o\F6_\F5O\F4?\F3/\F2\F1\1F\F0\0F\EE\DE\ED\CE\EC\DD\BE\EB\CD\DC\AE\EA\BD\DB\CC\9E\E9\AD\DA\BC\CB\8E\E8\9D\D9~\E7\AC\FF\CA\BB\8D\D8\0E\E0\0D\E6n\9C\C9^\BA\E5\AB}\D7\E4\8C\C8N.>m\D6\E3\9B\B9\AA\E2\1E\E1]\D5|\C7M\8B\B8\D4\9A\A9l\C6=\D3-\D2\1D{\B7\D1\5C\C5\8A\A8\99L\C4k\B6\D0\0C<\C3z\A7,\C2[\B5\1C\89\98\C1K\C0\0B;\B0\0A\1A\B4j\A6y\97\A0\09\90\B3\88+Z\B2\A5\1B\B1i\96\A4Jx\87:\A3Y\95*\A2\A1h\86wI\949\93X\85)gv\92\19\91H\84Wu8\83f(\82\18Gt\81\08\80Ve\17\07ps7'rFdUq6cET&b\16a\06`5SD%R\15\05PQ4C$B3\14A\04@#2\131\030\22\12!\02 \11\01\10\00", align 16
@mpa_hufflens = internal constant [1378 x i8] calign 16
@mpa_huff_sizes_minus_one = internal unnamed_addr constant [15 x i8] c"\03\08\08\0F\0F###???\FF\FF\FF\FF", align 1
@huff_vlc_tables = internal global [3746 x [2 x i16]] zeroinitializer, align 16
@.str = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [67 x i8] c"offset == (sizeof(huff_vlc_tables) / sizeof((huff_vlc_tables)[0]))\00", align 1
@.str.2 = private unnamed_addr constant [58 x i8] c"../../third_party/ffmpeg/libavcodec/mpegaudiodec_common.c\00", align 1
@huff_quad_vlc_tables = internal global [80 x [2 x i16]] zeroinitializer, align 16
@mpa_quad_bits = internal constant [2 x [16 x i8]] [[16 x i8] c"\01\04\04\05\04\06\05\06\04\05\05\06\05\06\06\06", [16 x i8] c"\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04"], align 16
@mpa_quad_codes = internal constant [2 x [16 x i8]] [[16 x i8] c"\01\05\04\05\06\05\04\04\07\03\06\00\07\02\03\01", [16 x i8] c"\0F\0E\0D\0C\0B\0A\09\08\07\06\05\04\03\02\01\00"], align 16
@ff_mpa_quant_bits = external local_unnamed_addr constant [17 x i32], align 16
@ff_mpa_quant_steps = external local_unnamed_addr constant [17 x i32], align 16
@mpegaudiodec_common_tableinit.exp2_lut = internal unnamed_addr constant [4 x double] [double 1.000000e+00, double 0x3FF306FE0A31B715, double 0x3FF6A09E667F3BCD, double 0x3FFAE89F995AD3AD], align 16

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @ff_mpegaudiodec_common_init_static() local_unnamed_addr #0 {
  %1 = tail call i32 @pthread_once(i32* nonnull @ff_mpegaudiodec_common_init_static.init_static_once, void ()* nonnull @mpegaudiodec_common_init_static) #7
  ret void
}

declare i32 @pthread_once(i32*, void ()*) local_unnamed_addr #1

; Function Attrs: cold nounwind optsize ssp uwtable
define internal void @mpegaudiodec_common_init_static() #0 {
  %1 = alloca [256 x i16], align 16
  br label %4

2:                                                ; preds = %4
  %3 = bitcast [256 x i16]* %1 to i8*
  br label %20

4:                                                ; preds = %4, %0
  %5 = phi i64 [ 0, %0 ], [ %15, %4 ]
  %6 = phi i32 [ 0, %0 ], [ %16, %4 ]
  %7 = trunc i32 %6 to i8
  %8 = udiv i8 %7, 3
  %9 = zext i8 %8 to i16
  %10 = urem i8 %7, 3
  %11 = zext i8 %10 to i16
  %12 = shl nuw nsw i16 %9, 2
  %13 = or i16 %12, %11
  %14 = getelementptr inbounds [64 x i16], [64 x i16]* @ff_scale_factor_modshift, i64 0, i64 %5
  store i16 %13, i16* %14, align 2
  %15 = add nuw nsw i64 %5, 1
  %16 = add nuw nsw i32 %6, 1
  %17 = icmp eq i64 %15, 64
  br i1 %17, label %2, label %4

18:                                               ; preds = %49
  %19 = icmp eq i32 %60, 3746
  br i1 %19, label %65, label %64

20:                                               ; preds = %49, %2
  %21 = phi i64 [ 0, %2 ], [ %52, %49 ]
  %22 = phi i8* [ getelementptr inbounds ([1378 x i8], [1378 x i8]* @mpa_huffsymbols, i64 0, i64 0), %2 ], [ %62, %49 ]
  %23 = phi i8* [ getelementptr inbounds ([1378 x i8], [1378 x i8]* @mpa_hufflens, i64 0, i64 0), %2 ], [ %61, %49 ]
  %24 = phi i32 [ 0, %2 ], [ %60, %49 ]
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %3) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3, i8 -86, i64 512, i1 false)
  %25 = getelementptr inbounds [15 x i8], [15 x i8]* @mpa_huff_sizes_minus_one, i64 0, i64 %21
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = add nuw nsw i32 %27, 1
  %29 = zext i32 %28 to i64
  br label %30

30:                                               ; preds = %30, %20
  %31 = phi i64 [ %47, %30 ], [ 0, %20 ]
  %32 = getelementptr inbounds i8, i8* %22, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = and i8 %33, -16
  %35 = and i8 %33, 15
  %36 = zext i8 %34 to i16
  %37 = shl nuw nsw i16 %36, 1
  %38 = icmp ne i8 %34, 0
  %39 = zext i8 %35 to i16
  %40 = icmp ne i8 %35, 0
  %41 = and i1 %40, %38
  %42 = zext i1 %41 to i16
  %43 = shl nuw nsw i16 %42, 4
  %44 = or i16 %37, %39
  %45 = or i16 %44, %43
  %46 = getelementptr inbounds [256 x i16], [256 x i16]* %1, i64 0, i64 %31
  store i16 %45, i16* %46, align 2
  %47 = add nuw nsw i64 %31, 1
  %48 = icmp eq i64 %47, %29
  br i1 %48, label %49, label %30

49:                                               ; preds = %30
  %50 = sext i32 %24 to i64
  %51 = getelementptr inbounds [3746 x [2 x i16]], [3746 x [2 x i16]]* @huff_vlc_tables, i64 0, i64 %50
  %52 = add nuw nsw i64 %21, 1
  %53 = getelementptr inbounds [16 x %struct.VLC], [16 x %struct.VLC]* @ff_huff_vlc, i64 0, i64 %52
  %54 = getelementptr inbounds [16 x %struct.VLC], [16 x %struct.VLC]* @ff_huff_vlc, i64 0, i64 %52, i32 1
  store [2 x i16]* %51, [2 x i16]** %54, align 8
  %55 = sub i32 3746, %24
  %56 = getelementptr inbounds [16 x %struct.VLC], [16 x %struct.VLC]* @ff_huff_vlc, i64 0, i64 %52, i32 3
  store i32 %55, i32* %56, align 4
  %57 = call i32 @ff_init_vlc_from_lengths(%struct.VLC* %53, i32 7, i32 %28, i8* %23, i32 1, i8* nonnull %3, i32 2, i32 2, i32 0, i32 5, i8* null) #7
  %58 = getelementptr inbounds [16 x %struct.VLC], [16 x %struct.VLC]* @ff_huff_vlc, i64 0, i64 %52, i32 2
  %59 = load i32, i32* %58, align 8
  %60 = add nsw i32 %59, %24
  %61 = getelementptr inbounds i8, i8* %23, i64 %29
  %62 = getelementptr inbounds i8, i8* %22, i64 %29
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %3) #7
  %63 = icmp eq i64 %52, 15
  br i1 %63, label %18, label %20

64:                                               ; preds = %18
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.2, i64 0, i64 0), i32 437) #7
  call void @abort() #8
  unreachable

65:                                               ; preds = %18, %65
  %66 = phi i64 [ %80, %65 ], [ 0, %18 ]
  %67 = phi i32 [ %76, %65 ], [ 0, %18 ]
  %68 = icmp eq i64 %66, 0
  %69 = select i1 %68, i32 6, i32 4
  %70 = zext i32 %67 to i64
  %71 = getelementptr inbounds [80 x [2 x i16]], [80 x [2 x i16]]* @huff_quad_vlc_tables, i64 0, i64 %70
  %72 = getelementptr inbounds [2 x %struct.VLC], [2 x %struct.VLC]* @ff_huff_quad_vlc, i64 0, i64 %66
  %73 = getelementptr inbounds [2 x %struct.VLC], [2 x %struct.VLC]* @ff_huff_quad_vlc, i64 0, i64 %66, i32 1
  store [2 x i16]* %71, [2 x i16]** %73, align 8
  %74 = shl i32 1, %69
  %75 = getelementptr inbounds [2 x %struct.VLC], [2 x %struct.VLC]* @ff_huff_quad_vlc, i64 0, i64 %66, i32 3
  store i32 %74, i32* %75, align 4
  %76 = add nuw nsw i32 %74, %67
  %77 = getelementptr inbounds [2 x [16 x i8]], [2 x [16 x i8]]* @mpa_quad_bits, i64 0, i64 %66, i64 0
  %78 = getelementptr inbounds [2 x [16 x i8]], [2 x [16 x i8]]* @mpa_quad_codes, i64 0, i64 %66, i64 0
  %79 = call i32 @ff_init_vlc_sparse(%struct.VLC* %72, i32 %69, i32 16, i8* %77, i32 1, i32 1, i8* %78, i32 1, i32 1, i8* null, i32 0, i32 0, i32 4) #7
  %80 = add nuw nsw i64 %66, 1
  %81 = icmp eq i64 %80, 2
  br i1 %81, label %82, label %65

82:                                               ; preds = %65, %84
  %83 = phi i64 [ %87, %84 ], [ 0, %65 ]
  br label %89

84:                                               ; preds = %89
  %85 = trunc i32 %98 to i16
  %86 = getelementptr inbounds [9 x [23 x i16]], [9 x [23 x i16]]* @ff_band_index_long, i64 0, i64 %83, i64 22
  store i16 %85, i16* %86, align 2
  %87 = add nuw nsw i64 %83, 1
  %88 = icmp eq i64 %87, 9
  br i1 %88, label %103, label %82

89:                                               ; preds = %89, %82
  %90 = phi i64 [ 0, %82 ], [ %99, %89 ]
  %91 = phi i16 [ 0, %82 ], [ %100, %89 ]
  %92 = phi i32 [ 0, %82 ], [ %98, %89 ]
  %93 = getelementptr inbounds [9 x [23 x i16]], [9 x [23 x i16]]* @ff_band_index_long, i64 0, i64 %83, i64 %90
  store i16 %91, i16* %93, align 2
  %94 = getelementptr inbounds [9 x [22 x i8]], [9 x [22 x i8]]* @ff_band_size_long, i64 0, i64 %83, i64 %90
  %95 = load i8, i8* %94, align 1
  %96 = lshr i8 %95, 1
  %97 = zext i8 %96 to i32
  %98 = add nuw nsw i32 %92, %97
  %99 = add nuw nsw i64 %90, 1
  %100 = trunc i32 %98 to i16
  %101 = icmp eq i64 %99, 22
  br i1 %101, label %84, label %89

102:                                              ; preds = %133
  call fastcc void @mpegaudiodec_common_tableinit() #9
  ret void

103:                                              ; preds = %84, %133
  %104 = phi i64 [ %134, %133 ], [ 0, %84 ]
  %105 = getelementptr inbounds [17 x i32], [17 x i32]* @ff_mpa_quant_bits, i64 0, i64 %104
  %106 = load i32, i32* %105, align 4
  %107 = icmp slt i32 %106, 0
  br i1 %107, label %108, label %133

108:                                              ; preds = %103
  %109 = sub i32 1, %106
  %110 = icmp eq i32 %109, 31
  br i1 %110, label %133, label %111

111:                                              ; preds = %108
  %112 = shl i32 1, %109
  %113 = getelementptr inbounds [17 x i32], [17 x i32]* @ff_mpa_quant_steps, i64 0, i64 %104
  %114 = load i32, i32* %113, align 4
  %115 = getelementptr inbounds [4 x i16*], [4 x i16*]* @ff_division_tabs, i64 0, i64 %104
  %116 = load i16*, i16** %115, align 8
  %117 = sext i32 %112 to i64
  br label %118

118:                                              ; preds = %111, %118
  %119 = phi i64 [ 0, %111 ], [ %131, %118 ]
  %120 = trunc i64 %119 to i32
  %121 = srem i32 %120, %114
  %122 = sdiv i32 %120, %114
  %123 = srem i32 %122, %114
  %124 = sdiv i32 %122, %114
  %125 = shl i32 %123, 4
  %126 = add nsw i32 %125, %121
  %127 = shl i32 %124, 8
  %128 = add nsw i32 %126, %127
  %129 = trunc i32 %128 to i16
  %130 = getelementptr inbounds i16, i16* %116, i64 %119
  store i16 %129, i16* %130, align 2
  %131 = add nuw nsw i64 %119, 1
  %132 = icmp slt i64 %131, %117
  br i1 %132, label %118, label %133

133:                                              ; preds = %118, %108, %103
  %134 = add nuw nsw i64 %104, 1
  %135 = icmp eq i64 %134, 4
  br i1 %135, label %102, label %103
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @ff_init_vlc_from_lengths(%struct.VLC*, i32, i32, i8*, i32, i8*, i32, i32, i32, i32, i8*) local_unnamed_addr #1

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #1

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #3

declare i32 @ff_init_vlc_sparse(%struct.VLC*, i32, i32, i8*, i32, i32, i8*, i32, i32, i8*, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: cold nounwind optsize ssp uwtable
define internal fastcc void @mpegaudiodec_common_tableinit() unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = bitcast i32* %1 to i8*
  br label %4

3:                                                ; preds = %16
  ret void

4:                                                ; preds = %16, %0
  %5 = phi i64 [ 1, %0 ], [ %31, %16 ]
  %6 = phi double [ 0.000000e+00, %0 ], [ %17, %16 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7
  store i32 -1431655766, i32* %1, align 4
  %7 = trunc i64 %5 to i32
  %8 = lshr i32 %7, 2
  %9 = sitofp i32 %8 to double
  %10 = and i32 %7, 3
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = fdiv nsz double %9, 1.759000e+00
  %14 = tail call nsz double @cbrt(double %9) #10
  %15 = fmul nsz double %13, %14
  br label %16

16:                                               ; preds = %12, %4
  %17 = phi double [ %15, %12 ], [ %6, %4 ]
  %18 = zext i32 %10 to i64
  %19 = getelementptr inbounds [4 x double], [4 x double]* @mpegaudiodec_common_tableinit.exp2_lut, i64 0, i64 %18
  %20 = load double, double* %19, align 8
  %21 = fmul nsz double %17, %20
  %22 = call nsz double @frexp(double %21, i32* nonnull %1) #7
  %23 = fmul nsz double %22, 0x41E0000000000000
  %24 = tail call i64 @llvm.llrint.i64.f64(double %23)
  %25 = trunc i64 %24 to i32
  %26 = load i32, i32* %1, align 4
  %27 = getelementptr inbounds [32828 x i32], [32828 x i32]* @ff_table_4_3_value, i64 0, i64 %5
  store i32 %25, i32* %27, align 4
  %28 = trunc i32 %26 to i8
  %29 = sub i8 103, %28
  %30 = getelementptr inbounds [32828 x i8], [32828 x i8]* @ff_table_4_3_exp, i64 0, i64 %5
  store i8 %29, i8* %30, align 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7
  %31 = add nuw nsw i64 %5, 1
  %32 = icmp eq i64 %31, 32828
  br i1 %32, label %3, label %4
}

; Function Attrs: nofree nounwind readnone
declare double @cbrt(double) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare double @frexp(double, i32* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.llrint.i64.f64(double) #6

attributes #0 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { cold }
attributes #10 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
