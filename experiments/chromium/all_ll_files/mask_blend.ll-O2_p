; ModuleID = '../../third_party/libgav1/src/src/dsp/mask_blend.cc'
source_filename = "../../third_party/libgav1/src/src/dsp/mask_blend.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.libgav1::dsp::Dsp" = type { void (i8*, i8*, i32, i32, i8*, i64)*, void (i8*, i64, i8*, i32*)*, [2 x [3 x void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*]], [19 x void (i8*, i64, [32 x i16]*, i32)*], [19 x [3 x void ([32 x i16]*, i32, i32, i8*, i64)*]], [2 x [2 x [2 x [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*]]]], [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*], void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)*, %"struct.libgav1::dsp::FilmGrainFuncs", void (i8*, i64, i8*, i8*, i8, i32, i32)*, [3 x void (i8*, i8*, i64, i8*, i64, i32, i32)*], void (i8*, i32, i32)*, void (i8*, i32)*, [19 x [10 x void (i8*, i64, i8*, i8*)*]], [4 x [5 x [2 x void (i8, i8, i32, i8*, i32, i32, i8*)*]]], [4 x [2 x void (i8*, i64, i32, i32, i32)*]], [2 x void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)*], [3 x [2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*]], void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)*, [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32*, i32, %"union.libgav1::CompoundMotionVector"*)*], [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32, i32, %"struct.libgav1::MotionVector"*)*], [2 x void (i8*, i64, i32, i32, i8*, i64)*], void (i32, i32, i32, i8*)*, void (i8*, i8*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, [6 x [6 x [2 x void (i8*, i8*, i8*, i64)*]]] }
%"struct.libgav1::dsp::FilmGrainFuncs" = type { [3 x void (%"struct.libgav1::FilmGrainParams"*, i8*)*], [2 x [4 x void (%"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i8*, i8*)*]], [2 x void (i8*, i32, i32, i32, i32, i32, i8*)*], void (i8*, i32, i32, i32, i32, i8*)*, void (i32, i8*, i8*, i8*)*, void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)*, [2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*] }
%"struct.libgav1::FilmGrainParams" = type { i8, i8, i8, i8, i8, i8, i8, i8, [14 x i8], [14 x i8], [10 x i8], [10 x i8], [10 x i8], [10 x i8], i8, i8, [24 x i8], [25 x i8], [25 x i8], i8, i16, i32, i32, i8, i8, i16, i8, i8, i16 }
%"struct.libgav1::RestorationUnitInfo" = type { i8, %"struct.libgav1::SgrProjInfo", [16 x i8], %"struct.libgav1::WienerInfo" }
%"struct.libgav1::SgrProjInfo" = type { i32, [2 x i32] }
%"struct.libgav1::WienerInfo" = type { [2 x i16], [28 x i8], [2 x [4 x i16]], [16 x i8] }
%"union.libgav1::RestorationBuffer" = type { %"struct.libgav1::SgrBuffer", [5024 x i8] }
%"struct.libgav1::SgrBuffer" = type { [1152 x i16], [1440 x i16], [1152 x i32], [1440 x i32], [1024 x i16], [768 x i16], [512 x i16], [1024 x i32], [768 x i32], [512 x i32], [288 x i8], [288 x i32] }
%"struct.libgav1::ReferenceInfo" = type { %"struct.std::__1::array", %"struct.std::__1::array.0", %"struct.std::__1::array.0", %"struct.std::__1::array.1", %"struct.std::__1::array.2", %"class.libgav1::Array2D", %"class.libgav1::Array2D.4" }
%"struct.std::__1::array" = type { [8 x i8] }
%"struct.std::__1::array.0" = type { [8 x i8] }
%"struct.std::__1::array.1" = type { [8 x i8] }
%"struct.std::__1::array.2" = type { [8 x i16] }
%"class.libgav1::Array2D" = type { %"class.std::__1::unique_ptr", i64, i64, %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Array2DView" = type { i32, i32, i8* }
%"class.libgav1::Array2D.4" = type { %"class.std::__1::unique_ptr.5", i64, i64, %"class.libgav1::Array2DView.11" }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.libgav1::MotionVector"* }
%"struct.libgav1::MotionVector" = type { %union.anon }
%union.anon = type { i32 }
%"class.libgav1::Array2DView.11" = type { i32, i32, %"struct.libgav1::MotionVector"* }
%"struct.libgav1::TemporalMotionField" = type { %"class.libgav1::Array2D.4", %"class.libgav1::Array2D.12" }
%"class.libgav1::Array2D.12" = type { %"class.std::__1::unique_ptr.13", i64, i64, %"class.libgav1::Array2DView.19" }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i8* }
%"class.libgav1::Array2DView.19" = type { i32, i32, i8* }
%"union.libgav1::CompoundMotionVector" = type { i64 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav13dsp15MaskBlendInit_CEv() local_unnamed_addr #0 {
  %1 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 8) #5
  %2 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 20, i64 0, i64 0
  %3 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 20, i64 1, i64 0
  %4 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 20, i64 2, i64 0
  %5 = bitcast void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)** %2 to <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*> <void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_111MaskBlend_CILi8EhLb0ELi0ELi0EEEvPKvS4_lPKhliiPvl, void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)* null>, <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*>* %5, align 8
  %6 = bitcast void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)** %3 to <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*> <void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_111MaskBlend_CILi8EhLb0ELi1ELi0EEEvPKvS4_lPKhliiPvl, void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)* null>, <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*>* %6, align 8
  %7 = bitcast void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)** %4 to <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*> <void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_111MaskBlend_CILi8EhLb0ELi1ELi1EEEvPKvS4_lPKhliiPvl, void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)* null>, <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*>* %7, align 8
  %8 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 13, i64 0
  %9 = bitcast void (i8*, i8*, i64, i8*, i64, i32, i32)** %8 to <2 x void (i8*, i8*, i64, i8*, i64, i32, i32)*>*
  store <2 x void (i8*, i8*, i64, i8*, i64, i32, i32)*> <void (i8*, i8*, i64, i8*, i64, i32, i32)* @_ZN7libgav13dsp12_GLOBAL__N_125InterIntraMaskBlend8bpp_CILi0ELi0EEEvPKhPhlS4_lii, void (i8*, i8*, i64, i8*, i64, i32, i32)* @_ZN7libgav13dsp12_GLOBAL__N_125InterIntraMaskBlend8bpp_CILi1ELi0EEEvPKhPhlS4_lii>, <2 x void (i8*, i8*, i64, i8*, i64, i32, i32)*>* %9, align 8
  %10 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %1, i64 0, i32 13, i64 2
  store void (i8*, i8*, i64, i8*, i64, i32, i32)* @_ZN7libgav13dsp12_GLOBAL__N_125InterIntraMaskBlend8bpp_CILi1ELi1EEEvPKhPhlS4_lii, void (i8*, i8*, i64, i8*, i64, i32, i32)** %10, align 8
  %11 = tail call %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32 10) #5
  %12 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %11, i64 0, i32 20, i64 0, i64 0
  %13 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %11, i64 0, i32 20, i64 1, i64 0
  %14 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %11, i64 0, i32 20, i64 2, i64 0
  %15 = bitcast void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)** %12 to <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*> <void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_111MaskBlend_CILi10EtLb0ELi0ELi0EEEvPKvS4_lPKhliiPvl, void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_111MaskBlend_CILi10EtLb1ELi0ELi0EEEvPKvS4_lPKhliiPvl>, <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*>* %15, align 8
  %16 = bitcast void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)** %13 to <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*> <void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_111MaskBlend_CILi10EtLb0ELi1ELi0EEEvPKvS4_lPKhliiPvl, void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_111MaskBlend_CILi10EtLb1ELi1ELi0EEEvPKvS4_lPKhliiPvl>, <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*>* %16, align 8
  %17 = bitcast void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)** %14 to <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*>*
  store <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*> <void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_111MaskBlend_CILi10EtLb0ELi1ELi1EEEvPKvS4_lPKhliiPvl, void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)* @_ZN7libgav13dsp12_GLOBAL__N_111MaskBlend_CILi10EtLb1ELi1ELi1EEEvPKvS4_lPKhliiPvl>, <2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*>* %17, align 8
  %18 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %11, i64 0, i32 13, i64 0
  %19 = bitcast void (i8*, i8*, i64, i8*, i64, i32, i32)** %18 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 24, i1 false) #5
  ret void
}

declare %"struct.libgav1::dsp::Dsp"* @_ZN7libgav112dsp_internal19GetWritableDspTableEi(i32) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_111MaskBlend_CILi8EhLb0ELi0ELi0EEEvPKvS4_lPKhliiPvl(i8* nocapture readonly, i8* nocapture readonly, i64, i8* nocapture readonly, i64, i32, i32, i8* nocapture, i64) #2 {
  %10 = icmp sgt i32 %6, 0
  br i1 %10, label %11, label %92

11:                                               ; preds = %9
  %12 = bitcast i8* %1 to i16*
  %13 = bitcast i8* %0 to i16*
  %14 = icmp sgt i32 %5, 0
  %15 = sext i32 %5 to i64
  %16 = zext i32 %5 to i64
  %17 = shl nsw i64 %15, 1
  %18 = shl nuw nsw i64 %16, 1
  %19 = shl i64 %2, 1
  %20 = icmp ult i32 %5, 8
  %21 = and i64 %16, 4294967288
  %22 = icmp eq i64 %21, %16
  br label %23

23:                                               ; preds = %93, %11
  %24 = phi i64 [ %100, %93 ], [ 0, %11 ]
  %25 = phi i8* [ %95, %93 ], [ %3, %11 ]
  %26 = phi i16* [ %96, %93 ], [ %13, %11 ]
  %27 = phi i32 [ %98, %93 ], [ 0, %11 ]
  %28 = phi i16* [ %97, %93 ], [ %12, %11 ]
  %29 = phi i8* [ %94, %93 ], [ %7, %11 ]
  %30 = mul i64 %24, %8
  %31 = getelementptr i8, i8* %7, i64 %30
  %32 = add i64 %30, %16
  %33 = getelementptr i8, i8* %7, i64 %32
  %34 = mul i64 %24, %4
  %35 = getelementptr i8, i8* %3, i64 %34
  %36 = add i64 %34, %16
  %37 = getelementptr i8, i8* %3, i64 %36
  %38 = mul i64 %17, %24
  %39 = getelementptr i8, i8* %0, i64 %38
  %40 = add i64 %18, %38
  %41 = getelementptr i8, i8* %0, i64 %40
  %42 = mul i64 %19, %24
  %43 = getelementptr i8, i8* %1, i64 %42
  %44 = add i64 %18, %42
  %45 = getelementptr i8, i8* %1, i64 %44
  br i1 %14, label %46, label %93

46:                                               ; preds = %23
  br i1 %20, label %47, label %49

47:                                               ; preds = %91, %49, %46
  %48 = phi i64 [ 0, %49 ], [ 0, %46 ], [ %21, %91 ]
  br label %101

49:                                               ; preds = %46
  %50 = icmp ult i8* %31, %37
  %51 = icmp ult i8* %35, %33
  %52 = and i1 %50, %51
  %53 = icmp ult i8* %31, %41
  %54 = icmp ult i8* %39, %33
  %55 = and i1 %53, %54
  %56 = or i1 %52, %55
  %57 = icmp ult i8* %31, %45
  %58 = icmp ult i8* %43, %33
  %59 = and i1 %57, %58
  %60 = or i1 %56, %59
  br i1 %60, label %47, label %61

61:                                               ; preds = %49, %61
  %62 = phi i64 [ %89, %61 ], [ 0, %49 ]
  %63 = getelementptr inbounds i8, i8* %25, i64 %62
  %64 = bitcast i8* %63 to <8 x i8>*
  %65 = load <8 x i8>, <8 x i8>* %64, align 1, !alias.scope !2
  %66 = zext <8 x i8> %65 to <8 x i32>
  %67 = getelementptr inbounds i16, i16* %26, i64 %62
  %68 = bitcast i16* %67 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 2, !alias.scope !5
  %70 = sext <8 x i16> %69 to <8 x i32>
  %71 = mul nsw <8 x i32> %70, %66
  %72 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %66
  %73 = getelementptr inbounds i16, i16* %28, i64 %62
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !7
  %76 = sext <8 x i16> %75 to <8 x i32>
  %77 = mul nsw <8 x i32> %72, %76
  %78 = add nsw <8 x i32> %77, %71
  %79 = ashr <8 x i32> %78, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %80 = add nsw <8 x i32> %79, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %81 = ashr <8 x i32> %80, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %82 = icmp slt <8 x i32> %81, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %83 = select <8 x i1> %82, <8 x i32> %81, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %84 = icmp sgt <8 x i32> %83, zeroinitializer
  %85 = select <8 x i1> %84, <8 x i32> %83, <8 x i32> zeroinitializer
  %86 = trunc <8 x i32> %85 to <8 x i8>
  %87 = getelementptr inbounds i8, i8* %29, i64 %62
  %88 = bitcast i8* %87 to <8 x i8>*
  store <8 x i8> %86, <8 x i8>* %88, align 1, !alias.scope !9, !noalias !11
  %89 = add i64 %62, 8
  %90 = icmp eq i64 %89, %21
  br i1 %90, label %91, label %61, !llvm.loop !12

91:                                               ; preds = %61
  br i1 %22, label %93, label %47

92:                                               ; preds = %93, %9
  ret void

93:                                               ; preds = %101, %91, %23
  %94 = getelementptr inbounds i8, i8* %29, i64 %8
  %95 = getelementptr inbounds i8, i8* %25, i64 %4
  %96 = getelementptr inbounds i16, i16* %26, i64 %15
  %97 = getelementptr inbounds i16, i16* %28, i64 %2
  %98 = add nuw nsw i32 %27, 1
  %99 = icmp eq i32 %98, %6
  %100 = add i64 %24, 1
  br i1 %99, label %92, label %23

101:                                              ; preds = %47, %101
  %102 = phi i64 [ %125, %101 ], [ %48, %47 ]
  %103 = getelementptr inbounds i8, i8* %25, i64 %102
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = getelementptr inbounds i16, i16* %26, i64 %102
  %107 = load i16, i16* %106, align 2
  %108 = sext i16 %107 to i32
  %109 = mul nsw i32 %108, %105
  %110 = sub nsw i32 64, %105
  %111 = getelementptr inbounds i16, i16* %28, i64 %102
  %112 = load i16, i16* %111, align 2
  %113 = sext i16 %112 to i32
  %114 = mul nsw i32 %110, %113
  %115 = add nsw i32 %114, %109
  %116 = ashr i32 %115, 6
  %117 = add nsw i32 %116, 8
  %118 = ashr i32 %117, 4
  %119 = icmp slt i32 %118, 255
  %120 = select i1 %119, i32 %118, i32 255
  %121 = icmp sgt i32 %120, 0
  %122 = select i1 %121, i32 %120, i32 0
  %123 = trunc i32 %122 to i8
  %124 = getelementptr inbounds i8, i8* %29, i64 %102
  store i8 %123, i8* %124, align 1
  %125 = add nuw nsw i64 %102, 1
  %126 = icmp eq i64 %125, %16
  br i1 %126, label %93, label %101, !llvm.loop !14
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_111MaskBlend_CILi8EhLb0ELi1ELi0EEEvPKvS4_lPKhliiPvl(i8* nocapture readonly, i8* nocapture readonly, i64, i8* nocapture readonly, i64, i32, i32, i8* nocapture, i64) #2 {
  %10 = icmp sgt i32 %6, 0
  br i1 %10, label %11, label %111

11:                                               ; preds = %9
  %12 = bitcast i8* %1 to i16*
  %13 = bitcast i8* %0 to i16*
  %14 = icmp sgt i32 %5, 0
  %15 = sext i32 %5 to i64
  %16 = zext i32 %5 to i64
  %17 = add nsw i64 %16, -1
  %18 = shl nsw i64 %15, 1
  %19 = shl nuw nsw i64 %16, 1
  %20 = shl i64 %2, 1
  %21 = icmp ult i32 %5, 8
  %22 = trunc i64 %17 to i32
  %23 = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %22, i32 2)
  %24 = extractvalue { i32, i1 } %23, 0
  %25 = extractvalue { i32, i1 } %23, 1
  %26 = icmp slt i32 %24, 0
  %27 = icmp ugt i64 %17, 4294967295
  %28 = or i1 %26, %27
  %29 = or i1 %28, %25
  %30 = and i64 %16, 4294967288
  %31 = icmp eq i64 %30, %16
  br label %32

32:                                               ; preds = %112, %11
  %33 = phi i64 [ %119, %112 ], [ 0, %11 ]
  %34 = phi i8* [ %114, %112 ], [ %3, %11 ]
  %35 = phi i16* [ %115, %112 ], [ %13, %11 ]
  %36 = phi i32 [ %117, %112 ], [ 0, %11 ]
  %37 = phi i16* [ %116, %112 ], [ %12, %11 ]
  %38 = phi i8* [ %113, %112 ], [ %7, %11 ]
  %39 = mul i64 %33, %8
  %40 = getelementptr i8, i8* %7, i64 %39
  %41 = add i64 %39, %16
  %42 = getelementptr i8, i8* %7, i64 %41
  %43 = mul i64 %18, %33
  %44 = getelementptr i8, i8* %0, i64 %43
  %45 = add i64 %19, %43
  %46 = getelementptr i8, i8* %0, i64 %45
  %47 = mul i64 %20, %33
  %48 = getelementptr i8, i8* %1, i64 %47
  %49 = add i64 %19, %47
  %50 = getelementptr i8, i8* %1, i64 %49
  %51 = mul i64 %33, %4
  %52 = getelementptr i8, i8* %3, i64 %51
  %53 = add i64 %19, %51
  %54 = getelementptr i8, i8* %3, i64 %53
  br i1 %14, label %55, label %112

55:                                               ; preds = %32
  %56 = or i1 %21, %29
  br i1 %56, label %57, label %59

57:                                               ; preds = %55, %110, %59
  %58 = phi i64 [ 0, %59 ], [ 0, %55 ], [ %30, %110 ]
  br label %120

59:                                               ; preds = %55
  %60 = icmp ult i8* %40, %46
  %61 = icmp ult i8* %44, %42
  %62 = and i1 %60, %61
  %63 = icmp ult i8* %40, %50
  %64 = icmp ult i8* %48, %42
  %65 = and i1 %63, %64
  %66 = or i1 %62, %65
  %67 = icmp ult i8* %40, %54
  %68 = icmp ult i8* %52, %42
  %69 = and i1 %67, %68
  %70 = or i1 %66, %69
  br i1 %70, label %57, label %71

71:                                               ; preds = %59, %71
  %72 = phi i64 [ %108, %71 ], [ 0, %59 ]
  %73 = shl i64 %72, 33
  %74 = ashr exact i64 %73, 32
  %75 = getelementptr inbounds i8, i8* %34, i64 %74
  %76 = bitcast i8* %75 to <16 x i8>*
  %77 = load <16 x i8>, <16 x i8>* %76, align 1
  %78 = shufflevector <16 x i8> %77, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %79 = shufflevector <16 x i8> %77, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %80 = zext <8 x i8> %78 to <8 x i32>
  %81 = zext <8 x i8> %79 to <8 x i32>
  %82 = add nuw nsw <8 x i32> %80, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %83 = add nuw nsw <8 x i32> %82, %81
  %84 = lshr <8 x i32> %83, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %85 = and <8 x i32> %84, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %86 = getelementptr inbounds i16, i16* %35, i64 %72
  %87 = bitcast i16* %86 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2, !alias.scope !15
  %89 = sext <8 x i16> %88 to <8 x i32>
  %90 = mul nsw <8 x i32> %85, %89
  %91 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %85
  %92 = getelementptr inbounds i16, i16* %37, i64 %72
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !18
  %95 = sext <8 x i16> %94 to <8 x i32>
  %96 = mul nsw <8 x i32> %91, %95
  %97 = add nsw <8 x i32> %96, %90
  %98 = ashr <8 x i32> %97, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %99 = add nsw <8 x i32> %98, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %100 = ashr <8 x i32> %99, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %101 = icmp slt <8 x i32> %100, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %102 = select <8 x i1> %101, <8 x i32> %100, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %103 = icmp sgt <8 x i32> %102, zeroinitializer
  %104 = select <8 x i1> %103, <8 x i32> %102, <8 x i32> zeroinitializer
  %105 = trunc <8 x i32> %104 to <8 x i8>
  %106 = getelementptr inbounds i8, i8* %38, i64 %72
  %107 = bitcast i8* %106 to <8 x i8>*
  store <8 x i8> %105, <8 x i8>* %107, align 1, !alias.scope !20, !noalias !22
  %108 = add i64 %72, 8
  %109 = icmp eq i64 %108, %30
  br i1 %109, label %110, label %71, !llvm.loop !24

110:                                              ; preds = %71
  br i1 %31, label %112, label %57

111:                                              ; preds = %112, %9
  ret void

112:                                              ; preds = %120, %110, %32
  %113 = getelementptr inbounds i8, i8* %38, i64 %8
  %114 = getelementptr inbounds i8, i8* %34, i64 %4
  %115 = getelementptr inbounds i16, i16* %35, i64 %15
  %116 = getelementptr inbounds i16, i16* %37, i64 %2
  %117 = add nuw nsw i32 %36, 1
  %118 = icmp eq i32 %117, %6
  %119 = add i64 %33, 1
  br i1 %118, label %111, label %32

120:                                              ; preds = %57, %120
  %121 = phi i64 [ %157, %120 ], [ %58, %57 ]
  %122 = shl i64 %121, 33
  %123 = ashr exact i64 %122, 32
  %124 = getelementptr inbounds i8, i8* %34, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = trunc i64 %121 to i32
  %128 = shl i32 %127, 1
  %129 = or i32 %128, 1
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds i8, i8* %34, i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  %134 = add nuw nsw i32 %126, 1
  %135 = add nuw nsw i32 %134, %133
  %136 = lshr i32 %135, 1
  %137 = and i32 %136, 255
  %138 = getelementptr inbounds i16, i16* %35, i64 %121
  %139 = load i16, i16* %138, align 2
  %140 = sext i16 %139 to i32
  %141 = mul nsw i32 %137, %140
  %142 = sub nsw i32 64, %137
  %143 = getelementptr inbounds i16, i16* %37, i64 %121
  %144 = load i16, i16* %143, align 2
  %145 = sext i16 %144 to i32
  %146 = mul nsw i32 %142, %145
  %147 = add nsw i32 %146, %141
  %148 = ashr i32 %147, 6
  %149 = add nsw i32 %148, 8
  %150 = ashr i32 %149, 4
  %151 = icmp slt i32 %150, 255
  %152 = select i1 %151, i32 %150, i32 255
  %153 = icmp sgt i32 %152, 0
  %154 = select i1 %153, i32 %152, i32 0
  %155 = trunc i32 %154 to i8
  %156 = getelementptr inbounds i8, i8* %38, i64 %121
  store i8 %155, i8* %156, align 1
  %157 = add nuw nsw i64 %121, 1
  %158 = icmp eq i64 %157, %16
  br i1 %158, label %112, label %120, !llvm.loop !25
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_111MaskBlend_CILi8EhLb0ELi1ELi1EEEvPKvS4_lPKhliiPvl(i8* nocapture readonly, i8* nocapture readonly, i64, i8* nocapture readonly, i64, i32, i32, i8* nocapture, i64) #2 {
  %10 = icmp sgt i32 %6, 0
  br i1 %10, label %11, label %133

11:                                               ; preds = %9
  %12 = getelementptr inbounds i8, i8* %3, i64 %4
  %13 = bitcast i8* %1 to i16*
  %14 = bitcast i8* %0 to i16*
  %15 = icmp sgt i32 %5, 0
  %16 = shl nsw i64 %4, 1
  %17 = sext i32 %5 to i64
  %18 = zext i32 %5 to i64
  %19 = add nsw i64 %18, -1
  %20 = shl nsw i64 %17, 1
  %21 = shl nuw nsw i64 %18, 1
  %22 = shl i64 %2, 1
  %23 = shl i64 %4, 1
  %24 = add i64 %21, %4
  %25 = icmp ult i32 %5, 8
  %26 = trunc i64 %19 to i32
  %27 = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %26, i32 2)
  %28 = extractvalue { i32, i1 } %27, 0
  %29 = extractvalue { i32, i1 } %27, 1
  %30 = icmp slt i32 %28, 0
  %31 = icmp ugt i64 %19, 4294967295
  %32 = or i1 %30, %31
  %33 = or i1 %32, %29
  %34 = and i64 %18, 4294967288
  %35 = icmp eq i64 %34, %18
  br label %36

36:                                               ; preds = %134, %11
  %37 = phi i64 [ %142, %134 ], [ 0, %11 ]
  %38 = phi i8* [ %136, %134 ], [ %3, %11 ]
  %39 = phi i16* [ %138, %134 ], [ %14, %11 ]
  %40 = phi i32 [ %140, %134 ], [ 0, %11 ]
  %41 = phi i16* [ %139, %134 ], [ %13, %11 ]
  %42 = phi i8* [ %137, %134 ], [ %12, %11 ]
  %43 = phi i8* [ %135, %134 ], [ %7, %11 ]
  %44 = mul i64 %37, %8
  %45 = getelementptr i8, i8* %7, i64 %44
  %46 = add i64 %44, %18
  %47 = getelementptr i8, i8* %7, i64 %46
  %48 = mul i64 %20, %37
  %49 = getelementptr i8, i8* %0, i64 %48
  %50 = add i64 %21, %48
  %51 = getelementptr i8, i8* %0, i64 %50
  %52 = mul i64 %22, %37
  %53 = getelementptr i8, i8* %1, i64 %52
  %54 = add i64 %21, %52
  %55 = getelementptr i8, i8* %1, i64 %54
  %56 = mul i64 %23, %37
  %57 = add i64 %56, %4
  %58 = getelementptr i8, i8* %3, i64 %57
  %59 = add i64 %24, %56
  %60 = getelementptr i8, i8* %3, i64 %59
  %61 = getelementptr i8, i8* %3, i64 %56
  %62 = add i64 %21, %56
  %63 = getelementptr i8, i8* %3, i64 %62
  br i1 %15, label %64, label %134

64:                                               ; preds = %36
  %65 = or i1 %25, %33
  br i1 %65, label %66, label %68

66:                                               ; preds = %64, %132, %68
  %67 = phi i64 [ 0, %68 ], [ 0, %64 ], [ %34, %132 ]
  br label %143

68:                                               ; preds = %64
  %69 = icmp ult i8* %45, %51
  %70 = icmp ult i8* %49, %47
  %71 = and i1 %69, %70
  %72 = icmp ult i8* %45, %55
  %73 = icmp ult i8* %53, %47
  %74 = and i1 %72, %73
  %75 = or i1 %71, %74
  %76 = icmp ult i8* %45, %60
  %77 = icmp ult i8* %58, %47
  %78 = and i1 %76, %77
  %79 = or i1 %75, %78
  %80 = icmp ult i8* %45, %63
  %81 = icmp ult i8* %61, %47
  %82 = and i1 %80, %81
  %83 = or i1 %79, %82
  br i1 %83, label %66, label %84

84:                                               ; preds = %68, %84
  %85 = phi i64 [ %130, %84 ], [ 0, %68 ]
  %86 = shl i64 %85, 33
  %87 = ashr exact i64 %86, 32
  %88 = getelementptr inbounds i8, i8* %38, i64 %87
  %89 = bitcast i8* %88 to <16 x i8>*
  %90 = load <16 x i8>, <16 x i8>* %89, align 1
  %91 = shufflevector <16 x i8> %90, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %92 = shufflevector <16 x i8> %90, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %93 = zext <8 x i8> %91 to <8 x i32>
  %94 = zext <8 x i8> %92 to <8 x i32>
  %95 = getelementptr inbounds i8, i8* %42, i64 %87
  %96 = bitcast i8* %95 to <16 x i8>*
  %97 = load <16 x i8>, <16 x i8>* %96, align 1
  %98 = shufflevector <16 x i8> %97, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %99 = shufflevector <16 x i8> %97, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %100 = zext <8 x i8> %98 to <8 x i32>
  %101 = zext <8 x i8> %99 to <8 x i32>
  %102 = add nuw nsw <8 x i32> %93, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %103 = add nuw nsw <8 x i32> %102, %94
  %104 = add nuw nsw <8 x i32> %103, %100
  %105 = add nuw nsw <8 x i32> %104, %101
  %106 = lshr <8 x i32> %105, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %107 = and <8 x i32> %106, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %108 = getelementptr inbounds i16, i16* %39, i64 %85
  %109 = bitcast i16* %108 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2, !alias.scope !26
  %111 = sext <8 x i16> %110 to <8 x i32>
  %112 = mul nsw <8 x i32> %107, %111
  %113 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %107
  %114 = getelementptr inbounds i16, i16* %41, i64 %85
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2, !alias.scope !29
  %117 = sext <8 x i16> %116 to <8 x i32>
  %118 = mul nsw <8 x i32> %113, %117
  %119 = add nsw <8 x i32> %118, %112
  %120 = ashr <8 x i32> %119, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %121 = add nsw <8 x i32> %120, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %122 = ashr <8 x i32> %121, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %123 = icmp slt <8 x i32> %122, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %124 = select <8 x i1> %123, <8 x i32> %122, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %125 = icmp sgt <8 x i32> %124, zeroinitializer
  %126 = select <8 x i1> %125, <8 x i32> %124, <8 x i32> zeroinitializer
  %127 = trunc <8 x i32> %126 to <8 x i8>
  %128 = getelementptr inbounds i8, i8* %43, i64 %85
  %129 = bitcast i8* %128 to <8 x i8>*
  store <8 x i8> %127, <8 x i8>* %129, align 1, !alias.scope !31, !noalias !33
  %130 = add i64 %85, 8
  %131 = icmp eq i64 %130, %34
  br i1 %131, label %132, label %84, !llvm.loop !36

132:                                              ; preds = %84
  br i1 %35, label %134, label %66

133:                                              ; preds = %134, %9
  ret void

134:                                              ; preds = %143, %132, %36
  %135 = getelementptr inbounds i8, i8* %43, i64 %8
  %136 = getelementptr inbounds i8, i8* %38, i64 %16
  %137 = getelementptr inbounds i8, i8* %42, i64 %16
  %138 = getelementptr inbounds i16, i16* %39, i64 %17
  %139 = getelementptr inbounds i16, i16* %41, i64 %2
  %140 = add nuw nsw i32 %40, 1
  %141 = icmp eq i32 %140, %6
  %142 = add i64 %37, 1
  br i1 %141, label %133, label %36

143:                                              ; preds = %66, %143
  %144 = phi i64 [ %188, %143 ], [ %67, %66 ]
  %145 = shl i64 %144, 33
  %146 = ashr exact i64 %145, 32
  %147 = getelementptr inbounds i8, i8* %38, i64 %146
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i32
  %150 = trunc i64 %144 to i32
  %151 = shl i32 %150, 1
  %152 = or i32 %151, 1
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds i8, i8* %38, i64 %153
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = getelementptr inbounds i8, i8* %42, i64 %146
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = getelementptr inbounds i8, i8* %42, i64 %153
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i32
  %163 = add nuw nsw i32 %149, 2
  %164 = add nuw nsw i32 %163, %156
  %165 = add nuw nsw i32 %164, %159
  %166 = add nuw nsw i32 %165, %162
  %167 = lshr i32 %166, 2
  %168 = and i32 %167, 255
  %169 = getelementptr inbounds i16, i16* %39, i64 %144
  %170 = load i16, i16* %169, align 2
  %171 = sext i16 %170 to i32
  %172 = mul nsw i32 %168, %171
  %173 = sub nsw i32 64, %168
  %174 = getelementptr inbounds i16, i16* %41, i64 %144
  %175 = load i16, i16* %174, align 2
  %176 = sext i16 %175 to i32
  %177 = mul nsw i32 %173, %176
  %178 = add nsw i32 %177, %172
  %179 = ashr i32 %178, 6
  %180 = add nsw i32 %179, 8
  %181 = ashr i32 %180, 4
  %182 = icmp slt i32 %181, 255
  %183 = select i1 %182, i32 %181, i32 255
  %184 = icmp sgt i32 %183, 0
  %185 = select i1 %184, i32 %183, i32 0
  %186 = trunc i32 %185 to i8
  %187 = getelementptr inbounds i8, i8* %43, i64 %144
  store i8 %186, i8* %187, align 1
  %188 = add nuw nsw i64 %144, 1
  %189 = icmp eq i64 %188, %18
  br i1 %189, label %134, label %143, !llvm.loop !37
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_125InterIntraMaskBlend8bpp_CILi0ELi0EEEvPKhPhlS4_lii(i8* nocapture readonly, i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32) #2 {
  %8 = icmp sgt i32 %6, 0
  br i1 %8, label %9, label %95

9:                                                ; preds = %7
  %10 = icmp sgt i32 %5, 0
  %11 = sext i32 %5 to i64
  %12 = zext i32 %5 to i64
  %13 = icmp ult i32 %5, 16
  %14 = and i64 %12, 4294967280
  %15 = icmp eq i64 %14, %12
  %16 = and i64 %12, 1
  %17 = icmp eq i64 %16, 0
  %18 = sub nsw i64 0, %12
  br label %19

19:                                               ; preds = %96, %9
  %20 = phi i64 [ %102, %96 ], [ 0, %9 ]
  %21 = phi i8* [ %98, %96 ], [ %0, %9 ]
  %22 = phi i32 [ %100, %96 ], [ 0, %9 ]
  %23 = phi i8* [ %99, %96 ], [ %1, %9 ]
  %24 = phi i8* [ %97, %96 ], [ %3, %9 ]
  %25 = mul i64 %20, %2
  %26 = getelementptr i8, i8* %1, i64 %25
  %27 = add i64 %25, %12
  %28 = getelementptr i8, i8* %1, i64 %27
  %29 = mul i64 %20, %4
  %30 = getelementptr i8, i8* %3, i64 %29
  %31 = add i64 %29, %12
  %32 = getelementptr i8, i8* %3, i64 %31
  %33 = mul i64 %20, %11
  %34 = getelementptr i8, i8* %0, i64 %33
  %35 = add i64 %33, %12
  %36 = getelementptr i8, i8* %0, i64 %35
  br i1 %10, label %37, label %96

37:                                               ; preds = %19
  br i1 %13, label %38, label %62

38:                                               ; preds = %94, %62, %37
  %39 = phi i64 [ 0, %62 ], [ 0, %37 ], [ %14, %94 ]
  %40 = xor i64 %39, -1
  br i1 %17, label %59, label %41

41:                                               ; preds = %38
  %42 = getelementptr inbounds i8, i8* %24, i64 %39
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = getelementptr inbounds i8, i8* %23, i64 %39
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = mul nuw nsw i32 %47, %44
  %49 = sub nsw i32 64, %44
  %50 = getelementptr inbounds i8, i8* %21, i64 %39
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = mul nsw i32 %49, %52
  %54 = add nuw nsw i32 %48, 32
  %55 = add nsw i32 %54, %53
  %56 = lshr i32 %55, 6
  %57 = trunc i32 %56 to i8
  store i8 %57, i8* %45, align 1
  %58 = or i64 %39, 1
  br label %59

59:                                               ; preds = %41, %38
  %60 = phi i64 [ %58, %41 ], [ %39, %38 ]
  %61 = icmp eq i64 %40, %18
  br i1 %61, label %96, label %103

62:                                               ; preds = %37
  %63 = icmp ult i8* %26, %32
  %64 = icmp ult i8* %30, %28
  %65 = and i1 %63, %64
  %66 = icmp ult i8* %26, %36
  %67 = icmp ult i8* %34, %28
  %68 = and i1 %66, %67
  %69 = or i1 %65, %68
  br i1 %69, label %38, label %70

70:                                               ; preds = %62, %70
  %71 = phi i64 [ %92, %70 ], [ 0, %62 ]
  %72 = getelementptr inbounds i8, i8* %24, i64 %71
  %73 = bitcast i8* %72 to <16 x i8>*
  %74 = load <16 x i8>, <16 x i8>* %73, align 1, !alias.scope !38
  %75 = zext <16 x i8> %74 to <16 x i32>
  %76 = getelementptr inbounds i8, i8* %23, i64 %71
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 1, !alias.scope !41, !noalias !43
  %79 = zext <16 x i8> %78 to <16 x i32>
  %80 = mul nuw nsw <16 x i32> %79, %75
  %81 = sub nsw <16 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %75
  %82 = getelementptr inbounds i8, i8* %21, i64 %71
  %83 = bitcast i8* %82 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !45
  %85 = zext <16 x i8> %84 to <16 x i32>
  %86 = mul nsw <16 x i32> %81, %85
  %87 = add nuw nsw <16 x i32> %80, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %88 = add nsw <16 x i32> %87, %86
  %89 = lshr <16 x i32> %88, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %90 = trunc <16 x i32> %89 to <16 x i8>
  %91 = bitcast i8* %76 to <16 x i8>*
  store <16 x i8> %90, <16 x i8>* %91, align 1, !alias.scope !41, !noalias !43
  %92 = add i64 %71, 16
  %93 = icmp eq i64 %92, %14
  br i1 %93, label %94, label %70, !llvm.loop !46

94:                                               ; preds = %70
  br i1 %15, label %96, label %38

95:                                               ; preds = %96, %7
  ret void

96:                                               ; preds = %59, %103, %94, %19
  %97 = getelementptr inbounds i8, i8* %24, i64 %4
  %98 = getelementptr inbounds i8, i8* %21, i64 %11
  %99 = getelementptr inbounds i8, i8* %23, i64 %2
  %100 = add nuw nsw i32 %22, 1
  %101 = icmp eq i32 %100, %6
  %102 = add i64 %20, 1
  br i1 %101, label %95, label %19

103:                                              ; preds = %59, %103
  %104 = phi i64 [ %138, %103 ], [ %60, %59 ]
  %105 = getelementptr inbounds i8, i8* %24, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = getelementptr inbounds i8, i8* %23, i64 %104
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = mul nuw nsw i32 %110, %107
  %112 = sub nsw i32 64, %107
  %113 = getelementptr inbounds i8, i8* %21, i64 %104
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = mul nsw i32 %112, %115
  %117 = add nuw nsw i32 %111, 32
  %118 = add nsw i32 %117, %116
  %119 = lshr i32 %118, 6
  %120 = trunc i32 %119 to i8
  store i8 %120, i8* %108, align 1
  %121 = add nuw nsw i64 %104, 1
  %122 = getelementptr inbounds i8, i8* %24, i64 %121
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = getelementptr inbounds i8, i8* %23, i64 %121
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = mul nuw nsw i32 %127, %124
  %129 = sub nsw i32 64, %124
  %130 = getelementptr inbounds i8, i8* %21, i64 %121
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = mul nsw i32 %129, %132
  %134 = add nuw nsw i32 %128, 32
  %135 = add nsw i32 %134, %133
  %136 = lshr i32 %135, 6
  %137 = trunc i32 %136 to i8
  store i8 %137, i8* %125, align 1
  %138 = add nuw nsw i64 %104, 2
  %139 = icmp eq i64 %138, %12
  br i1 %139, label %96, label %103, !llvm.loop !47
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_125InterIntraMaskBlend8bpp_CILi1ELi0EEEvPKhPhlS4_lii(i8* nocapture readonly, i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32) #2 {
  %8 = icmp sgt i32 %6, 0
  br i1 %8, label %9, label %90

9:                                                ; preds = %7
  %10 = icmp sgt i32 %5, 0
  %11 = sext i32 %5 to i64
  %12 = zext i32 %5 to i64
  %13 = add nsw i64 %12, -1
  %14 = shl nuw nsw i64 %12, 1
  %15 = icmp ult i32 %5, 16
  %16 = trunc i64 %13 to i32
  %17 = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %16, i32 2)
  %18 = extractvalue { i32, i1 } %17, 0
  %19 = extractvalue { i32, i1 } %17, 1
  %20 = icmp slt i32 %18, 0
  %21 = icmp ugt i64 %13, 4294967295
  %22 = or i1 %20, %21
  %23 = or i1 %22, %19
  %24 = and i64 %12, 4294967280
  %25 = icmp eq i64 %24, %12
  br label %26

26:                                               ; preds = %91, %9
  %27 = phi i64 [ %97, %91 ], [ 0, %9 ]
  %28 = phi i8* [ %93, %91 ], [ %0, %9 ]
  %29 = phi i32 [ %95, %91 ], [ 0, %9 ]
  %30 = phi i8* [ %94, %91 ], [ %1, %9 ]
  %31 = phi i8* [ %92, %91 ], [ %3, %9 ]
  %32 = mul i64 %27, %2
  %33 = getelementptr i8, i8* %1, i64 %32
  %34 = add i64 %32, %12
  %35 = getelementptr i8, i8* %1, i64 %34
  %36 = mul i64 %27, %11
  %37 = getelementptr i8, i8* %0, i64 %36
  %38 = add i64 %36, %12
  %39 = getelementptr i8, i8* %0, i64 %38
  %40 = mul i64 %27, %4
  %41 = getelementptr i8, i8* %3, i64 %40
  %42 = add i64 %14, %40
  %43 = getelementptr i8, i8* %3, i64 %42
  br i1 %10, label %44, label %91

44:                                               ; preds = %26
  %45 = or i1 %15, %23
  br i1 %45, label %46, label %48

46:                                               ; preds = %44, %89, %48
  %47 = phi i64 [ 0, %48 ], [ 0, %44 ], [ %24, %89 ]
  br label %98

48:                                               ; preds = %44
  %49 = icmp ult i8* %33, %39
  %50 = icmp ult i8* %37, %35
  %51 = and i1 %49, %50
  %52 = icmp ult i8* %33, %43
  %53 = icmp ult i8* %41, %35
  %54 = and i1 %52, %53
  %55 = or i1 %51, %54
  br i1 %55, label %46, label %56

56:                                               ; preds = %48, %56
  %57 = phi i64 [ %87, %56 ], [ 0, %48 ]
  %58 = shl i64 %57, 33
  %59 = ashr exact i64 %58, 32
  %60 = getelementptr inbounds i8, i8* %31, i64 %59
  %61 = bitcast i8* %60 to <32 x i8>*
  %62 = load <32 x i8>, <32 x i8>* %61, align 1
  %63 = shufflevector <32 x i8> %62, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %64 = shufflevector <32 x i8> %62, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %65 = zext <16 x i8> %63 to <16 x i32>
  %66 = zext <16 x i8> %64 to <16 x i32>
  %67 = add nuw nsw <16 x i32> %65, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %68 = add nuw nsw <16 x i32> %67, %66
  %69 = lshr <16 x i32> %68, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %70 = and <16 x i32> %69, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %71 = getelementptr inbounds i8, i8* %30, i64 %57
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !48, !noalias !51
  %74 = zext <16 x i8> %73 to <16 x i32>
  %75 = mul nuw nsw <16 x i32> %70, %74
  %76 = sub nsw <16 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %70
  %77 = getelementptr inbounds i8, i8* %28, i64 %57
  %78 = bitcast i8* %77 to <16 x i8>*
  %79 = load <16 x i8>, <16 x i8>* %78, align 1, !alias.scope !54
  %80 = zext <16 x i8> %79 to <16 x i32>
  %81 = mul nsw <16 x i32> %76, %80
  %82 = add nuw nsw <16 x i32> %75, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %83 = add nsw <16 x i32> %82, %81
  %84 = lshr <16 x i32> %83, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %85 = trunc <16 x i32> %84 to <16 x i8>
  %86 = bitcast i8* %71 to <16 x i8>*
  store <16 x i8> %85, <16 x i8>* %86, align 1, !alias.scope !48, !noalias !51
  %87 = add i64 %57, 16
  %88 = icmp eq i64 %87, %24
  br i1 %88, label %89, label %56, !llvm.loop !55

89:                                               ; preds = %56
  br i1 %25, label %91, label %46

90:                                               ; preds = %91, %7
  ret void

91:                                               ; preds = %98, %89, %26
  %92 = getelementptr inbounds i8, i8* %31, i64 %4
  %93 = getelementptr inbounds i8, i8* %28, i64 %11
  %94 = getelementptr inbounds i8, i8* %30, i64 %2
  %95 = add nuw nsw i32 %29, 1
  %96 = icmp eq i32 %95, %6
  %97 = add i64 %27, 1
  br i1 %96, label %90, label %26

98:                                               ; preds = %46, %98
  %99 = phi i64 [ %129, %98 ], [ %47, %46 ]
  %100 = shl i64 %99, 33
  %101 = ashr exact i64 %100, 32
  %102 = getelementptr inbounds i8, i8* %31, i64 %101
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = trunc i64 %99 to i32
  %106 = shl i32 %105, 1
  %107 = or i32 %106, 1
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i8, i8* %31, i64 %108
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = add nuw nsw i32 %104, 1
  %113 = add nuw nsw i32 %112, %111
  %114 = lshr i32 %113, 1
  %115 = and i32 %114, 255
  %116 = getelementptr inbounds i8, i8* %30, i64 %99
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = mul nuw nsw i32 %115, %118
  %120 = sub nsw i32 64, %115
  %121 = getelementptr inbounds i8, i8* %28, i64 %99
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = mul nsw i32 %120, %123
  %125 = add nuw nsw i32 %119, 32
  %126 = add nsw i32 %125, %124
  %127 = lshr i32 %126, 6
  %128 = trunc i32 %127 to i8
  store i8 %128, i8* %116, align 1
  %129 = add nuw nsw i64 %99, 1
  %130 = icmp eq i64 %129, %12
  br i1 %130, label %91, label %98, !llvm.loop !56
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_125InterIntraMaskBlend8bpp_CILi1ELi1EEEvPKhPhlS4_lii(i8* nocapture readonly, i8* nocapture, i64, i8* nocapture readonly, i64, i32, i32) #2 {
  %8 = icmp sgt i32 %6, 0
  br i1 %8, label %9, label %112

9:                                                ; preds = %7
  %10 = getelementptr inbounds i8, i8* %3, i64 %4
  %11 = icmp sgt i32 %5, 0
  %12 = shl nsw i64 %4, 1
  %13 = sext i32 %5 to i64
  %14 = zext i32 %5 to i64
  %15 = add nsw i64 %14, -1
  %16 = shl i64 %4, 1
  %17 = shl nuw nsw i64 %14, 1
  %18 = add i64 %17, %4
  %19 = icmp ult i32 %5, 16
  %20 = trunc i64 %15 to i32
  %21 = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %20, i32 2)
  %22 = extractvalue { i32, i1 } %21, 0
  %23 = extractvalue { i32, i1 } %21, 1
  %24 = icmp slt i32 %22, 0
  %25 = icmp ugt i64 %15, 4294967295
  %26 = or i1 %24, %25
  %27 = or i1 %26, %23
  %28 = and i64 %14, 4294967280
  %29 = icmp eq i64 %28, %14
  br label %30

30:                                               ; preds = %113, %9
  %31 = phi i64 [ %120, %113 ], [ 0, %9 ]
  %32 = phi i8* [ %116, %113 ], [ %0, %9 ]
  %33 = phi i32 [ %118, %113 ], [ 0, %9 ]
  %34 = phi i8* [ %115, %113 ], [ %10, %9 ]
  %35 = phi i8* [ %117, %113 ], [ %1, %9 ]
  %36 = phi i8* [ %114, %113 ], [ %3, %9 ]
  %37 = mul i64 %31, %2
  %38 = getelementptr i8, i8* %1, i64 %37
  %39 = add i64 %37, %14
  %40 = getelementptr i8, i8* %1, i64 %39
  %41 = mul i64 %31, %13
  %42 = getelementptr i8, i8* %0, i64 %41
  %43 = add i64 %41, %14
  %44 = getelementptr i8, i8* %0, i64 %43
  %45 = mul i64 %16, %31
  %46 = add i64 %45, %4
  %47 = getelementptr i8, i8* %3, i64 %46
  %48 = add i64 %18, %45
  %49 = getelementptr i8, i8* %3, i64 %48
  %50 = getelementptr i8, i8* %3, i64 %45
  %51 = add i64 %17, %45
  %52 = getelementptr i8, i8* %3, i64 %51
  br i1 %11, label %53, label %113

53:                                               ; preds = %30
  %54 = or i1 %19, %27
  br i1 %54, label %55, label %57

55:                                               ; preds = %53, %111, %57
  %56 = phi i64 [ 0, %57 ], [ 0, %53 ], [ %28, %111 ]
  br label %121

57:                                               ; preds = %53
  %58 = icmp ult i8* %38, %44
  %59 = icmp ult i8* %42, %40
  %60 = and i1 %58, %59
  %61 = icmp ult i8* %38, %49
  %62 = icmp ult i8* %47, %40
  %63 = and i1 %61, %62
  %64 = or i1 %60, %63
  %65 = icmp ult i8* %38, %52
  %66 = icmp ult i8* %50, %40
  %67 = and i1 %65, %66
  %68 = or i1 %64, %67
  br i1 %68, label %55, label %69

69:                                               ; preds = %57, %69
  %70 = phi i64 [ %109, %69 ], [ 0, %57 ]
  %71 = shl i64 %70, 33
  %72 = ashr exact i64 %71, 32
  %73 = getelementptr inbounds i8, i8* %36, i64 %72
  %74 = bitcast i8* %73 to <32 x i8>*
  %75 = load <32 x i8>, <32 x i8>* %74, align 1
  %76 = shufflevector <32 x i8> %75, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %77 = shufflevector <32 x i8> %75, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %78 = zext <16 x i8> %76 to <16 x i32>
  %79 = zext <16 x i8> %77 to <16 x i32>
  %80 = getelementptr inbounds i8, i8* %34, i64 %72
  %81 = bitcast i8* %80 to <32 x i8>*
  %82 = load <32 x i8>, <32 x i8>* %81, align 1
  %83 = shufflevector <32 x i8> %82, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %84 = shufflevector <32 x i8> %82, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %85 = zext <16 x i8> %83 to <16 x i32>
  %86 = zext <16 x i8> %84 to <16 x i32>
  %87 = add nuw nsw <16 x i32> %78, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %88 = add nuw nsw <16 x i32> %87, %79
  %89 = add nuw nsw <16 x i32> %88, %85
  %90 = add nuw nsw <16 x i32> %89, %86
  %91 = lshr <16 x i32> %90, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %92 = and <16 x i32> %91, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %93 = getelementptr inbounds i8, i8* %35, i64 %70
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1, !alias.scope !57, !noalias !60
  %96 = zext <16 x i8> %95 to <16 x i32>
  %97 = mul nuw nsw <16 x i32> %92, %96
  %98 = sub nsw <16 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %92
  %99 = getelementptr inbounds i8, i8* %32, i64 %70
  %100 = bitcast i8* %99 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 1, !alias.scope !64
  %102 = zext <16 x i8> %101 to <16 x i32>
  %103 = mul nsw <16 x i32> %98, %102
  %104 = add nuw nsw <16 x i32> %97, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %105 = add nsw <16 x i32> %104, %103
  %106 = lshr <16 x i32> %105, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %107 = trunc <16 x i32> %106 to <16 x i8>
  %108 = bitcast i8* %93 to <16 x i8>*
  store <16 x i8> %107, <16 x i8>* %108, align 1, !alias.scope !57, !noalias !60
  %109 = add i64 %70, 16
  %110 = icmp eq i64 %109, %28
  br i1 %110, label %111, label %69, !llvm.loop !65

111:                                              ; preds = %69
  br i1 %29, label %113, label %55

112:                                              ; preds = %113, %7
  ret void

113:                                              ; preds = %121, %111, %30
  %114 = getelementptr inbounds i8, i8* %36, i64 %12
  %115 = getelementptr inbounds i8, i8* %34, i64 %12
  %116 = getelementptr inbounds i8, i8* %32, i64 %13
  %117 = getelementptr inbounds i8, i8* %35, i64 %2
  %118 = add nuw nsw i32 %33, 1
  %119 = icmp eq i32 %118, %6
  %120 = add i64 %31, 1
  br i1 %119, label %112, label %30

121:                                              ; preds = %55, %121
  %122 = phi i64 [ %160, %121 ], [ %56, %55 ]
  %123 = shl i64 %122, 33
  %124 = ashr exact i64 %123, 32
  %125 = getelementptr inbounds i8, i8* %36, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = trunc i64 %122 to i32
  %129 = shl i32 %128, 1
  %130 = or i32 %129, 1
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i8, i8* %36, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = getelementptr inbounds i8, i8* %34, i64 %124
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i32
  %138 = getelementptr inbounds i8, i8* %34, i64 %131
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = add nuw nsw i32 %127, 2
  %142 = add nuw nsw i32 %141, %134
  %143 = add nuw nsw i32 %142, %137
  %144 = add nuw nsw i32 %143, %140
  %145 = lshr i32 %144, 2
  %146 = and i32 %145, 255
  %147 = getelementptr inbounds i8, i8* %35, i64 %122
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i32
  %150 = mul nuw nsw i32 %146, %149
  %151 = sub nsw i32 64, %146
  %152 = getelementptr inbounds i8, i8* %32, i64 %122
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i32
  %155 = mul nsw i32 %151, %154
  %156 = add nuw nsw i32 %150, 32
  %157 = add nsw i32 %156, %155
  %158 = lshr i32 %157, 6
  %159 = trunc i32 %158 to i8
  store i8 %159, i8* %147, align 1
  %160 = add nuw nsw i64 %122, 1
  %161 = icmp eq i64 %160, %14
  br i1 %161, label %113, label %121, !llvm.loop !66
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_111MaskBlend_CILi10EtLb0ELi0ELi0EEEvPKvS4_lPKhliiPvl(i8* nocapture readonly, i8* nocapture readonly, i64, i8* nocapture readonly, i64, i32, i32, i8* nocapture, i64) #2 {
  %10 = lshr i64 %8, 1
  %11 = icmp sgt i32 %6, 0
  br i1 %11, label %12, label %95

12:                                               ; preds = %9
  %13 = bitcast i8* %7 to i16*
  %14 = bitcast i8* %1 to i16*
  %15 = bitcast i8* %0 to i16*
  %16 = icmp sgt i32 %5, 0
  %17 = sext i32 %5 to i64
  %18 = zext i32 %5 to i64
  %19 = and i64 %8, -2
  %20 = shl nuw nsw i64 %18, 1
  %21 = shl nsw i64 %17, 1
  %22 = shl i64 %2, 1
  %23 = icmp ult i32 %5, 8
  %24 = and i64 %18, 4294967288
  %25 = icmp eq i64 %24, %18
  br label %26

26:                                               ; preds = %96, %12
  %27 = phi i64 [ %103, %96 ], [ 0, %12 ]
  %28 = phi i8* [ %98, %96 ], [ %3, %12 ]
  %29 = phi i16* [ %99, %96 ], [ %15, %12 ]
  %30 = phi i32 [ %101, %96 ], [ 0, %12 ]
  %31 = phi i16* [ %100, %96 ], [ %14, %12 ]
  %32 = phi i16* [ %97, %96 ], [ %13, %12 ]
  %33 = mul i64 %19, %27
  %34 = getelementptr i8, i8* %7, i64 %33
  %35 = add i64 %20, %33
  %36 = getelementptr i8, i8* %7, i64 %35
  %37 = mul i64 %27, %4
  %38 = getelementptr i8, i8* %3, i64 %37
  %39 = add i64 %37, %18
  %40 = getelementptr i8, i8* %3, i64 %39
  %41 = mul i64 %21, %27
  %42 = getelementptr i8, i8* %0, i64 %41
  %43 = add i64 %20, %41
  %44 = getelementptr i8, i8* %0, i64 %43
  %45 = mul i64 %22, %27
  %46 = getelementptr i8, i8* %1, i64 %45
  %47 = add i64 %20, %45
  %48 = getelementptr i8, i8* %1, i64 %47
  br i1 %16, label %49, label %96

49:                                               ; preds = %26
  br i1 %23, label %50, label %52

50:                                               ; preds = %94, %52, %49
  %51 = phi i64 [ 0, %52 ], [ 0, %49 ], [ %24, %94 ]
  br label %104

52:                                               ; preds = %49
  %53 = icmp ult i8* %34, %40
  %54 = icmp ult i8* %38, %36
  %55 = and i1 %53, %54
  %56 = icmp ult i8* %34, %44
  %57 = icmp ult i8* %42, %36
  %58 = and i1 %56, %57
  %59 = or i1 %55, %58
  %60 = icmp ult i8* %34, %48
  %61 = icmp ult i8* %46, %36
  %62 = and i1 %60, %61
  %63 = or i1 %59, %62
  br i1 %63, label %50, label %64

64:                                               ; preds = %52, %64
  %65 = phi i64 [ %92, %64 ], [ 0, %52 ]
  %66 = getelementptr inbounds i8, i8* %28, i64 %65
  %67 = bitcast i8* %66 to <8 x i8>*
  %68 = load <8 x i8>, <8 x i8>* %67, align 1, !alias.scope !67
  %69 = zext <8 x i8> %68 to <8 x i32>
  %70 = getelementptr inbounds i16, i16* %29, i64 %65
  %71 = bitcast i16* %70 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !70
  %73 = zext <8 x i16> %72 to <8 x i32>
  %74 = mul nuw nsw <8 x i32> %73, %69
  %75 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %69
  %76 = getelementptr inbounds i16, i16* %31, i64 %65
  %77 = bitcast i16* %76 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2, !alias.scope !72
  %79 = zext <8 x i16> %78 to <8 x i32>
  %80 = mul nsw <8 x i32> %75, %79
  %81 = add nsw <8 x i32> %80, %74
  %82 = ashr <8 x i32> %81, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %83 = add nsw <8 x i32> %82, <i32 -24568, i32 -24568, i32 -24568, i32 -24568, i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %84 = ashr <8 x i32> %83, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %85 = icmp slt <8 x i32> %84, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %86 = select <8 x i1> %85, <8 x i32> %84, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %87 = icmp sgt <8 x i32> %86, zeroinitializer
  %88 = select <8 x i1> %87, <8 x i32> %86, <8 x i32> zeroinitializer
  %89 = trunc <8 x i32> %88 to <8 x i16>
  %90 = getelementptr inbounds i16, i16* %32, i64 %65
  %91 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %91, align 2, !alias.scope !74, !noalias !76
  %92 = add i64 %65, 8
  %93 = icmp eq i64 %92, %24
  br i1 %93, label %94, label %64, !llvm.loop !77

94:                                               ; preds = %64
  br i1 %25, label %96, label %50

95:                                               ; preds = %96, %9
  ret void

96:                                               ; preds = %104, %94, %26
  %97 = getelementptr inbounds i16, i16* %32, i64 %10
  %98 = getelementptr inbounds i8, i8* %28, i64 %4
  %99 = getelementptr inbounds i16, i16* %29, i64 %17
  %100 = getelementptr inbounds i16, i16* %31, i64 %2
  %101 = add nuw nsw i32 %30, 1
  %102 = icmp eq i32 %101, %6
  %103 = add i64 %27, 1
  br i1 %102, label %95, label %26

104:                                              ; preds = %50, %104
  %105 = phi i64 [ %128, %104 ], [ %51, %50 ]
  %106 = getelementptr inbounds i8, i8* %28, i64 %105
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = getelementptr inbounds i16, i16* %29, i64 %105
  %110 = load i16, i16* %109, align 2
  %111 = zext i16 %110 to i32
  %112 = mul nuw nsw i32 %111, %108
  %113 = sub nsw i32 64, %108
  %114 = getelementptr inbounds i16, i16* %31, i64 %105
  %115 = load i16, i16* %114, align 2
  %116 = zext i16 %115 to i32
  %117 = mul nsw i32 %113, %116
  %118 = add nsw i32 %117, %112
  %119 = ashr i32 %118, 6
  %120 = add nsw i32 %119, -24568
  %121 = ashr i32 %120, 4
  %122 = icmp slt i32 %121, 1023
  %123 = select i1 %122, i32 %121, i32 1023
  %124 = icmp sgt i32 %123, 0
  %125 = select i1 %124, i32 %123, i32 0
  %126 = trunc i32 %125 to i16
  %127 = getelementptr inbounds i16, i16* %32, i64 %105
  store i16 %126, i16* %127, align 2
  %128 = add nuw nsw i64 %105, 1
  %129 = icmp eq i64 %128, %18
  br i1 %129, label %96, label %104, !llvm.loop !78
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_111MaskBlend_CILi10EtLb0ELi1ELi0EEEvPKvS4_lPKhliiPvl(i8* nocapture readonly, i8* nocapture readonly, i64, i8* nocapture readonly, i64, i32, i32, i8* nocapture, i64) #2 {
  %10 = lshr i64 %8, 1
  %11 = icmp sgt i32 %6, 0
  br i1 %11, label %12, label %114

12:                                               ; preds = %9
  %13 = bitcast i8* %7 to i16*
  %14 = bitcast i8* %1 to i16*
  %15 = bitcast i8* %0 to i16*
  %16 = icmp sgt i32 %5, 0
  %17 = sext i32 %5 to i64
  %18 = zext i32 %5 to i64
  %19 = add nsw i64 %18, -1
  %20 = and i64 %8, -2
  %21 = shl nuw nsw i64 %18, 1
  %22 = shl nsw i64 %17, 1
  %23 = shl i64 %2, 1
  %24 = icmp ult i32 %5, 8
  %25 = trunc i64 %19 to i32
  %26 = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %25, i32 2)
  %27 = extractvalue { i32, i1 } %26, 0
  %28 = extractvalue { i32, i1 } %26, 1
  %29 = icmp slt i32 %27, 0
  %30 = icmp ugt i64 %19, 4294967295
  %31 = or i1 %29, %30
  %32 = or i1 %31, %28
  %33 = and i64 %18, 4294967288
  %34 = icmp eq i64 %33, %18
  br label %35

35:                                               ; preds = %115, %12
  %36 = phi i64 [ %122, %115 ], [ 0, %12 ]
  %37 = phi i8* [ %117, %115 ], [ %3, %12 ]
  %38 = phi i16* [ %118, %115 ], [ %15, %12 ]
  %39 = phi i32 [ %120, %115 ], [ 0, %12 ]
  %40 = phi i16* [ %119, %115 ], [ %14, %12 ]
  %41 = phi i16* [ %116, %115 ], [ %13, %12 ]
  %42 = mul i64 %20, %36
  %43 = getelementptr i8, i8* %7, i64 %42
  %44 = add i64 %21, %42
  %45 = getelementptr i8, i8* %7, i64 %44
  %46 = mul i64 %22, %36
  %47 = getelementptr i8, i8* %0, i64 %46
  %48 = add i64 %21, %46
  %49 = getelementptr i8, i8* %0, i64 %48
  %50 = mul i64 %23, %36
  %51 = getelementptr i8, i8* %1, i64 %50
  %52 = add i64 %21, %50
  %53 = getelementptr i8, i8* %1, i64 %52
  %54 = mul i64 %36, %4
  %55 = getelementptr i8, i8* %3, i64 %54
  %56 = add i64 %21, %54
  %57 = getelementptr i8, i8* %3, i64 %56
  br i1 %16, label %58, label %115

58:                                               ; preds = %35
  %59 = or i1 %24, %32
  br i1 %59, label %60, label %62

60:                                               ; preds = %58, %113, %62
  %61 = phi i64 [ 0, %62 ], [ 0, %58 ], [ %33, %113 ]
  br label %123

62:                                               ; preds = %58
  %63 = icmp ult i8* %43, %49
  %64 = icmp ult i8* %47, %45
  %65 = and i1 %63, %64
  %66 = icmp ult i8* %43, %53
  %67 = icmp ult i8* %51, %45
  %68 = and i1 %66, %67
  %69 = or i1 %65, %68
  %70 = icmp ult i8* %43, %57
  %71 = icmp ult i8* %55, %45
  %72 = and i1 %70, %71
  %73 = or i1 %69, %72
  br i1 %73, label %60, label %74

74:                                               ; preds = %62, %74
  %75 = phi i64 [ %111, %74 ], [ 0, %62 ]
  %76 = shl i64 %75, 33
  %77 = ashr exact i64 %76, 32
  %78 = getelementptr inbounds i8, i8* %37, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = shufflevector <16 x i8> %80, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %82 = shufflevector <16 x i8> %80, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %83 = zext <8 x i8> %81 to <8 x i32>
  %84 = zext <8 x i8> %82 to <8 x i32>
  %85 = add nuw nsw <8 x i32> %83, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %86 = add nuw nsw <8 x i32> %85, %84
  %87 = lshr <8 x i32> %86, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %88 = and <8 x i32> %87, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %89 = getelementptr inbounds i16, i16* %38, i64 %75
  %90 = bitcast i16* %89 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2, !alias.scope !79
  %92 = zext <8 x i16> %91 to <8 x i32>
  %93 = mul nuw nsw <8 x i32> %88, %92
  %94 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %88
  %95 = getelementptr inbounds i16, i16* %40, i64 %75
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !82
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = mul nsw <8 x i32> %94, %98
  %100 = add nsw <8 x i32> %99, %93
  %101 = ashr <8 x i32> %100, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %102 = add nsw <8 x i32> %101, <i32 -24568, i32 -24568, i32 -24568, i32 -24568, i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %103 = ashr <8 x i32> %102, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %104 = icmp slt <8 x i32> %103, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %105 = select <8 x i1> %104, <8 x i32> %103, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %106 = icmp sgt <8 x i32> %105, zeroinitializer
  %107 = select <8 x i1> %106, <8 x i32> %105, <8 x i32> zeroinitializer
  %108 = trunc <8 x i32> %107 to <8 x i16>
  %109 = getelementptr inbounds i16, i16* %41, i64 %75
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %110, align 2, !alias.scope !84, !noalias !86
  %111 = add i64 %75, 8
  %112 = icmp eq i64 %111, %33
  br i1 %112, label %113, label %74, !llvm.loop !88

113:                                              ; preds = %74
  br i1 %34, label %115, label %60

114:                                              ; preds = %115, %9
  ret void

115:                                              ; preds = %123, %113, %35
  %116 = getelementptr inbounds i16, i16* %41, i64 %10
  %117 = getelementptr inbounds i8, i8* %37, i64 %4
  %118 = getelementptr inbounds i16, i16* %38, i64 %17
  %119 = getelementptr inbounds i16, i16* %40, i64 %2
  %120 = add nuw nsw i32 %39, 1
  %121 = icmp eq i32 %120, %6
  %122 = add i64 %36, 1
  br i1 %121, label %114, label %35

123:                                              ; preds = %60, %123
  %124 = phi i64 [ %160, %123 ], [ %61, %60 ]
  %125 = shl i64 %124, 33
  %126 = ashr exact i64 %125, 32
  %127 = getelementptr inbounds i8, i8* %37, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = trunc i64 %124 to i32
  %131 = shl i32 %130, 1
  %132 = or i32 %131, 1
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds i8, i8* %37, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = add nuw nsw i32 %129, 1
  %138 = add nuw nsw i32 %137, %136
  %139 = lshr i32 %138, 1
  %140 = and i32 %139, 255
  %141 = getelementptr inbounds i16, i16* %38, i64 %124
  %142 = load i16, i16* %141, align 2
  %143 = zext i16 %142 to i32
  %144 = mul nuw nsw i32 %140, %143
  %145 = sub nsw i32 64, %140
  %146 = getelementptr inbounds i16, i16* %40, i64 %124
  %147 = load i16, i16* %146, align 2
  %148 = zext i16 %147 to i32
  %149 = mul nsw i32 %145, %148
  %150 = add nsw i32 %149, %144
  %151 = ashr i32 %150, 6
  %152 = add nsw i32 %151, -24568
  %153 = ashr i32 %152, 4
  %154 = icmp slt i32 %153, 1023
  %155 = select i1 %154, i32 %153, i32 1023
  %156 = icmp sgt i32 %155, 0
  %157 = select i1 %156, i32 %155, i32 0
  %158 = trunc i32 %157 to i16
  %159 = getelementptr inbounds i16, i16* %41, i64 %124
  store i16 %158, i16* %159, align 2
  %160 = add nuw nsw i64 %124, 1
  %161 = icmp eq i64 %160, %18
  br i1 %161, label %115, label %123, !llvm.loop !89
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_111MaskBlend_CILi10EtLb0ELi1ELi1EEEvPKvS4_lPKhliiPvl(i8* nocapture readonly, i8* nocapture readonly, i64, i8* nocapture readonly, i64, i32, i32, i8* nocapture, i64) #2 {
  %10 = lshr i64 %8, 1
  %11 = icmp sgt i32 %6, 0
  br i1 %11, label %12, label %136

12:                                               ; preds = %9
  %13 = getelementptr inbounds i8, i8* %3, i64 %4
  %14 = bitcast i8* %7 to i16*
  %15 = bitcast i8* %1 to i16*
  %16 = bitcast i8* %0 to i16*
  %17 = icmp sgt i32 %5, 0
  %18 = shl nsw i64 %4, 1
  %19 = sext i32 %5 to i64
  %20 = zext i32 %5 to i64
  %21 = add nsw i64 %20, -1
  %22 = and i64 %8, -2
  %23 = shl nuw nsw i64 %20, 1
  %24 = shl nsw i64 %19, 1
  %25 = shl i64 %2, 1
  %26 = shl i64 %4, 1
  %27 = add i64 %23, %4
  %28 = icmp ult i32 %5, 8
  %29 = trunc i64 %21 to i32
  %30 = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %29, i32 2)
  %31 = extractvalue { i32, i1 } %30, 0
  %32 = extractvalue { i32, i1 } %30, 1
  %33 = icmp slt i32 %31, 0
  %34 = icmp ugt i64 %21, 4294967295
  %35 = or i1 %33, %34
  %36 = or i1 %35, %32
  %37 = and i64 %20, 4294967288
  %38 = icmp eq i64 %37, %20
  br label %39

39:                                               ; preds = %137, %12
  %40 = phi i64 [ %145, %137 ], [ 0, %12 ]
  %41 = phi i8* [ %139, %137 ], [ %3, %12 ]
  %42 = phi i16* [ %141, %137 ], [ %16, %12 ]
  %43 = phi i32 [ %143, %137 ], [ 0, %12 ]
  %44 = phi i16* [ %142, %137 ], [ %15, %12 ]
  %45 = phi i8* [ %140, %137 ], [ %13, %12 ]
  %46 = phi i16* [ %138, %137 ], [ %14, %12 ]
  %47 = mul i64 %22, %40
  %48 = getelementptr i8, i8* %7, i64 %47
  %49 = add i64 %23, %47
  %50 = getelementptr i8, i8* %7, i64 %49
  %51 = mul i64 %24, %40
  %52 = getelementptr i8, i8* %0, i64 %51
  %53 = add i64 %23, %51
  %54 = getelementptr i8, i8* %0, i64 %53
  %55 = mul i64 %25, %40
  %56 = getelementptr i8, i8* %1, i64 %55
  %57 = add i64 %23, %55
  %58 = getelementptr i8, i8* %1, i64 %57
  %59 = mul i64 %26, %40
  %60 = add i64 %59, %4
  %61 = getelementptr i8, i8* %3, i64 %60
  %62 = add i64 %27, %59
  %63 = getelementptr i8, i8* %3, i64 %62
  %64 = getelementptr i8, i8* %3, i64 %59
  %65 = add i64 %23, %59
  %66 = getelementptr i8, i8* %3, i64 %65
  br i1 %17, label %67, label %137

67:                                               ; preds = %39
  %68 = or i1 %28, %36
  br i1 %68, label %69, label %71

69:                                               ; preds = %67, %135, %71
  %70 = phi i64 [ 0, %71 ], [ 0, %67 ], [ %37, %135 ]
  br label %146

71:                                               ; preds = %67
  %72 = icmp ult i8* %48, %54
  %73 = icmp ult i8* %52, %50
  %74 = and i1 %72, %73
  %75 = icmp ult i8* %48, %58
  %76 = icmp ult i8* %56, %50
  %77 = and i1 %75, %76
  %78 = or i1 %74, %77
  %79 = icmp ult i8* %48, %63
  %80 = icmp ult i8* %61, %50
  %81 = and i1 %79, %80
  %82 = or i1 %78, %81
  %83 = icmp ult i8* %48, %66
  %84 = icmp ult i8* %64, %50
  %85 = and i1 %83, %84
  %86 = or i1 %82, %85
  br i1 %86, label %69, label %87

87:                                               ; preds = %71, %87
  %88 = phi i64 [ %133, %87 ], [ 0, %71 ]
  %89 = shl i64 %88, 33
  %90 = ashr exact i64 %89, 32
  %91 = getelementptr inbounds i8, i8* %41, i64 %90
  %92 = bitcast i8* %91 to <16 x i8>*
  %93 = load <16 x i8>, <16 x i8>* %92, align 1
  %94 = shufflevector <16 x i8> %93, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %95 = shufflevector <16 x i8> %93, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %96 = zext <8 x i8> %94 to <8 x i32>
  %97 = zext <8 x i8> %95 to <8 x i32>
  %98 = getelementptr inbounds i8, i8* %45, i64 %90
  %99 = bitcast i8* %98 to <16 x i8>*
  %100 = load <16 x i8>, <16 x i8>* %99, align 1
  %101 = shufflevector <16 x i8> %100, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %102 = shufflevector <16 x i8> %100, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %103 = zext <8 x i8> %101 to <8 x i32>
  %104 = zext <8 x i8> %102 to <8 x i32>
  %105 = add nuw nsw <8 x i32> %96, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %106 = add nuw nsw <8 x i32> %105, %97
  %107 = add nuw nsw <8 x i32> %106, %103
  %108 = add nuw nsw <8 x i32> %107, %104
  %109 = lshr <8 x i32> %108, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %110 = and <8 x i32> %109, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %111 = getelementptr inbounds i16, i16* %42, i64 %88
  %112 = bitcast i16* %111 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !90
  %114 = zext <8 x i16> %113 to <8 x i32>
  %115 = mul nuw nsw <8 x i32> %110, %114
  %116 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %110
  %117 = getelementptr inbounds i16, i16* %44, i64 %88
  %118 = bitcast i16* %117 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 2, !alias.scope !93
  %120 = zext <8 x i16> %119 to <8 x i32>
  %121 = mul nsw <8 x i32> %116, %120
  %122 = add nsw <8 x i32> %121, %115
  %123 = ashr <8 x i32> %122, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %124 = add nsw <8 x i32> %123, <i32 -24568, i32 -24568, i32 -24568, i32 -24568, i32 -24568, i32 -24568, i32 -24568, i32 -24568>
  %125 = ashr <8 x i32> %124, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %126 = icmp slt <8 x i32> %125, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %127 = select <8 x i1> %126, <8 x i32> %125, <8 x i32> <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %128 = icmp sgt <8 x i32> %127, zeroinitializer
  %129 = select <8 x i1> %128, <8 x i32> %127, <8 x i32> zeroinitializer
  %130 = trunc <8 x i32> %129 to <8 x i16>
  %131 = getelementptr inbounds i16, i16* %46, i64 %88
  %132 = bitcast i16* %131 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %132, align 2, !alias.scope !95, !noalias !97
  %133 = add i64 %88, 8
  %134 = icmp eq i64 %133, %37
  br i1 %134, label %135, label %87, !llvm.loop !100

135:                                              ; preds = %87
  br i1 %38, label %137, label %69

136:                                              ; preds = %137, %9
  ret void

137:                                              ; preds = %146, %135, %39
  %138 = getelementptr inbounds i16, i16* %46, i64 %10
  %139 = getelementptr inbounds i8, i8* %41, i64 %18
  %140 = getelementptr inbounds i8, i8* %45, i64 %18
  %141 = getelementptr inbounds i16, i16* %42, i64 %19
  %142 = getelementptr inbounds i16, i16* %44, i64 %2
  %143 = add nuw nsw i32 %43, 1
  %144 = icmp eq i32 %143, %6
  %145 = add i64 %40, 1
  br i1 %144, label %136, label %39

146:                                              ; preds = %69, %146
  %147 = phi i64 [ %191, %146 ], [ %70, %69 ]
  %148 = shl i64 %147, 33
  %149 = ashr exact i64 %148, 32
  %150 = getelementptr inbounds i8, i8* %41, i64 %149
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i32
  %153 = trunc i64 %147 to i32
  %154 = shl i32 %153, 1
  %155 = or i32 %154, 1
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds i8, i8* %41, i64 %156
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = getelementptr inbounds i8, i8* %45, i64 %149
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i32
  %163 = getelementptr inbounds i8, i8* %45, i64 %156
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = add nuw nsw i32 %152, 2
  %167 = add nuw nsw i32 %166, %159
  %168 = add nuw nsw i32 %167, %162
  %169 = add nuw nsw i32 %168, %165
  %170 = lshr i32 %169, 2
  %171 = and i32 %170, 255
  %172 = getelementptr inbounds i16, i16* %42, i64 %147
  %173 = load i16, i16* %172, align 2
  %174 = zext i16 %173 to i32
  %175 = mul nuw nsw i32 %171, %174
  %176 = sub nsw i32 64, %171
  %177 = getelementptr inbounds i16, i16* %44, i64 %147
  %178 = load i16, i16* %177, align 2
  %179 = zext i16 %178 to i32
  %180 = mul nsw i32 %176, %179
  %181 = add nsw i32 %180, %175
  %182 = ashr i32 %181, 6
  %183 = add nsw i32 %182, -24568
  %184 = ashr i32 %183, 4
  %185 = icmp slt i32 %184, 1023
  %186 = select i1 %185, i32 %184, i32 1023
  %187 = icmp sgt i32 %186, 0
  %188 = select i1 %187, i32 %186, i32 0
  %189 = trunc i32 %188 to i16
  %190 = getelementptr inbounds i16, i16* %46, i64 %147
  store i16 %189, i16* %190, align 2
  %191 = add nuw nsw i64 %147, 1
  %192 = icmp eq i64 %191, %20
  br i1 %192, label %137, label %146, !llvm.loop !101
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_111MaskBlend_CILi10EtLb1ELi0ELi0EEEvPKvS4_lPKhliiPvl(i8* nocapture readonly, i8* nocapture readonly, i64, i8* nocapture readonly, i64, i32, i32, i8* nocapture, i64) #2 {
  %10 = lshr i64 %8, 1
  %11 = icmp sgt i32 %6, 0
  br i1 %11, label %12, label %116

12:                                               ; preds = %9
  %13 = bitcast i8* %7 to i16*
  %14 = bitcast i8* %1 to i16*
  %15 = bitcast i8* %0 to i16*
  %16 = icmp sgt i32 %5, 0
  %17 = sext i32 %5 to i64
  %18 = zext i32 %5 to i64
  %19 = and i64 %8, -2
  %20 = shl nuw nsw i64 %18, 1
  %21 = shl i64 %2, 1
  %22 = shl nsw i64 %17, 1
  %23 = icmp ult i32 %5, 8
  %24 = and i64 %18, 4294967288
  %25 = icmp eq i64 %24, %18
  %26 = and i64 %18, 1
  %27 = icmp eq i64 %26, 0
  %28 = sub nsw i64 0, %18
  br label %29

29:                                               ; preds = %117, %12
  %30 = phi i64 [ %124, %117 ], [ 0, %12 ]
  %31 = phi i8* [ %119, %117 ], [ %3, %12 ]
  %32 = phi i32 [ %122, %117 ], [ 0, %12 ]
  %33 = phi i16* [ %120, %117 ], [ %15, %12 ]
  %34 = phi i16* [ %121, %117 ], [ %14, %12 ]
  %35 = phi i16* [ %118, %117 ], [ %13, %12 ]
  %36 = mul i64 %19, %30
  %37 = getelementptr i8, i8* %7, i64 %36
  %38 = add i64 %20, %36
  %39 = getelementptr i8, i8* %7, i64 %38
  %40 = mul i64 %30, %4
  %41 = getelementptr i8, i8* %3, i64 %40
  %42 = add i64 %40, %18
  %43 = getelementptr i8, i8* %3, i64 %42
  %44 = mul i64 %21, %30
  %45 = getelementptr i8, i8* %1, i64 %44
  %46 = add i64 %20, %44
  %47 = getelementptr i8, i8* %1, i64 %46
  %48 = mul i64 %22, %30
  %49 = getelementptr i8, i8* %0, i64 %48
  %50 = add i64 %20, %48
  %51 = getelementptr i8, i8* %0, i64 %50
  br i1 %16, label %52, label %117

52:                                               ; preds = %29
  br i1 %23, label %53, label %78

53:                                               ; preds = %115, %78, %52
  %54 = phi i64 [ 0, %78 ], [ 0, %52 ], [ %24, %115 ]
  %55 = xor i64 %54, -1
  br i1 %27, label %75, label %56

56:                                               ; preds = %53
  %57 = getelementptr inbounds i8, i8* %31, i64 %54
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = getelementptr inbounds i16, i16* %34, i64 %54
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = mul nuw nsw i32 %62, %59
  %64 = sub nsw i32 64, %59
  %65 = getelementptr inbounds i16, i16* %33, i64 %54
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = mul nsw i32 %64, %67
  %69 = add nuw nsw i32 %63, 32
  %70 = add nsw i32 %69, %68
  %71 = lshr i32 %70, 6
  %72 = trunc i32 %71 to i16
  %73 = getelementptr inbounds i16, i16* %35, i64 %54
  store i16 %72, i16* %73, align 2
  %74 = or i64 %54, 1
  br label %75

75:                                               ; preds = %56, %53
  %76 = phi i64 [ %74, %56 ], [ %54, %53 ]
  %77 = icmp eq i64 %55, %28
  br i1 %77, label %117, label %125

78:                                               ; preds = %52
  %79 = icmp ult i8* %37, %43
  %80 = icmp ult i8* %41, %39
  %81 = and i1 %79, %80
  %82 = icmp ult i8* %37, %47
  %83 = icmp ult i8* %45, %39
  %84 = and i1 %82, %83
  %85 = or i1 %81, %84
  %86 = icmp ult i8* %37, %51
  %87 = icmp ult i8* %49, %39
  %88 = and i1 %86, %87
  %89 = or i1 %85, %88
  br i1 %89, label %53, label %90

90:                                               ; preds = %78, %90
  %91 = phi i64 [ %113, %90 ], [ 0, %78 ]
  %92 = getelementptr inbounds i8, i8* %31, i64 %91
  %93 = bitcast i8* %92 to <8 x i8>*
  %94 = load <8 x i8>, <8 x i8>* %93, align 1, !alias.scope !102
  %95 = zext <8 x i8> %94 to <8 x i32>
  %96 = getelementptr inbounds i16, i16* %34, i64 %91
  %97 = bitcast i16* %96 to <8 x i16>*
  %98 = load <8 x i16>, <8 x i16>* %97, align 2, !alias.scope !105
  %99 = zext <8 x i16> %98 to <8 x i32>
  %100 = mul nuw nsw <8 x i32> %99, %95
  %101 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %95
  %102 = getelementptr inbounds i16, i16* %33, i64 %91
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !107
  %105 = zext <8 x i16> %104 to <8 x i32>
  %106 = mul nsw <8 x i32> %101, %105
  %107 = add nuw nsw <8 x i32> %100, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %108 = add nsw <8 x i32> %107, %106
  %109 = lshr <8 x i32> %108, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %110 = trunc <8 x i32> %109 to <8 x i16>
  %111 = getelementptr inbounds i16, i16* %35, i64 %91
  %112 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %112, align 2, !alias.scope !109, !noalias !111
  %113 = add i64 %91, 8
  %114 = icmp eq i64 %113, %24
  br i1 %114, label %115, label %90, !llvm.loop !112

115:                                              ; preds = %90
  br i1 %25, label %117, label %53

116:                                              ; preds = %117, %9
  ret void

117:                                              ; preds = %75, %125, %115, %29
  %118 = getelementptr inbounds i16, i16* %35, i64 %10
  %119 = getelementptr inbounds i8, i8* %31, i64 %4
  %120 = getelementptr inbounds i16, i16* %33, i64 %17
  %121 = getelementptr inbounds i16, i16* %34, i64 %2
  %122 = add nuw nsw i32 %32, 1
  %123 = icmp eq i32 %122, %6
  %124 = add i64 %30, 1
  br i1 %123, label %116, label %29

125:                                              ; preds = %75, %125
  %126 = phi i64 [ %162, %125 ], [ %76, %75 ]
  %127 = getelementptr inbounds i8, i8* %31, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = getelementptr inbounds i16, i16* %34, i64 %126
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = mul nuw nsw i32 %132, %129
  %134 = sub nsw i32 64, %129
  %135 = getelementptr inbounds i16, i16* %33, i64 %126
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = mul nsw i32 %134, %137
  %139 = add nuw nsw i32 %133, 32
  %140 = add nsw i32 %139, %138
  %141 = lshr i32 %140, 6
  %142 = trunc i32 %141 to i16
  %143 = getelementptr inbounds i16, i16* %35, i64 %126
  store i16 %142, i16* %143, align 2
  %144 = add nuw nsw i64 %126, 1
  %145 = getelementptr inbounds i8, i8* %31, i64 %144
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = getelementptr inbounds i16, i16* %34, i64 %144
  %149 = load i16, i16* %148, align 2
  %150 = zext i16 %149 to i32
  %151 = mul nuw nsw i32 %150, %147
  %152 = sub nsw i32 64, %147
  %153 = getelementptr inbounds i16, i16* %33, i64 %144
  %154 = load i16, i16* %153, align 2
  %155 = zext i16 %154 to i32
  %156 = mul nsw i32 %152, %155
  %157 = add nuw nsw i32 %151, 32
  %158 = add nsw i32 %157, %156
  %159 = lshr i32 %158, 6
  %160 = trunc i32 %159 to i16
  %161 = getelementptr inbounds i16, i16* %35, i64 %144
  store i16 %160, i16* %161, align 2
  %162 = add nuw nsw i64 %126, 2
  %163 = icmp eq i64 %162, %18
  br i1 %163, label %117, label %125, !llvm.loop !113
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_111MaskBlend_CILi10EtLb1ELi1ELi0EEEvPKvS4_lPKhliiPvl(i8* nocapture readonly, i8* nocapture readonly, i64, i8* nocapture readonly, i64, i32, i32, i8* nocapture, i64) #2 {
  %10 = lshr i64 %8, 1
  %11 = icmp sgt i32 %6, 0
  br i1 %11, label %12, label %109

12:                                               ; preds = %9
  %13 = bitcast i8* %7 to i16*
  %14 = bitcast i8* %1 to i16*
  %15 = bitcast i8* %0 to i16*
  %16 = icmp sgt i32 %5, 0
  %17 = sext i32 %5 to i64
  %18 = zext i32 %5 to i64
  %19 = add nsw i64 %18, -1
  %20 = and i64 %8, -2
  %21 = shl nuw nsw i64 %18, 1
  %22 = shl i64 %2, 1
  %23 = shl nsw i64 %17, 1
  %24 = icmp ult i32 %5, 8
  %25 = trunc i64 %19 to i32
  %26 = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %25, i32 2)
  %27 = extractvalue { i32, i1 } %26, 0
  %28 = extractvalue { i32, i1 } %26, 1
  %29 = icmp slt i32 %27, 0
  %30 = icmp ugt i64 %19, 4294967295
  %31 = or i1 %29, %30
  %32 = or i1 %31, %28
  %33 = and i64 %18, 4294967288
  %34 = icmp eq i64 %33, %18
  br label %35

35:                                               ; preds = %110, %12
  %36 = phi i64 [ %117, %110 ], [ 0, %12 ]
  %37 = phi i8* [ %112, %110 ], [ %3, %12 ]
  %38 = phi i32 [ %115, %110 ], [ 0, %12 ]
  %39 = phi i16* [ %113, %110 ], [ %15, %12 ]
  %40 = phi i16* [ %114, %110 ], [ %14, %12 ]
  %41 = phi i16* [ %111, %110 ], [ %13, %12 ]
  %42 = mul i64 %20, %36
  %43 = getelementptr i8, i8* %7, i64 %42
  %44 = add i64 %21, %42
  %45 = getelementptr i8, i8* %7, i64 %44
  %46 = mul i64 %22, %36
  %47 = getelementptr i8, i8* %1, i64 %46
  %48 = add i64 %21, %46
  %49 = getelementptr i8, i8* %1, i64 %48
  %50 = mul i64 %23, %36
  %51 = getelementptr i8, i8* %0, i64 %50
  %52 = add i64 %21, %50
  %53 = getelementptr i8, i8* %0, i64 %52
  %54 = mul i64 %36, %4
  %55 = getelementptr i8, i8* %3, i64 %54
  %56 = add i64 %21, %54
  %57 = getelementptr i8, i8* %3, i64 %56
  br i1 %16, label %58, label %110

58:                                               ; preds = %35
  %59 = or i1 %24, %32
  br i1 %59, label %60, label %62

60:                                               ; preds = %58, %108, %62
  %61 = phi i64 [ 0, %62 ], [ 0, %58 ], [ %33, %108 ]
  br label %118

62:                                               ; preds = %58
  %63 = icmp ult i8* %43, %49
  %64 = icmp ult i8* %47, %45
  %65 = and i1 %63, %64
  %66 = icmp ult i8* %43, %53
  %67 = icmp ult i8* %51, %45
  %68 = and i1 %66, %67
  %69 = or i1 %65, %68
  %70 = icmp ult i8* %43, %57
  %71 = icmp ult i8* %55, %45
  %72 = and i1 %70, %71
  %73 = or i1 %69, %72
  br i1 %73, label %60, label %74

74:                                               ; preds = %62, %74
  %75 = phi i64 [ %106, %74 ], [ 0, %62 ]
  %76 = shl i64 %75, 33
  %77 = ashr exact i64 %76, 32
  %78 = getelementptr inbounds i8, i8* %37, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = shufflevector <16 x i8> %80, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %82 = shufflevector <16 x i8> %80, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %83 = zext <8 x i8> %81 to <8 x i32>
  %84 = zext <8 x i8> %82 to <8 x i32>
  %85 = add nuw nsw <8 x i32> %83, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %86 = add nuw nsw <8 x i32> %85, %84
  %87 = lshr <8 x i32> %86, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %88 = and <8 x i32> %87, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %89 = getelementptr inbounds i16, i16* %40, i64 %75
  %90 = bitcast i16* %89 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2, !alias.scope !114
  %92 = zext <8 x i16> %91 to <8 x i32>
  %93 = mul nuw nsw <8 x i32> %88, %92
  %94 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %88
  %95 = getelementptr inbounds i16, i16* %39, i64 %75
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !117
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = mul nsw <8 x i32> %94, %98
  %100 = add nuw nsw <8 x i32> %93, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %101 = add nsw <8 x i32> %100, %99
  %102 = lshr <8 x i32> %101, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %103 = trunc <8 x i32> %102 to <8 x i16>
  %104 = getelementptr inbounds i16, i16* %41, i64 %75
  %105 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %105, align 2, !alias.scope !119, !noalias !121
  %106 = add i64 %75, 8
  %107 = icmp eq i64 %106, %33
  br i1 %107, label %108, label %74, !llvm.loop !123

108:                                              ; preds = %74
  br i1 %34, label %110, label %60

109:                                              ; preds = %110, %9
  ret void

110:                                              ; preds = %118, %108, %35
  %111 = getelementptr inbounds i16, i16* %41, i64 %10
  %112 = getelementptr inbounds i8, i8* %37, i64 %4
  %113 = getelementptr inbounds i16, i16* %39, i64 %17
  %114 = getelementptr inbounds i16, i16* %40, i64 %2
  %115 = add nuw nsw i32 %38, 1
  %116 = icmp eq i32 %115, %6
  %117 = add i64 %36, 1
  br i1 %116, label %109, label %35

118:                                              ; preds = %60, %118
  %119 = phi i64 [ %150, %118 ], [ %61, %60 ]
  %120 = shl i64 %119, 33
  %121 = ashr exact i64 %120, 32
  %122 = getelementptr inbounds i8, i8* %37, i64 %121
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = trunc i64 %119 to i32
  %126 = shl i32 %125, 1
  %127 = or i32 %126, 1
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds i8, i8* %37, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = add nuw nsw i32 %124, 1
  %133 = add nuw nsw i32 %132, %131
  %134 = lshr i32 %133, 1
  %135 = and i32 %134, 255
  %136 = getelementptr inbounds i16, i16* %40, i64 %119
  %137 = load i16, i16* %136, align 2
  %138 = zext i16 %137 to i32
  %139 = mul nuw nsw i32 %135, %138
  %140 = sub nsw i32 64, %135
  %141 = getelementptr inbounds i16, i16* %39, i64 %119
  %142 = load i16, i16* %141, align 2
  %143 = zext i16 %142 to i32
  %144 = mul nsw i32 %140, %143
  %145 = add nuw nsw i32 %139, 32
  %146 = add nsw i32 %145, %144
  %147 = lshr i32 %146, 6
  %148 = trunc i32 %147 to i16
  %149 = getelementptr inbounds i16, i16* %41, i64 %119
  store i16 %148, i16* %149, align 2
  %150 = add nuw nsw i64 %119, 1
  %151 = icmp eq i64 %150, %18
  br i1 %151, label %110, label %118, !llvm.loop !124
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN7libgav13dsp12_GLOBAL__N_111MaskBlend_CILi10EtLb1ELi1ELi1EEEvPKvS4_lPKhliiPvl(i8* nocapture readonly, i8* nocapture readonly, i64, i8* nocapture readonly, i64, i32, i32, i8* nocapture, i64) #2 {
  %10 = lshr i64 %8, 1
  %11 = icmp sgt i32 %6, 0
  br i1 %11, label %12, label %131

12:                                               ; preds = %9
  %13 = getelementptr inbounds i8, i8* %3, i64 %4
  %14 = bitcast i8* %7 to i16*
  %15 = bitcast i8* %1 to i16*
  %16 = bitcast i8* %0 to i16*
  %17 = icmp sgt i32 %5, 0
  %18 = shl nsw i64 %4, 1
  %19 = sext i32 %5 to i64
  %20 = zext i32 %5 to i64
  %21 = add nsw i64 %20, -1
  %22 = and i64 %8, -2
  %23 = shl nuw nsw i64 %20, 1
  %24 = shl i64 %2, 1
  %25 = shl nsw i64 %19, 1
  %26 = shl i64 %4, 1
  %27 = add i64 %23, %4
  %28 = icmp ult i32 %5, 8
  %29 = trunc i64 %21 to i32
  %30 = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %29, i32 2)
  %31 = extractvalue { i32, i1 } %30, 0
  %32 = extractvalue { i32, i1 } %30, 1
  %33 = icmp slt i32 %31, 0
  %34 = icmp ugt i64 %21, 4294967295
  %35 = or i1 %33, %34
  %36 = or i1 %35, %32
  %37 = and i64 %20, 4294967288
  %38 = icmp eq i64 %37, %20
  br label %39

39:                                               ; preds = %132, %12
  %40 = phi i64 [ %140, %132 ], [ 0, %12 ]
  %41 = phi i8* [ %134, %132 ], [ %3, %12 ]
  %42 = phi i32 [ %138, %132 ], [ 0, %12 ]
  %43 = phi i16* [ %136, %132 ], [ %16, %12 ]
  %44 = phi i8* [ %135, %132 ], [ %13, %12 ]
  %45 = phi i16* [ %137, %132 ], [ %15, %12 ]
  %46 = phi i16* [ %133, %132 ], [ %14, %12 ]
  %47 = mul i64 %22, %40
  %48 = getelementptr i8, i8* %7, i64 %47
  %49 = add i64 %23, %47
  %50 = getelementptr i8, i8* %7, i64 %49
  %51 = mul i64 %24, %40
  %52 = getelementptr i8, i8* %1, i64 %51
  %53 = add i64 %23, %51
  %54 = getelementptr i8, i8* %1, i64 %53
  %55 = mul i64 %25, %40
  %56 = getelementptr i8, i8* %0, i64 %55
  %57 = add i64 %23, %55
  %58 = getelementptr i8, i8* %0, i64 %57
  %59 = mul i64 %26, %40
  %60 = add i64 %59, %4
  %61 = getelementptr i8, i8* %3, i64 %60
  %62 = add i64 %27, %59
  %63 = getelementptr i8, i8* %3, i64 %62
  %64 = getelementptr i8, i8* %3, i64 %59
  %65 = add i64 %23, %59
  %66 = getelementptr i8, i8* %3, i64 %65
  br i1 %17, label %67, label %132

67:                                               ; preds = %39
  %68 = or i1 %28, %36
  br i1 %68, label %69, label %71

69:                                               ; preds = %67, %130, %71
  %70 = phi i64 [ 0, %71 ], [ 0, %67 ], [ %37, %130 ]
  br label %141

71:                                               ; preds = %67
  %72 = icmp ult i8* %48, %54
  %73 = icmp ult i8* %52, %50
  %74 = and i1 %72, %73
  %75 = icmp ult i8* %48, %58
  %76 = icmp ult i8* %56, %50
  %77 = and i1 %75, %76
  %78 = or i1 %74, %77
  %79 = icmp ult i8* %48, %63
  %80 = icmp ult i8* %61, %50
  %81 = and i1 %79, %80
  %82 = or i1 %78, %81
  %83 = icmp ult i8* %48, %66
  %84 = icmp ult i8* %64, %50
  %85 = and i1 %83, %84
  %86 = or i1 %82, %85
  br i1 %86, label %69, label %87

87:                                               ; preds = %71, %87
  %88 = phi i64 [ %128, %87 ], [ 0, %71 ]
  %89 = shl i64 %88, 33
  %90 = ashr exact i64 %89, 32
  %91 = getelementptr inbounds i8, i8* %41, i64 %90
  %92 = bitcast i8* %91 to <16 x i8>*
  %93 = load <16 x i8>, <16 x i8>* %92, align 1
  %94 = shufflevector <16 x i8> %93, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %95 = shufflevector <16 x i8> %93, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %96 = zext <8 x i8> %94 to <8 x i32>
  %97 = zext <8 x i8> %95 to <8 x i32>
  %98 = getelementptr inbounds i8, i8* %44, i64 %90
  %99 = bitcast i8* %98 to <16 x i8>*
  %100 = load <16 x i8>, <16 x i8>* %99, align 1
  %101 = shufflevector <16 x i8> %100, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %102 = shufflevector <16 x i8> %100, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %103 = zext <8 x i8> %101 to <8 x i32>
  %104 = zext <8 x i8> %102 to <8 x i32>
  %105 = add nuw nsw <8 x i32> %96, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %106 = add nuw nsw <8 x i32> %105, %97
  %107 = add nuw nsw <8 x i32> %106, %103
  %108 = add nuw nsw <8 x i32> %107, %104
  %109 = lshr <8 x i32> %108, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %110 = and <8 x i32> %109, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %111 = getelementptr inbounds i16, i16* %45, i64 %88
  %112 = bitcast i16* %111 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !125
  %114 = zext <8 x i16> %113 to <8 x i32>
  %115 = mul nuw nsw <8 x i32> %110, %114
  %116 = sub nsw <8 x i32> <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>, %110
  %117 = getelementptr inbounds i16, i16* %43, i64 %88
  %118 = bitcast i16* %117 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 2, !alias.scope !128
  %120 = zext <8 x i16> %119 to <8 x i32>
  %121 = mul nsw <8 x i32> %116, %120
  %122 = add nuw nsw <8 x i32> %115, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %123 = add nsw <8 x i32> %122, %121
  %124 = lshr <8 x i32> %123, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %125 = trunc <8 x i32> %124 to <8 x i16>
  %126 = getelementptr inbounds i16, i16* %46, i64 %88
  %127 = bitcast i16* %126 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %127, align 2, !alias.scope !130, !noalias !132
  %128 = add i64 %88, 8
  %129 = icmp eq i64 %128, %37
  br i1 %129, label %130, label %87, !llvm.loop !135

130:                                              ; preds = %87
  br i1 %38, label %132, label %69

131:                                              ; preds = %132, %9
  ret void

132:                                              ; preds = %141, %130, %39
  %133 = getelementptr inbounds i16, i16* %46, i64 %10
  %134 = getelementptr inbounds i8, i8* %41, i64 %18
  %135 = getelementptr inbounds i8, i8* %44, i64 %18
  %136 = getelementptr inbounds i16, i16* %43, i64 %19
  %137 = getelementptr inbounds i16, i16* %45, i64 %2
  %138 = add nuw nsw i32 %42, 1
  %139 = icmp eq i32 %138, %6
  %140 = add i64 %40, 1
  br i1 %139, label %131, label %39

141:                                              ; preds = %69, %141
  %142 = phi i64 [ %181, %141 ], [ %70, %69 ]
  %143 = shl i64 %142, 33
  %144 = ashr exact i64 %143, 32
  %145 = getelementptr inbounds i8, i8* %41, i64 %144
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = trunc i64 %142 to i32
  %149 = shl i32 %148, 1
  %150 = or i32 %149, 1
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds i8, i8* %41, i64 %151
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i32
  %155 = getelementptr inbounds i8, i8* %44, i64 %144
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i32
  %158 = getelementptr inbounds i8, i8* %44, i64 %151
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = add nuw nsw i32 %147, 2
  %162 = add nuw nsw i32 %161, %154
  %163 = add nuw nsw i32 %162, %157
  %164 = add nuw nsw i32 %163, %160
  %165 = lshr i32 %164, 2
  %166 = and i32 %165, 255
  %167 = getelementptr inbounds i16, i16* %45, i64 %142
  %168 = load i16, i16* %167, align 2
  %169 = zext i16 %168 to i32
  %170 = mul nuw nsw i32 %166, %169
  %171 = sub nsw i32 64, %166
  %172 = getelementptr inbounds i16, i16* %43, i64 %142
  %173 = load i16, i16* %172, align 2
  %174 = zext i16 %173 to i32
  %175 = mul nsw i32 %171, %174
  %176 = add nuw nsw i32 %170, 32
  %177 = add nsw i32 %176, %175
  %178 = lshr i32 %177, 6
  %179 = trunc i32 %178 to i16
  %180 = getelementptr inbounds i16, i16* %46, i64 %142
  store i16 %179, i16* %180, align 2
  %181 = add nuw nsw i64 %142, 1
  %182 = icmp eq i64 %181, %20
  br i1 %182, label %132, label %141, !llvm.loop !136
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.umul.with.overflow.i32(i32, i32) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8}
!8 = distinct !{!8, !4}
!9 = !{!10}
!10 = distinct !{!10, !4}
!11 = !{!3, !6, !8}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !13}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = !{!19}
!19 = distinct !{!19, !17}
!20 = !{!21}
!21 = distinct !{!21, !17}
!22 = !{!16, !19, !23}
!23 = distinct !{!23, !17}
!24 = distinct !{!24, !13}
!25 = distinct !{!25, !13}
!26 = !{!27}
!27 = distinct !{!27, !28}
!28 = distinct !{!28, !"LVerDomain"}
!29 = !{!30}
!30 = distinct !{!30, !28}
!31 = !{!32}
!32 = distinct !{!32, !28}
!33 = !{!27, !30, !34, !35}
!34 = distinct !{!34, !28}
!35 = distinct !{!35, !28}
!36 = distinct !{!36, !13}
!37 = distinct !{!37, !13}
!38 = !{!39}
!39 = distinct !{!39, !40}
!40 = distinct !{!40, !"LVerDomain"}
!41 = !{!42}
!42 = distinct !{!42, !40}
!43 = !{!39, !44}
!44 = distinct !{!44, !40}
!45 = !{!44}
!46 = distinct !{!46, !13}
!47 = distinct !{!47, !13}
!48 = !{!49}
!49 = distinct !{!49, !50}
!50 = distinct !{!50, !"LVerDomain"}
!51 = !{!52, !53}
!52 = distinct !{!52, !50}
!53 = distinct !{!53, !50}
!54 = !{!52}
!55 = distinct !{!55, !13}
!56 = distinct !{!56, !13}
!57 = !{!58}
!58 = distinct !{!58, !59}
!59 = distinct !{!59, !"LVerDomain"}
!60 = !{!61, !62, !63}
!61 = distinct !{!61, !59}
!62 = distinct !{!62, !59}
!63 = distinct !{!63, !59}
!64 = !{!61}
!65 = distinct !{!65, !13}
!66 = distinct !{!66, !13}
!67 = !{!68}
!68 = distinct !{!68, !69}
!69 = distinct !{!69, !"LVerDomain"}
!70 = !{!71}
!71 = distinct !{!71, !69}
!72 = !{!73}
!73 = distinct !{!73, !69}
!74 = !{!75}
!75 = distinct !{!75, !69}
!76 = !{!68, !71, !73}
!77 = distinct !{!77, !13}
!78 = distinct !{!78, !13}
!79 = !{!80}
!80 = distinct !{!80, !81}
!81 = distinct !{!81, !"LVerDomain"}
!82 = !{!83}
!83 = distinct !{!83, !81}
!84 = !{!85}
!85 = distinct !{!85, !81}
!86 = !{!80, !83, !87}
!87 = distinct !{!87, !81}
!88 = distinct !{!88, !13}
!89 = distinct !{!89, !13}
!90 = !{!91}
!91 = distinct !{!91, !92}
!92 = distinct !{!92, !"LVerDomain"}
!93 = !{!94}
!94 = distinct !{!94, !92}
!95 = !{!96}
!96 = distinct !{!96, !92}
!97 = !{!91, !94, !98, !99}
!98 = distinct !{!98, !92}
!99 = distinct !{!99, !92}
!100 = distinct !{!100, !13}
!101 = distinct !{!101, !13}
!102 = !{!103}
!103 = distinct !{!103, !104}
!104 = distinct !{!104, !"LVerDomain"}
!105 = !{!106}
!106 = distinct !{!106, !104}
!107 = !{!108}
!108 = distinct !{!108, !104}
!109 = !{!110}
!110 = distinct !{!110, !104}
!111 = !{!103, !106, !108}
!112 = distinct !{!112, !13}
!113 = distinct !{!113, !13}
!114 = !{!115}
!115 = distinct !{!115, !116}
!116 = distinct !{!116, !"LVerDomain"}
!117 = !{!118}
!118 = distinct !{!118, !116}
!119 = !{!120}
!120 = distinct !{!120, !116}
!121 = !{!115, !118, !122}
!122 = distinct !{!122, !116}
!123 = distinct !{!123, !13}
!124 = distinct !{!124, !13}
!125 = !{!126}
!126 = distinct !{!126, !127}
!127 = distinct !{!127, !"LVerDomain"}
!128 = !{!129}
!129 = distinct !{!129, !127}
!130 = !{!131}
!131 = distinct !{!131, !127}
!132 = !{!126, !129, !133, !134}
!133 = distinct !{!133, !127}
!134 = distinct !{!134, !127}
!135 = distinct !{!135, !13}
!136 = distinct !{!136, !13}
