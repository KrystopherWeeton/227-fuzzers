; ModuleID = '../../third_party/pdfium/core/fxcrt/cfx_utf8decoder.cpp'
source_filename = "../../third_party/pdfium/core/fxcrt/cfx_utf8decoder.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_UTF8Decoder = type { i32, i32, %class.CFX_WideTextBuf }
%class.CFX_WideTextBuf = type { %class.CFX_BinaryBuf }
%class.CFX_BinaryBuf = type { i32 (...)**, i64, i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }

@_ZTV15CFX_WideTextBuf = external unnamed_addr constant { [5 x i8*] }, align 8

@_ZN15CFX_UTF8DecoderC1Ev = hidden unnamed_addr alias void (%class.CFX_UTF8Decoder*), void (%class.CFX_UTF8Decoder*)* @_ZN15CFX_UTF8DecoderC2Ev
@_ZN15CFX_UTF8DecoderD1Ev = hidden unnamed_addr alias void (%class.CFX_UTF8Decoder*), void (%class.CFX_UTF8Decoder*)* @_ZN15CFX_UTF8DecoderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CFX_UTF8DecoderC2Ev(%class.CFX_UTF8Decoder*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_UTF8Decoder, %class.CFX_UTF8Decoder* %0, i64 0, i32 0
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %class.CFX_UTF8Decoder, %class.CFX_UTF8Decoder* %0, i64 0, i32 1
  store i32 0, i32* %3, align 4
  %4 = getelementptr inbounds %class.CFX_UTF8Decoder, %class.CFX_UTF8Decoder* %0, i64 0, i32 2
  %5 = getelementptr inbounds %class.CFX_WideTextBuf, %class.CFX_WideTextBuf* %4, i64 0, i32 0
  tail call void @_ZN13CFX_BinaryBufC2Ev(%class.CFX_BinaryBuf* %5) #3
  %6 = getelementptr inbounds %class.CFX_WideTextBuf, %class.CFX_WideTextBuf* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTV15CFX_WideTextBuf, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CFX_UTF8DecoderD2Ev(%class.CFX_UTF8Decoder*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_UTF8Decoder, %class.CFX_UTF8Decoder* %0, i64 0, i32 2, i32 0
  tail call void @_ZN13CFX_BinaryBufD2Ev(%class.CFX_BinaryBuf* %2) #3
  ret void
}

; Function Attrs: nounwind
declare void @_ZN13CFX_BinaryBufD2Ev(%class.CFX_BinaryBuf*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CFX_UTF8Decoder15AppendCodePointEj(%class.CFX_UTF8Decoder*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFX_UTF8Decoder, %class.CFX_UTF8Decoder* %0, i64 0, i32 2
  tail call void @_ZN15CFX_WideTextBuf10AppendCharEw(%class.CFX_WideTextBuf* %3, i32 signext %1) #3
  ret void
}

declare void @_ZN15CFX_WideTextBuf10AppendCharEw(%class.CFX_WideTextBuf*, i32 signext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15CFX_UTF8Decoder5InputEh(%class.CFX_UTF8Decoder*, i8 zeroext) local_unnamed_addr #0 align 2 {
  %3 = zext i8 %1 to i32
  %4 = icmp sgt i8 %1, -1
  br i1 %4, label %5, label %8

5:                                                ; preds = %2
  %6 = getelementptr inbounds %class.CFX_UTF8Decoder, %class.CFX_UTF8Decoder* %0, i64 0, i32 0
  store i32 0, i32* %6, align 8
  %7 = getelementptr inbounds %class.CFX_UTF8Decoder, %class.CFX_UTF8Decoder* %0, i64 0, i32 2
  tail call void @_ZN15CFX_WideTextBuf10AppendCharEw(%class.CFX_WideTextBuf* %7, i32 signext %3) #3
  br label %61

8:                                                ; preds = %2
  %9 = icmp ult i8 %1, -64
  br i1 %9, label %10, label %25

10:                                               ; preds = %8
  %11 = getelementptr inbounds %class.CFX_UTF8Decoder, %class.CFX_UTF8Decoder* %0, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %61, label %14

14:                                               ; preds = %10
  %15 = add nsw i32 %12, -1
  store i32 %15, i32* %11, align 8
  %16 = and i32 %3, 63
  %17 = mul nsw i32 %15, 6
  %18 = shl i32 %16, %17
  %19 = getelementptr inbounds %class.CFX_UTF8Decoder, %class.CFX_UTF8Decoder* %0, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = or i32 %20, %18
  store i32 %21, i32* %19, align 4
  %22 = icmp eq i32 %15, 0
  br i1 %22, label %23, label %61

23:                                               ; preds = %14
  %24 = getelementptr inbounds %class.CFX_UTF8Decoder, %class.CFX_UTF8Decoder* %0, i64 0, i32 2
  tail call void @_ZN15CFX_WideTextBuf10AppendCharEw(%class.CFX_WideTextBuf* %24, i32 signext %21) #3
  br label %61

25:                                               ; preds = %8
  %26 = icmp ult i8 %1, -32
  br i1 %26, label %27, label %32

27:                                               ; preds = %25
  %28 = getelementptr inbounds %class.CFX_UTF8Decoder, %class.CFX_UTF8Decoder* %0, i64 0, i32 0
  store i32 1, i32* %28, align 8
  %29 = shl nuw nsw i32 %3, 6
  %30 = and i32 %29, 1984
  %31 = getelementptr inbounds %class.CFX_UTF8Decoder, %class.CFX_UTF8Decoder* %0, i64 0, i32 1
  store i32 %30, i32* %31, align 4
  br label %61

32:                                               ; preds = %25
  %33 = icmp ult i8 %1, -16
  br i1 %33, label %34, label %39

34:                                               ; preds = %32
  %35 = getelementptr inbounds %class.CFX_UTF8Decoder, %class.CFX_UTF8Decoder* %0, i64 0, i32 0
  store i32 2, i32* %35, align 8
  %36 = shl nuw nsw i32 %3, 12
  %37 = and i32 %36, 61440
  %38 = getelementptr inbounds %class.CFX_UTF8Decoder, %class.CFX_UTF8Decoder* %0, i64 0, i32 1
  store i32 %37, i32* %38, align 4
  br label %61

39:                                               ; preds = %32
  %40 = icmp ult i8 %1, -8
  br i1 %40, label %41, label %46

41:                                               ; preds = %39
  %42 = getelementptr inbounds %class.CFX_UTF8Decoder, %class.CFX_UTF8Decoder* %0, i64 0, i32 0
  store i32 3, i32* %42, align 8
  %43 = shl nuw nsw i32 %3, 18
  %44 = and i32 %43, 1835008
  %45 = getelementptr inbounds %class.CFX_UTF8Decoder, %class.CFX_UTF8Decoder* %0, i64 0, i32 1
  store i32 %44, i32* %45, align 4
  br label %61

46:                                               ; preds = %39
  %47 = icmp ult i8 %1, -4
  br i1 %47, label %48, label %53

48:                                               ; preds = %46
  %49 = getelementptr inbounds %class.CFX_UTF8Decoder, %class.CFX_UTF8Decoder* %0, i64 0, i32 0
  store i32 4, i32* %49, align 8
  %50 = shl nuw i32 %3, 24
  %51 = and i32 %50, 50331648
  %52 = getelementptr inbounds %class.CFX_UTF8Decoder, %class.CFX_UTF8Decoder* %0, i64 0, i32 1
  store i32 %51, i32* %52, align 4
  br label %61

53:                                               ; preds = %46
  %54 = icmp ult i8 %1, -2
  %55 = getelementptr inbounds %class.CFX_UTF8Decoder, %class.CFX_UTF8Decoder* %0, i64 0, i32 0
  br i1 %54, label %56, label %60

56:                                               ; preds = %53
  store i32 5, i32* %55, align 8
  %57 = shl i32 %3, 30
  %58 = and i32 %57, 1073741824
  %59 = getelementptr inbounds %class.CFX_UTF8Decoder, %class.CFX_UTF8Decoder* %0, i64 0, i32 1
  store i32 %58, i32* %59, align 4
  br label %61

60:                                               ; preds = %53
  store i32 0, i32* %55, align 8
  br label %61

61:                                               ; preds = %23, %14, %34, %48, %60, %56, %41, %27, %10, %5
  ret void
}

declare void @_ZN13CFX_BinaryBufC2Ev(%class.CFX_BinaryBuf*) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
