; ModuleID = '../../third_party/skia/src/gpu/ops/GrOp.cpp'
source_filename = "../../third_party/skia/src/gpu/ops/GrOp.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.GrOp = type { i32 (...)**, %"class.std::__1::unique_ptr", %class.GrOp*, i16, i16, i32, %struct.SkRect }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.GrOp* }
%struct.SkRect = type { float, float, float, float }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%class.GrCaps = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8, i8 }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic.2" }>
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i32 }
%class.sk_sp = type { %class.GrShaderCaps* }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.GrDriverBugWorkarounds = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.std::__1::function" = type opaque

$_ZN4GrOpD2Ev = comdat any

$_ZN4GrOpD0Ev = comdat any

$_ZNK4GrOp12visitProxiesERKNSt3__18functionIFvP14GrSurfaceProxy11GrMipmappedEEE = comdat any

$_ZN4GrOp19onCombineIfPossibleEPS_P12SkArenaAllocRK6GrCaps = comdat any

$_ZTV4GrOp = comdat any

@_ZN4GrOp14gCurrOpClassIDE = hidden local_unnamed_addr global { { i32 } } { { i32 } { i32 1 } }, align 4
@_ZN4GrOp15gCurrOpUniqueIDE = hidden local_unnamed_addr global { { i32 } } { { i32 } { i32 1 } }, align 4
@_ZTV4GrOp = linkonce_odr hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrOp*)* @_ZN4GrOpD2Ev to i8*), i8* bitcast (void (%class.GrOp*)* @_ZN4GrOpD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%class.GrOp*, %"class.std::__1::function"*)* @_ZNK4GrOp12visitProxiesERKNSt3__18functionIFvP14GrSurfaceProxy11GrMipmappedEEE to i8*), i8* bitcast (i32 (%class.GrOp*, %class.GrOp*, %class.SkArenaAlloc*, %class.GrCaps*)* @_ZN4GrOp19onCombineIfPossibleEPS_P12SkArenaAllocRK6GrCaps to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4GrOpC2Ej(%class.GrOp* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.GrOp, %class.GrOp* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTV4GrOp, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %class.GrOp, %class.GrOp* %0, i64 0, i32 1
  %5 = getelementptr inbounds %class.GrOp, %class.GrOp* %0, i64 0, i32 3
  %6 = trunc i32 %1 to i16
  %7 = bitcast %"class.std::__1::unique_ptr"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false)
  store i16 %6, i16* %5, align 8
  %8 = getelementptr inbounds %class.GrOp, %class.GrOp* %0, i64 0, i32 5
  store i32 0, i32* %8, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4GrOp17combineIfPossibleEPS_P12SkArenaAllocRK6GrCaps(%class.GrOp*, %class.GrOp*, %class.SkArenaAlloc*, %class.GrCaps* dereferenceable(232)) local_unnamed_addr #1 align 2 {
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = getelementptr inbounds %class.GrOp, %class.GrOp* %0, i64 0, i32 3
  %10 = load i16, i16* %9, align 8
  %11 = getelementptr inbounds %class.GrOp, %class.GrOp* %1, i64 0, i32 3
  %12 = load i16, i16* %11, align 8
  %13 = icmp eq i16 %10, %12
  br i1 %13, label %14, label %81

14:                                               ; preds = %4
  %15 = bitcast %class.GrOp* %0 to i32 (%class.GrOp*, %class.GrOp*, %class.SkArenaAlloc*, %class.GrCaps*)***
  %16 = load i32 (%class.GrOp*, %class.GrOp*, %class.SkArenaAlloc*, %class.GrCaps*)**, i32 (%class.GrOp*, %class.GrOp*, %class.SkArenaAlloc*, %class.GrCaps*)*** %15, align 8
  %17 = getelementptr inbounds i32 (%class.GrOp*, %class.GrOp*, %class.SkArenaAlloc*, %class.GrCaps*)*, i32 (%class.GrOp*, %class.GrOp*, %class.SkArenaAlloc*, %class.GrCaps*)** %16, i64 4
  %18 = load i32 (%class.GrOp*, %class.GrOp*, %class.SkArenaAlloc*, %class.GrCaps*)*, i32 (%class.GrOp*, %class.GrOp*, %class.SkArenaAlloc*, %class.GrCaps*)** %17, align 8
  %19 = tail call i32 %18(%class.GrOp* %0, %class.GrOp* %1, %class.SkArenaAlloc* %2, %class.GrCaps* dereferenceable(232) %3) #5
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %81

21:                                               ; preds = %14
  %22 = getelementptr inbounds %class.GrOp, %class.GrOp* %1, i64 0, i32 4
  %23 = load i16, i16* %22, align 2
  %24 = and i16 %23, 1
  %25 = icmp eq i16 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %class.GrOp, %class.GrOp* %0, i64 0, i32 4
  %28 = load i16, i16* %27, align 2
  %29 = or i16 %28, 1
  store i16 %29, i16* %27, align 2
  %30 = load i16, i16* %22, align 2
  br label %31

31:                                               ; preds = %26, %21
  %32 = phi i16 [ %23, %21 ], [ %30, %26 ]
  %33 = and i16 %32, 2
  %34 = icmp eq i16 %33, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %class.GrOp, %class.GrOp* %0, i64 0, i32 4
  %37 = load i16, i16* %36, align 2
  %38 = or i16 %37, 2
  store i16 %38, i16* %36, align 2
  br label %39

39:                                               ; preds = %31, %35
  %40 = getelementptr inbounds %class.GrOp, %class.GrOp* %0, i64 0, i32 6
  %41 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %40, i64 0, i32 0
  %42 = bitcast float* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %42)
  %43 = getelementptr inbounds %class.GrOp, %class.GrOp* %1, i64 0, i32 6, i32 0
  %44 = load float, float* %43, align 4
  store float %44, float* %5, align 4
  %45 = load float, float* %41, align 4
  %46 = fcmp olt float %44, %45
  %47 = select i1 %46, float* %5, float* %41
  %48 = bitcast float* %47 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = bitcast %struct.SkRect* %40 to i32*
  store i32 %49, i32* %50, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %42)
  %51 = getelementptr inbounds %class.GrOp, %class.GrOp* %0, i64 0, i32 6, i32 1
  %52 = bitcast float* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %52)
  %53 = getelementptr inbounds %class.GrOp, %class.GrOp* %1, i64 0, i32 6, i32 1
  %54 = load float, float* %53, align 4
  store float %54, float* %6, align 4
  %55 = load float, float* %51, align 4
  %56 = fcmp olt float %54, %55
  %57 = select i1 %56, float* %6, float* %51
  %58 = bitcast float* %57 to i32*
  %59 = load i32, i32* %58, align 4
  %60 = bitcast float* %51 to i32*
  store i32 %59, i32* %60, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52)
  %61 = getelementptr inbounds %class.GrOp, %class.GrOp* %0, i64 0, i32 6, i32 2
  %62 = bitcast float* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %62)
  %63 = getelementptr inbounds %class.GrOp, %class.GrOp* %1, i64 0, i32 6, i32 2
  %64 = load float, float* %63, align 4
  store float %64, float* %7, align 4
  %65 = load float, float* %61, align 4
  %66 = fcmp olt float %65, %64
  %67 = select i1 %66, float* %7, float* %61
  %68 = bitcast float* %67 to i32*
  %69 = load i32, i32* %68, align 4
  %70 = bitcast float* %61 to i32*
  store i32 %69, i32* %70, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %62)
  %71 = getelementptr inbounds %class.GrOp, %class.GrOp* %0, i64 0, i32 6, i32 3
  %72 = bitcast float* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %72)
  %73 = getelementptr inbounds %class.GrOp, %class.GrOp* %1, i64 0, i32 6, i32 3
  %74 = load float, float* %73, align 4
  store float %74, float* %8, align 4
  %75 = load float, float* %71, align 4
  %76 = fcmp olt float %75, %74
  %77 = select i1 %76, float* %8, float* %71
  %78 = bitcast float* %77 to i32*
  %79 = load i32, i32* %78, align 4
  %80 = bitcast float* %71 to i32*
  store i32 %79, i32* %80, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %72)
  br label %81

81:                                               ; preds = %14, %39, %4
  %82 = phi i32 [ 2, %4 ], [ 0, %39 ], [ %19, %14 ]
  ret i32 %82
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4GrOp11chainConcatENSt3__110unique_ptrIS_NS0_14default_deleteIS_EEEE(%class.GrOp*, %class.GrOp*) local_unnamed_addr #1 align 2 {
  %3 = ptrtoint %class.GrOp* %1 to i64
  %4 = getelementptr inbounds %class.GrOp, %class.GrOp* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %4, i64 0, i32 0, i32 0, i32 0
  %6 = load %class.GrOp*, %class.GrOp** %5, align 8
  %7 = bitcast %"class.std::__1::unique_ptr"* %4 to i64*
  store i64 %3, i64* %7, align 8
  %8 = icmp eq %class.GrOp* %6, null
  br i1 %8, label %15, label %9

9:                                                ; preds = %2
  %10 = bitcast %class.GrOp* %6 to void (%class.GrOp*)***
  %11 = load void (%class.GrOp*)**, void (%class.GrOp*)*** %10, align 8
  %12 = getelementptr inbounds void (%class.GrOp*)*, void (%class.GrOp*)** %11, i64 1
  %13 = load void (%class.GrOp*)*, void (%class.GrOp*)** %12, align 8
  tail call void %13(%class.GrOp* nonnull %6) #5
  %14 = load %class.GrOp*, %class.GrOp** %5, align 8
  br label %15

15:                                               ; preds = %9, %2
  %16 = phi %class.GrOp* [ %14, %9 ], [ %1, %2 ]
  %17 = getelementptr inbounds %class.GrOp, %class.GrOp* %16, i64 0, i32 2
  store %class.GrOp* %0, %class.GrOp** %17, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden %class.GrOp* @_ZN4GrOp8cutChainEv(%class.GrOp* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.GrOp, %class.GrOp* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %class.GrOp*, %class.GrOp** %2, align 8
  %4 = icmp eq %class.GrOp* %3, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.GrOp, %class.GrOp* %3, i64 0, i32 2
  store %class.GrOp* null, %class.GrOp** %6, align 8
  %7 = load %class.GrOp*, %class.GrOp** %2, align 8
  store %class.GrOp* null, %class.GrOp** %2, align 8
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi %class.GrOp* [ %7, %5 ], [ null, %1 ]
  ret %class.GrOp* %9
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4GrOpD2Ev(%class.GrOp*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %class.GrOp, %class.GrOp* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTV4GrOp, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrOp, %class.GrOp* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %class.GrOp*, %class.GrOp** %3, align 8
  store %class.GrOp* null, %class.GrOp** %3, align 8
  %5 = icmp eq %class.GrOp* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %class.GrOp* %4 to void (%class.GrOp*)***
  %8 = load void (%class.GrOp*)**, void (%class.GrOp*)*** %7, align 8
  %9 = getelementptr inbounds void (%class.GrOp*)*, void (%class.GrOp*)** %8, i64 1
  %10 = load void (%class.GrOp*)*, void (%class.GrOp*)** %9, align 8
  tail call void %10(%class.GrOp* nonnull %4) #5
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4GrOpD0Ev(%class.GrOp*) unnamed_addr #1 comdat align 2 {
  tail call void @llvm.trap() #6
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4GrOp12visitProxiesERKNSt3__18functionIFvP14GrSurfaceProxy11GrMipmappedEEE(%class.GrOp*, %"class.std::__1::function"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN4GrOp19onCombineIfPossibleEPS_P12SkArenaAllocRK6GrCaps(%class.GrOp*, %class.GrOp*, %class.SkArenaAlloc*, %class.GrCaps* dereferenceable(232)) unnamed_addr #1 comdat align 2 {
  ret i32 2
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
