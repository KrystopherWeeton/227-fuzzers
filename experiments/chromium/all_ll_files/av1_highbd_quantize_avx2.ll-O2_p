; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/x86/av1_highbd_quantize_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/x86/av1_highbd_quantize_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_highbd_quantize_fp_avx2(i32* nocapture readonly, i64, i16* nocapture readnone, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readnone, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readnone, i16* nocapture readonly, i32) local_unnamed_addr #0 {
  %14 = bitcast i16* %3 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 1
  %16 = icmp eq i32 %12, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %13
  %18 = sub nsw i32 15, %12
  %19 = shl i32 1, %18
  %20 = trunc i32 %19 to i16
  %21 = insertelement <8 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <8 x i16> %21, <8 x i16> undef, <8 x i32> zeroinitializer
  %23 = bitcast <2 x i64> %15 to <8 x i16>
  %24 = tail call <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16> %23, <8 x i16> %22) #2
  %25 = bitcast <8 x i16> %24 to <2 x i64>
  br label %26

26:                                               ; preds = %13, %17
  %27 = phi <2 x i64> [ %15, %13 ], [ %25, %17 ]
  %28 = bitcast i16* %4 to <8 x i16>*
  %29 = load <8 x i16>, <8 x i16>* %28, align 1
  %30 = bitcast i16* %8 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 1
  %32 = bitcast <2 x i64> %27 to <8 x i16>
  %33 = shufflevector <8 x i16> %32, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %34 = bitcast <8 x i16> %33 to <2 x i64>
  %35 = shufflevector <8 x i16> %32, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %36 = shufflevector <2 x i64> %34, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %37 = bitcast <4 x i64> %36 to <8 x i32>
  %38 = bitcast <8 x i16> %35 to <4 x i32>
  %39 = shufflevector <4 x i32> %38, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %40 = shufflevector <8 x i32> %37, <8 x i32> %39, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %41 = shufflevector <8 x i16> %29, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %42 = bitcast <8 x i16> %41 to <2 x i64>
  %43 = shufflevector <8 x i16> %29, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %44 = shufflevector <2 x i64> %42, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %45 = bitcast <4 x i64> %44 to <8 x i32>
  %46 = bitcast <8 x i16> %43 to <4 x i32>
  %47 = shufflevector <4 x i32> %46, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <8 x i32> %45, <8 x i32> %47, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %49 = bitcast <8 x i32> %48 to <4 x i64>
  %50 = shufflevector <8 x i16> %31, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %51 = bitcast <8 x i16> %50 to <2 x i64>
  %52 = shufflevector <8 x i16> %31, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %53 = shufflevector <2 x i64> %51, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %54 = bitcast <4 x i64> %53 to <8 x i32>
  %55 = bitcast <8 x i16> %52 to <4 x i32>
  %56 = shufflevector <4 x i32> %55, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %57 = shufflevector <8 x i32> %54, <8 x i32> %56, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %58 = bitcast i32* %0 to <8 x i32>*
  %59 = load <8 x i32>, <8 x i32>* %58, align 1
  %60 = sub <8 x i32> zeroinitializer, %59
  %61 = icmp slt <8 x i32> %59, zeroinitializer
  %62 = select <8 x i1> %61, <8 x i32> %60, <8 x i32> %59
  %63 = add <8 x i32> %40, %62
  %64 = bitcast <8 x i32> %63 to <4 x i64>
  %65 = shl <4 x i64> %64, <i64 32, i64 32, i64 32, i64 32>
  %66 = ashr exact <4 x i64> %65, <i64 32, i64 32, i64 32, i64 32>
  %67 = shl <4 x i64> %49, <i64 32, i64 32, i64 32, i64 32>
  %68 = ashr exact <4 x i64> %67, <i64 32, i64 32, i64 32, i64 32>
  %69 = mul nsw <4 x i64> %66, %68
  %70 = ashr <4 x i64> %64, <i64 32, i64 32, i64 32, i64 32>
  %71 = ashr <4 x i64> %49, <i64 32, i64 32, i64 32, i64 32>
  %72 = mul nsw <4 x i64> %70, %71
  %73 = sub nsw i32 16, %12
  %74 = tail call <4 x i64> @llvm.x86.avx2.psrli.q(<4 x i64> %69, i32 %73) #2
  %75 = tail call <4 x i64> @llvm.x86.avx2.psrli.q(<4 x i64> %72, i32 %73) #2
  %76 = shl <4 x i64> %75, <i64 32, i64 32, i64 32, i64 32>
  %77 = or <4 x i64> %76, %74
  %78 = add nsw i32 %12, 1
  %79 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %62, i32 %78) #2
  %80 = icmp sgt <8 x i32> %57, %79
  %81 = sext <8 x i1> %80 to <8 x i32>
  %82 = bitcast <8 x i32> %81 to <4 x i64>
  %83 = xor <4 x i64> %82, <i64 -1, i64 -1, i64 -1, i64 -1>
  %84 = and <4 x i64> %77, %83
  %85 = bitcast <4 x i64> %84 to <8 x i32>
  %86 = mul <8 x i32> %57, %85
  %87 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %86, i32 %12) #2
  %88 = tail call <8 x i32> @llvm.x86.avx2.psign.d(<8 x i32> %85, <8 x i32> %59) #2
  %89 = tail call <8 x i32> @llvm.x86.avx2.psign.d(<8 x i32> %87, <8 x i32> %59) #2
  %90 = bitcast i32* %6 to <8 x i32>*
  store <8 x i32> %88, <8 x i32>* %90, align 1
  %91 = bitcast i32* %7 to <8 x i32>*
  store <8 x i32> %89, <8 x i32>* %91, align 1
  %92 = bitcast i16* %11 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 1
  %94 = shufflevector <8 x i16> %93, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %95 = bitcast <8 x i16> %94 to <2 x i64>
  %96 = shufflevector <8 x i16> %93, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %97 = shufflevector <2 x i64> %95, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %98 = bitcast <4 x i64> %97 to <8 x i32>
  %99 = bitcast <8 x i16> %96 to <4 x i32>
  %100 = shufflevector <4 x i32> %99, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %101 = shufflevector <8 x i32> %98, <8 x i32> %100, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %102 = icmp ne <8 x i32> %89, zeroinitializer
  %103 = sext <8 x i1> %102 to <8 x i32>
  %104 = sub <8 x i32> %101, %103
  %105 = and <8 x i32> %104, %103
  %106 = icmp sgt <8 x i32> %105, zeroinitializer
  %107 = select <8 x i1> %106, <8 x i32> %105, <8 x i32> zeroinitializer
  %108 = shufflevector <4 x i64> %49, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %109 = add nsw i64 %1, -8
  %110 = icmp sgt i64 %109, 0
  br i1 %110, label %111, label %179

111:                                              ; preds = %26
  %112 = bitcast <8 x i32> %57 to <4 x i64>
  %113 = shufflevector <4 x i64> %112, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %114 = bitcast <8 x i32> %40 to <4 x i64>
  %115 = shufflevector <4 x i64> %114, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %116 = bitcast <4 x i64> %115 to <8 x i32>
  %117 = shl <4 x i64> %108, <i64 32, i64 32, i64 32, i64 32>
  %118 = ashr exact <4 x i64> %117, <i64 32, i64 32, i64 32, i64 32>
  %119 = ashr <4 x i64> %108, <i64 32, i64 32, i64 32, i64 32>
  %120 = bitcast <4 x i64> %113 to <8 x i32>
  br label %121

121:                                              ; preds = %111, %121
  %122 = phi i16* [ %11, %111 ], [ %131, %121 ]
  %123 = phi i32* [ %7, %111 ], [ %130, %121 ]
  %124 = phi i32* [ %6, %111 ], [ %129, %121 ]
  %125 = phi i32* [ %0, %111 ], [ %128, %121 ]
  %126 = phi i64 [ %109, %111 ], [ %177, %121 ]
  %127 = phi <8 x i32> [ %107, %111 ], [ %176, %121 ]
  %128 = getelementptr inbounds i32, i32* %125, i64 8
  %129 = getelementptr inbounds i32, i32* %124, i64 8
  %130 = getelementptr inbounds i32, i32* %123, i64 8
  %131 = getelementptr inbounds i16, i16* %122, i64 8
  %132 = bitcast i32* %128 to <8 x i32>*
  %133 = load <8 x i32>, <8 x i32>* %132, align 1
  %134 = sub <8 x i32> zeroinitializer, %133
  %135 = icmp slt <8 x i32> %133, zeroinitializer
  %136 = select <8 x i1> %135, <8 x i32> %134, <8 x i32> %133
  %137 = add <8 x i32> %136, %116
  %138 = bitcast <8 x i32> %137 to <4 x i64>
  %139 = shl <4 x i64> %138, <i64 32, i64 32, i64 32, i64 32>
  %140 = ashr exact <4 x i64> %139, <i64 32, i64 32, i64 32, i64 32>
  %141 = mul nsw <4 x i64> %140, %118
  %142 = ashr <4 x i64> %138, <i64 32, i64 32, i64 32, i64 32>
  %143 = mul nsw <4 x i64> %142, %119
  %144 = tail call <4 x i64> @llvm.x86.avx2.psrli.q(<4 x i64> %141, i32 %73) #2
  %145 = tail call <4 x i64> @llvm.x86.avx2.psrli.q(<4 x i64> %143, i32 %73) #2
  %146 = shl <4 x i64> %145, <i64 32, i64 32, i64 32, i64 32>
  %147 = or <4 x i64> %146, %144
  %148 = tail call <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32> %136, i32 %78) #2
  %149 = icmp slt <8 x i32> %148, %120
  %150 = sext <8 x i1> %149 to <8 x i32>
  %151 = bitcast <8 x i32> %150 to <4 x i64>
  %152 = xor <4 x i64> %151, <i64 -1, i64 -1, i64 -1, i64 -1>
  %153 = and <4 x i64> %147, %152
  %154 = bitcast <4 x i64> %153 to <8 x i32>
  %155 = mul <8 x i32> %154, %120
  %156 = tail call <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32> %155, i32 %12) #2
  %157 = tail call <8 x i32> @llvm.x86.avx2.psign.d(<8 x i32> %154, <8 x i32> %133) #2
  %158 = tail call <8 x i32> @llvm.x86.avx2.psign.d(<8 x i32> %156, <8 x i32> %133) #2
  %159 = bitcast i32* %129 to <8 x i32>*
  store <8 x i32> %157, <8 x i32>* %159, align 1
  %160 = bitcast i32* %130 to <8 x i32>*
  store <8 x i32> %158, <8 x i32>* %160, align 1
  %161 = bitcast i16* %131 to <8 x i16>*
  %162 = load <8 x i16>, <8 x i16>* %161, align 1
  %163 = shufflevector <8 x i16> %162, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %164 = bitcast <8 x i16> %163 to <2 x i64>
  %165 = shufflevector <8 x i16> %162, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %166 = shufflevector <2 x i64> %164, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %167 = bitcast <4 x i64> %166 to <8 x i32>
  %168 = bitcast <8 x i16> %165 to <4 x i32>
  %169 = shufflevector <4 x i32> %168, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %170 = shufflevector <8 x i32> %167, <8 x i32> %169, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %171 = icmp ne <8 x i32> %158, zeroinitializer
  %172 = sext <8 x i1> %171 to <8 x i32>
  %173 = sub <8 x i32> %170, %172
  %174 = and <8 x i32> %173, %172
  %175 = icmp sgt <8 x i32> %174, %127
  %176 = select <8 x i1> %175, <8 x i32> %174, <8 x i32> %127
  %177 = add nsw i64 %126, -8
  %178 = icmp sgt i64 %177, 0
  br i1 %178, label %121, label %179

179:                                              ; preds = %121, %26
  %180 = phi <8 x i32> [ %107, %26 ], [ %176, %121 ]
  %181 = shufflevector <8 x i32> %180, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 0, i32 6, i32 7, i32 4, i32 4>
  %182 = bitcast <8 x i32> %180 to <16 x i16>
  %183 = bitcast <8 x i32> %181 to <16 x i16>
  %184 = icmp sgt <16 x i16> %182, %183
  %185 = select <16 x i1> %184, <16 x i16> %182, <16 x i16> %183
  %186 = shufflevector <16 x i16> %185, <16 x i16> undef, <16 x i32> <i32 2, i32 3, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7, i32 10, i32 11, i32 8, i32 8, i32 12, i32 13, i32 14, i32 15>
  %187 = icmp sgt <16 x i16> %185, %186
  %188 = select <16 x i1> %187, <16 x i16> %185, <16 x i16> %186
  %189 = shufflevector <16 x i16> %188, <16 x i16> undef, <16 x i32> <i32 1, i32 0, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7, i32 9, i32 8, i32 8, i32 8, i32 12, i32 13, i32 14, i32 15>
  %190 = icmp sgt <16 x i16> %188, %189
  %191 = select <16 x i1> %190, <16 x i16> %188, <16 x i16> %189
  %192 = bitcast <16 x i16> %191 to <4 x i64>
  %193 = shufflevector <4 x i64> %192, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %194 = bitcast <16 x i16> %191 to <8 x i32>
  %195 = shufflevector <8 x i32> %194, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %196 = bitcast <2 x i64> %193 to <8 x i16>
  %197 = bitcast <4 x i32> %195 to <8 x i16>
  %198 = icmp sgt <8 x i16> %196, %197
  %199 = select <8 x i1> %198, <8 x i16> %196, <8 x i16> %197
  %200 = extractelement <8 x i16> %199, i64 0
  store i16 %200, i16* %9, align 2
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.pmul.hr.sw.128(<8 x i16>, <8 x i16>) #1

; Function Attrs: nounwind readnone
declare <4 x i64> @llvm.x86.avx2.psrli.q(<4 x i64>, i32) #1

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.pslli.d(<8 x i32>, i32) #1

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.psrai.d(<8 x i32>, i32) #1

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.psign.d(<8 x i32>, <8 x i32>) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
