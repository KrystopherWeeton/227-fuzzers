; ModuleID = '../../third_party/vulkan_memory_allocator/vma.cpp'
source_filename = "../../third_party/vulkan_memory_allocator/vma.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VkAllocationCallbacks = type { i8*, i8* (i8*, i64, i64, i32)*, i8* (i8*, i8*, i64, i64, i32)*, void (i8*, i8*)*, void (i8*, i64, i32, i32)*, void (i8*, i64, i32, i32)* }
%struct.VkImage_T = type opaque
%struct.VkBuffer_T = type opaque
%class.VmaJsonWriter = type <{ %class.VmaStringBuilder*, %class.VmaVector.0, i8, [7 x i8] }>
%class.VmaVector.0 = type { %class.VmaStlAllocator.1, %"struct.VmaJsonWriter::StackItem"*, i64, i64 }
%class.VmaStlAllocator.1 = type { %struct.VkAllocationCallbacks* }
%"struct.VmaJsonWriter::StackItem" = type { i32, i32, i8 }
%class.VmaStringBuilder = type { %class.VmaVector }
%class.VmaVector = type { %class.VmaStlAllocator, i8*, i64, i64 }
%class.VmaStlAllocator = type { %struct.VkAllocationCallbacks* }
%class.VmaBlockMetadata_Generic = type { %class.VmaBlockMetadata, i32, i64, %class.VmaList, %class.VmaVector.18 }
%class.VmaBlockMetadata = type { i32 (...)**, i64, %struct.VkAllocationCallbacks* }
%class.VmaList = type { %class.VmaRawList }
%class.VmaRawList = type { %struct.VkAllocationCallbacks*, %class.VmaPoolAllocator.15, %struct.VmaListItem*, %struct.VmaListItem*, i64 }
%class.VmaPoolAllocator.15 = type { %struct.VkAllocationCallbacks*, i32, %class.VmaVector.16 }
%class.VmaVector.16 = type { %class.VmaStlAllocator.17, %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"*, i64, i64 }
%class.VmaStlAllocator.17 = type { %struct.VkAllocationCallbacks* }
%"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock" = type { %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*, i32, i32 }
%"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item" = type { i32, [44 x i8] }
%struct.VmaListItem = type { %struct.VmaListItem*, %struct.VmaListItem*, %struct.VmaSuballocation }
%struct.VmaSuballocation = type { i64, i64, %struct.VmaAllocation_T*, i32 }
%struct.VmaAllocation_T = type { i64, i64, i8*, %"struct.std::__1::atomic", i32, i8, i8, i8, i8, %union.anon, i32, i32 }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%union.anon = type { %"struct.VmaAllocation_T::BlockAllocation" }
%"struct.VmaAllocation_T::BlockAllocation" = type { %class.VmaDeviceMemoryBlock*, i64, i8 }
%class.VmaDeviceMemoryBlock = type { %class.VmaBlockMetadata*, %struct.VmaPool_T*, i32, i32, %struct.VkDeviceMemory_T*, %class.VmaMutex, i32, i8* }
%struct.VmaPool_T = type { %struct.VmaBlockVector, i32, i8* }
%struct.VmaBlockVector = type <{ %struct.VmaAllocator_T*, %struct.VmaPool_T*, i32, [4 x i8], i64, i64, i64, i64, i32, i8, [3 x i8], i32, [4 x i8], %class.VmaRWMutex, i8, [7 x i8], %class.VmaVector.13, i32, [4 x i8] }>
%class.VmaRWMutex = type { %class.VmaMutex }
%class.VmaVector.13 = type { %class.VmaStlAllocator.14, %class.VmaDeviceMemoryBlock**, i64, i64 }
%class.VmaStlAllocator.14 = type { %struct.VkAllocationCallbacks* }
%struct.VkDeviceMemory_T = type opaque
%class.VmaMutex = type { %"class.std::__1::mutex" }
%"class.std::__1::mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%class.VmaVector.18 = type { %class.VmaStlAllocator.19, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, i64, i64 }
%class.VmaStlAllocator.19 = type { %struct.VkAllocationCallbacks* }
%"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator" = type { %class.VmaRawList*, %struct.VmaListItem* }
%struct.VmaAllocator_T = type <{ i8, [3 x i8], i32, i8, i8, i8, i8, i8, [3 x i8], %struct.VkDevice_T*, %struct.VkInstance_T*, i8, [7 x i8], %struct.VkAllocationCallbacks, %struct.VmaDeviceMemoryCallbacks, %class.VmaAllocationObjectAllocator, i32, [4 x i8], %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceMemoryProperties, [32 x %struct.VmaBlockVector*], [32 x %class.VmaVector.5*], [32 x %class.VmaRWMutex], %struct.VmaCurrentBudgetData, i64, %struct.VkPhysicalDevice_T*, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %class.VmaRWMutex, %class.VmaVector.11, i32, [4 x i8], %struct.VmaVulkanFunctions, i32, [4 x i8] }>
%struct.VkDevice_T = type opaque
%struct.VkInstance_T = type opaque
%struct.VmaDeviceMemoryCallbacks = type { void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)*, void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)*, i8* }
%class.VmaAllocationObjectAllocator = type { %class.VmaMutex, %class.VmaPoolAllocator }
%class.VmaPoolAllocator = type { %struct.VkAllocationCallbacks*, i32, %class.VmaVector.3 }
%class.VmaVector.3 = type { %class.VmaStlAllocator.4, %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"*, i64, i64 }
%class.VmaStlAllocator.4 = type { %struct.VkAllocationCallbacks* }
%"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock" = type { %"union.VmaPoolAllocator<VmaAllocation_T>::Item"*, i32, i32 }
%"union.VmaPoolAllocator<VmaAllocation_T>::Item" = type { i32, [68 x i8] }
%struct.VkPhysicalDeviceProperties = type { i32, i32, i32, i32, i32, [256 x i8], [16 x i8], %struct.VkPhysicalDeviceLimits, %struct.VkPhysicalDeviceSparseProperties }
%struct.VkPhysicalDeviceLimits = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i32, [3 x i32], i32, i32, i32, i32, i32, float, float, i32, [2 x i32], [2 x float], i32, i64, i64, i64, i64, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, [2 x float], [2 x float], float, float, i32, i32, i64, i64, i64 }
%struct.VkPhysicalDeviceSparseProperties = type { i32, i32, i32, i32, i32 }
%struct.VkPhysicalDeviceMemoryProperties = type { i32, [32 x %struct.VkMemoryType], i32, [16 x %struct.VkMemoryHeap] }
%struct.VkMemoryType = type { i32, i32 }
%struct.VkMemoryHeap = type { i64, i32 }
%class.VmaVector.5 = type { %class.VmaStlAllocator.42, %struct.VmaAllocation_T**, i64, i64 }
%class.VmaStlAllocator.42 = type { %struct.VkAllocationCallbacks* }
%struct.VmaCurrentBudgetData = type { [16 x %"struct.std::__1::atomic.6"], [16 x %"struct.std::__1::atomic.6"], %"struct.std::__1::atomic", %class.VmaRWMutex, [16 x i64], [16 x i64], [16 x i64] }
%"struct.std::__1::atomic.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__atomic_base.8" }
%"struct.std::__1::__atomic_base.8" = type { %"struct.std::__1::__cxx_atomic_impl.9" }
%"struct.std::__1::__cxx_atomic_impl.9" = type { %"struct.std::__1::__cxx_atomic_base_impl.10" }
%"struct.std::__1::__cxx_atomic_base_impl.10" = type { i64 }
%struct.VkPhysicalDevice_T = type opaque
%class.VmaVector.11 = type { %class.VmaStlAllocator.12, %struct.VmaPool_T**, i64, i64 }
%class.VmaStlAllocator.12 = type { %struct.VkAllocationCallbacks* }
%struct.VmaVulkanFunctions = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)*, i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)*, i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)*, i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)*, void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)* }
%struct.VkMemoryAllocateInfo = type { i32, i8*, i64, i32 }
%struct.VkMappedMemoryRange = type { i32, i8*, %struct.VkDeviceMemory_T*, i64, i64 }
%struct.VkMemoryRequirements = type { i64, i64, i32 }
%struct.VkBufferCreateInfo = type { i32, i8*, i32, i64, i32, i32, i32, i32* }
%struct.VkImageCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkExtent3D, i32, i32, i32, i32, i32, i32, i32, i32*, i32 }
%struct.VkExtent3D = type { i32, i32, i32 }
%struct.VkCommandBuffer_T = type opaque
%struct.VkBufferCopy = type { i64, i64, i64 }
%struct.VkBufferMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkBuffer_T* }
%struct.VkMemoryRequirements2 = type { i32, i8*, %struct.VkMemoryRequirements }
%struct.VkImageMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkImage_T* }
%struct.VkBindBufferMemoryInfo = type { i32, i8*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64 }
%struct.VkBindImageMemoryInfo = type { i32, i8*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64 }
%struct.VkPhysicalDeviceMemoryProperties2 = type { i32, i8*, %struct.VkPhysicalDeviceMemoryProperties }
%class.VmaBlockMetadata_Linear = type { %class.VmaBlockMetadata, i64, %class.VmaVector.21, %class.VmaVector.21, i32, i32, i64, i64, i64 }
%class.VmaVector.21 = type { %class.VmaStlAllocator.20, %struct.VmaSuballocation*, i64, i64 }
%class.VmaStlAllocator.20 = type { %struct.VkAllocationCallbacks* }
%class.VmaBlockMetadata_Buddy = type { %class.VmaBlockMetadata, i64, i32, %"struct.VmaBlockMetadata_Buddy::Node"*, [30 x %struct.anon.25], i64, i64, i64 }
%"struct.VmaBlockMetadata_Buddy::Node" = type { i64, i32, %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"*, %union.anon.22 }
%union.anon.22 = type { %struct.anon }
%struct.anon = type { %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"* }
%struct.anon.25 = type { %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"* }
%struct.VmaPoolCreateInfo = type { i32, i32, i64, i64, i64, i32 }
%class.VmaDefragmentationAlgorithm_Generic = type { %class.VmaDefragmentationAlgorithm.base, i32, i8, i64, i32, %class.VmaVector.34 }
%class.VmaDefragmentationAlgorithm.base = type <{ i32 (...)**, %struct.VmaAllocator_T*, %struct.VmaBlockVector*, i32 }>
%class.VmaVector.34 = type { %class.VmaStlAllocator.35, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, i64, i64 }
%class.VmaStlAllocator.35 = type { %struct.VkAllocationCallbacks* }
%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo" = type { i64, %class.VmaDeviceMemoryBlock*, i8, %class.VmaVector.36 }
%class.VmaVector.36 = type { %class.VmaStlAllocator.37, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"*, i64, i64 }
%class.VmaStlAllocator.37 = type { %struct.VkAllocationCallbacks* }
%"struct.VmaDefragmentationAlgorithm::AllocationInfo" = type { %struct.VmaAllocation_T*, i32* }
%class.VmaDefragmentationAlgorithm_Fast = type { %class.VmaDefragmentationAlgorithm.base, i8, i32, i8, i64, i32, %class.VmaVector.38 }
%class.VmaVector.38 = type { %class.VmaStlAllocator.39, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"*, i64, i64 }
%class.VmaStlAllocator.39 = type { %struct.VkAllocationCallbacks* }
%"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo" = type { i64 }
%class.VmaBlockVectorDefragmentationContext = type <{ i32, i8, [3 x i8], %class.VmaVector.26, %class.VmaVector.28, i32, i32, i8, [7 x i8], %struct.VmaAllocator_T*, %struct.VmaPool_T*, %struct.VmaBlockVector*, i32, [4 x i8], %class.VmaDefragmentationAlgorithm*, %class.VmaVector.30, i8, [7 x i8] }>
%class.VmaVector.26 = type { %class.VmaStlAllocator.27, %struct.VmaBlockDefragmentationContext*, i64, i64 }
%class.VmaStlAllocator.27 = type { %struct.VkAllocationCallbacks* }
%struct.VmaBlockDefragmentationContext = type { i32, %struct.VkBuffer_T* }
%class.VmaVector.28 = type { %class.VmaStlAllocator.29, %struct.VmaDefragmentationMove*, i64, i64 }
%class.VmaStlAllocator.29 = type { %struct.VkAllocationCallbacks* }
%struct.VmaDefragmentationMove = type { i64, i64, i64, i64, i64, %struct.VmaAllocation_T*, %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock* }
%class.VmaDefragmentationAlgorithm = type <{ i32 (...)**, %struct.VmaAllocator_T*, %struct.VmaBlockVector*, i32, [4 x i8] }>
%class.VmaVector.30 = type { %class.VmaStlAllocator.31, %"struct.VmaBlockVectorDefragmentationContext::AllocInfo"*, i64, i64 }
%class.VmaStlAllocator.31 = type { %struct.VkAllocationCallbacks* }
%"struct.VmaBlockVectorDefragmentationContext::AllocInfo" = type { %struct.VmaAllocation_T*, i32* }
%struct.VmaDefragmentationContext_T = type { %struct.VmaAllocator_T*, i32, i32, %struct.VmaDefragmentationStats*, i64, i32, i64, i32, [32 x %class.VmaBlockVectorDefragmentationContext*], %class.VmaVector.40 }
%class.VmaVector.40 = type { %class.VmaStlAllocator.41, %class.VmaBlockVectorDefragmentationContext**, i64, i64 }
%class.VmaStlAllocator.41 = type { %struct.VkAllocationCallbacks* }
%struct.VmaDefragmentationStats = type { i64, i64, i32, i32 }
%struct.VmaAllocatorCreateInfo = type { i32, %struct.VkPhysicalDevice_T*, %struct.VkDevice_T*, i64, %struct.VkAllocationCallbacks*, %struct.VmaDeviceMemoryCallbacks*, i32, i64*, %struct.VmaVulkanFunctions*, %struct.VmaRecordSettings*, %struct.VkInstance_T*, i32 }
%struct.VmaRecordSettings = type { i32, i8* }
%struct.VmaStatInfo = type { i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.VmaPoolStats = type { i64, i64, i64, i64, i64, i64 }
%struct.VmaAllocationRequest = type <{ i64, i64, i64, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", i64, i8*, i32, [4 x i8] }>
%"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator" = type { %class.VmaRawList*, %struct.VmaListItem* }
%"struct.VmaBlockMetadata_Buddy::ValidationContext" = type { i64, i64, i64 }
%struct.VkMemoryAllocateFlagsInfo = type { i32, i8*, i32, i32 }
%struct.VmaAllocationCreateInfo = type { i32, i32, i32, i32, i32, %struct.VmaPool_T*, i8* }
%struct.VmaBudget = type { i64, i64, i64, i64 }
%struct.BlockInfo = type { i32, i8* }
%struct.VmaDefragmentationPassMoveInfo = type { %struct.VmaAllocation_T*, %struct.VkDeviceMemory_T*, i64 }
%struct.VmaStats = type { [32 x %struct.VmaStatInfo], [16 x %struct.VmaStatInfo], %struct.VmaStatInfo }
%"struct.VmaDefragmentationAlgorithm_Generic::BlockPointerLess" = type { i8 }
%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination" = type { i8 }
%"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater" = type { i8 }
%class.anon = type { %class.VmaDefragmentationAlgorithm_Fast* }
%"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase" = type { [4 x %"struct.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase::FreeSpace"] }
%"struct.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase::FreeSpace" = type { i64, i64, i64 }
%struct.VmaSuballocationItemSizeLess = type { i8 }
%struct.VmaDefragmentationPassInfo = type { i32, %struct.VmaDefragmentationPassMoveInfo* }
%struct.VkPhysicalDeviceMemoryBudgetPropertiesEXT = type { i32, i8*, [16 x i64], [16 x i64] }
%struct.VkMemoryDedicatedAllocateInfo = type { i32, i8*, %struct.VkImage_T*, %struct.VkBuffer_T* }
%struct.VkMemoryDedicatedRequirements = type { i32, i8*, i32, i32 }
%struct.VmaDefragmentationInfo2 = type { i32, i32, %struct.VmaAllocation_T**, i32*, i32, %struct.VmaPool_T**, i64, i32, i64, i32, %struct.VkCommandBuffer_T* }
%struct.VmaAllocationInfo = type { i32, %struct.VkDeviceMemory_T*, i64, i64, i8*, i8* }
%class.VmaSmallVector = type { i64, [16 x %struct.VkMappedMemoryRange], %class.VmaVector.43 }
%class.VmaVector.43 = type { %class.VmaStlAllocator.44, %struct.VkMappedMemoryRange*, i64, i64 }
%class.VmaStlAllocator.44 = type { %struct.VkAllocationCallbacks* }
%struct.VmaAllocatorInfo = type { %struct.VkInstance_T*, %struct.VkPhysicalDevice_T*, %struct.VkDevice_T* }
%struct.VmaDefragmentationInfo = type { i64, i32 }

$_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb = comdat any

$_ZN16VmaBlockMetadata4InitEm = comdat any

$_ZN9VmaVectorI16VmaSuballocation15VmaStlAllocatorIS0_EE6resizeEmb = comdat any

$_ZN9VmaVectorI30VmaBlockDefragmentationContext15VmaStlAllocatorIS0_EE6resizeEmb = comdat any

$_ZN9VmaVectorIN32VmaDefragmentationAlgorithm_Fast9BlockInfoE15VmaStlAllocatorIS1_EE6resizeEmb = comdat any

$_ZN32VmaDefragmentationAlgorithm_Fast17FreeSpaceDatabase5FetchEmmRmS1_ = comdat any

$_ZNK24VmaBlockMetadata_Generic18GetAllocationCountEv = comdat any

$_ZNK24VmaBlockMetadata_Generic14GetSumFreeSizeEv = comdat any

$_ZNK23VmaBlockMetadata_Linear14GetSumFreeSizeEv = comdat any

$_ZNK23VmaBlockMetadata_Linear7IsEmptyEv = comdat any

$_ZNK22VmaBlockMetadata_Buddy18GetAllocationCountEv = comdat any

$_ZNK22VmaBlockMetadata_Buddy14GetSumFreeSizeEv = comdat any

$_ZNK22VmaBlockMetadata_Buddy7IsEmptyEv = comdat any

$_ZN22VmaBlockMetadata_Buddy15CheckCorruptionEPKv = comdat any

$_ZN22VmaBlockMetadata_Buddy4FreeEP15VmaAllocation_T = comdat any

$_ZN22VmaBlockMetadata_Buddy12FreeAtOffsetEm = comdat any

$_ZN35VmaDefragmentationAlgorithm_Generic6AddAllEv = comdat any

$_ZNK35VmaDefragmentationAlgorithm_Generic13GetBytesMovedEv = comdat any

$_ZNK35VmaDefragmentationAlgorithm_Generic19GetAllocationsMovedEv = comdat any

$_ZN32VmaDefragmentationAlgorithm_Fast13AddAllocationEP15VmaAllocation_TPj = comdat any

$_ZN32VmaDefragmentationAlgorithm_Fast6AddAllEv = comdat any

$_ZNK32VmaDefragmentationAlgorithm_Fast13GetBytesMovedEv = comdat any

$_ZNK32VmaDefragmentationAlgorithm_Fast19GetAllocationsMovedEv = comdat any

$_ZN16VmaBlockMetadataD2Ev = comdat any

$_ZN16VmaBlockMetadataD0Ev = comdat any

$_ZN16VmaPoolAllocatorI11VmaListItemI16VmaSuballocationEED2Ev = comdat any

$_ZN9VmaVectorIN16VmaPoolAllocatorI11VmaListItemI16VmaSuballocationEE9ItemBlockE15VmaStlAllocatorIS5_EE6resizeEmb = comdat any

$_ZNSt3__16__sortIRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEvT0_S7_T_ = comdat any

$_ZNSt3__17__sort3IRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEjT0_S7_S7_T_ = comdat any

$_ZNSt3__17__sort4IRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEjT0_S7_S7_S7_T_ = comdat any

$_ZNSt3__17__sort5IRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEjT0_S7_S7_S7_S7_T_ = comdat any

$_ZNSt3__127__insertion_sort_incompleteIRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEbT0_S7_T_ = comdat any

$_ZN16VmaPoolAllocatorI15VmaAllocation_TED2Ev = comdat any

$_ZN9VmaVectorIN16VmaPoolAllocatorI15VmaAllocation_TE9ItemBlockE15VmaStlAllocatorIS3_EE6resizeEmb = comdat any

$_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb = comdat any

$_ZN16VmaPoolAllocatorI11VmaListItemI16VmaSuballocationEE14CreateNewBlockEv = comdat any

$_ZN9VmaVectorIN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorES2_IS5_EE6resizeEmb = comdat any

$_ZN10VmaRawListI16VmaSuballocationE12InsertBeforeEP11VmaListItemIS0_E = comdat any

$_ZN16VmaPoolAllocatorI15VmaAllocation_TE5AllocIJjbEEEPS0_DpT_ = comdat any

$_ZN16VmaPoolAllocatorI15VmaAllocation_TE14CreateNewBlockEv = comdat any

$_ZN9VmaVectorIP20VmaDeviceMemoryBlock15VmaStlAllocatorIS1_EE6resizeEmb = comdat any

$_ZN9VmaVectorIPN35VmaDefragmentationAlgorithm_Generic9BlockInfoE15VmaStlAllocatorIS2_EE6resizeEmb = comdat any

$_ZNSt3__16__sortIRN35VmaDefragmentationAlgorithm_Generic16BlockPointerLessEPPNS1_9BlockInfoEEEvT0_S7_T_ = comdat any

$_ZNSt3__17__sort4IRN35VmaDefragmentationAlgorithm_Generic16BlockPointerLessEPPNS1_9BlockInfoEEEjT0_S7_S7_S7_T_ = comdat any

$_ZNSt3__127__insertion_sort_incompleteIRN35VmaDefragmentationAlgorithm_Generic16BlockPointerLessEPPNS1_9BlockInfoEEEbT0_S7_T_ = comdat any

$_ZN9VmaVectorIN27VmaDefragmentationAlgorithm14AllocationInfoE15VmaStlAllocatorIS1_EE6resizeEmb = comdat any

$_ZN9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS0_EE6resizeEmb = comdat any

$_ZNSt3__16__sortIRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEvT0_S7_T_ = comdat any

$_ZNSt3__17__sort3IRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEjT0_S7_S7_T_ = comdat any

$_ZNSt3__17__sort4IRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEjT0_S7_S7_S7_T_ = comdat any

$_ZNSt3__17__sort5IRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEjT0_S7_S7_S7_S7_T_ = comdat any

$_ZNSt3__118__insertion_sort_3IRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEvT0_S7_T_ = comdat any

$_ZNSt3__127__insertion_sort_incompleteIRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEbT0_S7_T_ = comdat any

$_ZNSt3__16__sortIR28VmaSuballocationItemSizeLessPN7VmaListI16VmaSuballocation15VmaStlAllocatorIS4_EE8iteratorEEEvT0_SA_T_ = comdat any

$_ZNSt3__17__sort4IR28VmaSuballocationItemSizeLessPN7VmaListI16VmaSuballocation15VmaStlAllocatorIS4_EE8iteratorEEEjT0_SA_SA_SA_T_ = comdat any

$_ZNSt3__118__insertion_sort_3IR28VmaSuballocationItemSizeLessPN7VmaListI16VmaSuballocation15VmaStlAllocatorIS4_EE8iteratorEEEvT0_SA_T_ = comdat any

$_ZNSt3__127__insertion_sort_incompleteIR28VmaSuballocationItemSizeLessPN7VmaListI16VmaSuballocation15VmaStlAllocatorIS4_EE8iteratorEEEbT0_SA_T_ = comdat any

$_ZN9VmaVectorIN36VmaBlockVectorDefragmentationContext9AllocInfoE15VmaStlAllocatorIS1_EE6resizeEmb = comdat any

$_ZN9VmaVectorIP36VmaBlockVectorDefragmentationContext15VmaStlAllocatorIS1_EE6resizeEmb = comdat any

$_ZN9VmaVectorIP15VmaAllocation_T15VmaStlAllocatorIS1_EE6resizeEmb = comdat any

$_ZN9VmaVectorIP9VmaPool_T15VmaStlAllocatorIS1_EE6resizeEmb = comdat any

$_ZN9VmaVectorI19VkMappedMemoryRange15VmaStlAllocatorIS0_EE6resizeEmb = comdat any

$_ZTV16VmaBlockMetadata = comdat any

@.str = private unnamed_addr constant [3 x i8] c"  \00", align 1
@_ZN13VmaJsonWriter6INDENTE = hidden local_unnamed_addr constant i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), align 8
@__const._ZN13VmaJsonWriter10BeginArrayEb.item = private unnamed_addr constant { i32, i32, i8, [3 x i8] } { i32 -1431655766, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA" }, align 4
@.str.8 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"Type\00", align 1
@_ZL28VMA_SUBALLOCATION_TYPE_NAMES = internal unnamed_addr constant [6 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.61, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.63, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.64, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.66, i32 0, i32 0)], align 16
@.str.14 = private unnamed_addr constant [5 x i8] c"Size\00", align 1
@.str.15 = private unnamed_addr constant [9 x i8] c"UserData\00", align 1
@.str.16 = private unnamed_addr constant [19 x i8] c"CreationFrameIndex\00", align 1
@.str.17 = private unnamed_addr constant [18 x i8] c"LastUseFrameIndex\00", align 1
@.str.18 = private unnamed_addr constant [6 x i8] c"Usage\00", align 1
@_ZTV16VmaBlockMetadata = linkonce_odr hidden unnamed_addr constant { [20 x i8*] } { [20 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.VmaBlockMetadata*)* @_ZN16VmaBlockMetadataD2Ev to i8*), i8* bitcast (void (%class.VmaBlockMetadata*)* @_ZN16VmaBlockMetadataD0Ev to i8*), i8* bitcast (void (%class.VmaBlockMetadata*, i64)* @_ZN16VmaBlockMetadata4InitEm to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8
@.str.19 = private unnamed_addr constant [11 x i8] c"TotalBytes\00", align 1
@.str.20 = private unnamed_addr constant [12 x i8] c"UnusedBytes\00", align 1
@.str.21 = private unnamed_addr constant [12 x i8] c"Allocations\00", align 1
@.str.22 = private unnamed_addr constant [13 x i8] c"UnusedRanges\00", align 1
@.str.23 = private unnamed_addr constant [15 x i8] c"Suballocations\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"Offset\00", align 1
@_ZTV24VmaBlockMetadata_Generic = hidden unnamed_addr constant { [20 x i8*] } { [20 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.VmaBlockMetadata_Generic*)* @_ZN24VmaBlockMetadata_GenericD2Ev to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Generic*)* @_ZN24VmaBlockMetadata_GenericD0Ev to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Generic*, i64)* @_ZN24VmaBlockMetadata_Generic4InitEm to i8*), i8* bitcast (i1 (%class.VmaBlockMetadata_Generic*)* @_ZNK24VmaBlockMetadata_Generic8ValidateEv to i8*), i8* bitcast (i64 (%class.VmaBlockMetadata_Generic*)* @_ZNK24VmaBlockMetadata_Generic18GetAllocationCountEv to i8*), i8* bitcast (i64 (%class.VmaBlockMetadata_Generic*)* @_ZNK24VmaBlockMetadata_Generic14GetSumFreeSizeEv to i8*), i8* bitcast (i64 (%class.VmaBlockMetadata_Generic*)* @_ZNK24VmaBlockMetadata_Generic21GetUnusedRangeSizeMaxEv to i8*), i8* bitcast (i1 (%class.VmaBlockMetadata_Generic*)* @_ZNK24VmaBlockMetadata_Generic7IsEmptyEv to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Generic*, %struct.VmaStatInfo*)* @_ZNK24VmaBlockMetadata_Generic22CalcAllocationStatInfoER11VmaStatInfo to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Generic*, %struct.VmaPoolStats*)* @_ZNK24VmaBlockMetadata_Generic12AddPoolStatsER12VmaPoolStats to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Generic*, %class.VmaJsonWriter*)* @_ZNK24VmaBlockMetadata_Generic16PrintDetailedMapER13VmaJsonWriter to i8*), i8* bitcast (i1 (%class.VmaBlockMetadata_Generic*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)* @_ZN24VmaBlockMetadata_Generic23CreateAllocationRequestEjjmmmb20VmaSuballocationTypebjP20VmaAllocationRequest to i8*), i8* bitcast (i1 (%class.VmaBlockMetadata_Generic*, i32, i32, %struct.VmaAllocationRequest*)* @_ZN24VmaBlockMetadata_Generic28MakeRequestedAllocationsLostEjjP20VmaAllocationRequest to i8*), i8* bitcast (i32 (%class.VmaBlockMetadata_Generic*, i32, i32)* @_ZN24VmaBlockMetadata_Generic19MakeAllocationsLostEjj to i8*), i8* bitcast (i32 (%class.VmaBlockMetadata_Generic*, i8*)* @_ZN24VmaBlockMetadata_Generic15CheckCorruptionEPKv to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Generic*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)* @_ZN24VmaBlockMetadata_Generic5AllocERK20VmaAllocationRequest20VmaSuballocationTypemP15VmaAllocation_T to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Generic*, %struct.VmaAllocation_T*)* @_ZN24VmaBlockMetadata_Generic4FreeEP15VmaAllocation_T to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Generic*, i64)* @_ZN24VmaBlockMetadata_Generic12FreeAtOffsetEm to i8*)] }, align 8
@_ZTV23VmaBlockMetadata_Linear = hidden unnamed_addr constant { [20 x i8*] } { [20 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.VmaBlockMetadata_Linear*)* @_ZN23VmaBlockMetadata_LinearD2Ev to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Linear*)* @_ZN23VmaBlockMetadata_LinearD0Ev to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Linear*, i64)* @_ZN23VmaBlockMetadata_Linear4InitEm to i8*), i8* bitcast (i1 (%class.VmaBlockMetadata_Linear*)* @_ZNK23VmaBlockMetadata_Linear8ValidateEv to i8*), i8* bitcast (i64 (%class.VmaBlockMetadata_Linear*)* @_ZNK23VmaBlockMetadata_Linear18GetAllocationCountEv to i8*), i8* bitcast (i64 (%class.VmaBlockMetadata_Linear*)* @_ZNK23VmaBlockMetadata_Linear14GetSumFreeSizeEv to i8*), i8* bitcast (i64 (%class.VmaBlockMetadata_Linear*)* @_ZNK23VmaBlockMetadata_Linear21GetUnusedRangeSizeMaxEv to i8*), i8* bitcast (i1 (%class.VmaBlockMetadata_Linear*)* @_ZNK23VmaBlockMetadata_Linear7IsEmptyEv to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Linear*, %struct.VmaStatInfo*)* @_ZNK23VmaBlockMetadata_Linear22CalcAllocationStatInfoER11VmaStatInfo to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Linear*, %struct.VmaPoolStats*)* @_ZNK23VmaBlockMetadata_Linear12AddPoolStatsER12VmaPoolStats to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Linear*, %class.VmaJsonWriter*)* @_ZNK23VmaBlockMetadata_Linear16PrintDetailedMapER13VmaJsonWriter to i8*), i8* bitcast (i1 (%class.VmaBlockMetadata_Linear*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)* @_ZN23VmaBlockMetadata_Linear23CreateAllocationRequestEjjmmmb20VmaSuballocationTypebjP20VmaAllocationRequest to i8*), i8* bitcast (i1 (%class.VmaBlockMetadata_Linear*, i32, i32, %struct.VmaAllocationRequest*)* @_ZN23VmaBlockMetadata_Linear28MakeRequestedAllocationsLostEjjP20VmaAllocationRequest to i8*), i8* bitcast (i32 (%class.VmaBlockMetadata_Linear*, i32, i32)* @_ZN23VmaBlockMetadata_Linear19MakeAllocationsLostEjj to i8*), i8* bitcast (i32 (%class.VmaBlockMetadata_Linear*, i8*)* @_ZN23VmaBlockMetadata_Linear15CheckCorruptionEPKv to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Linear*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)* @_ZN23VmaBlockMetadata_Linear5AllocERK20VmaAllocationRequest20VmaSuballocationTypemP15VmaAllocation_T to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Linear*, %struct.VmaAllocation_T*)* @_ZN23VmaBlockMetadata_Linear4FreeEP15VmaAllocation_T to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Linear*, i64)* @_ZN23VmaBlockMetadata_Linear12FreeAtOffsetEm to i8*)] }, align 8
@_ZTV22VmaBlockMetadata_Buddy = hidden unnamed_addr constant { [20 x i8*] } { [20 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.VmaBlockMetadata_Buddy*)* @_ZN22VmaBlockMetadata_BuddyD2Ev to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Buddy*)* @_ZN22VmaBlockMetadata_BuddyD0Ev to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Buddy*, i64)* @_ZN22VmaBlockMetadata_Buddy4InitEm to i8*), i8* bitcast (i1 (%class.VmaBlockMetadata_Buddy*)* @_ZNK22VmaBlockMetadata_Buddy8ValidateEv to i8*), i8* bitcast (i64 (%class.VmaBlockMetadata_Buddy*)* @_ZNK22VmaBlockMetadata_Buddy18GetAllocationCountEv to i8*), i8* bitcast (i64 (%class.VmaBlockMetadata_Buddy*)* @_ZNK22VmaBlockMetadata_Buddy14GetSumFreeSizeEv to i8*), i8* bitcast (i64 (%class.VmaBlockMetadata_Buddy*)* @_ZNK22VmaBlockMetadata_Buddy21GetUnusedRangeSizeMaxEv to i8*), i8* bitcast (i1 (%class.VmaBlockMetadata_Buddy*)* @_ZNK22VmaBlockMetadata_Buddy7IsEmptyEv to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Buddy*, %struct.VmaStatInfo*)* @_ZNK22VmaBlockMetadata_Buddy22CalcAllocationStatInfoER11VmaStatInfo to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Buddy*, %struct.VmaPoolStats*)* @_ZNK22VmaBlockMetadata_Buddy12AddPoolStatsER12VmaPoolStats to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Buddy*, %class.VmaJsonWriter*)* @_ZNK22VmaBlockMetadata_Buddy16PrintDetailedMapER13VmaJsonWriter to i8*), i8* bitcast (i1 (%class.VmaBlockMetadata_Buddy*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)* @_ZN22VmaBlockMetadata_Buddy23CreateAllocationRequestEjjmmmb20VmaSuballocationTypebjP20VmaAllocationRequest to i8*), i8* bitcast (i1 (%class.VmaBlockMetadata_Buddy*, i32, i32, %struct.VmaAllocationRequest*)* @_ZN22VmaBlockMetadata_Buddy28MakeRequestedAllocationsLostEjjP20VmaAllocationRequest to i8*), i8* bitcast (i32 (%class.VmaBlockMetadata_Buddy*, i32, i32)* @_ZN22VmaBlockMetadata_Buddy19MakeAllocationsLostEjj to i8*), i8* bitcast (i32 (%class.VmaBlockMetadata_Buddy*, i8*)* @_ZN22VmaBlockMetadata_Buddy15CheckCorruptionEPKv to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Buddy*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)* @_ZN22VmaBlockMetadata_Buddy5AllocERK20VmaAllocationRequest20VmaSuballocationTypemP15VmaAllocation_T to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Buddy*, %struct.VmaAllocation_T*)* @_ZN22VmaBlockMetadata_Buddy4FreeEP15VmaAllocation_T to i8*), i8* bitcast (void (%class.VmaBlockMetadata_Buddy*, i64)* @_ZN22VmaBlockMetadata_Buddy12FreeAtOffsetEm to i8*)] }, align 8
@.str.26 = private unnamed_addr constant [5 x i8] c"Name\00", align 1
@.str.27 = private unnamed_addr constant [16 x i8] c"MemoryTypeIndex\00", align 1
@.str.28 = private unnamed_addr constant [10 x i8] c"BlockSize\00", align 1
@.str.29 = private unnamed_addr constant [11 x i8] c"BlockCount\00", align 1
@.str.30 = private unnamed_addr constant [4 x i8] c"Min\00", align 1
@.str.31 = private unnamed_addr constant [4 x i8] c"Max\00", align 1
@.str.32 = private unnamed_addr constant [4 x i8] c"Cur\00", align 1
@.str.33 = private unnamed_addr constant [16 x i8] c"FrameInUseCount\00", align 1
@.str.34 = private unnamed_addr constant [10 x i8] c"Algorithm\00", align 1
@.str.35 = private unnamed_addr constant [19 x i8] c"PreferredBlockSize\00", align 1
@.str.36 = private unnamed_addr constant [7 x i8] c"Blocks\00", align 1
@_ZTV35VmaDefragmentationAlgorithm_Generic = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.VmaDefragmentationAlgorithm_Generic*)* @_ZN35VmaDefragmentationAlgorithm_GenericD2Ev to i8*), i8* bitcast (void (%class.VmaDefragmentationAlgorithm_Generic*)* @_ZN35VmaDefragmentationAlgorithm_GenericD0Ev to i8*), i8* bitcast (void (%class.VmaDefragmentationAlgorithm_Generic*, %struct.VmaAllocation_T*, i32*)* @_ZN35VmaDefragmentationAlgorithm_Generic13AddAllocationEP15VmaAllocation_TPj to i8*), i8* bitcast (void (%class.VmaDefragmentationAlgorithm_Generic*)* @_ZN35VmaDefragmentationAlgorithm_Generic6AddAllEv to i8*), i8* bitcast (i32 (%class.VmaDefragmentationAlgorithm_Generic*, %class.VmaVector.28*, i64, i32, i32)* @_ZN35VmaDefragmentationAlgorithm_Generic10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS1_EEmjj to i8*), i8* bitcast (i64 (%class.VmaDefragmentationAlgorithm_Generic*)* @_ZNK35VmaDefragmentationAlgorithm_Generic13GetBytesMovedEv to i8*), i8* bitcast (i32 (%class.VmaDefragmentationAlgorithm_Generic*)* @_ZNK35VmaDefragmentationAlgorithm_Generic19GetAllocationsMovedEv to i8*)] }, align 8
@_ZTV32VmaDefragmentationAlgorithm_Fast = hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.VmaDefragmentationAlgorithm_Fast*)* @_ZN32VmaDefragmentationAlgorithm_FastD2Ev to i8*), i8* bitcast (void (%class.VmaDefragmentationAlgorithm_Fast*)* @_ZN32VmaDefragmentationAlgorithm_FastD0Ev to i8*), i8* bitcast (void (%class.VmaDefragmentationAlgorithm_Fast*, %struct.VmaAllocation_T*, i32*)* @_ZN32VmaDefragmentationAlgorithm_Fast13AddAllocationEP15VmaAllocation_TPj to i8*), i8* bitcast (void (%class.VmaDefragmentationAlgorithm_Fast*)* @_ZN32VmaDefragmentationAlgorithm_Fast6AddAllEv to i8*), i8* bitcast (i32 (%class.VmaDefragmentationAlgorithm_Fast*, %class.VmaVector.28*, i64, i32, i32)* @_ZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS1_EEmjj to i8*), i8* bitcast (i64 (%class.VmaDefragmentationAlgorithm_Fast*)* @_ZNK32VmaDefragmentationAlgorithm_Fast13GetBytesMovedEv to i8*), i8* bitcast (i32 (%class.VmaDefragmentationAlgorithm_Fast*)* @_ZNK32VmaDefragmentationAlgorithm_Fast19GetAllocationsMovedEv to i8*)] }, align 8
@_ZL27VmaEmptyAllocationCallbacks = internal unnamed_addr constant %struct.VkAllocationCallbacks zeroinitializer, align 8
@__const._ZN14VmaAllocator_T23AllocateDedicatedMemoryEm20VmaSuballocationTypejbbbPvP10VkBuffer_TjP9VkImage_TmPP15VmaAllocation_T.allocInfo = private unnamed_addr constant { i32, [4 x i8], i8*, i64, i32, [4 x i8] } { i32 5, [4 x i8] zeroinitializer, i8* null, i64 0, i32 0, [4 x i8] zeroinitializer }, align 8
@__const._ZN14VmaAllocator_T23AllocateDedicatedMemoryEm20VmaSuballocationTypejbbbPvP10VkBuffer_TjP9VkImage_TmPP15VmaAllocation_T.dedicatedAllocInfo = private unnamed_addr constant { i32, [4 x i8], i8*, %struct.VkImage_T*, %struct.VkBuffer_T* } { i32 1000127001, [4 x i8] zeroinitializer, i8* null, %struct.VkImage_T* null, %struct.VkBuffer_T* null }, align 8
@__const._ZN14VmaAllocator_T23AllocateDedicatedMemoryEm20VmaSuballocationTypejbbbPvP10VkBuffer_TjP9VkImage_TmPP15VmaAllocation_T.allocFlagsInfo = private unnamed_addr constant { i32, [4 x i8], i8*, i32, i32 } { i32 1000060000, [4 x i8] zeroinitializer, i8* null, i32 0, i32 0 }, align 8
@__const._ZNK14VmaAllocator_T27GetBufferMemoryRequirementsEP10VkBuffer_TR20VkMemoryRequirementsRbS4_.memReqInfo = private unnamed_addr constant { i32, [4 x i8], i8*, %struct.VkBuffer_T* } { i32 1000146000, [4 x i8] zeroinitializer, i8* null, %struct.VkBuffer_T* null }, align 8
@__const._ZNK14VmaAllocator_T26GetImageMemoryRequirementsEP9VkImage_TR20VkMemoryRequirementsRbS4_.memReqInfo = private unnamed_addr constant { i32, [4 x i8], i8*, %struct.VkImage_T* } { i32 1000146001, [4 x i8] zeroinitializer, i8* null, %struct.VkImage_T* null }, align 8
@__const._ZNK14VmaAllocator_T26GetImageMemoryRequirementsEP9VkImage_TR20VkMemoryRequirementsRbS4_.memDedicatedReq = private unnamed_addr constant { i32, [4 x i8], i8*, i32, i32 } { i32 1000127000, [4 x i8] zeroinitializer, i8* null, i32 0, i32 0 }, align 8
@.str.41 = private unnamed_addr constant [21 x i8] c"DedicatedAllocations\00", align 1
@.str.42 = private unnamed_addr constant [6 x i8] c"Type \00", align 1
@.str.43 = private unnamed_addr constant [13 x i8] c"DefaultPools\00", align 1
@.str.44 = private unnamed_addr constant [6 x i8] c"Pools\00", align 1
@.str.45 = private unnamed_addr constant [6 x i8] c"Total\00", align 1
@.str.46 = private unnamed_addr constant [6 x i8] c"Heap \00", align 1
@.str.47 = private unnamed_addr constant [6 x i8] c"Flags\00", align 1
@.str.48 = private unnamed_addr constant [13 x i8] c"DEVICE_LOCAL\00", align 1
@.str.49 = private unnamed_addr constant [7 x i8] c"Budget\00", align 1
@.str.50 = private unnamed_addr constant [11 x i8] c"BlockBytes\00", align 1
@.str.51 = private unnamed_addr constant [16 x i8] c"AllocationBytes\00", align 1
@.str.52 = private unnamed_addr constant [6 x i8] c"Stats\00", align 1
@.str.53 = private unnamed_addr constant [13 x i8] c"HOST_VISIBLE\00", align 1
@.str.54 = private unnamed_addr constant [14 x i8] c"HOST_COHERENT\00", align 1
@.str.55 = private unnamed_addr constant [12 x i8] c"HOST_CACHED\00", align 1
@.str.56 = private unnamed_addr constant [17 x i8] c"LAZILY_ALLOCATED\00", align 1
@.str.57 = private unnamed_addr constant [11 x i8] c" PROTECTED\00", align 1
@.str.58 = private unnamed_addr constant [17 x i8] c" DEVICE_COHERENT\00", align 1
@.str.59 = private unnamed_addr constant [17 x i8] c" DEVICE_UNCACHED\00", align 1
@.str.60 = private unnamed_addr constant [3 x i8] c"%p\00", align 1
@.str.61 = private unnamed_addr constant [5 x i8] c"FREE\00", align 1
@.str.62 = private unnamed_addr constant [8 x i8] c"UNKNOWN\00", align 1
@.str.63 = private unnamed_addr constant [7 x i8] c"BUFFER\00", align 1
@.str.64 = private unnamed_addr constant [14 x i8] c"IMAGE_UNKNOWN\00", align 1
@.str.65 = private unnamed_addr constant [13 x i8] c"IMAGE_LINEAR\00", align 1
@.str.66 = private unnamed_addr constant [14 x i8] c"IMAGE_OPTIMAL\00", align 1
@.str.67 = private unnamed_addr constant [7 x i8] c"Linear\00", align 1
@.str.68 = private unnamed_addr constant [6 x i8] c"Buddy\00", align 1
@.str.69 = private unnamed_addr constant [8 x i8] c"Default\00", align 1
@.str.70 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.71 = private unnamed_addr constant [10 x i8] c"UsedBytes\00", align 1
@.str.72 = private unnamed_addr constant [15 x i8] c"AllocationSize\00", align 1
@.str.73 = private unnamed_addr constant [4 x i8] c"Avg\00", align 1
@.str.74 = private unnamed_addr constant [16 x i8] c"UnusedRangeSize\00", align 1

@_ZN13VmaJsonWriterC1EPK21VkAllocationCallbacksR16VmaStringBuilder = hidden unnamed_addr alias void (%class.VmaJsonWriter*, %struct.VkAllocationCallbacks*, %class.VmaStringBuilder*), void (%class.VmaJsonWriter*, %struct.VkAllocationCallbacks*, %class.VmaStringBuilder*)* @_ZN13VmaJsonWriterC2EPK21VkAllocationCallbacksR16VmaStringBuilder
@_ZN13VmaJsonWriterD1Ev = hidden unnamed_addr alias void (%class.VmaJsonWriter*), void (%class.VmaJsonWriter*)* @_ZN13VmaJsonWriterD2Ev
@_ZN24VmaBlockMetadata_GenericC1EP14VmaAllocator_T = hidden unnamed_addr alias void (%class.VmaBlockMetadata_Generic*, %struct.VmaAllocator_T*), void (%class.VmaBlockMetadata_Generic*, %struct.VmaAllocator_T*)* @_ZN24VmaBlockMetadata_GenericC2EP14VmaAllocator_T
@_ZN24VmaBlockMetadata_GenericD1Ev = hidden unnamed_addr alias void (%class.VmaBlockMetadata_Generic*), void (%class.VmaBlockMetadata_Generic*)* @_ZN24VmaBlockMetadata_GenericD2Ev
@_ZN23VmaBlockMetadata_LinearC1EP14VmaAllocator_T = hidden unnamed_addr alias void (%class.VmaBlockMetadata_Linear*, %struct.VmaAllocator_T*), void (%class.VmaBlockMetadata_Linear*, %struct.VmaAllocator_T*)* @_ZN23VmaBlockMetadata_LinearC2EP14VmaAllocator_T
@_ZN23VmaBlockMetadata_LinearD1Ev = hidden unnamed_addr alias void (%class.VmaBlockMetadata_Linear*), void (%class.VmaBlockMetadata_Linear*)* @_ZN23VmaBlockMetadata_LinearD2Ev
@_ZN22VmaBlockMetadata_BuddyC1EP14VmaAllocator_T = hidden unnamed_addr alias void (%class.VmaBlockMetadata_Buddy*, %struct.VmaAllocator_T*), void (%class.VmaBlockMetadata_Buddy*, %struct.VmaAllocator_T*)* @_ZN22VmaBlockMetadata_BuddyC2EP14VmaAllocator_T
@_ZN22VmaBlockMetadata_BuddyD1Ev = hidden unnamed_addr alias void (%class.VmaBlockMetadata_Buddy*), void (%class.VmaBlockMetadata_Buddy*)* @_ZN22VmaBlockMetadata_BuddyD2Ev
@_ZN20VmaDeviceMemoryBlockC1EP14VmaAllocator_T = hidden unnamed_addr alias void (%class.VmaDeviceMemoryBlock*, %struct.VmaAllocator_T*), void (%class.VmaDeviceMemoryBlock*, %struct.VmaAllocator_T*)* @_ZN20VmaDeviceMemoryBlockC2EP14VmaAllocator_T
@_ZN9VmaPool_TC1EP14VmaAllocator_TRK17VmaPoolCreateInfom = hidden unnamed_addr alias void (%struct.VmaPool_T*, %struct.VmaAllocator_T*, %struct.VmaPoolCreateInfo*, i64), void (%struct.VmaPool_T*, %struct.VmaAllocator_T*, %struct.VmaPoolCreateInfo*, i64)* @_ZN9VmaPool_TC2EP14VmaAllocator_TRK17VmaPoolCreateInfom
@_ZN9VmaPool_TD1Ev = hidden unnamed_addr alias void (%struct.VmaPool_T*), void (%struct.VmaPool_T*)* @_ZN9VmaPool_TD2Ev
@_ZN14VmaBlockVectorC1EP14VmaAllocator_TP9VmaPool_Tjmmmmjbj = hidden unnamed_addr alias void (%struct.VmaBlockVector*, %struct.VmaAllocator_T*, %struct.VmaPool_T*, i32, i64, i64, i64, i64, i32, i1, i32), void (%struct.VmaBlockVector*, %struct.VmaAllocator_T*, %struct.VmaPool_T*, i32, i64, i64, i64, i64, i32, i1, i32)* @_ZN14VmaBlockVectorC2EP14VmaAllocator_TP9VmaPool_Tjmmmmjbj
@_ZN14VmaBlockVectorD1Ev = hidden unnamed_addr alias void (%struct.VmaBlockVector*), void (%struct.VmaBlockVector*)* @_ZN14VmaBlockVectorD2Ev
@_ZN35VmaDefragmentationAlgorithm_GenericC1EP14VmaAllocator_TP14VmaBlockVectorjb = hidden unnamed_addr alias void (%class.VmaDefragmentationAlgorithm_Generic*, %struct.VmaAllocator_T*, %struct.VmaBlockVector*, i32, i1), void (%class.VmaDefragmentationAlgorithm_Generic*, %struct.VmaAllocator_T*, %struct.VmaBlockVector*, i32, i1)* @_ZN35VmaDefragmentationAlgorithm_GenericC2EP14VmaAllocator_TP14VmaBlockVectorjb
@_ZN35VmaDefragmentationAlgorithm_GenericD1Ev = hidden unnamed_addr alias void (%class.VmaDefragmentationAlgorithm_Generic*), void (%class.VmaDefragmentationAlgorithm_Generic*)* @_ZN35VmaDefragmentationAlgorithm_GenericD2Ev
@_ZN32VmaDefragmentationAlgorithm_FastC1EP14VmaAllocator_TP14VmaBlockVectorjb = hidden unnamed_addr alias void (%class.VmaDefragmentationAlgorithm_Fast*, %struct.VmaAllocator_T*, %struct.VmaBlockVector*, i32, i1), void (%class.VmaDefragmentationAlgorithm_Fast*, %struct.VmaAllocator_T*, %struct.VmaBlockVector*, i32, i1)* @_ZN32VmaDefragmentationAlgorithm_FastC2EP14VmaAllocator_TP14VmaBlockVectorjb
@_ZN32VmaDefragmentationAlgorithm_FastD1Ev = hidden unnamed_addr alias void (%class.VmaDefragmentationAlgorithm_Fast*), void (%class.VmaDefragmentationAlgorithm_Fast*)* @_ZN32VmaDefragmentationAlgorithm_FastD2Ev
@_ZN36VmaBlockVectorDefragmentationContextC1EP14VmaAllocator_TP9VmaPool_TP14VmaBlockVectorj = hidden unnamed_addr alias void (%class.VmaBlockVectorDefragmentationContext*, %struct.VmaAllocator_T*, %struct.VmaPool_T*, %struct.VmaBlockVector*, i32), void (%class.VmaBlockVectorDefragmentationContext*, %struct.VmaAllocator_T*, %struct.VmaPool_T*, %struct.VmaBlockVector*, i32)* @_ZN36VmaBlockVectorDefragmentationContextC2EP14VmaAllocator_TP9VmaPool_TP14VmaBlockVectorj
@_ZN36VmaBlockVectorDefragmentationContextD1Ev = hidden unnamed_addr alias void (%class.VmaBlockVectorDefragmentationContext*), void (%class.VmaBlockVectorDefragmentationContext*)* @_ZN36VmaBlockVectorDefragmentationContextD2Ev
@_ZN27VmaDefragmentationContext_TC1EP14VmaAllocator_TjjP23VmaDefragmentationStats = hidden unnamed_addr alias void (%struct.VmaDefragmentationContext_T*, %struct.VmaAllocator_T*, i32, i32, %struct.VmaDefragmentationStats*), void (%struct.VmaDefragmentationContext_T*, %struct.VmaAllocator_T*, i32, i32, %struct.VmaDefragmentationStats*)* @_ZN27VmaDefragmentationContext_TC2EP14VmaAllocator_TjjP23VmaDefragmentationStats
@_ZN27VmaDefragmentationContext_TD1Ev = hidden unnamed_addr alias void (%struct.VmaDefragmentationContext_T*), void (%struct.VmaDefragmentationContext_T*)* @_ZN27VmaDefragmentationContext_TD2Ev
@_ZN28VmaAllocationObjectAllocatorC1EPK21VkAllocationCallbacks = hidden unnamed_addr alias void (%class.VmaAllocationObjectAllocator*, %struct.VkAllocationCallbacks*), void (%class.VmaAllocationObjectAllocator*, %struct.VkAllocationCallbacks*)* @_ZN28VmaAllocationObjectAllocatorC2EPK21VkAllocationCallbacks
@_ZN14VmaAllocator_TC1EPK22VmaAllocatorCreateInfo = hidden unnamed_addr alias void (%struct.VmaAllocator_T*, %struct.VmaAllocatorCreateInfo*), void (%struct.VmaAllocator_T*, %struct.VmaAllocatorCreateInfo*)* @_ZN14VmaAllocator_TC2EPK22VmaAllocatorCreateInfo
@_ZN14VmaAllocator_TD1Ev = hidden unnamed_addr alias void (%struct.VmaAllocator_T*), void (%struct.VmaAllocator_T*)* @_ZN14VmaAllocator_TD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden noalias i8* @_Z17vma_aligned_allocmm(i64, i64) local_unnamed_addr #0 {
  %3 = tail call noalias i8* @aligned_alloc(i64 %0, i64 %1) #15
  ret i8* %3
}

; Function Attrs: nounwind
declare noalias i8* @aligned_alloc(i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16VmaStringBuilder3AddEPKc(%class.VmaStringBuilder*, i8* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = tail call i64 @strlen(i8* %1) #16
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %13, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %0, i64 0, i32 0
  %7 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %0, i64 0, i32 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = add i64 %8, %3
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %6, i64 %9, i1 zeroext false)
  %10 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %0, i64 0, i32 0, i32 1
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 %8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %1, i64 %3, i1 false)
  br label %13

13:                                               ; preds = %2, %5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector*, i64, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.VmaVector, %class.VmaVector* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = mul i64 %5, 3
  %9 = lshr i64 %8, 1
  %10 = icmp ult i64 %8, 16
  %11 = select i1 %10, i64 8, i64 %9
  %12 = icmp ugt i64 %11, %1
  %13 = select i1 %12, i64 %11, i64 %1
  br label %16

14:                                               ; preds = %3
  %15 = select i1 %2, i64 %1, i64 %5
  br label %16

16:                                               ; preds = %14, %7
  %17 = phi i64 [ %13, %7 ], [ %15, %14 ]
  %18 = icmp eq i64 %17, %5
  br i1 %18, label %60, label %19

19:                                               ; preds = %16
  %20 = icmp eq i64 %17, 0
  br i1 %20, label %35, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %class.VmaVector, %class.VmaVector* %0, i64 0, i32 0, i32 0
  %23 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, align 8
  %24 = icmp eq %struct.VkAllocationCallbacks* %23, null
  br i1 %24, label %33, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 1
  %27 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %26, align 8
  %28 = icmp eq i8* (i8*, i64, i64, i32)* %27, null
  br i1 %28, label %33, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = tail call i8* %27(i8* %31, i64 %17, i64 1, i32 1) #15
  br label %35

33:                                               ; preds = %25, %21
  %34 = tail call noalias i8* @aligned_alloc(i64 1, i64 %17) #15
  br label %35

35:                                               ; preds = %33, %29, %19
  %36 = phi i8* [ null, %19 ], [ %32, %29 ], [ %34, %33 ]
  %37 = getelementptr inbounds %class.VmaVector, %class.VmaVector* %0, i64 0, i32 2
  %38 = load i64, i64* %37, align 8
  %39 = icmp ugt i64 %38, %1
  %40 = select i1 %39, i64 %1, i64 %38
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %45, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %class.VmaVector, %class.VmaVector* %0, i64 0, i32 1
  %44 = load i8*, i8** %43, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %44, i64 %40, i1 false)
  br label %45

45:                                               ; preds = %35, %42
  %46 = getelementptr inbounds %class.VmaVector, %class.VmaVector* %0, i64 0, i32 0, i32 0
  %47 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %46, align 8
  %48 = getelementptr inbounds %class.VmaVector, %class.VmaVector* %0, i64 0, i32 1
  %49 = load i8*, i8** %48, align 8
  %50 = icmp eq %struct.VkAllocationCallbacks* %47, null
  br i1 %50, label %58, label %51

51:                                               ; preds = %45
  %52 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %47, i64 0, i32 3
  %53 = load void (i8*, i8*)*, void (i8*, i8*)** %52, align 8
  %54 = icmp eq void (i8*, i8*)* %53, null
  br i1 %54, label %58, label %55

55:                                               ; preds = %51
  %56 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %47, i64 0, i32 0
  %57 = load i8*, i8** %56, align 8
  tail call void %53(i8* %57, i8* %49) #15
  br label %59

58:                                               ; preds = %51, %45
  tail call void @free(i8* %49) #15
  br label %59

59:                                               ; preds = %55, %58
  store i64 %17, i64* %4, align 8
  store i8* %36, i8** %48, align 8
  br label %60

60:                                               ; preds = %16, %59
  %61 = getelementptr inbounds %class.VmaVector, %class.VmaVector* %0, i64 0, i32 2
  store i64 %1, i64* %61, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16VmaStringBuilder9AddNumberEj(%class.VmaStringBuilder*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca [11 x i8], align 1
  %4 = getelementptr inbounds [11 x i8], [11 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 11, i8* nonnull %4) #15
  %5 = getelementptr inbounds [11 x i8], [11 x i8]* %3, i64 0, i64 10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %4, i8 -86, i64 10, i1 false)
  store i8 0, i8* %5, align 1
  br label %6

6:                                                ; preds = %6, %2
  %7 = phi i32 [ %1, %2 ], [ %13, %6 ]
  %8 = phi i8* [ %5, %2 ], [ %12, %6 ]
  %9 = urem i32 %7, 10
  %10 = trunc i32 %9 to i8
  %11 = or i8 %10, 48
  %12 = getelementptr inbounds i8, i8* %8, i64 -1
  store i8 %11, i8* %12, align 1
  %13 = udiv i32 %7, 10
  %14 = icmp ugt i32 %7, 9
  br i1 %14, label %6, label %15

15:                                               ; preds = %6
  %16 = call i64 @strlen(i8* %12) #16
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %26, label %18

18:                                               ; preds = %15
  %19 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %0, i64 0, i32 0
  %20 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %0, i64 0, i32 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = add i64 %21, %16
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %19, i64 %22, i1 zeroext false) #15
  %23 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %0, i64 0, i32 0, i32 1
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 %21
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %12, i64 %16, i1 false) #15
  br label %26

26:                                               ; preds = %15, %18
  call void @llvm.lifetime.end.p0i8(i64 11, i8* nonnull %4) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16VmaStringBuilder9AddNumberEm(%class.VmaStringBuilder*, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca [21 x i8], align 16
  %4 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %4) #15
  %5 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 20
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 20, i1 false)
  store i8 0, i8* %5, align 4
  br label %6

6:                                                ; preds = %6, %2
  %7 = phi i64 [ %1, %2 ], [ %13, %6 ]
  %8 = phi i8* [ %5, %2 ], [ %12, %6 ]
  %9 = urem i64 %7, 10
  %10 = trunc i64 %9 to i8
  %11 = or i8 %10, 48
  %12 = getelementptr inbounds i8, i8* %8, i64 -1
  store i8 %11, i8* %12, align 1
  %13 = udiv i64 %7, 10
  %14 = icmp ugt i64 %7, 9
  br i1 %14, label %6, label %15

15:                                               ; preds = %6
  %16 = call i64 @strlen(i8* %12) #16
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %26, label %18

18:                                               ; preds = %15
  %19 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %0, i64 0, i32 0
  %20 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %0, i64 0, i32 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = add i64 %21, %16
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %19, i64 %22, i1 zeroext false) #15
  %23 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %0, i64 0, i32 0, i32 1
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 %21
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 1 %12, i64 %16, i1 false) #15
  br label %26

26:                                               ; preds = %15, %18
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %4) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16VmaStringBuilder10AddPointerEPKv(%class.VmaStringBuilder*, i8*) local_unnamed_addr #0 align 2 {
  %3 = alloca [21 x i8], align 16
  %4 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %4) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 21, i1 false)
  %5 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %4, i64 21, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.60, i64 0, i64 0), i8* %1) #15
  %6 = call i64 @strlen(i8* nonnull %4) #16
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %16, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %0, i64 0, i32 0
  %10 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %0, i64 0, i32 0, i32 2
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %11, %6
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %9, i64 %12, i1 zeroext false) #15
  %13 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %0, i64 0, i32 0, i32 1
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* nonnull align 16 %4, i64 %6, i1 false) #15
  br label %16

16:                                               ; preds = %2, %8
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %4) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13VmaJsonWriterC2EPK21VkAllocationCallbacksR16VmaStringBuilder(%class.VmaJsonWriter* nocapture, %struct.VkAllocationCallbacks*, %class.VmaStringBuilder* dereferenceable(32)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 0
  store %class.VmaStringBuilder* %2, %class.VmaStringBuilder** %4, align 8
  %5 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 1
  %6 = ptrtoint %struct.VkAllocationCallbacks* %1 to i64
  %7 = bitcast %class.VmaVector.0* %5 to i64*
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 1, i32 1
  %9 = bitcast %"struct.VmaJsonWriter::StackItem"** %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 25, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13VmaJsonWriterD2Ev(%class.VmaJsonWriter* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %2, align 8
  %4 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 1, i32 1
  %5 = bitcast %"struct.VmaJsonWriter::StackItem"** %4 to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq %struct.VkAllocationCallbacks* %3, null
  br i1 %7, label %15, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %3, i64 0, i32 3
  %10 = load void (i8*, i8*)*, void (i8*, i8*)** %9, align 8
  %11 = icmp eq void (i8*, i8*)* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %3, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  tail call void %10(i8* %14, i8* %6) #15
  br label %16

15:                                               ; preds = %8, %1
  tail call void @free(i8* %6) #15
  br label %16

16:                                               ; preds = %12, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13VmaJsonWriter11BeginObjectEb(%class.VmaJsonWriter*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = zext i1 %1 to i8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef)
  %4 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 0
  %5 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %4, align 8
  %6 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %5, i64 0, i32 0
  %7 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %5, i64 0, i32 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = add i64 %8, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %6, i64 %9, i1 zeroext false) #15
  %10 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %5, i64 0, i32 0, i32 1
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 %8
  store i8 123, i8* %12, align 1
  %13 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 1
  %14 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 1, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = add i64 %15, 1
  tail call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %13, i64 %16, i1 zeroext false) #15
  %17 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 1, i32 1
  %18 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %17, align 8
  %19 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %18, i64 %15
  %20 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %19, i64 0, i32 0
  store i32 0, i32* %20, align 4
  %21 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %18, i64 %15, i32 1
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %18, i64 %15, i32 2
  store i8 %3, i8* %22, align 4
  %23 = bitcast %"struct.VmaJsonWriter::StackItem"* %19 to i8*
  %24 = getelementptr inbounds i8, i8* %23, i64 9
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %24, i8* nonnull align 1 getelementptr inbounds ({ i32, i32, i8, [3 x i8] }, { i32, i32, i8, [3 x i8] }* @__const._ZN13VmaJsonWriter10BeginArrayEb.item, i64 0, i32 3, i64 0), i64 3, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nocapture readonly, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 1, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %107, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 1, i32 1
  %8 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %7, align 8
  %9 = add i64 %4, -1
  %10 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %8, i64 %9, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp ne i32 %11, 0
  %13 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %8, i64 %9, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = or i1 %12, %16
  br i1 %17, label %29, label %18

18:                                               ; preds = %6
  %19 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 0
  %20 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %19, align 8
  %21 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %20, i64 0, i32 0
  %22 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %20, i64 0, i32 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = add i64 %23, 2
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %21, i64 %24, i1 zeroext false) #15
  %25 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %20, i64 0, i32 0, i32 1
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 %23
  %28 = bitcast i8* %27 to i16*
  store i16 8250, i16* %28, align 1
  br label %103

29:                                               ; preds = %6
  %30 = icmp eq i32 %14, 0
  br i1 %30, label %74, label %31

31:                                               ; preds = %29
  %32 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 0
  %33 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %32, align 8
  %34 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %33, i64 0, i32 0
  %35 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %33, i64 0, i32 0, i32 2
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %36, 2
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %34, i64 %37, i1 zeroext false) #15
  %38 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %33, i64 0, i32 0, i32 1
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 %36
  %41 = bitcast i8* %40 to i16*
  store i16 8236, i16* %41, align 1
  %42 = load i64, i64* %3, align 8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %103, label %44

44:                                               ; preds = %31
  %45 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %7, align 8
  %46 = add i64 %42, -1
  %47 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %45, i64 %46, i32 2
  %48 = load i8, i8* %47, align 4, !range !2
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %50, label %103

50:                                               ; preds = %44
  %51 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %32, align 8
  %52 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %51, i64 0, i32 0
  %53 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %51, i64 0, i32 0, i32 2
  %54 = load i64, i64* %53, align 8
  %55 = add i64 %54, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %52, i64 %55, i1 zeroext false) #15
  %56 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %51, i64 0, i32 0, i32 1
  %57 = load i8*, i8** %56, align 8
  %58 = getelementptr inbounds i8, i8* %57, i64 %54
  store i8 10, i8* %58, align 1
  %59 = load i64, i64* %3, align 8
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %103, label %61

61:                                               ; preds = %50, %61
  %62 = phi i64 [ %72, %61 ], [ 0, %50 ]
  %63 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %32, align 8
  %64 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %63, i64 0, i32 0
  %65 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %63, i64 0, i32 0, i32 2
  %66 = load i64, i64* %65, align 8
  %67 = add i64 %66, 2
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %64, i64 %67, i1 zeroext false) #15
  %68 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %63, i64 0, i32 0, i32 1
  %69 = load i8*, i8** %68, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 %66
  %71 = bitcast i8* %70 to i16*
  store i16 8224, i16* %71, align 1
  %72 = add nuw i64 %62, 1
  %73 = icmp eq i64 %72, %59
  br i1 %73, label %103, label %61

74:                                               ; preds = %29
  %75 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %8, i64 %9, i32 2
  %76 = load i8, i8* %75, align 4, !range !2
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %78, label %103

78:                                               ; preds = %74
  %79 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 0
  %80 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %79, align 8
  %81 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %80, i64 0, i32 0
  %82 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %80, i64 0, i32 0, i32 2
  %83 = load i64, i64* %82, align 8
  %84 = add i64 %83, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %81, i64 %84, i1 zeroext false) #15
  %85 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %80, i64 0, i32 0, i32 1
  %86 = load i8*, i8** %85, align 8
  %87 = getelementptr inbounds i8, i8* %86, i64 %83
  store i8 10, i8* %87, align 1
  %88 = load i64, i64* %3, align 8
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %103, label %90

90:                                               ; preds = %78, %90
  %91 = phi i64 [ %101, %90 ], [ 0, %78 ]
  %92 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %79, align 8
  %93 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %92, i64 0, i32 0
  %94 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %92, i64 0, i32 0, i32 2
  %95 = load i64, i64* %94, align 8
  %96 = add i64 %95, 2
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %93, i64 %96, i1 zeroext false) #15
  %97 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %92, i64 0, i32 0, i32 1
  %98 = load i8*, i8** %97, align 8
  %99 = getelementptr inbounds i8, i8* %98, i64 %95
  %100 = bitcast i8* %99 to i16*
  store i16 8224, i16* %100, align 1
  %101 = add nuw i64 %91, 1
  %102 = icmp eq i64 %101, %88
  br i1 %102, label %103, label %90

103:                                              ; preds = %61, %90, %78, %74, %50, %44, %31, %18
  %104 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %8, i64 %9, i32 1
  %105 = load i32, i32* %104, align 4
  %106 = add i32 %105, 1
  store i32 %106, i32* %104, align 4
  br label %107

107:                                              ; preds = %103, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13VmaJsonWriter9EndObjectEv(%class.VmaJsonWriter*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 1, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %40, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 1, i32 1
  %7 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %6, align 8
  %8 = add i64 %3, -1
  %9 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %7, i64 %8, i32 2
  %10 = load i8, i8* %9, align 4, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %40

12:                                               ; preds = %5
  %13 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 0
  %14 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %13, align 8
  %15 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %14, i64 0, i32 0
  %16 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %14, i64 0, i32 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %17, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %15, i64 %18, i1 zeroext false) #15
  %19 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %14, i64 0, i32 0, i32 1
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 %17
  store i8 10, i8* %21, align 1
  %22 = load i64, i64* %2, align 8
  %23 = icmp eq i64 %22, 0
  %24 = add i64 %22, -1
  %25 = icmp eq i64 %24, 0
  %26 = or i1 %23, %25
  br i1 %26, label %40, label %27

27:                                               ; preds = %12, %27
  %28 = phi i64 [ %38, %27 ], [ 0, %12 ]
  %29 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %13, align 8
  %30 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %29, i64 0, i32 0
  %31 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %29, i64 0, i32 0, i32 2
  %32 = load i64, i64* %31, align 8
  %33 = add i64 %32, 2
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %30, i64 %33, i1 zeroext false) #15
  %34 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %29, i64 0, i32 0, i32 1
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 %32
  %37 = bitcast i8* %36 to i16*
  store i16 8224, i16* %37, align 1
  %38 = add nuw i64 %28, 1
  %39 = icmp eq i64 %38, %24
  br i1 %39, label %40, label %27

40:                                               ; preds = %27, %1, %5, %12
  %41 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 0
  %42 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %41, align 8
  %43 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %42, i64 0, i32 0
  %44 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %42, i64 0, i32 0, i32 2
  %45 = load i64, i64* %44, align 8
  %46 = add i64 %45, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %43, i64 %46, i1 zeroext false) #15
  %47 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %42, i64 0, i32 0, i32 1
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 %45
  store i8 125, i8* %49, align 1
  %50 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 1
  %51 = load i64, i64* %2, align 8
  %52 = add i64 %51, -1
  tail call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %50, i64 %52, i1 zeroext false) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13VmaJsonWriter11WriteIndentEb(%class.VmaJsonWriter* nocapture readonly, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 1, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %42, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 1, i32 1
  %8 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %7, align 8
  %9 = add i64 %4, -1
  %10 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %8, i64 %9, i32 2
  %11 = load i8, i8* %10, align 4, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %42

13:                                               ; preds = %6
  %14 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 0
  %15 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %14, align 8
  %16 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %15, i64 0, i32 0
  %17 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %15, i64 0, i32 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = add i64 %18, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %16, i64 %19, i1 zeroext false) #15
  %20 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %15, i64 0, i32 0, i32 1
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 %18
  store i8 10, i8* %22, align 1
  %23 = load i64, i64* %3, align 8
  %24 = icmp eq i64 %23, 0
  %25 = zext i1 %1 to i64
  %26 = sub i64 %23, %25
  %27 = icmp eq i64 %26, 0
  %28 = or i1 %24, %27
  br i1 %28, label %42, label %29

29:                                               ; preds = %13, %29
  %30 = phi i64 [ %40, %29 ], [ 0, %13 ]
  %31 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %14, align 8
  %32 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %31, i64 0, i32 0
  %33 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %31, i64 0, i32 0, i32 2
  %34 = load i64, i64* %33, align 8
  %35 = add i64 %34, 2
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %32, i64 %35, i1 zeroext false) #15
  %36 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %31, i64 0, i32 0, i32 1
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 %34
  %39 = bitcast i8* %38 to i16*
  store i16 8224, i16* %39, align 1
  %40 = add nuw i64 %30, 1
  %41 = icmp eq i64 %40, %26
  br i1 %41, label %42, label %29

42:                                               ; preds = %29, %13, %6, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13VmaJsonWriter10BeginArrayEb(%class.VmaJsonWriter*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = zext i1 %1 to i8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef)
  %4 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 0
  %5 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %4, align 8
  %6 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %5, i64 0, i32 0
  %7 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %5, i64 0, i32 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = add i64 %8, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %6, i64 %9, i1 zeroext false) #15
  %10 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %5, i64 0, i32 0, i32 1
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 %8
  store i8 91, i8* %12, align 1
  %13 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 1
  %14 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 1, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = add i64 %15, 1
  tail call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %13, i64 %16, i1 zeroext false) #15
  %17 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 1, i32 1
  %18 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %17, align 8
  %19 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %18, i64 %15
  %20 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %19, i64 0, i32 0
  store i32 1, i32* %20, align 4
  %21 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %18, i64 %15, i32 1
  store i32 0, i32* %21, align 4
  %22 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %18, i64 %15, i32 2
  store i8 %3, i8* %22, align 4
  %23 = bitcast %"struct.VmaJsonWriter::StackItem"* %19 to i8*
  %24 = getelementptr inbounds i8, i8* %23, i64 9
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %24, i8* nonnull align 1 getelementptr inbounds ({ i32, i32, i8, [3 x i8] }, { i32, i32, i8, [3 x i8] }* @__const._ZN13VmaJsonWriter10BeginArrayEb.item, i64 0, i32 3, i64 0), i64 3, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13VmaJsonWriter8EndArrayEv(%class.VmaJsonWriter*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 1, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %40, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 1, i32 1
  %7 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %6, align 8
  %8 = add i64 %3, -1
  %9 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %7, i64 %8, i32 2
  %10 = load i8, i8* %9, align 4, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %40

12:                                               ; preds = %5
  %13 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 0
  %14 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %13, align 8
  %15 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %14, i64 0, i32 0
  %16 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %14, i64 0, i32 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %17, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %15, i64 %18, i1 zeroext false) #15
  %19 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %14, i64 0, i32 0, i32 1
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 %17
  store i8 10, i8* %21, align 1
  %22 = load i64, i64* %2, align 8
  %23 = icmp eq i64 %22, 0
  %24 = add i64 %22, -1
  %25 = icmp eq i64 %24, 0
  %26 = or i1 %23, %25
  br i1 %26, label %40, label %27

27:                                               ; preds = %12, %27
  %28 = phi i64 [ %38, %27 ], [ 0, %12 ]
  %29 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %13, align 8
  %30 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %29, i64 0, i32 0
  %31 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %29, i64 0, i32 0, i32 2
  %32 = load i64, i64* %31, align 8
  %33 = add i64 %32, 2
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %30, i64 %33, i1 zeroext false) #15
  %34 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %29, i64 0, i32 0, i32 1
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 %32
  %37 = bitcast i8* %36 to i16*
  store i16 8224, i16* %37, align 1
  %38 = add nuw i64 %28, 1
  %39 = icmp eq i64 %38, %24
  br i1 %39, label %40, label %27

40:                                               ; preds = %27, %1, %5, %12
  %41 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 0
  %42 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %41, align 8
  %43 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %42, i64 0, i32 0
  %44 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %42, i64 0, i32 0, i32 2
  %45 = load i64, i64* %44, align 8
  %46 = add i64 %45, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %43, i64 %46, i1 zeroext false) #15
  %47 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %42, i64 0, i32 0, i32 1
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 %45
  store i8 93, i8* %49, align 1
  %50 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 1
  %51 = load i64, i64* %2, align 8
  %52 = add i64 %51, -1
  tail call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %50, i64 %52, i1 zeroext false) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13VmaJsonWriter11WriteStringEPKc(%class.VmaJsonWriter* nocapture, i8* readonly) local_unnamed_addr #0 align 2 {
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %3 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 0
  %4 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %3, align 8
  %5 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %4, i64 0, i32 0
  %6 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %4, i64 0, i32 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %5, i64 %8, i1 zeroext false) #15
  %9 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %4, i64 0, i32 0, i32 1
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 %7
  store i8 34, i8* %11, align 1
  %12 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 2
  store i8 1, i8* %12, align 8
  %13 = icmp eq i8* %1, null
  br i1 %13, label %18, label %14

14:                                               ; preds = %2
  %15 = load i8, i8* %1, align 1
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %18, label %17

17:                                               ; preds = %14
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %0, i8* nonnull %1) #15
  br label %18

18:                                               ; preds = %2, %14, %17
  %19 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %3, align 8
  %20 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %19, i64 0, i32 0
  %21 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %19, i64 0, i32 0, i32 2
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %20, i64 %23, i1 zeroext false) #15
  %24 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %19, i64 0, i32 0, i32 1
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 %22
  store i8 34, i8* %26, align 1
  store i8 0, i8* %12, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13VmaJsonWriter11BeginStringEPKc(%class.VmaJsonWriter* nocapture, i8* readonly) local_unnamed_addr #0 align 2 {
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef)
  %3 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 0
  %4 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %3, align 8
  %5 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %4, i64 0, i32 0
  %6 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %4, i64 0, i32 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %5, i64 %8, i1 zeroext false) #15
  %9 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %4, i64 0, i32 0, i32 1
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 %7
  store i8 34, i8* %11, align 1
  %12 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 2
  store i8 1, i8* %12, align 8
  %13 = icmp eq i8* %1, null
  br i1 %13, label %18, label %14

14:                                               ; preds = %2
  %15 = load i8, i8* %1, align 1
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %18, label %17

17:                                               ; preds = %14
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %0, i8* nonnull %1)
  br label %18

18:                                               ; preds = %14, %2, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13VmaJsonWriter9EndStringEPKc(%class.VmaJsonWriter* nocapture, i8* readonly) local_unnamed_addr #0 align 2 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %8, label %4

4:                                                ; preds = %2
  %5 = load i8, i8* %1, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %4
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %0, i8* nonnull %1)
  br label %8

8:                                                ; preds = %4, %2, %7
  %9 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 0
  %10 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %9, align 8
  %11 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %10, i64 0, i32 0
  %12 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %10, i64 0, i32 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %13, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %11, i64 %14, i1 zeroext false) #15
  %15 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %10, i64 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 %13
  store i8 34, i8* %17, align 1
  %18 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 2
  store i8 0, i8* %18, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = tail call i64 @strlen(i8* %1) #16
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 0
  br label %8

7:                                                ; preds = %95, %2
  ret void

8:                                                ; preds = %95, %5
  %9 = phi i64 [ 0, %5 ], [ %96, %95 ]
  %10 = getelementptr inbounds i8, i8* %1, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = sext i8 %11 to i32
  switch i8 %11, label %33 [
    i8 92, label %13
    i8 34, label %23
  ]

13:                                               ; preds = %8
  %14 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %6, align 8
  %15 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %14, i64 0, i32 0
  %16 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %14, i64 0, i32 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %17, 2
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %15, i64 %18, i1 zeroext false) #15
  %19 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %14, i64 0, i32 0, i32 1
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 %17
  %22 = bitcast i8* %21 to i16*
  store i16 23644, i16* %22, align 1
  br label %95

23:                                               ; preds = %8
  %24 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %6, align 8
  %25 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %24, i64 0, i32 0
  %26 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %24, i64 0, i32 0, i32 2
  %27 = load i64, i64* %26, align 8
  %28 = add i64 %27, 2
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %25, i64 %28, i1 zeroext false) #15
  %29 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %24, i64 0, i32 0, i32 1
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 %27
  %32 = bitcast i8* %31 to i16*
  store i16 8796, i16* %32, align 1
  br label %95

33:                                               ; preds = %8
  %34 = icmp sgt i8 %11, 31
  br i1 %34, label %35, label %44

35:                                               ; preds = %33
  %36 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %6, align 8
  %37 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %36, i64 0, i32 0
  %38 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %36, i64 0, i32 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = add i64 %39, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %37, i64 %40, i1 zeroext false) #15
  %41 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %36, i64 0, i32 0, i32 1
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 %39
  store i8 %11, i8* %43, align 1
  br label %95

44:                                               ; preds = %33
  switch i32 %12, label %95 [
    i32 8, label %45
    i32 12, label %55
    i32 10, label %65
    i32 13, label %75
    i32 9, label %85
  ]

45:                                               ; preds = %44
  %46 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %6, align 8
  %47 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %46, i64 0, i32 0
  %48 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %46, i64 0, i32 0, i32 2
  %49 = load i64, i64* %48, align 8
  %50 = add i64 %49, 2
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %47, i64 %50, i1 zeroext false) #15
  %51 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %46, i64 0, i32 0, i32 1
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds i8, i8* %52, i64 %49
  %54 = bitcast i8* %53 to i16*
  store i16 25180, i16* %54, align 1
  br label %95

55:                                               ; preds = %44
  %56 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %6, align 8
  %57 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %56, i64 0, i32 0
  %58 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %56, i64 0, i32 0, i32 2
  %59 = load i64, i64* %58, align 8
  %60 = add i64 %59, 2
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %57, i64 %60, i1 zeroext false) #15
  %61 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %56, i64 0, i32 0, i32 1
  %62 = load i8*, i8** %61, align 8
  %63 = getelementptr inbounds i8, i8* %62, i64 %59
  %64 = bitcast i8* %63 to i16*
  store i16 26204, i16* %64, align 1
  br label %95

65:                                               ; preds = %44
  %66 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %6, align 8
  %67 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %66, i64 0, i32 0
  %68 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %66, i64 0, i32 0, i32 2
  %69 = load i64, i64* %68, align 8
  %70 = add i64 %69, 2
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %67, i64 %70, i1 zeroext false) #15
  %71 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %66, i64 0, i32 0, i32 1
  %72 = load i8*, i8** %71, align 8
  %73 = getelementptr inbounds i8, i8* %72, i64 %69
  %74 = bitcast i8* %73 to i16*
  store i16 28252, i16* %74, align 1
  br label %95

75:                                               ; preds = %44
  %76 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %6, align 8
  %77 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %76, i64 0, i32 0
  %78 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %76, i64 0, i32 0, i32 2
  %79 = load i64, i64* %78, align 8
  %80 = add i64 %79, 2
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %77, i64 %80, i1 zeroext false) #15
  %81 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %76, i64 0, i32 0, i32 1
  %82 = load i8*, i8** %81, align 8
  %83 = getelementptr inbounds i8, i8* %82, i64 %79
  %84 = bitcast i8* %83 to i16*
  store i16 29276, i16* %84, align 1
  br label %95

85:                                               ; preds = %44
  %86 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %6, align 8
  %87 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %86, i64 0, i32 0
  %88 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %86, i64 0, i32 0, i32 2
  %89 = load i64, i64* %88, align 8
  %90 = add i64 %89, 2
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %87, i64 %90, i1 zeroext false) #15
  %91 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %86, i64 0, i32 0, i32 1
  %92 = load i8*, i8** %91, align 8
  %93 = getelementptr inbounds i8, i8* %92, i64 %89
  %94 = bitcast i8* %93 to i16*
  store i16 29788, i16* %94, align 1
  br label %95

95:                                               ; preds = %85, %75, %65, %55, %45, %23, %13, %44, %35
  %96 = add nuw i64 %9, 1
  %97 = icmp eq i64 %96, %3
  br i1 %97, label %7, label %8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13VmaJsonWriter14ContinueStringEj(%class.VmaJsonWriter* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca [11 x i8], align 1
  %4 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 0
  %5 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %4, align 8
  %6 = getelementptr inbounds [11 x i8], [11 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 11, i8* nonnull %6) #15
  %7 = getelementptr inbounds [11 x i8], [11 x i8]* %3, i64 0, i64 10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %6, i8 -86, i64 10, i1 false) #15
  store i8 0, i8* %7, align 1
  br label %8

8:                                                ; preds = %8, %2
  %9 = phi i32 [ %1, %2 ], [ %15, %8 ]
  %10 = phi i8* [ %7, %2 ], [ %14, %8 ]
  %11 = urem i32 %9, 10
  %12 = trunc i32 %11 to i8
  %13 = or i8 %12, 48
  %14 = getelementptr inbounds i8, i8* %10, i64 -1
  store i8 %13, i8* %14, align 1
  %15 = udiv i32 %9, 10
  %16 = icmp ugt i32 %9, 9
  br i1 %16, label %8, label %17

17:                                               ; preds = %8
  %18 = call i64 @strlen(i8* %14) #16
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %28, label %20

20:                                               ; preds = %17
  %21 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %5, i64 0, i32 0
  %22 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %5, i64 0, i32 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = add i64 %23, %18
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %21, i64 %24, i1 zeroext false) #15
  %25 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %5, i64 0, i32 0, i32 1
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 %23
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %27, i8* align 1 %14, i64 %18, i1 false) #15
  br label %28

28:                                               ; preds = %17, %20
  call void @llvm.lifetime.end.p0i8(i64 11, i8* nonnull %6) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13VmaJsonWriter14ContinueStringEm(%class.VmaJsonWriter* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca [21 x i8], align 16
  %4 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 0
  %5 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %4, align 8
  %6 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %6) #15
  %7 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 20
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %7, align 4
  br label %8

8:                                                ; preds = %8, %2
  %9 = phi i64 [ %1, %2 ], [ %15, %8 ]
  %10 = phi i8* [ %7, %2 ], [ %14, %8 ]
  %11 = urem i64 %9, 10
  %12 = trunc i64 %11 to i8
  %13 = or i8 %12, 48
  %14 = getelementptr inbounds i8, i8* %10, i64 -1
  store i8 %13, i8* %14, align 1
  %15 = udiv i64 %9, 10
  %16 = icmp ugt i64 %9, 9
  br i1 %16, label %8, label %17

17:                                               ; preds = %8
  %18 = call i64 @strlen(i8* %14) #16
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %28, label %20

20:                                               ; preds = %17
  %21 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %5, i64 0, i32 0
  %22 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %5, i64 0, i32 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = add i64 %23, %18
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %21, i64 %24, i1 zeroext false) #15
  %25 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %5, i64 0, i32 0, i32 1
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 %23
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %27, i8* align 1 %14, i64 %18, i1 false) #15
  br label %28

28:                                               ; preds = %17, %20
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %6) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13VmaJsonWriter22ContinueString_PointerEPKv(%class.VmaJsonWriter* nocapture readonly, i8*) local_unnamed_addr #0 align 2 {
  %3 = alloca [21 x i8], align 16
  %4 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 0
  %5 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %4, align 8
  %6 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %6) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 21, i1 false) #15
  %7 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %6, i64 21, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.60, i64 0, i64 0), i8* %1) #15
  %8 = call i64 @strlen(i8* nonnull %6) #16
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %18, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %5, i64 0, i32 0
  %12 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %5, i64 0, i32 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %13, %8
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %11, i64 %14, i1 zeroext false) #15
  %15 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %5, i64 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 %13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* nonnull align 16 %6, i64 %8, i1 false) #15
  br label %18

18:                                               ; preds = %2, %10
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %6) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13VmaJsonWriter11WriteNumberEj(%class.VmaJsonWriter* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca [11 x i8], align 1
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef)
  %4 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 0
  %5 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %4, align 8
  %6 = getelementptr inbounds [11 x i8], [11 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 11, i8* nonnull %6) #15
  %7 = getelementptr inbounds [11 x i8], [11 x i8]* %3, i64 0, i64 10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %6, i8 -86, i64 10, i1 false) #15
  store i8 0, i8* %7, align 1
  br label %8

8:                                                ; preds = %8, %2
  %9 = phi i32 [ %1, %2 ], [ %15, %8 ]
  %10 = phi i8* [ %7, %2 ], [ %14, %8 ]
  %11 = urem i32 %9, 10
  %12 = trunc i32 %11 to i8
  %13 = or i8 %12, 48
  %14 = getelementptr inbounds i8, i8* %10, i64 -1
  store i8 %13, i8* %14, align 1
  %15 = udiv i32 %9, 10
  %16 = icmp ugt i32 %9, 9
  br i1 %16, label %8, label %17

17:                                               ; preds = %8
  %18 = call i64 @strlen(i8* %14) #16
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %28, label %20

20:                                               ; preds = %17
  %21 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %5, i64 0, i32 0
  %22 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %5, i64 0, i32 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = add i64 %23, %18
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %21, i64 %24, i1 zeroext false) #15
  %25 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %5, i64 0, i32 0, i32 1
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 %23
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %27, i8* align 1 %14, i64 %18, i1 false) #15
  br label %28

28:                                               ; preds = %17, %20
  call void @llvm.lifetime.end.p0i8(i64 11, i8* nonnull %6) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13VmaJsonWriter11WriteNumberEm(%class.VmaJsonWriter* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca [21 x i8], align 16
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef)
  %4 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 0
  %5 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %4, align 8
  %6 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %6) #15
  %7 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 20
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %7, align 4
  br label %8

8:                                                ; preds = %8, %2
  %9 = phi i64 [ %1, %2 ], [ %15, %8 ]
  %10 = phi i8* [ %7, %2 ], [ %14, %8 ]
  %11 = urem i64 %9, 10
  %12 = trunc i64 %11 to i8
  %13 = or i8 %12, 48
  %14 = getelementptr inbounds i8, i8* %10, i64 -1
  store i8 %13, i8* %14, align 1
  %15 = udiv i64 %9, 10
  %16 = icmp ugt i64 %9, 9
  br i1 %16, label %8, label %17

17:                                               ; preds = %8
  %18 = call i64 @strlen(i8* %14) #16
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %28, label %20

20:                                               ; preds = %17
  %21 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %5, i64 0, i32 0
  %22 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %5, i64 0, i32 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = add i64 %23, %18
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %21, i64 %24, i1 zeroext false) #15
  %25 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %5, i64 0, i32 0, i32 1
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 %23
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %27, i8* align 1 %14, i64 %18, i1 false) #15
  br label %28

28:                                               ; preds = %17, %20
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %6) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13VmaJsonWriter9WriteBoolEb(%class.VmaJsonWriter* nocapture readonly, i1 zeroext) local_unnamed_addr #0 align 2 {
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef)
  %3 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 0
  %4 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %3, align 8
  %5 = select i1 %1, i64 4, i64 5
  %6 = select i1 %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0)
  %7 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %4, i64 0, i32 0
  %8 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %4, i64 0, i32 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, %5
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %7, i64 %10, i1 zeroext false) #15
  %11 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %4, i64 0, i32 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %9
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %6, i64 %5, i1 false) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13VmaJsonWriter9WriteNullEv(%class.VmaJsonWriter* nocapture readonly) local_unnamed_addr #0 align 2 {
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef)
  %2 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 0
  %3 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %2, align 8
  %4 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %3, i64 0, i32 0
  %5 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %3, i64 0, i32 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 4
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %4, i64 %7, i1 zeroext false) #15
  %8 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %3, i64 0, i32 0, i32 1
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 %6
  %11 = bitcast i8* %10 to i32*
  store i32 1819047278, i32* %11, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15VmaAllocation_T11SetUserDataEP14VmaAllocator_TPv(%struct.VmaAllocation_T* nocapture, %struct.VmaAllocator_T* readonly, i8*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 8
  %5 = load i8, i8* %4, align 1
  %6 = and i8 %5, 1
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %47, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 11
  %10 = load i8, i8* %9, align 8, !range !2
  %11 = icmp eq i8 %10, 0
  %12 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13
  %13 = select i1 %11, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %12
  %14 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 2
  %15 = load i8*, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %26, label %17

17:                                               ; preds = %8
  br i1 %11, label %25, label %18

18:                                               ; preds = %17
  %19 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %13, i64 0, i32 3
  %20 = load void (i8*, i8*)*, void (i8*, i8*)** %19, align 8
  %21 = icmp eq void (i8*, i8*)* %20, null
  br i1 %21, label %25, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %13, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  tail call void %20(i8* %24, i8* nonnull %15) #15
  br label %26

25:                                               ; preds = %18, %17
  tail call void @free(i8* nonnull %15) #15
  br label %26

26:                                               ; preds = %8, %22, %25
  store i8* null, i8** %14, align 8
  %27 = icmp eq i8* %2, null
  br i1 %27, label %49, label %28

28:                                               ; preds = %26
  %29 = load i8, i8* %9, align 8, !range !2
  %30 = icmp eq i8 %29, 0
  %31 = tail call i64 @strlen(i8* nonnull %2) #16
  %32 = add i64 %31, 1
  %33 = icmp eq %struct.VkAllocationCallbacks* %12, null
  %34 = or i1 %33, %30
  br i1 %34, label %43, label %35

35:                                               ; preds = %28
  %36 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13, i32 1
  %37 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %36, align 8
  %38 = icmp eq i8* (i8*, i64, i64, i32)* %37, null
  br i1 %38, label %43, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %12, i64 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = tail call i8* %37(i8* %41, i64 %32, i64 1, i32 1) #15
  br label %45

43:                                               ; preds = %35, %28
  %44 = tail call noalias i8* @aligned_alloc(i64 1, i64 %32) #15
  br label %45

45:                                               ; preds = %39, %43
  %46 = phi i8* [ %42, %39 ], [ %44, %43 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* nonnull align 1 %2, i64 %32, i1 false) #15
  store i8* %46, i8** %14, align 8
  br label %49

47:                                               ; preds = %3
  %48 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 2
  store i8* %2, i8** %48, align 8
  br label %49

49:                                               ; preds = %26, %45, %47
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15VmaAllocation_T18FreeUserDataStringEP14VmaAllocator_T(%struct.VmaAllocation_T* nocapture, %struct.VmaAllocator_T* readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 11
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  %6 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13
  %7 = select i1 %5, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %6
  %8 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 2
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %21, label %11

11:                                               ; preds = %2
  %12 = icmp eq %struct.VkAllocationCallbacks* %7, null
  br i1 %12, label %20, label %13

13:                                               ; preds = %11
  %14 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %7, i64 0, i32 3
  %15 = load void (i8*, i8*)*, void (i8*, i8*)** %14, align 8
  %16 = icmp eq void (i8*, i8*)* %15, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %7, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  tail call void %15(i8* %19, i8* nonnull %9) #15
  br label %21

20:                                               ; preds = %13, %11
  tail call void @free(i8* nonnull %9) #15
  br label %21

21:                                               ; preds = %2, %17, %20
  store i8* null, i8** %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15VmaAllocation_T21ChangeBlockAllocationEP14VmaAllocator_TP20VmaDeviceMemoryBlockm(%struct.VmaAllocation_T* nocapture, %struct.VmaAllocator_T* nocapture readonly, %class.VmaDeviceMemoryBlock*, i64) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 9, i32 0, i32 0
  %6 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %5, align 8
  %7 = icmp eq %class.VmaDeviceMemoryBlock* %6, %2
  br i1 %7, label %70, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 7
  %10 = load i8, i8* %9, align 2
  %11 = and i8 %10, 127
  %12 = lshr i8 %10, 7
  %13 = add nuw i8 %12, %11
  %14 = zext i8 %13 to i32
  %15 = icmp eq i8 %13, 0
  br i1 %15, label %70, label %16

16:                                               ; preds = %8
  %17 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %6, i64 0, i32 5
  %18 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 0
  %19 = load i8, i8* %18, align 8, !range !2
  %20 = icmp eq i8 %19, 0
  %21 = select i1 %20, %class.VmaMutex* null, %class.VmaMutex* %17
  br i1 %20, label %24, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %21, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %23) #15
  br label %24

24:                                               ; preds = %22, %16
  %25 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %6, i64 0, i32 6
  %26 = load i32, i32* %25, align 8
  %27 = icmp ult i32 %26, %14
  br i1 %27, label %39, label %28

28:                                               ; preds = %24
  %29 = sub i32 %26, %14
  store i32 %29, i32* %25, align 8
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %39

31:                                               ; preds = %28
  %32 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %6, i64 0, i32 7
  store i8* null, i8** %32, align 8
  %33 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 32, i32 5
  %34 = load void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)** %33, align 8
  %35 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 9
  %36 = load %struct.VkDevice_T*, %struct.VkDevice_T** %35, align 8
  %37 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %6, i64 0, i32 4
  %38 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %37, align 8
  tail call void %34(%struct.VkDevice_T* %36, %struct.VkDeviceMemory_T* %38) #15
  br label %39

39:                                               ; preds = %31, %28, %24
  br i1 %20, label %42, label %40

40:                                               ; preds = %39
  %41 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %21, i64 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %41) #15
  br label %42

42:                                               ; preds = %39, %40
  %43 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %2, i64 0, i32 5
  %44 = load i8, i8* %18, align 8, !range !2
  %45 = icmp eq i8 %44, 0
  %46 = select i1 %45, %class.VmaMutex* null, %class.VmaMutex* %43
  br i1 %45, label %49, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %46, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %48) #15
  br label %49

49:                                               ; preds = %47, %42
  %50 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %2, i64 0, i32 6
  %51 = load i32, i32* %50, align 8
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %55, label %53

53:                                               ; preds = %49
  %54 = add i32 %51, %14
  br label %65

55:                                               ; preds = %49
  %56 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 32, i32 4
  %57 = load i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)** %56, align 8
  %58 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 9
  %59 = load %struct.VkDevice_T*, %struct.VkDevice_T** %58, align 8
  %60 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %2, i64 0, i32 4
  %61 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %60, align 8
  %62 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %2, i64 0, i32 7
  %63 = tail call i32 %57(%struct.VkDevice_T* %59, %struct.VkDeviceMemory_T* %61, i64 0, i64 -1, i32 0, i8** %62) #15
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %67

65:                                               ; preds = %55, %53
  %66 = phi i32 [ %54, %53 ], [ %14, %55 ]
  store i32 %66, i32* %50, align 8
  br label %67

67:                                               ; preds = %65, %55
  br i1 %45, label %70, label %68

68:                                               ; preds = %67
  %69 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %46, i64 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %69) #15
  br label %70

70:                                               ; preds = %68, %67, %8, %4
  store %class.VmaDeviceMemoryBlock* %2, %class.VmaDeviceMemoryBlock** %5, align 8
  %71 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 9, i32 0, i32 1
  store i64 %3, i64* %71, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20VmaDeviceMemoryBlock5UnmapEP14VmaAllocator_Tj(%class.VmaDeviceMemoryBlock*, %struct.VmaAllocator_T* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %32, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 5
  %7 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 0
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  %10 = select i1 %9, %class.VmaMutex* null, %class.VmaMutex* %6
  %11 = icmp eq %class.VmaMutex* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %5
  %13 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %10, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %13) #15
  br label %14

14:                                               ; preds = %5, %12
  %15 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 6
  %16 = load i32, i32* %15, align 8
  %17 = icmp ult i32 %16, %2
  br i1 %17, label %29, label %18

18:                                               ; preds = %14
  %19 = sub i32 %16, %2
  store i32 %19, i32* %15, align 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %29

21:                                               ; preds = %18
  %22 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 7
  store i8* null, i8** %22, align 8
  %23 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 32, i32 5
  %24 = load void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)** %23, align 8
  %25 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 9
  %26 = load %struct.VkDevice_T*, %struct.VkDevice_T** %25, align 8
  %27 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 4
  %28 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %27, align 8
  tail call void %24(%struct.VkDevice_T* %26, %struct.VkDeviceMemory_T* %28) #15
  br label %29

29:                                               ; preds = %14, %18, %21
  br i1 %11, label %32, label %30

30:                                               ; preds = %29
  %31 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %10, i64 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %31) #15
  br label %32

32:                                               ; preds = %30, %29, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN20VmaDeviceMemoryBlock3MapEP14VmaAllocator_TjPPv(%class.VmaDeviceMemoryBlock*, %struct.VmaAllocator_T* nocapture readonly, i32, i8**) local_unnamed_addr #0 align 2 {
  %5 = icmp eq i32 %2, 0
  br i1 %5, label %48, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 5
  %8 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 0
  %9 = load i8, i8* %8, align 8, !range !2
  %10 = icmp eq i8 %9, 0
  %11 = select i1 %10, %class.VmaMutex* null, %class.VmaMutex* %7
  %12 = icmp eq %class.VmaMutex* %11, null
  br i1 %12, label %15, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %11, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %14) #15
  br label %15

15:                                               ; preds = %6, %13
  %16 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 6
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %27, label %19

19:                                               ; preds = %15
  %20 = add i32 %17, %2
  store i32 %20, i32* %16, align 8
  %21 = icmp eq i8** %3, null
  br i1 %21, label %44, label %22

22:                                               ; preds = %19
  %23 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 7
  %24 = bitcast i8** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast i8** %3 to i64*
  store i64 %25, i64* %26, align 8
  br label %44

27:                                               ; preds = %15
  %28 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 32, i32 4
  %29 = load i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)** %28, align 8
  %30 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 9
  %31 = load %struct.VkDevice_T*, %struct.VkDevice_T** %30, align 8
  %32 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 4
  %33 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %32, align 8
  %34 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 7
  %35 = tail call i32 %29(%struct.VkDevice_T* %31, %struct.VkDeviceMemory_T* %33, i64 0, i64 -1, i32 0, i8** %34) #15
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %44

37:                                               ; preds = %27
  %38 = icmp eq i8** %3, null
  br i1 %38, label %43, label %39

39:                                               ; preds = %37
  %40 = bitcast i8** %34 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = bitcast i8** %3 to i64*
  store i64 %41, i64* %42, align 8
  br label %43

43:                                               ; preds = %37, %39
  store i32 %2, i32* %16, align 8
  br label %44

44:                                               ; preds = %27, %43, %22, %19
  %45 = phi i32 [ 0, %19 ], [ 0, %22 ], [ 0, %43 ], [ %35, %27 ]
  br i1 %12, label %48, label %46

46:                                               ; preds = %44
  %47 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %11, i64 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %47) #15
  br label %48

48:                                               ; preds = %46, %44, %4
  %49 = phi i32 [ 0, %4 ], [ %45, %44 ], [ %45, %46 ]
  ret i32 %49
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN15VmaAllocation_T12ChangeOffsetEm(%struct.VmaAllocation_T* nocapture, i64) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 9, i32 0, i32 1
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK15VmaAllocation_T9GetOffsetEv(%struct.VmaAllocation_T* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 5
  %3 = load i8, i8* %2, align 8
  %4 = icmp eq i8 %3, 1
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 9, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi i64 [ %7, %5 ], [ 0, %1 ]
  ret i64 %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %struct.VkDeviceMemory_T* @_ZNK15VmaAllocation_T9GetMemoryEv(%struct.VmaAllocation_T* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 5
  %3 = load i8, i8* %2, align 8
  switch i8 %3, label %14 [
    i8 1, label %4
    i8 2, label %8
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 9, i32 0, i32 0
  %6 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %5, align 8
  %7 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %6, i64 0, i32 4
  br label %11

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 9
  %10 = bitcast %union.anon* %9 to %struct.VkDeviceMemory_T**
  br label %11

11:                                               ; preds = %4, %8
  %12 = phi %struct.VkDeviceMemory_T** [ %10, %8 ], [ %7, %4 ]
  %13 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %12, align 8
  br label %14

14:                                               ; preds = %11, %1
  %15 = phi %struct.VkDeviceMemory_T* [ null, %1 ], [ %13, %11 ]
  ret %struct.VkDeviceMemory_T* %15
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @_ZNK15VmaAllocation_T13GetMappedDataEv(%struct.VmaAllocation_T* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 5
  %3 = load i8, i8* %2, align 8
  switch i8 %3, label %20 [
    i8 1, label %4
    i8 2, label %16
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 7
  %6 = load i8, i8* %5, align 2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 9, i32 0, i32 0
  %10 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %9, align 8
  %11 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %10, i64 0, i32 7
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 9, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds i8, i8* %12, i64 %14
  br label %20

16:                                               ; preds = %1
  %17 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 9, i32 0, i32 1
  %18 = bitcast i64* %17 to i8**
  %19 = load i8*, i8** %18, align 8
  br label %20

20:                                               ; preds = %1, %4, %16, %8
  %21 = phi i8* [ %19, %16 ], [ %15, %8 ], [ null, %4 ], [ null, %1 ]
  ret i8* %21
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK15VmaAllocation_T13CanBecomeLostEv(%struct.VmaAllocation_T* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 5
  %3 = load i8, i8* %2, align 8
  %4 = icmp eq i8 %3, 1
  br i1 %4, label %5, label %9

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 9, i32 0, i32 2
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp ne i8 %7, 0
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i1 [ %8, %5 ], [ false, %1 ]
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN15VmaAllocation_T8MakeLostEjj(%struct.VmaAllocation_T* nocapture, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i32, i32* %4 seq_cst, align 4
  %6 = icmp ne i32 %5, -1
  %7 = add i32 %5, %2
  %8 = icmp ult i32 %7, %1
  %9 = and i1 %6, %8
  br i1 %9, label %10, label %20

10:                                               ; preds = %3, %14
  %11 = phi i32 [ %15, %14 ], [ %5, %3 ]
  %12 = cmpxchg weak i32* %4, i32 %11, i32 -1 seq_cst seq_cst
  %13 = extractvalue { i32, i1 } %12, 1
  br i1 %13, label %20, label %14

14:                                               ; preds = %10
  %15 = extractvalue { i32, i1 } %12, 0
  %16 = icmp ne i32 %15, -1
  %17 = add i32 %15, %2
  %18 = icmp ult i32 %17, %1
  %19 = and i1 %16, %18
  br i1 %19, label %10, label %20

20:                                               ; preds = %14, %10, %3
  %21 = phi i1 [ false, %3 ], [ true, %10 ], [ false, %14 ]
  ret i1 %21
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK15VmaAllocation_T15PrintParametersER13VmaJsonWriter(%struct.VmaAllocation_T* nocapture readonly, %class.VmaJsonWriter* dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %3 = alloca [11 x i8], align 1
  %4 = alloca [21 x i8], align 16
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %5 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 0
  %6 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %7 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %6, i64 0, i32 0
  %8 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %6, i64 0, i32 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %7, i64 %10, i1 zeroext false) #15
  %11 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %6, i64 0, i32 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %9
  store i8 34, i8* %13, align 1
  %14 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 2
  store i8 1, i8* %14, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 0)) #15
  %15 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %16 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %15, i64 0, i32 0
  %17 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %15, i64 0, i32 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = add i64 %18, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %16, i64 %19, i1 zeroext false) #15
  %20 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %15, i64 0, i32 0, i32 1
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 %18
  store i8 34, i8* %22, align 1
  store i8 0, i8* %14, align 8
  %23 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 6
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i64
  %26 = getelementptr inbounds [6 x i8*], [6 x i8*]* @_ZL28VMA_SUBALLOCATION_TYPE_NAMES, i64 0, i64 %25
  %27 = load i8*, i8** %26, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %28 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %29 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %28, i64 0, i32 0
  %30 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %28, i64 0, i32 0, i32 2
  %31 = load i64, i64* %30, align 8
  %32 = add i64 %31, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %29, i64 %32, i1 zeroext false) #15
  %33 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %28, i64 0, i32 0, i32 1
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 %31
  store i8 34, i8* %35, align 1
  store i8 1, i8* %14, align 8
  %36 = load i8, i8* %27, align 1
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %39, label %38

38:                                               ; preds = %2
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull %27) #15
  br label %39

39:                                               ; preds = %2, %38
  %40 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %41 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %40, i64 0, i32 0
  %42 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %40, i64 0, i32 0, i32 2
  %43 = load i64, i64* %42, align 8
  %44 = add i64 %43, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %41, i64 %44, i1 zeroext false) #15
  %45 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %40, i64 0, i32 0, i32 1
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr inbounds i8, i8* %46, i64 %43
  store i8 34, i8* %47, align 1
  store i8 0, i8* %14, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %48 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %49 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %48, i64 0, i32 0
  %50 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %48, i64 0, i32 0, i32 2
  %51 = load i64, i64* %50, align 8
  %52 = add i64 %51, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %49, i64 %52, i1 zeroext false) #15
  %53 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %48, i64 0, i32 0, i32 1
  %54 = load i8*, i8** %53, align 8
  %55 = getelementptr inbounds i8, i8* %54, i64 %51
  store i8 34, i8* %55, align 1
  store i8 1, i8* %14, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i64 0, i64 0)) #15
  %56 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %57 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %56, i64 0, i32 0
  %58 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %56, i64 0, i32 0, i32 2
  %59 = load i64, i64* %58, align 8
  %60 = add i64 %59, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %57, i64 %60, i1 zeroext false) #15
  %61 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %56, i64 0, i32 0, i32 1
  %62 = load i8*, i8** %61, align 8
  %63 = getelementptr inbounds i8, i8* %62, i64 %59
  store i8 34, i8* %63, align 1
  store i8 0, i8* %14, align 8
  %64 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 1
  %65 = load i64, i64* %64, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %66 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %67 = getelementptr inbounds [21 x i8], [21 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %67) #15
  %68 = getelementptr inbounds [21 x i8], [21 x i8]* %4, i64 0, i64 20
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %67, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %68, align 4
  br label %69

69:                                               ; preds = %69, %39
  %70 = phi i64 [ %65, %39 ], [ %76, %69 ]
  %71 = phi i8* [ %68, %39 ], [ %75, %69 ]
  %72 = urem i64 %70, 10
  %73 = trunc i64 %72 to i8
  %74 = or i8 %73, 48
  %75 = getelementptr inbounds i8, i8* %71, i64 -1
  store i8 %74, i8* %75, align 1
  %76 = udiv i64 %70, 10
  %77 = icmp ugt i64 %70, 9
  br i1 %77, label %69, label %78

78:                                               ; preds = %69
  %79 = call i64 @strlen(i8* %75) #16
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %89, label %81

81:                                               ; preds = %78
  %82 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %66, i64 0, i32 0
  %83 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %66, i64 0, i32 0, i32 2
  %84 = load i64, i64* %83, align 8
  %85 = add i64 %84, %79
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %82, i64 %85, i1 zeroext false) #15
  %86 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %66, i64 0, i32 0, i32 1
  %87 = load i8*, i8** %86, align 8
  %88 = getelementptr inbounds i8, i8* %87, i64 %84
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %88, i8* align 1 %75, i64 %79, i1 false) #15
  br label %89

89:                                               ; preds = %78, %81
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %67) #15
  %90 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 2
  %91 = load i8*, i8** %90, align 8
  %92 = icmp eq i8* %91, null
  br i1 %92, label %164, label %93

93:                                               ; preds = %89
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %94 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %95 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %94, i64 0, i32 0
  %96 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %94, i64 0, i32 0, i32 2
  %97 = load i64, i64* %96, align 8
  %98 = add i64 %97, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %95, i64 %98, i1 zeroext false) #15
  %99 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %94, i64 0, i32 0, i32 1
  %100 = load i8*, i8** %99, align 8
  %101 = getelementptr inbounds i8, i8* %100, i64 %97
  store i8 34, i8* %101, align 1
  store i8 1, i8* %14, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i64 0, i64 0)) #15
  %102 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %103 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %102, i64 0, i32 0
  %104 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %102, i64 0, i32 0, i32 2
  %105 = load i64, i64* %104, align 8
  %106 = add i64 %105, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %103, i64 %106, i1 zeroext false) #15
  %107 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %102, i64 0, i32 0, i32 1
  %108 = load i8*, i8** %107, align 8
  %109 = getelementptr inbounds i8, i8* %108, i64 %105
  store i8 34, i8* %109, align 1
  store i8 0, i8* %14, align 8
  %110 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 8
  %111 = load i8, i8* %110, align 1
  %112 = and i8 %111, 1
  %113 = icmp eq i8 %112, 0
  br i1 %113, label %131, label %114

114:                                              ; preds = %93
  %115 = load i8*, i8** %90, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %116 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %117 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %116, i64 0, i32 0
  %118 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %116, i64 0, i32 0, i32 2
  %119 = load i64, i64* %118, align 8
  %120 = add i64 %119, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %117, i64 %120, i1 zeroext false) #15
  %121 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %116, i64 0, i32 0, i32 1
  %122 = load i8*, i8** %121, align 8
  %123 = getelementptr inbounds i8, i8* %122, i64 %119
  store i8 34, i8* %123, align 1
  store i8 1, i8* %14, align 8
  %124 = icmp eq i8* %115, null
  br i1 %124, label %129, label %125

125:                                              ; preds = %114
  %126 = load i8, i8* %115, align 1
  %127 = icmp eq i8 %126, 0
  br i1 %127, label %129, label %128

128:                                              ; preds = %125
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull %115) #15
  br label %129

129:                                              ; preds = %114, %125, %128
  %130 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  br label %155

131:                                              ; preds = %93
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %132 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %133 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %132, i64 0, i32 0
  %134 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %132, i64 0, i32 0, i32 2
  %135 = load i64, i64* %134, align 8
  %136 = add i64 %135, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %133, i64 %136, i1 zeroext false) #15
  %137 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %132, i64 0, i32 0, i32 1
  %138 = load i8*, i8** %137, align 8
  %139 = getelementptr inbounds i8, i8* %138, i64 %135
  store i8 34, i8* %139, align 1
  store i8 1, i8* %14, align 8
  %140 = load i8*, i8** %90, align 8
  %141 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %67) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %67, i8 -86, i64 21, i1 false) #15
  %142 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %67, i64 21, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.60, i64 0, i64 0), i8* %140) #15
  %143 = call i64 @strlen(i8* nonnull %67) #16
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %153, label %145

145:                                              ; preds = %131
  %146 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %141, i64 0, i32 0
  %147 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %141, i64 0, i32 0, i32 2
  %148 = load i64, i64* %147, align 8
  %149 = add i64 %148, %143
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %146, i64 %149, i1 zeroext false) #15
  %150 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %141, i64 0, i32 0, i32 1
  %151 = load i8*, i8** %150, align 8
  %152 = getelementptr inbounds i8, i8* %151, i64 %148
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %152, i8* nonnull align 16 %67, i64 %143, i1 false) #15
  br label %153

153:                                              ; preds = %131, %145
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %67) #15
  %154 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  br label %155

155:                                              ; preds = %153, %129
  %156 = phi %class.VmaStringBuilder* [ %154, %153 ], [ %130, %129 ]
  %157 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %156, i64 0, i32 0
  %158 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %156, i64 0, i32 0, i32 2
  %159 = load i64, i64* %158, align 8
  %160 = add i64 %159, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %157, i64 %160, i1 zeroext false) #15
  %161 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %156, i64 0, i32 0, i32 1
  %162 = load i8*, i8** %161, align 8
  %163 = getelementptr inbounds i8, i8* %162, i64 %159
  store i8 34, i8* %163, align 1
  store i8 0, i8* %14, align 8
  br label %164

164:                                              ; preds = %155, %89
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %165 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %166 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %165, i64 0, i32 0
  %167 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %165, i64 0, i32 0, i32 2
  %168 = load i64, i64* %167, align 8
  %169 = add i64 %168, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %166, i64 %169, i1 zeroext false) #15
  %170 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %165, i64 0, i32 0, i32 1
  %171 = load i8*, i8** %170, align 8
  %172 = getelementptr inbounds i8, i8* %171, i64 %168
  store i8 34, i8* %172, align 1
  store i8 1, i8* %14, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16, i64 0, i64 0)) #15
  %173 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %174 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %173, i64 0, i32 0
  %175 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %173, i64 0, i32 0, i32 2
  %176 = load i64, i64* %175, align 8
  %177 = add i64 %176, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %174, i64 %177, i1 zeroext false) #15
  %178 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %173, i64 0, i32 0, i32 1
  %179 = load i8*, i8** %178, align 8
  %180 = getelementptr inbounds i8, i8* %179, i64 %176
  store i8 34, i8* %180, align 1
  store i8 0, i8* %14, align 8
  %181 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 10
  %182 = load i32, i32* %181, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %183 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %184 = getelementptr inbounds [11 x i8], [11 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 11, i8* nonnull %184) #15
  %185 = getelementptr inbounds [11 x i8], [11 x i8]* %3, i64 0, i64 10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %184, i8 -86, i64 10, i1 false) #15
  store i8 0, i8* %185, align 1
  br label %186

186:                                              ; preds = %186, %164
  %187 = phi i32 [ %182, %164 ], [ %193, %186 ]
  %188 = phi i8* [ %185, %164 ], [ %192, %186 ]
  %189 = urem i32 %187, 10
  %190 = trunc i32 %189 to i8
  %191 = or i8 %190, 48
  %192 = getelementptr inbounds i8, i8* %188, i64 -1
  store i8 %191, i8* %192, align 1
  %193 = udiv i32 %187, 10
  %194 = icmp ugt i32 %187, 9
  br i1 %194, label %186, label %195

195:                                              ; preds = %186
  %196 = call i64 @strlen(i8* %192) #16
  %197 = icmp eq i64 %196, 0
  br i1 %197, label %206, label %198

198:                                              ; preds = %195
  %199 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %183, i64 0, i32 0
  %200 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %183, i64 0, i32 0, i32 2
  %201 = load i64, i64* %200, align 8
  %202 = add i64 %201, %196
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %199, i64 %202, i1 zeroext false) #15
  %203 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %183, i64 0, i32 0, i32 1
  %204 = load i8*, i8** %203, align 8
  %205 = getelementptr inbounds i8, i8* %204, i64 %201
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %205, i8* align 1 %192, i64 %196, i1 false) #15
  br label %206

206:                                              ; preds = %195, %198
  call void @llvm.lifetime.end.p0i8(i64 11, i8* nonnull %184) #15
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %207 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %208 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %207, i64 0, i32 0
  %209 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %207, i64 0, i32 0, i32 2
  %210 = load i64, i64* %209, align 8
  %211 = add i64 %210, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %208, i64 %211, i1 zeroext false) #15
  %212 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %207, i64 0, i32 0, i32 1
  %213 = load i8*, i8** %212, align 8
  %214 = getelementptr inbounds i8, i8* %213, i64 %210
  store i8 34, i8* %214, align 1
  store i8 1, i8* %14, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.17, i64 0, i64 0)) #15
  %215 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %216 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %215, i64 0, i32 0
  %217 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %215, i64 0, i32 0, i32 2
  %218 = load i64, i64* %217, align 8
  %219 = add i64 %218, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %216, i64 %219, i1 zeroext false) #15
  %220 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %215, i64 0, i32 0, i32 1
  %221 = load i8*, i8** %220, align 8
  %222 = getelementptr inbounds i8, i8* %221, i64 %218
  store i8 34, i8* %222, align 1
  store i8 0, i8* %14, align 8
  %223 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %224 = load atomic i32, i32* %223 seq_cst, align 4
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %225 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 11, i8* nonnull %184) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %184, i8 -86, i64 10, i1 false) #15
  store i8 0, i8* %185, align 1
  br label %226

226:                                              ; preds = %226, %206
  %227 = phi i32 [ %224, %206 ], [ %233, %226 ]
  %228 = phi i8* [ %185, %206 ], [ %232, %226 ]
  %229 = urem i32 %227, 10
  %230 = trunc i32 %229 to i8
  %231 = or i8 %230, 48
  %232 = getelementptr inbounds i8, i8* %228, i64 -1
  store i8 %231, i8* %232, align 1
  %233 = udiv i32 %227, 10
  %234 = icmp ugt i32 %227, 9
  br i1 %234, label %226, label %235

235:                                              ; preds = %226
  %236 = call i64 @strlen(i8* %232) #16
  %237 = icmp eq i64 %236, 0
  br i1 %237, label %246, label %238

238:                                              ; preds = %235
  %239 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %225, i64 0, i32 0
  %240 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %225, i64 0, i32 0, i32 2
  %241 = load i64, i64* %240, align 8
  %242 = add i64 %241, %236
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %239, i64 %242, i1 zeroext false) #15
  %243 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %225, i64 0, i32 0, i32 1
  %244 = load i8*, i8** %243, align 8
  %245 = getelementptr inbounds i8, i8* %244, i64 %241
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %245, i8* align 1 %232, i64 %236, i1 false) #15
  br label %246

246:                                              ; preds = %235, %238
  call void @llvm.lifetime.end.p0i8(i64 11, i8* nonnull %184) #15
  %247 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 11
  %248 = load i32, i32* %247, align 4
  %249 = icmp eq i32 %248, 0
  br i1 %249, label %290, label %250

250:                                              ; preds = %246
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %251 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %252 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %251, i64 0, i32 0
  %253 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %251, i64 0, i32 0, i32 2
  %254 = load i64, i64* %253, align 8
  %255 = add i64 %254, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %252, i64 %255, i1 zeroext false) #15
  %256 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %251, i64 0, i32 0, i32 1
  %257 = load i8*, i8** %256, align 8
  %258 = getelementptr inbounds i8, i8* %257, i64 %254
  store i8 34, i8* %258, align 1
  store i8 1, i8* %14, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18, i64 0, i64 0)) #15
  %259 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %260 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %259, i64 0, i32 0
  %261 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %259, i64 0, i32 0, i32 2
  %262 = load i64, i64* %261, align 8
  %263 = add i64 %262, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %260, i64 %263, i1 zeroext false) #15
  %264 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %259, i64 0, i32 0, i32 1
  %265 = load i8*, i8** %264, align 8
  %266 = getelementptr inbounds i8, i8* %265, i64 %262
  store i8 34, i8* %266, align 1
  store i8 0, i8* %14, align 8
  %267 = load i32, i32* %247, align 4
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %268 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 11, i8* nonnull %184) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %184, i8 -86, i64 10, i1 false) #15
  store i8 0, i8* %185, align 1
  br label %269

269:                                              ; preds = %269, %250
  %270 = phi i32 [ %267, %250 ], [ %276, %269 ]
  %271 = phi i8* [ %185, %250 ], [ %275, %269 ]
  %272 = urem i32 %270, 10
  %273 = trunc i32 %272 to i8
  %274 = or i8 %273, 48
  %275 = getelementptr inbounds i8, i8* %271, i64 -1
  store i8 %274, i8* %275, align 1
  %276 = udiv i32 %270, 10
  %277 = icmp ugt i32 %270, 9
  br i1 %277, label %269, label %278

278:                                              ; preds = %269
  %279 = call i64 @strlen(i8* %275) #16
  %280 = icmp eq i64 %279, 0
  br i1 %280, label %289, label %281

281:                                              ; preds = %278
  %282 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %268, i64 0, i32 0
  %283 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %268, i64 0, i32 0, i32 2
  %284 = load i64, i64* %283, align 8
  %285 = add i64 %284, %279
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %282, i64 %285, i1 zeroext false) #15
  %286 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %268, i64 0, i32 0, i32 1
  %287 = load i8*, i8** %286, align 8
  %288 = getelementptr inbounds i8, i8* %287, i64 %284
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %288, i8* align 1 %275, i64 %279, i1 false) #15
  br label %289

289:                                              ; preds = %278, %281
  call void @llvm.lifetime.end.p0i8(i64 11, i8* nonnull %184) #15
  br label %290

290:                                              ; preds = %246, %289
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN15VmaAllocation_T13BlockAllocMapEv(%struct.VmaAllocation_T* nocapture) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 7
  %3 = load i8, i8* %2, align 2
  %4 = and i8 %3, 127
  %5 = icmp eq i8 %4, 127
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = add i8 %3, 1
  store i8 %7, i8* %2, align 2
  br label %8

8:                                                ; preds = %1, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN15VmaAllocation_T15BlockAllocUnmapEv(%struct.VmaAllocation_T* nocapture) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 7
  %3 = load i8, i8* %2, align 2
  %4 = and i8 %3, 127
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = add i8 %3, -1
  store i8 %7, i8* %2, align 2
  br label %8

8:                                                ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15VmaAllocation_T17DedicatedAllocMapEP14VmaAllocator_TPPv(%struct.VmaAllocation_T* nocapture, %struct.VmaAllocator_T* nocapture readonly, i8**) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 7
  %5 = load i8, i8* %4, align 2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %16, label %7

7:                                                ; preds = %3
  %8 = and i8 %5, 127
  %9 = icmp eq i8 %8, 127
  br i1 %9, label %30, label %10

10:                                               ; preds = %7
  %11 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 9, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = bitcast i8** %2 to i64*
  store i64 %12, i64* %13, align 8
  %14 = load i8, i8* %4, align 2
  %15 = add i8 %14, 1
  store i8 %15, i8* %4, align 2
  br label %30

16:                                               ; preds = %3
  %17 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 32, i32 4
  %18 = load i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)** %17, align 8
  %19 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 9
  %20 = load %struct.VkDevice_T*, %struct.VkDevice_T** %19, align 8
  %21 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 9
  %22 = bitcast %union.anon* %21 to %struct.VkDeviceMemory_T**
  %23 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %22, align 8
  %24 = tail call i32 %18(%struct.VkDevice_T* %20, %struct.VkDeviceMemory_T* %23, i64 0, i64 -1, i32 0, i8** %2) #15
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %30

26:                                               ; preds = %16
  %27 = bitcast i8** %2 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 9, i32 0, i32 1
  store i64 %28, i64* %29, align 8
  store i8 1, i8* %4, align 2
  br label %30

30:                                               ; preds = %16, %26, %7, %10
  %31 = phi i32 [ 0, %10 ], [ -5, %7 ], [ 0, %26 ], [ %24, %16 ]
  ret i32 %31
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15VmaAllocation_T19DedicatedAllocUnmapEP14VmaAllocator_T(%struct.VmaAllocation_T* nocapture, %struct.VmaAllocator_T* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 7
  %4 = load i8, i8* %3, align 2
  %5 = and i8 %4, 127
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %20, label %7

7:                                                ; preds = %2
  %8 = add i8 %4, -1
  store i8 %8, i8* %3, align 2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %20

10:                                               ; preds = %7
  %11 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 9
  %12 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %0, i64 0, i32 9, i32 0, i32 1
  %13 = bitcast i64* %12 to i8**
  store i8* null, i8** %13, align 8
  %14 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 32, i32 5
  %15 = load void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)** %14, align 8
  %16 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 9
  %17 = load %struct.VkDevice_T*, %struct.VkDevice_T** %16, align 8
  %18 = bitcast %union.anon* %11 to %struct.VkDeviceMemory_T**
  %19 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %18, align 8
  tail call void %15(%struct.VkDevice_T* %17, %struct.VkDeviceMemory_T* %19) #15
  br label %20

20:                                               ; preds = %2, %7, %10
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN16VmaBlockMetadataC2EP14VmaAllocator_T(%class.VmaBlockMetadata* nocapture, %struct.VmaAllocator_T*) unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV16VmaBlockMetadata, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %0, i64 0, i32 1
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %0, i64 0, i32 2
  %6 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 11
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  %9 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13
  %10 = select i1 %8, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %9
  store %struct.VkAllocationCallbacks* %10, %struct.VkAllocationCallbacks** %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK16VmaBlockMetadata22PrintDetailedMap_BeginER13VmaJsonWritermmm(%class.VmaBlockMetadata* nocapture readonly, %class.VmaJsonWriter* dereferenceable(48), i64, i64, i64) local_unnamed_addr #0 align 2 {
  %6 = alloca [21 x i8], align 16
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %7 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 0
  %8 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %7, align 8
  %9 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %8, i64 0, i32 0
  %10 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %8, i64 0, i32 0, i32 2
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %11, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %9, i64 %12, i1 zeroext false) #15
  %13 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %8, i64 0, i32 0, i32 1
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  store i8 123, i8* %15, align 1
  %16 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 1
  %17 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 1, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = add i64 %18, 1
  tail call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %16, i64 %19, i1 zeroext false) #15
  %20 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 1, i32 1
  %21 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %20, align 8
  %22 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %21, i64 %18
  %23 = bitcast %"struct.VmaJsonWriter::StackItem"* %22 to i8*
  %24 = getelementptr inbounds i8, i8* %23, i64 9
  %25 = bitcast %"struct.VmaJsonWriter::StackItem"* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %25, i8 0, i64 9, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %24, i8* nonnull align 1 getelementptr inbounds ({ i32, i32, i8, [3 x i8] }, { i32, i32, i8, [3 x i8] }* @__const._ZN13VmaJsonWriter10BeginArrayEb.item, i64 0, i32 3, i64 0), i64 3, i1 false) #15
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %26 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %7, align 8
  %27 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %26, i64 0, i32 0
  %28 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %26, i64 0, i32 0, i32 2
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %27, i64 %30, i1 zeroext false) #15
  %31 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %26, i64 0, i32 0, i32 1
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 %29
  store i8 34, i8* %33, align 1
  %34 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 2
  store i8 1, i8* %34, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.19, i64 0, i64 0)) #15
  %35 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %7, align 8
  %36 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %35, i64 0, i32 0
  %37 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %35, i64 0, i32 0, i32 2
  %38 = load i64, i64* %37, align 8
  %39 = add i64 %38, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %36, i64 %39, i1 zeroext false) #15
  %40 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %35, i64 0, i32 0, i32 1
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 %38
  store i8 34, i8* %42, align 1
  store i8 0, i8* %34, align 8
  %43 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %0, i64 0, i32 1
  %44 = load i64, i64* %43, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %45 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %7, align 8
  %46 = getelementptr inbounds [21 x i8], [21 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %46) #15
  %47 = getelementptr inbounds [21 x i8], [21 x i8]* %6, i64 0, i64 20
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %46, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %47, align 4
  br label %48

48:                                               ; preds = %48, %5
  %49 = phi i64 [ %44, %5 ], [ %55, %48 ]
  %50 = phi i8* [ %47, %5 ], [ %54, %48 ]
  %51 = urem i64 %49, 10
  %52 = trunc i64 %51 to i8
  %53 = or i8 %52, 48
  %54 = getelementptr inbounds i8, i8* %50, i64 -1
  store i8 %53, i8* %54, align 1
  %55 = udiv i64 %49, 10
  %56 = icmp ugt i64 %49, 9
  br i1 %56, label %48, label %57

57:                                               ; preds = %48
  %58 = call i64 @strlen(i8* %54) #16
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %68, label %60

60:                                               ; preds = %57
  %61 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %45, i64 0, i32 0
  %62 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %45, i64 0, i32 0, i32 2
  %63 = load i64, i64* %62, align 8
  %64 = add i64 %63, %58
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %61, i64 %64, i1 zeroext false) #15
  %65 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %45, i64 0, i32 0, i32 1
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds i8, i8* %66, i64 %63
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %67, i8* align 1 %54, i64 %58, i1 false) #15
  br label %68

68:                                               ; preds = %57, %60
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %46) #15
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %69 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %7, align 8
  %70 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %69, i64 0, i32 0
  %71 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %69, i64 0, i32 0, i32 2
  %72 = load i64, i64* %71, align 8
  %73 = add i64 %72, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %70, i64 %73, i1 zeroext false) #15
  %74 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %69, i64 0, i32 0, i32 1
  %75 = load i8*, i8** %74, align 8
  %76 = getelementptr inbounds i8, i8* %75, i64 %72
  store i8 34, i8* %76, align 1
  store i8 1, i8* %34, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.20, i64 0, i64 0)) #15
  %77 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %7, align 8
  %78 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %77, i64 0, i32 0
  %79 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %77, i64 0, i32 0, i32 2
  %80 = load i64, i64* %79, align 8
  %81 = add i64 %80, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %78, i64 %81, i1 zeroext false) #15
  %82 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %77, i64 0, i32 0, i32 1
  %83 = load i8*, i8** %82, align 8
  %84 = getelementptr inbounds i8, i8* %83, i64 %80
  store i8 34, i8* %84, align 1
  store i8 0, i8* %34, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %85 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %7, align 8
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %46) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %46, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %47, align 4
  br label %86

86:                                               ; preds = %86, %68
  %87 = phi i64 [ %2, %68 ], [ %93, %86 ]
  %88 = phi i8* [ %47, %68 ], [ %92, %86 ]
  %89 = urem i64 %87, 10
  %90 = trunc i64 %89 to i8
  %91 = or i8 %90, 48
  %92 = getelementptr inbounds i8, i8* %88, i64 -1
  store i8 %91, i8* %92, align 1
  %93 = udiv i64 %87, 10
  %94 = icmp ugt i64 %87, 9
  br i1 %94, label %86, label %95

95:                                               ; preds = %86
  %96 = call i64 @strlen(i8* %92) #16
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %106, label %98

98:                                               ; preds = %95
  %99 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %85, i64 0, i32 0
  %100 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %85, i64 0, i32 0, i32 2
  %101 = load i64, i64* %100, align 8
  %102 = add i64 %101, %96
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %99, i64 %102, i1 zeroext false) #15
  %103 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %85, i64 0, i32 0, i32 1
  %104 = load i8*, i8** %103, align 8
  %105 = getelementptr inbounds i8, i8* %104, i64 %101
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %105, i8* align 1 %92, i64 %96, i1 false) #15
  br label %106

106:                                              ; preds = %95, %98
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %46) #15
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %107 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %7, align 8
  %108 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %107, i64 0, i32 0
  %109 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %107, i64 0, i32 0, i32 2
  %110 = load i64, i64* %109, align 8
  %111 = add i64 %110, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %108, i64 %111, i1 zeroext false) #15
  %112 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %107, i64 0, i32 0, i32 1
  %113 = load i8*, i8** %112, align 8
  %114 = getelementptr inbounds i8, i8* %113, i64 %110
  store i8 34, i8* %114, align 1
  store i8 1, i8* %34, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i64 0, i64 0)) #15
  %115 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %7, align 8
  %116 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %115, i64 0, i32 0
  %117 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %115, i64 0, i32 0, i32 2
  %118 = load i64, i64* %117, align 8
  %119 = add i64 %118, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %116, i64 %119, i1 zeroext false) #15
  %120 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %115, i64 0, i32 0, i32 1
  %121 = load i8*, i8** %120, align 8
  %122 = getelementptr inbounds i8, i8* %121, i64 %118
  store i8 34, i8* %122, align 1
  store i8 0, i8* %34, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %123 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %7, align 8
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %46) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %46, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %47, align 4
  br label %124

124:                                              ; preds = %124, %106
  %125 = phi i64 [ %3, %106 ], [ %131, %124 ]
  %126 = phi i8* [ %47, %106 ], [ %130, %124 ]
  %127 = urem i64 %125, 10
  %128 = trunc i64 %127 to i8
  %129 = or i8 %128, 48
  %130 = getelementptr inbounds i8, i8* %126, i64 -1
  store i8 %129, i8* %130, align 1
  %131 = udiv i64 %125, 10
  %132 = icmp ugt i64 %125, 9
  br i1 %132, label %124, label %133

133:                                              ; preds = %124
  %134 = call i64 @strlen(i8* %130) #16
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %144, label %136

136:                                              ; preds = %133
  %137 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %123, i64 0, i32 0
  %138 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %123, i64 0, i32 0, i32 2
  %139 = load i64, i64* %138, align 8
  %140 = add i64 %139, %134
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %137, i64 %140, i1 zeroext false) #15
  %141 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %123, i64 0, i32 0, i32 1
  %142 = load i8*, i8** %141, align 8
  %143 = getelementptr inbounds i8, i8* %142, i64 %139
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %143, i8* align 1 %130, i64 %134, i1 false) #15
  br label %144

144:                                              ; preds = %133, %136
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %46) #15
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %145 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %7, align 8
  %146 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %145, i64 0, i32 0
  %147 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %145, i64 0, i32 0, i32 2
  %148 = load i64, i64* %147, align 8
  %149 = add i64 %148, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %146, i64 %149, i1 zeroext false) #15
  %150 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %145, i64 0, i32 0, i32 1
  %151 = load i8*, i8** %150, align 8
  %152 = getelementptr inbounds i8, i8* %151, i64 %148
  store i8 34, i8* %152, align 1
  store i8 1, i8* %34, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.22, i64 0, i64 0)) #15
  %153 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %7, align 8
  %154 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %153, i64 0, i32 0
  %155 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %153, i64 0, i32 0, i32 2
  %156 = load i64, i64* %155, align 8
  %157 = add i64 %156, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %154, i64 %157, i1 zeroext false) #15
  %158 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %153, i64 0, i32 0, i32 1
  %159 = load i8*, i8** %158, align 8
  %160 = getelementptr inbounds i8, i8* %159, i64 %156
  store i8 34, i8* %160, align 1
  store i8 0, i8* %34, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %161 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %7, align 8
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %46) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %46, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %47, align 4
  br label %162

162:                                              ; preds = %162, %144
  %163 = phi i64 [ %4, %144 ], [ %169, %162 ]
  %164 = phi i8* [ %47, %144 ], [ %168, %162 ]
  %165 = urem i64 %163, 10
  %166 = trunc i64 %165 to i8
  %167 = or i8 %166, 48
  %168 = getelementptr inbounds i8, i8* %164, i64 -1
  store i8 %167, i8* %168, align 1
  %169 = udiv i64 %163, 10
  %170 = icmp ugt i64 %163, 9
  br i1 %170, label %162, label %171

171:                                              ; preds = %162
  %172 = call i64 @strlen(i8* %168) #16
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %182, label %174

174:                                              ; preds = %171
  %175 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %161, i64 0, i32 0
  %176 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %161, i64 0, i32 0, i32 2
  %177 = load i64, i64* %176, align 8
  %178 = add i64 %177, %172
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %175, i64 %178, i1 zeroext false) #15
  %179 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %161, i64 0, i32 0, i32 1
  %180 = load i8*, i8** %179, align 8
  %181 = getelementptr inbounds i8, i8* %180, i64 %177
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %181, i8* align 1 %168, i64 %172, i1 false) #15
  br label %182

182:                                              ; preds = %171, %174
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %46) #15
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %183 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %7, align 8
  %184 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %183, i64 0, i32 0
  %185 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %183, i64 0, i32 0, i32 2
  %186 = load i64, i64* %185, align 8
  %187 = add i64 %186, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %184, i64 %187, i1 zeroext false) #15
  %188 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %183, i64 0, i32 0, i32 1
  %189 = load i8*, i8** %188, align 8
  %190 = getelementptr inbounds i8, i8* %189, i64 %186
  store i8 34, i8* %190, align 1
  store i8 1, i8* %34, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23, i64 0, i64 0)) #15
  %191 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %7, align 8
  %192 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %191, i64 0, i32 0
  %193 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %191, i64 0, i32 0, i32 2
  %194 = load i64, i64* %193, align 8
  %195 = add i64 %194, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %192, i64 %195, i1 zeroext false) #15
  %196 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %191, i64 0, i32 0, i32 1
  %197 = load i8*, i8** %196, align 8
  %198 = getelementptr inbounds i8, i8* %197, i64 %194
  store i8 34, i8* %198, align 1
  store i8 0, i8* %34, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %199 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %7, align 8
  %200 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %199, i64 0, i32 0
  %201 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %199, i64 0, i32 0, i32 2
  %202 = load i64, i64* %201, align 8
  %203 = add i64 %202, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %200, i64 %203, i1 zeroext false) #15
  %204 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %199, i64 0, i32 0, i32 1
  %205 = load i8*, i8** %204, align 8
  %206 = getelementptr inbounds i8, i8* %205, i64 %202
  store i8 91, i8* %206, align 1
  %207 = load i64, i64* %17, align 8
  %208 = add i64 %207, 1
  tail call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %16, i64 %208, i1 zeroext false) #15
  %209 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %20, align 8
  %210 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %209, i64 %207
  %211 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %210, i64 0, i32 0
  store i32 1, i32* %211, align 4
  %212 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %209, i64 %207, i32 1
  store i32 0, i32* %212, align 4
  %213 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %209, i64 %207, i32 2
  store i8 0, i8* %213, align 4
  %214 = bitcast %"struct.VmaJsonWriter::StackItem"* %210 to i8*
  %215 = getelementptr inbounds i8, i8* %214, i64 9
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %215, i8* nonnull align 1 getelementptr inbounds ({ i32, i32, i8, [3 x i8] }, { i32, i32, i8, [3 x i8] }* @__const._ZN13VmaJsonWriter10BeginArrayEb.item, i64 0, i32 3, i64 0), i64 3, i1 false) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK16VmaBlockMetadata27PrintDetailedMap_AllocationER13VmaJsonWritermP15VmaAllocation_T(%class.VmaBlockMetadata* nocapture readnone, %class.VmaJsonWriter* dereferenceable(48), i64, %struct.VmaAllocation_T* nocapture readonly) local_unnamed_addr #0 align 2 {
  %5 = alloca [21 x i8], align 16
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %6 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 0
  %7 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %6, align 8
  %8 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %7, i64 0, i32 0
  %9 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %7, i64 0, i32 0, i32 2
  %10 = load i64, i64* %9, align 8
  %11 = add i64 %10, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %8, i64 %11, i1 zeroext false) #15
  %12 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %7, i64 0, i32 0, i32 1
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 %10
  store i8 123, i8* %14, align 1
  %15 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 1
  %16 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 1, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %17, 1
  tail call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %15, i64 %18, i1 zeroext false) #15
  %19 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 1, i32 1
  %20 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %19, align 8
  %21 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %20, i64 %17
  %22 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %21, i64 0, i32 0
  store i32 0, i32* %22, align 4
  %23 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %20, i64 %17, i32 1
  store i32 0, i32* %23, align 4
  %24 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %20, i64 %17, i32 2
  store i8 1, i8* %24, align 4
  %25 = bitcast %"struct.VmaJsonWriter::StackItem"* %21 to i8*
  %26 = getelementptr inbounds i8, i8* %25, i64 9
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* nonnull align 1 getelementptr inbounds ({ i32, i32, i8, [3 x i8] }, { i32, i32, i8, [3 x i8] }* @__const._ZN13VmaJsonWriter10BeginArrayEb.item, i64 0, i32 3, i64 0), i64 3, i1 false) #15
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %27 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %6, align 8
  %28 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %27, i64 0, i32 0
  %29 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %27, i64 0, i32 0, i32 2
  %30 = load i64, i64* %29, align 8
  %31 = add i64 %30, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %28, i64 %31, i1 zeroext false) #15
  %32 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %27, i64 0, i32 0, i32 1
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 %30
  store i8 34, i8* %34, align 1
  %35 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 2
  store i8 1, i8* %35, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i64 0, i64 0)) #15
  %36 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %6, align 8
  %37 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %36, i64 0, i32 0
  %38 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %36, i64 0, i32 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = add i64 %39, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %37, i64 %40, i1 zeroext false) #15
  %41 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %36, i64 0, i32 0, i32 1
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 %39
  store i8 34, i8* %43, align 1
  store i8 0, i8* %35, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %44 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %6, align 8
  %45 = getelementptr inbounds [21 x i8], [21 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %45) #15
  %46 = getelementptr inbounds [21 x i8], [21 x i8]* %5, i64 0, i64 20
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %45, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %46, align 4
  br label %47

47:                                               ; preds = %47, %4
  %48 = phi i64 [ %2, %4 ], [ %54, %47 ]
  %49 = phi i8* [ %46, %4 ], [ %53, %47 ]
  %50 = urem i64 %48, 10
  %51 = trunc i64 %50 to i8
  %52 = or i8 %51, 48
  %53 = getelementptr inbounds i8, i8* %49, i64 -1
  store i8 %52, i8* %53, align 1
  %54 = udiv i64 %48, 10
  %55 = icmp ugt i64 %48, 9
  br i1 %55, label %47, label %56

56:                                               ; preds = %47
  %57 = call i64 @strlen(i8* %53) #16
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %67, label %59

59:                                               ; preds = %56
  %60 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %44, i64 0, i32 0
  %61 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %44, i64 0, i32 0, i32 2
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, %57
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %60, i64 %63, i1 zeroext false) #15
  %64 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %44, i64 0, i32 0, i32 1
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 %62
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %66, i8* align 1 %53, i64 %57, i1 false) #15
  br label %67

67:                                               ; preds = %56, %59
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %45) #15
  tail call void @_ZNK15VmaAllocation_T15PrintParametersER13VmaJsonWriter(%struct.VmaAllocation_T* %3, %class.VmaJsonWriter* dereferenceable(48) %1)
  tail call void @_ZN13VmaJsonWriter9EndObjectEv(%class.VmaJsonWriter* %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK16VmaBlockMetadata28PrintDetailedMap_UnusedRangeER13VmaJsonWritermm(%class.VmaBlockMetadata* nocapture readnone, %class.VmaJsonWriter* dereferenceable(48), i64, i64) local_unnamed_addr #0 align 2 {
  %5 = alloca [21 x i8], align 16
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %6 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 0
  %7 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %6, align 8
  %8 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %7, i64 0, i32 0
  %9 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %7, i64 0, i32 0, i32 2
  %10 = load i64, i64* %9, align 8
  %11 = add i64 %10, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %8, i64 %11, i1 zeroext false) #15
  %12 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %7, i64 0, i32 0, i32 1
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 %10
  store i8 123, i8* %14, align 1
  %15 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 1
  %16 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 1, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %17, 1
  tail call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %15, i64 %18, i1 zeroext false) #15
  %19 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 1, i32 1
  %20 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %19, align 8
  %21 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %20, i64 %17
  %22 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %21, i64 0, i32 0
  store i32 0, i32* %22, align 4
  %23 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %20, i64 %17, i32 1
  store i32 0, i32* %23, align 4
  %24 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %20, i64 %17, i32 2
  store i8 1, i8* %24, align 4
  %25 = bitcast %"struct.VmaJsonWriter::StackItem"* %21 to i8*
  %26 = getelementptr inbounds i8, i8* %25, i64 9
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* nonnull align 1 getelementptr inbounds ({ i32, i32, i8, [3 x i8] }, { i32, i32, i8, [3 x i8] }* @__const._ZN13VmaJsonWriter10BeginArrayEb.item, i64 0, i32 3, i64 0), i64 3, i1 false) #15
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %27 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %6, align 8
  %28 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %27, i64 0, i32 0
  %29 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %27, i64 0, i32 0, i32 2
  %30 = load i64, i64* %29, align 8
  %31 = add i64 %30, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %28, i64 %31, i1 zeroext false) #15
  %32 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %27, i64 0, i32 0, i32 1
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 %30
  store i8 34, i8* %34, align 1
  %35 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 2
  store i8 1, i8* %35, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i64 0, i64 0)) #15
  %36 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %6, align 8
  %37 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %36, i64 0, i32 0
  %38 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %36, i64 0, i32 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = add i64 %39, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %37, i64 %40, i1 zeroext false) #15
  %41 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %36, i64 0, i32 0, i32 1
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 %39
  store i8 34, i8* %43, align 1
  store i8 0, i8* %35, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %44 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %6, align 8
  %45 = getelementptr inbounds [21 x i8], [21 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %45) #15
  %46 = getelementptr inbounds [21 x i8], [21 x i8]* %5, i64 0, i64 20
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %45, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %46, align 4
  br label %47

47:                                               ; preds = %47, %4
  %48 = phi i64 [ %2, %4 ], [ %54, %47 ]
  %49 = phi i8* [ %46, %4 ], [ %53, %47 ]
  %50 = urem i64 %48, 10
  %51 = trunc i64 %50 to i8
  %52 = or i8 %51, 48
  %53 = getelementptr inbounds i8, i8* %49, i64 -1
  store i8 %52, i8* %53, align 1
  %54 = udiv i64 %48, 10
  %55 = icmp ugt i64 %48, 9
  br i1 %55, label %47, label %56

56:                                               ; preds = %47
  %57 = call i64 @strlen(i8* %53) #16
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %67, label %59

59:                                               ; preds = %56
  %60 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %44, i64 0, i32 0
  %61 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %44, i64 0, i32 0, i32 2
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, %57
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %60, i64 %63, i1 zeroext false) #15
  %64 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %44, i64 0, i32 0, i32 1
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 %62
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %66, i8* align 1 %53, i64 %57, i1 false) #15
  br label %67

67:                                               ; preds = %56, %59
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %45) #15
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %68 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %6, align 8
  %69 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %68, i64 0, i32 0
  %70 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %68, i64 0, i32 0, i32 2
  %71 = load i64, i64* %70, align 8
  %72 = add i64 %71, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %69, i64 %72, i1 zeroext false) #15
  %73 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %68, i64 0, i32 0, i32 1
  %74 = load i8*, i8** %73, align 8
  %75 = getelementptr inbounds i8, i8* %74, i64 %71
  store i8 34, i8* %75, align 1
  store i8 1, i8* %35, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 0)) #15
  %76 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %6, align 8
  %77 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %76, i64 0, i32 0
  %78 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %76, i64 0, i32 0, i32 2
  %79 = load i64, i64* %78, align 8
  %80 = add i64 %79, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %77, i64 %80, i1 zeroext false) #15
  %81 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %76, i64 0, i32 0, i32 1
  %82 = load i8*, i8** %81, align 8
  %83 = getelementptr inbounds i8, i8* %82, i64 %79
  store i8 34, i8* %83, align 1
  store i8 0, i8* %35, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %84 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %6, align 8
  %85 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %84, i64 0, i32 0
  %86 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %84, i64 0, i32 0, i32 2
  %87 = load i64, i64* %86, align 8
  %88 = add i64 %87, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %85, i64 %88, i1 zeroext false) #15
  %89 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %84, i64 0, i32 0, i32 1
  %90 = load i8*, i8** %89, align 8
  %91 = getelementptr inbounds i8, i8* %90, i64 %87
  store i8 34, i8* %91, align 1
  store i8 1, i8* %35, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.61, i64 0, i64 0)) #15
  %92 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %6, align 8
  %93 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %92, i64 0, i32 0
  %94 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %92, i64 0, i32 0, i32 2
  %95 = load i64, i64* %94, align 8
  %96 = add i64 %95, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %93, i64 %96, i1 zeroext false) #15
  %97 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %92, i64 0, i32 0, i32 1
  %98 = load i8*, i8** %97, align 8
  %99 = getelementptr inbounds i8, i8* %98, i64 %95
  store i8 34, i8* %99, align 1
  store i8 0, i8* %35, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %100 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %6, align 8
  %101 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %100, i64 0, i32 0
  %102 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %100, i64 0, i32 0, i32 2
  %103 = load i64, i64* %102, align 8
  %104 = add i64 %103, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %101, i64 %104, i1 zeroext false) #15
  %105 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %100, i64 0, i32 0, i32 1
  %106 = load i8*, i8** %105, align 8
  %107 = getelementptr inbounds i8, i8* %106, i64 %103
  store i8 34, i8* %107, align 1
  store i8 1, i8* %35, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i64 0, i64 0)) #15
  %108 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %6, align 8
  %109 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %108, i64 0, i32 0
  %110 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %108, i64 0, i32 0, i32 2
  %111 = load i64, i64* %110, align 8
  %112 = add i64 %111, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %109, i64 %112, i1 zeroext false) #15
  %113 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %108, i64 0, i32 0, i32 1
  %114 = load i8*, i8** %113, align 8
  %115 = getelementptr inbounds i8, i8* %114, i64 %111
  store i8 34, i8* %115, align 1
  store i8 0, i8* %35, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %116 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %6, align 8
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %45) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %45, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %46, align 4
  br label %117

117:                                              ; preds = %117, %67
  %118 = phi i64 [ %3, %67 ], [ %124, %117 ]
  %119 = phi i8* [ %46, %67 ], [ %123, %117 ]
  %120 = urem i64 %118, 10
  %121 = trunc i64 %120 to i8
  %122 = or i8 %121, 48
  %123 = getelementptr inbounds i8, i8* %119, i64 -1
  store i8 %122, i8* %123, align 1
  %124 = udiv i64 %118, 10
  %125 = icmp ugt i64 %118, 9
  br i1 %125, label %117, label %126

126:                                              ; preds = %117
  %127 = call i64 @strlen(i8* %123) #16
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %137, label %129

129:                                              ; preds = %126
  %130 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %116, i64 0, i32 0
  %131 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %116, i64 0, i32 0, i32 2
  %132 = load i64, i64* %131, align 8
  %133 = add i64 %132, %127
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %130, i64 %133, i1 zeroext false) #15
  %134 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %116, i64 0, i32 0, i32 1
  %135 = load i8*, i8** %134, align 8
  %136 = getelementptr inbounds i8, i8* %135, i64 %132
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %136, i8* align 1 %123, i64 %127, i1 false) #15
  br label %137

137:                                              ; preds = %126, %129
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %45) #15
  tail call void @_ZN13VmaJsonWriter9EndObjectEv(%class.VmaJsonWriter* %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK16VmaBlockMetadata20PrintDetailedMap_EndER13VmaJsonWriter(%class.VmaBlockMetadata* nocapture readnone, %class.VmaJsonWriter* dereferenceable(48)) local_unnamed_addr #0 align 2 {
  tail call void @_ZN13VmaJsonWriter8EndArrayEv(%class.VmaJsonWriter* %1)
  tail call void @_ZN13VmaJsonWriter9EndObjectEv(%class.VmaJsonWriter* %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24VmaBlockMetadata_GenericC2EP14VmaAllocator_T(%class.VmaBlockMetadata_Generic* nocapture, %struct.VmaAllocator_T*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV16VmaBlockMetadata, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 0, i32 1
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 0, i32 2
  %6 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 11
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  %9 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13
  %10 = select i1 %8, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %9
  store %struct.VkAllocationCallbacks* %10, %struct.VkAllocationCallbacks** %5, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV24VmaBlockMetadata_Generic, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %11 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 1
  store i32 0, i32* %11, align 8
  %12 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 2
  store i64 0, i64* %12, align 8
  %13 = load i8, i8* %6, align 8, !range !2
  %14 = icmp eq i8 %13, 0
  %15 = select i1 %14, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %9
  %16 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 0
  store %struct.VkAllocationCallbacks* %15, %struct.VkAllocationCallbacks** %16, align 8
  %17 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 1, i32 0
  store %struct.VkAllocationCallbacks* %15, %struct.VkAllocationCallbacks** %17, align 8
  %18 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 1, i32 1
  store i32 128, i32* %18, align 8
  %19 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 1, i32 2
  %20 = ptrtoint %struct.VkAllocationCallbacks* %15 to i64
  %21 = bitcast %class.VmaVector.16* %19 to i64*
  store i64 %20, i64* %21, align 8
  %22 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 1, i32 2, i32 1
  %23 = bitcast %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"** %22 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 48, i1 false) #15
  %24 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4
  %25 = load i8, i8* %6, align 8, !range !2
  %26 = icmp eq i8 %25, 0
  %27 = ptrtoint %struct.VkAllocationCallbacks* %9 to i64
  %28 = select i1 %26, i64 0, i64 %27
  %29 = bitcast %class.VmaVector.18* %24 to i64*
  store i64 %28, i64* %29, align 8
  %30 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 1
  %31 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %30 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 24, i1 false) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24VmaBlockMetadata_GenericD2Ev(%class.VmaBlockMetadata_Generic*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV24VmaBlockMetadata_Generic, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 0, i32 0
  %4 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %3, align 8
  %5 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 1
  %6 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %5 to i8**
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq %struct.VkAllocationCallbacks* %4, null
  br i1 %8, label %16, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %4, i64 0, i32 3
  %11 = load void (i8*, i8*)*, void (i8*, i8*)** %10, align 8
  %12 = icmp eq void (i8*, i8*)* %11, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %4, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  tail call void %11(i8* %15, i8* %7) #15
  br label %17

16:                                               ; preds = %9, %1
  tail call void @free(i8* %7) #15
  br label %17

17:                                               ; preds = %13, %16
  %18 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 1
  tail call void @_ZN16VmaPoolAllocatorI11VmaListItemI16VmaSuballocationEED2Ev(%class.VmaPoolAllocator.15* %18) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24VmaBlockMetadata_GenericD0Ev(%class.VmaBlockMetadata_Generic*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV24VmaBlockMetadata_Generic, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 0, i32 0
  %4 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %3, align 8
  %5 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 1
  %6 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %5 to i8**
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq %struct.VkAllocationCallbacks* %4, null
  br i1 %8, label %16, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %4, i64 0, i32 3
  %11 = load void (i8*, i8*)*, void (i8*, i8*)** %10, align 8
  %12 = icmp eq void (i8*, i8*)* %11, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %4, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  tail call void %11(i8* %15, i8* %7) #15
  br label %17

16:                                               ; preds = %9, %1
  tail call void @free(i8* %7) #15
  br label %17

17:                                               ; preds = %13, %16
  %18 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 1
  tail call void @_ZN16VmaPoolAllocatorI11VmaListItemI16VmaSuballocationEED2Ev(%class.VmaPoolAllocator.15* %18) #15
  %19 = bitcast %class.VmaBlockMetadata_Generic* %0 to i8*
  tail call void @_ZdlPv(i8* %19) #17
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24VmaBlockMetadata_Generic4InitEm(%class.VmaBlockMetadata_Generic*, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 0, i32 1
  store i64 %1, i64* %3, align 8
  %4 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 1
  store i32 1, i32* %4, align 8
  %5 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 2
  store i64 %1, i64* %5, align 8
  %6 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 1
  %7 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 1, i32 2, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 1, i32 2, i32 1
  br label %10

10:                                               ; preds = %14, %2
  %11 = phi i64 [ %8, %2 ], [ %12, %14 ]
  %12 = add i64 %11, -1
  %13 = icmp eq i64 %11, 0
  br i1 %13, label %26, label %14

14:                                               ; preds = %10
  %15 = load %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"*, %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"** %9, align 8
  %16 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %15, i64 %12, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, -1
  br i1 %18, label %10, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %15, i64 %12, i32 0
  %21 = load %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %20, align 8
  %22 = zext i32 %17 to i64
  %23 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %21, i64 %22
  %24 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %23, i64 0, i32 0
  %25 = load i32, i32* %24, align 8
  store i32 %25, i32* %16, align 4
  br label %33

26:                                               ; preds = %10
  %27 = tail call dereferenceable(16) %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* @_ZN16VmaPoolAllocatorI11VmaListItemI16VmaSuballocationEE14CreateNewBlockEv(%class.VmaPoolAllocator.15* %6) #15
  %28 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %27, i64 0, i32 0
  %29 = load %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %28, align 8
  %30 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %29, i64 0, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %27, i64 0, i32 2
  store i32 %31, i32* %32, align 4
  br label %33

33:                                               ; preds = %26, %19
  %34 = phi %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* [ %29, %26 ], [ %23, %19 ]
  %35 = bitcast %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 48, i1 false) #15
  %36 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %34, i64 0, i32 1, i64 4
  %37 = bitcast i8* %36 to %struct.VmaListItem**
  store %struct.VmaListItem* null, %struct.VmaListItem** %37, align 8
  %38 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 4
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %48

41:                                               ; preds = %33
  %42 = bitcast %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %34 to %struct.VmaListItem**
  store %struct.VmaListItem* null, %struct.VmaListItem** %42, align 8
  %43 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 2
  %44 = bitcast %struct.VmaListItem** %43 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"**
  store %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %34, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %44, align 8
  %45 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 3
  %46 = bitcast %struct.VmaListItem** %45 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"**
  store %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %34, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %46, align 8
  %47 = bitcast %struct.VmaListItem** %45 to i64*
  br label %59

48:                                               ; preds = %33
  %49 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 3
  %50 = bitcast %struct.VmaListItem** %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = bitcast %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %34 to i64*
  store i64 %51, i64* %52, align 8
  %53 = load %struct.VmaListItem*, %struct.VmaListItem** %49, align 8
  %54 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %53, i64 0, i32 1
  %55 = bitcast %struct.VmaListItem** %54 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"**
  store %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %34, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %55, align 8
  %56 = bitcast %struct.VmaListItem** %49 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"**
  store %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %34, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %56, align 8
  %57 = load i64, i64* %38, align 8
  %58 = add i64 %57, 1
  br label %59

59:                                               ; preds = %41, %48
  %60 = phi i64* [ %47, %41 ], [ %50, %48 ]
  %61 = phi i64 [ 1, %41 ], [ %58, %48 ]
  store i64 %61, i64* %38, align 8
  %62 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %34, i64 0, i32 1, i64 12
  %63 = bitcast i8* %62 to i64*
  store i64 0, i64* %63, align 8
  %64 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %34, i64 0, i32 1, i64 20
  %65 = bitcast i8* %64 to i64*
  store i64 %1, i64* %65, align 8
  %66 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %34, i64 0, i32 1, i64 28
  %67 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %66, i8 0, i64 16, i1 false)
  %68 = load i64, i64* %60, align 8
  %69 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4
  %70 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 2
  %71 = load i64, i64* %70, align 8
  %72 = add i64 %71, 1
  tail call void @_ZN9VmaVectorIN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorES2_IS5_EE6resizeEmb(%class.VmaVector.18* %69, i64 %72, i1 zeroext false) #15
  %73 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 1
  %74 = load %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %73, align 8
  %75 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %74, i64 %71, i32 0
  store %class.VmaRawList* %67, %class.VmaRawList** %75, align 8
  %76 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %74, i64 %71, i32 1
  %77 = bitcast %struct.VmaListItem** %76 to i64*
  store i64 %68, i64* %77, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN16VmaBlockMetadata4InitEm(%class.VmaBlockMetadata*, i64) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %0, i64 0, i32 1
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK24VmaBlockMetadata_Generic8ValidateEv(%class.VmaBlockMetadata_Generic*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 4
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %127, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 2
  %7 = load %struct.VmaListItem*, %struct.VmaListItem** %6, align 8
  %8 = icmp eq %struct.VmaListItem* %7, null
  br i1 %8, label %66, label %9

9:                                                ; preds = %5, %57
  %10 = phi %struct.VmaListItem* [ %64, %57 ], [ %7, %5 ]
  %11 = phi i8 [ %23, %57 ], [ 0, %5 ]
  %12 = phi i64 [ %61, %57 ], [ 0, %5 ]
  %13 = phi i64 [ %60, %57 ], [ 0, %5 ]
  %14 = phi i32 [ %59, %57 ], [ 0, %5 ]
  %15 = phi i64 [ %62, %57 ], [ 0, %5 ]
  %16 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %10, i64 0, i32 2, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %17, %15
  br i1 %18, label %19, label %127

19:                                               ; preds = %9
  %20 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %10, i64 0, i32 2, i32 3
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 0
  %23 = zext i1 %22 to i8
  %24 = icmp eq i8 %11, 0
  %25 = xor i1 %22, true
  %26 = or i1 %24, %25
  br i1 %26, label %27, label %127

27:                                               ; preds = %19
  %28 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %10, i64 0, i32 2, i32 2
  %29 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %28, align 8
  %30 = icmp ne %struct.VmaAllocation_T* %29, null
  %31 = xor i1 %22, %30
  br i1 %31, label %32, label %127

32:                                               ; preds = %27
  br i1 %22, label %33, label %41

33:                                               ; preds = %32
  %34 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %10, i64 0, i32 2, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %35, %13
  %37 = add i32 %14, 1
  %38 = icmp ugt i64 %35, 15
  %39 = zext i1 %38 to i64
  %40 = add i64 %12, %39
  br label %57

41:                                               ; preds = %32
  %42 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %29, i64 0, i32 5
  %43 = load i8, i8* %42, align 8
  %44 = icmp eq i8 %43, 1
  br i1 %44, label %45, label %48

45:                                               ; preds = %41
  %46 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %29, i64 0, i32 9, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  br label %48

48:                                               ; preds = %41, %45
  %49 = phi i64 [ %47, %45 ], [ 0, %41 ]
  %50 = icmp eq i64 %49, %15
  br i1 %50, label %51, label %127

51:                                               ; preds = %48
  %52 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %29, i64 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %10, i64 0, i32 2, i32 1
  %55 = load i64, i64* %54, align 8
  %56 = icmp eq i64 %53, %55
  br i1 %56, label %57, label %127

57:                                               ; preds = %33, %51
  %58 = phi i64 [ %35, %33 ], [ %53, %51 ]
  %59 = phi i32 [ %37, %33 ], [ %14, %51 ]
  %60 = phi i64 [ %36, %33 ], [ %13, %51 ]
  %61 = phi i64 [ %40, %33 ], [ %12, %51 ]
  %62 = add i64 %58, %15
  %63 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %10, i64 0, i32 1
  %64 = load %struct.VmaListItem*, %struct.VmaListItem** %63, align 8
  %65 = icmp eq %struct.VmaListItem* %64, null
  br i1 %65, label %66, label %9

66:                                               ; preds = %57, %5
  %67 = phi i64 [ 0, %5 ], [ %62, %57 ]
  %68 = phi i32 [ 0, %5 ], [ %59, %57 ]
  %69 = phi i64 [ 0, %5 ], [ %60, %57 ]
  %70 = phi i64 [ 0, %5 ], [ %61, %57 ]
  %71 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 2
  %72 = load i64, i64* %71, align 8
  %73 = icmp eq i64 %72, %70
  br i1 %73, label %74, label %127

74:                                               ; preds = %66
  %75 = icmp eq i64 %70, 0
  br i1 %75, label %115, label %76

76:                                               ; preds = %74
  %77 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 1
  %78 = load %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %77, align 8
  br label %81

79:                                               ; preds = %89
  %80 = icmp eq i64 %93, %70
  br i1 %80, label %94, label %81

81:                                               ; preds = %79, %76
  %82 = phi i64 [ 0, %76 ], [ %93, %79 ]
  %83 = phi i64 [ 0, %76 ], [ %91, %79 ]
  %84 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %78, i64 %82, i32 1
  %85 = load %struct.VmaListItem*, %struct.VmaListItem** %84, align 8
  %86 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %85, i64 0, i32 2, i32 3
  %87 = load i32, i32* %86, align 8
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %127

89:                                               ; preds = %81
  %90 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %85, i64 0, i32 2, i32 1
  %91 = load i64, i64* %90, align 8
  %92 = icmp ult i64 %91, %83
  %93 = add nuw i64 %82, 1
  br i1 %92, label %127, label %79

94:                                               ; preds = %79
  br i1 %75, label %115, label %95

95:                                               ; preds = %94
  %96 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 1
  %97 = load %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %96, align 8
  br label %100

98:                                               ; preds = %108
  %99 = icmp eq i64 %114, %70
  br i1 %99, label %115, label %100

100:                                              ; preds = %98, %95
  %101 = phi i64 [ 0, %95 ], [ %114, %98 ]
  %102 = phi i64 [ 0, %95 ], [ %110, %98 ]
  %103 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %97, i64 %101, i32 1
  %104 = load %struct.VmaListItem*, %struct.VmaListItem** %103, align 8
  %105 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %104, i64 0, i32 2, i32 3
  %106 = load i32, i32* %105, align 8
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %127

108:                                              ; preds = %100
  %109 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %104, i64 0, i32 2, i32 1
  %110 = load i64, i64* %109, align 8
  %111 = icmp ult i64 %110, 16
  %112 = icmp ult i64 %110, %102
  %113 = or i1 %111, %112
  %114 = add nuw i64 %101, 1
  br i1 %113, label %127, label %98

115:                                              ; preds = %98, %74, %94
  %116 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 0, i32 1
  %117 = load i64, i64* %116, align 8
  %118 = icmp eq i64 %67, %117
  br i1 %118, label %119, label %127

119:                                              ; preds = %115
  %120 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 2
  %121 = load i64, i64* %120, align 8
  %122 = icmp eq i64 %69, %121
  br i1 %122, label %123, label %127

123:                                              ; preds = %119
  %124 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 1
  %125 = load i32, i32* %124, align 8
  %126 = icmp eq i32 %68, %125
  br label %127

127:                                              ; preds = %51, %48, %27, %19, %9, %89, %81, %108, %100, %66, %123, %119, %115, %1
  %128 = phi i1 [ false, %1 ], [ false, %66 ], [ false, %115 ], [ false, %119 ], [ %126, %123 ], [ false, %100 ], [ false, %108 ], [ false, %81 ], [ false, %89 ], [ false, %9 ], [ false, %19 ], [ false, %27 ], [ false, %48 ], [ false, %51 ]
  ret i1 %128
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK24VmaBlockMetadata_Generic29ValidateFreeSuballocationListEv(%class.VmaBlockMetadata_Generic* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %25, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 1
  %7 = load %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %6, align 8
  br label %10

8:                                                ; preds = %18
  %9 = icmp eq i64 %24, %3
  br i1 %9, label %25, label %10

10:                                               ; preds = %8, %5
  %11 = phi i64 [ 0, %5 ], [ %24, %8 ]
  %12 = phi i64 [ 0, %5 ], [ %20, %8 ]
  %13 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %7, i64 %11, i32 1
  %14 = load %struct.VmaListItem*, %struct.VmaListItem** %13, align 8
  %15 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %14, i64 0, i32 2, i32 3
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %25

18:                                               ; preds = %10
  %19 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %14, i64 0, i32 2, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = icmp ult i64 %20, 16
  %22 = icmp ult i64 %20, %12
  %23 = or i1 %21, %22
  %24 = add nuw i64 %11, 1
  br i1 %23, label %25, label %8

25:                                               ; preds = %10, %18, %8, %1
  %26 = phi i1 [ true, %1 ], [ false, %18 ], [ true, %8 ], [ false, %10 ]
  ret i1 %26
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK24VmaBlockMetadata_Generic21GetUnusedRangeSizeMaxEv(%class.VmaBlockMetadata_Generic* nocapture readonly) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 1
  %7 = load %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %6, align 8
  %8 = add i64 %3, -1
  %9 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %7, i64 %8, i32 1
  %10 = load %struct.VmaListItem*, %struct.VmaListItem** %9, align 8
  %11 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %10, i64 0, i32 2, i32 1
  %12 = load i64, i64* %11, align 8
  br label %13

13:                                               ; preds = %1, %5
  %14 = phi i64 [ %12, %5 ], [ 0, %1 ]
  ret i64 %14
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK24VmaBlockMetadata_Generic7IsEmptyEv(%class.VmaBlockMetadata_Generic* nocapture readonly) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 4
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 1
  br i1 %4, label %5, label %9

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 1
  br label %9

9:                                                ; preds = %5, %1
  %10 = phi i1 [ false, %1 ], [ %8, %5 ]
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK24VmaBlockMetadata_Generic22CalcAllocationStatInfoER11VmaStatInfo(%class.VmaBlockMetadata_Generic*, %struct.VmaStatInfo* nocapture dereferenceable(80)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 0
  store i32 1, i32* %3, align 8
  %4 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 4
  %5 = load i64, i64* %4, align 8
  %6 = trunc i64 %5 to i32
  %7 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = sub i32 %6, %8
  %10 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 1
  store i32 %9, i32* %10, align 4
  %11 = load i32, i32* %7, align 8
  %12 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 2
  store i32 %11, i32* %12, align 8
  %13 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 4
  store i64 %14, i64* %15, align 8
  %16 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %14
  %19 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 3
  store i64 %18, i64* %19, align 8
  %20 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 5
  store i64 -1, i64* %20, align 8
  %21 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 7
  %22 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 8
  %23 = bitcast i64* %21 to <2 x i64>*
  store <2 x i64> <i64 0, i64 -1>, <2 x i64>* %23, align 8
  %24 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 10
  store i64 0, i64* %24, align 8
  %25 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 2
  %26 = load %struct.VmaListItem*, %struct.VmaListItem** %25, align 8
  %27 = icmp eq %struct.VmaListItem* %26, null
  br i1 %27, label %28, label %29

28:                                               ; preds = %54, %2
  ret void

29:                                               ; preds = %2, %54
  %30 = phi i64 [ %55, %54 ], [ 0, %2 ]
  %31 = phi i64 [ %56, %54 ], [ -1, %2 ]
  %32 = phi i64 [ %57, %54 ], [ 0, %2 ]
  %33 = phi i64 [ %58, %54 ], [ -1, %2 ]
  %34 = phi %struct.VmaListItem* [ %60, %54 ], [ %26, %2 ]
  %35 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %34, i64 0, i32 2, i32 3
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 0
  %38 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %34, i64 0, i32 2, i32 1
  %39 = load i64, i64* %38, align 8
  br i1 %37, label %47, label %40

40:                                               ; preds = %29
  %41 = icmp ult i64 %39, %33
  %42 = select i1 %41, i64* %38, i64* %20
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %20, align 8
  %44 = load i64, i64* %38, align 8
  %45 = icmp ult i64 %32, %44
  %46 = select i1 %45, i64 %44, i64 %32
  store i64 %46, i64* %21, align 8
  br label %54

47:                                               ; preds = %29
  %48 = icmp ult i64 %39, %31
  %49 = select i1 %48, i64* %38, i64* %22
  %50 = load i64, i64* %49, align 8
  store i64 %50, i64* %22, align 8
  %51 = load i64, i64* %38, align 8
  %52 = icmp ult i64 %30, %51
  %53 = select i1 %52, i64 %51, i64 %30
  store i64 %53, i64* %24, align 8
  br label %54

54:                                               ; preds = %47, %40
  %55 = phi i64 [ %53, %47 ], [ %30, %40 ]
  %56 = phi i64 [ %50, %47 ], [ %31, %40 ]
  %57 = phi i64 [ %32, %47 ], [ %46, %40 ]
  %58 = phi i64 [ %33, %47 ], [ %43, %40 ]
  %59 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %34, i64 0, i32 1
  %60 = load %struct.VmaListItem*, %struct.VmaListItem** %59, align 8
  %61 = icmp eq %struct.VmaListItem* %60, null
  br i1 %61, label %28, label %29
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK24VmaBlockMetadata_Generic12AddPoolStatsER12VmaPoolStats(%class.VmaBlockMetadata_Generic*, %struct.VmaPoolStats* nocapture dereferenceable(48)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 4
  %4 = load i64, i64* %3, align 8
  %5 = trunc i64 %4 to i32
  %6 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, %7
  store i64 %10, i64* %8, align 8
  %11 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = add i64 %14, %12
  store i64 %15, i64* %13, align 8
  %16 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = sub i32 %5, %17
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = add i64 %21, %19
  store i64 %22, i64* %20, align 8
  %23 = load i32, i32* %16, align 8
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 3
  %26 = load i64, i64* %25, align 8
  %27 = add i64 %26, %24
  store i64 %27, i64* %25, align 8
  %28 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 4
  %29 = bitcast %class.VmaBlockMetadata_Generic* %0 to i64 (%class.VmaBlockMetadata_Generic*)***
  %30 = load i64 (%class.VmaBlockMetadata_Generic*)**, i64 (%class.VmaBlockMetadata_Generic*)*** %29, align 8
  %31 = getelementptr inbounds i64 (%class.VmaBlockMetadata_Generic*)*, i64 (%class.VmaBlockMetadata_Generic*)** %30, i64 6
  %32 = load i64 (%class.VmaBlockMetadata_Generic*)*, i64 (%class.VmaBlockMetadata_Generic*)** %31, align 8
  %33 = tail call i64 %32(%class.VmaBlockMetadata_Generic* %0) #15
  %34 = load i64, i64* %28, align 8
  %35 = icmp ult i64 %34, %33
  %36 = select i1 %35, i64 %33, i64 %34
  store i64 %36, i64* %28, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK24VmaBlockMetadata_Generic16PrintDetailedMapER13VmaJsonWriter(%class.VmaBlockMetadata_Generic*, %class.VmaJsonWriter* dereferenceable(48)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 0
  %4 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 4
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = sub i64 %7, %10
  tail call void @_ZNK16VmaBlockMetadata22PrintDetailedMap_BeginER13VmaJsonWritermmm(%class.VmaBlockMetadata* %3, %class.VmaJsonWriter* dereferenceable(48) %1, i64 %5, i64 %11, i64 %10)
  %12 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 2
  %13 = load %struct.VmaListItem*, %struct.VmaListItem** %12, align 8
  %14 = icmp eq %struct.VmaListItem* %13, null
  br i1 %14, label %15, label %16

15:                                               ; preds = %29, %2
  tail call void @_ZN13VmaJsonWriter8EndArrayEv(%class.VmaJsonWriter* %1) #15
  tail call void @_ZN13VmaJsonWriter9EndObjectEv(%class.VmaJsonWriter* %1) #15
  ret void

16:                                               ; preds = %2, %29
  %17 = phi %struct.VmaListItem* [ %31, %29 ], [ %13, %2 ]
  %18 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %17, i64 0, i32 2, i32 3
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 0
  %21 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %17, i64 0, i32 2, i32 0
  %22 = load i64, i64* %21, align 8
  br i1 %20, label %23, label %26

23:                                               ; preds = %16
  %24 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %17, i64 0, i32 2, i32 1
  %25 = load i64, i64* %24, align 8
  tail call void @_ZNK16VmaBlockMetadata28PrintDetailedMap_UnusedRangeER13VmaJsonWritermm(%class.VmaBlockMetadata* undef, %class.VmaJsonWriter* dereferenceable(48) %1, i64 %22, i64 %25)
  br label %29

26:                                               ; preds = %16
  %27 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %17, i64 0, i32 2, i32 2
  %28 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %27, align 8
  tail call void @_ZNK16VmaBlockMetadata27PrintDetailedMap_AllocationER13VmaJsonWritermP15VmaAllocation_T(%class.VmaBlockMetadata* undef, %class.VmaJsonWriter* dereferenceable(48) %1, i64 %22, %struct.VmaAllocation_T* %28)
  br label %29

29:                                               ; preds = %23, %26
  %30 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %17, i64 0, i32 1
  %31 = load %struct.VmaListItem*, %struct.VmaListItem** %30, align 8
  %32 = icmp eq %struct.VmaListItem* %31, null
  br i1 %32, label %15, label %16
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN24VmaBlockMetadata_Generic23CreateAllocationRequestEjjmmmb20VmaSuballocationTypebjP20VmaAllocationRequest(%class.VmaBlockMetadata_Generic*, i32, i32, i64, i64, i64, i1 zeroext, i32, i1 zeroext, i32, %struct.VmaAllocationRequest*) unnamed_addr #0 align 2 {
  %12 = alloca <2 x i64>, align 16
  %13 = bitcast <2 x i64>* %12 to %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator"*
  %14 = alloca %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator", align 8
  %15 = alloca <2 x i64>, align 16
  %16 = bitcast <2 x i64>* %15 to %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator"*
  %17 = alloca %struct.VmaAllocationRequest, align 8
  %18 = alloca %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator", align 8
  %19 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 6
  store i32 0, i32* %19, align 8
  br i1 %8, label %24, label %20

20:                                               ; preds = %11
  %21 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 2
  %22 = load i64, i64* %21, align 8
  %23 = icmp ult i64 %22, %4
  br i1 %23, label %201, label %24

24:                                               ; preds = %11, %20
  %25 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 2
  %26 = load i64, i64* %25, align 8
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %130, label %28

28:                                               ; preds = %24
  switch i32 %9, label %29 [
    i32 65536, label %35
    i32 268435456, label %81
  ]

29:                                               ; preds = %28
  %30 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 1
  %31 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 0
  %32 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 4
  %33 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 1
  %34 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 2
  br label %114

35:                                               ; preds = %28
  %36 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 1
  %37 = load %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %36, align 8
  %38 = shl nuw i64 %26, 4
  %39 = ashr exact i64 %38, 4
  br label %40

40:                                               ; preds = %40, %35
  %41 = phi i64 [ 0, %35 ], [ %52, %40 ]
  %42 = phi i64 [ %39, %35 ], [ %51, %40 ]
  %43 = add i64 %42, %41
  %44 = lshr i64 %43, 1
  %45 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %37, i64 %44, i32 1
  %46 = load %struct.VmaListItem*, %struct.VmaListItem** %45, align 8
  %47 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %46, i64 0, i32 2, i32 1
  %48 = load i64, i64* %47, align 8
  %49 = icmp ult i64 %48, %4
  %50 = add nuw i64 %44, 1
  %51 = select i1 %49, i64 %42, i64 %44
  %52 = select i1 %49, i64 %50, i64 %41
  %53 = icmp ult i64 %52, %51
  br i1 %53, label %40, label %54

54:                                               ; preds = %40
  %55 = shl i64 %52, 4
  %56 = ashr exact i64 %55, 4
  %57 = icmp ult i64 %56, %26
  br i1 %57, label %58, label %130

58:                                               ; preds = %54
  %59 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 0
  %60 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 4
  %61 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 1
  %62 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 2
  br label %63

63:                                               ; preds = %79, %58
  %64 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %37, %58 ], [ %80, %79 ]
  %65 = phi i64 [ %56, %58 ], [ %77, %79 ]
  %66 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %64, i64 %65
  %67 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %66 to <2 x i64>*
  %68 = load <2 x i64>, <2 x i64>* %67, align 8
  store <2 x i64> %68, <2 x i64>* %12, align 16
  %69 = tail call zeroext i1 @_ZNK24VmaBlockMetadata_Generic15CheckAllocationEjjmmm20VmaSuballocationTypeN7VmaListI16VmaSuballocation15VmaStlAllocatorIS2_EE14const_iteratorEbPmS7_S7_S7_(%class.VmaBlockMetadata_Generic* %0, i32 %1, i32 %2, i64 %3, i64 %4, i64 %5, i32 %7, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator"* nonnull byval(%"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator") align 8 %13, i1 zeroext false, i64* %59, i64* %60, i64* %61, i64* %62)
  br i1 %69, label %70, label %76

70:                                               ; preds = %63
  %71 = load %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %36, align 8
  %72 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %71, i64 %65
  %73 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 3
  %74 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %73 to i8*
  %75 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %72 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 16, i1 false)
  br label %201

76:                                               ; preds = %63
  %77 = add i64 %65, 1
  %78 = icmp eq i64 %77, %26
  br i1 %78, label %130, label %79

79:                                               ; preds = %76
  %80 = load %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %36, align 8
  br label %63

81:                                               ; preds = %28
  %82 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0
  %83 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 2
  %84 = ptrtoint %class.VmaRawList* %82 to i64
  %85 = bitcast %struct.VmaListItem** %83 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %130, label %88

88:                                               ; preds = %81
  %89 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator"* %14 to i64*
  %90 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator"* %14, i64 0, i32 1
  %91 = bitcast %struct.VmaListItem** %90 to i64*
  %92 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 0
  %93 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 4
  %94 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 1
  %95 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 2
  br label %96

96:                                               ; preds = %88, %109
  %97 = phi i64 [ %86, %88 ], [ %112, %109 ]
  %98 = inttoptr i64 %97 to %struct.VmaListItem*
  %99 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %98, i64 0, i32 2, i32 3
  %100 = load i32, i32* %99, align 8
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %109

102:                                              ; preds = %96
  store i64 %84, i64* %89, align 8
  store i64 %97, i64* %91, align 8
  %103 = tail call zeroext i1 @_ZNK24VmaBlockMetadata_Generic15CheckAllocationEjjmmm20VmaSuballocationTypeN7VmaListI16VmaSuballocation15VmaStlAllocatorIS2_EE14const_iteratorEbPmS7_S7_S7_(%class.VmaBlockMetadata_Generic* %0, i32 %1, i32 %2, i64 %3, i64 %4, i64 %5, i32 %7, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator"* nonnull byval(%"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator") align 8 %14, i1 zeroext false, i64* %92, i64* %93, i64* %94, i64* %95)
  br i1 %103, label %104, label %109

104:                                              ; preds = %102
  %105 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 3
  %106 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %105 to i64*
  store i64 %84, i64* %106, align 8
  %107 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 3, i32 1
  %108 = bitcast %struct.VmaListItem** %107 to i64*
  store i64 %97, i64* %108, align 8
  br label %201

109:                                              ; preds = %102, %96
  %110 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %98, i64 0, i32 1
  %111 = bitcast %struct.VmaListItem** %110 to i64*
  %112 = load i64, i64* %111, align 8
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %130, label %96

114:                                              ; preds = %29, %118
  %115 = phi i64 [ %116, %118 ], [ %26, %29 ]
  %116 = add i64 %115, -1
  %117 = icmp eq i64 %115, 0
  br i1 %117, label %130, label %118

118:                                              ; preds = %114
  %119 = load %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %30, align 8
  %120 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %119, i64 %116
  %121 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 8
  store <2 x i64> %122, <2 x i64>* %15, align 16
  %123 = tail call zeroext i1 @_ZNK24VmaBlockMetadata_Generic15CheckAllocationEjjmmm20VmaSuballocationTypeN7VmaListI16VmaSuballocation15VmaStlAllocatorIS2_EE14const_iteratorEbPmS7_S7_S7_(%class.VmaBlockMetadata_Generic* %0, i32 %1, i32 %2, i64 %3, i64 %4, i64 %5, i32 %7, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator"* nonnull byval(%"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator") align 8 %16, i1 zeroext false, i64* %31, i64* %32, i64* %33, i64* %34)
  br i1 %123, label %124, label %114

124:                                              ; preds = %118
  %125 = load %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %30, align 8
  %126 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %125, i64 %116
  %127 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 3
  %128 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %127 to i8*
  %129 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %126 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %128, i8* align 8 %129, i64 16, i1 false)
  br label %201

130:                                              ; preds = %109, %76, %114, %81, %54, %24
  br i1 %8, label %131, label %201

131:                                              ; preds = %130
  %132 = bitcast %struct.VmaAllocationRequest* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %132) #15
  %133 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0
  %134 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 2
  %135 = ptrtoint %class.VmaRawList* %133 to i64
  %136 = bitcast %struct.VmaListItem** %134 to i64*
  %137 = bitcast %struct.VmaAllocationRequest* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %137, i8 0, i64 64, i1 false)
  %138 = load i64, i64* %136, align 8
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %197, label %140

140:                                              ; preds = %131
  %141 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator"* %18 to i64*
  %142 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator"* %18, i64 0, i32 1
  %143 = bitcast %struct.VmaListItem** %142 to i64*
  %144 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %17, i64 0, i32 0
  %145 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %17, i64 0, i32 4
  %146 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %17, i64 0, i32 1
  %147 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %17, i64 0, i32 2
  %148 = icmp eq i32 %9, 262144
  %149 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 2
  %150 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 4
  %151 = bitcast %struct.VmaAllocationRequest* %10 to i8*
  %152 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 3
  %153 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %152 to i64*
  %154 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 3, i32 1
  %155 = bitcast %struct.VmaListItem** %154 to i64*
  br label %156

156:                                              ; preds = %140, %191
  %157 = phi i64 [ %138, %140 ], [ %195, %191 ]
  %158 = phi i8 [ 0, %140 ], [ %192, %191 ]
  %159 = inttoptr i64 %157 to %struct.VmaListItem*
  %160 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %159, i64 0, i32 2, i32 3
  %161 = load i32, i32* %160, align 8
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %173, label %163

163:                                              ; preds = %156
  %164 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %159, i64 0, i32 2, i32 2
  %165 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %164, align 8
  %166 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %165, i64 0, i32 5
  %167 = load i8, i8* %166, align 8
  %168 = icmp eq i8 %167, 1
  br i1 %168, label %169, label %191

169:                                              ; preds = %163
  %170 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %165, i64 0, i32 9, i32 0, i32 2
  %171 = load i8, i8* %170, align 8, !range !2
  %172 = icmp eq i8 %171, 0
  br i1 %172, label %191, label %173

173:                                              ; preds = %169, %156
  store i64 %135, i64* %141, align 8
  store i64 %157, i64* %143, align 8
  %174 = call zeroext i1 @_ZNK24VmaBlockMetadata_Generic15CheckAllocationEjjmmm20VmaSuballocationTypeN7VmaListI16VmaSuballocation15VmaStlAllocatorIS2_EE14const_iteratorEbPmS7_S7_S7_(%class.VmaBlockMetadata_Generic* %0, i32 %1, i32 %2, i64 %3, i64 %4, i64 %5, i32 %7, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator"* nonnull byval(%"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator") align 8 %18, i1 zeroext true, i64* nonnull %144, i64* %145, i64* %146, i64* %147)
  br i1 %174, label %175, label %191

175:                                              ; preds = %173
  br i1 %148, label %176, label %177

176:                                              ; preds = %175
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %151, i8* nonnull align 8 %132, i64 60, i1 false)
  store i64 %135, i64* %153, align 8
  store i64 %157, i64* %155, align 8
  br label %197

177:                                              ; preds = %175
  %178 = and i8 %158, 1
  %179 = icmp eq i8 %178, 0
  br i1 %179, label %190, label %180

180:                                              ; preds = %177
  %181 = load i64, i64* %147, align 8
  %182 = load i64, i64* %145, align 8
  %183 = shl i64 %182, 20
  %184 = add i64 %183, %181
  %185 = load i64, i64* %149, align 8
  %186 = load i64, i64* %150, align 8
  %187 = shl i64 %186, 20
  %188 = add i64 %187, %185
  %189 = icmp ult i64 %184, %188
  br i1 %189, label %190, label %191

190:                                              ; preds = %177, %180
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %151, i8* nonnull align 8 %132, i64 60, i1 false)
  store i64 %135, i64* %153, align 8
  store i64 %157, i64* %155, align 8
  br label %191

191:                                              ; preds = %169, %163, %180, %190, %173
  %192 = phi i8 [ 1, %190 ], [ %158, %180 ], [ %158, %173 ], [ %158, %169 ], [ %158, %163 ]
  %193 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %159, i64 0, i32 1
  %194 = bitcast %struct.VmaListItem** %193 to i64*
  %195 = load i64, i64* %194, align 8
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %197, label %156

197:                                              ; preds = %191, %131, %176
  %198 = phi i8 [ %158, %176 ], [ 0, %131 ], [ %192, %191 ]
  %199 = and i8 %198, 1
  %200 = icmp ne i8 %199, 0
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %132) #15
  br label %201

201:                                              ; preds = %197, %70, %104, %124, %130, %20
  %202 = phi i1 [ false, %20 ], [ %200, %197 ], [ true, %70 ], [ true, %104 ], [ true, %124 ], [ false, %130 ]
  ret i1 %202
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK24VmaBlockMetadata_Generic15CheckAllocationEjjmmm20VmaSuballocationTypeN7VmaListI16VmaSuballocation15VmaStlAllocatorIS2_EE14const_iteratorEbPmS7_S7_S7_(%class.VmaBlockMetadata_Generic*, i32, i32, i64, i64, i64, i32, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator"* nocapture readonly byval(%"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator") align 8, i1 zeroext, i64* nocapture, i64* nocapture, i64* nocapture, i64* nocapture) local_unnamed_addr #0 align 2 {
  store i64 0, i64* %10, align 8
  store i64 0, i64* %11, align 8
  store i64 0, i64* %12, align 8
  %14 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator"* %7, i64 0, i32 1
  %15 = load %struct.VmaListItem*, %struct.VmaListItem** %14, align 8
  %16 = ptrtoint %struct.VmaListItem* %15 to i64
  br i1 %8, label %17, label %220

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %15, i64 0, i32 2, i32 3
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %15, i64 0, i32 2, i32 1
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %11, align 8
  br label %46

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %15, i64 0, i32 2, i32 2
  %26 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %25, align 8
  %27 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %26, i64 0, i32 5
  %28 = load i8, i8* %27, align 8
  %29 = icmp eq i8 %28, 1
  br i1 %29, label %30, label %320

30:                                               ; preds = %24
  %31 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %26, i64 0, i32 9, i32 0, i32 2
  %32 = load i8, i8* %31, align 8, !range !2
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %320, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %26, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load atomic i32, i32* %35 seq_cst, align 4
  %37 = add i32 %36, %2
  %38 = icmp ult i32 %37, %1
  br i1 %38, label %39, label %320

39:                                               ; preds = %34
  %40 = load i64, i64* %10, align 8
  %41 = add i64 %40, 1
  store i64 %41, i64* %10, align 8
  %42 = load %struct.VmaListItem*, %struct.VmaListItem** %14, align 8
  %43 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %42, i64 0, i32 2, i32 1
  %44 = load i64, i64* %43, align 8
  store i64 %44, i64* %12, align 8
  %45 = ptrtoint %struct.VmaListItem* %42 to i64
  br label %46

46:                                               ; preds = %39, %21
  %47 = phi i64 [ %45, %39 ], [ %16, %21 ]
  %48 = phi %struct.VmaListItem* [ %42, %39 ], [ %15, %21 ]
  %49 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %48, i64 0, i32 2, i32 0
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %50, %52
  %54 = icmp ult i64 %53, %4
  br i1 %54, label %320, label %55

55:                                               ; preds = %46
  %56 = add i64 %5, -1
  %57 = add i64 %56, %52
  %58 = urem i64 %57, %5
  %59 = sub i64 %57, %58
  store i64 %59, i64* %9, align 8
  %60 = icmp ugt i64 %3, 1
  br i1 %60, label %61, label %108

61:                                               ; preds = %55
  %62 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 2
  %63 = load %struct.VmaListItem*, %struct.VmaListItem** %62, align 8
  %64 = inttoptr i64 %47 to %struct.VmaListItem*
  %65 = icmp eq %struct.VmaListItem* %63, %64
  br i1 %65, label %108, label %66

66:                                               ; preds = %61
  %67 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator"* %7, i64 0, i32 0
  %68 = load %class.VmaRawList*, %class.VmaRawList** %67, align 8
  %69 = getelementptr inbounds %class.VmaRawList, %class.VmaRawList* %68, i64 0, i32 3
  %70 = sub i64 0, %3
  br label %71

71:                                               ; preds = %66, %101
  %72 = phi %struct.VmaListItem* [ %64, %66 ], [ %79, %101 ]
  %73 = phi i64 [ %47, %66 ], [ %78, %101 ]
  %74 = icmp eq i64 %73, 0
  %75 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %72, i64 0, i32 0
  %76 = select i1 %74, %struct.VmaListItem** %69, %struct.VmaListItem** %75
  %77 = bitcast %struct.VmaListItem** %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = inttoptr i64 %78 to %struct.VmaListItem*
  %80 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %79, i64 0, i32 2, i32 0
  %81 = load i64, i64* %80, align 8
  %82 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %79, i64 0, i32 2, i32 1
  %83 = load i64, i64* %82, align 8
  %84 = add i64 %81, -1
  %85 = add i64 %84, %83
  %86 = xor i64 %85, %59
  %87 = and i64 %86, %70
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %108

89:                                               ; preds = %71
  %90 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %79, i64 0, i32 2, i32 3
  %91 = load i32, i32* %90, align 8
  %92 = icmp sgt i32 %91, %6
  %93 = select i1 %92, i32 %6, i32 %91
  %94 = select i1 %92, i32 %91, i32 %6
  switch i32 %93, label %103 [
    i32 0, label %101
    i32 5, label %101
    i32 2, label %100
    i32 3, label %95
    i32 4, label %98
  ]

95:                                               ; preds = %89
  %96 = add i32 %94, -3
  %97 = icmp ult i32 %96, 3
  br i1 %97, label %103, label %101

98:                                               ; preds = %89
  %99 = icmp eq i32 %94, 5
  br i1 %99, label %103, label %101

100:                                              ; preds = %89
  switch i32 %94, label %101 [
    i32 5, label %103
    i32 3, label %103
  ]

101:                                              ; preds = %100, %89, %89, %98, %95
  %102 = icmp eq %struct.VmaListItem* %63, %79
  br i1 %102, label %108, label %71

103:                                              ; preds = %100, %100, %89, %95, %98
  %104 = add i64 %3, -1
  %105 = add i64 %104, %59
  %106 = urem i64 %105, %3
  %107 = sub i64 %105, %106
  store i64 %107, i64* %9, align 8
  br label %108

108:                                              ; preds = %101, %71, %61, %103, %55
  %109 = phi i64 [ %59, %61 ], [ %107, %103 ], [ %59, %55 ], [ %59, %71 ], [ %59, %101 ]
  %110 = load i64, i64* %51, align 8
  %111 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %48, i64 0, i32 2, i32 1
  %112 = load i64, i64* %111, align 8
  %113 = add i64 %112, %110
  %114 = icmp ult i64 %109, %113
  br i1 %114, label %115, label %320

115:                                              ; preds = %108
  %116 = sub i64 %109, %110
  %117 = add i64 %116, %4
  %118 = add i64 %109, %4
  %119 = load i64, i64* %49, align 8
  %120 = icmp ugt i64 %118, %119
  br i1 %120, label %320, label %121

121:                                              ; preds = %115
  %122 = icmp ugt i64 %117, %112
  br i1 %122, label %123, label %167

123:                                              ; preds = %121
  %124 = sub i64 %117, %112
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %167, label %126

126:                                              ; preds = %123, %157
  %127 = phi i64 [ %165, %157 ], [ %124, %123 ]
  %128 = phi i64 [ %132, %157 ], [ %47, %123 ]
  %129 = inttoptr i64 %128 to %struct.VmaListItem*
  %130 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %129, i64 0, i32 1
  %131 = bitcast %struct.VmaListItem** %130 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %320, label %134

134:                                              ; preds = %126
  %135 = inttoptr i64 %132 to %struct.VmaListItem*
  %136 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %135, i64 0, i32 2, i32 3
  %137 = load i32, i32* %136, align 8
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %157, label %139

139:                                              ; preds = %134
  %140 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %135, i64 0, i32 2, i32 2
  %141 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %140, align 8
  %142 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %141, i64 0, i32 5
  %143 = load i8, i8* %142, align 8
  %144 = icmp eq i8 %143, 1
  br i1 %144, label %145, label %320

145:                                              ; preds = %139
  %146 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %141, i64 0, i32 9, i32 0, i32 2
  %147 = load i8, i8* %146, align 8, !range !2
  %148 = icmp eq i8 %147, 0
  br i1 %148, label %320, label %149

149:                                              ; preds = %145
  %150 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %141, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %151 = load atomic i32, i32* %150 seq_cst, align 4
  %152 = add i32 %151, %2
  %153 = icmp ult i32 %152, %1
  br i1 %153, label %154, label %320

154:                                              ; preds = %149
  %155 = load i64, i64* %10, align 8
  %156 = add i64 %155, 1
  store i64 %156, i64* %10, align 8
  br label %157

157:                                              ; preds = %134, %154
  %158 = phi i64* [ %12, %154 ], [ %11, %134 ]
  %159 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %135, i64 0, i32 2, i32 1
  %160 = load i64, i64* %159, align 8
  %161 = load i64, i64* %158, align 8
  %162 = add i64 %161, %160
  store i64 %162, i64* %158, align 8
  %163 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %135, i64 0, i32 2, i32 1
  %164 = load i64, i64* %163, align 8
  %165 = tail call i64 @llvm.usub.sat.i64(i64 %127, i64 %164)
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %167, label %126

167:                                              ; preds = %157, %123, %121
  %168 = phi i64 [ %47, %121 ], [ %47, %123 ], [ %132, %157 ]
  br i1 %60, label %169, label %320

169:                                              ; preds = %167
  %170 = inttoptr i64 %168 to %struct.VmaListItem*
  %171 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %170, i64 0, i32 1
  %172 = load %struct.VmaListItem*, %struct.VmaListItem** %171, align 8
  %173 = icmp eq %struct.VmaListItem* %172, null
  br i1 %173, label %320, label %174

174:                                              ; preds = %169
  %175 = add i64 %4, -1
  %176 = sub i64 0, %3
  br label %177

177:                                              ; preds = %174, %216
  %178 = phi %struct.VmaListItem* [ %172, %174 ], [ %218, %216 ]
  %179 = load i64, i64* %9, align 8
  %180 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %178, i64 0, i32 2, i32 0
  %181 = load i64, i64* %180, align 8
  %182 = add i64 %175, %179
  %183 = xor i64 %182, %181
  %184 = and i64 %183, %176
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %186, label %320

186:                                              ; preds = %177
  %187 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %178, i64 0, i32 2, i32 3
  %188 = load i32, i32* %187, align 8
  %189 = icmp slt i32 %188, %6
  %190 = select i1 %189, i32 %188, i32 %6
  %191 = select i1 %189, i32 %6, i32 %188
  switch i32 %190, label %198 [
    i32 0, label %216
    i32 5, label %216
    i32 2, label %197
    i32 3, label %192
    i32 4, label %195
  ]

192:                                              ; preds = %186
  %193 = add i32 %191, -3
  %194 = icmp ult i32 %193, 3
  br i1 %194, label %198, label %216

195:                                              ; preds = %186
  %196 = icmp eq i32 %191, 5
  br i1 %196, label %198, label %216

197:                                              ; preds = %186
  switch i32 %191, label %216 [
    i32 5, label %198
    i32 3, label %198
  ]

198:                                              ; preds = %197, %197, %186, %192, %195
  %199 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %178, i64 0, i32 2, i32 2
  %200 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %199, align 8
  %201 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %200, i64 0, i32 5
  %202 = load i8, i8* %201, align 8
  %203 = icmp eq i8 %202, 1
  br i1 %203, label %204, label %320

204:                                              ; preds = %198
  %205 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %200, i64 0, i32 9, i32 0, i32 2
  %206 = load i8, i8* %205, align 8, !range !2
  %207 = icmp eq i8 %206, 0
  br i1 %207, label %320, label %208

208:                                              ; preds = %204
  %209 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %200, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %210 = load atomic i32, i32* %209 seq_cst, align 4
  %211 = add i32 %210, %2
  %212 = icmp ult i32 %211, %1
  br i1 %212, label %213, label %320

213:                                              ; preds = %208
  %214 = load i64, i64* %10, align 8
  %215 = add i64 %214, 1
  store i64 %215, i64* %10, align 8
  br label %216

216:                                              ; preds = %197, %186, %186, %213, %195, %192
  %217 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %178, i64 0, i32 1
  %218 = load %struct.VmaListItem*, %struct.VmaListItem** %217, align 8
  %219 = icmp eq %struct.VmaListItem* %218, null
  br i1 %219, label %320, label %177

220:                                              ; preds = %13
  %221 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %15, i64 0, i32 2, i32 1
  %222 = load i64, i64* %221, align 8
  store i64 %222, i64* %11, align 8
  %223 = load i64, i64* %221, align 8
  %224 = icmp ult i64 %223, %4
  br i1 %224, label %320, label %225

225:                                              ; preds = %220
  %226 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %15, i64 0, i32 2, i32 0
  %227 = load i64, i64* %226, align 8
  %228 = add i64 %5, -1
  %229 = add i64 %228, %227
  %230 = urem i64 %229, %5
  %231 = sub i64 %229, %230
  store i64 %231, i64* %9, align 8
  %232 = icmp ugt i64 %3, 1
  br i1 %232, label %233, label %279

233:                                              ; preds = %225
  %234 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 2
  %235 = load %struct.VmaListItem*, %struct.VmaListItem** %234, align 8
  %236 = icmp eq %struct.VmaListItem* %235, %15
  br i1 %236, label %279, label %237

237:                                              ; preds = %233
  %238 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::const_iterator"* %7, i64 0, i32 0
  %239 = load %class.VmaRawList*, %class.VmaRawList** %238, align 8
  %240 = getelementptr inbounds %class.VmaRawList, %class.VmaRawList* %239, i64 0, i32 3
  %241 = sub i64 0, %3
  br label %242

242:                                              ; preds = %237, %272
  %243 = phi %struct.VmaListItem* [ %15, %237 ], [ %250, %272 ]
  %244 = phi i64 [ %16, %237 ], [ %249, %272 ]
  %245 = icmp eq i64 %244, 0
  %246 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %243, i64 0, i32 0
  %247 = select i1 %245, %struct.VmaListItem** %240, %struct.VmaListItem** %246
  %248 = bitcast %struct.VmaListItem** %247 to i64*
  %249 = load i64, i64* %248, align 8
  %250 = inttoptr i64 %249 to %struct.VmaListItem*
  %251 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %250, i64 0, i32 2, i32 0
  %252 = load i64, i64* %251, align 8
  %253 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %250, i64 0, i32 2, i32 1
  %254 = load i64, i64* %253, align 8
  %255 = add i64 %252, -1
  %256 = add i64 %255, %254
  %257 = xor i64 %256, %231
  %258 = and i64 %257, %241
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %260, label %279

260:                                              ; preds = %242
  %261 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %250, i64 0, i32 2, i32 3
  %262 = load i32, i32* %261, align 8
  %263 = icmp sgt i32 %262, %6
  %264 = select i1 %263, i32 %6, i32 %262
  %265 = select i1 %263, i32 %262, i32 %6
  switch i32 %264, label %274 [
    i32 0, label %272
    i32 5, label %272
    i32 2, label %271
    i32 3, label %266
    i32 4, label %269
  ]

266:                                              ; preds = %260
  %267 = add i32 %265, -3
  %268 = icmp ult i32 %267, 3
  br i1 %268, label %274, label %272

269:                                              ; preds = %260
  %270 = icmp eq i32 %265, 5
  br i1 %270, label %274, label %272

271:                                              ; preds = %260
  switch i32 %265, label %272 [
    i32 5, label %274
    i32 3, label %274
  ]

272:                                              ; preds = %271, %260, %260, %269, %266
  %273 = icmp eq %struct.VmaListItem* %235, %250
  br i1 %273, label %279, label %242

274:                                              ; preds = %271, %271, %260, %266, %269
  %275 = add i64 %3, -1
  %276 = add i64 %275, %231
  %277 = urem i64 %276, %3
  %278 = sub i64 %276, %277
  store i64 %278, i64* %9, align 8
  br label %279

279:                                              ; preds = %272, %242, %233, %274, %225
  %280 = phi i64 [ %231, %233 ], [ %278, %274 ], [ %231, %225 ], [ %231, %242 ], [ %231, %272 ]
  %281 = load i64, i64* %226, align 8
  %282 = add i64 %280, %4
  %283 = sub i64 %282, %281
  %284 = load i64, i64* %221, align 8
  %285 = icmp ugt i64 %283, %284
  %286 = xor i1 %232, true
  %287 = or i1 %285, %286
  %288 = xor i1 %285, true
  br i1 %287, label %320, label %289

289:                                              ; preds = %279
  %290 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %15, i64 0, i32 1
  %291 = load %struct.VmaListItem*, %struct.VmaListItem** %290, align 8
  %292 = icmp eq %struct.VmaListItem* %291, null
  br i1 %292, label %320, label %293

293:                                              ; preds = %289
  %294 = add i64 %4, -1
  %295 = add i64 %294, %280
  %296 = sub i64 0, %3
  br label %297

297:                                              ; preds = %293, %316
  %298 = phi %struct.VmaListItem* [ %291, %293 ], [ %318, %316 ]
  %299 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %298, i64 0, i32 2, i32 0
  %300 = load i64, i64* %299, align 8
  %301 = xor i64 %300, %295
  %302 = and i64 %301, %296
  %303 = icmp eq i64 %302, 0
  br i1 %303, label %304, label %320

304:                                              ; preds = %297
  %305 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %298, i64 0, i32 2, i32 3
  %306 = load i32, i32* %305, align 8
  %307 = icmp slt i32 %306, %6
  %308 = select i1 %307, i32 %306, i32 %6
  %309 = select i1 %307, i32 %6, i32 %306
  switch i32 %308, label %320 [
    i32 0, label %316
    i32 5, label %316
    i32 2, label %315
    i32 3, label %310
    i32 4, label %313
  ]

310:                                              ; preds = %304
  %311 = add i32 %309, -3
  %312 = icmp ult i32 %311, 3
  br i1 %312, label %320, label %316

313:                                              ; preds = %304
  %314 = icmp eq i32 %309, 5
  br i1 %314, label %320, label %316

315:                                              ; preds = %304
  switch i32 %309, label %316 [
    i32 5, label %320
    i32 3, label %320
  ]

316:                                              ; preds = %315, %304, %304, %313, %310
  %317 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %298, i64 0, i32 1
  %318 = load %struct.VmaListItem*, %struct.VmaListItem** %317, align 8
  %319 = icmp eq %struct.VmaListItem* %318, null
  br i1 %319, label %320, label %297

320:                                              ; preds = %297, %313, %310, %304, %315, %315, %316, %145, %139, %149, %126, %177, %208, %198, %216, %204, %289, %169, %30, %279, %220, %115, %24, %167, %108, %46, %34
  %321 = phi i1 [ false, %34 ], [ false, %30 ], [ false, %46 ], [ false, %108 ], [ true, %167 ], [ false, %24 ], [ false, %115 ], [ false, %220 ], [ %288, %279 ], [ true, %169 ], [ true, %289 ], [ true, %177 ], [ false, %208 ], [ false, %198 ], [ true, %216 ], [ false, %204 ], [ false, %126 ], [ false, %149 ], [ false, %139 ], [ false, %145 ], [ true, %297 ], [ false, %313 ], [ false, %310 ], [ false, %304 ], [ false, %315 ], [ false, %315 ], [ true, %316 ]
  ret i1 %321
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN24VmaBlockMetadata_Generic28MakeRequestedAllocationsLostEjjP20VmaAllocationRequest(%class.VmaBlockMetadata_Generic*, i32, i32, %struct.VmaAllocationRequest* nocapture) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %3, i64 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %52, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %3, i64 0, i32 3, i32 1
  %10 = bitcast %struct.VmaListItem** %9 to i64*
  %11 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %3, i64 0, i32 3, i32 0
  %12 = load %struct.VmaListItem*, %struct.VmaListItem** %9, align 8
  br label %13

13:                                               ; preds = %8, %43
  %14 = phi %struct.VmaListItem* [ %12, %8 ], [ %48, %43 ]
  %15 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %14, i64 0, i32 2, i32 3
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %23

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %14, i64 0, i32 1
  %20 = bitcast %struct.VmaListItem** %19 to i64*
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %10, align 8
  %22 = inttoptr i64 %21 to %struct.VmaListItem*
  br label %23

23:                                               ; preds = %18, %13
  %24 = phi %struct.VmaListItem* [ %22, %18 ], [ %14, %13 ]
  %25 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %24, i64 0, i32 2, i32 2
  %26 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %25, align 8
  %27 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %26, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load atomic i32, i32* %27 seq_cst, align 4
  %29 = icmp ne i32 %28, -1
  %30 = add i32 %28, %2
  %31 = icmp ult i32 %30, %1
  %32 = and i1 %29, %31
  br i1 %32, label %33, label %52

33:                                               ; preds = %23, %37
  %34 = phi i32 [ %38, %37 ], [ %28, %23 ]
  %35 = cmpxchg weak i32* %27, i32 %34, i32 -1 seq_cst seq_cst
  %36 = extractvalue { i32, i1 } %35, 1
  br i1 %36, label %43, label %37

37:                                               ; preds = %33
  %38 = extractvalue { i32, i1 } %35, 0
  %39 = icmp ne i32 %38, -1
  %40 = add i32 %38, %2
  %41 = icmp ult i32 %40, %1
  %42 = and i1 %39, %41
  br i1 %42, label %33, label %52

43:                                               ; preds = %33
  %44 = load %class.VmaRawList*, %class.VmaRawList** %11, align 8
  %45 = load %struct.VmaListItem*, %struct.VmaListItem** %9, align 8
  %46 = tail call { %class.VmaRawList*, %struct.VmaListItem* } @_ZN24VmaBlockMetadata_Generic17FreeSuballocationEN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorE(%class.VmaBlockMetadata_Generic* %0, %class.VmaRawList* %44, %struct.VmaListItem* %45)
  %47 = extractvalue { %class.VmaRawList*, %struct.VmaListItem* } %46, 0
  %48 = extractvalue { %class.VmaRawList*, %struct.VmaListItem* } %46, 1
  store %class.VmaRawList* %47, %class.VmaRawList** %11, align 8
  store %struct.VmaListItem* %48, %struct.VmaListItem** %9, align 8
  %49 = load i64, i64* %5, align 8
  %50 = add i64 %49, -1
  store i64 %50, i64* %5, align 8
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %13

52:                                               ; preds = %43, %23, %37, %4
  %53 = phi i1 [ true, %4 ], [ false, %37 ], [ true, %43 ], [ false, %23 ]
  ret i1 %53
}

; Function Attrs: nounwind ssp uwtable
define hidden { %class.VmaRawList*, %struct.VmaListItem* } @_ZN24VmaBlockMetadata_Generic17FreeSuballocationEN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorE(%class.VmaBlockMetadata_Generic*, %class.VmaRawList*, %struct.VmaListItem*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %2, i64 0, i32 2, i32 3
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %2, i64 0, i32 2, i32 2
  store %struct.VmaAllocation_T* null, %struct.VmaAllocation_T** %5, align 8
  %6 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = add i32 %7, 1
  store i32 %8, i32* %6, align 8
  %9 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %2, i64 0, i32 2, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = add i64 %12, %10
  store i64 %13, i64* %11, align 8
  %14 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %2, i64 0, i32 1
  %15 = bitcast %struct.VmaListItem** %14 to i64*
  %16 = load %struct.VmaListItem*, %struct.VmaListItem** %14, align 8
  %17 = icmp eq %struct.VmaListItem* %16, null
  %18 = ptrtoint %struct.VmaListItem* %16 to i64
  br i1 %17, label %23, label %19

19:                                               ; preds = %3
  %20 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %16, i64 0, i32 2, i32 3
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 0
  br label %23

23:                                               ; preds = %3, %19
  %24 = phi i1 [ %22, %19 ], [ false, %3 ]
  %25 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 2
  %26 = load %struct.VmaListItem*, %struct.VmaListItem** %25, align 8
  %27 = icmp eq %struct.VmaListItem* %26, %2
  br i1 %27, label %37, label %28

28:                                               ; preds = %23
  %29 = icmp eq %struct.VmaListItem* %2, null
  %30 = getelementptr inbounds %class.VmaRawList, %class.VmaRawList* %1, i64 0, i32 3
  %31 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %2, i64 0, i32 0
  %32 = select i1 %29, %struct.VmaListItem** %30, %struct.VmaListItem** %31
  %33 = load %struct.VmaListItem*, %struct.VmaListItem** %32, align 8
  %34 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %33, i64 0, i32 2, i32 3
  %35 = load i32, i32* %34, align 8
  %36 = icmp eq i32 %35, 0
  br label %37

37:                                               ; preds = %23, %28
  %38 = phi %struct.VmaListItem* [ %33, %28 ], [ %2, %23 ]
  %39 = phi i1 [ %36, %28 ], [ false, %23 ]
  br i1 %24, label %40, label %155

40:                                               ; preds = %37
  %41 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %16, i64 0, i32 2, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = icmp ugt i64 %42, 15
  br i1 %43, label %44, label %96

44:                                               ; preds = %40
  %45 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4
  %46 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 1
  %47 = load %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %46, align 8
  %48 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 2
  %49 = load i64, i64* %48, align 8
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %71, label %51

51:                                               ; preds = %44
  %52 = shl nuw i64 %49, 4
  %53 = ashr exact i64 %52, 4
  br label %54

54:                                               ; preds = %54, %51
  %55 = phi i64 [ 0, %51 ], [ %66, %54 ]
  %56 = phi i64 [ %53, %51 ], [ %65, %54 ]
  %57 = add i64 %56, %55
  %58 = lshr i64 %57, 1
  %59 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %47, i64 %58, i32 1
  %60 = load %struct.VmaListItem*, %struct.VmaListItem** %59, align 8
  %61 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %60, i64 0, i32 2, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = icmp ult i64 %62, %42
  %64 = add nuw i64 %58, 1
  %65 = select i1 %63, i64 %56, i64 %58
  %66 = select i1 %63, i64 %64, i64 %55
  %67 = icmp ult i64 %66, %65
  br i1 %67, label %54, label %68

68:                                               ; preds = %54
  %69 = shl i64 %66, 4
  %70 = ashr exact i64 %69, 4
  br label %71

71:                                               ; preds = %68, %44
  %72 = phi i64 [ 0, %44 ], [ %70, %68 ]
  %73 = icmp ult i64 %72, %49
  br i1 %73, label %74, label %96

74:                                               ; preds = %71, %93
  %75 = phi i64 [ %94, %93 ], [ %72, %71 ]
  %76 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %47, i64 %75, i32 1
  %77 = load %struct.VmaListItem*, %struct.VmaListItem** %76, align 8
  %78 = icmp eq %struct.VmaListItem* %77, %16
  br i1 %78, label %79, label %93

79:                                               ; preds = %74
  %80 = add i64 %49, -1
  %81 = icmp ugt i64 %80, %75
  br i1 %81, label %82, label %91

82:                                               ; preds = %79
  %83 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %47, i64 %75
  %84 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %83 to i8*
  %85 = add nuw i64 %75, 1
  %86 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %47, i64 %85
  %87 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %86 to i8*
  %88 = xor i64 %75, 1152921504606846975
  %89 = add i64 %88, %49
  %90 = shl i64 %89, 4
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %87, i64 %90, i1 false) #15
  br label %91

91:                                               ; preds = %82, %79
  tail call void @_ZN9VmaVectorIN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorES2_IS5_EE6resizeEmb(%class.VmaVector.18* %45, i64 %80, i1 zeroext false) #15
  %92 = load i64, i64* %15, align 8
  br label %96

93:                                               ; preds = %74
  %94 = add i64 %75, 1
  %95 = icmp eq i64 %94, %49
  br i1 %95, label %96, label %74

96:                                               ; preds = %93, %40, %71, %91
  %97 = phi i64 [ %18, %40 ], [ %18, %71 ], [ %92, %91 ], [ %18, %93 ]
  %98 = inttoptr i64 %97 to %struct.VmaListItem*
  %99 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %98, i64 0, i32 2, i32 1
  %100 = load i64, i64* %99, align 8
  %101 = load i64, i64* %9, align 8
  %102 = add i64 %101, %100
  store i64 %102, i64* %9, align 8
  %103 = load i32, i32* %6, align 8
  %104 = add i32 %103, -1
  store i32 %104, i32* %6, align 8
  %105 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %98, i64 0, i32 0
  %106 = load %struct.VmaListItem*, %struct.VmaListItem** %105, align 8
  %107 = icmp eq %struct.VmaListItem* %106, null
  %108 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %98, i64 0, i32 1
  %109 = bitcast %struct.VmaListItem** %108 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %106, i64 0, i32 1
  %112 = select i1 %107, %struct.VmaListItem** %25, %struct.VmaListItem** %111
  %113 = bitcast %struct.VmaListItem** %112 to i64*
  store i64 %110, i64* %113, align 8
  %114 = load %struct.VmaListItem*, %struct.VmaListItem** %108, align 8
  %115 = icmp eq %struct.VmaListItem* %114, null
  %116 = inttoptr i64 %97 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 3
  %119 = bitcast %struct.VmaListItem** %118 to i64*
  %120 = bitcast %struct.VmaListItem* %114 to i64*
  %121 = select i1 %115, i64* %119, i64* %120
  store i64 %117, i64* %121, align 8
  %122 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 1, i32 2, i32 2
  %123 = load i64, i64* %122, align 8
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %151, label %125

125:                                              ; preds = %96
  %126 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 1, i32 2, i32 1
  %127 = load %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"*, %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"** %126, align 8
  %128 = inttoptr i64 %97 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*
  br label %129

129:                                              ; preds = %149, %125
  %130 = phi i64 [ %123, %125 ], [ %131, %149 ]
  %131 = add i64 %130, -1
  %132 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %127, i64 %131, i32 0
  %133 = load %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %132, align 8
  %134 = icmp ugt %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %133, %128
  br i1 %134, label %149, label %135

135:                                              ; preds = %129
  %136 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %127, i64 %131, i32 1
  %137 = load i32, i32* %136, align 8
  %138 = zext i32 %137 to i64
  %139 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %133, i64 %138
  %140 = icmp ugt %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %139, %128
  br i1 %140, label %141, label %149

141:                                              ; preds = %135
  %142 = ptrtoint %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %133 to i64
  %143 = sub i64 %97, %142
  %144 = sdiv exact i64 %143, 48
  %145 = trunc i64 %144 to i32
  %146 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %127, i64 %131, i32 2
  %147 = load i32, i32* %146, align 4
  %148 = inttoptr i64 %97 to i32*
  store i32 %147, i32* %148, align 8
  store i32 %145, i32* %146, align 4
  br label %151

149:                                              ; preds = %135, %129
  %150 = icmp eq i64 %131, 0
  br i1 %150, label %151, label %129

151:                                              ; preds = %149, %96, %141
  %152 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 4
  %153 = load i64, i64* %152, align 8
  %154 = add i64 %153, -1
  store i64 %154, i64* %152, align 8
  br label %155

155:                                              ; preds = %151, %37
  br i1 %39, label %156, label %273

156:                                              ; preds = %155
  %157 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %38, i64 0, i32 2, i32 1
  %158 = load i64, i64* %157, align 8
  %159 = icmp ugt i64 %158, 15
  br i1 %159, label %160, label %212

160:                                              ; preds = %156
  %161 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4
  %162 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 1
  %163 = load %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %162, align 8
  %164 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 2
  %165 = load i64, i64* %164, align 8
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %187, label %167

167:                                              ; preds = %160
  %168 = shl nuw i64 %165, 4
  %169 = ashr exact i64 %168, 4
  br label %170

170:                                              ; preds = %170, %167
  %171 = phi i64 [ 0, %167 ], [ %182, %170 ]
  %172 = phi i64 [ %169, %167 ], [ %181, %170 ]
  %173 = add i64 %172, %171
  %174 = lshr i64 %173, 1
  %175 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %163, i64 %174, i32 1
  %176 = load %struct.VmaListItem*, %struct.VmaListItem** %175, align 8
  %177 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %176, i64 0, i32 2, i32 1
  %178 = load i64, i64* %177, align 8
  %179 = icmp ult i64 %178, %158
  %180 = add nuw i64 %174, 1
  %181 = select i1 %179, i64 %172, i64 %174
  %182 = select i1 %179, i64 %180, i64 %171
  %183 = icmp ult i64 %182, %181
  br i1 %183, label %170, label %184

184:                                              ; preds = %170
  %185 = shl i64 %182, 4
  %186 = ashr exact i64 %185, 4
  br label %187

187:                                              ; preds = %184, %160
  %188 = phi i64 [ 0, %160 ], [ %186, %184 ]
  %189 = icmp ult i64 %188, %165
  br i1 %189, label %190, label %212

190:                                              ; preds = %187, %209
  %191 = phi i64 [ %210, %209 ], [ %188, %187 ]
  %192 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %163, i64 %191, i32 1
  %193 = load %struct.VmaListItem*, %struct.VmaListItem** %192, align 8
  %194 = icmp eq %struct.VmaListItem* %193, %38
  br i1 %194, label %195, label %209

195:                                              ; preds = %190
  %196 = add i64 %165, -1
  %197 = icmp ugt i64 %196, %191
  br i1 %197, label %198, label %207

198:                                              ; preds = %195
  %199 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %163, i64 %191
  %200 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %199 to i8*
  %201 = add nuw i64 %191, 1
  %202 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %163, i64 %201
  %203 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %202 to i8*
  %204 = xor i64 %191, 1152921504606846975
  %205 = add i64 %204, %165
  %206 = shl i64 %205, 4
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %200, i8* align 8 %203, i64 %206, i1 false) #15
  br label %207

207:                                              ; preds = %198, %195
  tail call void @_ZN9VmaVectorIN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorES2_IS5_EE6resizeEmb(%class.VmaVector.18* %161, i64 %196, i1 zeroext false) #15
  %208 = load i64, i64* %157, align 8
  br label %212

209:                                              ; preds = %190
  %210 = add i64 %191, 1
  %211 = icmp eq i64 %210, %165
  br i1 %211, label %212, label %190

212:                                              ; preds = %209, %156, %187, %207
  %213 = phi i64 [ %158, %156 ], [ %158, %187 ], [ %208, %207 ], [ %158, %209 ]
  %214 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %38, i64 0, i32 1
  %215 = bitcast %struct.VmaListItem** %214 to i64*
  %216 = load i64, i64* %215, align 8
  %217 = inttoptr i64 %216 to %struct.VmaListItem*
  %218 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %217, i64 0, i32 2, i32 1
  %219 = load i64, i64* %218, align 8
  %220 = add i64 %213, %219
  store i64 %220, i64* %157, align 8
  %221 = load i32, i32* %6, align 8
  %222 = add i32 %221, -1
  store i32 %222, i32* %6, align 8
  %223 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %217, i64 0, i32 0
  %224 = load %struct.VmaListItem*, %struct.VmaListItem** %223, align 8
  %225 = icmp eq %struct.VmaListItem* %224, null
  %226 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %217, i64 0, i32 1
  %227 = bitcast %struct.VmaListItem** %226 to i64*
  %228 = load i64, i64* %227, align 8
  %229 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %224, i64 0, i32 1
  %230 = select i1 %225, %struct.VmaListItem** %25, %struct.VmaListItem** %229
  %231 = bitcast %struct.VmaListItem** %230 to i64*
  store i64 %228, i64* %231, align 8
  %232 = load %struct.VmaListItem*, %struct.VmaListItem** %226, align 8
  %233 = icmp eq %struct.VmaListItem* %232, null
  %234 = inttoptr i64 %216 to i64*
  %235 = load i64, i64* %234, align 8
  %236 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 3
  %237 = bitcast %struct.VmaListItem** %236 to i64*
  %238 = bitcast %struct.VmaListItem* %232 to i64*
  %239 = select i1 %233, i64* %237, i64* %238
  store i64 %235, i64* %239, align 8
  %240 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 1, i32 2, i32 2
  %241 = load i64, i64* %240, align 8
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %269, label %243

243:                                              ; preds = %212
  %244 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 1, i32 2, i32 1
  %245 = load %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"*, %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"** %244, align 8
  %246 = inttoptr i64 %216 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*
  br label %247

247:                                              ; preds = %267, %243
  %248 = phi i64 [ %241, %243 ], [ %249, %267 ]
  %249 = add i64 %248, -1
  %250 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %245, i64 %249, i32 0
  %251 = load %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %250, align 8
  %252 = icmp ugt %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %251, %246
  br i1 %252, label %267, label %253

253:                                              ; preds = %247
  %254 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %245, i64 %249, i32 1
  %255 = load i32, i32* %254, align 8
  %256 = zext i32 %255 to i64
  %257 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %251, i64 %256
  %258 = icmp ugt %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %257, %246
  br i1 %258, label %259, label %267

259:                                              ; preds = %253
  %260 = ptrtoint %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %251 to i64
  %261 = sub i64 %216, %260
  %262 = sdiv exact i64 %261, 48
  %263 = trunc i64 %262 to i32
  %264 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %245, i64 %249, i32 2
  %265 = load i32, i32* %264, align 4
  %266 = inttoptr i64 %216 to i32*
  store i32 %265, i32* %266, align 8
  store i32 %263, i32* %264, align 4
  br label %269

267:                                              ; preds = %253, %247
  %268 = icmp eq i64 %249, 0
  br i1 %268, label %269, label %247

269:                                              ; preds = %267, %212, %259
  %270 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 4
  %271 = load i64, i64* %270, align 8
  %272 = add i64 %271, -1
  store i64 %272, i64* %270, align 8
  br label %273

273:                                              ; preds = %155, %269
  %274 = phi %struct.VmaListItem* [ %38, %269 ], [ %2, %155 ]
  tail call void @_ZN24VmaBlockMetadata_Generic25RegisterFreeSuballocationEN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorE(%class.VmaBlockMetadata_Generic* %0, %class.VmaRawList* %1, %struct.VmaListItem* %274)
  %275 = insertvalue { %class.VmaRawList*, %struct.VmaListItem* } undef, %class.VmaRawList* %1, 0
  %276 = insertvalue { %class.VmaRawList*, %struct.VmaListItem* } %275, %struct.VmaListItem* %274, 1
  ret { %class.VmaRawList*, %struct.VmaListItem* } %276
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN24VmaBlockMetadata_Generic19MakeAllocationsLostEjj(%class.VmaBlockMetadata_Generic*, i32, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 2
  %5 = bitcast %struct.VmaListItem** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0
  br label %12

10:                                               ; preds = %52, %3
  %11 = phi i32 [ 0, %3 ], [ %55, %52 ]
  ret i32 %11

12:                                               ; preds = %8, %52
  %13 = phi i64 [ %58, %52 ], [ %6, %8 ]
  %14 = phi i32 [ %55, %52 ], [ 0, %8 ]
  %15 = phi %class.VmaRawList* [ %53, %52 ], [ %9, %8 ]
  %16 = inttoptr i64 %13 to %struct.VmaListItem*
  %17 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %16, i64 0, i32 2, i32 3
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %52, label %20

20:                                               ; preds = %12
  %21 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %16, i64 0, i32 2, i32 2
  %22 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %21, align 8
  %23 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %22, i64 0, i32 5
  %24 = load i8, i8* %23, align 8
  %25 = icmp eq i8 %24, 1
  br i1 %25, label %26, label %52

26:                                               ; preds = %20
  %27 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %22, i64 0, i32 9, i32 0, i32 2
  %28 = load i8, i8* %27, align 8, !range !2
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %52, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %22, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 seq_cst, align 4
  %33 = icmp ne i32 %32, -1
  %34 = add i32 %32, %2
  %35 = icmp ult i32 %34, %1
  %36 = and i1 %33, %35
  br i1 %36, label %37, label %52

37:                                               ; preds = %30, %41
  %38 = phi i32 [ %42, %41 ], [ %32, %30 ]
  %39 = cmpxchg weak i32* %31, i32 %38, i32 -1 seq_cst seq_cst
  %40 = extractvalue { i32, i1 } %39, 1
  br i1 %40, label %47, label %41

41:                                               ; preds = %37
  %42 = extractvalue { i32, i1 } %39, 0
  %43 = icmp ne i32 %42, -1
  %44 = add i32 %42, %2
  %45 = icmp ult i32 %44, %1
  %46 = and i1 %43, %45
  br i1 %46, label %37, label %52

47:                                               ; preds = %37
  %48 = tail call { %class.VmaRawList*, %struct.VmaListItem* } @_ZN24VmaBlockMetadata_Generic17FreeSuballocationEN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorE(%class.VmaBlockMetadata_Generic* %0, %class.VmaRawList* %15, %struct.VmaListItem* %16)
  %49 = extractvalue { %class.VmaRawList*, %struct.VmaListItem* } %48, 0
  %50 = extractvalue { %class.VmaRawList*, %struct.VmaListItem* } %48, 1
  %51 = add i32 %14, 1
  br label %52

52:                                               ; preds = %41, %26, %30, %20, %12, %47
  %53 = phi %class.VmaRawList* [ %15, %12 ], [ %49, %47 ], [ %15, %26 ], [ %15, %20 ], [ %15, %30 ], [ %15, %41 ]
  %54 = phi %struct.VmaListItem* [ %16, %12 ], [ %50, %47 ], [ %16, %26 ], [ %16, %20 ], [ %16, %30 ], [ %16, %41 ]
  %55 = phi i32 [ %14, %12 ], [ %51, %47 ], [ %14, %26 ], [ %14, %20 ], [ %14, %30 ], [ %14, %41 ]
  %56 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %54, i64 0, i32 1
  %57 = bitcast %struct.VmaListItem** %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %10, label %12
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZN24VmaBlockMetadata_Generic15CheckCorruptionEPKv(%class.VmaBlockMetadata_Generic*, i8* nocapture readnone) unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 2
  br label %4

4:                                                ; preds = %4, %2
  %5 = phi %struct.VmaListItem** [ %3, %2 ], [ %8, %4 ]
  %6 = load %struct.VmaListItem*, %struct.VmaListItem** %5, align 8
  %7 = icmp eq %struct.VmaListItem* %6, null
  %8 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %6, i64 0, i32 1
  br i1 %7, label %9, label %4

9:                                                ; preds = %4
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24VmaBlockMetadata_Generic5AllocERK20VmaAllocationRequest20VmaSuballocationTypemP15VmaAllocation_T(%class.VmaBlockMetadata_Generic*, %struct.VmaAllocationRequest* nocapture readonly dereferenceable(64), i32, i64, %struct.VmaAllocation_T*) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %1, i64 0, i32 3, i32 1
  %7 = load %struct.VmaListItem*, %struct.VmaListItem** %6, align 8
  %8 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %1, i64 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %7, i64 0, i32 2, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %7, i64 0, i32 2, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %14, %12
  %16 = sub i64 %15, %3
  %17 = icmp ugt i64 %14, 15
  br i1 %17, label %18, label %70

18:                                               ; preds = %5
  %19 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4
  %20 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 1
  %21 = load %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %20, align 8
  %22 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %45, label %25

25:                                               ; preds = %18
  %26 = shl nuw i64 %23, 4
  %27 = ashr exact i64 %26, 4
  br label %28

28:                                               ; preds = %28, %25
  %29 = phi i64 [ 0, %25 ], [ %40, %28 ]
  %30 = phi i64 [ %27, %25 ], [ %39, %28 ]
  %31 = add i64 %30, %29
  %32 = lshr i64 %31, 1
  %33 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %21, i64 %32, i32 1
  %34 = load %struct.VmaListItem*, %struct.VmaListItem** %33, align 8
  %35 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %34, i64 0, i32 2, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = icmp ult i64 %36, %14
  %38 = add nuw i64 %32, 1
  %39 = select i1 %37, i64 %30, i64 %32
  %40 = select i1 %37, i64 %38, i64 %29
  %41 = icmp ult i64 %40, %39
  br i1 %41, label %28, label %42

42:                                               ; preds = %28
  %43 = shl i64 %40, 4
  %44 = ashr exact i64 %43, 4
  br label %45

45:                                               ; preds = %42, %18
  %46 = phi i64 [ 0, %18 ], [ %44, %42 ]
  %47 = icmp ult i64 %46, %23
  br i1 %47, label %48, label %70

48:                                               ; preds = %45, %67
  %49 = phi i64 [ %68, %67 ], [ %46, %45 ]
  %50 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %21, i64 %49, i32 1
  %51 = load %struct.VmaListItem*, %struct.VmaListItem** %50, align 8
  %52 = icmp eq %struct.VmaListItem* %51, %7
  br i1 %52, label %53, label %67

53:                                               ; preds = %48
  %54 = add i64 %23, -1
  %55 = icmp ugt i64 %54, %49
  br i1 %55, label %56, label %65

56:                                               ; preds = %53
  %57 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %21, i64 %49
  %58 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %57 to i8*
  %59 = add nuw i64 %49, 1
  %60 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %21, i64 %59
  %61 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %60 to i8*
  %62 = xor i64 %49, 1152921504606846975
  %63 = add i64 %62, %23
  %64 = shl i64 %63, 4
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %58, i8* align 8 %61, i64 %64, i1 false) #15
  br label %65

65:                                               ; preds = %56, %53
  tail call void @_ZN9VmaVectorIN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorES2_IS5_EE6resizeEmb(%class.VmaVector.18* %19, i64 %54, i1 zeroext false) #15
  %66 = load i64, i64* %8, align 8
  br label %70

67:                                               ; preds = %48
  %68 = add i64 %49, 1
  %69 = icmp eq i64 %68, %23
  br i1 %69, label %70, label %48

70:                                               ; preds = %67, %5, %45, %65
  %71 = phi i64 [ %9, %5 ], [ %9, %45 ], [ %66, %65 ], [ %9, %67 ]
  store i64 %71, i64* %10, align 8
  store i64 %3, i64* %13, align 8
  %72 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %7, i64 0, i32 2, i32 3
  store i32 %2, i32* %72, align 8
  %73 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %7, i64 0, i32 2, i32 2
  store %struct.VmaAllocation_T* %4, %struct.VmaAllocation_T** %73, align 8
  %74 = icmp eq i64 %16, 0
  br i1 %74, label %91, label %75

75:                                               ; preds = %70
  %76 = load i64, i64* %8, align 8
  %77 = add i64 %76, %3
  %78 = load %struct.VmaListItem*, %struct.VmaListItem** %6, align 8
  %79 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %78, i64 0, i32 1
  %80 = load %struct.VmaListItem*, %struct.VmaListItem** %79, align 8
  %81 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0
  %82 = tail call %struct.VmaListItem* @_ZN10VmaRawListI16VmaSuballocationE12InsertBeforeEP11VmaListItemIS0_E(%class.VmaRawList* %81, %struct.VmaListItem* %80) #15
  %83 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %82, i64 0, i32 2
  %84 = bitcast %struct.VmaSuballocation* %83 to i8*
  %85 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %82, i64 0, i32 2, i32 0
  store i64 %77, i64* %85, align 8
  %86 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %82, i64 0, i32 2, i32 1
  store i64 %16, i64* %86, align 8
  %87 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %82, i64 0, i32 2, i32 2
  store %struct.VmaAllocation_T* null, %struct.VmaAllocation_T** %87, align 8
  %88 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %82, i64 0, i32 2, i32 3
  store i32 0, i32* %88, align 8
  %89 = getelementptr inbounds i8, i8* %84, i64 28
  %90 = bitcast i8* %89 to i32*
  store i32 0, i32* %90, align 4
  tail call void @_ZN24VmaBlockMetadata_Generic25RegisterFreeSuballocationEN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorE(%class.VmaBlockMetadata_Generic* %0, %class.VmaRawList* %81, %struct.VmaListItem* %82)
  br label %91

91:                                               ; preds = %70, %75
  %92 = icmp eq i64 %12, 0
  br i1 %92, label %107, label %93

93:                                               ; preds = %91
  %94 = load i64, i64* %8, align 8
  %95 = sub i64 %94, %12
  %96 = load %struct.VmaListItem*, %struct.VmaListItem** %6, align 8
  %97 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0
  %98 = tail call %struct.VmaListItem* @_ZN10VmaRawListI16VmaSuballocationE12InsertBeforeEP11VmaListItemIS0_E(%class.VmaRawList* %97, %struct.VmaListItem* %96) #15
  %99 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %98, i64 0, i32 2
  %100 = bitcast %struct.VmaSuballocation* %99 to i8*
  %101 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %98, i64 0, i32 2, i32 0
  store i64 %95, i64* %101, align 8
  %102 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %98, i64 0, i32 2, i32 1
  store i64 %12, i64* %102, align 8
  %103 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %98, i64 0, i32 2, i32 2
  store %struct.VmaAllocation_T* null, %struct.VmaAllocation_T** %103, align 8
  %104 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %98, i64 0, i32 2, i32 3
  store i32 0, i32* %104, align 8
  %105 = getelementptr inbounds i8, i8* %100, i64 28
  %106 = bitcast i8* %105 to i32*
  store i32 0, i32* %106, align 4
  tail call void @_ZN24VmaBlockMetadata_Generic25RegisterFreeSuballocationEN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorE(%class.VmaBlockMetadata_Generic* %0, %class.VmaRawList* %97, %struct.VmaListItem* %98)
  br label %107

107:                                              ; preds = %91, %93
  %108 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 1
  %109 = load i32, i32* %108, align 8
  %110 = zext i1 %92 to i32
  %111 = sub i32 %109, %110
  %112 = xor i1 %74, true
  %113 = zext i1 %112 to i32
  %114 = add i32 %111, %113
  store i32 %114, i32* %108, align 8
  %115 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 2
  %116 = load i64, i64* %115, align 8
  %117 = sub i64 %116, %3
  store i64 %117, i64* %115, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24VmaBlockMetadata_Generic27UnregisterFreeSuballocationEN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorE(%class.VmaBlockMetadata_Generic*, %class.VmaRawList*, %struct.VmaListItem*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %2, i64 0, i32 2, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, 15
  br i1 %6, label %7, label %58

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4
  %9 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 1
  %10 = load %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %9, align 8
  %11 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %34, label %14

14:                                               ; preds = %7
  %15 = shl nuw i64 %12, 4
  %16 = ashr exact i64 %15, 4
  br label %17

17:                                               ; preds = %17, %14
  %18 = phi i64 [ 0, %14 ], [ %29, %17 ]
  %19 = phi i64 [ %16, %14 ], [ %28, %17 ]
  %20 = add i64 %19, %18
  %21 = lshr i64 %20, 1
  %22 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %10, i64 %21, i32 1
  %23 = load %struct.VmaListItem*, %struct.VmaListItem** %22, align 8
  %24 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %23, i64 0, i32 2, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = icmp ult i64 %25, %5
  %27 = add nuw i64 %21, 1
  %28 = select i1 %26, i64 %19, i64 %21
  %29 = select i1 %26, i64 %27, i64 %18
  %30 = icmp ult i64 %29, %28
  br i1 %30, label %17, label %31

31:                                               ; preds = %17
  %32 = shl i64 %29, 4
  %33 = ashr exact i64 %32, 4
  br label %34

34:                                               ; preds = %31, %7
  %35 = phi i64 [ 0, %7 ], [ %33, %31 ]
  %36 = icmp ult i64 %35, %12
  br i1 %36, label %37, label %58

37:                                               ; preds = %34, %55
  %38 = phi i64 [ %56, %55 ], [ %35, %34 ]
  %39 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %10, i64 %38, i32 1
  %40 = load %struct.VmaListItem*, %struct.VmaListItem** %39, align 8
  %41 = icmp eq %struct.VmaListItem* %40, %2
  br i1 %41, label %42, label %55

42:                                               ; preds = %37
  %43 = add i64 %12, -1
  %44 = icmp ugt i64 %43, %38
  br i1 %44, label %45, label %54

45:                                               ; preds = %42
  %46 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %10, i64 %38
  %47 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %46 to i8*
  %48 = add nuw i64 %38, 1
  %49 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %10, i64 %48
  %50 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %49 to i8*
  %51 = xor i64 %38, 1152921504606846975
  %52 = add i64 %51, %12
  %53 = shl i64 %52, 4
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %47, i8* align 8 %50, i64 %53, i1 false) #15
  br label %54

54:                                               ; preds = %42, %45
  tail call void @_ZN9VmaVectorIN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorES2_IS5_EE6resizeEmb(%class.VmaVector.18* %8, i64 %43, i1 zeroext false) #15
  br label %58

55:                                               ; preds = %37
  %56 = add i64 %38, 1
  %57 = icmp eq i64 %56, %12
  br i1 %57, label %58, label %37

58:                                               ; preds = %55, %34, %54, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24VmaBlockMetadata_Generic25RegisterFreeSuballocationEN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorE(%class.VmaBlockMetadata_Generic*, %class.VmaRawList*, %struct.VmaListItem*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %2, i64 0, i32 2, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, 15
  br i1 %6, label %7, label %56

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4
  %9 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 2
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %17

12:                                               ; preds = %7
  tail call void @_ZN9VmaVectorIN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorES2_IS5_EE6resizeEmb(%class.VmaVector.18* %8, i64 1, i1 zeroext false) #15
  %13 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 1
  %14 = load %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %13, align 8
  %15 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %14, i64 0, i32 0
  store %class.VmaRawList* %1, %class.VmaRawList** %15, align 8
  %16 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %14, i64 0, i32 1
  br label %54

17:                                               ; preds = %7
  %18 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 4, i32 1
  %19 = load %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %18, align 8
  %20 = shl nuw i64 %10, 4
  %21 = ashr exact i64 %20, 4
  br label %22

22:                                               ; preds = %22, %17
  %23 = phi i64 [ 0, %17 ], [ %34, %22 ]
  %24 = phi i64 [ %21, %17 ], [ %33, %22 ]
  %25 = add i64 %24, %23
  %26 = lshr i64 %25, 1
  %27 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %19, i64 %26, i32 1
  %28 = load %struct.VmaListItem*, %struct.VmaListItem** %27, align 8
  %29 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %28, i64 0, i32 2, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = icmp ult i64 %30, %5
  %32 = add nuw i64 %26, 1
  %33 = select i1 %31, i64 %24, i64 %26
  %34 = select i1 %31, i64 %32, i64 %23
  %35 = icmp ult i64 %34, %33
  br i1 %35, label %22, label %36

36:                                               ; preds = %22
  %37 = shl i64 %34, 4
  %38 = ashr exact i64 %37, 4
  %39 = add i64 %10, 1
  tail call void @_ZN9VmaVectorIN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorES2_IS5_EE6resizeEmb(%class.VmaVector.18* %8, i64 %39, i1 zeroext false) #15
  %40 = icmp ugt i64 %10, %38
  br i1 %40, label %41, label %50

41:                                               ; preds = %36
  %42 = load %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %18, align 8
  %43 = add nuw nsw i64 %38, 1
  %44 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %42, i64 %43
  %45 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %44 to i8*
  %46 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %42, i64 %38
  %47 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %46 to i8*
  %48 = sub i64 %10, %38
  %49 = shl i64 %48, 4
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %45, i8* align 8 %47, i64 %49, i1 false) #15
  br label %50

50:                                               ; preds = %36, %41
  %51 = load %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %18, align 8
  %52 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %51, i64 %38, i32 0
  store %class.VmaRawList* %1, %class.VmaRawList** %52, align 8
  %53 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %51, i64 %38, i32 1
  br label %54

54:                                               ; preds = %50, %12
  %55 = phi %struct.VmaListItem** [ %16, %12 ], [ %53, %50 ]
  store %struct.VmaListItem* %2, %struct.VmaListItem** %55, align 8
  br label %56

56:                                               ; preds = %54, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24VmaBlockMetadata_Generic4FreeEP15VmaAllocation_T(%class.VmaBlockMetadata_Generic*, %struct.VmaAllocation_T* readnone) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0
  %4 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 2
  %5 = load %struct.VmaListItem*, %struct.VmaListItem** %4, align 8
  %6 = icmp eq %struct.VmaListItem* %5, null
  br i1 %6, label %18, label %7

7:                                                ; preds = %2, %14
  %8 = phi %struct.VmaListItem* [ %16, %14 ], [ %5, %2 ]
  %9 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %8, i64 0, i32 2, i32 2
  %10 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %9, align 8
  %11 = icmp eq %struct.VmaAllocation_T* %10, %1
  br i1 %11, label %12, label %14

12:                                               ; preds = %7
  %13 = tail call { %class.VmaRawList*, %struct.VmaListItem* } @_ZN24VmaBlockMetadata_Generic17FreeSuballocationEN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorE(%class.VmaBlockMetadata_Generic* %0, %class.VmaRawList* %3, %struct.VmaListItem* nonnull %8)
  br label %18

14:                                               ; preds = %7
  %15 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %8, i64 0, i32 1
  %16 = load %struct.VmaListItem*, %struct.VmaListItem** %15, align 8
  %17 = icmp eq %struct.VmaListItem* %16, null
  br i1 %17, label %18, label %7

18:                                               ; preds = %14, %2, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24VmaBlockMetadata_Generic12FreeAtOffsetEm(%class.VmaBlockMetadata_Generic*, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0
  %4 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 2
  %5 = load %struct.VmaListItem*, %struct.VmaListItem** %4, align 8
  %6 = icmp eq %struct.VmaListItem* %5, null
  br i1 %6, label %18, label %7

7:                                                ; preds = %2, %14
  %8 = phi %struct.VmaListItem* [ %16, %14 ], [ %5, %2 ]
  %9 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %8, i64 0, i32 2, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %10, %1
  br i1 %11, label %12, label %14

12:                                               ; preds = %7
  %13 = tail call { %class.VmaRawList*, %struct.VmaListItem* } @_ZN24VmaBlockMetadata_Generic17FreeSuballocationEN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorE(%class.VmaBlockMetadata_Generic* %0, %class.VmaRawList* %3, %struct.VmaListItem* nonnull %8)
  br label %18

14:                                               ; preds = %7
  %15 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %8, i64 0, i32 1
  %16 = load %struct.VmaListItem*, %struct.VmaListItem** %15, align 8
  %17 = icmp eq %struct.VmaListItem* %16, null
  br i1 %17, label %18, label %7

18:                                               ; preds = %14, %2, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN24VmaBlockMetadata_Generic17MergeFreeWithNextEN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorE(%class.VmaBlockMetadata_Generic* nocapture, %class.VmaRawList*, %struct.VmaListItem*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %2, i64 0, i32 1
  %5 = bitcast %struct.VmaListItem** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = inttoptr i64 %6 to %struct.VmaListItem*
  %8 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %7, i64 0, i32 2, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %2, i64 0, i32 2, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %11, %9
  store i64 %12, i64* %10, align 8
  %13 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = add i32 %14, -1
  store i32 %15, i32* %13, align 8
  %16 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %7, i64 0, i32 0
  %17 = load %struct.VmaListItem*, %struct.VmaListItem** %16, align 8
  %18 = icmp eq %struct.VmaListItem* %17, null
  %19 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %7, i64 0, i32 1
  %20 = bitcast %struct.VmaListItem** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 2
  %23 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %17, i64 0, i32 1
  %24 = select i1 %18, %struct.VmaListItem** %22, %struct.VmaListItem** %23
  %25 = bitcast %struct.VmaListItem** %24 to i64*
  store i64 %21, i64* %25, align 8
  %26 = load %struct.VmaListItem*, %struct.VmaListItem** %19, align 8
  %27 = icmp eq %struct.VmaListItem* %26, null
  %28 = inttoptr i64 %6 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 3
  %31 = bitcast %struct.VmaListItem** %30 to i64*
  %32 = bitcast %struct.VmaListItem* %26 to i64*
  %33 = select i1 %27, i64* %31, i64* %32
  store i64 %29, i64* %33, align 8
  %34 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 1, i32 2, i32 2
  %35 = load i64, i64* %34, align 8
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %63, label %37

37:                                               ; preds = %3
  %38 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 1, i32 2, i32 1
  %39 = load %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"*, %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"** %38, align 8
  %40 = inttoptr i64 %6 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*
  br label %41

41:                                               ; preds = %61, %37
  %42 = phi i64 [ %35, %37 ], [ %43, %61 ]
  %43 = add i64 %42, -1
  %44 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %39, i64 %43, i32 0
  %45 = load %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %44, align 8
  %46 = icmp ugt %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %45, %40
  br i1 %46, label %61, label %47

47:                                               ; preds = %41
  %48 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %39, i64 %43, i32 1
  %49 = load i32, i32* %48, align 8
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %45, i64 %50
  %52 = icmp ugt %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %51, %40
  br i1 %52, label %53, label %61

53:                                               ; preds = %47
  %54 = ptrtoint %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %45 to i64
  %55 = sub i64 %6, %54
  %56 = sdiv exact i64 %55, 48
  %57 = trunc i64 %56 to i32
  %58 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %39, i64 %43, i32 2
  %59 = load i32, i32* %58, align 4
  %60 = inttoptr i64 %6 to i32*
  store i32 %59, i32* %60, align 8
  store i32 %57, i32* %58, align 4
  br label %63

61:                                               ; preds = %47, %41
  %62 = icmp eq i64 %43, 0
  br i1 %62, label %63, label %41

63:                                               ; preds = %61, %3, %53
  %64 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 4
  %65 = load i64, i64* %64, align 8
  %66 = add i64 %65, -1
  store i64 %66, i64* %64, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK24VmaBlockMetadata_Generic40IsBufferImageGranularityConflictPossibleEmR20VmaSuballocationType(%class.VmaBlockMetadata_Generic*, i64, i32* nocapture dereferenceable(4)) local_unnamed_addr #0 align 2 {
  %4 = icmp eq i64 %1, 1
  br i1 %4, label %55, label %5

5:                                                ; preds = %3
  %6 = bitcast %class.VmaBlockMetadata_Generic* %0 to i1 (%class.VmaBlockMetadata_Generic*)***
  %7 = load i1 (%class.VmaBlockMetadata_Generic*)**, i1 (%class.VmaBlockMetadata_Generic*)*** %6, align 8
  %8 = getelementptr inbounds i1 (%class.VmaBlockMetadata_Generic*)*, i1 (%class.VmaBlockMetadata_Generic*)** %7, i64 7
  %9 = load i1 (%class.VmaBlockMetadata_Generic*)*, i1 (%class.VmaBlockMetadata_Generic*)** %8, align 8
  %10 = tail call zeroext i1 %9(%class.VmaBlockMetadata_Generic* %0) #15
  br i1 %10, label %55, label %11

11:                                               ; preds = %5
  %12 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 2
  %13 = load %struct.VmaListItem*, %struct.VmaListItem** %12, align 8
  %14 = icmp eq %struct.VmaListItem* %13, null
  br i1 %14, label %15, label %22

15:                                               ; preds = %49, %11
  %16 = phi i64 [ -1, %11 ], [ %50, %49 ]
  %17 = phi i8 [ 0, %11 ], [ %51, %49 ]
  %18 = and i8 %17, 1
  %19 = icmp ne i8 %18, 0
  %20 = icmp uge i64 %16, %1
  %21 = or i1 %20, %19
  br label %55

22:                                               ; preds = %11, %49
  %23 = phi %struct.VmaListItem* [ %53, %49 ], [ %13, %11 ]
  %24 = phi i8 [ %51, %49 ], [ 0, %11 ]
  %25 = phi i64 [ %50, %49 ], [ -1, %11 ]
  %26 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %23, i64 0, i32 2, i32 3
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %49, label %29

29:                                               ; preds = %22
  %30 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %23, i64 0, i32 2, i32 2
  %31 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %30, align 8
  %32 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %31, i64 0, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = icmp ult i64 %33, %25
  %35 = select i1 %34, i64 %33, i64 %25
  %36 = load i32, i32* %2, align 4
  %37 = icmp sgt i32 %36, %27
  %38 = select i1 %37, i32 %27, i32 %36
  %39 = select i1 %37, i32 %36, i32 %27
  switch i32 %38, label %46 [
    i32 0, label %47
    i32 5, label %47
    i32 2, label %45
    i32 3, label %40
    i32 4, label %43
  ]

40:                                               ; preds = %29
  %41 = add i32 %39, -3
  %42 = icmp ult i32 %41, 3
  br i1 %42, label %46, label %47

43:                                               ; preds = %29
  %44 = icmp eq i32 %39, 5
  br i1 %44, label %46, label %47

45:                                               ; preds = %29
  switch i32 %39, label %47 [
    i32 5, label %46
    i32 3, label %46
  ]

46:                                               ; preds = %45, %45, %29, %40, %43
  br label %47

47:                                               ; preds = %45, %29, %29, %40, %43, %46
  %48 = phi i8 [ 1, %46 ], [ %24, %45 ], [ %24, %43 ], [ %24, %40 ], [ %24, %29 ], [ %24, %29 ]
  store i32 %27, i32* %2, align 4
  br label %49

49:                                               ; preds = %22, %47
  %50 = phi i64 [ %25, %22 ], [ %35, %47 ]
  %51 = phi i8 [ %24, %22 ], [ %48, %47 ]
  %52 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %23, i64 0, i32 1
  %53 = load %struct.VmaListItem*, %struct.VmaListItem** %52, align 8
  %54 = icmp eq %struct.VmaListItem* %53, null
  br i1 %54, label %15, label %22

55:                                               ; preds = %3, %5, %15
  %56 = phi i1 [ %21, %15 ], [ false, %5 ], [ false, %3 ]
  ret i1 %56
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23VmaBlockMetadata_LinearC2EP14VmaAllocator_T(%class.VmaBlockMetadata_Linear* nocapture, %struct.VmaAllocator_T*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV16VmaBlockMetadata, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 0, i32 1
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 0, i32 2
  %6 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 11
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  %9 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13
  %10 = select i1 %8, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %9
  store %struct.VkAllocationCallbacks* %10, %struct.VkAllocationCallbacks** %5, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV23VmaBlockMetadata_Linear, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %11 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 1
  store i64 0, i64* %11, align 8
  %12 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 2
  %13 = load i8, i8* %6, align 8, !range !2
  %14 = icmp eq i8 %13, 0
  %15 = ptrtoint %struct.VkAllocationCallbacks* %9 to i64
  %16 = select i1 %14, i64 0, i64 %15
  %17 = bitcast %class.VmaVector.21* %12 to i64*
  store i64 %16, i64* %17, align 8
  %18 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 2, i32 1
  %19 = bitcast %struct.VmaSuballocation** %18 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 24, i1 false) #15
  %20 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 3
  %21 = load i8, i8* %6, align 8, !range !2
  %22 = icmp eq i8 %21, 0
  %23 = select i1 %22, i64 0, i64 %15
  %24 = bitcast %class.VmaVector.21* %20 to i64*
  store i64 %23, i64* %24, align 8
  %25 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 3, i32 1
  %26 = bitcast %struct.VmaSuballocation** %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 56, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23VmaBlockMetadata_LinearD2Ev(%class.VmaBlockMetadata_Linear* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV23VmaBlockMetadata_Linear, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 3, i32 0, i32 0
  %4 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %3, align 8
  %5 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 3, i32 1
  %6 = bitcast %struct.VmaSuballocation** %5 to i8**
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq %struct.VkAllocationCallbacks* %4, null
  br i1 %8, label %16, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %4, i64 0, i32 3
  %11 = load void (i8*, i8*)*, void (i8*, i8*)** %10, align 8
  %12 = icmp eq void (i8*, i8*)* %11, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %4, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  tail call void %11(i8* %15, i8* %7) #15
  br label %17

16:                                               ; preds = %9, %1
  tail call void @free(i8* %7) #15
  br label %17

17:                                               ; preds = %13, %16
  %18 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 2, i32 0, i32 0
  %19 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %18, align 8
  %20 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 2, i32 1
  %21 = bitcast %struct.VmaSuballocation** %20 to i8**
  %22 = load i8*, i8** %21, align 8
  %23 = icmp eq %struct.VkAllocationCallbacks* %19, null
  br i1 %23, label %31, label %24

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %19, i64 0, i32 3
  %26 = load void (i8*, i8*)*, void (i8*, i8*)** %25, align 8
  %27 = icmp eq void (i8*, i8*)* %26, null
  br i1 %27, label %31, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %19, i64 0, i32 0
  %30 = load i8*, i8** %29, align 8
  tail call void %26(i8* %30, i8* %22) #15
  br label %32

31:                                               ; preds = %24, %17
  tail call void @free(i8* %22) #15
  br label %32

32:                                               ; preds = %28, %31
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23VmaBlockMetadata_LinearD0Ev(%class.VmaBlockMetadata_Linear*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV23VmaBlockMetadata_Linear, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 3, i32 0, i32 0
  %4 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %3, align 8
  %5 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 3, i32 1
  %6 = bitcast %struct.VmaSuballocation** %5 to i8**
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq %struct.VkAllocationCallbacks* %4, null
  br i1 %8, label %16, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %4, i64 0, i32 3
  %11 = load void (i8*, i8*)*, void (i8*, i8*)** %10, align 8
  %12 = icmp eq void (i8*, i8*)* %11, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %4, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  tail call void %11(i8* %15, i8* %7) #15
  br label %17

16:                                               ; preds = %9, %1
  tail call void @free(i8* %7) #15
  br label %17

17:                                               ; preds = %16, %13
  %18 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 2, i32 0, i32 0
  %19 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %18, align 8
  %20 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 2, i32 1
  %21 = bitcast %struct.VmaSuballocation** %20 to i8**
  %22 = load i8*, i8** %21, align 8
  %23 = icmp eq %struct.VkAllocationCallbacks* %19, null
  br i1 %23, label %31, label %24

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %19, i64 0, i32 3
  %26 = load void (i8*, i8*)*, void (i8*, i8*)** %25, align 8
  %27 = icmp eq void (i8*, i8*)* %26, null
  br i1 %27, label %31, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %19, i64 0, i32 0
  %30 = load i8*, i8** %29, align 8
  tail call void %26(i8* %30, i8* %22) #15
  br label %32

31:                                               ; preds = %24, %17
  tail call void @free(i8* %22) #15
  br label %32

32:                                               ; preds = %28, %31
  %33 = bitcast %class.VmaBlockMetadata_Linear* %0 to i8*
  tail call void @_ZdlPv(i8* %33) #17
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN23VmaBlockMetadata_Linear4InitEm(%class.VmaBlockMetadata_Linear* nocapture, i64) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 0, i32 1
  store i64 %1, i64* %3, align 8
  %4 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 1
  store i64 %1, i64* %4, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK23VmaBlockMetadata_Linear8ValidateEv(%class.VmaBlockMetadata_Linear* nocapture readonly) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  %5 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 3
  %6 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 2
  %7 = select i1 %4, %class.VmaVector.21* %6, %class.VmaVector.21* %5
  %8 = select i1 %4, %class.VmaVector.21* %5, %class.VmaVector.21* %6
  %9 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %8, i64 0, i32 2
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %10, 0
  %12 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 5
  %13 = load i32, i32* %12, align 4
  %14 = icmp ne i32 %13, 0
  %15 = xor i1 %11, %14
  br i1 %15, label %16, label %258

16:                                               ; preds = %1
  %17 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %7, i64 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %16
  br i1 %11, label %44, label %21

21:                                               ; preds = %20
  %22 = icmp eq i32 %13, 1
  br i1 %22, label %258, label %37

23:                                               ; preds = %16
  %24 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 6
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %7, i64 0, i32 1
  %27 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %26, align 8
  %28 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %27, i64 %25, i32 2
  %29 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %28, align 8
  %30 = icmp eq %struct.VmaAllocation_T* %29, null
  br i1 %30, label %258, label %31

31:                                               ; preds = %23
  %32 = add i64 %18, -1
  %33 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %27, i64 %32, i32 2
  %34 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %33, align 8
  %35 = icmp eq %struct.VmaAllocation_T* %34, null
  br i1 %35, label %258, label %36

36:                                               ; preds = %31
  br i1 %11, label %44, label %37

37:                                               ; preds = %21, %36
  %38 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %8, i64 0, i32 1
  %39 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %38, align 8
  %40 = add i64 %10, -1
  %41 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %39, i64 %40, i32 2
  %42 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %41, align 8
  %43 = icmp eq %struct.VmaAllocation_T* %42, null
  br i1 %43, label %258, label %44

44:                                               ; preds = %20, %37, %36
  %45 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 6
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 7
  %48 = load i64, i64* %47, align 8
  %49 = add i64 %48, %46
  %50 = icmp ugt i64 %49, %18
  br i1 %50, label %258, label %51

51:                                               ; preds = %44
  %52 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 8
  %53 = load i64, i64* %52, align 8
  %54 = icmp ugt i64 %53, %10
  br i1 %54, label %258, label %55

55:                                               ; preds = %51
  %56 = icmp eq i32 %13, 1
  br i1 %56, label %57, label %112

57:                                               ; preds = %55
  br i1 %11, label %107, label %58

58:                                               ; preds = %57
  %59 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %8, i64 0, i32 1
  %60 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %59, align 8
  br label %61

61:                                               ; preds = %100, %58
  %62 = phi i64 [ 0, %58 ], [ %105, %100 ]
  %63 = phi i64 [ 0, %58 ], [ %103, %100 ]
  %64 = phi i64 [ 0, %58 ], [ %104, %100 ]
  %65 = phi i64 [ 0, %58 ], [ %102, %100 ]
  %66 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %60, i64 %62, i32 3
  %67 = load i32, i32* %66, align 8
  %68 = icmp eq i32 %67, 0
  %69 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %60, i64 %62, i32 2
  %70 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %69, align 8
  %71 = icmp ne %struct.VmaAllocation_T* %70, null
  %72 = xor i1 %68, %71
  br i1 %72, label %73, label %258

73:                                               ; preds = %61
  %74 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %60, i64 %62, i32 0
  %75 = load i64, i64* %74, align 8
  %76 = icmp ult i64 %75, %64
  br i1 %76, label %258, label %77

77:                                               ; preds = %73
  br i1 %68, label %96, label %78

78:                                               ; preds = %77
  %79 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %70, i64 0, i32 5
  %80 = load i8, i8* %79, align 8
  %81 = icmp eq i8 %80, 1
  br i1 %81, label %82, label %85

82:                                               ; preds = %78
  %83 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %70, i64 0, i32 9, i32 0, i32 1
  %84 = load i64, i64* %83, align 8
  br label %85

85:                                               ; preds = %78, %82
  %86 = phi i64 [ %84, %82 ], [ 0, %78 ]
  %87 = icmp eq i64 %86, %75
  br i1 %87, label %88, label %258

88:                                               ; preds = %85
  %89 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %70, i64 0, i32 1
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %60, i64 %62, i32 1
  %92 = load i64, i64* %91, align 8
  %93 = icmp eq i64 %90, %92
  br i1 %93, label %94, label %258

94:                                               ; preds = %88
  %95 = add i64 %90, %65
  br label %100

96:                                               ; preds = %77
  %97 = add i64 %63, 1
  %98 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %60, i64 %62, i32 1
  %99 = load i64, i64* %98, align 8
  br label %100

100:                                              ; preds = %96, %94
  %101 = phi i64 [ %99, %96 ], [ %90, %94 ]
  %102 = phi i64 [ %65, %96 ], [ %95, %94 ]
  %103 = phi i64 [ %97, %96 ], [ %63, %94 ]
  %104 = add i64 %101, %75
  %105 = add nuw i64 %62, 1
  %106 = icmp eq i64 %105, %10
  br i1 %106, label %107, label %61

107:                                              ; preds = %100, %57
  %108 = phi i64 [ 0, %57 ], [ %102, %100 ]
  %109 = phi i64 [ 0, %57 ], [ %104, %100 ]
  %110 = phi i64 [ 0, %57 ], [ %103, %100 ]
  %111 = icmp eq i64 %110, %53
  br i1 %111, label %112, label %258

112:                                              ; preds = %107, %55
  %113 = phi i64 [ 0, %55 ], [ %108, %107 ]
  %114 = phi i64 [ 0, %55 ], [ %109, %107 ]
  %115 = icmp eq i64 %46, 0
  br i1 %115, label %121, label %116

116:                                              ; preds = %112
  %117 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %7, i64 0, i32 1
  %118 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %117, align 8
  br label %126

119:                                              ; preds = %131
  %120 = icmp eq i64 %135, %46
  br i1 %120, label %121, label %126

121:                                              ; preds = %119, %112
  %122 = icmp ult i64 %46, %18
  br i1 %122, label %123, label %185

123:                                              ; preds = %121
  %124 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %7, i64 0, i32 1
  %125 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %124, align 8
  br label %136

126:                                              ; preds = %119, %116
  %127 = phi i64 [ 0, %116 ], [ %135, %119 ]
  %128 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %118, i64 %127, i32 3
  %129 = load i32, i32* %128, align 8
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %258

131:                                              ; preds = %126
  %132 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %118, i64 %127, i32 2
  %133 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %132, align 8
  %134 = icmp eq %struct.VmaAllocation_T* %133, null
  %135 = add nuw i64 %127, 1
  br i1 %134, label %119, label %258

136:                                              ; preds = %178, %123
  %137 = phi i64 [ %46, %123 ], [ %183, %178 ]
  %138 = phi i64 [ %46, %123 ], [ %181, %178 ]
  %139 = phi i64 [ %114, %123 ], [ %182, %178 ]
  %140 = phi i64 [ %113, %123 ], [ %180, %178 ]
  %141 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %125, i64 %137, i32 3
  %142 = load i32, i32* %141, align 8
  %143 = icmp eq i32 %142, 0
  %144 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %125, i64 %137, i32 2
  %145 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %144, align 8
  %146 = icmp ne %struct.VmaAllocation_T* %145, null
  %147 = xor i1 %143, %146
  br i1 %147, label %148, label %258

148:                                              ; preds = %136
  %149 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %125, i64 %137, i32 0
  %150 = load i64, i64* %149, align 8
  %151 = icmp uge i64 %150, %139
  %152 = icmp uge i64 %137, %46
  %153 = or i1 %152, %143
  %154 = and i1 %153, %151
  br i1 %154, label %155, label %258

155:                                              ; preds = %148
  br i1 %143, label %174, label %156

156:                                              ; preds = %155
  %157 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %145, i64 0, i32 5
  %158 = load i8, i8* %157, align 8
  %159 = icmp eq i8 %158, 1
  br i1 %159, label %160, label %163

160:                                              ; preds = %156
  %161 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %145, i64 0, i32 9, i32 0, i32 1
  %162 = load i64, i64* %161, align 8
  br label %163

163:                                              ; preds = %156, %160
  %164 = phi i64 [ %162, %160 ], [ 0, %156 ]
  %165 = icmp eq i64 %164, %150
  br i1 %165, label %166, label %258

166:                                              ; preds = %163
  %167 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %145, i64 0, i32 1
  %168 = load i64, i64* %167, align 8
  %169 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %125, i64 %137, i32 1
  %170 = load i64, i64* %169, align 8
  %171 = icmp eq i64 %168, %170
  br i1 %171, label %172, label %258

172:                                              ; preds = %166
  %173 = add i64 %168, %140
  br label %178

174:                                              ; preds = %155
  %175 = add i64 %138, 1
  %176 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %125, i64 %137, i32 1
  %177 = load i64, i64* %176, align 8
  br label %178

178:                                              ; preds = %174, %172
  %179 = phi i64 [ %177, %174 ], [ %168, %172 ]
  %180 = phi i64 [ %140, %174 ], [ %173, %172 ]
  %181 = phi i64 [ %175, %174 ], [ %138, %172 ]
  %182 = add i64 %179, %150
  %183 = add i64 %137, 1
  %184 = icmp eq i64 %183, %18
  br i1 %184, label %185, label %136

185:                                              ; preds = %178, %121
  %186 = phi i64 [ %113, %121 ], [ %180, %178 ]
  %187 = phi i64 [ %114, %121 ], [ %182, %178 ]
  %188 = phi i64 [ %46, %121 ], [ %181, %178 ]
  %189 = icmp eq i64 %188, %49
  br i1 %189, label %190, label %258

190:                                              ; preds = %185
  %191 = icmp eq i32 %13, 2
  br i1 %191, label %192, label %247

192:                                              ; preds = %190
  br i1 %11, label %242, label %193

193:                                              ; preds = %192
  %194 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %8, i64 0, i32 1
  %195 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %194, align 8
  br label %196

196:                                              ; preds = %193, %236
  %197 = phi i64 [ %10, %193 ], [ %201, %236 ]
  %198 = phi i64 [ 0, %193 ], [ %239, %236 ]
  %199 = phi i64 [ %187, %193 ], [ %240, %236 ]
  %200 = phi i64 [ %186, %193 ], [ %238, %236 ]
  %201 = add i64 %197, -1
  %202 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %195, i64 %201, i32 3
  %203 = load i32, i32* %202, align 8
  %204 = icmp eq i32 %203, 0
  %205 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %195, i64 %201, i32 2
  %206 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %205, align 8
  %207 = icmp ne %struct.VmaAllocation_T* %206, null
  %208 = xor i1 %204, %207
  br i1 %208, label %209, label %258

209:                                              ; preds = %196
  %210 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %195, i64 %201, i32 0
  %211 = load i64, i64* %210, align 8
  %212 = icmp ult i64 %211, %199
  br i1 %212, label %258, label %213

213:                                              ; preds = %209
  br i1 %204, label %232, label %214

214:                                              ; preds = %213
  %215 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %206, i64 0, i32 5
  %216 = load i8, i8* %215, align 8
  %217 = icmp eq i8 %216, 1
  br i1 %217, label %218, label %221

218:                                              ; preds = %214
  %219 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %206, i64 0, i32 9, i32 0, i32 1
  %220 = load i64, i64* %219, align 8
  br label %221

221:                                              ; preds = %214, %218
  %222 = phi i64 [ %220, %218 ], [ 0, %214 ]
  %223 = icmp eq i64 %222, %211
  br i1 %223, label %224, label %258

224:                                              ; preds = %221
  %225 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %206, i64 0, i32 1
  %226 = load i64, i64* %225, align 8
  %227 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %195, i64 %201, i32 1
  %228 = load i64, i64* %227, align 8
  %229 = icmp eq i64 %226, %228
  br i1 %229, label %230, label %258

230:                                              ; preds = %224
  %231 = add i64 %226, %200
  br label %236

232:                                              ; preds = %213
  %233 = add i64 %198, 1
  %234 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %195, i64 %201, i32 1
  %235 = load i64, i64* %234, align 8
  br label %236

236:                                              ; preds = %230, %232
  %237 = phi i64 [ %235, %232 ], [ %226, %230 ]
  %238 = phi i64 [ %200, %232 ], [ %231, %230 ]
  %239 = phi i64 [ %233, %232 ], [ %198, %230 ]
  %240 = add i64 %237, %211
  %241 = icmp eq i64 %201, 0
  br i1 %241, label %242, label %196

242:                                              ; preds = %236, %192
  %243 = phi i64 [ %186, %192 ], [ %238, %236 ]
  %244 = phi i64 [ %187, %192 ], [ %240, %236 ]
  %245 = phi i64 [ 0, %192 ], [ %239, %236 ]
  %246 = icmp eq i64 %245, %53
  br i1 %246, label %247, label %258

247:                                              ; preds = %242, %190
  %248 = phi i64 [ %186, %190 ], [ %243, %242 ]
  %249 = phi i64 [ %187, %190 ], [ %244, %242 ]
  %250 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 0, i32 1
  %251 = load i64, i64* %250, align 8
  %252 = icmp ugt i64 %249, %251
  br i1 %252, label %258, label %253

253:                                              ; preds = %247
  %254 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 1
  %255 = load i64, i64* %254, align 8
  %256 = sub i64 %251, %248
  %257 = icmp eq i64 %255, %256
  br label %258

258:                                              ; preds = %88, %85, %73, %61, %131, %126, %148, %166, %163, %136, %224, %221, %209, %196, %242, %107, %253, %247, %185, %51, %44, %37, %31, %23, %21, %1
  %259 = phi i1 [ false, %1 ], [ false, %21 ], [ false, %23 ], [ false, %31 ], [ false, %37 ], [ false, %44 ], [ false, %51 ], [ false, %185 ], [ false, %247 ], [ %257, %253 ], [ false, %107 ], [ false, %242 ], [ false, %196 ], [ false, %209 ], [ false, %221 ], [ false, %224 ], [ false, %136 ], [ false, %163 ], [ false, %166 ], [ false, %148 ], [ false, %126 ], [ false, %131 ], [ false, %61 ], [ false, %73 ], [ false, %85 ], [ false, %88 ]
  ret i1 %259
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK23VmaBlockMetadata_Linear18GetAllocationCountEv(%class.VmaBlockMetadata_Linear* nocapture readonly) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  %5 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 3
  %6 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 2
  %7 = select i1 %4, %class.VmaVector.21* %6, %class.VmaVector.21* %5
  %8 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %7, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 6
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 7
  %13 = load i64, i64* %12, align 8
  %14 = select i1 %4, %class.VmaVector.21* %5, %class.VmaVector.21* %6
  %15 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %14, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 8
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %9, %11
  %20 = sub i64 %19, %13
  %21 = add i64 %20, %16
  %22 = sub i64 %21, %18
  ret i64 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK23VmaBlockMetadata_Linear21GetUnusedRangeSizeMaxEv(%class.VmaBlockMetadata_Linear*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 0, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = bitcast %class.VmaBlockMetadata_Linear* %0 to i1 (%class.VmaBlockMetadata_Linear*)***
  %5 = load i1 (%class.VmaBlockMetadata_Linear*)**, i1 (%class.VmaBlockMetadata_Linear*)*** %4, align 8
  %6 = getelementptr inbounds i1 (%class.VmaBlockMetadata_Linear*)*, i1 (%class.VmaBlockMetadata_Linear*)** %5, i64 7
  %7 = load i1 (%class.VmaBlockMetadata_Linear*)*, i1 (%class.VmaBlockMetadata_Linear*)** %6, align 8
  %8 = tail call zeroext i1 %7(%class.VmaBlockMetadata_Linear* %0) #15
  br i1 %8, label %75, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 4
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  %13 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 3
  %14 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 2
  %15 = select i1 %12, %class.VmaVector.21* %14, %class.VmaVector.21* %13
  %16 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 5
  %17 = load i32, i32* %16, align 4
  switch i32 %17, label %75 [
    i32 0, label %18
    i32 1, label %36
    i32 2, label %55
  ]

18:                                               ; preds = %9
  %19 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %15, i64 0, i32 2
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 6
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %15, i64 0, i32 1
  %24 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %23, align 8
  %25 = add i64 %20, -1
  %26 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %24, i64 %22, i32 0
  %27 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %24, i64 %25, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %24, i64 %25, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = sub i64 %3, %28
  %32 = sub i64 %31, %30
  %33 = load i64, i64* %26, align 8
  %34 = icmp ult i64 %33, %32
  %35 = select i1 %34, i64 %32, i64 %33
  br label %75

36:                                               ; preds = %9
  %37 = select i1 %12, %class.VmaVector.21* %13, %class.VmaVector.21* %14
  %38 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %37, i64 0, i32 1
  %39 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %38, align 8
  %40 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %37, i64 0, i32 2
  %41 = load i64, i64* %40, align 8
  %42 = add i64 %41, -1
  %43 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 6
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %15, i64 0, i32 1
  %46 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %45, align 8
  %47 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %46, i64 %44, i32 0
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %39, i64 %42, i32 0
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %39, i64 %42, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %48, %50
  %54 = sub i64 %53, %52
  br label %75

55:                                               ; preds = %9
  %56 = select i1 %12, %class.VmaVector.21* %13, %class.VmaVector.21* %14
  %57 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %56, i64 0, i32 1
  %58 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %57, align 8
  %59 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %56, i64 0, i32 2
  %60 = load i64, i64* %59, align 8
  %61 = add i64 %60, -1
  %62 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %15, i64 0, i32 1
  %63 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %62, align 8
  %64 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %15, i64 0, i32 2
  %65 = load i64, i64* %64, align 8
  %66 = add i64 %65, -1
  %67 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %58, i64 %61, i32 0
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %63, i64 %66, i32 0
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %63, i64 %66, i32 1
  %72 = load i64, i64* %71, align 8
  %73 = sub i64 %68, %70
  %74 = sub i64 %73, %72
  br label %75

75:                                               ; preds = %18, %36, %55, %9, %1
  %76 = phi i64 [ %3, %1 ], [ %74, %55 ], [ %54, %36 ], [ %35, %18 ], [ 0, %9 ]
  ret i64 %76
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK23VmaBlockMetadata_Linear22CalcAllocationStatInfoER11VmaStatInfo(%class.VmaBlockMetadata_Linear*, %struct.VmaStatInfo* nocapture dereferenceable(80)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 4
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  %8 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 3
  %9 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 2
  %10 = select i1 %7, %class.VmaVector.21* %9, %class.VmaVector.21* %8
  %11 = select i1 %7, %class.VmaVector.21* %8, %class.VmaVector.21* %9
  %12 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %10, i64 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %11, i64 0, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 0
  store i32 1, i32* %16, align 8
  %17 = bitcast %class.VmaBlockMetadata_Linear* %0 to i64 (%class.VmaBlockMetadata_Linear*)***
  %18 = load i64 (%class.VmaBlockMetadata_Linear*)**, i64 (%class.VmaBlockMetadata_Linear*)*** %17, align 8
  %19 = getelementptr inbounds i64 (%class.VmaBlockMetadata_Linear*)*, i64 (%class.VmaBlockMetadata_Linear*)** %18, i64 4
  %20 = load i64 (%class.VmaBlockMetadata_Linear*)*, i64 (%class.VmaBlockMetadata_Linear*)** %19, align 8
  %21 = tail call i64 %20(%class.VmaBlockMetadata_Linear* %0) #15
  %22 = trunc i64 %21 to i32
  %23 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 1
  store i32 %22, i32* %23, align 4
  %24 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 2
  store i32 0, i32* %24, align 8
  %25 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 3
  store i64 0, i64* %25, align 8
  %26 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 5
  store i64 -1, i64* %26, align 8
  %27 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 7
  %28 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 8
  %29 = bitcast i64* %27 to <2 x i64>*
  store <2 x i64> <i64 0, i64 -1>, <2 x i64>* %29, align 8
  %30 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 10
  store i64 0, i64* %30, align 8
  %31 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 5
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %117

34:                                               ; preds = %2
  %35 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 6
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %10, i64 0, i32 1
  %38 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %37, align 8
  %39 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %38, i64 %36, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %45

42:                                               ; preds = %34
  %43 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 6
  %44 = load i64, i64* %43, align 8
  br label %136

45:                                               ; preds = %34
  %46 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %11, i64 0, i32 1
  %47 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 4
  br label %48

48:                                               ; preds = %45, %90
  %49 = phi i64 [ 0, %45 ], [ %102, %90 ]
  %50 = phi i64 [ -1, %45 ], [ %99, %90 ]
  %51 = phi i64 [ 0, %45 ], [ %96, %90 ]
  %52 = phi i64 [ 0, %45 ], [ %91, %90 ]
  %53 = phi i64 [ -1, %45 ], [ %92, %90 ]
  %54 = phi i32 [ 0, %45 ], [ %93, %90 ]
  %55 = phi i64 [ 0, %45 ], [ %106, %90 ]
  %56 = phi i64 [ 0, %45 ], [ %105, %90 ]
  %57 = icmp ult i64 %55, %15
  br i1 %57, label %58, label %81

58:                                               ; preds = %48
  %59 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %46, align 8
  br label %60

60:                                               ; preds = %65, %58
  %61 = phi i64 [ %55, %58 ], [ %66, %65 ]
  %62 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %59, i64 %61, i32 2
  %63 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %62, align 8
  %64 = icmp eq %struct.VmaAllocation_T* %63, null
  br i1 %64, label %65, label %68

65:                                               ; preds = %60
  %66 = add i64 %61, 1
  %67 = icmp eq i64 %66, %15
  br i1 %67, label %81, label %60

68:                                               ; preds = %60
  %69 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %59, i64 %61, i32 0
  %70 = load i64, i64* %69, align 8
  %71 = icmp ugt i64 %70, %56
  br i1 %71, label %72, label %90

72:                                               ; preds = %68
  %73 = sub i64 %70, %56
  %74 = add i32 %54, 1
  store i32 %74, i32* %24, align 8
  %75 = load i64, i64* %47, align 8
  %76 = add i64 %75, %73
  store i64 %76, i64* %47, align 8
  %77 = icmp ult i64 %73, %53
  %78 = select i1 %77, i64 %73, i64 %53
  store i64 %78, i64* %28, align 8
  %79 = icmp ult i64 %73, %52
  %80 = select i1 %79, i64 %73, i64 %52
  store i64 %80, i64* %30, align 8
  br label %90

81:                                               ; preds = %48, %65
  %82 = sub i64 %40, %56
  %83 = add i32 %54, 1
  store i32 %83, i32* %24, align 8
  %84 = load i64, i64* %47, align 8
  %85 = add i64 %84, %82
  store i64 %85, i64* %47, align 8
  %86 = icmp ult i64 %82, %53
  %87 = select i1 %86, i64 %82, i64 %53
  store i64 %87, i64* %28, align 8
  %88 = icmp ult i64 %82, %52
  %89 = select i1 %88, i64 %82, i64 %52
  store i64 %89, i64* %30, align 8
  br label %108

90:                                               ; preds = %68, %72
  %91 = phi i64 [ %80, %72 ], [ %52, %68 ]
  %92 = phi i64 [ %78, %72 ], [ %53, %68 ]
  %93 = phi i32 [ %74, %72 ], [ %54, %68 ]
  %94 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %59, i64 %61, i32 1
  %95 = load i64, i64* %94, align 8
  %96 = add i64 %51, %95
  store i64 %96, i64* %25, align 8
  %97 = load i64, i64* %94, align 8
  %98 = icmp ult i64 %97, %50
  %99 = select i1 %98, i64 %97, i64 %50
  store i64 %99, i64* %26, align 8
  %100 = load i64, i64* %94, align 8
  %101 = icmp ult i64 %100, %49
  %102 = select i1 %101, i64 %100, i64 %49
  store i64 %102, i64* %27, align 8
  %103 = load i64, i64* %69, align 8
  %104 = load i64, i64* %94, align 8
  %105 = add i64 %104, %103
  %106 = add nuw i64 %61, 1
  %107 = icmp ugt i64 %40, %105
  br i1 %107, label %48, label %108

108:                                              ; preds = %90, %81
  %109 = phi i64 [ %40, %81 ], [ %105, %90 ]
  %110 = phi i32 [ %83, %81 ], [ %93, %90 ]
  %111 = phi i64 [ %87, %81 ], [ %92, %90 ]
  %112 = phi i64 [ %89, %81 ], [ %91, %90 ]
  %113 = phi i64 [ %51, %81 ], [ %96, %90 ]
  %114 = phi i64 [ %50, %81 ], [ %99, %90 ]
  %115 = phi i64 [ %49, %81 ], [ %102, %90 ]
  %116 = load i32, i32* %31, align 4
  br label %117

117:                                              ; preds = %108, %2
  %118 = phi i64 [ 0, %2 ], [ %115, %108 ]
  %119 = phi i64 [ -1, %2 ], [ %114, %108 ]
  %120 = phi i64 [ 0, %2 ], [ %113, %108 ]
  %121 = phi i64 [ 0, %2 ], [ %112, %108 ]
  %122 = phi i64 [ -1, %2 ], [ %111, %108 ]
  %123 = phi i32 [ 0, %2 ], [ %110, %108 ]
  %124 = phi i32 [ %32, %2 ], [ %116, %108 ]
  %125 = phi i64 [ 0, %2 ], [ %109, %108 ]
  %126 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 6
  %127 = load i64, i64* %126, align 8
  %128 = icmp eq i32 %124, 2
  br i1 %128, label %129, label %136

129:                                              ; preds = %117
  %130 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %11, i64 0, i32 1
  %131 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %130, align 8
  %132 = load i64, i64* %14, align 8
  %133 = add i64 %132, -1
  %134 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %131, i64 %133, i32 0
  %135 = load i64, i64* %134, align 8
  br label %136

136:                                              ; preds = %42, %117, %129
  %137 = phi i64 [ %127, %129 ], [ %127, %117 ], [ %44, %42 ]
  %138 = phi i64 [ %125, %129 ], [ %125, %117 ], [ 0, %42 ]
  %139 = phi i32 [ 2, %129 ], [ %124, %117 ], [ 1, %42 ]
  %140 = phi i32 [ %123, %129 ], [ %123, %117 ], [ 0, %42 ]
  %141 = phi i64 [ %122, %129 ], [ %122, %117 ], [ -1, %42 ]
  %142 = phi i64 [ %121, %129 ], [ %121, %117 ], [ 0, %42 ]
  %143 = phi i64 [ %120, %129 ], [ %120, %117 ], [ 0, %42 ]
  %144 = phi i64 [ %119, %129 ], [ %119, %117 ], [ -1, %42 ]
  %145 = phi i64 [ %118, %129 ], [ %118, %117 ], [ 0, %42 ]
  %146 = phi i64 [ %135, %129 ], [ %4, %117 ], [ %4, %42 ]
  %147 = icmp ugt i64 %146, %138
  br i1 %147, label %148, label %223

148:                                              ; preds = %136
  %149 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %10, i64 0, i32 1
  %150 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 4
  br label %151

151:                                              ; preds = %148, %211
  %152 = phi i64 [ %145, %148 ], [ %212, %211 ]
  %153 = phi i64 [ %144, %148 ], [ %213, %211 ]
  %154 = phi i64 [ %143, %148 ], [ %214, %211 ]
  %155 = phi i64 [ %142, %148 ], [ %215, %211 ]
  %156 = phi i64 [ %141, %148 ], [ %216, %211 ]
  %157 = phi i32 [ %140, %148 ], [ %217, %211 ]
  %158 = phi i64 [ %137, %148 ], [ %219, %211 ]
  %159 = phi i64 [ %138, %148 ], [ %218, %211 ]
  %160 = icmp ult i64 %158, %13
  br i1 %160, label %161, label %201

161:                                              ; preds = %151
  %162 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %149, align 8
  br label %163

163:                                              ; preds = %168, %161
  %164 = phi i64 [ %158, %161 ], [ %169, %168 ]
  %165 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %162, i64 %164, i32 2
  %166 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %165, align 8
  %167 = icmp eq %struct.VmaAllocation_T* %166, null
  br i1 %167, label %168, label %171

168:                                              ; preds = %163
  %169 = add i64 %164, 1
  %170 = icmp eq i64 %169, %13
  br i1 %170, label %201, label %163

171:                                              ; preds = %163
  %172 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %162, i64 %164, i32 0
  %173 = load i64, i64* %172, align 8
  %174 = icmp ugt i64 %173, %159
  br i1 %174, label %175, label %184

175:                                              ; preds = %171
  %176 = sub i64 %173, %159
  %177 = add i32 %157, 1
  store i32 %177, i32* %24, align 8
  %178 = load i64, i64* %150, align 8
  %179 = add i64 %178, %176
  store i64 %179, i64* %150, align 8
  %180 = icmp ult i64 %176, %156
  %181 = select i1 %180, i64 %176, i64 %156
  store i64 %181, i64* %28, align 8
  %182 = icmp ult i64 %176, %155
  %183 = select i1 %182, i64 %176, i64 %155
  store i64 %183, i64* %30, align 8
  br label %184

184:                                              ; preds = %175, %171
  %185 = phi i64 [ %183, %175 ], [ %155, %171 ]
  %186 = phi i64 [ %181, %175 ], [ %156, %171 ]
  %187 = phi i32 [ %177, %175 ], [ %157, %171 ]
  %188 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %162, i64 %164, i32 1
  %189 = load i64, i64* %188, align 8
  %190 = add i64 %154, %189
  store i64 %190, i64* %25, align 8
  %191 = load i64, i64* %188, align 8
  %192 = icmp ult i64 %191, %153
  %193 = select i1 %192, i64 %191, i64 %153
  store i64 %193, i64* %26, align 8
  %194 = load i64, i64* %188, align 8
  %195 = icmp ult i64 %194, %152
  %196 = select i1 %195, i64 %194, i64 %152
  store i64 %196, i64* %27, align 8
  %197 = load i64, i64* %172, align 8
  %198 = load i64, i64* %188, align 8
  %199 = add i64 %198, %197
  %200 = add nuw i64 %164, 1
  br label %211

201:                                              ; preds = %168, %151
  %202 = phi i64 [ %158, %151 ], [ %13, %168 ]
  %203 = sub i64 %146, %159
  %204 = add i32 %157, 1
  store i32 %204, i32* %24, align 8
  %205 = load i64, i64* %150, align 8
  %206 = add i64 %205, %203
  store i64 %206, i64* %150, align 8
  %207 = icmp ult i64 %203, %156
  %208 = select i1 %207, i64 %203, i64 %156
  store i64 %208, i64* %28, align 8
  %209 = icmp ult i64 %203, %155
  %210 = select i1 %209, i64 %203, i64 %155
  store i64 %210, i64* %30, align 8
  br label %211

211:                                              ; preds = %201, %184
  %212 = phi i64 [ %196, %184 ], [ %152, %201 ]
  %213 = phi i64 [ %193, %184 ], [ %153, %201 ]
  %214 = phi i64 [ %190, %184 ], [ %154, %201 ]
  %215 = phi i64 [ %185, %184 ], [ %210, %201 ]
  %216 = phi i64 [ %186, %184 ], [ %208, %201 ]
  %217 = phi i32 [ %187, %184 ], [ %204, %201 ]
  %218 = phi i64 [ %199, %184 ], [ %146, %201 ]
  %219 = phi i64 [ %200, %184 ], [ %202, %201 ]
  %220 = icmp ugt i64 %146, %218
  br i1 %220, label %151, label %221

221:                                              ; preds = %211
  %222 = load i32, i32* %31, align 4
  br label %223

223:                                              ; preds = %221, %136
  %224 = phi i64 [ %145, %136 ], [ %212, %221 ]
  %225 = phi i64 [ %144, %136 ], [ %213, %221 ]
  %226 = phi i64 [ %143, %136 ], [ %214, %221 ]
  %227 = phi i64 [ %142, %136 ], [ %215, %221 ]
  %228 = phi i64 [ %141, %136 ], [ %216, %221 ]
  %229 = phi i32 [ %140, %136 ], [ %217, %221 ]
  %230 = phi i32 [ %139, %136 ], [ %222, %221 ]
  %231 = phi i64 [ %138, %136 ], [ %218, %221 ]
  %232 = icmp eq i32 %230, 2
  %233 = icmp ugt i64 %4, %231
  %234 = and i1 %232, %233
  br i1 %234, label %235, label %298

235:                                              ; preds = %223
  %236 = load i64, i64* %14, align 8
  %237 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %11, i64 0, i32 1
  %238 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 4
  br label %239

239:                                              ; preds = %235, %281
  %240 = phi i64 [ %224, %235 ], [ %293, %281 ]
  %241 = phi i64 [ %225, %235 ], [ %290, %281 ]
  %242 = phi i64 [ %226, %235 ], [ %287, %281 ]
  %243 = phi i64 [ %227, %235 ], [ %282, %281 ]
  %244 = phi i64 [ %228, %235 ], [ %283, %281 ]
  %245 = phi i32 [ %229, %235 ], [ %284, %281 ]
  %246 = phi i64 [ %236, %235 ], [ %253, %281 ]
  %247 = phi i64 [ %231, %235 ], [ %296, %281 ]
  %248 = icmp eq i64 %246, 0
  br i1 %248, label %272, label %249

249:                                              ; preds = %239
  %250 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %237, align 8
  br label %251

251:                                              ; preds = %249, %257
  %252 = phi i64 [ %246, %249 ], [ %253, %257 ]
  %253 = add i64 %252, -1
  %254 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %250, i64 %253, i32 2
  %255 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %254, align 8
  %256 = icmp eq %struct.VmaAllocation_T* %255, null
  br i1 %256, label %257, label %259

257:                                              ; preds = %251
  %258 = icmp eq i64 %253, 0
  br i1 %258, label %272, label %251

259:                                              ; preds = %251
  %260 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %250, i64 %253, i32 0
  %261 = load i64, i64* %260, align 8
  %262 = icmp ugt i64 %261, %247
  br i1 %262, label %263, label %281

263:                                              ; preds = %259
  %264 = sub i64 %261, %247
  %265 = add i32 %245, 1
  store i32 %265, i32* %24, align 8
  %266 = load i64, i64* %238, align 8
  %267 = add i64 %266, %264
  store i64 %267, i64* %238, align 8
  %268 = icmp ult i64 %264, %244
  %269 = select i1 %268, i64 %264, i64 %244
  store i64 %269, i64* %28, align 8
  %270 = icmp ult i64 %264, %243
  %271 = select i1 %270, i64 %264, i64 %243
  store i64 %271, i64* %30, align 8
  br label %281

272:                                              ; preds = %239, %257
  %273 = sub i64 %4, %247
  %274 = add i32 %245, 1
  store i32 %274, i32* %24, align 8
  %275 = load i64, i64* %238, align 8
  %276 = add i64 %275, %273
  store i64 %276, i64* %238, align 8
  %277 = icmp ult i64 %273, %244
  %278 = select i1 %277, i64 %273, i64 %244
  store i64 %278, i64* %28, align 8
  %279 = icmp ult i64 %273, %243
  %280 = select i1 %279, i64 %273, i64 %243
  store i64 %280, i64* %30, align 8
  br label %298

281:                                              ; preds = %259, %263
  %282 = phi i64 [ %271, %263 ], [ %243, %259 ]
  %283 = phi i64 [ %269, %263 ], [ %244, %259 ]
  %284 = phi i32 [ %265, %263 ], [ %245, %259 ]
  %285 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %250, i64 %253, i32 1
  %286 = load i64, i64* %285, align 8
  %287 = add i64 %242, %286
  store i64 %287, i64* %25, align 8
  %288 = load i64, i64* %285, align 8
  %289 = icmp ult i64 %288, %241
  %290 = select i1 %289, i64 %288, i64 %241
  store i64 %290, i64* %26, align 8
  %291 = load i64, i64* %285, align 8
  %292 = icmp ult i64 %291, %240
  %293 = select i1 %292, i64 %291, i64 %240
  store i64 %293, i64* %27, align 8
  %294 = load i64, i64* %260, align 8
  %295 = load i64, i64* %285, align 8
  %296 = add i64 %295, %294
  %297 = icmp ugt i64 %4, %296
  br i1 %297, label %239, label %298

298:                                              ; preds = %281, %272, %223
  %299 = phi i64 [ %226, %223 ], [ %242, %272 ], [ %287, %281 ]
  %300 = sub i64 %4, %299
  %301 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 4
  store i64 %300, i64* %301, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK23VmaBlockMetadata_Linear12AddPoolStatsER12VmaPoolStats(%class.VmaBlockMetadata_Linear* nocapture readonly, %struct.VmaPoolStats* dereferenceable(48)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  %6 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 3
  %7 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 2
  %8 = select i1 %5, %class.VmaVector.21* %7, %class.VmaVector.21* %6
  %9 = select i1 %5, %class.VmaVector.21* %6, %class.VmaVector.21* %7
  %10 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %8, i64 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %9, i64 0, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %17, %11
  store i64 %18, i64* %16, align 8
  %19 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 5
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 1
  br i1 %21, label %22, label %87

22:                                               ; preds = %2
  %23 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 6
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %8, i64 0, i32 1
  %26 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %25, align 8
  %27 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %26, i64 %24, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %30, label %33

30:                                               ; preds = %22
  %31 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 6
  %32 = load i64, i64* %31, align 8
  br label %100

33:                                               ; preds = %22
  %34 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %9, i64 0, i32 1
  %35 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 1
  %36 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 3
  %37 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 4
  %38 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 2
  br label %39

39:                                               ; preds = %33, %75
  %40 = phi i64 [ %24, %33 ], [ %82, %75 ]
  %41 = phi i64 [ 0, %33 ], [ %81, %75 ]
  %42 = icmp ult i64 %40, %15
  br i1 %42, label %43, label %66

43:                                               ; preds = %39
  %44 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %34, align 8
  br label %45

45:                                               ; preds = %50, %43
  %46 = phi i64 [ %40, %43 ], [ %51, %50 ]
  %47 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %44, i64 %46, i32 2
  %48 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %47, align 8
  %49 = icmp eq %struct.VmaAllocation_T* %48, null
  br i1 %49, label %50, label %53

50:                                               ; preds = %45
  %51 = add i64 %46, 1
  %52 = icmp eq i64 %51, %15
  br i1 %52, label %66, label %45

53:                                               ; preds = %45
  %54 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %44, i64 %46, i32 0
  %55 = load i64, i64* %54, align 8
  %56 = icmp ugt i64 %55, %41
  br i1 %56, label %57, label %75

57:                                               ; preds = %53
  %58 = sub i64 %55, %41
  %59 = load i64, i64* %35, align 8
  %60 = add i64 %59, %58
  store i64 %60, i64* %35, align 8
  %61 = load i64, i64* %36, align 8
  %62 = add i64 %61, 1
  store i64 %62, i64* %36, align 8
  %63 = load i64, i64* %37, align 8
  %64 = icmp ult i64 %63, %58
  %65 = select i1 %64, i64 %58, i64 %63
  store i64 %65, i64* %37, align 8
  br label %75

66:                                               ; preds = %39, %50
  %67 = sub i64 %28, %41
  %68 = load i64, i64* %35, align 8
  %69 = add i64 %68, %67
  store i64 %69, i64* %35, align 8
  %70 = load i64, i64* %36, align 8
  %71 = add i64 %70, 1
  store i64 %71, i64* %36, align 8
  %72 = load i64, i64* %37, align 8
  %73 = icmp ult i64 %72, %67
  %74 = select i1 %73, i64 %67, i64 %72
  store i64 %74, i64* %37, align 8
  br label %84

75:                                               ; preds = %53, %57
  %76 = load i64, i64* %38, align 8
  %77 = add i64 %76, 1
  store i64 %77, i64* %38, align 8
  %78 = load i64, i64* %54, align 8
  %79 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %44, i64 %46, i32 1
  %80 = load i64, i64* %79, align 8
  %81 = add i64 %80, %78
  %82 = add nuw i64 %46, 1
  %83 = icmp ugt i64 %28, %81
  br i1 %83, label %39, label %84

84:                                               ; preds = %75, %66
  %85 = phi i64 [ %28, %66 ], [ %81, %75 ]
  %86 = load i32, i32* %19, align 4
  br label %87

87:                                               ; preds = %84, %2
  %88 = phi i32 [ %20, %2 ], [ %86, %84 ]
  %89 = phi i64 [ 0, %2 ], [ %85, %84 ]
  %90 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 6
  %91 = load i64, i64* %90, align 8
  %92 = icmp eq i32 %88, 2
  br i1 %92, label %93, label %100

93:                                               ; preds = %87
  %94 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %9, i64 0, i32 1
  %95 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %94, align 8
  %96 = load i64, i64* %14, align 8
  %97 = add i64 %96, -1
  %98 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %95, i64 %97, i32 0
  %99 = load i64, i64* %98, align 8
  br label %100

100:                                              ; preds = %30, %87, %93
  %101 = phi i64 [ %91, %93 ], [ %91, %87 ], [ %32, %30 ]
  %102 = phi i64 [ %89, %93 ], [ %89, %87 ], [ 0, %30 ]
  %103 = phi i32 [ 2, %93 ], [ %88, %87 ], [ 1, %30 ]
  %104 = phi i64 [ %99, %93 ], [ %11, %87 ], [ %11, %30 ]
  %105 = icmp ugt i64 %104, %102
  br i1 %105, label %106, label %163

106:                                              ; preds = %100
  %107 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %8, i64 0, i32 1
  %108 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 1
  %109 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 3
  %110 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 4
  %111 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 2
  br label %112

112:                                              ; preds = %106, %157
  %113 = phi i64 [ %101, %106 ], [ %159, %157 ]
  %114 = phi i64 [ %102, %106 ], [ %158, %157 ]
  %115 = icmp ult i64 %113, %13
  br i1 %115, label %116, label %147

116:                                              ; preds = %112
  %117 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %107, align 8
  br label %118

118:                                              ; preds = %123, %116
  %119 = phi i64 [ %113, %116 ], [ %124, %123 ]
  %120 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %117, i64 %119, i32 2
  %121 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %120, align 8
  %122 = icmp eq %struct.VmaAllocation_T* %121, null
  br i1 %122, label %123, label %126

123:                                              ; preds = %118
  %124 = add i64 %119, 1
  %125 = icmp eq i64 %124, %13
  br i1 %125, label %147, label %118

126:                                              ; preds = %118
  %127 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %117, i64 %119, i32 0
  %128 = load i64, i64* %127, align 8
  %129 = icmp ugt i64 %128, %114
  br i1 %129, label %130, label %139

130:                                              ; preds = %126
  %131 = sub i64 %128, %114
  %132 = load i64, i64* %108, align 8
  %133 = add i64 %132, %131
  store i64 %133, i64* %108, align 8
  %134 = load i64, i64* %109, align 8
  %135 = add i64 %134, 1
  store i64 %135, i64* %109, align 8
  %136 = load i64, i64* %110, align 8
  %137 = icmp ult i64 %136, %131
  %138 = select i1 %137, i64 %131, i64 %136
  store i64 %138, i64* %110, align 8
  br label %139

139:                                              ; preds = %130, %126
  %140 = load i64, i64* %111, align 8
  %141 = add i64 %140, 1
  store i64 %141, i64* %111, align 8
  %142 = load i64, i64* %127, align 8
  %143 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %117, i64 %119, i32 1
  %144 = load i64, i64* %143, align 8
  %145 = add i64 %144, %142
  %146 = add nuw i64 %119, 1
  br label %157

147:                                              ; preds = %123, %112
  %148 = phi i64 [ %113, %112 ], [ %13, %123 ]
  %149 = sub i64 %104, %114
  %150 = load i64, i64* %108, align 8
  %151 = add i64 %150, %149
  store i64 %151, i64* %108, align 8
  %152 = load i64, i64* %109, align 8
  %153 = add i64 %152, 1
  store i64 %153, i64* %109, align 8
  %154 = load i64, i64* %110, align 8
  %155 = icmp ult i64 %154, %149
  %156 = select i1 %155, i64 %149, i64 %154
  store i64 %156, i64* %110, align 8
  br label %157

157:                                              ; preds = %147, %139
  %158 = phi i64 [ %145, %139 ], [ %104, %147 ]
  %159 = phi i64 [ %146, %139 ], [ %148, %147 ]
  %160 = icmp ugt i64 %104, %158
  br i1 %160, label %112, label %161

161:                                              ; preds = %157
  %162 = load i32, i32* %19, align 4
  br label %163

163:                                              ; preds = %161, %100
  %164 = phi i32 [ %103, %100 ], [ %162, %161 ]
  %165 = phi i64 [ %102, %100 ], [ %158, %161 ]
  %166 = icmp eq i32 %164, 2
  %167 = icmp ugt i64 %11, %165
  %168 = and i1 %166, %167
  br i1 %168, label %169, label %220

169:                                              ; preds = %163
  %170 = load i64, i64* %14, align 8
  %171 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %9, i64 0, i32 1
  %172 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 1
  %173 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 3
  %174 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 4
  %175 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 2
  br label %176

176:                                              ; preds = %169, %212
  %177 = phi i64 [ %170, %169 ], [ %184, %212 ]
  %178 = phi i64 [ %165, %169 ], [ %218, %212 ]
  %179 = icmp eq i64 %177, 0
  br i1 %179, label %203, label %180

180:                                              ; preds = %176
  %181 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %171, align 8
  br label %182

182:                                              ; preds = %180, %188
  %183 = phi i64 [ %177, %180 ], [ %184, %188 ]
  %184 = add i64 %183, -1
  %185 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %181, i64 %184, i32 2
  %186 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %185, align 8
  %187 = icmp eq %struct.VmaAllocation_T* %186, null
  br i1 %187, label %188, label %190

188:                                              ; preds = %182
  %189 = icmp eq i64 %184, 0
  br i1 %189, label %203, label %182

190:                                              ; preds = %182
  %191 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %181, i64 %184, i32 0
  %192 = load i64, i64* %191, align 8
  %193 = icmp ugt i64 %192, %178
  br i1 %193, label %194, label %212

194:                                              ; preds = %190
  %195 = sub i64 %192, %178
  %196 = load i64, i64* %172, align 8
  %197 = add i64 %196, %195
  store i64 %197, i64* %172, align 8
  %198 = load i64, i64* %173, align 8
  %199 = add i64 %198, 1
  store i64 %199, i64* %173, align 8
  %200 = load i64, i64* %174, align 8
  %201 = icmp ult i64 %200, %195
  %202 = select i1 %201, i64 %195, i64 %200
  store i64 %202, i64* %174, align 8
  br label %212

203:                                              ; preds = %176, %188
  %204 = sub i64 %11, %178
  %205 = load i64, i64* %172, align 8
  %206 = add i64 %205, %204
  store i64 %206, i64* %172, align 8
  %207 = load i64, i64* %173, align 8
  %208 = add i64 %207, 1
  store i64 %208, i64* %173, align 8
  %209 = load i64, i64* %174, align 8
  %210 = icmp ult i64 %209, %204
  %211 = select i1 %210, i64 %204, i64 %209
  store i64 %211, i64* %174, align 8
  br label %220

212:                                              ; preds = %190, %194
  %213 = load i64, i64* %175, align 8
  %214 = add i64 %213, 1
  store i64 %214, i64* %175, align 8
  %215 = load i64, i64* %191, align 8
  %216 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %181, i64 %184, i32 1
  %217 = load i64, i64* %216, align 8
  %218 = add i64 %217, %215
  %219 = icmp ugt i64 %11, %218
  br i1 %219, label %176, label %220

220:                                              ; preds = %212, %203, %163
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK23VmaBlockMetadata_Linear16PrintDetailedMapER13VmaJsonWriter(%class.VmaBlockMetadata_Linear* nocapture readonly, %class.VmaJsonWriter* dereferenceable(48)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 0
  %4 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 4
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 3
  %10 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 2
  %11 = select i1 %8, %class.VmaVector.21* %10, %class.VmaVector.21* %9
  %12 = select i1 %8, %class.VmaVector.21* %9, %class.VmaVector.21* %10
  %13 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %11, i64 0, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %12, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 5
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 1
  %20 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 6
  %21 = load i64, i64* %20, align 8
  br i1 %19, label %22, label %64

22:                                               ; preds = %2
  %23 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %11, i64 0, i32 1
  %24 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %23, align 8
  %25 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %24, i64 %21, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 6
  br label %77

30:                                               ; preds = %22
  %31 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %12, i64 0, i32 1
  br label %32

32:                                               ; preds = %30, %51
  %33 = phi i64 [ 0, %30 ], [ %62, %51 ]
  %34 = phi i64 [ 0, %30 ], [ %58, %51 ]
  %35 = phi i64 [ 0, %30 ], [ %60, %51 ]
  %36 = phi i64 [ 0, %30 ], [ %55, %51 ]
  %37 = phi i64 [ 0, %30 ], [ %59, %51 ]
  %38 = icmp ult i64 %35, %16
  br i1 %38, label %39, label %49

39:                                               ; preds = %32
  %40 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %31, align 8
  br label %41

41:                                               ; preds = %46, %39
  %42 = phi i64 [ %35, %39 ], [ %47, %46 ]
  %43 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %40, i64 %42, i32 2
  %44 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %43, align 8
  %45 = icmp eq %struct.VmaAllocation_T* %44, null
  br i1 %45, label %46, label %51

46:                                               ; preds = %41
  %47 = add i64 %42, 1
  %48 = icmp eq i64 %47, %16
  br i1 %48, label %49, label %41

49:                                               ; preds = %32, %46
  %50 = add i64 %33, 1
  br label %64

51:                                               ; preds = %41
  %52 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %40, i64 %42, i32 0
  %53 = load i64, i64* %52, align 8
  %54 = icmp ult i64 %37, %53
  %55 = add i64 %36, 1
  %56 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %40, i64 %42, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = add i64 %57, %34
  %59 = add i64 %57, %53
  %60 = add nuw i64 %42, 1
  %61 = zext i1 %54 to i64
  %62 = add i64 %33, %61
  %63 = icmp ult i64 %59, %26
  br i1 %63, label %32, label %64

64:                                               ; preds = %51, %2, %49
  %65 = phi i64 [ %26, %49 ], [ 0, %2 ], [ %59, %51 ]
  %66 = phi i64 [ %36, %49 ], [ 0, %2 ], [ %55, %51 ]
  %67 = phi i64 [ %34, %49 ], [ 0, %2 ], [ %58, %51 ]
  %68 = phi i64 [ %50, %49 ], [ 0, %2 ], [ %62, %51 ]
  %69 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 6
  %70 = icmp eq i32 %18, 2
  br i1 %70, label %71, label %77

71:                                               ; preds = %64
  %72 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %12, i64 0, i32 1
  %73 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %72, align 8
  %74 = add i64 %16, -1
  %75 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %73, i64 %74, i32 0
  %76 = load i64, i64* %75, align 8
  br label %77

77:                                               ; preds = %28, %64, %71
  %78 = phi i1 [ true, %71 ], [ false, %64 ], [ false, %28 ]
  %79 = phi i64* [ %69, %71 ], [ %69, %64 ], [ %29, %28 ]
  %80 = phi i64 [ %68, %71 ], [ %68, %64 ], [ 0, %28 ]
  %81 = phi i64 [ %67, %71 ], [ %67, %64 ], [ 0, %28 ]
  %82 = phi i64 [ %66, %71 ], [ %66, %64 ], [ 0, %28 ]
  %83 = phi i64 [ %65, %71 ], [ %65, %64 ], [ 0, %28 ]
  %84 = phi i64 [ %76, %71 ], [ %5, %64 ], [ %5, %28 ]
  %85 = icmp ult i64 %83, %84
  br i1 %85, label %86, label %122

86:                                               ; preds = %77
  %87 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %11, i64 0, i32 1
  br label %88

88:                                               ; preds = %86, %109
  %89 = phi i64 [ %80, %86 ], [ %120, %109 ]
  %90 = phi i64 [ %81, %86 ], [ %115, %109 ]
  %91 = phi i64 [ 0, %86 ], [ %112, %109 ]
  %92 = phi i64 [ %21, %86 ], [ %117, %109 ]
  %93 = phi i64 [ %83, %86 ], [ %116, %109 ]
  %94 = icmp ult i64 %92, %14
  br i1 %94, label %95, label %105

95:                                               ; preds = %88
  %96 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %87, align 8
  br label %97

97:                                               ; preds = %102, %95
  %98 = phi i64 [ %92, %95 ], [ %103, %102 ]
  %99 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %96, i64 %98, i32 2
  %100 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %99, align 8
  %101 = icmp eq %struct.VmaAllocation_T* %100, null
  br i1 %101, label %102, label %109

102:                                              ; preds = %97
  %103 = add i64 %98, 1
  %104 = icmp eq i64 %103, %14
  br i1 %104, label %105, label %97

105:                                              ; preds = %88, %102
  %106 = icmp ult i64 %93, %5
  %107 = zext i1 %106 to i64
  %108 = add i64 %89, %107
  br label %122

109:                                              ; preds = %97
  %110 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %96, i64 %98, i32 0
  %111 = load i64, i64* %110, align 8
  %112 = add i64 %91, 1
  %113 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %96, i64 %98, i32 1
  %114 = load i64, i64* %113, align 8
  %115 = add i64 %114, %90
  %116 = add i64 %114, %111
  %117 = add nuw i64 %98, 1
  %118 = icmp ult i64 %93, %111
  %119 = zext i1 %118 to i64
  %120 = add i64 %89, %119
  %121 = icmp ult i64 %116, %84
  br i1 %121, label %88, label %122

122:                                              ; preds = %109, %105, %77
  %123 = phi i64 [ %83, %77 ], [ %84, %105 ], [ %116, %109 ]
  %124 = phi i64 [ 0, %77 ], [ %91, %105 ], [ %112, %109 ]
  %125 = phi i64 [ %81, %77 ], [ %90, %105 ], [ %115, %109 ]
  %126 = phi i64 [ %80, %77 ], [ %108, %105 ], [ %120, %109 ]
  %127 = icmp ult i64 %123, %5
  %128 = and i1 %78, %127
  br i1 %128, label %129, label %162

129:                                              ; preds = %122
  %130 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %12, i64 0, i32 1
  br label %131

131:                                              ; preds = %129, %150
  %132 = phi i64 [ %126, %129 ], [ %160, %150 ]
  %133 = phi i64 [ %125, %129 ], [ %157, %150 ]
  %134 = phi i64 [ %16, %129 ], [ %142, %150 ]
  %135 = phi i64 [ %82, %129 ], [ %154, %150 ]
  %136 = phi i64 [ %123, %129 ], [ %158, %150 ]
  %137 = icmp eq i64 %134, 0
  br i1 %137, label %148, label %138

138:                                              ; preds = %131
  %139 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %130, align 8
  br label %140

140:                                              ; preds = %138, %146
  %141 = phi i64 [ %134, %138 ], [ %142, %146 ]
  %142 = add i64 %141, -1
  %143 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %139, i64 %142, i32 2
  %144 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %143, align 8
  %145 = icmp eq %struct.VmaAllocation_T* %144, null
  br i1 %145, label %146, label %150

146:                                              ; preds = %140
  %147 = icmp eq i64 %142, 0
  br i1 %147, label %148, label %140

148:                                              ; preds = %131, %146
  %149 = add i64 %132, 1
  br label %162

150:                                              ; preds = %140
  %151 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %139, i64 %142, i32 0
  %152 = load i64, i64* %151, align 8
  %153 = icmp ult i64 %136, %152
  %154 = add i64 %135, 1
  %155 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %139, i64 %142, i32 1
  %156 = load i64, i64* %155, align 8
  %157 = add i64 %156, %133
  %158 = add i64 %156, %152
  %159 = zext i1 %153 to i64
  %160 = add i64 %132, %159
  %161 = icmp ult i64 %158, %5
  br i1 %161, label %131, label %162

162:                                              ; preds = %150, %148, %122
  %163 = phi i64 [ %82, %122 ], [ %135, %148 ], [ %154, %150 ]
  %164 = phi i64 [ %125, %122 ], [ %133, %148 ], [ %157, %150 ]
  %165 = phi i64 [ %126, %122 ], [ %149, %148 ], [ %160, %150 ]
  %166 = sub i64 %5, %164
  %167 = add i64 %163, %124
  tail call void @_ZNK16VmaBlockMetadata22PrintDetailedMap_BeginER13VmaJsonWritermmm(%class.VmaBlockMetadata* %3, %class.VmaJsonWriter* dereferenceable(48) %1, i64 %166, i64 %167, i64 %165)
  %168 = load i32, i32* %17, align 4
  %169 = icmp eq i32 %168, 1
  br i1 %169, label %170, label %212

170:                                              ; preds = %162
  %171 = load i64, i64* %79, align 8
  %172 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %11, i64 0, i32 1
  %173 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %172, align 8
  %174 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %173, i64 %171, i32 0
  %175 = load i64, i64* %174, align 8
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %212, label %177

177:                                              ; preds = %170
  %178 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %12, i64 0, i32 1
  br label %179

179:                                              ; preds = %177, %203
  %180 = phi i64 [ 0, %177 ], [ %210, %203 ]
  %181 = phi i64 [ 0, %177 ], [ %209, %203 ]
  %182 = icmp ult i64 %180, %16
  br i1 %182, label %183, label %201

183:                                              ; preds = %179
  %184 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %178, align 8
  br label %185

185:                                              ; preds = %190, %183
  %186 = phi i64 [ %180, %183 ], [ %191, %190 ]
  %187 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %184, i64 %186, i32 2
  %188 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %187, align 8
  %189 = icmp eq %struct.VmaAllocation_T* %188, null
  br i1 %189, label %190, label %193

190:                                              ; preds = %185
  %191 = add i64 %186, 1
  %192 = icmp eq i64 %191, %16
  br i1 %192, label %201, label %185

193:                                              ; preds = %185
  %194 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %184, i64 %186, i32 0
  %195 = load i64, i64* %194, align 8
  %196 = icmp ugt i64 %195, %181
  br i1 %196, label %197, label %203

197:                                              ; preds = %193
  %198 = sub i64 %195, %181
  tail call void @_ZNK16VmaBlockMetadata28PrintDetailedMap_UnusedRangeER13VmaJsonWritermm(%class.VmaBlockMetadata* undef, %class.VmaJsonWriter* dereferenceable(48) %1, i64 %181, i64 %198)
  %199 = load i64, i64* %194, align 8
  %200 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %187, align 8
  br label %203

201:                                              ; preds = %179, %190
  %202 = sub i64 %175, %181
  tail call void @_ZNK16VmaBlockMetadata28PrintDetailedMap_UnusedRangeER13VmaJsonWritermm(%class.VmaBlockMetadata* undef, %class.VmaJsonWriter* dereferenceable(48) %1, i64 %181, i64 %202)
  br label %212

203:                                              ; preds = %193, %197
  %204 = phi %struct.VmaAllocation_T* [ %200, %197 ], [ %188, %193 ]
  %205 = phi i64 [ %199, %197 ], [ %195, %193 ]
  tail call void @_ZNK16VmaBlockMetadata27PrintDetailedMap_AllocationER13VmaJsonWritermP15VmaAllocation_T(%class.VmaBlockMetadata* undef, %class.VmaJsonWriter* dereferenceable(48) %1, i64 %205, %struct.VmaAllocation_T* %204)
  %206 = load i64, i64* %194, align 8
  %207 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %184, i64 %186, i32 1
  %208 = load i64, i64* %207, align 8
  %209 = add i64 %208, %206
  %210 = add nuw i64 %186, 1
  %211 = icmp ugt i64 %175, %209
  br i1 %211, label %179, label %212

212:                                              ; preds = %203, %201, %170, %162
  %213 = phi i64 [ 0, %162 ], [ 0, %170 ], [ %175, %201 ], [ %209, %203 ]
  %214 = icmp ugt i64 %84, %213
  br i1 %214, label %215, label %255

215:                                              ; preds = %212
  %216 = load i64, i64* %79, align 8
  %217 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %11, i64 0, i32 1
  br label %218

218:                                              ; preds = %215, %251
  %219 = phi i64 [ %216, %215 ], [ %253, %251 ]
  %220 = phi i64 [ %213, %215 ], [ %252, %251 ]
  %221 = icmp ult i64 %219, %14
  br i1 %221, label %222, label %248

222:                                              ; preds = %218
  %223 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %217, align 8
  br label %224

224:                                              ; preds = %229, %222
  %225 = phi i64 [ %219, %222 ], [ %230, %229 ]
  %226 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %223, i64 %225, i32 2
  %227 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %226, align 8
  %228 = icmp eq %struct.VmaAllocation_T* %227, null
  br i1 %228, label %229, label %232

229:                                              ; preds = %224
  %230 = add i64 %225, 1
  %231 = icmp eq i64 %230, %14
  br i1 %231, label %248, label %224

232:                                              ; preds = %224
  %233 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %223, i64 %225, i32 0
  %234 = load i64, i64* %233, align 8
  %235 = icmp ugt i64 %234, %220
  br i1 %235, label %236, label %240

236:                                              ; preds = %232
  %237 = sub i64 %234, %220
  tail call void @_ZNK16VmaBlockMetadata28PrintDetailedMap_UnusedRangeER13VmaJsonWritermm(%class.VmaBlockMetadata* undef, %class.VmaJsonWriter* dereferenceable(48) %1, i64 %220, i64 %237)
  %238 = load i64, i64* %233, align 8
  %239 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %226, align 8
  br label %240

240:                                              ; preds = %236, %232
  %241 = phi %struct.VmaAllocation_T* [ %239, %236 ], [ %227, %232 ]
  %242 = phi i64 [ %238, %236 ], [ %234, %232 ]
  tail call void @_ZNK16VmaBlockMetadata27PrintDetailedMap_AllocationER13VmaJsonWritermP15VmaAllocation_T(%class.VmaBlockMetadata* undef, %class.VmaJsonWriter* dereferenceable(48) %1, i64 %242, %struct.VmaAllocation_T* %241)
  %243 = load i64, i64* %233, align 8
  %244 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %223, i64 %225, i32 1
  %245 = load i64, i64* %244, align 8
  %246 = add i64 %245, %243
  %247 = add nuw i64 %225, 1
  br label %251

248:                                              ; preds = %229, %218
  %249 = phi i64 [ %219, %218 ], [ %14, %229 ]
  %250 = sub i64 %84, %220
  tail call void @_ZNK16VmaBlockMetadata28PrintDetailedMap_UnusedRangeER13VmaJsonWritermm(%class.VmaBlockMetadata* undef, %class.VmaJsonWriter* dereferenceable(48) %1, i64 %220, i64 %250)
  br label %251

251:                                              ; preds = %248, %240
  %252 = phi i64 [ %246, %240 ], [ %84, %248 ]
  %253 = phi i64 [ %247, %240 ], [ %249, %248 ]
  %254 = icmp ugt i64 %84, %252
  br i1 %254, label %218, label %255

255:                                              ; preds = %251, %212
  %256 = phi i64 [ %213, %212 ], [ %252, %251 ]
  %257 = load i32, i32* %17, align 4
  %258 = icmp eq i32 %257, 2
  %259 = icmp ugt i64 %5, %256
  %260 = and i1 %258, %259
  br i1 %260, label %261, label %296

261:                                              ; preds = %255
  %262 = load i64, i64* %15, align 8
  %263 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %12, i64 0, i32 1
  br label %264

264:                                              ; preds = %261, %288
  %265 = phi i64 [ %262, %261 ], [ %272, %288 ]
  %266 = phi i64 [ %256, %261 ], [ %294, %288 ]
  %267 = icmp eq i64 %265, 0
  br i1 %267, label %286, label %268

268:                                              ; preds = %264
  %269 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %263, align 8
  br label %270

270:                                              ; preds = %268, %276
  %271 = phi i64 [ %265, %268 ], [ %272, %276 ]
  %272 = add i64 %271, -1
  %273 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %269, i64 %272, i32 2
  %274 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %273, align 8
  %275 = icmp eq %struct.VmaAllocation_T* %274, null
  br i1 %275, label %276, label %278

276:                                              ; preds = %270
  %277 = icmp eq i64 %272, 0
  br i1 %277, label %286, label %270

278:                                              ; preds = %270
  %279 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %269, i64 %272, i32 0
  %280 = load i64, i64* %279, align 8
  %281 = icmp ugt i64 %280, %266
  br i1 %281, label %282, label %288

282:                                              ; preds = %278
  %283 = sub i64 %280, %266
  tail call void @_ZNK16VmaBlockMetadata28PrintDetailedMap_UnusedRangeER13VmaJsonWritermm(%class.VmaBlockMetadata* undef, %class.VmaJsonWriter* dereferenceable(48) %1, i64 %266, i64 %283)
  %284 = load i64, i64* %279, align 8
  %285 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %273, align 8
  br label %288

286:                                              ; preds = %264, %276
  %287 = sub i64 %5, %266
  tail call void @_ZNK16VmaBlockMetadata28PrintDetailedMap_UnusedRangeER13VmaJsonWritermm(%class.VmaBlockMetadata* undef, %class.VmaJsonWriter* dereferenceable(48) %1, i64 %266, i64 %287)
  br label %296

288:                                              ; preds = %278, %282
  %289 = phi %struct.VmaAllocation_T* [ %285, %282 ], [ %274, %278 ]
  %290 = phi i64 [ %284, %282 ], [ %280, %278 ]
  tail call void @_ZNK16VmaBlockMetadata27PrintDetailedMap_AllocationER13VmaJsonWritermP15VmaAllocation_T(%class.VmaBlockMetadata* undef, %class.VmaJsonWriter* dereferenceable(48) %1, i64 %290, %struct.VmaAllocation_T* %289)
  %291 = load i64, i64* %279, align 8
  %292 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %269, i64 %272, i32 1
  %293 = load i64, i64* %292, align 8
  %294 = add i64 %293, %291
  %295 = icmp ugt i64 %5, %294
  br i1 %295, label %264, label %296

296:                                              ; preds = %288, %286, %255
  tail call void @_ZN13VmaJsonWriter8EndArrayEv(%class.VmaJsonWriter* %1) #15
  tail call void @_ZN13VmaJsonWriter9EndObjectEv(%class.VmaJsonWriter* %1) #15
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN23VmaBlockMetadata_Linear23CreateAllocationRequestEjjmmmb20VmaSuballocationTypebjP20VmaAllocationRequest(%class.VmaBlockMetadata_Linear* nocapture readonly, i32, i32, i64, i64, i64, i1 zeroext, i32, i1 zeroext, i32, %struct.VmaAllocationRequest* nocapture) unnamed_addr #6 align 2 {
  br i1 %6, label %12, label %14

12:                                               ; preds = %11
  %13 = tail call zeroext i1 @_ZN23VmaBlockMetadata_Linear36CreateAllocationRequest_UpperAddressEjjmmm20VmaSuballocationTypebjP20VmaAllocationRequest(%class.VmaBlockMetadata_Linear* %0, i32 undef, i32 undef, i64 %3, i64 %4, i64 %5, i32 %7, i1 zeroext undef, i32 undef, %struct.VmaAllocationRequest* %10)
  br label %16

14:                                               ; preds = %11
  %15 = tail call zeroext i1 @_ZN23VmaBlockMetadata_Linear36CreateAllocationRequest_LowerAddressEjjmmm20VmaSuballocationTypebjP20VmaAllocationRequest(%class.VmaBlockMetadata_Linear* %0, i32 %1, i32 %2, i64 %3, i64 %4, i64 %5, i32 %7, i1 zeroext %8, i32 undef, %struct.VmaAllocationRequest* %10)
  br label %16

16:                                               ; preds = %14, %12
  %17 = phi i1 [ %13, %12 ], [ %15, %14 ]
  ret i1 %17
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN23VmaBlockMetadata_Linear36CreateAllocationRequest_UpperAddressEjjmmm20VmaSuballocationTypebjP20VmaAllocationRequest(%class.VmaBlockMetadata_Linear* nocapture readonly, i32, i32, i64, i64, i64, i32, i1 zeroext, i32, %struct.VmaAllocationRequest* nocapture) local_unnamed_addr #6 align 2 {
  %11 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 4
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 3
  %17 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 2
  %18 = select i1 %15, %class.VmaVector.21* %17, %class.VmaVector.21* %16
  %19 = select i1 %15, %class.VmaVector.21* %16, %class.VmaVector.21* %17
  %20 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 5
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 1
  %23 = icmp ult i64 %12, %4
  %24 = or i1 %23, %22
  br i1 %24, label %137, label %25

25:                                               ; preds = %10
  %26 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %19, i64 0, i32 2
  %27 = load i64, i64* %26, align 8
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %29, label %34

29:                                               ; preds = %25
  %30 = sub i64 %12, %4
  %31 = urem i64 %30, %5
  %32 = sub i64 %30, %31
  %33 = icmp ugt i64 %3, 1
  br label %79

34:                                               ; preds = %25
  %35 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %19, i64 0, i32 1
  %36 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %35, align 8
  %37 = add i64 %27, -1
  %38 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %36, i64 %37, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp ult i64 %39, %4
  br i1 %40, label %137, label %41

41:                                               ; preds = %34
  %42 = sub i64 %39, %4
  %43 = urem i64 %42, %5
  %44 = sub i64 %42, %43
  %45 = icmp ugt i64 %3, 1
  %46 = xor i1 %45, true
  %47 = or i1 %28, %46
  br i1 %47, label %79, label %48

48:                                               ; preds = %41
  %49 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %19, i64 0, i32 1
  %50 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %49, align 8
  %51 = add i64 %4, -1
  %52 = add i64 %51, %44
  %53 = sub i64 0, %3
  br label %54

54:                                               ; preds = %48, %74
  %55 = phi i64 [ %27, %48 ], [ %56, %74 ]
  %56 = add i64 %55, -1
  %57 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %50, i64 %56, i32 0
  %58 = load i64, i64* %57, align 8
  %59 = xor i64 %58, %52
  %60 = and i64 %59, %53
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %79

62:                                               ; preds = %54
  %63 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %50, i64 %56, i32 3
  %64 = load i32, i32* %63, align 8
  %65 = icmp sgt i32 %64, %6
  %66 = select i1 %65, i32 %6, i32 %64
  %67 = select i1 %65, i32 %64, i32 %6
  switch i32 %66, label %76 [
    i32 0, label %74
    i32 5, label %74
    i32 2, label %73
    i32 3, label %68
    i32 4, label %71
  ]

68:                                               ; preds = %62
  %69 = add i32 %67, -3
  %70 = icmp ult i32 %69, 3
  br i1 %70, label %76, label %74

71:                                               ; preds = %62
  %72 = icmp eq i32 %67, 5
  br i1 %72, label %76, label %74

73:                                               ; preds = %62
  switch i32 %67, label %74 [
    i32 5, label %76
    i32 3, label %76
  ]

74:                                               ; preds = %73, %62, %62, %71, %68
  %75 = icmp eq i64 %56, 0
  br i1 %75, label %79, label %54

76:                                               ; preds = %73, %73, %62, %68, %71
  %77 = urem i64 %44, %3
  %78 = sub i64 %44, %77
  br label %79

79:                                               ; preds = %54, %74, %29, %41, %76
  %80 = phi i1 [ %45, %41 ], [ %45, %76 ], [ %33, %29 ], [ %45, %74 ], [ %45, %54 ]
  %81 = phi i64 [ %39, %41 ], [ %39, %76 ], [ %12, %29 ], [ %39, %74 ], [ %39, %54 ]
  %82 = phi i64 [ %44, %41 ], [ %78, %76 ], [ %32, %29 ], [ %44, %74 ], [ %44, %54 ]
  %83 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %18, i64 0, i32 2
  %84 = load i64, i64* %83, align 8
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %96, label %86

86:                                               ; preds = %79
  %87 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %18, i64 0, i32 1
  %88 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %87, align 8
  %89 = add i64 %84, -1
  %90 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %88, i64 %89, i32 0
  %91 = load i64, i64* %90, align 8
  %92 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %88, i64 %89, i32 1
  %93 = load i64, i64* %92, align 8
  %94 = add i64 %93, %91
  %95 = icmp ugt i64 %94, %82
  br i1 %95, label %137, label %96

96:                                               ; preds = %79, %86
  %97 = phi i64 [ %94, %86 ], [ 0, %79 ]
  %98 = xor i1 %80, true
  %99 = or i1 %85, %98
  br i1 %99, label %130, label %100

100:                                              ; preds = %96
  %101 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %18, i64 0, i32 1
  %102 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %101, align 8
  %103 = sub i64 0, %3
  br label %104

104:                                              ; preds = %100, %128
  %105 = phi i64 [ %84, %100 ], [ %106, %128 ]
  %106 = add i64 %105, -1
  %107 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %102, i64 %106, i32 0
  %108 = load i64, i64* %107, align 8
  %109 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %102, i64 %106, i32 1
  %110 = load i64, i64* %109, align 8
  %111 = add i64 %108, -1
  %112 = add i64 %111, %110
  %113 = xor i64 %112, %82
  %114 = and i64 %113, %103
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %116, label %130

116:                                              ; preds = %104
  %117 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %102, i64 %106, i32 3
  %118 = load i32, i32* %117, align 8
  %119 = icmp slt i32 %118, %6
  %120 = select i1 %119, i32 %118, i32 %6
  %121 = select i1 %119, i32 %6, i32 %118
  switch i32 %120, label %137 [
    i32 0, label %128
    i32 5, label %128
    i32 2, label %127
    i32 3, label %122
    i32 4, label %125
  ]

122:                                              ; preds = %116
  %123 = add i32 %121, -3
  %124 = icmp ult i32 %123, 3
  br i1 %124, label %137, label %128

125:                                              ; preds = %116
  %126 = icmp eq i32 %121, 5
  br i1 %126, label %137, label %128

127:                                              ; preds = %116
  switch i32 %121, label %128 [
    i32 5, label %137
    i32 3, label %137
  ]

128:                                              ; preds = %127, %116, %116, %125, %122
  %129 = icmp eq i64 %106, 0
  br i1 %129, label %130, label %104

130:                                              ; preds = %128, %104, %96
  %131 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %9, i64 0, i32 0
  store i64 %82, i64* %131, align 8
  %132 = sub i64 %81, %97
  %133 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %9, i64 0, i32 1
  store i64 %132, i64* %133, align 8
  %134 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %9, i64 0, i32 2
  store i64 0, i64* %134, align 8
  %135 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %9, i64 0, i32 4
  store i64 0, i64* %135, align 8
  %136 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %9, i64 0, i32 6
  store i32 1, i32* %136, align 8
  br label %137

137:                                              ; preds = %127, %127, %116, %122, %125, %34, %86, %130, %10
  %138 = phi i1 [ false, %10 ], [ false, %34 ], [ true, %130 ], [ false, %86 ], [ false, %125 ], [ false, %122 ], [ false, %116 ], [ false, %127 ], [ false, %127 ]
  ret i1 %138
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN23VmaBlockMetadata_Linear36CreateAllocationRequest_LowerAddressEjjmmm20VmaSuballocationTypebjP20VmaAllocationRequest(%class.VmaBlockMetadata_Linear* nocapture readonly, i32, i32, i64, i64, i64, i32, i1 zeroext, i32, %struct.VmaAllocationRequest* nocapture) local_unnamed_addr #6 align 2 {
  %11 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 4
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 3
  %17 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 2
  %18 = select i1 %15, %class.VmaVector.21* %17, %class.VmaVector.21* %16
  %19 = select i1 %15, %class.VmaVector.21* %16, %class.VmaVector.21* %17
  %20 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 5
  %21 = load i32, i32* %20, align 4
  switch i32 %21, label %135 [
    i32 0, label %22
    i32 2, label %22
  ]

22:                                               ; preds = %10, %10
  %23 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %18, i64 0, i32 2
  %24 = load i64, i64* %23, align 8
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %35, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %18, i64 0, i32 1
  %28 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %27, align 8
  %29 = add i64 %24, -1
  %30 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %28, i64 %29, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %28, i64 %29, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = add i64 %33, %31
  br label %35

35:                                               ; preds = %26, %22
  %36 = phi i64 [ 0, %22 ], [ %34, %26 ]
  %37 = add i64 %5, -1
  %38 = add i64 %37, %36
  %39 = urem i64 %38, %5
  %40 = sub i64 %38, %39
  %41 = icmp ugt i64 %3, 1
  %42 = xor i1 %41, true
  %43 = or i1 %25, %42
  br i1 %43, label %79, label %44

44:                                               ; preds = %35
  %45 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %18, i64 0, i32 1
  %46 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %45, align 8
  %47 = sub i64 0, %3
  br label %48

48:                                               ; preds = %44, %72
  %49 = phi i64 [ %24, %44 ], [ %50, %72 ]
  %50 = add i64 %49, -1
  %51 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %46, i64 %50, i32 0
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %46, i64 %50, i32 1
  %54 = load i64, i64* %53, align 8
  %55 = add i64 %52, -1
  %56 = add i64 %55, %54
  %57 = xor i64 %56, %40
  %58 = and i64 %57, %47
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %79

60:                                               ; preds = %48
  %61 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %46, i64 %50, i32 3
  %62 = load i32, i32* %61, align 8
  %63 = icmp sgt i32 %62, %6
  %64 = select i1 %63, i32 %6, i32 %62
  %65 = select i1 %63, i32 %62, i32 %6
  switch i32 %64, label %74 [
    i32 0, label %72
    i32 5, label %72
    i32 2, label %71
    i32 3, label %66
    i32 4, label %69
  ]

66:                                               ; preds = %60
  %67 = add i32 %65, -3
  %68 = icmp ult i32 %67, 3
  br i1 %68, label %74, label %72

69:                                               ; preds = %60
  %70 = icmp eq i32 %65, 5
  br i1 %70, label %74, label %72

71:                                               ; preds = %60
  switch i32 %65, label %72 [
    i32 5, label %74
    i32 3, label %74
  ]

72:                                               ; preds = %71, %60, %60, %69, %66
  %73 = icmp eq i64 %50, 0
  br i1 %73, label %79, label %48

74:                                               ; preds = %71, %71, %60, %66, %69
  %75 = add i64 %3, -1
  %76 = add i64 %75, %40
  %77 = urem i64 %76, %3
  %78 = sub i64 %76, %77
  br label %79

79:                                               ; preds = %48, %72, %35, %74
  %80 = phi i64 [ %40, %35 ], [ %78, %74 ], [ %40, %72 ], [ %40, %48 ]
  %81 = icmp eq i32 %21, 2
  br i1 %81, label %82, label %90

82:                                               ; preds = %79
  %83 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %19, i64 0, i32 1
  %84 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %83, align 8
  %85 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %19, i64 0, i32 2
  %86 = load i64, i64* %85, align 8
  %87 = add i64 %86, -1
  %88 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %84, i64 %87, i32 0
  %89 = load i64, i64* %88, align 8
  br label %90

90:                                               ; preds = %79, %82
  %91 = phi i64 [ %89, %82 ], [ %12, %79 ]
  %92 = add i64 %80, %4
  %93 = icmp ugt i64 %92, %91
  br i1 %93, label %135, label %94

94:                                               ; preds = %90
  %95 = and i1 %41, %81
  br i1 %95, label %96, label %128

96:                                               ; preds = %94
  %97 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %19, i64 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %128, label %100

100:                                              ; preds = %96
  %101 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %19, i64 0, i32 1
  %102 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %101, align 8
  %103 = add i64 %4, -1
  %104 = add i64 %103, %80
  %105 = sub i64 0, %3
  br label %106

106:                                              ; preds = %100, %126
  %107 = phi i64 [ %98, %100 ], [ %108, %126 ]
  %108 = add i64 %107, -1
  %109 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %102, i64 %108, i32 0
  %110 = load i64, i64* %109, align 8
  %111 = xor i64 %110, %104
  %112 = and i64 %111, %105
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %128

114:                                              ; preds = %106
  %115 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %102, i64 %108, i32 3
  %116 = load i32, i32* %115, align 8
  %117 = icmp slt i32 %116, %6
  %118 = select i1 %117, i32 %116, i32 %6
  %119 = select i1 %117, i32 %6, i32 %116
  switch i32 %118, label %360 [
    i32 0, label %126
    i32 5, label %126
    i32 2, label %125
    i32 3, label %120
    i32 4, label %123
  ]

120:                                              ; preds = %114
  %121 = add i32 %119, -3
  %122 = icmp ult i32 %121, 3
  br i1 %122, label %360, label %126

123:                                              ; preds = %114
  %124 = icmp eq i32 %119, 5
  br i1 %124, label %360, label %126

125:                                              ; preds = %114
  switch i32 %119, label %126 [
    i32 5, label %360
    i32 3, label %360
  ]

126:                                              ; preds = %125, %114, %114, %123, %120
  %127 = icmp eq i64 %108, 0
  br i1 %127, label %128, label %106

128:                                              ; preds = %126, %106, %96, %94
  %129 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %9, i64 0, i32 0
  store i64 %80, i64* %129, align 8
  %130 = sub i64 %91, %36
  %131 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %9, i64 0, i32 1
  store i64 %130, i64* %131, align 8
  %132 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %9, i64 0, i32 2
  store i64 0, i64* %132, align 8
  %133 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %9, i64 0, i32 6
  store i32 2, i32* %133, align 8
  %134 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %9, i64 0, i32 4
  store i64 0, i64* %134, align 8
  br label %360

135:                                              ; preds = %90, %10
  %136 = icmp ult i32 %21, 2
  br i1 %136, label %137, label %360

137:                                              ; preds = %135
  %138 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %19, i64 0, i32 2
  %139 = load i64, i64* %138, align 8
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %150, label %141

141:                                              ; preds = %137
  %142 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %19, i64 0, i32 1
  %143 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %142, align 8
  %144 = add i64 %139, -1
  %145 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %143, i64 %144, i32 0
  %146 = load i64, i64* %145, align 8
  %147 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %143, i64 %144, i32 1
  %148 = load i64, i64* %147, align 8
  %149 = add i64 %148, %146
  br label %150

150:                                              ; preds = %141, %137
  %151 = phi i64 [ 0, %137 ], [ %149, %141 ]
  %152 = add i64 %5, -1
  %153 = add i64 %152, %151
  %154 = urem i64 %153, %5
  %155 = sub i64 %153, %154
  %156 = icmp ugt i64 %3, 1
  %157 = xor i1 %156, true
  %158 = or i1 %140, %157
  br i1 %158, label %194, label %159

159:                                              ; preds = %150
  %160 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %19, i64 0, i32 1
  %161 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %160, align 8
  %162 = sub i64 0, %3
  br label %163

163:                                              ; preds = %159, %187
  %164 = phi i64 [ %139, %159 ], [ %165, %187 ]
  %165 = add i64 %164, -1
  %166 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %161, i64 %165, i32 0
  %167 = load i64, i64* %166, align 8
  %168 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %161, i64 %165, i32 1
  %169 = load i64, i64* %168, align 8
  %170 = add i64 %167, -1
  %171 = add i64 %170, %169
  %172 = xor i64 %171, %155
  %173 = and i64 %172, %162
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %175, label %194

175:                                              ; preds = %163
  %176 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %161, i64 %165, i32 3
  %177 = load i32, i32* %176, align 8
  %178 = icmp sgt i32 %177, %6
  %179 = select i1 %178, i32 %6, i32 %177
  %180 = select i1 %178, i32 %177, i32 %6
  switch i32 %179, label %189 [
    i32 0, label %187
    i32 5, label %187
    i32 2, label %186
    i32 3, label %181
    i32 4, label %184
  ]

181:                                              ; preds = %175
  %182 = add i32 %180, -3
  %183 = icmp ult i32 %182, 3
  br i1 %183, label %189, label %187

184:                                              ; preds = %175
  %185 = icmp eq i32 %180, 5
  br i1 %185, label %189, label %187

186:                                              ; preds = %175
  switch i32 %180, label %187 [
    i32 5, label %189
    i32 3, label %189
  ]

187:                                              ; preds = %186, %175, %175, %184, %181
  %188 = icmp eq i64 %165, 0
  br i1 %188, label %194, label %163

189:                                              ; preds = %186, %186, %175, %181, %184
  %190 = add i64 %3, -1
  %191 = add i64 %190, %155
  %192 = urem i64 %191, %3
  %193 = sub i64 %191, %192
  br label %194

194:                                              ; preds = %163, %187, %150, %189
  %195 = phi i64 [ %155, %150 ], [ %193, %189 ], [ %155, %187 ], [ %155, %163 ]
  %196 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %9, i64 0, i32 4
  store i64 0, i64* %196, align 8
  %197 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %9, i64 0, i32 2
  store i64 0, i64* %197, align 8
  %198 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 6
  %199 = load i64, i64* %198, align 8
  %200 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %18, i64 0, i32 2
  %201 = load i64, i64* %200, align 8
  br i1 %7, label %202, label %298

202:                                              ; preds = %194
  %203 = icmp ult i64 %199, %201
  br i1 %203, label %204, label %247

204:                                              ; preds = %202
  %205 = add i64 %195, %4
  %206 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %18, i64 0, i32 1
  br label %207

207:                                              ; preds = %204, %242
  %208 = phi i64 [ 0, %204 ], [ %243, %242 ]
  %209 = phi i64 [ %201, %204 ], [ %244, %242 ]
  %210 = phi i64 [ %199, %204 ], [ %245, %242 ]
  %211 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %206, align 8
  %212 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %211, i64 %210, i32 0
  %213 = load i64, i64* %212, align 8
  %214 = icmp ugt i64 %205, %213
  br i1 %214, label %215, label %247

215:                                              ; preds = %207
  %216 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %211, i64 %210, i32 3
  %217 = load i32, i32* %216, align 8
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %242, label %219

219:                                              ; preds = %215
  %220 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %211, i64 %210, i32 2
  %221 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %220, align 8
  %222 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %221, i64 0, i32 5
  %223 = load i8, i8* %222, align 8
  %224 = icmp eq i8 %223, 1
  br i1 %224, label %225, label %360

225:                                              ; preds = %219
  %226 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %221, i64 0, i32 9, i32 0, i32 2
  %227 = load i8, i8* %226, align 8, !range !2
  %228 = icmp eq i8 %227, 0
  br i1 %228, label %360, label %229

229:                                              ; preds = %225
  %230 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %221, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %231 = load atomic i32, i32* %230 seq_cst, align 4
  %232 = add i32 %231, %2
  %233 = icmp ult i32 %232, %1
  br i1 %233, label %234, label %360

234:                                              ; preds = %229
  %235 = load i64, i64* %196, align 8
  %236 = add i64 %235, 1
  store i64 %236, i64* %196, align 8
  %237 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %211, i64 %210, i32 1
  %238 = load i64, i64* %237, align 8
  %239 = load i64, i64* %197, align 8
  %240 = add i64 %239, %238
  store i64 %240, i64* %197, align 8
  %241 = load i64, i64* %200, align 8
  br label %242

242:                                              ; preds = %234, %215
  %243 = phi i64 [ %240, %234 ], [ %208, %215 ]
  %244 = phi i64 [ %241, %234 ], [ %209, %215 ]
  %245 = add nuw i64 %210, 1
  %246 = icmp ult i64 %245, %244
  br i1 %246, label %207, label %247

247:                                              ; preds = %207, %242, %202
  %248 = phi i64 [ 0, %202 ], [ %243, %242 ], [ %208, %207 ]
  %249 = phi i64 [ %201, %202 ], [ %244, %242 ], [ %209, %207 ]
  %250 = phi i64 [ %199, %202 ], [ %245, %242 ], [ %210, %207 ]
  %251 = icmp ult i64 %250, %249
  %252 = and i1 %156, %251
  br i1 %252, label %253, label %298

253:                                              ; preds = %247
  %254 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %18, i64 0, i32 1
  %255 = add i64 %195, %4
  %256 = add i64 %255, -1
  %257 = sub i64 0, %3
  br label %258

258:                                              ; preds = %253, %293
  %259 = phi i64 [ %248, %253 ], [ %294, %293 ]
  %260 = phi i64 [ %249, %253 ], [ %295, %293 ]
  %261 = phi i64 [ %250, %253 ], [ %296, %293 ]
  %262 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %254, align 8
  %263 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %262, i64 %261, i32 0
  %264 = load i64, i64* %263, align 8
  %265 = xor i64 %264, %256
  %266 = and i64 %265, %257
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %298

268:                                              ; preds = %258
  %269 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %262, i64 %261, i32 2
  %270 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %269, align 8
  %271 = icmp eq %struct.VmaAllocation_T* %270, null
  br i1 %271, label %293, label %272

272:                                              ; preds = %268
  %273 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %270, i64 0, i32 5
  %274 = load i8, i8* %273, align 8
  %275 = icmp eq i8 %274, 1
  br i1 %275, label %276, label %360

276:                                              ; preds = %272
  %277 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %270, i64 0, i32 9, i32 0, i32 2
  %278 = load i8, i8* %277, align 8, !range !2
  %279 = icmp eq i8 %278, 0
  br i1 %279, label %360, label %280

280:                                              ; preds = %276
  %281 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %270, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %282 = load atomic i32, i32* %281 seq_cst, align 4
  %283 = add i32 %282, %2
  %284 = icmp ult i32 %283, %1
  br i1 %284, label %285, label %360

285:                                              ; preds = %280
  %286 = load i64, i64* %196, align 8
  %287 = add i64 %286, 1
  store i64 %287, i64* %196, align 8
  %288 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %262, i64 %261, i32 1
  %289 = load i64, i64* %288, align 8
  %290 = load i64, i64* %197, align 8
  %291 = add i64 %290, %289
  store i64 %291, i64* %197, align 8
  %292 = load i64, i64* %200, align 8
  br label %293

293:                                              ; preds = %285, %268
  %294 = phi i64 [ %291, %285 ], [ %259, %268 ]
  %295 = phi i64 [ %292, %285 ], [ %260, %268 ]
  %296 = add nuw i64 %261, 1
  %297 = icmp ult i64 %296, %295
  br i1 %297, label %258, label %298

298:                                              ; preds = %293, %258, %194, %247
  %299 = phi i64 [ %248, %247 ], [ 0, %194 ], [ %294, %293 ], [ %259, %258 ]
  %300 = phi i64 [ %249, %247 ], [ %201, %194 ], [ %295, %293 ], [ %260, %258 ]
  %301 = phi i64 [ %250, %247 ], [ %199, %194 ], [ %296, %293 ], [ %261, %258 ]
  %302 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %18, i64 0, i32 2
  %303 = icmp ne i64 %301, %300
  %304 = add i64 %195, %4
  %305 = icmp ugt i64 %304, %12
  %306 = or i1 %305, %303
  br i1 %306, label %307, label %315

307:                                              ; preds = %298
  %308 = icmp ult i64 %301, %300
  br i1 %308, label %309, label %360

309:                                              ; preds = %307
  %310 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %18, i64 0, i32 1
  %311 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %310, align 8
  %312 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %311, i64 %301, i32 0
  %313 = load i64, i64* %312, align 8
  %314 = icmp ugt i64 %304, %313
  br i1 %314, label %360, label %315

315:                                              ; preds = %298, %309
  %316 = icmp ult i64 %301, %300
  %317 = and i1 %156, %316
  br i1 %317, label %318, label %345

318:                                              ; preds = %315
  %319 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %18, i64 0, i32 1
  %320 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %319, align 8
  %321 = add i64 %304, -1
  %322 = sub i64 0, %3
  br label %323

323:                                              ; preds = %342, %318
  %324 = phi i64 [ %301, %318 ], [ %343, %342 ]
  %325 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %320, i64 %324, i32 0
  %326 = load i64, i64* %325, align 8
  %327 = xor i64 %326, %321
  %328 = and i64 %327, %322
  %329 = icmp eq i64 %328, 0
  br i1 %329, label %330, label %345

330:                                              ; preds = %323
  %331 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %320, i64 %324, i32 3
  %332 = load i32, i32* %331, align 8
  %333 = icmp slt i32 %332, %6
  %334 = select i1 %333, i32 %332, i32 %6
  %335 = select i1 %333, i32 %6, i32 %332
  switch i32 %334, label %360 [
    i32 0, label %342
    i32 5, label %342
    i32 2, label %341
    i32 3, label %336
    i32 4, label %339
  ]

336:                                              ; preds = %330
  %337 = add i32 %335, -3
  %338 = icmp ult i32 %337, 3
  br i1 %338, label %360, label %342

339:                                              ; preds = %330
  %340 = icmp eq i32 %335, 5
  br i1 %340, label %360, label %342

341:                                              ; preds = %330
  switch i32 %335, label %342 [
    i32 5, label %360
    i32 3, label %360
  ]

342:                                              ; preds = %341, %330, %330, %336, %339
  %343 = add i64 %324, 1
  %344 = icmp eq i64 %343, %300
  br i1 %344, label %345, label %323

345:                                              ; preds = %323, %342, %315
  %346 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %9, i64 0, i32 0
  store i64 %195, i64* %346, align 8
  %347 = load i64, i64* %302, align 8
  %348 = icmp ult i64 %301, %347
  br i1 %348, label %349, label %354

349:                                              ; preds = %345
  %350 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %18, i64 0, i32 1
  %351 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %350, align 8
  %352 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %351, i64 %301, i32 0
  %353 = load i64, i64* %352, align 8
  br label %354

354:                                              ; preds = %345, %349
  %355 = phi i64 [ %353, %349 ], [ %12, %345 ]
  %356 = sub i64 %355, %151
  %357 = sub i64 %356, %299
  %358 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %9, i64 0, i32 1
  store i64 %357, i64* %358, align 8
  %359 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %9, i64 0, i32 6
  store i32 3, i32* %359, align 8
  br label %360

360:                                              ; preds = %125, %125, %114, %120, %123, %225, %219, %229, %276, %272, %280, %341, %341, %330, %336, %339, %354, %128, %135, %307, %309
  %361 = phi i1 [ false, %309 ], [ false, %307 ], [ false, %135 ], [ true, %128 ], [ true, %354 ], [ false, %339 ], [ false, %336 ], [ false, %330 ], [ false, %341 ], [ false, %341 ], [ false, %280 ], [ false, %272 ], [ false, %276 ], [ false, %229 ], [ false, %219 ], [ false, %225 ], [ false, %123 ], [ false, %120 ], [ false, %114 ], [ false, %125 ], [ false, %125 ]
  ret i1 %361
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN23VmaBlockMetadata_Linear28MakeRequestedAllocationsLostEjjP20VmaAllocationRequest(%class.VmaBlockMetadata_Linear*, i32, i32, %struct.VmaAllocationRequest* nocapture readonly) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %3, i64 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %85, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 4
  %10 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 3
  %11 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 2
  %12 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 6
  %13 = load i64, i64* %12, align 8
  %14 = load i32, i32* %9, align 8
  %15 = icmp eq i32 %14, 0
  %16 = select i1 %15, %class.VmaVector.21* %11, %class.VmaVector.21* %10
  %17 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 5
  %18 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 1
  %19 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 8
  %20 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 7
  br label %21

21:                                               ; preds = %8, %78
  %22 = phi i64 [ %6, %8 ], [ %79, %78 ]
  %23 = phi i32 [ %14, %8 ], [ %80, %78 ]
  %24 = phi i64 [ 0, %8 ], [ %81, %78 ]
  %25 = phi i64 [ %13, %8 ], [ %82, %78 ]
  %26 = phi %class.VmaVector.21* [ %16, %8 ], [ %37, %78 ]
  %27 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %26, i64 0, i32 2
  %28 = load i64, i64* %27, align 8
  %29 = icmp eq i64 %25, %28
  br i1 %29, label %30, label %36

30:                                               ; preds = %21
  %31 = load i32, i32* %17, align 4
  %32 = icmp eq i32 %31, 1
  br i1 %32, label %33, label %36

33:                                               ; preds = %30
  %34 = icmp eq i32 %23, 0
  %35 = select i1 %34, %class.VmaVector.21* %10, %class.VmaVector.21* %11
  br label %36

36:                                               ; preds = %30, %33, %21
  %37 = phi %class.VmaVector.21* [ %35, %33 ], [ %26, %30 ], [ %26, %21 ]
  %38 = phi i64 [ 0, %33 ], [ 0, %30 ], [ %25, %21 ]
  %39 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %37, i64 0, i32 1
  %40 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %39, align 8
  %41 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %40, i64 %38, i32 3
  %42 = load i32, i32* %41, align 8
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %78, label %44

44:                                               ; preds = %36
  %45 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %40, i64 %38, i32 2
  %46 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %45, align 8
  %47 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %46, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = load atomic i32, i32* %47 seq_cst, align 4
  %49 = icmp ne i32 %48, -1
  %50 = add i32 %48, %2
  %51 = icmp ult i32 %50, %1
  %52 = and i1 %49, %51
  br i1 %52, label %53, label %85

53:                                               ; preds = %44, %57
  %54 = phi i32 [ %58, %57 ], [ %48, %44 ]
  %55 = cmpxchg weak i32* %47, i32 %54, i32 -1 seq_cst seq_cst
  %56 = extractvalue { i32, i1 } %55, 1
  br i1 %56, label %63, label %57

57:                                               ; preds = %53
  %58 = extractvalue { i32, i1 } %55, 0
  %59 = icmp ne i32 %58, -1
  %60 = add i32 %58, %2
  %61 = icmp ult i32 %60, %1
  %62 = and i1 %59, %61
  br i1 %62, label %53, label %85

63:                                               ; preds = %53
  store i32 0, i32* %41, align 8
  store %struct.VmaAllocation_T* null, %struct.VmaAllocation_T** %45, align 8
  %64 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %40, i64 %38, i32 1
  %65 = load i64, i64* %64, align 8
  %66 = load i64, i64* %18, align 8
  %67 = add i64 %66, %65
  store i64 %67, i64* %18, align 8
  %68 = load i32, i32* %9, align 8
  %69 = icmp eq i32 %68, 0
  %70 = select i1 %69, %class.VmaVector.21* %11, %class.VmaVector.21* %10
  %71 = icmp eq %class.VmaVector.21* %37, %70
  %72 = select i1 %71, i64* %20, i64* %19
  %73 = select i1 %71, i64* %20, i64* %19
  %74 = load i64, i64* %72, align 8
  %75 = add i64 %74, 1
  store i64 %75, i64* %73, align 8
  %76 = add i64 %24, 1
  %77 = load i64, i64* %5, align 8
  br label %78

78:                                               ; preds = %63, %36
  %79 = phi i64 [ %77, %63 ], [ %22, %36 ]
  %80 = phi i32 [ %68, %63 ], [ %23, %36 ]
  %81 = phi i64 [ %76, %63 ], [ %24, %36 ]
  %82 = add i64 %38, 1
  %83 = icmp ult i64 %81, %79
  br i1 %83, label %21, label %84

84:                                               ; preds = %78
  tail call void @_ZN23VmaBlockMetadata_Linear16CleanupAfterFreeEv(%class.VmaBlockMetadata_Linear* %0)
  br label %85

85:                                               ; preds = %44, %57, %84, %4
  %86 = phi i1 [ true, %4 ], [ true, %84 ], [ false, %57 ], [ false, %44 ]
  ret i1 %86
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23VmaBlockMetadata_Linear16CleanupAfterFreeEv(%class.VmaBlockMetadata_Linear*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  %5 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 3
  %6 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 2
  %7 = select i1 %4, %class.VmaVector.21* %6, %class.VmaVector.21* %5
  %8 = select i1 %4, %class.VmaVector.21* %5, %class.VmaVector.21* %6
  %9 = bitcast %class.VmaBlockMetadata_Linear* %0 to i1 (%class.VmaBlockMetadata_Linear*)***
  %10 = load i1 (%class.VmaBlockMetadata_Linear*)**, i1 (%class.VmaBlockMetadata_Linear*)*** %9, align 8
  %11 = getelementptr inbounds i1 (%class.VmaBlockMetadata_Linear*)*, i1 (%class.VmaBlockMetadata_Linear*)** %10, i64 7
  %12 = load i1 (%class.VmaBlockMetadata_Linear*)*, i1 (%class.VmaBlockMetadata_Linear*)** %11, align 8
  %13 = tail call zeroext i1 %12(%class.VmaBlockMetadata_Linear* %0) #15
  br i1 %13, label %14, label %17

14:                                               ; preds = %1
  tail call void @_ZN9VmaVectorI16VmaSuballocation15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.21* %7, i64 0, i1 zeroext false) #15
  tail call void @_ZN9VmaVectorI16VmaSuballocation15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.21* %8, i64 0, i1 zeroext false) #15
  %15 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 5
  %16 = bitcast i32* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %16, i8 0, i64 28, i1 false)
  br label %175

17:                                               ; preds = %1
  %18 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %7, i64 0, i32 2
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 6
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 7
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %7, i64 0, i32 1
  %25 = icmp ugt i64 %19, %21
  br i1 %25, label %26, label %37

26:                                               ; preds = %17, %33
  %27 = phi i64 [ %35, %33 ], [ %23, %17 ]
  %28 = phi i64 [ %34, %33 ], [ %21, %17 ]
  %29 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %24, align 8
  %30 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %29, i64 %28, i32 2
  %31 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %30, align 8
  %32 = icmp eq %struct.VmaAllocation_T* %31, null
  br i1 %32, label %33, label %37

33:                                               ; preds = %26
  %34 = add i64 %28, 1
  store i64 %34, i64* %20, align 8
  %35 = add i64 %27, -1
  store i64 %35, i64* %22, align 8
  %36 = icmp eq i64 %34, %19
  br i1 %36, label %37, label %26

37:                                               ; preds = %26, %33, %17
  %38 = phi i64 [ %23, %17 ], [ %27, %26 ], [ %35, %33 ]
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %54, label %40

40:                                               ; preds = %37, %48
  %41 = phi i64 [ %52, %48 ], [ %38, %37 ]
  %42 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %24, align 8
  %43 = load i64, i64* %18, align 8
  %44 = add i64 %43, -1
  %45 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %42, i64 %44, i32 2
  %46 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %45, align 8
  %47 = icmp eq %struct.VmaAllocation_T* %46, null
  br i1 %47, label %48, label %54

48:                                               ; preds = %40
  %49 = add i64 %41, -1
  store i64 %49, i64* %22, align 8
  %50 = load i64, i64* %18, align 8
  %51 = add i64 %50, -1
  tail call void @_ZN9VmaVectorI16VmaSuballocation15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.21* %7, i64 %51, i1 zeroext false) #15
  %52 = load i64, i64* %22, align 8
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %40

54:                                               ; preds = %40, %48, %37
  %55 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %8, i64 0, i32 1
  %56 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 8
  %57 = load i64, i64* %56, align 8
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %98, label %59

59:                                               ; preds = %54
  %60 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %8, i64 0, i32 2
  br label %61

61:                                               ; preds = %59, %69
  %62 = phi i64 [ %57, %59 ], [ %73, %69 ]
  %63 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %55, align 8
  %64 = load i64, i64* %60, align 8
  %65 = add i64 %64, -1
  %66 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %63, i64 %65, i32 2
  %67 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %66, align 8
  %68 = icmp eq %struct.VmaAllocation_T* %67, null
  br i1 %68, label %69, label %75

69:                                               ; preds = %61
  %70 = add i64 %62, -1
  store i64 %70, i64* %56, align 8
  %71 = load i64, i64* %60, align 8
  %72 = add i64 %71, -1
  tail call void @_ZN9VmaVectorI16VmaSuballocation15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.21* %8, i64 %72, i1 zeroext false) #15
  %73 = load i64, i64* %56, align 8
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %98, label %61

75:                                               ; preds = %61
  %76 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %8, i64 0, i32 2
  br label %77

77:                                               ; preds = %75, %95
  %78 = phi i64 [ %62, %75 ], [ %96, %95 ]
  %79 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %55, align 8
  %80 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %79, i64 0, i32 2
  %81 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %80, align 8
  %82 = icmp eq %struct.VmaAllocation_T* %81, null
  br i1 %82, label %83, label %98

83:                                               ; preds = %77
  %84 = add i64 %78, -1
  store i64 %84, i64* %56, align 8
  %85 = load i64, i64* %76, align 8
  %86 = add i64 %85, -1
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %95, label %88

88:                                               ; preds = %83
  %89 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %55, align 8
  %90 = bitcast %struct.VmaSuballocation* %89 to i8*
  %91 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %89, i64 1
  %92 = bitcast %struct.VmaSuballocation* %91 to i8*
  %93 = shl i64 %85, 5
  %94 = add i64 %93, -32
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %90, i8* align 8 %92, i64 %94, i1 false) #15
  br label %95

95:                                               ; preds = %83, %88
  tail call void @_ZN9VmaVectorI16VmaSuballocation15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.21* %8, i64 %86, i1 zeroext false) #15
  %96 = load i64, i64* %56, align 8
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %98, label %77

98:                                               ; preds = %69, %77, %95, %54
  %99 = load i64, i64* %20, align 8
  %100 = load i64, i64* %22, align 8
  %101 = add i64 %100, %99
  %102 = load i32, i32* %2, align 8
  %103 = icmp eq i32 %102, 0
  %104 = select i1 %103, %class.VmaVector.21* %6, %class.VmaVector.21* %5
  %105 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %104, i64 0, i32 2
  %106 = load i64, i64* %105, align 8
  %107 = icmp ugt i64 %106, 32
  br i1 %107, label %108, label %139

108:                                              ; preds = %98
  %109 = shl i64 %101, 1
  %110 = sub i64 %106, %101
  %111 = mul i64 %110, 3
  %112 = icmp ult i64 %109, %111
  br i1 %112, label %139, label %113

113:                                              ; preds = %108
  %114 = sub i64 %19, %21
  %115 = sub i64 %114, %23
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %121, label %117

117:                                              ; preds = %113, %136
  %118 = phi i64 [ %137, %136 ], [ 0, %113 ]
  %119 = phi i64 [ %128, %136 ], [ %99, %113 ]
  %120 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %24, align 8
  br label %123

121:                                              ; preds = %136, %113
  tail call void @_ZN9VmaVectorI16VmaSuballocation15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.21* %7, i64 %115, i1 zeroext false)
  %122 = bitcast i64* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %122, i8 0, i64 16, i1 false)
  br label %139

123:                                              ; preds = %123, %117
  %124 = phi i64 [ %128, %123 ], [ %119, %117 ]
  %125 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %120, i64 %124, i32 2
  %126 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %125, align 8
  %127 = icmp eq %struct.VmaAllocation_T* %126, null
  %128 = add i64 %124, 1
  br i1 %127, label %123, label %129

129:                                              ; preds = %123
  %130 = icmp eq i64 %118, %124
  br i1 %130, label %136, label %131

131:                                              ; preds = %129
  %132 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %120, i64 %124
  %133 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %120, i64 %118
  %134 = bitcast %struct.VmaSuballocation* %133 to i8*
  %135 = bitcast %struct.VmaSuballocation* %132 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %134, i8* align 8 %135, i64 32, i1 false)
  br label %136

136:                                              ; preds = %129, %131
  %137 = add nuw i64 %118, 1
  %138 = icmp eq i64 %137, %115
  br i1 %138, label %121, label %117

139:                                              ; preds = %108, %98, %121
  %140 = phi i64 [ %99, %108 ], [ %99, %98 ], [ 0, %121 ]
  %141 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %8, i64 0, i32 2
  %142 = load i64, i64* %141, align 8
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %144, label %146

144:                                              ; preds = %139
  %145 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 5
  store i32 0, i32* %145, align 4
  br label %146

146:                                              ; preds = %144, %139
  %147 = load i64, i64* %18, align 8
  %148 = icmp eq i64 %147, %140
  br i1 %148, label %149, label %175

149:                                              ; preds = %146
  tail call void @_ZN9VmaVectorI16VmaSuballocation15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.21* %7, i64 0, i1 zeroext false) #15
  store i64 0, i64* %20, align 8
  %150 = load i64, i64* %141, align 8
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %175, label %152

152:                                              ; preds = %149
  %153 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 5
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %154, 1
  br i1 %155, label %156, label %175

156:                                              ; preds = %152
  store i32 0, i32* %153, align 4
  %157 = load i64, i64* %56, align 8
  store i64 %157, i64* %22, align 8
  %158 = load i64, i64* %141, align 8
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %172, label %160

160:                                              ; preds = %156, %167
  %161 = phi i64 [ %168, %167 ], [ 0, %156 ]
  %162 = phi i64 [ %169, %167 ], [ %157, %156 ]
  %163 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %55, align 8
  %164 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %163, i64 %161, i32 2
  %165 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %164, align 8
  %166 = icmp eq %struct.VmaAllocation_T* %165, null
  br i1 %166, label %167, label %172

167:                                              ; preds = %160
  %168 = add nuw i64 %161, 1
  store i64 %168, i64* %20, align 8
  %169 = add i64 %162, -1
  store i64 %169, i64* %22, align 8
  %170 = load i64, i64* %141, align 8
  %171 = icmp ult i64 %168, %170
  br i1 %171, label %160, label %172

172:                                              ; preds = %160, %167, %156
  store i64 0, i64* %56, align 8
  %173 = load i32, i32* %2, align 8
  %174 = xor i32 %173, 1
  store i32 %174, i32* %2, align 8
  br label %175

175:                                              ; preds = %146, %172, %152, %149, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN23VmaBlockMetadata_Linear19MakeAllocationsLostEjj(%class.VmaBlockMetadata_Linear*, i32, i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 4
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  %7 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 3
  %8 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 2
  %9 = select i1 %6, %class.VmaVector.21* %8, %class.VmaVector.21* %7
  %10 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 6
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %9, i64 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = icmp ult i64 %11, %13
  br i1 %14, label %15, label %21

15:                                               ; preds = %3
  %16 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %9, i64 0, i32 1
  %17 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 7
  %18 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 1
  br label %33

19:                                               ; preds = %75
  %20 = load i32, i32* %4, align 8
  br label %21

21:                                               ; preds = %19, %3
  %22 = phi i32 [ %5, %3 ], [ %20, %19 ]
  %23 = phi i32 [ 0, %3 ], [ %76, %19 ]
  %24 = icmp eq i32 %22, 0
  %25 = select i1 %24, %class.VmaVector.21* %7, %class.VmaVector.21* %8
  %26 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %25, i64 0, i32 2
  %27 = load i64, i64* %26, align 8
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %79, label %29

29:                                               ; preds = %21
  %30 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %25, i64 0, i32 1
  %31 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 8
  %32 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 1
  br label %82

33:                                               ; preds = %75, %15
  %34 = phi i64 [ %11, %15 ], [ %77, %75 ]
  %35 = phi i32 [ 0, %15 ], [ %76, %75 ]
  %36 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %16, align 8
  %37 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %36, i64 %34, i32 3
  %38 = load i32, i32* %37, align 8
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %75, label %40

40:                                               ; preds = %33
  %41 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %36, i64 %34, i32 2
  %42 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %41, align 8
  %43 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %42, i64 0, i32 5
  %44 = load i8, i8* %43, align 8
  %45 = icmp eq i8 %44, 1
  br i1 %45, label %46, label %75

46:                                               ; preds = %40
  %47 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %42, i64 0, i32 9, i32 0, i32 2
  %48 = load i8, i8* %47, align 8, !range !2
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %75, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %42, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = load atomic i32, i32* %51 seq_cst, align 4
  %53 = icmp ne i32 %52, -1
  %54 = add i32 %52, %2
  %55 = icmp ult i32 %54, %1
  %56 = and i1 %53, %55
  br i1 %56, label %57, label %75

57:                                               ; preds = %50, %61
  %58 = phi i32 [ %62, %61 ], [ %52, %50 ]
  %59 = cmpxchg weak i32* %51, i32 %58, i32 -1 seq_cst seq_cst
  %60 = extractvalue { i32, i1 } %59, 1
  br i1 %60, label %67, label %61

61:                                               ; preds = %57
  %62 = extractvalue { i32, i1 } %59, 0
  %63 = icmp ne i32 %62, -1
  %64 = add i32 %62, %2
  %65 = icmp ult i32 %64, %1
  %66 = and i1 %63, %65
  br i1 %66, label %57, label %75

67:                                               ; preds = %57
  store i32 0, i32* %37, align 8
  store %struct.VmaAllocation_T* null, %struct.VmaAllocation_T** %41, align 8
  %68 = load i64, i64* %17, align 8
  %69 = add i64 %68, 1
  store i64 %69, i64* %17, align 8
  %70 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %36, i64 %34, i32 1
  %71 = load i64, i64* %70, align 8
  %72 = load i64, i64* %18, align 8
  %73 = add i64 %72, %71
  store i64 %73, i64* %18, align 8
  %74 = add i32 %35, 1
  br label %75

75:                                               ; preds = %61, %46, %50, %40, %33, %67
  %76 = phi i32 [ %74, %67 ], [ %35, %46 ], [ %35, %33 ], [ %35, %40 ], [ %35, %50 ], [ %35, %61 ]
  %77 = add nuw i64 %34, 1
  %78 = icmp eq i64 %77, %13
  br i1 %78, label %19, label %33

79:                                               ; preds = %124, %21
  %80 = phi i32 [ %23, %21 ], [ %125, %124 ]
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %129, label %128

82:                                               ; preds = %124, %29
  %83 = phi i64 [ 0, %29 ], [ %126, %124 ]
  %84 = phi i32 [ %23, %29 ], [ %125, %124 ]
  %85 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %30, align 8
  %86 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %85, i64 %83, i32 3
  %87 = load i32, i32* %86, align 8
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %124, label %89

89:                                               ; preds = %82
  %90 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %85, i64 %83, i32 2
  %91 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %90, align 8
  %92 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %91, i64 0, i32 5
  %93 = load i8, i8* %92, align 8
  %94 = icmp eq i8 %93, 1
  br i1 %94, label %95, label %124

95:                                               ; preds = %89
  %96 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %91, i64 0, i32 9, i32 0, i32 2
  %97 = load i8, i8* %96, align 8, !range !2
  %98 = icmp eq i8 %97, 0
  br i1 %98, label %124, label %99

99:                                               ; preds = %95
  %100 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %91, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %101 = load atomic i32, i32* %100 seq_cst, align 4
  %102 = icmp ne i32 %101, -1
  %103 = add i32 %101, %2
  %104 = icmp ult i32 %103, %1
  %105 = and i1 %102, %104
  br i1 %105, label %106, label %124

106:                                              ; preds = %99, %110
  %107 = phi i32 [ %111, %110 ], [ %101, %99 ]
  %108 = cmpxchg weak i32* %100, i32 %107, i32 -1 seq_cst seq_cst
  %109 = extractvalue { i32, i1 } %108, 1
  br i1 %109, label %116, label %110

110:                                              ; preds = %106
  %111 = extractvalue { i32, i1 } %108, 0
  %112 = icmp ne i32 %111, -1
  %113 = add i32 %111, %2
  %114 = icmp ult i32 %113, %1
  %115 = and i1 %112, %114
  br i1 %115, label %106, label %124

116:                                              ; preds = %106
  store i32 0, i32* %86, align 8
  store %struct.VmaAllocation_T* null, %struct.VmaAllocation_T** %90, align 8
  %117 = load i64, i64* %31, align 8
  %118 = add i64 %117, 1
  store i64 %118, i64* %31, align 8
  %119 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %85, i64 %83, i32 1
  %120 = load i64, i64* %119, align 8
  %121 = load i64, i64* %32, align 8
  %122 = add i64 %121, %120
  store i64 %122, i64* %32, align 8
  %123 = add i32 %84, 1
  br label %124

124:                                              ; preds = %110, %95, %99, %89, %82, %116
  %125 = phi i32 [ %123, %116 ], [ %84, %95 ], [ %84, %82 ], [ %84, %89 ], [ %84, %99 ], [ %84, %110 ]
  %126 = add nuw i64 %83, 1
  %127 = icmp eq i64 %126, %27
  br i1 %127, label %79, label %82

128:                                              ; preds = %79
  tail call void @_ZN23VmaBlockMetadata_Linear16CleanupAfterFreeEv(%class.VmaBlockMetadata_Linear* %0)
  br label %129

129:                                              ; preds = %79, %128
  ret i32 %80
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN23VmaBlockMetadata_Linear15CheckCorruptionEPKv(%class.VmaBlockMetadata_Linear* nocapture readonly, i8* nocapture readnone) unnamed_addr #5 align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23VmaBlockMetadata_Linear5AllocERK20VmaAllocationRequest20VmaSuballocationTypemP15VmaAllocation_T(%class.VmaBlockMetadata_Linear*, %struct.VmaAllocationRequest* nocapture readonly dereferenceable(64), i32, i64, %struct.VmaAllocation_T*) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %1, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %1, i64 0, i32 6
  %9 = load i32, i32* %8, align 8
  switch i32 %9, label %76 [
    i32 1, label %10
    i32 2, label %31
    i32 3, label %51
  ]

10:                                               ; preds = %5
  %11 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 0
  %14 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 2
  %15 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 3
  %16 = select i1 %13, %class.VmaVector.21* %15, %class.VmaVector.21* %14
  %17 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %16, i64 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = add i64 %18, 1
  tail call void @_ZN9VmaVectorI16VmaSuballocation15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.21* %16, i64 %19, i1 zeroext false) #15
  %20 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %16, i64 0, i32 1
  %21 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %20, align 8
  %22 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %21, i64 %18
  %23 = bitcast %struct.VmaSuballocation* %22 to i8*
  %24 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %22, i64 0, i32 0
  store i64 %7, i64* %24, align 8
  %25 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %21, i64 %18, i32 1
  store i64 %3, i64* %25, align 8
  %26 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %21, i64 %18, i32 2
  store %struct.VmaAllocation_T* %4, %struct.VmaAllocation_T** %26, align 8
  %27 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %21, i64 %18, i32 3
  store i32 %2, i32* %27, align 8
  %28 = getelementptr inbounds i8, i8* %23, i64 28
  %29 = bitcast i8* %28 to i32*
  store i32 -1431655766, i32* %29, align 4
  %30 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 5
  store i32 2, i32* %30, align 4
  br label %76

31:                                               ; preds = %5
  %32 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 4
  %33 = load i32, i32* %32, align 8
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 3
  %36 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 2
  %37 = select i1 %34, %class.VmaVector.21* %36, %class.VmaVector.21* %35
  %38 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %37, i64 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = add i64 %39, 1
  tail call void @_ZN9VmaVectorI16VmaSuballocation15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.21* %37, i64 %40, i1 zeroext false) #15
  %41 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %37, i64 0, i32 1
  %42 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %41, align 8
  %43 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %42, i64 %39
  %44 = bitcast %struct.VmaSuballocation* %43 to i8*
  %45 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %43, i64 0, i32 0
  store i64 %7, i64* %45, align 8
  %46 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %42, i64 %39, i32 1
  store i64 %3, i64* %46, align 8
  %47 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %42, i64 %39, i32 2
  store %struct.VmaAllocation_T* %4, %struct.VmaAllocation_T** %47, align 8
  %48 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %42, i64 %39, i32 3
  store i32 %2, i32* %48, align 8
  %49 = getelementptr inbounds i8, i8* %44, i64 28
  %50 = bitcast i8* %49 to i32*
  store i32 -1431655766, i32* %50, align 4
  br label %76

51:                                               ; preds = %5
  %52 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 4
  %53 = load i32, i32* %52, align 8
  %54 = icmp eq i32 %53, 0
  %55 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 3
  %56 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 2
  %57 = select i1 %54, %class.VmaVector.21* %55, %class.VmaVector.21* %56
  %58 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 5
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %51
  store i32 1, i32* %58, align 4
  br label %62

62:                                               ; preds = %51, %61
  %63 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %57, i64 0, i32 2
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, 1
  tail call void @_ZN9VmaVectorI16VmaSuballocation15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.21* %57, i64 %65, i1 zeroext false) #15
  %66 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %57, i64 0, i32 1
  %67 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %66, align 8
  %68 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %67, i64 %64
  %69 = bitcast %struct.VmaSuballocation* %68 to i8*
  %70 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %68, i64 0, i32 0
  store i64 %7, i64* %70, align 8
  %71 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %67, i64 %64, i32 1
  store i64 %3, i64* %71, align 8
  %72 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %67, i64 %64, i32 2
  store %struct.VmaAllocation_T* %4, %struct.VmaAllocation_T** %72, align 8
  %73 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %67, i64 %64, i32 3
  store i32 %2, i32* %73, align 8
  %74 = getelementptr inbounds i8, i8* %69, i64 28
  %75 = bitcast i8* %74 to i32*
  store i32 -1431655766, i32* %75, align 4
  br label %76

76:                                               ; preds = %5, %62, %31, %10
  %77 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 1
  %78 = load i64, i64* %77, align 8
  %79 = sub i64 %78, %3
  store i64 %79, i64* %77, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23VmaBlockMetadata_Linear4FreeEP15VmaAllocation_T(%class.VmaBlockMetadata_Linear*, %struct.VmaAllocation_T* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 8
  %5 = icmp eq i8 %4, 1
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  br label %9

9:                                                ; preds = %2, %6
  %10 = phi i64 [ %8, %6 ], [ 0, %2 ]
  %11 = bitcast %class.VmaBlockMetadata_Linear* %0 to void (%class.VmaBlockMetadata_Linear*, i64)***
  %12 = load void (%class.VmaBlockMetadata_Linear*, i64)**, void (%class.VmaBlockMetadata_Linear*, i64)*** %11, align 8
  %13 = getelementptr inbounds void (%class.VmaBlockMetadata_Linear*, i64)*, void (%class.VmaBlockMetadata_Linear*, i64)** %12, i64 17
  %14 = load void (%class.VmaBlockMetadata_Linear*, i64)*, void (%class.VmaBlockMetadata_Linear*, i64)** %13, align 8
  tail call void %14(%class.VmaBlockMetadata_Linear* %0, i64 %10) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23VmaBlockMetadata_Linear12FreeAtOffsetEm(%class.VmaBlockMetadata_Linear*, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  %6 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 3
  %7 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 2
  %8 = select i1 %5, %class.VmaVector.21* %7, %class.VmaVector.21* %6
  %9 = select i1 %5, %class.VmaVector.21* %6, %class.VmaVector.21* %7
  %10 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %8, i64 0, i32 2
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %31, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 6
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %8, i64 0, i32 1
  %17 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %16, align 8
  %18 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %17, i64 %15, i32 0
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, %1
  br i1 %20, label %21, label %31

21:                                               ; preds = %13
  %22 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %17, i64 %15, i32 3
  store i32 0, i32* %22, align 8
  %23 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %17, i64 %15, i32 2
  store %struct.VmaAllocation_T* null, %struct.VmaAllocation_T** %23, align 8
  %24 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %17, i64 %15, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = add i64 %27, %25
  store i64 %28, i64* %26, align 8
  %29 = load i64, i64* %14, align 8
  %30 = add i64 %29, 1
  store i64 %30, i64* %14, align 8
  tail call void @_ZN23VmaBlockMetadata_Linear16CleanupAfterFreeEv(%class.VmaBlockMetadata_Linear* %0)
  br label %178

31:                                               ; preds = %13, %2
  %32 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 5
  %33 = load i32, i32* %32, align 4
  switch i32 %33, label %66 [
    i32 1, label %34
    i32 2, label %34
    i32 0, label %51
  ]

34:                                               ; preds = %31, %31
  %35 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %9, i64 0, i32 1
  %36 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %35, align 8
  %37 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %9, i64 0, i32 2
  %38 = load i64, i64* %37, align 8
  %39 = add i64 %38, -1
  %40 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %36, i64 %39, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = icmp eq i64 %41, %1
  br i1 %42, label %43, label %66

43:                                               ; preds = %34
  %44 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %36, i64 %39, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 1
  %47 = load i64, i64* %46, align 8
  %48 = add i64 %47, %45
  store i64 %48, i64* %46, align 8
  %49 = load i64, i64* %37, align 8
  %50 = add i64 %49, -1
  tail call void @_ZN9VmaVectorI16VmaSuballocation15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.21* %9, i64 %50, i1 zeroext false) #15
  tail call void @_ZN23VmaBlockMetadata_Linear16CleanupAfterFreeEv(%class.VmaBlockMetadata_Linear* %0)
  br label %178

51:                                               ; preds = %31
  %52 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %8, i64 0, i32 1
  %53 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %52, align 8
  %54 = add i64 %11, -1
  %55 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %53, i64 %54, i32 0
  %56 = load i64, i64* %55, align 8
  %57 = icmp eq i64 %56, %1
  br i1 %57, label %58, label %66

58:                                               ; preds = %51
  %59 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %53, i64 %54, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = add i64 %62, %60
  store i64 %63, i64* %61, align 8
  %64 = load i64, i64* %10, align 8
  %65 = add i64 %64, -1
  tail call void @_ZN9VmaVectorI16VmaSuballocation15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.21* %8, i64 %65, i1 zeroext false) #15
  tail call void @_ZN23VmaBlockMetadata_Linear16CleanupAfterFreeEv(%class.VmaBlockMetadata_Linear* %0)
  br label %178

66:                                               ; preds = %51, %31, %34
  %67 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %8, i64 0, i32 1
  %68 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %67, align 8
  %69 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 6
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %68, i64 %70
  %72 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %68, i64 %11
  %73 = ptrtoint %struct.VmaSuballocation* %72 to i64
  %74 = ptrtoint %struct.VmaSuballocation* %71 to i64
  %75 = sub i64 %73, %74
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %91, label %77

77:                                               ; preds = %66
  %78 = ashr exact i64 %75, 5
  br label %79

79:                                               ; preds = %79, %77
  %80 = phi i64 [ 0, %77 ], [ %89, %79 ]
  %81 = phi i64 [ %78, %77 ], [ %88, %79 ]
  %82 = add i64 %81, %80
  %83 = lshr i64 %82, 1
  %84 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %71, i64 %83, i32 0
  %85 = load i64, i64* %84, align 8
  %86 = icmp ult i64 %85, %1
  %87 = add nuw i64 %83, 1
  %88 = select i1 %86, i64 %81, i64 %83
  %89 = select i1 %86, i64 %87, i64 %80
  %90 = icmp ult i64 %89, %88
  br i1 %90, label %79, label %91

91:                                               ; preds = %79, %66
  %92 = phi i64 [ 0, %66 ], [ %89, %79 ]
  %93 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %71, i64 %92
  %94 = icmp eq %struct.VmaSuballocation* %93, %72
  br i1 %94, label %112, label %95

95:                                               ; preds = %91
  %96 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %93, i64 0, i32 0
  %97 = load i64, i64* %96, align 8
  %98 = icmp eq i64 %97, %1
  %99 = select i1 %98, %struct.VmaSuballocation* %93, %struct.VmaSuballocation* %72
  %100 = icmp eq %struct.VmaSuballocation* %99, %72
  br i1 %100, label %112, label %101

101:                                              ; preds = %95
  %102 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %99, i64 0, i32 3
  store i32 0, i32* %102, align 8
  %103 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %99, i64 0, i32 2
  store %struct.VmaAllocation_T* null, %struct.VmaAllocation_T** %103, align 8
  %104 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 7
  %105 = load i64, i64* %104, align 8
  %106 = add i64 %105, 1
  store i64 %106, i64* %104, align 8
  %107 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %99, i64 0, i32 1
  %108 = load i64, i64* %107, align 8
  %109 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 1
  %110 = load i64, i64* %109, align 8
  %111 = add i64 %110, %108
  store i64 %111, i64* %109, align 8
  tail call void @_ZN23VmaBlockMetadata_Linear16CleanupAfterFreeEv(%class.VmaBlockMetadata_Linear* %0)
  br label %178

112:                                              ; preds = %91, %95
  %113 = icmp eq i32 %33, 0
  br i1 %113, label %178, label %114

114:                                              ; preds = %112
  %115 = icmp eq i32 %33, 1
  %116 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %9, i64 0, i32 1
  %117 = load %struct.VmaSuballocation*, %struct.VmaSuballocation** %116, align 8
  %118 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %9, i64 0, i32 2
  %119 = load i64, i64* %118, align 8
  %120 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %117, i64 %119
  %121 = shl nuw i64 %119, 5
  %122 = icmp eq i64 %119, 0
  br i1 %115, label %123, label %141

123:                                              ; preds = %114
  br i1 %122, label %138, label %124

124:                                              ; preds = %123
  %125 = ashr exact i64 %121, 5
  br label %126

126:                                              ; preds = %126, %124
  %127 = phi i64 [ 0, %124 ], [ %136, %126 ]
  %128 = phi i64 [ %125, %124 ], [ %135, %126 ]
  %129 = add i64 %128, %127
  %130 = lshr i64 %129, 1
  %131 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %117, i64 %130, i32 0
  %132 = load i64, i64* %131, align 8
  %133 = icmp ult i64 %132, %1
  %134 = add nuw i64 %130, 1
  %135 = select i1 %133, i64 %128, i64 %130
  %136 = select i1 %133, i64 %134, i64 %127
  %137 = icmp ult i64 %136, %135
  br i1 %137, label %126, label %138

138:                                              ; preds = %126, %123
  %139 = phi i64 [ 0, %123 ], [ %136, %126 ]
  %140 = icmp eq i64 %139, %119
  br i1 %140, label %178, label %159

141:                                              ; preds = %114
  br i1 %122, label %156, label %142

142:                                              ; preds = %141
  %143 = ashr exact i64 %121, 5
  br label %144

144:                                              ; preds = %144, %142
  %145 = phi i64 [ 0, %142 ], [ %154, %144 ]
  %146 = phi i64 [ %143, %142 ], [ %153, %144 ]
  %147 = add i64 %146, %145
  %148 = lshr i64 %147, 1
  %149 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %117, i64 %148, i32 0
  %150 = load i64, i64* %149, align 8
  %151 = icmp ugt i64 %150, %1
  %152 = add nuw i64 %148, 1
  %153 = select i1 %151, i64 %146, i64 %148
  %154 = select i1 %151, i64 %152, i64 %145
  %155 = icmp ult i64 %154, %153
  br i1 %155, label %144, label %156

156:                                              ; preds = %144, %141
  %157 = phi i64 [ 0, %141 ], [ %154, %144 ]
  %158 = icmp eq i64 %157, %119
  br i1 %158, label %178, label %159

159:                                              ; preds = %156, %138
  %160 = phi i64 [ %139, %138 ], [ %157, %156 ]
  %161 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %117, i64 %160
  %162 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %161, i64 0, i32 0
  %163 = load i64, i64* %162, align 8
  %164 = icmp eq i64 %163, %1
  %165 = select i1 %164, %struct.VmaSuballocation* %161, %struct.VmaSuballocation* %120
  %166 = icmp eq %struct.VmaSuballocation* %165, %120
  br i1 %166, label %178, label %167

167:                                              ; preds = %159
  %168 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %165, i64 0, i32 3
  store i32 0, i32* %168, align 8
  %169 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %165, i64 0, i32 2
  store %struct.VmaAllocation_T* null, %struct.VmaAllocation_T** %169, align 8
  %170 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 8
  %171 = load i64, i64* %170, align 8
  %172 = add i64 %171, 1
  store i64 %172, i64* %170, align 8
  %173 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %165, i64 0, i32 1
  %174 = load i64, i64* %173, align 8
  %175 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 1
  %176 = load i64, i64* %175, align 8
  %177 = add i64 %176, %174
  store i64 %177, i64* %175, align 8
  tail call void @_ZN23VmaBlockMetadata_Linear16CleanupAfterFreeEv(%class.VmaBlockMetadata_Linear* %0)
  br label %178

178:                                              ; preds = %156, %138, %159, %112, %167, %101, %58, %43, %21
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK23VmaBlockMetadata_Linear16ShouldCompact1stEv(%class.VmaBlockMetadata_Linear* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 6
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 7
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, %3
  %7 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 4
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  %10 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 3
  %11 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 2
  %12 = select i1 %9, %class.VmaVector.21* %11, %class.VmaVector.21* %10
  %13 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %12, i64 0, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = icmp ugt i64 %14, 32
  br i1 %15, label %16, label %21

16:                                               ; preds = %1
  %17 = shl i64 %6, 1
  %18 = sub i64 %14, %6
  %19 = mul i64 %18, 3
  %20 = icmp uge i64 %17, %19
  br label %21

21:                                               ; preds = %16, %1
  %22 = phi i1 [ false, %1 ], [ %20, %16 ]
  ret i1 %22
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9VmaVectorI16VmaSuballocation15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.21*, i64, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = mul i64 %5, 3
  %9 = lshr i64 %8, 1
  %10 = icmp ult i64 %8, 16
  %11 = select i1 %10, i64 8, i64 %9
  %12 = icmp ugt i64 %11, %1
  %13 = select i1 %12, i64 %11, i64 %1
  br label %16

14:                                               ; preds = %3
  %15 = select i1 %2, i64 %1, i64 %5
  br label %16

16:                                               ; preds = %14, %7
  %17 = phi i64 [ %13, %7 ], [ %15, %14 ]
  %18 = icmp eq i64 %17, %5
  br i1 %18, label %64, label %19

19:                                               ; preds = %16
  %20 = icmp eq i64 %17, 0
  br i1 %20, label %36, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %0, i64 0, i32 0, i32 0
  %23 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, align 8
  %24 = shl i64 %17, 5
  %25 = icmp eq %struct.VkAllocationCallbacks* %23, null
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 1
  %28 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %27, align 8
  %29 = icmp eq i8* (i8*, i64, i64, i32)* %28, null
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* %28(i8* %32, i64 %24, i64 8, i32 1) #15
  br label %36

34:                                               ; preds = %26, %21
  %35 = tail call noalias i8* @aligned_alloc(i64 8, i64 %24) #15
  br label %36

36:                                               ; preds = %34, %30, %19
  %37 = phi i8* [ null, %19 ], [ %33, %30 ], [ %35, %34 ]
  %38 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %0, i64 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = icmp ugt i64 %39, %1
  %41 = select i1 %40, i64 %1, i64 %39
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %0, i64 0, i32 1
  %45 = bitcast %struct.VmaSuballocation** %44 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = shl i64 %41, 5
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %46, i64 %47, i1 false)
  br label %48

48:                                               ; preds = %36, %43
  %49 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %0, i64 0, i32 0, i32 0
  %50 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %49, align 8
  %51 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %0, i64 0, i32 1
  %52 = bitcast %struct.VmaSuballocation** %51 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq %struct.VkAllocationCallbacks* %50, null
  br i1 %54, label %62, label %55

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 3
  %57 = load void (i8*, i8*)*, void (i8*, i8*)** %56, align 8
  %58 = icmp eq void (i8*, i8*)* %57, null
  br i1 %58, label %62, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  tail call void %57(i8* %61, i8* %53) #15
  br label %63

62:                                               ; preds = %55, %48
  tail call void @free(i8* %53) #15
  br label %63

63:                                               ; preds = %59, %62
  store i64 %17, i64* %4, align 8
  store i8* %37, i8** %52, align 8
  br label %64

64:                                               ; preds = %16, %63
  %65 = getelementptr inbounds %class.VmaVector.21, %class.VmaVector.21* %0, i64 0, i32 2
  store i64 %1, i64* %65, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22VmaBlockMetadata_BuddyC2EP14VmaAllocator_T(%class.VmaBlockMetadata_Buddy* nocapture, %struct.VmaAllocator_T*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV16VmaBlockMetadata, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 0, i32 1
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 0, i32 2
  %6 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 11
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  %9 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13
  %10 = select i1 %8, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %9
  store %struct.VkAllocationCallbacks* %10, %struct.VkAllocationCallbacks** %5, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV22VmaBlockMetadata_Buddy, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %11 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 3
  store %"struct.VmaBlockMetadata_Buddy::Node"* null, %"struct.VmaBlockMetadata_Buddy::Node"** %11, align 8
  %12 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 5
  %13 = bitcast i64* %12 to <2 x i64>*
  store <2 x i64> <i64 0, i64 1>, <2 x i64>* %13, align 8
  %14 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 7
  store i64 0, i64* %14, align 8
  %15 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 4, i64 0
  %16 = bitcast %struct.anon.25* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 480, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22VmaBlockMetadata_BuddyD2Ev(%class.VmaBlockMetadata_Buddy*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV22VmaBlockMetadata_Buddy, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 3
  %4 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %3, align 8
  tail call void @_ZN22VmaBlockMetadata_Buddy10DeleteNodeEPNS_4NodeE(%class.VmaBlockMetadata_Buddy* %0, %"struct.VmaBlockMetadata_Buddy::Node"* %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22VmaBlockMetadata_Buddy10DeleteNodeEPNS_4NodeE(%class.VmaBlockMetadata_Buddy* readonly, %"struct.VmaBlockMetadata_Buddy::Node"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %1, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 2
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %1, i64 0, i32 4, i32 0, i32 0
  %8 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %7, align 8
  %9 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %8, i64 0, i32 3
  %10 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %9, align 8
  tail call void @_ZN22VmaBlockMetadata_Buddy10DeleteNodeEPNS_4NodeE(%class.VmaBlockMetadata_Buddy* %0, %"struct.VmaBlockMetadata_Buddy::Node"* %10)
  %11 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %7, align 8
  tail call void @_ZN22VmaBlockMetadata_Buddy10DeleteNodeEPNS_4NodeE(%class.VmaBlockMetadata_Buddy* %0, %"struct.VmaBlockMetadata_Buddy::Node"* %11)
  br label %12

12:                                               ; preds = %6, %2
  %13 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 0, i32 2
  %14 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %13, align 8
  %15 = bitcast %"struct.VmaBlockMetadata_Buddy::Node"* %1 to i8*
  %16 = icmp eq %struct.VkAllocationCallbacks* %14, null
  br i1 %16, label %24, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %14, i64 0, i32 3
  %19 = load void (i8*, i8*)*, void (i8*, i8*)** %18, align 8
  %20 = icmp eq void (i8*, i8*)* %19, null
  br i1 %20, label %24, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %14, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  tail call void %19(i8* %23, i8* %15) #15
  br label %25

24:                                               ; preds = %17, %12
  tail call void @free(i8* %15) #15
  br label %25

25:                                               ; preds = %21, %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22VmaBlockMetadata_BuddyD0Ev(%class.VmaBlockMetadata_Buddy*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV22VmaBlockMetadata_Buddy, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 3
  %4 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %3, align 8
  tail call void @_ZN22VmaBlockMetadata_Buddy10DeleteNodeEPNS_4NodeE(%class.VmaBlockMetadata_Buddy* %0, %"struct.VmaBlockMetadata_Buddy::Node"* %4) #15
  %5 = bitcast %class.VmaBlockMetadata_Buddy* %0 to i8*
  tail call void @_ZdlPv(i8* %5) #17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22VmaBlockMetadata_Buddy4InitEm(%class.VmaBlockMetadata_Buddy* nocapture, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 0, i32 1
  store i64 %1, i64* %3, align 8
  %4 = lshr i64 %1, 1
  %5 = or i64 %4, %1
  %6 = lshr i64 %5, 2
  %7 = or i64 %6, %5
  %8 = lshr i64 %7, 4
  %9 = or i64 %8, %7
  %10 = lshr i64 %9, 8
  %11 = or i64 %10, %9
  %12 = lshr i64 %11, 16
  %13 = or i64 %12, %11
  %14 = lshr i64 %13, 32
  %15 = or i64 %14, %13
  %16 = lshr i64 %15, 1
  %17 = xor i64 %16, %15
  %18 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 1
  store i64 %17, i64* %18, align 8
  %19 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 7
  store i64 %17, i64* %19, align 8
  %20 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 2
  store i32 1, i32* %20, align 8
  %21 = icmp ugt i64 %17, 63
  br i1 %21, label %22, label %24

22:                                               ; preds = %2
  store i32 2, i32* %20, align 8
  %23 = icmp ugt i64 %17, 127
  br i1 %23, label %57, label %24

24:                                               ; preds = %109, %107, %105, %103, %101, %99, %97, %95, %93, %91, %89, %87, %85, %83, %81, %79, %77, %75, %73, %71, %69, %67, %65, %63, %61, %59, %57, %22, %2
  %25 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 0, i32 2
  %26 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %25, align 8
  %27 = icmp eq %struct.VkAllocationCallbacks* %26, null
  br i1 %27, label %36, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %26, i64 0, i32 1
  %30 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %29, align 8
  %31 = icmp eq i8* (i8*, i64, i64, i32)* %30, null
  br i1 %31, label %36, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %26, i64 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = tail call i8* %30(i8* %34, i64 48, i64 8, i32 1) #15
  br label %38

36:                                               ; preds = %28, %24
  %37 = tail call noalias i8* @aligned_alloc(i64 8, i64 48) #15
  br label %38

38:                                               ; preds = %32, %36
  %39 = phi i8* [ %35, %32 ], [ %37, %36 ]
  %40 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 3
  %41 = bitcast %"struct.VmaBlockMetadata_Buddy::Node"** %40 to i8**
  call void @llvm.memset.p0i8.i64(i8* align 8 %39, i8 0, i64 48, i1 false)
  store i8* %39, i8** %41, align 8
  %42 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 4, i64 0, i32 0
  %43 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %42, align 8
  %44 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %43, null
  %45 = getelementptr inbounds i8, i8* %39, i64 32
  br i1 %44, label %46, label %48

46:                                               ; preds = %38
  %47 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 4, i64 0, i32 1
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %45, i8 0, i64 16, i1 false) #15
  br label %53

48:                                               ; preds = %38
  %49 = bitcast i8* %45 to %"struct.VmaBlockMetadata_Buddy::Node"**
  store %"struct.VmaBlockMetadata_Buddy::Node"* null, %"struct.VmaBlockMetadata_Buddy::Node"** %49, align 8
  %50 = getelementptr inbounds i8, i8* %39, i64 40
  %51 = bitcast i8* %50 to %"struct.VmaBlockMetadata_Buddy::Node"**
  store %"struct.VmaBlockMetadata_Buddy::Node"* %43, %"struct.VmaBlockMetadata_Buddy::Node"** %51, align 8
  %52 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %43, i64 0, i32 4, i32 0, i32 0
  br label %53

53:                                               ; preds = %46, %48
  %54 = phi %"struct.VmaBlockMetadata_Buddy::Node"** [ %47, %46 ], [ %52, %48 ]
  %55 = bitcast %"struct.VmaBlockMetadata_Buddy::Node"** %54 to i8**
  store i8* %39, i8** %55, align 8
  %56 = bitcast %"struct.VmaBlockMetadata_Buddy::Node"** %42 to i8**
  store i8* %39, i8** %56, align 8
  ret void

57:                                               ; preds = %22
  store i32 3, i32* %20, align 8
  %58 = icmp ugt i64 %17, 255
  br i1 %58, label %59, label %24

59:                                               ; preds = %57
  store i32 4, i32* %20, align 8
  %60 = icmp ugt i64 %17, 511
  br i1 %60, label %61, label %24

61:                                               ; preds = %59
  store i32 5, i32* %20, align 8
  %62 = icmp ugt i64 %17, 1023
  br i1 %62, label %63, label %24

63:                                               ; preds = %61
  store i32 6, i32* %20, align 8
  %64 = icmp ugt i64 %17, 2047
  br i1 %64, label %65, label %24

65:                                               ; preds = %63
  store i32 7, i32* %20, align 8
  %66 = icmp ugt i64 %17, 4095
  br i1 %66, label %67, label %24

67:                                               ; preds = %65
  store i32 8, i32* %20, align 8
  %68 = icmp ugt i64 %17, 8191
  br i1 %68, label %69, label %24

69:                                               ; preds = %67
  store i32 9, i32* %20, align 8
  %70 = icmp ugt i64 %17, 16383
  br i1 %70, label %71, label %24

71:                                               ; preds = %69
  store i32 10, i32* %20, align 8
  %72 = icmp ugt i64 %17, 32767
  br i1 %72, label %73, label %24

73:                                               ; preds = %71
  store i32 11, i32* %20, align 8
  %74 = icmp ugt i64 %17, 65535
  br i1 %74, label %75, label %24

75:                                               ; preds = %73
  store i32 12, i32* %20, align 8
  %76 = icmp ugt i64 %17, 131071
  br i1 %76, label %77, label %24

77:                                               ; preds = %75
  store i32 13, i32* %20, align 8
  %78 = icmp ugt i64 %17, 262143
  br i1 %78, label %79, label %24

79:                                               ; preds = %77
  store i32 14, i32* %20, align 8
  %80 = icmp ugt i64 %17, 524287
  br i1 %80, label %81, label %24

81:                                               ; preds = %79
  store i32 15, i32* %20, align 8
  %82 = icmp ugt i64 %17, 1048575
  br i1 %82, label %83, label %24

83:                                               ; preds = %81
  store i32 16, i32* %20, align 8
  %84 = icmp ugt i64 %17, 2097151
  br i1 %84, label %85, label %24

85:                                               ; preds = %83
  store i32 17, i32* %20, align 8
  %86 = icmp ugt i64 %17, 4194303
  br i1 %86, label %87, label %24

87:                                               ; preds = %85
  store i32 18, i32* %20, align 8
  %88 = icmp ugt i64 %17, 8388607
  br i1 %88, label %89, label %24

89:                                               ; preds = %87
  store i32 19, i32* %20, align 8
  %90 = icmp ugt i64 %17, 16777215
  br i1 %90, label %91, label %24

91:                                               ; preds = %89
  store i32 20, i32* %20, align 8
  %92 = icmp ugt i64 %17, 33554431
  br i1 %92, label %93, label %24

93:                                               ; preds = %91
  store i32 21, i32* %20, align 8
  %94 = icmp ugt i64 %17, 67108863
  br i1 %94, label %95, label %24

95:                                               ; preds = %93
  store i32 22, i32* %20, align 8
  %96 = icmp ugt i64 %17, 134217727
  br i1 %96, label %97, label %24

97:                                               ; preds = %95
  store i32 23, i32* %20, align 8
  %98 = icmp ugt i64 %17, 268435455
  br i1 %98, label %99, label %24

99:                                               ; preds = %97
  store i32 24, i32* %20, align 8
  %100 = icmp ugt i64 %17, 536870911
  br i1 %100, label %101, label %24

101:                                              ; preds = %99
  store i32 25, i32* %20, align 8
  %102 = icmp ugt i64 %17, 1073741823
  br i1 %102, label %103, label %24

103:                                              ; preds = %101
  store i32 26, i32* %20, align 8
  %104 = icmp ugt i64 %17, 2147483647
  br i1 %104, label %105, label %24

105:                                              ; preds = %103
  store i32 27, i32* %20, align 8
  %106 = icmp ugt i64 %17, 4294967295
  br i1 %106, label %107, label %24

107:                                              ; preds = %105
  store i32 28, i32* %20, align 8
  %108 = icmp ugt i64 %17, 8589934591
  br i1 %108, label %109, label %24

109:                                              ; preds = %107
  %110 = icmp ugt i64 %17, 17179869183
  %111 = select i1 %110, i32 30, i32 29
  store i32 %111, i32* %20, align 8
  br label %24
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN22VmaBlockMetadata_Buddy18AddToFreeListFrontEjPNS_4NodeE(%class.VmaBlockMetadata_Buddy* nocapture, i32, %"struct.VmaBlockMetadata_Buddy::Node"*) local_unnamed_addr #6 align 2 {
  %4 = zext i32 %1 to i64
  %5 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 4, i64 %4, i32 0
  %6 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %5, align 8
  %7 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %6, null
  %8 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %2, i64 0, i32 4, i32 0
  br i1 %7, label %9, label %12

9:                                                ; preds = %3
  %10 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 4, i64 %4, i32 1
  %11 = bitcast %struct.anon* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 16, i1 false)
  br label %16

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.anon, %struct.anon* %8, i64 0, i32 0
  store %"struct.VmaBlockMetadata_Buddy::Node"* null, %"struct.VmaBlockMetadata_Buddy::Node"** %13, align 8
  %14 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %2, i64 0, i32 4, i32 0, i32 1
  store %"struct.VmaBlockMetadata_Buddy::Node"* %6, %"struct.VmaBlockMetadata_Buddy::Node"** %14, align 8
  %15 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %6, i64 0, i32 4, i32 0, i32 0
  br label %16

16:                                               ; preds = %12, %9
  %17 = phi %"struct.VmaBlockMetadata_Buddy::Node"** [ %15, %12 ], [ %10, %9 ]
  store %"struct.VmaBlockMetadata_Buddy::Node"* %2, %"struct.VmaBlockMetadata_Buddy::Node"** %17, align 8
  store %"struct.VmaBlockMetadata_Buddy::Node"* %2, %"struct.VmaBlockMetadata_Buddy::Node"** %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK22VmaBlockMetadata_Buddy8ValidateEv(%class.VmaBlockMetadata_Buddy*) unnamed_addr #0 align 2 {
  %2 = alloca %"struct.VmaBlockMetadata_Buddy::ValidationContext", align 8
  %3 = bitcast %"struct.VmaBlockMetadata_Buddy::ValidationContext"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #15
  %4 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::ValidationContext", %"struct.VmaBlockMetadata_Buddy::ValidationContext"* %2, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 24, i1 false) #15
  %5 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 3
  %6 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %5, align 8
  %7 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = call zeroext i1 @_ZNK22VmaBlockMetadata_Buddy12ValidateNodeERNS_17ValidationContextEPKNS_4NodeES4_jm(%class.VmaBlockMetadata_Buddy* %0, %"struct.VmaBlockMetadata_Buddy::ValidationContext"* nonnull dereferenceable(24) %2, %"struct.VmaBlockMetadata_Buddy::Node"* null, %"struct.VmaBlockMetadata_Buddy::Node"* %6, i32 0, i64 %8)
  br i1 %9, label %10, label %75

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::ValidationContext", %"struct.VmaBlockMetadata_Buddy::ValidationContext"* %2, i64 0, i32 0
  %12 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 5
  %13 = load i64, i64* %12, align 8
  %14 = load i64, i64* %11, align 8
  %15 = icmp eq i64 %13, %14
  br i1 %15, label %16, label %75

16:                                               ; preds = %10
  %17 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 7
  %18 = load i64, i64* %17, align 8
  %19 = load i64, i64* %4, align 8
  %20 = icmp eq i64 %18, %19
  br i1 %20, label %21, label %75

21:                                               ; preds = %16
  %22 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 2
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = zext i32 %23 to i64
  br label %32

27:                                               ; preds = %59
  %28 = icmp ult i32 %23, 30
  br i1 %28, label %29, label %75

29:                                               ; preds = %21, %27
  %30 = phi i32 [ %23, %27 ], [ 0, %21 ]
  %31 = zext i32 %30 to i64
  br label %65

32:                                               ; preds = %25, %59
  %33 = phi i64 [ 0, %25 ], [ %60, %59 ]
  %34 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 4, i64 %33, i32 0
  %35 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %34, align 8
  %36 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %35, null
  br i1 %36, label %59, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %35, i64 0, i32 4, i32 0, i32 0
  %39 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %38, align 8
  %40 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %39, null
  br i1 %40, label %41, label %75

41:                                               ; preds = %37
  %42 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 4, i64 %33, i32 1
  br label %43

43:                                               ; preds = %55, %41
  %44 = phi %"struct.VmaBlockMetadata_Buddy::Node"* [ %35, %41 ], [ %50, %55 ]
  %45 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %44, i64 0, i32 1
  %46 = load i32, i32* %45, align 8
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %75

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %44, i64 0, i32 4, i32 0, i32 1
  %50 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %49, align 8
  %51 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %50, null
  br i1 %51, label %52, label %55

52:                                               ; preds = %48
  %53 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %42, align 8
  %54 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %53, %44
  br i1 %54, label %59, label %75

55:                                               ; preds = %48
  %56 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %50, i64 0, i32 4, i32 0, i32 0
  %57 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %56, align 8
  %58 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %57, %44
  br i1 %58, label %43, label %75

59:                                               ; preds = %32, %52
  %60 = add nuw nsw i64 %33, 1
  %61 = icmp ult i64 %60, %26
  br i1 %61, label %32, label %27

62:                                               ; preds = %70
  %63 = trunc i64 %74 to i32
  %64 = icmp eq i32 %63, 30
  br i1 %64, label %75, label %65

65:                                               ; preds = %62, %29
  %66 = phi i64 [ %31, %29 ], [ %74, %62 ]
  %67 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 4, i64 %66, i32 0
  %68 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %67, align 8
  %69 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %68, null
  br i1 %69, label %70, label %75

70:                                               ; preds = %65
  %71 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 4, i64 %66, i32 1
  %72 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %71, align 8
  %73 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %72, null
  %74 = add nuw nsw i64 %66, 1
  br i1 %73, label %62, label %75

75:                                               ; preds = %37, %52, %55, %43, %70, %65, %62, %27, %16, %10, %1
  %76 = phi i1 [ false, %1 ], [ false, %10 ], [ false, %16 ], [ true, %27 ], [ true, %62 ], [ false, %70 ], [ false, %65 ], [ false, %43 ], [ false, %55 ], [ false, %52 ], [ false, %37 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #15
  ret i1 %76
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden zeroext i1 @_ZNK22VmaBlockMetadata_Buddy12ValidateNodeERNS_17ValidationContextEPKNS_4NodeES4_jm(%class.VmaBlockMetadata_Buddy*, %"struct.VmaBlockMetadata_Buddy::ValidationContext"* dereferenceable(24), %"struct.VmaBlockMetadata_Buddy::Node"* readnone, %"struct.VmaBlockMetadata_Buddy::Node"*, i32, i64) local_unnamed_addr #9 align 2 {
  %7 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = icmp ugt i32 %8, %4
  br i1 %9, label %10, label %75

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %3, i64 0, i32 2
  %12 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %11, align 8
  %13 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %12, %2
  br i1 %13, label %14, label %75

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %3, i64 0, i32 3
  %16 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %15, align 8
  %17 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %16, null
  %18 = icmp ne %"struct.VmaBlockMetadata_Buddy::Node"* %2, null
  %19 = xor i1 %18, %17
  br i1 %19, label %20, label %75

20:                                               ; preds = %14
  br i1 %17, label %25, label %21

21:                                               ; preds = %20
  %22 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %16, i64 0, i32 3
  %23 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %22, align 8
  %24 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %23, %3
  br i1 %24, label %25, label %75

25:                                               ; preds = %20, %21
  %26 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %3, i64 0, i32 1
  %27 = load i32, i32* %26, align 8
  switch i32 %27, label %75 [
    i32 0, label %28
    i32 1, label %35
    i32 2, label %50
  ]

28:                                               ; preds = %25
  %29 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::ValidationContext", %"struct.VmaBlockMetadata_Buddy::ValidationContext"* %1, i64 0, i32 1
  %30 = bitcast i64* %29 to <2 x i64>*
  %31 = load <2 x i64>, <2 x i64>* %30, align 8
  %32 = insertelement <2 x i64> <i64 1, i64 undef>, i64 %5, i32 1
  %33 = add <2 x i64> %31, %32
  %34 = bitcast i64* %29 to <2 x i64>*
  store <2 x i64> %33, <2 x i64>* %34, align 8
  br label %74

35:                                               ; preds = %25
  %36 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::ValidationContext", %"struct.VmaBlockMetadata_Buddy::ValidationContext"* %1, i64 0, i32 0
  %37 = load i64, i64* %36, align 8
  %38 = add i64 %37, 1
  store i64 %38, i64* %36, align 8
  %39 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %3, i64 0, i32 4
  %40 = bitcast %union.anon.22* %39 to %struct.VmaAllocation_T**
  %41 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %40, align 8
  %42 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %41, i64 0, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = sub i64 %5, %43
  %45 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::ValidationContext", %"struct.VmaBlockMetadata_Buddy::ValidationContext"* %1, i64 0, i32 2
  %46 = load i64, i64* %45, align 8
  %47 = add i64 %44, %46
  store i64 %47, i64* %45, align 8
  %48 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %40, align 8
  %49 = icmp eq %struct.VmaAllocation_T* %48, null
  br i1 %49, label %75, label %74

50:                                               ; preds = %25
  %51 = add nuw i32 %4, 1
  %52 = lshr i64 %5, 1
  %53 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %3, i64 0, i32 4, i32 0, i32 0
  %54 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %53, align 8
  %55 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %54, null
  br i1 %55, label %75, label %56

56:                                               ; preds = %50
  %57 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %54, i64 0, i32 0
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %3, i64 0, i32 0
  %60 = load i64, i64* %59, align 8
  %61 = icmp eq i64 %58, %60
  br i1 %61, label %62, label %75

62:                                               ; preds = %56
  %63 = tail call zeroext i1 @_ZNK22VmaBlockMetadata_Buddy12ValidateNodeERNS_17ValidationContextEPKNS_4NodeES4_jm(%class.VmaBlockMetadata_Buddy* %0, %"struct.VmaBlockMetadata_Buddy::ValidationContext"* dereferenceable(24) %1, %"struct.VmaBlockMetadata_Buddy::Node"* %3, %"struct.VmaBlockMetadata_Buddy::Node"* nonnull %54, i32 %51, i64 %52)
  br i1 %63, label %64, label %75

64:                                               ; preds = %62
  %65 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %54, i64 0, i32 3
  %66 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %65, align 8
  %67 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %66, i64 0, i32 0
  %68 = load i64, i64* %67, align 8
  %69 = load i64, i64* %59, align 8
  %70 = add i64 %69, %52
  %71 = icmp eq i64 %68, %70
  br i1 %71, label %72, label %75

72:                                               ; preds = %64
  %73 = tail call zeroext i1 @_ZNK22VmaBlockMetadata_Buddy12ValidateNodeERNS_17ValidationContextEPKNS_4NodeES4_jm(%class.VmaBlockMetadata_Buddy* %0, %"struct.VmaBlockMetadata_Buddy::ValidationContext"* dereferenceable(24) %1, %"struct.VmaBlockMetadata_Buddy::Node"* %3, %"struct.VmaBlockMetadata_Buddy::Node"* %66, i32 %51, i64 %52)
  br i1 %73, label %74, label %75

74:                                               ; preds = %72, %35, %28
  br label %75

75:                                               ; preds = %72, %64, %62, %56, %50, %25, %35, %21, %14, %10, %6, %74
  %76 = phi i1 [ true, %74 ], [ false, %6 ], [ false, %10 ], [ false, %14 ], [ false, %21 ], [ false, %35 ], [ false, %25 ], [ false, %50 ], [ false, %56 ], [ false, %62 ], [ false, %64 ], [ false, %72 ]
  ret i1 %76
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK22VmaBlockMetadata_Buddy21GetUnusedRangeSizeMaxEv(%class.VmaBlockMetadata_Buddy* nocapture readonly) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %20, label %5

5:                                                ; preds = %1
  %6 = zext i32 %3 to i64
  br label %9

7:                                                ; preds = %9
  %8 = icmp ult i64 %14, %6
  br i1 %8, label %9, label %20

9:                                                ; preds = %5, %7
  %10 = phi i64 [ 0, %5 ], [ %14, %7 ]
  %11 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 4, i64 %10, i32 0
  %12 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %11, align 8
  %13 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %12, null
  %14 = add nuw nsw i64 %10, 1
  br i1 %13, label %7, label %15

15:                                               ; preds = %9
  %16 = and i64 %10, 4294967295
  %17 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = lshr i64 %18, %16
  br label %20

20:                                               ; preds = %7, %1, %15
  %21 = phi i64 [ %19, %15 ], [ 0, %1 ], [ 0, %7 ]
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK22VmaBlockMetadata_Buddy22CalcAllocationStatInfoER11VmaStatInfo(%class.VmaBlockMetadata_Buddy* readonly, %struct.VmaStatInfo* dereferenceable(80)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 0
  store i32 1, i32* %8, align 8
  %9 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 2
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 1
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 4
  %12 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 3
  %13 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 10
  store i64 0, i64* %13, align 8
  %14 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 7
  store i64 0, i64* %14, align 8
  %15 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 8
  %16 = bitcast i64* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 16, i1 false)
  %17 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 5
  %18 = bitcast i64* %15 to <2 x i64>*
  store <2 x i64> <i64 -1, i64 0>, <2 x i64>* %18, align 8
  %19 = bitcast i64* %17 to <2 x i64>*
  store <2 x i64> <i64 -1, i64 0>, <2 x i64>* %19, align 8
  %20 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 3
  %21 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %20, align 8
  %22 = load i64, i64* %5, align 8
  tail call void @_ZNK22VmaBlockMetadata_Buddy26CalcAllocationStatInfoNodeER11VmaStatInfoPKNS_4NodeEm(%class.VmaBlockMetadata_Buddy* %0, %struct.VmaStatInfo* dereferenceable(80) %1, %"struct.VmaBlockMetadata_Buddy::Node"* %21, i64 %22)
  %23 = icmp eq i64 %7, 0
  br i1 %23, label %35, label %24

24:                                               ; preds = %2
  %25 = load i32, i32* %9, align 8
  %26 = add i32 %25, 1
  store i32 %26, i32* %9, align 8
  %27 = load i64, i64* %11, align 8
  %28 = add i64 %27, %7
  store i64 %28, i64* %11, align 8
  %29 = load i64, i64* %13, align 8
  %30 = icmp ult i64 %29, %7
  %31 = select i1 %30, i64 %7, i64 %29
  store i64 %31, i64* %13, align 8
  %32 = load i64, i64* %15, align 8
  %33 = icmp ult i64 %7, %32
  %34 = select i1 %33, i64 %7, i64 %32
  store i64 %34, i64* %15, align 8
  br label %35

35:                                               ; preds = %2, %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK22VmaBlockMetadata_Buddy26CalcAllocationStatInfoNodeER11VmaStatInfoPKNS_4NodeEm(%class.VmaBlockMetadata_Buddy* readnone, %struct.VmaStatInfo* dereferenceable(80), %"struct.VmaBlockMetadata_Buddy::Node"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  br label %5

5:                                                ; preds = %62, %4
  %6 = phi %"struct.VmaBlockMetadata_Buddy::Node"* [ %2, %4 ], [ %67, %62 ]
  %7 = phi i64 [ %3, %4 ], [ %63, %62 ]
  %8 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %6, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  switch i32 %9, label %68 [
    i32 0, label %10
    i32 1, label %25
    i32 2, label %62
  ]

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = add i32 %12, 1
  store i32 %13, i32* %11, align 8
  %14 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 4
  %15 = load i64, i64* %14, align 8
  %16 = add i64 %15, %7
  store i64 %16, i64* %14, align 8
  %17 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 10
  %18 = load i64, i64* %17, align 8
  %19 = icmp ult i64 %18, %7
  %20 = select i1 %19, i64 %7, i64 %18
  store i64 %20, i64* %17, align 8
  %21 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 8
  %22 = load i64, i64* %21, align 8
  %23 = icmp ult i64 %22, %7
  %24 = select i1 %23, i64 %7, i64 %22
  store i64 %24, i64* %21, align 8
  br label %68

25:                                               ; preds = %5
  %26 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %6, i64 0, i32 4
  %27 = bitcast %union.anon.22* %26 to %struct.VmaAllocation_T**
  %28 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %27, align 8
  %29 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %28, i64 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = add i32 %32, 1
  store i32 %33, i32* %31, align 4
  %34 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 3
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %35, %30
  store i64 %36, i64* %34, align 8
  %37 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 7
  %38 = load i64, i64* %37, align 8
  %39 = icmp ult i64 %38, %30
  %40 = select i1 %39, i64 %30, i64 %38
  store i64 %40, i64* %37, align 8
  %41 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 5
  %42 = load i64, i64* %41, align 8
  %43 = icmp ult i64 %42, %30
  %44 = select i1 %43, i64 %30, i64 %42
  store i64 %44, i64* %41, align 8
  %45 = sub i64 %7, %30
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %68, label %47

47:                                               ; preds = %25
  %48 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 2
  %49 = load i32, i32* %48, align 8
  %50 = add i32 %49, 1
  store i32 %50, i32* %48, align 8
  %51 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = add i64 %52, %45
  store i64 %53, i64* %51, align 8
  %54 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 10
  %55 = load i64, i64* %54, align 8
  %56 = icmp ult i64 %55, %45
  %57 = select i1 %56, i64 %45, i64 %55
  store i64 %57, i64* %54, align 8
  %58 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 8
  %59 = load i64, i64* %58, align 8
  %60 = icmp ult i64 %59, %45
  %61 = select i1 %60, i64 %45, i64 %59
  store i64 %61, i64* %58, align 8
  br label %68

62:                                               ; preds = %5
  %63 = lshr i64 %7, 1
  %64 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %6, i64 0, i32 4, i32 0, i32 0
  %65 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %64, align 8
  tail call void @_ZNK22VmaBlockMetadata_Buddy26CalcAllocationStatInfoNodeER11VmaStatInfoPKNS_4NodeEm(%class.VmaBlockMetadata_Buddy* %0, %struct.VmaStatInfo* dereferenceable(80) %1, %"struct.VmaBlockMetadata_Buddy::Node"* %65, i64 %63)
  %66 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %65, i64 0, i32 3
  %67 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %66, align 8
  br label %5

68:                                               ; preds = %5, %47, %25, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK22VmaBlockMetadata_Buddy12AddPoolStatsER12VmaPoolStats(%class.VmaBlockMetadata_Buddy*, %struct.VmaPoolStats* nocapture dereferenceable(48)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, %4
  store i64 %10, i64* %8, align 8
  %11 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 7
  %12 = load i64, i64* %11, align 8
  %13 = add i64 %12, %7
  %14 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = add i64 %13, %15
  store i64 %16, i64* %14, align 8
  %17 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 5
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 2
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, %18
  store i64 %21, i64* %19, align 8
  %22 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 6
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 3
  %25 = load i64, i64* %24, align 8
  %26 = add i64 %25, %23
  store i64 %26, i64* %24, align 8
  %27 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 4
  %28 = bitcast %class.VmaBlockMetadata_Buddy* %0 to i64 (%class.VmaBlockMetadata_Buddy*)***
  %29 = load i64 (%class.VmaBlockMetadata_Buddy*)**, i64 (%class.VmaBlockMetadata_Buddy*)*** %28, align 8
  %30 = getelementptr inbounds i64 (%class.VmaBlockMetadata_Buddy*)*, i64 (%class.VmaBlockMetadata_Buddy*)** %29, i64 6
  %31 = load i64 (%class.VmaBlockMetadata_Buddy*)*, i64 (%class.VmaBlockMetadata_Buddy*)** %30, align 8
  %32 = tail call i64 %31(%class.VmaBlockMetadata_Buddy* %0) #15
  %33 = load i64, i64* %27, align 8
  %34 = icmp ult i64 %33, %32
  %35 = select i1 %34, i64 %32, i64 %33
  store i64 %35, i64* %27, align 8
  %36 = icmp eq i64 %7, 0
  br i1 %36, label %40, label %37

37:                                               ; preds = %2
  %38 = load i64, i64* %24, align 8
  %39 = add i64 %38, 1
  store i64 %39, i64* %24, align 8
  br label %40

40:                                               ; preds = %2, %37
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK22VmaBlockMetadata_Buddy16PrintDetailedMapER13VmaJsonWriter(%class.VmaBlockMetadata_Buddy*, %class.VmaJsonWriter* dereferenceable(48)) unnamed_addr #0 align 2 {
  %3 = alloca %struct.VmaStatInfo, align 8
  %4 = bitcast %struct.VmaStatInfo* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %4) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 80, i1 false)
  %5 = bitcast %class.VmaBlockMetadata_Buddy* %0 to void (%class.VmaBlockMetadata_Buddy*, %struct.VmaStatInfo*)***
  %6 = load void (%class.VmaBlockMetadata_Buddy*, %struct.VmaStatInfo*)**, void (%class.VmaBlockMetadata_Buddy*, %struct.VmaStatInfo*)*** %5, align 8
  %7 = getelementptr inbounds void (%class.VmaBlockMetadata_Buddy*, %struct.VmaStatInfo*)*, void (%class.VmaBlockMetadata_Buddy*, %struct.VmaStatInfo*)** %6, i64 8
  %8 = load void (%class.VmaBlockMetadata_Buddy*, %struct.VmaStatInfo*)*, void (%class.VmaBlockMetadata_Buddy*, %struct.VmaStatInfo*)** %7, align 8
  call void %8(%class.VmaBlockMetadata_Buddy* %0, %struct.VmaStatInfo* nonnull dereferenceable(80) %3) #15
  %9 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 0
  %10 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %3, i64 0, i32 4
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %3, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %3, i64 0, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  call void @_ZNK16VmaBlockMetadata22PrintDetailedMap_BeginER13VmaJsonWritermmm(%class.VmaBlockMetadata* %9, %class.VmaJsonWriter* dereferenceable(48) %1, i64 %11, i64 %14, i64 %17)
  %18 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 3
  %19 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %18, align 8
  %20 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 1
  %21 = load i64, i64* %20, align 8
  call void @_ZNK22VmaBlockMetadata_Buddy20PrintDetailedMapNodeER13VmaJsonWriterPKNS_4NodeEm(%class.VmaBlockMetadata_Buddy* %0, %class.VmaJsonWriter* dereferenceable(48) %1, %"struct.VmaBlockMetadata_Buddy::Node"* %19, i64 %21)
  %22 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = load i64, i64* %20, align 8
  %25 = sub i64 %23, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %28, label %27

27:                                               ; preds = %2
  call void @_ZNK16VmaBlockMetadata28PrintDetailedMap_UnusedRangeER13VmaJsonWritermm(%class.VmaBlockMetadata* undef, %class.VmaJsonWriter* dereferenceable(48) %1, i64 %24, i64 %25)
  br label %28

28:                                               ; preds = %2, %27
  call void @_ZN13VmaJsonWriter8EndArrayEv(%class.VmaJsonWriter* %1) #15
  call void @_ZN13VmaJsonWriter9EndObjectEv(%class.VmaJsonWriter* %1) #15
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %4) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK22VmaBlockMetadata_Buddy20PrintDetailedMapNodeER13VmaJsonWriterPKNS_4NodeEm(%class.VmaBlockMetadata_Buddy* readnone, %class.VmaJsonWriter* dereferenceable(48), %"struct.VmaBlockMetadata_Buddy::Node"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  br label %5

5:                                                ; preds = %27, %4
  %6 = phi %"struct.VmaBlockMetadata_Buddy::Node"* [ %2, %4 ], [ %32, %27 ]
  %7 = phi i64 [ %3, %4 ], [ %28, %27 ]
  %8 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %6, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  switch i32 %9, label %33 [
    i32 0, label %10
    i32 1, label %13
    i32 2, label %27
  ]

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %6, i64 0, i32 0
  %12 = load i64, i64* %11, align 8
  tail call void @_ZNK16VmaBlockMetadata28PrintDetailedMap_UnusedRangeER13VmaJsonWritermm(%class.VmaBlockMetadata* undef, %class.VmaJsonWriter* dereferenceable(48) %1, i64 %12, i64 %7)
  br label %33

13:                                               ; preds = %5
  %14 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %6, i64 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %6, i64 0, i32 4
  %17 = bitcast %union.anon.22* %16 to %struct.VmaAllocation_T**
  %18 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %17, align 8
  tail call void @_ZNK16VmaBlockMetadata27PrintDetailedMap_AllocationER13VmaJsonWritermP15VmaAllocation_T(%class.VmaBlockMetadata* undef, %class.VmaJsonWriter* dereferenceable(48) %1, i64 %15, %struct.VmaAllocation_T* %18)
  %19 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %17, align 8
  %20 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %19, i64 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = icmp ugt i64 %7, %21
  br i1 %22, label %23, label %33

23:                                               ; preds = %13
  %24 = load i64, i64* %14, align 8
  %25 = add i64 %24, %21
  %26 = sub i64 %7, %21
  tail call void @_ZNK16VmaBlockMetadata28PrintDetailedMap_UnusedRangeER13VmaJsonWritermm(%class.VmaBlockMetadata* undef, %class.VmaJsonWriter* dereferenceable(48) %1, i64 %25, i64 %26)
  br label %33

27:                                               ; preds = %5
  %28 = lshr i64 %7, 1
  %29 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %6, i64 0, i32 4, i32 0, i32 0
  %30 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %29, align 8
  tail call void @_ZNK22VmaBlockMetadata_Buddy20PrintDetailedMapNodeER13VmaJsonWriterPKNS_4NodeEm(%class.VmaBlockMetadata_Buddy* %0, %class.VmaJsonWriter* dereferenceable(48) %1, %"struct.VmaBlockMetadata_Buddy::Node"* %30, i64 %28)
  %31 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %30, i64 0, i32 3
  %32 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %31, align 8
  br label %5

33:                                               ; preds = %5, %13, %23, %10
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN22VmaBlockMetadata_Buddy23CreateAllocationRequestEjjmmmb20VmaSuballocationTypebjP20VmaAllocationRequest(%class.VmaBlockMetadata_Buddy* nocapture readonly, i32, i32, i64, i64, i64, i1 zeroext, i32, i1 zeroext, i32, %struct.VmaAllocationRequest* nocapture) unnamed_addr #6 align 2 {
  switch i32 %7, label %17 [
    i32 5, label %12
    i32 3, label %12
    i32 1, label %12
  ]

12:                                               ; preds = %11, %11, %11
  %13 = icmp ult i64 %5, %3
  %14 = select i1 %13, i64 %3, i64 %5
  %15 = icmp ult i64 %4, %3
  %16 = select i1 %15, i64 %3, i64 %4
  br label %17

17:                                               ; preds = %11, %12
  %18 = phi i64 [ %4, %11 ], [ %16, %12 ]
  %19 = phi i64 [ %5, %11 ], [ %14, %12 ]
  %20 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = icmp ugt i64 %18, %21
  br i1 %22, label %69, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 2
  br label %25

25:                                               ; preds = %30, %23
  %26 = phi i32 [ 0, %23 ], [ %31, %30 ]
  %27 = phi i64 [ %21, %23 ], [ %28, %30 ]
  %28 = lshr i64 %27, 1
  %29 = icmp ult i64 %28, %18
  br i1 %29, label %36, label %30

30:                                               ; preds = %25
  %31 = add nuw i32 %26, 1
  %32 = load i32, i32* %24, align 8
  %33 = icmp ult i32 %31, %32
  br i1 %33, label %25, label %34

34:                                               ; preds = %30
  %35 = icmp eq i32 %26, -1
  br i1 %35, label %69, label %36

36:                                               ; preds = %25, %34
  %37 = zext i32 %26 to i64
  br label %41

38:                                               ; preds = %46, %41
  %39 = icmp eq i64 %42, 0
  %40 = add nsw i64 %42, -1
  br i1 %39, label %69, label %41

41:                                               ; preds = %36, %38
  %42 = phi i64 [ %37, %36 ], [ %40, %38 ]
  %43 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 4, i64 %42, i32 0
  %44 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %43, align 8
  %45 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %44, null
  br i1 %45, label %38, label %50

46:                                               ; preds = %50
  %47 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %51, i64 0, i32 4, i32 0, i32 1
  %48 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %47, align 8
  %49 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %48, null
  br i1 %49, label %38, label %50

50:                                               ; preds = %41, %46
  %51 = phi %"struct.VmaBlockMetadata_Buddy::Node"* [ %48, %46 ], [ %44, %41 ]
  %52 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %51, i64 0, i32 0
  %53 = load i64, i64* %52, align 8
  %54 = urem i64 %53, %19
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %56, label %46

56:                                               ; preds = %50
  %57 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %51, i64 0, i32 0
  %58 = and i64 %42, 4294967295
  %59 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 6
  store i32 0, i32* %59, align 8
  %60 = load i64, i64* %57, align 8
  %61 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 0
  store i64 %60, i64* %61, align 8
  %62 = load i64, i64* %20, align 8
  %63 = lshr i64 %62, %58
  %64 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 1
  store i64 %63, i64* %64, align 8
  %65 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 2
  store i64 0, i64* %65, align 8
  %66 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 4
  store i64 0, i64* %66, align 8
  %67 = inttoptr i64 %58 to i8*
  %68 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 5
  store i8* %67, i8** %68, align 8
  br label %69

69:                                               ; preds = %38, %34, %56, %17
  %70 = phi i1 [ false, %17 ], [ true, %56 ], [ false, %34 ], [ false, %38 ]
  ret i1 %70
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK22VmaBlockMetadata_Buddy16AllocSizeToLevelEm(%class.VmaBlockMetadata_Buddy* nocapture readonly, i64) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 2
  br label %6

6:                                                ; preds = %11, %2
  %7 = phi i32 [ 0, %2 ], [ %12, %11 ]
  %8 = phi i64 [ %4, %2 ], [ %9, %11 ]
  %9 = lshr i64 %8, 1
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %15, label %11

11:                                               ; preds = %6
  %12 = add nuw i32 %7, 1
  %13 = load i32, i32* %5, align 8
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %6, label %15

15:                                               ; preds = %6, %11
  ret i32 %7
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN22VmaBlockMetadata_Buddy28MakeRequestedAllocationsLostEjjP20VmaAllocationRequest(%class.VmaBlockMetadata_Buddy* nocapture readnone, i32, i32, %struct.VmaAllocationRequest* nocapture readonly) unnamed_addr #5 align 2 {
  %5 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %3, i64 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  ret i1 %7
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN22VmaBlockMetadata_Buddy19MakeAllocationsLostEjj(%class.VmaBlockMetadata_Buddy* nocapture readnone, i32, i32) unnamed_addr #10 align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22VmaBlockMetadata_Buddy5AllocERK20VmaAllocationRequest20VmaSuballocationTypemP15VmaAllocation_T(%class.VmaBlockMetadata_Buddy* nocapture, %struct.VmaAllocationRequest* nocapture readonly dereferenceable(64), i32, i64, %struct.VmaAllocation_T*) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 2
  br label %9

9:                                                ; preds = %14, %5
  %10 = phi i32 [ 0, %5 ], [ %15, %14 ]
  %11 = phi i64 [ %7, %5 ], [ %12, %14 ]
  %12 = lshr i64 %11, 1
  %13 = icmp ult i64 %12, %3
  br i1 %13, label %18, label %14

14:                                               ; preds = %9
  %15 = add nuw i32 %10, 1
  %16 = load i32, i32* %8, align 8
  %17 = icmp ult i32 %15, %16
  br i1 %17, label %9, label %18

18:                                               ; preds = %9, %14
  %19 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %1, i64 0, i32 5
  %20 = bitcast i8** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = and i64 %21, 4294967295
  %23 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 4, i64 %22, i32 0
  %24 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %1, i64 0, i32 0
  %25 = load i64, i64* %24, align 8
  br label %26

26:                                               ; preds = %26, %18
  %27 = phi %"struct.VmaBlockMetadata_Buddy::Node"** [ %23, %18 ], [ %32, %26 ]
  %28 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %27, align 8
  %29 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %28, i64 0, i32 0
  %30 = load i64, i64* %29, align 8
  %31 = icmp eq i64 %30, %25
  %32 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %28, i64 0, i32 4, i32 0, i32 1
  br i1 %31, label %33, label %26

33:                                               ; preds = %26
  %34 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 0, i32 2
  %35 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 6
  %36 = and i64 %21, 4294967295
  %37 = zext i32 %10 to i64
  br label %38

38:                                               ; preds = %33, %142
  %39 = phi i64 [ %36, %33 ], [ %64, %142 ]
  %40 = phi %"struct.VmaBlockMetadata_Buddy::Node"* [ %28, %33 ], [ %79, %142 ]
  %41 = icmp ult i64 %39, %37
  %42 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %40, i64 0, i32 4, i32 0
  %43 = getelementptr inbounds %struct.anon, %struct.anon* %42, i64 0, i32 0
  %44 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %43, align 8
  %45 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %44, null
  %46 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %40, i64 0, i32 4, i32 0, i32 1
  %47 = bitcast %"struct.VmaBlockMetadata_Buddy::Node"** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %44, i64 0, i32 4, i32 0, i32 1
  %50 = bitcast %"struct.VmaBlockMetadata_Buddy::Node"** %49 to i64*
  %51 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 4, i64 %39
  %52 = bitcast %struct.anon.25* %51 to i64*
  %53 = select i1 %45, i64* %52, i64* %50
  store i64 %48, i64* %53, align 8
  %54 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %46, align 8
  %55 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %54, null
  %56 = bitcast %struct.anon* %42 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 4, i64 %39, i32 1
  %59 = bitcast %"struct.VmaBlockMetadata_Buddy::Node"** %58 to i64*
  %60 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %54, i64 0, i32 4
  %61 = bitcast %union.anon.22* %60 to i64*
  %62 = select i1 %55, i64* %59, i64* %61
  store i64 %57, i64* %62, align 8
  br i1 %41, label %63, label %146

63:                                               ; preds = %38
  %64 = add nuw nsw i64 %39, 1
  %65 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %34, align 8
  %66 = icmp eq %struct.VkAllocationCallbacks* %65, null
  br i1 %66, label %75, label %67

67:                                               ; preds = %63
  %68 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %65, i64 0, i32 1
  %69 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %68, align 8
  %70 = icmp eq i8* (i8*, i64, i64, i32)* %69, null
  br i1 %70, label %75, label %71

71:                                               ; preds = %67
  %72 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %65, i64 0, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = tail call i8* %69(i8* %73, i64 48, i64 8, i32 1) #15
  br label %77

75:                                               ; preds = %67, %63
  %76 = tail call noalias i8* @aligned_alloc(i64 8, i64 48) #15
  br label %77

77:                                               ; preds = %71, %75
  %78 = phi i8* [ %74, %71 ], [ %76, %75 ]
  %79 = bitcast i8* %78 to %"struct.VmaBlockMetadata_Buddy::Node"*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %78, i8 0, i64 48, i1 false)
  %80 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %34, align 8
  %81 = icmp eq %struct.VkAllocationCallbacks* %80, null
  br i1 %81, label %90, label %82

82:                                               ; preds = %77
  %83 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %80, i64 0, i32 1
  %84 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %83, align 8
  %85 = icmp eq i8* (i8*, i64, i64, i32)* %84, null
  br i1 %85, label %90, label %86

86:                                               ; preds = %82
  %87 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %80, i64 0, i32 0
  %88 = load i8*, i8** %87, align 8
  %89 = tail call i8* %84(i8* %88, i64 48, i64 8, i32 1) #15
  br label %92

90:                                               ; preds = %82, %77
  %91 = tail call noalias i8* @aligned_alloc(i64 8, i64 48) #15
  br label %92

92:                                               ; preds = %86, %90
  %93 = phi i8* [ %89, %86 ], [ %91, %90 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %93, i8 0, i64 48, i1 false)
  %94 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %40, i64 0, i32 0
  %95 = load i64, i64* %94, align 8
  %96 = bitcast i8* %78 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds i8, i8* %78, i64 8
  %98 = bitcast i8* %97 to i32*
  store i32 0, i32* %98, align 8
  %99 = getelementptr inbounds i8, i8* %78, i64 16
  %100 = bitcast i8* %99 to %"struct.VmaBlockMetadata_Buddy::Node"**
  store %"struct.VmaBlockMetadata_Buddy::Node"* %40, %"struct.VmaBlockMetadata_Buddy::Node"** %100, align 8
  %101 = getelementptr inbounds i8, i8* %78, i64 24
  %102 = bitcast i8* %101 to i8**
  store i8* %93, i8** %102, align 8
  %103 = load i64, i64* %94, align 8
  %104 = load i64, i64* %6, align 8
  %105 = lshr i64 %104, %64
  %106 = add i64 %105, %103
  %107 = bitcast i8* %93 to i64*
  store i64 %106, i64* %107, align 8
  %108 = getelementptr inbounds i8, i8* %93, i64 8
  %109 = bitcast i8* %108 to i32*
  store i32 0, i32* %109, align 8
  %110 = getelementptr inbounds i8, i8* %93, i64 16
  %111 = bitcast i8* %110 to %"struct.VmaBlockMetadata_Buddy::Node"**
  store %"struct.VmaBlockMetadata_Buddy::Node"* %40, %"struct.VmaBlockMetadata_Buddy::Node"** %111, align 8
  %112 = getelementptr inbounds i8, i8* %93, i64 24
  %113 = bitcast i8* %112 to i8**
  store i8* %78, i8** %113, align 8
  %114 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %40, i64 0, i32 1
  store i32 2, i32* %114, align 8
  %115 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %40, i64 0, i32 4, i32 0, i32 0
  %116 = bitcast %"struct.VmaBlockMetadata_Buddy::Node"** %115 to i8**
  store i8* %78, i8** %116, align 8
  %117 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 4, i64 %64, i32 0
  %118 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %117, align 8
  %119 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %118, null
  %120 = getelementptr inbounds i8, i8* %93, i64 32
  br i1 %119, label %121, label %123

121:                                              ; preds = %92
  %122 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 4, i64 %64, i32 1
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %120, i8 0, i64 16, i1 false) #15
  br label %128

123:                                              ; preds = %92
  %124 = bitcast i8* %120 to %"struct.VmaBlockMetadata_Buddy::Node"**
  store %"struct.VmaBlockMetadata_Buddy::Node"* null, %"struct.VmaBlockMetadata_Buddy::Node"** %124, align 8
  %125 = getelementptr inbounds i8, i8* %93, i64 40
  %126 = bitcast i8* %125 to %"struct.VmaBlockMetadata_Buddy::Node"**
  store %"struct.VmaBlockMetadata_Buddy::Node"* %118, %"struct.VmaBlockMetadata_Buddy::Node"** %126, align 8
  %127 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %118, i64 0, i32 4, i32 0, i32 0
  br label %128

128:                                              ; preds = %121, %123
  %129 = phi %"struct.VmaBlockMetadata_Buddy::Node"** [ %122, %121 ], [ %127, %123 ]
  %130 = bitcast %"struct.VmaBlockMetadata_Buddy::Node"** %129 to i8**
  store i8* %93, i8** %130, align 8
  %131 = bitcast %"struct.VmaBlockMetadata_Buddy::Node"** %117 to i8**
  store i8* %93, i8** %131, align 8
  %132 = icmp eq i8* %93, null
  %133 = getelementptr inbounds i8, i8* %78, i64 32
  br i1 %132, label %134, label %137

134:                                              ; preds = %128
  %135 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 4, i64 %64, i32 1
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %133, i8 0, i64 16, i1 false) #15
  %136 = bitcast %"struct.VmaBlockMetadata_Buddy::Node"** %135 to i8**
  br label %142

137:                                              ; preds = %128
  %138 = bitcast i8* %133 to %"struct.VmaBlockMetadata_Buddy::Node"**
  store %"struct.VmaBlockMetadata_Buddy::Node"* null, %"struct.VmaBlockMetadata_Buddy::Node"** %138, align 8
  %139 = getelementptr inbounds i8, i8* %78, i64 40
  %140 = bitcast i8* %139 to i8**
  store i8* %93, i8** %140, align 8
  %141 = bitcast i8* %120 to i8**
  br label %142

142:                                              ; preds = %134, %137
  %143 = phi i8** [ %136, %134 ], [ %141, %137 ]
  store i8* %78, i8** %143, align 8
  store i8* %78, i8** %131, align 8
  %144 = load i64, i64* %35, align 8
  %145 = add i64 %144, 1
  store i64 %145, i64* %35, align 8
  br label %38

146:                                              ; preds = %38
  %147 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %40, i64 0, i32 1
  store i32 1, i32* %147, align 8
  %148 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %40, i64 0, i32 4
  %149 = bitcast %union.anon.22* %148 to %struct.VmaAllocation_T**
  store %struct.VmaAllocation_T* %4, %struct.VmaAllocation_T** %149, align 8
  %150 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 5
  %151 = bitcast i64* %150 to <2 x i64>*
  %152 = load <2 x i64>, <2 x i64>* %151, align 8
  %153 = add <2 x i64> %152, <i64 1, i64 -1>
  %154 = bitcast i64* %150 to <2 x i64>*
  store <2 x i64> %153, <2 x i64>* %154, align 8
  %155 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 7
  %156 = load i64, i64* %155, align 8
  %157 = sub i64 %156, %3
  store i64 %157, i64* %155, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN22VmaBlockMetadata_Buddy18RemoveFromFreeListEjPNS_4NodeE(%class.VmaBlockMetadata_Buddy* nocapture, i32, %"struct.VmaBlockMetadata_Buddy::Node"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %2, i64 0, i32 4, i32 0
  %5 = getelementptr inbounds %struct.anon, %struct.anon* %4, i64 0, i32 0
  %6 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %5, align 8
  %7 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %6, null
  %8 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %2, i64 0, i32 4, i32 0, i32 1
  %9 = bitcast %"struct.VmaBlockMetadata_Buddy::Node"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %6, i64 0, i32 4, i32 0, i32 1
  %12 = bitcast %"struct.VmaBlockMetadata_Buddy::Node"** %11 to i64*
  %13 = zext i32 %1 to i64
  %14 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 4, i64 %13
  %15 = bitcast %struct.anon.25* %14 to i64*
  %16 = select i1 %7, i64* %15, i64* %12
  store i64 %10, i64* %16, align 8
  %17 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %8, align 8
  %18 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %17, null
  %19 = bitcast %struct.anon* %4 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %17, i64 0, i32 4
  %22 = bitcast %union.anon.22* %21 to i64*
  %23 = zext i32 %1 to i64
  %24 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 4, i64 %23, i32 1
  %25 = bitcast %"struct.VmaBlockMetadata_Buddy::Node"** %24 to i64*
  %26 = select i1 %18, i64* %25, i64* %22
  store i64 %20, i64* %26, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22VmaBlockMetadata_Buddy12FreeAtOffsetEP15VmaAllocation_Tm(%class.VmaBlockMetadata_Buddy* nocapture, %struct.VmaAllocation_T* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 3
  %5 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %4, align 8
  %6 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %5, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %9, label %34

9:                                                ; preds = %3
  %10 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  br label %12

12:                                               ; preds = %9, %25
  %13 = phi %"struct.VmaBlockMetadata_Buddy::Node"* [ %27, %25 ], [ %5, %9 ]
  %14 = phi i64 [ %17, %25 ], [ %11, %9 ]
  %15 = phi i32 [ %28, %25 ], [ 0, %9 ]
  %16 = phi i64 [ %26, %25 ], [ 0, %9 ]
  %17 = lshr i64 %14, 1
  %18 = add i64 %17, %16
  %19 = icmp ugt i64 %18, %2
  %20 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %13, i64 0, i32 4, i32 0, i32 0
  %21 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %20, align 8
  br i1 %19, label %25, label %22

22:                                               ; preds = %12
  %23 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %21, i64 0, i32 3
  %24 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %23, align 8
  br label %25

25:                                               ; preds = %12, %22
  %26 = phi i64 [ %18, %22 ], [ %16, %12 ]
  %27 = phi %"struct.VmaBlockMetadata_Buddy::Node"* [ %24, %22 ], [ %21, %12 ]
  %28 = add i32 %15, 1
  %29 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %27, i64 0, i32 1
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, 2
  br i1 %31, label %12, label %32

32:                                               ; preds = %25
  %33 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %27, i64 0, i32 1
  br label %34

34:                                               ; preds = %32, %3
  %35 = phi i32 [ 0, %3 ], [ %28, %32 ]
  %36 = phi %"struct.VmaBlockMetadata_Buddy::Node"* [ %5, %3 ], [ %27, %32 ]
  %37 = phi i32* [ %6, %3 ], [ %33, %32 ]
  %38 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 6
  %39 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 5
  %40 = bitcast i64* %39 to <2 x i64>*
  %41 = load <2 x i64>, <2 x i64>* %40, align 8
  %42 = add <2 x i64> %41, <i64 -1, i64 1>
  %43 = bitcast i64* %39 to <2 x i64>*
  store <2 x i64> %42, <2 x i64>* %43, align 8
  %44 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 7
  %47 = load i64, i64* %46, align 8
  %48 = add i64 %47, %45
  store i64 %48, i64* %46, align 8
  store i32 0, i32* %37, align 8
  %49 = icmp eq i32 %35, 0
  br i1 %49, label %116, label %50

50:                                               ; preds = %34
  %51 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 0, i32 2
  %52 = zext i32 %35 to i64
  br label %53

53:                                               ; preds = %50, %110
  %54 = phi i64 [ %52, %50 ], [ %115, %110 ]
  %55 = phi %"struct.VmaBlockMetadata_Buddy::Node"* [ %36, %50 ], [ %85, %110 ]
  %56 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %55, i64 0, i32 3
  %57 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %56, align 8
  %58 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %57, i64 0, i32 1
  %59 = load i32, i32* %58, align 8
  %60 = icmp eq i32 %59, 0
  %61 = trunc i64 %54 to i32
  br i1 %60, label %62, label %116

62:                                               ; preds = %53
  %63 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %57, i64 0, i32 4, i32 0
  %64 = getelementptr inbounds %struct.anon, %struct.anon* %63, i64 0, i32 0
  %65 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %64, align 8
  %66 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %65, null
  %67 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %57, i64 0, i32 4, i32 0, i32 1
  %68 = bitcast %"struct.VmaBlockMetadata_Buddy::Node"** %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %65, i64 0, i32 4, i32 0, i32 1
  %71 = bitcast %"struct.VmaBlockMetadata_Buddy::Node"** %70 to i64*
  %72 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 4, i64 %54
  %73 = bitcast %struct.anon.25* %72 to i64*
  %74 = select i1 %66, i64* %73, i64* %71
  store i64 %69, i64* %74, align 8
  %75 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %67, align 8
  %76 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %75, null
  %77 = bitcast %struct.anon* %63 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 4, i64 %54, i32 1
  %80 = bitcast %"struct.VmaBlockMetadata_Buddy::Node"** %79 to i64*
  %81 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %75, i64 0, i32 4
  %82 = bitcast %union.anon.22* %81 to i64*
  %83 = select i1 %76, i64* %80, i64* %82
  store i64 %78, i64* %83, align 8
  %84 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %55, i64 0, i32 2
  %85 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %84, align 8
  %86 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %51, align 8
  %87 = bitcast %"struct.VmaBlockMetadata_Buddy::Node"** %56 to i8**
  %88 = load i8*, i8** %87, align 8
  %89 = icmp eq %struct.VkAllocationCallbacks* %86, null
  br i1 %89, label %97, label %90

90:                                               ; preds = %62
  %91 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %86, i64 0, i32 3
  %92 = load void (i8*, i8*)*, void (i8*, i8*)** %91, align 8
  %93 = icmp eq void (i8*, i8*)* %92, null
  br i1 %93, label %97, label %94

94:                                               ; preds = %90
  %95 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %86, i64 0, i32 0
  %96 = load i8*, i8** %95, align 8
  tail call void %92(i8* %96, i8* %88) #15
  br label %98

97:                                               ; preds = %90, %62
  tail call void @free(i8* %88) #15
  br label %98

98:                                               ; preds = %94, %97
  %99 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %51, align 8
  %100 = bitcast %"struct.VmaBlockMetadata_Buddy::Node"* %55 to i8*
  %101 = icmp eq %struct.VkAllocationCallbacks* %99, null
  br i1 %101, label %109, label %102

102:                                              ; preds = %98
  %103 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %99, i64 0, i32 3
  %104 = load void (i8*, i8*)*, void (i8*, i8*)** %103, align 8
  %105 = icmp eq void (i8*, i8*)* %104, null
  br i1 %105, label %109, label %106

106:                                              ; preds = %102
  %107 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %99, i64 0, i32 0
  %108 = load i8*, i8** %107, align 8
  tail call void %104(i8* %108, i8* %100) #15
  br label %110

109:                                              ; preds = %102, %98
  tail call void @free(i8* %100) #15
  br label %110

110:                                              ; preds = %106, %109
  %111 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %85, i64 0, i32 1
  store i32 0, i32* %111, align 8
  %112 = load i64, i64* %38, align 8
  %113 = add i64 %112, -1
  store i64 %113, i64* %38, align 8
  %114 = icmp eq i32 %61, 1
  %115 = add nsw i64 %54, -1
  br i1 %114, label %116, label %53

116:                                              ; preds = %53, %110, %34
  %117 = phi i64 [ 0, %34 ], [ 0, %110 ], [ %54, %53 ]
  %118 = phi %"struct.VmaBlockMetadata_Buddy::Node"* [ %36, %34 ], [ %85, %110 ], [ %55, %53 ]
  %119 = and i64 %117, 4294967295
  %120 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 4, i64 %119, i32 0
  %121 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %120, align 8
  %122 = icmp eq %"struct.VmaBlockMetadata_Buddy::Node"* %121, null
  %123 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %118, i64 0, i32 4, i32 0
  br i1 %122, label %124, label %127

124:                                              ; preds = %116
  %125 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 4, i64 %119, i32 1
  %126 = bitcast %struct.anon* %123 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %126, i8 0, i64 16, i1 false) #15
  br label %131

127:                                              ; preds = %116
  %128 = getelementptr inbounds %struct.anon, %struct.anon* %123, i64 0, i32 0
  store %"struct.VmaBlockMetadata_Buddy::Node"* null, %"struct.VmaBlockMetadata_Buddy::Node"** %128, align 8
  %129 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %118, i64 0, i32 4, i32 0, i32 1
  store %"struct.VmaBlockMetadata_Buddy::Node"* %121, %"struct.VmaBlockMetadata_Buddy::Node"** %129, align 8
  %130 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %121, i64 0, i32 4, i32 0, i32 0
  br label %131

131:                                              ; preds = %124, %127
  %132 = phi %"struct.VmaBlockMetadata_Buddy::Node"** [ %125, %124 ], [ %130, %127 ]
  store %"struct.VmaBlockMetadata_Buddy::Node"* %118, %"struct.VmaBlockMetadata_Buddy::Node"** %132, align 8
  store %"struct.VmaBlockMetadata_Buddy::Node"* %118, %"struct.VmaBlockMetadata_Buddy::Node"** %120, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20VmaDeviceMemoryBlockC2EP14VmaAllocator_T(%class.VmaDeviceMemoryBlock* nocapture, %struct.VmaAllocator_T* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 0
  store %class.VmaBlockMetadata* null, %class.VmaBlockMetadata** %3, align 8
  %4 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 2
  store i32 -1, i32* %4, align 8
  %5 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 3
  %6 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 7
  store i8* null, i8** %6, align 8
  %7 = bitcast i32* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 56, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20VmaDeviceMemoryBlock4InitEP14VmaAllocator_TP9VmaPool_TjP16VkDeviceMemory_Tmjj(%class.VmaDeviceMemoryBlock* nocapture, %struct.VmaAllocator_T*, %struct.VmaPool_T*, i32, %struct.VkDeviceMemory_T*, i64, i32, i32) local_unnamed_addr #0 align 2 {
  %9 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 1
  store %struct.VmaPool_T* %2, %struct.VmaPool_T** %9, align 8
  %10 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 2
  store i32 %3, i32* %10, align 8
  %11 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 3
  store i32 %6, i32* %11, align 4
  %12 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 4
  store %struct.VkDeviceMemory_T* %4, %struct.VkDeviceMemory_T** %12, align 8
  switch i32 %7, label %79 [
    i32 4, label %13
    i32 8, label %50
  ]

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13, i32 1
  %15 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %14, align 8
  %16 = icmp eq i8* (i8*, i64, i64, i32)* %15, null
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = tail call i8* %15(i8* %19, i64 128, i64 8, i32 1) #15
  br label %23

21:                                               ; preds = %13
  %22 = tail call noalias i8* @aligned_alloc(i64 8, i64 128) #15
  br label %23

23:                                               ; preds = %17, %21
  %24 = phi i8* [ %20, %17 ], [ %22, %21 ]
  %25 = bitcast i8* %24 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV16VmaBlockMetadata, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %25, align 8
  %26 = getelementptr inbounds i8, i8* %24, i64 8
  %27 = bitcast i8* %26 to i64*
  store i64 0, i64* %27, align 8
  %28 = getelementptr inbounds i8, i8* %24, i64 16
  %29 = bitcast i8* %28 to %struct.VkAllocationCallbacks**
  %30 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 11
  %31 = load i8, i8* %30, align 8, !range !2
  %32 = icmp eq i8 %31, 0
  %33 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13
  %34 = select i1 %32, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %33
  store %struct.VkAllocationCallbacks* %34, %struct.VkAllocationCallbacks** %29, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV23VmaBlockMetadata_Linear, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %25, align 8
  %35 = getelementptr inbounds i8, i8* %24, i64 24
  %36 = bitcast i8* %35 to i64*
  store i64 0, i64* %36, align 8
  %37 = getelementptr inbounds i8, i8* %24, i64 32
  %38 = load i8, i8* %30, align 8, !range !2
  %39 = icmp eq i8 %38, 0
  %40 = ptrtoint %struct.VkAllocationCallbacks* %33 to i64
  %41 = select i1 %39, i64 0, i64 %40
  %42 = bitcast i8* %37 to i64*
  store i64 %41, i64* %42, align 8
  %43 = getelementptr inbounds i8, i8* %24, i64 40
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %43, i8 0, i64 24, i1 false) #15
  %44 = getelementptr inbounds i8, i8* %24, i64 64
  %45 = load i8, i8* %30, align 8, !range !2
  %46 = icmp eq i8 %45, 0
  %47 = select i1 %46, i64 0, i64 %40
  %48 = bitcast i8* %44 to i64*
  store i64 %47, i64* %48, align 8
  %49 = getelementptr inbounds i8, i8* %24, i64 72
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 56, i1 false) #15
  br label %125

50:                                               ; preds = %8
  %51 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13, i32 1
  %52 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %51, align 8
  %53 = icmp eq i8* (i8*, i64, i64, i32)* %52, null
  br i1 %53, label %58, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = tail call i8* %52(i8* %56, i64 552, i64 8, i32 1) #15
  br label %60

58:                                               ; preds = %50
  %59 = tail call noalias i8* @aligned_alloc(i64 8, i64 552) #15
  br label %60

60:                                               ; preds = %54, %58
  %61 = phi i8* [ %57, %54 ], [ %59, %58 ]
  %62 = bitcast i8* %61 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV16VmaBlockMetadata, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %62, align 8
  %63 = getelementptr inbounds i8, i8* %61, i64 8
  %64 = bitcast i8* %63 to i64*
  store i64 0, i64* %64, align 8
  %65 = getelementptr inbounds i8, i8* %61, i64 16
  %66 = bitcast i8* %65 to %struct.VkAllocationCallbacks**
  %67 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 11
  %68 = load i8, i8* %67, align 8, !range !2
  %69 = icmp eq i8 %68, 0
  %70 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13
  %71 = select i1 %69, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %70
  store %struct.VkAllocationCallbacks* %71, %struct.VkAllocationCallbacks** %66, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV22VmaBlockMetadata_Buddy, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %62, align 8
  %72 = getelementptr inbounds i8, i8* %61, i64 40
  %73 = bitcast i8* %72 to %"struct.VmaBlockMetadata_Buddy::Node"**
  store %"struct.VmaBlockMetadata_Buddy::Node"* null, %"struct.VmaBlockMetadata_Buddy::Node"** %73, align 8
  %74 = getelementptr inbounds i8, i8* %61, i64 528
  %75 = bitcast i8* %74 to <2 x i64>*
  store <2 x i64> <i64 0, i64 1>, <2 x i64>* %75, align 8
  %76 = getelementptr inbounds i8, i8* %61, i64 544
  %77 = bitcast i8* %76 to i64*
  store i64 0, i64* %77, align 8
  %78 = getelementptr inbounds i8, i8* %61, i64 48
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %78, i8 0, i64 480, i1 false) #15
  br label %125

79:                                               ; preds = %8
  %80 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13, i32 1
  %81 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %80, align 8
  %82 = icmp eq i8* (i8*, i64, i64, i32)* %81, null
  br i1 %82, label %87, label %83

83:                                               ; preds = %79
  %84 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13, i32 0
  %85 = load i8*, i8** %84, align 8
  %86 = tail call i8* %81(i8* %85, i64 152, i64 8, i32 1) #15
  br label %89

87:                                               ; preds = %79
  %88 = tail call noalias i8* @aligned_alloc(i64 8, i64 152) #15
  br label %89

89:                                               ; preds = %83, %87
  %90 = phi i8* [ %86, %83 ], [ %88, %87 ]
  %91 = bitcast i8* %90 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV16VmaBlockMetadata, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %91, align 8
  %92 = getelementptr inbounds i8, i8* %90, i64 8
  %93 = bitcast i8* %92 to i64*
  store i64 0, i64* %93, align 8
  %94 = getelementptr inbounds i8, i8* %90, i64 16
  %95 = bitcast i8* %94 to %struct.VkAllocationCallbacks**
  %96 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 11
  %97 = load i8, i8* %96, align 8, !range !2
  %98 = icmp eq i8 %97, 0
  %99 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13
  %100 = select i1 %98, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %99
  store %struct.VkAllocationCallbacks* %100, %struct.VkAllocationCallbacks** %95, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV24VmaBlockMetadata_Generic, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %91, align 8
  %101 = getelementptr inbounds i8, i8* %90, i64 24
  %102 = bitcast i8* %101 to i32*
  store i32 0, i32* %102, align 8
  %103 = getelementptr inbounds i8, i8* %90, i64 32
  %104 = bitcast i8* %103 to i64*
  store i64 0, i64* %104, align 8
  %105 = load i8, i8* %96, align 8, !range !2
  %106 = icmp eq i8 %105, 0
  %107 = select i1 %106, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %99
  %108 = getelementptr inbounds i8, i8* %90, i64 40
  %109 = bitcast i8* %108 to %struct.VkAllocationCallbacks**
  store %struct.VkAllocationCallbacks* %107, %struct.VkAllocationCallbacks** %109, align 8
  %110 = getelementptr inbounds i8, i8* %90, i64 48
  %111 = bitcast i8* %110 to %struct.VkAllocationCallbacks**
  store %struct.VkAllocationCallbacks* %107, %struct.VkAllocationCallbacks** %111, align 8
  %112 = getelementptr inbounds i8, i8* %90, i64 56
  %113 = bitcast i8* %112 to i32*
  store i32 128, i32* %113, align 8
  %114 = getelementptr inbounds i8, i8* %90, i64 64
  %115 = ptrtoint %struct.VkAllocationCallbacks* %107 to i64
  %116 = bitcast i8* %114 to i64*
  store i64 %115, i64* %116, align 8
  %117 = getelementptr inbounds i8, i8* %90, i64 72
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %117, i8 0, i64 48, i1 false) #15
  %118 = getelementptr inbounds i8, i8* %90, i64 120
  %119 = load i8, i8* %96, align 8, !range !2
  %120 = icmp eq i8 %119, 0
  %121 = ptrtoint %struct.VkAllocationCallbacks* %99 to i64
  %122 = select i1 %120, i64 0, i64 %121
  %123 = bitcast i8* %118 to i64*
  store i64 %122, i64* %123, align 8
  %124 = getelementptr inbounds i8, i8* %90, i64 128
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %124, i8 0, i64 24, i1 false) #15
  br label %125

125:                                              ; preds = %89, %60, %23
  %126 = phi i8* [ %90, %89 ], [ %61, %60 ], [ %24, %23 ]
  %127 = bitcast %class.VmaDeviceMemoryBlock* %0 to i8**
  store i8* %126, i8** %127, align 8
  %128 = bitcast i8* %126 to %class.VmaBlockMetadata*
  %129 = bitcast i8* %126 to void (%class.VmaBlockMetadata*, i64)***
  %130 = load void (%class.VmaBlockMetadata*, i64)**, void (%class.VmaBlockMetadata*, i64)*** %129, align 8
  %131 = getelementptr inbounds void (%class.VmaBlockMetadata*, i64)*, void (%class.VmaBlockMetadata*, i64)** %130, i64 2
  %132 = load void (%class.VmaBlockMetadata*, i64)*, void (%class.VmaBlockMetadata*, i64)** %131, align 8
  tail call void %132(%class.VmaBlockMetadata* %128, i64 %5) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20VmaDeviceMemoryBlock7DestroyEP14VmaAllocator_T(%class.VmaDeviceMemoryBlock* nocapture, %struct.VmaAllocator_T*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 0
  %6 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %5, align 8
  %7 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %6, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 4
  %10 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %9, align 8
  %11 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 14, i32 1
  %12 = load void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)*, void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)** %11, align 8
  %13 = icmp eq void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)* %12, null
  br i1 %13, label %17, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 14, i32 2
  %16 = load i8*, i8** %15, align 8
  tail call void %12(%struct.VmaAllocator_T* %1, i32 %4, %struct.VkDeviceMemory_T* %10, i64 %8, i8* %16) #15
  br label %17

17:                                               ; preds = %2, %14
  %18 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 32, i32 3
  %19 = load void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)** %18, align 8
  %20 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 9
  %21 = load %struct.VkDevice_T*, %struct.VkDevice_T** %20, align 8
  %22 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 11
  %23 = load i8, i8* %22, align 8, !range !2
  %24 = icmp eq i8 %23, 0
  %25 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13
  %26 = select i1 %24, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %25
  tail call void %19(%struct.VkDevice_T* %21, %struct.VkDeviceMemory_T* %10, %struct.VkAllocationCallbacks* %26) #15
  %27 = zext i32 %4 to i64
  %28 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 19, i32 1, i64 %27, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 23, i32 0, i64 %30, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = atomicrmw sub i64* %31, i64 %8 seq_cst
  store %struct.VkDeviceMemory_T* null, %struct.VkDeviceMemory_T** %9, align 8
  %33 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %5, align 8
  %34 = icmp eq %class.VmaBlockMetadata* %33, null
  br i1 %34, label %47, label %35

35:                                               ; preds = %17
  %36 = bitcast %class.VmaBlockMetadata* %33 to void (%class.VmaBlockMetadata*)***
  %37 = load void (%class.VmaBlockMetadata*)**, void (%class.VmaBlockMetadata*)*** %36, align 8
  %38 = load void (%class.VmaBlockMetadata*)*, void (%class.VmaBlockMetadata*)** %37, align 8
  tail call void %38(%class.VmaBlockMetadata* nonnull %33) #15
  %39 = bitcast %class.VmaBlockMetadata* %33 to i8*
  %40 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13, i32 3
  %41 = load void (i8*, i8*)*, void (i8*, i8*)** %40, align 8
  %42 = icmp eq void (i8*, i8*)* %41, null
  br i1 %42, label %46, label %43

43:                                               ; preds = %35
  %44 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13, i32 0
  %45 = load i8*, i8** %44, align 8
  tail call void %41(i8* %45, i8* nonnull %39) #15
  br label %47

46:                                               ; preds = %35
  tail call void @free(i8* %39) #15
  br label %47

47:                                               ; preds = %17, %43, %46
  store %class.VmaBlockMetadata* null, %class.VmaBlockMetadata** %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaAllocator_T16FreeVulkanMemoryEjmP16VkDeviceMemory_T(%struct.VmaAllocator_T*, i32, i64, %struct.VkDeviceMemory_T*) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 14, i32 1
  %6 = load void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)*, void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)** %5, align 8
  %7 = icmp eq void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)* %6, null
  br i1 %7, label %11, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 14, i32 2
  %10 = load i8*, i8** %9, align 8
  tail call void %6(%struct.VmaAllocator_T* %0, i32 %1, %struct.VkDeviceMemory_T* %3, i64 %2, i8* %10) #15
  br label %11

11:                                               ; preds = %4, %8
  %12 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 3
  %13 = load void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)** %12, align 8
  %14 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %15 = load %struct.VkDevice_T*, %struct.VkDevice_T** %14, align 8
  %16 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 11
  %17 = load i8, i8* %16, align 8, !range !2
  %18 = icmp eq i8 %17, 0
  %19 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13
  %20 = select i1 %18, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %19
  tail call void %13(%struct.VkDevice_T* %15, %struct.VkDeviceMemory_T* %3, %struct.VkAllocationCallbacks* %20) #15
  %21 = zext i32 %1 to i64
  %22 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %21, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 0, i64 %24, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = atomicrmw sub i64* %25, i64 %2 seq_cst
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK20VmaDeviceMemoryBlock8ValidateEv(%class.VmaDeviceMemoryBlock* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 4
  %3 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %2, align 8
  %4 = icmp eq %struct.VkDeviceMemory_T* %3, null
  br i1 %4, label %17, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 0
  %7 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %6, align 8
  %8 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %7, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %17, label %11

11:                                               ; preds = %5
  %12 = bitcast %class.VmaBlockMetadata* %7 to i1 (%class.VmaBlockMetadata*)***
  %13 = load i1 (%class.VmaBlockMetadata*)**, i1 (%class.VmaBlockMetadata*)*** %12, align 8
  %14 = getelementptr inbounds i1 (%class.VmaBlockMetadata*)*, i1 (%class.VmaBlockMetadata*)** %13, i64 3
  %15 = load i1 (%class.VmaBlockMetadata*)*, i1 (%class.VmaBlockMetadata*)** %14, align 8
  %16 = tail call zeroext i1 %15(%class.VmaBlockMetadata* %7) #15
  br label %17

17:                                               ; preds = %1, %5, %11
  %18 = phi i1 [ %16, %11 ], [ false, %5 ], [ false, %1 ]
  ret i1 %18
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN20VmaDeviceMemoryBlock15CheckCorruptionEP14VmaAllocator_T(%class.VmaDeviceMemoryBlock*, %struct.VmaAllocator_T* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 5
  %4 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 0
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, %class.VmaMutex* null, %class.VmaMutex* %3
  br i1 %6, label %10, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %7, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %9) #15
  br label %10

10:                                               ; preds = %8, %2
  %11 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 6
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = add i32 %12, 1
  store i32 %15, i32* %11, align 8
  %16 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 7
  %17 = bitcast i8** %16 to i64*
  %18 = load i64, i64* %17, align 8
  br label %32

19:                                               ; preds = %10
  %20 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 32, i32 4
  %21 = load i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)** %20, align 8
  %22 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 9
  %23 = load %struct.VkDevice_T*, %struct.VkDevice_T** %22, align 8
  %24 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 4
  %25 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %24, align 8
  %26 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 7
  %27 = tail call i32 %21(%struct.VkDevice_T* %23, %struct.VkDeviceMemory_T* %25, i64 0, i64 -1, i32 0, i8** %26) #15
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %19
  %30 = bitcast i8** %26 to i64*
  %31 = load i64, i64* %30, align 8
  store i32 1, i32* %11, align 8
  br label %32

32:                                               ; preds = %29, %19, %14
  %33 = phi i64 [ %31, %29 ], [ 0, %19 ], [ %18, %14 ]
  %34 = phi i32 [ 0, %29 ], [ %27, %19 ], [ 0, %14 ]
  br i1 %6, label %37, label %35

35:                                               ; preds = %32
  %36 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %7, i64 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %36) #15
  br label %37

37:                                               ; preds = %32, %35
  %38 = icmp eq i32 %34, 0
  br i1 %38, label %39, label %70

39:                                               ; preds = %37
  %40 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 0
  %41 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %40, align 8
  %42 = inttoptr i64 %33 to i8*
  %43 = bitcast %class.VmaBlockMetadata* %41 to i32 (%class.VmaBlockMetadata*, i8*)***
  %44 = load i32 (%class.VmaBlockMetadata*, i8*)**, i32 (%class.VmaBlockMetadata*, i8*)*** %43, align 8
  %45 = getelementptr inbounds i32 (%class.VmaBlockMetadata*, i8*)*, i32 (%class.VmaBlockMetadata*, i8*)** %44, i64 14
  %46 = load i32 (%class.VmaBlockMetadata*, i8*)*, i32 (%class.VmaBlockMetadata*, i8*)** %45, align 8
  %47 = tail call i32 %46(%class.VmaBlockMetadata* %41, i8* %42) #15
  %48 = load i8, i8* %4, align 8, !range !2
  %49 = icmp eq i8 %48, 0
  %50 = select i1 %49, %class.VmaMutex* null, %class.VmaMutex* %3
  br i1 %49, label %53, label %51

51:                                               ; preds = %39
  %52 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %50, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %52) #15
  br label %53

53:                                               ; preds = %51, %39
  %54 = load i32, i32* %11, align 8
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %67, label %56

56:                                               ; preds = %53
  %57 = add i32 %54, -1
  store i32 %57, i32* %11, align 8
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %67

59:                                               ; preds = %56
  %60 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 7
  store i8* null, i8** %60, align 8
  %61 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 32, i32 5
  %62 = load void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)** %61, align 8
  %63 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 9
  %64 = load %struct.VkDevice_T*, %struct.VkDevice_T** %63, align 8
  %65 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 4
  %66 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %65, align 8
  tail call void %62(%struct.VkDevice_T* %64, %struct.VkDeviceMemory_T* %66) #15
  br label %67

67:                                               ; preds = %59, %56, %53
  br i1 %49, label %70, label %68

68:                                               ; preds = %67
  %69 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %50, i64 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %69) #15
  br label %70

70:                                               ; preds = %68, %67, %37
  %71 = phi i32 [ %34, %37 ], [ %47, %67 ], [ %47, %68 ]
  ret i32 %71
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN20VmaDeviceMemoryBlock31WriteMagicValueAroundAllocationEP14VmaAllocator_Tmm(%class.VmaDeviceMemoryBlock*, %struct.VmaAllocator_T* nocapture readonly, i64, i64) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 5
  %6 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 0
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  %9 = select i1 %8, %class.VmaMutex* null, %class.VmaMutex* %5
  br i1 %8, label %12, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %9, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %11) #15
  br label %12

12:                                               ; preds = %10, %4
  %13 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 6
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  %17 = add i32 %14, 1
  br label %28

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 32, i32 4
  %20 = load i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)** %19, align 8
  %21 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 9
  %22 = load %struct.VkDevice_T*, %struct.VkDevice_T** %21, align 8
  %23 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 4
  %24 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %23, align 8
  %25 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 7
  %26 = tail call i32 %20(%struct.VkDevice_T* %22, %struct.VkDeviceMemory_T* %24, i64 0, i64 -1, i32 0, i8** %25) #15
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %18, %16
  %29 = phi i32 [ %17, %16 ], [ 1, %18 ]
  store i32 %29, i32* %13, align 8
  br label %30

30:                                               ; preds = %28, %18
  %31 = phi i32 [ %26, %18 ], [ 0, %28 ]
  br i1 %8, label %34, label %32

32:                                               ; preds = %30
  %33 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %9, i64 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %33) #15
  br label %34

34:                                               ; preds = %30, %32
  %35 = icmp eq i32 %31, 0
  br i1 %35, label %36, label %59

36:                                               ; preds = %34
  %37 = load i8, i8* %6, align 8, !range !2
  %38 = icmp eq i8 %37, 0
  %39 = select i1 %38, %class.VmaMutex* null, %class.VmaMutex* %5
  br i1 %38, label %42, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %39, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %41) #15
  br label %42

42:                                               ; preds = %40, %36
  %43 = load i32, i32* %13, align 8
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %56, label %45

45:                                               ; preds = %42
  %46 = add i32 %43, -1
  store i32 %46, i32* %13, align 8
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %56

48:                                               ; preds = %45
  %49 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 7
  store i8* null, i8** %49, align 8
  %50 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 32, i32 5
  %51 = load void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)** %50, align 8
  %52 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 9
  %53 = load %struct.VkDevice_T*, %struct.VkDevice_T** %52, align 8
  %54 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 4
  %55 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %54, align 8
  tail call void %51(%struct.VkDevice_T* %53, %struct.VkDeviceMemory_T* %55) #15
  br label %56

56:                                               ; preds = %48, %45, %42
  br i1 %38, label %59, label %57

57:                                               ; preds = %56
  %58 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %39, i64 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %58) #15
  br label %59

59:                                               ; preds = %57, %56, %34
  ret i32 %31
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN20VmaDeviceMemoryBlock34ValidateMagicValueAroundAllocationEP14VmaAllocator_Tmm(%class.VmaDeviceMemoryBlock*, %struct.VmaAllocator_T* nocapture readonly, i64, i64) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 5
  %6 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 0
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  %9 = select i1 %8, %class.VmaMutex* null, %class.VmaMutex* %5
  br i1 %8, label %12, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %9, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %11) #15
  br label %12

12:                                               ; preds = %10, %4
  %13 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 6
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  %17 = add i32 %14, 1
  br label %28

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 32, i32 4
  %20 = load i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)** %19, align 8
  %21 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 9
  %22 = load %struct.VkDevice_T*, %struct.VkDevice_T** %21, align 8
  %23 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 4
  %24 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %23, align 8
  %25 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 7
  %26 = tail call i32 %20(%struct.VkDevice_T* %22, %struct.VkDeviceMemory_T* %24, i64 0, i64 -1, i32 0, i8** %25) #15
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %18, %16
  %29 = phi i32 [ %17, %16 ], [ 1, %18 ]
  store i32 %29, i32* %13, align 8
  br label %30

30:                                               ; preds = %28, %18
  %31 = phi i32 [ %26, %18 ], [ 0, %28 ]
  br i1 %8, label %34, label %32

32:                                               ; preds = %30
  %33 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %9, i64 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %33) #15
  br label %34

34:                                               ; preds = %30, %32
  %35 = icmp eq i32 %31, 0
  br i1 %35, label %36, label %59

36:                                               ; preds = %34
  %37 = load i8, i8* %6, align 8, !range !2
  %38 = icmp eq i8 %37, 0
  %39 = select i1 %38, %class.VmaMutex* null, %class.VmaMutex* %5
  br i1 %38, label %42, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %39, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %41) #15
  br label %42

42:                                               ; preds = %40, %36
  %43 = load i32, i32* %13, align 8
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %56, label %45

45:                                               ; preds = %42
  %46 = add i32 %43, -1
  store i32 %46, i32* %13, align 8
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %56

48:                                               ; preds = %45
  %49 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 7
  store i8* null, i8** %49, align 8
  %50 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 32, i32 5
  %51 = load void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)** %50, align 8
  %52 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 9
  %53 = load %struct.VkDevice_T*, %struct.VkDevice_T** %52, align 8
  %54 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 4
  %55 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %54, align 8
  tail call void %51(%struct.VkDevice_T* %53, %struct.VkDeviceMemory_T* %55) #15
  br label %56

56:                                               ; preds = %48, %45, %42
  br i1 %38, label %59, label %57

57:                                               ; preds = %56
  %58 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %39, i64 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %58) #15
  br label %59

59:                                               ; preds = %57, %56, %34
  ret i32 %31
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN20VmaDeviceMemoryBlock16BindBufferMemoryEP14VmaAllocator_TP15VmaAllocation_TmP10VkBuffer_TPKv(%class.VmaDeviceMemoryBlock*, %struct.VmaAllocator_T* nocapture readonly, %struct.VmaAllocation_T* nocapture readonly, i64, %struct.VkBuffer_T*, i8*) local_unnamed_addr #0 align 2 {
  %7 = alloca %struct.VkBindBufferMemoryInfo, align 8
  %8 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %2, i64 0, i32 5
  %9 = load i8, i8* %8, align 8
  %10 = icmp eq i8 %9, 1
  br i1 %10, label %11, label %14

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %2, i64 0, i32 9, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  br label %14

14:                                               ; preds = %6, %11
  %15 = phi i64 [ %13, %11 ], [ 0, %6 ]
  %16 = add i64 %15, %3
  %17 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 5
  %18 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 0
  %19 = load i8, i8* %18, align 8, !range !2
  %20 = icmp eq i8 %19, 0
  %21 = select i1 %20, %class.VmaMutex* null, %class.VmaMutex* %17
  %22 = icmp eq %class.VmaMutex* %21, null
  br i1 %22, label %25, label %23

23:                                               ; preds = %14
  %24 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %21, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %24) #15
  br label %25

25:                                               ; preds = %14, %23
  %26 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 4
  %27 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %26, align 8
  %28 = icmp eq i8* %5, null
  br i1 %28, label %51, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 4
  %31 = load i8, i8* %30, align 1, !range !2
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %33, label %37

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 2
  %35 = load i32, i32* %34, align 4
  %36 = icmp ugt i32 %35, 4198399
  br i1 %36, label %37, label %57

37:                                               ; preds = %33, %29
  %38 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 32, i32 19
  %39 = load i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)** %38, align 8
  %40 = icmp eq i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)* %39, null
  br i1 %40, label %57, label %41

41:                                               ; preds = %37
  %42 = bitcast %struct.VkBindBufferMemoryInfo* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %42) #15
  %43 = bitcast %struct.VkBindBufferMemoryInfo* %7 to i64*
  store i64 1000157000, i64* %43, align 8
  %44 = getelementptr inbounds %struct.VkBindBufferMemoryInfo, %struct.VkBindBufferMemoryInfo* %7, i64 0, i32 1
  store i8* %5, i8** %44, align 8
  %45 = getelementptr inbounds %struct.VkBindBufferMemoryInfo, %struct.VkBindBufferMemoryInfo* %7, i64 0, i32 2
  store %struct.VkBuffer_T* %4, %struct.VkBuffer_T** %45, align 8
  %46 = getelementptr inbounds %struct.VkBindBufferMemoryInfo, %struct.VkBindBufferMemoryInfo* %7, i64 0, i32 3
  store %struct.VkDeviceMemory_T* %27, %struct.VkDeviceMemory_T** %46, align 8
  %47 = getelementptr inbounds %struct.VkBindBufferMemoryInfo, %struct.VkBindBufferMemoryInfo* %7, i64 0, i32 4
  store i64 %16, i64* %47, align 8
  %48 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 9
  %49 = load %struct.VkDevice_T*, %struct.VkDevice_T** %48, align 8
  %50 = call i32 %39(%struct.VkDevice_T* %49, i32 1, %struct.VkBindBufferMemoryInfo* nonnull %7) #15
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %42) #15
  br label %57

51:                                               ; preds = %25
  %52 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 32, i32 8
  %53 = load i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)** %52, align 8
  %54 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 9
  %55 = load %struct.VkDevice_T*, %struct.VkDevice_T** %54, align 8
  %56 = tail call i32 %53(%struct.VkDevice_T* %55, %struct.VkBuffer_T* %4, %struct.VkDeviceMemory_T* %27, i64 %16) #15
  br label %57

57:                                               ; preds = %33, %37, %41, %51
  %58 = phi i32 [ %50, %41 ], [ %56, %51 ], [ -7, %37 ], [ -7, %33 ]
  br i1 %22, label %61, label %59

59:                                               ; preds = %57
  %60 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %21, i64 0, i32 0
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %60) #15
  br label %61

61:                                               ; preds = %57, %59
  ret i32 %58
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaAllocator_T16BindVulkanBufferEP16VkDeviceMemory_TmP10VkBuffer_TPKv(%struct.VmaAllocator_T* nocapture readonly, %struct.VkDeviceMemory_T*, i64, %struct.VkBuffer_T*, i8*) local_unnamed_addr #0 align 2 {
  %6 = alloca %struct.VkBindBufferMemoryInfo, align 8
  %7 = icmp eq i8* %4, null
  br i1 %7, label %31, label %8

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 4
  %10 = load i8, i8* %9, align 1, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %16

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = icmp ugt i32 %14, 4198399
  br i1 %15, label %16, label %37

16:                                               ; preds = %8, %12
  %17 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 19
  %18 = load i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)** %17, align 8
  %19 = icmp eq i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)* %18, null
  br i1 %19, label %37, label %20

20:                                               ; preds = %16
  %21 = bitcast %struct.VkBindBufferMemoryInfo* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %21) #15
  %22 = bitcast %struct.VkBindBufferMemoryInfo* %6 to i64*
  store i64 0, i64* %22, align 8
  %23 = getelementptr inbounds %struct.VkBindBufferMemoryInfo, %struct.VkBindBufferMemoryInfo* %6, i64 0, i32 0
  store i32 1000157000, i32* %23, align 8
  %24 = getelementptr inbounds %struct.VkBindBufferMemoryInfo, %struct.VkBindBufferMemoryInfo* %6, i64 0, i32 1
  store i8* %4, i8** %24, align 8
  %25 = getelementptr inbounds %struct.VkBindBufferMemoryInfo, %struct.VkBindBufferMemoryInfo* %6, i64 0, i32 2
  store %struct.VkBuffer_T* %3, %struct.VkBuffer_T** %25, align 8
  %26 = getelementptr inbounds %struct.VkBindBufferMemoryInfo, %struct.VkBindBufferMemoryInfo* %6, i64 0, i32 3
  store %struct.VkDeviceMemory_T* %1, %struct.VkDeviceMemory_T** %26, align 8
  %27 = getelementptr inbounds %struct.VkBindBufferMemoryInfo, %struct.VkBindBufferMemoryInfo* %6, i64 0, i32 4
  store i64 %2, i64* %27, align 8
  %28 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %29 = load %struct.VkDevice_T*, %struct.VkDevice_T** %28, align 8
  %30 = call i32 %18(%struct.VkDevice_T* %29, i32 1, %struct.VkBindBufferMemoryInfo* nonnull %6) #15
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %21) #15
  br label %37

31:                                               ; preds = %5
  %32 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 8
  %33 = load i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)** %32, align 8
  %34 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %35 = load %struct.VkDevice_T*, %struct.VkDevice_T** %34, align 8
  %36 = tail call i32 %33(%struct.VkDevice_T* %35, %struct.VkBuffer_T* %3, %struct.VkDeviceMemory_T* %1, i64 %2) #15
  br label %37

37:                                               ; preds = %12, %16, %31, %20
  %38 = phi i32 [ %30, %20 ], [ %36, %31 ], [ -7, %16 ], [ -7, %12 ]
  ret i32 %38
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN20VmaDeviceMemoryBlock15BindImageMemoryEP14VmaAllocator_TP15VmaAllocation_TmP9VkImage_TPKv(%class.VmaDeviceMemoryBlock*, %struct.VmaAllocator_T* nocapture readonly, %struct.VmaAllocation_T* nocapture readonly, i64, %struct.VkImage_T*, i8*) local_unnamed_addr #0 align 2 {
  %7 = alloca %struct.VkBindImageMemoryInfo, align 8
  %8 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %2, i64 0, i32 5
  %9 = load i8, i8* %8, align 8
  %10 = icmp eq i8 %9, 1
  br i1 %10, label %11, label %14

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %2, i64 0, i32 9, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  br label %14

14:                                               ; preds = %6, %11
  %15 = phi i64 [ %13, %11 ], [ 0, %6 ]
  %16 = add i64 %15, %3
  %17 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 5
  %18 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 0
  %19 = load i8, i8* %18, align 8, !range !2
  %20 = icmp eq i8 %19, 0
  %21 = select i1 %20, %class.VmaMutex* null, %class.VmaMutex* %17
  %22 = icmp eq %class.VmaMutex* %21, null
  br i1 %22, label %25, label %23

23:                                               ; preds = %14
  %24 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %21, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %24) #15
  br label %25

25:                                               ; preds = %14, %23
  %26 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %0, i64 0, i32 4
  %27 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %26, align 8
  %28 = icmp eq i8* %5, null
  br i1 %28, label %51, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 4
  %31 = load i8, i8* %30, align 1, !range !2
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %33, label %37

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 2
  %35 = load i32, i32* %34, align 4
  %36 = icmp ugt i32 %35, 4198399
  br i1 %36, label %37, label %57

37:                                               ; preds = %33, %29
  %38 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 32, i32 20
  %39 = load i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)** %38, align 8
  %40 = icmp eq i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)* %39, null
  br i1 %40, label %57, label %41

41:                                               ; preds = %37
  %42 = bitcast %struct.VkBindImageMemoryInfo* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %42) #15
  %43 = bitcast %struct.VkBindImageMemoryInfo* %7 to i64*
  store i64 1000157001, i64* %43, align 8
  %44 = getelementptr inbounds %struct.VkBindImageMemoryInfo, %struct.VkBindImageMemoryInfo* %7, i64 0, i32 1
  store i8* %5, i8** %44, align 8
  %45 = getelementptr inbounds %struct.VkBindImageMemoryInfo, %struct.VkBindImageMemoryInfo* %7, i64 0, i32 2
  store %struct.VkImage_T* %4, %struct.VkImage_T** %45, align 8
  %46 = getelementptr inbounds %struct.VkBindImageMemoryInfo, %struct.VkBindImageMemoryInfo* %7, i64 0, i32 3
  store %struct.VkDeviceMemory_T* %27, %struct.VkDeviceMemory_T** %46, align 8
  %47 = getelementptr inbounds %struct.VkBindImageMemoryInfo, %struct.VkBindImageMemoryInfo* %7, i64 0, i32 4
  store i64 %16, i64* %47, align 8
  %48 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 9
  %49 = load %struct.VkDevice_T*, %struct.VkDevice_T** %48, align 8
  %50 = call i32 %39(%struct.VkDevice_T* %49, i32 1, %struct.VkBindImageMemoryInfo* nonnull %7) #15
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %42) #15
  br label %57

51:                                               ; preds = %25
  %52 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 32, i32 9
  %53 = load i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)** %52, align 8
  %54 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 9
  %55 = load %struct.VkDevice_T*, %struct.VkDevice_T** %54, align 8
  %56 = tail call i32 %53(%struct.VkDevice_T* %55, %struct.VkImage_T* %4, %struct.VkDeviceMemory_T* %27, i64 %16) #15
  br label %57

57:                                               ; preds = %33, %37, %41, %51
  %58 = phi i32 [ %50, %41 ], [ %56, %51 ], [ -7, %37 ], [ -7, %33 ]
  br i1 %22, label %61, label %59

59:                                               ; preds = %57
  %60 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %21, i64 0, i32 0
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %60) #15
  br label %61

61:                                               ; preds = %57, %59
  ret i32 %58
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaAllocator_T15BindVulkanImageEP16VkDeviceMemory_TmP9VkImage_TPKv(%struct.VmaAllocator_T* nocapture readonly, %struct.VkDeviceMemory_T*, i64, %struct.VkImage_T*, i8*) local_unnamed_addr #0 align 2 {
  %6 = alloca %struct.VkBindImageMemoryInfo, align 8
  %7 = icmp eq i8* %4, null
  br i1 %7, label %31, label %8

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 4
  %10 = load i8, i8* %9, align 1, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %16

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = icmp ugt i32 %14, 4198399
  br i1 %15, label %16, label %37

16:                                               ; preds = %8, %12
  %17 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 20
  %18 = load i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)** %17, align 8
  %19 = icmp eq i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)* %18, null
  br i1 %19, label %37, label %20

20:                                               ; preds = %16
  %21 = bitcast %struct.VkBindImageMemoryInfo* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %21) #15
  %22 = bitcast %struct.VkBindImageMemoryInfo* %6 to i64*
  store i64 0, i64* %22, align 8
  %23 = getelementptr inbounds %struct.VkBindImageMemoryInfo, %struct.VkBindImageMemoryInfo* %6, i64 0, i32 0
  store i32 1000157001, i32* %23, align 8
  %24 = getelementptr inbounds %struct.VkBindImageMemoryInfo, %struct.VkBindImageMemoryInfo* %6, i64 0, i32 1
  store i8* %4, i8** %24, align 8
  %25 = getelementptr inbounds %struct.VkBindImageMemoryInfo, %struct.VkBindImageMemoryInfo* %6, i64 0, i32 2
  store %struct.VkImage_T* %3, %struct.VkImage_T** %25, align 8
  %26 = getelementptr inbounds %struct.VkBindImageMemoryInfo, %struct.VkBindImageMemoryInfo* %6, i64 0, i32 3
  store %struct.VkDeviceMemory_T* %1, %struct.VkDeviceMemory_T** %26, align 8
  %27 = getelementptr inbounds %struct.VkBindImageMemoryInfo, %struct.VkBindImageMemoryInfo* %6, i64 0, i32 4
  store i64 %2, i64* %27, align 8
  %28 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %29 = load %struct.VkDevice_T*, %struct.VkDevice_T** %28, align 8
  %30 = call i32 %18(%struct.VkDevice_T* %29, i32 1, %struct.VkBindImageMemoryInfo* nonnull %6) #15
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %21) #15
  br label %37

31:                                               ; preds = %5
  %32 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 9
  %33 = load i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)** %32, align 8
  %34 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %35 = load %struct.VkDevice_T*, %struct.VkDevice_T** %34, align 8
  %36 = tail call i32 %33(%struct.VkDevice_T* %35, %struct.VkImage_T* %3, %struct.VkDeviceMemory_T* %1, i64 %2) #15
  br label %37

37:                                               ; preds = %12, %16, %31, %20
  %38 = phi i32 [ %30, %20 ], [ %36, %31 ], [ -7, %16 ], [ -7, %12 ]
  ret i32 %38
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9VmaPool_TC2EP14VmaAllocator_TRK17VmaPoolCreateInfom(%struct.VmaPool_T*, %struct.VmaAllocator_T*, %struct.VmaPoolCreateInfo* nocapture readonly dereferenceable(40), i64) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %struct.VmaPoolCreateInfo, %struct.VmaPoolCreateInfo* %2, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.VmaPoolCreateInfo, %struct.VmaPoolCreateInfo* %2, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  %10 = select i1 %9, i64 %3, i64 %8
  %11 = getelementptr inbounds %struct.VmaPoolCreateInfo, %struct.VmaPoolCreateInfo* %2, i64 0, i32 3
  %12 = bitcast i64* %11 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 8
  %14 = getelementptr inbounds %struct.VmaPoolCreateInfo, %struct.VmaPoolCreateInfo* %2, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = and i32 %15, 2
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %23

18:                                               ; preds = %4
  %19 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 18, i32 7, i32 11
  %20 = load i64, i64* %19, align 8
  %21 = icmp ugt i64 %20, 1
  %22 = select i1 %21, i64 %20, i64 1
  br label %23

23:                                               ; preds = %4, %18
  %24 = phi i64 [ %22, %18 ], [ 1, %4 ]
  %25 = getelementptr inbounds %struct.VmaPoolCreateInfo, %struct.VmaPoolCreateInfo* %2, i64 0, i32 5
  %26 = load i32, i32* %25, align 8
  %27 = icmp ne i64 %8, 0
  %28 = and i32 %15, 12
  %29 = zext i1 %27 to i8
  %30 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %0, i64 0, i32 0, i32 0
  store %struct.VmaAllocator_T* %1, %struct.VmaAllocator_T** %30, align 8
  %31 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %0, i64 0, i32 0, i32 1
  store %struct.VmaPool_T* %0, %struct.VmaPool_T** %31, align 8
  %32 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %0, i64 0, i32 0, i32 2
  store i32 %6, i32* %32, align 8
  %33 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %0, i64 0, i32 0, i32 4
  store i64 %10, i64* %33, align 8
  %34 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %0, i64 0, i32 0, i32 5
  %35 = bitcast i64* %34 to <2 x i64>*
  store <2 x i64> %13, <2 x i64>* %35, align 8
  %36 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %0, i64 0, i32 0, i32 7
  store i64 %24, i64* %36, align 8
  %37 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %0, i64 0, i32 0, i32 8
  store i32 %26, i32* %37, align 8
  %38 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %0, i64 0, i32 0, i32 9
  store i8 %29, i8* %38, align 4
  %39 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %0, i64 0, i32 0, i32 11
  store i32 %28, i32* %39, align 8
  %40 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %0, i64 0, i32 0, i32 13
  %41 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %0, i64 0, i32 0, i32 16
  %42 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 11
  %43 = bitcast %class.VmaRWMutex* %40 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %43, i8 0, i64 41, i1 false) #15
  %44 = load i8, i8* %42, align 8, !range !2
  %45 = icmp eq i8 %44, 0
  %46 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13
  %47 = ptrtoint %struct.VkAllocationCallbacks* %46 to i64
  %48 = select i1 %45, i64 0, i64 %47
  %49 = bitcast %class.VmaVector.13* %41 to i64*
  store i64 %48, i64* %49, align 8
  %50 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %0, i64 0, i32 0, i32 16, i32 1
  %51 = bitcast %class.VmaDeviceMemoryBlock*** %50 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %51, i8 0, i64 28, i1 false) #15
  %52 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %0, i64 0, i32 1
  store i32 0, i32* %52, align 8
  %53 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %0, i64 0, i32 2
  store i8* null, i8** %53, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9VmaPool_TD2Ev(%struct.VmaPool_T* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %0, i64 0, i32 0
  tail call void @_ZN14VmaBlockVectorD2Ev(%struct.VmaBlockVector* %2) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9VmaPool_T7SetNameEPKc(%struct.VmaPool_T* nocapture, i8* readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %0, i64 0, i32 0, i32 0
  %4 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %3, align 8
  %5 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %4, i64 0, i32 11
  %6 = load i8, i8* %5, align 8, !range !2
  %7 = icmp eq i8 %6, 0
  %8 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %4, i64 0, i32 13
  %9 = select i1 %7, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %8
  %10 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %0, i64 0, i32 2
  %11 = load i8*, i8** %10, align 8
  %12 = icmp eq i8* %11, null
  br i1 %12, label %23, label %13

13:                                               ; preds = %2
  %14 = icmp eq %struct.VkAllocationCallbacks* %9, null
  br i1 %14, label %22, label %15

15:                                               ; preds = %13
  %16 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %9, i64 0, i32 3
  %17 = load void (i8*, i8*)*, void (i8*, i8*)** %16, align 8
  %18 = icmp eq void (i8*, i8*)* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %9, i64 0, i32 0
  %21 = load i8*, i8** %20, align 8
  tail call void %17(i8* %21, i8* nonnull %11) #15
  br label %23

22:                                               ; preds = %15, %13
  tail call void @free(i8* nonnull %11) #15
  br label %23

23:                                               ; preds = %2, %19, %22
  %24 = icmp eq i8* %1, null
  br i1 %24, label %41, label %25

25:                                               ; preds = %23
  %26 = tail call i64 @strlen(i8* nonnull %1) #16
  %27 = add i64 %26, 1
  %28 = icmp eq %struct.VkAllocationCallbacks* %9, null
  br i1 %28, label %37, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %9, i64 0, i32 1
  %31 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %30, align 8
  %32 = icmp eq i8* (i8*, i64, i64, i32)* %31, null
  br i1 %32, label %37, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %9, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = tail call i8* %31(i8* %35, i64 %27, i64 1, i32 1) #15
  br label %39

37:                                               ; preds = %29, %25
  %38 = tail call noalias i8* @aligned_alloc(i64 1, i64 %27) #15
  br label %39

39:                                               ; preds = %33, %37
  %40 = phi i8* [ %36, %33 ], [ %38, %37 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* nonnull align 1 %1, i64 %27, i1 false) #15
  br label %41

41:                                               ; preds = %23, %39
  %42 = phi i8* [ %40, %39 ], [ null, %23 ]
  store i8* %42, i8** %10, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaBlockVectorC2EP14VmaAllocator_TP9VmaPool_Tjmmmmjbj(%struct.VmaBlockVector* nocapture, %struct.VmaAllocator_T*, %struct.VmaPool_T*, i32, i64, i64, i64, i64, i32, i1 zeroext, i32) unnamed_addr #0 align 2 {
  %12 = zext i1 %9 to i8
  %13 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 0
  store %struct.VmaAllocator_T* %1, %struct.VmaAllocator_T** %13, align 8
  %14 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 1
  store %struct.VmaPool_T* %2, %struct.VmaPool_T** %14, align 8
  %15 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 2
  store i32 %3, i32* %15, align 8
  %16 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 4
  store i64 %4, i64* %16, align 8
  %17 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 5
  store i64 %5, i64* %17, align 8
  %18 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 6
  store i64 %6, i64* %18, align 8
  %19 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 7
  store i64 %7, i64* %19, align 8
  %20 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 8
  store i32 %8, i32* %20, align 8
  %21 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 9
  store i8 %12, i8* %21, align 4
  %22 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 11
  store i32 %10, i32* %22, align 8
  %23 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 13
  %24 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16
  %25 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 11
  %26 = bitcast %class.VmaRWMutex* %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 41, i1 false)
  %27 = load i8, i8* %25, align 8, !range !2
  %28 = icmp eq i8 %27, 0
  %29 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13
  %30 = ptrtoint %struct.VkAllocationCallbacks* %29 to i64
  %31 = select i1 %28, i64 0, i64 %30
  %32 = bitcast %class.VmaVector.13* %24 to i64*
  store i64 %31, i64* %32, align 8
  %33 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  %34 = bitcast %class.VmaDeviceMemoryBlock*** %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %34, i8 0, i64 28, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaBlockVectorD2Ev(%struct.VmaBlockVector* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  %7 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 0
  br label %24

8:                                                ; preds = %90, %1
  %9 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 0, i32 0
  %10 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %9, align 8
  %11 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  %12 = bitcast %class.VmaDeviceMemoryBlock*** %11 to i8**
  %13 = load i8*, i8** %12, align 8
  %14 = icmp eq %struct.VkAllocationCallbacks* %10, null
  br i1 %14, label %22, label %15

15:                                               ; preds = %8
  %16 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %10, i64 0, i32 3
  %17 = load void (i8*, i8*)*, void (i8*, i8*)** %16, align 8
  %18 = icmp eq void (i8*, i8*)* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %10, i64 0, i32 0
  %21 = load i8*, i8** %20, align 8
  tail call void %17(i8* %21, i8* %13) #15
  br label %23

22:                                               ; preds = %15, %8
  tail call void @free(i8* %13) #15
  br label %23

23:                                               ; preds = %19, %22
  ret void

24:                                               ; preds = %5, %90
  %25 = phi i64 [ %3, %5 ], [ %26, %90 ]
  %26 = add i64 %25, -1
  %27 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %6, align 8
  %28 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %27, i64 %26
  %29 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %28, align 8
  %30 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %7, align 8
  %31 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %29, i64 0, i32 2
  %32 = load i32, i32* %31, align 8
  %33 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %29, i64 0, i32 0
  %34 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %33, align 8
  %35 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %34, i64 0, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %29, i64 0, i32 4
  %38 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %37, align 8
  %39 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %30, i64 0, i32 14, i32 1
  %40 = load void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)*, void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)** %39, align 8
  %41 = icmp eq void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)* %40, null
  br i1 %41, label %45, label %42

42:                                               ; preds = %24
  %43 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %30, i64 0, i32 14, i32 2
  %44 = load i8*, i8** %43, align 8
  tail call void %40(%struct.VmaAllocator_T* %30, i32 %32, %struct.VkDeviceMemory_T* %38, i64 %36, i8* %44) #15
  br label %45

45:                                               ; preds = %42, %24
  %46 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %30, i64 0, i32 32, i32 3
  %47 = load void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)** %46, align 8
  %48 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %30, i64 0, i32 9
  %49 = load %struct.VkDevice_T*, %struct.VkDevice_T** %48, align 8
  %50 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %30, i64 0, i32 11
  %51 = load i8, i8* %50, align 8, !range !2
  %52 = icmp eq i8 %51, 0
  %53 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %30, i64 0, i32 13
  %54 = select i1 %52, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %53
  tail call void %47(%struct.VkDevice_T* %49, %struct.VkDeviceMemory_T* %38, %struct.VkAllocationCallbacks* %54) #15
  %55 = zext i32 %32 to i64
  %56 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %30, i64 0, i32 19, i32 1, i64 %55, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %30, i64 0, i32 23, i32 0, i64 %58, i32 0, i32 0, i32 0, i32 0, i32 0
  %60 = atomicrmw sub i64* %59, i64 %36 seq_cst
  store %struct.VkDeviceMemory_T* null, %struct.VkDeviceMemory_T** %37, align 8
  %61 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %33, align 8
  %62 = icmp eq %class.VmaBlockMetadata* %61, null
  br i1 %62, label %75, label %63

63:                                               ; preds = %45
  %64 = bitcast %class.VmaBlockMetadata* %61 to void (%class.VmaBlockMetadata*)***
  %65 = load void (%class.VmaBlockMetadata*)**, void (%class.VmaBlockMetadata*)*** %64, align 8
  %66 = load void (%class.VmaBlockMetadata*)*, void (%class.VmaBlockMetadata*)** %65, align 8
  tail call void %66(%class.VmaBlockMetadata* nonnull %61) #15
  %67 = bitcast %class.VmaBlockMetadata* %61 to i8*
  %68 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %30, i64 0, i32 13, i32 3
  %69 = load void (i8*, i8*)*, void (i8*, i8*)** %68, align 8
  %70 = icmp eq void (i8*, i8*)* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %63
  %72 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %30, i64 0, i32 13, i32 0
  %73 = load i8*, i8** %72, align 8
  tail call void %69(i8* %73, i8* nonnull %67) #15
  br label %75

74:                                               ; preds = %63
  tail call void @free(i8* %67) #15
  br label %75

75:                                               ; preds = %45, %71, %74
  store %class.VmaBlockMetadata* null, %class.VmaBlockMetadata** %33, align 8
  %76 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %7, align 8
  %77 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %6, align 8
  %78 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %77, i64 %26
  %79 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %78, align 8
  %80 = icmp eq %class.VmaDeviceMemoryBlock* %79, null
  br i1 %80, label %90, label %81

81:                                               ; preds = %75
  %82 = bitcast %class.VmaDeviceMemoryBlock* %79 to i8*
  %83 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %76, i64 0, i32 13, i32 3
  %84 = load void (i8*, i8*)*, void (i8*, i8*)** %83, align 8
  %85 = icmp eq void (i8*, i8*)* %84, null
  br i1 %85, label %89, label %86

86:                                               ; preds = %81
  %87 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %76, i64 0, i32 13, i32 0
  %88 = load i8*, i8** %87, align 8
  tail call void %84(i8* %88, i8* nonnull %82) #15
  br label %90

89:                                               ; preds = %81
  tail call void @free(i8* %82) #15
  br label %90

90:                                               ; preds = %75, %86, %89
  %91 = icmp eq i64 %26, 0
  br i1 %91, label %8, label %24
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaBlockVector15CreateMinBlocksEv(%struct.VmaBlockVector*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 4
  %3 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 5
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %15, label %9

6:                                                ; preds = %9
  %7 = load i64, i64* %3, align 8
  %8 = icmp ult i64 %14, %7
  br i1 %8, label %9, label %15

9:                                                ; preds = %1, %6
  %10 = phi i64 [ %14, %6 ], [ 0, %1 ]
  %11 = load i64, i64* %2, align 8
  %12 = tail call i32 @_ZN14VmaBlockVector11CreateBlockEmPm(%struct.VmaBlockVector* %0, i64 %11, i64* null)
  %13 = icmp eq i32 %12, 0
  %14 = add nuw i64 %10, 1
  br i1 %13, label %6, label %15

15:                                               ; preds = %9, %6, %1
  %16 = phi i32 [ 0, %1 ], [ 0, %6 ], [ %12, %9 ]
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaBlockVector11CreateBlockEmPm(%struct.VmaBlockVector*, i64, i64*) local_unnamed_addr #0 align 2 {
  %4 = alloca %struct.VkMemoryAllocateInfo, align 8
  %5 = alloca %struct.VkMemoryAllocateFlagsInfo, align 8
  %6 = alloca %struct.VkDeviceMemory_T*, align 8
  %7 = bitcast %struct.VkMemoryAllocateInfo* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %7, i8* align 8 bitcast ({ i32, [4 x i8], i8*, i64, i32, [4 x i8] }* @__const._ZN14VmaAllocator_T23AllocateDedicatedMemoryEm20VmaSuballocationTypejbbbPvP10VkBuffer_TjP9VkImage_TmPP15VmaAllocation_T.allocInfo to i8*), i64 32, i1 false)
  %8 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.VkMemoryAllocateInfo, %struct.VkMemoryAllocateInfo* %4, i64 0, i32 3
  store i32 %9, i32* %10, align 8
  %11 = getelementptr inbounds %struct.VkMemoryAllocateInfo, %struct.VkMemoryAllocateInfo* %4, i64 0, i32 2
  store i64 %1, i64* %11, align 8
  %12 = bitcast %struct.VkMemoryAllocateFlagsInfo* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* align 8 bitcast ({ i32, [4 x i8], i8*, i32, i32 }* @__const._ZN14VmaAllocator_T23AllocateDedicatedMemoryEm20VmaSuballocationTypejbbbPvP10VkBuffer_TjP9VkImage_TmPP15VmaAllocation_T.allocFlagsInfo to i8*), i64 24, i1 false)
  %13 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 0
  %14 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %13, align 8
  %15 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %14, i64 0, i32 7
  %16 = load i8, i8* %15, align 4, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %26, label %18

18:                                               ; preds = %3
  %19 = getelementptr inbounds %struct.VkMemoryAllocateFlagsInfo, %struct.VkMemoryAllocateFlagsInfo* %5, i64 0, i32 2
  store i32 2, i32* %19, align 8
  %20 = getelementptr inbounds %struct.VkMemoryAllocateInfo, %struct.VkMemoryAllocateInfo* %4, i64 0, i32 1
  %21 = bitcast i8** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %struct.VkMemoryAllocateFlagsInfo, %struct.VkMemoryAllocateFlagsInfo* %5, i64 0, i32 1
  %24 = bitcast i8** %23 to i64*
  store i64 %22, i64* %24, align 8
  %25 = bitcast i8** %20 to %struct.VkMemoryAllocateFlagsInfo**
  store %struct.VkMemoryAllocateFlagsInfo* %5, %struct.VkMemoryAllocateFlagsInfo** %25, align 8
  br label %26

26:                                               ; preds = %3, %18
  %27 = bitcast %struct.VkDeviceMemory_T** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #15
  store %struct.VkDeviceMemory_T* null, %struct.VkDeviceMemory_T** %6, align 8
  %28 = zext i32 %9 to i64
  %29 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %14, i64 0, i32 19, i32 1, i64 %28, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %14, i64 0, i32 16
  %32 = load i32, i32* %31, align 8
  %33 = shl i32 1, %30
  %34 = and i32 %32, %33
  %35 = icmp eq i32 %34, 0
  %36 = zext i32 %30 to i64
  br i1 %35, label %55, label %37

37:                                               ; preds = %26
  %38 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %14, i64 0, i32 19, i32 3, i64 %36, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %14, i64 0, i32 23, i32 0, i64 %36, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load atomic i64, i64* %40 seq_cst, align 8
  %42 = load i64, i64* %11, align 8
  %43 = add i64 %42, %41
  %44 = icmp ugt i64 %43, %39
  br i1 %44, label %131, label %45

45:                                               ; preds = %37, %50
  %46 = phi i64 [ %53, %50 ], [ %43, %37 ]
  %47 = phi i64 [ %51, %50 ], [ %41, %37 ]
  %48 = cmpxchg i64* %40, i64 %47, i64 %46 seq_cst seq_cst
  %49 = extractvalue { i64, i1 } %48, 1
  br i1 %49, label %58, label %50

50:                                               ; preds = %45
  %51 = extractvalue { i64, i1 } %48, 0
  %52 = load i64, i64* %11, align 8
  %53 = add i64 %52, %51
  %54 = icmp ugt i64 %53, %39
  br i1 %54, label %131, label %45

55:                                               ; preds = %26
  %56 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %14, i64 0, i32 23, i32 0, i64 %36, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = atomicrmw add i64* %56, i64 %1 seq_cst
  br label %58

58:                                               ; preds = %45, %55
  %59 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %14, i64 0, i32 32, i32 2
  %60 = load i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)*, i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)** %59, align 8
  %61 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %14, i64 0, i32 9
  %62 = load %struct.VkDevice_T*, %struct.VkDevice_T** %61, align 8
  %63 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %14, i64 0, i32 11
  %64 = load i8, i8* %63, align 8, !range !2
  %65 = icmp eq i8 %64, 0
  %66 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %14, i64 0, i32 13
  %67 = select i1 %65, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %66
  %68 = call i32 %60(%struct.VkDevice_T* %62, %struct.VkMemoryAllocateInfo* nonnull %4, %struct.VkAllocationCallbacks* %67, %struct.VkDeviceMemory_T** nonnull %6) #15
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %82

70:                                               ; preds = %58
  %71 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %14, i64 0, i32 23, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %72 = atomicrmw add i32* %71, i32 1 seq_cst
  %73 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %14, i64 0, i32 14, i32 0
  %74 = load void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)*, void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)** %73, align 8
  %75 = icmp eq void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)* %74, null
  br i1 %75, label %87, label %76

76:                                               ; preds = %70
  %77 = load i32, i32* %10, align 8
  %78 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %6, align 8
  %79 = load i64, i64* %11, align 8
  %80 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %14, i64 0, i32 14, i32 2
  %81 = load i8*, i8** %80, align 8
  call void %74(%struct.VmaAllocator_T* %14, i32 %77, %struct.VkDeviceMemory_T* %78, i64 %79, i8* %81) #15
  br label %87

82:                                               ; preds = %58
  %83 = load i64, i64* %11, align 8
  %84 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %14, i64 0, i32 23, i32 0, i64 %36, i32 0, i32 0, i32 0, i32 0, i32 0
  %85 = atomicrmw sub i64* %84, i64 %83 seq_cst
  %86 = icmp slt i32 %68, 0
  br i1 %86, label %131, label %87

87:                                               ; preds = %76, %70, %82
  %88 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %13, align 8
  %89 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %88, i64 0, i32 13, i32 1
  %90 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %89, align 8
  %91 = icmp eq i8* (i8*, i64, i64, i32)* %90, null
  br i1 %91, label %96, label %92

92:                                               ; preds = %87
  %93 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %88, i64 0, i32 13, i32 0
  %94 = load i8*, i8** %93, align 8
  %95 = call i8* %90(i8* %94, i64 88, i64 8, i32 1) #15
  br label %98

96:                                               ; preds = %87
  %97 = call noalias i8* @aligned_alloc(i64 8, i64 88) #15
  br label %98

98:                                               ; preds = %92, %96
  %99 = phi i8* [ %95, %92 ], [ %97, %96 ]
  %100 = bitcast i8* %99 to %class.VmaDeviceMemoryBlock*
  %101 = bitcast i8* %99 to %class.VmaBlockMetadata**
  store %class.VmaBlockMetadata* null, %class.VmaBlockMetadata** %101, align 8
  %102 = getelementptr inbounds i8, i8* %99, i64 16
  %103 = bitcast i8* %102 to i32*
  store i32 -1, i32* %103, align 8
  %104 = getelementptr inbounds i8, i8* %99, i64 20
  %105 = getelementptr inbounds i8, i8* %99, i64 80
  %106 = bitcast i8* %105 to i8**
  store i8* null, i8** %106, align 8
  call void @llvm.memset.p0i8.i64(i8* align 4 %104, i8 0, i64 56, i1 false) #15
  %107 = ptrtoint i8* %99 to i64
  %108 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %13, align 8
  %109 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 1
  %110 = load %struct.VmaPool_T*, %struct.VmaPool_T** %109, align 8
  %111 = load i32, i32* %8, align 8
  %112 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %6, align 8
  %113 = load i64, i64* %11, align 8
  %114 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 17
  %115 = load i32, i32* %114, align 8
  %116 = add i32 %115, 1
  store i32 %116, i32* %114, align 8
  %117 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 11
  %118 = load i32, i32* %117, align 8
  call void @_ZN20VmaDeviceMemoryBlock4InitEP14VmaAllocator_TP9VmaPool_TjP16VkDeviceMemory_Tmjj(%class.VmaDeviceMemoryBlock* %100, %struct.VmaAllocator_T* %108, %struct.VmaPool_T* %110, i32 %111, %struct.VkDeviceMemory_T* %112, i64 %113, i32 %115, i32 %118)
  %119 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16
  %120 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %121 = load i64, i64* %120, align 8
  %122 = add i64 %121, 1
  call void @_ZN9VmaVectorIP20VmaDeviceMemoryBlock15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.13* %119, i64 %122, i1 zeroext false) #15
  %123 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  %124 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %123, align 8
  %125 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %124, i64 %121
  %126 = bitcast %class.VmaDeviceMemoryBlock** %125 to i64*
  store i64 %107, i64* %126, align 8
  %127 = icmp eq i64* %2, null
  br i1 %127, label %131, label %128

128:                                              ; preds = %98
  %129 = load i64, i64* %120, align 8
  %130 = add i64 %129, -1
  store i64 %130, i64* %2, align 8
  br label %131

131:                                              ; preds = %50, %37, %128, %98, %82
  %132 = phi i32 [ %68, %82 ], [ 0, %98 ], [ 0, %128 ], [ -2, %37 ], [ -2, %50 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #15
  ret i32 %132
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaBlockVector12GetPoolStatsEP12VmaPoolStats(%struct.VmaBlockVector*, %struct.VmaPoolStats*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 13
  %4 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 0
  %5 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %4, align 8
  %6 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %5, i64 0, i32 0
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  %9 = select i1 %8, %class.VmaRWMutex* null, %class.VmaRWMutex* %3
  %10 = icmp eq %class.VmaRWMutex* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %9, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %12) #15
  br label %13

13:                                               ; preds = %2, %11
  %14 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %1, i64 0, i32 5
  %17 = bitcast %struct.VmaPoolStats* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 40, i1 false)
  store i64 %15, i64* %16, align 8
  %18 = icmp eq i64 %15, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  br label %25

21:                                               ; preds = %25, %13
  br i1 %10, label %24, label %22

22:                                               ; preds = %21
  %23 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %9, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %23) #15
  br label %24

24:                                               ; preds = %21, %22
  ret void

25:                                               ; preds = %19, %25
  %26 = phi i64 [ 0, %19 ], [ %38, %25 ]
  %27 = phi i32 [ 0, %19 ], [ %37, %25 ]
  %28 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %20, align 8
  %29 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %28, i64 %26
  %30 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %29, align 8
  %31 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %30, i64 0, i32 0
  %32 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %31, align 8
  %33 = bitcast %class.VmaBlockMetadata* %32 to void (%class.VmaBlockMetadata*, %struct.VmaPoolStats*)***
  %34 = load void (%class.VmaBlockMetadata*, %struct.VmaPoolStats*)**, void (%class.VmaBlockMetadata*, %struct.VmaPoolStats*)*** %33, align 8
  %35 = getelementptr inbounds void (%class.VmaBlockMetadata*, %struct.VmaPoolStats*)*, void (%class.VmaBlockMetadata*, %struct.VmaPoolStats*)** %34, i64 9
  %36 = load void (%class.VmaBlockMetadata*, %struct.VmaPoolStats*)*, void (%class.VmaBlockMetadata*, %struct.VmaPoolStats*)** %35, align 8
  tail call void %36(%class.VmaBlockMetadata* %32, %struct.VmaPoolStats* dereferenceable(48) %1) #15
  %37 = add i32 %27, 1
  %38 = zext i32 %37 to i64
  %39 = icmp ugt i64 %15, %38
  br i1 %39, label %25, label %21
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN14VmaBlockVector7IsEmptyEv(%struct.VmaBlockVector*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 13
  %3 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 0
  %4 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %3, align 8
  %5 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %4, i64 0, i32 0
  %6 = load i8, i8* %5, align 8, !range !2
  %7 = icmp eq i8 %6, 0
  %8 = icmp eq %class.VmaRWMutex* %2, null
  %9 = or i1 %8, %7
  br i1 %9, label %10, label %13

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %12 = load i64, i64* %11, align 8
  br label %17

13:                                               ; preds = %1
  %14 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %2, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %14) #15
  %15 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %16 = load i64, i64* %15, align 8
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %14) #15
  br label %17

17:                                               ; preds = %10, %13
  %18 = phi i64 [ %12, %10 ], [ %16, %13 ]
  %19 = icmp eq i64 %18, 0
  ret i1 %19
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK14VmaBlockVector28IsCorruptionDetectionEnabledEv(%struct.VmaBlockVector* nocapture readnone) local_unnamed_addr #10 align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaBlockVector8AllocateEjmmRK23VmaAllocationCreateInfo20VmaSuballocationTypemPP15VmaAllocation_T(%struct.VmaBlockVector*, i32, i64, i64, %struct.VmaAllocationCreateInfo* nocapture readonly dereferenceable(40), i32, i64, %struct.VmaAllocation_T** nocapture) local_unnamed_addr #0 align 2 {
  %9 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 13
  %10 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 0
  %11 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %10, align 8
  %12 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %11, i64 0, i32 0
  %13 = load i8, i8* %12, align 8, !range !2
  %14 = icmp eq i8 %13, 0
  %15 = select i1 %14, %class.VmaRWMutex* null, %class.VmaRWMutex* %9
  %16 = icmp eq %class.VmaRWMutex* %15, null
  br i1 %16, label %19, label %17

17:                                               ; preds = %8
  %18 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %15, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %18) #15
  br label %19

19:                                               ; preds = %8, %17
  %20 = icmp eq i64 %6, 0
  br i1 %20, label %29, label %21

21:                                               ; preds = %19, %26
  %22 = phi i64 [ %27, %26 ], [ 0, %19 ]
  %23 = getelementptr inbounds %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %7, i64 %22
  %24 = tail call i32 @_ZN14VmaBlockVector12AllocatePageEjmmRK23VmaAllocationCreateInfo20VmaSuballocationTypePP15VmaAllocation_T(%struct.VmaBlockVector* %0, i32 %1, i64 %2, i64 %3, %struct.VmaAllocationCreateInfo* dereferenceable(40) %4, i32 %5, %struct.VmaAllocation_T** %23)
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %21
  %27 = add nuw i64 %22, 1
  %28 = icmp eq i64 %27, %6
  br i1 %28, label %29, label %21

29:                                               ; preds = %21, %26, %19
  %30 = phi i64 [ 0, %19 ], [ %22, %21 ], [ %6, %26 ]
  %31 = phi i32 [ 0, %19 ], [ %24, %21 ], [ 0, %26 ]
  br i1 %16, label %34, label %32

32:                                               ; preds = %29
  %33 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %15, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %33) #15
  br label %34

34:                                               ; preds = %29, %32
  %35 = icmp eq i32 %31, 0
  br i1 %35, label %47, label %36

36:                                               ; preds = %34
  %37 = icmp eq i64 %30, 0
  br i1 %37, label %44, label %38

38:                                               ; preds = %36, %38
  %39 = phi i64 [ %40, %38 ], [ %30, %36 ]
  %40 = add i64 %39, -1
  %41 = getelementptr inbounds %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %7, i64 %40
  %42 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %41, align 8
  tail call void @_ZN14VmaBlockVector4FreeEP15VmaAllocation_T(%struct.VmaBlockVector* %0, %struct.VmaAllocation_T* %42)
  %43 = icmp eq i64 %40, 0
  br i1 %43, label %44, label %38

44:                                               ; preds = %38, %36
  %45 = bitcast %struct.VmaAllocation_T** %7 to i8*
  %46 = shl i64 %6, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %45, i8 0, i64 %46, i1 false)
  br label %47

47:                                               ; preds = %34, %44
  ret i32 %31
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaBlockVector12AllocatePageEjmmRK23VmaAllocationCreateInfo20VmaSuballocationTypePP15VmaAllocation_T(%struct.VmaBlockVector*, i32, i64, i64, %struct.VmaAllocationCreateInfo* nocapture readonly dereferenceable(40), i32, %struct.VmaAllocation_T** nocapture) local_unnamed_addr #0 align 2 {
  %8 = alloca %struct.VmaBudget, align 8
  %9 = alloca i64, align 8
  %10 = alloca %struct.VmaAllocationRequest, align 8
  %11 = alloca %struct.VmaAllocationRequest, align 8
  %12 = alloca %struct.VmaAllocationRequest, align 8
  %13 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %4, i64 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = and i32 %14, 64
  %16 = icmp eq i32 %15, 0
  %17 = lshr i32 %14, 4
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = and i32 %14, 4
  %21 = icmp eq i32 %20, 0
  %22 = and i32 %14, 32
  %23 = icmp ne i32 %22, 0
  %24 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 0
  %25 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %24, align 8
  %26 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %25, i64 0, i32 19, i32 1, i64 %28, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = bitcast %struct.VmaBudget* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %31) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %31, i8 0, i64 32, i1 false)
  call void @_ZN14VmaAllocator_T9GetBudgetEP9VmaBudgetjj(%struct.VmaAllocator_T* %25, %struct.VmaBudget* nonnull %8, i32 %30, i32 1)
  %32 = getelementptr inbounds %struct.VmaBudget, %struct.VmaBudget* %8, i64 0, i32 2
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds %struct.VmaBudget, %struct.VmaBudget* %8, i64 0, i32 3
  %35 = load i64, i64* %34, align 8
  %36 = tail call i64 @llvm.usub.sat.i64(i64 %35, i64 %33)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %31) #15
  %37 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 1
  %38 = load %struct.VmaPool_T*, %struct.VmaPool_T** %37, align 8
  %39 = icmp ne %struct.VmaPool_T* %38, null
  %40 = load i32, i32* %13, align 8
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %52

43:                                               ; preds = %7
  %44 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 6
  %47 = load i64, i64* %46, align 8
  %48 = icmp ult i64 %45, %47
  br i1 %48, label %49, label %52

49:                                               ; preds = %43
  %50 = icmp uge i64 %36, %2
  %51 = or i1 %50, %39
  br label %52

52:                                               ; preds = %49, %43, %7
  %53 = phi i1 [ false, %43 ], [ false, %7 ], [ %51, %49 ]
  %54 = and i32 %40, 458752
  %55 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 11
  %56 = load i32, i32* %55, align 8
  %57 = icmp eq i32 %56, 4
  br i1 %57, label %58, label %63

58:                                               ; preds = %52
  %59 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 6
  %60 = load i64, i64* %59, align 8
  %61 = icmp ugt i64 %60, 1
  %62 = select i1 %61, i8 0, i8 %19
  br label %63

63:                                               ; preds = %58, %52
  %64 = phi i8 [ %19, %52 ], [ %62, %58 ]
  br i1 %16, label %70, label %65

65:                                               ; preds = %63
  br i1 %57, label %66, label %441

66:                                               ; preds = %65
  %67 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 6
  %68 = load i64, i64* %67, align 8
  %69 = icmp ugt i64 %68, 1
  br i1 %69, label %441, label %70

70:                                               ; preds = %63, %66
  %71 = lshr exact i32 %54, 16
  switch i32 %71, label %441 [
    i32 0, label %72
    i32 1, label %73
    i32 2, label %73
    i32 4, label %73
  ]

72:                                               ; preds = %70
  br label %73

73:                                               ; preds = %70, %70, %70, %72
  %74 = phi i32 [ %54, %70 ], [ %54, %70 ], [ %54, %70 ], [ 65536, %72 ]
  %75 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 4
  %76 = load i64, i64* %75, align 8
  %77 = icmp ult i64 %76, %2
  br i1 %77, label %441, label %78

78:                                               ; preds = %73
  %79 = icmp ne i8 %64, 0
  %80 = xor i1 %79, true
  %81 = or i1 %53, %80
  br i1 %81, label %82, label %218

82:                                               ; preds = %78
  %83 = and i32 %40, -17
  br i1 %57, label %84, label %98

84:                                               ; preds = %82
  %85 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %86 = load i64, i64* %85, align 8
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %133, label %88

88:                                               ; preds = %84
  %89 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  %90 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %89, align 8
  %91 = add i64 %86, -1
  %92 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %90, i64 %91
  %93 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %92, align 8
  %94 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %4, i64 0, i32 6
  %95 = load i8*, i8** %94, align 8
  %96 = tail call i32 @_ZN14VmaBlockVector17AllocateFromBlockEP20VmaDeviceMemoryBlockjmmjPv20VmaSuballocationTypejPP15VmaAllocation_T(%struct.VmaBlockVector* %0, %class.VmaDeviceMemoryBlock* %93, i32 %1, i64 %2, i64 %3, i32 %83, i8* %95, i32 %5, i32 %74, %struct.VmaAllocation_T** %6)
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %441, label %133

98:                                               ; preds = %82
  %99 = icmp eq i32 %74, 65536
  %100 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %101 = load i64, i64* %100, align 8
  br i1 %99, label %102, label %119

102:                                              ; preds = %98
  %103 = icmp eq i64 %101, 0
  br i1 %103, label %133, label %104

104:                                              ; preds = %102
  %105 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  %106 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %4, i64 0, i32 6
  br label %110

107:                                              ; preds = %110
  %108 = load i64, i64* %100, align 8
  %109 = icmp ult i64 %118, %108
  br i1 %109, label %110, label %133

110:                                              ; preds = %104, %107
  %111 = phi i64 [ 0, %104 ], [ %118, %107 ]
  %112 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %105, align 8
  %113 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %112, i64 %111
  %114 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %113, align 8
  %115 = load i8*, i8** %106, align 8
  %116 = tail call i32 @_ZN14VmaBlockVector17AllocateFromBlockEP20VmaDeviceMemoryBlockjmmjPv20VmaSuballocationTypejPP15VmaAllocation_T(%struct.VmaBlockVector* %0, %class.VmaDeviceMemoryBlock* %114, i32 %1, i64 %2, i64 %3, i32 %83, i8* %115, i32 %5, i32 65536, %struct.VmaAllocation_T** %6)
  %117 = icmp eq i32 %116, 0
  %118 = add nuw i64 %111, 1
  br i1 %117, label %441, label %107

119:                                              ; preds = %98
  %120 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  %121 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %4, i64 0, i32 6
  br label %122

122:                                              ; preds = %126, %119
  %123 = phi i64 [ %101, %119 ], [ %124, %126 ]
  %124 = add i64 %123, -1
  %125 = icmp eq i64 %123, 0
  br i1 %125, label %133, label %126

126:                                              ; preds = %122
  %127 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %120, align 8
  %128 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %127, i64 %124
  %129 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %128, align 8
  %130 = load i8*, i8** %121, align 8
  %131 = tail call i32 @_ZN14VmaBlockVector17AllocateFromBlockEP20VmaDeviceMemoryBlockjmmjPv20VmaSuballocationTypejPP15VmaAllocation_T(%struct.VmaBlockVector* %0, %class.VmaDeviceMemoryBlock* %129, i32 %1, i64 %2, i64 %3, i32 %83, i8* %130, i32 %5, i32 %74, %struct.VmaAllocation_T** %6)
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %441, label %122

133:                                              ; preds = %122, %107, %102, %88, %84
  br i1 %53, label %134, label %218

134:                                              ; preds = %133
  %135 = load i64, i64* %75, align 8
  %136 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 9
  %137 = load i8, i8* %136, align 4, !range !2
  %138 = icmp eq i8 %137, 0
  br i1 %138, label %139, label %170

139:                                              ; preds = %134
  %140 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %141 = load i64, i64* %140, align 8
  %142 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  br label %143

143:                                              ; preds = %148, %139
  %144 = phi i64 [ 0, %139 ], [ %157, %148 ]
  %145 = phi i64 [ %141, %139 ], [ %146, %148 ]
  %146 = add i64 %145, -1
  %147 = icmp eq i64 %145, 0
  br i1 %147, label %159, label %148

148:                                              ; preds = %143
  %149 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %142, align 8
  %150 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %149, i64 %146
  %151 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %150, align 8
  %152 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %151, i64 0, i32 0
  %153 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %152, align 8
  %154 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %153, i64 0, i32 1
  %155 = load i64, i64* %154, align 8
  %156 = icmp ult i64 %144, %155
  %157 = select i1 %156, i64 %155, i64 %144
  %158 = icmp ult i64 %157, %135
  br i1 %158, label %143, label %159

159:                                              ; preds = %143, %148
  %160 = phi i64 [ %144, %143 ], [ %157, %148 ]
  %161 = shl i64 %2, 1
  %162 = lshr i64 %135, 1
  %163 = icmp ule i64 %162, %160
  %164 = icmp ult i64 %162, %161
  %165 = or i1 %163, %164
  %166 = select i1 %165, i64 %135, i64 %162
  %167 = or i1 %163, %164
  %168 = xor i1 %167, true
  %169 = zext i1 %168 to i32
  br i1 %167, label %170, label %443

170:                                              ; preds = %453, %159, %443, %134
  %171 = phi i64 [ %135, %134 ], [ %166, %159 ], [ %448, %443 ], [ %458, %453 ]
  %172 = phi i32 [ 0, %134 ], [ %169, %159 ], [ %452, %443 ], [ %462, %453 ]
  %173 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %173) #15
  store i64 0, i64* %9, align 8
  %174 = icmp ule i64 %171, %36
  %175 = or i1 %39, %174
  br i1 %175, label %176, label %179

176:                                              ; preds = %170
  %177 = call i32 @_ZN14VmaBlockVector11CreateBlockEmPm(%struct.VmaBlockVector* %0, i64 %171, i64* nonnull %9)
  %178 = load i8, i8* %136, align 4, !range !2
  br label %179

179:                                              ; preds = %170, %176
  %180 = phi i8 [ %178, %176 ], [ %137, %170 ]
  %181 = phi i32 [ %177, %176 ], [ -2, %170 ]
  %182 = icmp eq i8 %180, 0
  br i1 %182, label %183, label %203

183:                                              ; preds = %179
  %184 = icmp slt i32 %181, 0
  %185 = icmp ult i32 %172, 3
  %186 = and i1 %185, %184
  br i1 %186, label %187, label %203

187:                                              ; preds = %183, %198
  %188 = phi i32 [ %193, %198 ], [ %172, %183 ]
  %189 = phi i64 [ %190, %198 ], [ %171, %183 ]
  %190 = lshr i64 %189, 1
  %191 = icmp ult i64 %190, %2
  br i1 %191, label %206, label %192

192:                                              ; preds = %187
  %193 = add nuw nsw i32 %188, 1
  %194 = icmp ule i64 %190, %36
  %195 = or i1 %39, %194
  br i1 %195, label %196, label %198

196:                                              ; preds = %192
  %197 = call i32 @_ZN14VmaBlockVector11CreateBlockEmPm(%struct.VmaBlockVector* %0, i64 %190, i64* nonnull %9)
  br label %198

198:                                              ; preds = %196, %192
  %199 = phi i32 [ %197, %196 ], [ -2, %192 ]
  %200 = icmp slt i32 %199, 0
  %201 = icmp ult i32 %193, 3
  %202 = and i1 %201, %200
  br i1 %202, label %187, label %203

203:                                              ; preds = %198, %183, %179
  %204 = phi i32 [ %181, %179 ], [ %181, %183 ], [ %199, %198 ]
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %207, label %206

206:                                              ; preds = %187, %203
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %173) #15
  br label %218

207:                                              ; preds = %203
  %208 = load i64, i64* %9, align 8
  %209 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  %210 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %209, align 8
  %211 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %210, i64 %208
  %212 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %211, align 8
  %213 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %4, i64 0, i32 6
  %214 = load i8*, i8** %213, align 8
  %215 = call i32 @_ZN14VmaBlockVector17AllocateFromBlockEP20VmaDeviceMemoryBlockjmmjPv20VmaSuballocationTypejPP15VmaAllocation_T(%struct.VmaBlockVector* %0, %class.VmaDeviceMemoryBlock* %212, i32 %1, i64 %2, i64 %3, i32 %83, i8* %214, i32 %5, i32 %74, %struct.VmaAllocation_T** %6)
  %216 = icmp eq i32 %215, 0
  %217 = select i1 %216, i32 0, i32 -2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %173) #15
  br label %441

218:                                              ; preds = %206, %133, %78
  br i1 %79, label %219, label %440

219:                                              ; preds = %218
  %220 = bitcast %struct.VmaAllocationRequest* %10 to i8*
  %221 = icmp eq i32 %74, 65536
  %222 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %223 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  %224 = bitcast %struct.VmaAllocationRequest* %12 to i8*
  %225 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 8
  %226 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 7
  %227 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %12, i64 0, i32 2
  %228 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %12, i64 0, i32 4
  %229 = icmp eq i32 %74, 262144
  %230 = bitcast %struct.VmaAllocationRequest* %11 to i8*
  %231 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %11, i64 0, i32 2
  %232 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %11, i64 0, i32 4
  %233 = bitcast %struct.VmaAllocationRequest* %10 to i8*
  %234 = bitcast %struct.VmaAllocationRequest* %12 to i8*
  %235 = bitcast %struct.VmaAllocationRequest* %11 to i8*
  br label %236

236:                                              ; preds = %362, %219
  %237 = phi i32 [ 0, %219 ], [ %363, %362 ]
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %220) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %233, i8 0, i64 64, i1 false)
  %238 = load i64, i64* %222, align 8
  %239 = icmp eq i64 %238, 0
  br i1 %221, label %240, label %277

240:                                              ; preds = %236
  br i1 %239, label %315, label %241

241:                                              ; preds = %240, %271
  %242 = phi i64 [ %274, %271 ], [ 0, %240 ]
  %243 = phi i64 [ %273, %271 ], [ -1, %240 ]
  %244 = phi %class.VmaDeviceMemoryBlock* [ %272, %271 ], [ null, %240 ]
  %245 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %223, align 8
  %246 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %245, i64 %242
  %247 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %246, align 8
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %230) #15
  %248 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %247, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %235, i8 0, i64 64, i1 false)
  %249 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %248, align 8
  %250 = load i32, i32* %225, align 8
  %251 = load i64, i64* %226, align 8
  %252 = load i32, i32* %13, align 8
  %253 = and i32 %252, 64
  %254 = icmp ne i32 %253, 0
  %255 = bitcast %class.VmaBlockMetadata* %249 to i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)***
  %256 = load i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)**, i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)*** %255, align 8
  %257 = getelementptr inbounds i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)*, i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)** %256, i64 11
  %258 = load i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)*, i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)** %257, align 8
  %259 = call zeroext i1 %258(%class.VmaBlockMetadata* %249, i32 %1, i32 %250, i64 %251, i64 %2, i64 %3, i1 zeroext %254, i32 %5, i1 zeroext true, i32 65536, %struct.VmaAllocationRequest* nonnull %11) #15
  br i1 %259, label %260, label %271

260:                                              ; preds = %241
  %261 = load i64, i64* %231, align 8
  %262 = load i64, i64* %232, align 8
  %263 = shl i64 %262, 20
  %264 = add i64 %263, %261
  %265 = icmp eq %class.VmaDeviceMemoryBlock* %244, null
  %266 = icmp ult i64 %264, %243
  %267 = or i1 %265, %266
  br i1 %267, label %268, label %271

268:                                              ; preds = %260
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %220, i8* nonnull align 8 %230, i64 60, i1 false)
  %269 = icmp eq i64 %264, 0
  br i1 %269, label %270, label %271

270:                                              ; preds = %268
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %230) #15
  br label %316

271:                                              ; preds = %260, %268, %241
  %272 = phi %class.VmaDeviceMemoryBlock* [ %244, %241 ], [ %247, %268 ], [ %244, %260 ]
  %273 = phi i64 [ %243, %241 ], [ %264, %268 ], [ %243, %260 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %230) #15
  %274 = add nuw i64 %242, 1
  %275 = load i64, i64* %222, align 8
  %276 = icmp ult i64 %274, %275
  br i1 %276, label %241, label %316

277:                                              ; preds = %236
  br i1 %239, label %315, label %278

278:                                              ; preds = %277, %311
  %279 = phi i64 [ %282, %311 ], [ %238, %277 ]
  %280 = phi i64 [ %313, %311 ], [ -1, %277 ]
  %281 = phi %class.VmaDeviceMemoryBlock* [ %312, %311 ], [ null, %277 ]
  %282 = add i64 %279, -1
  %283 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %223, align 8
  %284 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %283, i64 %282
  %285 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %284, align 8
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %224) #15
  %286 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %285, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %234, i8 0, i64 64, i1 false)
  %287 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %286, align 8
  %288 = load i32, i32* %225, align 8
  %289 = load i64, i64* %226, align 8
  %290 = load i32, i32* %13, align 8
  %291 = and i32 %290, 64
  %292 = icmp ne i32 %291, 0
  %293 = bitcast %class.VmaBlockMetadata* %287 to i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)***
  %294 = load i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)**, i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)*** %293, align 8
  %295 = getelementptr inbounds i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)*, i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)** %294, i64 11
  %296 = load i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)*, i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)** %295, align 8
  %297 = call zeroext i1 %296(%class.VmaBlockMetadata* %287, i32 %1, i32 %288, i64 %289, i64 %2, i64 %3, i1 zeroext %292, i32 %5, i1 zeroext true, i32 %74, %struct.VmaAllocationRequest* nonnull %12) #15
  br i1 %297, label %298, label %311

298:                                              ; preds = %278
  %299 = load i64, i64* %227, align 8
  %300 = load i64, i64* %228, align 8
  %301 = shl i64 %300, 20
  %302 = add i64 %301, %299
  %303 = icmp eq %class.VmaDeviceMemoryBlock* %281, null
  %304 = icmp ult i64 %302, %280
  %305 = or i1 %229, %304
  %306 = or i1 %303, %305
  br i1 %306, label %307, label %311

307:                                              ; preds = %298
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %220, i8* nonnull align 8 %224, i64 60, i1 false)
  %308 = icmp eq i64 %302, 0
  %309 = or i1 %229, %308
  br i1 %309, label %310, label %311

310:                                              ; preds = %307
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %224) #15
  br label %316

311:                                              ; preds = %298, %307, %278
  %312 = phi %class.VmaDeviceMemoryBlock* [ %281, %278 ], [ %285, %307 ], [ %281, %298 ]
  %313 = phi i64 [ %280, %278 ], [ %302, %307 ], [ %280, %298 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %224) #15
  %314 = icmp eq i64 %282, 0
  br i1 %314, label %316, label %278

315:                                              ; preds = %277, %240
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %220) #15
  br label %440

316:                                              ; preds = %311, %271, %310, %270
  %317 = phi %class.VmaDeviceMemoryBlock* [ %247, %270 ], [ %285, %310 ], [ %272, %271 ], [ %312, %311 ]
  %318 = icmp eq %class.VmaDeviceMemoryBlock* %317, null
  br i1 %318, label %438, label %319

319:                                              ; preds = %316
  br i1 %21, label %353, label %320

320:                                              ; preds = %319
  %321 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %24, align 8
  %322 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %317, i64 0, i32 5
  %323 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %321, i64 0, i32 0
  %324 = load i8, i8* %323, align 8, !range !2
  %325 = icmp eq i8 %324, 0
  %326 = select i1 %325, %class.VmaMutex* null, %class.VmaMutex* %322
  br i1 %325, label %329, label %327

327:                                              ; preds = %320
  %328 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %326, i64 0, i32 0
  call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %328) #15
  br label %329

329:                                              ; preds = %327, %320
  %330 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %317, i64 0, i32 6
  %331 = load i32, i32* %330, align 8
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %335, label %333

333:                                              ; preds = %329
  %334 = add i32 %331, 1
  br label %345

335:                                              ; preds = %329
  %336 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %321, i64 0, i32 32, i32 4
  %337 = load i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)** %336, align 8
  %338 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %321, i64 0, i32 9
  %339 = load %struct.VkDevice_T*, %struct.VkDevice_T** %338, align 8
  %340 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %317, i64 0, i32 4
  %341 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %340, align 8
  %342 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %317, i64 0, i32 7
  %343 = call i32 %337(%struct.VkDevice_T* %339, %struct.VkDeviceMemory_T* %341, i64 0, i64 -1, i32 0, i8** %342) #15
  %344 = icmp eq i32 %343, 0
  br i1 %344, label %345, label %347

345:                                              ; preds = %335, %333
  %346 = phi i32 [ %334, %333 ], [ 1, %335 ]
  store i32 %346, i32* %330, align 8
  br label %347

347:                                              ; preds = %345, %335
  %348 = phi i32 [ %343, %335 ], [ 0, %345 ]
  br i1 %325, label %351, label %349

349:                                              ; preds = %347
  %350 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %326, i64 0, i32 0
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %350) #15
  br label %351

351:                                              ; preds = %347, %349
  %352 = icmp eq i32 %348, 0
  br i1 %352, label %353, label %437

353:                                              ; preds = %319, %351
  %354 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %317, i64 0, i32 0
  %355 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %354, align 8
  %356 = load i32, i32* %225, align 8
  %357 = bitcast %class.VmaBlockMetadata* %355 to i1 (%class.VmaBlockMetadata*, i32, i32, %struct.VmaAllocationRequest*)***
  %358 = load i1 (%class.VmaBlockMetadata*, i32, i32, %struct.VmaAllocationRequest*)**, i1 (%class.VmaBlockMetadata*, i32, i32, %struct.VmaAllocationRequest*)*** %357, align 8
  %359 = getelementptr inbounds i1 (%class.VmaBlockMetadata*, i32, i32, %struct.VmaAllocationRequest*)*, i1 (%class.VmaBlockMetadata*, i32, i32, %struct.VmaAllocationRequest*)** %358, i64 12
  %360 = load i1 (%class.VmaBlockMetadata*, i32, i32, %struct.VmaAllocationRequest*)*, i1 (%class.VmaBlockMetadata*, i32, i32, %struct.VmaAllocationRequest*)** %359, align 8
  %361 = call zeroext i1 %360(%class.VmaBlockMetadata* %355, i32 %1, i32 %356, %struct.VmaAllocationRequest* nonnull %10) #15
  br i1 %361, label %365, label %362

362:                                              ; preds = %353
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %220) #15
  %363 = add nuw nsw i32 %237, 1
  %364 = icmp eq i32 %363, 32
  br i1 %364, label %441, label %236

365:                                              ; preds = %353
  %366 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %317, i64 0, i32 0
  %367 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %24, align 8
  %368 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %367, i64 0, i32 15
  %369 = icmp eq %class.VmaAllocationObjectAllocator* %368, null
  br i1 %369, label %370, label %372

370:                                              ; preds = %365
  %371 = call %struct.VmaAllocation_T* @_ZN16VmaPoolAllocatorI15VmaAllocation_TE5AllocIJjbEEEPS0_DpT_(%class.VmaPoolAllocator* nonnull inttoptr (i64 40 to %class.VmaPoolAllocator*), i32 %1, i1 zeroext %23) #15
  br label %376

372:                                              ; preds = %365
  %373 = getelementptr inbounds %class.VmaAllocationObjectAllocator, %class.VmaAllocationObjectAllocator* %368, i64 0, i32 0, i32 0
  call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %373) #15
  %374 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %367, i64 0, i32 15, i32 1
  %375 = call %struct.VmaAllocation_T* @_ZN16VmaPoolAllocatorI15VmaAllocation_TE5AllocIJjbEEEPS0_DpT_(%class.VmaPoolAllocator* %374, i32 %1, i1 zeroext %23) #15
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %373) #15
  br label %376

376:                                              ; preds = %370, %372
  %377 = phi %struct.VmaAllocation_T* [ %371, %370 ], [ %375, %372 ]
  store %struct.VmaAllocation_T* %377, %struct.VmaAllocation_T** %6, align 8
  %378 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %366, align 8
  %379 = bitcast %class.VmaBlockMetadata* %378 to void (%class.VmaBlockMetadata*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)***
  %380 = load void (%class.VmaBlockMetadata*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)**, void (%class.VmaBlockMetadata*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)*** %379, align 8
  %381 = getelementptr inbounds void (%class.VmaBlockMetadata*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)*, void (%class.VmaBlockMetadata*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)** %380, i64 15
  %382 = load void (%class.VmaBlockMetadata*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)*, void (%class.VmaBlockMetadata*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)** %381, align 8
  call void %382(%class.VmaBlockMetadata* %378, %struct.VmaAllocationRequest* nonnull dereferenceable(64) %10, i32 %5, i64 %2, %struct.VmaAllocation_T* %377) #15
  %383 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 14
  store i8 0, i8* %383, align 8
  %384 = load i64, i64* %222, align 8
  %385 = icmp eq i64 %384, 0
  br i1 %385, label %402, label %388

386:                                              ; preds = %388
  %387 = icmp eq i64 %400, %384
  br i1 %387, label %402, label %388

388:                                              ; preds = %376, %386
  %389 = phi i64 [ %400, %386 ], [ 0, %376 ]
  %390 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %223, align 8
  %391 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %390, i64 %389
  %392 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %391, align 8
  %393 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %392, i64 0, i32 0
  %394 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %393, align 8
  %395 = bitcast %class.VmaBlockMetadata* %394 to i1 (%class.VmaBlockMetadata*)***
  %396 = load i1 (%class.VmaBlockMetadata*)**, i1 (%class.VmaBlockMetadata*)*** %395, align 8
  %397 = getelementptr inbounds i1 (%class.VmaBlockMetadata*)*, i1 (%class.VmaBlockMetadata*)** %396, i64 7
  %398 = load i1 (%class.VmaBlockMetadata*)*, i1 (%class.VmaBlockMetadata*)** %397, align 8
  %399 = call zeroext i1 %398(%class.VmaBlockMetadata* %394) #15
  %400 = add nuw i64 %389, 1
  br i1 %399, label %401, label %386

401:                                              ; preds = %388
  store i8 1, i8* %383, align 8
  br label %402

402:                                              ; preds = %386, %401, %376
  %403 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %6, align 8
  %404 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %10, i64 0, i32 0
  %405 = load i64, i64* %404, align 8
  %406 = load i32, i32* %26, align 8
  %407 = load i32, i32* %13, align 8
  %408 = lshr i32 %407, 3
  %409 = trunc i32 %408 to i8
  %410 = and i8 %409, 1
  %411 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %403, i64 0, i32 5
  store i8 1, i8* %411, align 8
  %412 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %403, i64 0, i32 0
  store i64 %3, i64* %412, align 8
  %413 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %403, i64 0, i32 1
  store i64 %2, i64* %413, align 8
  %414 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %403, i64 0, i32 4
  store i32 %406, i32* %414, align 4
  %415 = trunc i32 %20 to i8
  %416 = shl nuw i8 %415, 5
  %417 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %403, i64 0, i32 7
  store i8 %416, i8* %417, align 2
  %418 = trunc i32 %5 to i8
  %419 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %403, i64 0, i32 6
  store i8 %418, i8* %419, align 1
  %420 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %403, i64 0, i32 9, i32 0, i32 0
  store %class.VmaDeviceMemoryBlock* %317, %class.VmaDeviceMemoryBlock** %420, align 8
  %421 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %403, i64 0, i32 9, i32 0, i32 1
  store i64 %405, i64* %421, align 8
  %422 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %403, i64 0, i32 9, i32 0, i32 2
  store i8 %410, i8* %422, align 8
  %423 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %6, align 8
  %424 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %24, align 8
  %425 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %4, i64 0, i32 6
  %426 = load i8*, i8** %425, align 8
  call void @_ZN15VmaAllocation_T11SetUserDataEP14VmaAllocator_TPv(%struct.VmaAllocation_T* %423, %struct.VmaAllocator_T* %424, i8* %426)
  %427 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %24, align 8
  %428 = load i32, i32* %26, align 8
  %429 = zext i32 %428 to i64
  %430 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %427, i64 0, i32 19, i32 1, i64 %429, i32 1
  %431 = load i32, i32* %430, align 4
  %432 = zext i32 %431 to i64
  %433 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %427, i64 0, i32 23, i32 1, i64 %432, i32 0, i32 0, i32 0, i32 0, i32 0
  %434 = atomicrmw add i64* %433, i64 %2 seq_cst
  %435 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %427, i64 0, i32 23, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %436 = atomicrmw add i32* %435, i32 1 seq_cst
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %220) #15
  br label %441

437:                                              ; preds = %351
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %220) #15
  br label %441

438:                                              ; preds = %316
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %220) #15
  %439 = icmp eq i32 %237, 32
  br i1 %439, label %441, label %440

440:                                              ; preds = %315, %438, %218
  br label %441

441:                                              ; preds = %126, %110, %362, %88, %437, %438, %402, %207, %73, %70, %66, %65, %440
  %442 = phi i32 [ -2, %440 ], [ %348, %437 ], [ -8, %65 ], [ -8, %66 ], [ -8, %70 ], [ -2, %73 ], [ 0, %88 ], [ %217, %207 ], [ 0, %402 ], [ -10, %438 ], [ -10, %362 ], [ 0, %110 ], [ 0, %126 ]
  ret i32 %442

443:                                              ; preds = %159
  %444 = lshr i64 %166, 1
  %445 = icmp ule i64 %444, %160
  %446 = icmp ult i64 %444, %161
  %447 = or i1 %445, %446
  %448 = select i1 %447, i64 %166, i64 %444
  %449 = or i1 %445, %446
  %450 = xor i1 %449, true
  %451 = zext i1 %450 to i32
  %452 = add nuw nsw i32 %169, %451
  br i1 %449, label %170, label %453

453:                                              ; preds = %443
  %454 = lshr i64 %448, 1
  %455 = icmp ule i64 %454, %160
  %456 = icmp ult i64 %454, %161
  %457 = or i1 %455, %456
  %458 = select i1 %457, i64 %448, i64 %454
  %459 = or i1 %455, %456
  %460 = xor i1 %459, true
  %461 = zext i1 %460 to i32
  %462 = add nuw nsw i32 %452, %461
  br label %170
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaBlockVector4FreeEP15VmaAllocation_T(%struct.VmaBlockVector*, %struct.VmaAllocation_T*) local_unnamed_addr #0 align 2 {
  %3 = alloca %struct.VmaBudget, align 8
  %4 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 0
  %5 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %4, align 8
  %6 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %5, i64 0, i32 19, i32 1, i64 %8, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = bitcast %struct.VmaBudget* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 32, i1 false)
  call void @_ZN14VmaAllocator_T9GetBudgetEP9VmaBudgetjj(%struct.VmaAllocator_T* %5, %struct.VmaBudget* nonnull %3, i32 %10, i32 1)
  %12 = getelementptr inbounds %struct.VmaBudget, %struct.VmaBudget* %3, i64 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %struct.VmaBudget, %struct.VmaBudget* %3, i64 0, i32 3
  %15 = load i64, i64* %14, align 8
  %16 = icmp uge i64 %13, %15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #15
  %17 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 13
  %18 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %4, align 8
  %19 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %18, i64 0, i32 0
  %20 = load i8, i8* %19, align 8, !range !2
  %21 = icmp eq i8 %20, 0
  %22 = select i1 %21, %class.VmaRWMutex* null, %class.VmaRWMutex* %17
  %23 = icmp eq %class.VmaRWMutex* %22, null
  br i1 %23, label %26, label %24

24:                                               ; preds = %2
  %25 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %22, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %25) #15
  br label %26

26:                                               ; preds = %2, %24
  %27 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 0
  %28 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %27, align 8
  %29 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 7
  %30 = load i8, i8* %29, align 2
  %31 = icmp slt i8 %30, 0
  br i1 %31, label %32, label %59

32:                                               ; preds = %26
  %33 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %4, align 8
  %34 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %28, i64 0, i32 5
  %35 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %33, i64 0, i32 0
  %36 = load i8, i8* %35, align 8, !range !2
  %37 = icmp eq i8 %36, 0
  %38 = select i1 %37, %class.VmaMutex* null, %class.VmaMutex* %34
  br i1 %37, label %41, label %39

39:                                               ; preds = %32
  %40 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %38, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %40) #15
  br label %41

41:                                               ; preds = %39, %32
  %42 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %28, i64 0, i32 6
  %43 = load i32, i32* %42, align 8
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %56, label %45

45:                                               ; preds = %41
  %46 = add i32 %43, -1
  store i32 %46, i32* %42, align 8
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %56

48:                                               ; preds = %45
  %49 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %28, i64 0, i32 7
  store i8* null, i8** %49, align 8
  %50 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %33, i64 0, i32 32, i32 5
  %51 = load void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)** %50, align 8
  %52 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %33, i64 0, i32 9
  %53 = load %struct.VkDevice_T*, %struct.VkDevice_T** %52, align 8
  %54 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %28, i64 0, i32 4
  %55 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %54, align 8
  tail call void %51(%struct.VkDevice_T* %53, %struct.VkDeviceMemory_T* %55) #15
  br label %56

56:                                               ; preds = %48, %45, %41
  br i1 %37, label %59, label %57

57:                                               ; preds = %56
  %58 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %38, i64 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %58) #15
  br label %59

59:                                               ; preds = %57, %56, %26
  %60 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %28, i64 0, i32 0
  %61 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %60, align 8
  %62 = bitcast %class.VmaBlockMetadata* %61 to void (%class.VmaBlockMetadata*, %struct.VmaAllocation_T*)***
  %63 = load void (%class.VmaBlockMetadata*, %struct.VmaAllocation_T*)**, void (%class.VmaBlockMetadata*, %struct.VmaAllocation_T*)*** %62, align 8
  %64 = getelementptr inbounds void (%class.VmaBlockMetadata*, %struct.VmaAllocation_T*)*, void (%class.VmaBlockMetadata*, %struct.VmaAllocation_T*)** %63, i64 16
  %65 = load void (%class.VmaBlockMetadata*, %struct.VmaAllocation_T*)*, void (%class.VmaBlockMetadata*, %struct.VmaAllocation_T*)** %64, align 8
  tail call void %65(%class.VmaBlockMetadata* %61, %struct.VmaAllocation_T* %1) #15
  %66 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16
  %67 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 5
  %70 = load i64, i64* %69, align 8
  %71 = icmp ugt i64 %68, %70
  %72 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %60, align 8
  %73 = bitcast %class.VmaBlockMetadata* %72 to i1 (%class.VmaBlockMetadata*)***
  %74 = load i1 (%class.VmaBlockMetadata*)**, i1 (%class.VmaBlockMetadata*)*** %73, align 8
  %75 = getelementptr inbounds i1 (%class.VmaBlockMetadata*)*, i1 (%class.VmaBlockMetadata*)** %74, i64 7
  %76 = load i1 (%class.VmaBlockMetadata*)*, i1 (%class.VmaBlockMetadata*)** %75, align 8
  %77 = tail call zeroext i1 %76(%class.VmaBlockMetadata* %72) #15
  %78 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 14
  %79 = load i8, i8* %78, align 8, !range !2
  %80 = icmp ne i8 %79, 0
  br i1 %77, label %81, label %114

81:                                               ; preds = %59
  %82 = or i1 %16, %80
  %83 = and i1 %71, %82
  br i1 %83, label %84, label %133

84:                                               ; preds = %81
  %85 = load i64, i64* %67, align 8
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %87, label %88

87:                                               ; preds = %84
  store i8 0, i8* %78, align 8
  br label %155

88:                                               ; preds = %84
  %89 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  %90 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %89, align 8
  br label %94

91:                                               ; preds = %94
  %92 = zext i32 %100 to i64
  %93 = icmp ugt i64 %85, %92
  br i1 %93, label %94, label %133

94:                                               ; preds = %91, %88
  %95 = phi i64 [ 0, %88 ], [ %92, %91 ]
  %96 = phi i32 [ 0, %88 ], [ %100, %91 ]
  %97 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %90, i64 %95
  %98 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %97, align 8
  %99 = icmp eq %class.VmaDeviceMemoryBlock* %98, %28
  %100 = add i32 %96, 1
  br i1 %99, label %101, label %91

101:                                              ; preds = %94
  %102 = add i64 %85, -1
  %103 = icmp ugt i64 %102, %95
  br i1 %103, label %104, label %113

104:                                              ; preds = %101
  %105 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %90, i64 %95
  %106 = bitcast %class.VmaDeviceMemoryBlock** %105 to i8*
  %107 = add nuw nsw i64 %95, 1
  %108 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %90, i64 %107
  %109 = bitcast %class.VmaDeviceMemoryBlock** %108 to i8*
  %110 = xor i64 %95, 2305843009213693951
  %111 = add i64 %110, %85
  %112 = shl i64 %111, 3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %109, i64 %112, i1 false) #15
  br label %113

113:                                              ; preds = %104, %101
  tail call void @_ZN9VmaVectorIP20VmaDeviceMemoryBlock15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.13* %66, i64 %102, i1 zeroext false) #15
  br label %133

114:                                              ; preds = %59
  %115 = and i1 %71, %80
  br i1 %115, label %116, label %133

116:                                              ; preds = %114
  %117 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  %118 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %117, align 8
  %119 = load i64, i64* %67, align 8
  %120 = add i64 %119, -1
  %121 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %118, i64 %120
  %122 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %121, align 8
  %123 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %122, i64 0, i32 0
  %124 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %123, align 8
  %125 = bitcast %class.VmaBlockMetadata* %124 to i1 (%class.VmaBlockMetadata*)***
  %126 = load i1 (%class.VmaBlockMetadata*)**, i1 (%class.VmaBlockMetadata*)*** %125, align 8
  %127 = getelementptr inbounds i1 (%class.VmaBlockMetadata*)*, i1 (%class.VmaBlockMetadata*)** %126, i64 7
  %128 = load i1 (%class.VmaBlockMetadata*)*, i1 (%class.VmaBlockMetadata*)** %127, align 8
  %129 = tail call zeroext i1 %128(%class.VmaBlockMetadata* %124) #15
  br i1 %129, label %130, label %133

130:                                              ; preds = %116
  %131 = load i64, i64* %67, align 8
  %132 = add i64 %131, -1
  tail call void @_ZN9VmaVectorIP20VmaDeviceMemoryBlock15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.13* %66, i64 %132, i1 zeroext false) #15
  br label %133

133:                                              ; preds = %91, %81, %114, %113, %116, %130
  %134 = phi %class.VmaDeviceMemoryBlock* [ %28, %113 ], [ null, %116 ], [ %122, %130 ], [ null, %81 ], [ null, %114 ], [ %28, %91 ]
  %135 = load i64, i64* %67, align 8
  store i8 0, i8* %78, align 8
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %155, label %137

137:                                              ; preds = %133
  %138 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  br label %141

139:                                              ; preds = %141
  %140 = icmp eq i64 %153, %135
  br i1 %140, label %155, label %141

141:                                              ; preds = %139, %137
  %142 = phi i64 [ 0, %137 ], [ %153, %139 ]
  %143 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %138, align 8
  %144 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %143, i64 %142
  %145 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %144, align 8
  %146 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %145, i64 0, i32 0
  %147 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %146, align 8
  %148 = bitcast %class.VmaBlockMetadata* %147 to i1 (%class.VmaBlockMetadata*)***
  %149 = load i1 (%class.VmaBlockMetadata*)**, i1 (%class.VmaBlockMetadata*)*** %148, align 8
  %150 = getelementptr inbounds i1 (%class.VmaBlockMetadata*)*, i1 (%class.VmaBlockMetadata*)** %149, i64 7
  %151 = load i1 (%class.VmaBlockMetadata*)*, i1 (%class.VmaBlockMetadata*)** %150, align 8
  %152 = tail call zeroext i1 %151(%class.VmaBlockMetadata* %147) #15
  %153 = add nuw i64 %142, 1
  br i1 %152, label %154, label %139

154:                                              ; preds = %141
  store i8 1, i8* %78, align 8
  br label %155

155:                                              ; preds = %139, %87, %133, %154
  %156 = phi %class.VmaDeviceMemoryBlock* [ %28, %87 ], [ %134, %133 ], [ %134, %154 ], [ %134, %139 ]
  %157 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 11
  %158 = load i32, i32* %157, align 8
  %159 = icmp eq i32 %158, 4
  br i1 %159, label %200, label %160

160:                                              ; preds = %155
  %161 = load i64, i64* %67, align 8
  %162 = icmp ugt i64 %161, 1
  br i1 %162, label %163, label %200

163:                                              ; preds = %160
  %164 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  br label %165

165:                                              ; preds = %196, %163
  %166 = phi i64 [ 1, %163 ], [ %197, %196 ]
  %167 = add i64 %166, -1
  %168 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %164, align 8
  %169 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %168, i64 %167
  %170 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %169, align 8
  %171 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %170, i64 0, i32 0
  %172 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %171, align 8
  %173 = bitcast %class.VmaBlockMetadata* %172 to i64 (%class.VmaBlockMetadata*)***
  %174 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %173, align 8
  %175 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %174, i64 5
  %176 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %175, align 8
  %177 = tail call i64 %176(%class.VmaBlockMetadata* %172) #15
  %178 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %164, align 8
  %179 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %178, i64 %166
  %180 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %179, align 8
  %181 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %180, i64 0, i32 0
  %182 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %181, align 8
  %183 = bitcast %class.VmaBlockMetadata* %182 to i64 (%class.VmaBlockMetadata*)***
  %184 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %183, align 8
  %185 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %184, i64 5
  %186 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %185, align 8
  %187 = tail call i64 %186(%class.VmaBlockMetadata* %182) #15
  %188 = icmp ugt i64 %177, %187
  br i1 %188, label %189, label %196

189:                                              ; preds = %165
  %190 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %164, align 8
  %191 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %190, i64 %167
  %192 = bitcast %class.VmaDeviceMemoryBlock** %191 to <2 x i64>*
  %193 = load <2 x i64>, <2 x i64>* %192, align 8
  %194 = shufflevector <2 x i64> %193, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %195 = bitcast %class.VmaDeviceMemoryBlock** %191 to <2 x i64>*
  store <2 x i64> %194, <2 x i64>* %195, align 8
  br label %200

196:                                              ; preds = %165
  %197 = add nuw i64 %166, 1
  %198 = load i64, i64* %67, align 8
  %199 = icmp ult i64 %197, %198
  br i1 %199, label %165, label %200

200:                                              ; preds = %196, %155, %160, %189
  br i1 %23, label %203, label %201

201:                                              ; preds = %200
  %202 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %22, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %202) #15
  br label %203

203:                                              ; preds = %200, %201
  %204 = icmp eq %class.VmaDeviceMemoryBlock* %156, null
  br i1 %204, label %261, label %205

205:                                              ; preds = %203
  %206 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %4, align 8
  %207 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %156, i64 0, i32 2
  %208 = load i32, i32* %207, align 8
  %209 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %156, i64 0, i32 0
  %210 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %209, align 8
  %211 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %210, i64 0, i32 1
  %212 = load i64, i64* %211, align 8
  %213 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %156, i64 0, i32 4
  %214 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %213, align 8
  %215 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %206, i64 0, i32 14, i32 1
  %216 = load void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)*, void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)** %215, align 8
  %217 = icmp eq void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)* %216, null
  br i1 %217, label %221, label %218

218:                                              ; preds = %205
  %219 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %206, i64 0, i32 14, i32 2
  %220 = load i8*, i8** %219, align 8
  tail call void %216(%struct.VmaAllocator_T* %206, i32 %208, %struct.VkDeviceMemory_T* %214, i64 %212, i8* %220) #15
  br label %221

221:                                              ; preds = %218, %205
  %222 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %206, i64 0, i32 32, i32 3
  %223 = load void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)** %222, align 8
  %224 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %206, i64 0, i32 9
  %225 = load %struct.VkDevice_T*, %struct.VkDevice_T** %224, align 8
  %226 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %206, i64 0, i32 11
  %227 = load i8, i8* %226, align 8, !range !2
  %228 = icmp eq i8 %227, 0
  %229 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %206, i64 0, i32 13
  %230 = select i1 %228, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %229
  tail call void %223(%struct.VkDevice_T* %225, %struct.VkDeviceMemory_T* %214, %struct.VkAllocationCallbacks* %230) #15
  %231 = zext i32 %208 to i64
  %232 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %206, i64 0, i32 19, i32 1, i64 %231, i32 1
  %233 = load i32, i32* %232, align 4
  %234 = zext i32 %233 to i64
  %235 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %206, i64 0, i32 23, i32 0, i64 %234, i32 0, i32 0, i32 0, i32 0, i32 0
  %236 = atomicrmw sub i64* %235, i64 %212 seq_cst
  store %struct.VkDeviceMemory_T* null, %struct.VkDeviceMemory_T** %213, align 8
  %237 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %209, align 8
  %238 = icmp eq %class.VmaBlockMetadata* %237, null
  br i1 %238, label %251, label %239

239:                                              ; preds = %221
  %240 = bitcast %class.VmaBlockMetadata* %237 to void (%class.VmaBlockMetadata*)***
  %241 = load void (%class.VmaBlockMetadata*)**, void (%class.VmaBlockMetadata*)*** %240, align 8
  %242 = load void (%class.VmaBlockMetadata*)*, void (%class.VmaBlockMetadata*)** %241, align 8
  tail call void %242(%class.VmaBlockMetadata* nonnull %237) #15
  %243 = bitcast %class.VmaBlockMetadata* %237 to i8*
  %244 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %206, i64 0, i32 13, i32 3
  %245 = load void (i8*, i8*)*, void (i8*, i8*)** %244, align 8
  %246 = icmp eq void (i8*, i8*)* %245, null
  br i1 %246, label %250, label %247

247:                                              ; preds = %239
  %248 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %206, i64 0, i32 13, i32 0
  %249 = load i8*, i8** %248, align 8
  tail call void %245(i8* %249, i8* nonnull %243) #15
  br label %251

250:                                              ; preds = %239
  tail call void @free(i8* %243) #15
  br label %251

251:                                              ; preds = %250, %247, %221
  store %class.VmaBlockMetadata* null, %class.VmaBlockMetadata** %209, align 8
  %252 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %4, align 8
  %253 = bitcast %class.VmaDeviceMemoryBlock* %156 to i8*
  %254 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %252, i64 0, i32 13, i32 3
  %255 = load void (i8*, i8*)*, void (i8*, i8*)** %254, align 8
  %256 = icmp eq void (i8*, i8*)* %255, null
  br i1 %256, label %260, label %257

257:                                              ; preds = %251
  %258 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %252, i64 0, i32 13, i32 0
  %259 = load i8*, i8** %258, align 8
  tail call void %255(i8* %259, i8* nonnull %253) #15
  br label %261

260:                                              ; preds = %251
  tail call void @free(i8* %253) #15
  br label %261

261:                                              ; preds = %260, %257, %203
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaAllocator_T9GetBudgetEP9VmaBudgetjj(%struct.VmaAllocator_T*, %struct.VmaBudget* nocapture, i32, i32) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 5
  %6 = load i8, i8* %5, align 2, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %14

10:                                               ; preds = %63, %4
  %11 = icmp eq i32 %3, 0
  br i1 %11, label %88, label %12

12:                                               ; preds = %10
  %13 = zext i32 %3 to i64
  br label %66

14:                                               ; preds = %8, %63
  %15 = load atomic i32, i32* %9 seq_cst, align 4
  %16 = icmp ult i32 %15, 30
  br i1 %16, label %17, label %63

17:                                               ; preds = %14
  %18 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 3
  %19 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 0
  %20 = load i8, i8* %19, align 8, !range !2
  %21 = icmp eq i8 %20, 0
  %22 = select i1 %21, %class.VmaRWMutex* null, %class.VmaRWMutex* %18
  %23 = icmp eq %class.VmaRWMutex* %22, null
  br i1 %23, label %26, label %24

24:                                               ; preds = %17
  %25 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %22, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %25) #15
  br label %26

26:                                               ; preds = %17, %24
  %27 = icmp eq i32 %3, 0
  br i1 %27, label %30, label %28

28:                                               ; preds = %26
  %29 = zext i32 %3 to i64
  br label %33

30:                                               ; preds = %33, %26
  br i1 %23, label %88, label %31

31:                                               ; preds = %30
  %32 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %22, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %32) #15
  br label %88

33:                                               ; preds = %33, %28
  %34 = phi i64 [ 0, %28 ], [ %60, %33 ]
  %35 = phi %struct.VmaBudget* [ %1, %28 ], [ %61, %33 ]
  %36 = trunc i64 %34 to i32
  %37 = add i32 %36, %2
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 0, i64 %38, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i64, i64* %39 seq_cst, align 8
  %41 = getelementptr inbounds %struct.VmaBudget, %struct.VmaBudget* %35, i64 0, i32 0
  store i64 %40, i64* %41, align 8
  %42 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 1, i64 %38, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load atomic i64, i64* %42 seq_cst, align 8
  %44 = getelementptr inbounds %struct.VmaBudget, %struct.VmaBudget* %35, i64 0, i32 1
  store i64 %43, i64* %44, align 8
  %45 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 4, i64 %38
  %46 = load i64, i64* %45, align 8
  %47 = load i64, i64* %41, align 8
  %48 = add i64 %47, %46
  %49 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 6, i64 %38
  %50 = load i64, i64* %49, align 8
  %51 = call i64 @llvm.usub.sat.i64(i64 %48, i64 %50)
  %52 = getelementptr inbounds %struct.VmaBudget, %struct.VmaBudget* %35, i64 0, i32 2
  store i64 %51, i64* %52, align 8
  %53 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 5, i64 %38
  %54 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 3, i64 %38, i32 0
  %55 = load i64, i64* %54, align 8
  %56 = load i64, i64* %53, align 8
  %57 = icmp ult i64 %55, %56
  %58 = select i1 %57, i64 %55, i64 %56
  %59 = getelementptr inbounds %struct.VmaBudget, %struct.VmaBudget* %35, i64 0, i32 3
  store i64 %58, i64* %59, align 8
  %60 = add nuw nsw i64 %34, 1
  %61 = getelementptr inbounds %struct.VmaBudget, %struct.VmaBudget* %35, i64 1
  %62 = icmp eq i64 %60, %29
  br i1 %62, label %30, label %33

63:                                               ; preds = %14
  tail call void @_ZN14VmaAllocator_T18UpdateVulkanBudgetEv(%struct.VmaAllocator_T* %0)
  %64 = load i8, i8* %5, align 2, !range !2
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %10, label %14

66:                                               ; preds = %66, %12
  %67 = phi i64 [ 0, %12 ], [ %85, %66 ]
  %68 = phi %struct.VmaBudget* [ %1, %12 ], [ %86, %66 ]
  %69 = trunc i64 %67 to i32
  %70 = add i32 %69, %2
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 0, i64 %71, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = load atomic i64, i64* %72 seq_cst, align 8
  %74 = getelementptr inbounds %struct.VmaBudget, %struct.VmaBudget* %68, i64 0, i32 0
  store i64 %73, i64* %74, align 8
  %75 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 1, i64 %71, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = load atomic i64, i64* %75 seq_cst, align 8
  %77 = getelementptr inbounds %struct.VmaBudget, %struct.VmaBudget* %68, i64 0, i32 1
  store i64 %76, i64* %77, align 8
  %78 = load i64, i64* %74, align 8
  %79 = getelementptr inbounds %struct.VmaBudget, %struct.VmaBudget* %68, i64 0, i32 2
  store i64 %78, i64* %79, align 8
  %80 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 3, i64 %71, i32 0
  %81 = load i64, i64* %80, align 8
  %82 = shl i64 %81, 3
  %83 = udiv i64 %82, 10
  %84 = getelementptr inbounds %struct.VmaBudget, %struct.VmaBudget* %68, i64 0, i32 3
  store i64 %83, i64* %84, align 8
  %85 = add nuw nsw i64 %67, 1
  %86 = getelementptr inbounds %struct.VmaBudget, %struct.VmaBudget* %68, i64 1
  %87 = icmp eq i64 %85, %13
  br i1 %87, label %88, label %66

88:                                               ; preds = %66, %10, %31, %30
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaBlockVector17AllocateFromBlockEP20VmaDeviceMemoryBlockjmmjPv20VmaSuballocationTypejPP15VmaAllocation_T(%struct.VmaBlockVector* nocapture, %class.VmaDeviceMemoryBlock*, i32, i64, i64, i32, i8*, i32, i32, %struct.VmaAllocation_T** nocapture) local_unnamed_addr #0 align 2 {
  %11 = alloca %struct.VmaAllocationRequest, align 8
  %12 = and i32 %5, 64
  %13 = icmp ne i32 %12, 0
  %14 = and i32 %5, 4
  %15 = and i32 %5, 32
  %16 = icmp ne i32 %15, 0
  %17 = bitcast %struct.VmaAllocationRequest* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %17) #15
  %18 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %1, i64 0, i32 0
  %19 = bitcast %struct.VmaAllocationRequest* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 0, i64 64, i1 false)
  %20 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %18, align 8
  %21 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 8
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 7
  %24 = load i64, i64* %23, align 8
  %25 = bitcast %class.VmaBlockMetadata* %20 to i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)***
  %26 = load i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)**, i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)*** %25, align 8
  %27 = getelementptr inbounds i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)*, i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)** %26, i64 11
  %28 = load i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)*, i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)** %27, align 8
  %29 = call zeroext i1 %28(%class.VmaBlockMetadata* %20, i32 %2, i32 %22, i64 %24, i64 %3, i64 %4, i1 zeroext %13, i32 %7, i1 zeroext false, i32 %8, %struct.VmaAllocationRequest* nonnull %11) #15
  br i1 %29, label %30, label %139

30:                                               ; preds = %10
  %31 = icmp eq i32 %14, 0
  br i1 %31, label %66, label %32

32:                                               ; preds = %30
  %33 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 0
  %34 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %33, align 8
  %35 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %1, i64 0, i32 5
  %36 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %34, i64 0, i32 0
  %37 = load i8, i8* %36, align 8, !range !2
  %38 = icmp eq i8 %37, 0
  %39 = select i1 %38, %class.VmaMutex* null, %class.VmaMutex* %35
  br i1 %38, label %42, label %40

40:                                               ; preds = %32
  %41 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %39, i64 0, i32 0
  call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %41) #15
  br label %42

42:                                               ; preds = %40, %32
  %43 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %1, i64 0, i32 6
  %44 = load i32, i32* %43, align 8
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %48, label %46

46:                                               ; preds = %42
  %47 = add i32 %44, 1
  br label %58

48:                                               ; preds = %42
  %49 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %34, i64 0, i32 32, i32 4
  %50 = load i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)** %49, align 8
  %51 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %34, i64 0, i32 9
  %52 = load %struct.VkDevice_T*, %struct.VkDevice_T** %51, align 8
  %53 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %1, i64 0, i32 4
  %54 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %53, align 8
  %55 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %1, i64 0, i32 7
  %56 = call i32 %50(%struct.VkDevice_T* %52, %struct.VkDeviceMemory_T* %54, i64 0, i64 -1, i32 0, i8** %55) #15
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %60

58:                                               ; preds = %48, %46
  %59 = phi i32 [ %47, %46 ], [ 1, %48 ]
  store i32 %59, i32* %43, align 8
  br label %60

60:                                               ; preds = %58, %48
  %61 = phi i32 [ %56, %48 ], [ 0, %58 ]
  br i1 %38, label %64, label %62

62:                                               ; preds = %60
  %63 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %39, i64 0, i32 0
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %63) #15
  br label %64

64:                                               ; preds = %60, %62
  %65 = icmp eq i32 %61, 0
  br i1 %65, label %66, label %139

66:                                               ; preds = %30, %64
  %67 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 0
  %68 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %67, align 8
  %69 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %68, i64 0, i32 15
  %70 = icmp eq %class.VmaAllocationObjectAllocator* %69, null
  br i1 %70, label %71, label %73

71:                                               ; preds = %66
  %72 = call %struct.VmaAllocation_T* @_ZN16VmaPoolAllocatorI15VmaAllocation_TE5AllocIJjbEEEPS0_DpT_(%class.VmaPoolAllocator* nonnull inttoptr (i64 40 to %class.VmaPoolAllocator*), i32 %2, i1 zeroext %16) #15
  br label %77

73:                                               ; preds = %66
  %74 = getelementptr inbounds %class.VmaAllocationObjectAllocator, %class.VmaAllocationObjectAllocator* %69, i64 0, i32 0, i32 0
  call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %74) #15
  %75 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %68, i64 0, i32 15, i32 1
  %76 = call %struct.VmaAllocation_T* @_ZN16VmaPoolAllocatorI15VmaAllocation_TE5AllocIJjbEEEPS0_DpT_(%class.VmaPoolAllocator* %75, i32 %2, i1 zeroext %16) #15
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %74) #15
  br label %77

77:                                               ; preds = %71, %73
  %78 = phi %struct.VmaAllocation_T* [ %72, %71 ], [ %76, %73 ]
  store %struct.VmaAllocation_T* %78, %struct.VmaAllocation_T** %9, align 8
  %79 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %18, align 8
  %80 = bitcast %class.VmaBlockMetadata* %79 to void (%class.VmaBlockMetadata*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)***
  %81 = load void (%class.VmaBlockMetadata*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)**, void (%class.VmaBlockMetadata*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)*** %80, align 8
  %82 = getelementptr inbounds void (%class.VmaBlockMetadata*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)*, void (%class.VmaBlockMetadata*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)** %81, i64 15
  %83 = load void (%class.VmaBlockMetadata*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)*, void (%class.VmaBlockMetadata*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)** %82, align 8
  call void %83(%class.VmaBlockMetadata* %79, %struct.VmaAllocationRequest* nonnull dereferenceable(64) %11, i32 %7, i64 %3, %struct.VmaAllocation_T* %78) #15
  %84 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 14
  store i8 0, i8* %84, align 8
  %85 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %86 = load i64, i64* %85, align 8
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %106, label %88

88:                                               ; preds = %77
  %89 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  br label %92

90:                                               ; preds = %92
  %91 = icmp eq i64 %104, %86
  br i1 %91, label %106, label %92

92:                                               ; preds = %90, %88
  %93 = phi i64 [ 0, %88 ], [ %104, %90 ]
  %94 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %89, align 8
  %95 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %94, i64 %93
  %96 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %95, align 8
  %97 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %96, i64 0, i32 0
  %98 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %97, align 8
  %99 = bitcast %class.VmaBlockMetadata* %98 to i1 (%class.VmaBlockMetadata*)***
  %100 = load i1 (%class.VmaBlockMetadata*)**, i1 (%class.VmaBlockMetadata*)*** %99, align 8
  %101 = getelementptr inbounds i1 (%class.VmaBlockMetadata*)*, i1 (%class.VmaBlockMetadata*)** %100, i64 7
  %102 = load i1 (%class.VmaBlockMetadata*)*, i1 (%class.VmaBlockMetadata*)** %101, align 8
  %103 = call zeroext i1 %102(%class.VmaBlockMetadata* %98) #15
  %104 = add nuw i64 %93, 1
  br i1 %103, label %105, label %90

105:                                              ; preds = %92
  store i8 1, i8* %84, align 8
  br label %106

106:                                              ; preds = %90, %77, %105
  %107 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %9, align 8
  %108 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %11, i64 0, i32 0
  %109 = load i64, i64* %108, align 8
  %110 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 2
  %111 = load i32, i32* %110, align 8
  %112 = lshr i32 %5, 3
  %113 = trunc i32 %112 to i8
  %114 = and i8 %113, 1
  %115 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %107, i64 0, i32 5
  store i8 1, i8* %115, align 8
  %116 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %107, i64 0, i32 0
  store i64 %4, i64* %116, align 8
  %117 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %107, i64 0, i32 1
  store i64 %3, i64* %117, align 8
  %118 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %107, i64 0, i32 4
  store i32 %111, i32* %118, align 4
  %119 = trunc i32 %14 to i8
  %120 = shl nuw i8 %119, 5
  %121 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %107, i64 0, i32 7
  store i8 %120, i8* %121, align 2
  %122 = trunc i32 %7 to i8
  %123 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %107, i64 0, i32 6
  store i8 %122, i8* %123, align 1
  %124 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %107, i64 0, i32 9, i32 0, i32 0
  store %class.VmaDeviceMemoryBlock* %1, %class.VmaDeviceMemoryBlock** %124, align 8
  %125 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %107, i64 0, i32 9, i32 0, i32 1
  store i64 %109, i64* %125, align 8
  %126 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %107, i64 0, i32 9, i32 0, i32 2
  store i8 %114, i8* %126, align 8
  %127 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %9, align 8
  %128 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %67, align 8
  call void @_ZN15VmaAllocation_T11SetUserDataEP14VmaAllocator_TPv(%struct.VmaAllocation_T* %127, %struct.VmaAllocator_T* %128, i8* %6)
  %129 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %67, align 8
  %130 = load i32, i32* %110, align 8
  %131 = zext i32 %130 to i64
  %132 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %129, i64 0, i32 19, i32 1, i64 %131, i32 1
  %133 = load i32, i32* %132, align 4
  %134 = zext i32 %133 to i64
  %135 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %129, i64 0, i32 23, i32 1, i64 %134, i32 0, i32 0, i32 0, i32 0, i32 0
  %136 = atomicrmw add i64* %135, i64 %3 seq_cst
  %137 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %129, i64 0, i32 23, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %138 = atomicrmw add i32* %137, i32 1 seq_cst
  br label %139

139:                                              ; preds = %10, %64, %106
  %140 = phi i32 [ 0, %106 ], [ %61, %64 ], [ -2, %10 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %17) #15
  ret i32 %140
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZNK14VmaBlockVector16CalcMaxBlockSizeEv(%struct.VmaBlockVector* nocapture readonly) local_unnamed_addr #8 align 2 {
  %2 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  %5 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 4
  br label %6

6:                                                ; preds = %11, %1
  %7 = phi i64 [ 0, %1 ], [ %20, %11 ]
  %8 = phi i64 [ %3, %1 ], [ %9, %11 ]
  %9 = add i64 %8, -1
  %10 = icmp eq i64 %8, 0
  br i1 %10, label %23, label %11

11:                                               ; preds = %6
  %12 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %4, align 8
  %13 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %12, i64 %9
  %14 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %13, align 8
  %15 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %14, i64 0, i32 0
  %16 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %15, align 8
  %17 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %16, i64 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = icmp ult i64 %7, %18
  %20 = select i1 %19, i64 %18, i64 %7
  %21 = load i64, i64* %5, align 8
  %22 = icmp ult i64 %20, %21
  br i1 %22, label %6, label %23

23:                                               ; preds = %11, %6
  %24 = phi i64 [ %7, %6 ], [ %20, %11 ]
  ret i64 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaBlockVector19UpdateHasEmptyBlockEv(%struct.VmaBlockVector* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 14
  store i8 0, i8* %2, align 8
  %3 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %24, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  br label %10

8:                                                ; preds = %10
  %9 = icmp eq i64 %22, %4
  br i1 %9, label %24, label %10

10:                                               ; preds = %8, %6
  %11 = phi i64 [ 0, %6 ], [ %22, %8 ]
  %12 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %7, align 8
  %13 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %12, i64 %11
  %14 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %13, align 8
  %15 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %14, i64 0, i32 0
  %16 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %15, align 8
  %17 = bitcast %class.VmaBlockMetadata* %16 to i1 (%class.VmaBlockMetadata*)***
  %18 = load i1 (%class.VmaBlockMetadata*)**, i1 (%class.VmaBlockMetadata*)*** %17, align 8
  %19 = getelementptr inbounds i1 (%class.VmaBlockMetadata*)*, i1 (%class.VmaBlockMetadata*)** %18, i64 7
  %20 = load i1 (%class.VmaBlockMetadata*)*, i1 (%class.VmaBlockMetadata*)** %19, align 8
  %21 = tail call zeroext i1 %20(%class.VmaBlockMetadata* %16) #15
  %22 = add nuw i64 %11, 1
  br i1 %21, label %23, label %8

23:                                               ; preds = %10
  store i8 1, i8* %2, align 8
  br label %24

24:                                               ; preds = %8, %1, %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaBlockVector6RemoveEP20VmaDeviceMemoryBlock(%struct.VmaBlockVector*, %class.VmaDeviceMemoryBlock* readnone) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16
  %4 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %33, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  %9 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %8, align 8
  br label %13

10:                                               ; preds = %13
  %11 = zext i32 %19 to i64
  %12 = icmp ugt i64 %5, %11
  br i1 %12, label %13, label %33

13:                                               ; preds = %7, %10
  %14 = phi i64 [ 0, %7 ], [ %11, %10 ]
  %15 = phi i32 [ 0, %7 ], [ %19, %10 ]
  %16 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %9, i64 %14
  %17 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %16, align 8
  %18 = icmp eq %class.VmaDeviceMemoryBlock* %17, %1
  %19 = add i32 %15, 1
  br i1 %18, label %20, label %10

20:                                               ; preds = %13
  %21 = add i64 %5, -1
  %22 = icmp ugt i64 %21, %14
  br i1 %22, label %23, label %32

23:                                               ; preds = %20
  %24 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %9, i64 %14
  %25 = bitcast %class.VmaDeviceMemoryBlock** %24 to i8*
  %26 = add nuw nsw i64 %14, 1
  %27 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %9, i64 %26
  %28 = bitcast %class.VmaDeviceMemoryBlock** %27 to i8*
  %29 = xor i64 %14, 2305843009213693951
  %30 = add i64 %29, %5
  %31 = shl i64 %30, 3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %28, i64 %31, i1 false) #15
  br label %32

32:                                               ; preds = %20, %23
  tail call void @_ZN9VmaVectorIP20VmaDeviceMemoryBlock15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.13* %3, i64 %21, i1 zeroext false) #15
  br label %33

33:                                               ; preds = %10, %2, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaBlockVector23IncrementallySortBlocksEv(%struct.VmaBlockVector* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 11
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 4
  br i1 %4, label %46, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = icmp ugt i64 %7, 1
  br i1 %8, label %9, label %46

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  br label %11

11:                                               ; preds = %9, %42
  %12 = phi i64 [ 1, %9 ], [ %43, %42 ]
  %13 = add i64 %12, -1
  %14 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %10, align 8
  %15 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %14, i64 %13
  %16 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %15, align 8
  %17 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %16, i64 0, i32 0
  %18 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %17, align 8
  %19 = bitcast %class.VmaBlockMetadata* %18 to i64 (%class.VmaBlockMetadata*)***
  %20 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %19, align 8
  %21 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %20, i64 5
  %22 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %21, align 8
  %23 = tail call i64 %22(%class.VmaBlockMetadata* %18) #15
  %24 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %10, align 8
  %25 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %24, i64 %12
  %26 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %25, align 8
  %27 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %26, i64 0, i32 0
  %28 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %27, align 8
  %29 = bitcast %class.VmaBlockMetadata* %28 to i64 (%class.VmaBlockMetadata*)***
  %30 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %29, align 8
  %31 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %30, i64 5
  %32 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %31, align 8
  %33 = tail call i64 %32(%class.VmaBlockMetadata* %28) #15
  %34 = icmp ugt i64 %23, %33
  br i1 %34, label %35, label %42

35:                                               ; preds = %11
  %36 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %10, align 8
  %37 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %36, i64 %13
  %38 = bitcast %class.VmaDeviceMemoryBlock** %37 to <2 x i64>*
  %39 = load <2 x i64>, <2 x i64>* %38, align 8
  %40 = shufflevector <2 x i64> %39, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %41 = bitcast %class.VmaDeviceMemoryBlock** %37 to <2 x i64>*
  store <2 x i64> %40, <2 x i64>* %41, align 8
  br label %46

42:                                               ; preds = %11
  %43 = add nuw i64 %12, 1
  %44 = load i64, i64* %6, align 8
  %45 = icmp ult i64 %43, %44
  br i1 %45, label %11, label %46

46:                                               ; preds = %42, %5, %1, %35
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaAllocator_T20AllocateVulkanMemoryEPK20VkMemoryAllocateInfoPP16VkDeviceMemory_T(%struct.VmaAllocator_T*, %struct.VkMemoryAllocateInfo*, %struct.VkDeviceMemory_T**) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.VkMemoryAllocateInfo, %struct.VkMemoryAllocateInfo* %1, i64 0, i32 3
  %5 = load i32, i32* %4, align 8
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %6, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 16
  %10 = load i32, i32* %9, align 8
  %11 = shl i32 1, %8
  %12 = and i32 %10, %11
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %34, label %14

14:                                               ; preds = %3
  %15 = zext i32 %8 to i64
  %16 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 3, i64 %15, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 0, i64 %15, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i64, i64* %18 seq_cst, align 8
  %20 = getelementptr inbounds %struct.VkMemoryAllocateInfo, %struct.VkMemoryAllocateInfo* %1, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = add i64 %21, %19
  %23 = icmp ugt i64 %22, %17
  br i1 %23, label %71, label %24

24:                                               ; preds = %14, %29
  %25 = phi i64 [ %32, %29 ], [ %22, %14 ]
  %26 = phi i64 [ %30, %29 ], [ %19, %14 ]
  %27 = cmpxchg i64* %18, i64 %26, i64 %25 seq_cst seq_cst
  %28 = extractvalue { i64, i1 } %27, 1
  br i1 %28, label %40, label %29

29:                                               ; preds = %24
  %30 = extractvalue { i64, i1 } %27, 0
  %31 = load i64, i64* %20, align 8
  %32 = add i64 %31, %30
  %33 = icmp ugt i64 %32, %17
  br i1 %33, label %71, label %24

34:                                               ; preds = %3
  %35 = getelementptr inbounds %struct.VkMemoryAllocateInfo, %struct.VkMemoryAllocateInfo* %1, i64 0, i32 2
  %36 = load i64, i64* %35, align 8
  %37 = zext i32 %8 to i64
  %38 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 0, i64 %37, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = atomicrmw add i64* %38, i64 %36 seq_cst
  br label %40

40:                                               ; preds = %24, %34
  %41 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 2
  %42 = load i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)*, i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)** %41, align 8
  %43 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %44 = load %struct.VkDevice_T*, %struct.VkDevice_T** %43, align 8
  %45 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 11
  %46 = load i8, i8* %45, align 8, !range !2
  %47 = icmp eq i8 %46, 0
  %48 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13
  %49 = select i1 %47, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %48
  %50 = tail call i32 %42(%struct.VkDevice_T* %44, %struct.VkMemoryAllocateInfo* %1, %struct.VkAllocationCallbacks* %49, %struct.VkDeviceMemory_T** %2) #15
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %65

52:                                               ; preds = %40
  %53 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = atomicrmw add i32* %53, i32 1 seq_cst
  %55 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 14, i32 0
  %56 = load void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)*, void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)** %55, align 8
  %57 = icmp eq void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)* %56, null
  br i1 %57, label %71, label %58

58:                                               ; preds = %52
  %59 = load i32, i32* %4, align 8
  %60 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %2, align 8
  %61 = getelementptr inbounds %struct.VkMemoryAllocateInfo, %struct.VkMemoryAllocateInfo* %1, i64 0, i32 2
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 14, i32 2
  %64 = load i8*, i8** %63, align 8
  tail call void %56(%struct.VmaAllocator_T* %0, i32 %59, %struct.VkDeviceMemory_T* %60, i64 %62, i8* %64) #15
  br label %71

65:                                               ; preds = %40
  %66 = getelementptr inbounds %struct.VkMemoryAllocateInfo, %struct.VkMemoryAllocateInfo* %1, i64 0, i32 2
  %67 = load i64, i64* %66, align 8
  %68 = zext i32 %8 to i64
  %69 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 0, i64 %68, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = atomicrmw sub i64* %69, i64 %67 seq_cst
  br label %71

71:                                               ; preds = %29, %14, %65, %58, %52
  %72 = phi i32 [ 0, %52 ], [ 0, %58 ], [ %50, %65 ], [ -2, %14 ], [ -2, %29 ]
  ret i32 %72
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaBlockVector28ApplyDefragmentationMovesCpuEP36VmaBlockVectorDefragmentationContextRK9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EE(%struct.VmaBlockVector* nocapture readonly, %class.VmaBlockVectorDefragmentationContext* nocapture, %class.VmaVector.28* nocapture readonly dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %4 = alloca %struct.VkMappedMemoryRange, align 8
  %5 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 0
  %8 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %7, align 8
  %9 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %8, i64 0, i32 19, i32 1, i64 %11, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = and i32 %13, 6
  %15 = icmp eq i32 %14, 2
  %16 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %8, i64 0, i32 11
  %17 = load i8, i8* %16, align 8, !range !2
  %18 = icmp eq i8 %17, 0
  %19 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %8, i64 0, i32 13
  %20 = select i1 %18, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %19
  %21 = icmp eq i64 %6, 0
  br i1 %21, label %38, label %22

22:                                               ; preds = %3
  %23 = shl i64 %6, 4
  %24 = icmp eq %struct.VkAllocationCallbacks* %20, null
  br i1 %24, label %33, label %25

25:                                               ; preds = %22
  %26 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %20, i64 0, i32 1
  %27 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %26, align 8
  %28 = icmp eq i8* (i8*, i64, i64, i32)* %27, null
  br i1 %28, label %33, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %20, i64 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = tail call i8* %27(i8* %31, i64 %23, i64 8, i32 1) #15
  br label %35

33:                                               ; preds = %25, %22
  %34 = tail call noalias i8* @aligned_alloc(i64 8, i64 %23) #15
  br label %35

35:                                               ; preds = %33, %29
  %36 = phi i8* [ %32, %29 ], [ %34, %33 ]
  %37 = bitcast i8* %36 to %struct.BlockInfo*
  br label %38

38:                                               ; preds = %3, %35
  %39 = phi i64 [ %23, %35 ], [ 0, %3 ]
  %40 = phi i8* [ %36, %35 ], [ null, %3 ]
  %41 = phi %struct.BlockInfo* [ %37, %35 ], [ null, %3 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 %39, i1 false)
  %42 = getelementptr inbounds %class.VmaVector.28, %class.VmaVector.28* %2, i64 0, i32 2
  %43 = load i64, i64* %42, align 8
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %47, label %45

45:                                               ; preds = %38
  %46 = getelementptr inbounds %class.VmaVector.28, %class.VmaVector.28* %2, i64 0, i32 1
  br label %55

47:                                               ; preds = %55, %38
  %48 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %1, i64 0, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %49, 0
  %51 = icmp ne i64 %6, 0
  %52 = and i1 %51, %50
  br i1 %52, label %53, label %70

53:                                               ; preds = %47
  %54 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  br label %72

55:                                               ; preds = %55, %45
  %56 = phi i64 [ 0, %45 ], [ %68, %55 ]
  %57 = load %struct.VmaDefragmentationMove*, %struct.VmaDefragmentationMove** %46, align 8
  %58 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %57, i64 %56, i32 0
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %struct.BlockInfo, %struct.BlockInfo* %41, i64 %59, i32 0
  %61 = load i32, i32* %60, align 8
  %62 = or i32 %61, 1
  store i32 %62, i32* %60, align 8
  %63 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %57, i64 %56, i32 1
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %struct.BlockInfo, %struct.BlockInfo* %41, i64 %64, i32 0
  %66 = load i32, i32* %65, align 8
  %67 = or i32 %66, 1
  store i32 %67, i32* %65, align 8
  %68 = add nuw i64 %56, 1
  %69 = icmp eq i64 %68, %43
  br i1 %69, label %47, label %55

70:                                               ; preds = %131, %47
  %71 = phi i1 [ %50, %47 ], [ %134, %131 ]
  br i1 %71, label %137, label %239

72:                                               ; preds = %53, %131
  %73 = phi i64 [ 0, %53 ], [ %132, %131 ]
  %74 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %54, align 8
  %75 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %74, i64 %73
  %76 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %75, align 8
  %77 = getelementptr inbounds %struct.BlockInfo, %struct.BlockInfo* %41, i64 %73, i32 0
  %78 = load i32, i32* %77, align 8
  %79 = and i32 %78, 1
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %131, label %81

81:                                               ; preds = %72
  %82 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %76, i64 0, i32 7
  %83 = load i8*, i8** %82, align 8
  %84 = getelementptr inbounds %struct.BlockInfo, %struct.BlockInfo* %41, i64 %73, i32 1
  store i8* %83, i8** %84, align 8
  %85 = icmp eq i8* %83, null
  br i1 %85, label %86, label %131

86:                                               ; preds = %81
  %87 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %7, align 8
  %88 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %76, i64 0, i32 5
  %89 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %87, i64 0, i32 0
  %90 = load i8, i8* %89, align 8, !range !2
  %91 = icmp eq i8 %90, 0
  %92 = select i1 %91, %class.VmaMutex* null, %class.VmaMutex* %88
  br i1 %91, label %95, label %93

93:                                               ; preds = %86
  %94 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %92, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %94) #15
  br label %95

95:                                               ; preds = %93, %86
  %96 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %76, i64 0, i32 6
  %97 = load i32, i32* %96, align 8
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %106, label %99

99:                                               ; preds = %95
  %100 = add i32 %97, 1
  store i32 %100, i32* %96, align 8
  %101 = icmp eq i8** %84, null
  br i1 %101, label %122, label %102

102:                                              ; preds = %99
  %103 = bitcast i8** %82 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast i8** %84 to i64*
  store i64 %104, i64* %105, align 8
  br label %122

106:                                              ; preds = %95
  %107 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %87, i64 0, i32 32, i32 4
  %108 = load i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)** %107, align 8
  %109 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %87, i64 0, i32 9
  %110 = load %struct.VkDevice_T*, %struct.VkDevice_T** %109, align 8
  %111 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %76, i64 0, i32 4
  %112 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %111, align 8
  %113 = tail call i32 %108(%struct.VkDevice_T* %110, %struct.VkDeviceMemory_T* %112, i64 0, i64 -1, i32 0, i8** %82) #15
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %122

115:                                              ; preds = %106
  %116 = icmp eq i8** %84, null
  br i1 %116, label %121, label %117

117:                                              ; preds = %115
  %118 = bitcast i8** %82 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast i8** %84 to i64*
  store i64 %119, i64* %120, align 8
  br label %121

121:                                              ; preds = %117, %115
  store i32 1, i32* %96, align 8
  br label %122

122:                                              ; preds = %121, %106, %102, %99
  %123 = phi i32 [ 0, %99 ], [ 0, %102 ], [ 0, %121 ], [ %113, %106 ]
  br i1 %91, label %126, label %124

124:                                              ; preds = %122
  %125 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %92, i64 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %125) #15
  br label %126

126:                                              ; preds = %122, %124
  store i32 %123, i32* %48, align 8
  %127 = icmp eq i32 %123, 0
  br i1 %127, label %128, label %131

128:                                              ; preds = %126
  %129 = load i32, i32* %77, align 8
  %130 = or i32 %129, 2
  store i32 %130, i32* %77, align 8
  br label %131

131:                                              ; preds = %72, %81, %128, %126
  %132 = add nuw i64 %73, 1
  %133 = load i32, i32* %48, align 8
  %134 = icmp eq i32 %133, 0
  %135 = icmp ult i64 %132, %6
  %136 = and i1 %135, %134
  br i1 %136, label %72, label %70

137:                                              ; preds = %70
  %138 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %7, align 8
  %139 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %138, i64 0, i32 18, i32 7, i32 105
  %140 = load i64, i64* %139, align 8
  %141 = bitcast %struct.VkMappedMemoryRange* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %141) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %141, i8 0, i64 40, i1 false)
  %142 = getelementptr inbounds %struct.VkMappedMemoryRange, %struct.VkMappedMemoryRange* %4, i64 0, i32 0
  store i32 6, i32* %142, align 8
  br i1 %44, label %150, label %143

143:                                              ; preds = %137
  %144 = getelementptr inbounds %class.VmaVector.28, %class.VmaVector.28* %2, i64 0, i32 1
  %145 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  %146 = getelementptr inbounds %struct.VkMappedMemoryRange, %struct.VkMappedMemoryRange* %4, i64 0, i32 2
  %147 = bitcast %struct.VkDeviceMemory_T** %146 to i64*
  %148 = getelementptr inbounds %struct.VkMappedMemoryRange, %struct.VkMappedMemoryRange* %4, i64 0, i32 3
  %149 = getelementptr inbounds %struct.VkMappedMemoryRange, %struct.VkMappedMemoryRange* %4, i64 0, i32 4
  br label %151

150:                                              ; preds = %236, %137
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %141) #15
  br label %239

151:                                              ; preds = %236, %143
  %152 = phi i64 [ 0, %143 ], [ %237, %236 ]
  %153 = load %struct.VmaDefragmentationMove*, %struct.VmaDefragmentationMove** %144, align 8
  %154 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %153, i64 %152, i32 0
  %155 = load i64, i64* %154, align 8
  %156 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %153, i64 %152, i32 1
  %157 = load i64, i64* %156, align 8
  br i1 %15, label %158, label %191

158:                                              ; preds = %151
  %159 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %145, align 8
  %160 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %159, i64 %155
  %161 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %160, align 8
  %162 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %161, i64 0, i32 4
  %163 = bitcast %struct.VkDeviceMemory_T** %162 to i64*
  %164 = load i64, i64* %163, align 8
  store i64 %164, i64* %147, align 8
  %165 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %153, i64 %152, i32 2
  %166 = load i64, i64* %165, align 8
  %167 = urem i64 %166, %140
  %168 = sub i64 %166, %167
  store i64 %168, i64* %148, align 8
  %169 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %153, i64 %152, i32 4
  %170 = load i64, i64* %169, align 8
  %171 = load i64, i64* %165, align 8
  %172 = xor i64 %168, -1
  %173 = add i64 %140, %172
  %174 = add i64 %173, %170
  %175 = add i64 %174, %171
  %176 = urem i64 %175, %140
  %177 = sub i64 %175, %176
  %178 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %161, i64 0, i32 0
  %179 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %178, align 8
  %180 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %179, i64 0, i32 1
  %181 = load i64, i64* %180, align 8
  %182 = sub i64 %181, %168
  %183 = icmp ult i64 %182, %177
  %184 = select i1 %183, i64 %182, i64 %177
  store i64 %184, i64* %149, align 8
  %185 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %7, align 8
  %186 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %185, i64 0, i32 32, i32 7
  %187 = load i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)** %186, align 8
  %188 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %185, i64 0, i32 9
  %189 = load %struct.VkDevice_T*, %struct.VkDevice_T** %188, align 8
  %190 = call i32 %187(%struct.VkDevice_T* %189, i32 1, %struct.VkMappedMemoryRange* nonnull %4) #15
  br label %191

191:                                              ; preds = %158, %151
  %192 = getelementptr inbounds %struct.BlockInfo, %struct.BlockInfo* %41, i64 %157, i32 1
  %193 = load i8*, i8** %192, align 8
  %194 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %153, i64 %152, i32 3
  %195 = load i64, i64* %194, align 8
  %196 = getelementptr inbounds i8, i8* %193, i64 %195
  %197 = getelementptr inbounds %struct.BlockInfo, %struct.BlockInfo* %41, i64 %155, i32 1
  %198 = load i8*, i8** %197, align 8
  %199 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %153, i64 %152, i32 2
  %200 = load i64, i64* %199, align 8
  %201 = getelementptr inbounds i8, i8* %198, i64 %200
  %202 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %153, i64 %152, i32 4
  %203 = load i64, i64* %202, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %196, i8* align 1 %201, i64 %203, i1 false)
  br i1 %15, label %204, label %236

204:                                              ; preds = %191
  %205 = load i64, i64* %156, align 8
  %206 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %145, align 8
  %207 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %206, i64 %205
  %208 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %207, align 8
  %209 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %208, i64 0, i32 4
  %210 = bitcast %struct.VkDeviceMemory_T** %209 to i64*
  %211 = load i64, i64* %210, align 8
  store i64 %211, i64* %147, align 8
  %212 = load i64, i64* %194, align 8
  %213 = urem i64 %212, %140
  %214 = sub i64 %212, %213
  store i64 %214, i64* %148, align 8
  %215 = load i64, i64* %202, align 8
  %216 = load i64, i64* %194, align 8
  %217 = xor i64 %214, -1
  %218 = add i64 %140, %217
  %219 = add i64 %218, %215
  %220 = add i64 %219, %216
  %221 = urem i64 %220, %140
  %222 = sub i64 %220, %221
  %223 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %208, i64 0, i32 0
  %224 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %223, align 8
  %225 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %224, i64 0, i32 1
  %226 = load i64, i64* %225, align 8
  %227 = sub i64 %226, %214
  %228 = icmp ult i64 %227, %222
  %229 = select i1 %228, i64 %227, i64 %222
  store i64 %229, i64* %149, align 8
  %230 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %7, align 8
  %231 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %230, i64 0, i32 32, i32 6
  %232 = load i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)** %231, align 8
  %233 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %230, i64 0, i32 9
  %234 = load %struct.VkDevice_T*, %struct.VkDevice_T** %233, align 8
  %235 = call i32 %232(%struct.VkDevice_T* %234, i32 1, %struct.VkMappedMemoryRange* nonnull %4) #15
  br label %236

236:                                              ; preds = %204, %191
  %237 = add nuw i64 %152, 1
  %238 = icmp eq i64 %237, %43
  br i1 %238, label %150, label %151

239:                                              ; preds = %150, %70
  br i1 %21, label %242, label %240

240:                                              ; preds = %239
  %241 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  br label %253

242:                                              ; preds = %290, %239
  %243 = icmp eq %struct.VkAllocationCallbacks* %20, null
  br i1 %243, label %251, label %244

244:                                              ; preds = %242
  %245 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %20, i64 0, i32 3
  %246 = load void (i8*, i8*)*, void (i8*, i8*)** %245, align 8
  %247 = icmp eq void (i8*, i8*)* %246, null
  br i1 %247, label %251, label %248

248:                                              ; preds = %244
  %249 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %20, i64 0, i32 0
  %250 = load i8*, i8** %249, align 8
  call void %246(i8* %250, i8* %40) #15
  br label %252

251:                                              ; preds = %244, %242
  call void @free(i8* %40) #15
  br label %252

252:                                              ; preds = %248, %251
  ret void

253:                                              ; preds = %240, %290
  %254 = phi i64 [ %6, %240 ], [ %255, %290 ]
  %255 = add i64 %254, -1
  %256 = getelementptr inbounds %struct.BlockInfo, %struct.BlockInfo* %41, i64 %255, i32 0
  %257 = load i32, i32* %256, align 8
  %258 = and i32 %257, 2
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %290, label %260

260:                                              ; preds = %253
  %261 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %241, align 8
  %262 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %261, i64 %255
  %263 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %262, align 8
  %264 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %7, align 8
  %265 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %263, i64 0, i32 5
  %266 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %264, i64 0, i32 0
  %267 = load i8, i8* %266, align 8, !range !2
  %268 = icmp eq i8 %267, 0
  %269 = select i1 %268, %class.VmaMutex* null, %class.VmaMutex* %265
  br i1 %268, label %272, label %270

270:                                              ; preds = %260
  %271 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %269, i64 0, i32 0
  call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %271) #15
  br label %272

272:                                              ; preds = %270, %260
  %273 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %263, i64 0, i32 6
  %274 = load i32, i32* %273, align 8
  %275 = icmp eq i32 %274, 0
  br i1 %275, label %287, label %276

276:                                              ; preds = %272
  %277 = add i32 %274, -1
  store i32 %277, i32* %273, align 8
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %279, label %287

279:                                              ; preds = %276
  %280 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %263, i64 0, i32 7
  store i8* null, i8** %280, align 8
  %281 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %264, i64 0, i32 32, i32 5
  %282 = load void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)** %281, align 8
  %283 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %264, i64 0, i32 9
  %284 = load %struct.VkDevice_T*, %struct.VkDevice_T** %283, align 8
  %285 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %263, i64 0, i32 4
  %286 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %285, align 8
  call void %282(%struct.VkDevice_T* %284, %struct.VkDeviceMemory_T* %286) #15
  br label %287

287:                                              ; preds = %279, %276, %272
  br i1 %268, label %290, label %288

288:                                              ; preds = %287
  %289 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %269, i64 0, i32 0
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %289) #15
  br label %290

290:                                              ; preds = %288, %287, %253
  %291 = icmp eq i64 %255, 0
  br i1 %291, label %242, label %253
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaBlockVector28ApplyDefragmentationMovesGpuEP36VmaBlockVectorDefragmentationContextR9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEP17VkCommandBuffer_T(%struct.VmaBlockVector* nocapture readonly, %class.VmaBlockVectorDefragmentationContext*, %class.VmaVector.28* nocapture readonly dereferenceable(32), %struct.VkCommandBuffer_T*) local_unnamed_addr #0 align 2 {
  %5 = alloca %struct.VkBufferCreateInfo, align 8
  %6 = alloca %struct.VkBufferCopy, align 8
  %7 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %1, i64 0, i32 3
  tail call void @_ZN9VmaVectorI30VmaBlockDefragmentationContext15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.26* %9, i64 %8, i1 zeroext false)
  %10 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %1, i64 0, i32 3, i32 1
  %11 = bitcast %struct.VmaBlockDefragmentationContext** %10 to i8**
  %12 = load i8*, i8** %11, align 8
  %13 = shl i64 %8, 4
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 %13, i1 false)
  %14 = getelementptr inbounds %class.VmaVector.28, %class.VmaVector.28* %2, i64 0, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %4
  %18 = getelementptr inbounds %class.VmaVector.28, %class.VmaVector.28* %2, i64 0, i32 1
  br label %32

19:                                               ; preds = %32, %4
  %20 = bitcast %struct.VkBufferCreateInfo* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %20) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 56, i1 false) #15
  %21 = getelementptr inbounds %struct.VkBufferCreateInfo, %struct.VkBufferCreateInfo* %5, i64 0, i32 0
  store i32 12, i32* %21, align 8
  %22 = getelementptr inbounds %struct.VkBufferCreateInfo, %struct.VkBufferCreateInfo* %5, i64 0, i32 4
  store i32 3, i32* %22, align 8
  %23 = getelementptr inbounds %struct.VkBufferCreateInfo, %struct.VkBufferCreateInfo* %5, i64 0, i32 3
  store i64 268435456, i64* %23, align 8
  %24 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %1, i64 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = icmp eq i32 %25, 0
  %27 = icmp ne i64 %8, 0
  %28 = and i1 %27, %26
  br i1 %28, label %29, label %49

29:                                               ; preds = %19
  %30 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  %31 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 0
  br label %62

32:                                               ; preds = %32, %17
  %33 = phi i64 [ 0, %17 ], [ %47, %32 ]
  %34 = load %struct.VmaDefragmentationMove*, %struct.VmaDefragmentationMove** %18, align 8
  %35 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %34, i64 %33, i32 0
  %36 = load i64, i64* %35, align 8
  %37 = load %struct.VmaBlockDefragmentationContext*, %struct.VmaBlockDefragmentationContext** %10, align 8
  %38 = getelementptr inbounds %struct.VmaBlockDefragmentationContext, %struct.VmaBlockDefragmentationContext* %37, i64 %36, i32 0
  %39 = load i32, i32* %38, align 8
  %40 = or i32 %39, 1
  store i32 %40, i32* %38, align 8
  %41 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %34, i64 %33, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = load %struct.VmaBlockDefragmentationContext*, %struct.VmaBlockDefragmentationContext** %10, align 8
  %44 = getelementptr inbounds %struct.VmaBlockDefragmentationContext, %struct.VmaBlockDefragmentationContext* %43, i64 %42, i32 0
  %45 = load i32, i32* %44, align 8
  %46 = or i32 %45, 1
  store i32 %46, i32* %44, align 8
  %47 = add nuw i64 %33, 1
  %48 = icmp eq i64 %47, %15
  br i1 %48, label %19, label %32

49:                                               ; preds = %73, %101, %19
  %50 = phi i32 [ %25, %19 ], [ %102, %101 ], [ %89, %73 ]
  %51 = phi i1 [ %26, %19 ], [ %105, %101 ], [ false, %73 ]
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %20) #15
  %52 = icmp ne i64 %15, 0
  %53 = and i1 %51, %52
  br i1 %53, label %54, label %133

54:                                               ; preds = %49
  %55 = getelementptr inbounds %class.VmaVector.28, %class.VmaVector.28* %2, i64 0, i32 1
  %56 = bitcast %struct.VkBufferCopy* %6 to i8*
  %57 = getelementptr inbounds %struct.VkBufferCopy, %struct.VkBufferCopy* %6, i64 0, i32 0
  %58 = getelementptr inbounds %struct.VkBufferCopy, %struct.VkBufferCopy* %6, i64 0, i32 1
  %59 = getelementptr inbounds %struct.VkBufferCopy, %struct.VkBufferCopy* %6, i64 0, i32 2
  %60 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 0
  %61 = bitcast %struct.VkBufferCopy* %6 to i8*
  br label %108

62:                                               ; preds = %29, %101
  %63 = phi i32 [ 0, %29 ], [ %102, %101 ]
  %64 = phi i64 [ 0, %29 ], [ %104, %101 ]
  %65 = load %struct.VmaBlockDefragmentationContext*, %struct.VmaBlockDefragmentationContext** %10, align 8
  %66 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %30, align 8
  %67 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %66, i64 %64
  %68 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %67, align 8
  %69 = getelementptr inbounds %struct.VmaBlockDefragmentationContext, %struct.VmaBlockDefragmentationContext* %65, i64 %64, i32 0
  %70 = load i32, i32* %69, align 8
  %71 = and i32 %70, 1
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %101, label %73

73:                                               ; preds = %62
  %74 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %68, i64 0, i32 0
  %75 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %74, align 8
  %76 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %75, i64 0, i32 1
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %23, align 8
  %78 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %31, align 8
  %79 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %78, i64 0, i32 32, i32 12
  %80 = load i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)*, i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)** %79, align 8
  %81 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %78, i64 0, i32 9
  %82 = load %struct.VkDevice_T*, %struct.VkDevice_T** %81, align 8
  %83 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %78, i64 0, i32 11
  %84 = load i8, i8* %83, align 8, !range !2
  %85 = icmp eq i8 %84, 0
  %86 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %78, i64 0, i32 13
  %87 = select i1 %85, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %86
  %88 = getelementptr inbounds %struct.VmaBlockDefragmentationContext, %struct.VmaBlockDefragmentationContext* %65, i64 %64, i32 1
  %89 = call i32 %80(%struct.VkDevice_T* %82, %struct.VkBufferCreateInfo* nonnull %5, %struct.VkAllocationCallbacks* %87, %struct.VkBuffer_T** %88) #15
  store i32 %89, i32* %24, align 8
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %49

91:                                               ; preds = %73
  %92 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %31, align 8
  %93 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %92, i64 0, i32 32, i32 8
  %94 = load i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)** %93, align 8
  %95 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %92, i64 0, i32 9
  %96 = load %struct.VkDevice_T*, %struct.VkDevice_T** %95, align 8
  %97 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %88, align 8
  %98 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %68, i64 0, i32 4
  %99 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %98, align 8
  %100 = call i32 %94(%struct.VkDevice_T* %96, %struct.VkBuffer_T* %97, %struct.VkDeviceMemory_T* %99, i64 0) #15
  store i32 %100, i32* %24, align 8
  br label %101

101:                                              ; preds = %62, %91
  %102 = phi i32 [ %63, %62 ], [ %100, %91 ]
  %103 = phi i32 [ 0, %62 ], [ %100, %91 ]
  %104 = add nuw i64 %64, 1
  %105 = icmp eq i32 %103, 0
  %106 = icmp ult i64 %104, %8
  %107 = and i1 %106, %105
  br i1 %107, label %62, label %49

108:                                              ; preds = %108, %54
  %109 = phi i64 [ 0, %54 ], [ %129, %108 ]
  %110 = load %struct.VmaDefragmentationMove*, %struct.VmaDefragmentationMove** %55, align 8
  %111 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %110, i64 %109, i32 0
  %112 = load i64, i64* %111, align 8
  %113 = load %struct.VmaBlockDefragmentationContext*, %struct.VmaBlockDefragmentationContext** %10, align 8
  %114 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %110, i64 %109, i32 1
  %115 = load i64, i64* %114, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %56) #15
  %116 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %110, i64 %109, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %61, i8 -86, i64 24, i1 false)
  %117 = load i64, i64* %116, align 8
  store i64 %117, i64* %57, align 8
  %118 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %110, i64 %109, i32 3
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %58, align 8
  %120 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %110, i64 %109, i32 4
  %121 = load i64, i64* %120, align 8
  store i64 %121, i64* %59, align 8
  %122 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %60, align 8
  %123 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %122, i64 0, i32 32, i32 16
  %124 = load void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)** %123, align 8
  %125 = getelementptr inbounds %struct.VmaBlockDefragmentationContext, %struct.VmaBlockDefragmentationContext* %113, i64 %112, i32 1
  %126 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %125, align 8
  %127 = getelementptr inbounds %struct.VmaBlockDefragmentationContext, %struct.VmaBlockDefragmentationContext* %113, i64 %115, i32 1
  %128 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %127, align 8
  call void %124(%struct.VkCommandBuffer_T* %3, %struct.VkBuffer_T* %126, %struct.VkBuffer_T* %128, i32 1, %struct.VkBufferCopy* nonnull %6) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %56) #15
  %129 = add nuw i64 %109, 1
  %130 = icmp eq i64 %129, %15
  br i1 %130, label %131, label %108

131:                                              ; preds = %108
  %132 = load i32, i32* %24, align 8
  br label %133

133:                                              ; preds = %131, %49
  %134 = phi i32 [ %132, %131 ], [ %50, %49 ]
  %135 = icmp eq i32 %134, 0
  %136 = and i1 %52, %135
  br i1 %136, label %137, label %138

137:                                              ; preds = %133
  store i32 1, i32* %24, align 8
  br label %138

138:                                              ; preds = %137, %133
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9VmaVectorI30VmaBlockDefragmentationContext15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.26*, i64, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.VmaVector.26, %class.VmaVector.26* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = mul i64 %5, 3
  %9 = lshr i64 %8, 1
  %10 = icmp ult i64 %8, 16
  %11 = select i1 %10, i64 8, i64 %9
  %12 = icmp ugt i64 %11, %1
  %13 = select i1 %12, i64 %11, i64 %1
  br label %16

14:                                               ; preds = %3
  %15 = select i1 %2, i64 %1, i64 %5
  br label %16

16:                                               ; preds = %14, %7
  %17 = phi i64 [ %13, %7 ], [ %15, %14 ]
  %18 = icmp eq i64 %17, %5
  br i1 %18, label %64, label %19

19:                                               ; preds = %16
  %20 = icmp eq i64 %17, 0
  br i1 %20, label %36, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %class.VmaVector.26, %class.VmaVector.26* %0, i64 0, i32 0, i32 0
  %23 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, align 8
  %24 = shl i64 %17, 4
  %25 = icmp eq %struct.VkAllocationCallbacks* %23, null
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 1
  %28 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %27, align 8
  %29 = icmp eq i8* (i8*, i64, i64, i32)* %28, null
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* %28(i8* %32, i64 %24, i64 8, i32 1) #15
  br label %36

34:                                               ; preds = %26, %21
  %35 = tail call noalias i8* @aligned_alloc(i64 8, i64 %24) #15
  br label %36

36:                                               ; preds = %34, %30, %19
  %37 = phi i8* [ null, %19 ], [ %33, %30 ], [ %35, %34 ]
  %38 = getelementptr inbounds %class.VmaVector.26, %class.VmaVector.26* %0, i64 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = icmp ugt i64 %39, %1
  %41 = select i1 %40, i64 %1, i64 %39
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %class.VmaVector.26, %class.VmaVector.26* %0, i64 0, i32 1
  %45 = bitcast %struct.VmaBlockDefragmentationContext** %44 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = shl i64 %41, 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %46, i64 %47, i1 false)
  br label %48

48:                                               ; preds = %36, %43
  %49 = getelementptr inbounds %class.VmaVector.26, %class.VmaVector.26* %0, i64 0, i32 0, i32 0
  %50 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %49, align 8
  %51 = getelementptr inbounds %class.VmaVector.26, %class.VmaVector.26* %0, i64 0, i32 1
  %52 = bitcast %struct.VmaBlockDefragmentationContext** %51 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq %struct.VkAllocationCallbacks* %50, null
  br i1 %54, label %62, label %55

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 3
  %57 = load void (i8*, i8*)*, void (i8*, i8*)** %56, align 8
  %58 = icmp eq void (i8*, i8*)* %57, null
  br i1 %58, label %62, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  tail call void %57(i8* %61, i8* %53) #15
  br label %63

62:                                               ; preds = %55, %48
  tail call void @free(i8* %53) #15
  br label %63

63:                                               ; preds = %59, %62
  store i64 %17, i64* %4, align 8
  store i8* %37, i8** %52, align 8
  br label %64

64:                                               ; preds = %16, %63
  %65 = getelementptr inbounds %class.VmaVector.26, %class.VmaVector.26* %0, i64 0, i32 2
  store i64 %1, i64* %65, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaBlockVector15FreeEmptyBlocksEP23VmaDefragmentationStats(%struct.VmaBlockVector*, %struct.VmaDefragmentationStats*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16
  %4 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 14
  store i8 0, i8* %8, align 8
  br label %139

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  %11 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 5
  %12 = icmp eq %struct.VmaDefragmentationStats* %1, null
  %13 = getelementptr inbounds %struct.VmaDefragmentationStats, %struct.VmaDefragmentationStats* %1, i64 0, i32 3
  %14 = getelementptr inbounds %struct.VmaDefragmentationStats, %struct.VmaDefragmentationStats* %1, i64 0, i32 1
  %15 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 0
  br label %16

16:                                               ; preds = %9, %113
  %17 = phi i64 [ %5, %9 ], [ %18, %113 ]
  %18 = add i64 %17, -1
  %19 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %10, align 8
  %20 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %19, i64 %18
  %21 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %20, align 8
  %22 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %21, i64 0, i32 0
  %23 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %22, align 8
  %24 = bitcast %class.VmaBlockMetadata* %23 to i1 (%class.VmaBlockMetadata*)***
  %25 = load i1 (%class.VmaBlockMetadata*)**, i1 (%class.VmaBlockMetadata*)*** %24, align 8
  %26 = getelementptr inbounds i1 (%class.VmaBlockMetadata*)*, i1 (%class.VmaBlockMetadata*)** %25, i64 7
  %27 = load i1 (%class.VmaBlockMetadata*)*, i1 (%class.VmaBlockMetadata*)** %26, align 8
  %28 = tail call zeroext i1 %27(%class.VmaBlockMetadata* %23) #15
  br i1 %28, label %29, label %113

29:                                               ; preds = %16
  %30 = load i64, i64* %4, align 8
  %31 = load i64, i64* %11, align 8
  %32 = icmp ugt i64 %30, %31
  br i1 %32, label %33, label %117

33:                                               ; preds = %29
  br i1 %12, label %43, label %34

34:                                               ; preds = %33
  %35 = load i32, i32* %13, align 4
  %36 = add i32 %35, 1
  store i32 %36, i32* %13, align 4
  %37 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %22, align 8
  %38 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %37, i64 0, i32 1
  %39 = load i64, i64* %38, align 8
  %40 = load i64, i64* %14, align 8
  %41 = add i64 %40, %39
  store i64 %41, i64* %14, align 8
  %42 = load i64, i64* %4, align 8
  br label %43

43:                                               ; preds = %33, %34
  %44 = phi i64 [ %30, %33 ], [ %42, %34 ]
  %45 = add i64 %44, -1
  %46 = icmp ugt i64 %45, %18
  br i1 %46, label %47, label %56

47:                                               ; preds = %43
  %48 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %10, align 8
  %49 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %48, i64 %18
  %50 = bitcast %class.VmaDeviceMemoryBlock** %49 to i8*
  %51 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %48, i64 %17
  %52 = bitcast %class.VmaDeviceMemoryBlock** %51 to i8*
  %53 = xor i64 %18, 2305843009213693951
  %54 = add i64 %44, %53
  %55 = shl i64 %54, 3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %52, i64 %55, i1 false) #15
  br label %56

56:                                               ; preds = %43, %47
  tail call void @_ZN9VmaVectorIP20VmaDeviceMemoryBlock15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.13* %3, i64 %45, i1 zeroext false) #15
  %57 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %15, align 8
  %58 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %21, i64 0, i32 2
  %59 = load i32, i32* %58, align 8
  %60 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %22, align 8
  %61 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %60, i64 0, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %21, i64 0, i32 4
  %64 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %63, align 8
  %65 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %57, i64 0, i32 14, i32 1
  %66 = load void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)*, void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)** %65, align 8
  %67 = icmp eq void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)* %66, null
  br i1 %67, label %71, label %68

68:                                               ; preds = %56
  %69 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %57, i64 0, i32 14, i32 2
  %70 = load i8*, i8** %69, align 8
  tail call void %66(%struct.VmaAllocator_T* %57, i32 %59, %struct.VkDeviceMemory_T* %64, i64 %62, i8* %70) #15
  br label %71

71:                                               ; preds = %68, %56
  %72 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %57, i64 0, i32 32, i32 3
  %73 = load void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)** %72, align 8
  %74 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %57, i64 0, i32 9
  %75 = load %struct.VkDevice_T*, %struct.VkDevice_T** %74, align 8
  %76 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %57, i64 0, i32 11
  %77 = load i8, i8* %76, align 8, !range !2
  %78 = icmp eq i8 %77, 0
  %79 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %57, i64 0, i32 13
  %80 = select i1 %78, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %79
  tail call void %73(%struct.VkDevice_T* %75, %struct.VkDeviceMemory_T* %64, %struct.VkAllocationCallbacks* %80) #15
  %81 = zext i32 %59 to i64
  %82 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %57, i64 0, i32 19, i32 1, i64 %81, i32 1
  %83 = load i32, i32* %82, align 4
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %57, i64 0, i32 23, i32 0, i64 %84, i32 0, i32 0, i32 0, i32 0, i32 0
  %86 = atomicrmw sub i64* %85, i64 %62 seq_cst
  store %struct.VkDeviceMemory_T* null, %struct.VkDeviceMemory_T** %63, align 8
  %87 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %22, align 8
  %88 = icmp eq %class.VmaBlockMetadata* %87, null
  br i1 %88, label %101, label %89

89:                                               ; preds = %71
  %90 = bitcast %class.VmaBlockMetadata* %87 to void (%class.VmaBlockMetadata*)***
  %91 = load void (%class.VmaBlockMetadata*)**, void (%class.VmaBlockMetadata*)*** %90, align 8
  %92 = load void (%class.VmaBlockMetadata*)*, void (%class.VmaBlockMetadata*)** %91, align 8
  tail call void %92(%class.VmaBlockMetadata* nonnull %87) #15
  %93 = bitcast %class.VmaBlockMetadata* %87 to i8*
  %94 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %57, i64 0, i32 13, i32 3
  %95 = load void (i8*, i8*)*, void (i8*, i8*)** %94, align 8
  %96 = icmp eq void (i8*, i8*)* %95, null
  br i1 %96, label %100, label %97

97:                                               ; preds = %89
  %98 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %57, i64 0, i32 13, i32 0
  %99 = load i8*, i8** %98, align 8
  tail call void %95(i8* %99, i8* nonnull %93) #15
  br label %101

100:                                              ; preds = %89
  tail call void @free(i8* %93) #15
  br label %101

101:                                              ; preds = %71, %97, %100
  store %class.VmaBlockMetadata* null, %class.VmaBlockMetadata** %22, align 8
  %102 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %15, align 8
  %103 = icmp eq %class.VmaDeviceMemoryBlock* %21, null
  br i1 %103, label %113, label %104

104:                                              ; preds = %101
  %105 = bitcast %class.VmaDeviceMemoryBlock* %21 to i8*
  %106 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %102, i64 0, i32 13, i32 3
  %107 = load void (i8*, i8*)*, void (i8*, i8*)** %106, align 8
  %108 = icmp eq void (i8*, i8*)* %107, null
  br i1 %108, label %112, label %109

109:                                              ; preds = %104
  %110 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %102, i64 0, i32 13, i32 0
  %111 = load i8*, i8** %110, align 8
  tail call void %107(i8* %111, i8* nonnull %105) #15
  br label %113

112:                                              ; preds = %104
  tail call void @free(i8* %105) #15
  br label %113

113:                                              ; preds = %112, %109, %101, %16
  %114 = icmp eq i64 %18, 0
  br i1 %114, label %115, label %16

115:                                              ; preds = %113
  %116 = load i64, i64* %4, align 8
  br label %117

117:                                              ; preds = %29, %115
  %118 = phi i64 [ %116, %115 ], [ %30, %29 ]
  %119 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 14
  store i8 0, i8* %119, align 8
  %120 = icmp eq i64 %118, 0
  br i1 %120, label %139, label %121

121:                                              ; preds = %117
  %122 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  br label %125

123:                                              ; preds = %125
  %124 = icmp eq i64 %137, %118
  br i1 %124, label %139, label %125

125:                                              ; preds = %123, %121
  %126 = phi i64 [ 0, %121 ], [ %137, %123 ]
  %127 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %122, align 8
  %128 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %127, i64 %126
  %129 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %128, align 8
  %130 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %129, i64 0, i32 0
  %131 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %130, align 8
  %132 = bitcast %class.VmaBlockMetadata* %131 to i1 (%class.VmaBlockMetadata*)***
  %133 = load i1 (%class.VmaBlockMetadata*)**, i1 (%class.VmaBlockMetadata*)*** %132, align 8
  %134 = getelementptr inbounds i1 (%class.VmaBlockMetadata*)*, i1 (%class.VmaBlockMetadata*)** %133, i64 7
  %135 = load i1 (%class.VmaBlockMetadata*)*, i1 (%class.VmaBlockMetadata*)** %134, align 8
  %136 = tail call zeroext i1 %135(%class.VmaBlockMetadata* %131) #15
  %137 = add nuw i64 %126, 1
  br i1 %136, label %138, label %123

138:                                              ; preds = %125
  store i8 1, i8* %119, align 8
  br label %139

139:                                              ; preds = %123, %7, %117, %138
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaBlockVector16PrintDetailedMapER13VmaJsonWriter(%struct.VmaBlockVector*, %class.VmaJsonWriter* dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %3 = alloca [21 x i8], align 16
  %4 = alloca [11 x i8], align 1
  %5 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 13
  %6 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 0
  %7 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %6, align 8
  %8 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %7, i64 0, i32 0
  %9 = load i8, i8* %8, align 8, !range !2
  %10 = icmp eq i8 %9, 0
  %11 = select i1 %10, %class.VmaRWMutex* null, %class.VmaRWMutex* %5
  %12 = icmp eq %class.VmaRWMutex* %11, null
  br i1 %12, label %15, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %11, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %14) #15
  br label %15

15:                                               ; preds = %2, %13
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %16 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 0
  %17 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %18 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %17, i64 0, i32 0
  %19 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %17, i64 0, i32 0, i32 2
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %18, i64 %21, i1 zeroext false) #15
  %22 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %17, i64 0, i32 0, i32 1
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 %20
  store i8 123, i8* %24, align 1
  %25 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 1
  %26 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 1, i32 2
  %27 = load i64, i64* %26, align 8
  %28 = add i64 %27, 1
  tail call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %25, i64 %28, i1 zeroext false) #15
  %29 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 1, i32 1
  %30 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %29, align 8
  %31 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %30, i64 %27
  %32 = bitcast %"struct.VmaJsonWriter::StackItem"* %31 to i8*
  %33 = getelementptr inbounds i8, i8* %32, i64 9
  %34 = bitcast %"struct.VmaJsonWriter::StackItem"* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %34, i8 0, i64 9, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %33, i8* nonnull align 1 getelementptr inbounds ({ i32, i32, i8, [3 x i8] }, { i32, i32, i8, [3 x i8] }* @__const._ZN13VmaJsonWriter10BeginArrayEb.item, i64 0, i32 3, i64 0), i64 3, i1 false) #15
  %35 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 1
  %36 = load %struct.VmaPool_T*, %struct.VmaPool_T** %35, align 8
  %37 = icmp eq %struct.VmaPool_T* %36, null
  br i1 %37, label %420, label %38

38:                                               ; preds = %15
  %39 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %36, i64 0, i32 2
  %40 = load i8*, i8** %39, align 8
  %41 = icmp eq i8* %40, null
  br i1 %41, label %83, label %42

42:                                               ; preds = %38
  %43 = load i8, i8* %40, align 1
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %83, label %45

45:                                               ; preds = %42
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %46 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %47 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %46, i64 0, i32 0
  %48 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %46, i64 0, i32 0, i32 2
  %49 = load i64, i64* %48, align 8
  %50 = add i64 %49, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %47, i64 %50, i1 zeroext false) #15
  %51 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %46, i64 0, i32 0, i32 1
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds i8, i8* %52, i64 %49
  store i8 34, i8* %53, align 1
  %54 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 2
  store i8 1, i8* %54, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26, i64 0, i64 0)) #15
  %55 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %56 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %55, i64 0, i32 0
  %57 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %55, i64 0, i32 0, i32 2
  %58 = load i64, i64* %57, align 8
  %59 = add i64 %58, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %56, i64 %59, i1 zeroext false) #15
  %60 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %55, i64 0, i32 0, i32 1
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds i8, i8* %61, i64 %58
  store i8 34, i8* %62, align 1
  store i8 0, i8* %54, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %63 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %64 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %63, i64 0, i32 0
  %65 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %63, i64 0, i32 0, i32 2
  %66 = load i64, i64* %65, align 8
  %67 = add i64 %66, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %64, i64 %67, i1 zeroext false) #15
  %68 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %63, i64 0, i32 0, i32 1
  %69 = load i8*, i8** %68, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 %66
  store i8 34, i8* %70, align 1
  store i8 1, i8* %54, align 8
  %71 = load i8, i8* %40, align 1
  %72 = icmp eq i8 %71, 0
  br i1 %72, label %74, label %73

73:                                               ; preds = %45
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull %40) #15
  br label %74

74:                                               ; preds = %45, %73
  %75 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %76 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %75, i64 0, i32 0
  %77 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %75, i64 0, i32 0, i32 2
  %78 = load i64, i64* %77, align 8
  %79 = add i64 %78, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %76, i64 %79, i1 zeroext false) #15
  %80 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %75, i64 0, i32 0, i32 1
  %81 = load i8*, i8** %80, align 8
  %82 = getelementptr inbounds i8, i8* %81, i64 %78
  store i8 34, i8* %82, align 1
  store i8 0, i8* %54, align 8
  br label %83

83:                                               ; preds = %42, %38, %74
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %84 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %85 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %84, i64 0, i32 0
  %86 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %84, i64 0, i32 0, i32 2
  %87 = load i64, i64* %86, align 8
  %88 = add i64 %87, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %85, i64 %88, i1 zeroext false) #15
  %89 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %84, i64 0, i32 0, i32 1
  %90 = load i8*, i8** %89, align 8
  %91 = getelementptr inbounds i8, i8* %90, i64 %87
  store i8 34, i8* %91, align 1
  %92 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 2
  store i8 1, i8* %92, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.27, i64 0, i64 0)) #15
  %93 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %94 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %93, i64 0, i32 0
  %95 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %93, i64 0, i32 0, i32 2
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %94, i64 %97, i1 zeroext false) #15
  %98 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %93, i64 0, i32 0, i32 1
  %99 = load i8*, i8** %98, align 8
  %100 = getelementptr inbounds i8, i8* %99, i64 %96
  store i8 34, i8* %100, align 1
  store i8 0, i8* %92, align 8
  %101 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 2
  %102 = load i32, i32* %101, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %103 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %104 = getelementptr inbounds [11 x i8], [11 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 11, i8* nonnull %104) #15
  %105 = getelementptr inbounds [11 x i8], [11 x i8]* %4, i64 0, i64 10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %104, i8 -86, i64 10, i1 false) #15
  store i8 0, i8* %105, align 1
  br label %106

106:                                              ; preds = %106, %83
  %107 = phi i32 [ %102, %83 ], [ %113, %106 ]
  %108 = phi i8* [ %105, %83 ], [ %112, %106 ]
  %109 = urem i32 %107, 10
  %110 = trunc i32 %109 to i8
  %111 = or i8 %110, 48
  %112 = getelementptr inbounds i8, i8* %108, i64 -1
  store i8 %111, i8* %112, align 1
  %113 = udiv i32 %107, 10
  %114 = icmp ugt i32 %107, 9
  br i1 %114, label %106, label %115

115:                                              ; preds = %106
  %116 = call i64 @strlen(i8* %112) #16
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %126, label %118

118:                                              ; preds = %115
  %119 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %103, i64 0, i32 0
  %120 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %103, i64 0, i32 0, i32 2
  %121 = load i64, i64* %120, align 8
  %122 = add i64 %121, %116
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %119, i64 %122, i1 zeroext false) #15
  %123 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %103, i64 0, i32 0, i32 1
  %124 = load i8*, i8** %123, align 8
  %125 = getelementptr inbounds i8, i8* %124, i64 %121
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %125, i8* align 1 %112, i64 %116, i1 false) #15
  br label %126

126:                                              ; preds = %115, %118
  call void @llvm.lifetime.end.p0i8(i64 11, i8* nonnull %104) #15
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %127 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %128 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %127, i64 0, i32 0
  %129 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %127, i64 0, i32 0, i32 2
  %130 = load i64, i64* %129, align 8
  %131 = add i64 %130, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %128, i64 %131, i1 zeroext false) #15
  %132 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %127, i64 0, i32 0, i32 1
  %133 = load i8*, i8** %132, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 %130
  store i8 34, i8* %134, align 1
  store i8 1, i8* %92, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28, i64 0, i64 0)) #15
  %135 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %136 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %135, i64 0, i32 0
  %137 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %135, i64 0, i32 0, i32 2
  %138 = load i64, i64* %137, align 8
  %139 = add i64 %138, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %136, i64 %139, i1 zeroext false) #15
  %140 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %135, i64 0, i32 0, i32 1
  %141 = load i8*, i8** %140, align 8
  %142 = getelementptr inbounds i8, i8* %141, i64 %138
  store i8 34, i8* %142, align 1
  store i8 0, i8* %92, align 8
  %143 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 4
  %144 = load i64, i64* %143, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %145 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %146 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %146) #15
  %147 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 20
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %146, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %147, align 4
  br label %148

148:                                              ; preds = %148, %126
  %149 = phi i64 [ %144, %126 ], [ %155, %148 ]
  %150 = phi i8* [ %147, %126 ], [ %154, %148 ]
  %151 = urem i64 %149, 10
  %152 = trunc i64 %151 to i8
  %153 = or i8 %152, 48
  %154 = getelementptr inbounds i8, i8* %150, i64 -1
  store i8 %153, i8* %154, align 1
  %155 = udiv i64 %149, 10
  %156 = icmp ugt i64 %149, 9
  br i1 %156, label %148, label %157

157:                                              ; preds = %148
  %158 = call i64 @strlen(i8* %154) #16
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %168, label %160

160:                                              ; preds = %157
  %161 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %145, i64 0, i32 0
  %162 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %145, i64 0, i32 0, i32 2
  %163 = load i64, i64* %162, align 8
  %164 = add i64 %163, %158
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %161, i64 %164, i1 zeroext false) #15
  %165 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %145, i64 0, i32 0, i32 1
  %166 = load i8*, i8** %165, align 8
  %167 = getelementptr inbounds i8, i8* %166, i64 %163
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %167, i8* align 1 %154, i64 %158, i1 false) #15
  br label %168

168:                                              ; preds = %157, %160
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %146) #15
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %169 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %170 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %169, i64 0, i32 0
  %171 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %169, i64 0, i32 0, i32 2
  %172 = load i64, i64* %171, align 8
  %173 = add i64 %172, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %170, i64 %173, i1 zeroext false) #15
  %174 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %169, i64 0, i32 0, i32 1
  %175 = load i8*, i8** %174, align 8
  %176 = getelementptr inbounds i8, i8* %175, i64 %172
  store i8 34, i8* %176, align 1
  store i8 1, i8* %92, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.29, i64 0, i64 0)) #15
  %177 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %178 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %177, i64 0, i32 0
  %179 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %177, i64 0, i32 0, i32 2
  %180 = load i64, i64* %179, align 8
  %181 = add i64 %180, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %178, i64 %181, i1 zeroext false) #15
  %182 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %177, i64 0, i32 0, i32 1
  %183 = load i8*, i8** %182, align 8
  %184 = getelementptr inbounds i8, i8* %183, i64 %180
  store i8 34, i8* %184, align 1
  store i8 0, i8* %92, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %185 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %186 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %185, i64 0, i32 0
  %187 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %185, i64 0, i32 0, i32 2
  %188 = load i64, i64* %187, align 8
  %189 = add i64 %188, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %186, i64 %189, i1 zeroext false) #15
  %190 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %185, i64 0, i32 0, i32 1
  %191 = load i8*, i8** %190, align 8
  %192 = getelementptr inbounds i8, i8* %191, i64 %188
  store i8 123, i8* %192, align 1
  %193 = load i64, i64* %26, align 8
  %194 = add i64 %193, 1
  tail call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %25, i64 %194, i1 zeroext false) #15
  %195 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %29, align 8
  %196 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %195, i64 %193
  %197 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %196, i64 0, i32 0
  store i32 0, i32* %197, align 4
  %198 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %195, i64 %193, i32 1
  store i32 0, i32* %198, align 4
  %199 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %195, i64 %193, i32 2
  store i8 1, i8* %199, align 4
  %200 = bitcast %"struct.VmaJsonWriter::StackItem"* %196 to i8*
  %201 = getelementptr inbounds i8, i8* %200, i64 9
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %201, i8* nonnull align 1 getelementptr inbounds ({ i32, i32, i8, [3 x i8] }, { i32, i32, i8, [3 x i8] }* @__const._ZN13VmaJsonWriter10BeginArrayEb.item, i64 0, i32 3, i64 0), i64 3, i1 false) #15
  %202 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 5
  %203 = load i64, i64* %202, align 8
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %245, label %205

205:                                              ; preds = %168
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %206 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %207 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %206, i64 0, i32 0
  %208 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %206, i64 0, i32 0, i32 2
  %209 = load i64, i64* %208, align 8
  %210 = add i64 %209, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %207, i64 %210, i1 zeroext false) #15
  %211 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %206, i64 0, i32 0, i32 1
  %212 = load i8*, i8** %211, align 8
  %213 = getelementptr inbounds i8, i8* %212, i64 %209
  store i8 34, i8* %213, align 1
  store i8 1, i8* %92, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.30, i64 0, i64 0)) #15
  %214 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %215 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %214, i64 0, i32 0
  %216 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %214, i64 0, i32 0, i32 2
  %217 = load i64, i64* %216, align 8
  %218 = add i64 %217, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %215, i64 %218, i1 zeroext false) #15
  %219 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %214, i64 0, i32 0, i32 1
  %220 = load i8*, i8** %219, align 8
  %221 = getelementptr inbounds i8, i8* %220, i64 %217
  store i8 34, i8* %221, align 1
  store i8 0, i8* %92, align 8
  %222 = load i64, i64* %202, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %223 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %146) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %146, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %147, align 4
  br label %224

224:                                              ; preds = %224, %205
  %225 = phi i64 [ %222, %205 ], [ %231, %224 ]
  %226 = phi i8* [ %147, %205 ], [ %230, %224 ]
  %227 = urem i64 %225, 10
  %228 = trunc i64 %227 to i8
  %229 = or i8 %228, 48
  %230 = getelementptr inbounds i8, i8* %226, i64 -1
  store i8 %229, i8* %230, align 1
  %231 = udiv i64 %225, 10
  %232 = icmp ugt i64 %225, 9
  br i1 %232, label %224, label %233

233:                                              ; preds = %224
  %234 = call i64 @strlen(i8* %230) #16
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %244, label %236

236:                                              ; preds = %233
  %237 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %223, i64 0, i32 0
  %238 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %223, i64 0, i32 0, i32 2
  %239 = load i64, i64* %238, align 8
  %240 = add i64 %239, %234
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %237, i64 %240, i1 zeroext false) #15
  %241 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %223, i64 0, i32 0, i32 1
  %242 = load i8*, i8** %241, align 8
  %243 = getelementptr inbounds i8, i8* %242, i64 %239
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %243, i8* align 1 %230, i64 %234, i1 false) #15
  br label %244

244:                                              ; preds = %233, %236
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %146) #15
  br label %245

245:                                              ; preds = %168, %244
  %246 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 6
  %247 = load i64, i64* %246, align 8
  %248 = icmp eq i64 %247, -1
  br i1 %248, label %289, label %249

249:                                              ; preds = %245
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %250 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %251 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %250, i64 0, i32 0
  %252 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %250, i64 0, i32 0, i32 2
  %253 = load i64, i64* %252, align 8
  %254 = add i64 %253, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %251, i64 %254, i1 zeroext false) #15
  %255 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %250, i64 0, i32 0, i32 1
  %256 = load i8*, i8** %255, align 8
  %257 = getelementptr inbounds i8, i8* %256, i64 %253
  store i8 34, i8* %257, align 1
  store i8 1, i8* %92, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.31, i64 0, i64 0)) #15
  %258 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %259 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %258, i64 0, i32 0
  %260 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %258, i64 0, i32 0, i32 2
  %261 = load i64, i64* %260, align 8
  %262 = add i64 %261, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %259, i64 %262, i1 zeroext false) #15
  %263 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %258, i64 0, i32 0, i32 1
  %264 = load i8*, i8** %263, align 8
  %265 = getelementptr inbounds i8, i8* %264, i64 %261
  store i8 34, i8* %265, align 1
  store i8 0, i8* %92, align 8
  %266 = load i64, i64* %246, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %267 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %146) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %146, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %147, align 4
  br label %268

268:                                              ; preds = %268, %249
  %269 = phi i64 [ %266, %249 ], [ %275, %268 ]
  %270 = phi i8* [ %147, %249 ], [ %274, %268 ]
  %271 = urem i64 %269, 10
  %272 = trunc i64 %271 to i8
  %273 = or i8 %272, 48
  %274 = getelementptr inbounds i8, i8* %270, i64 -1
  store i8 %273, i8* %274, align 1
  %275 = udiv i64 %269, 10
  %276 = icmp ugt i64 %269, 9
  br i1 %276, label %268, label %277

277:                                              ; preds = %268
  %278 = call i64 @strlen(i8* %274) #16
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %288, label %280

280:                                              ; preds = %277
  %281 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %267, i64 0, i32 0
  %282 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %267, i64 0, i32 0, i32 2
  %283 = load i64, i64* %282, align 8
  %284 = add i64 %283, %278
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %281, i64 %284, i1 zeroext false) #15
  %285 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %267, i64 0, i32 0, i32 1
  %286 = load i8*, i8** %285, align 8
  %287 = getelementptr inbounds i8, i8* %286, i64 %283
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %287, i8* align 1 %274, i64 %278, i1 false) #15
  br label %288

288:                                              ; preds = %277, %280
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %146) #15
  br label %289

289:                                              ; preds = %245, %288
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %290 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %291 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %290, i64 0, i32 0
  %292 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %290, i64 0, i32 0, i32 2
  %293 = load i64, i64* %292, align 8
  %294 = add i64 %293, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %291, i64 %294, i1 zeroext false) #15
  %295 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %290, i64 0, i32 0, i32 1
  %296 = load i8*, i8** %295, align 8
  %297 = getelementptr inbounds i8, i8* %296, i64 %293
  store i8 34, i8* %297, align 1
  store i8 1, i8* %92, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.32, i64 0, i64 0)) #15
  %298 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %299 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %298, i64 0, i32 0
  %300 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %298, i64 0, i32 0, i32 2
  %301 = load i64, i64* %300, align 8
  %302 = add i64 %301, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %299, i64 %302, i1 zeroext false) #15
  %303 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %298, i64 0, i32 0, i32 1
  %304 = load i8*, i8** %303, align 8
  %305 = getelementptr inbounds i8, i8* %304, i64 %301
  store i8 34, i8* %305, align 1
  store i8 0, i8* %92, align 8
  %306 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %307 = load i64, i64* %306, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %308 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %146) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %146, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %147, align 4
  br label %309

309:                                              ; preds = %309, %289
  %310 = phi i64 [ %307, %289 ], [ %316, %309 ]
  %311 = phi i8* [ %147, %289 ], [ %315, %309 ]
  %312 = urem i64 %310, 10
  %313 = trunc i64 %312 to i8
  %314 = or i8 %313, 48
  %315 = getelementptr inbounds i8, i8* %311, i64 -1
  store i8 %314, i8* %315, align 1
  %316 = udiv i64 %310, 10
  %317 = icmp ugt i64 %310, 9
  br i1 %317, label %309, label %318

318:                                              ; preds = %309
  %319 = call i64 @strlen(i8* %315) #16
  %320 = icmp eq i64 %319, 0
  br i1 %320, label %329, label %321

321:                                              ; preds = %318
  %322 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %308, i64 0, i32 0
  %323 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %308, i64 0, i32 0, i32 2
  %324 = load i64, i64* %323, align 8
  %325 = add i64 %324, %319
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %322, i64 %325, i1 zeroext false) #15
  %326 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %308, i64 0, i32 0, i32 1
  %327 = load i8*, i8** %326, align 8
  %328 = getelementptr inbounds i8, i8* %327, i64 %324
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %328, i8* align 1 %315, i64 %319, i1 false) #15
  br label %329

329:                                              ; preds = %318, %321
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %146) #15
  tail call void @_ZN13VmaJsonWriter9EndObjectEv(%class.VmaJsonWriter* %1)
  %330 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 8
  %331 = load i32, i32* %330, align 8
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %373, label %333

333:                                              ; preds = %329
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %334 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %335 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %334, i64 0, i32 0
  %336 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %334, i64 0, i32 0, i32 2
  %337 = load i64, i64* %336, align 8
  %338 = add i64 %337, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %335, i64 %338, i1 zeroext false) #15
  %339 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %334, i64 0, i32 0, i32 1
  %340 = load i8*, i8** %339, align 8
  %341 = getelementptr inbounds i8, i8* %340, i64 %337
  store i8 34, i8* %341, align 1
  store i8 1, i8* %92, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.33, i64 0, i64 0)) #15
  %342 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %343 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %342, i64 0, i32 0
  %344 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %342, i64 0, i32 0, i32 2
  %345 = load i64, i64* %344, align 8
  %346 = add i64 %345, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %343, i64 %346, i1 zeroext false) #15
  %347 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %342, i64 0, i32 0, i32 1
  %348 = load i8*, i8** %347, align 8
  %349 = getelementptr inbounds i8, i8* %348, i64 %345
  store i8 34, i8* %349, align 1
  store i8 0, i8* %92, align 8
  %350 = load i32, i32* %330, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %351 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  call void @llvm.lifetime.start.p0i8(i64 11, i8* nonnull %104) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %104, i8 -86, i64 10, i1 false) #15
  store i8 0, i8* %105, align 1
  br label %352

352:                                              ; preds = %352, %333
  %353 = phi i32 [ %350, %333 ], [ %359, %352 ]
  %354 = phi i8* [ %105, %333 ], [ %358, %352 ]
  %355 = urem i32 %353, 10
  %356 = trunc i32 %355 to i8
  %357 = or i8 %356, 48
  %358 = getelementptr inbounds i8, i8* %354, i64 -1
  store i8 %357, i8* %358, align 1
  %359 = udiv i32 %353, 10
  %360 = icmp ugt i32 %353, 9
  br i1 %360, label %352, label %361

361:                                              ; preds = %352
  %362 = call i64 @strlen(i8* %358) #16
  %363 = icmp eq i64 %362, 0
  br i1 %363, label %372, label %364

364:                                              ; preds = %361
  %365 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %351, i64 0, i32 0
  %366 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %351, i64 0, i32 0, i32 2
  %367 = load i64, i64* %366, align 8
  %368 = add i64 %367, %362
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %365, i64 %368, i1 zeroext false) #15
  %369 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %351, i64 0, i32 0, i32 1
  %370 = load i8*, i8** %369, align 8
  %371 = getelementptr inbounds i8, i8* %370, i64 %367
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %371, i8* align 1 %358, i64 %362, i1 false) #15
  br label %372

372:                                              ; preds = %361, %364
  call void @llvm.lifetime.end.p0i8(i64 11, i8* nonnull %104) #15
  br label %373

373:                                              ; preds = %329, %372
  %374 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 11
  %375 = load i32, i32* %374, align 8
  %376 = icmp eq i32 %375, 0
  br i1 %376, label %464, label %377

377:                                              ; preds = %373
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %378 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %379 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %378, i64 0, i32 0
  %380 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %378, i64 0, i32 0, i32 2
  %381 = load i64, i64* %380, align 8
  %382 = add i64 %381, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %379, i64 %382, i1 zeroext false) #15
  %383 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %378, i64 0, i32 0, i32 1
  %384 = load i8*, i8** %383, align 8
  %385 = getelementptr inbounds i8, i8* %384, i64 %381
  store i8 34, i8* %385, align 1
  store i8 1, i8* %92, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.34, i64 0, i64 0)) #15
  %386 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %387 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %386, i64 0, i32 0
  %388 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %386, i64 0, i32 0, i32 2
  %389 = load i64, i64* %388, align 8
  %390 = add i64 %389, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %387, i64 %390, i1 zeroext false) #15
  %391 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %386, i64 0, i32 0, i32 1
  %392 = load i8*, i8** %391, align 8
  %393 = getelementptr inbounds i8, i8* %392, i64 %389
  store i8 34, i8* %393, align 1
  store i8 0, i8* %92, align 8
  %394 = load i32, i32* %374, align 8
  switch i32 %394, label %397 [
    i32 4, label %398
    i32 8, label %395
    i32 0, label %396
  ]

395:                                              ; preds = %377
  br label %398

396:                                              ; preds = %377
  br label %398

397:                                              ; preds = %377
  br label %398

398:                                              ; preds = %377, %395, %396, %397
  %399 = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.70, i64 0, i64 0), %397 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.69, i64 0, i64 0), %396 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.68, i64 0, i64 0), %395 ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @.str.67, i64 0, i64 0), %377 ]
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %400 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %401 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %400, i64 0, i32 0
  %402 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %400, i64 0, i32 0, i32 2
  %403 = load i64, i64* %402, align 8
  %404 = add i64 %403, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %401, i64 %404, i1 zeroext false) #15
  %405 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %400, i64 0, i32 0, i32 1
  %406 = load i8*, i8** %405, align 8
  %407 = getelementptr inbounds i8, i8* %406, i64 %403
  store i8 34, i8* %407, align 1
  store i8 1, i8* %92, align 8
  %408 = load i8, i8* %399, align 1
  %409 = icmp eq i8 %408, 0
  br i1 %409, label %411, label %410

410:                                              ; preds = %398
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull %399) #15
  br label %411

411:                                              ; preds = %398, %410
  %412 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %413 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %412, i64 0, i32 0
  %414 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %412, i64 0, i32 0, i32 2
  %415 = load i64, i64* %414, align 8
  %416 = add i64 %415, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %413, i64 %416, i1 zeroext false) #15
  %417 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %412, i64 0, i32 0, i32 1
  %418 = load i8*, i8** %417, align 8
  %419 = getelementptr inbounds i8, i8* %418, i64 %415
  store i8 34, i8* %419, align 1
  store i8 0, i8* %92, align 8
  br label %464

420:                                              ; preds = %15
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %421 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %422 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %421, i64 0, i32 0
  %423 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %421, i64 0, i32 0, i32 2
  %424 = load i64, i64* %423, align 8
  %425 = add i64 %424, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %422, i64 %425, i1 zeroext false) #15
  %426 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %421, i64 0, i32 0, i32 1
  %427 = load i8*, i8** %426, align 8
  %428 = getelementptr inbounds i8, i8* %427, i64 %424
  store i8 34, i8* %428, align 1
  %429 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 2
  store i8 1, i8* %429, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.35, i64 0, i64 0)) #15
  %430 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %431 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %430, i64 0, i32 0
  %432 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %430, i64 0, i32 0, i32 2
  %433 = load i64, i64* %432, align 8
  %434 = add i64 %433, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %431, i64 %434, i1 zeroext false) #15
  %435 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %430, i64 0, i32 0, i32 1
  %436 = load i8*, i8** %435, align 8
  %437 = getelementptr inbounds i8, i8* %436, i64 %433
  store i8 34, i8* %437, align 1
  store i8 0, i8* %429, align 8
  %438 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 4
  %439 = load i64, i64* %438, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %440 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %441 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %441) #15
  %442 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 20
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %441, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %442, align 4
  br label %443

443:                                              ; preds = %443, %420
  %444 = phi i64 [ %439, %420 ], [ %450, %443 ]
  %445 = phi i8* [ %442, %420 ], [ %449, %443 ]
  %446 = urem i64 %444, 10
  %447 = trunc i64 %446 to i8
  %448 = or i8 %447, 48
  %449 = getelementptr inbounds i8, i8* %445, i64 -1
  store i8 %448, i8* %449, align 1
  %450 = udiv i64 %444, 10
  %451 = icmp ugt i64 %444, 9
  br i1 %451, label %443, label %452

452:                                              ; preds = %443
  %453 = call i64 @strlen(i8* %449) #16
  %454 = icmp eq i64 %453, 0
  br i1 %454, label %463, label %455

455:                                              ; preds = %452
  %456 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %440, i64 0, i32 0
  %457 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %440, i64 0, i32 0, i32 2
  %458 = load i64, i64* %457, align 8
  %459 = add i64 %458, %453
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %456, i64 %459, i1 zeroext false) #15
  %460 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %440, i64 0, i32 0, i32 1
  %461 = load i8*, i8** %460, align 8
  %462 = getelementptr inbounds i8, i8* %461, i64 %458
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %462, i8* align 1 %449, i64 %453, i1 false) #15
  br label %463

463:                                              ; preds = %452, %455
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %441) #15
  br label %464

464:                                              ; preds = %411, %373, %463
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %465 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %466 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %465, i64 0, i32 0
  %467 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %465, i64 0, i32 0, i32 2
  %468 = load i64, i64* %467, align 8
  %469 = add i64 %468, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %466, i64 %469, i1 zeroext false) #15
  %470 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %465, i64 0, i32 0, i32 1
  %471 = load i8*, i8** %470, align 8
  %472 = getelementptr inbounds i8, i8* %471, i64 %468
  store i8 34, i8* %472, align 1
  %473 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 2
  store i8 1, i8* %473, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.36, i64 0, i64 0)) #15
  %474 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %475 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %474, i64 0, i32 0
  %476 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %474, i64 0, i32 0, i32 2
  %477 = load i64, i64* %476, align 8
  %478 = add i64 %477, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %475, i64 %478, i1 zeroext false) #15
  %479 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %474, i64 0, i32 0, i32 1
  %480 = load i8*, i8** %479, align 8
  %481 = getelementptr inbounds i8, i8* %480, i64 %477
  store i8 34, i8* %481, align 1
  store i8 0, i8* %473, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %482 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %483 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %482, i64 0, i32 0
  %484 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %482, i64 0, i32 0, i32 2
  %485 = load i64, i64* %484, align 8
  %486 = add i64 %485, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %483, i64 %486, i1 zeroext false) #15
  %487 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %482, i64 0, i32 0, i32 1
  %488 = load i8*, i8** %487, align 8
  %489 = getelementptr inbounds i8, i8* %488, i64 %485
  store i8 123, i8* %489, align 1
  %490 = load i64, i64* %26, align 8
  %491 = add i64 %490, 1
  tail call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %25, i64 %491, i1 zeroext false) #15
  %492 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %29, align 8
  %493 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %492, i64 %490
  %494 = bitcast %"struct.VmaJsonWriter::StackItem"* %493 to i8*
  %495 = getelementptr inbounds i8, i8* %494, i64 9
  %496 = bitcast %"struct.VmaJsonWriter::StackItem"* %493 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %496, i8 0, i64 9, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %495, i8* nonnull align 1 getelementptr inbounds ({ i32, i32, i8, [3 x i8] }, { i32, i32, i8, [3 x i8] }* @__const._ZN13VmaJsonWriter10BeginArrayEb.item, i64 0, i32 3, i64 0), i64 3, i1 false) #15
  %497 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %498 = load i64, i64* %497, align 8
  %499 = icmp eq i64 %498, 0
  br i1 %499, label %504, label %500

500:                                              ; preds = %464
  %501 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  %502 = getelementptr inbounds [11 x i8], [11 x i8]* %4, i64 0, i64 0
  %503 = getelementptr inbounds [11 x i8], [11 x i8]* %4, i64 0, i64 10
  br label %508

504:                                              ; preds = %544, %464
  tail call void @_ZN13VmaJsonWriter9EndObjectEv(%class.VmaJsonWriter* %1)
  tail call void @_ZN13VmaJsonWriter9EndObjectEv(%class.VmaJsonWriter* %1)
  br i1 %12, label %507, label %505

505:                                              ; preds = %504
  %506 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %11, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %506) #15
  br label %507

507:                                              ; preds = %504, %505
  ret void

508:                                              ; preds = %500, %544
  %509 = phi i64 [ 0, %500 ], [ %562, %544 ]
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %510 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %511 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %510, i64 0, i32 0
  %512 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %510, i64 0, i32 0, i32 2
  %513 = load i64, i64* %512, align 8
  %514 = add i64 %513, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %511, i64 %514, i1 zeroext false) #15
  %515 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %510, i64 0, i32 0, i32 1
  %516 = load i8*, i8** %515, align 8
  %517 = getelementptr inbounds i8, i8* %516, i64 %513
  store i8 34, i8* %517, align 1
  store i8 1, i8* %473, align 8
  %518 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %501, align 8
  %519 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %518, i64 %509
  %520 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %519, align 8
  %521 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %520, i64 0, i32 3
  %522 = load i32, i32* %521, align 4
  %523 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  call void @llvm.lifetime.start.p0i8(i64 11, i8* nonnull %502) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %502, i8 -86, i64 10, i1 false) #15
  store i8 0, i8* %503, align 1
  br label %524

524:                                              ; preds = %524, %508
  %525 = phi i32 [ %522, %508 ], [ %531, %524 ]
  %526 = phi i8* [ %503, %508 ], [ %530, %524 ]
  %527 = urem i32 %525, 10
  %528 = trunc i32 %527 to i8
  %529 = or i8 %528, 48
  %530 = getelementptr inbounds i8, i8* %526, i64 -1
  store i8 %529, i8* %530, align 1
  %531 = udiv i32 %525, 10
  %532 = icmp ugt i32 %525, 9
  br i1 %532, label %524, label %533

533:                                              ; preds = %524
  %534 = call i64 @strlen(i8* %530) #16
  %535 = icmp eq i64 %534, 0
  br i1 %535, label %544, label %536

536:                                              ; preds = %533
  %537 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %523, i64 0, i32 0
  %538 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %523, i64 0, i32 0, i32 2
  %539 = load i64, i64* %538, align 8
  %540 = add i64 %539, %534
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %537, i64 %540, i1 zeroext false) #15
  %541 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %523, i64 0, i32 0, i32 1
  %542 = load i8*, i8** %541, align 8
  %543 = getelementptr inbounds i8, i8* %542, i64 %539
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %543, i8* align 1 %530, i64 %534, i1 false) #15
  br label %544

544:                                              ; preds = %533, %536
  call void @llvm.lifetime.end.p0i8(i64 11, i8* nonnull %502) #15
  %545 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %16, align 8
  %546 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %545, i64 0, i32 0
  %547 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %545, i64 0, i32 0, i32 2
  %548 = load i64, i64* %547, align 8
  %549 = add i64 %548, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %546, i64 %549, i1 zeroext false) #15
  %550 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %545, i64 0, i32 0, i32 1
  %551 = load i8*, i8** %550, align 8
  %552 = getelementptr inbounds i8, i8* %551, i64 %548
  store i8 34, i8* %552, align 1
  store i8 0, i8* %473, align 8
  %553 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %501, align 8
  %554 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %553, i64 %509
  %555 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %554, align 8
  %556 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %555, i64 0, i32 0
  %557 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %556, align 8
  %558 = bitcast %class.VmaBlockMetadata* %557 to void (%class.VmaBlockMetadata*, %class.VmaJsonWriter*)***
  %559 = load void (%class.VmaBlockMetadata*, %class.VmaJsonWriter*)**, void (%class.VmaBlockMetadata*, %class.VmaJsonWriter*)*** %558, align 8
  %560 = getelementptr inbounds void (%class.VmaBlockMetadata*, %class.VmaJsonWriter*)*, void (%class.VmaBlockMetadata*, %class.VmaJsonWriter*)** %559, i64 10
  %561 = load void (%class.VmaBlockMetadata*, %class.VmaJsonWriter*)*, void (%class.VmaBlockMetadata*, %class.VmaJsonWriter*)** %560, align 8
  tail call void %561(%class.VmaBlockMetadata* %557, %class.VmaJsonWriter* dereferenceable(48) %1) #15
  %562 = add nuw i64 %509, 1
  %563 = load i64, i64* %497, align 8
  %564 = icmp ult i64 %562, %563
  br i1 %564, label %508, label %504
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaBlockVector10DefragmentEP36VmaBlockVectorDefragmentationContextP23VmaDefragmentationStatsjRmRjS4_S5_P17VkCommandBuffer_T(%struct.VmaBlockVector*, %class.VmaBlockVectorDefragmentationContext*, %struct.VmaDefragmentationStats*, i32, i64* nocapture dereferenceable(8), i32* nocapture dereferenceable(4), i64* nocapture dereferenceable(8), i32* nocapture dereferenceable(4), %struct.VkCommandBuffer_T*) local_unnamed_addr #0 align 2 {
  %10 = alloca %struct.VkBufferCreateInfo, align 8
  %11 = alloca %struct.VkBuffer_T*, align 8
  %12 = alloca %struct.VkMemoryRequirements, align 8
  %13 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %1, i64 0, i32 0
  store i32 0, i32* %13, align 8
  %14 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 0
  %15 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %14, align 8
  %16 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 2
  %17 = load i32, i32* %16, align 8
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %15, i64 0, i32 19, i32 1, i64 %18, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = and i32 %20, 2
  %22 = icmp ne i32 %21, 0
  %23 = load i64, i64* %4, align 8
  %24 = icmp ne i64 %23, 0
  %25 = load i32, i32* %5, align 4
  %26 = icmp ne i32 %25, 0
  %27 = and i1 %24, %26
  %28 = and i1 %22, %27
  %29 = load i64, i64* %6, align 8
  %30 = icmp eq i64 %29, 0
  %31 = load i32, i32* %7, align 4
  %32 = icmp eq i32 %31, 0
  %33 = or i1 %30, %32
  br i1 %33, label %77, label %34

34:                                               ; preds = %9
  %35 = shl i32 1, %17
  %36 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %15, i64 0, i32 27, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 seq_cst, align 4
  %38 = icmp eq i32 %37, -1
  br i1 %38, label %39, label %73

39:                                               ; preds = %34
  %40 = bitcast %struct.VkBufferCreateInfo* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %40) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 0, i64 56, i1 false) #15
  %41 = getelementptr inbounds %struct.VkBufferCreateInfo, %struct.VkBufferCreateInfo* %10, i64 0, i32 0
  store i32 12, i32* %41, align 8
  %42 = getelementptr inbounds %struct.VkBufferCreateInfo, %struct.VkBufferCreateInfo* %10, i64 0, i32 4
  store i32 3, i32* %42, align 8
  %43 = getelementptr inbounds %struct.VkBufferCreateInfo, %struct.VkBufferCreateInfo* %10, i64 0, i32 3
  store i64 268435456, i64* %43, align 8
  %44 = bitcast %struct.VkBuffer_T** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #15
  store %struct.VkBuffer_T* null, %struct.VkBuffer_T** %11, align 8
  %45 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %15, i64 0, i32 32, i32 12
  %46 = load i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)*, i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)** %45, align 8
  %47 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %15, i64 0, i32 9
  %48 = load %struct.VkDevice_T*, %struct.VkDevice_T** %47, align 8
  %49 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %15, i64 0, i32 11
  %50 = load i8, i8* %49, align 8, !range !2
  %51 = icmp eq i8 %50, 0
  %52 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %15, i64 0, i32 13
  %53 = select i1 %51, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %52
  %54 = call i32 %46(%struct.VkDevice_T* %48, %struct.VkBufferCreateInfo* nonnull %10, %struct.VkAllocationCallbacks* %53, %struct.VkBuffer_T** nonnull %11) #15
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %71

56:                                               ; preds = %39
  %57 = bitcast %struct.VkMemoryRequirements* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %57) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %57, i8 -86, i64 24, i1 false) #15
  %58 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %15, i64 0, i32 32, i32 10
  %59 = load void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)** %58, align 8
  %60 = load %struct.VkDevice_T*, %struct.VkDevice_T** %47, align 8
  %61 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %11, align 8
  call void %59(%struct.VkDevice_T* %60, %struct.VkBuffer_T* %61, %struct.VkMemoryRequirements* nonnull %12) #15
  %62 = getelementptr inbounds %struct.VkMemoryRequirements, %struct.VkMemoryRequirements* %12, i64 0, i32 2
  %63 = load i32, i32* %62, align 8
  %64 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %15, i64 0, i32 32, i32 13
  %65 = load void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)** %64, align 8
  %66 = load %struct.VkDevice_T*, %struct.VkDevice_T** %47, align 8
  %67 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %11, align 8
  %68 = load i8, i8* %49, align 8, !range !2
  %69 = icmp eq i8 %68, 0
  %70 = select i1 %69, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %52
  call void %65(%struct.VkDevice_T* %66, %struct.VkBuffer_T* %67, %struct.VkAllocationCallbacks* %70) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %57) #15
  br label %71

71:                                               ; preds = %56, %39
  %72 = phi i32 [ %63, %56 ], [ 0, %39 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #15
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %40) #15
  store atomic i32 %72, i32* %36 seq_cst, align 4
  br label %73

73:                                               ; preds = %34, %71
  %74 = phi i32 [ %72, %71 ], [ %37, %34 ]
  %75 = and i32 %74, %35
  %76 = icmp ne i32 %75, 0
  br label %77

77:                                               ; preds = %9, %73
  %78 = phi i1 [ false, %9 ], [ %76, %73 ]
  %79 = or i1 %28, %78
  br i1 %79, label %80, label %171

80:                                               ; preds = %77
  %81 = xor i1 %28, %78
  br i1 %81, label %90, label %82

82:                                               ; preds = %80
  %83 = and i32 %20, 1
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %90

85:                                               ; preds = %82
  %86 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %14, align 8
  %87 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %86, i64 0, i32 18, i32 4
  %88 = load i32, i32* %87, align 8
  %89 = icmp eq i32 %88, 1
  br label %90

90:                                               ; preds = %85, %82, %80
  %91 = phi i1 [ %78, %80 ], [ true, %82 ], [ %89, %85 ]
  %92 = xor i1 %91, true
  %93 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %14, align 8
  %94 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %93, i64 0, i32 0
  %95 = load i8, i8* %94, align 8, !range !2
  %96 = icmp eq i8 %95, 0
  br i1 %96, label %106, label %97

97:                                               ; preds = %90
  %98 = and i32 %3, 1
  %99 = icmp eq i32 %98, 0
  %100 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 13, i32 0, i32 0
  br i1 %99, label %104, label %101

101:                                              ; preds = %97
  %102 = call zeroext i1 @_ZNSt3__15mutex8try_lockEv(%"class.std::__1::mutex"* %100) #15
  br i1 %102, label %106, label %103

103:                                              ; preds = %101
  store i32 -3, i32* %13, align 8
  br label %171

104:                                              ; preds = %97
  call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %100) #15
  %105 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %1, i64 0, i32 1
  store i8 1, i8* %105, align 4
  br label %106

106:                                              ; preds = %90, %104, %101
  call void @_ZN36VmaBlockVectorDefragmentationContext5BeginEbj(%class.VmaBlockVectorDefragmentationContext* %1, i1 zeroext %92, i32 %3)
  %107 = load i64, i64* %6, align 8
  %108 = load i64, i64* %4, align 8
  %109 = select i1 %91, i64 %107, i64 %108
  %110 = load i32, i32* %7, align 4
  %111 = load i32, i32* %5, align 4
  %112 = select i1 %91, i32 %110, i32 %111
  %113 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %1, i64 0, i32 14
  %114 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %113, align 8
  %115 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %1, i64 0, i32 4
  %116 = bitcast %class.VmaDefragmentationAlgorithm* %114 to i32 (%class.VmaDefragmentationAlgorithm*, %class.VmaVector.28*, i64, i32, i32)***
  %117 = load i32 (%class.VmaDefragmentationAlgorithm*, %class.VmaVector.28*, i64, i32, i32)**, i32 (%class.VmaDefragmentationAlgorithm*, %class.VmaVector.28*, i64, i32, i32)*** %116, align 8
  %118 = getelementptr inbounds i32 (%class.VmaDefragmentationAlgorithm*, %class.VmaVector.28*, i64, i32, i32)*, i32 (%class.VmaDefragmentationAlgorithm*, %class.VmaVector.28*, i64, i32, i32)** %117, i64 4
  %119 = load i32 (%class.VmaDefragmentationAlgorithm*, %class.VmaVector.28*, i64, i32, i32)*, i32 (%class.VmaDefragmentationAlgorithm*, %class.VmaVector.28*, i64, i32, i32)** %118, align 8
  %120 = call i32 %119(%class.VmaDefragmentationAlgorithm* %114, %class.VmaVector.28* dereferenceable(32) %115, i64 %109, i32 %112, i32 %3) #15
  store i32 %120, i32* %13, align 8
  %121 = icmp eq %struct.VmaDefragmentationStats* %2, null
  br i1 %121, label %147, label %122

122:                                              ; preds = %106
  %123 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %113, align 8
  %124 = bitcast %class.VmaDefragmentationAlgorithm* %123 to i64 (%class.VmaDefragmentationAlgorithm*)***
  %125 = load i64 (%class.VmaDefragmentationAlgorithm*)**, i64 (%class.VmaDefragmentationAlgorithm*)*** %124, align 8
  %126 = getelementptr inbounds i64 (%class.VmaDefragmentationAlgorithm*)*, i64 (%class.VmaDefragmentationAlgorithm*)** %125, i64 5
  %127 = load i64 (%class.VmaDefragmentationAlgorithm*)*, i64 (%class.VmaDefragmentationAlgorithm*)** %126, align 8
  %128 = call i64 %127(%class.VmaDefragmentationAlgorithm* %123) #15
  %129 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %113, align 8
  %130 = bitcast %class.VmaDefragmentationAlgorithm* %129 to i32 (%class.VmaDefragmentationAlgorithm*)***
  %131 = load i32 (%class.VmaDefragmentationAlgorithm*)**, i32 (%class.VmaDefragmentationAlgorithm*)*** %130, align 8
  %132 = getelementptr inbounds i32 (%class.VmaDefragmentationAlgorithm*)*, i32 (%class.VmaDefragmentationAlgorithm*)** %131, i64 6
  %133 = load i32 (%class.VmaDefragmentationAlgorithm*)*, i32 (%class.VmaDefragmentationAlgorithm*)** %132, align 8
  %134 = call i32 %133(%class.VmaDefragmentationAlgorithm* %129) #15
  %135 = getelementptr inbounds %struct.VmaDefragmentationStats, %struct.VmaDefragmentationStats* %2, i64 0, i32 0
  %136 = load i64, i64* %135, align 8
  %137 = add i64 %136, %128
  store i64 %137, i64* %135, align 8
  %138 = getelementptr inbounds %struct.VmaDefragmentationStats, %struct.VmaDefragmentationStats* %2, i64 0, i32 2
  %139 = load i32, i32* %138, align 8
  %140 = add i32 %139, %134
  store i32 %140, i32* %138, align 8
  %141 = select i1 %91, i64* %6, i64* %4
  %142 = select i1 %91, i32* %7, i32* %5
  %143 = load i64, i64* %141, align 8
  %144 = sub i64 %143, %128
  store i64 %144, i64* %141, align 8
  %145 = load i32, i32* %142, align 4
  %146 = sub i32 %145, %134
  store i32 %146, i32* %142, align 4
  br label %147

147:                                              ; preds = %122, %106
  %148 = and i32 %3, 1
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %165, label %150

150:                                              ; preds = %147
  %151 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %14, align 8
  %152 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %151, i64 0, i32 0
  %153 = load i8, i8* %152, align 8, !range !2
  %154 = icmp eq i8 %153, 0
  br i1 %154, label %157, label %155

155:                                              ; preds = %150
  %156 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 13, i32 0, i32 0
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %156) #15
  br label %157

157:                                              ; preds = %150, %155
  %158 = load i32, i32* %13, align 8
  %159 = icmp sgt i32 %158, -1
  br i1 %159, label %160, label %171

160:                                              ; preds = %157
  %161 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %1, i64 0, i32 4, i32 2
  %162 = load i64, i64* %161, align 8
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %171, label %164

164:                                              ; preds = %160
  store i32 1, i32* %13, align 8
  br label %171

165:                                              ; preds = %147
  %166 = load i32, i32* %13, align 8
  %167 = icmp sgt i32 %166, -1
  br i1 %167, label %168, label %171

168:                                              ; preds = %165
  br i1 %91, label %169, label %170

169:                                              ; preds = %168
  call void @_ZN14VmaBlockVector28ApplyDefragmentationMovesGpuEP36VmaBlockVectorDefragmentationContextR9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEP17VkCommandBuffer_T(%struct.VmaBlockVector* %0, %class.VmaBlockVectorDefragmentationContext* %1, %class.VmaVector.28* dereferenceable(32) %115, %struct.VkCommandBuffer_T* %8)
  br label %171

170:                                              ; preds = %168
  call void @_ZN14VmaBlockVector28ApplyDefragmentationMovesCpuEP36VmaBlockVectorDefragmentationContextRK9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EE(%struct.VmaBlockVector* %0, %class.VmaBlockVectorDefragmentationContext* %1, %class.VmaVector.28* dereferenceable(32) %115)
  br label %171

171:                                              ; preds = %77, %164, %160, %157, %169, %170, %165, %103
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaAllocator_T35GetGpuDefragmentationMemoryTypeBitsEv(%struct.VmaAllocator_T*) local_unnamed_addr #0 align 2 {
  %2 = alloca %struct.VkBufferCreateInfo, align 8
  %3 = alloca %struct.VkBuffer_T*, align 8
  %4 = alloca %struct.VkMemoryRequirements, align 8
  %5 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 27, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load atomic i32, i32* %5 seq_cst, align 4
  %7 = icmp eq i32 %6, -1
  br i1 %7, label %8, label %42

8:                                                ; preds = %1
  %9 = bitcast %struct.VkBufferCreateInfo* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %9) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 56, i1 false) #15
  %10 = getelementptr inbounds %struct.VkBufferCreateInfo, %struct.VkBufferCreateInfo* %2, i64 0, i32 0
  store i32 12, i32* %10, align 8
  %11 = getelementptr inbounds %struct.VkBufferCreateInfo, %struct.VkBufferCreateInfo* %2, i64 0, i32 4
  store i32 3, i32* %11, align 8
  %12 = getelementptr inbounds %struct.VkBufferCreateInfo, %struct.VkBufferCreateInfo* %2, i64 0, i32 3
  store i64 268435456, i64* %12, align 8
  %13 = bitcast %struct.VkBuffer_T** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #15
  store %struct.VkBuffer_T* null, %struct.VkBuffer_T** %3, align 8
  %14 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 12
  %15 = load i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)*, i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)** %14, align 8
  %16 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %17 = load %struct.VkDevice_T*, %struct.VkDevice_T** %16, align 8
  %18 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 11
  %19 = load i8, i8* %18, align 8, !range !2
  %20 = icmp eq i8 %19, 0
  %21 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13
  %22 = select i1 %20, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %21
  %23 = call i32 %15(%struct.VkDevice_T* %17, %struct.VkBufferCreateInfo* nonnull %2, %struct.VkAllocationCallbacks* %22, %struct.VkBuffer_T** nonnull %3) #15
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %40

25:                                               ; preds = %8
  %26 = bitcast %struct.VkMemoryRequirements* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 -86, i64 24, i1 false) #15
  %27 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 10
  %28 = load void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)** %27, align 8
  %29 = load %struct.VkDevice_T*, %struct.VkDevice_T** %16, align 8
  %30 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %3, align 8
  call void %28(%struct.VkDevice_T* %29, %struct.VkBuffer_T* %30, %struct.VkMemoryRequirements* nonnull %4) #15
  %31 = getelementptr inbounds %struct.VkMemoryRequirements, %struct.VkMemoryRequirements* %4, i64 0, i32 2
  %32 = load i32, i32* %31, align 8
  %33 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 13
  %34 = load void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)** %33, align 8
  %35 = load %struct.VkDevice_T*, %struct.VkDevice_T** %16, align 8
  %36 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %3, align 8
  %37 = load i8, i8* %18, align 8, !range !2
  %38 = icmp eq i8 %37, 0
  %39 = select i1 %38, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %21
  call void %34(%struct.VkDevice_T* %35, %struct.VkBuffer_T* %36, %struct.VkAllocationCallbacks* %39) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #15
  br label %40

40:                                               ; preds = %8, %25
  %41 = phi i32 [ %32, %25 ], [ 0, %8 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #15
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %9) #15
  store atomic i32 %41, i32* %5 seq_cst, align 4
  br label %42

42:                                               ; preds = %40, %1
  %43 = phi i32 [ %41, %40 ], [ %6, %1 ]
  ret i32 %43
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN36VmaBlockVectorDefragmentationContext5BeginEbj(%class.VmaBlockVectorDefragmentationContext* nocapture, i1 zeroext, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 16
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %37

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 15, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 11
  %11 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %10, align 8
  %12 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %11, i64 0, i32 16, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %34, label %15

15:                                               ; preds = %7
  %16 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %11, i64 0, i32 16, i32 1
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi i64 [ 0, %15 ], [ %31, %17 ]
  %19 = phi i64 [ 0, %15 ], [ %30, %17 ]
  %20 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %16, align 8
  %21 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %20, i64 %18
  %22 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %21, align 8
  %23 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %22, i64 0, i32 0
  %24 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %23, align 8
  %25 = bitcast %class.VmaBlockMetadata* %24 to i64 (%class.VmaBlockMetadata*)***
  %26 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %25, align 8
  %27 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %26, i64 4
  %28 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %27, align 8
  %29 = tail call i64 %28(%class.VmaBlockMetadata* %24) #15
  %30 = add i64 %29, %19
  %31 = add nuw i64 %18, 1
  %32 = load i64, i64* %12, align 8
  %33 = icmp ult i64 %31, %32
  br i1 %33, label %17, label %34

34:                                               ; preds = %17, %7
  %35 = phi i64 [ 0, %7 ], [ %30, %17 ]
  %36 = icmp eq i64 %9, %35
  br i1 %36, label %37, label %92

37:                                               ; preds = %3, %34
  %38 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 11
  %39 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %38, align 8
  %40 = tail call zeroext i1 @_ZNK14VmaBlockVector40IsBufferImageGranularityConflictPossibleEv(%struct.VmaBlockVector* %39)
  %41 = xor i1 %40, true
  %42 = and i32 %2, 1
  %43 = icmp eq i32 %42, 0
  %44 = and i1 %43, %41
  br i1 %44, label %45, label %92

45:                                               ; preds = %37
  %46 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 9
  %47 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %46, align 8
  %48 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %47, i64 0, i32 13, i32 1
  %49 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %48, align 8
  %50 = icmp eq i8* (i8*, i64, i64, i32)* %49, null
  br i1 %50, label %55, label %51

51:                                               ; preds = %45
  %52 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %47, i64 0, i32 13, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = tail call i8* %49(i8* %53, i64 88, i64 8, i32 1) #15
  br label %57

55:                                               ; preds = %45
  %56 = tail call noalias i8* @aligned_alloc(i64 8, i64 88) #15
  br label %57

57:                                               ; preds = %55, %51
  %58 = phi i8* [ %54, %51 ], [ %56, %55 ]
  %59 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %46, align 8
  %60 = bitcast %struct.VmaBlockVector** %38 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 12
  %63 = load i32, i32* %62, align 8
  %64 = zext i1 %1 to i8
  %65 = bitcast i8* %58 to i32 (...)***
  %66 = getelementptr inbounds i8, i8* %58, i64 8
  %67 = bitcast i8* %66 to %struct.VmaAllocator_T**
  store %struct.VmaAllocator_T* %59, %struct.VmaAllocator_T** %67, align 8
  %68 = getelementptr inbounds i8, i8* %58, i64 16
  %69 = bitcast i8* %68 to i64*
  store i64 %61, i64* %69, align 8
  %70 = getelementptr inbounds i8, i8* %58, i64 24
  %71 = bitcast i8* %70 to i32*
  store i32 %63, i32* %71, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTV32VmaDefragmentationAlgorithm_Fast, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %65, align 8
  %72 = getelementptr inbounds i8, i8* %58, i64 28
  store i8 %64, i8* %72, align 4
  %73 = getelementptr inbounds i8, i8* %58, i64 32
  %74 = bitcast i8* %73 to i32*
  store i32 0, i32* %74, align 8
  %75 = getelementptr inbounds i8, i8* %58, i64 36
  store i8 0, i8* %75, align 4
  %76 = getelementptr inbounds i8, i8* %58, i64 40
  %77 = bitcast i8* %76 to i64*
  store i64 0, i64* %77, align 8
  %78 = getelementptr inbounds i8, i8* %58, i64 48
  %79 = bitcast i8* %78 to i32*
  store i32 0, i32* %79, align 8
  %80 = getelementptr inbounds i8, i8* %58, i64 56
  %81 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %59, i64 0, i32 11
  %82 = load i8, i8* %81, align 8, !range !2
  %83 = icmp eq i8 %82, 0
  %84 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %59, i64 0, i32 13
  %85 = ptrtoint %struct.VkAllocationCallbacks* %84 to i64
  %86 = select i1 %83, i64 0, i64 %85
  %87 = bitcast i8* %80 to i64*
  store i64 %86, i64* %87, align 8
  %88 = getelementptr inbounds i8, i8* %58, i64 64
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %88, i8 0, i64 24, i1 false) #15
  %89 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 14
  %90 = bitcast %class.VmaDefragmentationAlgorithm** %89 to i8**
  store i8* %58, i8** %90, align 8
  %91 = bitcast i8* %58 to %class.VmaDefragmentationAlgorithm*
  br label %116

92:                                               ; preds = %37, %34
  %93 = phi i1 [ true, %37 ], [ false, %34 ]
  %94 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 9
  %95 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %94, align 8
  %96 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %95, i64 0, i32 13, i32 1
  %97 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %96, align 8
  %98 = icmp eq i8* (i8*, i64, i64, i32)* %97, null
  br i1 %98, label %103, label %99

99:                                               ; preds = %92
  %100 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %95, i64 0, i32 13, i32 0
  %101 = load i8*, i8** %100, align 8
  %102 = tail call i8* %97(i8* %101, i64 88, i64 8, i32 1) #15
  br label %105

103:                                              ; preds = %92
  %104 = tail call noalias i8* @aligned_alloc(i64 8, i64 88) #15
  br label %105

105:                                              ; preds = %103, %99
  %106 = phi i8* [ %102, %99 ], [ %104, %103 ]
  %107 = bitcast i8* %106 to %class.VmaDefragmentationAlgorithm_Generic*
  %108 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %94, align 8
  %109 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 11
  %110 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %109, align 8
  %111 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 12
  %112 = load i32, i32* %111, align 8
  tail call void @_ZN35VmaDefragmentationAlgorithm_GenericC2EP14VmaAllocator_TP14VmaBlockVectorjb(%class.VmaDefragmentationAlgorithm_Generic* %107, %struct.VmaAllocator_T* %108, %struct.VmaBlockVector* %110, i32 %112, i1 zeroext undef)
  %113 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 14
  %114 = bitcast %class.VmaDefragmentationAlgorithm** %113 to i8**
  store i8* %106, i8** %114, align 8
  %115 = bitcast i8* %106 to %class.VmaDefragmentationAlgorithm*
  br i1 %93, label %116, label %122

116:                                              ; preds = %57, %105
  %117 = phi %class.VmaDefragmentationAlgorithm* [ %91, %57 ], [ %115, %105 ]
  %118 = bitcast %class.VmaDefragmentationAlgorithm* %117 to void (%class.VmaDefragmentationAlgorithm*)***
  %119 = load void (%class.VmaDefragmentationAlgorithm*)**, void (%class.VmaDefragmentationAlgorithm*)*** %118, align 8
  %120 = getelementptr inbounds void (%class.VmaDefragmentationAlgorithm*)*, void (%class.VmaDefragmentationAlgorithm*)** %119, i64 3
  %121 = load void (%class.VmaDefragmentationAlgorithm*)*, void (%class.VmaDefragmentationAlgorithm*)** %120, align 8
  tail call void %121(%class.VmaDefragmentationAlgorithm* %117) #15
  br label %152

122:                                              ; preds = %105
  %123 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 15, i32 2
  %124 = load i64, i64* %123, align 8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %152, label %126

126:                                              ; preds = %122
  %127 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 15, i32 1
  %128 = load %"struct.VmaBlockVectorDefragmentationContext::AllocInfo"*, %"struct.VmaBlockVectorDefragmentationContext::AllocInfo"** %127, align 8
  %129 = getelementptr inbounds %"struct.VmaBlockVectorDefragmentationContext::AllocInfo", %"struct.VmaBlockVectorDefragmentationContext::AllocInfo"* %128, i64 0, i32 0
  %130 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %129, align 8
  %131 = getelementptr inbounds %"struct.VmaBlockVectorDefragmentationContext::AllocInfo", %"struct.VmaBlockVectorDefragmentationContext::AllocInfo"* %128, i64 0, i32 1
  %132 = load i32*, i32** %131, align 8
  %133 = bitcast i8* %106 to void (%class.VmaDefragmentationAlgorithm*, %struct.VmaAllocation_T*, i32*)***
  %134 = load void (%class.VmaDefragmentationAlgorithm*, %struct.VmaAllocation_T*, i32*)**, void (%class.VmaDefragmentationAlgorithm*, %struct.VmaAllocation_T*, i32*)*** %133, align 8
  %135 = getelementptr inbounds void (%class.VmaDefragmentationAlgorithm*, %struct.VmaAllocation_T*, i32*)*, void (%class.VmaDefragmentationAlgorithm*, %struct.VmaAllocation_T*, i32*)** %134, i64 2
  %136 = load void (%class.VmaDefragmentationAlgorithm*, %struct.VmaAllocation_T*, i32*)*, void (%class.VmaDefragmentationAlgorithm*, %struct.VmaAllocation_T*, i32*)** %135, align 8
  tail call void %136(%class.VmaDefragmentationAlgorithm* %115, %struct.VmaAllocation_T* %130, i32* %132) #15
  %137 = icmp eq i64 %124, 1
  br i1 %137, label %152, label %138

138:                                              ; preds = %126, %138
  %139 = phi i64 [ %150, %138 ], [ 1, %126 ]
  %140 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %113, align 8
  %141 = load %"struct.VmaBlockVectorDefragmentationContext::AllocInfo"*, %"struct.VmaBlockVectorDefragmentationContext::AllocInfo"** %127, align 8
  %142 = getelementptr inbounds %"struct.VmaBlockVectorDefragmentationContext::AllocInfo", %"struct.VmaBlockVectorDefragmentationContext::AllocInfo"* %141, i64 %139, i32 0
  %143 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %142, align 8
  %144 = getelementptr inbounds %"struct.VmaBlockVectorDefragmentationContext::AllocInfo", %"struct.VmaBlockVectorDefragmentationContext::AllocInfo"* %141, i64 %139, i32 1
  %145 = load i32*, i32** %144, align 8
  %146 = bitcast %class.VmaDefragmentationAlgorithm* %140 to void (%class.VmaDefragmentationAlgorithm*, %struct.VmaAllocation_T*, i32*)***
  %147 = load void (%class.VmaDefragmentationAlgorithm*, %struct.VmaAllocation_T*, i32*)**, void (%class.VmaDefragmentationAlgorithm*, %struct.VmaAllocation_T*, i32*)*** %146, align 8
  %148 = getelementptr inbounds void (%class.VmaDefragmentationAlgorithm*, %struct.VmaAllocation_T*, i32*)*, void (%class.VmaDefragmentationAlgorithm*, %struct.VmaAllocation_T*, i32*)** %147, i64 2
  %149 = load void (%class.VmaDefragmentationAlgorithm*, %struct.VmaAllocation_T*, i32*)*, void (%class.VmaDefragmentationAlgorithm*, %struct.VmaAllocation_T*, i32*)** %148, align 8
  tail call void %149(%class.VmaDefragmentationAlgorithm* %140, %struct.VmaAllocation_T* %143, i32* %145) #15
  %150 = add nuw i64 %139, 1
  %151 = icmp eq i64 %150, %124
  br i1 %151, label %152, label %138

152:                                              ; preds = %138, %126, %122, %116
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaBlockVector18DefragmentationEndEP36VmaBlockVectorDefragmentationContextjP23VmaDefragmentationStats(%struct.VmaBlockVector*, %class.VmaBlockVectorDefragmentationContext* nocapture, i32, %struct.VmaDefragmentationStats*) local_unnamed_addr #0 align 2 {
  %5 = and i32 %2, 1
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %16, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 0
  %9 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %8, align 8
  %10 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %9, i64 0, i32 0
  %11 = load i8, i8* %10, align 8, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 13, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %14) #15
  %15 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %1, i64 0, i32 1
  store i8 1, i8* %15, align 4
  br label %16

16:                                               ; preds = %7, %4, %13
  %17 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %1, i64 0, i32 1
  %18 = load i8, i8* %17, align 4, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %26

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 0
  %22 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %21, align 8
  %23 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %22, i64 0, i32 0
  %24 = load i8, i8* %23, align 8, !range !2
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %58

26:                                               ; preds = %20, %16
  %27 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %1, i64 0, i32 3, i32 2
  %28 = load i64, i64* %27, align 8
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %1, i64 0, i32 3, i32 1
  %32 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 0
  br label %37

33:                                               ; preds = %55, %26
  %34 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %1, i64 0, i32 0
  %35 = load i32, i32* %34, align 8
  %36 = icmp sgt i32 %35, -1
  br i1 %36, label %57, label %58

37:                                               ; preds = %30, %55
  %38 = phi i64 [ %28, %30 ], [ %39, %55 ]
  %39 = add i64 %38, -1
  %40 = load %struct.VmaBlockDefragmentationContext*, %struct.VmaBlockDefragmentationContext** %31, align 8
  %41 = getelementptr inbounds %struct.VmaBlockDefragmentationContext, %struct.VmaBlockDefragmentationContext* %40, i64 %39, i32 1
  %42 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %41, align 8
  %43 = icmp eq %struct.VkBuffer_T* %42, null
  br i1 %43, label %55, label %44

44:                                               ; preds = %37
  %45 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %32, align 8
  %46 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %45, i64 0, i32 32, i32 13
  %47 = load void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)** %46, align 8
  %48 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %45, i64 0, i32 9
  %49 = load %struct.VkDevice_T*, %struct.VkDevice_T** %48, align 8
  %50 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %45, i64 0, i32 11
  %51 = load i8, i8* %50, align 8, !range !2
  %52 = icmp eq i8 %51, 0
  %53 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %45, i64 0, i32 13
  %54 = select i1 %52, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %53
  tail call void %47(%struct.VkDevice_T* %49, %struct.VkBuffer_T* nonnull %42, %struct.VkAllocationCallbacks* %54) #15
  br label %55

55:                                               ; preds = %37, %44
  %56 = icmp eq i64 %39, 0
  br i1 %56, label %33, label %37

57:                                               ; preds = %33
  tail call void @_ZN14VmaBlockVector15FreeEmptyBlocksEP23VmaDefragmentationStats(%struct.VmaBlockVector* %0, %struct.VmaDefragmentationStats* %3)
  br label %58

58:                                               ; preds = %20, %33, %57
  %59 = load i8, i8* %17, align 4, !range !2
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %63, label %61

61:                                               ; preds = %58
  %62 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 13, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %62) #15
  br label %63

63:                                               ; preds = %58, %61
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaBlockVector23ProcessDefragmentationsEP36VmaBlockVectorDefragmentationContextP30VmaDefragmentationPassMoveInfoj(%struct.VmaBlockVector*, %class.VmaBlockVectorDefragmentationContext* nocapture, %struct.VmaDefragmentationPassMoveInfo* nocapture, i32) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 13
  %6 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 0
  %7 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %6, align 8
  %8 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %7, i64 0, i32 0
  %9 = load i8, i8* %8, align 8, !range !2
  %10 = icmp eq i8 %9, 0
  %11 = select i1 %10, %class.VmaRWMutex* null, %class.VmaRWMutex* %5
  %12 = icmp eq %class.VmaRWMutex* %11, null
  br i1 %12, label %15, label %13

13:                                               ; preds = %4
  %14 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %11, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %14) #15
  br label %15

15:                                               ; preds = %4, %13
  %16 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %1, i64 0, i32 4, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = trunc i64 %17 to i32
  %19 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %1, i64 0, i32 5
  %20 = load i32, i32* %19, align 8
  %21 = sub i32 %18, %20
  %22 = icmp ugt i32 %21, %3
  %23 = select i1 %22, i32 %3, i32 %21
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %15
  %26 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %1, i64 0, i32 4, i32 1
  br label %33

27:                                               ; preds = %33, %15
  %28 = phi i32 [ %20, %15 ], [ %57, %33 ]
  %29 = add i32 %28, %23
  store i32 %29, i32* %19, align 8
  br i1 %12, label %32, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %11, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %31) #15
  br label %32

32:                                               ; preds = %27, %30
  ret i32 %23

33:                                               ; preds = %25, %33
  %34 = phi i32 [ %20, %25 ], [ %57, %33 ]
  %35 = phi %struct.VmaDefragmentationPassMoveInfo* [ %2, %25 ], [ %54, %33 ]
  %36 = phi i32 [ 0, %25 ], [ %55, %33 ]
  %37 = add i32 %34, %36
  %38 = zext i32 %37 to i64
  %39 = load %struct.VmaDefragmentationMove*, %struct.VmaDefragmentationMove** %26, align 8
  %40 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %39, i64 %38, i32 5
  %41 = bitcast %struct.VmaAllocation_T** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %struct.VmaDefragmentationPassMoveInfo* %35 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %39, i64 %38, i32 7
  %45 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %44, align 8
  %46 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %45, i64 0, i32 4
  %47 = bitcast %struct.VkDeviceMemory_T** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %struct.VmaDefragmentationPassMoveInfo, %struct.VmaDefragmentationPassMoveInfo* %35, i64 0, i32 1
  %50 = bitcast %struct.VkDeviceMemory_T** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %39, i64 %38, i32 3
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %struct.VmaDefragmentationPassMoveInfo, %struct.VmaDefragmentationPassMoveInfo* %35, i64 0, i32 2
  store i64 %52, i64* %53, align 8
  %54 = getelementptr inbounds %struct.VmaDefragmentationPassMoveInfo, %struct.VmaDefragmentationPassMoveInfo* %35, i64 1
  %55 = add nuw i32 %36, 1
  %56 = icmp ult i32 %55, %23
  %57 = load i32, i32* %19, align 8
  br i1 %56, label %33, label %27
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaBlockVector22CommitDefragmentationsEP36VmaBlockVectorDefragmentationContextP23VmaDefragmentationStats(%struct.VmaBlockVector*, %class.VmaBlockVectorDefragmentationContext* nocapture, %struct.VmaDefragmentationStats*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 13
  %5 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 0
  %6 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %5, align 8
  %7 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %6, i64 0, i32 0
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  %10 = select i1 %9, %class.VmaRWMutex* null, %class.VmaRWMutex* %4
  %11 = icmp eq %class.VmaRWMutex* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %10, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %13) #15
  br label %14

14:                                               ; preds = %3, %12
  %15 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %1, i64 0, i32 6
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %1, i64 0, i32 5
  %18 = load i32, i32* %17, align 8
  %19 = icmp ult i32 %16, %18
  br i1 %19, label %20, label %23

20:                                               ; preds = %14
  %21 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %1, i64 0, i32 4, i32 1
  %22 = zext i32 %16 to i64
  br label %28

23:                                               ; preds = %28, %14
  %24 = phi i32 [ %18, %14 ], [ %49, %28 ]
  store i32 %24, i32* %15, align 4
  tail call void @_ZN14VmaBlockVector15FreeEmptyBlocksEP23VmaDefragmentationStats(%struct.VmaBlockVector* %0, %struct.VmaDefragmentationStats* %2)
  br i1 %11, label %27, label %25

25:                                               ; preds = %23
  %26 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %10, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %26) #15
  br label %27

27:                                               ; preds = %23, %25
  ret void

28:                                               ; preds = %20, %28
  %29 = phi i64 [ %22, %20 ], [ %48, %28 ]
  %30 = load %struct.VmaDefragmentationMove*, %struct.VmaDefragmentationMove** %21, align 8
  %31 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %30, i64 %29, i32 6
  %32 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %31, align 8
  %33 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %32, i64 0, i32 0
  %34 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %33, align 8
  %35 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %30, i64 %29, i32 2
  %36 = load i64, i64* %35, align 8
  %37 = bitcast %class.VmaBlockMetadata* %34 to void (%class.VmaBlockMetadata*, i64)***
  %38 = load void (%class.VmaBlockMetadata*, i64)**, void (%class.VmaBlockMetadata*, i64)*** %37, align 8
  %39 = getelementptr inbounds void (%class.VmaBlockMetadata*, i64)*, void (%class.VmaBlockMetadata*, i64)** %38, i64 17
  %40 = load void (%class.VmaBlockMetadata*, i64)*, void (%class.VmaBlockMetadata*, i64)** %39, align 8
  tail call void %40(%class.VmaBlockMetadata* %34, i64 %36) #15
  %41 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %30, i64 %29, i32 5
  %42 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %41, align 8
  %43 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %5, align 8
  %44 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %30, i64 %29, i32 7
  %45 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %44, align 8
  %46 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %30, i64 %29, i32 3
  %47 = load i64, i64* %46, align 8
  tail call void @_ZN15VmaAllocation_T21ChangeBlockAllocationEP14VmaAllocator_TP20VmaDeviceMemoryBlockm(%struct.VmaAllocation_T* %42, %struct.VmaAllocator_T* %43, %class.VmaDeviceMemoryBlock* %45, i64 %47)
  %48 = add nuw nsw i64 %29, 1
  %49 = load i32, i32* %17, align 8
  %50 = zext i32 %49 to i64
  %51 = icmp ult i64 %48, %50
  br i1 %51, label %28, label %23
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK14VmaBlockVector19CalcAllocationCountEv(%struct.VmaBlockVector* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  br label %9

7:                                                ; preds = %9, %1
  %8 = phi i64 [ 0, %1 ], [ %22, %9 ]
  ret i64 %8

9:                                                ; preds = %5, %9
  %10 = phi i64 [ 0, %5 ], [ %23, %9 ]
  %11 = phi i64 [ 0, %5 ], [ %22, %9 ]
  %12 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %6, align 8
  %13 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %12, i64 %10
  %14 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %13, align 8
  %15 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %14, i64 0, i32 0
  %16 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %15, align 8
  %17 = bitcast %class.VmaBlockMetadata* %16 to i64 (%class.VmaBlockMetadata*)***
  %18 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %17, align 8
  %19 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %18, i64 4
  %20 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %19, align 8
  %21 = tail call i64 %20(%class.VmaBlockMetadata* %16) #15
  %22 = add i64 %21, %11
  %23 = add nuw i64 %10, 1
  %24 = load i64, i64* %2, align 8
  %25 = icmp ult i64 %23, %24
  br i1 %25, label %9, label %7
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK14VmaBlockVector40IsBufferImageGranularityConflictPossibleEv(%struct.VmaBlockVector* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 7
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 1
  br i1 %4, label %74, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %74, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  br label %11

11:                                               ; preds = %72, %9
  %12 = phi i64 [ %3, %9 ], [ %73, %72 ]
  %13 = phi i64 [ 0, %9 ], [ %70, %72 ]
  %14 = phi i32 [ 0, %9 ], [ %69, %72 ]
  %15 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %10, align 8
  %16 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %15, i64 %13
  %17 = bitcast %class.VmaDeviceMemoryBlock** %16 to %class.VmaBlockMetadata_Generic***
  %18 = load %class.VmaBlockMetadata_Generic**, %class.VmaBlockMetadata_Generic*** %17, align 8
  %19 = load %class.VmaBlockMetadata_Generic*, %class.VmaBlockMetadata_Generic** %18, align 8
  %20 = icmp eq i64 %12, 1
  br i1 %20, label %68, label %21

21:                                               ; preds = %11
  %22 = bitcast %class.VmaBlockMetadata_Generic* %19 to i1 (%class.VmaBlockMetadata_Generic*)***
  %23 = load i1 (%class.VmaBlockMetadata_Generic*)**, i1 (%class.VmaBlockMetadata_Generic*)*** %22, align 8
  %24 = getelementptr inbounds i1 (%class.VmaBlockMetadata_Generic*)*, i1 (%class.VmaBlockMetadata_Generic*)** %23, i64 7
  %25 = load i1 (%class.VmaBlockMetadata_Generic*)*, i1 (%class.VmaBlockMetadata_Generic*)** %24, align 8
  %26 = tail call zeroext i1 %25(%class.VmaBlockMetadata_Generic* %19) #15
  br i1 %26, label %68, label %27

27:                                               ; preds = %21
  %28 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %19, i64 0, i32 3, i32 0, i32 2
  %29 = load %struct.VmaListItem*, %struct.VmaListItem** %28, align 8
  %30 = icmp eq %struct.VmaListItem* %29, null
  br i1 %30, label %74, label %31

31:                                               ; preds = %27, %56
  %32 = phi i32 [ %57, %56 ], [ %14, %27 ]
  %33 = phi %struct.VmaListItem* [ %61, %56 ], [ %29, %27 ]
  %34 = phi i8 [ %59, %56 ], [ 0, %27 ]
  %35 = phi i64 [ %58, %56 ], [ -1, %27 ]
  %36 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %33, i64 0, i32 2, i32 3
  %37 = load i32, i32* %36, align 8
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %56, label %39

39:                                               ; preds = %31
  %40 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %33, i64 0, i32 2, i32 2
  %41 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %40, align 8
  %42 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %41, i64 0, i32 0
  %43 = load i64, i64* %42, align 8
  %44 = icmp ult i64 %43, %35
  %45 = select i1 %44, i64 %43, i64 %35
  %46 = icmp sgt i32 %32, %37
  %47 = select i1 %46, i32 %37, i32 %32
  %48 = select i1 %46, i32 %32, i32 %37
  switch i32 %47, label %55 [
    i32 0, label %56
    i32 5, label %56
    i32 2, label %54
    i32 3, label %49
    i32 4, label %52
  ]

49:                                               ; preds = %39
  %50 = add i32 %48, -3
  %51 = icmp ult i32 %50, 3
  br i1 %51, label %55, label %56

52:                                               ; preds = %39
  %53 = icmp eq i32 %48, 5
  br i1 %53, label %55, label %56

54:                                               ; preds = %39
  switch i32 %48, label %56 [
    i32 5, label %55
    i32 3, label %55
  ]

55:                                               ; preds = %54, %54, %52, %49, %39
  br label %56

56:                                               ; preds = %39, %39, %49, %52, %54, %55, %31
  %57 = phi i32 [ %32, %31 ], [ %37, %55 ], [ %37, %54 ], [ %37, %52 ], [ %37, %49 ], [ %37, %39 ], [ %37, %39 ]
  %58 = phi i64 [ %35, %31 ], [ %45, %55 ], [ %45, %54 ], [ %45, %52 ], [ %45, %49 ], [ %45, %39 ], [ %45, %39 ]
  %59 = phi i8 [ %34, %31 ], [ 1, %55 ], [ %34, %54 ], [ %34, %52 ], [ %34, %49 ], [ %34, %39 ], [ %34, %39 ]
  %60 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %33, i64 0, i32 1
  %61 = load %struct.VmaListItem*, %struct.VmaListItem** %60, align 8
  %62 = icmp eq %struct.VmaListItem* %61, null
  br i1 %62, label %63, label %31

63:                                               ; preds = %56
  %64 = and i8 %59, 1
  %65 = icmp ne i8 %64, 0
  %66 = icmp uge i64 %58, %12
  %67 = or i1 %66, %65
  br i1 %67, label %74, label %68

68:                                               ; preds = %11, %21, %63
  %69 = phi i32 [ %57, %63 ], [ %14, %21 ], [ %14, %11 ]
  %70 = add nuw i64 %13, 1
  %71 = icmp eq i64 %70, %7
  br i1 %71, label %74, label %72

72:                                               ; preds = %68
  %73 = load i64, i64* %2, align 8
  br label %11

74:                                               ; preds = %63, %27, %68, %5, %1
  %75 = phi i1 [ false, %1 ], [ false, %5 ], [ false, %68 ], [ true, %63 ], [ true, %27 ]
  ret i1 %75
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaBlockVector23MakePoolAllocationsLostEjPm(%struct.VmaBlockVector*, i32, i64*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 13
  %5 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 0
  %6 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %5, align 8
  %7 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %6, i64 0, i32 0
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  %10 = select i1 %9, %class.VmaRWMutex* null, %class.VmaRWMutex* %4
  %11 = icmp eq %class.VmaRWMutex* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %10, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %13) #15
  br label %14

14:                                               ; preds = %3, %12
  %15 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %21, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  %20 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 8
  br label %24

21:                                               ; preds = %24, %14
  %22 = phi i64 [ 0, %14 ], [ %40, %24 ]
  %23 = icmp eq i64* %2, null
  br i1 %23, label %46, label %45

24:                                               ; preds = %18, %24
  %25 = phi i64 [ 0, %18 ], [ %42, %24 ]
  %26 = phi i64 [ 0, %18 ], [ %40, %24 ]
  %27 = phi i32 [ 0, %18 ], [ %41, %24 ]
  %28 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %19, align 8
  %29 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %28, i64 %25
  %30 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %29, align 8
  %31 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %30, i64 0, i32 0
  %32 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %31, align 8
  %33 = load i32, i32* %20, align 8
  %34 = bitcast %class.VmaBlockMetadata* %32 to i32 (%class.VmaBlockMetadata*, i32, i32)***
  %35 = load i32 (%class.VmaBlockMetadata*, i32, i32)**, i32 (%class.VmaBlockMetadata*, i32, i32)*** %34, align 8
  %36 = getelementptr inbounds i32 (%class.VmaBlockMetadata*, i32, i32)*, i32 (%class.VmaBlockMetadata*, i32, i32)** %35, i64 13
  %37 = load i32 (%class.VmaBlockMetadata*, i32, i32)*, i32 (%class.VmaBlockMetadata*, i32, i32)** %36, align 8
  %38 = tail call i32 %37(%class.VmaBlockMetadata* %32, i32 %1, i32 %33) #15
  %39 = zext i32 %38 to i64
  %40 = add i64 %26, %39
  %41 = add i32 %27, 1
  %42 = zext i32 %41 to i64
  %43 = load i64, i64* %15, align 8
  %44 = icmp ugt i64 %43, %42
  br i1 %44, label %24, label %21

45:                                               ; preds = %21
  store i64 %22, i64* %2, align 8
  br label %46

46:                                               ; preds = %21, %45
  br i1 %11, label %49, label %47

47:                                               ; preds = %46
  %48 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %10, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %48) #15
  br label %49

49:                                               ; preds = %46, %47
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN14VmaBlockVector15CheckCorruptionEv(%struct.VmaBlockVector* nocapture readnone) local_unnamed_addr #10 align 2 {
  ret i32 -8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaBlockVector8AddStatsEP8VmaStats(%struct.VmaBlockVector*, %struct.VmaStats* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca %struct.VmaStatInfo, align 8
  %4 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 0
  %7 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %6, align 8
  %8 = zext i32 %5 to i64
  %9 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %7, i64 0, i32 19, i32 1, i64 %8, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 13
  %12 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %7, i64 0, i32 0
  %13 = load i8, i8* %12, align 8, !range !2
  %14 = icmp eq i8 %13, 0
  %15 = select i1 %14, %class.VmaRWMutex* null, %class.VmaRWMutex* %11
  %16 = icmp eq %class.VmaRWMutex* %15, null
  br i1 %16, label %19, label %17

17:                                               ; preds = %2
  %18 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %15, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %18) #15
  br label %19

19:                                               ; preds = %2, %17
  %20 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %66, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %0, i64 0, i32 16, i32 1
  %25 = bitcast %struct.VmaStatInfo* %3 to i8*
  %26 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %3, i64 0, i32 0
  %27 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 2, i32 0
  %28 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %3, i64 0, i32 1
  %29 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 2, i32 1
  %30 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %3, i64 0, i32 2
  %31 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 2, i32 2
  %32 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %3, i64 0, i32 3
  %33 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 2, i32 3
  %34 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 2, i32 5
  %35 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %3, i64 0, i32 5
  %36 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 2, i32 7
  %37 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %3, i64 0, i32 7
  %38 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 2, i32 8
  %39 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %3, i64 0, i32 8
  %40 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 2, i32 10
  %41 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %3, i64 0, i32 10
  %42 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %8, i32 0
  %43 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %8, i32 1
  %44 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %8, i32 2
  %45 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %8, i32 3
  %46 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %8, i32 5
  %47 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %8, i32 7
  %48 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %8, i32 8
  %49 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %8, i32 10
  %50 = zext i32 %10 to i64
  %51 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 %50, i32 0
  %52 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 %50, i32 1
  %53 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 %50, i32 2
  %54 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 %50, i32 3
  %55 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 %50, i32 5
  %56 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 %50, i32 7
  %57 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 %50, i32 8
  %58 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 %50, i32 10
  %59 = bitcast i64* %32 to <2 x i64>*
  %60 = bitcast i64* %33 to <2 x i64>*
  %61 = bitcast i64* %33 to <2 x i64>*
  %62 = bitcast i64* %45 to <2 x i64>*
  %63 = bitcast i64* %45 to <2 x i64>*
  %64 = bitcast i64* %54 to <2 x i64>*
  %65 = bitcast i64* %54 to <2 x i64>*
  br label %70

66:                                               ; preds = %70, %19
  br i1 %16, label %69, label %67

67:                                               ; preds = %66
  %68 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %15, i64 0, i32 0, i32 0
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %68) #15
  br label %69

69:                                               ; preds = %66, %67
  ret void

70:                                               ; preds = %23, %70
  %71 = phi i64 [ 0, %23 ], [ %151, %70 ]
  %72 = phi i32 [ 0, %23 ], [ %150, %70 ]
  %73 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %24, align 8
  %74 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %73, i64 %71
  %75 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %74, align 8
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %25) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -86, i64 80, i1 false)
  %76 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %75, i64 0, i32 0
  %77 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %76, align 8
  %78 = bitcast %class.VmaBlockMetadata* %77 to void (%class.VmaBlockMetadata*, %struct.VmaStatInfo*)***
  %79 = load void (%class.VmaBlockMetadata*, %struct.VmaStatInfo*)**, void (%class.VmaBlockMetadata*, %struct.VmaStatInfo*)*** %78, align 8
  %80 = getelementptr inbounds void (%class.VmaBlockMetadata*, %struct.VmaStatInfo*)*, void (%class.VmaBlockMetadata*, %struct.VmaStatInfo*)** %79, i64 8
  %81 = load void (%class.VmaBlockMetadata*, %struct.VmaStatInfo*)*, void (%class.VmaBlockMetadata*, %struct.VmaStatInfo*)** %80, align 8
  call void %81(%class.VmaBlockMetadata* %77, %struct.VmaStatInfo* nonnull dereferenceable(80) %3) #15
  %82 = load i32, i32* %26, align 8
  %83 = load i32, i32* %27, align 8
  %84 = add i32 %83, %82
  store i32 %84, i32* %27, align 8
  %85 = load i32, i32* %28, align 4
  %86 = load i32, i32* %29, align 4
  %87 = add i32 %86, %85
  store i32 %87, i32* %29, align 4
  %88 = load i32, i32* %30, align 8
  %89 = load i32, i32* %31, align 8
  %90 = add i32 %89, %88
  store i32 %90, i32* %31, align 8
  %91 = load <2 x i64>, <2 x i64>* %59, align 8
  %92 = load <2 x i64>, <2 x i64>* %60, align 8
  %93 = add <2 x i64> %92, %91
  store <2 x i64> %93, <2 x i64>* %61, align 8
  %94 = load i64, i64* %35, align 8
  %95 = load i64, i64* %34, align 8
  %96 = icmp ult i64 %94, %95
  %97 = select i1 %96, i64 %94, i64 %95
  store i64 %97, i64* %34, align 8
  %98 = load i64, i64* %36, align 8
  %99 = load i64, i64* %37, align 8
  %100 = icmp ult i64 %98, %99
  %101 = select i1 %100, i64 %99, i64 %98
  store i64 %101, i64* %36, align 8
  %102 = load i64, i64* %39, align 8
  %103 = load i64, i64* %38, align 8
  %104 = icmp ult i64 %102, %103
  %105 = select i1 %104, i64 %102, i64 %103
  store i64 %105, i64* %38, align 8
  %106 = load i64, i64* %40, align 8
  %107 = load i64, i64* %41, align 8
  %108 = icmp ult i64 %106, %107
  %109 = select i1 %108, i64 %107, i64 %106
  store i64 %109, i64* %40, align 8
  %110 = load i32, i32* %42, align 8
  %111 = add i32 %110, %82
  store i32 %111, i32* %42, align 8
  %112 = load i32, i32* %43, align 4
  %113 = add i32 %112, %85
  store i32 %113, i32* %43, align 4
  %114 = load i32, i32* %44, align 8
  %115 = add i32 %114, %88
  store i32 %115, i32* %44, align 8
  %116 = load <2 x i64>, <2 x i64>* %62, align 8
  %117 = add <2 x i64> %116, %91
  store <2 x i64> %117, <2 x i64>* %63, align 8
  %118 = load i64, i64* %46, align 8
  %119 = icmp ult i64 %94, %118
  %120 = select i1 %119, i64 %94, i64 %118
  store i64 %120, i64* %46, align 8
  %121 = load i64, i64* %47, align 8
  %122 = icmp ult i64 %121, %99
  %123 = select i1 %122, i64 %99, i64 %121
  store i64 %123, i64* %47, align 8
  %124 = load i64, i64* %48, align 8
  %125 = icmp ult i64 %102, %124
  %126 = select i1 %125, i64 %102, i64 %124
  store i64 %126, i64* %48, align 8
  %127 = load i64, i64* %49, align 8
  %128 = icmp ult i64 %127, %107
  %129 = select i1 %128, i64 %107, i64 %127
  store i64 %129, i64* %49, align 8
  %130 = load i32, i32* %51, align 8
  %131 = add i32 %130, %82
  store i32 %131, i32* %51, align 8
  %132 = load i32, i32* %52, align 4
  %133 = add i32 %132, %85
  store i32 %133, i32* %52, align 4
  %134 = load i32, i32* %53, align 8
  %135 = add i32 %134, %88
  store i32 %135, i32* %53, align 8
  %136 = load <2 x i64>, <2 x i64>* %64, align 8
  %137 = add <2 x i64> %136, %91
  store <2 x i64> %137, <2 x i64>* %65, align 8
  %138 = load i64, i64* %55, align 8
  %139 = icmp ult i64 %94, %138
  %140 = select i1 %139, i64 %94, i64 %138
  store i64 %140, i64* %55, align 8
  %141 = load i64, i64* %56, align 8
  %142 = icmp ult i64 %141, %99
  %143 = select i1 %142, i64 %99, i64 %141
  store i64 %143, i64* %56, align 8
  %144 = load i64, i64* %57, align 8
  %145 = icmp ult i64 %102, %144
  %146 = select i1 %145, i64 %102, i64 %144
  store i64 %146, i64* %57, align 8
  %147 = load i64, i64* %58, align 8
  %148 = icmp ult i64 %147, %107
  %149 = select i1 %148, i64 %107, i64 %147
  store i64 %149, i64* %58, align 8
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %25) #15
  %150 = add i32 %72, 1
  %151 = zext i32 %150 to i64
  %152 = load i64, i64* %20, align 8
  %153 = icmp ugt i64 %152, %151
  br i1 %153, label %70, label %66
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN35VmaDefragmentationAlgorithm_GenericC2EP14VmaAllocator_TP14VmaBlockVectorjb(%class.VmaDefragmentationAlgorithm_Generic*, %struct.VmaAllocator_T*, %struct.VmaBlockVector*, i32, i1 zeroext) unnamed_addr #0 align 2 {
  %6 = alloca %"struct.VmaDefragmentationAlgorithm_Generic::BlockPointerLess", align 1
  %7 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 0, i32 1
  store %struct.VmaAllocator_T* %1, %struct.VmaAllocator_T** %8, align 8
  %9 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 0, i32 2
  store %struct.VmaBlockVector* %2, %struct.VmaBlockVector** %9, align 8
  %10 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 0, i32 3
  store i32 %3, i32* %10, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTV35VmaDefragmentationAlgorithm_Generic, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %11 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 1
  store i32 0, i32* %11, align 4
  %12 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 2
  store i8 0, i8* %12, align 8
  %13 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 3
  store i64 0, i64* %13, align 8
  %14 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 4
  store i32 0, i32* %14, align 8
  %15 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 5
  %16 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 11
  %17 = load i8, i8* %16, align 8, !range !2
  %18 = icmp eq i8 %17, 0
  %19 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13
  %20 = ptrtoint %struct.VkAllocationCallbacks* %19 to i64
  %21 = select i1 %18, i64 0, i64 %20
  %22 = bitcast %class.VmaVector.34* %15 to i64*
  store i64 %21, i64* %22, align 8
  %23 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 5, i32 1
  %24 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*** %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 24, i1 false) #15
  %25 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %2, i64 0, i32 16, i32 2
  %26 = load i64, i64* %25, align 8
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %5
  %29 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 5, i32 2
  br label %38

30:                                               ; preds = %50
  %31 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*** %23, align 8
  %32 = load i64, i64* %29, align 8
  br label %33

33:                                               ; preds = %30, %5
  %34 = phi i64 [ %32, %30 ], [ 0, %5 ]
  %35 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %31, %30 ], [ null, %5 ]
  %36 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %35, i64 %34
  %37 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockPointerLess", %"struct.VmaDefragmentationAlgorithm_Generic::BlockPointerLess"* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %37)
  call void @_ZNSt3__16__sortIRN35VmaDefragmentationAlgorithm_Generic16BlockPointerLessEPPNS1_9BlockInfoEEEvT0_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %35, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %36, %"struct.VmaDefragmentationAlgorithm_Generic::BlockPointerLess"* nonnull dereferenceable(1) %6) #15
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %37)
  ret void

38:                                               ; preds = %81, %28
  %39 = phi %struct.VmaAllocator_T* [ %1, %28 ], [ %82, %81 ]
  %40 = phi i64 [ 0, %28 ], [ %79, %81 ]
  %41 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %39, i64 0, i32 13, i32 1
  %42 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %41, align 8
  %43 = icmp eq i8* (i8*, i64, i64, i32)* %42, null
  br i1 %43, label %48, label %44

44:                                               ; preds = %38
  %45 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %39, i64 0, i32 13, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = tail call i8* %42(i8* %46, i64 56, i64 8, i32 1) #15
  br label %50

48:                                               ; preds = %38
  %49 = tail call noalias i8* @aligned_alloc(i64 8, i64 56) #15
  br label %50

50:                                               ; preds = %44, %48
  %51 = phi i8* [ %47, %44 ], [ %49, %48 ]
  %52 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %8, align 8
  %53 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %52, i64 0, i32 11
  %54 = load i8, i8* %53, align 8, !range !2
  %55 = icmp eq i8 %54, 0
  %56 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %52, i64 0, i32 13
  %57 = bitcast i8* %51 to i64*
  %58 = getelementptr inbounds i8, i8* %51, i64 8
  %59 = bitcast i8* %58 to %class.VmaDeviceMemoryBlock**
  store %class.VmaDeviceMemoryBlock* null, %class.VmaDeviceMemoryBlock** %59, align 8
  %60 = getelementptr inbounds i8, i8* %51, i64 16
  store i8 1, i8* %60, align 8
  %61 = getelementptr inbounds i8, i8* %51, i64 24
  %62 = ptrtoint %struct.VkAllocationCallbacks* %56 to i64
  %63 = select i1 %55, i64 0, i64 %62
  %64 = bitcast i8* %61 to i64*
  store i64 %63, i64* %64, align 8
  %65 = getelementptr inbounds i8, i8* %51, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %65, i8 0, i64 24, i1 false) #15
  %66 = ptrtoint i8* %51 to i64
  store i64 %40, i64* %57, align 8
  %67 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %9, align 8
  %68 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %67, i64 0, i32 16, i32 1
  %69 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %68, align 8
  %70 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %69, i64 %40
  %71 = bitcast %class.VmaDeviceMemoryBlock** %70 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = bitcast i8* %58 to i64*
  store i64 %72, i64* %73, align 8
  %74 = load i64, i64* %29, align 8
  %75 = add i64 %74, 1
  tail call void @_ZN9VmaVectorIPN35VmaDefragmentationAlgorithm_Generic9BlockInfoE15VmaStlAllocatorIS2_EE6resizeEmb(%class.VmaVector.34* %15, i64 %75, i1 zeroext false) #15
  %76 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*** %23, align 8
  %77 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %76, i64 %74
  %78 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %77 to i64*
  store i64 %66, i64* %78, align 8
  %79 = add nuw i64 %40, 1
  %80 = icmp eq i64 %79, %26
  br i1 %80, label %30, label %81

81:                                               ; preds = %50
  %82 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %8, align 8
  br label %38
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN35VmaDefragmentationAlgorithm_GenericD2Ev(%class.VmaDefragmentationAlgorithm_Generic* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTV35VmaDefragmentationAlgorithm_Generic, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 5, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 0, i32 1
  %8 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 5, i32 1
  br label %25

9:                                                ; preds = %57, %1
  %10 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 5, i32 0, i32 0
  %11 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %10, align 8
  %12 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 5, i32 1
  %13 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*** %12 to i8**
  %14 = load i8*, i8** %13, align 8
  %15 = icmp eq %struct.VkAllocationCallbacks* %11, null
  br i1 %15, label %23, label %16

16:                                               ; preds = %9
  %17 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %11, i64 0, i32 3
  %18 = load void (i8*, i8*)*, void (i8*, i8*)** %17, align 8
  %19 = icmp eq void (i8*, i8*)* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %11, i64 0, i32 0
  %22 = load i8*, i8** %21, align 8
  tail call void %18(i8* %22, i8* %14) #15
  br label %24

23:                                               ; preds = %16, %9
  tail call void @free(i8* %14) #15
  br label %24

24:                                               ; preds = %20, %23
  ret void

25:                                               ; preds = %6, %57
  %26 = phi i64 [ %4, %6 ], [ %27, %57 ]
  %27 = add i64 %26, -1
  %28 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %7, align 8
  %29 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*** %8, align 8
  %30 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %29, i64 %27
  %31 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %30, align 8
  %32 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %31, null
  br i1 %32, label %57, label %33

33:                                               ; preds = %25
  %34 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %31, i64 0, i32 3, i32 0, i32 0
  %35 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %34, align 8
  %36 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %31, i64 0, i32 3, i32 1
  %37 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"** %36 to i8**
  %38 = load i8*, i8** %37, align 8
  %39 = icmp eq %struct.VkAllocationCallbacks* %35, null
  br i1 %39, label %47, label %40

40:                                               ; preds = %33
  %41 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %35, i64 0, i32 3
  %42 = load void (i8*, i8*)*, void (i8*, i8*)** %41, align 8
  %43 = icmp eq void (i8*, i8*)* %42, null
  br i1 %43, label %47, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %35, i64 0, i32 0
  %46 = load i8*, i8** %45, align 8
  tail call void %42(i8* %46, i8* %38) #15
  br label %48

47:                                               ; preds = %40, %33
  tail call void @free(i8* %38) #15
  br label %48

48:                                               ; preds = %47, %44
  %49 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %31 to i8*
  %50 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %28, i64 0, i32 13, i32 3
  %51 = load void (i8*, i8*)*, void (i8*, i8*)** %50, align 8
  %52 = icmp eq void (i8*, i8*)* %51, null
  br i1 %52, label %56, label %53

53:                                               ; preds = %48
  %54 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %28, i64 0, i32 13, i32 0
  %55 = load i8*, i8** %54, align 8
  tail call void %51(i8* %55, i8* nonnull %49) #15
  br label %57

56:                                               ; preds = %48
  tail call void @free(i8* %49) #15
  br label %57

57:                                               ; preds = %25, %53, %56
  %58 = icmp eq i64 %27, 0
  br i1 %58, label %9, label %25
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN35VmaDefragmentationAlgorithm_GenericD0Ev(%class.VmaDefragmentationAlgorithm_Generic*) unnamed_addr #0 align 2 {
  tail call void @_ZN35VmaDefragmentationAlgorithm_GenericD2Ev(%class.VmaDefragmentationAlgorithm_Generic* %0) #15
  %2 = bitcast %class.VmaDefragmentationAlgorithm_Generic* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN35VmaDefragmentationAlgorithm_Generic13AddAllocationEP15VmaAllocation_TPj(%class.VmaDefragmentationAlgorithm_Generic* nocapture, %struct.VmaAllocation_T*, i32*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i32, i32* %4 seq_cst, align 4
  %6 = icmp eq i32 %5, -1
  br i1 %6, label %54, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 0
  %9 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %8, align 8
  %10 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 5, i32 1
  %11 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*** %10, align 8
  %12 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 5, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %32, label %15

15:                                               ; preds = %7
  %16 = shl nuw i64 %13, 3
  %17 = ashr exact i64 %16, 3
  br label %18

18:                                               ; preds = %18, %15
  %19 = phi i64 [ 0, %15 ], [ %30, %18 ]
  %20 = phi i64 [ %17, %15 ], [ %29, %18 ]
  %21 = add i64 %20, %19
  %22 = lshr i64 %21, 1
  %23 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %11, i64 %22
  %24 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %23, align 8
  %25 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %24, i64 0, i32 1
  %26 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %25, align 8
  %27 = icmp ult %class.VmaDeviceMemoryBlock* %26, %9
  %28 = add nuw i64 %22, 1
  %29 = select i1 %27, i64 %20, i64 %22
  %30 = select i1 %27, i64 %28, i64 %19
  %31 = icmp ult i64 %30, %29
  br i1 %31, label %18, label %32

32:                                               ; preds = %18, %7
  %33 = phi i64 [ 0, %7 ], [ %30, %18 ]
  %34 = icmp eq i64 %33, %13
  br i1 %34, label %50, label %35

35:                                               ; preds = %32
  %36 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %11, i64 %33
  %37 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %36, align 8
  %38 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %37, i64 0, i32 1
  %39 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %38, align 8
  %40 = icmp eq %class.VmaDeviceMemoryBlock* %39, %9
  br i1 %40, label %41, label %50

41:                                               ; preds = %35
  %42 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %37, i64 0, i32 3
  %43 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %37, i64 0, i32 3, i32 2
  %44 = load i64, i64* %43, align 8
  %45 = add i64 %44, 1
  tail call void @_ZN9VmaVectorIN27VmaDefragmentationAlgorithm14AllocationInfoE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.36* %42, i64 %45, i1 zeroext false) #15
  %46 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %37, i64 0, i32 3, i32 1
  %47 = load %"struct.VmaDefragmentationAlgorithm::AllocationInfo"*, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"** %46, align 8
  %48 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %47, i64 %44, i32 0
  store %struct.VmaAllocation_T* %1, %struct.VmaAllocation_T** %48, align 8
  %49 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %47, i64 %44, i32 1
  store i32* %2, i32** %49, align 8
  br label %50

50:                                               ; preds = %32, %35, %41
  %51 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = add i32 %52, 1
  store i32 %53, i32* %51, align 4
  br label %54

54:                                               ; preds = %3, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN35VmaDefragmentationAlgorithm_Generic15DefragmentRoundER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS1_EEmjb(%class.VmaDefragmentationAlgorithm_Generic* nocapture, %class.VmaVector.28* dereferenceable(32), i64, i32, i1 zeroext) local_unnamed_addr #0 align 2 {
  %6 = alloca %struct.VmaAllocationRequest, align 8
  %7 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 5, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %199, label %10

10:                                               ; preds = %5
  %11 = add i64 %8, -1
  %12 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 5, i32 1
  %13 = bitcast %struct.VmaAllocationRequest* %6 to i8*
  %14 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %6, i64 0, i32 3
  %15 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %14 to i8*
  %16 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 0, i32 3
  %17 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 0, i32 2
  %18 = getelementptr inbounds %struct.VmaAllocationRequest, %struct.VmaAllocationRequest* %6, i64 0, i32 0
  %19 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 4
  %20 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 3
  %21 = getelementptr inbounds %class.VmaVector.28, %class.VmaVector.28* %1, i64 0, i32 2
  %22 = getelementptr inbounds %class.VmaVector.28, %class.VmaVector.28* %1, i64 0, i32 1
  %23 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 0, i32 1
  br label %24

24:                                               ; preds = %196, %10
  %25 = phi i64 [ %11, %10 ], [ %197, %196 ]
  %26 = phi i64 [ -1, %10 ], [ %198, %196 ]
  %27 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*** %12, align 8
  %28 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %27, i64 %25
  %29 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %28, align 8
  %30 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %29, i64 0, i32 3, i32 2
  %31 = load i64, i64* %30, align 8
  %32 = icmp ult i64 %26, %31
  br i1 %32, label %53, label %33

33:                                               ; preds = %24, %43
  %34 = phi i64 [ %49, %43 ], [ %31, %24 ]
  %35 = phi i64 [ %44, %43 ], [ %25, %24 ]
  %36 = icmp eq i64 %34, 0
  br i1 %36, label %37, label %41

37:                                               ; preds = %33
  %38 = icmp eq i64 %35, 0
  br i1 %38, label %199, label %39

39:                                               ; preds = %37
  %40 = add i64 %35, -1
  br label %43

41:                                               ; preds = %33
  %42 = add i64 %34, -1
  br label %43

43:                                               ; preds = %41, %39
  %44 = phi i64 [ %40, %39 ], [ %35, %41 ]
  %45 = phi i64 [ -1, %39 ], [ %42, %41 ]
  %46 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %27, i64 %44
  %47 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %46, align 8
  %48 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %47, i64 0, i32 3, i32 2
  %49 = load i64, i64* %48, align 8
  %50 = icmp ult i64 %45, %49
  br i1 %50, label %51, label %33

51:                                               ; preds = %43
  %52 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %47, i64 0, i32 3, i32 2
  br label %53

53:                                               ; preds = %51, %24
  %54 = phi i64 [ %25, %24 ], [ %44, %51 ]
  %55 = phi i64 [ %26, %24 ], [ %45, %51 ]
  %56 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* [ %29, %24 ], [ %47, %51 ]
  %57 = phi i64* [ %30, %24 ], [ %52, %51 ]
  %58 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %56, i64 0, i32 3
  %59 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %56, i64 0, i32 3, i32 1
  %60 = load %"struct.VmaDefragmentationAlgorithm::AllocationInfo"*, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"** %59, align 8
  %61 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %60, i64 %55
  %62 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %61, i64 0, i32 0
  %63 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %62, align 8
  %64 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %63, i64 0, i32 1
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %63, i64 0, i32 5
  %67 = load i8, i8* %66, align 8
  %68 = icmp eq i8 %67, 1
  br i1 %68, label %69, label %72

69:                                               ; preds = %53
  %70 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %63, i64 0, i32 9, i32 0, i32 1
  %71 = load i64, i64* %70, align 8
  br label %72

72:                                               ; preds = %53, %69
  %73 = phi i64 [ %71, %69 ], [ 0, %53 ]
  %74 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %63, i64 0, i32 0
  %75 = load i64, i64* %74, align 8
  %76 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %63, i64 0, i32 6
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  br label %79

79:                                               ; preds = %185, %72
  %80 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %27, %72 ], [ %186, %185 ]
  %81 = phi i64 [ 0, %72 ], [ %183, %185 ]
  %82 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %80, i64 %81
  %83 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %82, align 8
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %13) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 64, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 16, i1 false) #15
  %84 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %83, i64 0, i32 1
  %85 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %84, align 8
  %86 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %85, i64 0, i32 0
  %87 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %86, align 8
  %88 = load i32, i32* %16, align 8
  %89 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %17, align 8
  %90 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %89, i64 0, i32 8
  %91 = load i32, i32* %90, align 8
  %92 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %89, i64 0, i32 7
  %93 = load i64, i64* %92, align 8
  %94 = bitcast %class.VmaBlockMetadata* %87 to i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)***
  %95 = load i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)**, i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)*** %94, align 8
  %96 = getelementptr inbounds i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)*, i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)** %95, i64 11
  %97 = load i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)*, i1 (%class.VmaBlockMetadata*, i32, i32, i64, i64, i64, i1, i32, i1, i32, %struct.VmaAllocationRequest*)** %96, align 8
  %98 = call zeroext i1 %97(%class.VmaBlockMetadata* %87, i32 %88, i32 %91, i64 %93, i64 %65, i64 %75, i1 zeroext false, i32 %78, i1 zeroext false, i32 262144, %struct.VmaAllocationRequest* nonnull %6) #15
  br i1 %98, label %99, label %182

99:                                               ; preds = %79
  %100 = load i64, i64* %18, align 8
  %101 = icmp ult i64 %81, %54
  %102 = icmp ult i64 %100, %73
  %103 = or i1 %101, %102
  br i1 %103, label %104, label %182

104:                                              ; preds = %99
  %105 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %83, i64 0, i32 1
  %106 = load i32, i32* %19, align 8
  %107 = add i32 %106, 1
  %108 = icmp ugt i32 %107, %3
  br i1 %108, label %187, label %109

109:                                              ; preds = %104
  %110 = load i64, i64* %20, align 8
  %111 = add i64 %110, %65
  %112 = icmp ugt i64 %111, %2
  br i1 %112, label %187, label %113

113:                                              ; preds = %109
  %114 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %56, i64 0, i32 0
  %115 = load i64, i64* %114, align 8
  %116 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %83, i64 0, i32 0
  %117 = load i64, i64* %116, align 8
  %118 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %61 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %56, i64 0, i32 1
  %121 = bitcast %class.VmaDeviceMemoryBlock** %120 to i64*
  %122 = load i64, i64* %121, align 8
  %123 = bitcast %class.VmaDeviceMemoryBlock** %105 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = load i64, i64* %21, align 8
  %126 = add i64 %125, 1
  call void @_ZN9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.28* %1, i64 %126, i1 zeroext false) #15
  %127 = load %struct.VmaDefragmentationMove*, %struct.VmaDefragmentationMove** %22, align 8
  %128 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %127, i64 %125, i32 0
  store i64 %115, i64* %128, align 8
  %129 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %127, i64 %125, i32 1
  store i64 %117, i64* %129, align 8
  %130 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %127, i64 %125, i32 2
  store i64 %73, i64* %130, align 8
  %131 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %127, i64 %125, i32 3
  store i64 %100, i64* %131, align 8
  %132 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %127, i64 %125, i32 4
  store i64 %65, i64* %132, align 8
  %133 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %127, i64 %125, i32 5
  %134 = bitcast %struct.VmaAllocation_T** %133 to i64*
  store i64 %119, i64* %134, align 8
  %135 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %127, i64 %125, i32 6
  %136 = bitcast %class.VmaDeviceMemoryBlock** %135 to i64*
  store i64 %122, i64* %136, align 8
  %137 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %127, i64 %125, i32 7
  %138 = bitcast %class.VmaDeviceMemoryBlock** %137 to i64*
  store i64 %124, i64* %138, align 8
  %139 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %105, align 8
  %140 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %139, i64 0, i32 0
  %141 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %140, align 8
  %142 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %62, align 8
  %143 = bitcast %class.VmaBlockMetadata* %141 to void (%class.VmaBlockMetadata*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)***
  %144 = load void (%class.VmaBlockMetadata*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)**, void (%class.VmaBlockMetadata*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)*** %143, align 8
  %145 = getelementptr inbounds void (%class.VmaBlockMetadata*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)*, void (%class.VmaBlockMetadata*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)** %144, i64 15
  %146 = load void (%class.VmaBlockMetadata*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)*, void (%class.VmaBlockMetadata*, %struct.VmaAllocationRequest*, i32, i64, %struct.VmaAllocation_T*)** %145, align 8
  call void %146(%class.VmaBlockMetadata* %141, %struct.VmaAllocationRequest* nonnull dereferenceable(64) %6, i32 %78, i64 %65, %struct.VmaAllocation_T* %142) #15
  br i1 %4, label %147, label %159

147:                                              ; preds = %113
  %148 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %120, align 8
  %149 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %148, i64 0, i32 0
  %150 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %149, align 8
  %151 = bitcast %class.VmaBlockMetadata* %150 to void (%class.VmaBlockMetadata*, i64)***
  %152 = load void (%class.VmaBlockMetadata*, i64)**, void (%class.VmaBlockMetadata*, i64)*** %151, align 8
  %153 = getelementptr inbounds void (%class.VmaBlockMetadata*, i64)*, void (%class.VmaBlockMetadata*, i64)** %152, i64 17
  %154 = load void (%class.VmaBlockMetadata*, i64)*, void (%class.VmaBlockMetadata*, i64)** %153, align 8
  call void %154(%class.VmaBlockMetadata* %150, i64 %73) #15
  %155 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %62, align 8
  %156 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %23, align 8
  %157 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %105, align 8
  %158 = load i64, i64* %18, align 8
  call void @_ZN15VmaAllocation_T21ChangeBlockAllocationEP14VmaAllocator_TP20VmaDeviceMemoryBlockm(%struct.VmaAllocation_T* %155, %struct.VmaAllocator_T* %156, %class.VmaDeviceMemoryBlock* %157, i64 %158)
  br label %159

159:                                              ; preds = %147, %113
  %160 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %60, i64 %55, i32 1
  %161 = load i32*, i32** %160, align 8
  %162 = icmp eq i32* %161, null
  br i1 %162, label %164, label %163

163:                                              ; preds = %159
  store i32 1, i32* %161, align 4
  br label %164

164:                                              ; preds = %159, %163
  %165 = load i32, i32* %19, align 8
  %166 = add i32 %165, 1
  store i32 %166, i32* %19, align 8
  %167 = load i64, i64* %20, align 8
  %168 = add i64 %167, %65
  store i64 %168, i64* %20, align 8
  %169 = load i64, i64* %57, align 8
  %170 = add i64 %169, -1
  %171 = icmp ugt i64 %170, %55
  br i1 %171, label %172, label %188

172:                                              ; preds = %164
  %173 = load %"struct.VmaDefragmentationAlgorithm::AllocationInfo"*, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"** %59, align 8
  %174 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %173, i64 %55
  %175 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %174 to i8*
  %176 = add nuw i64 %55, 1
  %177 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %173, i64 %176
  %178 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %177 to i8*
  %179 = xor i64 %55, 1152921504606846975
  %180 = add i64 %169, %179
  %181 = shl i64 %180, 4
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %175, i8* align 8 %178, i64 %181, i1 false) #15
  br label %188

182:                                              ; preds = %99, %79
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %13) #15
  %183 = add i64 %81, 1
  %184 = icmp ugt i64 %183, %54
  br i1 %184, label %189, label %185

185:                                              ; preds = %182
  %186 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*** %12, align 8
  br label %79

187:                                              ; preds = %104, %109
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %13) #15
  br label %199

188:                                              ; preds = %172, %164
  call void @_ZN9VmaVectorIN27VmaDefragmentationAlgorithm14AllocationInfoE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.36* %58, i64 %170, i1 zeroext false) #15
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %13) #15
  br label %189

189:                                              ; preds = %182, %188
  %190 = icmp eq i64 %55, 0
  br i1 %190, label %193, label %191

191:                                              ; preds = %189
  %192 = add i64 %55, -1
  br label %196

193:                                              ; preds = %189
  %194 = icmp eq i64 %54, 0
  %195 = add i64 %54, -1
  br i1 %194, label %199, label %196

196:                                              ; preds = %193, %191
  %197 = phi i64 [ %54, %191 ], [ %195, %193 ]
  %198 = phi i64 [ %192, %191 ], [ -1, %193 ]
  br label %24

199:                                              ; preds = %193, %37, %187, %5
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN35VmaDefragmentationAlgorithm_Generic14MoveMakesSenseEmmmm(i64, i64, i64, i64) local_unnamed_addr #10 align 2 {
  %5 = icmp ult i64 %0, %2
  br i1 %5, label %10, label %6

6:                                                ; preds = %4
  %7 = icmp ule i64 %0, %2
  %8 = icmp ult i64 %1, %3
  %9 = and i1 %8, %7
  ret i1 %9

10:                                               ; preds = %4
  ret i1 true
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK35VmaDefragmentationAlgorithm_Generic29CalcBlocksWithNonMovableCountEv(%class.VmaDefragmentationAlgorithm_Generic* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 5, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %31, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 5, i32 1
  %7 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*** %6, align 8
  %8 = add i64 %3, -1
  %9 = and i64 %3, 3
  %10 = icmp ult i64 %8, 3
  br i1 %10, label %13, label %11

11:                                               ; preds = %5
  %12 = sub i64 %3, %9
  br label %33

13:                                               ; preds = %33, %5
  %14 = phi i64 [ undef, %5 ], [ %63, %33 ]
  %15 = phi i64 [ 0, %5 ], [ %64, %33 ]
  %16 = phi i64 [ 0, %5 ], [ %63, %33 ]
  %17 = icmp eq i64 %9, 0
  br i1 %17, label %31, label %18

18:                                               ; preds = %13, %18
  %19 = phi i64 [ %28, %18 ], [ %15, %13 ]
  %20 = phi i64 [ %27, %18 ], [ %16, %13 ]
  %21 = phi i64 [ %29, %18 ], [ %9, %13 ]
  %22 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %7, i64 %19
  %23 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %22, align 8
  %24 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %23, i64 0, i32 2
  %25 = load i8, i8* %24, align 8, !range !2
  %26 = zext i8 %25 to i64
  %27 = add i64 %20, %26
  %28 = add nuw i64 %19, 1
  %29 = add i64 %21, -1
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %31, label %18, !llvm.loop !3

31:                                               ; preds = %13, %18, %1
  %32 = phi i64 [ 0, %1 ], [ %14, %13 ], [ %27, %18 ]
  ret i64 %32

33:                                               ; preds = %33, %11
  %34 = phi i64 [ 0, %11 ], [ %64, %33 ]
  %35 = phi i64 [ 0, %11 ], [ %63, %33 ]
  %36 = phi i64 [ %12, %11 ], [ %65, %33 ]
  %37 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %7, i64 %34
  %38 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %37, align 8
  %39 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %38, i64 0, i32 2
  %40 = load i8, i8* %39, align 8, !range !2
  %41 = zext i8 %40 to i64
  %42 = add i64 %35, %41
  %43 = or i64 %34, 1
  %44 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %7, i64 %43
  %45 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %44, align 8
  %46 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %45, i64 0, i32 2
  %47 = load i8, i8* %46, align 8, !range !2
  %48 = zext i8 %47 to i64
  %49 = add i64 %42, %48
  %50 = or i64 %34, 2
  %51 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %7, i64 %50
  %52 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %51, align 8
  %53 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %52, i64 0, i32 2
  %54 = load i8, i8* %53, align 8, !range !2
  %55 = zext i8 %54 to i64
  %56 = add i64 %49, %55
  %57 = or i64 %34, 3
  %58 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %7, i64 %57
  %59 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %58, align 8
  %60 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %59, i64 0, i32 2
  %61 = load i8, i8* %60, align 8, !range !2
  %62 = zext i8 %61 to i64
  %63 = add i64 %56, %62
  %64 = add nuw i64 %34, 4
  %65 = add i64 %36, -4
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %13, label %33
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN35VmaDefragmentationAlgorithm_Generic10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS1_EEmjj(%class.VmaDefragmentationAlgorithm_Generic* nocapture, %class.VmaVector.28* dereferenceable(32), i64, i32, i32) unnamed_addr #0 align 2 {
  %6 = alloca %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination", align 1
  %7 = alloca %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater", align 1
  %8 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 2
  %9 = load i8, i8* %8, align 8, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %15

11:                                               ; preds = %5
  %12 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %95, label %15

15:                                               ; preds = %5, %11
  %16 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 5, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %17, 0
  %19 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 5, i32 1
  %20 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*** %19, align 8
  br i1 %18, label %25, label %21

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater", %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater"* %7, i64 0, i32 0
  br label %34

23:                                               ; preds = %72
  %24 = load i64, i64* %16, align 8
  br label %25

25:                                               ; preds = %23, %15
  %26 = phi i64 [ 0, %15 ], [ %24, %23 ]
  %27 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %20, %15 ], [ %91, %23 ]
  %28 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %27, i64 %26
  %29 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %29)
  call void @_ZNSt3__16__sortIRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEvT0_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %27, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %28, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* nonnull dereferenceable(1) %6) #15
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %29)
  %30 = and i32 %4, 1
  %31 = icmp eq i32 %30, 0
  %32 = call i32 @_ZN35VmaDefragmentationAlgorithm_Generic15DefragmentRoundER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS1_EEmjb(%class.VmaDefragmentationAlgorithm_Generic* %0, %class.VmaVector.28* dereferenceable(32) %1, i64 %2, i32 %3, i1 zeroext %31)
  %33 = call i32 @_ZN35VmaDefragmentationAlgorithm_Generic15DefragmentRoundER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS1_EEmjb(%class.VmaDefragmentationAlgorithm_Generic* %0, %class.VmaVector.28* dereferenceable(32) %1, i64 %2, i32 %3, i1 zeroext %31)
  br label %95

34:                                               ; preds = %93, %21
  %35 = phi i8 [ %9, %21 ], [ %94, %93 ]
  %36 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %20, %21 ], [ %91, %93 ]
  %37 = phi i64 [ 0, %21 ], [ %90, %93 ]
  %38 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %36, i64 %37
  %39 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %38, align 8
  %40 = icmp eq i8 %35, 0
  br i1 %40, label %72, label %41

41:                                               ; preds = %34
  %42 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %39, i64 0, i32 1
  %43 = bitcast %class.VmaDeviceMemoryBlock** %42 to %class.VmaBlockMetadata_Generic***
  %44 = load %class.VmaBlockMetadata_Generic**, %class.VmaBlockMetadata_Generic*** %43, align 8
  %45 = load %class.VmaBlockMetadata_Generic*, %class.VmaBlockMetadata_Generic** %44, align 8
  %46 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %45, i64 0, i32 3, i32 0, i32 2
  %47 = load %struct.VmaListItem*, %struct.VmaListItem** %46, align 8
  %48 = icmp eq %struct.VmaListItem* %47, null
  br i1 %48, label %72, label %49

49:                                               ; preds = %41
  %50 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %39, i64 0, i32 3
  %51 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %39, i64 0, i32 3, i32 2
  %52 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %39, i64 0, i32 3, i32 1
  br label %53

53:                                               ; preds = %49, %68
  %54 = phi %struct.VmaListItem* [ %47, %49 ], [ %70, %68 ]
  %55 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %54, i64 0, i32 2, i32 3
  %56 = load i32, i32* %55, align 8
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %68, label %58

58:                                               ; preds = %53
  %59 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %54, i64 0, i32 2, i32 2
  %60 = bitcast %struct.VmaAllocation_T** %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = load i64, i64* %51, align 8
  %63 = add i64 %62, 1
  call void @_ZN9VmaVectorIN27VmaDefragmentationAlgorithm14AllocationInfoE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.36* %50, i64 %63, i1 zeroext false) #15
  %64 = load %"struct.VmaDefragmentationAlgorithm::AllocationInfo"*, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"** %52, align 8
  %65 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %64, i64 %62
  %66 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %65 to i64*
  store i64 %61, i64* %66, align 8
  %67 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %64, i64 %62, i32 1
  store i32* null, i32** %67, align 8
  br label %68

68:                                               ; preds = %53, %58
  %69 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %54, i64 0, i32 1
  %70 = load %struct.VmaListItem*, %struct.VmaListItem** %69, align 8
  %71 = icmp eq %struct.VmaListItem* %70, null
  br i1 %71, label %72, label %53

72:                                               ; preds = %68, %41, %34
  %73 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %39, i64 0, i32 1
  %74 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %73, align 8
  %75 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %74, i64 0, i32 0
  %76 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %75, align 8
  %77 = bitcast %class.VmaBlockMetadata* %76 to i64 (%class.VmaBlockMetadata*)***
  %78 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %77, align 8
  %79 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %78, i64 4
  %80 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %79, align 8
  %81 = call i64 %80(%class.VmaBlockMetadata* %76) #15
  %82 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %39, i64 0, i32 3, i32 2
  %83 = load i64, i64* %82, align 8
  %84 = icmp ne i64 %81, %83
  %85 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %39, i64 0, i32 2
  %86 = zext i1 %84 to i8
  store i8 %86, i8* %85, align 8
  %87 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %39, i64 0, i32 3, i32 1
  %88 = load %"struct.VmaDefragmentationAlgorithm::AllocationInfo"*, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"** %87, align 8
  %89 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %88, i64 %83
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %22) #15
  call void @_ZNSt3__16__sortIRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEvT0_S7_T_(%"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %88, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %89, %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater"* nonnull dereferenceable(1) %7) #15
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %22) #15
  %90 = add nuw i64 %37, 1
  %91 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*** %19, align 8
  %92 = icmp eq i64 %90, %17
  br i1 %92, label %23, label %93

93:                                               ; preds = %72
  %94 = load i8, i8* %8, align 8, !range !2
  br label %34

95:                                               ; preds = %25, %11
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN32VmaDefragmentationAlgorithm_FastC2EP14VmaAllocator_TP14VmaBlockVectorjb(%class.VmaDefragmentationAlgorithm_Fast* nocapture, %struct.VmaAllocator_T*, %struct.VmaBlockVector*, i32, i1 zeroext) unnamed_addr #0 align 2 {
  %6 = zext i1 %4 to i8
  %7 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 0, i32 1
  store %struct.VmaAllocator_T* %1, %struct.VmaAllocator_T** %8, align 8
  %9 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 0, i32 2
  store %struct.VmaBlockVector* %2, %struct.VmaBlockVector** %9, align 8
  %10 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 0, i32 3
  store i32 %3, i32* %10, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTV32VmaDefragmentationAlgorithm_Fast, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %11 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 1
  store i8 %6, i8* %11, align 4
  %12 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 2
  store i32 0, i32* %12, align 8
  %13 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 3
  store i8 0, i8* %13, align 4
  %14 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 4
  store i64 0, i64* %14, align 8
  %15 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 5
  store i32 0, i32* %15, align 8
  %16 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 6
  %17 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 11
  %18 = load i8, i8* %17, align 8, !range !2
  %19 = icmp eq i8 %18, 0
  %20 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13
  %21 = ptrtoint %struct.VkAllocationCallbacks* %20 to i64
  %22 = select i1 %19, i64 0, i64 %21
  %23 = bitcast %class.VmaVector.38* %16 to i64*
  store i64 %22, i64* %23, align 8
  %24 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 6, i32 1
  %25 = bitcast %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"** %24 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 24, i1 false) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN32VmaDefragmentationAlgorithm_FastD2Ev(%class.VmaDefragmentationAlgorithm_Fast* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTV32VmaDefragmentationAlgorithm_Fast, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 6, i32 0, i32 0
  %4 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %3, align 8
  %5 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 6, i32 1
  %6 = bitcast %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"** %5 to i8**
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq %struct.VkAllocationCallbacks* %4, null
  br i1 %8, label %16, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %4, i64 0, i32 3
  %11 = load void (i8*, i8*)*, void (i8*, i8*)** %10, align 8
  %12 = icmp eq void (i8*, i8*)* %11, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %4, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  tail call void %11(i8* %15, i8* %7) #15
  br label %17

16:                                               ; preds = %9, %1
  tail call void @free(i8* %7) #15
  br label %17

17:                                               ; preds = %13, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN32VmaDefragmentationAlgorithm_FastD0Ev(%class.VmaDefragmentationAlgorithm_Fast*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTV32VmaDefragmentationAlgorithm_Fast, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 6, i32 0, i32 0
  %4 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %3, align 8
  %5 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 6, i32 1
  %6 = bitcast %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"** %5 to i8**
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq %struct.VkAllocationCallbacks* %4, null
  br i1 %8, label %16, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %4, i64 0, i32 3
  %11 = load void (i8*, i8*)*, void (i8*, i8*)** %10, align 8
  %12 = icmp eq void (i8*, i8*)* %11, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %4, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  tail call void %11(i8* %15, i8* %7) #15
  br label %17

16:                                               ; preds = %9, %1
  tail call void @free(i8* %7) #15
  br label %17

17:                                               ; preds = %13, %16
  %18 = bitcast %class.VmaDefragmentationAlgorithm_Fast* %0 to i8*
  tail call void @_ZdlPv(i8* %18) #17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS1_EEmjj(%class.VmaDefragmentationAlgorithm_Fast*, %class.VmaVector.28* dereferenceable(32), i64, i32, i32) unnamed_addr #0 align 2 {
  %6 = alloca %class.anon, align 8
  %7 = alloca %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", align 8
  %8 = alloca { %struct.VmaAllocation_T*, %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock* }, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 0, i32 2
  %12 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %11, align 8
  %13 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %12, i64 0, i32 16, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %14, 0
  %16 = icmp eq i64 %2, 0
  %17 = or i1 %16, %15
  %18 = icmp eq i32 %3, 0
  %19 = or i1 %18, %17
  br i1 %19, label %773, label %20

20:                                               ; preds = %5
  tail call void @_ZN32VmaDefragmentationAlgorithm_Fast18PreprocessMetadataEv(%class.VmaDefragmentationAlgorithm_Fast* %0)
  %21 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 6
  tail call void @_ZN9VmaVectorIN32VmaDefragmentationAlgorithm_Fast9BlockInfoE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.38* %21, i64 %14, i1 zeroext false)
  %22 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 6, i32 1
  %23 = load %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"** %22, align 8
  %24 = add i64 %14, -1
  %25 = and i64 %14, 3
  %26 = icmp ult i64 %24, 3
  br i1 %26, label %29, label %27

27:                                               ; preds = %20
  %28 = sub i64 %14, %25
  br label %89

29:                                               ; preds = %89, %20
  %30 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ undef, %20 ], [ %104, %89 ]
  %31 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %23, %20 ], [ %104, %89 ]
  %32 = phi i64 [ 0, %20 ], [ %103, %89 ]
  %33 = icmp eq i64 %25, 0
  br i1 %33, label %43, label %34

34:                                               ; preds = %29, %34
  %35 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %40, %34 ], [ %31, %29 ]
  %36 = phi i64 [ %39, %34 ], [ %32, %29 ]
  %37 = phi i64 [ %41, %34 ], [ %25, %29 ]
  %38 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %35, i64 %36, i32 0
  store i64 %36, i64* %38, align 8
  %39 = add nuw i64 %36, 1
  %40 = load %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"** %22, align 8
  %41 = add i64 %37, -1
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %43, label %34, !llvm.loop !5

43:                                               ; preds = %34, %29
  %44 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %30, %29 ], [ %40, %34 ]
  %45 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 6, i32 2
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %44, i64 %46
  %48 = bitcast %class.anon* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48)
  %49 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 0
  store %class.VmaDefragmentationAlgorithm_Fast* %0, %class.VmaDefragmentationAlgorithm_Fast** %49, align 8
  call fastcc void @"_ZNSt3__16__sortIRZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEmjjE3$_0PNS1_9BlockInfoEEEvT0_SC_T_"(%"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %44, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %47, %class.anon* nonnull dereferenceable(8) %6) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48)
  %50 = bitcast %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %50) #15
  %51 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 0, i32 0
  store i64 -1, i64* %51, align 8
  %52 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 0, i32 1
  %53 = bitcast i64* %52 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 16, i1 false) #15
  %54 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 1, i32 0
  store i64 -1, i64* %54, align 8
  %55 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 1, i32 1
  %56 = bitcast i64* %55 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 16, i1 false) #15
  %57 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 2, i32 0
  store i64 -1, i64* %57, align 8
  %58 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 2, i32 1
  %59 = bitcast i64* %58 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 16, i1 false) #15
  %60 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 3, i32 0
  store i64 -1, i64* %60, align 8
  %61 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 3, i32 1
  %62 = bitcast i64* %61 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 16, i1 false) #15
  %63 = load %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"** %22, align 8
  %64 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %63, i64 0, i32 0
  %65 = load i64, i64* %64, align 8
  %66 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %11, align 8
  %67 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %66, i64 0, i32 16, i32 1
  %68 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %67, align 8
  %69 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %68, i64 %65
  %70 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %69, align 8
  %71 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %70, i64 0, i32 0
  %72 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %71, align 8
  %73 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %72, i64 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = bitcast %class.VmaBlockMetadata* %72 to %class.VmaBlockMetadata_Generic*
  %76 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 4
  %77 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 5
  %78 = bitcast { %struct.VmaAllocation_T*, %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock* }* %8 to i8*
  %79 = bitcast i64* %9 to i8*
  %80 = bitcast i64* %10 to i8*
  %81 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 0, i32 2
  %82 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 1, i32 2
  %83 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 2, i32 2
  %84 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 3, i32 2
  %85 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 0, i32 1
  %86 = getelementptr inbounds %class.VmaVector.28, %class.VmaVector.28* %1, i64 0, i32 2
  %87 = getelementptr inbounds %class.VmaVector.28, %class.VmaVector.28* %1, i64 0, i32 1
  %88 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 1
  br label %108

89:                                               ; preds = %89, %27
  %90 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %23, %27 ], [ %104, %89 ]
  %91 = phi i64 [ 0, %27 ], [ %103, %89 ]
  %92 = phi i64 [ %28, %27 ], [ %105, %89 ]
  %93 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %90, i64 %91, i32 0
  store i64 %91, i64* %93, align 8
  %94 = or i64 %91, 1
  %95 = load %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"** %22, align 8
  %96 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %95, i64 %94, i32 0
  store i64 %94, i64* %96, align 8
  %97 = or i64 %91, 2
  %98 = load %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"** %22, align 8
  %99 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %98, i64 %97, i32 0
  store i64 %97, i64* %99, align 8
  %100 = or i64 %91, 3
  %101 = load %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"** %22, align 8
  %102 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %101, i64 %100, i32 0
  store i64 %100, i64* %102, align 8
  %103 = add nuw i64 %91, 4
  %104 = load %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"** %22, align 8
  %105 = add i64 %92, -4
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %29, label %89

107:                                              ; preds = %757, %131, %148
  call void @_ZN9VmaVectorIN32VmaDefragmentationAlgorithm_Fast9BlockInfoE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.38* %21, i64 0, i1 zeroext false) #15
  call void @_ZN32VmaDefragmentationAlgorithm_Fast19PostprocessMetadataEv(%class.VmaDefragmentationAlgorithm_Fast* %0)
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %50) #15
  br label %773

108:                                              ; preds = %766, %43
  %109 = phi %class.VmaDeviceMemoryBlock** [ %68, %43 ], [ %772, %766 ]
  %110 = phi i64 [ %65, %43 ], [ %769, %766 ]
  %111 = phi i64 [ 0, %43 ], [ %758, %766 ]
  %112 = phi i64 [ %65, %43 ], [ %759, %766 ]
  %113 = phi %class.VmaDeviceMemoryBlock* [ %70, %43 ], [ %760, %766 ]
  %114 = phi %class.VmaBlockMetadata_Generic* [ %75, %43 ], [ %761, %766 ]
  %115 = phi i64 [ %74, %43 ], [ %762, %766 ]
  %116 = phi i64 [ 0, %43 ], [ %764, %766 ]
  %117 = phi i64 [ 0, %43 ], [ %763, %766 ]
  %118 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %109, i64 %110
  %119 = bitcast %class.VmaDeviceMemoryBlock** %118 to %class.VmaBlockMetadata_Generic***
  %120 = load %class.VmaBlockMetadata_Generic**, %class.VmaBlockMetadata_Generic*** %119, align 8
  %121 = load %class.VmaBlockMetadata_Generic*, %class.VmaBlockMetadata_Generic** %120, align 8
  %122 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %121, i64 0, i32 3, i32 0, i32 2
  %123 = bitcast %struct.VmaListItem** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %121, i64 0, i32 3, i32 0, i32 3
  %126 = bitcast %struct.VmaListItem** %125 to i64*
  %127 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %121, i64 0, i32 3, i32 0, i32 1, i32 2, i32 2
  %128 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %121, i64 0, i32 3, i32 0, i32 1, i32 2, i32 1
  %129 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %121, i64 0, i32 3, i32 0, i32 4
  %130 = icmp eq i64 %124, 0
  br i1 %130, label %757, label %131

131:                                              ; preds = %108, %748
  %132 = phi i64 [ %749, %748 ], [ %124, %108 ]
  %133 = phi i64 [ %750, %748 ], [ %117, %108 ]
  %134 = phi i64 [ %751, %748 ], [ %115, %108 ]
  %135 = phi %class.VmaBlockMetadata_Generic* [ %752, %748 ], [ %114, %108 ]
  %136 = phi %class.VmaDeviceMemoryBlock* [ %753, %748 ], [ %113, %108 ]
  %137 = phi i64 [ %754, %748 ], [ %112, %108 ]
  %138 = phi i64 [ %755, %748 ], [ %111, %108 ]
  %139 = inttoptr i64 %132 to %struct.VmaListItem*
  %140 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %139, i64 0, i32 2, i32 2
  %141 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %140, align 8
  %142 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %141, i64 0, i32 0
  %143 = load i64, i64* %142, align 8
  %144 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %139, i64 0, i32 2, i32 1
  %145 = load i64, i64* %144, align 8
  %146 = load i32, i32* %77, align 8
  %147 = icmp eq i32 %146, %3
  br i1 %147, label %107, label %148

148:                                              ; preds = %131
  %149 = load i64, i64* %76, align 8
  %150 = add i64 %149, %145
  %151 = icmp ugt i64 %150, %2
  br i1 %151, label %107, label %152

152:                                              ; preds = %148
  %153 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %139, i64 0, i32 2, i32 0
  %154 = load i64, i64* %153, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %78)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %78, i8 0, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %79) #15
  store i64 -6148914691236517206, i64* %9, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %80) #15
  store i64 -6148914691236517206, i64* %10, align 8
  %155 = call zeroext i1 @_ZN32VmaDefragmentationAlgorithm_Fast17FreeSpaceDatabase5FetchEmmRmS1_(%"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* nonnull %7, i64 %143, i64 %145, i64* nonnull dereferenceable(8) %9, i64* nonnull dereferenceable(8) %10)
  br i1 %155, label %156, label %355

156:                                              ; preds = %152
  %157 = load i64, i64* %9, align 8
  %158 = load %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"** %22, align 8
  %159 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %158, i64 %157, i32 0
  %160 = load i64, i64* %159, align 8
  %161 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %11, align 8
  %162 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %161, i64 0, i32 16, i32 1
  %163 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %162, align 8
  %164 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %163, i64 %160
  %165 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %164, align 8
  %166 = bitcast %class.VmaDeviceMemoryBlock* %165 to %class.VmaBlockMetadata_Generic**
  %167 = load %class.VmaBlockMetadata_Generic*, %class.VmaBlockMetadata_Generic** %166, align 8
  %168 = icmp eq i64 %157, %116
  %169 = load i64, i64* %144, align 8
  %170 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %140, align 8
  %171 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %139, i64 0, i32 2, i32 3
  %172 = bitcast i32* %171 to i64*
  %173 = load i64, i64* %172, align 8
  %174 = load i64, i64* %10, align 8
  br i1 %168, label %175, label %265

175:                                              ; preds = %156
  %176 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %170, i64 0, i32 9, i32 0, i32 1
  store i64 %174, i64* %176, align 8
  %177 = load i64, i64* %76, align 8
  %178 = add i64 %177, %145
  store i64 %178, i64* %76, align 8
  %179 = load i32, i32* %77, align 8
  %180 = add i32 %179, 1
  store i32 %180, i32* %77, align 8
  %181 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %139, i64 0, i32 1
  %182 = bitcast %struct.VmaListItem** %181 to i64*
  %183 = load i64, i64* %182, align 8
  %184 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %139, i64 0, i32 0
  %185 = load %struct.VmaListItem*, %struct.VmaListItem** %184, align 8
  %186 = icmp eq %struct.VmaListItem* %185, null
  %187 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %185, i64 0, i32 1
  %188 = bitcast %struct.VmaListItem** %187 to i64*
  %189 = select i1 %186, i64* %123, i64* %188
  store i64 %183, i64* %189, align 8
  %190 = load %struct.VmaListItem*, %struct.VmaListItem** %181, align 8
  %191 = icmp eq %struct.VmaListItem* %190, null
  %192 = inttoptr i64 %132 to i64*
  %193 = load i64, i64* %192, align 8
  %194 = bitcast %struct.VmaListItem* %190 to i64*
  %195 = select i1 %191, i64* %126, i64* %194
  store i64 %193, i64* %195, align 8
  %196 = load i64, i64* %127, align 8
  %197 = icmp eq i64 %196, 0
  br i1 %197, label %223, label %198

198:                                              ; preds = %175
  %199 = load %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"*, %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"** %128, align 8
  %200 = inttoptr i64 %132 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*
  br label %201

201:                                              ; preds = %221, %198
  %202 = phi i64 [ %196, %198 ], [ %203, %221 ]
  %203 = add i64 %202, -1
  %204 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %199, i64 %203, i32 0
  %205 = load %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %204, align 8
  %206 = icmp ugt %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %205, %200
  br i1 %206, label %221, label %207

207:                                              ; preds = %201
  %208 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %199, i64 %203, i32 1
  %209 = load i32, i32* %208, align 8
  %210 = zext i32 %209 to i64
  %211 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %205, i64 %210
  %212 = icmp ugt %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %211, %200
  br i1 %212, label %213, label %221

213:                                              ; preds = %207
  %214 = ptrtoint %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %205 to i64
  %215 = sub i64 %132, %214
  %216 = sdiv exact i64 %215, 48
  %217 = trunc i64 %216 to i32
  %218 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %199, i64 %203, i32 2
  %219 = load i32, i32* %218, align 4
  %220 = inttoptr i64 %132 to i32*
  store i32 %219, i32* %220, align 8
  store i32 %217, i32* %218, align 4
  br label %223

221:                                              ; preds = %207, %201
  %222 = icmp eq i64 %203, 0
  br i1 %222, label %223, label %201

223:                                              ; preds = %221, %175, %213
  %224 = load i64, i64* %129, align 8
  %225 = add i64 %224, -1
  store i64 %225, i64* %129, align 8
  %226 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %167, i64 0, i32 3, i32 0
  %227 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %167, i64 0, i32 3, i32 0, i32 2
  %228 = bitcast %struct.VmaListItem** %227 to i64*
  %229 = load i64, i64* %228, align 8
  %230 = inttoptr i64 %229 to %struct.VmaListItem*
  %231 = icmp eq i64 %229, 0
  br i1 %231, label %246, label %232

232:                                              ; preds = %223, %242
  %233 = phi %struct.VmaListItem* [ %244, %242 ], [ %230, %223 ]
  %234 = phi i64 [ %243, %242 ], [ %229, %223 ]
  %235 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %233, i64 0, i32 2, i32 0
  %236 = load i64, i64* %235, align 8
  %237 = icmp ult i64 %236, %174
  br i1 %237, label %238, label %242

238:                                              ; preds = %232
  %239 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %233, i64 0, i32 1
  %240 = bitcast %struct.VmaListItem** %239 to i64*
  %241 = load i64, i64* %240, align 8
  br label %242

242:                                              ; preds = %238, %232
  %243 = phi i64 [ %241, %238 ], [ %234, %232 ]
  %244 = inttoptr i64 %243 to %struct.VmaListItem*
  %245 = icmp eq i64 %243, 0
  br i1 %245, label %246, label %232

246:                                              ; preds = %242, %223
  %247 = phi %struct.VmaListItem* [ %230, %223 ], [ null, %242 ]
  %248 = call %struct.VmaListItem* @_ZN10VmaRawListI16VmaSuballocationE12InsertBeforeEP11VmaListItemIS0_E(%class.VmaRawList* %226, %struct.VmaListItem* %247) #15
  %249 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %248, i64 0, i32 2, i32 0
  store i64 %174, i64* %249, align 8
  %250 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %248, i64 0, i32 2, i32 1
  store i64 %169, i64* %250, align 8
  %251 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %248, i64 0, i32 2, i32 2
  store %struct.VmaAllocation_T* %170, %struct.VmaAllocation_T** %251, align 8
  %252 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %248, i64 0, i32 2, i32 3
  %253 = bitcast i32* %252 to i64*
  store i64 %173, i64* %253, align 8
  %254 = load i64, i64* %10, align 8
  %255 = load i64, i64* %86, align 8
  %256 = add i64 %255, 1
  call void @_ZN9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.28* %1, i64 %256, i1 zeroext false) #15
  %257 = load %struct.VmaDefragmentationMove*, %struct.VmaDefragmentationMove** %87, align 8
  %258 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %257, i64 %255, i32 0
  store i64 %110, i64* %258, align 8
  %259 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %257, i64 %255, i32 1
  store i64 %160, i64* %259, align 8
  %260 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %257, i64 %255, i32 2
  store i64 %154, i64* %260, align 8
  %261 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %257, i64 %255, i32 3
  store i64 %254, i64* %261, align 8
  %262 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %257, i64 %255, i32 4
  store i64 %145, i64* %262, align 8
  %263 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %257, i64 %255, i32 5
  %264 = bitcast %struct.VmaAllocation_T** %263 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %264, i8* nonnull align 8 %78, i64 24, i1 false)
  br label %748

265:                                              ; preds = %156
  %266 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %85, align 8
  call void @_ZN15VmaAllocation_T21ChangeBlockAllocationEP14VmaAllocator_TP20VmaDeviceMemoryBlockm(%struct.VmaAllocation_T* %170, %struct.VmaAllocator_T* %266, %class.VmaDeviceMemoryBlock* %165, i64 %174)
  %267 = load i64, i64* %76, align 8
  %268 = add i64 %267, %145
  store i64 %268, i64* %76, align 8
  %269 = load i32, i32* %77, align 8
  %270 = add i32 %269, 1
  store i32 %270, i32* %77, align 8
  %271 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %139, i64 0, i32 1
  %272 = bitcast %struct.VmaListItem** %271 to i64*
  %273 = load i64, i64* %272, align 8
  %274 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %139, i64 0, i32 0
  %275 = load %struct.VmaListItem*, %struct.VmaListItem** %274, align 8
  %276 = icmp eq %struct.VmaListItem* %275, null
  %277 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %275, i64 0, i32 1
  %278 = bitcast %struct.VmaListItem** %277 to i64*
  %279 = select i1 %276, i64* %123, i64* %278
  store i64 %273, i64* %279, align 8
  %280 = load %struct.VmaListItem*, %struct.VmaListItem** %271, align 8
  %281 = icmp eq %struct.VmaListItem* %280, null
  %282 = inttoptr i64 %132 to i64*
  %283 = load i64, i64* %282, align 8
  %284 = bitcast %struct.VmaListItem* %280 to i64*
  %285 = select i1 %281, i64* %126, i64* %284
  store i64 %283, i64* %285, align 8
  %286 = load i64, i64* %127, align 8
  %287 = icmp eq i64 %286, 0
  br i1 %287, label %313, label %288

288:                                              ; preds = %265
  %289 = load %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"*, %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"** %128, align 8
  %290 = inttoptr i64 %132 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*
  br label %291

291:                                              ; preds = %311, %288
  %292 = phi i64 [ %286, %288 ], [ %293, %311 ]
  %293 = add i64 %292, -1
  %294 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %289, i64 %293, i32 0
  %295 = load %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %294, align 8
  %296 = icmp ugt %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %295, %290
  br i1 %296, label %311, label %297

297:                                              ; preds = %291
  %298 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %289, i64 %293, i32 1
  %299 = load i32, i32* %298, align 8
  %300 = zext i32 %299 to i64
  %301 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %295, i64 %300
  %302 = icmp ugt %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %301, %290
  br i1 %302, label %303, label %311

303:                                              ; preds = %297
  %304 = ptrtoint %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %295 to i64
  %305 = sub i64 %132, %304
  %306 = sdiv exact i64 %305, 48
  %307 = trunc i64 %306 to i32
  %308 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %289, i64 %293, i32 2
  %309 = load i32, i32* %308, align 4
  %310 = inttoptr i64 %132 to i32*
  store i32 %309, i32* %310, align 8
  store i32 %307, i32* %308, align 4
  br label %313

311:                                              ; preds = %297, %291
  %312 = icmp eq i64 %293, 0
  br i1 %312, label %313, label %291

313:                                              ; preds = %311, %265, %303
  %314 = load i64, i64* %129, align 8
  %315 = add i64 %314, -1
  store i64 %315, i64* %129, align 8
  %316 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %167, i64 0, i32 3, i32 0
  %317 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %167, i64 0, i32 3, i32 0, i32 2
  %318 = bitcast %struct.VmaListItem** %317 to i64*
  %319 = load i64, i64* %318, align 8
  %320 = inttoptr i64 %319 to %struct.VmaListItem*
  %321 = icmp eq i64 %319, 0
  br i1 %321, label %336, label %322

322:                                              ; preds = %313, %332
  %323 = phi %struct.VmaListItem* [ %334, %332 ], [ %320, %313 ]
  %324 = phi i64 [ %333, %332 ], [ %319, %313 ]
  %325 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %323, i64 0, i32 2, i32 0
  %326 = load i64, i64* %325, align 8
  %327 = icmp ult i64 %326, %174
  br i1 %327, label %328, label %332

328:                                              ; preds = %322
  %329 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %323, i64 0, i32 1
  %330 = bitcast %struct.VmaListItem** %329 to i64*
  %331 = load i64, i64* %330, align 8
  br label %332

332:                                              ; preds = %328, %322
  %333 = phi i64 [ %331, %328 ], [ %324, %322 ]
  %334 = inttoptr i64 %333 to %struct.VmaListItem*
  %335 = icmp eq i64 %333, 0
  br i1 %335, label %336, label %322

336:                                              ; preds = %332, %313
  %337 = phi %struct.VmaListItem* [ %320, %313 ], [ null, %332 ]
  %338 = call %struct.VmaListItem* @_ZN10VmaRawListI16VmaSuballocationE12InsertBeforeEP11VmaListItemIS0_E(%class.VmaRawList* %316, %struct.VmaListItem* %337) #15
  %339 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %338, i64 0, i32 2, i32 0
  store i64 %174, i64* %339, align 8
  %340 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %338, i64 0, i32 2, i32 1
  store i64 %169, i64* %340, align 8
  %341 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %338, i64 0, i32 2, i32 2
  store %struct.VmaAllocation_T* %170, %struct.VmaAllocation_T** %341, align 8
  %342 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %338, i64 0, i32 2, i32 3
  %343 = bitcast i32* %342 to i64*
  store i64 %173, i64* %343, align 8
  %344 = load i64, i64* %10, align 8
  %345 = load i64, i64* %86, align 8
  %346 = add i64 %345, 1
  call void @_ZN9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.28* %1, i64 %346, i1 zeroext false) #15
  %347 = load %struct.VmaDefragmentationMove*, %struct.VmaDefragmentationMove** %87, align 8
  %348 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %347, i64 %345, i32 0
  store i64 %110, i64* %348, align 8
  %349 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %347, i64 %345, i32 1
  store i64 %160, i64* %349, align 8
  %350 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %347, i64 %345, i32 2
  store i64 %154, i64* %350, align 8
  %351 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %347, i64 %345, i32 3
  store i64 %344, i64* %351, align 8
  %352 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %347, i64 %345, i32 4
  store i64 %145, i64* %352, align 8
  %353 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %347, i64 %345, i32 5
  %354 = bitcast %struct.VmaAllocation_T** %353 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %354, i8* nonnull align 8 %78, i64 24, i1 false)
  br label %748

355:                                              ; preds = %152
  %356 = add i64 %133, -1
  %357 = add i64 %356, %143
  %358 = urem i64 %357, %143
  %359 = sub i64 %357, %358
  store i64 %359, i64* %10, align 8
  %360 = icmp ult i64 %138, %116
  %361 = add i64 %359, %145
  %362 = icmp ugt i64 %361, %134
  %363 = and i1 %362, %360
  br i1 %363, label %364, label %516

364:                                              ; preds = %355
  %365 = sub i64 %134, %133
  %366 = icmp ult i64 %365, 16
  br i1 %366, label %419, label %367

367:                                              ; preds = %364
  %368 = load i64, i64* %51, align 8
  %369 = icmp eq i64 %368, -1
  br i1 %369, label %414, label %370

370:                                              ; preds = %367
  %371 = load i64, i64* %81, align 8
  %372 = icmp uge i64 %371, %365
  %373 = sext i1 %372 to i64
  %374 = load i64, i64* %54, align 8
  %375 = icmp eq i64 %374, -1
  br i1 %375, label %414, label %376

376:                                              ; preds = %370
  %377 = load i64, i64* %82, align 8
  %378 = icmp ult i64 %377, %365
  br i1 %378, label %379, label %385

379:                                              ; preds = %376
  br i1 %372, label %384, label %380

380:                                              ; preds = %379
  %381 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 %373, i32 2
  %382 = load i64, i64* %381, align 8
  %383 = icmp ugt i64 %382, %377
  br i1 %383, label %384, label %385

384:                                              ; preds = %380, %379
  br label %385

385:                                              ; preds = %384, %380, %376
  %386 = phi i64 [ 1, %384 ], [ 0, %380 ], [ %373, %376 ]
  %387 = load i64, i64* %57, align 8
  %388 = icmp eq i64 %387, -1
  br i1 %388, label %414, label %389

389:                                              ; preds = %385
  %390 = load i64, i64* %83, align 8
  %391 = icmp ult i64 %390, %365
  br i1 %391, label %392, label %399

392:                                              ; preds = %389
  %393 = icmp eq i64 %386, -1
  br i1 %393, label %398, label %394

394:                                              ; preds = %392
  %395 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 %386, i32 2
  %396 = load i64, i64* %395, align 8
  %397 = icmp ugt i64 %396, %390
  br i1 %397, label %398, label %399

398:                                              ; preds = %394, %392
  br label %399

399:                                              ; preds = %398, %394, %389
  %400 = phi i64 [ 2, %398 ], [ %386, %394 ], [ %386, %389 ]
  %401 = load i64, i64* %60, align 8
  %402 = icmp eq i64 %401, -1
  br i1 %402, label %414, label %403

403:                                              ; preds = %399
  %404 = load i64, i64* %84, align 8
  %405 = icmp ult i64 %404, %365
  %406 = icmp eq i64 %400, -1
  br i1 %405, label %408, label %407

407:                                              ; preds = %403
  br i1 %406, label %419, label %414

408:                                              ; preds = %403
  br i1 %406, label %413, label %409

409:                                              ; preds = %408
  %410 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 %400, i32 2
  %411 = load i64, i64* %410, align 8
  %412 = icmp ugt i64 %411, %404
  br i1 %412, label %413, label %414

413:                                              ; preds = %409, %408
  br label %414

414:                                              ; preds = %413, %409, %407, %399, %385, %370, %367
  %415 = phi i64 [ %400, %407 ], [ 0, %367 ], [ 1, %370 ], [ 2, %385 ], [ 3, %399 ], [ %400, %409 ], [ 3, %413 ]
  %416 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 %415, i32 0
  store i64 %138, i64* %416, align 8
  %417 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 %415, i32 1
  store i64 %133, i64* %417, align 8
  %418 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 %415, i32 2
  store i64 %365, i64* %418, align 8
  br label %419

419:                                              ; preds = %414, %407, %364
  %420 = add nuw i64 %138, 1
  %421 = load %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"** %22, align 8
  %422 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %421, i64 %420, i32 0
  %423 = load i64, i64* %422, align 8
  %424 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %11, align 8
  %425 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %424, i64 0, i32 16, i32 1
  %426 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %425, align 8
  %427 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %426, i64 %423
  %428 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %427, align 8
  %429 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %428, i64 0, i32 0
  %430 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %429, align 8
  %431 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %430, i64 0, i32 1
  %432 = load i64, i64* %431, align 8
  store i64 0, i64* %10, align 8
  %433 = icmp ult i64 %420, %116
  %434 = icmp ugt i64 %145, %432
  %435 = and i1 %434, %433
  br i1 %435, label %436, label %509

436:                                              ; preds = %419, %492
  %437 = phi i64 [ %493, %492 ], [ %420, %419 ]
  %438 = phi i64 [ %505, %492 ], [ %432, %419 ]
  %439 = icmp ult i64 %438, 16
  br i1 %439, label %492, label %440

440:                                              ; preds = %436
  %441 = load i64, i64* %51, align 8
  %442 = icmp eq i64 %441, -1
  br i1 %442, label %449, label %443

443:                                              ; preds = %440
  %444 = load i64, i64* %81, align 8
  %445 = icmp uge i64 %444, %438
  %446 = sext i1 %445 to i64
  %447 = load i64, i64* %54, align 8
  %448 = icmp eq i64 %447, -1
  br i1 %448, label %449, label %454

449:                                              ; preds = %491, %490, %486, %477, %463, %443, %440
  %450 = phi i64 [ %478, %491 ], [ 0, %440 ], [ 1, %443 ], [ 2, %463 ], [ 3, %477 ], [ %478, %486 ], [ 3, %490 ]
  %451 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 %450, i32 0
  store i64 %437, i64* %451, align 8
  %452 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 %450, i32 1
  store i64 0, i64* %452, align 8
  %453 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 %450, i32 2
  store i64 %438, i64* %453, align 8
  br label %492

454:                                              ; preds = %443
  %455 = load i64, i64* %82, align 8
  %456 = icmp ult i64 %455, %438
  br i1 %456, label %457, label %463

457:                                              ; preds = %454
  br i1 %445, label %462, label %458

458:                                              ; preds = %457
  %459 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 %446, i32 2
  %460 = load i64, i64* %459, align 8
  %461 = icmp ugt i64 %460, %455
  br i1 %461, label %462, label %463

462:                                              ; preds = %458, %457
  br label %463

463:                                              ; preds = %462, %458, %454
  %464 = phi i64 [ 1, %462 ], [ 0, %458 ], [ %446, %454 ]
  %465 = load i64, i64* %57, align 8
  %466 = icmp eq i64 %465, -1
  br i1 %466, label %449, label %467

467:                                              ; preds = %463
  %468 = load i64, i64* %83, align 8
  %469 = icmp ult i64 %468, %438
  br i1 %469, label %470, label %477

470:                                              ; preds = %467
  %471 = icmp eq i64 %464, -1
  br i1 %471, label %476, label %472

472:                                              ; preds = %470
  %473 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 %464, i32 2
  %474 = load i64, i64* %473, align 8
  %475 = icmp ugt i64 %474, %468
  br i1 %475, label %476, label %477

476:                                              ; preds = %472, %470
  br label %477

477:                                              ; preds = %476, %472, %467
  %478 = phi i64 [ 2, %476 ], [ %464, %472 ], [ %464, %467 ]
  %479 = load i64, i64* %60, align 8
  %480 = icmp eq i64 %479, -1
  br i1 %480, label %449, label %481

481:                                              ; preds = %477
  %482 = load i64, i64* %84, align 8
  %483 = icmp ult i64 %482, %438
  %484 = icmp eq i64 %478, -1
  br i1 %483, label %485, label %491

485:                                              ; preds = %481
  br i1 %484, label %490, label %486

486:                                              ; preds = %485
  %487 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 %478, i32 2
  %488 = load i64, i64* %487, align 8
  %489 = icmp ugt i64 %488, %482
  br i1 %489, label %490, label %449

490:                                              ; preds = %486, %485
  br label %449

491:                                              ; preds = %481
  br i1 %484, label %492, label %449

492:                                              ; preds = %436, %449, %491
  %493 = add nuw i64 %437, 1
  %494 = load %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"** %22, align 8
  %495 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %494, i64 %493, i32 0
  %496 = load i64, i64* %495, align 8
  %497 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %11, align 8
  %498 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %497, i64 0, i32 16, i32 1
  %499 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %498, align 8
  %500 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %499, i64 %496
  %501 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %500, align 8
  %502 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %501, i64 0, i32 0
  %503 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %502, align 8
  %504 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %503, i64 0, i32 1
  %505 = load i64, i64* %504, align 8
  store i64 0, i64* %10, align 8
  %506 = icmp ult i64 %493, %116
  %507 = icmp ugt i64 %145, %505
  %508 = and i1 %507, %506
  br i1 %508, label %436, label %509, !llvm.loop !6

509:                                              ; preds = %492, %419
  %510 = phi i64 [ %420, %419 ], [ %493, %492 ]
  %511 = phi i64 [ %423, %419 ], [ %496, %492 ]
  %512 = phi %class.VmaDeviceMemoryBlock* [ %428, %419 ], [ %501, %492 ]
  %513 = phi %class.VmaBlockMetadata* [ %430, %419 ], [ %503, %492 ]
  %514 = phi i64 [ %432, %419 ], [ %505, %492 ]
  %515 = bitcast %class.VmaBlockMetadata* %513 to %class.VmaBlockMetadata_Generic*
  br label %516

516:                                              ; preds = %509, %355
  %517 = phi i64 [ 0, %509 ], [ %359, %355 ]
  %518 = phi i64 [ 0, %509 ], [ %133, %355 ]
  %519 = phi i64 [ %514, %509 ], [ %134, %355 ]
  %520 = phi %class.VmaBlockMetadata_Generic* [ %515, %509 ], [ %135, %355 ]
  %521 = phi %class.VmaDeviceMemoryBlock* [ %512, %509 ], [ %136, %355 ]
  %522 = phi i64 [ %511, %509 ], [ %137, %355 ]
  %523 = phi i64 [ %510, %509 ], [ %138, %355 ]
  %524 = icmp eq i64 %523, %116
  br i1 %524, label %525, label %617

525:                                              ; preds = %516
  %526 = add i64 %517, %145
  %527 = icmp ugt i64 %526, %154
  br i1 %527, label %528, label %597

528:                                              ; preds = %525
  %529 = load i8, i8* %88, align 4, !range !2
  %530 = icmp ne i8 %529, 0
  %531 = icmp ugt i64 %154, %517
  %532 = and i1 %531, %530
  br i1 %532, label %533, label %537

533:                                              ; preds = %528
  %534 = sub i64 %154, %517
  %535 = shl i64 %534, 6
  %536 = icmp ult i64 %535, %145
  br i1 %536, label %537, label %597

537:                                              ; preds = %528, %533
  %538 = sub i64 %154, %518
  %539 = icmp ult i64 %538, 16
  br i1 %539, label %592, label %540

540:                                              ; preds = %537
  %541 = load i64, i64* %51, align 8
  %542 = icmp eq i64 %541, -1
  br i1 %542, label %549, label %543

543:                                              ; preds = %540
  %544 = load i64, i64* %81, align 8
  %545 = icmp uge i64 %544, %538
  %546 = sext i1 %545 to i64
  %547 = load i64, i64* %54, align 8
  %548 = icmp eq i64 %547, -1
  br i1 %548, label %549, label %554

549:                                              ; preds = %591, %590, %586, %577, %563, %543, %540
  %550 = phi i64 [ %578, %591 ], [ 0, %540 ], [ 1, %543 ], [ 2, %563 ], [ 3, %577 ], [ %578, %586 ], [ 3, %590 ]
  %551 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 %550, i32 0
  store i64 %116, i64* %551, align 8
  %552 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 %550, i32 1
  store i64 %518, i64* %552, align 8
  %553 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 %550, i32 2
  store i64 %538, i64* %553, align 8
  br label %592

554:                                              ; preds = %543
  %555 = load i64, i64* %82, align 8
  %556 = icmp ult i64 %555, %538
  br i1 %556, label %557, label %563

557:                                              ; preds = %554
  br i1 %545, label %562, label %558

558:                                              ; preds = %557
  %559 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 %546, i32 2
  %560 = load i64, i64* %559, align 8
  %561 = icmp ugt i64 %560, %555
  br i1 %561, label %562, label %563

562:                                              ; preds = %558, %557
  br label %563

563:                                              ; preds = %562, %558, %554
  %564 = phi i64 [ 1, %562 ], [ 0, %558 ], [ %546, %554 ]
  %565 = load i64, i64* %57, align 8
  %566 = icmp eq i64 %565, -1
  br i1 %566, label %549, label %567

567:                                              ; preds = %563
  %568 = load i64, i64* %83, align 8
  %569 = icmp ult i64 %568, %538
  br i1 %569, label %570, label %577

570:                                              ; preds = %567
  %571 = icmp eq i64 %564, -1
  br i1 %571, label %576, label %572

572:                                              ; preds = %570
  %573 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 %564, i32 2
  %574 = load i64, i64* %573, align 8
  %575 = icmp ugt i64 %574, %568
  br i1 %575, label %576, label %577

576:                                              ; preds = %572, %570
  br label %577

577:                                              ; preds = %576, %572, %567
  %578 = phi i64 [ 2, %576 ], [ %564, %572 ], [ %564, %567 ]
  %579 = load i64, i64* %60, align 8
  %580 = icmp eq i64 %579, -1
  br i1 %580, label %549, label %581

581:                                              ; preds = %577
  %582 = load i64, i64* %84, align 8
  %583 = icmp ult i64 %582, %538
  %584 = icmp eq i64 %578, -1
  br i1 %583, label %585, label %591

585:                                              ; preds = %581
  br i1 %584, label %590, label %586

586:                                              ; preds = %585
  %587 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %7, i64 0, i32 0, i64 %578, i32 2
  %588 = load i64, i64* %587, align 8
  %589 = icmp ugt i64 %588, %582
  br i1 %589, label %590, label %549

590:                                              ; preds = %586, %585
  br label %549

591:                                              ; preds = %581
  br i1 %584, label %592, label %549

592:                                              ; preds = %537, %549, %591
  %593 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %139, i64 0, i32 1
  %594 = bitcast %struct.VmaListItem** %593 to i64*
  %595 = load i64, i64* %594, align 8
  %596 = add i64 %154, %145
  br label %748

597:                                              ; preds = %525, %533
  store i64 %517, i64* %153, align 8
  %598 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %140, align 8
  %599 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %598, i64 0, i32 9, i32 0, i32 1
  store i64 %517, i64* %599, align 8
  %600 = load i64, i64* %76, align 8
  %601 = add i64 %600, %145
  store i64 %601, i64* %76, align 8
  %602 = load i32, i32* %77, align 8
  %603 = add i32 %602, 1
  store i32 %603, i32* %77, align 8
  %604 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %139, i64 0, i32 1
  %605 = bitcast %struct.VmaListItem** %604 to i64*
  %606 = load i64, i64* %605, align 8
  %607 = load i64, i64* %86, align 8
  %608 = add i64 %607, 1
  call void @_ZN9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.28* %1, i64 %608, i1 zeroext false) #15
  %609 = load %struct.VmaDefragmentationMove*, %struct.VmaDefragmentationMove** %87, align 8
  %610 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %609, i64 %607, i32 0
  store i64 %110, i64* %610, align 8
  %611 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %609, i64 %607, i32 1
  store i64 %522, i64* %611, align 8
  %612 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %609, i64 %607, i32 2
  store i64 %154, i64* %612, align 8
  %613 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %609, i64 %607, i32 3
  store i64 %517, i64* %613, align 8
  %614 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %609, i64 %607, i32 4
  store i64 %145, i64* %614, align 8
  %615 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %609, i64 %607, i32 5
  %616 = bitcast %struct.VmaAllocation_T** %615 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %616, i8* nonnull align 8 %78, i64 24, i1 false)
  br label %748

617:                                              ; preds = %516
  %618 = load i64, i64* %144, align 8
  %619 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %140, align 8
  %620 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %139, i64 0, i32 2, i32 3
  %621 = bitcast i32* %620 to i64*
  %622 = load i64, i64* %621, align 8
  %623 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %85, align 8
  call void @_ZN15VmaAllocation_T21ChangeBlockAllocationEP14VmaAllocator_TP20VmaDeviceMemoryBlockm(%struct.VmaAllocation_T* %619, %struct.VmaAllocator_T* %623, %class.VmaDeviceMemoryBlock* %521, i64 %517)
  %624 = load i64, i64* %10, align 8
  %625 = add i64 %624, %145
  %626 = load i64, i64* %76, align 8
  %627 = add i64 %626, %145
  store i64 %627, i64* %76, align 8
  %628 = load i32, i32* %77, align 8
  %629 = add i32 %628, 1
  store i32 %629, i32* %77, align 8
  %630 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %139, i64 0, i32 1
  %631 = bitcast %struct.VmaListItem** %630 to i64*
  %632 = load i64, i64* %631, align 8
  %633 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %139, i64 0, i32 0
  %634 = load %struct.VmaListItem*, %struct.VmaListItem** %633, align 8
  %635 = icmp eq %struct.VmaListItem* %634, null
  %636 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %634, i64 0, i32 1
  %637 = bitcast %struct.VmaListItem** %636 to i64*
  %638 = select i1 %635, i64* %123, i64* %637
  store i64 %632, i64* %638, align 8
  %639 = load %struct.VmaListItem*, %struct.VmaListItem** %630, align 8
  %640 = icmp eq %struct.VmaListItem* %639, null
  %641 = inttoptr i64 %132 to i64*
  %642 = load i64, i64* %641, align 8
  %643 = bitcast %struct.VmaListItem* %639 to i64*
  %644 = select i1 %640, i64* %126, i64* %643
  store i64 %642, i64* %644, align 8
  %645 = load i64, i64* %127, align 8
  %646 = icmp eq i64 %645, 0
  br i1 %646, label %672, label %647

647:                                              ; preds = %617
  %648 = load %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"*, %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"** %128, align 8
  %649 = inttoptr i64 %132 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*
  br label %650

650:                                              ; preds = %670, %647
  %651 = phi i64 [ %645, %647 ], [ %652, %670 ]
  %652 = add i64 %651, -1
  %653 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %648, i64 %652, i32 0
  %654 = load %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %653, align 8
  %655 = icmp ugt %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %654, %649
  br i1 %655, label %670, label %656

656:                                              ; preds = %650
  %657 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %648, i64 %652, i32 1
  %658 = load i32, i32* %657, align 8
  %659 = zext i32 %658 to i64
  %660 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %654, i64 %659
  %661 = icmp ugt %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %660, %649
  br i1 %661, label %662, label %670

662:                                              ; preds = %656
  %663 = ptrtoint %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %654 to i64
  %664 = sub i64 %132, %663
  %665 = sdiv exact i64 %664, 48
  %666 = trunc i64 %665 to i32
  %667 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %648, i64 %652, i32 2
  %668 = load i32, i32* %667, align 4
  %669 = inttoptr i64 %132 to i32*
  store i32 %668, i32* %669, align 8
  store i32 %666, i32* %667, align 4
  br label %672

670:                                              ; preds = %656, %650
  %671 = icmp eq i64 %652, 0
  br i1 %671, label %672, label %650

672:                                              ; preds = %670, %617, %662
  %673 = load i64, i64* %129, align 8
  %674 = add i64 %673, -1
  store i64 %674, i64* %129, align 8
  %675 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %520, i64 0, i32 3, i32 0, i32 1
  %676 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %520, i64 0, i32 3, i32 0, i32 1, i32 2, i32 2
  %677 = load i64, i64* %676, align 8
  %678 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %520, i64 0, i32 3, i32 0, i32 1, i32 2, i32 1
  br label %679

679:                                              ; preds = %683, %672
  %680 = phi i64 [ %677, %672 ], [ %681, %683 ]
  %681 = add i64 %680, -1
  %682 = icmp eq i64 %680, 0
  br i1 %682, label %695, label %683

683:                                              ; preds = %679
  %684 = load %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"*, %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"** %678, align 8
  %685 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %684, i64 %681, i32 2
  %686 = load i32, i32* %685, align 4
  %687 = icmp eq i32 %686, -1
  br i1 %687, label %679, label %688

688:                                              ; preds = %683
  %689 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %684, i64 %681, i32 0
  %690 = load %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %689, align 8
  %691 = zext i32 %686 to i64
  %692 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %690, i64 %691
  %693 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %692, i64 0, i32 0
  %694 = load i32, i32* %693, align 8
  store i32 %694, i32* %685, align 4
  br label %702

695:                                              ; preds = %679
  %696 = call dereferenceable(16) %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* @_ZN16VmaPoolAllocatorI11VmaListItemI16VmaSuballocationEE14CreateNewBlockEv(%class.VmaPoolAllocator.15* %675) #15
  %697 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %696, i64 0, i32 0
  %698 = load %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %697, align 8
  %699 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %698, i64 0, i32 0
  %700 = load i32, i32* %699, align 8
  %701 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %696, i64 0, i32 2
  store i32 %700, i32* %701, align 4
  br label %702

702:                                              ; preds = %695, %688
  %703 = phi %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* [ %698, %695 ], [ %692, %688 ]
  %704 = bitcast %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %703 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %704, i8 0, i64 48, i1 false) #15
  %705 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %703, i64 0, i32 1, i64 4
  %706 = bitcast i8* %705 to %struct.VmaListItem**
  store %struct.VmaListItem* null, %struct.VmaListItem** %706, align 8
  %707 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %520, i64 0, i32 3, i32 0, i32 4
  %708 = load i64, i64* %707, align 8
  %709 = icmp eq i64 %708, 0
  br i1 %709, label %710, label %716

710:                                              ; preds = %702
  %711 = bitcast %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %703 to %struct.VmaListItem**
  store %struct.VmaListItem* null, %struct.VmaListItem** %711, align 8
  %712 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %520, i64 0, i32 3, i32 0, i32 2
  %713 = bitcast %struct.VmaListItem** %712 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"**
  store %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %703, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %713, align 8
  %714 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %520, i64 0, i32 3, i32 0, i32 3
  %715 = bitcast %struct.VmaListItem** %714 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"**
  store %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %703, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %715, align 8
  br label %727

716:                                              ; preds = %702
  %717 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %520, i64 0, i32 3, i32 0, i32 3
  %718 = bitcast %struct.VmaListItem** %717 to i64*
  %719 = load i64, i64* %718, align 8
  %720 = bitcast %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %703 to i64*
  store i64 %719, i64* %720, align 8
  %721 = load %struct.VmaListItem*, %struct.VmaListItem** %717, align 8
  %722 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %721, i64 0, i32 1
  %723 = bitcast %struct.VmaListItem** %722 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"**
  store %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %703, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %723, align 8
  %724 = bitcast %struct.VmaListItem** %717 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"**
  store %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %703, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %724, align 8
  %725 = load i64, i64* %707, align 8
  %726 = add i64 %725, 1
  br label %727

727:                                              ; preds = %710, %716
  %728 = phi i64 [ %726, %716 ], [ 1, %710 ]
  store i64 %728, i64* %707, align 8
  %729 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %703, i64 0, i32 1, i64 12
  %730 = bitcast i8* %729 to i64*
  store i64 %517, i64* %730, align 8
  %731 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %703, i64 0, i32 1, i64 20
  %732 = bitcast i8* %731 to i64*
  store i64 %618, i64* %732, align 8
  %733 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %703, i64 0, i32 1, i64 28
  %734 = bitcast i8* %733 to %struct.VmaAllocation_T**
  store %struct.VmaAllocation_T* %619, %struct.VmaAllocation_T** %734, align 8
  %735 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %703, i64 0, i32 1, i64 36
  %736 = bitcast i8* %735 to i64*
  store i64 %622, i64* %736, align 8
  %737 = load i64, i64* %10, align 8
  %738 = load i64, i64* %86, align 8
  %739 = add i64 %738, 1
  call void @_ZN9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.28* %1, i64 %739, i1 zeroext false) #15
  %740 = load %struct.VmaDefragmentationMove*, %struct.VmaDefragmentationMove** %87, align 8
  %741 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %740, i64 %738, i32 0
  store i64 %110, i64* %741, align 8
  %742 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %740, i64 %738, i32 1
  store i64 %522, i64* %742, align 8
  %743 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %740, i64 %738, i32 2
  store i64 %154, i64* %743, align 8
  %744 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %740, i64 %738, i32 3
  store i64 %737, i64* %744, align 8
  %745 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %740, i64 %738, i32 4
  store i64 %145, i64* %745, align 8
  %746 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %740, i64 %738, i32 5
  %747 = bitcast %struct.VmaAllocation_T** %746 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %747, i8* nonnull align 8 %78, i64 24, i1 false)
  br label %748

748:                                              ; preds = %592, %597, %727, %336, %246
  %749 = phi i64 [ %183, %246 ], [ %273, %336 ], [ %632, %727 ], [ %606, %597 ], [ %595, %592 ]
  %750 = phi i64 [ %133, %246 ], [ %133, %336 ], [ %625, %727 ], [ %526, %597 ], [ %596, %592 ]
  %751 = phi i64 [ %134, %246 ], [ %134, %336 ], [ %519, %727 ], [ %519, %597 ], [ %519, %592 ]
  %752 = phi %class.VmaBlockMetadata_Generic* [ %135, %246 ], [ %135, %336 ], [ %520, %727 ], [ %520, %597 ], [ %520, %592 ]
  %753 = phi %class.VmaDeviceMemoryBlock* [ %136, %246 ], [ %136, %336 ], [ %521, %727 ], [ %521, %597 ], [ %521, %592 ]
  %754 = phi i64 [ %137, %246 ], [ %137, %336 ], [ %522, %727 ], [ %522, %597 ], [ %522, %592 ]
  %755 = phi i64 [ %138, %246 ], [ %138, %336 ], [ %523, %727 ], [ %116, %597 ], [ %116, %592 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %80) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %79) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %78)
  %756 = icmp eq i64 %749, 0
  br i1 %756, label %757, label %131

757:                                              ; preds = %748, %108
  %758 = phi i64 [ %111, %108 ], [ %755, %748 ]
  %759 = phi i64 [ %112, %108 ], [ %754, %748 ]
  %760 = phi %class.VmaDeviceMemoryBlock* [ %113, %108 ], [ %753, %748 ]
  %761 = phi %class.VmaBlockMetadata_Generic* [ %114, %108 ], [ %752, %748 ]
  %762 = phi i64 [ %115, %108 ], [ %751, %748 ]
  %763 = phi i64 [ %117, %108 ], [ %750, %748 ]
  %764 = add nuw i64 %116, 1
  %765 = icmp ult i64 %764, %14
  br i1 %765, label %766, label %107

766:                                              ; preds = %757
  %767 = load %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"** %22, align 8
  %768 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %767, i64 %764, i32 0
  %769 = load i64, i64* %768, align 8
  %770 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %11, align 8
  %771 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %770, i64 0, i32 16, i32 1
  %772 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %771, align 8
  br label %108

773:                                              ; preds = %5, %107
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN32VmaDefragmentationAlgorithm_Fast18PreprocessMetadataEv(%class.VmaDefragmentationAlgorithm_Fast* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 0, i32 2
  %3 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %2, align 8
  %4 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %3, i64 0, i32 16, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %38, %1
  ret void

8:                                                ; preds = %1, %41
  %9 = phi %struct.VmaBlockVector* [ %42, %41 ], [ %3, %1 ]
  %10 = phi i64 [ %39, %41 ], [ 0, %1 ]
  %11 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %9, i64 0, i32 16, i32 1
  %12 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %11, align 8
  %13 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %12, i64 %10
  %14 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %13, align 8
  %15 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %14, i64 0, i32 0
  %16 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %15, align 8
  %17 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %16, i64 1
  %18 = bitcast %class.VmaBlockMetadata* %17 to i32*
  store i32 0, i32* %18, align 8
  %19 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %16, i64 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %16, i64 1, i32 1
  store i64 %20, i64* %21, align 8
  %22 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %16, i64 5
  %23 = bitcast %class.VmaBlockMetadata* %22 to %class.VmaVector.18*
  tail call void @_ZN9VmaVectorIN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorES2_IS5_EE6resizeEmb(%class.VmaVector.18* %23, i64 0, i1 zeroext false) #15
  %24 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %16, i64 1, i32 2
  %25 = getelementptr inbounds %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %24, i64 7
  %26 = bitcast %struct.VkAllocationCallbacks** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %38, label %29

29:                                               ; preds = %8
  %30 = getelementptr inbounds %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %24, i64 8
  %31 = bitcast %struct.VkAllocationCallbacks** %30 to i64*
  %32 = getelementptr inbounds %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %24, i64 5
  %33 = bitcast %struct.VkAllocationCallbacks** %32 to i64*
  %34 = getelementptr inbounds %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %24, i64 4
  %35 = bitcast %struct.VkAllocationCallbacks** %34 to %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"**
  %36 = getelementptr inbounds %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %24, i64 9
  %37 = bitcast %struct.VkAllocationCallbacks** %36 to i64*
  br label %43

38:                                               ; preds = %95, %8
  %39 = add nuw i64 %10, 1
  %40 = icmp eq i64 %39, %5
  br i1 %40, label %7, label %41

41:                                               ; preds = %38
  %42 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %2, align 8
  br label %8

43:                                               ; preds = %29, %95
  %44 = phi i64 [ %27, %29 ], [ %51, %95 ]
  %45 = inttoptr i64 %44 to %struct.VmaListItem*
  %46 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %45, i64 0, i32 2, i32 3
  %47 = load i32, i32* %46, align 8
  %48 = icmp eq i32 %47, 0
  %49 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %45, i64 0, i32 1
  %50 = bitcast %struct.VmaListItem** %49 to i64*
  %51 = load i64, i64* %50, align 8
  br i1 %48, label %52, label %95

52:                                               ; preds = %43
  %53 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %45, i64 0, i32 0
  %54 = load %struct.VmaListItem*, %struct.VmaListItem** %53, align 8
  %55 = icmp eq %struct.VmaListItem* %54, null
  %56 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %54, i64 0, i32 1
  %57 = bitcast %struct.VmaListItem** %56 to i64*
  %58 = select i1 %55, i64* %26, i64* %57
  store i64 %51, i64* %58, align 8
  %59 = load %struct.VmaListItem*, %struct.VmaListItem** %49, align 8
  %60 = icmp eq %struct.VmaListItem* %59, null
  %61 = inttoptr i64 %44 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = bitcast %struct.VmaListItem* %59 to i64*
  %64 = select i1 %60, i64* %31, i64* %63
  store i64 %62, i64* %64, align 8
  %65 = load i64, i64* %33, align 8
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %92, label %67

67:                                               ; preds = %52
  %68 = load %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"*, %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"** %35, align 8
  %69 = inttoptr i64 %44 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*
  br label %70

70:                                               ; preds = %90, %67
  %71 = phi i64 [ %65, %67 ], [ %72, %90 ]
  %72 = add i64 %71, -1
  %73 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %68, i64 %72, i32 0
  %74 = load %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %73, align 8
  %75 = icmp ugt %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %74, %69
  br i1 %75, label %90, label %76

76:                                               ; preds = %70
  %77 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %68, i64 %72, i32 1
  %78 = load i32, i32* %77, align 8
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %74, i64 %79
  %81 = icmp ugt %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %80, %69
  br i1 %81, label %82, label %90

82:                                               ; preds = %76
  %83 = ptrtoint %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %74 to i64
  %84 = sub i64 %44, %83
  %85 = sdiv exact i64 %84, 48
  %86 = trunc i64 %85 to i32
  %87 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %68, i64 %72, i32 2
  %88 = load i32, i32* %87, align 4
  %89 = inttoptr i64 %44 to i32*
  store i32 %88, i32* %89, align 8
  store i32 %86, i32* %87, align 4
  br label %92

90:                                               ; preds = %76, %70
  %91 = icmp eq i64 %72, 0
  br i1 %91, label %92, label %70

92:                                               ; preds = %90, %52, %82
  %93 = load i64, i64* %37, align 8
  %94 = add i64 %93, -1
  store i64 %94, i64* %37, align 8
  br label %95

95:                                               ; preds = %43, %92
  %96 = icmp eq i64 %51, 0
  br i1 %96, label %38, label %43
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9VmaVectorIN32VmaDefragmentationAlgorithm_Fast9BlockInfoE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.38*, i64, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.VmaVector.38, %class.VmaVector.38* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = mul i64 %5, 3
  %9 = lshr i64 %8, 1
  %10 = icmp ult i64 %8, 16
  %11 = select i1 %10, i64 8, i64 %9
  %12 = icmp ugt i64 %11, %1
  %13 = select i1 %12, i64 %11, i64 %1
  br label %16

14:                                               ; preds = %3
  %15 = select i1 %2, i64 %1, i64 %5
  br label %16

16:                                               ; preds = %14, %7
  %17 = phi i64 [ %13, %7 ], [ %15, %14 ]
  %18 = icmp eq i64 %17, %5
  br i1 %18, label %64, label %19

19:                                               ; preds = %16
  %20 = icmp eq i64 %17, 0
  br i1 %20, label %36, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %class.VmaVector.38, %class.VmaVector.38* %0, i64 0, i32 0, i32 0
  %23 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, align 8
  %24 = shl i64 %17, 3
  %25 = icmp eq %struct.VkAllocationCallbacks* %23, null
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 1
  %28 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %27, align 8
  %29 = icmp eq i8* (i8*, i64, i64, i32)* %28, null
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* %28(i8* %32, i64 %24, i64 8, i32 1) #15
  br label %36

34:                                               ; preds = %26, %21
  %35 = tail call noalias i8* @aligned_alloc(i64 8, i64 %24) #15
  br label %36

36:                                               ; preds = %34, %30, %19
  %37 = phi i8* [ null, %19 ], [ %33, %30 ], [ %35, %34 ]
  %38 = getelementptr inbounds %class.VmaVector.38, %class.VmaVector.38* %0, i64 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = icmp ugt i64 %39, %1
  %41 = select i1 %40, i64 %1, i64 %39
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %class.VmaVector.38, %class.VmaVector.38* %0, i64 0, i32 1
  %45 = bitcast %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"** %44 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = shl i64 %41, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %46, i64 %47, i1 false)
  br label %48

48:                                               ; preds = %36, %43
  %49 = getelementptr inbounds %class.VmaVector.38, %class.VmaVector.38* %0, i64 0, i32 0, i32 0
  %50 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %49, align 8
  %51 = getelementptr inbounds %class.VmaVector.38, %class.VmaVector.38* %0, i64 0, i32 1
  %52 = bitcast %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"** %51 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq %struct.VkAllocationCallbacks* %50, null
  br i1 %54, label %62, label %55

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 3
  %57 = load void (i8*, i8*)*, void (i8*, i8*)** %56, align 8
  %58 = icmp eq void (i8*, i8*)* %57, null
  br i1 %58, label %62, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  tail call void %57(i8* %61, i8* %53) #15
  br label %63

62:                                               ; preds = %55, %48
  tail call void @free(i8* %53) #15
  br label %63

63:                                               ; preds = %59, %62
  store i64 %17, i64* %4, align 8
  store i8* %37, i8** %52, align 8
  br label %64

64:                                               ; preds = %16, %63
  %65 = getelementptr inbounds %class.VmaVector.38, %class.VmaVector.38* %0, i64 0, i32 2
  store i64 %1, i64* %65, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN32VmaDefragmentationAlgorithm_Fast17FreeSpaceDatabase5FetchEmmRmS1_(%"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"*, i64, i64, i64* dereferenceable(8), i64* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %6 = add i64 %1, -1
  %7 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %0, i64 0, i32 0, i64 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, -1
  br i1 %9, label %23, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %0, i64 0, i32 0, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = add i64 %6, %12
  %14 = urem i64 %13, %1
  %15 = sub i64 %13, %14
  %16 = add i64 %15, %2
  %17 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %0, i64 0, i32 0, i64 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = add i64 %18, %12
  %20 = icmp ult i64 %19, %16
  %21 = sext i1 %20 to i64
  %22 = call i64 @llvm.usub.sat.i64(i64 %19, i64 %16)
  br label %23

23:                                               ; preds = %10, %5
  %24 = phi i64 [ -1, %5 ], [ %21, %10 ]
  %25 = phi i64 [ 0, %5 ], [ %22, %10 ]
  %26 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %0, i64 0, i32 0, i64 1, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = icmp eq i64 %27, -1
  br i1 %28, label %68, label %50

29:                                               ; preds = %109, %116
  %30 = phi i64 [ %94, %116 ], [ %114, %109 ]
  %31 = phi i64 [ %93, %116 ], [ %115, %109 ]
  %32 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %0, i64 0, i32 0, i64 %31, i32 0
  %33 = load i64, i64* %32, align 8
  store i64 %33, i64* %3, align 8
  %34 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %0, i64 0, i32 0, i64 %31, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = add i64 %6, %35
  %37 = urem i64 %36, %1
  %38 = sub i64 %36, %37
  store i64 %38, i64* %4, align 8
  %39 = icmp ugt i64 %30, 15
  br i1 %39, label %40, label %47

40:                                               ; preds = %29
  %41 = load i64, i64* %34, align 8
  %42 = add i64 %38, %2
  store i64 %42, i64* %34, align 8
  %43 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %0, i64 0, i32 0, i64 %31, i32 2
  %44 = load i64, i64* %43, align 8
  %45 = sub i64 %41, %42
  %46 = add i64 %45, %44
  store i64 %46, i64* %43, align 8
  br label %48

47:                                               ; preds = %29
  store i64 -1, i64* %32, align 8
  br label %48

48:                                               ; preds = %116, %40, %47
  %49 = phi i1 [ true, %47 ], [ true, %40 ], [ false, %116 ]
  ret i1 %49

50:                                               ; preds = %23
  %51 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %0, i64 0, i32 0, i64 1, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = add i64 %6, %52
  %54 = urem i64 %53, %1
  %55 = sub i64 %53, %54
  %56 = add i64 %55, %2
  %57 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %0, i64 0, i32 0, i64 1, i32 2
  %58 = load i64, i64* %57, align 8
  %59 = add i64 %58, %52
  %60 = icmp ult i64 %59, %56
  br i1 %60, label %68, label %61

61:                                               ; preds = %50
  %62 = sub i64 %59, %56
  %63 = icmp eq i64 %24, -1
  %64 = icmp ugt i64 %62, %25
  %65 = or i1 %63, %64
  %66 = select i1 %65, i64 1, i64 %24
  %67 = select i1 %65, i64 %62, i64 %25
  br label %68

68:                                               ; preds = %61, %50, %23
  %69 = phi i64 [ %24, %23 ], [ %24, %50 ], [ %66, %61 ]
  %70 = phi i64 [ %25, %23 ], [ %25, %50 ], [ %67, %61 ]
  %71 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %0, i64 0, i32 0, i64 2, i32 0
  %72 = load i64, i64* %71, align 8
  %73 = icmp eq i64 %72, -1
  br i1 %73, label %92, label %74

74:                                               ; preds = %68
  %75 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %0, i64 0, i32 0, i64 2, i32 1
  %76 = load i64, i64* %75, align 8
  %77 = add i64 %6, %76
  %78 = urem i64 %77, %1
  %79 = sub i64 %77, %78
  %80 = add i64 %79, %2
  %81 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %0, i64 0, i32 0, i64 2, i32 2
  %82 = load i64, i64* %81, align 8
  %83 = add i64 %82, %76
  %84 = icmp ult i64 %83, %80
  br i1 %84, label %92, label %85

85:                                               ; preds = %74
  %86 = sub i64 %83, %80
  %87 = icmp eq i64 %69, -1
  %88 = icmp ugt i64 %86, %70
  %89 = or i1 %87, %88
  %90 = select i1 %89, i64 2, i64 %69
  %91 = select i1 %89, i64 %86, i64 %70
  br label %92

92:                                               ; preds = %85, %74, %68
  %93 = phi i64 [ %69, %68 ], [ %69, %74 ], [ %90, %85 ]
  %94 = phi i64 [ %70, %68 ], [ %70, %74 ], [ %91, %85 ]
  %95 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %0, i64 0, i32 0, i64 3, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = icmp eq i64 %96, -1
  br i1 %97, label %116, label %98

98:                                               ; preds = %92
  %99 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %0, i64 0, i32 0, i64 3, i32 1
  %100 = load i64, i64* %99, align 8
  %101 = add i64 %6, %100
  %102 = urem i64 %101, %1
  %103 = sub i64 %101, %102
  %104 = add i64 %103, %2
  %105 = getelementptr inbounds %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase", %"class.VmaDefragmentationAlgorithm_Fast::FreeSpaceDatabase"* %0, i64 0, i32 0, i64 3, i32 2
  %106 = load i64, i64* %105, align 8
  %107 = add i64 %106, %100
  %108 = icmp ult i64 %107, %104
  br i1 %108, label %116, label %109

109:                                              ; preds = %98
  %110 = sub i64 %107, %104
  %111 = icmp eq i64 %93, -1
  %112 = icmp ugt i64 %110, %94
  %113 = or i1 %111, %112
  %114 = select i1 %113, i64 %110, i64 %94
  %115 = select i1 %113, i64 3, i64 %93
  br label %29

116:                                              ; preds = %98, %92
  %117 = icmp eq i64 %93, -1
  br i1 %117, label %48, label %29
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN32VmaDefragmentationAlgorithm_Fast14InsertSuballocEP24VmaBlockMetadata_GenericRK16VmaSuballocation(%class.VmaDefragmentationAlgorithm_Fast* nocapture readnone, %class.VmaBlockMetadata_Generic*, %struct.VmaSuballocation* nocapture readonly dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %1, i64 0, i32 3, i32 0
  %5 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %1, i64 0, i32 3, i32 0, i32 2
  %6 = bitcast %struct.VmaListItem** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = inttoptr i64 %7 to %struct.VmaListItem*
  %9 = icmp eq i64 %7, 0
  br i1 %9, label %27, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.VmaSuballocation, %struct.VmaSuballocation* %2, i64 0, i32 0
  %12 = load i64, i64* %11, align 8
  br label %13

13:                                               ; preds = %10, %23
  %14 = phi %struct.VmaListItem* [ %8, %10 ], [ %25, %23 ]
  %15 = phi i64 [ %7, %10 ], [ %24, %23 ]
  %16 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %14, i64 0, i32 2, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = icmp ult i64 %17, %12
  br i1 %18, label %19, label %23

19:                                               ; preds = %13
  %20 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %14, i64 0, i32 1
  %21 = bitcast %struct.VmaListItem** %20 to i64*
  %22 = load i64, i64* %21, align 8
  br label %23

23:                                               ; preds = %19, %13
  %24 = phi i64 [ %22, %19 ], [ %15, %13 ]
  %25 = inttoptr i64 %24 to %struct.VmaListItem*
  %26 = icmp eq i64 %24, 0
  br i1 %26, label %27, label %13

27:                                               ; preds = %23, %3
  %28 = phi %struct.VmaListItem* [ %8, %3 ], [ null, %23 ]
  %29 = tail call %struct.VmaListItem* @_ZN10VmaRawListI16VmaSuballocationE12InsertBeforeEP11VmaListItemIS0_E(%class.VmaRawList* %4, %struct.VmaListItem* %28) #15
  %30 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %29, i64 0, i32 2
  %31 = bitcast %struct.VmaSuballocation* %30 to i8*
  %32 = bitcast %struct.VmaSuballocation* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 32, i1 false) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN32VmaDefragmentationAlgorithm_Fast19PostprocessMetadataEv(%class.VmaDefragmentationAlgorithm_Fast* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %struct.VmaSuballocationItemSizeLess, align 1
  %3 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 0, i32 2
  %4 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %3, align 8
  %5 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %4, i64 0, i32 16, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.VmaSuballocationItemSizeLess, %struct.VmaSuballocationItemSizeLess* %2, i64 0, i32 0
  br label %11

10:                                               ; preds = %197, %1
  ret void

11:                                               ; preds = %200, %8
  %12 = phi %struct.VmaBlockVector* [ %4, %8 ], [ %201, %200 ]
  %13 = phi i64 [ 0, %8 ], [ %198, %200 ]
  %14 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %12, i64 0, i32 16, i32 1
  %15 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %14, align 8
  %16 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %15, i64 %13
  %17 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %16, align 8
  %18 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %17, i64 0, i32 0
  %19 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %18, align 8
  %20 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %19, i64 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %19, i64 1, i32 2
  %23 = getelementptr inbounds %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, i64 9
  %24 = bitcast %struct.VkAllocationCallbacks** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %27, label %102

27:                                               ; preds = %11
  %28 = bitcast %class.VmaBlockMetadata* %19 to %class.VmaBlockMetadata_Generic*
  %29 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %19, i64 1
  %30 = bitcast %class.VmaBlockMetadata* %29 to i32*
  store i32 1, i32* %30, align 8
  %31 = getelementptr inbounds %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, i64 1
  %32 = bitcast %struct.VkAllocationCallbacks** %31 to %class.VmaPoolAllocator.15*
  %33 = getelementptr inbounds %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, i64 5
  %34 = bitcast %struct.VkAllocationCallbacks** %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, i64 4
  %37 = bitcast %struct.VkAllocationCallbacks** %36 to %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"**
  br label %38

38:                                               ; preds = %42, %27
  %39 = phi i64 [ %35, %27 ], [ %40, %42 ]
  %40 = add i64 %39, -1
  %41 = icmp eq i64 %39, 0
  br i1 %41, label %54, label %42

42:                                               ; preds = %38
  %43 = load %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"*, %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"** %37, align 8
  %44 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %43, i64 %40, i32 2
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, -1
  br i1 %46, label %38, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %43, i64 %40, i32 0
  %49 = load %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %48, align 8
  %50 = zext i32 %45 to i64
  %51 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %49, i64 %50
  %52 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %51, i64 0, i32 0
  %53 = load i32, i32* %52, align 8
  store i32 %53, i32* %44, align 4
  br label %61

54:                                               ; preds = %38
  %55 = call dereferenceable(16) %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* @_ZN16VmaPoolAllocatorI11VmaListItemI16VmaSuballocationEE14CreateNewBlockEv(%class.VmaPoolAllocator.15* %32) #15
  %56 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %55, i64 0, i32 0
  %57 = load %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %56, align 8
  %58 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %57, i64 0, i32 0
  %59 = load i32, i32* %58, align 8
  %60 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %55, i64 0, i32 2
  store i32 %59, i32* %60, align 4
  br label %61

61:                                               ; preds = %54, %47
  %62 = phi %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* [ %57, %54 ], [ %51, %47 ]
  %63 = bitcast %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %62 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 48, i1 false) #15
  %64 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %62, i64 0, i32 1, i64 4
  %65 = bitcast i8* %64 to %struct.VmaListItem**
  store %struct.VmaListItem* null, %struct.VmaListItem** %65, align 8
  %66 = load i64, i64* %24, align 8
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %74

68:                                               ; preds = %61
  %69 = bitcast %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %62 to %struct.VmaListItem**
  store %struct.VmaListItem* null, %struct.VmaListItem** %69, align 8
  %70 = getelementptr inbounds %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, i64 7
  %71 = bitcast %struct.VkAllocationCallbacks** %70 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"**
  store %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %62, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %71, align 8
  %72 = getelementptr inbounds %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, i64 8
  %73 = bitcast %struct.VkAllocationCallbacks** %72 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"**
  store %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %62, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %73, align 8
  br label %86

74:                                               ; preds = %61
  %75 = getelementptr inbounds %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, i64 8
  %76 = bitcast %struct.VkAllocationCallbacks** %75 to %struct.VmaListItem**
  %77 = bitcast %struct.VkAllocationCallbacks** %75 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = bitcast %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %62 to i64*
  store i64 %78, i64* %79, align 8
  %80 = load %struct.VmaListItem*, %struct.VmaListItem** %76, align 8
  %81 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %80, i64 0, i32 1
  %82 = bitcast %struct.VmaListItem** %81 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"**
  store %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %62, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %82, align 8
  %83 = bitcast %struct.VkAllocationCallbacks** %75 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"**
  store %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %62, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %83, align 8
  %84 = load i64, i64* %24, align 8
  %85 = add i64 %84, 1
  br label %86

86:                                               ; preds = %68, %74
  %87 = phi i64 [ %85, %74 ], [ 1, %68 ]
  store i64 %87, i64* %24, align 8
  %88 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %62, i64 0, i32 1, i64 12
  %89 = bitcast i8* %88 to i64*
  store i64 0, i64* %89, align 8
  %90 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %62, i64 0, i32 1, i64 20
  %91 = bitcast i8* %90 to i64*
  store i64 %21, i64* %91, align 8
  %92 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %62, i64 0, i32 1, i64 28
  %93 = bitcast i8* %92 to %struct.VmaAllocation_T**
  store %struct.VmaAllocation_T* null, %struct.VmaAllocation_T** %93, align 8
  %94 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %62, i64 0, i32 1, i64 36
  %95 = bitcast i8* %94 to i32*
  store i32 0, i32* %95, align 8
  %96 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %62, i64 0, i32 1, i64 40
  %97 = bitcast i8* %96 to i32*
  store i32 -1431655766, i32* %97, align 4
  %98 = bitcast %struct.VkAllocationCallbacks** %22 to %class.VmaRawList*
  %99 = getelementptr inbounds %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, i64 7
  %100 = bitcast %struct.VkAllocationCallbacks** %99 to %struct.VmaListItem**
  %101 = load %struct.VmaListItem*, %struct.VmaListItem** %100, align 8
  call void @_ZN24VmaBlockMetadata_Generic25RegisterFreeSuballocationEN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorE(%class.VmaBlockMetadata_Generic* %28, %class.VmaRawList* %98, %struct.VmaListItem* %101)
  br label %197

102:                                              ; preds = %11
  %103 = bitcast %struct.VkAllocationCallbacks** %22 to %class.VmaRawList*
  %104 = getelementptr inbounds %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, i64 7
  %105 = bitcast %struct.VkAllocationCallbacks** %104 to %struct.VmaListItem**
  %106 = load %struct.VmaListItem*, %struct.VmaListItem** %105, align 8
  %107 = icmp eq %struct.VmaListItem* %106, null
  br i1 %107, label %157, label %108

108:                                              ; preds = %102
  %109 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %19, i64 1
  %110 = bitcast %class.VmaBlockMetadata* %109 to i32*
  %111 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %19, i64 5
  %112 = bitcast %class.VmaBlockMetadata* %111 to %class.VmaVector.18*
  %113 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %19, i64 5, i32 2
  %114 = bitcast %struct.VkAllocationCallbacks** %113 to i64*
  %115 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %19, i64 5, i32 1
  %116 = bitcast i64* %115 to %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"**
  %117 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %19, i64 1, i32 1
  br label %118

118:                                              ; preds = %108, %146
  %119 = phi %struct.VmaListItem* [ %106, %108 ], [ %155, %146 ]
  %120 = phi i64 [ 0, %108 ], [ %153, %146 ]
  %121 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %119, i64 0, i32 2, i32 0
  %122 = load i64, i64* %121, align 8
  %123 = icmp ugt i64 %122, %120
  br i1 %123, label %124, label %146

124:                                              ; preds = %118
  %125 = load i32, i32* %110, align 8
  %126 = add i32 %125, 1
  store i32 %126, i32* %110, align 8
  %127 = load i64, i64* %121, align 8
  %128 = sub i64 %127, %120
  %129 = call %struct.VmaListItem* @_ZN10VmaRawListI16VmaSuballocationE12InsertBeforeEP11VmaListItemIS0_E(%class.VmaRawList* %103, %struct.VmaListItem* nonnull %119) #15
  %130 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %129, i64 0, i32 2
  %131 = bitcast %struct.VmaSuballocation* %130 to i8*
  %132 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %129, i64 0, i32 2, i32 0
  store i64 %120, i64* %132, align 8
  %133 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %129, i64 0, i32 2, i32 1
  store i64 %128, i64* %133, align 8
  %134 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %129, i64 0, i32 2, i32 2
  store %struct.VmaAllocation_T* null, %struct.VmaAllocation_T** %134, align 8
  %135 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %129, i64 0, i32 2, i32 3
  store i32 0, i32* %135, align 8
  %136 = getelementptr inbounds i8, i8* %131, i64 28
  %137 = bitcast i8* %136 to i32*
  store i32 -1431655766, i32* %137, align 4
  %138 = icmp ugt i64 %128, 15
  br i1 %138, label %139, label %146

139:                                              ; preds = %124
  %140 = load i64, i64* %114, align 8
  %141 = add i64 %140, 1
  call void @_ZN9VmaVectorIN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorES2_IS5_EE6resizeEmb(%class.VmaVector.18* %112, i64 %141, i1 zeroext false) #15
  %142 = load %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %116, align 8
  %143 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %142, i64 %140
  %144 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %143 to %struct.VkAllocationCallbacks***
  store %struct.VkAllocationCallbacks** %22, %struct.VkAllocationCallbacks*** %144, align 8
  %145 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %142, i64 %140, i32 1
  store %struct.VmaListItem* %129, %struct.VmaListItem** %145, align 8
  br label %146

146:                                              ; preds = %124, %139, %118
  %147 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %119, i64 0, i32 2, i32 1
  %148 = load i64, i64* %147, align 8
  %149 = load i64, i64* %117, align 8
  %150 = sub i64 %149, %148
  store i64 %150, i64* %117, align 8
  %151 = load i64, i64* %121, align 8
  %152 = load i64, i64* %147, align 8
  %153 = add i64 %152, %151
  %154 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %119, i64 0, i32 1
  %155 = load %struct.VmaListItem*, %struct.VmaListItem** %154, align 8
  %156 = icmp eq %struct.VmaListItem* %155, null
  br i1 %156, label %157, label %118

157:                                              ; preds = %146, %102
  %158 = phi i64 [ 0, %102 ], [ %153, %146 ]
  %159 = icmp ugt i64 %21, %158
  br i1 %159, label %160, label %189

160:                                              ; preds = %157
  %161 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %19, i64 1
  %162 = bitcast %class.VmaBlockMetadata* %161 to i32*
  %163 = load i32, i32* %162, align 8
  %164 = add i32 %163, 1
  store i32 %164, i32* %162, align 8
  %165 = sub i64 %21, %158
  %166 = call %struct.VmaListItem* @_ZN10VmaRawListI16VmaSuballocationE12InsertBeforeEP11VmaListItemIS0_E(%class.VmaRawList* %103, %struct.VmaListItem* null) #15
  %167 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %166, i64 0, i32 2
  %168 = bitcast %struct.VmaSuballocation* %167 to i8*
  %169 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %166, i64 0, i32 2, i32 0
  store i64 %158, i64* %169, align 8
  %170 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %166, i64 0, i32 2, i32 1
  store i64 %165, i64* %170, align 8
  %171 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %166, i64 0, i32 2, i32 2
  store %struct.VmaAllocation_T* null, %struct.VmaAllocation_T** %171, align 8
  %172 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %166, i64 0, i32 2, i32 3
  store i32 0, i32* %172, align 8
  %173 = getelementptr inbounds i8, i8* %168, i64 28
  %174 = bitcast i8* %173 to i32*
  store i32 -1431655766, i32* %174, align 4
  %175 = icmp ugt i64 %165, 16
  br i1 %175, label %176, label %189

176:                                              ; preds = %160
  %177 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %19, i64 5
  %178 = bitcast %class.VmaBlockMetadata* %177 to %class.VmaVector.18*
  %179 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %19, i64 5, i32 2
  %180 = bitcast %struct.VkAllocationCallbacks** %179 to i64*
  %181 = load i64, i64* %180, align 8
  %182 = add i64 %181, 1
  call void @_ZN9VmaVectorIN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorES2_IS5_EE6resizeEmb(%class.VmaVector.18* %178, i64 %182, i1 zeroext false) #15
  %183 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %19, i64 5, i32 1
  %184 = bitcast i64* %183 to %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"**
  %185 = load %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %184, align 8
  %186 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %185, i64 %181
  %187 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %186 to %struct.VkAllocationCallbacks***
  store %struct.VkAllocationCallbacks** %22, %struct.VkAllocationCallbacks*** %187, align 8
  %188 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %185, i64 %181, i32 1
  store %struct.VmaListItem* %166, %struct.VmaListItem** %188, align 8
  br label %189

189:                                              ; preds = %160, %176, %157
  %190 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %19, i64 5, i32 1
  %191 = bitcast i64* %190 to %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"**
  %192 = load %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %191, align 8
  %193 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %19, i64 5, i32 2
  %194 = bitcast %struct.VkAllocationCallbacks** %193 to i64*
  %195 = load i64, i64* %194, align 8
  %196 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %192, i64 %195
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %9)
  call void @_ZNSt3__16__sortIR28VmaSuballocationItemSizeLessPN7VmaListI16VmaSuballocation15VmaStlAllocatorIS4_EE8iteratorEEEvT0_SA_T_(%"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %192, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %196, %struct.VmaSuballocationItemSizeLess* nonnull dereferenceable(1) %2) #15
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %9)
  br label %197

197:                                              ; preds = %189, %86
  %198 = add nuw i64 %13, 1
  %199 = icmp eq i64 %198, %6
  br i1 %199, label %10, label %200

200:                                              ; preds = %197
  %201 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %3, align 8
  br label %11
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN36VmaBlockVectorDefragmentationContextC2EP14VmaAllocator_TP9VmaPool_TP14VmaBlockVectorj(%class.VmaBlockVectorDefragmentationContext* nocapture, %struct.VmaAllocator_T*, %struct.VmaPool_T*, %struct.VmaBlockVector*, i32) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 0
  store i32 0, i32* %6, align 8
  %7 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 1
  store i8 0, i8* %7, align 4
  %8 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 3
  %9 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 11
  %10 = load i8, i8* %9, align 8, !range !2
  %11 = icmp eq i8 %10, 0
  %12 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13
  %13 = ptrtoint %struct.VkAllocationCallbacks* %12 to i64
  %14 = select i1 %11, i64 0, i64 %13
  %15 = bitcast %class.VmaVector.26* %8 to i64*
  store i64 %14, i64* %15, align 8
  %16 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 3, i32 1
  %17 = bitcast %struct.VmaBlockDefragmentationContext** %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 24, i1 false) #15
  %18 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 4
  %19 = load i8, i8* %9, align 8, !range !2
  %20 = icmp eq i8 %19, 0
  %21 = select i1 %20, i64 0, i64 %13
  %22 = bitcast %class.VmaVector.28* %18 to i64*
  store i64 %21, i64* %22, align 8
  %23 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 4, i32 1
  %24 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 9
  %25 = bitcast %struct.VmaDefragmentationMove** %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 33, i1 false)
  store %struct.VmaAllocator_T* %1, %struct.VmaAllocator_T** %24, align 8
  %26 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 10
  store %struct.VmaPool_T* %2, %struct.VmaPool_T** %26, align 8
  %27 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 11
  store %struct.VmaBlockVector* %3, %struct.VmaBlockVector** %27, align 8
  %28 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 12
  store i32 %4, i32* %28, align 8
  %29 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 14
  store %class.VmaDefragmentationAlgorithm* null, %class.VmaDefragmentationAlgorithm** %29, align 8
  %30 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 15
  %31 = load i8, i8* %9, align 8, !range !2
  %32 = icmp eq i8 %31, 0
  %33 = select i1 %32, i64 0, i64 %13
  %34 = bitcast %class.VmaVector.30* %30 to i64*
  store i64 %33, i64* %34, align 8
  %35 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 15, i32 1
  %36 = bitcast %"struct.VmaBlockVectorDefragmentationContext::AllocInfo"** %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 25, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN36VmaBlockVectorDefragmentationContextD2Ev(%class.VmaBlockVectorDefragmentationContext* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 9
  %3 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %2, align 8
  %4 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 14
  %5 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %4, align 8
  %6 = icmp eq %class.VmaDefragmentationAlgorithm* %5, null
  br i1 %6, label %19, label %7

7:                                                ; preds = %1
  %8 = bitcast %class.VmaDefragmentationAlgorithm* %5 to void (%class.VmaDefragmentationAlgorithm*)***
  %9 = load void (%class.VmaDefragmentationAlgorithm*)**, void (%class.VmaDefragmentationAlgorithm*)*** %8, align 8
  %10 = load void (%class.VmaDefragmentationAlgorithm*)*, void (%class.VmaDefragmentationAlgorithm*)** %9, align 8
  tail call void %10(%class.VmaDefragmentationAlgorithm* nonnull %5) #15
  %11 = bitcast %class.VmaDefragmentationAlgorithm* %5 to i8*
  %12 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %3, i64 0, i32 13, i32 3
  %13 = load void (i8*, i8*)*, void (i8*, i8*)** %12, align 8
  %14 = icmp eq void (i8*, i8*)* %13, null
  br i1 %14, label %18, label %15

15:                                               ; preds = %7
  %16 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %3, i64 0, i32 13, i32 0
  %17 = load i8*, i8** %16, align 8
  tail call void %13(i8* %17, i8* nonnull %11) #15
  br label %19

18:                                               ; preds = %7
  tail call void @free(i8* %11) #15
  br label %19

19:                                               ; preds = %1, %15, %18
  %20 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 15, i32 0, i32 0
  %21 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %20, align 8
  %22 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 15, i32 1
  %23 = bitcast %"struct.VmaBlockVectorDefragmentationContext::AllocInfo"** %22 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = icmp eq %struct.VkAllocationCallbacks* %21, null
  br i1 %25, label %33, label %26

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %21, i64 0, i32 3
  %28 = load void (i8*, i8*)*, void (i8*, i8*)** %27, align 8
  %29 = icmp eq void (i8*, i8*)* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %21, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  tail call void %28(i8* %32, i8* %24) #15
  br label %34

33:                                               ; preds = %26, %19
  tail call void @free(i8* %24) #15
  br label %34

34:                                               ; preds = %30, %33
  %35 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 4, i32 0, i32 0
  %36 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %35, align 8
  %37 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 4, i32 1
  %38 = bitcast %struct.VmaDefragmentationMove** %37 to i8**
  %39 = load i8*, i8** %38, align 8
  %40 = icmp eq %struct.VkAllocationCallbacks* %36, null
  br i1 %40, label %48, label %41

41:                                               ; preds = %34
  %42 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %36, i64 0, i32 3
  %43 = load void (i8*, i8*)*, void (i8*, i8*)** %42, align 8
  %44 = icmp eq void (i8*, i8*)* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %36, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  tail call void %43(i8* %47, i8* %39) #15
  br label %49

48:                                               ; preds = %41, %34
  tail call void @free(i8* %39) #15
  br label %49

49:                                               ; preds = %45, %48
  %50 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 3, i32 0, i32 0
  %51 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %50, align 8
  %52 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 3, i32 1
  %53 = bitcast %struct.VmaBlockDefragmentationContext** %52 to i8**
  %54 = load i8*, i8** %53, align 8
  %55 = icmp eq %struct.VkAllocationCallbacks* %51, null
  br i1 %55, label %63, label %56

56:                                               ; preds = %49
  %57 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %51, i64 0, i32 3
  %58 = load void (i8*, i8*)*, void (i8*, i8*)** %57, align 8
  %59 = icmp eq void (i8*, i8*)* %58, null
  br i1 %59, label %63, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %51, i64 0, i32 0
  %62 = load i8*, i8** %61, align 8
  tail call void %58(i8* %62, i8* %54) #15
  br label %64

63:                                               ; preds = %56, %49
  tail call void @free(i8* %54) #15
  br label %64

64:                                               ; preds = %60, %63
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN36VmaBlockVectorDefragmentationContext13AddAllocationEP15VmaAllocation_TPj(%class.VmaBlockVectorDefragmentationContext*, %struct.VmaAllocation_T*, i32*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 15
  %5 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 15, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 1
  tail call void @_ZN9VmaVectorIN36VmaBlockVectorDefragmentationContext9AllocInfoE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.30* %4, i64 %7, i1 zeroext false) #15
  %8 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %0, i64 0, i32 15, i32 1
  %9 = load %"struct.VmaBlockVectorDefragmentationContext::AllocInfo"*, %"struct.VmaBlockVectorDefragmentationContext::AllocInfo"** %8, align 8
  %10 = getelementptr inbounds %"struct.VmaBlockVectorDefragmentationContext::AllocInfo", %"struct.VmaBlockVectorDefragmentationContext::AllocInfo"* %9, i64 %6, i32 0
  store %struct.VmaAllocation_T* %1, %struct.VmaAllocation_T** %10, align 8
  %11 = getelementptr inbounds %"struct.VmaBlockVectorDefragmentationContext::AllocInfo", %"struct.VmaBlockVectorDefragmentationContext::AllocInfo"* %9, i64 %6, i32 1
  store i32* %2, i32** %11, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN27VmaDefragmentationContext_TC2EP14VmaAllocator_TjjP23VmaDefragmentationStats(%struct.VmaDefragmentationContext_T* nocapture, %struct.VmaAllocator_T*, i32, i32, %struct.VmaDefragmentationStats*) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 0
  store %struct.VmaAllocator_T* %1, %struct.VmaAllocator_T** %6, align 8
  %7 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 1
  store i32 %2, i32* %7, align 8
  %8 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 2
  store i32 %3, i32* %8, align 4
  %9 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 3
  store %struct.VmaDefragmentationStats* %4, %struct.VmaDefragmentationStats** %9, align 8
  %10 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 9
  %11 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 11
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  %14 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %1, i64 0, i32 13
  %15 = ptrtoint %struct.VkAllocationCallbacks* %14 to i64
  %16 = select i1 %13, i64 0, i64 %15
  %17 = bitcast %class.VmaVector.40* %10 to i64*
  store i64 %16, i64* %17, align 8
  %18 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 9, i32 1
  %19 = bitcast %class.VmaBlockVectorDefragmentationContext*** %18 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 24, i1 false) #15
  %20 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 8, i64 0
  %21 = bitcast %class.VmaBlockVectorDefragmentationContext** %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 256, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN27VmaDefragmentationContext_TD2Ev(%struct.VmaDefragmentationContext_T* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 9, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 9, i32 1
  %7 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 2
  %8 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 3
  %9 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 0
  br label %20

10:                                               ; preds = %41, %1
  %11 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 0
  %12 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %11, align 8
  %13 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %12, i64 0, i32 19, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %43, label %16

16:                                               ; preds = %10
  %17 = zext i32 %14 to i64
  %18 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 2
  %19 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 3
  br label %59

20:                                               ; preds = %5, %41
  %21 = phi i64 [ %3, %5 ], [ %22, %41 ]
  %22 = add i64 %21, -1
  %23 = load %class.VmaBlockVectorDefragmentationContext**, %class.VmaBlockVectorDefragmentationContext*** %6, align 8
  %24 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext*, %class.VmaBlockVectorDefragmentationContext** %23, i64 %22
  %25 = load %class.VmaBlockVectorDefragmentationContext*, %class.VmaBlockVectorDefragmentationContext** %24, align 8
  %26 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %25, i64 0, i32 11
  %27 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %26, align 8
  %28 = load i32, i32* %7, align 4
  %29 = load %struct.VmaDefragmentationStats*, %struct.VmaDefragmentationStats** %8, align 8
  tail call void @_ZN14VmaBlockVector18DefragmentationEndEP36VmaBlockVectorDefragmentationContextjP23VmaDefragmentationStats(%struct.VmaBlockVector* %27, %class.VmaBlockVectorDefragmentationContext* %25, i32 %28, %struct.VmaDefragmentationStats* %29)
  %30 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %9, align 8
  %31 = icmp eq %class.VmaBlockVectorDefragmentationContext* %25, null
  br i1 %31, label %41, label %32

32:                                               ; preds = %20
  tail call void @_ZN36VmaBlockVectorDefragmentationContextD2Ev(%class.VmaBlockVectorDefragmentationContext* nonnull %25) #15
  %33 = bitcast %class.VmaBlockVectorDefragmentationContext* %25 to i8*
  %34 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %30, i64 0, i32 13, i32 3
  %35 = load void (i8*, i8*)*, void (i8*, i8*)** %34, align 8
  %36 = icmp eq void (i8*, i8*)* %35, null
  br i1 %36, label %40, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %30, i64 0, i32 13, i32 0
  %39 = load i8*, i8** %38, align 8
  tail call void %35(i8* %39, i8* nonnull %33) #15
  br label %41

40:                                               ; preds = %32
  tail call void @free(i8* %33) #15
  br label %41

41:                                               ; preds = %20, %37, %40
  %42 = icmp eq i64 %22, 0
  br i1 %42, label %10, label %20

43:                                               ; preds = %79, %10
  %44 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 9, i32 0, i32 0
  %45 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %44, align 8
  %46 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 9, i32 1
  %47 = bitcast %class.VmaBlockVectorDefragmentationContext*** %46 to i8**
  %48 = load i8*, i8** %47, align 8
  %49 = icmp eq %struct.VkAllocationCallbacks* %45, null
  br i1 %49, label %57, label %50

50:                                               ; preds = %43
  %51 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %45, i64 0, i32 3
  %52 = load void (i8*, i8*)*, void (i8*, i8*)** %51, align 8
  %53 = icmp eq void (i8*, i8*)* %52, null
  br i1 %53, label %57, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %45, i64 0, i32 0
  %56 = load i8*, i8** %55, align 8
  tail call void %52(i8* %56, i8* %48) #15
  br label %58

57:                                               ; preds = %50, %43
  tail call void @free(i8* %48) #15
  br label %58

58:                                               ; preds = %54, %57
  ret void

59:                                               ; preds = %16, %79
  %60 = phi i64 [ %17, %16 ], [ %61, %79 ]
  %61 = add nsw i64 %60, -1
  %62 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 8, i64 %61
  %63 = load %class.VmaBlockVectorDefragmentationContext*, %class.VmaBlockVectorDefragmentationContext** %62, align 8
  %64 = icmp eq %class.VmaBlockVectorDefragmentationContext* %63, null
  br i1 %64, label %79, label %65

65:                                               ; preds = %59
  %66 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %63, i64 0, i32 11
  %67 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %66, align 8
  %68 = load i32, i32* %18, align 4
  %69 = load %struct.VmaDefragmentationStats*, %struct.VmaDefragmentationStats** %19, align 8
  tail call void @_ZN14VmaBlockVector18DefragmentationEndEP36VmaBlockVectorDefragmentationContextjP23VmaDefragmentationStats(%struct.VmaBlockVector* %67, %class.VmaBlockVectorDefragmentationContext* nonnull %63, i32 %68, %struct.VmaDefragmentationStats* %69)
  %70 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %11, align 8
  tail call void @_ZN36VmaBlockVectorDefragmentationContextD2Ev(%class.VmaBlockVectorDefragmentationContext* nonnull %63) #15
  %71 = bitcast %class.VmaBlockVectorDefragmentationContext* %63 to i8*
  %72 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %70, i64 0, i32 13, i32 3
  %73 = load void (i8*, i8*)*, void (i8*, i8*)** %72, align 8
  %74 = icmp eq void (i8*, i8*)* %73, null
  br i1 %74, label %78, label %75

75:                                               ; preds = %65
  %76 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %70, i64 0, i32 13, i32 0
  %77 = load i8*, i8** %76, align 8
  tail call void %73(i8* %77, i8* nonnull %71) #15
  br label %79

78:                                               ; preds = %65
  tail call void @free(i8* %71) #15
  br label %79

79:                                               ; preds = %78, %75, %59
  %80 = icmp eq i64 %61, 0
  br i1 %80, label %43, label %59
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN27VmaDefragmentationContext_T8AddPoolsEjPKP9VmaPool_T(%struct.VmaDefragmentationContext_T*, i32, %struct.VmaPool_T** nocapture readonly) local_unnamed_addr #0 align 2 {
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %12, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 9
  %7 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 9, i32 2
  %8 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 9, i32 1
  %9 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 0
  %10 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 1
  %11 = zext i32 %1 to i64
  br label %13

12:                                               ; preds = %94, %3
  ret void

13:                                               ; preds = %94, %5
  %14 = phi i64 [ 0, %5 ], [ %95, %94 ]
  %15 = getelementptr inbounds %struct.VmaPool_T*, %struct.VmaPool_T** %2, i64 %14
  %16 = load %struct.VmaPool_T*, %struct.VmaPool_T** %15, align 8
  %17 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %16, i64 0, i32 0
  %18 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %16, i64 0, i32 0, i32 11
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %94

21:                                               ; preds = %13
  %22 = load i64, i64* %7, align 8
  br label %23

23:                                               ; preds = %27, %21
  %24 = phi i64 [ %22, %21 ], [ %25, %27 ]
  %25 = add i64 %24, -1
  %26 = icmp eq i64 %24, 0
  br i1 %26, label %36, label %27

27:                                               ; preds = %23
  %28 = load %class.VmaBlockVectorDefragmentationContext**, %class.VmaBlockVectorDefragmentationContext*** %8, align 8
  %29 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext*, %class.VmaBlockVectorDefragmentationContext** %28, i64 %25
  %30 = load %class.VmaBlockVectorDefragmentationContext*, %class.VmaBlockVectorDefragmentationContext** %29, align 8
  %31 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %30, i64 0, i32 10
  %32 = load %struct.VmaPool_T*, %struct.VmaPool_T** %31, align 8
  %33 = icmp eq %struct.VmaPool_T* %32, %16
  br i1 %33, label %34, label %23

34:                                               ; preds = %27
  %35 = icmp eq %class.VmaBlockVectorDefragmentationContext* %30, null
  br i1 %35, label %36, label %91

36:                                               ; preds = %23, %34
  %37 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %9, align 8
  %38 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %37, i64 0, i32 13, i32 1
  %39 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %38, align 8
  %40 = icmp eq i8* (i8*, i64, i64, i32)* %39, null
  br i1 %40, label %45, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %37, i64 0, i32 13, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = tail call i8* %39(i8* %43, i64 168, i64 8, i32 1) #15
  br label %47

45:                                               ; preds = %36
  %46 = tail call noalias i8* @aligned_alloc(i64 8, i64 168) #15
  br label %47

47:                                               ; preds = %41, %45
  %48 = phi i8* [ %44, %41 ], [ %46, %45 ]
  %49 = bitcast i8* %48 to %class.VmaBlockVectorDefragmentationContext*
  %50 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %9, align 8
  %51 = load i32, i32* %10, align 8
  %52 = bitcast i8* %48 to i32*
  store i32 0, i32* %52, align 8
  %53 = getelementptr inbounds i8, i8* %48, i64 4
  store i8 0, i8* %53, align 4
  %54 = getelementptr inbounds i8, i8* %48, i64 8
  %55 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %50, i64 0, i32 11
  %56 = load i8, i8* %55, align 8, !range !2
  %57 = icmp eq i8 %56, 0
  %58 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %50, i64 0, i32 13
  %59 = ptrtoint %struct.VkAllocationCallbacks* %58 to i64
  %60 = select i1 %57, i64 0, i64 %59
  %61 = bitcast i8* %54 to i64*
  store i64 %60, i64* %61, align 8
  %62 = getelementptr inbounds i8, i8* %48, i64 16
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 24, i1 false) #15
  %63 = getelementptr inbounds i8, i8* %48, i64 40
  %64 = load i8, i8* %55, align 8, !range !2
  %65 = icmp eq i8 %64, 0
  %66 = select i1 %65, i64 0, i64 %59
  %67 = bitcast i8* %63 to i64*
  store i64 %66, i64* %67, align 8
  %68 = getelementptr inbounds i8, i8* %48, i64 48
  %69 = getelementptr inbounds i8, i8* %48, i64 88
  %70 = bitcast i8* %69 to %struct.VmaAllocator_T**
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %68, i8 0, i64 33, i1 false) #15
  store %struct.VmaAllocator_T* %50, %struct.VmaAllocator_T** %70, align 8
  %71 = getelementptr inbounds i8, i8* %48, i64 96
  %72 = bitcast i8* %71 to %struct.VmaPool_T**
  store %struct.VmaPool_T* %16, %struct.VmaPool_T** %72, align 8
  %73 = getelementptr inbounds i8, i8* %48, i64 104
  %74 = bitcast i8* %73 to %struct.VmaBlockVector**
  store %struct.VmaBlockVector* %17, %struct.VmaBlockVector** %74, align 8
  %75 = getelementptr inbounds i8, i8* %48, i64 112
  %76 = bitcast i8* %75 to i32*
  store i32 %51, i32* %76, align 8
  %77 = getelementptr inbounds i8, i8* %48, i64 120
  %78 = bitcast i8* %77 to %class.VmaDefragmentationAlgorithm**
  store %class.VmaDefragmentationAlgorithm* null, %class.VmaDefragmentationAlgorithm** %78, align 8
  %79 = getelementptr inbounds i8, i8* %48, i64 128
  %80 = load i8, i8* %55, align 8, !range !2
  %81 = icmp eq i8 %80, 0
  %82 = select i1 %81, i64 0, i64 %59
  %83 = bitcast i8* %79 to i64*
  store i64 %82, i64* %83, align 8
  %84 = getelementptr inbounds i8, i8* %48, i64 136
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %84, i8 0, i64 25, i1 false) #15
  %85 = ptrtoint i8* %48 to i64
  %86 = load i64, i64* %7, align 8
  %87 = add i64 %86, 1
  tail call void @_ZN9VmaVectorIP36VmaBlockVectorDefragmentationContext15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.40* %6, i64 %87, i1 zeroext false) #15
  %88 = load %class.VmaBlockVectorDefragmentationContext**, %class.VmaBlockVectorDefragmentationContext*** %8, align 8
  %89 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext*, %class.VmaBlockVectorDefragmentationContext** %88, i64 %86
  %90 = bitcast %class.VmaBlockVectorDefragmentationContext** %89 to i64*
  store i64 %85, i64* %90, align 8
  br label %91

91:                                               ; preds = %34, %47
  %92 = phi %class.VmaBlockVectorDefragmentationContext* [ %49, %47 ], [ %30, %34 ]
  %93 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %92, i64 0, i32 16
  store i8 1, i8* %93, align 8
  br label %94

94:                                               ; preds = %91, %13
  %95 = add nuw nsw i64 %14, 1
  %96 = icmp eq i64 %95, %11
  br i1 %96, label %12, label %13
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN27VmaDefragmentationContext_T14AddAllocationsEjPKP15VmaAllocation_TPj(%struct.VmaDefragmentationContext_T*, i32, %struct.VmaAllocation_T** nocapture readonly, i32*) local_unnamed_addr #0 align 2 {
  %5 = icmp eq i32 %1, 0
  br i1 %5, label %14, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 9
  %8 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 9, i32 2
  %9 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 9, i32 1
  %10 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 0
  %11 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 1
  %12 = icmp eq i32* %3, null
  %13 = zext i32 %1 to i64
  br label %15

14:                                               ; preds = %183, %4
  ret void

15:                                               ; preds = %183, %6
  %16 = phi i64 [ 0, %6 ], [ %184, %183 ]
  %17 = getelementptr inbounds %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %2, i64 %16
  %18 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %17, align 8
  %19 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %18, i64 0, i32 5
  %20 = load i8, i8* %19, align 8
  %21 = icmp eq i8 %20, 1
  br i1 %21, label %22, label %183

22:                                               ; preds = %15
  %23 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %18, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load atomic i32, i32* %23 seq_cst, align 4
  %25 = icmp eq i32 %24, -1
  br i1 %25, label %183, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %18, i64 0, i32 9, i32 0, i32 0
  %28 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %27, align 8
  %29 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %28, i64 0, i32 1
  %30 = load %struct.VmaPool_T*, %struct.VmaPool_T** %29, align 8
  %31 = icmp eq %struct.VmaPool_T* %30, null
  br i1 %31, label %107, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %30, i64 0, i32 0
  %34 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %30, i64 0, i32 0, i32 11
  %35 = load i32, i32* %34, align 8
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %183

37:                                               ; preds = %32
  %38 = load i64, i64* %8, align 8
  br label %39

39:                                               ; preds = %43, %37
  %40 = phi i64 [ %38, %37 ], [ %41, %43 ]
  %41 = add i64 %40, -1
  %42 = icmp eq i64 %40, 0
  br i1 %42, label %53, label %43

43:                                               ; preds = %39
  %44 = load %class.VmaBlockVectorDefragmentationContext**, %class.VmaBlockVectorDefragmentationContext*** %9, align 8
  %45 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext*, %class.VmaBlockVectorDefragmentationContext** %44, i64 %41
  %46 = load %class.VmaBlockVectorDefragmentationContext*, %class.VmaBlockVectorDefragmentationContext** %45, align 8
  %47 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %46, i64 0, i32 10
  %48 = load %struct.VmaPool_T*, %struct.VmaPool_T** %47, align 8
  %49 = icmp eq %struct.VmaPool_T* %48, %30
  br i1 %49, label %50, label %39

50:                                               ; preds = %43
  %51 = ptrtoint %class.VmaBlockVectorDefragmentationContext* %46 to i64
  %52 = icmp eq %class.VmaBlockVectorDefragmentationContext* %46, null
  br i1 %52, label %53, label %168

53:                                               ; preds = %39, %50
  %54 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %10, align 8
  %55 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %54, i64 0, i32 13, i32 1
  %56 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %55, align 8
  %57 = icmp eq i8* (i8*, i64, i64, i32)* %56, null
  br i1 %57, label %62, label %58

58:                                               ; preds = %53
  %59 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %54, i64 0, i32 13, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = tail call i8* %56(i8* %60, i64 168, i64 8, i32 1) #15
  br label %64

62:                                               ; preds = %53
  %63 = tail call noalias i8* @aligned_alloc(i64 8, i64 168) #15
  br label %64

64:                                               ; preds = %58, %62
  %65 = phi i8* [ %61, %58 ], [ %63, %62 ]
  %66 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %10, align 8
  %67 = load i32, i32* %11, align 8
  %68 = bitcast i8* %65 to i32*
  store i32 0, i32* %68, align 8
  %69 = getelementptr inbounds i8, i8* %65, i64 4
  store i8 0, i8* %69, align 4
  %70 = getelementptr inbounds i8, i8* %65, i64 8
  %71 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %66, i64 0, i32 11
  %72 = load i8, i8* %71, align 8, !range !2
  %73 = icmp eq i8 %72, 0
  %74 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %66, i64 0, i32 13
  %75 = ptrtoint %struct.VkAllocationCallbacks* %74 to i64
  %76 = select i1 %73, i64 0, i64 %75
  %77 = bitcast i8* %70 to i64*
  store i64 %76, i64* %77, align 8
  %78 = getelementptr inbounds i8, i8* %65, i64 16
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %78, i8 0, i64 24, i1 false) #15
  %79 = getelementptr inbounds i8, i8* %65, i64 40
  %80 = load i8, i8* %71, align 8, !range !2
  %81 = icmp eq i8 %80, 0
  %82 = select i1 %81, i64 0, i64 %75
  %83 = bitcast i8* %79 to i64*
  store i64 %82, i64* %83, align 8
  %84 = getelementptr inbounds i8, i8* %65, i64 48
  %85 = getelementptr inbounds i8, i8* %65, i64 88
  %86 = bitcast i8* %85 to %struct.VmaAllocator_T**
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %84, i8 0, i64 33, i1 false) #15
  store %struct.VmaAllocator_T* %66, %struct.VmaAllocator_T** %86, align 8
  %87 = getelementptr inbounds i8, i8* %65, i64 96
  %88 = bitcast i8* %87 to %struct.VmaPool_T**
  store %struct.VmaPool_T* %30, %struct.VmaPool_T** %88, align 8
  %89 = getelementptr inbounds i8, i8* %65, i64 104
  %90 = bitcast i8* %89 to %struct.VmaBlockVector**
  store %struct.VmaBlockVector* %33, %struct.VmaBlockVector** %90, align 8
  %91 = getelementptr inbounds i8, i8* %65, i64 112
  %92 = bitcast i8* %91 to i32*
  store i32 %67, i32* %92, align 8
  %93 = getelementptr inbounds i8, i8* %65, i64 120
  %94 = bitcast i8* %93 to %class.VmaDefragmentationAlgorithm**
  store %class.VmaDefragmentationAlgorithm* null, %class.VmaDefragmentationAlgorithm** %94, align 8
  %95 = getelementptr inbounds i8, i8* %65, i64 128
  %96 = load i8, i8* %71, align 8, !range !2
  %97 = icmp eq i8 %96, 0
  %98 = select i1 %97, i64 0, i64 %75
  %99 = bitcast i8* %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds i8, i8* %65, i64 136
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %100, i8 0, i64 25, i1 false) #15
  %101 = ptrtoint i8* %65 to i64
  %102 = load i64, i64* %8, align 8
  %103 = add i64 %102, 1
  tail call void @_ZN9VmaVectorIP36VmaBlockVectorDefragmentationContext15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.40* %7, i64 %103, i1 zeroext false) #15
  %104 = load %class.VmaBlockVectorDefragmentationContext**, %class.VmaBlockVectorDefragmentationContext*** %9, align 8
  %105 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext*, %class.VmaBlockVectorDefragmentationContext** %104, i64 %102
  %106 = bitcast %class.VmaBlockVectorDefragmentationContext** %105 to i64*
  store i64 %101, i64* %106, align 8
  br label %168

107:                                              ; preds = %26
  %108 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %18, i64 0, i32 4
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 8, i64 %110
  %112 = load %class.VmaBlockVectorDefragmentationContext*, %class.VmaBlockVectorDefragmentationContext** %111, align 8
  %113 = ptrtoint %class.VmaBlockVectorDefragmentationContext* %112 to i64
  %114 = icmp eq %class.VmaBlockVectorDefragmentationContext* %112, null
  br i1 %114, label %115, label %168

115:                                              ; preds = %107
  %116 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %10, align 8
  %117 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %116, i64 0, i32 13, i32 1
  %118 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %117, align 8
  %119 = icmp eq i8* (i8*, i64, i64, i32)* %118, null
  br i1 %119, label %124, label %120

120:                                              ; preds = %115
  %121 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %116, i64 0, i32 13, i32 0
  %122 = load i8*, i8** %121, align 8
  %123 = tail call i8* %118(i8* %122, i64 168, i64 8, i32 1) #15
  br label %126

124:                                              ; preds = %115
  %125 = tail call noalias i8* @aligned_alloc(i64 8, i64 168) #15
  br label %126

126:                                              ; preds = %120, %124
  %127 = phi i8* [ %123, %120 ], [ %125, %124 ]
  %128 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %10, align 8
  %129 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %128, i64 0, i32 20, i64 %110
  %130 = bitcast %struct.VmaBlockVector** %129 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = load i32, i32* %11, align 8
  %133 = bitcast i8* %127 to i32*
  store i32 0, i32* %133, align 8
  %134 = getelementptr inbounds i8, i8* %127, i64 4
  store i8 0, i8* %134, align 4
  %135 = getelementptr inbounds i8, i8* %127, i64 8
  %136 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %128, i64 0, i32 11
  %137 = load i8, i8* %136, align 8, !range !2
  %138 = icmp eq i8 %137, 0
  %139 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %128, i64 0, i32 13
  %140 = ptrtoint %struct.VkAllocationCallbacks* %139 to i64
  %141 = select i1 %138, i64 0, i64 %140
  %142 = bitcast i8* %135 to i64*
  store i64 %141, i64* %142, align 8
  %143 = getelementptr inbounds i8, i8* %127, i64 16
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %143, i8 0, i64 24, i1 false) #15
  %144 = getelementptr inbounds i8, i8* %127, i64 40
  %145 = load i8, i8* %136, align 8, !range !2
  %146 = icmp eq i8 %145, 0
  %147 = select i1 %146, i64 0, i64 %140
  %148 = bitcast i8* %144 to i64*
  store i64 %147, i64* %148, align 8
  %149 = getelementptr inbounds i8, i8* %127, i64 48
  %150 = getelementptr inbounds i8, i8* %127, i64 88
  %151 = bitcast i8* %150 to %struct.VmaAllocator_T**
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %149, i8 0, i64 33, i1 false) #15
  store %struct.VmaAllocator_T* %128, %struct.VmaAllocator_T** %151, align 8
  %152 = getelementptr inbounds i8, i8* %127, i64 96
  %153 = bitcast i8* %152 to %struct.VmaPool_T**
  store %struct.VmaPool_T* null, %struct.VmaPool_T** %153, align 8
  %154 = getelementptr inbounds i8, i8* %127, i64 104
  %155 = bitcast i8* %154 to i64*
  store i64 %131, i64* %155, align 8
  %156 = getelementptr inbounds i8, i8* %127, i64 112
  %157 = bitcast i8* %156 to i32*
  store i32 %132, i32* %157, align 8
  %158 = getelementptr inbounds i8, i8* %127, i64 120
  %159 = bitcast i8* %158 to %class.VmaDefragmentationAlgorithm**
  store %class.VmaDefragmentationAlgorithm* null, %class.VmaDefragmentationAlgorithm** %159, align 8
  %160 = getelementptr inbounds i8, i8* %127, i64 128
  %161 = load i8, i8* %136, align 8, !range !2
  %162 = icmp eq i8 %161, 0
  %163 = select i1 %162, i64 0, i64 %140
  %164 = bitcast i8* %160 to i64*
  store i64 %163, i64* %164, align 8
  %165 = getelementptr inbounds i8, i8* %127, i64 136
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %165, i8 0, i64 25, i1 false) #15
  %166 = ptrtoint i8* %127 to i64
  %167 = bitcast %class.VmaBlockVectorDefragmentationContext** %111 to i8**
  store i8* %127, i8** %167, align 8
  br label %168

168:                                              ; preds = %126, %107, %50, %64
  %169 = phi i64 [ %166, %126 ], [ %113, %107 ], [ %101, %64 ], [ %51, %50 ]
  %170 = inttoptr i64 %169 to %class.VmaBlockVectorDefragmentationContext*
  %171 = icmp eq i64 %169, 0
  br i1 %171, label %183, label %172

172:                                              ; preds = %168
  %173 = getelementptr inbounds i32, i32* %3, i64 %16
  %174 = select i1 %12, i32* null, i32* %173
  %175 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %170, i64 0, i32 15
  %176 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %170, i64 0, i32 15, i32 2
  %177 = load i64, i64* %176, align 8
  %178 = add i64 %177, 1
  tail call void @_ZN9VmaVectorIN36VmaBlockVectorDefragmentationContext9AllocInfoE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.30* %175, i64 %178, i1 zeroext false) #15
  %179 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %170, i64 0, i32 15, i32 1
  %180 = load %"struct.VmaBlockVectorDefragmentationContext::AllocInfo"*, %"struct.VmaBlockVectorDefragmentationContext::AllocInfo"** %179, align 8
  %181 = getelementptr inbounds %"struct.VmaBlockVectorDefragmentationContext::AllocInfo", %"struct.VmaBlockVectorDefragmentationContext::AllocInfo"* %180, i64 %177, i32 0
  store %struct.VmaAllocation_T* %18, %struct.VmaAllocation_T** %181, align 8
  %182 = getelementptr inbounds %"struct.VmaBlockVectorDefragmentationContext::AllocInfo", %"struct.VmaBlockVectorDefragmentationContext::AllocInfo"* %180, i64 %177, i32 1
  store i32* %174, i32** %182, align 8
  br label %183

183:                                              ; preds = %32, %172, %168, %22, %15
  %184 = add nuw nsw i64 %16, 1
  %185 = icmp eq i64 %184, %13
  br i1 %185, label %14, label %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN27VmaDefragmentationContext_T10DefragmentEmjmjP17VkCommandBuffer_TP23VmaDefragmentationStatsj(%struct.VmaDefragmentationContext_T* nocapture, i64, i32, i64, i32, %struct.VkCommandBuffer_T*, %struct.VmaDefragmentationStats*, i32) local_unnamed_addr #0 align 2 {
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  store i64 %1, i64* %9, align 8
  store i32 %2, i32* %10, align 4
  store i64 %3, i64* %11, align 8
  store i32 %4, i32* %12, align 4
  %13 = icmp eq %struct.VmaDefragmentationStats* %6, null
  br i1 %13, label %16, label %14

14:                                               ; preds = %8
  %15 = bitcast %struct.VmaDefragmentationStats* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 0, i64 24, i1 false)
  br label %16

16:                                               ; preds = %8, %14
  %17 = and i32 %7, 1
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %32, label %19

19:                                               ; preds = %16
  %20 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 4
  store i64 %1, i64* %20, align 8
  %21 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 5
  store i32 %2, i32* %21, align 8
  %22 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 6
  store i64 %3, i64* %22, align 8
  %23 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 7
  store i32 %4, i32* %23, align 8
  %24 = icmp eq i64 %1, 0
  %25 = icmp eq i32 %2, 0
  %26 = and i1 %24, %25
  br i1 %26, label %27, label %31

27:                                               ; preds = %19
  %28 = icmp eq i64 %3, 0
  %29 = icmp eq i32 %4, 0
  %30 = and i1 %28, %29
  br i1 %30, label %91, label %31

31:                                               ; preds = %27, %19
  br label %91

32:                                               ; preds = %16
  %33 = icmp eq %struct.VkCommandBuffer_T* %5, null
  br i1 %33, label %34, label %35

34:                                               ; preds = %32
  store i64 0, i64* %11, align 8
  store i32 0, i32* %12, align 4
  br label %35

35:                                               ; preds = %34, %32
  %36 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 0
  %37 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %36, align 8
  %38 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %37, i64 0, i32 19, i32 0
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %50

41:                                               ; preds = %65, %35
  %42 = phi i32 [ 0, %35 ], [ %67, %65 ]
  %43 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 9, i32 2
  %44 = load i64, i64* %43, align 8
  %45 = icmp ne i64 %44, 0
  %46 = icmp sgt i32 %42, -1
  %47 = and i1 %46, %45
  br i1 %47, label %48, label %91

48:                                               ; preds = %41
  %49 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 9, i32 1
  br label %75

50:                                               ; preds = %35, %65
  %51 = phi %struct.VmaAllocator_T* [ %66, %65 ], [ %37, %35 ]
  %52 = phi i64 [ %68, %65 ], [ 0, %35 ]
  %53 = phi i32 [ %67, %65 ], [ 0, %35 ]
  %54 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 8, i64 %52
  %55 = load %class.VmaBlockVectorDefragmentationContext*, %class.VmaBlockVectorDefragmentationContext** %54, align 8
  %56 = icmp eq %class.VmaBlockVectorDefragmentationContext* %55, null
  br i1 %56, label %65, label %57

57:                                               ; preds = %50
  %58 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %55, i64 0, i32 11
  %59 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %58, align 8
  call void @_ZN14VmaBlockVector10DefragmentEP36VmaBlockVectorDefragmentationContextP23VmaDefragmentationStatsjRmRjS4_S5_P17VkCommandBuffer_T(%struct.VmaBlockVector* %59, %class.VmaBlockVectorDefragmentationContext* nonnull %55, %struct.VmaDefragmentationStats* %6, i32 %7, i64* nonnull dereferenceable(8) %9, i32* nonnull dereferenceable(4) %10, i64* nonnull dereferenceable(8) %11, i32* nonnull dereferenceable(4) %12, %struct.VkCommandBuffer_T* %5)
  %60 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %55, i64 0, i32 0
  %61 = load i32, i32* %60, align 8
  %62 = icmp eq i32 %61, 0
  %63 = select i1 %62, i32 %53, i32 %61
  %64 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %36, align 8
  br label %65

65:                                               ; preds = %57, %50
  %66 = phi %struct.VmaAllocator_T* [ %51, %50 ], [ %64, %57 ]
  %67 = phi i32 [ %53, %50 ], [ %63, %57 ]
  %68 = add nuw nsw i64 %52, 1
  %69 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %66, i64 0, i32 19, i32 0
  %70 = load i32, i32* %69, align 8
  %71 = zext i32 %70 to i64
  %72 = icmp ult i64 %68, %71
  %73 = icmp sgt i32 %67, -1
  %74 = and i1 %73, %72
  br i1 %74, label %50, label %41

75:                                               ; preds = %48, %75
  %76 = phi i64 [ 0, %48 ], [ %87, %75 ]
  %77 = phi i32 [ %42, %48 ], [ %86, %75 ]
  %78 = load %class.VmaBlockVectorDefragmentationContext**, %class.VmaBlockVectorDefragmentationContext*** %49, align 8
  %79 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext*, %class.VmaBlockVectorDefragmentationContext** %78, i64 %76
  %80 = load %class.VmaBlockVectorDefragmentationContext*, %class.VmaBlockVectorDefragmentationContext** %79, align 8
  %81 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %80, i64 0, i32 11
  %82 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %81, align 8
  call void @_ZN14VmaBlockVector10DefragmentEP36VmaBlockVectorDefragmentationContextP23VmaDefragmentationStatsjRmRjS4_S5_P17VkCommandBuffer_T(%struct.VmaBlockVector* %82, %class.VmaBlockVectorDefragmentationContext* %80, %struct.VmaDefragmentationStats* %6, i32 %7, i64* nonnull dereferenceable(8) %9, i32* nonnull dereferenceable(4) %10, i64* nonnull dereferenceable(8) %11, i32* nonnull dereferenceable(4) %12, %struct.VkCommandBuffer_T* %5)
  %83 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %80, i64 0, i32 0
  %84 = load i32, i32* %83, align 8
  %85 = icmp eq i32 %84, 0
  %86 = select i1 %85, i32 %77, i32 %84
  %87 = add nuw i64 %76, 1
  %88 = icmp ult i64 %87, %44
  %89 = icmp sgt i32 %86, -1
  %90 = and i1 %89, %88
  br i1 %90, label %75, label %91

91:                                               ; preds = %75, %41, %27, %31
  %92 = phi i32 [ 1, %31 ], [ 0, %27 ], [ %42, %41 ], [ %86, %75 ]
  ret i32 %92
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN27VmaDefragmentationContext_T19DefragmentPassBeginEP26VmaDefragmentationPassInfo(%struct.VmaDefragmentationContext_T* nocapture, %struct.VmaDefragmentationPassInfo* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.VmaDefragmentationPassInfo, %struct.VmaDefragmentationPassInfo* %1, i64 0, i32 1
  %4 = load %struct.VmaDefragmentationPassMoveInfo*, %struct.VmaDefragmentationPassMoveInfo** %3, align 8
  %5 = getelementptr inbounds %struct.VmaDefragmentationPassInfo, %struct.VmaDefragmentationPassInfo* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 0
  %8 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %7, align 8
  %9 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %8, i64 0, i32 19, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %19, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 3
  %14 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 2
  %15 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 4
  %16 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 5
  %17 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 6
  %18 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 7
  br label %33

19:                                               ; preds = %111, %2
  %20 = phi i32 [ %6, %2 ], [ %112, %111 ]
  %21 = phi %struct.VmaDefragmentationPassMoveInfo* [ %4, %2 ], [ %113, %111 ]
  %22 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 9, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %120, label %25

25:                                               ; preds = %19
  %26 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 9, i32 1
  %27 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 3
  %28 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 2
  %29 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 4
  %30 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 5
  %31 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 6
  %32 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 7
  br label %124

33:                                               ; preds = %12, %111
  %34 = phi i64 [ 0, %12 ], [ %114, %111 ]
  %35 = phi %struct.VmaDefragmentationPassMoveInfo* [ %4, %12 ], [ %113, %111 ]
  %36 = phi i32 [ %6, %12 ], [ %112, %111 ]
  %37 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 8, i64 %34
  %38 = load %class.VmaBlockVectorDefragmentationContext*, %class.VmaBlockVectorDefragmentationContext** %37, align 8
  %39 = icmp eq %class.VmaBlockVectorDefragmentationContext* %38, null
  br i1 %39, label %111, label %40

40:                                               ; preds = %33
  %41 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %38, i64 0, i32 7
  %42 = load i8, i8* %41, align 8, !range !2
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %44, label %53

44:                                               ; preds = %40
  %45 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %38, i64 0, i32 11
  %46 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %45, align 8
  %47 = load %struct.VmaDefragmentationStats*, %struct.VmaDefragmentationStats** %13, align 8
  %48 = load i32, i32* %14, align 4
  tail call void @_ZN14VmaBlockVector10DefragmentEP36VmaBlockVectorDefragmentationContextP23VmaDefragmentationStatsjRmRjS4_S5_P17VkCommandBuffer_T(%struct.VmaBlockVector* %46, %class.VmaBlockVectorDefragmentationContext* nonnull %38, %struct.VmaDefragmentationStats* %47, i32 %48, i64* dereferenceable(8) %15, i32* dereferenceable(4) %16, i64* dereferenceable(8) %17, i32* dereferenceable(4) %18, %struct.VkCommandBuffer_T* null)
  %49 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %38, i64 0, i32 0
  %50 = load i32, i32* %49, align 8
  %51 = icmp slt i32 %50, 0
  br i1 %51, label %111, label %52

52:                                               ; preds = %44
  store i8 1, i8* %41, align 8
  br label %53

53:                                               ; preds = %40, %52
  %54 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %38, i64 0, i32 11
  %55 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %54, align 8
  %56 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %55, i64 0, i32 13
  %57 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %55, i64 0, i32 0
  %58 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %57, align 8
  %59 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %58, i64 0, i32 0
  %60 = load i8, i8* %59, align 8, !range !2
  %61 = icmp eq i8 %60, 0
  %62 = select i1 %61, %class.VmaRWMutex* null, %class.VmaRWMutex* %56
  br i1 %61, label %65, label %63

63:                                               ; preds = %53
  %64 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %62, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %64) #15
  br label %65

65:                                               ; preds = %63, %53
  %66 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %38, i64 0, i32 4, i32 2
  %67 = load i64, i64* %66, align 8
  %68 = trunc i64 %67 to i32
  %69 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %38, i64 0, i32 5
  %70 = load i32, i32* %69, align 8
  %71 = sub i32 %68, %70
  %72 = icmp ugt i32 %71, %36
  %73 = select i1 %72, i32 %36, i32 %71
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %77, label %75

75:                                               ; preds = %65
  %76 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %38, i64 0, i32 4, i32 1
  br label %82

77:                                               ; preds = %82, %65
  %78 = phi i32 [ %70, %65 ], [ %106, %82 ]
  %79 = add i32 %78, %73
  store i32 %79, i32* %69, align 8
  br i1 %61, label %107, label %80

80:                                               ; preds = %77
  %81 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %62, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %81) #15
  br label %107

82:                                               ; preds = %82, %75
  %83 = phi i32 [ %70, %75 ], [ %106, %82 ]
  %84 = phi %struct.VmaDefragmentationPassMoveInfo* [ %35, %75 ], [ %103, %82 ]
  %85 = phi i32 [ 0, %75 ], [ %104, %82 ]
  %86 = add i32 %85, %83
  %87 = zext i32 %86 to i64
  %88 = load %struct.VmaDefragmentationMove*, %struct.VmaDefragmentationMove** %76, align 8
  %89 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %88, i64 %87, i32 5
  %90 = bitcast %struct.VmaAllocation_T** %89 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = bitcast %struct.VmaDefragmentationPassMoveInfo* %84 to i64*
  store i64 %91, i64* %92, align 8
  %93 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %88, i64 %87, i32 7
  %94 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %93, align 8
  %95 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %94, i64 0, i32 4
  %96 = bitcast %struct.VkDeviceMemory_T** %95 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = getelementptr inbounds %struct.VmaDefragmentationPassMoveInfo, %struct.VmaDefragmentationPassMoveInfo* %84, i64 0, i32 1
  %99 = bitcast %struct.VkDeviceMemory_T** %98 to i64*
  store i64 %97, i64* %99, align 8
  %100 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %88, i64 %87, i32 3
  %101 = load i64, i64* %100, align 8
  %102 = getelementptr inbounds %struct.VmaDefragmentationPassMoveInfo, %struct.VmaDefragmentationPassMoveInfo* %84, i64 0, i32 2
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %struct.VmaDefragmentationPassMoveInfo, %struct.VmaDefragmentationPassMoveInfo* %84, i64 1
  %104 = add nuw i32 %85, 1
  %105 = icmp ult i32 %104, %73
  %106 = load i32, i32* %69, align 8
  br i1 %105, label %82, label %77

107:                                              ; preds = %77, %80
  %108 = sub i32 %36, %73
  %109 = zext i32 %73 to i64
  %110 = getelementptr inbounds %struct.VmaDefragmentationPassMoveInfo, %struct.VmaDefragmentationPassMoveInfo* %35, i64 %109
  br label %111

111:                                              ; preds = %107, %33, %44
  %112 = phi i32 [ %36, %44 ], [ %108, %107 ], [ %36, %33 ]
  %113 = phi %struct.VmaDefragmentationPassMoveInfo* [ %35, %44 ], [ %110, %107 ], [ %35, %33 ]
  %114 = add nuw nsw i64 %34, 1
  %115 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %7, align 8
  %116 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %115, i64 0, i32 19, i32 0
  %117 = load i32, i32* %116, align 8
  %118 = zext i32 %117 to i64
  %119 = icmp ult i64 %114, %118
  br i1 %119, label %33, label %19

120:                                              ; preds = %201, %19
  %121 = phi i32 [ %20, %19 ], [ %202, %201 ]
  %122 = load i32, i32* %5, align 8
  %123 = sub i32 %122, %121
  store i32 %123, i32* %5, align 8
  ret i32 0

124:                                              ; preds = %201, %25
  %125 = phi %struct.VmaDefragmentationPassMoveInfo* [ %21, %25 ], [ %203, %201 ]
  %126 = phi i64 [ 0, %25 ], [ %204, %201 ]
  %127 = phi i32 [ %20, %25 ], [ %202, %201 ]
  %128 = load %class.VmaBlockVectorDefragmentationContext**, %class.VmaBlockVectorDefragmentationContext*** %26, align 8
  %129 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext*, %class.VmaBlockVectorDefragmentationContext** %128, i64 %126
  %130 = load %class.VmaBlockVectorDefragmentationContext*, %class.VmaBlockVectorDefragmentationContext** %129, align 8
  %131 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %130, i64 0, i32 7
  %132 = load i8, i8* %131, align 8, !range !2
  %133 = icmp eq i8 %132, 0
  br i1 %133, label %134, label %143

134:                                              ; preds = %124
  %135 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %130, i64 0, i32 11
  %136 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %135, align 8
  %137 = load %struct.VmaDefragmentationStats*, %struct.VmaDefragmentationStats** %27, align 8
  %138 = load i32, i32* %28, align 4
  tail call void @_ZN14VmaBlockVector10DefragmentEP36VmaBlockVectorDefragmentationContextP23VmaDefragmentationStatsjRmRjS4_S5_P17VkCommandBuffer_T(%struct.VmaBlockVector* %136, %class.VmaBlockVectorDefragmentationContext* %130, %struct.VmaDefragmentationStats* %137, i32 %138, i64* dereferenceable(8) %29, i32* dereferenceable(4) %30, i64* dereferenceable(8) %31, i32* dereferenceable(4) %32, %struct.VkCommandBuffer_T* null)
  %139 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %130, i64 0, i32 0
  %140 = load i32, i32* %139, align 8
  %141 = icmp slt i32 %140, 0
  br i1 %141, label %201, label %142

142:                                              ; preds = %134
  store i8 1, i8* %131, align 8
  br label %143

143:                                              ; preds = %124, %142
  %144 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %130, i64 0, i32 11
  %145 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %144, align 8
  %146 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %145, i64 0, i32 13
  %147 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %145, i64 0, i32 0
  %148 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %147, align 8
  %149 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %148, i64 0, i32 0
  %150 = load i8, i8* %149, align 8, !range !2
  %151 = icmp eq i8 %150, 0
  %152 = select i1 %151, %class.VmaRWMutex* null, %class.VmaRWMutex* %146
  br i1 %151, label %155, label %153

153:                                              ; preds = %143
  %154 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %152, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %154) #15
  br label %155

155:                                              ; preds = %153, %143
  %156 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %130, i64 0, i32 4, i32 2
  %157 = load i64, i64* %156, align 8
  %158 = trunc i64 %157 to i32
  %159 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %130, i64 0, i32 5
  %160 = load i32, i32* %159, align 8
  %161 = sub i32 %158, %160
  %162 = icmp ugt i32 %161, %127
  %163 = select i1 %162, i32 %127, i32 %161
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %167, label %165

165:                                              ; preds = %155
  %166 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %130, i64 0, i32 4, i32 1
  br label %172

167:                                              ; preds = %172, %155
  %168 = phi i32 [ %160, %155 ], [ %196, %172 ]
  %169 = add i32 %168, %163
  store i32 %169, i32* %159, align 8
  br i1 %151, label %197, label %170

170:                                              ; preds = %167
  %171 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %152, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %171) #15
  br label %197

172:                                              ; preds = %172, %165
  %173 = phi i32 [ %160, %165 ], [ %196, %172 ]
  %174 = phi %struct.VmaDefragmentationPassMoveInfo* [ %125, %165 ], [ %193, %172 ]
  %175 = phi i32 [ 0, %165 ], [ %194, %172 ]
  %176 = add i32 %175, %173
  %177 = zext i32 %176 to i64
  %178 = load %struct.VmaDefragmentationMove*, %struct.VmaDefragmentationMove** %166, align 8
  %179 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %178, i64 %177, i32 5
  %180 = bitcast %struct.VmaAllocation_T** %179 to i64*
  %181 = load i64, i64* %180, align 8
  %182 = bitcast %struct.VmaDefragmentationPassMoveInfo* %174 to i64*
  store i64 %181, i64* %182, align 8
  %183 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %178, i64 %177, i32 7
  %184 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %183, align 8
  %185 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %184, i64 0, i32 4
  %186 = bitcast %struct.VkDeviceMemory_T** %185 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = getelementptr inbounds %struct.VmaDefragmentationPassMoveInfo, %struct.VmaDefragmentationPassMoveInfo* %174, i64 0, i32 1
  %189 = bitcast %struct.VkDeviceMemory_T** %188 to i64*
  store i64 %187, i64* %189, align 8
  %190 = getelementptr inbounds %struct.VmaDefragmentationMove, %struct.VmaDefragmentationMove* %178, i64 %177, i32 3
  %191 = load i64, i64* %190, align 8
  %192 = getelementptr inbounds %struct.VmaDefragmentationPassMoveInfo, %struct.VmaDefragmentationPassMoveInfo* %174, i64 0, i32 2
  store i64 %191, i64* %192, align 8
  %193 = getelementptr inbounds %struct.VmaDefragmentationPassMoveInfo, %struct.VmaDefragmentationPassMoveInfo* %174, i64 1
  %194 = add nuw i32 %175, 1
  %195 = icmp ult i32 %194, %163
  %196 = load i32, i32* %159, align 8
  br i1 %195, label %172, label %167

197:                                              ; preds = %167, %170
  %198 = sub i32 %127, %163
  %199 = zext i32 %163 to i64
  %200 = getelementptr inbounds %struct.VmaDefragmentationPassMoveInfo, %struct.VmaDefragmentationPassMoveInfo* %125, i64 %199
  br label %201

201:                                              ; preds = %134, %197
  %202 = phi i32 [ %198, %197 ], [ %127, %134 ]
  %203 = phi %struct.VmaDefragmentationPassMoveInfo* [ %200, %197 ], [ %125, %134 ]
  %204 = add nuw i64 %126, 1
  %205 = icmp eq i64 %204, %23
  br i1 %205, label %120, label %124
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN27VmaDefragmentationContext_T17DefragmentPassEndEv(%struct.VmaDefragmentationContext_T* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 0
  %3 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %2, align 8
  %4 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %3, i64 0, i32 19, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 3
  br label %17

9:                                                ; preds = %40, %1
  %10 = phi i32 [ 0, %1 ], [ %42, %40 ]
  %11 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 9, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %48, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 9, i32 1
  %16 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 3
  br label %50

17:                                               ; preds = %7, %40
  %18 = phi %struct.VmaAllocator_T* [ %3, %7 ], [ %41, %40 ]
  %19 = phi i64 [ 0, %7 ], [ %43, %40 ]
  %20 = phi i32 [ 0, %7 ], [ %42, %40 ]
  %21 = getelementptr inbounds %struct.VmaDefragmentationContext_T, %struct.VmaDefragmentationContext_T* %0, i64 0, i32 8, i64 %19
  %22 = load %class.VmaBlockVectorDefragmentationContext*, %class.VmaBlockVectorDefragmentationContext** %21, align 8
  %23 = icmp eq %class.VmaBlockVectorDefragmentationContext* %22, null
  br i1 %23, label %40, label %24

24:                                               ; preds = %17
  %25 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %22, i64 0, i32 7
  %26 = load i8, i8* %25, align 8, !range !2
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %40, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %22, i64 0, i32 11
  %30 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %29, align 8
  %31 = load %struct.VmaDefragmentationStats*, %struct.VmaDefragmentationStats** %8, align 8
  tail call void @_ZN14VmaBlockVector22CommitDefragmentationsEP36VmaBlockVectorDefragmentationContextP23VmaDefragmentationStats(%struct.VmaBlockVector* %30, %class.VmaBlockVectorDefragmentationContext* nonnull %22, %struct.VmaDefragmentationStats* %31)
  %32 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %22, i64 0, i32 4, i32 2
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %22, i64 0, i32 6
  %35 = load i32, i32* %34, align 4
  %36 = zext i32 %35 to i64
  %37 = icmp eq i64 %33, %36
  %38 = select i1 %37, i32 %20, i32 1
  %39 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %2, align 8
  br label %40

40:                                               ; preds = %28, %17, %24
  %41 = phi %struct.VmaAllocator_T* [ %18, %24 ], [ %18, %17 ], [ %39, %28 ]
  %42 = phi i32 [ 1, %24 ], [ %20, %17 ], [ %38, %28 ]
  %43 = add nuw nsw i64 %19, 1
  %44 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %41, i64 0, i32 19, i32 0
  %45 = load i32, i32* %44, align 8
  %46 = zext i32 %45 to i64
  %47 = icmp ult i64 %43, %46
  br i1 %47, label %17, label %9

48:                                               ; preds = %70, %9
  %49 = phi i32 [ %10, %9 ], [ %71, %70 ]
  ret i32 %49

50:                                               ; preds = %70, %14
  %51 = phi i64 [ 0, %14 ], [ %72, %70 ]
  %52 = phi i32 [ %10, %14 ], [ %71, %70 ]
  %53 = load %class.VmaBlockVectorDefragmentationContext**, %class.VmaBlockVectorDefragmentationContext*** %15, align 8
  %54 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext*, %class.VmaBlockVectorDefragmentationContext** %53, i64 %51
  %55 = load %class.VmaBlockVectorDefragmentationContext*, %class.VmaBlockVectorDefragmentationContext** %54, align 8
  %56 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %55, i64 0, i32 7
  %57 = load i8, i8* %56, align 8, !range !2
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %70, label %59

59:                                               ; preds = %50
  %60 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %55, i64 0, i32 11
  %61 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %60, align 8
  %62 = load %struct.VmaDefragmentationStats*, %struct.VmaDefragmentationStats** %16, align 8
  tail call void @_ZN14VmaBlockVector22CommitDefragmentationsEP36VmaBlockVectorDefragmentationContextP23VmaDefragmentationStats(%struct.VmaBlockVector* %61, %class.VmaBlockVectorDefragmentationContext* %55, %struct.VmaDefragmentationStats* %62)
  %63 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %55, i64 0, i32 4, i32 2
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %class.VmaBlockVectorDefragmentationContext, %class.VmaBlockVectorDefragmentationContext* %55, i64 0, i32 6
  %66 = load i32, i32* %65, align 4
  %67 = zext i32 %66 to i64
  %68 = icmp eq i64 %64, %67
  %69 = select i1 %68, i32 %52, i32 1
  br label %70

70:                                               ; preds = %50, %59
  %71 = phi i32 [ %69, %59 ], [ 1, %50 ]
  %72 = add nuw i64 %51, 1
  %73 = icmp eq i64 %72, %12
  br i1 %73, label %48, label %50
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN28VmaAllocationObjectAllocatorC2EPK21VkAllocationCallbacks(%class.VmaAllocationObjectAllocator* nocapture, %struct.VkAllocationCallbacks*) unnamed_addr #0 align 2 {
  %3 = bitcast %class.VmaAllocationObjectAllocator* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 40, i1 false) #15
  %4 = getelementptr inbounds %class.VmaAllocationObjectAllocator, %class.VmaAllocationObjectAllocator* %0, i64 0, i32 1, i32 0
  store %struct.VkAllocationCallbacks* %1, %struct.VkAllocationCallbacks** %4, align 8
  %5 = getelementptr inbounds %class.VmaAllocationObjectAllocator, %class.VmaAllocationObjectAllocator* %0, i64 0, i32 1, i32 1
  store i32 1024, i32* %5, align 8
  %6 = getelementptr inbounds %class.VmaAllocationObjectAllocator, %class.VmaAllocationObjectAllocator* %0, i64 0, i32 1, i32 2
  %7 = ptrtoint %struct.VkAllocationCallbacks* %1 to i64
  %8 = bitcast %class.VmaVector.3* %6 to i64*
  store i64 %7, i64* %8, align 8
  %9 = getelementptr inbounds %class.VmaAllocationObjectAllocator, %class.VmaAllocationObjectAllocator* %0, i64 0, i32 1, i32 2, i32 1
  %10 = bitcast %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"** %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN28VmaAllocationObjectAllocator4FreeEP15VmaAllocation_T(%class.VmaAllocationObjectAllocator*, %struct.VmaAllocation_T*) local_unnamed_addr #0 align 2 {
  %3 = icmp eq %class.VmaAllocationObjectAllocator* %0, null
  br i1 %3, label %6, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %class.VmaAllocationObjectAllocator, %class.VmaAllocationObjectAllocator* %0, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %5) #15
  br label %6

6:                                                ; preds = %2, %4
  %7 = getelementptr inbounds %class.VmaAllocationObjectAllocator, %class.VmaAllocationObjectAllocator* %0, i64 0, i32 1, i32 2, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %37, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %class.VmaAllocationObjectAllocator, %class.VmaAllocationObjectAllocator* %0, i64 0, i32 1, i32 2, i32 1
  %12 = load %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"*, %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"** %11, align 8
  %13 = bitcast %struct.VmaAllocation_T* %1 to %"union.VmaPoolAllocator<VmaAllocation_T>::Item"*
  br label %14

14:                                               ; preds = %35, %10
  %15 = phi i64 [ %8, %10 ], [ %16, %35 ]
  %16 = add i64 %15, -1
  %17 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %12, i64 %16, i32 0
  %18 = load %"union.VmaPoolAllocator<VmaAllocation_T>::Item"*, %"union.VmaPoolAllocator<VmaAllocation_T>::Item"** %17, align 8
  %19 = icmp ugt %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %18, %13
  br i1 %19, label %35, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %12, i64 %16, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %18, i64 %23
  %25 = icmp ugt %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %24, %13
  br i1 %25, label %26, label %35

26:                                               ; preds = %20
  %27 = ptrtoint %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %18 to i64
  %28 = ptrtoint %struct.VmaAllocation_T* %1 to i64
  %29 = sub i64 %28, %27
  %30 = sdiv exact i64 %29, 72
  %31 = trunc i64 %30 to i32
  %32 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %12, i64 %16, i32 2
  %33 = load i32, i32* %32, align 4
  %34 = bitcast %struct.VmaAllocation_T* %1 to i32*
  store i32 %33, i32* %34, align 8
  store i32 %31, i32* %32, align 4
  br label %37

35:                                               ; preds = %20, %14
  %36 = icmp eq i64 %16, 0
  br i1 %36, label %37, label %14

37:                                               ; preds = %35, %6, %26
  br i1 %3, label %40, label %38

38:                                               ; preds = %37
  %39 = getelementptr inbounds %class.VmaAllocationObjectAllocator, %class.VmaAllocationObjectAllocator* %0, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %39) #15
  br label %40

40:                                               ; preds = %37, %38
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaAllocator_TC2EPK22VmaAllocatorCreateInfo(%struct.VmaAllocator_T*, %struct.VmaAllocatorCreateInfo* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 0
  %4 = getelementptr inbounds %struct.VmaAllocatorCreateInfo, %struct.VmaAllocatorCreateInfo* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = trunc i32 %5 to i8
  %7 = and i8 %6, 1
  %8 = xor i8 %7, 1
  store i8 %8, i8* %3, align 8
  %9 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 2
  %10 = getelementptr inbounds %struct.VmaAllocatorCreateInfo, %struct.VmaAllocatorCreateInfo* %1, i64 0, i32 11
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, i32 4194304, i32 %11
  store i32 %13, i32* %9, align 4
  %14 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 3
  %15 = load i32, i32* %4, align 8
  %16 = lshr i32 %15, 1
  %17 = trunc i32 %16 to i8
  %18 = and i8 %17, 1
  store i8 %18, i8* %14, align 8
  %19 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 4
  %20 = load i32, i32* %4, align 8
  %21 = lshr i32 %20, 2
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  store i8 %23, i8* %19, align 1
  %24 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 5
  %25 = load i32, i32* %4, align 8
  %26 = lshr i32 %25, 3
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  store i8 %28, i8* %24, align 2
  %29 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 6
  %30 = load i32, i32* %4, align 8
  %31 = lshr i32 %30, 4
  %32 = trunc i32 %31 to i8
  %33 = and i8 %32, 1
  store i8 %33, i8* %29, align 1
  %34 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 7
  %35 = load i32, i32* %4, align 8
  %36 = lshr i32 %35, 5
  %37 = trunc i32 %36 to i8
  %38 = and i8 %37, 1
  store i8 %38, i8* %34, align 4
  %39 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %40 = getelementptr inbounds %struct.VmaAllocatorCreateInfo, %struct.VmaAllocatorCreateInfo* %1, i64 0, i32 2
  %41 = bitcast %struct.VkDevice_T** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %struct.VkDevice_T** %39 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 10
  %45 = getelementptr inbounds %struct.VmaAllocatorCreateInfo, %struct.VmaAllocatorCreateInfo* %1, i64 0, i32 10
  %46 = bitcast %struct.VkInstance_T** %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = bitcast %struct.VkInstance_T** %44 to i64*
  store i64 %47, i64* %48, align 8
  %49 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 11
  %50 = getelementptr inbounds %struct.VmaAllocatorCreateInfo, %struct.VmaAllocatorCreateInfo* %1, i64 0, i32 4
  %51 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %50, align 8
  %52 = icmp ne %struct.VkAllocationCallbacks* %51, null
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %49, align 8
  %54 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13
  %55 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %50, align 8
  %56 = icmp eq %struct.VkAllocationCallbacks* %55, null
  %57 = bitcast %struct.VkAllocationCallbacks* %55 to i8*
  %58 = select i1 %56, i8* bitcast (%struct.VkAllocationCallbacks* @_ZL27VmaEmptyAllocationCallbacks to i8*), i8* %57
  %59 = bitcast %struct.VkAllocationCallbacks* %54 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %58, i64 48, i1 false)
  %60 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 15
  %61 = bitcast %class.VmaAllocationObjectAllocator* %60 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 40, i1 false) #15
  %62 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 15, i32 1, i32 0
  store %struct.VkAllocationCallbacks* %54, %struct.VkAllocationCallbacks** %62, align 8
  %63 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 15, i32 1, i32 1
  store i32 1024, i32* %63, align 8
  %64 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 15, i32 1, i32 2
  %65 = ptrtoint %struct.VkAllocationCallbacks* %54 to i64
  %66 = bitcast %class.VmaVector.3* %64 to i64*
  store i64 %65, i64* %66, align 8
  %67 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 15, i32 1, i32 2, i32 1
  %68 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 16
  %69 = getelementptr %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 22, i64 0
  %70 = bitcast %class.VmaRWMutex* %69 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %70, i8 0, i64 1280, i1 false)
  %71 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 3
  %72 = bitcast %class.VmaRWMutex* %71 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %72, i8 0, i64 40, i1 false) #15
  %73 = bitcast %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"** %67 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %73, i8 0, i64 28, i1 false)
  br label %74

74:                                               ; preds = %74, %2
  %75 = phi i64 [ 0, %2 ], [ %87, %74 ]
  %76 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 0, i64 %75, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i64 0, i64* %76 seq_cst, align 8
  %77 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 1, i64 %75, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i64 0, i64* %77 seq_cst, align 8
  %78 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 4, i64 %75
  store i64 0, i64* %78, align 8
  %79 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 5, i64 %75
  store i64 0, i64* %79, align 8
  %80 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 6, i64 %75
  store i64 0, i64* %80, align 8
  %81 = or i64 %75, 1
  %82 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 0, i64 %81, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i64 0, i64* %82 seq_cst, align 8
  %83 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 1, i64 %81, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i64 0, i64* %83 seq_cst, align 8
  %84 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 4, i64 %81
  store i64 0, i64* %84, align 8
  %85 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 5, i64 %81
  store i64 0, i64* %85, align 8
  %86 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 6, i64 %81
  store i64 0, i64* %86, align 8
  %87 = add nuw nsw i64 %75, 2
  %88 = icmp eq i64 %87, 16
  br i1 %88, label %89, label %74

89:                                               ; preds = %74
  %90 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i32 0, i32* %90 seq_cst, align 4
  %91 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 24
  store i64 0, i64* %91, align 8
  %92 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 25
  %93 = getelementptr inbounds %struct.VmaAllocatorCreateInfo, %struct.VmaAllocatorCreateInfo* %1, i64 0, i32 1
  %94 = bitcast %struct.VkPhysicalDevice_T** %93 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = bitcast %struct.VkPhysicalDevice_T** %92 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 26, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %97, align 4
  %98 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 27, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 -1, i32* %98, align 4
  %99 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 28
  %100 = bitcast %class.VmaRWMutex* %99 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %100, i8 0, i64 40, i1 false) #15
  %101 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 29
  %102 = load i8, i8* %49, align 8, !range !2
  %103 = icmp eq i8 %102, 0
  %104 = select i1 %103, i64 0, i64 %65
  %105 = bitcast %class.VmaVector.11* %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 29, i32 1
  %107 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 33
  %108 = bitcast %struct.VmaPool_T*** %106 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %108, i8 0, i64 28, i1 false)
  store i32 -1, i32* %107, align 8
  %109 = load i32, i32* %9, align 4
  %110 = icmp ugt i32 %109, 4198399
  %111 = inttoptr i64 %95 to %struct.VkPhysicalDevice_T*
  br i1 %110, label %112, label %113

112:                                              ; preds = %89
  store i8 0, i8* %14, align 8
  store i8 0, i8* %19, align 1
  br label %113

113:                                              ; preds = %112, %89
  %114 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 14
  %115 = bitcast %struct.VmaDeviceMemoryCallbacks* %114 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %115, i8 0, i64 24, i1 false)
  %116 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 18
  %117 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19
  %118 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32
  %119 = bitcast %struct.VmaVulkanFunctions* %118 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %119, i8 0, i64 176, i1 false)
  %120 = getelementptr inbounds %struct.VmaAllocatorCreateInfo, %struct.VmaAllocatorCreateInfo* %1, i64 0, i32 5
  %121 = bitcast %struct.VkPhysicalDeviceProperties* %116 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %121, i8 0, i64 1856, i1 false)
  %122 = load %struct.VmaDeviceMemoryCallbacks*, %struct.VmaDeviceMemoryCallbacks** %120, align 8
  %123 = icmp eq %struct.VmaDeviceMemoryCallbacks* %122, null
  br i1 %123, label %140, label %124

124:                                              ; preds = %113
  %125 = getelementptr inbounds %struct.VmaDeviceMemoryCallbacks, %struct.VmaDeviceMemoryCallbacks* %122, i64 0, i32 2
  %126 = bitcast i8** %125 to i64*
  %127 = load i64, i64* %126, align 8
  %128 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 14, i32 2
  %129 = bitcast i8** %128 to i64*
  store i64 %127, i64* %129, align 8
  %130 = bitcast %struct.VmaDeviceMemoryCallbacks** %120 to i64**
  %131 = load i64*, i64** %130, align 8
  %132 = load i64, i64* %131, align 8
  %133 = bitcast %struct.VmaDeviceMemoryCallbacks* %114 to i64*
  store i64 %132, i64* %133, align 8
  %134 = load %struct.VmaDeviceMemoryCallbacks*, %struct.VmaDeviceMemoryCallbacks** %120, align 8
  %135 = getelementptr inbounds %struct.VmaDeviceMemoryCallbacks, %struct.VmaDeviceMemoryCallbacks* %134, i64 0, i32 1
  %136 = bitcast void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)** %135 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 14, i32 1
  %139 = bitcast void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)** %138 to i64*
  store i64 %137, i64* %139, align 8
  br label %140

140:                                              ; preds = %113, %124
  %141 = getelementptr inbounds %struct.VmaAllocatorCreateInfo, %struct.VmaAllocatorCreateInfo* %1, i64 0, i32 8
  %142 = load %struct.VmaVulkanFunctions*, %struct.VmaVulkanFunctions** %141, align 8
  %143 = icmp eq %struct.VmaVulkanFunctions* %142, null
  br i1 %143, label %148, label %144

144:                                              ; preds = %140
  tail call void @_ZN14VmaAllocator_T28ImportVulkanFunctions_CustomEPK18VmaVulkanFunctions(%struct.VmaAllocator_T* %0, %struct.VmaVulkanFunctions* nonnull %142) #15
  %145 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %118, i64 0, i32 0
  %146 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)** %145, align 8
  %147 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %92, align 8
  br label %148

148:                                              ; preds = %140, %144
  %149 = phi %struct.VkPhysicalDevice_T* [ %111, %140 ], [ %147, %144 ]
  %150 = phi void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)* [ null, %140 ], [ %146, %144 ]
  tail call void %150(%struct.VkPhysicalDevice_T* %149, %struct.VkPhysicalDeviceProperties* %116) #15
  %151 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 1
  %152 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)** %151, align 8
  %153 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %92, align 8
  tail call void %152(%struct.VkPhysicalDevice_T* %153, %struct.VkPhysicalDeviceMemoryProperties* %117) #15
  %154 = getelementptr inbounds %struct.VmaAllocatorCreateInfo, %struct.VmaAllocatorCreateInfo* %1, i64 0, i32 3
  %155 = load i64, i64* %154, align 8
  %156 = icmp eq i64 %155, 0
  %157 = select i1 %156, i64 268435456, i64 %155
  store i64 %157, i64* %91, align 8
  %158 = load i8, i8* %29, align 1, !range !2
  %159 = icmp eq i8 %158, 0
  br i1 %159, label %160, label %205

160:                                              ; preds = %148
  %161 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 0
  %162 = load i32, i32* %161, align 8
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %205, label %164

164:                                              ; preds = %160
  %165 = zext i32 %162 to i64
  %166 = and i64 %165, 1
  %167 = icmp eq i32 %162, 1
  br i1 %167, label %190, label %168

168:                                              ; preds = %164
  %169 = sub nsw i64 %165, %166
  br label %170

170:                                              ; preds = %326, %168
  %171 = phi i64 [ 0, %168 ], [ %328, %326 ]
  %172 = phi i32 [ -1, %168 ], [ %327, %326 ]
  %173 = phi i64 [ %169, %168 ], [ %329, %326 ]
  %174 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %171, i32 0
  %175 = load i32, i32* %174, align 4
  %176 = and i32 %175, 64
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %183, label %178

178:                                              ; preds = %170
  %179 = trunc i64 %171 to i32
  %180 = shl i32 1, %179
  %181 = xor i32 %180, -1
  %182 = and i32 %172, %181
  br label %183

183:                                              ; preds = %178, %170
  %184 = phi i32 [ %182, %178 ], [ %172, %170 ]
  %185 = or i64 %171, 1
  %186 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %185, i32 0
  %187 = load i32, i32* %186, align 4
  %188 = and i32 %187, 64
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %326, label %321

190:                                              ; preds = %326, %164
  %191 = phi i32 [ undef, %164 ], [ %327, %326 ]
  %192 = phi i64 [ 0, %164 ], [ %328, %326 ]
  %193 = phi i32 [ -1, %164 ], [ %327, %326 ]
  %194 = icmp eq i64 %166, 0
  br i1 %194, label %205, label %195

195:                                              ; preds = %190
  %196 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %192, i32 0
  %197 = load i32, i32* %196, align 4
  %198 = and i32 %197, 64
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %205, label %200

200:                                              ; preds = %195
  %201 = trunc i64 %192 to i32
  %202 = shl i32 1, %201
  %203 = xor i32 %202, -1
  %204 = and i32 %193, %203
  br label %205

205:                                              ; preds = %190, %195, %200, %148, %160
  %206 = phi i32 [ -1, %148 ], [ -1, %160 ], [ %191, %190 ], [ %204, %200 ], [ %193, %195 ]
  store i32 %206, i32* %107, align 8
  %207 = getelementptr inbounds %struct.VmaAllocatorCreateInfo, %struct.VmaAllocatorCreateInfo* %1, i64 0, i32 7
  %208 = load i64*, i64** %207, align 8
  %209 = icmp eq i64* %208, null
  br i1 %209, label %236, label %210

210:                                              ; preds = %205
  %211 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 2
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %236, label %214

214:                                              ; preds = %210
  %215 = zext i32 %212 to i64
  br label %216

216:                                              ; preds = %234, %214
  %217 = phi i64* [ %208, %214 ], [ %235, %234 ]
  %218 = phi i64 [ 0, %214 ], [ %232, %234 ]
  %219 = getelementptr inbounds i64, i64* %217, i64 %218
  %220 = load i64, i64* %219, align 8
  %221 = icmp eq i64 %220, -1
  br i1 %221, label %231, label %222

222:                                              ; preds = %216
  %223 = trunc i64 %218 to i32
  %224 = shl i32 1, %223
  %225 = load i32, i32* %68, align 8
  %226 = or i32 %225, %224
  store i32 %226, i32* %68, align 8
  %227 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 3, i64 %218, i32 0
  %228 = load i64, i64* %227, align 8
  %229 = icmp ult i64 %220, %228
  br i1 %229, label %230, label %231

230:                                              ; preds = %222
  store i64 %220, i64* %227, align 8
  br label %231

231:                                              ; preds = %216, %222, %230
  %232 = add nuw nsw i64 %218, 1
  %233 = icmp ult i64 %232, %215
  br i1 %233, label %234, label %236

234:                                              ; preds = %231
  %235 = load i64*, i64** %207, align 8
  br label %216

236:                                              ; preds = %231, %210, %205
  %237 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 0
  %238 = load i32, i32* %237, align 8
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %245, label %240

240:                                              ; preds = %236
  %241 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 1
  %242 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 0
  %243 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 18, i32 7, i32 11
  %244 = getelementptr inbounds %struct.VmaAllocatorCreateInfo, %struct.VmaAllocatorCreateInfo* %1, i64 0, i32 6
  br label %246

245:                                              ; preds = %308, %236
  ret void

246:                                              ; preds = %240, %308
  %247 = phi i64 [ 0, %240 ], [ %317, %308 ]
  %248 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %247, i32 1
  %249 = load i32, i32* %248, align 4
  %250 = zext i32 %249 to i64
  %251 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 3, i64 %250, i32 0
  %252 = load i64, i64* %251, align 8
  %253 = icmp ult i64 %252, 1073741825
  br i1 %253, label %254, label %256

254:                                              ; preds = %246
  %255 = lshr i64 %252, 3
  br label %258

256:                                              ; preds = %246
  %257 = load i64, i64* %91, align 8
  br label %258

258:                                              ; preds = %254, %256
  %259 = phi i64 [ %255, %254 ], [ %257, %256 ]
  %260 = add i64 %259, 31
  %261 = and i64 %260, -32
  %262 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %241, align 8
  %263 = icmp eq i8* (i8*, i64, i64, i32)* %262, null
  br i1 %263, label %267, label %264

264:                                              ; preds = %258
  %265 = load i8*, i8** %242, align 8
  %266 = tail call i8* %262(i8* %265, i64 160, i64 8, i32 1) #15
  br label %269

267:                                              ; preds = %258
  %268 = tail call noalias i8* @aligned_alloc(i64 8, i64 160) #15
  br label %269

269:                                              ; preds = %264, %267
  %270 = phi i8* [ %266, %264 ], [ %268, %267 ]
  %271 = load i64, i64* %243, align 8
  %272 = icmp ugt i64 %271, 1
  %273 = select i1 %272, i64 %271, i64 1
  %274 = load i32, i32* %244, align 8
  %275 = bitcast i8* %270 to %struct.VmaAllocator_T**
  store %struct.VmaAllocator_T* %0, %struct.VmaAllocator_T** %275, align 8
  %276 = getelementptr inbounds i8, i8* %270, i64 8
  %277 = bitcast i8* %276 to %struct.VmaPool_T**
  store %struct.VmaPool_T* null, %struct.VmaPool_T** %277, align 8
  %278 = getelementptr inbounds i8, i8* %270, i64 16
  %279 = bitcast i8* %278 to i32*
  %280 = trunc i64 %247 to i32
  store i32 %280, i32* %279, align 8
  %281 = getelementptr inbounds i8, i8* %270, i64 24
  %282 = bitcast i8* %281 to i64*
  store i64 %261, i64* %282, align 8
  %283 = getelementptr inbounds i8, i8* %270, i64 32
  %284 = bitcast i8* %283 to <2 x i64>*
  store <2 x i64> <i64 0, i64 -1>, <2 x i64>* %284, align 8
  %285 = getelementptr inbounds i8, i8* %270, i64 48
  %286 = bitcast i8* %285 to i64*
  store i64 %273, i64* %286, align 8
  %287 = getelementptr inbounds i8, i8* %270, i64 56
  %288 = bitcast i8* %287 to i32*
  store i32 %274, i32* %288, align 8
  %289 = getelementptr inbounds i8, i8* %270, i64 60
  store i8 0, i8* %289, align 4
  %290 = getelementptr inbounds i8, i8* %270, i64 64
  %291 = bitcast i8* %290 to i32*
  store i32 0, i32* %291, align 8
  %292 = getelementptr inbounds i8, i8* %270, i64 72
  %293 = getelementptr inbounds i8, i8* %270, i64 120
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %292, i8 0, i64 41, i1 false) #15
  %294 = load i8, i8* %49, align 8, !range !2
  %295 = icmp eq i8 %294, 0
  %296 = select i1 %295, i64 0, i64 %65
  %297 = bitcast i8* %293 to i64*
  store i64 %296, i64* %297, align 8
  %298 = getelementptr inbounds i8, i8* %270, i64 128
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %298, i8 0, i64 28, i1 false) #15
  %299 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 20, i64 %247
  %300 = bitcast %struct.VmaBlockVector** %299 to i8**
  store i8* %270, i8** %300, align 8
  %301 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %241, align 8
  %302 = icmp eq i8* (i8*, i64, i64, i32)* %301, null
  br i1 %302, label %306, label %303

303:                                              ; preds = %269
  %304 = load i8*, i8** %242, align 8
  %305 = tail call i8* %301(i8* %304, i64 32, i64 8, i32 1) #15
  br label %308

306:                                              ; preds = %269
  %307 = tail call noalias i8* @aligned_alloc(i64 8, i64 32) #15
  br label %308

308:                                              ; preds = %303, %306
  %309 = phi i8* [ %305, %303 ], [ %307, %306 ]
  %310 = load i8, i8* %49, align 8, !range !2
  %311 = icmp eq i8 %310, 0
  %312 = select i1 %311, i64 0, i64 %65
  %313 = bitcast i8* %309 to i64*
  store i64 %312, i64* %313, align 8
  %314 = getelementptr inbounds i8, i8* %309, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %314, i8 0, i64 24, i1 false) #15
  %315 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 21, i64 %247
  %316 = bitcast %class.VmaVector.5** %315 to i8**
  store i8* %309, i8** %316, align 8
  %317 = add nuw nsw i64 %247, 1
  %318 = load i32, i32* %237, align 8
  %319 = zext i32 %318 to i64
  %320 = icmp ult i64 %317, %319
  br i1 %320, label %246, label %245

321:                                              ; preds = %183
  %322 = trunc i64 %185 to i32
  %323 = shl i32 1, %322
  %324 = xor i32 %323, -1
  %325 = and i32 %184, %324
  br label %326

326:                                              ; preds = %321, %183
  %327 = phi i32 [ %325, %321 ], [ %184, %183 ]
  %328 = add nuw nsw i64 %171, 2
  %329 = add i64 %173, -2
  %330 = icmp eq i64 %329, 0
  br i1 %330, label %190, label %170
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN14VmaAllocator_T21ImportVulkanFunctionsEPK18VmaVulkanFunctions(%struct.VmaAllocator_T*, %struct.VmaVulkanFunctions* readonly) local_unnamed_addr #6 align 2 {
  %3 = icmp eq %struct.VmaVulkanFunctions* %1, null
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  tail call void @_ZN14VmaAllocator_T28ImportVulkanFunctions_CustomEPK18VmaVulkanFunctions(%struct.VmaAllocator_T* %0, %struct.VmaVulkanFunctions* nonnull %1)
  br label %5

5:                                                ; preds = %2, %4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK14VmaAllocator_T29CalculateGlobalMemoryTypeBitsEv(%struct.VmaAllocator_T* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 6
  %3 = load i8, i8* %2, align 1, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %50

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %50, label %9

9:                                                ; preds = %5
  %10 = zext i32 %7 to i64
  %11 = and i64 %10, 1
  %12 = icmp eq i32 %7, 1
  br i1 %12, label %35, label %13

13:                                               ; preds = %9
  %14 = sub nsw i64 %10, %11
  br label %15

15:                                               ; preds = %57, %13
  %16 = phi i64 [ 0, %13 ], [ %59, %57 ]
  %17 = phi i32 [ -1, %13 ], [ %58, %57 ]
  %18 = phi i64 [ %14, %13 ], [ %60, %57 ]
  %19 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %16, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = and i32 %20, 64
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %28, label %23

23:                                               ; preds = %15
  %24 = trunc i64 %16 to i32
  %25 = shl i32 1, %24
  %26 = xor i32 %25, -1
  %27 = and i32 %17, %26
  br label %28

28:                                               ; preds = %15, %23
  %29 = phi i32 [ %27, %23 ], [ %17, %15 ]
  %30 = or i64 %16, 1
  %31 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %30, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = and i32 %32, 64
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %57, label %52

35:                                               ; preds = %57, %9
  %36 = phi i32 [ undef, %9 ], [ %58, %57 ]
  %37 = phi i64 [ 0, %9 ], [ %59, %57 ]
  %38 = phi i32 [ -1, %9 ], [ %58, %57 ]
  %39 = icmp eq i64 %11, 0
  br i1 %39, label %50, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %37, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = and i32 %42, 64
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %50, label %45

45:                                               ; preds = %40
  %46 = trunc i64 %37 to i32
  %47 = shl i32 1, %46
  %48 = xor i32 %47, -1
  %49 = and i32 %38, %48
  br label %50

50:                                               ; preds = %35, %40, %45, %5, %1
  %51 = phi i32 [ -1, %1 ], [ -1, %5 ], [ %36, %35 ], [ %49, %45 ], [ %38, %40 ]
  ret i32 %51

52:                                               ; preds = %28
  %53 = trunc i64 %30 to i32
  %54 = shl i32 1, %53
  %55 = xor i32 %54, -1
  %56 = and i32 %29, %55
  br label %57

57:                                               ; preds = %52, %28
  %58 = phi i32 [ %56, %52 ], [ %29, %28 ]
  %59 = add nuw nsw i64 %16, 2
  %60 = add i64 %18, -2
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %35, label %15
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN14VmaAllocator_T22CalcPreferredBlockSizeEj(%struct.VmaAllocator_T* nocapture readonly, i32) local_unnamed_addr #5 align 2 {
  %3 = zext i32 %1 to i64
  %4 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %3, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 3, i64 %6, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, 1073741825
  br i1 %9, label %10, label %12

10:                                               ; preds = %2
  %11 = lshr i64 %8, 3
  br label %15

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 24
  %14 = load i64, i64* %13, align 8
  br label %15

15:                                               ; preds = %12, %10
  %16 = phi i64 [ %11, %10 ], [ %14, %12 ]
  %17 = add i64 %16, 31
  %18 = and i64 %17, -32
  ret i64 %18
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaAllocator_T4InitEPK22VmaAllocatorCreateInfo(%struct.VmaAllocator_T*, %struct.VmaAllocatorCreateInfo* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.VmaAllocatorCreateInfo, %struct.VmaAllocatorCreateInfo* %1, i64 0, i32 9
  %4 = load %struct.VmaRecordSettings*, %struct.VmaRecordSettings** %3, align 8
  %5 = icmp eq %struct.VmaRecordSettings* %4, null
  br i1 %5, label %13, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.VmaRecordSettings, %struct.VmaRecordSettings* %4, i64 0, i32 1
  %8 = load i8*, i8** %7, align 8
  %9 = icmp eq i8* %8, null
  br i1 %9, label %13, label %10

10:                                               ; preds = %6
  %11 = load i8, i8* %8, align 1
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %18

13:                                               ; preds = %6, %2, %10
  %14 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 5
  %15 = load i8, i8* %14, align 2, !range !2
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %18, label %17

17:                                               ; preds = %13
  tail call void @_ZN14VmaAllocator_T18UpdateVulkanBudgetEv(%struct.VmaAllocator_T* %0)
  br label %18

18:                                               ; preds = %17, %13, %10
  %19 = phi i32 [ -8, %10 ], [ 0, %13 ], [ 0, %17 ]
  ret i32 %19
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaAllocator_T18UpdateVulkanBudgetEv(%struct.VmaAllocator_T*) local_unnamed_addr #0 align 2 {
  %2 = alloca %struct.VkPhysicalDeviceMemoryProperties2, align 8
  %3 = alloca %struct.VkPhysicalDeviceMemoryBudgetPropertiesEXT, align 8
  %4 = bitcast %struct.VkPhysicalDeviceMemoryProperties2* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 536, i8* nonnull %4) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 536, i1 false)
  %5 = getelementptr inbounds %struct.VkPhysicalDeviceMemoryProperties2, %struct.VkPhysicalDeviceMemoryProperties2* %2, i64 0, i32 0
  store i32 1000059006, i32* %5, align 8
  %6 = bitcast %struct.VkPhysicalDeviceMemoryBudgetPropertiesEXT* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 272, i8* nonnull %6) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 272, i1 false)
  %7 = getelementptr inbounds %struct.VkPhysicalDeviceMemoryBudgetPropertiesEXT, %struct.VkPhysicalDeviceMemoryBudgetPropertiesEXT* %3, i64 0, i32 0
  store i32 1000237000, i32* %7, align 8
  %8 = getelementptr inbounds %struct.VkPhysicalDeviceMemoryProperties2, %struct.VkPhysicalDeviceMemoryProperties2* %2, i64 0, i32 1
  %9 = getelementptr inbounds %struct.VkPhysicalDeviceMemoryBudgetPropertiesEXT, %struct.VkPhysicalDeviceMemoryBudgetPropertiesEXT* %3, i64 0, i32 1
  %10 = bitcast i8** %9 to i64*
  store i64 0, i64* %10, align 8
  %11 = bitcast i8** %8 to %struct.VkPhysicalDeviceMemoryBudgetPropertiesEXT**
  store %struct.VkPhysicalDeviceMemoryBudgetPropertiesEXT* %3, %struct.VkPhysicalDeviceMemoryBudgetPropertiesEXT** %11, align 8
  %12 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 21
  %13 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)** %12, align 8
  %14 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 25
  %15 = load %struct.VkPhysicalDevice_T*, %struct.VkPhysicalDevice_T** %14, align 8
  call void %13(%struct.VkPhysicalDevice_T* %15, %struct.VkPhysicalDeviceMemoryProperties2* nonnull %2) #15
  %16 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 3
  %17 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 0
  %18 = load i8, i8* %17, align 8, !range !2
  %19 = icmp eq i8 %18, 0
  %20 = select i1 %19, %class.VmaRWMutex* null, %class.VmaRWMutex* %16
  %21 = icmp eq %class.VmaRWMutex* %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %1
  %23 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %20, i64 0, i32 0, i32 0
  call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %23) #15
  br label %24

24:                                               ; preds = %1, %22
  %25 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %33

28:                                               ; preds = %61, %24
  %29 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i32 0, i32* %29 seq_cst, align 4
  br i1 %21, label %32, label %30

30:                                               ; preds = %28
  %31 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %20, i64 0, i32 0, i32 0
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %31) #15
  br label %32

32:                                               ; preds = %28, %30
  call void @llvm.lifetime.end.p0i8(i64 272, i8* nonnull %6) #15
  call void @llvm.lifetime.end.p0i8(i64 536, i8* nonnull %4) #15
  ret void

33:                                               ; preds = %24, %61
  %34 = phi i64 [ %62, %61 ], [ 0, %24 ]
  %35 = getelementptr inbounds %struct.VkPhysicalDeviceMemoryBudgetPropertiesEXT, %struct.VkPhysicalDeviceMemoryBudgetPropertiesEXT* %3, i64 0, i32 3, i64 %34
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 4, i64 %34
  store i64 %36, i64* %37, align 8
  %38 = getelementptr inbounds %struct.VkPhysicalDeviceMemoryBudgetPropertiesEXT, %struct.VkPhysicalDeviceMemoryBudgetPropertiesEXT* %3, i64 0, i32 2, i64 %34
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 5, i64 %34
  store i64 %39, i64* %40, align 8
  %41 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 0, i64 %34, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load atomic i64, i64* %41 seq_cst, align 8
  %43 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 6, i64 %34
  store i64 %42, i64* %43, align 8
  %44 = load i64, i64* %40, align 8
  %45 = icmp eq i64 %44, 0
  %46 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 3, i64 %34, i32 0
  %47 = load i64, i64* %46, align 8
  br i1 %45, label %48, label %51

48:                                               ; preds = %33
  %49 = shl i64 %47, 3
  %50 = udiv i64 %49, 10
  br label %53

51:                                               ; preds = %33
  %52 = icmp ugt i64 %44, %47
  br i1 %52, label %53, label %55

53:                                               ; preds = %51, %48
  %54 = phi i64 [ %50, %48 ], [ %47, %51 ]
  store i64 %54, i64* %40, align 8
  br label %55

55:                                               ; preds = %53, %51
  %56 = load i64, i64* %37, align 8
  %57 = icmp ne i64 %56, 0
  %58 = icmp eq i64 %42, 0
  %59 = or i1 %58, %57
  br i1 %59, label %61, label %60

60:                                               ; preds = %55
  store i64 %42, i64* %37, align 8
  br label %61

61:                                               ; preds = %55, %60
  %62 = add nuw nsw i64 %34, 1
  %63 = load i32, i32* %25, align 4
  %64 = zext i32 %63 to i64
  %65 = icmp ult i64 %62, %64
  br i1 %65, label %33, label %28
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaAllocator_TD2Ev(%struct.VmaAllocator_T*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = zext i32 %3 to i64
  %7 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 3
  %8 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 0
  br label %26

9:                                                ; preds = %65, %1
  %10 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 29, i32 0, i32 0
  %11 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %10, align 8
  %12 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 29, i32 1
  %13 = bitcast %struct.VmaPool_T*** %12 to i8**
  %14 = load i8*, i8** %13, align 8
  %15 = icmp eq %struct.VkAllocationCallbacks* %11, null
  br i1 %15, label %23, label %16

16:                                               ; preds = %9
  %17 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %11, i64 0, i32 3
  %18 = load void (i8*, i8*)*, void (i8*, i8*)** %17, align 8
  %19 = icmp eq void (i8*, i8*)* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %11, i64 0, i32 0
  %22 = load i8*, i8** %21, align 8
  tail call void %18(i8* %22, i8* %14) #15
  br label %24

23:                                               ; preds = %16, %9
  tail call void @free(i8* %14) #15
  br label %24

24:                                               ; preds = %20, %23
  %25 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 15, i32 1
  tail call void @_ZN16VmaPoolAllocatorI15VmaAllocation_TED2Ev(%class.VmaPoolAllocator* %25) #15
  ret void

26:                                               ; preds = %5, %65
  %27 = phi i64 [ %6, %5 ], [ %28, %65 ]
  %28 = add nsw i64 %27, -1
  %29 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 21, i64 %28
  %30 = load %class.VmaVector.5*, %class.VmaVector.5** %29, align 8
  %31 = icmp eq %class.VmaVector.5* %30, null
  br i1 %31, label %54, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds %class.VmaVector.5, %class.VmaVector.5* %30, i64 0, i32 0, i32 0
  %34 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %33, align 8
  %35 = getelementptr inbounds %class.VmaVector.5, %class.VmaVector.5* %30, i64 0, i32 1
  %36 = bitcast %struct.VmaAllocation_T*** %35 to i8**
  %37 = load i8*, i8** %36, align 8
  %38 = icmp eq %struct.VkAllocationCallbacks* %34, null
  br i1 %38, label %46, label %39

39:                                               ; preds = %32
  %40 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %34, i64 0, i32 3
  %41 = load void (i8*, i8*)*, void (i8*, i8*)** %40, align 8
  %42 = icmp eq void (i8*, i8*)* %41, null
  br i1 %42, label %46, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %34, i64 0, i32 0
  %45 = load i8*, i8** %44, align 8
  tail call void %41(i8* %45, i8* %37) #15
  br label %47

46:                                               ; preds = %39, %32
  tail call void @free(i8* %37) #15
  br label %47

47:                                               ; preds = %46, %43
  %48 = bitcast %class.VmaVector.5* %30 to i8*
  %49 = load void (i8*, i8*)*, void (i8*, i8*)** %7, align 8
  %50 = icmp eq void (i8*, i8*)* %49, null
  br i1 %50, label %53, label %51

51:                                               ; preds = %47
  %52 = load i8*, i8** %8, align 8
  tail call void %49(i8* %52, i8* nonnull %48) #15
  br label %54

53:                                               ; preds = %47
  tail call void @free(i8* %48) #15
  br label %54

54:                                               ; preds = %26, %51, %53
  %55 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 20, i64 %28
  %56 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %55, align 8
  %57 = icmp eq %struct.VmaBlockVector* %56, null
  br i1 %57, label %65, label %58

58:                                               ; preds = %54
  tail call void @_ZN14VmaBlockVectorD2Ev(%struct.VmaBlockVector* nonnull %56) #15
  %59 = bitcast %struct.VmaBlockVector* %56 to i8*
  %60 = load void (i8*, i8*)*, void (i8*, i8*)** %7, align 8
  %61 = icmp eq void (i8*, i8*)* %60, null
  br i1 %61, label %64, label %62

62:                                               ; preds = %58
  %63 = load i8*, i8** %8, align 8
  tail call void %60(i8* %63, i8* nonnull %59) #15
  br label %65

64:                                               ; preds = %58
  tail call void @free(i8* %59) #15
  br label %65

65:                                               ; preds = %54, %62, %64
  %66 = icmp eq i64 %28, 0
  br i1 %66, label %9, label %26
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN14VmaAllocator_T28ImportVulkanFunctions_CustomEPK18VmaVulkanFunctions(%struct.VmaAllocator_T*, %struct.VmaVulkanFunctions* readonly) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %1, i64 0, i32 0
  %4 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)** %3, align 8
  %5 = icmp eq void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 0
  store void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)* %4, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)** %7, align 8
  br label %8

8:                                                ; preds = %2, %6
  %9 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %1, i64 0, i32 1
  %10 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)** %9, align 8
  %11 = icmp eq void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 1
  store void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)* %10, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)** %13, align 8
  br label %14

14:                                               ; preds = %8, %12
  %15 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %1, i64 0, i32 2
  %16 = load i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)*, i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)** %15, align 8
  %17 = icmp eq i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)* %16, null
  br i1 %17, label %20, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 2
  store i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)* %16, i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)** %19, align 8
  br label %20

20:                                               ; preds = %14, %18
  %21 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %1, i64 0, i32 3
  %22 = load void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)** %21, align 8
  %23 = icmp eq void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)* %22, null
  br i1 %23, label %26, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 3
  store void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)* %22, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)** %25, align 8
  br label %26

26:                                               ; preds = %20, %24
  %27 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %1, i64 0, i32 4
  %28 = load i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)** %27, align 8
  %29 = icmp eq i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)* %28, null
  br i1 %29, label %32, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 4
  store i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)* %28, i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)** %31, align 8
  br label %32

32:                                               ; preds = %26, %30
  %33 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %1, i64 0, i32 5
  %34 = load void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)** %33, align 8
  %35 = icmp eq void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)* %34, null
  br i1 %35, label %38, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 5
  store void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)* %34, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)** %37, align 8
  br label %38

38:                                               ; preds = %32, %36
  %39 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %1, i64 0, i32 6
  %40 = load i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)** %39, align 8
  %41 = icmp eq i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)* %40, null
  br i1 %41, label %44, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 6
  store i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)* %40, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)** %43, align 8
  br label %44

44:                                               ; preds = %38, %42
  %45 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %1, i64 0, i32 7
  %46 = load i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)** %45, align 8
  %47 = icmp eq i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)* %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 7
  store i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)* %46, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)** %49, align 8
  br label %50

50:                                               ; preds = %44, %48
  %51 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %1, i64 0, i32 8
  %52 = load i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)** %51, align 8
  %53 = icmp eq i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)* %52, null
  br i1 %53, label %56, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 8
  store i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)* %52, i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)** %55, align 8
  br label %56

56:                                               ; preds = %50, %54
  %57 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %1, i64 0, i32 9
  %58 = load i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)** %57, align 8
  %59 = icmp eq i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)* %58, null
  br i1 %59, label %62, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 9
  store i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)* %58, i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)** %61, align 8
  br label %62

62:                                               ; preds = %56, %60
  %63 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %1, i64 0, i32 10
  %64 = load void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)** %63, align 8
  %65 = icmp eq void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)* %64, null
  br i1 %65, label %68, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 10
  store void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)* %64, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)** %67, align 8
  br label %68

68:                                               ; preds = %62, %66
  %69 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %1, i64 0, i32 11
  %70 = load void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)** %69, align 8
  %71 = icmp eq void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)* %70, null
  br i1 %71, label %74, label %72

72:                                               ; preds = %68
  %73 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 11
  store void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)* %70, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)** %73, align 8
  br label %74

74:                                               ; preds = %68, %72
  %75 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %1, i64 0, i32 12
  %76 = load i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)*, i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)** %75, align 8
  %77 = icmp eq i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)* %76, null
  br i1 %77, label %80, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 12
  store i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)* %76, i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)** %79, align 8
  br label %80

80:                                               ; preds = %74, %78
  %81 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %1, i64 0, i32 13
  %82 = load void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)** %81, align 8
  %83 = icmp eq void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)* %82, null
  br i1 %83, label %86, label %84

84:                                               ; preds = %80
  %85 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 13
  store void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)* %82, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)** %85, align 8
  br label %86

86:                                               ; preds = %80, %84
  %87 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %1, i64 0, i32 14
  %88 = load i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)*, i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)** %87, align 8
  %89 = icmp eq i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)* %88, null
  br i1 %89, label %92, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 14
  store i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)* %88, i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)** %91, align 8
  br label %92

92:                                               ; preds = %86, %90
  %93 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %1, i64 0, i32 15
  %94 = load void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)** %93, align 8
  %95 = icmp eq void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)* %94, null
  br i1 %95, label %98, label %96

96:                                               ; preds = %92
  %97 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 15
  store void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)* %94, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)** %97, align 8
  br label %98

98:                                               ; preds = %92, %96
  %99 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %1, i64 0, i32 16
  %100 = load void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)*, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)** %99, align 8
  %101 = icmp eq void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)* %100, null
  br i1 %101, label %104, label %102

102:                                              ; preds = %98
  %103 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 16
  store void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)* %100, void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)** %103, align 8
  br label %104

104:                                              ; preds = %98, %102
  %105 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %1, i64 0, i32 17
  %106 = load void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)** %105, align 8
  %107 = icmp eq void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)* %106, null
  br i1 %107, label %110, label %108

108:                                              ; preds = %104
  %109 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 17
  store void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)* %106, void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)** %109, align 8
  br label %110

110:                                              ; preds = %104, %108
  %111 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %1, i64 0, i32 18
  %112 = load void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)** %111, align 8
  %113 = icmp eq void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)* %112, null
  br i1 %113, label %116, label %114

114:                                              ; preds = %110
  %115 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 18
  store void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)* %112, void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)** %115, align 8
  br label %116

116:                                              ; preds = %110, %114
  %117 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %1, i64 0, i32 19
  %118 = load i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)** %117, align 8
  %119 = icmp eq i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)* %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %116
  %121 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 19
  store i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)* %118, i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)** %121, align 8
  br label %122

122:                                              ; preds = %116, %120
  %123 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %1, i64 0, i32 20
  %124 = load i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)** %123, align 8
  %125 = icmp eq i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)* %124, null
  br i1 %125, label %128, label %126

126:                                              ; preds = %122
  %127 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 20
  store i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)* %124, i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)** %127, align 8
  br label %128

128:                                              ; preds = %122, %126
  %129 = getelementptr inbounds %struct.VmaVulkanFunctions, %struct.VmaVulkanFunctions* %1, i64 0, i32 21
  %130 = load void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)*, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)** %129, align 8
  %131 = icmp eq void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)* %130, null
  br i1 %131, label %134, label %132

132:                                              ; preds = %128
  %133 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 21
  store void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)* %130, void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)** %133, align 8
  br label %134

134:                                              ; preds = %128, %132
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN14VmaAllocator_T23ValidateVulkanFunctionsEv(%struct.VmaAllocator_T* nocapture) local_unnamed_addr #10 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaAllocator_T20AllocateMemoryOfTypeEmmbP10VkBuffer_TjP9VkImage_TRK23VmaAllocationCreateInfoj20VmaSuballocationTypemPP15VmaAllocation_T(%struct.VmaAllocator_T*, i64, i64, i1 zeroext, %struct.VkBuffer_T*, i32, %struct.VkImage_T*, %struct.VmaAllocationCreateInfo* nocapture readonly dereferenceable(40), i32, i32, i64, %struct.VmaAllocation_T** nocapture) local_unnamed_addr #0 align 2 {
  %13 = alloca %struct.VmaAllocationCreateInfo, align 8
  %14 = bitcast %struct.VmaAllocationCreateInfo* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %14) #15
  %15 = bitcast %struct.VmaAllocationCreateInfo* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %14, i8* align 8 %15, i64 40, i1 false)
  %16 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %13, i64 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = and i32 %17, 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %28, label %20

20:                                               ; preds = %12
  %21 = zext i32 %8 to i64
  %22 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %21, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %20
  %27 = and i32 %17, -5
  store i32 %27, i32* %16, align 8
  br label %28

28:                                               ; preds = %12, %26, %20
  %29 = phi i32 [ %17, %12 ], [ %27, %26 ], [ %17, %20 ]
  %30 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %13, i64 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 6
  br i1 %32, label %33, label %35

33:                                               ; preds = %28
  %34 = or i32 %29, 1
  store i32 %34, i32* %16, align 8
  br label %35

35:                                               ; preds = %33, %28
  %36 = phi i32 [ %34, %33 ], [ %29, %28 ]
  %37 = zext i32 %8 to i64
  %38 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 20, i64 %37
  %39 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %38, align 8
  %40 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %39, i64 0, i32 4
  %41 = load i64, i64* %40, align 8
  %42 = lshr i64 %41, 1
  %43 = icmp ult i64 %42, %1
  %44 = or i1 %43, %3
  %45 = and i32 %36, 2
  %46 = icmp eq i32 %45, 0
  %47 = and i1 %44, %46
  br i1 %47, label %48, label %54

48:                                               ; preds = %35
  %49 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %13, i64 0, i32 5
  %50 = load %struct.VmaPool_T*, %struct.VmaPool_T** %49, align 8
  %51 = icmp eq %struct.VmaPool_T* %50, null
  br i1 %51, label %52, label %54

52:                                               ; preds = %48
  %53 = or i32 %36, 1
  store i32 %53, i32* %16, align 8
  br label %54

54:                                               ; preds = %52, %48, %35
  %55 = phi i32 [ %53, %52 ], [ %36, %48 ], [ %36, %35 ]
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %71, label %58

58:                                               ; preds = %54
  %59 = and i32 %55, 2
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %90

61:                                               ; preds = %58
  %62 = and i32 %55, 256
  %63 = icmp ne i32 %62, 0
  %64 = and i32 %55, 4
  %65 = icmp ne i32 %64, 0
  %66 = and i32 %55, 32
  %67 = icmp ne i32 %66, 0
  %68 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %13, i64 0, i32 6
  %69 = load i8*, i8** %68, align 8
  %70 = tail call i32 @_ZN14VmaAllocator_T23AllocateDedicatedMemoryEm20VmaSuballocationTypejbbbPvP10VkBuffer_TjP9VkImage_TmPP15VmaAllocation_T(%struct.VmaAllocator_T* %0, i64 %1, i32 %9, i32 %8, i1 zeroext %63, i1 zeroext %65, i1 zeroext %67, i8* %69, %struct.VkBuffer_T* %4, i32 %5, %struct.VkImage_T* %6, i64 %10, %struct.VmaAllocation_T** %11)
  br label %90

71:                                               ; preds = %54
  %72 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 26, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = load atomic i32, i32* %72 seq_cst, align 4
  %74 = call i32 @_ZN14VmaBlockVector8AllocateEjmmRK23VmaAllocationCreateInfo20VmaSuballocationTypemPP15VmaAllocation_T(%struct.VmaBlockVector* %39, i32 %73, i64 %1, i64 %2, %struct.VmaAllocationCreateInfo* nonnull dereferenceable(40) %13, i32 %9, i64 %10, %struct.VmaAllocation_T** %11)
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %90, label %76

76:                                               ; preds = %71
  %77 = load i32, i32* %16, align 8
  %78 = and i32 %77, 2
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %90

80:                                               ; preds = %76
  %81 = and i32 %77, 256
  %82 = icmp ne i32 %81, 0
  %83 = and i32 %77, 4
  %84 = icmp ne i32 %83, 0
  %85 = and i32 %77, 32
  %86 = icmp ne i32 %85, 0
  %87 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %13, i64 0, i32 6
  %88 = load i8*, i8** %87, align 8
  %89 = tail call i32 @_ZN14VmaAllocator_T23AllocateDedicatedMemoryEm20VmaSuballocationTypejbbbPvP10VkBuffer_TjP9VkImage_TmPP15VmaAllocation_T(%struct.VmaAllocator_T* %0, i64 %1, i32 %9, i32 %8, i1 zeroext %82, i1 zeroext %84, i1 zeroext %86, i8* %88, %struct.VkBuffer_T* %4, i32 %5, %struct.VkImage_T* %6, i64 %10, %struct.VmaAllocation_T** %11)
  br label %90

90:                                               ; preds = %71, %76, %80, %58, %61
  %91 = phi i32 [ %70, %61 ], [ -2, %58 ], [ 0, %71 ], [ -2, %76 ], [ %89, %80 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %14) #15
  ret i32 %91
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaAllocator_T23AllocateDedicatedMemoryEm20VmaSuballocationTypejbbbPvP10VkBuffer_TjP9VkImage_TmPP15VmaAllocation_T(%struct.VmaAllocator_T*, i64, i32, i32, i1 zeroext, i1 zeroext, i1 zeroext, i8*, %struct.VkBuffer_T*, i32, %struct.VkImage_T*, i64, %struct.VmaAllocation_T** nocapture) local_unnamed_addr #0 align 2 {
  %14 = alloca %struct.VmaBudget, align 8
  %15 = alloca %struct.VkMemoryAllocateInfo, align 8
  %16 = alloca %struct.VkMemoryDedicatedAllocateInfo, align 8
  %17 = alloca %struct.VkMemoryAllocateFlagsInfo, align 8
  br i1 %4, label %18, label %30

18:                                               ; preds = %13
  %19 = zext i32 %3 to i64
  %20 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %19, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = bitcast %struct.VmaBudget* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %22) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 0, i64 32, i1 false)
  call void @_ZN14VmaAllocator_T9GetBudgetEP9VmaBudgetjj(%struct.VmaAllocator_T* %0, %struct.VmaBudget* nonnull %14, i32 %21, i32 1)
  %23 = getelementptr inbounds %struct.VmaBudget, %struct.VmaBudget* %14, i64 0, i32 2
  %24 = load i64, i64* %23, align 8
  %25 = mul i64 %11, %1
  %26 = add i64 %24, %25
  %27 = getelementptr inbounds %struct.VmaBudget, %struct.VmaBudget* %14, i64 0, i32 3
  %28 = load i64, i64* %27, align 8
  %29 = icmp ugt i64 %26, %28
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %22) #15
  br i1 %29, label %280, label %30

30:                                               ; preds = %18, %13
  %31 = bitcast %struct.VkMemoryAllocateInfo* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %31) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %31, i8* align 8 bitcast ({ i32, [4 x i8], i8*, i64, i32, [4 x i8] }* @__const._ZN14VmaAllocator_T23AllocateDedicatedMemoryEm20VmaSuballocationTypejbbbPvP10VkBuffer_TjP9VkImage_TmPP15VmaAllocation_T.allocInfo to i8*), i64 32, i1 false)
  %32 = getelementptr inbounds %struct.VkMemoryAllocateInfo, %struct.VkMemoryAllocateInfo* %15, i64 0, i32 3
  store i32 %3, i32* %32, align 8
  %33 = getelementptr inbounds %struct.VkMemoryAllocateInfo, %struct.VkMemoryAllocateInfo* %15, i64 0, i32 2
  store i64 %1, i64* %33, align 8
  %34 = bitcast %struct.VkMemoryDedicatedAllocateInfo* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %34) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %34, i8* align 8 bitcast ({ i32, [4 x i8], i8*, %struct.VkImage_T*, %struct.VkBuffer_T* }* @__const._ZN14VmaAllocator_T23AllocateDedicatedMemoryEm20VmaSuballocationTypejbbbPvP10VkBuffer_TjP9VkImage_TmPP15VmaAllocation_T.dedicatedAllocInfo to i8*), i64 32, i1 false)
  %35 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 3
  %36 = load i8, i8* %35, align 8, !range !2
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %38, label %42

38:                                               ; preds = %30
  %39 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = icmp ugt i32 %40, 4198399
  br i1 %41, label %42, label %62

42:                                               ; preds = %30, %38
  %43 = icmp eq %struct.VkBuffer_T* %8, null
  br i1 %43, label %52, label %44

44:                                               ; preds = %42
  %45 = getelementptr inbounds %struct.VkMemoryDedicatedAllocateInfo, %struct.VkMemoryDedicatedAllocateInfo* %16, i64 0, i32 3
  store %struct.VkBuffer_T* %8, %struct.VkBuffer_T** %45, align 8
  %46 = getelementptr inbounds %struct.VkMemoryAllocateInfo, %struct.VkMemoryAllocateInfo* %15, i64 0, i32 1
  %47 = bitcast i8** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %struct.VkMemoryDedicatedAllocateInfo, %struct.VkMemoryDedicatedAllocateInfo* %16, i64 0, i32 1
  %50 = bitcast i8** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = bitcast i8** %46 to %struct.VkMemoryDedicatedAllocateInfo**
  store %struct.VkMemoryDedicatedAllocateInfo* %16, %struct.VkMemoryDedicatedAllocateInfo** %51, align 8
  br label %62

52:                                               ; preds = %42
  %53 = icmp eq %struct.VkImage_T* %10, null
  br i1 %53, label %62, label %54

54:                                               ; preds = %52
  %55 = getelementptr inbounds %struct.VkMemoryDedicatedAllocateInfo, %struct.VkMemoryDedicatedAllocateInfo* %16, i64 0, i32 2
  store %struct.VkImage_T* %10, %struct.VkImage_T** %55, align 8
  %56 = getelementptr inbounds %struct.VkMemoryAllocateInfo, %struct.VkMemoryAllocateInfo* %15, i64 0, i32 1
  %57 = bitcast i8** %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %struct.VkMemoryDedicatedAllocateInfo, %struct.VkMemoryDedicatedAllocateInfo* %16, i64 0, i32 1
  %60 = bitcast i8** %59 to i64*
  store i64 %58, i64* %60, align 8
  %61 = bitcast i8** %56 to %struct.VkMemoryDedicatedAllocateInfo**
  store %struct.VkMemoryDedicatedAllocateInfo* %16, %struct.VkMemoryDedicatedAllocateInfo** %61, align 8
  br label %62

62:                                               ; preds = %52, %44, %54, %38
  %63 = bitcast %struct.VkMemoryAllocateFlagsInfo* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %63) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %63, i8* align 8 bitcast ({ i32, [4 x i8], i8*, i32, i32 }* @__const._ZN14VmaAllocator_T23AllocateDedicatedMemoryEm20VmaSuballocationTypejbbbPvP10VkBuffer_TjP9VkImage_TmPP15VmaAllocation_T.allocFlagsInfo to i8*), i64 24, i1 false)
  %64 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 7
  %65 = load i8, i8* %64, align 4, !range !2
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %82, label %67

67:                                               ; preds = %62
  %68 = icmp eq %struct.VkBuffer_T* %8, null
  br i1 %68, label %72, label %69

69:                                               ; preds = %67
  %70 = and i32 %9, 131072
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %82, label %74

72:                                               ; preds = %67
  %73 = icmp eq %struct.VkImage_T* %10, null
  br i1 %73, label %74, label %82

74:                                               ; preds = %69, %72
  %75 = getelementptr inbounds %struct.VkMemoryAllocateFlagsInfo, %struct.VkMemoryAllocateFlagsInfo* %17, i64 0, i32 2
  store i32 2, i32* %75, align 8
  %76 = getelementptr inbounds %struct.VkMemoryAllocateInfo, %struct.VkMemoryAllocateInfo* %15, i64 0, i32 1
  %77 = bitcast i8** %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds %struct.VkMemoryAllocateFlagsInfo, %struct.VkMemoryAllocateFlagsInfo* %17, i64 0, i32 1
  %80 = bitcast i8** %79 to i64*
  store i64 %78, i64* %80, align 8
  %81 = bitcast i8** %76 to %struct.VkMemoryAllocateFlagsInfo**
  store %struct.VkMemoryAllocateFlagsInfo* %17, %struct.VkMemoryAllocateFlagsInfo** %81, align 8
  br label %82

82:                                               ; preds = %69, %72, %74, %62
  %83 = icmp eq i64 %11, 0
  br i1 %83, label %109, label %84

84:                                               ; preds = %82, %106
  %85 = phi i64 [ %107, %106 ], [ 0, %82 ]
  %86 = getelementptr inbounds %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %12, i64 %85
  %87 = call i32 @_ZN14VmaAllocator_T27AllocateDedicatedMemoryPageEm20VmaSuballocationTypejRK20VkMemoryAllocateInfobbPvPP15VmaAllocation_T(%struct.VmaAllocator_T* %0, i64 %1, i32 %2, i32 %3, %struct.VkMemoryAllocateInfo* nonnull dereferenceable(32) %15, i1 zeroext %5, i1 zeroext %6, i8* %7, %struct.VmaAllocation_T** %86)
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %106, label %89

89:                                               ; preds = %84
  %90 = icmp eq i64 %85, 0
  br i1 %90, label %275, label %91

91:                                               ; preds = %89
  %92 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 14, i32 1
  %93 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 14, i32 2
  %94 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 3
  %95 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %96 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 11
  %97 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13
  %98 = zext i32 %3 to i64
  %99 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %98, i32 1
  %100 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %101 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 15
  %102 = icmp eq %class.VmaAllocationObjectAllocator* %101, null
  %103 = getelementptr inbounds %class.VmaAllocationObjectAllocator, %class.VmaAllocationObjectAllocator* %101, i64 0, i32 0, i32 0
  %104 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 15, i32 1, i32 2, i32 2
  %105 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 15, i32 1, i32 2, i32 1
  br label %176

106:                                              ; preds = %84
  %107 = add nuw i64 %85, 1
  %108 = icmp eq i64 %107, %11
  br i1 %108, label %109, label %84

109:                                              ; preds = %106, %82
  %110 = zext i32 %3 to i64
  %111 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 22, i64 %110
  %112 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 0
  %113 = load i8, i8* %112, align 8, !range !2
  %114 = icmp eq i8 %113, 0
  %115 = select i1 %114, %class.VmaRWMutex* null, %class.VmaRWMutex* %111
  %116 = icmp eq %class.VmaRWMutex* %115, null
  br i1 %116, label %119, label %117

117:                                              ; preds = %109
  %118 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %115, i64 0, i32 0, i32 0
  call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %118) #15
  br label %119

119:                                              ; preds = %109, %117
  %120 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 21, i64 %110
  %121 = load %class.VmaVector.5*, %class.VmaVector.5** %120, align 8
  br i1 %83, label %173, label %122

122:                                              ; preds = %119
  %123 = getelementptr inbounds %class.VmaVector.5, %class.VmaVector.5* %121, i64 0, i32 1
  %124 = getelementptr inbounds %class.VmaVector.5, %class.VmaVector.5* %121, i64 0, i32 2
  br label %125

125:                                              ; preds = %164, %122
  %126 = phi i64 [ 0, %122 ], [ %171, %164 ]
  %127 = getelementptr inbounds %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %12, i64 %126
  %128 = load %struct.VmaAllocation_T**, %struct.VmaAllocation_T*** %123, align 8
  %129 = load i64, i64* %124, align 8
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %132

131:                                              ; preds = %125
  call void @_ZN9VmaVectorIP15VmaAllocation_T15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.5* %121, i64 1, i1 zeroext false) #15
  br label %164

132:                                              ; preds = %125
  %133 = shl nuw i64 %129, 3
  %134 = ashr exact i64 %133, 3
  %135 = bitcast %struct.VmaAllocation_T** %127 to i8**
  %136 = load i8*, i8** %135, align 8
  br label %137

137:                                              ; preds = %137, %132
  %138 = phi i64 [ 0, %132 ], [ %148, %137 ]
  %139 = phi i64 [ %134, %132 ], [ %147, %137 ]
  %140 = add i64 %139, %138
  %141 = lshr i64 %140, 1
  %142 = getelementptr inbounds %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %128, i64 %141
  %143 = bitcast %struct.VmaAllocation_T** %142 to i8**
  %144 = load i8*, i8** %143, align 8
  %145 = icmp ult i8* %144, %136
  %146 = add nuw i64 %141, 1
  %147 = select i1 %145, i64 %139, i64 %141
  %148 = select i1 %145, i64 %146, i64 %138
  %149 = icmp ult i64 %148, %147
  br i1 %149, label %137, label %150

150:                                              ; preds = %137
  %151 = shl i64 %148, 3
  %152 = ashr exact i64 %151, 3
  %153 = add i64 %129, 1
  call void @_ZN9VmaVectorIP15VmaAllocation_T15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.5* %121, i64 %153, i1 zeroext false) #15
  %154 = icmp ugt i64 %129, %152
  br i1 %154, label %155, label %164

155:                                              ; preds = %150
  %156 = load %struct.VmaAllocation_T**, %struct.VmaAllocation_T*** %123, align 8
  %157 = add nuw nsw i64 %152, 1
  %158 = getelementptr inbounds %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %156, i64 %157
  %159 = bitcast %struct.VmaAllocation_T** %158 to i8*
  %160 = getelementptr inbounds %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %156, i64 %152
  %161 = bitcast %struct.VmaAllocation_T** %160 to i8*
  %162 = sub i64 %129, %152
  %163 = shl i64 %162, 3
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %159, i8* align 8 %161, i64 %163, i1 false) #15
  br label %164

164:                                              ; preds = %131, %150, %155
  %165 = phi i64 [ 0, %131 ], [ %152, %150 ], [ %152, %155 ]
  %166 = bitcast %struct.VmaAllocation_T** %127 to i64*
  %167 = load i64, i64* %166, align 8
  %168 = load %struct.VmaAllocation_T**, %struct.VmaAllocation_T*** %123, align 8
  %169 = getelementptr inbounds %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %168, i64 %165
  %170 = bitcast %struct.VmaAllocation_T** %169 to i64*
  store i64 %167, i64* %170, align 8
  %171 = add nuw i64 %126, 1
  %172 = icmp eq i64 %171, %11
  br i1 %172, label %173, label %125

173:                                              ; preds = %164, %119
  br i1 %116, label %278, label %174

174:                                              ; preds = %173
  %175 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %115, i64 0, i32 0, i32 0
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %175) #15
  br label %278

176:                                              ; preds = %91, %273
  %177 = phi i64 [ %85, %91 ], [ %178, %273 ]
  %178 = add i64 %177, -1
  %179 = getelementptr inbounds %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %12, i64 %178
  %180 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %179, align 8
  %181 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %180, i64 0, i32 5
  %182 = load i8, i8* %181, align 8
  switch i8 %182, label %193 [
    i8 1, label %183
    i8 2, label %187
  ]

183:                                              ; preds = %176
  %184 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %180, i64 0, i32 9, i32 0, i32 0
  %185 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %184, align 8
  %186 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %185, i64 0, i32 4
  br label %190

187:                                              ; preds = %176
  %188 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %180, i64 0, i32 9
  %189 = bitcast %union.anon* %188 to %struct.VkDeviceMemory_T**
  br label %190

190:                                              ; preds = %187, %183
  %191 = phi %struct.VkDeviceMemory_T** [ %186, %183 ], [ %189, %187 ]
  %192 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %191, align 8
  br label %193

193:                                              ; preds = %190, %176
  %194 = phi %struct.VkDeviceMemory_T* [ null, %176 ], [ %192, %190 ]
  %195 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %180, i64 0, i32 1
  %196 = load i64, i64* %195, align 8
  %197 = load void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)*, void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)** %92, align 8
  %198 = icmp eq void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)* %197, null
  br i1 %198, label %201, label %199

199:                                              ; preds = %193
  %200 = load i8*, i8** %93, align 8
  call void %197(%struct.VmaAllocator_T* %0, i32 %3, %struct.VkDeviceMemory_T* %194, i64 %196, i8* %200) #15
  br label %201

201:                                              ; preds = %193, %199
  %202 = load void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)** %94, align 8
  %203 = load %struct.VkDevice_T*, %struct.VkDevice_T** %95, align 8
  %204 = load i8, i8* %96, align 8, !range !2
  %205 = icmp eq i8 %204, 0
  %206 = select i1 %205, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %97
  call void %202(%struct.VkDevice_T* %203, %struct.VkDeviceMemory_T* %194, %struct.VkAllocationCallbacks* %206) #15
  %207 = load i32, i32* %99, align 4
  %208 = zext i32 %207 to i64
  %209 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 0, i64 %208, i32 0, i32 0, i32 0, i32 0, i32 0
  %210 = atomicrmw sub i64* %209, i64 %196 seq_cst
  %211 = load i32, i32* %99, align 4
  %212 = load i64, i64* %195, align 8
  %213 = zext i32 %211 to i64
  %214 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 1, i64 %213, i32 0, i32 0, i32 0, i32 0, i32 0
  %215 = atomicrmw sub i64* %214, i64 %212 seq_cst
  %216 = atomicrmw add i32* %100, i32 1 seq_cst
  %217 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %180, i64 0, i32 8
  %218 = load i8, i8* %217, align 1
  %219 = and i8 %218, 1
  %220 = icmp eq i8 %219, 0
  br i1 %220, label %237, label %221

221:                                              ; preds = %201
  %222 = load i8, i8* %96, align 8, !range !2
  %223 = icmp eq i8 %222, 0
  %224 = select i1 %223, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %97
  %225 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %180, i64 0, i32 2
  %226 = load i8*, i8** %225, align 8
  %227 = icmp eq i8* %226, null
  br i1 %227, label %239, label %228

228:                                              ; preds = %221
  br i1 %223, label %236, label %229

229:                                              ; preds = %228
  %230 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %224, i64 0, i32 3
  %231 = load void (i8*, i8*)*, void (i8*, i8*)** %230, align 8
  %232 = icmp eq void (i8*, i8*)* %231, null
  br i1 %232, label %236, label %233

233:                                              ; preds = %229
  %234 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %224, i64 0, i32 0
  %235 = load i8*, i8** %234, align 8
  call void %231(i8* %235, i8* nonnull %226) #15
  br label %239

236:                                              ; preds = %229, %228
  call void @free(i8* nonnull %226) #15
  br label %239

237:                                              ; preds = %201
  %238 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %180, i64 0, i32 2
  br label %239

239:                                              ; preds = %221, %233, %236, %237
  %240 = phi i8** [ %238, %237 ], [ %225, %236 ], [ %225, %233 ], [ %225, %221 ]
  store i8* null, i8** %240, align 8
  br i1 %102, label %242, label %241

241:                                              ; preds = %239
  call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %103) #15
  br label %242

242:                                              ; preds = %241, %239
  %243 = load i64, i64* %104, align 8
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %271, label %245

245:                                              ; preds = %242
  %246 = load %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"*, %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"** %105, align 8
  %247 = bitcast %struct.VmaAllocation_T* %180 to %"union.VmaPoolAllocator<VmaAllocation_T>::Item"*
  br label %248

248:                                              ; preds = %269, %245
  %249 = phi i64 [ %243, %245 ], [ %250, %269 ]
  %250 = add i64 %249, -1
  %251 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %246, i64 %250, i32 0
  %252 = load %"union.VmaPoolAllocator<VmaAllocation_T>::Item"*, %"union.VmaPoolAllocator<VmaAllocation_T>::Item"** %251, align 8
  %253 = icmp ugt %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %252, %247
  br i1 %253, label %269, label %254

254:                                              ; preds = %248
  %255 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %246, i64 %250, i32 1
  %256 = load i32, i32* %255, align 8
  %257 = zext i32 %256 to i64
  %258 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %252, i64 %257
  %259 = icmp ugt %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %258, %247
  br i1 %259, label %260, label %269

260:                                              ; preds = %254
  %261 = ptrtoint %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %252 to i64
  %262 = ptrtoint %struct.VmaAllocation_T* %180 to i64
  %263 = sub i64 %262, %261
  %264 = sdiv exact i64 %263, 72
  %265 = trunc i64 %264 to i32
  %266 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %246, i64 %250, i32 2
  %267 = load i32, i32* %266, align 4
  %268 = bitcast %struct.VmaAllocation_T* %180 to i32*
  store i32 %267, i32* %268, align 8
  store i32 %265, i32* %266, align 4
  br label %271

269:                                              ; preds = %254, %248
  %270 = icmp eq i64 %250, 0
  br i1 %270, label %271, label %248

271:                                              ; preds = %269, %260, %242
  br i1 %102, label %273, label %272

272:                                              ; preds = %271
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %103) #15
  br label %273

273:                                              ; preds = %271, %272
  %274 = icmp eq i64 %178, 0
  br i1 %274, label %275, label %176

275:                                              ; preds = %273, %89
  %276 = bitcast %struct.VmaAllocation_T** %12 to i8*
  %277 = shl i64 %11, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %276, i8 0, i64 %277, i1 false)
  br label %278

278:                                              ; preds = %174, %173, %275
  %279 = phi i32 [ %87, %275 ], [ 0, %173 ], [ 0, %174 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %63) #15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %34) #15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %31) #15
  br label %280

280:                                              ; preds = %18, %278
  %281 = phi i32 [ %279, %278 ], [ -2, %18 ]
  ret i32 %281
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaAllocator_T27AllocateDedicatedMemoryPageEm20VmaSuballocationTypejRK20VkMemoryAllocateInfobbPvPP15VmaAllocation_T(%struct.VmaAllocator_T*, i64, i32, i32, %struct.VkMemoryAllocateInfo* dereferenceable(32), i1 zeroext, i1 zeroext, i8*, %struct.VmaAllocation_T** nocapture) local_unnamed_addr #0 align 2 {
  %10 = alloca %struct.VkDeviceMemory_T*, align 8
  %11 = alloca i8*, align 8
  %12 = bitcast %struct.VkDeviceMemory_T** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #15
  store %struct.VkDeviceMemory_T* null, %struct.VkDeviceMemory_T** %10, align 8
  %13 = getelementptr inbounds %struct.VkMemoryAllocateInfo, %struct.VkMemoryAllocateInfo* %4, i64 0, i32 3
  %14 = load i32, i32* %13, align 8
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %15, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 16
  %19 = load i32, i32* %18, align 8
  %20 = shl i32 1, %17
  %21 = and i32 %19, %20
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %43, label %23

23:                                               ; preds = %9
  %24 = zext i32 %17 to i64
  %25 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 3, i64 %24, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 0, i64 %24, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load atomic i64, i64* %27 seq_cst, align 8
  %29 = getelementptr inbounds %struct.VkMemoryAllocateInfo, %struct.VkMemoryAllocateInfo* %4, i64 0, i32 2
  %30 = load i64, i64* %29, align 8
  %31 = add i64 %30, %28
  %32 = icmp ugt i64 %31, %26
  br i1 %32, label %151, label %33

33:                                               ; preds = %23, %38
  %34 = phi i64 [ %41, %38 ], [ %31, %23 ]
  %35 = phi i64 [ %39, %38 ], [ %28, %23 ]
  %36 = cmpxchg i64* %27, i64 %35, i64 %34 seq_cst seq_cst
  %37 = extractvalue { i64, i1 } %36, 1
  br i1 %37, label %49, label %38

38:                                               ; preds = %33
  %39 = extractvalue { i64, i1 } %36, 0
  %40 = load i64, i64* %29, align 8
  %41 = add i64 %40, %39
  %42 = icmp ugt i64 %41, %26
  br i1 %42, label %151, label %33

43:                                               ; preds = %9
  %44 = getelementptr inbounds %struct.VkMemoryAllocateInfo, %struct.VkMemoryAllocateInfo* %4, i64 0, i32 2
  %45 = load i64, i64* %44, align 8
  %46 = zext i32 %17 to i64
  %47 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 0, i64 %46, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = atomicrmw add i64* %47, i64 %45 seq_cst
  br label %49

49:                                               ; preds = %33, %43
  %50 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 2
  %51 = load i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)*, i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)** %50, align 8
  %52 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %53 = load %struct.VkDevice_T*, %struct.VkDevice_T** %52, align 8
  %54 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 11
  %55 = load i8, i8* %54, align 8, !range !2
  %56 = icmp eq i8 %55, 0
  %57 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13
  %58 = select i1 %56, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %57
  %59 = call i32 %51(%struct.VkDevice_T* %53, %struct.VkMemoryAllocateInfo* %4, %struct.VkAllocationCallbacks* %58, %struct.VkDeviceMemory_T** nonnull %10) #15
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %74

61:                                               ; preds = %49
  %62 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %63 = atomicrmw add i32* %62, i32 1 seq_cst
  %64 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 14, i32 0
  %65 = load void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)*, void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)** %64, align 8
  %66 = icmp eq void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)* %65, null
  br i1 %66, label %81, label %67

67:                                               ; preds = %61
  %68 = load i32, i32* %13, align 8
  %69 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %10, align 8
  %70 = getelementptr inbounds %struct.VkMemoryAllocateInfo, %struct.VkMemoryAllocateInfo* %4, i64 0, i32 2
  %71 = load i64, i64* %70, align 8
  %72 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 14, i32 2
  %73 = load i8*, i8** %72, align 8
  call void %65(%struct.VmaAllocator_T* %0, i32 %68, %struct.VkDeviceMemory_T* %69, i64 %71, i8* %73) #15
  br label %81

74:                                               ; preds = %49
  %75 = getelementptr inbounds %struct.VkMemoryAllocateInfo, %struct.VkMemoryAllocateInfo* %4, i64 0, i32 2
  %76 = load i64, i64* %75, align 8
  %77 = zext i32 %17 to i64
  %78 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 0, i64 %77, i32 0, i32 0, i32 0, i32 0, i32 0
  %79 = atomicrmw sub i64* %78, i64 %76 seq_cst
  %80 = icmp slt i32 %59, 0
  br i1 %80, label %151, label %81

81:                                               ; preds = %67, %61, %74
  %82 = bitcast i8** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %82) #15
  store i8* null, i8** %11, align 8
  br i1 %5, label %83, label %111

83:                                               ; preds = %81
  %84 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 4
  %85 = load i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)** %84, align 8
  %86 = load %struct.VkDevice_T*, %struct.VkDevice_T** %52, align 8
  %87 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %10, align 8
  %88 = call i32 %85(%struct.VkDevice_T* %86, %struct.VkDeviceMemory_T* %87, i64 0, i64 -1, i32 0, i8** nonnull %11) #15
  %89 = icmp slt i32 %88, 0
  br i1 %89, label %90, label %111

90:                                               ; preds = %83
  %91 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %10, align 8
  %92 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 14, i32 1
  %93 = load void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)*, void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)** %92, align 8
  %94 = icmp eq void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)* %93, null
  br i1 %94, label %98, label %95

95:                                               ; preds = %90
  %96 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 14, i32 2
  %97 = load i8*, i8** %96, align 8
  call void %93(%struct.VmaAllocator_T* %0, i32 %3, %struct.VkDeviceMemory_T* %91, i64 %1, i8* %97) #15
  br label %98

98:                                               ; preds = %90, %95
  %99 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 3
  %100 = load void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)** %99, align 8
  %101 = load %struct.VkDevice_T*, %struct.VkDevice_T** %52, align 8
  %102 = load i8, i8* %54, align 8, !range !2
  %103 = icmp eq i8 %102, 0
  %104 = select i1 %103, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %57
  call void %100(%struct.VkDevice_T* %101, %struct.VkDeviceMemory_T* %91, %struct.VkAllocationCallbacks* %104) #15
  %105 = zext i32 %3 to i64
  %106 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %105, i32 1
  %107 = load i32, i32* %106, align 4
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 0, i64 %108, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = atomicrmw sub i64* %109, i64 %1 seq_cst
  br label %149

111:                                              ; preds = %83, %81
  %112 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 15
  %113 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 26, i32 0, i32 0, i32 0, i32 0, i32 0
  %114 = load atomic i32, i32* %113 seq_cst, align 4
  %115 = icmp eq %class.VmaAllocationObjectAllocator* %112, null
  br i1 %115, label %116, label %118

116:                                              ; preds = %111
  %117 = call %struct.VmaAllocation_T* @_ZN16VmaPoolAllocatorI15VmaAllocation_TE5AllocIJjbEEEPS0_DpT_(%class.VmaPoolAllocator* nonnull inttoptr (i64 40 to %class.VmaPoolAllocator*), i32 %114, i1 zeroext %6) #15
  br label %122

118:                                              ; preds = %111
  %119 = getelementptr inbounds %class.VmaAllocationObjectAllocator, %class.VmaAllocationObjectAllocator* %112, i64 0, i32 0, i32 0
  call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %119) #15
  %120 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 15, i32 1
  %121 = call %struct.VmaAllocation_T* @_ZN16VmaPoolAllocatorI15VmaAllocation_TE5AllocIJjbEEEPS0_DpT_(%class.VmaPoolAllocator* %120, i32 %114, i1 zeroext %6) #15
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %119) #15
  br label %122

122:                                              ; preds = %116, %118
  %123 = phi %struct.VmaAllocation_T* [ %117, %116 ], [ %121, %118 ]
  store %struct.VmaAllocation_T* %123, %struct.VmaAllocation_T** %8, align 8
  %124 = bitcast %struct.VkDeviceMemory_T** %10 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = load i8*, i8** %11, align 8
  %127 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %123, i64 0, i32 5
  store i8 2, i8* %127, align 8
  %128 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %123, i64 0, i32 0
  store i64 0, i64* %128, align 8
  %129 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %123, i64 0, i32 1
  store i64 %1, i64* %129, align 8
  %130 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %123, i64 0, i32 4
  store i32 %3, i32* %130, align 4
  %131 = trunc i32 %2 to i8
  %132 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %123, i64 0, i32 6
  store i8 %131, i8* %132, align 1
  %133 = icmp eq i8* %126, null
  %134 = select i1 %133, i8 0, i8 -128
  %135 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %123, i64 0, i32 7
  store i8 %134, i8* %135, align 2
  %136 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %123, i64 0, i32 9
  %137 = bitcast %union.anon* %136 to i64*
  store i64 %125, i64* %137, align 8
  %138 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %123, i64 0, i32 9, i32 0, i32 1
  %139 = bitcast i64* %138 to i8**
  store i8* %126, i8** %139, align 8
  %140 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %8, align 8
  call void @_ZN15VmaAllocation_T11SetUserDataEP14VmaAllocator_TPv(%struct.VmaAllocation_T* %140, %struct.VmaAllocator_T* %0, i8* %7)
  %141 = zext i32 %3 to i64
  %142 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %141, i32 1
  %143 = load i32, i32* %142, align 4
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 1, i64 %144, i32 0, i32 0, i32 0, i32 0, i32 0
  %146 = atomicrmw add i64* %145, i64 %1 seq_cst
  %147 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %148 = atomicrmw add i32* %147, i32 1 seq_cst
  br label %149

149:                                              ; preds = %122, %98
  %150 = phi i32 [ %88, %98 ], [ 0, %122 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %82) #15
  br label %151

151:                                              ; preds = %38, %23, %74, %149
  %152 = phi i32 [ %150, %149 ], [ %59, %74 ], [ -2, %23 ], [ -2, %38 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #15
  ret i32 %152
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK14VmaAllocator_T27GetBufferMemoryRequirementsEP10VkBuffer_TR20VkMemoryRequirementsRbS4_(%struct.VmaAllocator_T* nocapture readonly, %struct.VkBuffer_T*, %struct.VkMemoryRequirements* dereferenceable(24), i8* nocapture dereferenceable(1), i8* nocapture dereferenceable(1)) local_unnamed_addr #0 align 2 {
  %6 = alloca %struct.VkBufferMemoryRequirementsInfo2, align 8
  %7 = alloca %struct.VkMemoryDedicatedRequirements, align 8
  %8 = alloca %struct.VkMemoryRequirements2, align 8
  %9 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 3
  %10 = load i8, i8* %9, align 8, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %16

12:                                               ; preds = %5
  %13 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = icmp ugt i32 %14, 4198399
  br i1 %15, label %16, label %41

16:                                               ; preds = %5, %12
  %17 = bitcast %struct.VkBufferMemoryRequirementsInfo2* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %17, i8* align 8 bitcast ({ i32, [4 x i8], i8*, %struct.VkBuffer_T* }* @__const._ZNK14VmaAllocator_T27GetBufferMemoryRequirementsEP10VkBuffer_TR20VkMemoryRequirementsRbS4_.memReqInfo to i8*), i64 16, i1 false)
  %18 = getelementptr inbounds %struct.VkBufferMemoryRequirementsInfo2, %struct.VkBufferMemoryRequirementsInfo2* %6, i64 0, i32 2
  store %struct.VkBuffer_T* %1, %struct.VkBuffer_T** %18, align 8
  %19 = bitcast %struct.VkMemoryDedicatedRequirements* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %19, i8* align 8 bitcast ({ i32, [4 x i8], i8*, i32, i32 }* @__const._ZNK14VmaAllocator_T26GetImageMemoryRequirementsEP9VkImage_TR20VkMemoryRequirementsRbS4_.memDedicatedReq to i8*), i64 24, i1 false)
  %20 = bitcast %struct.VkMemoryRequirements2* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %20) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 40, i1 false)
  %21 = getelementptr inbounds %struct.VkMemoryRequirements2, %struct.VkMemoryRequirements2* %8, i64 0, i32 0
  store i32 1000146003, i32* %21, align 8
  %22 = getelementptr inbounds %struct.VkMemoryRequirements2, %struct.VkMemoryRequirements2* %8, i64 0, i32 1
  %23 = getelementptr inbounds %struct.VkMemoryDedicatedRequirements, %struct.VkMemoryDedicatedRequirements* %7, i64 0, i32 1
  %24 = bitcast i8** %23 to i64*
  store i64 0, i64* %24, align 8
  %25 = bitcast i8** %22 to %struct.VkMemoryDedicatedRequirements**
  store %struct.VkMemoryDedicatedRequirements* %7, %struct.VkMemoryDedicatedRequirements** %25, align 8
  %26 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 17
  %27 = load void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)** %26, align 8
  %28 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %29 = load %struct.VkDevice_T*, %struct.VkDevice_T** %28, align 8
  call void %27(%struct.VkDevice_T* %29, %struct.VkBufferMemoryRequirementsInfo2* nonnull %6, %struct.VkMemoryRequirements2* nonnull %8) #15
  %30 = getelementptr inbounds %struct.VkMemoryRequirements2, %struct.VkMemoryRequirements2* %8, i64 0, i32 2
  %31 = bitcast %struct.VkMemoryRequirements* %2 to i8*
  %32 = bitcast %struct.VkMemoryRequirements* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 24, i1 false)
  %33 = getelementptr inbounds %struct.VkMemoryDedicatedRequirements, %struct.VkMemoryDedicatedRequirements* %7, i64 0, i32 3
  %34 = load i32, i32* %33, align 4
  %35 = icmp ne i32 %34, 0
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %3, align 1
  %37 = getelementptr inbounds %struct.VkMemoryDedicatedRequirements, %struct.VkMemoryDedicatedRequirements* %7, i64 0, i32 2
  %38 = load i32, i32* %37, align 8
  %39 = icmp ne i32 %38, 0
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %4, align 1
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %20) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #15
  br label %46

41:                                               ; preds = %12
  %42 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 10
  %43 = load void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)** %42, align 8
  %44 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %45 = load %struct.VkDevice_T*, %struct.VkDevice_T** %44, align 8
  tail call void %43(%struct.VkDevice_T* %45, %struct.VkBuffer_T* %1, %struct.VkMemoryRequirements* %2) #15
  store i8 0, i8* %3, align 1
  store i8 0, i8* %4, align 1
  br label %46

46:                                               ; preds = %41, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK14VmaAllocator_T26GetImageMemoryRequirementsEP9VkImage_TR20VkMemoryRequirementsRbS4_(%struct.VmaAllocator_T* nocapture readonly, %struct.VkImage_T*, %struct.VkMemoryRequirements* dereferenceable(24), i8* nocapture dereferenceable(1), i8* nocapture dereferenceable(1)) local_unnamed_addr #0 align 2 {
  %6 = alloca %struct.VkImageMemoryRequirementsInfo2, align 8
  %7 = alloca %struct.VkMemoryDedicatedRequirements, align 8
  %8 = alloca %struct.VkMemoryRequirements2, align 8
  %9 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 3
  %10 = load i8, i8* %9, align 8, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %16

12:                                               ; preds = %5
  %13 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = icmp ugt i32 %14, 4198399
  br i1 %15, label %16, label %41

16:                                               ; preds = %5, %12
  %17 = bitcast %struct.VkImageMemoryRequirementsInfo2* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %17, i8* align 8 bitcast ({ i32, [4 x i8], i8*, %struct.VkImage_T* }* @__const._ZNK14VmaAllocator_T26GetImageMemoryRequirementsEP9VkImage_TR20VkMemoryRequirementsRbS4_.memReqInfo to i8*), i64 16, i1 false)
  %18 = getelementptr inbounds %struct.VkImageMemoryRequirementsInfo2, %struct.VkImageMemoryRequirementsInfo2* %6, i64 0, i32 2
  store %struct.VkImage_T* %1, %struct.VkImage_T** %18, align 8
  %19 = bitcast %struct.VkMemoryDedicatedRequirements* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %19, i8* align 8 bitcast ({ i32, [4 x i8], i8*, i32, i32 }* @__const._ZNK14VmaAllocator_T26GetImageMemoryRequirementsEP9VkImage_TR20VkMemoryRequirementsRbS4_.memDedicatedReq to i8*), i64 24, i1 false)
  %20 = bitcast %struct.VkMemoryRequirements2* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %20) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 40, i1 false)
  %21 = getelementptr inbounds %struct.VkMemoryRequirements2, %struct.VkMemoryRequirements2* %8, i64 0, i32 0
  store i32 1000146003, i32* %21, align 8
  %22 = getelementptr inbounds %struct.VkMemoryRequirements2, %struct.VkMemoryRequirements2* %8, i64 0, i32 1
  %23 = getelementptr inbounds %struct.VkMemoryDedicatedRequirements, %struct.VkMemoryDedicatedRequirements* %7, i64 0, i32 1
  %24 = bitcast i8** %23 to i64*
  store i64 0, i64* %24, align 8
  %25 = bitcast i8** %22 to %struct.VkMemoryDedicatedRequirements**
  store %struct.VkMemoryDedicatedRequirements* %7, %struct.VkMemoryDedicatedRequirements** %25, align 8
  %26 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 18
  %27 = load void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)** %26, align 8
  %28 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %29 = load %struct.VkDevice_T*, %struct.VkDevice_T** %28, align 8
  call void %27(%struct.VkDevice_T* %29, %struct.VkImageMemoryRequirementsInfo2* nonnull %6, %struct.VkMemoryRequirements2* nonnull %8) #15
  %30 = getelementptr inbounds %struct.VkMemoryRequirements2, %struct.VkMemoryRequirements2* %8, i64 0, i32 2
  %31 = bitcast %struct.VkMemoryRequirements* %2 to i8*
  %32 = bitcast %struct.VkMemoryRequirements* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 24, i1 false)
  %33 = getelementptr inbounds %struct.VkMemoryDedicatedRequirements, %struct.VkMemoryDedicatedRequirements* %7, i64 0, i32 3
  %34 = load i32, i32* %33, align 4
  %35 = icmp ne i32 %34, 0
  %36 = zext i1 %35 to i8
  store i8 %36, i8* %3, align 1
  %37 = getelementptr inbounds %struct.VkMemoryDedicatedRequirements, %struct.VkMemoryDedicatedRequirements* %7, i64 0, i32 2
  %38 = load i32, i32* %37, align 8
  %39 = icmp ne i32 %38, 0
  %40 = zext i1 %39 to i8
  store i8 %40, i8* %4, align 1
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %20) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #15
  br label %46

41:                                               ; preds = %12
  %42 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 11
  %43 = load void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)** %42, align 8
  %44 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %45 = load %struct.VkDevice_T*, %struct.VkDevice_T** %44, align 8
  tail call void %43(%struct.VkDevice_T* %45, %struct.VkImage_T* %1, %struct.VkMemoryRequirements* %2) #15
  store i8 0, i8* %3, align 1
  store i8 0, i8* %4, align 1
  br label %46

46:                                               ; preds = %41, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaAllocator_T14AllocateMemoryERK20VkMemoryRequirementsbbP10VkBuffer_TjP9VkImage_TRK23VmaAllocationCreateInfo20VmaSuballocationTypemPP15VmaAllocation_T(%struct.VmaAllocator_T*, %struct.VkMemoryRequirements* nocapture readonly dereferenceable(24), i1 zeroext, i1 zeroext, %struct.VkBuffer_T*, i32, %struct.VkImage_T*, %struct.VmaAllocationCreateInfo* nocapture readonly dereferenceable(40), i32, i64, %struct.VmaAllocation_T** nocapture) local_unnamed_addr #0 align 2 {
  %12 = alloca %struct.VmaAllocationCreateInfo, align 8
  %13 = alloca i32, align 4
  %14 = bitcast %struct.VmaAllocation_T** %10 to i8*
  %15 = shl i64 %9, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 %15, i1 false)
  %16 = getelementptr inbounds %struct.VkMemoryRequirements, %struct.VkMemoryRequirements* %1, i64 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %137, label %19

19:                                               ; preds = %11
  %20 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %7, i64 0, i32 0
  %21 = load i32, i32* %20, align 8
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  %24 = and i32 %21, 2
  %25 = icmp eq i32 %24, 0
  %26 = and i32 %21, 3
  %27 = icmp eq i32 %26, 3
  %28 = and i32 %21, 12
  %29 = icmp eq i32 %28, 12
  %30 = or i1 %27, %29
  br i1 %30, label %137, label %31

31:                                               ; preds = %19
  br i1 %2, label %32, label %37

32:                                               ; preds = %31
  br i1 %25, label %33, label %137

33:                                               ; preds = %32
  %34 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %7, i64 0, i32 5
  %35 = load %struct.VmaPool_T*, %struct.VmaPool_T** %34, align 8
  %36 = icmp eq %struct.VmaPool_T* %35, null
  br i1 %36, label %78, label %137

37:                                               ; preds = %31
  %38 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %7, i64 0, i32 5
  %39 = load %struct.VmaPool_T*, %struct.VmaPool_T** %38, align 8
  %40 = icmp eq %struct.VmaPool_T* %39, null
  br i1 %40, label %78, label %41

41:                                               ; preds = %37
  br i1 %23, label %42, label %137

42:                                               ; preds = %41
  %43 = getelementptr inbounds %struct.VkMemoryRequirements, %struct.VkMemoryRequirements* %1, i64 0, i32 1
  %44 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %39, i64 0, i32 0
  %45 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %39, i64 0, i32 0, i32 2
  %46 = load i32, i32* %45, align 8
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %47, i32 0
  %49 = load i32, i32* %48, align 4
  %50 = and i32 %49, 6
  %51 = icmp eq i32 %50, 2
  br i1 %51, label %52, label %57

52:                                               ; preds = %42
  %53 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 18, i32 7, i32 105
  %54 = load i64, i64* %53, align 8
  %55 = icmp ugt i64 %54, 1
  %56 = select i1 %55, i64 %54, i64 1
  br label %57

57:                                               ; preds = %42, %52
  %58 = phi i64 [ %56, %52 ], [ 1, %42 ]
  %59 = load i64, i64* %43, align 8
  %60 = icmp ult i64 %59, %58
  %61 = select i1 %60, i64 %58, i64 %59
  %62 = bitcast %struct.VmaAllocationCreateInfo* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %62) #15
  %63 = bitcast %struct.VmaAllocationCreateInfo* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %62, i8* align 8 %63, i64 40, i1 false)
  %64 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %12, i64 0, i32 0
  %65 = load i32, i32* %64, align 8
  %66 = and i32 %65, 4
  %67 = icmp ne i32 %66, 0
  %68 = and i32 %49, 2
  %69 = icmp eq i32 %68, 0
  %70 = and i1 %69, %67
  br i1 %70, label %71, label %73

71:                                               ; preds = %57
  %72 = and i32 %65, -5
  store i32 %72, i32* %64, align 8
  br label %73

73:                                               ; preds = %57, %71
  %74 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 26, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load atomic i32, i32* %74 seq_cst, align 4
  %76 = load i64, i64* %16, align 8
  %77 = call i32 @_ZN14VmaBlockVector8AllocateEjmmRK23VmaAllocationCreateInfo20VmaSuballocationTypemPP15VmaAllocation_T(%struct.VmaBlockVector* %44, i32 %75, i64 %76, i64 %61, %struct.VmaAllocationCreateInfo* nonnull dereferenceable(40) %12, i32 %8, i64 %9, %struct.VmaAllocation_T** %10)
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %62) #15
  br label %137

78:                                               ; preds = %33, %37
  %79 = getelementptr inbounds %struct.VkMemoryRequirements, %struct.VkMemoryRequirements* %1, i64 0, i32 2
  %80 = load i32, i32* %79, align 8
  %81 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %81) #15
  store i32 -1, i32* %13, align 4
  %82 = call i32 @vmaFindMemoryTypeIndex(%struct.VmaAllocator_T* %0, i32 %80, %struct.VmaAllocationCreateInfo* %7, i32* nonnull %13)
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %135

84:                                               ; preds = %78
  %85 = getelementptr inbounds %struct.VkMemoryRequirements, %struct.VkMemoryRequirements* %1, i64 0, i32 1
  %86 = load i32, i32* %13, align 4
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %87, i32 0
  %89 = load i32, i32* %88, align 4
  %90 = and i32 %89, 6
  %91 = icmp eq i32 %90, 2
  br i1 %91, label %92, label %97

92:                                               ; preds = %84
  %93 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 18, i32 7, i32 105
  %94 = load i64, i64* %93, align 8
  %95 = icmp ugt i64 %94, 1
  %96 = select i1 %95, i64 %94, i64 1
  br label %97

97:                                               ; preds = %84, %92
  %98 = phi i64 [ %96, %92 ], [ 1, %84 ]
  %99 = load i64, i64* %85, align 8
  %100 = icmp ult i64 %99, %98
  %101 = select i1 %100, i64 %98, i64 %99
  %102 = load i64, i64* %16, align 8
  %103 = or i1 %2, %3
  %104 = tail call i32 @_ZN14VmaAllocator_T20AllocateMemoryOfTypeEmmbP10VkBuffer_TjP9VkImage_TRK23VmaAllocationCreateInfoj20VmaSuballocationTypemPP15VmaAllocation_T(%struct.VmaAllocator_T* %0, i64 %102, i64 %101, i1 zeroext %103, %struct.VkBuffer_T* %4, i32 %5, %struct.VkImage_T* %6, %struct.VmaAllocationCreateInfo* dereferenceable(40) %7, i32 %86, i32 %8, i64 %9, %struct.VmaAllocation_T** %10)
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %135, label %106

106:                                              ; preds = %97
  %107 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 18, i32 7, i32 105
  br label %108

108:                                              ; preds = %106, %127
  %109 = phi i32 [ %117, %127 ], [ %86, %106 ]
  %110 = phi i32 [ %113, %127 ], [ %80, %106 ]
  %111 = shl i32 1, %109
  %112 = xor i32 %111, -1
  %113 = and i32 %110, %112
  %114 = call i32 @vmaFindMemoryTypeIndex(%struct.VmaAllocator_T* %0, i32 %113, %struct.VmaAllocationCreateInfo* %7, i32* nonnull %13)
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %135

116:                                              ; preds = %108
  %117 = load i32, i32* %13, align 4
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %118, i32 0
  %120 = load i32, i32* %119, align 4
  %121 = and i32 %120, 6
  %122 = icmp eq i32 %121, 2
  br i1 %122, label %123, label %127

123:                                              ; preds = %116
  %124 = load i64, i64* %107, align 8
  %125 = icmp ugt i64 %124, 1
  %126 = select i1 %125, i64 %124, i64 1
  br label %127

127:                                              ; preds = %116, %123
  %128 = phi i64 [ %126, %123 ], [ 1, %116 ]
  %129 = load i64, i64* %85, align 8
  %130 = icmp ult i64 %129, %128
  %131 = select i1 %130, i64 %128, i64 %129
  %132 = load i64, i64* %16, align 8
  %133 = tail call i32 @_ZN14VmaAllocator_T20AllocateMemoryOfTypeEmmbP10VkBuffer_TjP9VkImage_TRK23VmaAllocationCreateInfoj20VmaSuballocationTypemPP15VmaAllocation_T(%struct.VmaAllocator_T* %0, i64 %132, i64 %131, i1 zeroext %103, %struct.VkBuffer_T* %4, i32 %5, %struct.VkImage_T* %6, %struct.VmaAllocationCreateInfo* dereferenceable(40) %7, i32 %117, i32 %8, i64 %9, %struct.VmaAllocation_T** %10)
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %135, label %108

135:                                              ; preds = %127, %108, %78, %97
  %136 = phi i32 [ 0, %97 ], [ %82, %78 ], [ -2, %108 ], [ 0, %127 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %81) #15
  br label %137

137:                                              ; preds = %19, %41, %33, %32, %11, %135, %73
  %138 = phi i32 [ %77, %73 ], [ %136, %135 ], [ -1000011001, %11 ], [ -2, %19 ], [ -2, %32 ], [ -2, %33 ], [ -2, %41 ]
  ret i32 %138
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @vmaFindMemoryTypeIndex(%struct.VmaAllocator_T* nocapture readonly, i32, %struct.VmaAllocationCreateInfo* nocapture readonly, i32* nocapture) local_unnamed_addr #6 {
  %5 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 33
  %6 = load i32, i32* %5, align 8
  %7 = and i32 %6, %1
  %8 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %2, i64 0, i32 4
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  %11 = select i1 %10, i32 -1, i32 %9
  %12 = and i32 %7, %11
  %13 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %2, i64 0, i32 2
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %2, i64 0, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %2, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  switch i32 %18, label %48 [
    i32 6, label %46
    i32 1, label %19
    i32 2, label %29
    i32 3, label %31
    i32 4, label %42
    i32 5, label %45
  ]

19:                                               ; preds = %4
  %20 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 18, i32 4
  %21 = load i32, i32* %20, align 8
  %22 = icmp ne i32 %21, 1
  %23 = zext i1 %22 to i32
  %24 = lshr i32 %16, 1
  %25 = and i32 %24, 1
  %26 = xor i32 %25, 1
  %27 = or i32 %26, %16
  %28 = or i32 %27, %23
  br label %48

29:                                               ; preds = %4
  %30 = or i32 %14, 6
  br label %48

31:                                               ; preds = %4
  %32 = or i32 %14, 2
  %33 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 18, i32 4
  %34 = load i32, i32* %33, align 8
  %35 = icmp ne i32 %34, 1
  %36 = zext i1 %35 to i32
  %37 = lshr i32 %16, 1
  %38 = and i32 %37, 1
  %39 = xor i32 %38, 1
  %40 = or i32 %39, %16
  %41 = or i32 %40, %36
  br label %48

42:                                               ; preds = %4
  %43 = or i32 %14, 2
  %44 = or i32 %16, 8
  br label %48

45:                                               ; preds = %4
  br label %48

46:                                               ; preds = %4
  %47 = or i32 %14, 16
  br label %48

48:                                               ; preds = %31, %19, %4, %46, %45, %42, %29
  %49 = phi i32 [ %14, %4 ], [ %14, %45 ], [ %43, %42 ], [ %30, %29 ], [ %47, %46 ], [ %14, %19 ], [ %32, %31 ]
  %50 = phi i32 [ %16, %4 ], [ %16, %45 ], [ %44, %42 ], [ %16, %29 ], [ %16, %46 ], [ %28, %19 ], [ %41, %31 ]
  %51 = phi i32 [ 0, %4 ], [ 1, %45 ], [ 0, %42 ], [ 0, %29 ], [ 0, %46 ], [ 0, %19 ], [ 0, %31 ]
  %52 = or i32 %16, %14
  %53 = and i32 %52, 192
  %54 = icmp eq i32 %53, 0
  %55 = or i32 %51, 64
  %56 = select i1 %54, i32 %55, i32 %51
  store i32 -1, i32* %3, align 4
  %57 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 0
  %58 = load i32, i32* %57, align 8
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %117, label %60

60:                                               ; preds = %48, %107
  %61 = phi i32 [ %108, %107 ], [ -1, %48 ]
  %62 = phi i32 [ %109, %107 ], [ %58, %48 ]
  %63 = phi i64 [ %111, %107 ], [ 0, %48 ]
  %64 = phi i32 [ %112, %107 ], [ 1, %48 ]
  %65 = phi i32 [ %110, %107 ], [ -1, %48 ]
  %66 = and i32 %12, %64
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %107, label %68

68:                                               ; preds = %60
  %69 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %63, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = xor i32 %70, -1
  %72 = and i32 %49, %71
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %107

74:                                               ; preds = %68
  %75 = and i32 %50, %71
  %76 = lshr i32 %75, 1
  %77 = and i32 %76, 1431655765
  %78 = sub i32 %75, %77
  %79 = and i32 %70, %56
  %80 = lshr i32 %79, 1
  %81 = and i32 %80, 1431655765
  %82 = sub nsw i32 %79, %81
  %83 = insertelement <2 x i32> undef, i32 %78, i32 0
  %84 = insertelement <2 x i32> %83, i32 %82, i32 1
  %85 = lshr <2 x i32> %84, <i32 2, i32 2>
  %86 = and <2 x i32> %85, <i32 858993459, i32 858993459>
  %87 = and <2 x i32> %84, <i32 858993459, i32 858993459>
  %88 = add nuw nsw <2 x i32> %86, %87
  %89 = lshr <2 x i32> %88, <i32 4, i32 4>
  %90 = add nuw nsw <2 x i32> %89, %88
  %91 = and <2 x i32> %90, <i32 252645135, i32 252645135>
  %92 = lshr <2 x i32> %91, <i32 8, i32 8>
  %93 = add nuw nsw <2 x i32> %92, %91
  %94 = lshr <2 x i32> %93, <i32 16, i32 16>
  %95 = and <2 x i32> %94, <i32 31, i32 31>
  %96 = add nuw nsw <2 x i32> %95, %93
  %97 = and <2 x i32> %96, <i32 63, i32 63>
  %98 = extractelement <2 x i32> %97, i32 0
  %99 = extractelement <2 x i32> %97, i32 1
  %100 = add nuw nsw i32 %98, %99
  %101 = icmp ult i32 %100, %65
  br i1 %101, label %102, label %107

102:                                              ; preds = %74
  %103 = trunc i64 %63 to i32
  store i32 %103, i32* %3, align 4
  %104 = icmp eq i32 %100, 0
  br i1 %104, label %118, label %105

105:                                              ; preds = %102
  %106 = load i32, i32* %57, align 8
  br label %107

107:                                              ; preds = %105, %74, %68, %60
  %108 = phi i32 [ %61, %60 ], [ %61, %68 ], [ %61, %74 ], [ %103, %105 ]
  %109 = phi i32 [ %62, %60 ], [ %62, %68 ], [ %62, %74 ], [ %106, %105 ]
  %110 = phi i32 [ %65, %60 ], [ %65, %68 ], [ %65, %74 ], [ %100, %105 ]
  %111 = add nuw nsw i64 %63, 1
  %112 = shl i32 %64, 1
  %113 = zext i32 %109 to i64
  %114 = icmp ult i64 %111, %113
  br i1 %114, label %60, label %115

115:                                              ; preds = %107
  %116 = icmp eq i32 %108, -1
  br i1 %116, label %117, label %118

117:                                              ; preds = %48, %115
  br label %118

118:                                              ; preds = %102, %117, %115
  %119 = phi i32 [ -8, %117 ], [ 0, %115 ], [ 0, %102 ]
  ret i32 %119
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaAllocator_T10FreeMemoryEmPKP15VmaAllocation_T(%struct.VmaAllocator_T*, i64, %struct.VmaAllocation_T** nocapture readonly) local_unnamed_addr #0 align 2 {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %15, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 26, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 11
  %9 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13
  %10 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 15
  %11 = icmp eq %class.VmaAllocationObjectAllocator* %10, null
  %12 = getelementptr inbounds %class.VmaAllocationObjectAllocator, %class.VmaAllocationObjectAllocator* %10, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 15, i32 1, i32 2, i32 2
  %14 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 15, i32 1, i32 2, i32 1
  br label %16

15:                                               ; preds = %145, %3
  ret void

16:                                               ; preds = %5, %145
  %17 = phi i64 [ %1, %5 ], [ %18, %145 ]
  %18 = add i64 %17, -1
  %19 = getelementptr inbounds %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %2, i64 %18
  %20 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %19, align 8
  %21 = icmp eq %struct.VmaAllocation_T* %20, null
  br i1 %21, label %145, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %20, i64 0, i32 5
  %24 = load i8, i8* %23, align 8
  %25 = icmp eq i8 %24, 1
  br i1 %25, label %28, label %26

26:                                               ; preds = %22
  %27 = load atomic i32, i32* %6 seq_cst, align 4
  br label %46

28:                                               ; preds = %22
  %29 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %20, i64 0, i32 9, i32 0, i32 2
  %30 = load i8, i8* %29, align 8, !range !2
  %31 = icmp eq i8 %30, 0
  %32 = load atomic i32, i32* %6 seq_cst, align 4
  br i1 %31, label %46, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %20, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load atomic i32, i32* %34 seq_cst, align 4
  %36 = icmp eq i32 %35, -1
  br i1 %36, label %77, label %37

37:                                               ; preds = %33, %40
  %38 = phi i32 [ %44, %40 ], [ %35, %33 ]
  %39 = icmp eq i32 %38, %32
  br i1 %39, label %58, label %40

40:                                               ; preds = %37
  %41 = cmpxchg weak i32* %34, i32 %38, i32 %32 seq_cst seq_cst
  %42 = extractvalue { i32, i1 } %41, 1
  %43 = extractvalue { i32, i1 } %41, 0
  %44 = select i1 %42, i32 %32, i32 %43
  %45 = icmp eq i32 %44, -1
  br i1 %45, label %77, label %37

46:                                               ; preds = %28, %26
  %47 = phi i32 [ %27, %26 ], [ %32, %28 ]
  %48 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %20, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load atomic i32, i32* %48 seq_cst, align 4
  %50 = icmp eq i32 %49, %47
  br i1 %50, label %58, label %51

51:                                               ; preds = %46, %51
  %52 = phi i32 [ %56, %51 ], [ %49, %46 ]
  %53 = cmpxchg weak i32* %48, i32 %52, i32 %47 seq_cst seq_cst
  %54 = extractvalue { i32, i1 } %53, 1
  %55 = extractvalue { i32, i1 } %53, 0
  %56 = select i1 %54, i32 %47, i32 %55
  %57 = icmp eq i32 %56, %47
  br i1 %57, label %58, label %51

58:                                               ; preds = %37, %51, %46
  %59 = load i8, i8* %23, align 8
  switch i8 %59, label %77 [
    i8 1, label %60
    i8 2, label %76
  ]

60:                                               ; preds = %58
  %61 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %20, i64 0, i32 9, i32 0, i32 0
  %62 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %61, align 8
  %63 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %62, i64 0, i32 1
  %64 = load %struct.VmaPool_T*, %struct.VmaPool_T** %63, align 8
  %65 = icmp eq %struct.VmaPool_T* %64, null
  br i1 %65, label %68, label %66

66:                                               ; preds = %60
  %67 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %64, i64 0, i32 0
  br label %74

68:                                               ; preds = %60
  %69 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %20, i64 0, i32 4
  %70 = load i32, i32* %69, align 4
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 20, i64 %71
  %73 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %72, align 8
  br label %74

74:                                               ; preds = %68, %66
  %75 = phi %struct.VmaBlockVector* [ %67, %66 ], [ %73, %68 ]
  tail call void @_ZN14VmaBlockVector4FreeEP15VmaAllocation_T(%struct.VmaBlockVector* %75, %struct.VmaAllocation_T* nonnull %20)
  br label %77

76:                                               ; preds = %58
  tail call void @_ZN14VmaAllocator_T19FreeDedicatedMemoryEP15VmaAllocation_T(%struct.VmaAllocator_T* %0, %struct.VmaAllocation_T* nonnull %20)
  br label %77

77:                                               ; preds = %40, %33, %74, %76, %58
  %78 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %20, i64 0, i32 4
  %79 = load i32, i32* %78, align 4
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %80, i32 1
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %20, i64 0, i32 1
  %84 = load i64, i64* %83, align 8
  %85 = zext i32 %82 to i64
  %86 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 1, i64 %85, i32 0, i32 0, i32 0, i32 0, i32 0
  %87 = atomicrmw sub i64* %86, i64 %84 seq_cst
  %88 = atomicrmw add i32* %7, i32 1 seq_cst
  %89 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %20, i64 0, i32 8
  %90 = load i8, i8* %89, align 1
  %91 = and i8 %90, 1
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %109, label %93

93:                                               ; preds = %77
  %94 = load i8, i8* %8, align 8, !range !2
  %95 = icmp eq i8 %94, 0
  %96 = select i1 %95, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %9
  %97 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %20, i64 0, i32 2
  %98 = load i8*, i8** %97, align 8
  %99 = icmp eq i8* %98, null
  br i1 %99, label %111, label %100

100:                                              ; preds = %93
  br i1 %95, label %108, label %101

101:                                              ; preds = %100
  %102 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %96, i64 0, i32 3
  %103 = load void (i8*, i8*)*, void (i8*, i8*)** %102, align 8
  %104 = icmp eq void (i8*, i8*)* %103, null
  br i1 %104, label %108, label %105

105:                                              ; preds = %101
  %106 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %96, i64 0, i32 0
  %107 = load i8*, i8** %106, align 8
  tail call void %103(i8* %107, i8* nonnull %98) #15
  br label %111

108:                                              ; preds = %101, %100
  tail call void @free(i8* nonnull %98) #15
  br label %111

109:                                              ; preds = %77
  %110 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %20, i64 0, i32 2
  br label %111

111:                                              ; preds = %93, %105, %108, %109
  %112 = phi i8** [ %110, %109 ], [ %97, %108 ], [ %97, %105 ], [ %97, %93 ]
  store i8* null, i8** %112, align 8
  br i1 %11, label %114, label %113

113:                                              ; preds = %111
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %12) #15
  br label %114

114:                                              ; preds = %113, %111
  %115 = load i64, i64* %13, align 8
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %143, label %117

117:                                              ; preds = %114
  %118 = load %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"*, %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"** %14, align 8
  %119 = bitcast %struct.VmaAllocation_T* %20 to %"union.VmaPoolAllocator<VmaAllocation_T>::Item"*
  br label %120

120:                                              ; preds = %141, %117
  %121 = phi i64 [ %115, %117 ], [ %122, %141 ]
  %122 = add i64 %121, -1
  %123 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %118, i64 %122, i32 0
  %124 = load %"union.VmaPoolAllocator<VmaAllocation_T>::Item"*, %"union.VmaPoolAllocator<VmaAllocation_T>::Item"** %123, align 8
  %125 = icmp ugt %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %124, %119
  br i1 %125, label %141, label %126

126:                                              ; preds = %120
  %127 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %118, i64 %122, i32 1
  %128 = load i32, i32* %127, align 8
  %129 = zext i32 %128 to i64
  %130 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %124, i64 %129
  %131 = icmp ugt %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %130, %119
  br i1 %131, label %132, label %141

132:                                              ; preds = %126
  %133 = ptrtoint %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %124 to i64
  %134 = ptrtoint %struct.VmaAllocation_T* %20 to i64
  %135 = sub i64 %134, %133
  %136 = sdiv exact i64 %135, 72
  %137 = trunc i64 %136 to i32
  %138 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %118, i64 %122, i32 2
  %139 = load i32, i32* %138, align 4
  %140 = bitcast %struct.VmaAllocation_T* %20 to i32*
  store i32 %139, i32* %140, align 8
  store i32 %137, i32* %138, align 4
  br label %143

141:                                              ; preds = %126, %120
  %142 = icmp eq i64 %122, 0
  br i1 %142, label %143, label %120

143:                                              ; preds = %141, %132, %114
  br i1 %11, label %145, label %144

144:                                              ; preds = %143
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %12) #15
  br label %145

145:                                              ; preds = %144, %143, %16
  %146 = icmp eq i64 %18, 0
  br i1 %146, label %15, label %16
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN14VmaAllocator_T15TouchAllocationEP15VmaAllocation_T(%struct.VmaAllocator_T* nocapture readonly, %struct.VmaAllocation_T* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 8
  %5 = icmp eq i8 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 26, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 seq_cst, align 4
  br label %28

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 2
  %11 = load i8, i8* %10, align 8, !range !2
  %12 = icmp eq i8 %11, 0
  %13 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 26, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 seq_cst, align 4
  br i1 %12, label %28, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 seq_cst, align 4
  %18 = icmp eq i32 %17, -1
  br i1 %18, label %40, label %19

19:                                               ; preds = %15, %22
  %20 = phi i32 [ %26, %22 ], [ %17, %15 ]
  %21 = icmp eq i32 %20, %14
  br i1 %21, label %40, label %22

22:                                               ; preds = %19
  %23 = cmpxchg weak i32* %16, i32 %20, i32 %14 seq_cst seq_cst
  %24 = extractvalue { i32, i1 } %23, 1
  %25 = extractvalue { i32, i1 } %23, 0
  %26 = select i1 %24, i32 %14, i32 %25
  %27 = icmp eq i32 %26, -1
  br i1 %27, label %40, label %19

28:                                               ; preds = %9, %6
  %29 = phi i32 [ %8, %6 ], [ %14, %9 ]
  %30 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 seq_cst, align 4
  %32 = icmp eq i32 %31, %29
  br i1 %32, label %40, label %33

33:                                               ; preds = %28, %33
  %34 = phi i32 [ %38, %33 ], [ %31, %28 ]
  %35 = cmpxchg weak i32* %30, i32 %34, i32 %29 seq_cst seq_cst
  %36 = extractvalue { i32, i1 } %35, 1
  %37 = extractvalue { i32, i1 } %35, 0
  %38 = select i1 %36, i32 %29, i32 %37
  %39 = icmp eq i32 %38, %29
  br i1 %39, label %40, label %33

40:                                               ; preds = %19, %22, %33, %15, %28
  %41 = phi i1 [ true, %28 ], [ false, %15 ], [ true, %33 ], [ true, %19 ], [ false, %22 ]
  ret i1 %41
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaAllocator_T19FreeDedicatedMemoryEP15VmaAllocation_T(%struct.VmaAllocator_T*, %struct.VmaAllocation_T*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 4
  %4 = load i32, i32* %3, align 4
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 22, i64 %5
  %7 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 0
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  %10 = select i1 %9, %class.VmaRWMutex* null, %class.VmaRWMutex* %6
  %11 = icmp eq %class.VmaRWMutex* %10, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %10, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %13) #15
  br label %14

14:                                               ; preds = %2, %12
  %15 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 21, i64 %5
  %16 = load %class.VmaVector.5*, %class.VmaVector.5** %15, align 8
  %17 = getelementptr inbounds %class.VmaVector.5, %class.VmaVector.5* %16, i64 0, i32 1
  %18 = load %struct.VmaAllocation_T**, %struct.VmaAllocation_T*** %17, align 8
  %19 = getelementptr inbounds %class.VmaVector.5, %class.VmaVector.5* %16, i64 0, i32 2
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %39, label %22

22:                                               ; preds = %14
  %23 = shl nuw i64 %20, 3
  %24 = ashr exact i64 %23, 3
  %25 = bitcast %struct.VmaAllocation_T* %1 to i8*
  br label %26

26:                                               ; preds = %26, %22
  %27 = phi i64 [ 0, %22 ], [ %37, %26 ]
  %28 = phi i64 [ %24, %22 ], [ %36, %26 ]
  %29 = add i64 %28, %27
  %30 = lshr i64 %29, 1
  %31 = getelementptr inbounds %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %18, i64 %30
  %32 = bitcast %struct.VmaAllocation_T** %31 to i8**
  %33 = load i8*, i8** %32, align 8
  %34 = icmp ult i8* %33, %25
  %35 = add nuw i64 %30, 1
  %36 = select i1 %34, i64 %28, i64 %30
  %37 = select i1 %34, i64 %35, i64 %27
  %38 = icmp ult i64 %37, %36
  br i1 %38, label %26, label %39

39:                                               ; preds = %26, %14
  %40 = phi i64 [ 0, %14 ], [ %37, %26 ]
  %41 = getelementptr inbounds %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %18, i64 %40
  %42 = icmp eq i64 %40, %20
  br i1 %42, label %62, label %43

43:                                               ; preds = %39
  %44 = bitcast %struct.VmaAllocation_T** %41 to i8**
  %45 = load i8*, i8** %44, align 8
  %46 = bitcast %struct.VmaAllocation_T* %1 to i8*
  %47 = icmp eq i8* %45, %46
  br i1 %47, label %48, label %62

48:                                               ; preds = %43
  %49 = shl nuw i64 %40, 3
  %50 = ashr exact i64 %49, 3
  %51 = add i64 %20, -1
  %52 = icmp ugt i64 %51, %50
  br i1 %52, label %53, label %61

53:                                               ; preds = %48
  %54 = bitcast %struct.VmaAllocation_T** %41 to i8*
  %55 = add nuw nsw i64 %50, 1
  %56 = getelementptr inbounds %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %18, i64 %55
  %57 = bitcast %struct.VmaAllocation_T** %56 to i8*
  %58 = xor i64 %50, 2305843009213693951
  %59 = add i64 %58, %20
  %60 = shl i64 %59, 3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %57, i64 %60, i1 false) #15
  br label %61

61:                                               ; preds = %53, %48
  tail call void @_ZN9VmaVectorIP15VmaAllocation_T15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.5* %16, i64 %51, i1 zeroext false) #15
  br label %62

62:                                               ; preds = %39, %43, %61
  br i1 %11, label %65, label %63

63:                                               ; preds = %62
  %64 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %10, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %64) #15
  br label %65

65:                                               ; preds = %62, %63
  %66 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 5
  %67 = load i8, i8* %66, align 8
  switch i8 %67, label %78 [
    i8 1, label %68
    i8 2, label %72
  ]

68:                                               ; preds = %65
  %69 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 0
  %70 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %69, align 8
  %71 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %70, i64 0, i32 4
  br label %75

72:                                               ; preds = %65
  %73 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9
  %74 = bitcast %union.anon* %73 to %struct.VkDeviceMemory_T**
  br label %75

75:                                               ; preds = %72, %68
  %76 = phi %struct.VkDeviceMemory_T** [ %71, %68 ], [ %74, %72 ]
  %77 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %76, align 8
  br label %78

78:                                               ; preds = %75, %65
  %79 = phi %struct.VkDeviceMemory_T* [ null, %65 ], [ %77, %75 ]
  %80 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 1
  %81 = load i64, i64* %80, align 8
  %82 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 14, i32 1
  %83 = load void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)*, void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)** %82, align 8
  %84 = icmp eq void (%struct.VmaAllocator_T*, i32, %struct.VkDeviceMemory_T*, i64, i8*)* %83, null
  br i1 %84, label %88, label %85

85:                                               ; preds = %78
  %86 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 14, i32 2
  %87 = load i8*, i8** %86, align 8
  tail call void %83(%struct.VmaAllocator_T* %0, i32 %4, %struct.VkDeviceMemory_T* %79, i64 %81, i8* %87) #15
  br label %88

88:                                               ; preds = %78, %85
  %89 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 3
  %90 = load void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)** %89, align 8
  %91 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %92 = load %struct.VkDevice_T*, %struct.VkDevice_T** %91, align 8
  %93 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 11
  %94 = load i8, i8* %93, align 8, !range !2
  %95 = icmp eq i8 %94, 0
  %96 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13
  %97 = select i1 %95, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %96
  tail call void %90(%struct.VkDevice_T* %92, %struct.VkDeviceMemory_T* %79, %struct.VkAllocationCallbacks* %97) #15
  %98 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %5, i32 1
  %99 = load i32, i32* %98, align 4
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 23, i32 0, i64 %100, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = atomicrmw sub i64* %101, i64 %81 seq_cst
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN14VmaAllocator_T16ResizeAllocationEP15VmaAllocation_Tm(%struct.VmaAllocator_T* nocapture readnone, %struct.VmaAllocation_T* nocapture readonly, i64) local_unnamed_addr #6 align 2 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %14, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i32, i32* %6 seq_cst, align 4
  %8 = icmp eq i32 %7, -1
  br i1 %8, label %14, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, %2
  %13 = select i1 %12, i32 0, i32 -1000069000
  br label %14

14:                                               ; preds = %9, %3, %5
  %15 = phi i32 [ -1000011001, %5 ], [ -1000011001, %3 ], [ %13, %9 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaAllocator_T14CalculateStatsEP8VmaStats(%struct.VmaAllocator_T*, %struct.VmaStats* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 2
  %4 = bitcast %struct.VmaStatInfo* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 80, i1 false) #15
  %5 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 2, i32 5
  store i64 -1, i64* %5, align 8
  %6 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 2, i32 8
  store i64 -1, i64* %6, align 8
  br label %7

7:                                                ; preds = %7, %2
  %8 = phi i64 [ 0, %2 ], [ %18, %7 ]
  %9 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %8
  %10 = bitcast %struct.VmaStatInfo* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 80, i1 false) #15
  %11 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %8, i32 5
  store i64 -1, i64* %11, align 8
  %12 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %8, i32 8
  store i64 -1, i64* %12, align 8
  %13 = or i64 %8, 1
  %14 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %13
  %15 = bitcast %struct.VmaStatInfo* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 80, i1 false) #15
  %16 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %13, i32 5
  store i64 -1, i64* %16, align 8
  %17 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %13, i32 8
  store i64 -1, i64* %17, align 8
  %18 = add nuw nsw i64 %8, 2
  %19 = icmp eq i64 %18, 32
  br i1 %19, label %20, label %7

20:                                               ; preds = %7
  %21 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 0
  %22 = bitcast %struct.VmaStatInfo* %21 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 80, i1 false) #15
  %23 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 0, i32 5
  store i64 -1, i64* %23, align 8
  %24 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 0, i32 8
  store i64 -1, i64* %24, align 8
  %25 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 1
  %26 = bitcast %struct.VmaStatInfo* %25 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 80, i1 false) #15
  %27 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 1, i32 5
  store i64 -1, i64* %27, align 8
  %28 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 1, i32 8
  store i64 -1, i64* %28, align 8
  %29 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 2
  %30 = bitcast %struct.VmaStatInfo* %29 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 80, i1 false) #15
  %31 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 2, i32 5
  store i64 -1, i64* %31, align 8
  %32 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 2, i32 8
  store i64 -1, i64* %32, align 8
  %33 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 3
  %34 = bitcast %struct.VmaStatInfo* %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %34, i8 0, i64 80, i1 false) #15
  %35 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 3, i32 5
  store i64 -1, i64* %35, align 8
  %36 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 3, i32 8
  store i64 -1, i64* %36, align 8
  %37 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 4
  %38 = bitcast %struct.VmaStatInfo* %37 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 80, i1 false) #15
  %39 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 4, i32 5
  store i64 -1, i64* %39, align 8
  %40 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 4, i32 8
  store i64 -1, i64* %40, align 8
  %41 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 5
  %42 = bitcast %struct.VmaStatInfo* %41 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %42, i8 0, i64 80, i1 false) #15
  %43 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 5, i32 5
  store i64 -1, i64* %43, align 8
  %44 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 5, i32 8
  store i64 -1, i64* %44, align 8
  %45 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 6
  %46 = bitcast %struct.VmaStatInfo* %45 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 80, i1 false) #15
  %47 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 6, i32 5
  store i64 -1, i64* %47, align 8
  %48 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 6, i32 8
  store i64 -1, i64* %48, align 8
  %49 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 7
  %50 = bitcast %struct.VmaStatInfo* %49 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 0, i64 80, i1 false) #15
  %51 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 7, i32 5
  store i64 -1, i64* %51, align 8
  %52 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 7, i32 8
  store i64 -1, i64* %52, align 8
  %53 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 8
  %54 = bitcast %struct.VmaStatInfo* %53 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %54, i8 0, i64 80, i1 false) #15
  %55 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 8, i32 5
  store i64 -1, i64* %55, align 8
  %56 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 8, i32 8
  store i64 -1, i64* %56, align 8
  %57 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 9
  %58 = bitcast %struct.VmaStatInfo* %57 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %58, i8 0, i64 80, i1 false) #15
  %59 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 9, i32 5
  store i64 -1, i64* %59, align 8
  %60 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 9, i32 8
  store i64 -1, i64* %60, align 8
  %61 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 10
  %62 = bitcast %struct.VmaStatInfo* %61 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 80, i1 false) #15
  %63 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 10, i32 5
  store i64 -1, i64* %63, align 8
  %64 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 10, i32 8
  store i64 -1, i64* %64, align 8
  %65 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 11
  %66 = bitcast %struct.VmaStatInfo* %65 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %66, i8 0, i64 80, i1 false) #15
  %67 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 11, i32 5
  store i64 -1, i64* %67, align 8
  %68 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 11, i32 8
  store i64 -1, i64* %68, align 8
  %69 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 12
  %70 = bitcast %struct.VmaStatInfo* %69 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %70, i8 0, i64 80, i1 false) #15
  %71 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 12, i32 5
  store i64 -1, i64* %71, align 8
  %72 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 12, i32 8
  store i64 -1, i64* %72, align 8
  %73 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 13
  %74 = bitcast %struct.VmaStatInfo* %73 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 80, i1 false) #15
  %75 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 13, i32 5
  store i64 -1, i64* %75, align 8
  %76 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 13, i32 8
  store i64 -1, i64* %76, align 8
  %77 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 14
  %78 = bitcast %struct.VmaStatInfo* %77 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %78, i8 0, i64 80, i1 false) #15
  %79 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 14, i32 5
  store i64 -1, i64* %79, align 8
  %80 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 14, i32 8
  store i64 -1, i64* %80, align 8
  %81 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 15
  %82 = bitcast %struct.VmaStatInfo* %81 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %82, i8 0, i64 80, i1 false) #15
  %83 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 15, i32 5
  store i64 -1, i64* %83, align 8
  %84 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 15, i32 8
  store i64 -1, i64* %84, align 8
  %85 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 0
  %86 = load i32, i32* %85, align 8
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %103

88:                                               ; preds = %103, %20
  %89 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 28
  %90 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 0
  %91 = load i8, i8* %90, align 8, !range !2
  %92 = icmp eq i8 %91, 0
  %93 = select i1 %92, %class.VmaRWMutex* null, %class.VmaRWMutex* %89
  %94 = icmp eq %class.VmaRWMutex* %93, null
  br i1 %94, label %97, label %95

95:                                               ; preds = %88
  %96 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %93, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %96) #15
  br label %97

97:                                               ; preds = %88, %95
  %98 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 29, i32 2
  %99 = load i64, i64* %98, align 8
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %111, label %101

101:                                              ; preds = %97
  %102 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 29, i32 1
  br label %122

103:                                              ; preds = %20, %103
  %104 = phi i64 [ %107, %103 ], [ 0, %20 ]
  %105 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 20, i64 %104
  %106 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %105, align 8
  tail call void @_ZN14VmaBlockVector8AddStatsEP8VmaStats(%struct.VmaBlockVector* %106, %struct.VmaStats* %1)
  %107 = add nuw nsw i64 %104, 1
  %108 = load i32, i32* %85, align 8
  %109 = zext i32 %108 to i64
  %110 = icmp ult i64 %107, %109
  br i1 %110, label %103, label %88

111:                                              ; preds = %122, %97
  br i1 %94, label %114, label %112

112:                                              ; preds = %111
  %113 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %93, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %113) #15
  br label %114

114:                                              ; preds = %111, %112
  %115 = load i32, i32* %85, align 8
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %130, label %117

117:                                              ; preds = %114
  %118 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %3, i64 0, i32 0
  %119 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 2, i32 1
  %120 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 2, i32 3
  %121 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 2, i32 7
  br label %159

122:                                              ; preds = %122, %101
  %123 = phi i64 [ 0, %101 ], [ %128, %122 ]
  %124 = load %struct.VmaPool_T**, %struct.VmaPool_T*** %102, align 8
  %125 = getelementptr inbounds %struct.VmaPool_T*, %struct.VmaPool_T** %124, i64 %123
  %126 = load %struct.VmaPool_T*, %struct.VmaPool_T** %125, align 8
  %127 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %126, i64 0, i32 0
  tail call void @_ZN14VmaBlockVector8AddStatsEP8VmaStats(%struct.VmaBlockVector* %127, %struct.VmaStats* %1)
  %128 = add nuw i64 %123, 1
  %129 = icmp eq i64 %128, %99
  br i1 %129, label %111, label %122

130:                                              ; preds = %192, %114
  %131 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 2, i32 1
  %132 = load i32, i32* %131, align 4
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %141, label %134

134:                                              ; preds = %130
  %135 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 2, i32 3
  %136 = load i64, i64* %135, align 8
  %137 = zext i32 %132 to i64
  %138 = lshr i64 %137, 1
  %139 = add i64 %136, %138
  %140 = udiv i64 %139, %137
  br label %141

141:                                              ; preds = %134, %130
  %142 = phi i64 [ %140, %134 ], [ 0, %130 ]
  %143 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 2, i32 6
  store i64 %142, i64* %143, align 8
  %144 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 2, i32 2
  %145 = load i32, i32* %144, align 8
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %154, label %147

147:                                              ; preds = %141
  %148 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 2, i32 4
  %149 = load i64, i64* %148, align 8
  %150 = zext i32 %145 to i64
  %151 = lshr i64 %150, 1
  %152 = add i64 %149, %151
  %153 = udiv i64 %152, %150
  br label %154

154:                                              ; preds = %141, %147
  %155 = phi i64 [ %153, %147 ], [ 0, %141 ]
  %156 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 2, i32 9
  store i64 %155, i64* %156, align 8
  %157 = load i32, i32* %85, align 8
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %242, label %246

159:                                              ; preds = %117, %192
  %160 = phi i64 [ 0, %117 ], [ %193, %192 ]
  %161 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %160, i32 1
  %162 = load i32, i32* %161, align 4
  %163 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 22, i64 %160
  %164 = load i8, i8* %90, align 8, !range !2
  %165 = icmp eq i8 %164, 0
  %166 = select i1 %165, %class.VmaRWMutex* null, %class.VmaRWMutex* %163
  %167 = icmp eq %class.VmaRWMutex* %166, null
  br i1 %167, label %170, label %168

168:                                              ; preds = %159
  %169 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %166, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %169) #15
  br label %170

170:                                              ; preds = %159, %168
  %171 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 21, i64 %160
  %172 = load %class.VmaVector.5*, %class.VmaVector.5** %171, align 8
  %173 = getelementptr inbounds %class.VmaVector.5, %class.VmaVector.5* %172, i64 0, i32 2
  %174 = load i64, i64* %173, align 8
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %189, label %176

176:                                              ; preds = %170
  %177 = getelementptr inbounds %class.VmaVector.5, %class.VmaVector.5* %172, i64 0, i32 1
  %178 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %160, i32 0
  %179 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %160, i32 1
  %180 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %160, i32 3
  %181 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %160, i32 5
  %182 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %160, i32 7
  %183 = zext i32 %162 to i64
  %184 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 %183, i32 0
  %185 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 %183, i32 1
  %186 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 %183, i32 3
  %187 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 %183, i32 5
  %188 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 %183, i32 7
  br label %197

189:                                              ; preds = %197, %170
  br i1 %167, label %192, label %190

190:                                              ; preds = %189
  %191 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %166, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %191) #15
  br label %192

192:                                              ; preds = %189, %190
  %193 = add nuw nsw i64 %160, 1
  %194 = load i32, i32* %85, align 8
  %195 = zext i32 %194 to i64
  %196 = icmp ult i64 %193, %195
  br i1 %196, label %159, label %130

197:                                              ; preds = %197, %176
  %198 = phi i64 [ 0, %176 ], [ %240, %197 ]
  %199 = load %struct.VmaAllocation_T**, %struct.VmaAllocation_T*** %177, align 8
  %200 = getelementptr inbounds %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %199, i64 %198
  %201 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %200, align 8
  %202 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %201, i64 0, i32 1
  %203 = load i64, i64* %202, align 8
  %204 = load i32, i32* %118, align 8
  %205 = add i32 %204, 1
  store i32 %205, i32* %118, align 8
  %206 = load i32, i32* %119, align 4
  %207 = add i32 %206, 1
  store i32 %207, i32* %119, align 4
  %208 = load i64, i64* %120, align 8
  %209 = add i64 %208, %203
  store i64 %209, i64* %120, align 8
  %210 = load i64, i64* %5, align 8
  %211 = icmp ult i64 %203, %210
  %212 = select i1 %211, i64 %203, i64 %210
  store i64 %212, i64* %5, align 8
  %213 = load i64, i64* %121, align 8
  %214 = icmp ult i64 %213, %203
  %215 = select i1 %214, i64 %203, i64 %213
  store i64 %215, i64* %121, align 8
  %216 = load i32, i32* %178, align 8
  %217 = add i32 %216, 1
  store i32 %217, i32* %178, align 8
  %218 = load i32, i32* %179, align 4
  %219 = add i32 %218, 1
  store i32 %219, i32* %179, align 4
  %220 = load i64, i64* %180, align 8
  %221 = add i64 %220, %203
  store i64 %221, i64* %180, align 8
  %222 = load i64, i64* %181, align 8
  %223 = icmp ult i64 %203, %222
  %224 = select i1 %223, i64 %203, i64 %222
  store i64 %224, i64* %181, align 8
  %225 = load i64, i64* %182, align 8
  %226 = icmp ult i64 %225, %203
  %227 = select i1 %226, i64 %203, i64 %225
  store i64 %227, i64* %182, align 8
  %228 = load i32, i32* %184, align 8
  %229 = add i32 %228, 1
  store i32 %229, i32* %184, align 8
  %230 = load i32, i32* %185, align 4
  %231 = add i32 %230, 1
  store i32 %231, i32* %185, align 4
  %232 = load i64, i64* %186, align 8
  %233 = add i64 %232, %203
  store i64 %233, i64* %186, align 8
  %234 = load i64, i64* %187, align 8
  %235 = icmp ult i64 %203, %234
  %236 = select i1 %235, i64 %203, i64 %234
  store i64 %236, i64* %187, align 8
  %237 = load i64, i64* %188, align 8
  %238 = icmp ult i64 %237, %203
  %239 = select i1 %238, i64 %203, i64 %237
  store i64 %239, i64* %188, align 8
  %240 = add nuw i64 %198, 1
  %241 = icmp eq i64 %240, %174
  br i1 %241, label %189, label %197

242:                                              ; preds = %271, %154
  %243 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 2
  %244 = load i32, i32* %243, align 4
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %278, label %279

246:                                              ; preds = %154, %271
  %247 = phi i64 [ %274, %271 ], [ 0, %154 ]
  %248 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %247, i32 1
  %249 = load i32, i32* %248, align 4
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %258, label %251

251:                                              ; preds = %246
  %252 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %247, i32 3
  %253 = load i64, i64* %252, align 8
  %254 = zext i32 %249 to i64
  %255 = lshr i64 %254, 1
  %256 = add i64 %253, %255
  %257 = udiv i64 %256, %254
  br label %258

258:                                              ; preds = %251, %246
  %259 = phi i64 [ %257, %251 ], [ 0, %246 ]
  %260 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %247, i32 6
  store i64 %259, i64* %260, align 8
  %261 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %247, i32 2
  %262 = load i32, i32* %261, align 8
  %263 = icmp eq i32 %262, 0
  br i1 %263, label %271, label %264

264:                                              ; preds = %258
  %265 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %247, i32 4
  %266 = load i64, i64* %265, align 8
  %267 = zext i32 %262 to i64
  %268 = lshr i64 %267, 1
  %269 = add i64 %266, %268
  %270 = udiv i64 %269, %267
  br label %271

271:                                              ; preds = %258, %264
  %272 = phi i64 [ %270, %264 ], [ 0, %258 ]
  %273 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 0, i64 %247, i32 9
  store i64 %272, i64* %273, align 8
  %274 = add nuw nsw i64 %247, 1
  %275 = load i32, i32* %85, align 8
  %276 = zext i32 %275 to i64
  %277 = icmp ult i64 %274, %276
  br i1 %277, label %246, label %242

278:                                              ; preds = %304, %242
  ret void

279:                                              ; preds = %242, %304
  %280 = phi i64 [ %307, %304 ], [ 0, %242 ]
  %281 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 %280, i32 1
  %282 = load i32, i32* %281, align 4
  %283 = icmp eq i32 %282, 0
  br i1 %283, label %291, label %284

284:                                              ; preds = %279
  %285 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 %280, i32 3
  %286 = load i64, i64* %285, align 8
  %287 = zext i32 %282 to i64
  %288 = lshr i64 %287, 1
  %289 = add i64 %286, %288
  %290 = udiv i64 %289, %287
  br label %291

291:                                              ; preds = %284, %279
  %292 = phi i64 [ %290, %284 ], [ 0, %279 ]
  %293 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 %280, i32 6
  store i64 %292, i64* %293, align 8
  %294 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 %280, i32 2
  %295 = load i32, i32* %294, align 8
  %296 = icmp eq i32 %295, 0
  br i1 %296, label %304, label %297

297:                                              ; preds = %291
  %298 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 %280, i32 4
  %299 = load i64, i64* %298, align 8
  %300 = zext i32 %295 to i64
  %301 = lshr i64 %300, 1
  %302 = add i64 %299, %301
  %303 = udiv i64 %302, %300
  br label %304

304:                                              ; preds = %291, %297
  %305 = phi i64 [ %303, %297 ], [ 0, %291 ]
  %306 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %1, i64 0, i32 1, i64 %280, i32 9
  store i64 %305, i64* %306, align 8
  %307 = add nuw nsw i64 %280, 1
  %308 = load i32, i32* %243, align 4
  %309 = zext i32 %308 to i64
  %310 = icmp ult i64 %307, %309
  br i1 %310, label %279, label %278
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaAllocator_T20DefragmentationBeginERK23VmaDefragmentationInfo2P23VmaDefragmentationStatsPP27VmaDefragmentationContext_T(%struct.VmaAllocator_T*, %struct.VmaDefragmentationInfo2* nocapture readonly dereferenceable(80), %struct.VmaDefragmentationStats*, %struct.VmaDefragmentationContext_T** nocapture) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %struct.VmaDefragmentationInfo2, %struct.VmaDefragmentationInfo2* %1, i64 0, i32 3
  %6 = load i32*, i32** %5, align 8
  %7 = icmp eq i32* %6, null
  br i1 %7, label %14, label %8

8:                                                ; preds = %4
  %9 = bitcast i32* %6 to i8*
  %10 = getelementptr inbounds %struct.VmaDefragmentationInfo2, %struct.VmaDefragmentationInfo2* %1, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = shl nuw nsw i64 %12, 2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %9, i8 0, i64 %13, i1 false)
  br label %14

14:                                               ; preds = %4, %8
  %15 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 1
  %16 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %15, align 8
  %17 = icmp eq i8* (i8*, i64, i64, i32)* %16, null
  br i1 %17, label %22, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = tail call i8* %16(i8* %20, i64 344, i64 8, i32 1) #15
  br label %24

22:                                               ; preds = %14
  %23 = tail call noalias i8* @aligned_alloc(i64 8, i64 344) #15
  br label %24

24:                                               ; preds = %18, %22
  %25 = phi i8* [ %21, %18 ], [ %23, %22 ]
  %26 = bitcast i8* %25 to %struct.VmaDefragmentationContext_T*
  %27 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 26, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load atomic i32, i32* %27 seq_cst, align 4
  %29 = getelementptr inbounds %struct.VmaDefragmentationInfo2, %struct.VmaDefragmentationInfo2* %1, i64 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = bitcast i8* %25 to %struct.VmaAllocator_T**
  store %struct.VmaAllocator_T* %0, %struct.VmaAllocator_T** %31, align 8
  %32 = getelementptr inbounds i8, i8* %25, i64 8
  %33 = bitcast i8* %32 to i32*
  store i32 %28, i32* %33, align 8
  %34 = getelementptr inbounds i8, i8* %25, i64 12
  %35 = bitcast i8* %34 to i32*
  store i32 %30, i32* %35, align 4
  %36 = getelementptr inbounds i8, i8* %25, i64 16
  %37 = bitcast i8* %36 to %struct.VmaDefragmentationStats**
  store %struct.VmaDefragmentationStats* %2, %struct.VmaDefragmentationStats** %37, align 8
  %38 = getelementptr inbounds i8, i8* %25, i64 312
  %39 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 11
  %40 = load i8, i8* %39, align 8, !range !2
  %41 = icmp eq i8 %40, 0
  %42 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13
  %43 = ptrtoint %struct.VkAllocationCallbacks* %42 to i64
  %44 = select i1 %41, i64 0, i64 %43
  %45 = bitcast i8* %38 to i64*
  store i64 %44, i64* %45, align 8
  %46 = getelementptr inbounds i8, i8* %25, i64 320
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 24, i1 false) #15
  %47 = getelementptr inbounds i8, i8* %25, i64 56
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 256, i1 false) #15
  %48 = bitcast %struct.VmaDefragmentationContext_T** %3 to i8**
  store i8* %25, i8** %48, align 8
  %49 = getelementptr inbounds %struct.VmaDefragmentationInfo2, %struct.VmaDefragmentationInfo2* %1, i64 0, i32 4
  %50 = load i32, i32* %49, align 8
  %51 = getelementptr inbounds %struct.VmaDefragmentationInfo2, %struct.VmaDefragmentationInfo2* %1, i64 0, i32 5
  %52 = load %struct.VmaPool_T**, %struct.VmaPool_T*** %51, align 8
  tail call void @_ZN27VmaDefragmentationContext_T8AddPoolsEjPKP9VmaPool_T(%struct.VmaDefragmentationContext_T* %26, i32 %50, %struct.VmaPool_T** %52)
  %53 = load %struct.VmaDefragmentationContext_T*, %struct.VmaDefragmentationContext_T** %3, align 8
  %54 = getelementptr inbounds %struct.VmaDefragmentationInfo2, %struct.VmaDefragmentationInfo2* %1, i64 0, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds %struct.VmaDefragmentationInfo2, %struct.VmaDefragmentationInfo2* %1, i64 0, i32 2
  %57 = load %struct.VmaAllocation_T**, %struct.VmaAllocation_T*** %56, align 8
  %58 = load i32*, i32** %5, align 8
  tail call void @_ZN27VmaDefragmentationContext_T14AddAllocationsEjPKP15VmaAllocation_TPj(%struct.VmaDefragmentationContext_T* %53, i32 %55, %struct.VmaAllocation_T** %57, i32* %58)
  %59 = load %struct.VmaDefragmentationContext_T*, %struct.VmaDefragmentationContext_T** %3, align 8
  %60 = getelementptr inbounds %struct.VmaDefragmentationInfo2, %struct.VmaDefragmentationInfo2* %1, i64 0, i32 6
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds %struct.VmaDefragmentationInfo2, %struct.VmaDefragmentationInfo2* %1, i64 0, i32 7
  %63 = load i32, i32* %62, align 8
  %64 = getelementptr inbounds %struct.VmaDefragmentationInfo2, %struct.VmaDefragmentationInfo2* %1, i64 0, i32 8
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds %struct.VmaDefragmentationInfo2, %struct.VmaDefragmentationInfo2* %1, i64 0, i32 9
  %67 = load i32, i32* %66, align 8
  %68 = getelementptr inbounds %struct.VmaDefragmentationInfo2, %struct.VmaDefragmentationInfo2* %1, i64 0, i32 10
  %69 = load %struct.VkCommandBuffer_T*, %struct.VkCommandBuffer_T** %68, align 8
  %70 = load i32, i32* %29, align 8
  %71 = tail call i32 @_ZN27VmaDefragmentationContext_T10DefragmentEmjmjP17VkCommandBuffer_TP23VmaDefragmentationStatsj(%struct.VmaDefragmentationContext_T* %59, i64 %61, i32 %63, i64 %65, i32 %67, %struct.VkCommandBuffer_T* %69, %struct.VmaDefragmentationStats* %2, i32 %70)
  %72 = icmp eq i32 %71, 1
  br i1 %72, label %86, label %73

73:                                               ; preds = %24
  %74 = load %struct.VmaDefragmentationContext_T*, %struct.VmaDefragmentationContext_T** %3, align 8
  %75 = icmp eq %struct.VmaDefragmentationContext_T* %74, null
  br i1 %75, label %85, label %76

76:                                               ; preds = %73
  tail call void @_ZN27VmaDefragmentationContext_TD2Ev(%struct.VmaDefragmentationContext_T* nonnull %74) #15
  %77 = bitcast %struct.VmaDefragmentationContext_T* %74 to i8*
  %78 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 3
  %79 = load void (i8*, i8*)*, void (i8*, i8*)** %78, align 8
  %80 = icmp eq void (i8*, i8*)* %79, null
  br i1 %80, label %84, label %81

81:                                               ; preds = %76
  %82 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 0
  %83 = load i8*, i8** %82, align 8
  tail call void %79(i8* %83, i8* nonnull %77) #15
  br label %85

84:                                               ; preds = %76
  tail call void @free(i8* %77) #15
  br label %85

85:                                               ; preds = %73, %81, %84
  store %struct.VmaDefragmentationContext_T* null, %struct.VmaDefragmentationContext_T** %3, align 8
  br label %86

86:                                               ; preds = %24, %85
  ret i32 %71
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaAllocator_T18DefragmentationEndEP27VmaDefragmentationContext_T(%struct.VmaAllocator_T* nocapture readonly, %struct.VmaDefragmentationContext_T*) local_unnamed_addr #0 align 2 {
  %3 = icmp eq %struct.VmaDefragmentationContext_T* %1, null
  br i1 %3, label %13, label %4

4:                                                ; preds = %2
  tail call void @_ZN27VmaDefragmentationContext_TD2Ev(%struct.VmaDefragmentationContext_T* nonnull %1) #15
  %5 = bitcast %struct.VmaDefragmentationContext_T* %1 to i8*
  %6 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 3
  %7 = load void (i8*, i8*)*, void (i8*, i8*)** %6, align 8
  %8 = icmp eq void (i8*, i8*)* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call void %7(i8* %11, i8* nonnull %5) #15
  br label %13

12:                                               ; preds = %4
  tail call void @free(i8* %5) #15
  br label %13

13:                                               ; preds = %2, %9, %12
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaAllocator_T24DefragmentationPassBeginEP26VmaDefragmentationPassInfoP27VmaDefragmentationContext_T(%struct.VmaAllocator_T* nocapture readnone, %struct.VmaDefragmentationPassInfo* nocapture, %struct.VmaDefragmentationContext_T* nocapture) local_unnamed_addr #0 align 2 {
  %4 = tail call i32 @_ZN27VmaDefragmentationContext_T19DefragmentPassBeginEP26VmaDefragmentationPassInfo(%struct.VmaDefragmentationContext_T* %2, %struct.VmaDefragmentationPassInfo* %1)
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaAllocator_T22DefragmentationPassEndEP27VmaDefragmentationContext_T(%struct.VmaAllocator_T* nocapture readnone, %struct.VmaDefragmentationContext_T* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = tail call i32 @_ZN27VmaDefragmentationContext_T17DefragmentPassEndEv(%struct.VmaDefragmentationContext_T* %1)
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaAllocator_T17GetAllocationInfoEP15VmaAllocation_TP17VmaAllocationInfo(%struct.VmaAllocator_T* nocapture readonly, %struct.VmaAllocation_T*, %struct.VmaAllocationInfo* nocapture) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 5
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 1
  br i1 %6, label %10, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 26, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 seq_cst, align 4
  br label %65

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 2
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  %14 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 26, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 seq_cst, align 4
  br i1 %13, label %65, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 seq_cst, align 4
  %19 = icmp eq i32 %18, -1
  br i1 %19, label %20, label %27

20:                                               ; preds = %59, %16
  %21 = getelementptr inbounds %struct.VmaAllocationInfo, %struct.VmaAllocationInfo* %2, i64 0, i32 0
  store i32 -1, i32* %21, align 8
  %22 = getelementptr inbounds %struct.VmaAllocationInfo, %struct.VmaAllocationInfo* %2, i64 0, i32 1
  %23 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 1
  %24 = bitcast %struct.VkDeviceMemory_T** %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 16, i1 false)
  %25 = load i64, i64* %23, align 8
  %26 = getelementptr inbounds %struct.VmaAllocationInfo, %struct.VmaAllocationInfo* %2, i64 0, i32 3
  store i64 %25, i64* %26, align 8
  br label %123

27:                                               ; preds = %16, %59
  %28 = phi i32 [ %63, %59 ], [ %18, %16 ]
  %29 = icmp eq i32 %28, %15
  br i1 %29, label %30, label %59

30:                                               ; preds = %27
  %31 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 4
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %struct.VmaAllocationInfo, %struct.VmaAllocationInfo* %2, i64 0, i32 0
  store i32 %32, i32* %33, align 8
  %34 = load i8, i8* %4, align 8
  switch i8 %34, label %45 [
    i8 1, label %35
    i8 2, label %39
  ]

35:                                               ; preds = %30
  %36 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 0
  %37 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %36, align 8
  %38 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %37, i64 0, i32 4
  br label %42

39:                                               ; preds = %30
  %40 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9
  %41 = bitcast %union.anon* %40 to %struct.VkDeviceMemory_T**
  br label %42

42:                                               ; preds = %39, %35
  %43 = phi %struct.VkDeviceMemory_T** [ %38, %35 ], [ %41, %39 ]
  %44 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %43, align 8
  br label %45

45:                                               ; preds = %42, %30
  %46 = phi %struct.VkDeviceMemory_T* [ null, %30 ], [ %44, %42 ]
  %47 = getelementptr inbounds %struct.VmaAllocationInfo, %struct.VmaAllocationInfo* %2, i64 0, i32 1
  store %struct.VkDeviceMemory_T* %46, %struct.VkDeviceMemory_T** %47, align 8
  %48 = load i8, i8* %4, align 8
  %49 = icmp eq i8 %48, 1
  br i1 %49, label %50, label %53

50:                                               ; preds = %45
  %51 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 1
  %52 = load i64, i64* %51, align 8
  br label %53

53:                                               ; preds = %45, %50
  %54 = phi i64 [ %52, %50 ], [ 0, %45 ]
  %55 = getelementptr inbounds %struct.VmaAllocationInfo, %struct.VmaAllocationInfo* %2, i64 0, i32 2
  store i64 %54, i64* %55, align 8
  %56 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %struct.VmaAllocationInfo, %struct.VmaAllocationInfo* %2, i64 0, i32 3
  store i64 %57, i64* %58, align 8
  br label %123

59:                                               ; preds = %27
  %60 = cmpxchg weak i32* %17, i32 %28, i32 %15 seq_cst seq_cst
  %61 = extractvalue { i32, i1 } %60, 1
  %62 = extractvalue { i32, i1 } %60, 0
  %63 = select i1 %61, i32 %15, i32 %62
  %64 = icmp eq i32 %63, -1
  br i1 %64, label %20, label %27

65:                                               ; preds = %10, %7
  %66 = phi i32 [ %9, %7 ], [ %15, %10 ]
  %67 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = load atomic i32, i32* %67 seq_cst, align 4
  %69 = icmp eq i32 %68, %66
  br i1 %69, label %77, label %70

70:                                               ; preds = %65, %70
  %71 = phi i32 [ %75, %70 ], [ %68, %65 ]
  %72 = cmpxchg weak i32* %67, i32 %71, i32 %66 seq_cst seq_cst
  %73 = extractvalue { i32, i1 } %72, 1
  %74 = extractvalue { i32, i1 } %72, 0
  %75 = select i1 %73, i32 %66, i32 %74
  %76 = icmp eq i32 %75, %66
  br i1 %76, label %77, label %70

77:                                               ; preds = %70, %65
  %78 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 4
  %79 = load i32, i32* %78, align 4
  %80 = getelementptr inbounds %struct.VmaAllocationInfo, %struct.VmaAllocationInfo* %2, i64 0, i32 0
  store i32 %79, i32* %80, align 8
  %81 = load i8, i8* %4, align 8
  switch i8 %81, label %92 [
    i8 1, label %82
    i8 2, label %86
  ]

82:                                               ; preds = %77
  %83 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 0
  %84 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %83, align 8
  %85 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %84, i64 0, i32 4
  br label %89

86:                                               ; preds = %77
  %87 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9
  %88 = bitcast %union.anon* %87 to %struct.VkDeviceMemory_T**
  br label %89

89:                                               ; preds = %86, %82
  %90 = phi %struct.VkDeviceMemory_T** [ %85, %82 ], [ %88, %86 ]
  %91 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %90, align 8
  br label %92

92:                                               ; preds = %89, %77
  %93 = phi %struct.VkDeviceMemory_T* [ null, %77 ], [ %91, %89 ]
  %94 = getelementptr inbounds %struct.VmaAllocationInfo, %struct.VmaAllocationInfo* %2, i64 0, i32 1
  store %struct.VkDeviceMemory_T* %93, %struct.VkDeviceMemory_T** %94, align 8
  %95 = load i8, i8* %4, align 8
  %96 = icmp eq i8 %95, 1
  br i1 %96, label %97, label %100

97:                                               ; preds = %92
  %98 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 1
  %99 = load i64, i64* %98, align 8
  br label %100

100:                                              ; preds = %92, %97
  %101 = phi i64 [ %99, %97 ], [ 0, %92 ]
  %102 = getelementptr inbounds %struct.VmaAllocationInfo, %struct.VmaAllocationInfo* %2, i64 0, i32 2
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 1
  %104 = load i64, i64* %103, align 8
  %105 = getelementptr inbounds %struct.VmaAllocationInfo, %struct.VmaAllocationInfo* %2, i64 0, i32 3
  store i64 %104, i64* %105, align 8
  %106 = load i8, i8* %4, align 8
  switch i8 %106, label %123 [
    i8 1, label %107
    i8 2, label %119
  ]

107:                                              ; preds = %100
  %108 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 7
  %109 = load i8, i8* %108, align 2
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %123, label %111

111:                                              ; preds = %107
  %112 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 0
  %113 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %112, align 8
  %114 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %113, i64 0, i32 7
  %115 = load i8*, i8** %114, align 8
  %116 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 1
  %117 = load i64, i64* %116, align 8
  %118 = getelementptr inbounds i8, i8* %115, i64 %117
  br label %123

119:                                              ; preds = %100
  %120 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 1
  %121 = bitcast i64* %120 to i8**
  %122 = load i8*, i8** %121, align 8
  br label %123

123:                                              ; preds = %119, %111, %107, %100, %20, %53
  %124 = phi i8* [ null, %20 ], [ null, %53 ], [ %122, %119 ], [ %118, %111 ], [ null, %107 ], [ null, %100 ]
  %125 = getelementptr inbounds %struct.VmaAllocationInfo, %struct.VmaAllocationInfo* %2, i64 0, i32 4
  store i8* %124, i8** %125, align 8
  %126 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 2
  %127 = bitcast i8** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = getelementptr inbounds %struct.VmaAllocationInfo, %struct.VmaAllocationInfo* %2, i64 0, i32 5
  %130 = bitcast i8** %129 to i64*
  store i64 %128, i64* %130, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaAllocator_T10CreatePoolEPK17VmaPoolCreateInfoPP9VmaPool_T(%struct.VmaAllocator_T*, %struct.VmaPoolCreateInfo* nocapture readonly, %struct.VmaPool_T** nocapture) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.VmaPoolCreateInfo, %struct.VmaPoolCreateInfo* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %struct.VmaPoolCreateInfo, %struct.VmaPoolCreateInfo* %1, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.VmaPoolCreateInfo, %struct.VmaPoolCreateInfo* %1, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %struct.VmaPoolCreateInfo, %struct.VmaPoolCreateInfo* %1, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.VmaPoolCreateInfo, %struct.VmaPoolCreateInfo* %1, i64 0, i32 4
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %struct.VmaPoolCreateInfo, %struct.VmaPoolCreateInfo* %1, i64 0, i32 5
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i64 %13, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %3
  %18 = icmp ugt i64 %11, %13
  br i1 %18, label %193, label %19

19:                                               ; preds = %3, %17
  %20 = phi i64 [ %13, %17 ], [ -1, %3 ]
  %21 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp ult i32 %5, %22
  br i1 %23, label %24, label %193

24:                                               ; preds = %19
  %25 = shl i32 1, %5
  %26 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 33
  %27 = load i32, i32* %26, align 8
  %28 = and i32 %27, %25
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %193, label %30

30:                                               ; preds = %24
  %31 = zext i32 %5 to i64
  %32 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %31, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 3, i64 %34, i32 0
  %36 = load i64, i64* %35, align 8
  %37 = icmp ult i64 %36, 1073741825
  br i1 %37, label %38, label %40

38:                                               ; preds = %30
  %39 = lshr i64 %36, 3
  br label %43

40:                                               ; preds = %30
  %41 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 24
  %42 = load i64, i64* %41, align 8
  br label %43

43:                                               ; preds = %38, %40
  %44 = phi i64 [ %39, %38 ], [ %42, %40 ]
  %45 = add i64 %44, 31
  %46 = and i64 %45, -32
  %47 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 1
  %48 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %47, align 8
  %49 = icmp eq i8* (i8*, i64, i64, i32)* %48, null
  br i1 %49, label %54, label %50

50:                                               ; preds = %43
  %51 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = tail call i8* %48(i8* %52, i64 176, i64 8, i32 1) #15
  br label %56

54:                                               ; preds = %43
  %55 = tail call noalias i8* @aligned_alloc(i64 8, i64 176) #15
  br label %56

56:                                               ; preds = %50, %54
  %57 = phi i8* [ %53, %50 ], [ %55, %54 ]
  %58 = icmp eq i64 %9, 0
  %59 = select i1 %58, i64 %46, i64 %9
  %60 = and i32 %7, 2
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %67

62:                                               ; preds = %56
  %63 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 18, i32 7, i32 11
  %64 = load i64, i64* %63, align 8
  %65 = icmp ugt i64 %64, 1
  %66 = select i1 %65, i64 %64, i64 1
  br label %67

67:                                               ; preds = %56, %62
  %68 = phi i64 [ %66, %62 ], [ 1, %56 ]
  %69 = icmp ne i64 %9, 0
  %70 = and i32 %7, 12
  %71 = zext i1 %69 to i8
  %72 = bitcast i8* %57 to %struct.VmaAllocator_T**
  store %struct.VmaAllocator_T* %0, %struct.VmaAllocator_T** %72, align 8
  %73 = getelementptr inbounds i8, i8* %57, i64 8
  %74 = bitcast i8* %73 to i8**
  store i8* %57, i8** %74, align 8
  %75 = getelementptr inbounds i8, i8* %57, i64 16
  %76 = bitcast i8* %75 to i32*
  store i32 %5, i32* %76, align 8
  %77 = getelementptr inbounds i8, i8* %57, i64 24
  %78 = bitcast i8* %77 to i64*
  store i64 %59, i64* %78, align 8
  %79 = getelementptr inbounds i8, i8* %57, i64 32
  %80 = bitcast i8* %79 to i64*
  store i64 %11, i64* %80, align 8
  %81 = getelementptr inbounds i8, i8* %57, i64 40
  %82 = bitcast i8* %81 to i64*
  store i64 %20, i64* %82, align 8
  %83 = getelementptr inbounds i8, i8* %57, i64 48
  %84 = bitcast i8* %83 to i64*
  store i64 %68, i64* %84, align 8
  %85 = getelementptr inbounds i8, i8* %57, i64 56
  %86 = bitcast i8* %85 to i32*
  store i32 %15, i32* %86, align 8
  %87 = getelementptr inbounds i8, i8* %57, i64 60
  store i8 %71, i8* %87, align 4
  %88 = getelementptr inbounds i8, i8* %57, i64 64
  %89 = bitcast i8* %88 to i32*
  store i32 %70, i32* %89, align 8
  %90 = getelementptr inbounds i8, i8* %57, i64 72
  %91 = getelementptr inbounds i8, i8* %57, i64 120
  %92 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 11
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %90, i8 0, i64 41, i1 false) #15
  %93 = load i8, i8* %92, align 8, !range !2
  %94 = icmp eq i8 %93, 0
  %95 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13
  %96 = ptrtoint %struct.VkAllocationCallbacks* %95 to i64
  %97 = select i1 %94, i64 0, i64 %96
  %98 = bitcast i8* %91 to i64*
  store i64 %97, i64* %98, align 8
  %99 = getelementptr inbounds i8, i8* %57, i64 128
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %99, i8 0, i64 28, i1 false) #15
  %100 = getelementptr inbounds i8, i8* %57, i64 160
  %101 = bitcast i8* %100 to i32*
  store i32 0, i32* %101, align 8
  %102 = getelementptr inbounds i8, i8* %57, i64 168
  %103 = bitcast i8* %102 to i8**
  store i8* null, i8** %103, align 8
  %104 = bitcast %struct.VmaPool_T** %2 to i8**
  store i8* %57, i8** %104, align 8
  %105 = bitcast i8* %57 to %struct.VmaBlockVector*
  %106 = load i64, i64* %80, align 8
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %131, label %111

108:                                              ; preds = %111
  %109 = load i64, i64* %80, align 8
  %110 = icmp ult i64 %116, %109
  br i1 %110, label %111, label %131

111:                                              ; preds = %67, %108
  %112 = phi i64 [ %116, %108 ], [ 0, %67 ]
  %113 = load i64, i64* %78, align 8
  %114 = tail call i32 @_ZN14VmaBlockVector11CreateBlockEmPm(%struct.VmaBlockVector* %105, i64 %113, i64* null) #15
  %115 = icmp eq i32 %114, 0
  %116 = add nuw i64 %112, 1
  br i1 %115, label %108, label %117

117:                                              ; preds = %111
  %118 = load %struct.VmaPool_T*, %struct.VmaPool_T** %2, align 8
  %119 = icmp eq %struct.VmaPool_T* %118, null
  br i1 %119, label %130, label %120

120:                                              ; preds = %117
  %121 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %118, i64 0, i32 0
  tail call void @_ZN14VmaBlockVectorD2Ev(%struct.VmaBlockVector* %121) #15
  %122 = bitcast %struct.VmaPool_T* %118 to i8*
  %123 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 3
  %124 = load void (i8*, i8*)*, void (i8*, i8*)** %123, align 8
  %125 = icmp eq void (i8*, i8*)* %124, null
  br i1 %125, label %129, label %126

126:                                              ; preds = %120
  %127 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 0
  %128 = load i8*, i8** %127, align 8
  tail call void %124(i8* %128, i8* nonnull %122) #15
  br label %130

129:                                              ; preds = %120
  tail call void @free(i8* %122) #15
  br label %130

130:                                              ; preds = %117, %126, %129
  store %struct.VmaPool_T* null, %struct.VmaPool_T** %2, align 8
  br label %193

131:                                              ; preds = %108, %67
  %132 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 28
  %133 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 0
  %134 = load i8, i8* %133, align 8, !range !2
  %135 = icmp eq i8 %134, 0
  %136 = select i1 %135, %class.VmaRWMutex* null, %class.VmaRWMutex* %132
  %137 = icmp eq %class.VmaRWMutex* %136, null
  br i1 %137, label %140, label %138

138:                                              ; preds = %131
  %139 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %136, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %139) #15
  br label %140

140:                                              ; preds = %131, %138
  %141 = load %struct.VmaPool_T*, %struct.VmaPool_T** %2, align 8
  %142 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 30
  %143 = load i32, i32* %142, align 8
  %144 = add i32 %143, 1
  store i32 %144, i32* %142, align 8
  %145 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %141, i64 0, i32 1
  store i32 %143, i32* %145, align 8
  %146 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 29
  %147 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 29, i32 1
  %148 = load %struct.VmaPool_T**, %struct.VmaPool_T*** %147, align 8
  %149 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 29, i32 2
  %150 = load i64, i64* %149, align 8
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %152, label %153

152:                                              ; preds = %140
  tail call void @_ZN9VmaVectorIP9VmaPool_T15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.11* %146, i64 1, i1 zeroext false) #15
  br label %184

153:                                              ; preds = %140
  %154 = shl nuw i64 %150, 3
  %155 = ashr exact i64 %154, 3
  %156 = load i8*, i8** %104, align 8
  br label %157

157:                                              ; preds = %157, %153
  %158 = phi i64 [ 0, %153 ], [ %168, %157 ]
  %159 = phi i64 [ %155, %153 ], [ %167, %157 ]
  %160 = add i64 %159, %158
  %161 = lshr i64 %160, 1
  %162 = getelementptr inbounds %struct.VmaPool_T*, %struct.VmaPool_T** %148, i64 %161
  %163 = bitcast %struct.VmaPool_T** %162 to i8**
  %164 = load i8*, i8** %163, align 8
  %165 = icmp ult i8* %164, %156
  %166 = add nuw i64 %161, 1
  %167 = select i1 %165, i64 %159, i64 %161
  %168 = select i1 %165, i64 %166, i64 %158
  %169 = icmp ult i64 %168, %167
  br i1 %169, label %157, label %170

170:                                              ; preds = %157
  %171 = shl i64 %168, 3
  %172 = ashr exact i64 %171, 3
  %173 = add i64 %150, 1
  tail call void @_ZN9VmaVectorIP9VmaPool_T15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.11* %146, i64 %173, i1 zeroext false) #15
  %174 = icmp ugt i64 %150, %172
  br i1 %174, label %175, label %184

175:                                              ; preds = %170
  %176 = load %struct.VmaPool_T**, %struct.VmaPool_T*** %147, align 8
  %177 = add nuw nsw i64 %172, 1
  %178 = getelementptr inbounds %struct.VmaPool_T*, %struct.VmaPool_T** %176, i64 %177
  %179 = bitcast %struct.VmaPool_T** %178 to i8*
  %180 = getelementptr inbounds %struct.VmaPool_T*, %struct.VmaPool_T** %176, i64 %172
  %181 = bitcast %struct.VmaPool_T** %180 to i8*
  %182 = sub i64 %150, %172
  %183 = shl i64 %182, 3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %179, i8* align 8 %181, i64 %183, i1 false) #15
  br label %184

184:                                              ; preds = %152, %170, %175
  %185 = phi i64 [ 0, %152 ], [ %172, %170 ], [ %172, %175 ]
  %186 = bitcast %struct.VmaPool_T** %2 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = load %struct.VmaPool_T**, %struct.VmaPool_T*** %147, align 8
  %189 = getelementptr inbounds %struct.VmaPool_T*, %struct.VmaPool_T** %188, i64 %185
  %190 = bitcast %struct.VmaPool_T** %189 to i64*
  store i64 %187, i64* %190, align 8
  br i1 %137, label %193, label %191

191:                                              ; preds = %184
  %192 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %136, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %192) #15
  br label %193

193:                                              ; preds = %191, %184, %130, %24, %19, %17
  %194 = phi i32 [ -3, %17 ], [ -8, %19 ], [ -8, %24 ], [ %114, %130 ], [ 0, %184 ], [ 0, %191 ]
  ret i32 %194
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaAllocator_T11DestroyPoolEP9VmaPool_T(%struct.VmaAllocator_T*, %struct.VmaPool_T*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 28
  %4 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 0
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  %7 = select i1 %6, %class.VmaRWMutex* null, %class.VmaRWMutex* %3
  %8 = icmp eq %class.VmaRWMutex* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %7, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %10) #15
  br label %11

11:                                               ; preds = %2, %9
  %12 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 29
  %13 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 29, i32 1
  %14 = load %struct.VmaPool_T**, %struct.VmaPool_T*** %13, align 8
  %15 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 29, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %11
  %19 = shl nuw i64 %16, 3
  %20 = ashr exact i64 %19, 3
  %21 = bitcast %struct.VmaPool_T* %1 to i8*
  br label %22

22:                                               ; preds = %22, %18
  %23 = phi i64 [ 0, %18 ], [ %33, %22 ]
  %24 = phi i64 [ %20, %18 ], [ %32, %22 ]
  %25 = add i64 %24, %23
  %26 = lshr i64 %25, 1
  %27 = getelementptr inbounds %struct.VmaPool_T*, %struct.VmaPool_T** %14, i64 %26
  %28 = bitcast %struct.VmaPool_T** %27 to i8**
  %29 = load i8*, i8** %28, align 8
  %30 = icmp ult i8* %29, %21
  %31 = add nuw i64 %26, 1
  %32 = select i1 %30, i64 %24, i64 %26
  %33 = select i1 %30, i64 %31, i64 %23
  %34 = icmp ult i64 %33, %32
  br i1 %34, label %22, label %35

35:                                               ; preds = %22, %11
  %36 = phi i64 [ 0, %11 ], [ %33, %22 ]
  %37 = getelementptr inbounds %struct.VmaPool_T*, %struct.VmaPool_T** %14, i64 %36
  %38 = icmp eq i64 %36, %16
  br i1 %38, label %58, label %39

39:                                               ; preds = %35
  %40 = bitcast %struct.VmaPool_T** %37 to i8**
  %41 = load i8*, i8** %40, align 8
  %42 = bitcast %struct.VmaPool_T* %1 to i8*
  %43 = icmp eq i8* %41, %42
  br i1 %43, label %44, label %58

44:                                               ; preds = %39
  %45 = shl nuw i64 %36, 3
  %46 = ashr exact i64 %45, 3
  %47 = add i64 %16, -1
  %48 = icmp ugt i64 %47, %46
  br i1 %48, label %49, label %57

49:                                               ; preds = %44
  %50 = bitcast %struct.VmaPool_T** %37 to i8*
  %51 = add nuw nsw i64 %46, 1
  %52 = getelementptr inbounds %struct.VmaPool_T*, %struct.VmaPool_T** %14, i64 %51
  %53 = bitcast %struct.VmaPool_T** %52 to i8*
  %54 = xor i64 %46, 2305843009213693951
  %55 = add i64 %54, %16
  %56 = shl i64 %55, 3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %53, i64 %56, i1 false) #15
  br label %57

57:                                               ; preds = %49, %44
  tail call void @_ZN9VmaVectorIP9VmaPool_T15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.11* %12, i64 %47, i1 zeroext false) #15
  br label %58

58:                                               ; preds = %35, %39, %57
  br i1 %8, label %61, label %59

59:                                               ; preds = %58
  %60 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %7, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %60) #15
  br label %61

61:                                               ; preds = %58, %59
  %62 = icmp eq %struct.VmaPool_T* %1, null
  br i1 %62, label %73, label %63

63:                                               ; preds = %61
  %64 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %1, i64 0, i32 0
  tail call void @_ZN14VmaBlockVectorD2Ev(%struct.VmaBlockVector* %64) #15
  %65 = bitcast %struct.VmaPool_T* %1 to i8*
  %66 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 3
  %67 = load void (i8*, i8*)*, void (i8*, i8*)** %66, align 8
  %68 = icmp eq void (i8*, i8*)* %67, null
  br i1 %68, label %72, label %69

69:                                               ; preds = %63
  %70 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 0
  %71 = load i8*, i8** %70, align 8
  tail call void %67(i8* %71, i8* nonnull %65) #15
  br label %73

72:                                               ; preds = %63
  tail call void @free(i8* %65) #15
  br label %73

73:                                               ; preds = %61, %69, %72
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaAllocator_T12GetPoolStatsEP9VmaPool_TP12VmaPoolStats(%struct.VmaAllocator_T* nocapture readnone, %struct.VmaPool_T*, %struct.VmaPoolStats*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %1, i64 0, i32 0, i32 13
  %5 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %1, i64 0, i32 0, i32 0
  %6 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %5, align 8
  %7 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %6, i64 0, i32 0
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  %10 = select i1 %9, %class.VmaRWMutex* null, %class.VmaRWMutex* %4
  br i1 %9, label %13, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %10, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %12) #15
  br label %13

13:                                               ; preds = %11, %3
  %14 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %1, i64 0, i32 0, i32 16, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %2, i64 0, i32 5
  %17 = bitcast %struct.VmaPoolStats* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 40, i1 false) #15
  store i64 %15, i64* %16, align 8
  %18 = icmp eq i64 %15, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %1, i64 0, i32 0, i32 16, i32 1
  br label %24

21:                                               ; preds = %24, %13
  br i1 %9, label %39, label %22

22:                                               ; preds = %21
  %23 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %10, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %23) #15
  br label %39

24:                                               ; preds = %24, %19
  %25 = phi i64 [ 0, %19 ], [ %37, %24 ]
  %26 = phi i32 [ 0, %19 ], [ %36, %24 ]
  %27 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %20, align 8
  %28 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %27, i64 %25
  %29 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %28, align 8
  %30 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %29, i64 0, i32 0
  %31 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %30, align 8
  %32 = bitcast %class.VmaBlockMetadata* %31 to void (%class.VmaBlockMetadata*, %struct.VmaPoolStats*)***
  %33 = load void (%class.VmaBlockMetadata*, %struct.VmaPoolStats*)**, void (%class.VmaBlockMetadata*, %struct.VmaPoolStats*)*** %32, align 8
  %34 = getelementptr inbounds void (%class.VmaBlockMetadata*, %struct.VmaPoolStats*)*, void (%class.VmaBlockMetadata*, %struct.VmaPoolStats*)** %33, i64 9
  %35 = load void (%class.VmaBlockMetadata*, %struct.VmaPoolStats*)*, void (%class.VmaBlockMetadata*, %struct.VmaPoolStats*)** %34, align 8
  tail call void %35(%class.VmaBlockMetadata* %31, %struct.VmaPoolStats* dereferenceable(48) %2) #15
  %36 = add i32 %26, 1
  %37 = zext i32 %36 to i64
  %38 = icmp ugt i64 %15, %37
  br i1 %38, label %24, label %21

39:                                               ; preds = %21, %22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaAllocator_T20SetCurrentFrameIndexEj(%struct.VmaAllocator_T*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 26, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i32 %1, i32* %3 seq_cst, align 4
  %4 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 5
  %5 = load i8, i8* %4, align 2, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %2
  tail call void @_ZN14VmaAllocator_T18UpdateVulkanBudgetEv(%struct.VmaAllocator_T* %0)
  br label %8

8:                                                ; preds = %2, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaAllocator_T23MakePoolAllocationsLostEP9VmaPool_TPm(%struct.VmaAllocator_T* nocapture readonly, %struct.VmaPool_T*, i64*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 26, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i32, i32* %4 seq_cst, align 4
  %6 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %1, i64 0, i32 0, i32 13
  %7 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %1, i64 0, i32 0, i32 0
  %8 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %7, align 8
  %9 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %8, i64 0, i32 0
  %10 = load i8, i8* %9, align 8, !range !2
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, %class.VmaRWMutex* null, %class.VmaRWMutex* %6
  br i1 %11, label %15, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %12, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %14) #15
  br label %15

15:                                               ; preds = %13, %3
  %16 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %1, i64 0, i32 0, i32 16, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %1, i64 0, i32 0, i32 16, i32 1
  %21 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %1, i64 0, i32 0, i32 8
  br label %25

22:                                               ; preds = %25, %15
  %23 = phi i64 [ 0, %15 ], [ %41, %25 ]
  %24 = icmp eq i64* %2, null
  br i1 %24, label %47, label %46

25:                                               ; preds = %25, %19
  %26 = phi i64 [ 0, %19 ], [ %43, %25 ]
  %27 = phi i64 [ 0, %19 ], [ %41, %25 ]
  %28 = phi i32 [ 0, %19 ], [ %42, %25 ]
  %29 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %20, align 8
  %30 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %29, i64 %26
  %31 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %30, align 8
  %32 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %31, i64 0, i32 0
  %33 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %32, align 8
  %34 = load i32, i32* %21, align 8
  %35 = bitcast %class.VmaBlockMetadata* %33 to i32 (%class.VmaBlockMetadata*, i32, i32)***
  %36 = load i32 (%class.VmaBlockMetadata*, i32, i32)**, i32 (%class.VmaBlockMetadata*, i32, i32)*** %35, align 8
  %37 = getelementptr inbounds i32 (%class.VmaBlockMetadata*, i32, i32)*, i32 (%class.VmaBlockMetadata*, i32, i32)** %36, i64 13
  %38 = load i32 (%class.VmaBlockMetadata*, i32, i32)*, i32 (%class.VmaBlockMetadata*, i32, i32)** %37, align 8
  %39 = tail call i32 %38(%class.VmaBlockMetadata* %33, i32 %5, i32 %34) #15
  %40 = zext i32 %39 to i64
  %41 = add i64 %27, %40
  %42 = add i32 %28, 1
  %43 = zext i32 %42 to i64
  %44 = load i64, i64* %16, align 8
  %45 = icmp ugt i64 %44, %43
  br i1 %45, label %25, label %22

46:                                               ; preds = %22
  store i64 %23, i64* %2, align 8
  br label %47

47:                                               ; preds = %46, %22
  br i1 %11, label %50, label %48

48:                                               ; preds = %47
  %49 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %12, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %49) #15
  br label %50

50:                                               ; preds = %47, %48
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN14VmaAllocator_T19CheckPoolCorruptionEP9VmaPool_T(%struct.VmaAllocator_T* nocapture readnone, %struct.VmaPool_T* nocapture readnone) local_unnamed_addr #10 align 2 {
  ret i32 -8
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaAllocator_T15CheckCorruptionEj(%struct.VmaAllocator_T*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 28
  %4 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 0
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  %7 = icmp eq %class.VmaRWMutex* %3, null
  %8 = or i1 %6, %7
  br i1 %8, label %12, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %3, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %10) #15
  %11 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %3, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %11) #15
  br label %12

12:                                               ; preds = %2, %9
  ret i32 -8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaAllocator_T20CreateLostAllocationEPP15VmaAllocation_T(%struct.VmaAllocator_T*, %struct.VmaAllocation_T** nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 15
  %4 = icmp eq %class.VmaAllocationObjectAllocator* %3, null
  br i1 %4, label %5, label %58

5:                                                ; preds = %2
  %6 = load i64, i64* inttoptr (i64 72 to i64*), align 8
  br label %7

7:                                                ; preds = %11, %5
  %8 = phi i64 [ %6, %5 ], [ %9, %11 ]
  %9 = add i64 %8, -1
  %10 = icmp eq i64 %8, 0
  br i1 %10, label %37, label %11

11:                                               ; preds = %7
  %12 = load %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"*, %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"** inttoptr (i64 64 to %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"**), align 64
  %13 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %12, i64 %9, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, -1
  br i1 %15, label %7, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %12, i64 %9, i32 0
  %18 = load %"union.VmaPoolAllocator<VmaAllocation_T>::Item"*, %"union.VmaPoolAllocator<VmaAllocation_T>::Item"** %17, align 8
  %19 = zext i32 %14 to i64
  %20 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %18, i64 %19
  %21 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %20, i64 0, i32 0
  %22 = load i32, i32* %21, align 8
  store i32 %22, i32* %13, align 4
  %23 = bitcast %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %20 to i64*
  store i64 1, i64* %23, align 8
  %24 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %18, i64 %19, i32 1, i64 4
  %25 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %18, i64 %19, i32 1, i64 20
  %26 = bitcast i8* %25 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 16, i1 false) #15
  store i32 -1, i32* %26, align 4
  %27 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %18, i64 %19, i32 1, i64 24
  %28 = bitcast i8* %27 to i32*
  store i32 0, i32* %28, align 4
  %29 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %18, i64 %19, i32 1, i64 28
  store i8 0, i8* %29, align 8
  %30 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %18, i64 %19, i32 1, i64 29
  store i8 1, i8* %30, align 1
  %31 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %18, i64 %19, i32 1, i64 30
  store i8 0, i8* %31, align 2
  %32 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %18, i64 %19, i32 1, i64 31
  store i8 0, i8* %32, align 1
  %33 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %18, i64 %19, i32 1, i64 60
  %34 = bitcast i8* %33 to i32*
  store i32 -1, i32* %34, align 8
  %35 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %18, i64 %19, i32 1, i64 64
  %36 = bitcast i8* %35 to i32*
  store i32 0, i32* %36, align 4
  br label %117

37:                                               ; preds = %7
  %38 = tail call dereferenceable(16) %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* @_ZN16VmaPoolAllocatorI15VmaAllocation_TE14CreateNewBlockEv(%class.VmaPoolAllocator* nonnull inttoptr (i64 40 to %class.VmaPoolAllocator*)) #15
  %39 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %38, i64 0, i32 0
  %40 = load %"union.VmaPoolAllocator<VmaAllocation_T>::Item"*, %"union.VmaPoolAllocator<VmaAllocation_T>::Item"** %39, align 8
  %41 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %40, i64 0, i32 0
  %42 = load i32, i32* %41, align 8
  %43 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %38, i64 0, i32 2
  store i32 %42, i32* %43, align 4
  %44 = bitcast %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %40 to i64*
  store i64 1, i64* %44, align 8
  %45 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %40, i64 0, i32 1, i64 4
  %46 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %40, i64 0, i32 1, i64 20
  %47 = bitcast i8* %46 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %45, i8 0, i64 16, i1 false) #15
  store i32 -1, i32* %47, align 4
  %48 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %40, i64 0, i32 1, i64 24
  %49 = bitcast i8* %48 to i32*
  store i32 0, i32* %49, align 4
  %50 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %40, i64 0, i32 1, i64 28
  store i8 0, i8* %50, align 8
  %51 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %40, i64 0, i32 1, i64 29
  store i8 1, i8* %51, align 1
  %52 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %40, i64 0, i32 1, i64 30
  store i8 0, i8* %52, align 2
  %53 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %40, i64 0, i32 1, i64 31
  store i8 0, i8* %53, align 1
  %54 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %40, i64 0, i32 1, i64 60
  %55 = bitcast i8* %54 to i32*
  store i32 -1, i32* %55, align 8
  %56 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %40, i64 0, i32 1, i64 64
  %57 = bitcast i8* %56 to i32*
  store i32 0, i32* %57, align 4
  br label %117

58:                                               ; preds = %2
  %59 = getelementptr inbounds %class.VmaAllocationObjectAllocator, %class.VmaAllocationObjectAllocator* %3, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %59) #15
  %60 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 15, i32 1
  %61 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 15, i32 1, i32 2, i32 2
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 15, i32 1, i32 2, i32 1
  br label %64

64:                                               ; preds = %68, %58
  %65 = phi i64 [ %62, %58 ], [ %66, %68 ]
  %66 = add i64 %65, -1
  %67 = icmp eq i64 %65, 0
  br i1 %67, label %93, label %68

68:                                               ; preds = %64
  %69 = load %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"*, %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"** %63, align 8
  %70 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %69, i64 %66, i32 2
  %71 = load i32, i32* %70, align 4
  %72 = icmp eq i32 %71, -1
  br i1 %72, label %64, label %73

73:                                               ; preds = %68
  %74 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %69, i64 %66, i32 0
  %75 = load %"union.VmaPoolAllocator<VmaAllocation_T>::Item"*, %"union.VmaPoolAllocator<VmaAllocation_T>::Item"** %74, align 8
  %76 = zext i32 %71 to i64
  %77 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %75, i64 %76
  %78 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %77, i64 0, i32 0
  %79 = load i32, i32* %78, align 8
  store i32 %79, i32* %70, align 4
  %80 = bitcast %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %77 to i64*
  store i64 1, i64* %80, align 8
  %81 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %75, i64 %76, i32 1, i64 4
  %82 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %75, i64 %76, i32 1, i64 20
  %83 = bitcast i8* %82 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 16, i1 false) #15
  store i32 -1, i32* %83, align 4
  %84 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %75, i64 %76, i32 1, i64 24
  %85 = bitcast i8* %84 to i32*
  store i32 0, i32* %85, align 4
  %86 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %75, i64 %76, i32 1, i64 28
  store i8 0, i8* %86, align 8
  %87 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %75, i64 %76, i32 1, i64 29
  store i8 1, i8* %87, align 1
  %88 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %75, i64 %76, i32 1, i64 30
  store i8 0, i8* %88, align 2
  %89 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %75, i64 %76, i32 1, i64 31
  store i8 0, i8* %89, align 1
  %90 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %75, i64 %76, i32 1, i64 60
  %91 = bitcast i8* %90 to i32*
  store i32 -1, i32* %91, align 8
  %92 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %75, i64 %76, i32 1, i64 64
  br label %113

93:                                               ; preds = %64
  %94 = tail call dereferenceable(16) %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* @_ZN16VmaPoolAllocatorI15VmaAllocation_TE14CreateNewBlockEv(%class.VmaPoolAllocator* %60) #15
  %95 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %94, i64 0, i32 0
  %96 = load %"union.VmaPoolAllocator<VmaAllocation_T>::Item"*, %"union.VmaPoolAllocator<VmaAllocation_T>::Item"** %95, align 8
  %97 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %96, i64 0, i32 0
  %98 = load i32, i32* %97, align 8
  %99 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %94, i64 0, i32 2
  store i32 %98, i32* %99, align 4
  %100 = bitcast %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %96 to i64*
  store i64 1, i64* %100, align 8
  %101 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %96, i64 0, i32 1, i64 4
  %102 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %96, i64 0, i32 1, i64 20
  %103 = bitcast i8* %102 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %101, i8 0, i64 16, i1 false) #15
  store i32 -1, i32* %103, align 4
  %104 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %96, i64 0, i32 1, i64 24
  %105 = bitcast i8* %104 to i32*
  store i32 0, i32* %105, align 4
  %106 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %96, i64 0, i32 1, i64 28
  store i8 0, i8* %106, align 8
  %107 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %96, i64 0, i32 1, i64 29
  store i8 1, i8* %107, align 1
  %108 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %96, i64 0, i32 1, i64 30
  store i8 0, i8* %108, align 2
  %109 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %96, i64 0, i32 1, i64 31
  store i8 0, i8* %109, align 1
  %110 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %96, i64 0, i32 1, i64 60
  %111 = bitcast i8* %110 to i32*
  store i32 -1, i32* %111, align 8
  %112 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %96, i64 0, i32 1, i64 64
  br label %113

113:                                              ; preds = %73, %93
  %114 = phi i8* [ %92, %73 ], [ %112, %93 ]
  %115 = phi %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* [ %77, %73 ], [ %96, %93 ]
  %116 = bitcast i8* %114 to i32*
  store i32 0, i32* %116, align 4
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %59) #15
  br label %117

117:                                              ; preds = %37, %16, %113
  %118 = phi %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* [ %115, %113 ], [ %40, %37 ], [ %20, %16 ]
  %119 = bitcast %struct.VmaAllocation_T** %1 to %"union.VmaPoolAllocator<VmaAllocation_T>::Item"**
  store %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %118, %"union.VmaPoolAllocator<VmaAllocation_T>::Item"** %119, align 8
  %120 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %118, i64 0, i32 1, i64 28
  store i8 1, i8* %120, align 8
  %121 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %118, i64 0, i32 1, i64 24
  %122 = bitcast i8* %121 to i32*
  store i32 0, i32* %122, align 4
  %123 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %118, i64 0, i32 1, i64 36
  %124 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %118, i64 0, i32 1, i64 52
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %123, i8 0, i64 16, i1 false) #15
  store i8 1, i8* %124, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaAllocator_T3MapEP15VmaAllocation_TPPv(%struct.VmaAllocator_T* nocapture readonly, %struct.VmaAllocation_T* nocapture, i8**) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 5
  %5 = load i8, i8* %4, align 8
  switch i8 %5, label %92 [
    i8 1, label %6
    i8 2, label %65
  ]

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 2
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %92

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 0
  %12 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %11, align 8
  %13 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %12, i64 0, i32 5
  %14 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 0
  %15 = load i8, i8* %14, align 8, !range !2
  %16 = icmp eq i8 %15, 0
  %17 = select i1 %16, %class.VmaMutex* null, %class.VmaMutex* %13
  br i1 %16, label %20, label %18

18:                                               ; preds = %10
  %19 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %17, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %19) #15
  br label %20

20:                                               ; preds = %18, %10
  %21 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %12, i64 0, i32 6
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %20
  %25 = add i32 %22, 1
  store i32 %25, i32* %21, align 8
  %26 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %12, i64 0, i32 7
  %27 = bitcast i8** %26 to i64*
  %28 = load i64, i64* %27, align 8
  br label %42

29:                                               ; preds = %20
  %30 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 4
  %31 = load i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)** %30, align 8
  %32 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %33 = load %struct.VkDevice_T*, %struct.VkDevice_T** %32, align 8
  %34 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %12, i64 0, i32 4
  %35 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %34, align 8
  %36 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %12, i64 0, i32 7
  %37 = tail call i32 %31(%struct.VkDevice_T* %33, %struct.VkDeviceMemory_T* %35, i64 0, i64 -1, i32 0, i8** %36) #15
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %29
  %40 = bitcast i8** %36 to i64*
  %41 = load i64, i64* %40, align 8
  store i32 1, i32* %21, align 8
  br label %42

42:                                               ; preds = %39, %29, %24
  %43 = phi i64 [ %41, %39 ], [ 0, %29 ], [ %28, %24 ]
  %44 = phi i32 [ 0, %39 ], [ %37, %29 ], [ 0, %24 ]
  br i1 %16, label %47, label %45

45:                                               ; preds = %42
  %46 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %17, i64 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %46) #15
  br label %47

47:                                               ; preds = %42, %45
  %48 = icmp eq i32 %44, 0
  br i1 %48, label %49, label %92

49:                                               ; preds = %47
  %50 = inttoptr i64 %43 to i8*
  %51 = load i8, i8* %4, align 8
  %52 = icmp eq i8 %51, 1
  br i1 %52, label %53, label %56

53:                                               ; preds = %49
  %54 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 1
  %55 = load i64, i64* %54, align 8
  br label %56

56:                                               ; preds = %49, %53
  %57 = phi i64 [ %55, %53 ], [ 0, %49 ]
  %58 = getelementptr inbounds i8, i8* %50, i64 %57
  store i8* %58, i8** %2, align 8
  %59 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 7
  %60 = load i8, i8* %59, align 2
  %61 = and i8 %60, 127
  %62 = icmp eq i8 %61, 127
  br i1 %62, label %92, label %63

63:                                               ; preds = %56
  %64 = add i8 %60, 1
  store i8 %64, i8* %59, align 2
  br label %92

65:                                               ; preds = %3
  %66 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 7
  %67 = load i8, i8* %66, align 2
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %78, label %69

69:                                               ; preds = %65
  %70 = and i8 %67, 127
  %71 = icmp eq i8 %70, 127
  br i1 %71, label %92, label %72

72:                                               ; preds = %69
  %73 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = bitcast i8** %2 to i64*
  store i64 %74, i64* %75, align 8
  %76 = load i8, i8* %66, align 2
  %77 = add i8 %76, 1
  store i8 %77, i8* %66, align 2
  br label %92

78:                                               ; preds = %65
  %79 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 4
  %80 = load i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)*, i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)** %79, align 8
  %81 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %82 = load %struct.VkDevice_T*, %struct.VkDevice_T** %81, align 8
  %83 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9
  %84 = bitcast %union.anon* %83 to %struct.VkDeviceMemory_T**
  %85 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %84, align 8
  %86 = tail call i32 %80(%struct.VkDevice_T* %82, %struct.VkDeviceMemory_T* %85, i64 0, i64 -1, i32 0, i8** %2) #15
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %92

88:                                               ; preds = %78
  %89 = bitcast i8** %2 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 1
  store i64 %90, i64* %91, align 8
  store i8 1, i8* %66, align 2
  br label %92

92:                                               ; preds = %3, %6, %88, %78, %72, %69, %47, %56, %63
  %93 = phi i32 [ -5, %6 ], [ 0, %63 ], [ 0, %56 ], [ %44, %47 ], [ 0, %72 ], [ -5, %69 ], [ 0, %88 ], [ %86, %78 ], [ -5, %3 ]
  ret i32 %93
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaAllocator_T5UnmapEP15VmaAllocation_T(%struct.VmaAllocator_T* nocapture readonly, %struct.VmaAllocation_T* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 8
  switch i8 %4, label %58 [
    i8 1, label %5
    i8 2, label %40
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 0
  %7 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %6, align 8
  %8 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 7
  %9 = load i8, i8* %8, align 2
  %10 = and i8 %9, 127
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %14, label %12

12:                                               ; preds = %5
  %13 = add i8 %9, -1
  store i8 %13, i8* %8, align 2
  br label %14

14:                                               ; preds = %5, %12
  %15 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %7, i64 0, i32 5
  %16 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 0
  %17 = load i8, i8* %16, align 8, !range !2
  %18 = icmp eq i8 %17, 0
  %19 = select i1 %18, %class.VmaMutex* null, %class.VmaMutex* %15
  br i1 %18, label %22, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %19, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %21) #15
  br label %22

22:                                               ; preds = %20, %14
  %23 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %7, i64 0, i32 6
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %37, label %26

26:                                               ; preds = %22
  %27 = add i32 %24, -1
  store i32 %27, i32* %23, align 8
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %37

29:                                               ; preds = %26
  %30 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %7, i64 0, i32 7
  store i8* null, i8** %30, align 8
  %31 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 5
  %32 = load void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)** %31, align 8
  %33 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %34 = load %struct.VkDevice_T*, %struct.VkDevice_T** %33, align 8
  %35 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %7, i64 0, i32 4
  %36 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %35, align 8
  tail call void %32(%struct.VkDevice_T* %34, %struct.VkDeviceMemory_T* %36) #15
  br label %37

37:                                               ; preds = %29, %26, %22
  br i1 %18, label %58, label %38

38:                                               ; preds = %37
  %39 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %19, i64 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %39) #15
  br label %58

40:                                               ; preds = %2
  %41 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 7
  %42 = load i8, i8* %41, align 2
  %43 = and i8 %42, 127
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %58, label %45

45:                                               ; preds = %40
  %46 = add i8 %42, -1
  store i8 %46, i8* %41, align 2
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %58

48:                                               ; preds = %45
  %49 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9
  %50 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 1
  %51 = bitcast i64* %50 to i8**
  store i8* null, i8** %51, align 8
  %52 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 5
  %53 = load void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)*, void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)** %52, align 8
  %54 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %55 = load %struct.VkDevice_T*, %struct.VkDevice_T** %54, align 8
  %56 = bitcast %union.anon* %49 to %struct.VkDeviceMemory_T**
  %57 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %56, align 8
  tail call void %53(%struct.VkDevice_T* %55, %struct.VkDeviceMemory_T* %57) #15
  br label %58

58:                                               ; preds = %48, %45, %40, %38, %37, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaAllocator_T16BindBufferMemoryEP15VmaAllocation_TmP10VkBuffer_TPKv(%struct.VmaAllocator_T* nocapture readonly, %struct.VmaAllocation_T* nocapture readonly, i64, %struct.VkBuffer_T*, i8*) local_unnamed_addr #0 align 2 {
  %6 = alloca %struct.VkBindBufferMemoryInfo, align 8
  %7 = alloca %struct.VkBindBufferMemoryInfo, align 8
  %8 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 5
  %9 = load i8, i8* %8, align 8
  switch i8 %9, label %92 [
    i8 2, label %10
    i8 1, label %43
  ]

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9
  %12 = bitcast %union.anon* %11 to %struct.VkDeviceMemory_T**
  %13 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %12, align 8
  %14 = icmp eq i8* %4, null
  br i1 %14, label %37, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 4
  %17 = load i8, i8* %16, align 1, !range !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %23

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = icmp ugt i32 %21, 4198399
  br i1 %22, label %23, label %92

23:                                               ; preds = %19, %15
  %24 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 19
  %25 = load i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)** %24, align 8
  %26 = icmp eq i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)* %25, null
  br i1 %26, label %92, label %27

27:                                               ; preds = %23
  %28 = bitcast %struct.VkBindBufferMemoryInfo* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %28) #15
  %29 = bitcast %struct.VkBindBufferMemoryInfo* %6 to i64*
  store i64 1000157000, i64* %29, align 8
  %30 = getelementptr inbounds %struct.VkBindBufferMemoryInfo, %struct.VkBindBufferMemoryInfo* %6, i64 0, i32 1
  store i8* %4, i8** %30, align 8
  %31 = getelementptr inbounds %struct.VkBindBufferMemoryInfo, %struct.VkBindBufferMemoryInfo* %6, i64 0, i32 2
  store %struct.VkBuffer_T* %3, %struct.VkBuffer_T** %31, align 8
  %32 = getelementptr inbounds %struct.VkBindBufferMemoryInfo, %struct.VkBindBufferMemoryInfo* %6, i64 0, i32 3
  store %struct.VkDeviceMemory_T* %13, %struct.VkDeviceMemory_T** %32, align 8
  %33 = getelementptr inbounds %struct.VkBindBufferMemoryInfo, %struct.VkBindBufferMemoryInfo* %6, i64 0, i32 4
  store i64 %2, i64* %33, align 8
  %34 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %35 = load %struct.VkDevice_T*, %struct.VkDevice_T** %34, align 8
  %36 = call i32 %25(%struct.VkDevice_T* %35, i32 1, %struct.VkBindBufferMemoryInfo* nonnull %6) #15
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %28) #15
  br label %92

37:                                               ; preds = %10
  %38 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 8
  %39 = load i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)** %38, align 8
  %40 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %41 = load %struct.VkDevice_T*, %struct.VkDevice_T** %40, align 8
  %42 = tail call i32 %39(%struct.VkDevice_T* %41, %struct.VkBuffer_T* %3, %struct.VkDeviceMemory_T* %13, i64 %2) #15
  br label %92

43:                                               ; preds = %5
  %44 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 0
  %45 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %44, align 8
  %46 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  %48 = add i64 %47, %2
  %49 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %45, i64 0, i32 5
  %50 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 0
  %51 = load i8, i8* %50, align 8, !range !2
  %52 = icmp eq i8 %51, 0
  %53 = select i1 %52, %class.VmaMutex* null, %class.VmaMutex* %49
  br i1 %52, label %56, label %54

54:                                               ; preds = %43
  %55 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %53, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %55) #15
  br label %56

56:                                               ; preds = %54, %43
  %57 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %45, i64 0, i32 4
  %58 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %57, align 8
  %59 = icmp eq i8* %4, null
  br i1 %59, label %82, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 4
  %62 = load i8, i8* %61, align 1, !range !2
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %64, label %68

64:                                               ; preds = %60
  %65 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 2
  %66 = load i32, i32* %65, align 4
  %67 = icmp ugt i32 %66, 4198399
  br i1 %67, label %68, label %88

68:                                               ; preds = %64, %60
  %69 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 19
  %70 = load i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)** %69, align 8
  %71 = icmp eq i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)* %70, null
  br i1 %71, label %88, label %72

72:                                               ; preds = %68
  %73 = bitcast %struct.VkBindBufferMemoryInfo* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %73) #15
  %74 = bitcast %struct.VkBindBufferMemoryInfo* %7 to i64*
  store i64 1000157000, i64* %74, align 8
  %75 = getelementptr inbounds %struct.VkBindBufferMemoryInfo, %struct.VkBindBufferMemoryInfo* %7, i64 0, i32 1
  store i8* %4, i8** %75, align 8
  %76 = getelementptr inbounds %struct.VkBindBufferMemoryInfo, %struct.VkBindBufferMemoryInfo* %7, i64 0, i32 2
  store %struct.VkBuffer_T* %3, %struct.VkBuffer_T** %76, align 8
  %77 = getelementptr inbounds %struct.VkBindBufferMemoryInfo, %struct.VkBindBufferMemoryInfo* %7, i64 0, i32 3
  store %struct.VkDeviceMemory_T* %58, %struct.VkDeviceMemory_T** %77, align 8
  %78 = getelementptr inbounds %struct.VkBindBufferMemoryInfo, %struct.VkBindBufferMemoryInfo* %7, i64 0, i32 4
  store i64 %48, i64* %78, align 8
  %79 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %80 = load %struct.VkDevice_T*, %struct.VkDevice_T** %79, align 8
  %81 = call i32 %70(%struct.VkDevice_T* %80, i32 1, %struct.VkBindBufferMemoryInfo* nonnull %7) #15
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %73) #15
  br label %88

82:                                               ; preds = %56
  %83 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 8
  %84 = load i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)** %83, align 8
  %85 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %86 = load %struct.VkDevice_T*, %struct.VkDevice_T** %85, align 8
  %87 = tail call i32 %84(%struct.VkDevice_T* %86, %struct.VkBuffer_T* %3, %struct.VkDeviceMemory_T* %58, i64 %48) #15
  br label %88

88:                                               ; preds = %82, %72, %68, %64
  %89 = phi i32 [ %81, %72 ], [ %87, %82 ], [ -7, %68 ], [ -7, %64 ]
  br i1 %52, label %92, label %90

90:                                               ; preds = %88
  %91 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %53, i64 0, i32 0
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %91) #15
  br label %92

92:                                               ; preds = %90, %88, %37, %27, %23, %19, %5
  %93 = phi i32 [ 0, %5 ], [ %36, %27 ], [ %42, %37 ], [ -7, %23 ], [ -7, %19 ], [ %89, %88 ], [ %89, %90 ]
  ret i32 %93
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaAllocator_T15BindImageMemoryEP15VmaAllocation_TmP9VkImage_TPKv(%struct.VmaAllocator_T* nocapture readonly, %struct.VmaAllocation_T* nocapture readonly, i64, %struct.VkImage_T*, i8*) local_unnamed_addr #0 align 2 {
  %6 = alloca %struct.VkBindImageMemoryInfo, align 8
  %7 = alloca %struct.VkBindImageMemoryInfo, align 8
  %8 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 5
  %9 = load i8, i8* %8, align 8
  switch i8 %9, label %92 [
    i8 2, label %10
    i8 1, label %43
  ]

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9
  %12 = bitcast %union.anon* %11 to %struct.VkDeviceMemory_T**
  %13 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %12, align 8
  %14 = icmp eq i8* %4, null
  br i1 %14, label %37, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 4
  %17 = load i8, i8* %16, align 1, !range !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %23

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = icmp ugt i32 %21, 4198399
  br i1 %22, label %23, label %92

23:                                               ; preds = %19, %15
  %24 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 20
  %25 = load i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)** %24, align 8
  %26 = icmp eq i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)* %25, null
  br i1 %26, label %92, label %27

27:                                               ; preds = %23
  %28 = bitcast %struct.VkBindImageMemoryInfo* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %28) #15
  %29 = bitcast %struct.VkBindImageMemoryInfo* %6 to i64*
  store i64 1000157001, i64* %29, align 8
  %30 = getelementptr inbounds %struct.VkBindImageMemoryInfo, %struct.VkBindImageMemoryInfo* %6, i64 0, i32 1
  store i8* %4, i8** %30, align 8
  %31 = getelementptr inbounds %struct.VkBindImageMemoryInfo, %struct.VkBindImageMemoryInfo* %6, i64 0, i32 2
  store %struct.VkImage_T* %3, %struct.VkImage_T** %31, align 8
  %32 = getelementptr inbounds %struct.VkBindImageMemoryInfo, %struct.VkBindImageMemoryInfo* %6, i64 0, i32 3
  store %struct.VkDeviceMemory_T* %13, %struct.VkDeviceMemory_T** %32, align 8
  %33 = getelementptr inbounds %struct.VkBindImageMemoryInfo, %struct.VkBindImageMemoryInfo* %6, i64 0, i32 4
  store i64 %2, i64* %33, align 8
  %34 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %35 = load %struct.VkDevice_T*, %struct.VkDevice_T** %34, align 8
  %36 = call i32 %25(%struct.VkDevice_T* %35, i32 1, %struct.VkBindImageMemoryInfo* nonnull %6) #15
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %28) #15
  br label %92

37:                                               ; preds = %10
  %38 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 9
  %39 = load i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)** %38, align 8
  %40 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %41 = load %struct.VkDevice_T*, %struct.VkDevice_T** %40, align 8
  %42 = tail call i32 %39(%struct.VkDevice_T* %41, %struct.VkImage_T* %3, %struct.VkDeviceMemory_T* %13, i64 %2) #15
  br label %92

43:                                               ; preds = %5
  %44 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 0
  %45 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %44, align 8
  %46 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  %48 = add i64 %47, %2
  %49 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %45, i64 0, i32 5
  %50 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 0
  %51 = load i8, i8* %50, align 8, !range !2
  %52 = icmp eq i8 %51, 0
  %53 = select i1 %52, %class.VmaMutex* null, %class.VmaMutex* %49
  br i1 %52, label %56, label %54

54:                                               ; preds = %43
  %55 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %53, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %55) #15
  br label %56

56:                                               ; preds = %54, %43
  %57 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %45, i64 0, i32 4
  %58 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %57, align 8
  %59 = icmp eq i8* %4, null
  br i1 %59, label %82, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 4
  %62 = load i8, i8* %61, align 1, !range !2
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %64, label %68

64:                                               ; preds = %60
  %65 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 2
  %66 = load i32, i32* %65, align 4
  %67 = icmp ugt i32 %66, 4198399
  br i1 %67, label %68, label %88

68:                                               ; preds = %64, %60
  %69 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 20
  %70 = load i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)** %69, align 8
  %71 = icmp eq i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)* %70, null
  br i1 %71, label %88, label %72

72:                                               ; preds = %68
  %73 = bitcast %struct.VkBindImageMemoryInfo* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %73) #15
  %74 = bitcast %struct.VkBindImageMemoryInfo* %7 to i64*
  store i64 1000157001, i64* %74, align 8
  %75 = getelementptr inbounds %struct.VkBindImageMemoryInfo, %struct.VkBindImageMemoryInfo* %7, i64 0, i32 1
  store i8* %4, i8** %75, align 8
  %76 = getelementptr inbounds %struct.VkBindImageMemoryInfo, %struct.VkBindImageMemoryInfo* %7, i64 0, i32 2
  store %struct.VkImage_T* %3, %struct.VkImage_T** %76, align 8
  %77 = getelementptr inbounds %struct.VkBindImageMemoryInfo, %struct.VkBindImageMemoryInfo* %7, i64 0, i32 3
  store %struct.VkDeviceMemory_T* %58, %struct.VkDeviceMemory_T** %77, align 8
  %78 = getelementptr inbounds %struct.VkBindImageMemoryInfo, %struct.VkBindImageMemoryInfo* %7, i64 0, i32 4
  store i64 %48, i64* %78, align 8
  %79 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %80 = load %struct.VkDevice_T*, %struct.VkDevice_T** %79, align 8
  %81 = call i32 %70(%struct.VkDevice_T* %80, i32 1, %struct.VkBindImageMemoryInfo* nonnull %7) #15
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %73) #15
  br label %88

82:                                               ; preds = %56
  %83 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 9
  %84 = load i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)** %83, align 8
  %85 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %86 = load %struct.VkDevice_T*, %struct.VkDevice_T** %85, align 8
  %87 = tail call i32 %84(%struct.VkDevice_T* %86, %struct.VkImage_T* %3, %struct.VkDeviceMemory_T* %58, i64 %48) #15
  br label %88

88:                                               ; preds = %82, %72, %68, %64
  %89 = phi i32 [ %81, %72 ], [ %87, %82 ], [ -7, %68 ], [ -7, %64 ]
  br i1 %52, label %92, label %90

90:                                               ; preds = %88
  %91 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %53, i64 0, i32 0
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %91) #15
  br label %92

92:                                               ; preds = %90, %88, %37, %27, %23, %19, %5
  %93 = phi i32 [ 0, %5 ], [ %36, %27 ], [ %42, %37 ], [ -7, %23 ], [ -7, %19 ], [ %89, %88 ], [ %89, %90 ]
  ret i32 %93
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaAllocator_T27FlushOrInvalidateAllocationEP15VmaAllocation_Tmm19VMA_CACHE_OPERATION(%struct.VmaAllocator_T* nocapture readonly, %struct.VmaAllocation_T* nocapture readonly, i64, i64, i32) local_unnamed_addr #0 align 2 {
  %6 = alloca %struct.VkMappedMemoryRange, align 8
  %7 = bitcast %struct.VkMappedMemoryRange* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %7) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 40, i1 false)
  %8 = call zeroext i1 @_ZNK14VmaAllocator_T25GetFlushOrInvalidateRangeEP15VmaAllocation_TmmR19VkMappedMemoryRange(%struct.VmaAllocator_T* %0, %struct.VmaAllocation_T* %1, i64 %2, i64 %3, %struct.VkMappedMemoryRange* nonnull dereferenceable(40) %6)
  br i1 %8, label %9, label %22

9:                                                ; preds = %5
  switch i32 %4, label %22 [
    i32 0, label %10
    i32 1, label %16
  ]

10:                                               ; preds = %9
  %11 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 6
  %12 = load i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)** %11, align 8
  %13 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %14 = load %struct.VkDevice_T*, %struct.VkDevice_T** %13, align 8
  %15 = call i32 %12(%struct.VkDevice_T* %14, i32 1, %struct.VkMappedMemoryRange* nonnull %6) #15
  br label %22

16:                                               ; preds = %9
  %17 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 7
  %18 = load i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)** %17, align 8
  %19 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %20 = load %struct.VkDevice_T*, %struct.VkDevice_T** %19, align 8
  %21 = call i32 %18(%struct.VkDevice_T* %20, i32 1, %struct.VkMappedMemoryRange* nonnull %6) #15
  br label %22

22:                                               ; preds = %10, %16, %9, %5
  %23 = phi i32 [ 0, %9 ], [ %21, %16 ], [ %15, %10 ], [ 0, %5 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7) #15
  ret i32 %23
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK14VmaAllocator_T25GetFlushOrInvalidateRangeEP15VmaAllocation_TmmR19VkMappedMemoryRange(%struct.VmaAllocator_T* nocapture readonly, %struct.VmaAllocation_T* nocapture readonly, i64, i64, %struct.VkMappedMemoryRange* nocapture dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %6 = icmp eq i64 %3, 0
  br i1 %6, label %86, label %7

7:                                                ; preds = %5
  %8 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 4
  %9 = load i32, i32* %8, align 4
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %10, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = and i32 %12, 6
  %14 = icmp eq i32 %13, 2
  br i1 %14, label %15, label %86

15:                                               ; preds = %7
  %16 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 18, i32 7, i32 105
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %struct.VkMappedMemoryRange, %struct.VkMappedMemoryRange* %4, i64 0, i32 0
  store i32 6, i32* %20, align 8
  %21 = getelementptr inbounds %struct.VkMappedMemoryRange, %struct.VkMappedMemoryRange* %4, i64 0, i32 1
  store i8* null, i8** %21, align 8
  %22 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 5
  %23 = load i8, i8* %22, align 8
  switch i8 %23, label %34 [
    i8 1, label %24
    i8 2, label %28
  ]

24:                                               ; preds = %15
  %25 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 0
  %26 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %25, align 8
  %27 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %26, i64 0, i32 4
  br label %31

28:                                               ; preds = %15
  %29 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9
  %30 = bitcast %union.anon* %29 to %struct.VkDeviceMemory_T**
  br label %31

31:                                               ; preds = %28, %24
  %32 = phi %struct.VkDeviceMemory_T** [ %27, %24 ], [ %30, %28 ]
  %33 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %32, align 8
  br label %34

34:                                               ; preds = %31, %15
  %35 = phi %struct.VkDeviceMemory_T* [ null, %15 ], [ %33, %31 ]
  %36 = getelementptr inbounds %struct.VkMappedMemoryRange, %struct.VkMappedMemoryRange* %4, i64 0, i32 2
  store %struct.VkDeviceMemory_T* %35, %struct.VkDeviceMemory_T** %36, align 8
  %37 = load i8, i8* %22, align 8
  switch i8 %37, label %86 [
    i8 2, label %38
    i8 1, label %56
  ]

38:                                               ; preds = %34
  %39 = urem i64 %2, %17
  %40 = sub i64 %2, %39
  %41 = getelementptr inbounds %struct.VkMappedMemoryRange, %struct.VkMappedMemoryRange* %4, i64 0, i32 3
  store i64 %40, i64* %41, align 8
  %42 = icmp eq i64 %3, -1
  br i1 %42, label %43, label %46

43:                                               ; preds = %38
  %44 = sub i64 %19, %40
  %45 = getelementptr inbounds %struct.VkMappedMemoryRange, %struct.VkMappedMemoryRange* %4, i64 0, i32 4
  store i64 %44, i64* %45, align 8
  br label %86

46:                                               ; preds = %38
  %47 = add i64 %17, -1
  %48 = add i64 %47, %3
  %49 = add i64 %48, %39
  %50 = urem i64 %49, %17
  %51 = sub i64 %49, %50
  %52 = sub i64 %19, %40
  %53 = icmp ult i64 %52, %51
  %54 = select i1 %53, i64 %52, i64 %51
  %55 = getelementptr inbounds %struct.VkMappedMemoryRange, %struct.VkMappedMemoryRange* %4, i64 0, i32 4
  store i64 %54, i64* %55, align 8
  br label %86

56:                                               ; preds = %34
  %57 = urem i64 %2, %17
  %58 = sub i64 %2, %57
  %59 = getelementptr inbounds %struct.VkMappedMemoryRange, %struct.VkMappedMemoryRange* %4, i64 0, i32 3
  store i64 %58, i64* %59, align 8
  %60 = icmp eq i64 %3, -1
  %61 = sub i64 %19, %2
  %62 = select i1 %60, i64 %61, i64 %3
  %63 = add i64 %17, -1
  %64 = add i64 %63, %62
  %65 = add i64 %64, %57
  %66 = urem i64 %65, %17
  %67 = sub i64 %65, %66
  %68 = getelementptr inbounds %struct.VkMappedMemoryRange, %struct.VkMappedMemoryRange* %4, i64 0, i32 4
  store i64 %67, i64* %68, align 8
  %69 = load i8, i8* %22, align 8
  %70 = icmp eq i8 %69, 1
  br i1 %70, label %71, label %74

71:                                               ; preds = %56
  %72 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 1
  %73 = load i64, i64* %72, align 8
  br label %74

74:                                               ; preds = %56, %71
  %75 = phi i64 [ %73, %71 ], [ 0, %56 ]
  %76 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 0
  %77 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %76, align 8
  %78 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %77, i64 0, i32 0
  %79 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %78, align 8
  %80 = getelementptr inbounds %class.VmaBlockMetadata, %class.VmaBlockMetadata* %79, i64 0, i32 1
  %81 = load i64, i64* %80, align 8
  %82 = add i64 %75, %58
  store i64 %82, i64* %59, align 8
  %83 = sub i64 %81, %82
  %84 = icmp ult i64 %83, %67
  %85 = select i1 %84, i64 %83, i64 %67
  store i64 %85, i64* %68, align 8
  br label %86

86:                                               ; preds = %7, %5, %74, %46, %43, %34
  %87 = phi i1 [ true, %34 ], [ true, %43 ], [ true, %46 ], [ true, %74 ], [ false, %5 ], [ false, %7 ]
  ret i1 %87
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14VmaAllocator_T28FlushOrInvalidateAllocationsEjPKP15VmaAllocation_TPKmS5_19VMA_CACHE_OPERATION(%struct.VmaAllocator_T*, i32, %struct.VmaAllocation_T** nocapture readonly, i64* readonly, i64* readonly, i32) local_unnamed_addr #0 align 2 {
  %7 = alloca %class.VmaSmallVector, align 8
  %8 = alloca %struct.VkMappedMemoryRange, align 8
  %9 = bitcast %class.VmaSmallVector* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 680, i8* nonnull %9) #15
  %10 = getelementptr inbounds %class.VmaSmallVector, %class.VmaSmallVector* %7, i64 0, i32 1
  %11 = bitcast [16 x %struct.VkMappedMemoryRange]* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 640, i1 false)
  %12 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 11
  %13 = load i8, i8* %12, align 8, !range !2
  %14 = icmp eq i8 %13, 0
  %15 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13
  %16 = ptrtoint %struct.VkAllocationCallbacks* %15 to i64
  %17 = select i1 %14, i64 0, i64 %16
  %18 = getelementptr inbounds %class.VmaSmallVector, %class.VmaSmallVector* %7, i64 0, i32 0
  store i64 0, i64* %18, align 8
  %19 = getelementptr inbounds %class.VmaSmallVector, %class.VmaSmallVector* %7, i64 0, i32 2
  %20 = bitcast %class.VmaVector.43* %19 to i64*
  store i64 %17, i64* %20, align 8
  %21 = getelementptr inbounds %class.VmaSmallVector, %class.VmaSmallVector* %7, i64 0, i32 2, i32 1
  %22 = bitcast %struct.VkMappedMemoryRange** %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 24, i1 false) #15
  %23 = icmp eq i32 %1, 0
  br i1 %23, label %102, label %24

24:                                               ; preds = %6
  %25 = icmp eq i64* %3, null
  %26 = icmp eq i64* %4, null
  %27 = bitcast %struct.VkMappedMemoryRange* %8 to i8*
  %28 = getelementptr inbounds %class.VmaSmallVector, %class.VmaSmallVector* %7, i64 0, i32 1, i64 0
  %29 = bitcast %struct.VkMappedMemoryRange* %28 to i8*
  %30 = bitcast %struct.VkMappedMemoryRange** %21 to i8**
  %31 = zext i32 %1 to i64
  br label %35

32:                                               ; preds = %76
  %33 = load i64, i64* %18, align 8
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %102, label %79

35:                                               ; preds = %76, %24
  %36 = phi i64 [ 0, %24 ], [ %77, %76 ]
  %37 = getelementptr inbounds %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %2, i64 %36
  %38 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %37, align 8
  br i1 %25, label %42, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds i64, i64* %3, i64 %36
  %41 = load i64, i64* %40, align 8
  br label %42

42:                                               ; preds = %35, %39
  %43 = phi i64 [ %41, %39 ], [ 0, %35 ]
  br i1 %26, label %47, label %44

44:                                               ; preds = %42
  %45 = getelementptr inbounds i64, i64* %4, i64 %36
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %42, %44
  %48 = phi i64 [ %46, %44 ], [ -1, %42 ]
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %27) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 40, i1 false)
  %49 = call zeroext i1 @_ZNK14VmaAllocator_T25GetFlushOrInvalidateRangeEP15VmaAllocation_TmmR19VkMappedMemoryRange(%struct.VmaAllocator_T* %0, %struct.VmaAllocation_T* %38, i64 %43, i64 %48, %struct.VkMappedMemoryRange* nonnull dereferenceable(40) %8)
  br i1 %49, label %50, label %76

50:                                               ; preds = %47
  %51 = load i64, i64* %18, align 8
  %52 = add i64 %51, 1
  %53 = icmp ugt i64 %52, 16
  %54 = icmp ugt i64 %51, 16
  br i1 %53, label %55, label %62

55:                                               ; preds = %50
  call void @_ZN9VmaVectorI19VkMappedMemoryRange15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.43* %19, i64 %52, i1 zeroext false) #15
  br i1 %54, label %69, label %56

56:                                               ; preds = %55
  %57 = load i64, i64* %18, align 8
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %69, label %59

59:                                               ; preds = %56
  %60 = load i8*, i8** %30, align 8
  %61 = mul i64 %57, 40
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %29, i64 %61, i1 false) #15
  br label %69

62:                                               ; preds = %50
  br i1 %54, label %63, label %71

63:                                               ; preds = %62
  %64 = icmp eq i64 %52, 0
  br i1 %64, label %68, label %65

65:                                               ; preds = %63
  %66 = load i8*, i8** %30, align 8
  %67 = mul i64 %52, 40
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %66, i64 %67, i1 false) #15
  br label %68

68:                                               ; preds = %65, %63
  call void @_ZN9VmaVectorI19VkMappedMemoryRange15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.43* %19, i64 0, i1 zeroext false) #15
  br label %71

69:                                               ; preds = %59, %56, %55
  store i64 %52, i64* %18, align 8
  %70 = load %struct.VkMappedMemoryRange*, %struct.VkMappedMemoryRange** %21, align 8
  br label %72

71:                                               ; preds = %68, %62
  store i64 %52, i64* %18, align 8
  br label %72

72:                                               ; preds = %69, %71
  %73 = phi %struct.VkMappedMemoryRange* [ %70, %69 ], [ %28, %71 ]
  %74 = getelementptr inbounds %struct.VkMappedMemoryRange, %struct.VkMappedMemoryRange* %73, i64 %51
  %75 = bitcast %struct.VkMappedMemoryRange* %74 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* nonnull align 8 %27, i64 40, i1 false) #15
  br label %76

76:                                               ; preds = %72, %47
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %27) #15
  %77 = add nuw nsw i64 %36, 1
  %78 = icmp eq i64 %77, %31
  br i1 %78, label %32, label %35

79:                                               ; preds = %32
  switch i32 %5, label %102 [
    i32 0, label %80
    i32 1, label %91
  ]

80:                                               ; preds = %79
  %81 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 6
  %82 = load i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)** %81, align 8
  %83 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %84 = load %struct.VkDevice_T*, %struct.VkDevice_T** %83, align 8
  %85 = trunc i64 %33 to i32
  %86 = icmp ugt i64 %33, 16
  %87 = load %struct.VkMappedMemoryRange*, %struct.VkMappedMemoryRange** %21, align 8
  %88 = getelementptr inbounds %class.VmaSmallVector, %class.VmaSmallVector* %7, i64 0, i32 1, i64 0
  %89 = select i1 %86, %struct.VkMappedMemoryRange* %87, %struct.VkMappedMemoryRange* %88
  %90 = call i32 %82(%struct.VkDevice_T* %84, i32 %85, %struct.VkMappedMemoryRange* %89) #15
  br label %102

91:                                               ; preds = %79
  %92 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 7
  %93 = load i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)** %92, align 8
  %94 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %95 = load %struct.VkDevice_T*, %struct.VkDevice_T** %94, align 8
  %96 = trunc i64 %33 to i32
  %97 = icmp ugt i64 %33, 16
  %98 = load %struct.VkMappedMemoryRange*, %struct.VkMappedMemoryRange** %21, align 8
  %99 = getelementptr inbounds %class.VmaSmallVector, %class.VmaSmallVector* %7, i64 0, i32 1, i64 0
  %100 = select i1 %97, %struct.VkMappedMemoryRange* %98, %struct.VkMappedMemoryRange* %99
  %101 = call i32 %93(%struct.VkDevice_T* %95, i32 %96, %struct.VkMappedMemoryRange* %100) #15
  br label %102

102:                                              ; preds = %6, %80, %91, %79, %32
  %103 = phi i32 [ 0, %32 ], [ 0, %79 ], [ %101, %91 ], [ %90, %80 ], [ 0, %6 ]
  %104 = getelementptr inbounds %class.VmaSmallVector, %class.VmaSmallVector* %7, i64 0, i32 2, i32 0, i32 0
  %105 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %104, align 8
  %106 = bitcast %struct.VkMappedMemoryRange** %21 to i8**
  %107 = load i8*, i8** %106, align 8
  %108 = icmp eq %struct.VkAllocationCallbacks* %105, null
  br i1 %108, label %116, label %109

109:                                              ; preds = %102
  %110 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %105, i64 0, i32 3
  %111 = load void (i8*, i8*)*, void (i8*, i8*)** %110, align 8
  %112 = icmp eq void (i8*, i8*)* %111, null
  br i1 %112, label %116, label %113

113:                                              ; preds = %109
  %114 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %105, i64 0, i32 0
  %115 = load i8*, i8** %114, align 8
  call void %111(i8* %115, i8* %107) #15
  br label %117

116:                                              ; preds = %109, %102
  call void @free(i8* %107) #15
  br label %117

117:                                              ; preds = %113, %116
  call void @llvm.lifetime.end.p0i8(i64 680, i8* nonnull %9) #15
  ret i32 %103
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK14VmaAllocator_T41CalculateGpuDefragmentationMemoryTypeBitsEv(%struct.VmaAllocator_T*) local_unnamed_addr #0 align 2 {
  %2 = alloca %struct.VkBufferCreateInfo, align 8
  %3 = alloca %struct.VkBuffer_T*, align 8
  %4 = alloca %struct.VkMemoryRequirements, align 8
  %5 = bitcast %struct.VkBufferCreateInfo* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %5) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 56, i1 false) #15
  %6 = getelementptr inbounds %struct.VkBufferCreateInfo, %struct.VkBufferCreateInfo* %2, i64 0, i32 0
  store i32 12, i32* %6, align 8
  %7 = getelementptr inbounds %struct.VkBufferCreateInfo, %struct.VkBufferCreateInfo* %2, i64 0, i32 4
  store i32 3, i32* %7, align 8
  %8 = getelementptr inbounds %struct.VkBufferCreateInfo, %struct.VkBufferCreateInfo* %2, i64 0, i32 3
  store i64 268435456, i64* %8, align 8
  %9 = bitcast %struct.VkBuffer_T** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #15
  store %struct.VkBuffer_T* null, %struct.VkBuffer_T** %3, align 8
  %10 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 12
  %11 = load i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)*, i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)** %10, align 8
  %12 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %13 = load %struct.VkDevice_T*, %struct.VkDevice_T** %12, align 8
  %14 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 11
  %15 = load i8, i8* %14, align 8, !range !2
  %16 = icmp eq i8 %15, 0
  %17 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13
  %18 = select i1 %16, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %17
  %19 = call i32 %11(%struct.VkDevice_T* %13, %struct.VkBufferCreateInfo* nonnull %2, %struct.VkAllocationCallbacks* %18, %struct.VkBuffer_T** nonnull %3) #15
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %36

21:                                               ; preds = %1
  %22 = bitcast %struct.VkMemoryRequirements* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 24, i1 false)
  %23 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 10
  %24 = load void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)** %23, align 8
  %25 = load %struct.VkDevice_T*, %struct.VkDevice_T** %12, align 8
  %26 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %3, align 8
  call void %24(%struct.VkDevice_T* %25, %struct.VkBuffer_T* %26, %struct.VkMemoryRequirements* nonnull %4) #15
  %27 = getelementptr inbounds %struct.VkMemoryRequirements, %struct.VkMemoryRequirements* %4, i64 0, i32 2
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 13
  %30 = load void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)** %29, align 8
  %31 = load %struct.VkDevice_T*, %struct.VkDevice_T** %12, align 8
  %32 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %3, align 8
  %33 = load i8, i8* %14, align 8, !range !2
  %34 = icmp eq i8 %33, 0
  %35 = select i1 %34, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %17
  call void %30(%struct.VkDevice_T* %31, %struct.VkBuffer_T* %32, %struct.VkAllocationCallbacks* %35) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #15
  br label %36

36:                                               ; preds = %21, %1
  %37 = phi i32 [ %28, %21 ], [ 0, %1 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #15
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %5) #15
  ret i32 %37
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN14VmaAllocator_T14FillAllocationEP15VmaAllocation_Th(%struct.VmaAllocator_T* nocapture, %struct.VmaAllocation_T* nocapture, i8 zeroext) local_unnamed_addr #10 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14VmaAllocator_T16PrintDetailedMapER13VmaJsonWriter(%struct.VmaAllocator_T*, %class.VmaJsonWriter* dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %3 = alloca [11 x i8], align 1
  %4 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %287, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 0
  %9 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 0
  %10 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 2
  %11 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 1
  %12 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 1, i32 2
  %13 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 1, i32 1
  %14 = getelementptr inbounds [11 x i8], [11 x i8]* %3, i64 0, i64 0
  %15 = getelementptr inbounds [11 x i8], [11 x i8]* %3, i64 0, i64 10
  br label %19

16:                                               ; preds = %162
  %17 = and i8 %159, 1
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %169, label %167

19:                                               ; preds = %7, %162
  %20 = phi i64 [ 0, %7 ], [ %163, %162 ]
  %21 = phi i8 [ 0, %7 ], [ %159, %162 ]
  %22 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 22, i64 %20
  %23 = load i8, i8* %8, align 8, !range !2
  %24 = icmp eq i8 %23, 0
  %25 = select i1 %24, %class.VmaRWMutex* null, %class.VmaRWMutex* %22
  %26 = icmp eq %class.VmaRWMutex* %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %19
  %28 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %25, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %28) #15
  br label %29

29:                                               ; preds = %19, %27
  %30 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 21, i64 %20
  %31 = load %class.VmaVector.5*, %class.VmaVector.5** %30, align 8
  %32 = getelementptr inbounds %class.VmaVector.5, %class.VmaVector.5* %31, i64 0, i32 2
  %33 = load i64, i64* %32, align 8
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %158, label %35

35:                                               ; preds = %29
  %36 = and i8 %21, 1
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %38, label %70

38:                                               ; preds = %35
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %39 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %9, align 8
  %40 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %39, i64 0, i32 0
  %41 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %39, i64 0, i32 0, i32 2
  %42 = load i64, i64* %41, align 8
  %43 = add i64 %42, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %40, i64 %43, i1 zeroext false) #15
  %44 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %39, i64 0, i32 0, i32 1
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 %42
  store i8 34, i8* %46, align 1
  store i8 1, i8* %10, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.41, i64 0, i64 0)) #15
  %47 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %9, align 8
  %48 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %47, i64 0, i32 0
  %49 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %47, i64 0, i32 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = add i64 %50, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %48, i64 %51, i1 zeroext false) #15
  %52 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %47, i64 0, i32 0, i32 1
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 %50
  store i8 34, i8* %54, align 1
  store i8 0, i8* %10, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %55 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %9, align 8
  %56 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %55, i64 0, i32 0
  %57 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %55, i64 0, i32 0, i32 2
  %58 = load i64, i64* %57, align 8
  %59 = add i64 %58, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %56, i64 %59, i1 zeroext false) #15
  %60 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %55, i64 0, i32 0, i32 1
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds i8, i8* %61, i64 %58
  store i8 123, i8* %62, align 1
  %63 = load i64, i64* %12, align 8
  %64 = add i64 %63, 1
  tail call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %11, i64 %64, i1 zeroext false) #15
  %65 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %13, align 8
  %66 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %65, i64 %63
  %67 = bitcast %"struct.VmaJsonWriter::StackItem"* %66 to i8*
  %68 = getelementptr inbounds i8, i8* %67, i64 9
  %69 = bitcast %"struct.VmaJsonWriter::StackItem"* %66 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %69, i8 0, i64 9, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %68, i8* nonnull align 1 getelementptr inbounds ({ i32, i32, i8, [3 x i8] }, { i32, i32, i8, [3 x i8] }* @__const._ZN13VmaJsonWriter10BeginArrayEb.item, i64 0, i32 3, i64 0), i64 3, i1 false) #15
  br label %70

70:                                               ; preds = %38, %35
  %71 = phi i8 [ 1, %38 ], [ %21, %35 ]
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %72 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %9, align 8
  %73 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %72, i64 0, i32 0
  %74 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %72, i64 0, i32 0, i32 2
  %75 = load i64, i64* %74, align 8
  %76 = add i64 %75, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %73, i64 %76, i1 zeroext false) #15
  %77 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %72, i64 0, i32 0, i32 1
  %78 = load i8*, i8** %77, align 8
  %79 = getelementptr inbounds i8, i8* %78, i64 %75
  store i8 34, i8* %79, align 1
  store i8 1, i8* %10, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.42, i64 0, i64 0)) #15
  %80 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %9, align 8
  call void @llvm.lifetime.start.p0i8(i64 11, i8* nonnull %14) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -86, i64 10, i1 false) #15
  store i8 0, i8* %15, align 1
  %81 = trunc i64 %20 to i32
  br label %82

82:                                               ; preds = %82, %70
  %83 = phi i32 [ %81, %70 ], [ %89, %82 ]
  %84 = phi i8* [ %15, %70 ], [ %88, %82 ]
  %85 = urem i32 %83, 10
  %86 = trunc i32 %85 to i8
  %87 = or i8 %86, 48
  %88 = getelementptr inbounds i8, i8* %84, i64 -1
  store i8 %87, i8* %88, align 1
  %89 = udiv i32 %83, 10
  %90 = icmp ugt i32 %83, 9
  br i1 %90, label %82, label %91

91:                                               ; preds = %82
  %92 = call i64 @strlen(i8* %88) #16
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %102, label %94

94:                                               ; preds = %91
  %95 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %80, i64 0, i32 0
  %96 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %80, i64 0, i32 0, i32 2
  %97 = load i64, i64* %96, align 8
  %98 = add i64 %97, %92
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %95, i64 %98, i1 zeroext false) #15
  %99 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %80, i64 0, i32 0, i32 1
  %100 = load i8*, i8** %99, align 8
  %101 = getelementptr inbounds i8, i8* %100, i64 %97
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %101, i8* align 1 %88, i64 %92, i1 false) #15
  br label %102

102:                                              ; preds = %91, %94
  call void @llvm.lifetime.end.p0i8(i64 11, i8* nonnull %14) #15
  %103 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %9, align 8
  %104 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %103, i64 0, i32 0
  %105 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %103, i64 0, i32 0, i32 2
  %106 = load i64, i64* %105, align 8
  %107 = add i64 %106, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %104, i64 %107, i1 zeroext false) #15
  %108 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %103, i64 0, i32 0, i32 1
  %109 = load i8*, i8** %108, align 8
  %110 = getelementptr inbounds i8, i8* %109, i64 %106
  store i8 34, i8* %110, align 1
  store i8 0, i8* %10, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %111 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %9, align 8
  %112 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %111, i64 0, i32 0
  %113 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %111, i64 0, i32 0, i32 2
  %114 = load i64, i64* %113, align 8
  %115 = add i64 %114, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %112, i64 %115, i1 zeroext false) #15
  %116 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %111, i64 0, i32 0, i32 1
  %117 = load i8*, i8** %116, align 8
  %118 = getelementptr inbounds i8, i8* %117, i64 %114
  store i8 91, i8* %118, align 1
  %119 = load i64, i64* %12, align 8
  %120 = add i64 %119, 1
  tail call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %11, i64 %120, i1 zeroext false) #15
  %121 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %13, align 8
  %122 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %121, i64 %119
  %123 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %122, i64 0, i32 0
  store i32 1, i32* %123, align 4
  %124 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %121, i64 %119, i32 1
  store i32 0, i32* %124, align 4
  %125 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %121, i64 %119, i32 2
  store i8 0, i8* %125, align 4
  %126 = bitcast %"struct.VmaJsonWriter::StackItem"* %122 to i8*
  %127 = getelementptr inbounds i8, i8* %126, i64 9
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %127, i8* nonnull align 1 getelementptr inbounds ({ i32, i32, i8, [3 x i8] }, { i32, i32, i8, [3 x i8] }* @__const._ZN13VmaJsonWriter10BeginArrayEb.item, i64 0, i32 3, i64 0), i64 3, i1 false) #15
  %128 = load i64, i64* %32, align 8
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %132, label %130

130:                                              ; preds = %102
  %131 = getelementptr inbounds %class.VmaVector.5, %class.VmaVector.5* %31, i64 0, i32 1
  br label %133

132:                                              ; preds = %133, %102
  tail call void @_ZN13VmaJsonWriter8EndArrayEv(%class.VmaJsonWriter* %1)
  br label %158

133:                                              ; preds = %130, %133
  %134 = phi i64 [ 0, %130 ], [ %155, %133 ]
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %135 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %9, align 8
  %136 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %135, i64 0, i32 0
  %137 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %135, i64 0, i32 0, i32 2
  %138 = load i64, i64* %137, align 8
  %139 = add i64 %138, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %136, i64 %139, i1 zeroext false) #15
  %140 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %135, i64 0, i32 0, i32 1
  %141 = load i8*, i8** %140, align 8
  %142 = getelementptr inbounds i8, i8* %141, i64 %138
  store i8 123, i8* %142, align 1
  %143 = load i64, i64* %12, align 8
  %144 = add i64 %143, 1
  tail call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %11, i64 %144, i1 zeroext false) #15
  %145 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %13, align 8
  %146 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %145, i64 %143
  %147 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %146, i64 0, i32 0
  store i32 0, i32* %147, align 4
  %148 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %145, i64 %143, i32 1
  store i32 0, i32* %148, align 4
  %149 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %145, i64 %143, i32 2
  store i8 1, i8* %149, align 4
  %150 = bitcast %"struct.VmaJsonWriter::StackItem"* %146 to i8*
  %151 = getelementptr inbounds i8, i8* %150, i64 9
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %151, i8* nonnull align 1 getelementptr inbounds ({ i32, i32, i8, [3 x i8] }, { i32, i32, i8, [3 x i8] }* @__const._ZN13VmaJsonWriter10BeginArrayEb.item, i64 0, i32 3, i64 0), i64 3, i1 false) #15
  %152 = load %struct.VmaAllocation_T**, %struct.VmaAllocation_T*** %131, align 8
  %153 = getelementptr inbounds %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %152, i64 %134
  %154 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %153, align 8
  tail call void @_ZNK15VmaAllocation_T15PrintParametersER13VmaJsonWriter(%struct.VmaAllocation_T* %154, %class.VmaJsonWriter* dereferenceable(48) %1)
  tail call void @_ZN13VmaJsonWriter9EndObjectEv(%class.VmaJsonWriter* %1)
  %155 = add nuw i64 %134, 1
  %156 = load i64, i64* %32, align 8
  %157 = icmp ult i64 %155, %156
  br i1 %157, label %133, label %132

158:                                              ; preds = %29, %132
  %159 = phi i8 [ %71, %132 ], [ %21, %29 ]
  br i1 %26, label %162, label %160

160:                                              ; preds = %158
  %161 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %25, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %161) #15
  br label %162

162:                                              ; preds = %158, %160
  %163 = add nuw nsw i64 %20, 1
  %164 = load i32, i32* %4, align 8
  %165 = zext i32 %164 to i64
  %166 = icmp ult i64 %163, %165
  br i1 %166, label %19, label %16

167:                                              ; preds = %16
  tail call void @_ZN13VmaJsonWriter9EndObjectEv(%class.VmaJsonWriter* %1)
  %168 = load i32, i32* %4, align 8
  br label %169

169:                                              ; preds = %16, %167
  %170 = phi i32 [ %164, %16 ], [ %168, %167 ]
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %287, label %172

172:                                              ; preds = %169
  %173 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 0
  %174 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 2
  %175 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 1
  %176 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 1, i32 2
  %177 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 1, i32 1
  %178 = getelementptr inbounds [11 x i8], [11 x i8]* %3, i64 0, i64 0
  %179 = getelementptr inbounds [11 x i8], [11 x i8]* %3, i64 0, i64 10
  br label %183

180:                                              ; preds = %280
  %181 = and i8 %281, 1
  %182 = icmp eq i8 %181, 0
  br i1 %182, label %287, label %286

183:                                              ; preds = %172, %280
  %184 = phi i64 [ 0, %172 ], [ %282, %280 ]
  %185 = phi i8 [ 0, %172 ], [ %281, %280 ]
  %186 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 20, i64 %184
  %187 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %186, align 8
  %188 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %187, i64 0, i32 0
  %189 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %188, align 8
  %190 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %189, i64 0, i32 0
  %191 = load i8, i8* %190, align 8, !range !2
  %192 = icmp eq i8 %191, 0
  br i1 %192, label %193, label %196

193:                                              ; preds = %183
  %194 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %187, i64 0, i32 16, i32 2
  %195 = load i64, i64* %194, align 8
  br label %200

196:                                              ; preds = %183
  %197 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %187, i64 0, i32 13, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %197) #15
  %198 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %187, i64 0, i32 16, i32 2
  %199 = load i64, i64* %198, align 8
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %197) #15
  br label %200

200:                                              ; preds = %193, %196
  %201 = phi i64 [ %195, %193 ], [ %199, %196 ]
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %280, label %203

203:                                              ; preds = %200
  %204 = and i8 %185, 1
  %205 = icmp eq i8 %204, 0
  br i1 %205, label %206, label %238

206:                                              ; preds = %203
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %207 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %173, align 8
  %208 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %207, i64 0, i32 0
  %209 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %207, i64 0, i32 0, i32 2
  %210 = load i64, i64* %209, align 8
  %211 = add i64 %210, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %208, i64 %211, i1 zeroext false) #15
  %212 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %207, i64 0, i32 0, i32 1
  %213 = load i8*, i8** %212, align 8
  %214 = getelementptr inbounds i8, i8* %213, i64 %210
  store i8 34, i8* %214, align 1
  store i8 1, i8* %174, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.43, i64 0, i64 0)) #15
  %215 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %173, align 8
  %216 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %215, i64 0, i32 0
  %217 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %215, i64 0, i32 0, i32 2
  %218 = load i64, i64* %217, align 8
  %219 = add i64 %218, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %216, i64 %219, i1 zeroext false) #15
  %220 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %215, i64 0, i32 0, i32 1
  %221 = load i8*, i8** %220, align 8
  %222 = getelementptr inbounds i8, i8* %221, i64 %218
  store i8 34, i8* %222, align 1
  store i8 0, i8* %174, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %223 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %173, align 8
  %224 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %223, i64 0, i32 0
  %225 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %223, i64 0, i32 0, i32 2
  %226 = load i64, i64* %225, align 8
  %227 = add i64 %226, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %224, i64 %227, i1 zeroext false) #15
  %228 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %223, i64 0, i32 0, i32 1
  %229 = load i8*, i8** %228, align 8
  %230 = getelementptr inbounds i8, i8* %229, i64 %226
  store i8 123, i8* %230, align 1
  %231 = load i64, i64* %176, align 8
  %232 = add i64 %231, 1
  tail call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %175, i64 %232, i1 zeroext false) #15
  %233 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %177, align 8
  %234 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %233, i64 %231
  %235 = bitcast %"struct.VmaJsonWriter::StackItem"* %234 to i8*
  %236 = getelementptr inbounds i8, i8* %235, i64 9
  %237 = bitcast %"struct.VmaJsonWriter::StackItem"* %234 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %237, i8 0, i64 9, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %236, i8* nonnull align 1 getelementptr inbounds ({ i32, i32, i8, [3 x i8] }, { i32, i32, i8, [3 x i8] }* @__const._ZN13VmaJsonWriter10BeginArrayEb.item, i64 0, i32 3, i64 0), i64 3, i1 false) #15
  br label %238

238:                                              ; preds = %206, %203
  %239 = phi i8 [ 1, %206 ], [ %185, %203 ]
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %240 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %173, align 8
  %241 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %240, i64 0, i32 0
  %242 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %240, i64 0, i32 0, i32 2
  %243 = load i64, i64* %242, align 8
  %244 = add i64 %243, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %241, i64 %244, i1 zeroext false) #15
  %245 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %240, i64 0, i32 0, i32 1
  %246 = load i8*, i8** %245, align 8
  %247 = getelementptr inbounds i8, i8* %246, i64 %243
  store i8 34, i8* %247, align 1
  store i8 1, i8* %174, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.42, i64 0, i64 0)) #15
  %248 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %173, align 8
  call void @llvm.lifetime.start.p0i8(i64 11, i8* nonnull %178) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %178, i8 -86, i64 10, i1 false) #15
  store i8 0, i8* %179, align 1
  %249 = trunc i64 %184 to i32
  br label %250

250:                                              ; preds = %250, %238
  %251 = phi i32 [ %249, %238 ], [ %257, %250 ]
  %252 = phi i8* [ %179, %238 ], [ %256, %250 ]
  %253 = urem i32 %251, 10
  %254 = trunc i32 %253 to i8
  %255 = or i8 %254, 48
  %256 = getelementptr inbounds i8, i8* %252, i64 -1
  store i8 %255, i8* %256, align 1
  %257 = udiv i32 %251, 10
  %258 = icmp ugt i32 %251, 9
  br i1 %258, label %250, label %259

259:                                              ; preds = %250
  %260 = call i64 @strlen(i8* %256) #16
  %261 = icmp eq i64 %260, 0
  br i1 %261, label %270, label %262

262:                                              ; preds = %259
  %263 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %248, i64 0, i32 0
  %264 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %248, i64 0, i32 0, i32 2
  %265 = load i64, i64* %264, align 8
  %266 = add i64 %265, %260
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %263, i64 %266, i1 zeroext false) #15
  %267 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %248, i64 0, i32 0, i32 1
  %268 = load i8*, i8** %267, align 8
  %269 = getelementptr inbounds i8, i8* %268, i64 %265
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %269, i8* align 1 %256, i64 %260, i1 false) #15
  br label %270

270:                                              ; preds = %259, %262
  call void @llvm.lifetime.end.p0i8(i64 11, i8* nonnull %178) #15
  %271 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %173, align 8
  %272 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %271, i64 0, i32 0
  %273 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %271, i64 0, i32 0, i32 2
  %274 = load i64, i64* %273, align 8
  %275 = add i64 %274, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %272, i64 %275, i1 zeroext false) #15
  %276 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %271, i64 0, i32 0, i32 1
  %277 = load i8*, i8** %276, align 8
  %278 = getelementptr inbounds i8, i8* %277, i64 %274
  store i8 34, i8* %278, align 1
  store i8 0, i8* %174, align 8
  %279 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %186, align 8
  tail call void @_ZN14VmaBlockVector16PrintDetailedMapER13VmaJsonWriter(%struct.VmaBlockVector* %279, %class.VmaJsonWriter* dereferenceable(48) %1)
  br label %280

280:                                              ; preds = %200, %270
  %281 = phi i8 [ %239, %270 ], [ %185, %200 ]
  %282 = add nuw nsw i64 %184, 1
  %283 = load i32, i32* %4, align 8
  %284 = zext i32 %283 to i64
  %285 = icmp ult i64 %282, %284
  br i1 %285, label %183, label %180

286:                                              ; preds = %180
  tail call void @_ZN13VmaJsonWriter9EndObjectEv(%class.VmaJsonWriter* %1)
  br label %287

287:                                              ; preds = %2, %169, %180, %286
  %288 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 28
  %289 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 0
  %290 = load i8, i8* %289, align 8, !range !2
  %291 = icmp eq i8 %290, 0
  %292 = select i1 %291, %class.VmaRWMutex* null, %class.VmaRWMutex* %288
  %293 = icmp eq %class.VmaRWMutex* %292, null
  br i1 %293, label %296, label %294

294:                                              ; preds = %287
  %295 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %292, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %295) #15
  br label %296

296:                                              ; preds = %287, %294
  %297 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 29, i32 2
  %298 = load i64, i64* %297, align 8
  %299 = icmp eq i64 %298, 0
  br i1 %299, label %392, label %300

300:                                              ; preds = %296
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %301 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 0
  %302 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %301, align 8
  %303 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %302, i64 0, i32 0
  %304 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %302, i64 0, i32 0, i32 2
  %305 = load i64, i64* %304, align 8
  %306 = add i64 %305, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %303, i64 %306, i1 zeroext false) #15
  %307 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %302, i64 0, i32 0, i32 1
  %308 = load i8*, i8** %307, align 8
  %309 = getelementptr inbounds i8, i8* %308, i64 %305
  store i8 34, i8* %309, align 1
  %310 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 2
  store i8 1, i8* %310, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %1, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.44, i64 0, i64 0)) #15
  %311 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %301, align 8
  %312 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %311, i64 0, i32 0
  %313 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %311, i64 0, i32 0, i32 2
  %314 = load i64, i64* %313, align 8
  %315 = add i64 %314, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %312, i64 %315, i1 zeroext false) #15
  %316 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %311, i64 0, i32 0, i32 1
  %317 = load i8*, i8** %316, align 8
  %318 = getelementptr inbounds i8, i8* %317, i64 %314
  store i8 34, i8* %318, align 1
  store i8 0, i8* %310, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %319 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %301, align 8
  %320 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %319, i64 0, i32 0
  %321 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %319, i64 0, i32 0, i32 2
  %322 = load i64, i64* %321, align 8
  %323 = add i64 %322, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %320, i64 %323, i1 zeroext false) #15
  %324 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %319, i64 0, i32 0, i32 1
  %325 = load i8*, i8** %324, align 8
  %326 = getelementptr inbounds i8, i8* %325, i64 %322
  store i8 123, i8* %326, align 1
  %327 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 1
  %328 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 1, i32 2
  %329 = load i64, i64* %328, align 8
  %330 = add i64 %329, 1
  tail call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %327, i64 %330, i1 zeroext false) #15
  %331 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %1, i64 0, i32 1, i32 1
  %332 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %331, align 8
  %333 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %332, i64 %329
  %334 = bitcast %"struct.VmaJsonWriter::StackItem"* %333 to i8*
  %335 = getelementptr inbounds i8, i8* %334, i64 9
  %336 = bitcast %"struct.VmaJsonWriter::StackItem"* %333 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %336, i8 0, i64 9, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %335, i8* nonnull align 1 getelementptr inbounds ({ i32, i32, i8, [3 x i8] }, { i32, i32, i8, [3 x i8] }* @__const._ZN13VmaJsonWriter10BeginArrayEb.item, i64 0, i32 3, i64 0), i64 3, i1 false) #15
  %337 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 29, i32 1
  %338 = getelementptr inbounds [11 x i8], [11 x i8]* %3, i64 0, i64 0
  %339 = getelementptr inbounds [11 x i8], [11 x i8]* %3, i64 0, i64 10
  br label %341

340:                                              ; preds = %377
  tail call void @_ZN13VmaJsonWriter9EndObjectEv(%class.VmaJsonWriter* %1)
  br label %392

341:                                              ; preds = %377, %300
  %342 = phi i64 [ 0, %300 ], [ %390, %377 ]
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %1, i1 zeroext undef) #15
  %343 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %301, align 8
  %344 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %343, i64 0, i32 0
  %345 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %343, i64 0, i32 0, i32 2
  %346 = load i64, i64* %345, align 8
  %347 = add i64 %346, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %344, i64 %347, i1 zeroext false) #15
  %348 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %343, i64 0, i32 0, i32 1
  %349 = load i8*, i8** %348, align 8
  %350 = getelementptr inbounds i8, i8* %349, i64 %346
  store i8 34, i8* %350, align 1
  store i8 1, i8* %310, align 8
  %351 = load %struct.VmaPool_T**, %struct.VmaPool_T*** %337, align 8
  %352 = getelementptr inbounds %struct.VmaPool_T*, %struct.VmaPool_T** %351, i64 %342
  %353 = load %struct.VmaPool_T*, %struct.VmaPool_T** %352, align 8
  %354 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %353, i64 0, i32 1
  %355 = load i32, i32* %354, align 8
  %356 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %301, align 8
  call void @llvm.lifetime.start.p0i8(i64 11, i8* nonnull %338) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %338, i8 -86, i64 10, i1 false) #15
  store i8 0, i8* %339, align 1
  br label %357

357:                                              ; preds = %357, %341
  %358 = phi i32 [ %355, %341 ], [ %364, %357 ]
  %359 = phi i8* [ %339, %341 ], [ %363, %357 ]
  %360 = urem i32 %358, 10
  %361 = trunc i32 %360 to i8
  %362 = or i8 %361, 48
  %363 = getelementptr inbounds i8, i8* %359, i64 -1
  store i8 %362, i8* %363, align 1
  %364 = udiv i32 %358, 10
  %365 = icmp ugt i32 %358, 9
  br i1 %365, label %357, label %366

366:                                              ; preds = %357
  %367 = call i64 @strlen(i8* %363) #16
  %368 = icmp eq i64 %367, 0
  br i1 %368, label %377, label %369

369:                                              ; preds = %366
  %370 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %356, i64 0, i32 0
  %371 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %356, i64 0, i32 0, i32 2
  %372 = load i64, i64* %371, align 8
  %373 = add i64 %372, %367
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %370, i64 %373, i1 zeroext false) #15
  %374 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %356, i64 0, i32 0, i32 1
  %375 = load i8*, i8** %374, align 8
  %376 = getelementptr inbounds i8, i8* %375, i64 %372
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %376, i8* align 1 %363, i64 %367, i1 false) #15
  br label %377

377:                                              ; preds = %366, %369
  call void @llvm.lifetime.end.p0i8(i64 11, i8* nonnull %338) #15
  %378 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %301, align 8
  %379 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %378, i64 0, i32 0
  %380 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %378, i64 0, i32 0, i32 2
  %381 = load i64, i64* %380, align 8
  %382 = add i64 %381, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %379, i64 %382, i1 zeroext false) #15
  %383 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %378, i64 0, i32 0, i32 1
  %384 = load i8*, i8** %383, align 8
  %385 = getelementptr inbounds i8, i8* %384, i64 %381
  store i8 34, i8* %385, align 1
  store i8 0, i8* %310, align 8
  %386 = load %struct.VmaPool_T**, %struct.VmaPool_T*** %337, align 8
  %387 = getelementptr inbounds %struct.VmaPool_T*, %struct.VmaPool_T** %386, i64 %342
  %388 = load %struct.VmaPool_T*, %struct.VmaPool_T** %387, align 8
  %389 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %388, i64 0, i32 0
  tail call void @_ZN14VmaBlockVector16PrintDetailedMapER13VmaJsonWriter(%struct.VmaBlockVector* %389, %class.VmaJsonWriter* dereferenceable(48) %1)
  %390 = add nuw i64 %342, 1
  %391 = icmp eq i64 %390, %298
  br i1 %391, label %340, label %341

392:                                              ; preds = %296, %340
  br i1 %293, label %395, label %393

393:                                              ; preds = %392
  %394 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %292, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %394) #15
  br label %395

395:                                              ; preds = %392, %393
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaCreateAllocator(%struct.VmaAllocatorCreateInfo* nocapture readonly, %struct.VmaAllocator_T** nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VmaAllocatorCreateInfo, %struct.VmaAllocatorCreateInfo* %0, i64 0, i32 4
  %4 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %3, align 8
  %5 = icmp eq %struct.VkAllocationCallbacks* %4, null
  br i1 %5, label %14, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %4, i64 0, i32 1
  %8 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %7, align 8
  %9 = icmp eq i8* (i8*, i64, i64, i32)* %8, null
  br i1 %9, label %14, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %4, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = tail call i8* %8(i8* %12, i64 4320, i64 8, i32 1) #15
  br label %16

14:                                               ; preds = %6, %2
  %15 = tail call noalias i8* @aligned_alloc(i64 8, i64 4320) #15
  br label %16

16:                                               ; preds = %10, %14
  %17 = phi i8* [ %13, %10 ], [ %15, %14 ]
  %18 = bitcast i8* %17 to %struct.VmaAllocator_T*
  tail call void @_ZN14VmaAllocator_TC2EPK22VmaAllocatorCreateInfo(%struct.VmaAllocator_T* %18, %struct.VmaAllocatorCreateInfo* %0)
  %19 = bitcast %struct.VmaAllocator_T** %1 to i8**
  store i8* %17, i8** %19, align 8
  %20 = getelementptr inbounds %struct.VmaAllocatorCreateInfo, %struct.VmaAllocatorCreateInfo* %0, i64 0, i32 9
  %21 = load %struct.VmaRecordSettings*, %struct.VmaRecordSettings** %20, align 8
  %22 = icmp eq %struct.VmaRecordSettings* %21, null
  br i1 %22, label %30, label %23

23:                                               ; preds = %16
  %24 = getelementptr inbounds %struct.VmaRecordSettings, %struct.VmaRecordSettings* %21, i64 0, i32 1
  %25 = load i8*, i8** %24, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %23
  %28 = load i8, i8* %25, align 1
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %30, label %35

30:                                               ; preds = %27, %23, %16
  %31 = getelementptr inbounds i8, i8* %17, i64 10
  %32 = load i8, i8* %31, align 2, !range !2
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %35, label %34

34:                                               ; preds = %30
  tail call void @_ZN14VmaAllocator_T18UpdateVulkanBudgetEv(%struct.VmaAllocator_T* %18) #15
  br label %35

35:                                               ; preds = %27, %30, %34
  %36 = phi i32 [ -8, %27 ], [ 0, %30 ], [ 0, %34 ]
  ret i32 %36
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vmaDestroyAllocator(%struct.VmaAllocator_T*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.VmaAllocator_T* %0, null
  br i1 %2, label %12, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 3
  %7 = load void (i8*, i8*)*, void (i8*, i8*)** %6, align 8
  tail call void @_ZN14VmaAllocator_TD2Ev(%struct.VmaAllocator_T* nonnull %0) #15
  %8 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 0
  %9 = icmp eq void (i8*, i8*)* %7, null
  br i1 %9, label %11, label %10

10:                                               ; preds = %3
  tail call void %7(i8* %5, i8* %8) #15
  br label %12

11:                                               ; preds = %3
  tail call void @free(i8* %8) #15
  br label %12

12:                                               ; preds = %11, %10, %1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vmaGetAllocatorInfo(%struct.VmaAllocator_T* nocapture readonly, %struct.VmaAllocatorInfo* nocapture) local_unnamed_addr #6 {
  %3 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 10
  %4 = bitcast %struct.VkInstance_T** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %struct.VmaAllocatorInfo* %1 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 25
  %8 = bitcast %struct.VkPhysicalDevice_T** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %struct.VmaAllocatorInfo, %struct.VmaAllocatorInfo* %1, i64 0, i32 1
  %11 = bitcast %struct.VkPhysicalDevice_T** %10 to i64*
  store i64 %9, i64* %11, align 8
  %12 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %13 = bitcast %struct.VkDevice_T** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %struct.VmaAllocatorInfo, %struct.VmaAllocatorInfo* %1, i64 0, i32 2
  %16 = bitcast %struct.VkDevice_T** %15 to i64*
  store i64 %14, i64* %16, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @vmaGetPhysicalDeviceProperties(%struct.VmaAllocator_T*, %struct.VkPhysicalDeviceProperties** nocapture) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 18
  store %struct.VkPhysicalDeviceProperties* %3, %struct.VkPhysicalDeviceProperties** %1, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @vmaGetMemoryProperties(%struct.VmaAllocator_T*, %struct.VkPhysicalDeviceMemoryProperties** nocapture) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19
  store %struct.VkPhysicalDeviceMemoryProperties* %3, %struct.VkPhysicalDeviceMemoryProperties** %1, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vmaGetMemoryTypeProperties(%struct.VmaAllocator_T* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #6 {
  %4 = zext i32 %1 to i64
  %5 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %4, i32 0
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %2, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vmaSetCurrentFrameIndex(%struct.VmaAllocator_T*, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 26, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i32 %1, i32* %3 seq_cst, align 4
  %4 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 5
  %5 = load i8, i8* %4, align 2, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %2
  tail call void @_ZN14VmaAllocator_T18UpdateVulkanBudgetEv(%struct.VmaAllocator_T* %0) #15
  br label %8

8:                                                ; preds = %2, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vmaCalculateStats(%struct.VmaAllocator_T*, %struct.VmaStats* nocapture) local_unnamed_addr #0 {
  tail call void @_ZN14VmaAllocator_T14CalculateStatsEP8VmaStats(%struct.VmaAllocator_T* %0, %struct.VmaStats* %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vmaGetBudget(%struct.VmaAllocator_T*, %struct.VmaBudget* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 2
  %4 = load i32, i32* %3, align 4
  tail call void @_ZN14VmaAllocator_T9GetBudgetEP9VmaBudgetjj(%struct.VmaAllocator_T* %0, %struct.VmaBudget* %1, i32 0, i32 %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vmaBuildStatsString(%struct.VmaAllocator_T*, i8** nocapture, i32) local_unnamed_addr #0 {
  %4 = alloca [21 x i8], align 16
  %5 = alloca [11 x i8], align 1
  %6 = alloca %class.VmaStringBuilder, align 8
  %7 = alloca %class.VmaJsonWriter, align 8
  %8 = alloca [16 x %struct.VmaBudget], align 16
  %9 = alloca %struct.VmaStats, align 8
  %10 = bitcast %class.VmaStringBuilder* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #15
  %11 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %6, i64 0, i32 0, i32 0, i32 0
  %12 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %6, i64 0, i32 0, i32 1
  %13 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %6, i64 0, i32 0, i32 2
  %14 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 11
  %15 = load i8, i8* %14, align 8, !range !2
  %16 = icmp eq i8 %15, 0
  %17 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13
  %18 = ptrtoint %struct.VkAllocationCallbacks* %17 to i64
  %19 = select i1 %16, i64 0, i64 %18
  %20 = bitcast %class.VmaStringBuilder* %6 to i64*
  store i64 %19, i64* %20, align 8
  %21 = bitcast i8** %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 24, i1 false) #15
  %22 = bitcast %class.VmaJsonWriter* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %22) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 48, i1 false)
  %23 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %7, i64 0, i32 0
  store %class.VmaStringBuilder* %6, %class.VmaStringBuilder** %23, align 8
  %24 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %7, i64 0, i32 1
  %25 = bitcast %class.VmaVector.0* %24 to i64*
  store i64 %19, i64* %25, align 8
  %26 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %7, i64 0, i32 1, i32 1
  %27 = bitcast %"struct.VmaJsonWriter::StackItem"** %26 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 25, i1 false) #15
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %28 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %29 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %28, i64 0, i32 0
  %30 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %28, i64 0, i32 0, i32 2
  %31 = load i64, i64* %30, align 8
  %32 = add i64 %31, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %29, i64 %32, i1 zeroext false) #15
  %33 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %28, i64 0, i32 0, i32 1
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 %31
  store i8 123, i8* %35, align 1
  %36 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %7, i64 0, i32 1, i32 2
  %37 = load i64, i64* %36, align 8
  %38 = add i64 %37, 1
  call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %24, i64 %38, i1 zeroext false) #15
  %39 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %26, align 8
  %40 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %39, i64 %37
  %41 = bitcast %"struct.VmaJsonWriter::StackItem"* %40 to i8*
  %42 = getelementptr inbounds i8, i8* %41, i64 9
  %43 = bitcast %"struct.VmaJsonWriter::StackItem"* %40 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %43, i8 0, i64 9, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* nonnull align 1 getelementptr inbounds ({ i32, i32, i8, [3 x i8] }, { i32, i32, i8, [3 x i8] }* @__const._ZN13VmaJsonWriter10BeginArrayEb.item, i64 0, i32 3, i64 0), i64 3, i1 false) #15
  %44 = bitcast [16 x %struct.VmaBudget]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %44) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %44, i8 -86, i64 512, i1 false)
  %45 = getelementptr inbounds [16 x %struct.VmaBudget], [16 x %struct.VmaBudget]* %8, i64 0, i64 0
  %46 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 2
  %47 = load i32, i32* %46, align 4
  call void @_ZN14VmaAllocator_T9GetBudgetEP9VmaBudgetjj(%struct.VmaAllocator_T* %0, %struct.VmaBudget* nonnull %45, i32 0, i32 %47)
  %48 = bitcast %struct.VmaStats* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 3920, i8* nonnull %48) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %48, i8 -86, i64 3920, i1 false)
  call void @_ZN14VmaAllocator_T14CalculateStatsEP8VmaStats(%struct.VmaAllocator_T* %0, %struct.VmaStats* nonnull %9)
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %49 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %50 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %49, i64 0, i32 0
  %51 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %49, i64 0, i32 0, i32 2
  %52 = load i64, i64* %51, align 8
  %53 = add i64 %52, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %50, i64 %53, i1 zeroext false) #15
  %54 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %49, i64 0, i32 0, i32 1
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds i8, i8* %55, i64 %52
  store i8 34, i8* %56, align 1
  %57 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %7, i64 0, i32 2
  store i8 1, i8* %57, align 8
  call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* nonnull %7, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.45, i64 0, i64 0)) #15
  %58 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %59 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %58, i64 0, i32 0
  %60 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %58, i64 0, i32 0, i32 2
  %61 = load i64, i64* %60, align 8
  %62 = add i64 %61, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %59, i64 %62, i1 zeroext false) #15
  %63 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %58, i64 0, i32 0, i32 1
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 %61
  store i8 34, i8* %65, align 1
  store i8 0, i8* %57, align 8
  %66 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %9, i64 0, i32 2
  call fastcc void @_ZL16VmaPrintStatInfoR13VmaJsonWriterRK11VmaStatInfo(%class.VmaJsonWriter* nonnull dereferenceable(48) %7, %struct.VmaStatInfo* dereferenceable(80) %66)
  %67 = load i32, i32* %46, align 4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %75, label %69

69:                                               ; preds = %3
  %70 = getelementptr inbounds [11 x i8], [11 x i8]* %5, i64 0, i64 0
  %71 = getelementptr inbounds [11 x i8], [11 x i8]* %5, i64 0, i64 10
  %72 = getelementptr inbounds [21 x i8], [21 x i8]* %4, i64 0, i64 0
  %73 = getelementptr inbounds [21 x i8], [21 x i8]* %4, i64 0, i64 20
  %74 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 0
  br label %77

75:                                               ; preds = %443, %3
  %76 = icmp eq i32 %2, 1
  br i1 %76, label %733, label %734

77:                                               ; preds = %69, %443
  %78 = phi i64 [ 0, %69 ], [ %444, %443 ]
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %79 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %80 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %79, i64 0, i32 0
  %81 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %79, i64 0, i32 0, i32 2
  %82 = load i64, i64* %81, align 8
  %83 = add i64 %82, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %80, i64 %83, i1 zeroext false) #15
  %84 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %79, i64 0, i32 0, i32 1
  %85 = load i8*, i8** %84, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 %82
  store i8 34, i8* %86, align 1
  store i8 1, i8* %57, align 8
  call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* nonnull %7, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.46, i64 0, i64 0)) #15
  %87 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  call void @llvm.lifetime.start.p0i8(i64 11, i8* nonnull %70) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %70, i8 -86, i64 10, i1 false) #15
  store i8 0, i8* %71, align 1
  %88 = trunc i64 %78 to i32
  br label %89

89:                                               ; preds = %89, %77
  %90 = phi i32 [ %88, %77 ], [ %96, %89 ]
  %91 = phi i8* [ %71, %77 ], [ %95, %89 ]
  %92 = urem i32 %90, 10
  %93 = trunc i32 %92 to i8
  %94 = or i8 %93, 48
  %95 = getelementptr inbounds i8, i8* %91, i64 -1
  store i8 %94, i8* %95, align 1
  %96 = udiv i32 %90, 10
  %97 = icmp ugt i32 %90, 9
  br i1 %97, label %89, label %98

98:                                               ; preds = %89
  %99 = call i64 @strlen(i8* %95) #16
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %109, label %101

101:                                              ; preds = %98
  %102 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %87, i64 0, i32 0
  %103 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %87, i64 0, i32 0, i32 2
  %104 = load i64, i64* %103, align 8
  %105 = add i64 %104, %99
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %102, i64 %105, i1 zeroext false) #15
  %106 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %87, i64 0, i32 0, i32 1
  %107 = load i8*, i8** %106, align 8
  %108 = getelementptr inbounds i8, i8* %107, i64 %104
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %108, i8* align 1 %95, i64 %99, i1 false) #15
  br label %109

109:                                              ; preds = %98, %101
  call void @llvm.lifetime.end.p0i8(i64 11, i8* nonnull %70) #15
  %110 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %111 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %110, i64 0, i32 0
  %112 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %110, i64 0, i32 0, i32 2
  %113 = load i64, i64* %112, align 8
  %114 = add i64 %113, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %111, i64 %114, i1 zeroext false) #15
  %115 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %110, i64 0, i32 0, i32 1
  %116 = load i8*, i8** %115, align 8
  %117 = getelementptr inbounds i8, i8* %116, i64 %113
  store i8 34, i8* %117, align 1
  store i8 0, i8* %57, align 8
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %118 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %119 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %118, i64 0, i32 0
  %120 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %118, i64 0, i32 0, i32 2
  %121 = load i64, i64* %120, align 8
  %122 = add i64 %121, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %119, i64 %122, i1 zeroext false) #15
  %123 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %118, i64 0, i32 0, i32 1
  %124 = load i8*, i8** %123, align 8
  %125 = getelementptr inbounds i8, i8* %124, i64 %121
  store i8 123, i8* %125, align 1
  %126 = load i64, i64* %36, align 8
  %127 = add i64 %126, 1
  call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %24, i64 %127, i1 zeroext false) #15
  %128 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %26, align 8
  %129 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %128, i64 %126
  %130 = bitcast %"struct.VmaJsonWriter::StackItem"* %129 to i8*
  %131 = getelementptr inbounds i8, i8* %130, i64 9
  %132 = bitcast %"struct.VmaJsonWriter::StackItem"* %129 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %132, i8 0, i64 9, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %131, i8* nonnull align 1 getelementptr inbounds ({ i32, i32, i8, [3 x i8] }, { i32, i32, i8, [3 x i8] }* @__const._ZN13VmaJsonWriter10BeginArrayEb.item, i64 0, i32 3, i64 0), i64 3, i1 false) #15
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %133 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %134 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %133, i64 0, i32 0
  %135 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %133, i64 0, i32 0, i32 2
  %136 = load i64, i64* %135, align 8
  %137 = add i64 %136, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %134, i64 %137, i1 zeroext false) #15
  %138 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %133, i64 0, i32 0, i32 1
  %139 = load i8*, i8** %138, align 8
  %140 = getelementptr inbounds i8, i8* %139, i64 %136
  store i8 34, i8* %140, align 1
  store i8 1, i8* %57, align 8
  call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* nonnull %7, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i64 0, i64 0)) #15
  %141 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %142 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %141, i64 0, i32 0
  %143 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %141, i64 0, i32 0, i32 2
  %144 = load i64, i64* %143, align 8
  %145 = add i64 %144, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %142, i64 %145, i1 zeroext false) #15
  %146 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %141, i64 0, i32 0, i32 1
  %147 = load i8*, i8** %146, align 8
  %148 = getelementptr inbounds i8, i8* %147, i64 %144
  store i8 34, i8* %148, align 1
  store i8 0, i8* %57, align 8
  %149 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 3, i64 %78, i32 0
  %150 = load i64, i64* %149, align 8
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %151 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %72) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %72, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %73, align 4
  br label %152

152:                                              ; preds = %152, %109
  %153 = phi i64 [ %150, %109 ], [ %159, %152 ]
  %154 = phi i8* [ %73, %109 ], [ %158, %152 ]
  %155 = urem i64 %153, 10
  %156 = trunc i64 %155 to i8
  %157 = or i8 %156, 48
  %158 = getelementptr inbounds i8, i8* %154, i64 -1
  store i8 %157, i8* %158, align 1
  %159 = udiv i64 %153, 10
  %160 = icmp ugt i64 %153, 9
  br i1 %160, label %152, label %161

161:                                              ; preds = %152
  %162 = call i64 @strlen(i8* %158) #16
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %172, label %164

164:                                              ; preds = %161
  %165 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %151, i64 0, i32 0
  %166 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %151, i64 0, i32 0, i32 2
  %167 = load i64, i64* %166, align 8
  %168 = add i64 %167, %162
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %165, i64 %168, i1 zeroext false) #15
  %169 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %151, i64 0, i32 0, i32 1
  %170 = load i8*, i8** %169, align 8
  %171 = getelementptr inbounds i8, i8* %170, i64 %167
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %171, i8* align 1 %158, i64 %162, i1 false) #15
  br label %172

172:                                              ; preds = %161, %164
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %72) #15
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %173 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %174 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %173, i64 0, i32 0
  %175 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %173, i64 0, i32 0, i32 2
  %176 = load i64, i64* %175, align 8
  %177 = add i64 %176, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %174, i64 %177, i1 zeroext false) #15
  %178 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %173, i64 0, i32 0, i32 1
  %179 = load i8*, i8** %178, align 8
  %180 = getelementptr inbounds i8, i8* %179, i64 %176
  store i8 34, i8* %180, align 1
  store i8 1, i8* %57, align 8
  call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* nonnull %7, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.47, i64 0, i64 0)) #15
  %181 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %182 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %181, i64 0, i32 0
  %183 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %181, i64 0, i32 0, i32 2
  %184 = load i64, i64* %183, align 8
  %185 = add i64 %184, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %182, i64 %185, i1 zeroext false) #15
  %186 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %181, i64 0, i32 0, i32 1
  %187 = load i8*, i8** %186, align 8
  %188 = getelementptr inbounds i8, i8* %187, i64 %184
  store i8 34, i8* %188, align 1
  store i8 0, i8* %57, align 8
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %189 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %190 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %189, i64 0, i32 0
  %191 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %189, i64 0, i32 0, i32 2
  %192 = load i64, i64* %191, align 8
  %193 = add i64 %192, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %190, i64 %193, i1 zeroext false) #15
  %194 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %189, i64 0, i32 0, i32 1
  %195 = load i8*, i8** %194, align 8
  %196 = getelementptr inbounds i8, i8* %195, i64 %192
  store i8 91, i8* %196, align 1
  %197 = load i64, i64* %36, align 8
  %198 = add i64 %197, 1
  call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %24, i64 %198, i1 zeroext false) #15
  %199 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %26, align 8
  %200 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %199, i64 %197
  %201 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %200, i64 0, i32 0
  store i32 1, i32* %201, align 4
  %202 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %199, i64 %197, i32 1
  store i32 0, i32* %202, align 4
  %203 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %199, i64 %197, i32 2
  store i8 1, i8* %203, align 4
  %204 = bitcast %"struct.VmaJsonWriter::StackItem"* %200 to i8*
  %205 = getelementptr inbounds i8, i8* %204, i64 9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %205, i8* nonnull align 1 getelementptr inbounds ({ i32, i32, i8, [3 x i8] }, { i32, i32, i8, [3 x i8] }* @__const._ZN13VmaJsonWriter10BeginArrayEb.item, i64 0, i32 3, i64 0), i64 3, i1 false) #15
  %206 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 3, i64 %78, i32 1
  %207 = load i32, i32* %206, align 8
  %208 = and i32 %207, 1
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %227, label %210

210:                                              ; preds = %172
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %211 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %212 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %211, i64 0, i32 0
  %213 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %211, i64 0, i32 0, i32 2
  %214 = load i64, i64* %213, align 8
  %215 = add i64 %214, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %212, i64 %215, i1 zeroext false) #15
  %216 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %211, i64 0, i32 0, i32 1
  %217 = load i8*, i8** %216, align 8
  %218 = getelementptr inbounds i8, i8* %217, i64 %214
  store i8 34, i8* %218, align 1
  store i8 1, i8* %57, align 8
  call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* nonnull %7, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i64 0, i64 0)) #15
  %219 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %220 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %219, i64 0, i32 0
  %221 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %219, i64 0, i32 0, i32 2
  %222 = load i64, i64* %221, align 8
  %223 = add i64 %222, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %220, i64 %223, i1 zeroext false) #15
  %224 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %219, i64 0, i32 0, i32 1
  %225 = load i8*, i8** %224, align 8
  %226 = getelementptr inbounds i8, i8* %225, i64 %222
  store i8 34, i8* %226, align 1
  store i8 0, i8* %57, align 8
  br label %227

227:                                              ; preds = %172, %210
  call void @_ZN13VmaJsonWriter8EndArrayEv(%class.VmaJsonWriter* nonnull %7)
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %228 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %229 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %228, i64 0, i32 0
  %230 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %228, i64 0, i32 0, i32 2
  %231 = load i64, i64* %230, align 8
  %232 = add i64 %231, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %229, i64 %232, i1 zeroext false) #15
  %233 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %228, i64 0, i32 0, i32 1
  %234 = load i8*, i8** %233, align 8
  %235 = getelementptr inbounds i8, i8* %234, i64 %231
  store i8 34, i8* %235, align 1
  store i8 1, i8* %57, align 8
  call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* nonnull %7, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.49, i64 0, i64 0)) #15
  %236 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %237 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %236, i64 0, i32 0
  %238 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %236, i64 0, i32 0, i32 2
  %239 = load i64, i64* %238, align 8
  %240 = add i64 %239, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %237, i64 %240, i1 zeroext false) #15
  %241 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %236, i64 0, i32 0, i32 1
  %242 = load i8*, i8** %241, align 8
  %243 = getelementptr inbounds i8, i8* %242, i64 %239
  store i8 34, i8* %243, align 1
  store i8 0, i8* %57, align 8
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %244 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %245 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %244, i64 0, i32 0
  %246 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %244, i64 0, i32 0, i32 2
  %247 = load i64, i64* %246, align 8
  %248 = add i64 %247, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %245, i64 %248, i1 zeroext false) #15
  %249 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %244, i64 0, i32 0, i32 1
  %250 = load i8*, i8** %249, align 8
  %251 = getelementptr inbounds i8, i8* %250, i64 %247
  store i8 123, i8* %251, align 1
  %252 = load i64, i64* %36, align 8
  %253 = add i64 %252, 1
  call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %24, i64 %253, i1 zeroext false) #15
  %254 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %26, align 8
  %255 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %254, i64 %252
  %256 = bitcast %"struct.VmaJsonWriter::StackItem"* %255 to i8*
  %257 = getelementptr inbounds i8, i8* %256, i64 9
  %258 = bitcast %"struct.VmaJsonWriter::StackItem"* %255 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %258, i8 0, i64 9, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %257, i8* nonnull align 1 getelementptr inbounds ({ i32, i32, i8, [3 x i8] }, { i32, i32, i8, [3 x i8] }* @__const._ZN13VmaJsonWriter10BeginArrayEb.item, i64 0, i32 3, i64 0), i64 3, i1 false) #15
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %259 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %260 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %259, i64 0, i32 0
  %261 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %259, i64 0, i32 0, i32 2
  %262 = load i64, i64* %261, align 8
  %263 = add i64 %262, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %260, i64 %263, i1 zeroext false) #15
  %264 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %259, i64 0, i32 0, i32 1
  %265 = load i8*, i8** %264, align 8
  %266 = getelementptr inbounds i8, i8* %265, i64 %262
  store i8 34, i8* %266, align 1
  store i8 1, i8* %57, align 8
  call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* nonnull %7, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.50, i64 0, i64 0)) #15
  %267 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %268 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %267, i64 0, i32 0
  %269 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %267, i64 0, i32 0, i32 2
  %270 = load i64, i64* %269, align 8
  %271 = add i64 %270, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %268, i64 %271, i1 zeroext false) #15
  %272 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %267, i64 0, i32 0, i32 1
  %273 = load i8*, i8** %272, align 8
  %274 = getelementptr inbounds i8, i8* %273, i64 %270
  store i8 34, i8* %274, align 1
  store i8 0, i8* %57, align 8
  %275 = getelementptr inbounds [16 x %struct.VmaBudget], [16 x %struct.VmaBudget]* %8, i64 0, i64 %78, i32 0
  %276 = load i64, i64* %275, align 16
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %277 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %72) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %72, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %73, align 4
  br label %278

278:                                              ; preds = %278, %227
  %279 = phi i64 [ %276, %227 ], [ %285, %278 ]
  %280 = phi i8* [ %73, %227 ], [ %284, %278 ]
  %281 = urem i64 %279, 10
  %282 = trunc i64 %281 to i8
  %283 = or i8 %282, 48
  %284 = getelementptr inbounds i8, i8* %280, i64 -1
  store i8 %283, i8* %284, align 1
  %285 = udiv i64 %279, 10
  %286 = icmp ugt i64 %279, 9
  br i1 %286, label %278, label %287

287:                                              ; preds = %278
  %288 = call i64 @strlen(i8* %284) #16
  %289 = icmp eq i64 %288, 0
  br i1 %289, label %298, label %290

290:                                              ; preds = %287
  %291 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %277, i64 0, i32 0
  %292 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %277, i64 0, i32 0, i32 2
  %293 = load i64, i64* %292, align 8
  %294 = add i64 %293, %288
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %291, i64 %294, i1 zeroext false) #15
  %295 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %277, i64 0, i32 0, i32 1
  %296 = load i8*, i8** %295, align 8
  %297 = getelementptr inbounds i8, i8* %296, i64 %293
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %297, i8* align 1 %284, i64 %288, i1 false) #15
  br label %298

298:                                              ; preds = %287, %290
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %72) #15
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %299 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %300 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %299, i64 0, i32 0
  %301 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %299, i64 0, i32 0, i32 2
  %302 = load i64, i64* %301, align 8
  %303 = add i64 %302, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %300, i64 %303, i1 zeroext false) #15
  %304 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %299, i64 0, i32 0, i32 1
  %305 = load i8*, i8** %304, align 8
  %306 = getelementptr inbounds i8, i8* %305, i64 %302
  store i8 34, i8* %306, align 1
  store i8 1, i8* %57, align 8
  call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* nonnull %7, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.51, i64 0, i64 0)) #15
  %307 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %308 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %307, i64 0, i32 0
  %309 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %307, i64 0, i32 0, i32 2
  %310 = load i64, i64* %309, align 8
  %311 = add i64 %310, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %308, i64 %311, i1 zeroext false) #15
  %312 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %307, i64 0, i32 0, i32 1
  %313 = load i8*, i8** %312, align 8
  %314 = getelementptr inbounds i8, i8* %313, i64 %310
  store i8 34, i8* %314, align 1
  store i8 0, i8* %57, align 8
  %315 = getelementptr inbounds [16 x %struct.VmaBudget], [16 x %struct.VmaBudget]* %8, i64 0, i64 %78, i32 1
  %316 = load i64, i64* %315, align 8
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %317 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %72) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %72, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %73, align 4
  br label %318

318:                                              ; preds = %318, %298
  %319 = phi i64 [ %316, %298 ], [ %325, %318 ]
  %320 = phi i8* [ %73, %298 ], [ %324, %318 ]
  %321 = urem i64 %319, 10
  %322 = trunc i64 %321 to i8
  %323 = or i8 %322, 48
  %324 = getelementptr inbounds i8, i8* %320, i64 -1
  store i8 %323, i8* %324, align 1
  %325 = udiv i64 %319, 10
  %326 = icmp ugt i64 %319, 9
  br i1 %326, label %318, label %327

327:                                              ; preds = %318
  %328 = call i64 @strlen(i8* %324) #16
  %329 = icmp eq i64 %328, 0
  br i1 %329, label %338, label %330

330:                                              ; preds = %327
  %331 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %317, i64 0, i32 0
  %332 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %317, i64 0, i32 0, i32 2
  %333 = load i64, i64* %332, align 8
  %334 = add i64 %333, %328
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %331, i64 %334, i1 zeroext false) #15
  %335 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %317, i64 0, i32 0, i32 1
  %336 = load i8*, i8** %335, align 8
  %337 = getelementptr inbounds i8, i8* %336, i64 %333
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %337, i8* align 1 %324, i64 %328, i1 false) #15
  br label %338

338:                                              ; preds = %327, %330
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %72) #15
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %339 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %340 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %339, i64 0, i32 0
  %341 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %339, i64 0, i32 0, i32 2
  %342 = load i64, i64* %341, align 8
  %343 = add i64 %342, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %340, i64 %343, i1 zeroext false) #15
  %344 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %339, i64 0, i32 0, i32 1
  %345 = load i8*, i8** %344, align 8
  %346 = getelementptr inbounds i8, i8* %345, i64 %342
  store i8 34, i8* %346, align 1
  store i8 1, i8* %57, align 8
  call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* nonnull %7, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18, i64 0, i64 0)) #15
  %347 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %348 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %347, i64 0, i32 0
  %349 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %347, i64 0, i32 0, i32 2
  %350 = load i64, i64* %349, align 8
  %351 = add i64 %350, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %348, i64 %351, i1 zeroext false) #15
  %352 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %347, i64 0, i32 0, i32 1
  %353 = load i8*, i8** %352, align 8
  %354 = getelementptr inbounds i8, i8* %353, i64 %350
  store i8 34, i8* %354, align 1
  store i8 0, i8* %57, align 8
  %355 = getelementptr inbounds [16 x %struct.VmaBudget], [16 x %struct.VmaBudget]* %8, i64 0, i64 %78, i32 2
  %356 = load i64, i64* %355, align 16
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %357 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %72) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %72, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %73, align 4
  br label %358

358:                                              ; preds = %358, %338
  %359 = phi i64 [ %356, %338 ], [ %365, %358 ]
  %360 = phi i8* [ %73, %338 ], [ %364, %358 ]
  %361 = urem i64 %359, 10
  %362 = trunc i64 %361 to i8
  %363 = or i8 %362, 48
  %364 = getelementptr inbounds i8, i8* %360, i64 -1
  store i8 %363, i8* %364, align 1
  %365 = udiv i64 %359, 10
  %366 = icmp ugt i64 %359, 9
  br i1 %366, label %358, label %367

367:                                              ; preds = %358
  %368 = call i64 @strlen(i8* %364) #16
  %369 = icmp eq i64 %368, 0
  br i1 %369, label %378, label %370

370:                                              ; preds = %367
  %371 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %357, i64 0, i32 0
  %372 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %357, i64 0, i32 0, i32 2
  %373 = load i64, i64* %372, align 8
  %374 = add i64 %373, %368
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %371, i64 %374, i1 zeroext false) #15
  %375 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %357, i64 0, i32 0, i32 1
  %376 = load i8*, i8** %375, align 8
  %377 = getelementptr inbounds i8, i8* %376, i64 %373
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %377, i8* align 1 %364, i64 %368, i1 false) #15
  br label %378

378:                                              ; preds = %367, %370
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %72) #15
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %379 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %380 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %379, i64 0, i32 0
  %381 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %379, i64 0, i32 0, i32 2
  %382 = load i64, i64* %381, align 8
  %383 = add i64 %382, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %380, i64 %383, i1 zeroext false) #15
  %384 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %379, i64 0, i32 0, i32 1
  %385 = load i8*, i8** %384, align 8
  %386 = getelementptr inbounds i8, i8* %385, i64 %382
  store i8 34, i8* %386, align 1
  store i8 1, i8* %57, align 8
  call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* nonnull %7, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.49, i64 0, i64 0)) #15
  %387 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %388 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %387, i64 0, i32 0
  %389 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %387, i64 0, i32 0, i32 2
  %390 = load i64, i64* %389, align 8
  %391 = add i64 %390, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %388, i64 %391, i1 zeroext false) #15
  %392 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %387, i64 0, i32 0, i32 1
  %393 = load i8*, i8** %392, align 8
  %394 = getelementptr inbounds i8, i8* %393, i64 %390
  store i8 34, i8* %394, align 1
  store i8 0, i8* %57, align 8
  %395 = getelementptr inbounds [16 x %struct.VmaBudget], [16 x %struct.VmaBudget]* %8, i64 0, i64 %78, i32 3
  %396 = load i64, i64* %395, align 8
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %397 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %72) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %72, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %73, align 4
  br label %398

398:                                              ; preds = %398, %378
  %399 = phi i64 [ %396, %378 ], [ %405, %398 ]
  %400 = phi i8* [ %73, %378 ], [ %404, %398 ]
  %401 = urem i64 %399, 10
  %402 = trunc i64 %401 to i8
  %403 = or i8 %402, 48
  %404 = getelementptr inbounds i8, i8* %400, i64 -1
  store i8 %403, i8* %404, align 1
  %405 = udiv i64 %399, 10
  %406 = icmp ugt i64 %399, 9
  br i1 %406, label %398, label %407

407:                                              ; preds = %398
  %408 = call i64 @strlen(i8* %404) #16
  %409 = icmp eq i64 %408, 0
  br i1 %409, label %418, label %410

410:                                              ; preds = %407
  %411 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %397, i64 0, i32 0
  %412 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %397, i64 0, i32 0, i32 2
  %413 = load i64, i64* %412, align 8
  %414 = add i64 %413, %408
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %411, i64 %414, i1 zeroext false) #15
  %415 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %397, i64 0, i32 0, i32 1
  %416 = load i8*, i8** %415, align 8
  %417 = getelementptr inbounds i8, i8* %416, i64 %413
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %417, i8* align 1 %404, i64 %408, i1 false) #15
  br label %418

418:                                              ; preds = %407, %410
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %72) #15
  call void @_ZN13VmaJsonWriter9EndObjectEv(%class.VmaJsonWriter* nonnull %7)
  %419 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %9, i64 0, i32 1, i64 %78
  %420 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %419, i64 0, i32 0
  %421 = load i32, i32* %420, align 8
  %422 = icmp eq i32 %421, 0
  br i1 %422, label %440, label %423

423:                                              ; preds = %418
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %424 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %425 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %424, i64 0, i32 0
  %426 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %424, i64 0, i32 0, i32 2
  %427 = load i64, i64* %426, align 8
  %428 = add i64 %427, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %425, i64 %428, i1 zeroext false) #15
  %429 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %424, i64 0, i32 0, i32 1
  %430 = load i8*, i8** %429, align 8
  %431 = getelementptr inbounds i8, i8* %430, i64 %427
  store i8 34, i8* %431, align 1
  store i8 1, i8* %57, align 8
  call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* nonnull %7, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.52, i64 0, i64 0)) #15
  %432 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %433 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %432, i64 0, i32 0
  %434 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %432, i64 0, i32 0, i32 2
  %435 = load i64, i64* %434, align 8
  %436 = add i64 %435, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %433, i64 %436, i1 zeroext false) #15
  %437 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %432, i64 0, i32 0, i32 1
  %438 = load i8*, i8** %437, align 8
  %439 = getelementptr inbounds i8, i8* %438, i64 %435
  store i8 34, i8* %439, align 1
  store i8 0, i8* %57, align 8
  call fastcc void @_ZL16VmaPrintStatInfoR13VmaJsonWriterRK11VmaStatInfo(%class.VmaJsonWriter* nonnull dereferenceable(48) %7, %struct.VmaStatInfo* dereferenceable(80) %419)
  br label %440

440:                                              ; preds = %418, %423
  %441 = load i32, i32* %74, align 8
  %442 = icmp eq i32 %441, 0
  br i1 %442, label %443, label %448

443:                                              ; preds = %728, %440
  call void @_ZN13VmaJsonWriter9EndObjectEv(%class.VmaJsonWriter* nonnull %7)
  %444 = add nuw nsw i64 %78, 1
  %445 = load i32, i32* %46, align 4
  %446 = zext i32 %445 to i64
  %447 = icmp ult i64 %444, %446
  br i1 %447, label %77, label %75

448:                                              ; preds = %440, %728
  %449 = phi i32 [ %729, %728 ], [ %441, %440 ]
  %450 = phi i64 [ %730, %728 ], [ 0, %440 ]
  %451 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %450, i32 1
  %452 = load i32, i32* %451, align 4
  %453 = zext i32 %452 to i64
  %454 = icmp eq i64 %78, %453
  br i1 %454, label %455, label %728

455:                                              ; preds = %448
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %456 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %457 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %456, i64 0, i32 0
  %458 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %456, i64 0, i32 0, i32 2
  %459 = load i64, i64* %458, align 8
  %460 = add i64 %459, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %457, i64 %460, i1 zeroext false) #15
  %461 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %456, i64 0, i32 0, i32 1
  %462 = load i8*, i8** %461, align 8
  %463 = getelementptr inbounds i8, i8* %462, i64 %459
  store i8 34, i8* %463, align 1
  store i8 1, i8* %57, align 8
  call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* nonnull %7, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.42, i64 0, i64 0)) #15
  %464 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  call void @llvm.lifetime.start.p0i8(i64 11, i8* nonnull %70) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %70, i8 -86, i64 10, i1 false) #15
  store i8 0, i8* %71, align 1
  %465 = trunc i64 %450 to i32
  br label %466

466:                                              ; preds = %466, %455
  %467 = phi i32 [ %465, %455 ], [ %473, %466 ]
  %468 = phi i8* [ %71, %455 ], [ %472, %466 ]
  %469 = urem i32 %467, 10
  %470 = trunc i32 %469 to i8
  %471 = or i8 %470, 48
  %472 = getelementptr inbounds i8, i8* %468, i64 -1
  store i8 %471, i8* %472, align 1
  %473 = udiv i32 %467, 10
  %474 = icmp ugt i32 %467, 9
  br i1 %474, label %466, label %475

475:                                              ; preds = %466
  %476 = call i64 @strlen(i8* %472) #16
  %477 = icmp eq i64 %476, 0
  br i1 %477, label %486, label %478

478:                                              ; preds = %475
  %479 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %464, i64 0, i32 0
  %480 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %464, i64 0, i32 0, i32 2
  %481 = load i64, i64* %480, align 8
  %482 = add i64 %481, %476
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %479, i64 %482, i1 zeroext false) #15
  %483 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %464, i64 0, i32 0, i32 1
  %484 = load i8*, i8** %483, align 8
  %485 = getelementptr inbounds i8, i8* %484, i64 %481
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %485, i8* align 1 %472, i64 %476, i1 false) #15
  br label %486

486:                                              ; preds = %475, %478
  call void @llvm.lifetime.end.p0i8(i64 11, i8* nonnull %70) #15
  %487 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %488 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %487, i64 0, i32 0
  %489 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %487, i64 0, i32 0, i32 2
  %490 = load i64, i64* %489, align 8
  %491 = add i64 %490, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %488, i64 %491, i1 zeroext false) #15
  %492 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %487, i64 0, i32 0, i32 1
  %493 = load i8*, i8** %492, align 8
  %494 = getelementptr inbounds i8, i8* %493, i64 %490
  store i8 34, i8* %494, align 1
  store i8 0, i8* %57, align 8
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %495 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %496 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %495, i64 0, i32 0
  %497 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %495, i64 0, i32 0, i32 2
  %498 = load i64, i64* %497, align 8
  %499 = add i64 %498, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %496, i64 %499, i1 zeroext false) #15
  %500 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %495, i64 0, i32 0, i32 1
  %501 = load i8*, i8** %500, align 8
  %502 = getelementptr inbounds i8, i8* %501, i64 %498
  store i8 123, i8* %502, align 1
  %503 = load i64, i64* %36, align 8
  %504 = add i64 %503, 1
  call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %24, i64 %504, i1 zeroext false) #15
  %505 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %26, align 8
  %506 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %505, i64 %503
  %507 = bitcast %"struct.VmaJsonWriter::StackItem"* %506 to i8*
  %508 = getelementptr inbounds i8, i8* %507, i64 9
  %509 = bitcast %"struct.VmaJsonWriter::StackItem"* %506 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %509, i8 0, i64 9, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %508, i8* nonnull align 1 getelementptr inbounds ({ i32, i32, i8, [3 x i8] }, { i32, i32, i8, [3 x i8] }* @__const._ZN13VmaJsonWriter10BeginArrayEb.item, i64 0, i32 3, i64 0), i64 3, i1 false) #15
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %510 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %511 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %510, i64 0, i32 0
  %512 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %510, i64 0, i32 0, i32 2
  %513 = load i64, i64* %512, align 8
  %514 = add i64 %513, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %511, i64 %514, i1 zeroext false) #15
  %515 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %510, i64 0, i32 0, i32 1
  %516 = load i8*, i8** %515, align 8
  %517 = getelementptr inbounds i8, i8* %516, i64 %513
  store i8 34, i8* %517, align 1
  store i8 1, i8* %57, align 8
  call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* nonnull %7, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.47, i64 0, i64 0)) #15
  %518 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %519 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %518, i64 0, i32 0
  %520 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %518, i64 0, i32 0, i32 2
  %521 = load i64, i64* %520, align 8
  %522 = add i64 %521, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %519, i64 %522, i1 zeroext false) #15
  %523 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %518, i64 0, i32 0, i32 1
  %524 = load i8*, i8** %523, align 8
  %525 = getelementptr inbounds i8, i8* %524, i64 %521
  store i8 34, i8* %525, align 1
  store i8 0, i8* %57, align 8
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %526 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %527 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %526, i64 0, i32 0
  %528 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %526, i64 0, i32 0, i32 2
  %529 = load i64, i64* %528, align 8
  %530 = add i64 %529, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %527, i64 %530, i1 zeroext false) #15
  %531 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %526, i64 0, i32 0, i32 1
  %532 = load i8*, i8** %531, align 8
  %533 = getelementptr inbounds i8, i8* %532, i64 %529
  store i8 91, i8* %533, align 1
  %534 = load i64, i64* %36, align 8
  %535 = add i64 %534, 1
  call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %24, i64 %535, i1 zeroext false) #15
  %536 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %26, align 8
  %537 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %536, i64 %534
  %538 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %537, i64 0, i32 0
  store i32 1, i32* %538, align 4
  %539 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %536, i64 %534, i32 1
  store i32 0, i32* %539, align 4
  %540 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %536, i64 %534, i32 2
  store i8 1, i8* %540, align 4
  %541 = bitcast %"struct.VmaJsonWriter::StackItem"* %537 to i8*
  %542 = getelementptr inbounds i8, i8* %541, i64 9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %542, i8* nonnull align 1 getelementptr inbounds ({ i32, i32, i8, [3 x i8] }, { i32, i32, i8, [3 x i8] }* @__const._ZN13VmaJsonWriter10BeginArrayEb.item, i64 0, i32 3, i64 0), i64 3, i1 false) #15
  %543 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 19, i32 1, i64 %450, i32 0
  %544 = load i32, i32* %543, align 4
  %545 = and i32 %544, 1
  %546 = icmp eq i32 %545, 0
  br i1 %546, label %564, label %547

547:                                              ; preds = %486
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %548 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %549 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %548, i64 0, i32 0
  %550 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %548, i64 0, i32 0, i32 2
  %551 = load i64, i64* %550, align 8
  %552 = add i64 %551, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %549, i64 %552, i1 zeroext false) #15
  %553 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %548, i64 0, i32 0, i32 1
  %554 = load i8*, i8** %553, align 8
  %555 = getelementptr inbounds i8, i8* %554, i64 %551
  store i8 34, i8* %555, align 1
  store i8 1, i8* %57, align 8
  call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* nonnull %7, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i64 0, i64 0)) #15
  %556 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %557 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %556, i64 0, i32 0
  %558 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %556, i64 0, i32 0, i32 2
  %559 = load i64, i64* %558, align 8
  %560 = add i64 %559, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %557, i64 %560, i1 zeroext false) #15
  %561 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %556, i64 0, i32 0, i32 1
  %562 = load i8*, i8** %561, align 8
  %563 = getelementptr inbounds i8, i8* %562, i64 %559
  store i8 34, i8* %563, align 1
  store i8 0, i8* %57, align 8
  br label %564

564:                                              ; preds = %486, %547
  %565 = and i32 %544, 2
  %566 = icmp eq i32 %565, 0
  br i1 %566, label %584, label %567

567:                                              ; preds = %564
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %568 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %569 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %568, i64 0, i32 0
  %570 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %568, i64 0, i32 0, i32 2
  %571 = load i64, i64* %570, align 8
  %572 = add i64 %571, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %569, i64 %572, i1 zeroext false) #15
  %573 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %568, i64 0, i32 0, i32 1
  %574 = load i8*, i8** %573, align 8
  %575 = getelementptr inbounds i8, i8* %574, i64 %571
  store i8 34, i8* %575, align 1
  store i8 1, i8* %57, align 8
  call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* nonnull %7, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i64 0, i64 0)) #15
  %576 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %577 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %576, i64 0, i32 0
  %578 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %576, i64 0, i32 0, i32 2
  %579 = load i64, i64* %578, align 8
  %580 = add i64 %579, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %577, i64 %580, i1 zeroext false) #15
  %581 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %576, i64 0, i32 0, i32 1
  %582 = load i8*, i8** %581, align 8
  %583 = getelementptr inbounds i8, i8* %582, i64 %579
  store i8 34, i8* %583, align 1
  store i8 0, i8* %57, align 8
  br label %584

584:                                              ; preds = %564, %567
  %585 = and i32 %544, 4
  %586 = icmp eq i32 %585, 0
  br i1 %586, label %604, label %587

587:                                              ; preds = %584
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %588 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %589 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %588, i64 0, i32 0
  %590 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %588, i64 0, i32 0, i32 2
  %591 = load i64, i64* %590, align 8
  %592 = add i64 %591, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %589, i64 %592, i1 zeroext false) #15
  %593 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %588, i64 0, i32 0, i32 1
  %594 = load i8*, i8** %593, align 8
  %595 = getelementptr inbounds i8, i8* %594, i64 %591
  store i8 34, i8* %595, align 1
  store i8 1, i8* %57, align 8
  call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* nonnull %7, i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.54, i64 0, i64 0)) #15
  %596 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %597 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %596, i64 0, i32 0
  %598 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %596, i64 0, i32 0, i32 2
  %599 = load i64, i64* %598, align 8
  %600 = add i64 %599, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %597, i64 %600, i1 zeroext false) #15
  %601 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %596, i64 0, i32 0, i32 1
  %602 = load i8*, i8** %601, align 8
  %603 = getelementptr inbounds i8, i8* %602, i64 %599
  store i8 34, i8* %603, align 1
  store i8 0, i8* %57, align 8
  br label %604

604:                                              ; preds = %584, %587
  %605 = and i32 %544, 8
  %606 = icmp eq i32 %605, 0
  br i1 %606, label %624, label %607

607:                                              ; preds = %604
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %608 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %609 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %608, i64 0, i32 0
  %610 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %608, i64 0, i32 0, i32 2
  %611 = load i64, i64* %610, align 8
  %612 = add i64 %611, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %609, i64 %612, i1 zeroext false) #15
  %613 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %608, i64 0, i32 0, i32 1
  %614 = load i8*, i8** %613, align 8
  %615 = getelementptr inbounds i8, i8* %614, i64 %611
  store i8 34, i8* %615, align 1
  store i8 1, i8* %57, align 8
  call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* nonnull %7, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.55, i64 0, i64 0)) #15
  %616 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %617 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %616, i64 0, i32 0
  %618 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %616, i64 0, i32 0, i32 2
  %619 = load i64, i64* %618, align 8
  %620 = add i64 %619, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %617, i64 %620, i1 zeroext false) #15
  %621 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %616, i64 0, i32 0, i32 1
  %622 = load i8*, i8** %621, align 8
  %623 = getelementptr inbounds i8, i8* %622, i64 %619
  store i8 34, i8* %623, align 1
  store i8 0, i8* %57, align 8
  br label %624

624:                                              ; preds = %604, %607
  %625 = and i32 %544, 16
  %626 = icmp eq i32 %625, 0
  br i1 %626, label %644, label %627

627:                                              ; preds = %624
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %628 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %629 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %628, i64 0, i32 0
  %630 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %628, i64 0, i32 0, i32 2
  %631 = load i64, i64* %630, align 8
  %632 = add i64 %631, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %629, i64 %632, i1 zeroext false) #15
  %633 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %628, i64 0, i32 0, i32 1
  %634 = load i8*, i8** %633, align 8
  %635 = getelementptr inbounds i8, i8* %634, i64 %631
  store i8 34, i8* %635, align 1
  store i8 1, i8* %57, align 8
  call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* nonnull %7, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.56, i64 0, i64 0)) #15
  %636 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %637 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %636, i64 0, i32 0
  %638 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %636, i64 0, i32 0, i32 2
  %639 = load i64, i64* %638, align 8
  %640 = add i64 %639, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %637, i64 %640, i1 zeroext false) #15
  %641 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %636, i64 0, i32 0, i32 1
  %642 = load i8*, i8** %641, align 8
  %643 = getelementptr inbounds i8, i8* %642, i64 %639
  store i8 34, i8* %643, align 1
  store i8 0, i8* %57, align 8
  br label %644

644:                                              ; preds = %624, %627
  %645 = and i32 %544, 32
  %646 = icmp eq i32 %645, 0
  br i1 %646, label %664, label %647

647:                                              ; preds = %644
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %648 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %649 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %648, i64 0, i32 0
  %650 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %648, i64 0, i32 0, i32 2
  %651 = load i64, i64* %650, align 8
  %652 = add i64 %651, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %649, i64 %652, i1 zeroext false) #15
  %653 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %648, i64 0, i32 0, i32 1
  %654 = load i8*, i8** %653, align 8
  %655 = getelementptr inbounds i8, i8* %654, i64 %651
  store i8 34, i8* %655, align 1
  store i8 1, i8* %57, align 8
  call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* nonnull %7, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.57, i64 0, i64 0)) #15
  %656 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %657 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %656, i64 0, i32 0
  %658 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %656, i64 0, i32 0, i32 2
  %659 = load i64, i64* %658, align 8
  %660 = add i64 %659, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %657, i64 %660, i1 zeroext false) #15
  %661 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %656, i64 0, i32 0, i32 1
  %662 = load i8*, i8** %661, align 8
  %663 = getelementptr inbounds i8, i8* %662, i64 %659
  store i8 34, i8* %663, align 1
  store i8 0, i8* %57, align 8
  br label %664

664:                                              ; preds = %644, %647
  %665 = and i32 %544, 64
  %666 = icmp eq i32 %665, 0
  br i1 %666, label %684, label %667

667:                                              ; preds = %664
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %668 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %669 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %668, i64 0, i32 0
  %670 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %668, i64 0, i32 0, i32 2
  %671 = load i64, i64* %670, align 8
  %672 = add i64 %671, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %669, i64 %672, i1 zeroext false) #15
  %673 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %668, i64 0, i32 0, i32 1
  %674 = load i8*, i8** %673, align 8
  %675 = getelementptr inbounds i8, i8* %674, i64 %671
  store i8 34, i8* %675, align 1
  store i8 1, i8* %57, align 8
  call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* nonnull %7, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.58, i64 0, i64 0)) #15
  %676 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %677 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %676, i64 0, i32 0
  %678 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %676, i64 0, i32 0, i32 2
  %679 = load i64, i64* %678, align 8
  %680 = add i64 %679, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %677, i64 %680, i1 zeroext false) #15
  %681 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %676, i64 0, i32 0, i32 1
  %682 = load i8*, i8** %681, align 8
  %683 = getelementptr inbounds i8, i8* %682, i64 %679
  store i8 34, i8* %683, align 1
  store i8 0, i8* %57, align 8
  br label %684

684:                                              ; preds = %664, %667
  %685 = trunc i32 %544 to i8
  %686 = icmp slt i8 %685, 0
  br i1 %686, label %687, label %704

687:                                              ; preds = %684
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %688 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %689 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %688, i64 0, i32 0
  %690 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %688, i64 0, i32 0, i32 2
  %691 = load i64, i64* %690, align 8
  %692 = add i64 %691, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %689, i64 %692, i1 zeroext false) #15
  %693 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %688, i64 0, i32 0, i32 1
  %694 = load i8*, i8** %693, align 8
  %695 = getelementptr inbounds i8, i8* %694, i64 %691
  store i8 34, i8* %695, align 1
  store i8 1, i8* %57, align 8
  call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* nonnull %7, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.59, i64 0, i64 0)) #15
  %696 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %697 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %696, i64 0, i32 0
  %698 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %696, i64 0, i32 0, i32 2
  %699 = load i64, i64* %698, align 8
  %700 = add i64 %699, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %697, i64 %700, i1 zeroext false) #15
  %701 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %696, i64 0, i32 0, i32 1
  %702 = load i8*, i8** %701, align 8
  %703 = getelementptr inbounds i8, i8* %702, i64 %699
  store i8 34, i8* %703, align 1
  store i8 0, i8* %57, align 8
  br label %704

704:                                              ; preds = %687, %684
  call void @_ZN13VmaJsonWriter8EndArrayEv(%class.VmaJsonWriter* nonnull %7)
  %705 = getelementptr inbounds %struct.VmaStats, %struct.VmaStats* %9, i64 0, i32 0, i64 %450
  %706 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %705, i64 0, i32 0
  %707 = load i32, i32* %706, align 8
  %708 = icmp eq i32 %707, 0
  br i1 %708, label %726, label %709

709:                                              ; preds = %704
  call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* nonnull %7, i1 zeroext undef) #15
  %710 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %711 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %710, i64 0, i32 0
  %712 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %710, i64 0, i32 0, i32 2
  %713 = load i64, i64* %712, align 8
  %714 = add i64 %713, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %711, i64 %714, i1 zeroext false) #15
  %715 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %710, i64 0, i32 0, i32 1
  %716 = load i8*, i8** %715, align 8
  %717 = getelementptr inbounds i8, i8* %716, i64 %713
  store i8 34, i8* %717, align 1
  store i8 1, i8* %57, align 8
  call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* nonnull %7, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.52, i64 0, i64 0)) #15
  %718 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %23, align 8
  %719 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %718, i64 0, i32 0
  %720 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %718, i64 0, i32 0, i32 2
  %721 = load i64, i64* %720, align 8
  %722 = add i64 %721, 1
  call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %719, i64 %722, i1 zeroext false) #15
  %723 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %718, i64 0, i32 0, i32 1
  %724 = load i8*, i8** %723, align 8
  %725 = getelementptr inbounds i8, i8* %724, i64 %721
  store i8 34, i8* %725, align 1
  store i8 0, i8* %57, align 8
  call fastcc void @_ZL16VmaPrintStatInfoR13VmaJsonWriterRK11VmaStatInfo(%class.VmaJsonWriter* nonnull dereferenceable(48) %7, %struct.VmaStatInfo* dereferenceable(80) %705)
  br label %726

726:                                              ; preds = %704, %709
  call void @_ZN13VmaJsonWriter9EndObjectEv(%class.VmaJsonWriter* nonnull %7)
  %727 = load i32, i32* %74, align 8
  br label %728

728:                                              ; preds = %448, %726
  %729 = phi i32 [ %449, %448 ], [ %727, %726 ]
  %730 = add nuw nsw i64 %450, 1
  %731 = zext i32 %729 to i64
  %732 = icmp ult i64 %730, %731
  br i1 %732, label %448, label %443

733:                                              ; preds = %75
  call void @_ZN14VmaAllocator_T16PrintDetailedMapER13VmaJsonWriter(%struct.VmaAllocator_T* %0, %class.VmaJsonWriter* nonnull dereferenceable(48) %7)
  br label %734

734:                                              ; preds = %733, %75
  call void @_ZN13VmaJsonWriter9EndObjectEv(%class.VmaJsonWriter* nonnull %7)
  call void @llvm.lifetime.end.p0i8(i64 3920, i8* nonnull %48) #15
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %44) #15
  %735 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %7, i64 0, i32 1, i32 0, i32 0
  %736 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %735, align 8
  %737 = bitcast %"struct.VmaJsonWriter::StackItem"** %26 to i8**
  %738 = load i8*, i8** %737, align 8
  %739 = icmp eq %struct.VkAllocationCallbacks* %736, null
  br i1 %739, label %747, label %740

740:                                              ; preds = %734
  %741 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %736, i64 0, i32 3
  %742 = load void (i8*, i8*)*, void (i8*, i8*)** %741, align 8
  %743 = icmp eq void (i8*, i8*)* %742, null
  br i1 %743, label %747, label %744

744:                                              ; preds = %740
  %745 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %736, i64 0, i32 0
  %746 = load i8*, i8** %745, align 8
  call void %742(i8* %746, i8* %738) #15
  br label %748

747:                                              ; preds = %740, %734
  call void @free(i8* %738) #15
  br label %748

748:                                              ; preds = %744, %747
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %22) #15
  %749 = load i64, i64* %13, align 8
  %750 = add i64 %749, 1
  %751 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 1
  %752 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %751, align 8
  %753 = icmp eq i8* (i8*, i64, i64, i32)* %752, null
  br i1 %753, label %758, label %754

754:                                              ; preds = %748
  %755 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 0
  %756 = load i8*, i8** %755, align 8
  %757 = call i8* %752(i8* %756, i64 %750, i64 1, i32 1) #15
  br label %760

758:                                              ; preds = %748
  %759 = call noalias i8* @aligned_alloc(i64 1, i64 %750) #15
  br label %760

760:                                              ; preds = %754, %758
  %761 = phi i8* [ %757, %754 ], [ %759, %758 ]
  %762 = icmp eq i64 %749, 0
  br i1 %762, label %765, label %763

763:                                              ; preds = %760
  %764 = load i8*, i8** %12, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %761, i8* align 1 %764, i64 %749, i1 false)
  br label %765

765:                                              ; preds = %760, %763
  %766 = getelementptr inbounds i8, i8* %761, i64 %749
  store i8 0, i8* %766, align 1
  store i8* %761, i8** %1, align 8
  %767 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %11, align 8
  %768 = load i8*, i8** %12, align 8
  %769 = icmp eq %struct.VkAllocationCallbacks* %767, null
  br i1 %769, label %777, label %770

770:                                              ; preds = %765
  %771 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %767, i64 0, i32 3
  %772 = load void (i8*, i8*)*, void (i8*, i8*)** %771, align 8
  %773 = icmp eq void (i8*, i8*)* %772, null
  br i1 %773, label %777, label %774

774:                                              ; preds = %770
  %775 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %767, i64 0, i32 0
  %776 = load i8*, i8** %775, align 8
  call void %772(i8* %776, i8* %768) #15
  br label %778

777:                                              ; preds = %770, %765
  call void @free(i8* %768) #15
  br label %778

778:                                              ; preds = %774, %777
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL16VmaPrintStatInfoR13VmaJsonWriterRK11VmaStatInfo(%class.VmaJsonWriter* dereferenceable(48), %struct.VmaStatInfo* nocapture readonly dereferenceable(80)) unnamed_addr #0 {
  %3 = alloca [21 x i8], align 16
  %4 = alloca [11 x i8], align 1
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %5 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 0
  %6 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %7 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %6, i64 0, i32 0
  %8 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %6, i64 0, i32 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %7, i64 %10, i1 zeroext false) #15
  %11 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %6, i64 0, i32 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %9
  store i8 123, i8* %13, align 1
  %14 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 1
  %15 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 1, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = add i64 %16, 1
  tail call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %14, i64 %17, i1 zeroext false) #15
  %18 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 1, i32 1
  %19 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %18, align 8
  %20 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %19, i64 %16
  %21 = bitcast %"struct.VmaJsonWriter::StackItem"* %20 to i8*
  %22 = getelementptr inbounds i8, i8* %21, i64 9
  %23 = bitcast %"struct.VmaJsonWriter::StackItem"* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %23, i8 0, i64 9, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %22, i8* nonnull align 1 getelementptr inbounds ({ i32, i32, i8, [3 x i8] }, { i32, i32, i8, [3 x i8] }* @__const._ZN13VmaJsonWriter10BeginArrayEb.item, i64 0, i32 3, i64 0), i64 3, i1 false) #15
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %24 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %25 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %24, i64 0, i32 0
  %26 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %24, i64 0, i32 0, i32 2
  %27 = load i64, i64* %26, align 8
  %28 = add i64 %27, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %25, i64 %28, i1 zeroext false) #15
  %29 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %24, i64 0, i32 0, i32 1
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 %27
  store i8 34, i8* %31, align 1
  %32 = getelementptr inbounds %class.VmaJsonWriter, %class.VmaJsonWriter* %0, i64 0, i32 2
  store i8 1, i8* %32, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %0, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.36, i64 0, i64 0)) #15
  %33 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %34 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %33, i64 0, i32 0
  %35 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %33, i64 0, i32 0, i32 2
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %36, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %34, i64 %37, i1 zeroext false) #15
  %38 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %33, i64 0, i32 0, i32 1
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 %36
  store i8 34, i8* %40, align 1
  store i8 0, i8* %32, align 8
  %41 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 0
  %42 = load i32, i32* %41, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %43 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %44 = getelementptr inbounds [11 x i8], [11 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 11, i8* nonnull %44) #15
  %45 = getelementptr inbounds [11 x i8], [11 x i8]* %4, i64 0, i64 10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %44, i8 -86, i64 10, i1 false) #15
  store i8 0, i8* %45, align 1
  br label %46

46:                                               ; preds = %46, %2
  %47 = phi i32 [ %42, %2 ], [ %53, %46 ]
  %48 = phi i8* [ %45, %2 ], [ %52, %46 ]
  %49 = urem i32 %47, 10
  %50 = trunc i32 %49 to i8
  %51 = or i8 %50, 48
  %52 = getelementptr inbounds i8, i8* %48, i64 -1
  store i8 %51, i8* %52, align 1
  %53 = udiv i32 %47, 10
  %54 = icmp ugt i32 %47, 9
  br i1 %54, label %46, label %55

55:                                               ; preds = %46
  %56 = call i64 @strlen(i8* %52) #16
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %66, label %58

58:                                               ; preds = %55
  %59 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %43, i64 0, i32 0
  %60 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %43, i64 0, i32 0, i32 2
  %61 = load i64, i64* %60, align 8
  %62 = add i64 %61, %56
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %59, i64 %62, i1 zeroext false) #15
  %63 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %43, i64 0, i32 0, i32 1
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 %61
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %65, i8* align 1 %52, i64 %56, i1 false) #15
  br label %66

66:                                               ; preds = %55, %58
  call void @llvm.lifetime.end.p0i8(i64 11, i8* nonnull %44) #15
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %67 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %68 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %67, i64 0, i32 0
  %69 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %67, i64 0, i32 0, i32 2
  %70 = load i64, i64* %69, align 8
  %71 = add i64 %70, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %68, i64 %71, i1 zeroext false) #15
  %72 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %67, i64 0, i32 0, i32 1
  %73 = load i8*, i8** %72, align 8
  %74 = getelementptr inbounds i8, i8* %73, i64 %70
  store i8 34, i8* %74, align 1
  store i8 1, i8* %32, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %0, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.21, i64 0, i64 0)) #15
  %75 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %76 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %75, i64 0, i32 0
  %77 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %75, i64 0, i32 0, i32 2
  %78 = load i64, i64* %77, align 8
  %79 = add i64 %78, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %76, i64 %79, i1 zeroext false) #15
  %80 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %75, i64 0, i32 0, i32 1
  %81 = load i8*, i8** %80, align 8
  %82 = getelementptr inbounds i8, i8* %81, i64 %78
  store i8 34, i8* %82, align 1
  store i8 0, i8* %32, align 8
  %83 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 1
  %84 = load i32, i32* %83, align 4
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %85 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 11, i8* nonnull %44) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %44, i8 -86, i64 10, i1 false) #15
  store i8 0, i8* %45, align 1
  br label %86

86:                                               ; preds = %86, %66
  %87 = phi i32 [ %84, %66 ], [ %93, %86 ]
  %88 = phi i8* [ %45, %66 ], [ %92, %86 ]
  %89 = urem i32 %87, 10
  %90 = trunc i32 %89 to i8
  %91 = or i8 %90, 48
  %92 = getelementptr inbounds i8, i8* %88, i64 -1
  store i8 %91, i8* %92, align 1
  %93 = udiv i32 %87, 10
  %94 = icmp ugt i32 %87, 9
  br i1 %94, label %86, label %95

95:                                               ; preds = %86
  %96 = call i64 @strlen(i8* %92) #16
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %106, label %98

98:                                               ; preds = %95
  %99 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %85, i64 0, i32 0
  %100 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %85, i64 0, i32 0, i32 2
  %101 = load i64, i64* %100, align 8
  %102 = add i64 %101, %96
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %99, i64 %102, i1 zeroext false) #15
  %103 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %85, i64 0, i32 0, i32 1
  %104 = load i8*, i8** %103, align 8
  %105 = getelementptr inbounds i8, i8* %104, i64 %101
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %105, i8* align 1 %92, i64 %96, i1 false) #15
  br label %106

106:                                              ; preds = %95, %98
  call void @llvm.lifetime.end.p0i8(i64 11, i8* nonnull %44) #15
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %107 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %108 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %107, i64 0, i32 0
  %109 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %107, i64 0, i32 0, i32 2
  %110 = load i64, i64* %109, align 8
  %111 = add i64 %110, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %108, i64 %111, i1 zeroext false) #15
  %112 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %107, i64 0, i32 0, i32 1
  %113 = load i8*, i8** %112, align 8
  %114 = getelementptr inbounds i8, i8* %113, i64 %110
  store i8 34, i8* %114, align 1
  store i8 1, i8* %32, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %0, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.22, i64 0, i64 0)) #15
  %115 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %116 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %115, i64 0, i32 0
  %117 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %115, i64 0, i32 0, i32 2
  %118 = load i64, i64* %117, align 8
  %119 = add i64 %118, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %116, i64 %119, i1 zeroext false) #15
  %120 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %115, i64 0, i32 0, i32 1
  %121 = load i8*, i8** %120, align 8
  %122 = getelementptr inbounds i8, i8* %121, i64 %118
  store i8 34, i8* %122, align 1
  store i8 0, i8* %32, align 8
  %123 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 2
  %124 = load i32, i32* %123, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %125 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 11, i8* nonnull %44) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %44, i8 -86, i64 10, i1 false) #15
  store i8 0, i8* %45, align 1
  br label %126

126:                                              ; preds = %126, %106
  %127 = phi i32 [ %124, %106 ], [ %133, %126 ]
  %128 = phi i8* [ %45, %106 ], [ %132, %126 ]
  %129 = urem i32 %127, 10
  %130 = trunc i32 %129 to i8
  %131 = or i8 %130, 48
  %132 = getelementptr inbounds i8, i8* %128, i64 -1
  store i8 %131, i8* %132, align 1
  %133 = udiv i32 %127, 10
  %134 = icmp ugt i32 %127, 9
  br i1 %134, label %126, label %135

135:                                              ; preds = %126
  %136 = call i64 @strlen(i8* %132) #16
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %146, label %138

138:                                              ; preds = %135
  %139 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %125, i64 0, i32 0
  %140 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %125, i64 0, i32 0, i32 2
  %141 = load i64, i64* %140, align 8
  %142 = add i64 %141, %136
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %139, i64 %142, i1 zeroext false) #15
  %143 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %125, i64 0, i32 0, i32 1
  %144 = load i8*, i8** %143, align 8
  %145 = getelementptr inbounds i8, i8* %144, i64 %141
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %145, i8* align 1 %132, i64 %136, i1 false) #15
  br label %146

146:                                              ; preds = %135, %138
  call void @llvm.lifetime.end.p0i8(i64 11, i8* nonnull %44) #15
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %147 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %148 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %147, i64 0, i32 0
  %149 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %147, i64 0, i32 0, i32 2
  %150 = load i64, i64* %149, align 8
  %151 = add i64 %150, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %148, i64 %151, i1 zeroext false) #15
  %152 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %147, i64 0, i32 0, i32 1
  %153 = load i8*, i8** %152, align 8
  %154 = getelementptr inbounds i8, i8* %153, i64 %150
  store i8 34, i8* %154, align 1
  store i8 1, i8* %32, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %0, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.71, i64 0, i64 0)) #15
  %155 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %156 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %155, i64 0, i32 0
  %157 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %155, i64 0, i32 0, i32 2
  %158 = load i64, i64* %157, align 8
  %159 = add i64 %158, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %156, i64 %159, i1 zeroext false) #15
  %160 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %155, i64 0, i32 0, i32 1
  %161 = load i8*, i8** %160, align 8
  %162 = getelementptr inbounds i8, i8* %161, i64 %158
  store i8 34, i8* %162, align 1
  store i8 0, i8* %32, align 8
  %163 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 3
  %164 = load i64, i64* %163, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %165 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %166 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %166) #15
  %167 = getelementptr inbounds [21 x i8], [21 x i8]* %3, i64 0, i64 20
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %166, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %167, align 4
  br label %168

168:                                              ; preds = %168, %146
  %169 = phi i64 [ %164, %146 ], [ %175, %168 ]
  %170 = phi i8* [ %167, %146 ], [ %174, %168 ]
  %171 = urem i64 %169, 10
  %172 = trunc i64 %171 to i8
  %173 = or i8 %172, 48
  %174 = getelementptr inbounds i8, i8* %170, i64 -1
  store i8 %173, i8* %174, align 1
  %175 = udiv i64 %169, 10
  %176 = icmp ugt i64 %169, 9
  br i1 %176, label %168, label %177

177:                                              ; preds = %168
  %178 = call i64 @strlen(i8* %174) #16
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %188, label %180

180:                                              ; preds = %177
  %181 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %165, i64 0, i32 0
  %182 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %165, i64 0, i32 0, i32 2
  %183 = load i64, i64* %182, align 8
  %184 = add i64 %183, %178
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %181, i64 %184, i1 zeroext false) #15
  %185 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %165, i64 0, i32 0, i32 1
  %186 = load i8*, i8** %185, align 8
  %187 = getelementptr inbounds i8, i8* %186, i64 %183
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %187, i8* align 1 %174, i64 %178, i1 false) #15
  br label %188

188:                                              ; preds = %177, %180
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %166) #15
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %189 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %190 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %189, i64 0, i32 0
  %191 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %189, i64 0, i32 0, i32 2
  %192 = load i64, i64* %191, align 8
  %193 = add i64 %192, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %190, i64 %193, i1 zeroext false) #15
  %194 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %189, i64 0, i32 0, i32 1
  %195 = load i8*, i8** %194, align 8
  %196 = getelementptr inbounds i8, i8* %195, i64 %192
  store i8 34, i8* %196, align 1
  store i8 1, i8* %32, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %0, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.20, i64 0, i64 0)) #15
  %197 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %198 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %197, i64 0, i32 0
  %199 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %197, i64 0, i32 0, i32 2
  %200 = load i64, i64* %199, align 8
  %201 = add i64 %200, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %198, i64 %201, i1 zeroext false) #15
  %202 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %197, i64 0, i32 0, i32 1
  %203 = load i8*, i8** %202, align 8
  %204 = getelementptr inbounds i8, i8* %203, i64 %200
  store i8 34, i8* %204, align 1
  store i8 0, i8* %32, align 8
  %205 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 4
  %206 = load i64, i64* %205, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %207 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %166) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %166, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %167, align 4
  br label %208

208:                                              ; preds = %208, %188
  %209 = phi i64 [ %206, %188 ], [ %215, %208 ]
  %210 = phi i8* [ %167, %188 ], [ %214, %208 ]
  %211 = urem i64 %209, 10
  %212 = trunc i64 %211 to i8
  %213 = or i8 %212, 48
  %214 = getelementptr inbounds i8, i8* %210, i64 -1
  store i8 %213, i8* %214, align 1
  %215 = udiv i64 %209, 10
  %216 = icmp ugt i64 %209, 9
  br i1 %216, label %208, label %217

217:                                              ; preds = %208
  %218 = call i64 @strlen(i8* %214) #16
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %228, label %220

220:                                              ; preds = %217
  %221 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %207, i64 0, i32 0
  %222 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %207, i64 0, i32 0, i32 2
  %223 = load i64, i64* %222, align 8
  %224 = add i64 %223, %218
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %221, i64 %224, i1 zeroext false) #15
  %225 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %207, i64 0, i32 0, i32 1
  %226 = load i8*, i8** %225, align 8
  %227 = getelementptr inbounds i8, i8* %226, i64 %223
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %227, i8* align 1 %214, i64 %218, i1 false) #15
  br label %228

228:                                              ; preds = %217, %220
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %166) #15
  %229 = load i32, i32* %83, align 4
  %230 = icmp ugt i32 %229, 1
  br i1 %230, label %231, label %385

231:                                              ; preds = %228
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %232 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %233 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %232, i64 0, i32 0
  %234 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %232, i64 0, i32 0, i32 2
  %235 = load i64, i64* %234, align 8
  %236 = add i64 %235, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %233, i64 %236, i1 zeroext false) #15
  %237 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %232, i64 0, i32 0, i32 1
  %238 = load i8*, i8** %237, align 8
  %239 = getelementptr inbounds i8, i8* %238, i64 %235
  store i8 34, i8* %239, align 1
  store i8 1, i8* %32, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %0, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.72, i64 0, i64 0)) #15
  %240 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %241 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %240, i64 0, i32 0
  %242 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %240, i64 0, i32 0, i32 2
  %243 = load i64, i64* %242, align 8
  %244 = add i64 %243, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %241, i64 %244, i1 zeroext false) #15
  %245 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %240, i64 0, i32 0, i32 1
  %246 = load i8*, i8** %245, align 8
  %247 = getelementptr inbounds i8, i8* %246, i64 %243
  store i8 34, i8* %247, align 1
  store i8 0, i8* %32, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %248 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %249 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %248, i64 0, i32 0
  %250 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %248, i64 0, i32 0, i32 2
  %251 = load i64, i64* %250, align 8
  %252 = add i64 %251, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %249, i64 %252, i1 zeroext false) #15
  %253 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %248, i64 0, i32 0, i32 1
  %254 = load i8*, i8** %253, align 8
  %255 = getelementptr inbounds i8, i8* %254, i64 %251
  store i8 123, i8* %255, align 1
  %256 = load i64, i64* %15, align 8
  %257 = add i64 %256, 1
  tail call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %14, i64 %257, i1 zeroext false) #15
  %258 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %18, align 8
  %259 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %258, i64 %256
  %260 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %259, i64 0, i32 0
  store i32 0, i32* %260, align 4
  %261 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %258, i64 %256, i32 1
  store i32 0, i32* %261, align 4
  %262 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %258, i64 %256, i32 2
  store i8 1, i8* %262, align 4
  %263 = bitcast %"struct.VmaJsonWriter::StackItem"* %259 to i8*
  %264 = getelementptr inbounds i8, i8* %263, i64 9
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %264, i8* nonnull align 1 getelementptr inbounds ({ i32, i32, i8, [3 x i8] }, { i32, i32, i8, [3 x i8] }* @__const._ZN13VmaJsonWriter10BeginArrayEb.item, i64 0, i32 3, i64 0), i64 3, i1 false) #15
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %265 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %266 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %265, i64 0, i32 0
  %267 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %265, i64 0, i32 0, i32 2
  %268 = load i64, i64* %267, align 8
  %269 = add i64 %268, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %266, i64 %269, i1 zeroext false) #15
  %270 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %265, i64 0, i32 0, i32 1
  %271 = load i8*, i8** %270, align 8
  %272 = getelementptr inbounds i8, i8* %271, i64 %268
  store i8 34, i8* %272, align 1
  store i8 1, i8* %32, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %0, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.30, i64 0, i64 0)) #15
  %273 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %274 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %273, i64 0, i32 0
  %275 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %273, i64 0, i32 0, i32 2
  %276 = load i64, i64* %275, align 8
  %277 = add i64 %276, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %274, i64 %277, i1 zeroext false) #15
  %278 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %273, i64 0, i32 0, i32 1
  %279 = load i8*, i8** %278, align 8
  %280 = getelementptr inbounds i8, i8* %279, i64 %276
  store i8 34, i8* %280, align 1
  store i8 0, i8* %32, align 8
  %281 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 5
  %282 = load i64, i64* %281, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %283 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %166) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %166, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %167, align 4
  br label %284

284:                                              ; preds = %284, %231
  %285 = phi i64 [ %282, %231 ], [ %291, %284 ]
  %286 = phi i8* [ %167, %231 ], [ %290, %284 ]
  %287 = urem i64 %285, 10
  %288 = trunc i64 %287 to i8
  %289 = or i8 %288, 48
  %290 = getelementptr inbounds i8, i8* %286, i64 -1
  store i8 %289, i8* %290, align 1
  %291 = udiv i64 %285, 10
  %292 = icmp ugt i64 %285, 9
  br i1 %292, label %284, label %293

293:                                              ; preds = %284
  %294 = call i64 @strlen(i8* %290) #16
  %295 = icmp eq i64 %294, 0
  br i1 %295, label %304, label %296

296:                                              ; preds = %293
  %297 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %283, i64 0, i32 0
  %298 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %283, i64 0, i32 0, i32 2
  %299 = load i64, i64* %298, align 8
  %300 = add i64 %299, %294
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %297, i64 %300, i1 zeroext false) #15
  %301 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %283, i64 0, i32 0, i32 1
  %302 = load i8*, i8** %301, align 8
  %303 = getelementptr inbounds i8, i8* %302, i64 %299
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %303, i8* align 1 %290, i64 %294, i1 false) #15
  br label %304

304:                                              ; preds = %293, %296
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %166) #15
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %305 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %306 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %305, i64 0, i32 0
  %307 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %305, i64 0, i32 0, i32 2
  %308 = load i64, i64* %307, align 8
  %309 = add i64 %308, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %306, i64 %309, i1 zeroext false) #15
  %310 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %305, i64 0, i32 0, i32 1
  %311 = load i8*, i8** %310, align 8
  %312 = getelementptr inbounds i8, i8* %311, i64 %308
  store i8 34, i8* %312, align 1
  store i8 1, i8* %32, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %0, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.73, i64 0, i64 0)) #15
  %313 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %314 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %313, i64 0, i32 0
  %315 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %313, i64 0, i32 0, i32 2
  %316 = load i64, i64* %315, align 8
  %317 = add i64 %316, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %314, i64 %317, i1 zeroext false) #15
  %318 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %313, i64 0, i32 0, i32 1
  %319 = load i8*, i8** %318, align 8
  %320 = getelementptr inbounds i8, i8* %319, i64 %316
  store i8 34, i8* %320, align 1
  store i8 0, i8* %32, align 8
  %321 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 6
  %322 = load i64, i64* %321, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %323 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %166) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %166, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %167, align 4
  br label %324

324:                                              ; preds = %324, %304
  %325 = phi i64 [ %322, %304 ], [ %331, %324 ]
  %326 = phi i8* [ %167, %304 ], [ %330, %324 ]
  %327 = urem i64 %325, 10
  %328 = trunc i64 %327 to i8
  %329 = or i8 %328, 48
  %330 = getelementptr inbounds i8, i8* %326, i64 -1
  store i8 %329, i8* %330, align 1
  %331 = udiv i64 %325, 10
  %332 = icmp ugt i64 %325, 9
  br i1 %332, label %324, label %333

333:                                              ; preds = %324
  %334 = call i64 @strlen(i8* %330) #16
  %335 = icmp eq i64 %334, 0
  br i1 %335, label %344, label %336

336:                                              ; preds = %333
  %337 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %323, i64 0, i32 0
  %338 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %323, i64 0, i32 0, i32 2
  %339 = load i64, i64* %338, align 8
  %340 = add i64 %339, %334
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %337, i64 %340, i1 zeroext false) #15
  %341 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %323, i64 0, i32 0, i32 1
  %342 = load i8*, i8** %341, align 8
  %343 = getelementptr inbounds i8, i8* %342, i64 %339
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %343, i8* align 1 %330, i64 %334, i1 false) #15
  br label %344

344:                                              ; preds = %333, %336
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %166) #15
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %345 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %346 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %345, i64 0, i32 0
  %347 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %345, i64 0, i32 0, i32 2
  %348 = load i64, i64* %347, align 8
  %349 = add i64 %348, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %346, i64 %349, i1 zeroext false) #15
  %350 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %345, i64 0, i32 0, i32 1
  %351 = load i8*, i8** %350, align 8
  %352 = getelementptr inbounds i8, i8* %351, i64 %348
  store i8 34, i8* %352, align 1
  store i8 1, i8* %32, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %0, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.31, i64 0, i64 0)) #15
  %353 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %354 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %353, i64 0, i32 0
  %355 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %353, i64 0, i32 0, i32 2
  %356 = load i64, i64* %355, align 8
  %357 = add i64 %356, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %354, i64 %357, i1 zeroext false) #15
  %358 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %353, i64 0, i32 0, i32 1
  %359 = load i8*, i8** %358, align 8
  %360 = getelementptr inbounds i8, i8* %359, i64 %356
  store i8 34, i8* %360, align 1
  store i8 0, i8* %32, align 8
  %361 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 7
  %362 = load i64, i64* %361, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %363 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %166) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %166, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %167, align 4
  br label %364

364:                                              ; preds = %364, %344
  %365 = phi i64 [ %362, %344 ], [ %371, %364 ]
  %366 = phi i8* [ %167, %344 ], [ %370, %364 ]
  %367 = urem i64 %365, 10
  %368 = trunc i64 %367 to i8
  %369 = or i8 %368, 48
  %370 = getelementptr inbounds i8, i8* %366, i64 -1
  store i8 %369, i8* %370, align 1
  %371 = udiv i64 %365, 10
  %372 = icmp ugt i64 %365, 9
  br i1 %372, label %364, label %373

373:                                              ; preds = %364
  %374 = call i64 @strlen(i8* %370) #16
  %375 = icmp eq i64 %374, 0
  br i1 %375, label %384, label %376

376:                                              ; preds = %373
  %377 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %363, i64 0, i32 0
  %378 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %363, i64 0, i32 0, i32 2
  %379 = load i64, i64* %378, align 8
  %380 = add i64 %379, %374
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %377, i64 %380, i1 zeroext false) #15
  %381 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %363, i64 0, i32 0, i32 1
  %382 = load i8*, i8** %381, align 8
  %383 = getelementptr inbounds i8, i8* %382, i64 %379
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %383, i8* align 1 %370, i64 %374, i1 false) #15
  br label %384

384:                                              ; preds = %373, %376
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %166) #15
  tail call void @_ZN13VmaJsonWriter9EndObjectEv(%class.VmaJsonWriter* %0)
  br label %385

385:                                              ; preds = %384, %228
  %386 = load i32, i32* %123, align 8
  %387 = icmp ugt i32 %386, 1
  br i1 %387, label %388, label %542

388:                                              ; preds = %385
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %389 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %390 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %389, i64 0, i32 0
  %391 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %389, i64 0, i32 0, i32 2
  %392 = load i64, i64* %391, align 8
  %393 = add i64 %392, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %390, i64 %393, i1 zeroext false) #15
  %394 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %389, i64 0, i32 0, i32 1
  %395 = load i8*, i8** %394, align 8
  %396 = getelementptr inbounds i8, i8* %395, i64 %392
  store i8 34, i8* %396, align 1
  store i8 1, i8* %32, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %0, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.74, i64 0, i64 0)) #15
  %397 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %398 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %397, i64 0, i32 0
  %399 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %397, i64 0, i32 0, i32 2
  %400 = load i64, i64* %399, align 8
  %401 = add i64 %400, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %398, i64 %401, i1 zeroext false) #15
  %402 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %397, i64 0, i32 0, i32 1
  %403 = load i8*, i8** %402, align 8
  %404 = getelementptr inbounds i8, i8* %403, i64 %400
  store i8 34, i8* %404, align 1
  store i8 0, i8* %32, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %405 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %406 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %405, i64 0, i32 0
  %407 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %405, i64 0, i32 0, i32 2
  %408 = load i64, i64* %407, align 8
  %409 = add i64 %408, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %406, i64 %409, i1 zeroext false) #15
  %410 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %405, i64 0, i32 0, i32 1
  %411 = load i8*, i8** %410, align 8
  %412 = getelementptr inbounds i8, i8* %411, i64 %408
  store i8 123, i8* %412, align 1
  %413 = load i64, i64* %15, align 8
  %414 = add i64 %413, 1
  tail call void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0* %14, i64 %414, i1 zeroext false) #15
  %415 = load %"struct.VmaJsonWriter::StackItem"*, %"struct.VmaJsonWriter::StackItem"** %18, align 8
  %416 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %415, i64 %413
  %417 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %416, i64 0, i32 0
  store i32 0, i32* %417, align 4
  %418 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %415, i64 %413, i32 1
  store i32 0, i32* %418, align 4
  %419 = getelementptr inbounds %"struct.VmaJsonWriter::StackItem", %"struct.VmaJsonWriter::StackItem"* %415, i64 %413, i32 2
  store i8 1, i8* %419, align 4
  %420 = bitcast %"struct.VmaJsonWriter::StackItem"* %416 to i8*
  %421 = getelementptr inbounds i8, i8* %420, i64 9
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %421, i8* nonnull align 1 getelementptr inbounds ({ i32, i32, i8, [3 x i8] }, { i32, i32, i8, [3 x i8] }* @__const._ZN13VmaJsonWriter10BeginArrayEb.item, i64 0, i32 3, i64 0), i64 3, i1 false) #15
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %422 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %423 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %422, i64 0, i32 0
  %424 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %422, i64 0, i32 0, i32 2
  %425 = load i64, i64* %424, align 8
  %426 = add i64 %425, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %423, i64 %426, i1 zeroext false) #15
  %427 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %422, i64 0, i32 0, i32 1
  %428 = load i8*, i8** %427, align 8
  %429 = getelementptr inbounds i8, i8* %428, i64 %425
  store i8 34, i8* %429, align 1
  store i8 1, i8* %32, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %0, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.30, i64 0, i64 0)) #15
  %430 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %431 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %430, i64 0, i32 0
  %432 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %430, i64 0, i32 0, i32 2
  %433 = load i64, i64* %432, align 8
  %434 = add i64 %433, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %431, i64 %434, i1 zeroext false) #15
  %435 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %430, i64 0, i32 0, i32 1
  %436 = load i8*, i8** %435, align 8
  %437 = getelementptr inbounds i8, i8* %436, i64 %433
  store i8 34, i8* %437, align 1
  store i8 0, i8* %32, align 8
  %438 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 8
  %439 = load i64, i64* %438, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %440 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %166) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %166, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %167, align 4
  br label %441

441:                                              ; preds = %441, %388
  %442 = phi i64 [ %439, %388 ], [ %448, %441 ]
  %443 = phi i8* [ %167, %388 ], [ %447, %441 ]
  %444 = urem i64 %442, 10
  %445 = trunc i64 %444 to i8
  %446 = or i8 %445, 48
  %447 = getelementptr inbounds i8, i8* %443, i64 -1
  store i8 %446, i8* %447, align 1
  %448 = udiv i64 %442, 10
  %449 = icmp ugt i64 %442, 9
  br i1 %449, label %441, label %450

450:                                              ; preds = %441
  %451 = call i64 @strlen(i8* %447) #16
  %452 = icmp eq i64 %451, 0
  br i1 %452, label %461, label %453

453:                                              ; preds = %450
  %454 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %440, i64 0, i32 0
  %455 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %440, i64 0, i32 0, i32 2
  %456 = load i64, i64* %455, align 8
  %457 = add i64 %456, %451
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %454, i64 %457, i1 zeroext false) #15
  %458 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %440, i64 0, i32 0, i32 1
  %459 = load i8*, i8** %458, align 8
  %460 = getelementptr inbounds i8, i8* %459, i64 %456
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %460, i8* align 1 %447, i64 %451, i1 false) #15
  br label %461

461:                                              ; preds = %450, %453
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %166) #15
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %462 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %463 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %462, i64 0, i32 0
  %464 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %462, i64 0, i32 0, i32 2
  %465 = load i64, i64* %464, align 8
  %466 = add i64 %465, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %463, i64 %466, i1 zeroext false) #15
  %467 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %462, i64 0, i32 0, i32 1
  %468 = load i8*, i8** %467, align 8
  %469 = getelementptr inbounds i8, i8* %468, i64 %465
  store i8 34, i8* %469, align 1
  store i8 1, i8* %32, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %0, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.73, i64 0, i64 0)) #15
  %470 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %471 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %470, i64 0, i32 0
  %472 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %470, i64 0, i32 0, i32 2
  %473 = load i64, i64* %472, align 8
  %474 = add i64 %473, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %471, i64 %474, i1 zeroext false) #15
  %475 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %470, i64 0, i32 0, i32 1
  %476 = load i8*, i8** %475, align 8
  %477 = getelementptr inbounds i8, i8* %476, i64 %473
  store i8 34, i8* %477, align 1
  store i8 0, i8* %32, align 8
  %478 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 9
  %479 = load i64, i64* %478, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %480 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %166) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %166, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %167, align 4
  br label %481

481:                                              ; preds = %481, %461
  %482 = phi i64 [ %479, %461 ], [ %488, %481 ]
  %483 = phi i8* [ %167, %461 ], [ %487, %481 ]
  %484 = urem i64 %482, 10
  %485 = trunc i64 %484 to i8
  %486 = or i8 %485, 48
  %487 = getelementptr inbounds i8, i8* %483, i64 -1
  store i8 %486, i8* %487, align 1
  %488 = udiv i64 %482, 10
  %489 = icmp ugt i64 %482, 9
  br i1 %489, label %481, label %490

490:                                              ; preds = %481
  %491 = call i64 @strlen(i8* %487) #16
  %492 = icmp eq i64 %491, 0
  br i1 %492, label %501, label %493

493:                                              ; preds = %490
  %494 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %480, i64 0, i32 0
  %495 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %480, i64 0, i32 0, i32 2
  %496 = load i64, i64* %495, align 8
  %497 = add i64 %496, %491
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %494, i64 %497, i1 zeroext false) #15
  %498 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %480, i64 0, i32 0, i32 1
  %499 = load i8*, i8** %498, align 8
  %500 = getelementptr inbounds i8, i8* %499, i64 %496
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %500, i8* align 1 %487, i64 %491, i1 false) #15
  br label %501

501:                                              ; preds = %490, %493
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %166) #15
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %502 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %503 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %502, i64 0, i32 0
  %504 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %502, i64 0, i32 0, i32 2
  %505 = load i64, i64* %504, align 8
  %506 = add i64 %505, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %503, i64 %506, i1 zeroext false) #15
  %507 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %502, i64 0, i32 0, i32 1
  %508 = load i8*, i8** %507, align 8
  %509 = getelementptr inbounds i8, i8* %508, i64 %505
  store i8 34, i8* %509, align 1
  store i8 1, i8* %32, align 8
  tail call void @_ZN13VmaJsonWriter14ContinueStringEPKc(%class.VmaJsonWriter* %0, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.31, i64 0, i64 0)) #15
  %510 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  %511 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %510, i64 0, i32 0
  %512 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %510, i64 0, i32 0, i32 2
  %513 = load i64, i64* %512, align 8
  %514 = add i64 %513, 1
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %511, i64 %514, i1 zeroext false) #15
  %515 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %510, i64 0, i32 0, i32 1
  %516 = load i8*, i8** %515, align 8
  %517 = getelementptr inbounds i8, i8* %516, i64 %513
  store i8 34, i8* %517, align 1
  store i8 0, i8* %32, align 8
  %518 = getelementptr inbounds %struct.VmaStatInfo, %struct.VmaStatInfo* %1, i64 0, i32 10
  %519 = load i64, i64* %518, align 8
  tail call void @_ZN13VmaJsonWriter10BeginValueEb(%class.VmaJsonWriter* %0, i1 zeroext undef) #15
  %520 = load %class.VmaStringBuilder*, %class.VmaStringBuilder** %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %166) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %166, i8 -86, i64 20, i1 false) #15
  store i8 0, i8* %167, align 4
  br label %521

521:                                              ; preds = %521, %501
  %522 = phi i64 [ %519, %501 ], [ %528, %521 ]
  %523 = phi i8* [ %167, %501 ], [ %527, %521 ]
  %524 = urem i64 %522, 10
  %525 = trunc i64 %524 to i8
  %526 = or i8 %525, 48
  %527 = getelementptr inbounds i8, i8* %523, i64 -1
  store i8 %526, i8* %527, align 1
  %528 = udiv i64 %522, 10
  %529 = icmp ugt i64 %522, 9
  br i1 %529, label %521, label %530

530:                                              ; preds = %521
  %531 = call i64 @strlen(i8* %527) #16
  %532 = icmp eq i64 %531, 0
  br i1 %532, label %541, label %533

533:                                              ; preds = %530
  %534 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %520, i64 0, i32 0
  %535 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %520, i64 0, i32 0, i32 2
  %536 = load i64, i64* %535, align 8
  %537 = add i64 %536, %531
  tail call void @_ZN9VmaVectorIc15VmaStlAllocatorIcEE6resizeEmb(%class.VmaVector* %534, i64 %537, i1 zeroext false) #15
  %538 = getelementptr inbounds %class.VmaStringBuilder, %class.VmaStringBuilder* %520, i64 0, i32 0, i32 1
  %539 = load i8*, i8** %538, align 8
  %540 = getelementptr inbounds i8, i8* %539, i64 %536
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %540, i8* align 1 %527, i64 %531, i1 false) #15
  br label %541

541:                                              ; preds = %530, %533
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %166) #15
  tail call void @_ZN13VmaJsonWriter9EndObjectEv(%class.VmaJsonWriter* %0)
  br label %542

542:                                              ; preds = %541, %385
  tail call void @_ZN13VmaJsonWriter9EndObjectEv(%class.VmaJsonWriter* %0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vmaFreeStatsString(%struct.VmaAllocator_T* nocapture readonly, i8*) local_unnamed_addr #0 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %12, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 3
  %6 = load void (i8*, i8*)*, void (i8*, i8*)** %5, align 8
  %7 = icmp eq void (i8*, i8*)* %6, null
  br i1 %7, label %11, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 0
  %10 = load i8*, i8** %9, align 8
  tail call void %6(i8* %10, i8* nonnull %1) #15
  br label %12

11:                                               ; preds = %4
  tail call void @free(i8* nonnull %1) #15
  br label %12

12:                                               ; preds = %11, %8, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaFindMemoryTypeIndexForBufferInfo(%struct.VmaAllocator_T*, %struct.VkBufferCreateInfo*, %struct.VmaAllocationCreateInfo* nocapture readonly, i32* nocapture) local_unnamed_addr #0 {
  %5 = alloca %struct.VkBuffer_T*, align 8
  %6 = alloca %struct.VkMemoryRequirements, align 8
  %7 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %8 = load %struct.VkDevice_T*, %struct.VkDevice_T** %7, align 8
  %9 = bitcast %struct.VkBuffer_T** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #15
  store %struct.VkBuffer_T* null, %struct.VkBuffer_T** %5, align 8
  %10 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 12
  %11 = load i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)*, i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)** %10, align 8
  %12 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 11
  %13 = load i8, i8* %12, align 8, !range !2
  %14 = icmp eq i8 %13, 0
  %15 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13
  %16 = select i1 %14, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %15
  %17 = call i32 %11(%struct.VkDevice_T* %8, %struct.VkBufferCreateInfo* %1, %struct.VkAllocationCallbacks* %16, %struct.VkBuffer_T** nonnull %5) #15
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %33

19:                                               ; preds = %4
  %20 = bitcast %struct.VkMemoryRequirements* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 24, i1 false)
  %21 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 10
  %22 = load void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)** %21, align 8
  %23 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %5, align 8
  call void %22(%struct.VkDevice_T* %8, %struct.VkBuffer_T* %23, %struct.VkMemoryRequirements* nonnull %6) #15
  %24 = getelementptr inbounds %struct.VkMemoryRequirements, %struct.VkMemoryRequirements* %6, i64 0, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = call i32 @vmaFindMemoryTypeIndex(%struct.VmaAllocator_T* %0, i32 %25, %struct.VmaAllocationCreateInfo* %2, i32* %3)
  %27 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 13
  %28 = load void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)** %27, align 8
  %29 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %5, align 8
  %30 = load i8, i8* %12, align 8, !range !2
  %31 = icmp eq i8 %30, 0
  %32 = select i1 %31, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %15
  call void %28(%struct.VkDevice_T* %8, %struct.VkBuffer_T* %29, %struct.VkAllocationCallbacks* %32) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #15
  br label %33

33:                                               ; preds = %19, %4
  %34 = phi i32 [ %26, %19 ], [ %17, %4 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #15
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaFindMemoryTypeIndexForImageInfo(%struct.VmaAllocator_T*, %struct.VkImageCreateInfo*, %struct.VmaAllocationCreateInfo* nocapture readonly, i32* nocapture) local_unnamed_addr #0 {
  %5 = alloca %struct.VkImage_T*, align 8
  %6 = alloca %struct.VkMemoryRequirements, align 8
  %7 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %8 = load %struct.VkDevice_T*, %struct.VkDevice_T** %7, align 8
  %9 = bitcast %struct.VkImage_T** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #15
  store %struct.VkImage_T* null, %struct.VkImage_T** %5, align 8
  %10 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 14
  %11 = load i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)*, i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)** %10, align 8
  %12 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 11
  %13 = load i8, i8* %12, align 8, !range !2
  %14 = icmp eq i8 %13, 0
  %15 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13
  %16 = select i1 %14, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %15
  %17 = call i32 %11(%struct.VkDevice_T* %8, %struct.VkImageCreateInfo* %1, %struct.VkAllocationCallbacks* %16, %struct.VkImage_T** nonnull %5) #15
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %33

19:                                               ; preds = %4
  %20 = bitcast %struct.VkMemoryRequirements* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 0, i64 24, i1 false)
  %21 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 11
  %22 = load void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)** %21, align 8
  %23 = load %struct.VkImage_T*, %struct.VkImage_T** %5, align 8
  call void %22(%struct.VkDevice_T* %8, %struct.VkImage_T* %23, %struct.VkMemoryRequirements* nonnull %6) #15
  %24 = getelementptr inbounds %struct.VkMemoryRequirements, %struct.VkMemoryRequirements* %6, i64 0, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = call i32 @vmaFindMemoryTypeIndex(%struct.VmaAllocator_T* %0, i32 %25, %struct.VmaAllocationCreateInfo* %2, i32* %3)
  %27 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 15
  %28 = load void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)** %27, align 8
  %29 = load %struct.VkImage_T*, %struct.VkImage_T** %5, align 8
  %30 = load i8, i8* %12, align 8, !range !2
  %31 = icmp eq i8 %30, 0
  %32 = select i1 %31, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %15
  call void %28(%struct.VkDevice_T* %8, %struct.VkImage_T* %29, %struct.VkAllocationCallbacks* %32) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #15
  br label %33

33:                                               ; preds = %19, %4
  %34 = phi i32 [ %26, %19 ], [ %17, %4 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #15
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaCreatePool(%struct.VmaAllocator_T*, %struct.VmaPoolCreateInfo* nocapture readonly, %struct.VmaPool_T** nocapture) local_unnamed_addr #0 {
  %4 = tail call i32 @_ZN14VmaAllocator_T10CreatePoolEPK17VmaPoolCreateInfoPP9VmaPool_T(%struct.VmaAllocator_T* %0, %struct.VmaPoolCreateInfo* %1, %struct.VmaPool_T** %2)
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vmaDestroyPool(%struct.VmaAllocator_T*, %struct.VmaPool_T*) local_unnamed_addr #0 {
  %3 = icmp eq %struct.VmaPool_T* %1, null
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  tail call void @_ZN14VmaAllocator_T11DestroyPoolEP9VmaPool_T(%struct.VmaAllocator_T* %0, %struct.VmaPool_T* nonnull %1)
  br label %5

5:                                                ; preds = %2, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vmaGetPoolStats(%struct.VmaAllocator_T* nocapture readnone, %struct.VmaPool_T*, %struct.VmaPoolStats*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %1, i64 0, i32 0, i32 13
  %5 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %1, i64 0, i32 0, i32 0
  %6 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %5, align 8
  %7 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %6, i64 0, i32 0
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  %10 = select i1 %9, %class.VmaRWMutex* null, %class.VmaRWMutex* %4
  br i1 %9, label %13, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %10, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %12) #15
  br label %13

13:                                               ; preds = %11, %3
  %14 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %1, i64 0, i32 0, i32 16, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %struct.VmaPoolStats, %struct.VmaPoolStats* %2, i64 0, i32 5
  %17 = bitcast %struct.VmaPoolStats* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 40, i1 false) #15
  store i64 %15, i64* %16, align 8
  %18 = icmp eq i64 %15, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %1, i64 0, i32 0, i32 16, i32 1
  br label %24

21:                                               ; preds = %24, %13
  br i1 %9, label %39, label %22

22:                                               ; preds = %21
  %23 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %10, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %23) #15
  br label %39

24:                                               ; preds = %24, %19
  %25 = phi i64 [ 0, %19 ], [ %37, %24 ]
  %26 = phi i32 [ 0, %19 ], [ %36, %24 ]
  %27 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %20, align 8
  %28 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %27, i64 %25
  %29 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %28, align 8
  %30 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %29, i64 0, i32 0
  %31 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %30, align 8
  %32 = bitcast %class.VmaBlockMetadata* %31 to void (%class.VmaBlockMetadata*, %struct.VmaPoolStats*)***
  %33 = load void (%class.VmaBlockMetadata*, %struct.VmaPoolStats*)**, void (%class.VmaBlockMetadata*, %struct.VmaPoolStats*)*** %32, align 8
  %34 = getelementptr inbounds void (%class.VmaBlockMetadata*, %struct.VmaPoolStats*)*, void (%class.VmaBlockMetadata*, %struct.VmaPoolStats*)** %33, i64 9
  %35 = load void (%class.VmaBlockMetadata*, %struct.VmaPoolStats*)*, void (%class.VmaBlockMetadata*, %struct.VmaPoolStats*)** %34, align 8
  tail call void %35(%class.VmaBlockMetadata* %31, %struct.VmaPoolStats* dereferenceable(48) %2) #15
  %36 = add i32 %26, 1
  %37 = zext i32 %36 to i64
  %38 = icmp ugt i64 %15, %37
  br i1 %38, label %24, label %21

39:                                               ; preds = %21, %22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vmaMakePoolAllocationsLost(%struct.VmaAllocator_T* nocapture readonly, %struct.VmaPool_T*, i64*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 26, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i32, i32* %4 seq_cst, align 4
  %6 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %1, i64 0, i32 0, i32 13
  %7 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %1, i64 0, i32 0, i32 0
  %8 = load %struct.VmaAllocator_T*, %struct.VmaAllocator_T** %7, align 8
  %9 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %8, i64 0, i32 0
  %10 = load i8, i8* %9, align 8, !range !2
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, %class.VmaRWMutex* null, %class.VmaRWMutex* %6
  br i1 %11, label %15, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %12, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %14) #15
  br label %15

15:                                               ; preds = %13, %3
  %16 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %1, i64 0, i32 0, i32 16, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %1, i64 0, i32 0, i32 16, i32 1
  %21 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %1, i64 0, i32 0, i32 8
  br label %25

22:                                               ; preds = %25, %15
  %23 = phi i64 [ 0, %15 ], [ %41, %25 ]
  %24 = icmp eq i64* %2, null
  br i1 %24, label %47, label %46

25:                                               ; preds = %25, %19
  %26 = phi i64 [ 0, %19 ], [ %43, %25 ]
  %27 = phi i64 [ 0, %19 ], [ %41, %25 ]
  %28 = phi i32 [ 0, %19 ], [ %42, %25 ]
  %29 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %20, align 8
  %30 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %29, i64 %26
  %31 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %30, align 8
  %32 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %31, i64 0, i32 0
  %33 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %32, align 8
  %34 = load i32, i32* %21, align 8
  %35 = bitcast %class.VmaBlockMetadata* %33 to i32 (%class.VmaBlockMetadata*, i32, i32)***
  %36 = load i32 (%class.VmaBlockMetadata*, i32, i32)**, i32 (%class.VmaBlockMetadata*, i32, i32)*** %35, align 8
  %37 = getelementptr inbounds i32 (%class.VmaBlockMetadata*, i32, i32)*, i32 (%class.VmaBlockMetadata*, i32, i32)** %36, i64 13
  %38 = load i32 (%class.VmaBlockMetadata*, i32, i32)*, i32 (%class.VmaBlockMetadata*, i32, i32)** %37, align 8
  %39 = tail call i32 %38(%class.VmaBlockMetadata* %33, i32 %5, i32 %34) #15
  %40 = zext i32 %39 to i64
  %41 = add i64 %27, %40
  %42 = add i32 %28, 1
  %43 = zext i32 %42 to i64
  %44 = load i64, i64* %16, align 8
  %45 = icmp ugt i64 %44, %43
  br i1 %45, label %25, label %22

46:                                               ; preds = %22
  store i64 %23, i64* %2, align 8
  br label %47

47:                                               ; preds = %46, %22
  br i1 %11, label %50, label %48

48:                                               ; preds = %47
  %49 = getelementptr inbounds %class.VmaRWMutex, %class.VmaRWMutex* %12, i64 0, i32 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %49) #15
  br label %50

50:                                               ; preds = %47, %48
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @vmaCheckPoolCorruption(%struct.VmaAllocator_T* nocapture readnone, %struct.VmaPool_T* nocapture readnone) local_unnamed_addr #10 {
  ret i32 -8
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vmaGetPoolName(%struct.VmaAllocator_T* nocapture readnone, %struct.VmaPool_T* nocapture readonly, i8** nocapture) local_unnamed_addr #6 {
  %4 = getelementptr inbounds %struct.VmaPool_T, %struct.VmaPool_T* %1, i64 0, i32 2
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast i8** %2 to i64*
  store i64 %6, i64* %7, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vmaSetPoolName(%struct.VmaAllocator_T* nocapture readnone, %struct.VmaPool_T* nocapture, i8* readonly) local_unnamed_addr #0 {
  tail call void @_ZN9VmaPool_T7SetNameEPKc(%struct.VmaPool_T* %1, i8* %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaAllocateMemory(%struct.VmaAllocator_T*, %struct.VkMemoryRequirements* nocapture readonly, %struct.VmaAllocationCreateInfo* nocapture readonly, %struct.VmaAllocation_T** nocapture, %struct.VmaAllocationInfo*) local_unnamed_addr #0 {
  %6 = tail call i32 @_ZN14VmaAllocator_T14AllocateMemoryERK20VkMemoryRequirementsbbP10VkBuffer_TjP9VkImage_TRK23VmaAllocationCreateInfo20VmaSuballocationTypemPP15VmaAllocation_T(%struct.VmaAllocator_T* %0, %struct.VkMemoryRequirements* dereferenceable(24) %1, i1 zeroext false, i1 zeroext false, %struct.VkBuffer_T* null, i32 -1, %struct.VkImage_T* null, %struct.VmaAllocationCreateInfo* dereferenceable(40) %2, i32 1, i64 1, %struct.VmaAllocation_T** %3)
  %7 = icmp ne %struct.VmaAllocationInfo* %4, null
  %8 = icmp eq i32 %6, 0
  %9 = and i1 %7, %8
  br i1 %9, label %10, label %12

10:                                               ; preds = %5
  %11 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %3, align 8
  tail call void @_ZN14VmaAllocator_T17GetAllocationInfoEP15VmaAllocation_TP17VmaAllocationInfo(%struct.VmaAllocator_T* %0, %struct.VmaAllocation_T* %11, %struct.VmaAllocationInfo* nonnull %4)
  br label %12

12:                                               ; preds = %10, %5
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaAllocateMemoryPages(%struct.VmaAllocator_T*, %struct.VkMemoryRequirements* nocapture readonly, %struct.VmaAllocationCreateInfo* nocapture readonly, i64, %struct.VmaAllocation_T** nocapture, %struct.VmaAllocationInfo*) local_unnamed_addr #0 {
  %7 = icmp eq i64 %3, 0
  br i1 %7, label %20, label %8

8:                                                ; preds = %6
  %9 = tail call i32 @_ZN14VmaAllocator_T14AllocateMemoryERK20VkMemoryRequirementsbbP10VkBuffer_TjP9VkImage_TRK23VmaAllocationCreateInfo20VmaSuballocationTypemPP15VmaAllocation_T(%struct.VmaAllocator_T* %0, %struct.VkMemoryRequirements* dereferenceable(24) %1, i1 zeroext false, i1 zeroext false, %struct.VkBuffer_T* null, i32 -1, %struct.VkImage_T* null, %struct.VmaAllocationCreateInfo* dereferenceable(40) %2, i32 1, i64 %3, %struct.VmaAllocation_T** %4)
  %10 = icmp ne %struct.VmaAllocationInfo* %5, null
  %11 = icmp eq i32 %9, 0
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %20

13:                                               ; preds = %8, %13
  %14 = phi i64 [ %18, %13 ], [ 0, %8 ]
  %15 = getelementptr inbounds %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %4, i64 %14
  %16 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %15, align 8
  %17 = getelementptr inbounds %struct.VmaAllocationInfo, %struct.VmaAllocationInfo* %5, i64 %14
  tail call void @_ZN14VmaAllocator_T17GetAllocationInfoEP15VmaAllocation_TP17VmaAllocationInfo(%struct.VmaAllocator_T* %0, %struct.VmaAllocation_T* %16, %struct.VmaAllocationInfo* %17)
  %18 = add nuw i64 %14, 1
  %19 = icmp eq i64 %18, %3
  br i1 %19, label %20, label %13

20:                                               ; preds = %13, %8, %6
  %21 = phi i32 [ 0, %6 ], [ %9, %8 ], [ 0, %13 ]
  ret i32 %21
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaAllocateMemoryForBuffer(%struct.VmaAllocator_T*, %struct.VkBuffer_T*, %struct.VmaAllocationCreateInfo* nocapture readonly, %struct.VmaAllocation_T** nocapture, %struct.VmaAllocationInfo*) local_unnamed_addr #0 {
  %6 = alloca %struct.VkBufferMemoryRequirementsInfo2, align 8
  %7 = alloca %struct.VkMemoryDedicatedRequirements, align 8
  %8 = alloca %struct.VkMemoryRequirements2, align 8
  %9 = alloca %struct.VkMemoryRequirements, align 8
  %10 = bitcast %struct.VkMemoryRequirements* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 24, i1 false)
  %11 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %18

14:                                               ; preds = %5
  %15 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = icmp ugt i32 %16, 4198399
  br i1 %17, label %18, label %40

18:                                               ; preds = %14, %5
  %19 = bitcast %struct.VkBufferMemoryRequirementsInfo2* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %19, i8* align 8 bitcast ({ i32, [4 x i8], i8*, %struct.VkBuffer_T* }* @__const._ZNK14VmaAllocator_T27GetBufferMemoryRequirementsEP10VkBuffer_TR20VkMemoryRequirementsRbS4_.memReqInfo to i8*), i64 16, i1 false) #15
  %20 = getelementptr inbounds %struct.VkBufferMemoryRequirementsInfo2, %struct.VkBufferMemoryRequirementsInfo2* %6, i64 0, i32 2
  store %struct.VkBuffer_T* %1, %struct.VkBuffer_T** %20, align 8
  %21 = bitcast %struct.VkMemoryDedicatedRequirements* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %21, i8* align 8 bitcast ({ i32, [4 x i8], i8*, i32, i32 }* @__const._ZNK14VmaAllocator_T26GetImageMemoryRequirementsEP9VkImage_TR20VkMemoryRequirementsRbS4_.memDedicatedReq to i8*), i64 24, i1 false) #15
  %22 = bitcast %struct.VkMemoryRequirements2* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %22) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 0, i64 40, i1 false) #15
  %23 = getelementptr inbounds %struct.VkMemoryRequirements2, %struct.VkMemoryRequirements2* %8, i64 0, i32 0
  store i32 1000146003, i32* %23, align 8
  %24 = getelementptr inbounds %struct.VkMemoryRequirements2, %struct.VkMemoryRequirements2* %8, i64 0, i32 1
  %25 = getelementptr inbounds %struct.VkMemoryDedicatedRequirements, %struct.VkMemoryDedicatedRequirements* %7, i64 0, i32 1
  %26 = bitcast i8** %25 to i64*
  store i64 0, i64* %26, align 8
  %27 = bitcast i8** %24 to %struct.VkMemoryDedicatedRequirements**
  store %struct.VkMemoryDedicatedRequirements* %7, %struct.VkMemoryDedicatedRequirements** %27, align 8
  %28 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 17
  %29 = load void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)** %28, align 8
  %30 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %31 = load %struct.VkDevice_T*, %struct.VkDevice_T** %30, align 8
  call void %29(%struct.VkDevice_T* %31, %struct.VkBufferMemoryRequirementsInfo2* nonnull %6, %struct.VkMemoryRequirements2* nonnull %8) #15
  %32 = getelementptr inbounds %struct.VkMemoryRequirements2, %struct.VkMemoryRequirements2* %8, i64 0, i32 2
  %33 = bitcast %struct.VkMemoryRequirements* %32 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %10, i8* align 8 %33, i64 24, i1 false) #15
  %34 = getelementptr inbounds %struct.VkMemoryDedicatedRequirements, %struct.VkMemoryDedicatedRequirements* %7, i64 0, i32 3
  %35 = load i32, i32* %34, align 4
  %36 = icmp ne i32 %35, 0
  %37 = getelementptr inbounds %struct.VkMemoryDedicatedRequirements, %struct.VkMemoryDedicatedRequirements* %7, i64 0, i32 2
  %38 = load i32, i32* %37, align 8
  %39 = icmp ne i32 %38, 0
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %22) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #15
  br label %45

40:                                               ; preds = %14
  %41 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 10
  %42 = load void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)** %41, align 8
  %43 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %44 = load %struct.VkDevice_T*, %struct.VkDevice_T** %43, align 8
  call void %42(%struct.VkDevice_T* %44, %struct.VkBuffer_T* %1, %struct.VkMemoryRequirements* nonnull %9) #15
  br label %45

45:                                               ; preds = %18, %40
  %46 = phi i1 [ %36, %18 ], [ false, %40 ]
  %47 = phi i1 [ %39, %18 ], [ false, %40 ]
  %48 = call i32 @_ZN14VmaAllocator_T14AllocateMemoryERK20VkMemoryRequirementsbbP10VkBuffer_TjP9VkImage_TRK23VmaAllocationCreateInfo20VmaSuballocationTypemPP15VmaAllocation_T(%struct.VmaAllocator_T* %0, %struct.VkMemoryRequirements* nonnull dereferenceable(24) %9, i1 zeroext %46, i1 zeroext %47, %struct.VkBuffer_T* %1, i32 -1, %struct.VkImage_T* null, %struct.VmaAllocationCreateInfo* dereferenceable(40) %2, i32 2, i64 1, %struct.VmaAllocation_T** %3)
  %49 = icmp ne %struct.VmaAllocationInfo* %4, null
  %50 = icmp eq i32 %48, 0
  %51 = and i1 %49, %50
  br i1 %51, label %52, label %54

52:                                               ; preds = %45
  %53 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %3, align 8
  call void @_ZN14VmaAllocator_T17GetAllocationInfoEP15VmaAllocation_TP17VmaAllocationInfo(%struct.VmaAllocator_T* %0, %struct.VmaAllocation_T* %53, %struct.VmaAllocationInfo* nonnull %4)
  br label %54

54:                                               ; preds = %52, %45
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #15
  ret i32 %48
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaAllocateMemoryForImage(%struct.VmaAllocator_T*, %struct.VkImage_T*, %struct.VmaAllocationCreateInfo* nocapture readonly, %struct.VmaAllocation_T** nocapture, %struct.VmaAllocationInfo*) local_unnamed_addr #0 {
  %6 = alloca %struct.VkImageMemoryRequirementsInfo2, align 8
  %7 = alloca %struct.VkMemoryDedicatedRequirements, align 8
  %8 = alloca %struct.VkMemoryRequirements2, align 8
  %9 = alloca %struct.VkMemoryRequirements, align 8
  %10 = bitcast %struct.VkMemoryRequirements* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 24, i1 false)
  %11 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %18

14:                                               ; preds = %5
  %15 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = icmp ugt i32 %16, 4198399
  br i1 %17, label %18, label %40

18:                                               ; preds = %14, %5
  %19 = bitcast %struct.VkImageMemoryRequirementsInfo2* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %19, i8* align 8 bitcast ({ i32, [4 x i8], i8*, %struct.VkImage_T* }* @__const._ZNK14VmaAllocator_T26GetImageMemoryRequirementsEP9VkImage_TR20VkMemoryRequirementsRbS4_.memReqInfo to i8*), i64 16, i1 false) #15
  %20 = getelementptr inbounds %struct.VkImageMemoryRequirementsInfo2, %struct.VkImageMemoryRequirementsInfo2* %6, i64 0, i32 2
  store %struct.VkImage_T* %1, %struct.VkImage_T** %20, align 8
  %21 = bitcast %struct.VkMemoryDedicatedRequirements* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %21, i8* align 8 bitcast ({ i32, [4 x i8], i8*, i32, i32 }* @__const._ZNK14VmaAllocator_T26GetImageMemoryRequirementsEP9VkImage_TR20VkMemoryRequirementsRbS4_.memDedicatedReq to i8*), i64 24, i1 false) #15
  %22 = bitcast %struct.VkMemoryRequirements2* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %22) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 0, i64 40, i1 false) #15
  %23 = getelementptr inbounds %struct.VkMemoryRequirements2, %struct.VkMemoryRequirements2* %8, i64 0, i32 0
  store i32 1000146003, i32* %23, align 8
  %24 = getelementptr inbounds %struct.VkMemoryRequirements2, %struct.VkMemoryRequirements2* %8, i64 0, i32 1
  %25 = getelementptr inbounds %struct.VkMemoryDedicatedRequirements, %struct.VkMemoryDedicatedRequirements* %7, i64 0, i32 1
  %26 = bitcast i8** %25 to i64*
  store i64 0, i64* %26, align 8
  %27 = bitcast i8** %24 to %struct.VkMemoryDedicatedRequirements**
  store %struct.VkMemoryDedicatedRequirements* %7, %struct.VkMemoryDedicatedRequirements** %27, align 8
  %28 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 18
  %29 = load void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)** %28, align 8
  %30 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %31 = load %struct.VkDevice_T*, %struct.VkDevice_T** %30, align 8
  call void %29(%struct.VkDevice_T* %31, %struct.VkImageMemoryRequirementsInfo2* nonnull %6, %struct.VkMemoryRequirements2* nonnull %8) #15
  %32 = getelementptr inbounds %struct.VkMemoryRequirements2, %struct.VkMemoryRequirements2* %8, i64 0, i32 2
  %33 = bitcast %struct.VkMemoryRequirements* %32 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %10, i8* align 8 %33, i64 24, i1 false) #15
  %34 = getelementptr inbounds %struct.VkMemoryDedicatedRequirements, %struct.VkMemoryDedicatedRequirements* %7, i64 0, i32 3
  %35 = load i32, i32* %34, align 4
  %36 = icmp ne i32 %35, 0
  %37 = getelementptr inbounds %struct.VkMemoryDedicatedRequirements, %struct.VkMemoryDedicatedRequirements* %7, i64 0, i32 2
  %38 = load i32, i32* %37, align 8
  %39 = icmp ne i32 %38, 0
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %22) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #15
  br label %45

40:                                               ; preds = %14
  %41 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 11
  %42 = load void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)** %41, align 8
  %43 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %44 = load %struct.VkDevice_T*, %struct.VkDevice_T** %43, align 8
  call void %42(%struct.VkDevice_T* %44, %struct.VkImage_T* %1, %struct.VkMemoryRequirements* nonnull %9) #15
  br label %45

45:                                               ; preds = %18, %40
  %46 = phi i1 [ %36, %18 ], [ false, %40 ]
  %47 = phi i1 [ %39, %18 ], [ false, %40 ]
  %48 = call i32 @_ZN14VmaAllocator_T14AllocateMemoryERK20VkMemoryRequirementsbbP10VkBuffer_TjP9VkImage_TRK23VmaAllocationCreateInfo20VmaSuballocationTypemPP15VmaAllocation_T(%struct.VmaAllocator_T* %0, %struct.VkMemoryRequirements* nonnull dereferenceable(24) %9, i1 zeroext %46, i1 zeroext %47, %struct.VkBuffer_T* null, i32 -1, %struct.VkImage_T* %1, %struct.VmaAllocationCreateInfo* dereferenceable(40) %2, i32 3, i64 1, %struct.VmaAllocation_T** %3)
  %49 = icmp ne %struct.VmaAllocationInfo* %4, null
  %50 = icmp eq i32 %48, 0
  %51 = and i1 %49, %50
  br i1 %51, label %52, label %54

52:                                               ; preds = %45
  %53 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %3, align 8
  call void @_ZN14VmaAllocator_T17GetAllocationInfoEP15VmaAllocation_TP17VmaAllocationInfo(%struct.VmaAllocator_T* %0, %struct.VmaAllocation_T* %53, %struct.VmaAllocationInfo* nonnull %4)
  br label %54

54:                                               ; preds = %52, %45
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #15
  ret i32 %48
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vmaFreeMemory(%struct.VmaAllocator_T*, %struct.VmaAllocation_T*) local_unnamed_addr #0 {
  %3 = alloca %struct.VmaAllocation_T*, align 8
  store %struct.VmaAllocation_T* %1, %struct.VmaAllocation_T** %3, align 8
  %4 = icmp eq %struct.VmaAllocation_T* %1, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %2
  call void @_ZN14VmaAllocator_T10FreeMemoryEmPKP15VmaAllocation_T(%struct.VmaAllocator_T* %0, i64 1, %struct.VmaAllocation_T** nonnull %3)
  br label %6

6:                                                ; preds = %2, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vmaFreeMemoryPages(%struct.VmaAllocator_T*, i64, %struct.VmaAllocation_T** nocapture readonly) local_unnamed_addr #0 {
  %4 = icmp eq i64 %1, 0
  br i1 %4, label %6, label %5

5:                                                ; preds = %3
  tail call void @_ZN14VmaAllocator_T10FreeMemoryEmPKP15VmaAllocation_T(%struct.VmaAllocator_T* %0, i64 %1, %struct.VmaAllocation_T** %2)
  br label %6

6:                                                ; preds = %3, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @vmaResizeAllocation(%struct.VmaAllocator_T* nocapture readnone, %struct.VmaAllocation_T* nocapture readonly, i64) local_unnamed_addr #6 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %14, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i32, i32* %6 seq_cst, align 4
  %8 = icmp eq i32 %7, -1
  br i1 %8, label %14, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, %2
  %13 = select i1 %12, i32 0, i32 -1000069000
  br label %14

14:                                               ; preds = %3, %5, %9
  %15 = phi i32 [ -1000011001, %5 ], [ -1000011001, %3 ], [ %13, %9 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vmaGetAllocationInfo(%struct.VmaAllocator_T* nocapture readonly, %struct.VmaAllocation_T*, %struct.VmaAllocationInfo* nocapture) local_unnamed_addr #0 {
  tail call void @_ZN14VmaAllocator_T17GetAllocationInfoEP15VmaAllocation_TP17VmaAllocationInfo(%struct.VmaAllocator_T* %0, %struct.VmaAllocation_T* %1, %struct.VmaAllocationInfo* %2)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @vmaTouchAllocation(%struct.VmaAllocator_T* nocapture readonly, %struct.VmaAllocation_T* nocapture) local_unnamed_addr #6 {
  %3 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 8
  %5 = icmp eq i8 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 26, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 seq_cst, align 4
  br label %28

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 2
  %11 = load i8, i8* %10, align 8, !range !2
  %12 = icmp eq i8 %11, 0
  %13 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 26, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 seq_cst, align 4
  br i1 %12, label %28, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 seq_cst, align 4
  %18 = icmp eq i32 %17, -1
  br i1 %18, label %40, label %19

19:                                               ; preds = %15, %22
  %20 = phi i32 [ %26, %22 ], [ %17, %15 ]
  %21 = icmp eq i32 %20, %14
  br i1 %21, label %40, label %22

22:                                               ; preds = %19
  %23 = cmpxchg weak i32* %16, i32 %20, i32 %14 seq_cst seq_cst
  %24 = extractvalue { i32, i1 } %23, 1
  %25 = extractvalue { i32, i1 } %23, 0
  %26 = select i1 %24, i32 %14, i32 %25
  %27 = icmp eq i32 %26, -1
  br i1 %27, label %40, label %19

28:                                               ; preds = %9, %6
  %29 = phi i32 [ %8, %6 ], [ %14, %9 ]
  %30 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 seq_cst, align 4
  %32 = icmp eq i32 %31, %29
  br i1 %32, label %40, label %33

33:                                               ; preds = %28, %33
  %34 = phi i32 [ %38, %33 ], [ %31, %28 ]
  %35 = cmpxchg weak i32* %30, i32 %34, i32 %29 seq_cst seq_cst
  %36 = extractvalue { i32, i1 } %35, 1
  %37 = extractvalue { i32, i1 } %35, 0
  %38 = select i1 %36, i32 %29, i32 %37
  %39 = icmp eq i32 %38, %29
  br i1 %39, label %40, label %33

40:                                               ; preds = %19, %22, %33, %15, %28
  %41 = phi i32 [ 1, %28 ], [ 0, %15 ], [ 1, %33 ], [ 0, %22 ], [ 1, %19 ]
  ret i32 %41
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vmaSetAllocationUserData(%struct.VmaAllocator_T* readonly, %struct.VmaAllocation_T* nocapture, i8*) local_unnamed_addr #0 {
  tail call void @_ZN15VmaAllocation_T11SetUserDataEP14VmaAllocator_TPv(%struct.VmaAllocation_T* %1, %struct.VmaAllocator_T* %0, i8* %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vmaCreateLostAllocation(%struct.VmaAllocator_T*, %struct.VmaAllocation_T** nocapture) local_unnamed_addr #0 {
  tail call void @_ZN14VmaAllocator_T20CreateLostAllocationEPP15VmaAllocation_T(%struct.VmaAllocator_T* %0, %struct.VmaAllocation_T** %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaMapMemory(%struct.VmaAllocator_T* nocapture readonly, %struct.VmaAllocation_T* nocapture, i8**) local_unnamed_addr #0 {
  %4 = tail call i32 @_ZN14VmaAllocator_T3MapEP15VmaAllocation_TPPv(%struct.VmaAllocator_T* %0, %struct.VmaAllocation_T* %1, i8** %2)
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vmaUnmapMemory(%struct.VmaAllocator_T* nocapture readonly, %struct.VmaAllocation_T* nocapture) local_unnamed_addr #0 {
  tail call void @_ZN14VmaAllocator_T5UnmapEP15VmaAllocation_T(%struct.VmaAllocator_T* %0, %struct.VmaAllocation_T* %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaFlushAllocation(%struct.VmaAllocator_T* nocapture readonly, %struct.VmaAllocation_T* nocapture readonly, i64, i64) local_unnamed_addr #0 {
  %5 = alloca %struct.VkMappedMemoryRange, align 8
  %6 = bitcast %struct.VkMappedMemoryRange* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %6) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 40, i1 false) #15
  %7 = call zeroext i1 @_ZNK14VmaAllocator_T25GetFlushOrInvalidateRangeEP15VmaAllocation_TmmR19VkMappedMemoryRange(%struct.VmaAllocator_T* %0, %struct.VmaAllocation_T* %1, i64 %2, i64 %3, %struct.VkMappedMemoryRange* nonnull dereferenceable(40) %5) #15
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 6
  %10 = load i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)** %9, align 8
  %11 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %12 = load %struct.VkDevice_T*, %struct.VkDevice_T** %11, align 8
  %13 = call i32 %10(%struct.VkDevice_T* %12, i32 1, %struct.VkMappedMemoryRange* nonnull %5) #15
  br label %14

14:                                               ; preds = %4, %8
  %15 = phi i32 [ %13, %8 ], [ 0, %4 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %6) #15
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaInvalidateAllocation(%struct.VmaAllocator_T* nocapture readonly, %struct.VmaAllocation_T* nocapture readonly, i64, i64) local_unnamed_addr #0 {
  %5 = alloca %struct.VkMappedMemoryRange, align 8
  %6 = bitcast %struct.VkMappedMemoryRange* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %6) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 40, i1 false) #15
  %7 = call zeroext i1 @_ZNK14VmaAllocator_T25GetFlushOrInvalidateRangeEP15VmaAllocation_TmmR19VkMappedMemoryRange(%struct.VmaAllocator_T* %0, %struct.VmaAllocation_T* %1, i64 %2, i64 %3, %struct.VkMappedMemoryRange* nonnull dereferenceable(40) %5) #15
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 7
  %10 = load i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)*, i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)** %9, align 8
  %11 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %12 = load %struct.VkDevice_T*, %struct.VkDevice_T** %11, align 8
  %13 = call i32 %10(%struct.VkDevice_T* %12, i32 1, %struct.VkMappedMemoryRange* nonnull %5) #15
  br label %14

14:                                               ; preds = %4, %8
  %15 = phi i32 [ %13, %8 ], [ 0, %4 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %6) #15
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaFlushAllocations(%struct.VmaAllocator_T*, i32, %struct.VmaAllocation_T** nocapture readonly, i64* readonly, i64* readonly) local_unnamed_addr #0 {
  %6 = icmp eq i32 %1, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %5
  %8 = tail call i32 @_ZN14VmaAllocator_T28FlushOrInvalidateAllocationsEjPKP15VmaAllocation_TPKmS5_19VMA_CACHE_OPERATION(%struct.VmaAllocator_T* %0, i32 %1, %struct.VmaAllocation_T** %2, i64* %3, i64* %4, i32 0)
  br label %9

9:                                                ; preds = %5, %7
  %10 = phi i32 [ %8, %7 ], [ 0, %5 ]
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaInvalidateAllocations(%struct.VmaAllocator_T*, i32, %struct.VmaAllocation_T** nocapture readonly, i64* readonly, i64* readonly) local_unnamed_addr #0 {
  %6 = icmp eq i32 %1, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %5
  %8 = tail call i32 @_ZN14VmaAllocator_T28FlushOrInvalidateAllocationsEjPKP15VmaAllocation_TPKmS5_19VMA_CACHE_OPERATION(%struct.VmaAllocator_T* %0, i32 %1, %struct.VmaAllocation_T** %2, i64* %3, i64* %4, i32 1)
  br label %9

9:                                                ; preds = %5, %7
  %10 = phi i32 [ %8, %7 ], [ 0, %5 ]
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaCheckCorruption(%struct.VmaAllocator_T*, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 28, i32 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %7) #15
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %7) #15
  br label %8

8:                                                ; preds = %2, %6
  ret i32 -8
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaDefragment(%struct.VmaAllocator_T*, %struct.VmaAllocation_T**, i64, i32*, %struct.VmaDefragmentationInfo* readonly, %struct.VmaDefragmentationStats*) local_unnamed_addr #0 {
  %7 = alloca %struct.VmaDefragmentationInfo2, align 8
  %8 = alloca %struct.VmaDefragmentationContext_T*, align 8
  %9 = bitcast %struct.VmaDefragmentationInfo2* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %9) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 80, i1 false)
  %10 = trunc i64 %2 to i32
  %11 = getelementptr inbounds %struct.VmaDefragmentationInfo2, %struct.VmaDefragmentationInfo2* %7, i64 0, i32 1
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds %struct.VmaDefragmentationInfo2, %struct.VmaDefragmentationInfo2* %7, i64 0, i32 2
  store %struct.VmaAllocation_T** %1, %struct.VmaAllocation_T*** %12, align 8
  %13 = getelementptr inbounds %struct.VmaDefragmentationInfo2, %struct.VmaDefragmentationInfo2* %7, i64 0, i32 3
  store i32* %3, i32** %13, align 8
  %14 = icmp eq %struct.VmaDefragmentationInfo* %4, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %6
  %16 = getelementptr inbounds %struct.VmaDefragmentationInfo, %struct.VmaDefragmentationInfo* %4, i64 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %struct.VmaDefragmentationInfo, %struct.VmaDefragmentationInfo* %4, i64 0, i32 0
  %19 = load i64, i64* %18, align 8
  br label %20

20:                                               ; preds = %6, %15
  %21 = phi i32 [ %17, %15 ], [ -1, %6 ]
  %22 = phi i64 [ %19, %15 ], [ -1, %6 ]
  %23 = getelementptr inbounds %struct.VmaDefragmentationInfo2, %struct.VmaDefragmentationInfo2* %7, i64 0, i32 7
  store i32 %21, i32* %23, align 8
  %24 = getelementptr inbounds %struct.VmaDefragmentationInfo2, %struct.VmaDefragmentationInfo2* %7, i64 0, i32 6
  store i64 %22, i64* %24, align 8
  %25 = bitcast %struct.VmaDefragmentationContext_T** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #15
  store %struct.VmaDefragmentationContext_T* inttoptr (i64 -6148914691236517206 to %struct.VmaDefragmentationContext_T*), %struct.VmaDefragmentationContext_T** %8, align 8
  %26 = icmp eq i32 %10, 0
  br i1 %26, label %42, label %27

27:                                               ; preds = %20
  %28 = call i32 @_ZN14VmaAllocator_T20DefragmentationBeginERK23VmaDefragmentationInfo2P23VmaDefragmentationStatsPP27VmaDefragmentationContext_T(%struct.VmaAllocator_T* %0, %struct.VmaDefragmentationInfo2* nonnull dereferenceable(80) %7, %struct.VmaDefragmentationStats* %5, %struct.VmaDefragmentationContext_T** nonnull %8) #15
  %29 = icmp eq i32 %28, 1
  br i1 %29, label %30, label %42

30:                                               ; preds = %27
  %31 = load %struct.VmaDefragmentationContext_T*, %struct.VmaDefragmentationContext_T** %8, align 8
  %32 = icmp eq %struct.VmaDefragmentationContext_T* %31, null
  br i1 %32, label %42, label %33

33:                                               ; preds = %30
  tail call void @_ZN27VmaDefragmentationContext_TD2Ev(%struct.VmaDefragmentationContext_T* nonnull %31) #15
  %34 = bitcast %struct.VmaDefragmentationContext_T* %31 to i8*
  %35 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 3
  %36 = load void (i8*, i8*)*, void (i8*, i8*)** %35, align 8
  %37 = icmp eq void (i8*, i8*)* %36, null
  br i1 %37, label %41, label %38

38:                                               ; preds = %33
  %39 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 0
  %40 = load i8*, i8** %39, align 8
  tail call void %36(i8* %40, i8* nonnull %34) #15
  br label %42

41:                                               ; preds = %33
  tail call void @free(i8* %34) #15
  br label %42

42:                                               ; preds = %20, %41, %38, %30, %27
  %43 = phi i32 [ %28, %27 ], [ 0, %30 ], [ 0, %38 ], [ 0, %41 ], [ 0, %20 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #15
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %9) #15
  ret i32 %43
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaDefragmentationBegin(%struct.VmaAllocator_T*, %struct.VmaDefragmentationInfo2* nocapture readonly, %struct.VmaDefragmentationStats*, %struct.VmaDefragmentationContext_T** nocapture) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.VmaDefragmentationInfo2, %struct.VmaDefragmentationInfo2* %1, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.VmaDefragmentationInfo2, %struct.VmaDefragmentationInfo2* %1, i64 0, i32 4
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %14, label %12

12:                                               ; preds = %8, %4
  %13 = tail call i32 @_ZN14VmaAllocator_T20DefragmentationBeginERK23VmaDefragmentationInfo2P23VmaDefragmentationStatsPP27VmaDefragmentationContext_T(%struct.VmaAllocator_T* %0, %struct.VmaDefragmentationInfo2* dereferenceable(80) %1, %struct.VmaDefragmentationStats* %2, %struct.VmaDefragmentationContext_T** %3)
  br label %14

14:                                               ; preds = %8, %12
  %15 = phi i32 [ %13, %12 ], [ 0, %8 ]
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaDefragmentationEnd(%struct.VmaAllocator_T* nocapture readonly, %struct.VmaDefragmentationContext_T*) local_unnamed_addr #0 {
  %3 = icmp eq %struct.VmaDefragmentationContext_T* %1, null
  br i1 %3, label %13, label %4

4:                                                ; preds = %2
  tail call void @_ZN27VmaDefragmentationContext_TD2Ev(%struct.VmaDefragmentationContext_T* nonnull %1) #15
  %5 = bitcast %struct.VmaDefragmentationContext_T* %1 to i8*
  %6 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 3
  %7 = load void (i8*, i8*)*, void (i8*, i8*)** %6, align 8
  %8 = icmp eq void (i8*, i8*)* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13, i32 0
  %11 = load i8*, i8** %10, align 8
  tail call void %7(i8* %11, i8* nonnull %5) #15
  br label %13

12:                                               ; preds = %4
  tail call void @free(i8* %5) #15
  br label %13

13:                                               ; preds = %12, %9, %2
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaBeginDefragmentationPass(%struct.VmaAllocator_T* nocapture readnone, %struct.VmaDefragmentationContext_T*, %struct.VmaDefragmentationPassInfo* nocapture) local_unnamed_addr #0 {
  %4 = icmp eq %struct.VmaDefragmentationContext_T* %1, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.VmaDefragmentationPassInfo, %struct.VmaDefragmentationPassInfo* %2, i64 0, i32 0
  store i32 0, i32* %6, align 8
  br label %9

7:                                                ; preds = %3
  %8 = tail call i32 @_ZN27VmaDefragmentationContext_T19DefragmentPassBeginEP26VmaDefragmentationPassInfo(%struct.VmaDefragmentationContext_T* nonnull %1, %struct.VmaDefragmentationPassInfo* %2) #15
  br label %9

9:                                                ; preds = %7, %5
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaEndDefragmentationPass(%struct.VmaAllocator_T* nocapture readnone, %struct.VmaDefragmentationContext_T* readonly) local_unnamed_addr #0 {
  %3 = icmp eq %struct.VmaDefragmentationContext_T* %1, null
  br i1 %3, label %6, label %4

4:                                                ; preds = %2
  %5 = tail call i32 @_ZN27VmaDefragmentationContext_T17DefragmentPassEndEv(%struct.VmaDefragmentationContext_T* nonnull %1) #15
  br label %6

6:                                                ; preds = %2, %4
  %7 = phi i32 [ %5, %4 ], [ 0, %2 ]
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaBindBufferMemory(%struct.VmaAllocator_T* nocapture readonly, %struct.VmaAllocation_T* nocapture readonly, %struct.VkBuffer_T*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 5
  %5 = load i8, i8* %4, align 8
  switch i8 %5, label %37 [
    i8 2, label %6
    i8 1, label %15
  ]

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9
  %8 = bitcast %union.anon* %7 to %struct.VkDeviceMemory_T**
  %9 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %8, align 8
  %10 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 8
  %11 = load i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)** %10, align 8
  %12 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %13 = load %struct.VkDevice_T*, %struct.VkDevice_T** %12, align 8
  %14 = tail call i32 %11(%struct.VkDevice_T* %13, %struct.VkBuffer_T* %2, %struct.VkDeviceMemory_T* %9, i64 0) #15
  br label %37

15:                                               ; preds = %3
  %16 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 0
  %17 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %16, align 8
  %18 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %17, i64 0, i32 5
  %21 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 0
  %22 = load i8, i8* %21, align 8, !range !2
  %23 = icmp eq i8 %22, 0
  %24 = select i1 %23, %class.VmaMutex* null, %class.VmaMutex* %20
  br i1 %23, label %27, label %25

25:                                               ; preds = %15
  %26 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %24, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %26) #15
  br label %27

27:                                               ; preds = %25, %15
  %28 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %17, i64 0, i32 4
  %29 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %28, align 8
  %30 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 8
  %31 = load i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)** %30, align 8
  %32 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %33 = load %struct.VkDevice_T*, %struct.VkDevice_T** %32, align 8
  %34 = tail call i32 %31(%struct.VkDevice_T* %33, %struct.VkBuffer_T* %2, %struct.VkDeviceMemory_T* %29, i64 %19) #15
  br i1 %23, label %37, label %35

35:                                               ; preds = %27
  %36 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %24, i64 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %36) #15
  br label %37

37:                                               ; preds = %3, %6, %27, %35
  %38 = phi i32 [ 0, %3 ], [ %14, %6 ], [ %34, %27 ], [ %34, %35 ]
  ret i32 %38
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaBindBufferMemory2(%struct.VmaAllocator_T* nocapture readonly, %struct.VmaAllocation_T* nocapture readonly, i64, %struct.VkBuffer_T*, i8*) local_unnamed_addr #0 {
  %6 = tail call i32 @_ZN14VmaAllocator_T16BindBufferMemoryEP15VmaAllocation_TmP10VkBuffer_TPKv(%struct.VmaAllocator_T* %0, %struct.VmaAllocation_T* %1, i64 %2, %struct.VkBuffer_T* %3, i8* %4)
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaBindImageMemory(%struct.VmaAllocator_T* nocapture readonly, %struct.VmaAllocation_T* nocapture readonly, %struct.VkImage_T*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 5
  %5 = load i8, i8* %4, align 8
  switch i8 %5, label %37 [
    i8 2, label %6
    i8 1, label %15
  ]

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9
  %8 = bitcast %union.anon* %7 to %struct.VkDeviceMemory_T**
  %9 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %8, align 8
  %10 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 9
  %11 = load i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)** %10, align 8
  %12 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %13 = load %struct.VkDevice_T*, %struct.VkDevice_T** %12, align 8
  %14 = tail call i32 %11(%struct.VkDevice_T* %13, %struct.VkImage_T* %2, %struct.VkDeviceMemory_T* %9, i64 0) #15
  br label %37

15:                                               ; preds = %3
  %16 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 0
  %17 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %16, align 8
  %18 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %17, i64 0, i32 5
  %21 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 0
  %22 = load i8, i8* %21, align 8, !range !2
  %23 = icmp eq i8 %22, 0
  %24 = select i1 %23, %class.VmaMutex* null, %class.VmaMutex* %20
  br i1 %23, label %27, label %25

25:                                               ; preds = %15
  %26 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %24, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %26) #15
  br label %27

27:                                               ; preds = %25, %15
  %28 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %17, i64 0, i32 4
  %29 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %28, align 8
  %30 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 9
  %31 = load i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)** %30, align 8
  %32 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %33 = load %struct.VkDevice_T*, %struct.VkDevice_T** %32, align 8
  %34 = tail call i32 %31(%struct.VkDevice_T* %33, %struct.VkImage_T* %2, %struct.VkDeviceMemory_T* %29, i64 %19) #15
  br i1 %23, label %37, label %35

35:                                               ; preds = %27
  %36 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %24, i64 0, i32 0
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %36) #15
  br label %37

37:                                               ; preds = %3, %6, %27, %35
  %38 = phi i32 [ 0, %3 ], [ %14, %6 ], [ %34, %27 ], [ %34, %35 ]
  ret i32 %38
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaBindImageMemory2(%struct.VmaAllocator_T* nocapture readonly, %struct.VmaAllocation_T* nocapture readonly, i64, %struct.VkImage_T*, i8*) local_unnamed_addr #0 {
  %6 = tail call i32 @_ZN14VmaAllocator_T15BindImageMemoryEP15VmaAllocation_TmP9VkImage_TPKv(%struct.VmaAllocator_T* %0, %struct.VmaAllocation_T* %1, i64 %2, %struct.VkImage_T* %3, i8* %4)
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaCreateBuffer(%struct.VmaAllocator_T*, %struct.VkBufferCreateInfo*, %struct.VmaAllocationCreateInfo* nocapture readonly, %struct.VkBuffer_T**, %struct.VmaAllocation_T** nocapture, %struct.VmaAllocationInfo*) local_unnamed_addr #0 {
  %7 = alloca %struct.VkBufferMemoryRequirementsInfo2, align 8
  %8 = alloca %struct.VkMemoryDedicatedRequirements, align 8
  %9 = alloca %struct.VkMemoryRequirements2, align 8
  %10 = alloca %struct.VkMemoryRequirements, align 8
  %11 = getelementptr inbounds %struct.VkBufferCreateInfo, %struct.VkBufferCreateInfo* %1, i64 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %144, label %14

14:                                               ; preds = %6
  %15 = getelementptr inbounds %struct.VkBufferCreateInfo, %struct.VkBufferCreateInfo* %1, i64 0, i32 4
  %16 = load i32, i32* %15, align 8
  %17 = and i32 %16, 131072
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 7
  %21 = load i8, i8* %20, align 4, !range !2
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %144, label %23

23:                                               ; preds = %19, %14
  store %struct.VkBuffer_T* null, %struct.VkBuffer_T** %3, align 8
  store %struct.VmaAllocation_T* null, %struct.VmaAllocation_T** %4, align 8
  %24 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 12
  %25 = load i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)*, i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)** %24, align 8
  %26 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %27 = load %struct.VkDevice_T*, %struct.VkDevice_T** %26, align 8
  %28 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 11
  %29 = load i8, i8* %28, align 8, !range !2
  %30 = icmp eq i8 %29, 0
  %31 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13
  %32 = select i1 %30, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %31
  %33 = tail call i32 %25(%struct.VkDevice_T* %27, %struct.VkBufferCreateInfo* %1, %struct.VkAllocationCallbacks* %32, %struct.VkBuffer_T** %3) #15
  %34 = icmp sgt i32 %33, -1
  br i1 %34, label %35, label %144

35:                                               ; preds = %23
  %36 = bitcast %struct.VkMemoryRequirements* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %36) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 0, i64 24, i1 false)
  %37 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %3, align 8
  %38 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 3
  %39 = load i8, i8* %38, align 8, !range !2
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %45

41:                                               ; preds = %35
  %42 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = icmp ugt i32 %43, 4198399
  br i1 %44, label %45, label %66

45:                                               ; preds = %41, %35
  %46 = bitcast %struct.VkBufferMemoryRequirementsInfo2* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %46) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %46, i8* align 8 bitcast ({ i32, [4 x i8], i8*, %struct.VkBuffer_T* }* @__const._ZNK14VmaAllocator_T27GetBufferMemoryRequirementsEP10VkBuffer_TR20VkMemoryRequirementsRbS4_.memReqInfo to i8*), i64 16, i1 false) #15
  %47 = getelementptr inbounds %struct.VkBufferMemoryRequirementsInfo2, %struct.VkBufferMemoryRequirementsInfo2* %7, i64 0, i32 2
  store %struct.VkBuffer_T* %37, %struct.VkBuffer_T** %47, align 8
  %48 = bitcast %struct.VkMemoryDedicatedRequirements* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %48) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %48, i8* align 8 bitcast ({ i32, [4 x i8], i8*, i32, i32 }* @__const._ZNK14VmaAllocator_T26GetImageMemoryRequirementsEP9VkImage_TR20VkMemoryRequirementsRbS4_.memDedicatedReq to i8*), i64 24, i1 false) #15
  %49 = bitcast %struct.VkMemoryRequirements2* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %49) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %49, i8 0, i64 40, i1 false) #15
  %50 = getelementptr inbounds %struct.VkMemoryRequirements2, %struct.VkMemoryRequirements2* %9, i64 0, i32 0
  store i32 1000146003, i32* %50, align 8
  %51 = getelementptr inbounds %struct.VkMemoryRequirements2, %struct.VkMemoryRequirements2* %9, i64 0, i32 1
  %52 = getelementptr inbounds %struct.VkMemoryDedicatedRequirements, %struct.VkMemoryDedicatedRequirements* %8, i64 0, i32 1
  %53 = bitcast i8** %52 to i64*
  store i64 0, i64* %53, align 8
  %54 = bitcast i8** %51 to %struct.VkMemoryDedicatedRequirements**
  store %struct.VkMemoryDedicatedRequirements* %8, %struct.VkMemoryDedicatedRequirements** %54, align 8
  %55 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 17
  %56 = load void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)** %55, align 8
  %57 = load %struct.VkDevice_T*, %struct.VkDevice_T** %26, align 8
  call void %56(%struct.VkDevice_T* %57, %struct.VkBufferMemoryRequirementsInfo2* nonnull %7, %struct.VkMemoryRequirements2* nonnull %9) #15
  %58 = getelementptr inbounds %struct.VkMemoryRequirements2, %struct.VkMemoryRequirements2* %9, i64 0, i32 2
  %59 = bitcast %struct.VkMemoryRequirements* %58 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %36, i8* align 8 %59, i64 24, i1 false) #15
  %60 = getelementptr inbounds %struct.VkMemoryDedicatedRequirements, %struct.VkMemoryDedicatedRequirements* %8, i64 0, i32 3
  %61 = load i32, i32* %60, align 4
  %62 = icmp ne i32 %61, 0
  %63 = getelementptr inbounds %struct.VkMemoryDedicatedRequirements, %struct.VkMemoryDedicatedRequirements* %8, i64 0, i32 2
  %64 = load i32, i32* %63, align 8
  %65 = icmp ne i32 %64, 0
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %49) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %48) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %46) #15
  br label %70

66:                                               ; preds = %41
  %67 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 10
  %68 = load void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)** %67, align 8
  %69 = load %struct.VkDevice_T*, %struct.VkDevice_T** %26, align 8
  call void %68(%struct.VkDevice_T* %69, %struct.VkBuffer_T* %37, %struct.VkMemoryRequirements* nonnull %10) #15
  br label %70

70:                                               ; preds = %45, %66
  %71 = phi i1 [ %62, %45 ], [ false, %66 ]
  %72 = phi i1 [ %65, %45 ], [ false, %66 ]
  %73 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %3, align 8
  %74 = load i32, i32* %15, align 8
  %75 = call i32 @_ZN14VmaAllocator_T14AllocateMemoryERK20VkMemoryRequirementsbbP10VkBuffer_TjP9VkImage_TRK23VmaAllocationCreateInfo20VmaSuballocationTypemPP15VmaAllocation_T(%struct.VmaAllocator_T* %0, %struct.VkMemoryRequirements* nonnull dereferenceable(24) %10, i1 zeroext %71, i1 zeroext %72, %struct.VkBuffer_T* %73, i32 %74, %struct.VkImage_T* null, %struct.VmaAllocationCreateInfo* dereferenceable(40) %2, i32 2, i64 1, %struct.VmaAllocation_T** %4)
  %76 = icmp sgt i32 %75, -1
  br i1 %76, label %77, label %134

77:                                               ; preds = %70
  %78 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %2, i64 0, i32 0
  %79 = load i32, i32* %78, align 8
  %80 = trunc i32 %79 to i8
  %81 = icmp sgt i8 %80, -1
  br i1 %81, label %82, label %119

82:                                               ; preds = %77
  %83 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %4, align 8
  %84 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %3, align 8
  %85 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %83, i64 0, i32 5
  %86 = load i8, i8* %85, align 8
  switch i8 %86, label %119 [
    i8 2, label %87
    i8 1, label %95
  ]

87:                                               ; preds = %82
  %88 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %83, i64 0, i32 9
  %89 = bitcast %union.anon* %88 to %struct.VkDeviceMemory_T**
  %90 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %89, align 8
  %91 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 8
  %92 = load i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)** %91, align 8
  %93 = load %struct.VkDevice_T*, %struct.VkDevice_T** %26, align 8
  %94 = call i32 %92(%struct.VkDevice_T* %93, %struct.VkBuffer_T* %84, %struct.VkDeviceMemory_T* %90, i64 0) #15
  br label %116

95:                                               ; preds = %82
  %96 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %83, i64 0, i32 9, i32 0, i32 0
  %97 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %96, align 8
  %98 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %83, i64 0, i32 9, i32 0, i32 1
  %99 = load i64, i64* %98, align 8
  %100 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %97, i64 0, i32 5
  %101 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 0
  %102 = load i8, i8* %101, align 8, !range !2
  %103 = icmp eq i8 %102, 0
  %104 = select i1 %103, %class.VmaMutex* null, %class.VmaMutex* %100
  br i1 %103, label %107, label %105

105:                                              ; preds = %95
  %106 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %104, i64 0, i32 0
  call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %106) #15
  br label %107

107:                                              ; preds = %105, %95
  %108 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %97, i64 0, i32 4
  %109 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %108, align 8
  %110 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 8
  %111 = load i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)** %110, align 8
  %112 = load %struct.VkDevice_T*, %struct.VkDevice_T** %26, align 8
  %113 = call i32 %111(%struct.VkDevice_T* %112, %struct.VkBuffer_T* %84, %struct.VkDeviceMemory_T* %109, i64 %99) #15
  br i1 %103, label %116, label %114

114:                                              ; preds = %107
  %115 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %104, i64 0, i32 0
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %115) #15
  br label %116

116:                                              ; preds = %114, %107, %87
  %117 = phi i32 [ %94, %87 ], [ %113, %107 ], [ %113, %114 ]
  %118 = icmp sgt i32 %117, -1
  br i1 %118, label %119, label %126

119:                                              ; preds = %82, %77, %116
  %120 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %4, align 8
  %121 = load i32, i32* %15, align 8
  %122 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %120, i64 0, i32 11
  store i32 %121, i32* %122, align 4
  %123 = icmp eq %struct.VmaAllocationInfo* %5, null
  br i1 %123, label %142, label %124

124:                                              ; preds = %119
  %125 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %4, align 8
  call void @_ZN14VmaAllocator_T17GetAllocationInfoEP15VmaAllocation_TP17VmaAllocationInfo(%struct.VmaAllocator_T* %0, %struct.VmaAllocation_T* %125, %struct.VmaAllocationInfo* nonnull %5)
  br label %142

126:                                              ; preds = %116
  call void @_ZN14VmaAllocator_T10FreeMemoryEmPKP15VmaAllocation_T(%struct.VmaAllocator_T* %0, i64 1, %struct.VmaAllocation_T** %4)
  store %struct.VmaAllocation_T* null, %struct.VmaAllocation_T** %4, align 8
  %127 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 13
  %128 = load void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)** %127, align 8
  %129 = load %struct.VkDevice_T*, %struct.VkDevice_T** %26, align 8
  %130 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %3, align 8
  %131 = load i8, i8* %28, align 8, !range !2
  %132 = icmp eq i8 %131, 0
  %133 = select i1 %132, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %31
  call void %128(%struct.VkDevice_T* %129, %struct.VkBuffer_T* %130, %struct.VkAllocationCallbacks* %133) #15
  store %struct.VkBuffer_T* null, %struct.VkBuffer_T** %3, align 8
  br label %142

134:                                              ; preds = %70
  %135 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 13
  %136 = load void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)** %135, align 8
  %137 = load %struct.VkDevice_T*, %struct.VkDevice_T** %26, align 8
  %138 = load %struct.VkBuffer_T*, %struct.VkBuffer_T** %3, align 8
  %139 = load i8, i8* %28, align 8, !range !2
  %140 = icmp eq i8 %139, 0
  %141 = select i1 %140, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %31
  call void %136(%struct.VkDevice_T* %137, %struct.VkBuffer_T* %138, %struct.VkAllocationCallbacks* %141) #15
  store %struct.VkBuffer_T* null, %struct.VkBuffer_T** %3, align 8
  br label %142

142:                                              ; preds = %124, %119, %134, %126
  %143 = phi i32 [ %117, %126 ], [ %75, %134 ], [ 0, %119 ], [ 0, %124 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %36) #15
  br label %144

144:                                              ; preds = %142, %23, %19, %6
  %145 = phi i32 [ -1000011001, %6 ], [ -1000011001, %19 ], [ %143, %142 ], [ %33, %23 ]
  ret i32 %145
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vmaDestroyBuffer(%struct.VmaAllocator_T*, %struct.VkBuffer_T*, %struct.VmaAllocation_T*) local_unnamed_addr #0 {
  %4 = alloca %struct.VmaAllocation_T*, align 8
  store %struct.VmaAllocation_T* %2, %struct.VmaAllocation_T** %4, align 8
  %5 = icmp eq %struct.VkBuffer_T* %1, null
  %6 = icmp eq %struct.VmaAllocation_T* %2, null
  %7 = and i1 %5, %6
  br i1 %7, label %21, label %8

8:                                                ; preds = %3
  br i1 %5, label %19, label %9

9:                                                ; preds = %8
  %10 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 13
  %11 = load void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)** %10, align 8
  %12 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %13 = load %struct.VkDevice_T*, %struct.VkDevice_T** %12, align 8
  %14 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 11
  %15 = load i8, i8* %14, align 8, !range !2
  %16 = icmp eq i8 %15, 0
  %17 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13
  %18 = select i1 %16, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %17
  tail call void %11(%struct.VkDevice_T* %13, %struct.VkBuffer_T* nonnull %1, %struct.VkAllocationCallbacks* %18) #15
  br label %19

19:                                               ; preds = %8, %9
  br i1 %6, label %21, label %20

20:                                               ; preds = %19
  call void @_ZN14VmaAllocator_T10FreeMemoryEmPKP15VmaAllocation_T(%struct.VmaAllocator_T* %0, i64 1, %struct.VmaAllocation_T** nonnull %4)
  br label %21

21:                                               ; preds = %19, %3, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vmaCreateImage(%struct.VmaAllocator_T*, %struct.VkImageCreateInfo*, %struct.VmaAllocationCreateInfo* nocapture readonly, %struct.VkImage_T**, %struct.VmaAllocation_T** nocapture, %struct.VmaAllocationInfo*) local_unnamed_addr #0 {
  %7 = alloca %struct.VkImageMemoryRequirementsInfo2, align 8
  %8 = alloca %struct.VkMemoryDedicatedRequirements, align 8
  %9 = alloca %struct.VkMemoryRequirements2, align 8
  %10 = alloca %struct.VkMemoryRequirements, align 8
  %11 = getelementptr inbounds %struct.VkImageCreateInfo, %struct.VkImageCreateInfo* %1, i64 0, i32 5, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %155, label %14

14:                                               ; preds = %6
  %15 = getelementptr inbounds %struct.VkImageCreateInfo, %struct.VkImageCreateInfo* %1, i64 0, i32 5, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %155, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.VkImageCreateInfo, %struct.VkImageCreateInfo* %1, i64 0, i32 5, i32 2
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %155, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.VkImageCreateInfo, %struct.VkImageCreateInfo* %1, i64 0, i32 6
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %155, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.VkImageCreateInfo, %struct.VkImageCreateInfo* %1, i64 0, i32 7
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %155, label %30

30:                                               ; preds = %26
  store %struct.VkImage_T* null, %struct.VkImage_T** %3, align 8
  store %struct.VmaAllocation_T* null, %struct.VmaAllocation_T** %4, align 8
  %31 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 14
  %32 = load i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)*, i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)** %31, align 8
  %33 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %34 = load %struct.VkDevice_T*, %struct.VkDevice_T** %33, align 8
  %35 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 11
  %36 = load i8, i8* %35, align 8, !range !2
  %37 = icmp eq i8 %36, 0
  %38 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13
  %39 = select i1 %37, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %38
  %40 = tail call i32 %32(%struct.VkDevice_T* %34, %struct.VkImageCreateInfo* %1, %struct.VkAllocationCallbacks* %39, %struct.VkImage_T** %3) #15
  %41 = icmp sgt i32 %40, -1
  br i1 %41, label %42, label %155

42:                                               ; preds = %30
  %43 = getelementptr inbounds %struct.VkImageCreateInfo, %struct.VkImageCreateInfo* %1, i64 0, i32 9
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %44, 0
  %46 = select i1 %45, i32 5, i32 4
  %47 = bitcast %struct.VkMemoryRequirements* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %47) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %47, i8 0, i64 24, i1 false)
  %48 = load %struct.VkImage_T*, %struct.VkImage_T** %3, align 8
  %49 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 3
  %50 = load i8, i8* %49, align 8, !range !2
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %52, label %56

52:                                               ; preds = %42
  %53 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 2
  %54 = load i32, i32* %53, align 4
  %55 = icmp ugt i32 %54, 4198399
  br i1 %55, label %56, label %77

56:                                               ; preds = %52, %42
  %57 = bitcast %struct.VkImageMemoryRequirementsInfo2* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %57) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %57, i8* align 8 bitcast ({ i32, [4 x i8], i8*, %struct.VkImage_T* }* @__const._ZNK14VmaAllocator_T26GetImageMemoryRequirementsEP9VkImage_TR20VkMemoryRequirementsRbS4_.memReqInfo to i8*), i64 16, i1 false) #15
  %58 = getelementptr inbounds %struct.VkImageMemoryRequirementsInfo2, %struct.VkImageMemoryRequirementsInfo2* %7, i64 0, i32 2
  store %struct.VkImage_T* %48, %struct.VkImage_T** %58, align 8
  %59 = bitcast %struct.VkMemoryDedicatedRequirements* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %59) #15
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %59, i8* align 8 bitcast ({ i32, [4 x i8], i8*, i32, i32 }* @__const._ZNK14VmaAllocator_T26GetImageMemoryRequirementsEP9VkImage_TR20VkMemoryRequirementsRbS4_.memDedicatedReq to i8*), i64 24, i1 false) #15
  %60 = bitcast %struct.VkMemoryRequirements2* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %60) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %60, i8 0, i64 40, i1 false) #15
  %61 = getelementptr inbounds %struct.VkMemoryRequirements2, %struct.VkMemoryRequirements2* %9, i64 0, i32 0
  store i32 1000146003, i32* %61, align 8
  %62 = getelementptr inbounds %struct.VkMemoryRequirements2, %struct.VkMemoryRequirements2* %9, i64 0, i32 1
  %63 = getelementptr inbounds %struct.VkMemoryDedicatedRequirements, %struct.VkMemoryDedicatedRequirements* %8, i64 0, i32 1
  %64 = bitcast i8** %63 to i64*
  store i64 0, i64* %64, align 8
  %65 = bitcast i8** %62 to %struct.VkMemoryDedicatedRequirements**
  store %struct.VkMemoryDedicatedRequirements* %8, %struct.VkMemoryDedicatedRequirements** %65, align 8
  %66 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 18
  %67 = load void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)*, void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)** %66, align 8
  %68 = load %struct.VkDevice_T*, %struct.VkDevice_T** %33, align 8
  call void %67(%struct.VkDevice_T* %68, %struct.VkImageMemoryRequirementsInfo2* nonnull %7, %struct.VkMemoryRequirements2* nonnull %9) #15
  %69 = getelementptr inbounds %struct.VkMemoryRequirements2, %struct.VkMemoryRequirements2* %9, i64 0, i32 2
  %70 = bitcast %struct.VkMemoryRequirements* %69 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %47, i8* align 8 %70, i64 24, i1 false) #15
  %71 = getelementptr inbounds %struct.VkMemoryDedicatedRequirements, %struct.VkMemoryDedicatedRequirements* %8, i64 0, i32 3
  %72 = load i32, i32* %71, align 4
  %73 = icmp ne i32 %72, 0
  %74 = getelementptr inbounds %struct.VkMemoryDedicatedRequirements, %struct.VkMemoryDedicatedRequirements* %8, i64 0, i32 2
  %75 = load i32, i32* %74, align 8
  %76 = icmp ne i32 %75, 0
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %60) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %59) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %57) #15
  br label %81

77:                                               ; preds = %52
  %78 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 11
  %79 = load void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)** %78, align 8
  %80 = load %struct.VkDevice_T*, %struct.VkDevice_T** %33, align 8
  call void %79(%struct.VkDevice_T* %80, %struct.VkImage_T* %48, %struct.VkMemoryRequirements* nonnull %10) #15
  br label %81

81:                                               ; preds = %56, %77
  %82 = phi i1 [ %73, %56 ], [ false, %77 ]
  %83 = phi i1 [ %76, %56 ], [ false, %77 ]
  %84 = load %struct.VkImage_T*, %struct.VkImage_T** %3, align 8
  %85 = call i32 @_ZN14VmaAllocator_T14AllocateMemoryERK20VkMemoryRequirementsbbP10VkBuffer_TjP9VkImage_TRK23VmaAllocationCreateInfo20VmaSuballocationTypemPP15VmaAllocation_T(%struct.VmaAllocator_T* %0, %struct.VkMemoryRequirements* nonnull dereferenceable(24) %10, i1 zeroext %82, i1 zeroext %83, %struct.VkBuffer_T* null, i32 -1, %struct.VkImage_T* %84, %struct.VmaAllocationCreateInfo* dereferenceable(40) %2, i32 %46, i64 1, %struct.VmaAllocation_T** %4)
  %86 = icmp sgt i32 %85, -1
  br i1 %86, label %87, label %145

87:                                               ; preds = %81
  %88 = getelementptr inbounds %struct.VmaAllocationCreateInfo, %struct.VmaAllocationCreateInfo* %2, i64 0, i32 0
  %89 = load i32, i32* %88, align 8
  %90 = trunc i32 %89 to i8
  %91 = icmp sgt i8 %90, -1
  br i1 %91, label %92, label %129

92:                                               ; preds = %87
  %93 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %4, align 8
  %94 = load %struct.VkImage_T*, %struct.VkImage_T** %3, align 8
  %95 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %93, i64 0, i32 5
  %96 = load i8, i8* %95, align 8
  switch i8 %96, label %129 [
    i8 2, label %97
    i8 1, label %105
  ]

97:                                               ; preds = %92
  %98 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %93, i64 0, i32 9
  %99 = bitcast %union.anon* %98 to %struct.VkDeviceMemory_T**
  %100 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %99, align 8
  %101 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 9
  %102 = load i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)** %101, align 8
  %103 = load %struct.VkDevice_T*, %struct.VkDevice_T** %33, align 8
  %104 = call i32 %102(%struct.VkDevice_T* %103, %struct.VkImage_T* %94, %struct.VkDeviceMemory_T* %100, i64 0) #15
  br label %126

105:                                              ; preds = %92
  %106 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %93, i64 0, i32 9, i32 0, i32 0
  %107 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %106, align 8
  %108 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %93, i64 0, i32 9, i32 0, i32 1
  %109 = load i64, i64* %108, align 8
  %110 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %107, i64 0, i32 5
  %111 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 0
  %112 = load i8, i8* %111, align 8, !range !2
  %113 = icmp eq i8 %112, 0
  %114 = select i1 %113, %class.VmaMutex* null, %class.VmaMutex* %110
  br i1 %113, label %117, label %115

115:                                              ; preds = %105
  %116 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %114, i64 0, i32 0
  call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %116) #15
  br label %117

117:                                              ; preds = %115, %105
  %118 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %107, i64 0, i32 4
  %119 = load %struct.VkDeviceMemory_T*, %struct.VkDeviceMemory_T** %118, align 8
  %120 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 9
  %121 = load i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)*, i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)** %120, align 8
  %122 = load %struct.VkDevice_T*, %struct.VkDevice_T** %33, align 8
  %123 = call i32 %121(%struct.VkDevice_T* %122, %struct.VkImage_T* %94, %struct.VkDeviceMemory_T* %119, i64 %109) #15
  br i1 %113, label %126, label %124

124:                                              ; preds = %117
  %125 = getelementptr inbounds %class.VmaMutex, %class.VmaMutex* %114, i64 0, i32 0
  call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %125) #15
  br label %126

126:                                              ; preds = %124, %117, %97
  %127 = phi i32 [ %104, %97 ], [ %123, %117 ], [ %123, %124 ]
  %128 = icmp sgt i32 %127, -1
  br i1 %128, label %129, label %137

129:                                              ; preds = %92, %87, %126
  %130 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %4, align 8
  %131 = getelementptr inbounds %struct.VkImageCreateInfo, %struct.VkImageCreateInfo* %1, i64 0, i32 10
  %132 = load i32, i32* %131, align 8
  %133 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %130, i64 0, i32 11
  store i32 %132, i32* %133, align 4
  %134 = icmp eq %struct.VmaAllocationInfo* %5, null
  br i1 %134, label %153, label %135

135:                                              ; preds = %129
  %136 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %4, align 8
  call void @_ZN14VmaAllocator_T17GetAllocationInfoEP15VmaAllocation_TP17VmaAllocationInfo(%struct.VmaAllocator_T* %0, %struct.VmaAllocation_T* %136, %struct.VmaAllocationInfo* nonnull %5)
  br label %153

137:                                              ; preds = %126
  call void @_ZN14VmaAllocator_T10FreeMemoryEmPKP15VmaAllocation_T(%struct.VmaAllocator_T* %0, i64 1, %struct.VmaAllocation_T** %4)
  store %struct.VmaAllocation_T* null, %struct.VmaAllocation_T** %4, align 8
  %138 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 15
  %139 = load void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)** %138, align 8
  %140 = load %struct.VkDevice_T*, %struct.VkDevice_T** %33, align 8
  %141 = load %struct.VkImage_T*, %struct.VkImage_T** %3, align 8
  %142 = load i8, i8* %35, align 8, !range !2
  %143 = icmp eq i8 %142, 0
  %144 = select i1 %143, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %38
  call void %139(%struct.VkDevice_T* %140, %struct.VkImage_T* %141, %struct.VkAllocationCallbacks* %144) #15
  store %struct.VkImage_T* null, %struct.VkImage_T** %3, align 8
  br label %153

145:                                              ; preds = %81
  %146 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 15
  %147 = load void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)** %146, align 8
  %148 = load %struct.VkDevice_T*, %struct.VkDevice_T** %33, align 8
  %149 = load %struct.VkImage_T*, %struct.VkImage_T** %3, align 8
  %150 = load i8, i8* %35, align 8, !range !2
  %151 = icmp eq i8 %150, 0
  %152 = select i1 %151, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %38
  call void %147(%struct.VkDevice_T* %148, %struct.VkImage_T* %149, %struct.VkAllocationCallbacks* %152) #15
  store %struct.VkImage_T* null, %struct.VkImage_T** %3, align 8
  br label %153

153:                                              ; preds = %135, %129, %145, %137
  %154 = phi i32 [ %127, %137 ], [ %85, %145 ], [ 0, %129 ], [ 0, %135 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %47) #15
  br label %155

155:                                              ; preds = %153, %30, %6, %14, %18, %22, %26
  %156 = phi i32 [ -1000011001, %26 ], [ -1000011001, %22 ], [ -1000011001, %18 ], [ -1000011001, %14 ], [ -1000011001, %6 ], [ %154, %153 ], [ %40, %30 ]
  ret i32 %156
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vmaDestroyImage(%struct.VmaAllocator_T*, %struct.VkImage_T*, %struct.VmaAllocation_T*) local_unnamed_addr #0 {
  %4 = alloca %struct.VmaAllocation_T*, align 8
  store %struct.VmaAllocation_T* %2, %struct.VmaAllocation_T** %4, align 8
  %5 = icmp eq %struct.VkImage_T* %1, null
  %6 = icmp eq %struct.VmaAllocation_T* %2, null
  %7 = and i1 %5, %6
  br i1 %7, label %21, label %8

8:                                                ; preds = %3
  br i1 %5, label %19, label %9

9:                                                ; preds = %8
  %10 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 32, i32 15
  %11 = load void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)** %10, align 8
  %12 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 9
  %13 = load %struct.VkDevice_T*, %struct.VkDevice_T** %12, align 8
  %14 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 11
  %15 = load i8, i8* %14, align 8, !range !2
  %16 = icmp eq i8 %15, 0
  %17 = getelementptr inbounds %struct.VmaAllocator_T, %struct.VmaAllocator_T* %0, i64 0, i32 13
  %18 = select i1 %16, %struct.VkAllocationCallbacks* null, %struct.VkAllocationCallbacks* %17
  tail call void %11(%struct.VkDevice_T* %13, %struct.VkImage_T* nonnull %1, %struct.VkAllocationCallbacks* %18) #15
  br label %19

19:                                               ; preds = %8, %9
  br i1 %6, label %21, label %20

20:                                               ; preds = %19
  call void @_ZN14VmaAllocator_T10FreeMemoryEmPKP15VmaAllocation_T(%struct.VmaAllocator_T* %0, i64 1, %struct.VmaAllocation_T** nonnull %4)
  br label %21

21:                                               ; preds = %19, %3, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK24VmaBlockMetadata_Generic18GetAllocationCountEv(%class.VmaBlockMetadata_Generic*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 3, i32 0, i32 4
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = zext i32 %5 to i64
  %7 = sub i64 %3, %6
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK24VmaBlockMetadata_Generic14GetSumFreeSizeEv(%class.VmaBlockMetadata_Generic*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.VmaBlockMetadata_Generic, %class.VmaBlockMetadata_Generic* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK23VmaBlockMetadata_Linear14GetSumFreeSizeEv(%class.VmaBlockMetadata_Linear*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.VmaBlockMetadata_Linear, %class.VmaBlockMetadata_Linear* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK23VmaBlockMetadata_Linear7IsEmptyEv(%class.VmaBlockMetadata_Linear*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VmaBlockMetadata_Linear* %0 to i64 (%class.VmaBlockMetadata_Linear*)***
  %3 = load i64 (%class.VmaBlockMetadata_Linear*)**, i64 (%class.VmaBlockMetadata_Linear*)*** %2, align 8
  %4 = getelementptr inbounds i64 (%class.VmaBlockMetadata_Linear*)*, i64 (%class.VmaBlockMetadata_Linear*)** %3, i64 4
  %5 = load i64 (%class.VmaBlockMetadata_Linear*)*, i64 (%class.VmaBlockMetadata_Linear*)** %4, align 8
  %6 = tail call i64 %5(%class.VmaBlockMetadata_Linear* %0) #15
  %7 = icmp eq i64 %6, 0
  ret i1 %7
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK22VmaBlockMetadata_Buddy18GetAllocationCountEv(%class.VmaBlockMetadata_Buddy*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 5
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK22VmaBlockMetadata_Buddy14GetSumFreeSizeEv(%class.VmaBlockMetadata_Buddy*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 7
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %5, %3
  %9 = sub i64 %8, %7
  ret i64 %9
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK22VmaBlockMetadata_Buddy7IsEmptyEv(%class.VmaBlockMetadata_Buddy*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.VmaBlockMetadata_Buddy, %class.VmaBlockMetadata_Buddy* %0, i64 0, i32 3
  %3 = load %"struct.VmaBlockMetadata_Buddy::Node"*, %"struct.VmaBlockMetadata_Buddy::Node"** %2, align 8
  %4 = getelementptr inbounds %"struct.VmaBlockMetadata_Buddy::Node", %"struct.VmaBlockMetadata_Buddy::Node"* %3, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN22VmaBlockMetadata_Buddy15CheckCorruptionEPKv(%class.VmaBlockMetadata_Buddy*, i8*) unnamed_addr #0 comdat align 2 {
  ret i32 -8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN22VmaBlockMetadata_Buddy4FreeEP15VmaAllocation_T(%class.VmaBlockMetadata_Buddy*, %struct.VmaAllocation_T*) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 5
  %4 = load i8, i8* %3, align 8
  %5 = icmp eq i8 %4, 1
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %1, i64 0, i32 9, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  br label %9

9:                                                ; preds = %2, %6
  %10 = phi i64 [ %8, %6 ], [ 0, %2 ]
  tail call void @_ZN22VmaBlockMetadata_Buddy12FreeAtOffsetEP15VmaAllocation_Tm(%class.VmaBlockMetadata_Buddy* %0, %struct.VmaAllocation_T* %1, i64 %10)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN22VmaBlockMetadata_Buddy12FreeAtOffsetEm(%class.VmaBlockMetadata_Buddy*, i64) unnamed_addr #0 comdat align 2 {
  tail call void @_ZN22VmaBlockMetadata_Buddy12FreeAtOffsetEP15VmaAllocation_Tm(%class.VmaBlockMetadata_Buddy* %0, %struct.VmaAllocation_T* null, i64 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN35VmaDefragmentationAlgorithm_Generic6AddAllEv(%class.VmaDefragmentationAlgorithm_Generic*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 2
  store i8 1, i8* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK35VmaDefragmentationAlgorithm_Generic13GetBytesMovedEv(%class.VmaDefragmentationAlgorithm_Generic*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 3
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK35VmaDefragmentationAlgorithm_Generic19GetAllocationsMovedEv(%class.VmaDefragmentationAlgorithm_Generic*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Generic, %class.VmaDefragmentationAlgorithm_Generic* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN32VmaDefragmentationAlgorithm_Fast13AddAllocationEP15VmaAllocation_TPj(%class.VmaDefragmentationAlgorithm_Fast*, %struct.VmaAllocation_T*, i32*) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = add i32 %5, 1
  store i32 %6, i32* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN32VmaDefragmentationAlgorithm_Fast6AddAllEv(%class.VmaDefragmentationAlgorithm_Fast*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 3
  store i8 1, i8* %2, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK32VmaDefragmentationAlgorithm_Fast13GetBytesMovedEv(%class.VmaDefragmentationAlgorithm_Fast*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 4
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK32VmaDefragmentationAlgorithm_Fast19GetAllocationsMovedEv(%class.VmaDefragmentationAlgorithm_Fast*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.VmaDefragmentationAlgorithm_Fast, %class.VmaDefragmentationAlgorithm_Fast* %0, i64 0, i32 5
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN16VmaBlockMetadataD2Ev(%class.VmaBlockMetadata*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN16VmaBlockMetadataD0Ev(%class.VmaBlockMetadata*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #18
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nofree nounwind
declare i32 @snprintf(i8* nocapture, i64, i8* nocapture readonly, ...) local_unnamed_addr #11

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN16VmaPoolAllocatorI11VmaListItemI16VmaSuballocationEED2Ev(%class.VmaPoolAllocator.15*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.VmaPoolAllocator.15, %class.VmaPoolAllocator.15* %0, i64 0, i32 2
  %3 = getelementptr inbounds %class.VmaPoolAllocator.15, %class.VmaPoolAllocator.15* %0, i64 0, i32 2, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.VmaPoolAllocator.15, %class.VmaPoolAllocator.15* %0, i64 0, i32 0
  %8 = getelementptr inbounds %class.VmaPoolAllocator.15, %class.VmaPoolAllocator.15* %0, i64 0, i32 2, i32 1
  br label %25

9:                                                ; preds = %44, %1
  tail call void @_ZN9VmaVectorIN16VmaPoolAllocatorI11VmaListItemI16VmaSuballocationEE9ItemBlockE15VmaStlAllocatorIS5_EE6resizeEmb(%class.VmaVector.16* %2, i64 0, i1 zeroext false) #15
  %10 = getelementptr inbounds %class.VmaVector.16, %class.VmaVector.16* %2, i64 0, i32 0, i32 0
  %11 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %10, align 8
  %12 = getelementptr inbounds %class.VmaPoolAllocator.15, %class.VmaPoolAllocator.15* %0, i64 0, i32 2, i32 1
  %13 = bitcast %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"** %12 to i8**
  %14 = load i8*, i8** %13, align 8
  %15 = icmp eq %struct.VkAllocationCallbacks* %11, null
  br i1 %15, label %23, label %16

16:                                               ; preds = %9
  %17 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %11, i64 0, i32 3
  %18 = load void (i8*, i8*)*, void (i8*, i8*)** %17, align 8
  %19 = icmp eq void (i8*, i8*)* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %11, i64 0, i32 0
  %22 = load i8*, i8** %21, align 8
  tail call void %18(i8* %22, i8* %14) #15
  br label %24

23:                                               ; preds = %16, %9
  tail call void @free(i8* %14) #15
  br label %24

24:                                               ; preds = %20, %23
  ret void

25:                                               ; preds = %6, %44
  %26 = phi i64 [ %4, %6 ], [ %27, %44 ]
  %27 = add i64 %26, -1
  %28 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %7, align 8
  %29 = load %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"*, %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"** %8, align 8
  %30 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %29, i64 %27, i32 0
  %31 = load %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %30, align 8
  %32 = icmp eq %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %31, null
  br i1 %32, label %44, label %33

33:                                               ; preds = %25
  %34 = bitcast %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %31 to i8*
  %35 = icmp eq %struct.VkAllocationCallbacks* %28, null
  br i1 %35, label %43, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %28, i64 0, i32 3
  %38 = load void (i8*, i8*)*, void (i8*, i8*)** %37, align 8
  %39 = icmp eq void (i8*, i8*)* %38, null
  br i1 %39, label %43, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %28, i64 0, i32 0
  %42 = load i8*, i8** %41, align 8
  tail call void %38(i8* %42, i8* nonnull %34) #15
  br label %44

43:                                               ; preds = %36, %33
  tail call void @free(i8* %34) #15
  br label %44

44:                                               ; preds = %25, %40, %43
  %45 = icmp eq i64 %27, 0
  br i1 %45, label %9, label %25
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9VmaVectorIN16VmaPoolAllocatorI11VmaListItemI16VmaSuballocationEE9ItemBlockE15VmaStlAllocatorIS5_EE6resizeEmb(%class.VmaVector.16*, i64, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.VmaVector.16, %class.VmaVector.16* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = mul i64 %5, 3
  %9 = lshr i64 %8, 1
  %10 = icmp ult i64 %8, 16
  %11 = select i1 %10, i64 8, i64 %9
  %12 = icmp ugt i64 %11, %1
  %13 = select i1 %12, i64 %11, i64 %1
  br label %16

14:                                               ; preds = %3
  %15 = select i1 %2, i64 %1, i64 %5
  br label %16

16:                                               ; preds = %14, %7
  %17 = phi i64 [ %13, %7 ], [ %15, %14 ]
  %18 = icmp eq i64 %17, %5
  br i1 %18, label %64, label %19

19:                                               ; preds = %16
  %20 = icmp eq i64 %17, 0
  br i1 %20, label %36, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %class.VmaVector.16, %class.VmaVector.16* %0, i64 0, i32 0, i32 0
  %23 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, align 8
  %24 = shl i64 %17, 4
  %25 = icmp eq %struct.VkAllocationCallbacks* %23, null
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 1
  %28 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %27, align 8
  %29 = icmp eq i8* (i8*, i64, i64, i32)* %28, null
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* %28(i8* %32, i64 %24, i64 8, i32 1) #15
  br label %36

34:                                               ; preds = %26, %21
  %35 = tail call noalias i8* @aligned_alloc(i64 8, i64 %24) #15
  br label %36

36:                                               ; preds = %34, %30, %19
  %37 = phi i8* [ null, %19 ], [ %33, %30 ], [ %35, %34 ]
  %38 = getelementptr inbounds %class.VmaVector.16, %class.VmaVector.16* %0, i64 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = icmp ugt i64 %39, %1
  %41 = select i1 %40, i64 %1, i64 %39
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %class.VmaVector.16, %class.VmaVector.16* %0, i64 0, i32 1
  %45 = bitcast %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"** %44 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = shl i64 %41, 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %46, i64 %47, i1 false)
  br label %48

48:                                               ; preds = %36, %43
  %49 = getelementptr inbounds %class.VmaVector.16, %class.VmaVector.16* %0, i64 0, i32 0, i32 0
  %50 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %49, align 8
  %51 = getelementptr inbounds %class.VmaVector.16, %class.VmaVector.16* %0, i64 0, i32 1
  %52 = bitcast %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"** %51 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq %struct.VkAllocationCallbacks* %50, null
  br i1 %54, label %62, label %55

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 3
  %57 = load void (i8*, i8*)*, void (i8*, i8*)** %56, align 8
  %58 = icmp eq void (i8*, i8*)* %57, null
  br i1 %58, label %62, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  tail call void %57(i8* %61, i8* %53) #15
  br label %63

62:                                               ; preds = %55, %48
  tail call void @free(i8* %53) #15
  br label %63

63:                                               ; preds = %59, %62
  store i64 %17, i64* %4, align 8
  store i8* %37, i8** %52, align 8
  br label %64

64:                                               ; preds = %16, %63
  %65 = getelementptr inbounds %class.VmaVector.16, %class.VmaVector.16* %0, i64 0, i32 2
  store i64 %1, i64* %65, align 8
  ret void
}

declare void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"*) local_unnamed_addr #12

; Function Attrs: nounwind
declare void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare zeroext i1 @_ZNSt3__15mutex8try_lockEv(%"class.std::__1::mutex"*) local_unnamed_addr #1

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #13

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__sortIRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEvT0_S7_T_(%"struct.VmaDefragmentationAlgorithm::AllocationInfo"*, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  br label %4

4:                                                ; preds = %430, %3
  %5 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %1, %3 ], [ %387, %430 ]
  %6 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %0, %3 ], [ %18, %430 ]
  %7 = ptrtoint %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %5 to i64
  %8 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %5, i64 -1
  %9 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %8, i64 0, i32 0
  %10 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %8 to i8*
  %11 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %8 to i64*
  %12 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %5, i64 -1, i32 1
  %13 = bitcast i32** %12 to i64*
  %14 = ptrtoint %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %5 to i64
  br label %15

15:                                               ; preds = %439, %4
  %16 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %6, %4 ], [ %440, %439 ]
  br label %17

17:                                               ; preds = %277, %15
  %18 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %16, %15 ], [ %240, %277 ]
  %19 = ptrtoint %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18 to i64
  %20 = sub i64 %7, %19
  %21 = ashr exact i64 %20, 4
  switch i64 %21, label %70 [
    i64 0, label %443
    i64 1, label %443
    i64 2, label %22
    i64 3, label %55
    i64 4, label %59
    i64 5, label %64
  ]

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %5, i64 -1
  %24 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %23, i64 0, i32 0
  %25 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %24, align 8
  %26 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %25, i64 0, i32 5
  %27 = load i8, i8* %26, align 8
  %28 = icmp eq i8 %27, 1
  br i1 %28, label %29, label %32

29:                                               ; preds = %22
  %30 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %25, i64 0, i32 9, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  br label %32

32:                                               ; preds = %29, %22
  %33 = phi i64 [ %31, %29 ], [ 0, %22 ]
  %34 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, i64 0, i32 0
  %35 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %34, align 8
  %36 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %35, i64 0, i32 5
  %37 = load i8, i8* %36, align 8
  %38 = icmp eq i8 %37, 1
  %39 = ptrtoint %struct.VmaAllocation_T* %35 to i64
  br i1 %38, label %40, label %43

40:                                               ; preds = %32
  %41 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %35, i64 0, i32 9, i32 0, i32 1
  %42 = load i64, i64* %41, align 8
  br label %43

43:                                               ; preds = %32, %40
  %44 = phi i64 [ %42, %40 ], [ 0, %32 ]
  %45 = icmp ugt i64 %33, %44
  br i1 %45, label %46, label %443

46:                                               ; preds = %43
  %47 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, i64 0, i32 1
  %48 = bitcast i32** %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18 to i8*
  %51 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %23 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 16, i1 false) #15
  %52 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %23 to i64*
  store i64 %39, i64* %52, align 8
  %53 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %5, i64 -1, i32 1
  %54 = bitcast i32** %53 to i64*
  store i64 %49, i64* %54, align 8
  br label %443

55:                                               ; preds = %17
  %56 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, i64 1
  %57 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %5, i64 -1
  %58 = tail call i32 @_ZNSt3__17__sort3IRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEjT0_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %56, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %57, %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater"* dereferenceable(1) %2)
  br label %443

59:                                               ; preds = %17
  %60 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, i64 1
  %61 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, i64 2
  %62 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %5, i64 -1
  %63 = tail call i32 @_ZNSt3__17__sort4IRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEjT0_S7_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %60, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %61, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %62, %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater"* dereferenceable(1) %2)
  br label %443

64:                                               ; preds = %17
  %65 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, i64 1
  %66 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, i64 2
  %67 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, i64 3
  %68 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %5, i64 -1
  %69 = tail call i32 @_ZNSt3__17__sort5IRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEjT0_S7_S7_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %65, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %66, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %67, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %68, %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater"* dereferenceable(1) %2)
  br label %443

70:                                               ; preds = %17
  %71 = icmp slt i64 %20, 496
  br i1 %71, label %72, label %140

72:                                               ; preds = %70
  %73 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, i64 2
  %74 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, i64 1
  %75 = tail call i32 @_ZNSt3__17__sort3IRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEjT0_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %74, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %73, %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater"* dereferenceable(1) %2) #15
  %76 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, i64 3
  %77 = icmp eq %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %76, %5
  br i1 %77, label %443, label %78

78:                                               ; preds = %72, %137
  %79 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %138, %137 ], [ %76, %72 ]
  %80 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %79, %137 ], [ %73, %72 ]
  %81 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %79, i64 0, i32 0
  %82 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %81, align 8
  %83 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %82, i64 0, i32 5
  %84 = load i8, i8* %83, align 8
  %85 = icmp eq i8 %84, 1
  br i1 %85, label %86, label %89

86:                                               ; preds = %78
  %87 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %82, i64 0, i32 9, i32 0, i32 1
  %88 = load i64, i64* %87, align 8
  br label %89

89:                                               ; preds = %86, %78
  %90 = phi i64 [ %88, %86 ], [ 0, %78 ]
  %91 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %80, i64 0, i32 0
  %92 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %91, align 8
  %93 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %92, i64 0, i32 5
  %94 = load i8, i8* %93, align 8
  %95 = icmp eq i8 %94, 1
  br i1 %95, label %96, label %99

96:                                               ; preds = %89
  %97 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %92, i64 0, i32 9, i32 0, i32 1
  %98 = load i64, i64* %97, align 8
  br label %99

99:                                               ; preds = %96, %89
  %100 = phi i64 [ %98, %96 ], [ 0, %89 ]
  %101 = icmp ugt i64 %90, %100
  br i1 %101, label %102, label %137

102:                                              ; preds = %99
  %103 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %79, i64 0, i32 1
  %104 = bitcast i32** %103 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %82, i64 0, i32 9, i32 0, i32 1
  br label %107

107:                                              ; preds = %129, %102
  %108 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %79, %102 ], [ %109, %129 ]
  %109 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %80, %102 ], [ %114, %129 ]
  %110 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %108 to i8*
  %111 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %109 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %110, i8* align 8 %111, i64 16, i1 false) #15
  %112 = icmp eq %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %109, %18
  br i1 %112, label %132, label %113

113:                                              ; preds = %107
  %114 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %109, i64 -1
  %115 = load i8, i8* %83, align 8
  %116 = icmp eq i8 %115, 1
  br i1 %116, label %117, label %119

117:                                              ; preds = %113
  %118 = load i64, i64* %106, align 8
  br label %119

119:                                              ; preds = %117, %113
  %120 = phi i64 [ %118, %117 ], [ 0, %113 ]
  %121 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %114, i64 0, i32 0
  %122 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %121, align 8
  %123 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %122, i64 0, i32 5
  %124 = load i8, i8* %123, align 8
  %125 = icmp eq i8 %124, 1
  br i1 %125, label %126, label %129

126:                                              ; preds = %119
  %127 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %122, i64 0, i32 9, i32 0, i32 1
  %128 = load i64, i64* %127, align 8
  br label %129

129:                                              ; preds = %126, %119
  %130 = phi i64 [ %128, %126 ], [ 0, %119 ]
  %131 = icmp ugt i64 %120, %130
  br i1 %131, label %107, label %132

132:                                              ; preds = %129, %107
  %133 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %18, %107 ], [ %109, %129 ]
  %134 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %133, i64 0, i32 0
  store %struct.VmaAllocation_T* %82, %struct.VmaAllocation_T** %134, align 8
  %135 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %133, i64 0, i32 1
  %136 = bitcast i32** %135 to i64*
  store i64 %105, i64* %136, align 8
  br label %137

137:                                              ; preds = %132, %99
  %138 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %79, i64 1
  %139 = icmp eq %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %138, %5
  br i1 %139, label %443, label %78

140:                                              ; preds = %70
  %141 = icmp sgt i64 %20, 15984
  %142 = sdiv i64 %21, 2
  %143 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, i64 %142
  br i1 %141, label %144, label %149

144:                                              ; preds = %140
  %145 = sdiv i64 %21, 4
  %146 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, i64 %145
  %147 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %143, i64 %145
  %148 = tail call i32 @_ZNSt3__17__sort5IRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEjT0_S7_S7_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %146, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %143, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %147, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %8, %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater"* dereferenceable(1) %2)
  br label %151

149:                                              ; preds = %140
  %150 = tail call i32 @_ZNSt3__17__sort3IRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEjT0_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %143, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %8, %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater"* dereferenceable(1) %2)
  br label %151

151:                                              ; preds = %149, %144
  %152 = phi i32 [ %148, %144 ], [ %150, %149 ]
  %153 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, i64 0, i32 0
  %154 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %153, align 8
  %155 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %154, i64 0, i32 5
  %156 = load i8, i8* %155, align 8
  %157 = icmp eq i8 %156, 1
  br i1 %157, label %158, label %161

158:                                              ; preds = %151
  %159 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %154, i64 0, i32 9, i32 0, i32 1
  %160 = load i64, i64* %159, align 8
  br label %161

161:                                              ; preds = %158, %151
  %162 = phi i64 [ %160, %158 ], [ 0, %151 ]
  %163 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %143, i64 0, i32 0
  %164 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %163, align 8
  %165 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %164, i64 0, i32 5
  %166 = load i8, i8* %165, align 8
  %167 = icmp eq i8 %166, 1
  br i1 %167, label %168, label %171

168:                                              ; preds = %161
  %169 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %164, i64 0, i32 9, i32 0, i32 1
  %170 = load i64, i64* %169, align 8
  br label %171

171:                                              ; preds = %161, %168
  %172 = phi i64 [ %170, %168 ], [ 0, %161 ]
  %173 = icmp ugt i64 %162, %172
  br i1 %173, label %315, label %174

174:                                              ; preds = %171
  %175 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %164, i64 0, i32 9, i32 0, i32 1
  br label %176

176:                                              ; preds = %174, %301
  %177 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %178, %301 ], [ %8, %174 ]
  %178 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %177, i64 -1
  %179 = icmp eq %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, %178
  br i1 %179, label %180, label %288

180:                                              ; preds = %176
  %181 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, i64 1
  br i1 %157, label %182, label %185

182:                                              ; preds = %180
  %183 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %154, i64 0, i32 9, i32 0, i32 1
  %184 = load i64, i64* %183, align 8
  br label %185

185:                                              ; preds = %182, %180
  %186 = phi i64 [ %184, %182 ], [ 0, %180 ]
  %187 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %9, align 8
  %188 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %187, i64 0, i32 5
  %189 = load i8, i8* %188, align 8
  %190 = icmp eq i8 %189, 1
  br i1 %190, label %191, label %194

191:                                              ; preds = %185
  %192 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %187, i64 0, i32 9, i32 0, i32 1
  %193 = load i64, i64* %192, align 8
  br label %194

194:                                              ; preds = %185, %191
  %195 = phi i64 [ %193, %191 ], [ 0, %185 ]
  %196 = icmp ugt i64 %186, %195
  br i1 %196, label %228, label %197

197:                                              ; preds = %194
  %198 = icmp eq %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %181, %8
  br i1 %198, label %443, label %199

199:                                              ; preds = %197
  %200 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %154, i64 0, i32 9, i32 0, i32 1
  br label %201

201:                                              ; preds = %199, %225
  %202 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %181, %199 ], [ %226, %225 ]
  br i1 %157, label %203, label %205

203:                                              ; preds = %201
  %204 = load i64, i64* %200, align 8
  br label %205

205:                                              ; preds = %203, %201
  %206 = phi i64 [ %204, %203 ], [ 0, %201 ]
  %207 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %202, i64 0, i32 0
  %208 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %207, align 8
  %209 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %208, i64 0, i32 5
  %210 = load i8, i8* %209, align 8
  %211 = icmp eq i8 %210, 1
  br i1 %211, label %212, label %215

212:                                              ; preds = %205
  %213 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %208, i64 0, i32 9, i32 0, i32 1
  %214 = load i64, i64* %213, align 8
  br label %215

215:                                              ; preds = %205, %212
  %216 = phi i64 [ %214, %212 ], [ 0, %205 ]
  %217 = icmp ugt i64 %206, %216
  br i1 %217, label %218, label %225

218:                                              ; preds = %215
  %219 = ptrtoint %struct.VmaAllocation_T* %208 to i64
  %220 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %202, i64 0, i32 1
  %221 = bitcast i32** %220 to i64*
  %222 = load i64, i64* %221, align 8
  %223 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %202 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %223, i8* align 8 %10, i64 16, i1 false) #15
  store i64 %219, i64* %11, align 8
  store i64 %222, i64* %13, align 8
  %224 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %202, i64 1
  br label %228

225:                                              ; preds = %215
  %226 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %202, i64 1
  %227 = icmp eq %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %226, %8
  br i1 %227, label %443, label %201

228:                                              ; preds = %218, %194
  %229 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %181, %194 ], [ %224, %218 ]
  %230 = icmp eq %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %229, %8
  br i1 %230, label %443, label %231

231:                                              ; preds = %228, %279
  %232 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %256, %279 ], [ %229, %228 ]
  %233 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %261, %279 ], [ %8, %228 ]
  %234 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %153, align 8
  %235 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %234, i64 0, i32 5
  %236 = load i8, i8* %235, align 8
  %237 = icmp eq i8 %236, 1
  %238 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %234, i64 0, i32 9, i32 0, i32 1
  br label %239

239:                                              ; preds = %253, %231
  %240 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %232, %231 ], [ %256, %253 ]
  br i1 %237, label %241, label %243

241:                                              ; preds = %239
  %242 = load i64, i64* %238, align 8
  br label %243

243:                                              ; preds = %241, %239
  %244 = phi i64 [ %242, %241 ], [ 0, %239 ]
  %245 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %240, i64 0, i32 0
  %246 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %245, align 8
  %247 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %246, i64 0, i32 5
  %248 = load i8, i8* %247, align 8
  %249 = icmp eq i8 %248, 1
  br i1 %249, label %250, label %253

250:                                              ; preds = %243
  %251 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %246, i64 0, i32 9, i32 0, i32 1
  %252 = load i64, i64* %251, align 8
  br label %253

253:                                              ; preds = %243, %250
  %254 = phi i64 [ %252, %250 ], [ 0, %243 ]
  %255 = icmp ugt i64 %244, %254
  %256 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %240, i64 1
  br i1 %255, label %257, label %239

257:                                              ; preds = %253
  %258 = ptrtoint %struct.VmaAllocation_T* %246 to i64
  br label %259

259:                                              ; preds = %257, %274
  %260 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %261, %274 ], [ %233, %257 ]
  %261 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %260, i64 -1
  br i1 %237, label %262, label %264

262:                                              ; preds = %259
  %263 = load i64, i64* %238, align 8
  br label %264

264:                                              ; preds = %262, %259
  %265 = phi i64 [ %263, %262 ], [ 0, %259 ]
  %266 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %261, i64 0, i32 0
  %267 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %266, align 8
  %268 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %267, i64 0, i32 5
  %269 = load i8, i8* %268, align 8
  %270 = icmp eq i8 %269, 1
  br i1 %270, label %271, label %274

271:                                              ; preds = %264
  %272 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %267, i64 0, i32 9, i32 0, i32 1
  %273 = load i64, i64* %272, align 8
  br label %274

274:                                              ; preds = %264, %271
  %275 = phi i64 [ %273, %271 ], [ 0, %264 ]
  %276 = icmp ugt i64 %265, %275
  br i1 %276, label %259, label %277

277:                                              ; preds = %274
  %278 = icmp ult %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %240, %261
  br i1 %278, label %279, label %17

279:                                              ; preds = %277
  %280 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %240, i64 0, i32 1
  %281 = bitcast i32** %280 to i64*
  %282 = load i64, i64* %281, align 8
  %283 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %240 to i8*
  %284 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %261 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %283, i8* align 8 %284, i64 16, i1 false) #15
  %285 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %261 to i64*
  store i64 %258, i64* %285, align 8
  %286 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %260, i64 -1, i32 1
  %287 = bitcast i32** %286 to i64*
  store i64 %282, i64* %287, align 8
  br label %231

288:                                              ; preds = %176
  %289 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %178, i64 0, i32 0
  %290 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %289, align 8
  %291 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %290, i64 0, i32 5
  %292 = load i8, i8* %291, align 8
  %293 = icmp eq i8 %292, 1
  br i1 %293, label %294, label %297

294:                                              ; preds = %288
  %295 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %290, i64 0, i32 9, i32 0, i32 1
  %296 = load i64, i64* %295, align 8
  br label %297

297:                                              ; preds = %294, %288
  %298 = phi i64 [ %296, %294 ], [ 0, %288 ]
  br i1 %167, label %299, label %301

299:                                              ; preds = %297
  %300 = load i64, i64* %175, align 8
  br label %301

301:                                              ; preds = %297, %299
  %302 = phi i64 [ %300, %299 ], [ 0, %297 ]
  %303 = icmp ugt i64 %298, %302
  br i1 %303, label %304, label %176

304:                                              ; preds = %301
  %305 = ptrtoint %struct.VmaAllocation_T* %154 to i64
  %306 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, i64 0, i32 1
  %307 = bitcast i32** %306 to i64*
  %308 = load i64, i64* %307, align 8
  %309 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18 to i8*
  %310 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %178 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %309, i8* align 8 %310, i64 16, i1 false) #15
  %311 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %178 to i64*
  store i64 %305, i64* %311, align 8
  %312 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %177, i64 -1, i32 1
  %313 = bitcast i32** %312 to i64*
  store i64 %308, i64* %313, align 8
  %314 = add i32 %152, 1
  br label %315

315:                                              ; preds = %171, %304
  %316 = phi i32 [ %314, %304 ], [ %152, %171 ]
  %317 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %178, %304 ], [ %8, %171 ]
  %318 = ptrtoint %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18 to i64
  %319 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, i64 1
  %320 = icmp ult %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %319, %317
  br i1 %320, label %321, label %384

321:                                              ; preds = %315, %372
  %322 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %383, %372 ], [ %143, %315 ]
  %323 = phi i32 [ %381, %372 ], [ %316, %315 ]
  %324 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %349, %372 ], [ %319, %315 ]
  %325 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %354, %372 ], [ %317, %315 ]
  %326 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %322, i64 0, i32 0
  %327 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %326, align 8
  %328 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %327, i64 0, i32 5
  %329 = load i8, i8* %328, align 8
  %330 = icmp eq i8 %329, 1
  %331 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %327, i64 0, i32 9, i32 0, i32 1
  br label %332

332:                                              ; preds = %346, %321
  %333 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %324, %321 ], [ %349, %346 ]
  %334 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %333, i64 0, i32 0
  %335 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %334, align 8
  %336 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %335, i64 0, i32 5
  %337 = load i8, i8* %336, align 8
  %338 = icmp eq i8 %337, 1
  br i1 %338, label %339, label %342

339:                                              ; preds = %332
  %340 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %335, i64 0, i32 9, i32 0, i32 1
  %341 = load i64, i64* %340, align 8
  br label %342

342:                                              ; preds = %339, %332
  %343 = phi i64 [ %341, %339 ], [ 0, %332 ]
  br i1 %330, label %344, label %346

344:                                              ; preds = %342
  %345 = load i64, i64* %331, align 8
  br label %346

346:                                              ; preds = %342, %344
  %347 = phi i64 [ %345, %344 ], [ 0, %342 ]
  %348 = icmp ugt i64 %343, %347
  %349 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %333, i64 1
  br i1 %348, label %332, label %350

350:                                              ; preds = %346
  %351 = ptrtoint %struct.VmaAllocation_T* %335 to i64
  br label %352

352:                                              ; preds = %350, %367
  %353 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %354, %367 ], [ %325, %350 ]
  %354 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %353, i64 -1
  %355 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %354, i64 0, i32 0
  %356 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %355, align 8
  %357 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %356, i64 0, i32 5
  %358 = load i8, i8* %357, align 8
  %359 = icmp eq i8 %358, 1
  br i1 %359, label %360, label %363

360:                                              ; preds = %352
  %361 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %356, i64 0, i32 9, i32 0, i32 1
  %362 = load i64, i64* %361, align 8
  br label %363

363:                                              ; preds = %360, %352
  %364 = phi i64 [ %362, %360 ], [ 0, %352 ]
  br i1 %330, label %365, label %367

365:                                              ; preds = %363
  %366 = load i64, i64* %331, align 8
  br label %367

367:                                              ; preds = %363, %365
  %368 = phi i64 [ %366, %365 ], [ 0, %363 ]
  %369 = icmp ugt i64 %364, %368
  br i1 %369, label %370, label %352

370:                                              ; preds = %367
  %371 = icmp ugt %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %333, %354
  br i1 %371, label %384, label %372

372:                                              ; preds = %370
  %373 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %333, i64 0, i32 1
  %374 = bitcast i32** %373 to i64*
  %375 = load i64, i64* %374, align 8
  %376 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %333 to i8*
  %377 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %354 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %376, i8* align 8 %377, i64 16, i1 false) #15
  %378 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %354 to i64*
  store i64 %351, i64* %378, align 8
  %379 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %353, i64 -1, i32 1
  %380 = bitcast i32** %379 to i64*
  store i64 %375, i64* %380, align 8
  %381 = add i32 %323, 1
  %382 = icmp eq %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %322, %333
  %383 = select i1 %382, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %354, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %322
  br label %321

384:                                              ; preds = %370, %315
  %385 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %143, %315 ], [ %322, %370 ]
  %386 = phi i32 [ %316, %315 ], [ %323, %370 ]
  %387 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %319, %315 ], [ %333, %370 ]
  %388 = icmp eq %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %387, %385
  br i1 %388, label %422, label %389

389:                                              ; preds = %384
  %390 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %385, i64 0, i32 0
  %391 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %390, align 8
  %392 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %391, i64 0, i32 5
  %393 = load i8, i8* %392, align 8
  %394 = icmp eq i8 %393, 1
  br i1 %394, label %395, label %398

395:                                              ; preds = %389
  %396 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %391, i64 0, i32 9, i32 0, i32 1
  %397 = load i64, i64* %396, align 8
  br label %398

398:                                              ; preds = %395, %389
  %399 = phi i64 [ %397, %395 ], [ 0, %389 ]
  %400 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %387, i64 0, i32 0
  %401 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %400, align 8
  %402 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %401, i64 0, i32 5
  %403 = load i8, i8* %402, align 8
  %404 = icmp eq i8 %403, 1
  %405 = ptrtoint %struct.VmaAllocation_T* %401 to i64
  br i1 %404, label %406, label %409

406:                                              ; preds = %398
  %407 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %401, i64 0, i32 9, i32 0, i32 1
  %408 = load i64, i64* %407, align 8
  br label %409

409:                                              ; preds = %398, %406
  %410 = phi i64 [ %408, %406 ], [ 0, %398 ]
  %411 = icmp ugt i64 %399, %410
  br i1 %411, label %412, label %422

412:                                              ; preds = %409
  %413 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %387, i64 0, i32 1
  %414 = bitcast i32** %413 to i64*
  %415 = load i64, i64* %414, align 8
  %416 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %387 to i8*
  %417 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %385 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %416, i8* align 8 %417, i64 16, i1 false) #15
  %418 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %385 to i64*
  store i64 %405, i64* %418, align 8
  %419 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %385, i64 0, i32 1
  %420 = bitcast i32** %419 to i64*
  store i64 %415, i64* %420, align 8
  %421 = add i32 %386, 1
  br label %422

422:                                              ; preds = %384, %412, %409
  %423 = phi i32 [ %421, %412 ], [ %386, %409 ], [ %386, %384 ]
  %424 = icmp eq i32 %423, 0
  br i1 %424, label %425, label %432

425:                                              ; preds = %422
  %426 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEbT0_S7_T_(%"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %387, %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater"* dereferenceable(1) %2)
  %427 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %387, i64 1
  %428 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEbT0_S7_T_(%"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %427, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %5, %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater"* dereferenceable(1) %2)
  br i1 %428, label %429, label %431

429:                                              ; preds = %425
  br i1 %426, label %443, label %430

430:                                              ; preds = %429, %441
  br label %4

431:                                              ; preds = %425
  br i1 %426, label %439, label %432

432:                                              ; preds = %431, %422
  %433 = ptrtoint %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %387 to i64
  %434 = sub i64 %433, %318
  %435 = sub i64 %14, %433
  %436 = icmp slt i64 %434, %435
  br i1 %436, label %437, label %441

437:                                              ; preds = %432
  tail call void @_ZNSt3__16__sortIRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEvT0_S7_T_(%"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %18, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %387, %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater"* dereferenceable(1) %2)
  %438 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %387, i64 1
  br label %439

439:                                              ; preds = %437, %431
  %440 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %427, %431 ], [ %438, %437 ]
  br label %15

441:                                              ; preds = %432
  %442 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %387, i64 1
  tail call void @_ZNSt3__16__sortIRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEvT0_S7_T_(%"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %442, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %5, %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater"* dereferenceable(1) %2)
  br label %430

443:                                              ; preds = %429, %228, %17, %17, %197, %225, %137, %72, %43, %46, %55, %59, %64
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort3IRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEjT0_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm::AllocationInfo"*, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"*, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %5 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %1, i64 0, i32 0
  %6 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %5, align 8
  %7 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %6, i64 0, i32 5
  %8 = load i8, i8* %7, align 8
  %9 = icmp eq i8 %8, 1
  %10 = ptrtoint %struct.VmaAllocation_T* %6 to i64
  br i1 %9, label %11, label %14

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %6, i64 0, i32 9, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  br label %14

14:                                               ; preds = %11, %4
  %15 = phi i64 [ %13, %11 ], [ 0, %4 ]
  %16 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, i64 0, i32 0
  %17 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %16, align 8
  %18 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %17, i64 0, i32 5
  %19 = load i8, i8* %18, align 8
  %20 = icmp eq i8 %19, 1
  %21 = ptrtoint %struct.VmaAllocation_T* %17 to i64
  br i1 %20, label %22, label %25

22:                                               ; preds = %14
  %23 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %17, i64 0, i32 9, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  br label %25

25:                                               ; preds = %14, %22
  %26 = phi i64 [ %24, %22 ], [ 0, %14 ]
  %27 = icmp ugt i64 %15, %26
  %28 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %2, i64 0, i32 0
  %29 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %28, align 8
  %30 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %29, i64 0, i32 5
  %31 = load i8, i8* %30, align 8
  %32 = icmp eq i8 %31, 1
  br i1 %32, label %33, label %36

33:                                               ; preds = %25
  %34 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %29, i64 0, i32 9, i32 0, i32 1
  %35 = load i64, i64* %34, align 8
  br label %36

36:                                               ; preds = %33, %25
  %37 = phi i64 [ %35, %33 ], [ 0, %25 ]
  br i1 %9, label %38, label %41

38:                                               ; preds = %36
  %39 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %6, i64 0, i32 9, i32 0, i32 1
  %40 = load i64, i64* %39, align 8
  br label %41

41:                                               ; preds = %36, %38
  %42 = phi i64 [ %40, %38 ], [ 0, %36 ]
  %43 = icmp ugt i64 %37, %42
  br i1 %27, label %80, label %44

44:                                               ; preds = %41
  br i1 %43, label %45, label %117

45:                                               ; preds = %44
  %46 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %1 to i64*
  %47 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %1, i64 0, i32 1
  %48 = bitcast i32** %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %1 to i8*
  %51 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 16, i1 false) #15
  %52 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %2 to i64*
  store i64 %10, i64* %52, align 8
  %53 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %2, i64 0, i32 1
  %54 = bitcast i32** %53 to i64*
  store i64 %49, i64* %54, align 8
  %55 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %5, align 8
  %56 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %55, i64 0, i32 5
  %57 = load i8, i8* %56, align 8
  %58 = icmp eq i8 %57, 1
  br i1 %58, label %59, label %62

59:                                               ; preds = %45
  %60 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %55, i64 0, i32 9, i32 0, i32 1
  %61 = load i64, i64* %60, align 8
  br label %62

62:                                               ; preds = %59, %45
  %63 = phi i64 [ %61, %59 ], [ 0, %45 ]
  %64 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %16, align 8
  %65 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %64, i64 0, i32 5
  %66 = load i8, i8* %65, align 8
  %67 = icmp eq i8 %66, 1
  %68 = ptrtoint %struct.VmaAllocation_T* %64 to i64
  br i1 %67, label %69, label %72

69:                                               ; preds = %62
  %70 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %64, i64 0, i32 9, i32 0, i32 1
  %71 = load i64, i64* %70, align 8
  br label %72

72:                                               ; preds = %62, %69
  %73 = phi i64 [ %71, %69 ], [ 0, %62 ]
  %74 = icmp ugt i64 %63, %73
  br i1 %74, label %75, label %117

75:                                               ; preds = %72
  %76 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, i64 0, i32 1
  %77 = bitcast i32** %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %79, i8* align 8 %50, i64 16, i1 false) #15
  store i64 %68, i64* %46, align 8
  store i64 %78, i64* %48, align 8
  br label %117

80:                                               ; preds = %41
  %81 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, i64 0, i32 1
  %82 = bitcast i32** %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0 to i8*
  br i1 %43, label %85, label %90

85:                                               ; preds = %80
  %86 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %86, i64 16, i1 false) #15
  %87 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %2 to i64*
  store i64 %21, i64* %87, align 8
  %88 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %2, i64 0, i32 1
  %89 = bitcast i32** %88 to i64*
  store i64 %83, i64* %89, align 8
  br label %117

90:                                               ; preds = %80
  %91 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %91, i64 16, i1 false) #15
  %92 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %1 to i64*
  store i64 %21, i64* %92, align 8
  %93 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %1, i64 0, i32 1
  %94 = bitcast i32** %93 to i64*
  store i64 %83, i64* %94, align 8
  %95 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %28, align 8
  %96 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %95, i64 0, i32 5
  %97 = load i8, i8* %96, align 8
  %98 = icmp eq i8 %97, 1
  br i1 %98, label %99, label %102

99:                                               ; preds = %90
  %100 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %95, i64 0, i32 9, i32 0, i32 1
  %101 = load i64, i64* %100, align 8
  br label %102

102:                                              ; preds = %99, %90
  %103 = phi i64 [ %101, %99 ], [ 0, %90 ]
  %104 = load i8, i8* %18, align 8
  %105 = icmp eq i8 %104, 1
  br i1 %105, label %106, label %109

106:                                              ; preds = %102
  %107 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %17, i64 0, i32 9, i32 0, i32 1
  %108 = load i64, i64* %107, align 8
  br label %109

109:                                              ; preds = %102, %106
  %110 = phi i64 [ %108, %106 ], [ 0, %102 ]
  %111 = icmp ugt i64 %103, %110
  br i1 %111, label %112, label %117

112:                                              ; preds = %109
  %113 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* align 8 %113, i64 16, i1 false) #15
  %114 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %2 to i64*
  store i64 %21, i64* %114, align 8
  %115 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %2, i64 0, i32 1
  %116 = bitcast i32** %115 to i64*
  store i64 %83, i64* %116, align 8
  br label %117

117:                                              ; preds = %109, %112, %72, %75, %44, %85
  %118 = phi i32 [ 1, %85 ], [ 0, %44 ], [ 2, %75 ], [ 1, %72 ], [ 2, %112 ], [ 1, %109 ]
  ret i32 %118
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort4IRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEjT0_S7_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm::AllocationInfo"*, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"*, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"*, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %6 = tail call i32 @_ZNSt3__17__sort3IRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEjT0_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %1, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %2, %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater"* dereferenceable(1) %4)
  %7 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %3, i64 0, i32 0
  %8 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %7, align 8
  %9 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %8, i64 0, i32 5
  %10 = load i8, i8* %9, align 8
  %11 = icmp eq i8 %10, 1
  br i1 %11, label %12, label %15

12:                                               ; preds = %5
  %13 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %8, i64 0, i32 9, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  br label %15

15:                                               ; preds = %12, %5
  %16 = phi i64 [ %14, %12 ], [ 0, %5 ]
  %17 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %2, i64 0, i32 0
  %18 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %17, align 8
  %19 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %18, i64 0, i32 5
  %20 = load i8, i8* %19, align 8
  %21 = icmp eq i8 %20, 1
  %22 = ptrtoint %struct.VmaAllocation_T* %18 to i64
  br i1 %21, label %23, label %26

23:                                               ; preds = %15
  %24 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %18, i64 0, i32 9, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  br label %26

26:                                               ; preds = %15, %23
  %27 = phi i64 [ %25, %23 ], [ 0, %15 ]
  %28 = icmp ugt i64 %16, %27
  br i1 %28, label %29, label %95

29:                                               ; preds = %26
  %30 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %2 to i64*
  %31 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %2, i64 0, i32 1
  %32 = bitcast i32** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %2 to i8*
  %35 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 %35, i64 16, i1 false) #15
  %36 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %3 to i64*
  store i64 %22, i64* %36, align 8
  %37 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %3, i64 0, i32 1
  %38 = bitcast i32** %37 to i64*
  store i64 %33, i64* %38, align 8
  %39 = add i32 %6, 1
  %40 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %17, align 8
  %41 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %40, i64 0, i32 5
  %42 = load i8, i8* %41, align 8
  %43 = icmp eq i8 %42, 1
  br i1 %43, label %44, label %47

44:                                               ; preds = %29
  %45 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %40, i64 0, i32 9, i32 0, i32 1
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %44, %29
  %48 = phi i64 [ %46, %44 ], [ 0, %29 ]
  %49 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %1, i64 0, i32 0
  %50 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %49, align 8
  %51 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %50, i64 0, i32 5
  %52 = load i8, i8* %51, align 8
  %53 = icmp eq i8 %52, 1
  %54 = ptrtoint %struct.VmaAllocation_T* %50 to i64
  br i1 %53, label %55, label %58

55:                                               ; preds = %47
  %56 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %50, i64 0, i32 9, i32 0, i32 1
  %57 = load i64, i64* %56, align 8
  br label %58

58:                                               ; preds = %47, %55
  %59 = phi i64 [ %57, %55 ], [ 0, %47 ]
  %60 = icmp ugt i64 %48, %59
  br i1 %60, label %61, label %95

61:                                               ; preds = %58
  %62 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %1 to i64*
  %63 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %1, i64 0, i32 1
  %64 = bitcast i32** %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %34, i64 16, i1 false) #15
  store i64 %54, i64* %30, align 8
  store i64 %65, i64* %32, align 8
  %67 = add i32 %6, 2
  %68 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %49, align 8
  %69 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %68, i64 0, i32 5
  %70 = load i8, i8* %69, align 8
  %71 = icmp eq i8 %70, 1
  br i1 %71, label %72, label %75

72:                                               ; preds = %61
  %73 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %68, i64 0, i32 9, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  br label %75

75:                                               ; preds = %72, %61
  %76 = phi i64 [ %74, %72 ], [ 0, %61 ]
  %77 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, i64 0, i32 0
  %78 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %77, align 8
  %79 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %78, i64 0, i32 5
  %80 = load i8, i8* %79, align 8
  %81 = icmp eq i8 %80, 1
  %82 = ptrtoint %struct.VmaAllocation_T* %78 to i64
  br i1 %81, label %83, label %86

83:                                               ; preds = %75
  %84 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %78, i64 0, i32 9, i32 0, i32 1
  %85 = load i64, i64* %84, align 8
  br label %86

86:                                               ; preds = %75, %83
  %87 = phi i64 [ %85, %83 ], [ 0, %75 ]
  %88 = icmp ugt i64 %76, %87
  br i1 %88, label %89, label %95

89:                                               ; preds = %86
  %90 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, i64 0, i32 1
  %91 = bitcast i32** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %93, i8* align 8 %66, i64 16, i1 false) #15
  store i64 %82, i64* %62, align 8
  store i64 %92, i64* %64, align 8
  %94 = add i32 %6, 3
  br label %95

95:                                               ; preds = %58, %89, %86, %26
  %96 = phi i32 [ %94, %89 ], [ %67, %86 ], [ %39, %58 ], [ %6, %26 ]
  ret i32 %96
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort5IRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEjT0_S7_S7_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm::AllocationInfo"*, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"*, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"*, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"*, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %7 = tail call i32 @_ZNSt3__17__sort4IRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEjT0_S7_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %1, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %2, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %3, %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater"* dereferenceable(1) %5)
  %8 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %4, i64 0, i32 0
  %9 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %8, align 8
  %10 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %9, i64 0, i32 5
  %11 = load i8, i8* %10, align 8
  %12 = icmp eq i8 %11, 1
  br i1 %12, label %13, label %16

13:                                               ; preds = %6
  %14 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %9, i64 0, i32 9, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  br label %16

16:                                               ; preds = %13, %6
  %17 = phi i64 [ %15, %13 ], [ 0, %6 ]
  %18 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %3, i64 0, i32 0
  %19 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %18, align 8
  %20 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %19, i64 0, i32 5
  %21 = load i8, i8* %20, align 8
  %22 = icmp eq i8 %21, 1
  %23 = ptrtoint %struct.VmaAllocation_T* %19 to i64
  br i1 %22, label %24, label %27

24:                                               ; preds = %16
  %25 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %19, i64 0, i32 9, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  br label %27

27:                                               ; preds = %16, %24
  %28 = phi i64 [ %26, %24 ], [ 0, %16 ]
  %29 = icmp ugt i64 %17, %28
  br i1 %29, label %30, label %124

30:                                               ; preds = %27
  %31 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %3 to i64*
  %32 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %3, i64 0, i32 1
  %33 = bitcast i32** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %3 to i8*
  %36 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 16, i1 false) #15
  %37 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %4 to i64*
  store i64 %23, i64* %37, align 8
  %38 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %4, i64 0, i32 1
  %39 = bitcast i32** %38 to i64*
  store i64 %34, i64* %39, align 8
  %40 = add i32 %7, 1
  %41 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %18, align 8
  %42 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %41, i64 0, i32 5
  %43 = load i8, i8* %42, align 8
  %44 = icmp eq i8 %43, 1
  br i1 %44, label %45, label %48

45:                                               ; preds = %30
  %46 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %41, i64 0, i32 9, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  br label %48

48:                                               ; preds = %45, %30
  %49 = phi i64 [ %47, %45 ], [ 0, %30 ]
  %50 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %2, i64 0, i32 0
  %51 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %50, align 8
  %52 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %51, i64 0, i32 5
  %53 = load i8, i8* %52, align 8
  %54 = icmp eq i8 %53, 1
  %55 = ptrtoint %struct.VmaAllocation_T* %51 to i64
  br i1 %54, label %56, label %59

56:                                               ; preds = %48
  %57 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %51, i64 0, i32 9, i32 0, i32 1
  %58 = load i64, i64* %57, align 8
  br label %59

59:                                               ; preds = %48, %56
  %60 = phi i64 [ %58, %56 ], [ 0, %48 ]
  %61 = icmp ugt i64 %49, %60
  br i1 %61, label %62, label %124

62:                                               ; preds = %59
  %63 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %2 to i64*
  %64 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %2, i64 0, i32 1
  %65 = bitcast i32** %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %35, i64 16, i1 false) #15
  store i64 %55, i64* %31, align 8
  store i64 %66, i64* %33, align 8
  %68 = add i32 %7, 2
  %69 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %50, align 8
  %70 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %69, i64 0, i32 5
  %71 = load i8, i8* %70, align 8
  %72 = icmp eq i8 %71, 1
  br i1 %72, label %73, label %76

73:                                               ; preds = %62
  %74 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %69, i64 0, i32 9, i32 0, i32 1
  %75 = load i64, i64* %74, align 8
  br label %76

76:                                               ; preds = %73, %62
  %77 = phi i64 [ %75, %73 ], [ 0, %62 ]
  %78 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %1, i64 0, i32 0
  %79 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %78, align 8
  %80 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %79, i64 0, i32 5
  %81 = load i8, i8* %80, align 8
  %82 = icmp eq i8 %81, 1
  %83 = ptrtoint %struct.VmaAllocation_T* %79 to i64
  br i1 %82, label %84, label %87

84:                                               ; preds = %76
  %85 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %79, i64 0, i32 9, i32 0, i32 1
  %86 = load i64, i64* %85, align 8
  br label %87

87:                                               ; preds = %76, %84
  %88 = phi i64 [ %86, %84 ], [ 0, %76 ]
  %89 = icmp ugt i64 %77, %88
  br i1 %89, label %90, label %124

90:                                               ; preds = %87
  %91 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %1 to i64*
  %92 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %1, i64 0, i32 1
  %93 = bitcast i32** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %95, i8* align 8 %67, i64 16, i1 false) #15
  store i64 %83, i64* %63, align 8
  store i64 %94, i64* %65, align 8
  %96 = add i32 %7, 3
  %97 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %78, align 8
  %98 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %97, i64 0, i32 5
  %99 = load i8, i8* %98, align 8
  %100 = icmp eq i8 %99, 1
  br i1 %100, label %101, label %104

101:                                              ; preds = %90
  %102 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %97, i64 0, i32 9, i32 0, i32 1
  %103 = load i64, i64* %102, align 8
  br label %104

104:                                              ; preds = %101, %90
  %105 = phi i64 [ %103, %101 ], [ 0, %90 ]
  %106 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, i64 0, i32 0
  %107 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %106, align 8
  %108 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %107, i64 0, i32 5
  %109 = load i8, i8* %108, align 8
  %110 = icmp eq i8 %109, 1
  %111 = ptrtoint %struct.VmaAllocation_T* %107 to i64
  br i1 %110, label %112, label %115

112:                                              ; preds = %104
  %113 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %107, i64 0, i32 9, i32 0, i32 1
  %114 = load i64, i64* %113, align 8
  br label %115

115:                                              ; preds = %104, %112
  %116 = phi i64 [ %114, %112 ], [ 0, %104 ]
  %117 = icmp ugt i64 %105, %116
  br i1 %117, label %118, label %124

118:                                              ; preds = %115
  %119 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, i64 0, i32 1
  %120 = bitcast i32** %119 to i64*
  %121 = load i64, i64* %120, align 8
  %122 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %122, i8* align 8 %95, i64 16, i1 false) #15
  store i64 %111, i64* %91, align 8
  store i64 %121, i64* %93, align 8
  %123 = add i32 %7, 4
  br label %124

124:                                              ; preds = %59, %115, %118, %87, %27
  %125 = phi i32 [ %123, %118 ], [ %96, %115 ], [ %68, %87 ], [ %40, %59 ], [ %7, %27 ]
  ret i32 %125
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEbT0_S7_T_(%"struct.VmaDefragmentationAlgorithm::AllocationInfo"*, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %4 = ptrtoint %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %1 to i64
  %5 = ptrtoint %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 4
  switch i64 %7, label %56 [
    i64 0, label %131
    i64 1, label %131
    i64 2, label %8
    i64 3, label %41
    i64 4, label %45
    i64 5, label %50
  ]

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %1, i64 -1
  %10 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %9, i64 0, i32 0
  %11 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %10, align 8
  %12 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %11, i64 0, i32 5
  %13 = load i8, i8* %12, align 8
  %14 = icmp eq i8 %13, 1
  br i1 %14, label %15, label %18

15:                                               ; preds = %8
  %16 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %11, i64 0, i32 9, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  br label %18

18:                                               ; preds = %15, %8
  %19 = phi i64 [ %17, %15 ], [ 0, %8 ]
  %20 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, i64 0, i32 0
  %21 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %20, align 8
  %22 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %21, i64 0, i32 5
  %23 = load i8, i8* %22, align 8
  %24 = icmp eq i8 %23, 1
  %25 = ptrtoint %struct.VmaAllocation_T* %21 to i64
  br i1 %24, label %26, label %29

26:                                               ; preds = %18
  %27 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %21, i64 0, i32 9, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  br label %29

29:                                               ; preds = %18, %26
  %30 = phi i64 [ %28, %26 ], [ 0, %18 ]
  %31 = icmp ugt i64 %19, %30
  br i1 %31, label %32, label %131

32:                                               ; preds = %29
  %33 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, i64 0, i32 1
  %34 = bitcast i32** %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0 to i8*
  %37 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %9 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 16, i1 false) #15
  %38 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %9 to i64*
  store i64 %25, i64* %38, align 8
  %39 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %1, i64 -1, i32 1
  %40 = bitcast i32** %39 to i64*
  store i64 %35, i64* %40, align 8
  br label %131

41:                                               ; preds = %3
  %42 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, i64 1
  %43 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %1, i64 -1
  %44 = tail call i32 @_ZNSt3__17__sort3IRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEjT0_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %42, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %43, %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater"* dereferenceable(1) %2)
  br label %131

45:                                               ; preds = %3
  %46 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, i64 1
  %47 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, i64 2
  %48 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %1, i64 -1
  %49 = tail call i32 @_ZNSt3__17__sort4IRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEjT0_S7_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %46, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %47, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %48, %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater"* dereferenceable(1) %2)
  br label %131

50:                                               ; preds = %3
  %51 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, i64 1
  %52 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, i64 2
  %53 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, i64 3
  %54 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %1, i64 -1
  %55 = tail call i32 @_ZNSt3__17__sort5IRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEjT0_S7_S7_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %51, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %52, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %53, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %54, %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater"* dereferenceable(1) %2)
  br label %131

56:                                               ; preds = %3
  %57 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, i64 2
  %58 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, i64 1
  %59 = tail call i32 @_ZNSt3__17__sort3IRN35VmaDefragmentationAlgorithm_Generic27AllocationInfoOffsetGreaterEPN27VmaDefragmentationAlgorithm14AllocationInfoEEEjT0_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %58, %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %57, %"struct.VmaDefragmentationAlgorithm_Generic::AllocationInfoOffsetGreater"* dereferenceable(1) %2)
  %60 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %0, i64 3
  %61 = icmp eq %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %60, %1
  br i1 %61, label %131, label %62

62:                                               ; preds = %56, %124
  %63 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %126, %124 ], [ %60, %56 ]
  %64 = phi i32 [ %125, %124 ], [ 0, %56 ]
  %65 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %63, %124 ], [ %57, %56 ]
  %66 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %63, i64 0, i32 0
  %67 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %66, align 8
  %68 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %67, i64 0, i32 5
  %69 = load i8, i8* %68, align 8
  %70 = icmp eq i8 %69, 1
  br i1 %70, label %71, label %74

71:                                               ; preds = %62
  %72 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %67, i64 0, i32 9, i32 0, i32 1
  %73 = load i64, i64* %72, align 8
  br label %74

74:                                               ; preds = %71, %62
  %75 = phi i64 [ %73, %71 ], [ 0, %62 ]
  %76 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %65, i64 0, i32 0
  %77 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %76, align 8
  %78 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %77, i64 0, i32 5
  %79 = load i8, i8* %78, align 8
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %81, label %84

81:                                               ; preds = %74
  %82 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %77, i64 0, i32 9, i32 0, i32 1
  %83 = load i64, i64* %82, align 8
  br label %84

84:                                               ; preds = %74, %81
  %85 = phi i64 [ %83, %81 ], [ 0, %74 ]
  %86 = icmp ugt i64 %75, %85
  br i1 %86, label %87, label %124

87:                                               ; preds = %84
  %88 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %63, i64 0, i32 1
  %89 = bitcast i32** %88 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %67, i64 0, i32 9, i32 0, i32 1
  br label %92

92:                                               ; preds = %114, %87
  %93 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %63, %87 ], [ %94, %114 ]
  %94 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %65, %87 ], [ %99, %114 ]
  %95 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %93 to i8*
  %96 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %94 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %95, i8* align 8 %96, i64 16, i1 false)
  %97 = icmp eq %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %94, %0
  br i1 %97, label %117, label %98

98:                                               ; preds = %92
  %99 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %94, i64 -1
  %100 = load i8, i8* %68, align 8
  %101 = icmp eq i8 %100, 1
  br i1 %101, label %102, label %104

102:                                              ; preds = %98
  %103 = load i64, i64* %91, align 8
  br label %104

104:                                              ; preds = %102, %98
  %105 = phi i64 [ %103, %102 ], [ 0, %98 ]
  %106 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %99, i64 0, i32 0
  %107 = load %struct.VmaAllocation_T*, %struct.VmaAllocation_T** %106, align 8
  %108 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %107, i64 0, i32 5
  %109 = load i8, i8* %108, align 8
  %110 = icmp eq i8 %109, 1
  br i1 %110, label %111, label %114

111:                                              ; preds = %104
  %112 = getelementptr inbounds %struct.VmaAllocation_T, %struct.VmaAllocation_T* %107, i64 0, i32 9, i32 0, i32 1
  %113 = load i64, i64* %112, align 8
  br label %114

114:                                              ; preds = %104, %111
  %115 = phi i64 [ %113, %111 ], [ 0, %104 ]
  %116 = icmp ugt i64 %105, %115
  br i1 %116, label %92, label %117

117:                                              ; preds = %92, %114
  %118 = phi %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* [ %0, %92 ], [ %94, %114 ]
  %119 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %118, i64 0, i32 0
  store %struct.VmaAllocation_T* %67, %struct.VmaAllocation_T** %119, align 8
  %120 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %118, i64 0, i32 1
  %121 = bitcast i32** %120 to i64*
  store i64 %90, i64* %121, align 8
  %122 = add i32 %64, 1
  %123 = icmp eq i32 %122, 8
  br i1 %123, label %128, label %124

124:                                              ; preds = %117, %84
  %125 = phi i32 [ %122, %117 ], [ %64, %84 ]
  %126 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %63, i64 1
  %127 = icmp eq %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %126, %1
  br i1 %127, label %131, label %62

128:                                              ; preds = %117
  %129 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm::AllocationInfo", %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %63, i64 1
  %130 = icmp eq %"struct.VmaDefragmentationAlgorithm::AllocationInfo"* %129, %1
  br label %131

131:                                              ; preds = %124, %128, %56, %29, %32, %3, %3, %50, %45, %41
  %132 = phi i1 [ true, %50 ], [ true, %45 ], [ true, %41 ], [ true, %3 ], [ true, %3 ], [ true, %32 ], [ true, %29 ], [ true, %56 ], [ %130, %128 ], [ true, %124 ]
  ret i1 %132
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN16VmaPoolAllocatorI15VmaAllocation_TED2Ev(%class.VmaPoolAllocator*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.VmaPoolAllocator, %class.VmaPoolAllocator* %0, i64 0, i32 2
  %3 = getelementptr inbounds %class.VmaPoolAllocator, %class.VmaPoolAllocator* %0, i64 0, i32 2, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.VmaPoolAllocator, %class.VmaPoolAllocator* %0, i64 0, i32 0
  %8 = getelementptr inbounds %class.VmaPoolAllocator, %class.VmaPoolAllocator* %0, i64 0, i32 2, i32 1
  br label %25

9:                                                ; preds = %44, %1
  tail call void @_ZN9VmaVectorIN16VmaPoolAllocatorI15VmaAllocation_TE9ItemBlockE15VmaStlAllocatorIS3_EE6resizeEmb(%class.VmaVector.3* %2, i64 0, i1 zeroext false) #15
  %10 = getelementptr inbounds %class.VmaVector.3, %class.VmaVector.3* %2, i64 0, i32 0, i32 0
  %11 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %10, align 8
  %12 = getelementptr inbounds %class.VmaPoolAllocator, %class.VmaPoolAllocator* %0, i64 0, i32 2, i32 1
  %13 = bitcast %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"** %12 to i8**
  %14 = load i8*, i8** %13, align 8
  %15 = icmp eq %struct.VkAllocationCallbacks* %11, null
  br i1 %15, label %23, label %16

16:                                               ; preds = %9
  %17 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %11, i64 0, i32 3
  %18 = load void (i8*, i8*)*, void (i8*, i8*)** %17, align 8
  %19 = icmp eq void (i8*, i8*)* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %11, i64 0, i32 0
  %22 = load i8*, i8** %21, align 8
  tail call void %18(i8* %22, i8* %14) #15
  br label %24

23:                                               ; preds = %16, %9
  tail call void @free(i8* %14) #15
  br label %24

24:                                               ; preds = %20, %23
  ret void

25:                                               ; preds = %6, %44
  %26 = phi i64 [ %4, %6 ], [ %27, %44 ]
  %27 = add i64 %26, -1
  %28 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %7, align 8
  %29 = load %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"*, %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"** %8, align 8
  %30 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %29, i64 %27, i32 0
  %31 = load %"union.VmaPoolAllocator<VmaAllocation_T>::Item"*, %"union.VmaPoolAllocator<VmaAllocation_T>::Item"** %30, align 8
  %32 = icmp eq %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %31, null
  br i1 %32, label %44, label %33

33:                                               ; preds = %25
  %34 = bitcast %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %31 to i8*
  %35 = icmp eq %struct.VkAllocationCallbacks* %28, null
  br i1 %35, label %43, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %28, i64 0, i32 3
  %38 = load void (i8*, i8*)*, void (i8*, i8*)** %37, align 8
  %39 = icmp eq void (i8*, i8*)* %38, null
  br i1 %39, label %43, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %28, i64 0, i32 0
  %42 = load i8*, i8** %41, align 8
  tail call void %38(i8* %42, i8* nonnull %34) #15
  br label %44

43:                                               ; preds = %36, %33
  tail call void @free(i8* %34) #15
  br label %44

44:                                               ; preds = %25, %40, %43
  %45 = icmp eq i64 %27, 0
  br i1 %45, label %9, label %25
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9VmaVectorIN16VmaPoolAllocatorI15VmaAllocation_TE9ItemBlockE15VmaStlAllocatorIS3_EE6resizeEmb(%class.VmaVector.3*, i64, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.VmaVector.3, %class.VmaVector.3* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = mul i64 %5, 3
  %9 = lshr i64 %8, 1
  %10 = icmp ult i64 %8, 16
  %11 = select i1 %10, i64 8, i64 %9
  %12 = icmp ugt i64 %11, %1
  %13 = select i1 %12, i64 %11, i64 %1
  br label %16

14:                                               ; preds = %3
  %15 = select i1 %2, i64 %1, i64 %5
  br label %16

16:                                               ; preds = %14, %7
  %17 = phi i64 [ %13, %7 ], [ %15, %14 ]
  %18 = icmp eq i64 %17, %5
  br i1 %18, label %64, label %19

19:                                               ; preds = %16
  %20 = icmp eq i64 %17, 0
  br i1 %20, label %36, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %class.VmaVector.3, %class.VmaVector.3* %0, i64 0, i32 0, i32 0
  %23 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, align 8
  %24 = shl i64 %17, 4
  %25 = icmp eq %struct.VkAllocationCallbacks* %23, null
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 1
  %28 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %27, align 8
  %29 = icmp eq i8* (i8*, i64, i64, i32)* %28, null
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* %28(i8* %32, i64 %24, i64 8, i32 1) #15
  br label %36

34:                                               ; preds = %26, %21
  %35 = tail call noalias i8* @aligned_alloc(i64 8, i64 %24) #15
  br label %36

36:                                               ; preds = %34, %30, %19
  %37 = phi i8* [ null, %19 ], [ %33, %30 ], [ %35, %34 ]
  %38 = getelementptr inbounds %class.VmaVector.3, %class.VmaVector.3* %0, i64 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = icmp ugt i64 %39, %1
  %41 = select i1 %40, i64 %1, i64 %39
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %class.VmaVector.3, %class.VmaVector.3* %0, i64 0, i32 1
  %45 = bitcast %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"** %44 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = shl i64 %41, 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %46, i64 %47, i1 false)
  br label %48

48:                                               ; preds = %36, %43
  %49 = getelementptr inbounds %class.VmaVector.3, %class.VmaVector.3* %0, i64 0, i32 0, i32 0
  %50 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %49, align 8
  %51 = getelementptr inbounds %class.VmaVector.3, %class.VmaVector.3* %0, i64 0, i32 1
  %52 = bitcast %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"** %51 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq %struct.VkAllocationCallbacks* %50, null
  br i1 %54, label %62, label %55

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 3
  %57 = load void (i8*, i8*)*, void (i8*, i8*)** %56, align 8
  %58 = icmp eq void (i8*, i8*)* %57, null
  br i1 %58, label %62, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  tail call void %57(i8* %61, i8* %53) #15
  br label %63

62:                                               ; preds = %55, %48
  tail call void @free(i8* %53) #15
  br label %63

63:                                               ; preds = %59, %62
  store i64 %17, i64* %4, align 8
  store i8* %37, i8** %52, align 8
  br label %64

64:                                               ; preds = %16, %63
  %65 = getelementptr inbounds %class.VmaVector.3, %class.VmaVector.3* %0, i64 0, i32 2
  store i64 %1, i64* %65, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9VmaVectorIN13VmaJsonWriter9StackItemE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.0*, i64, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.VmaVector.0, %class.VmaVector.0* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = mul i64 %5, 3
  %9 = lshr i64 %8, 1
  %10 = icmp ult i64 %8, 16
  %11 = select i1 %10, i64 8, i64 %9
  %12 = icmp ugt i64 %11, %1
  %13 = select i1 %12, i64 %11, i64 %1
  br label %16

14:                                               ; preds = %3
  %15 = select i1 %2, i64 %1, i64 %5
  br label %16

16:                                               ; preds = %14, %7
  %17 = phi i64 [ %13, %7 ], [ %15, %14 ]
  %18 = icmp eq i64 %17, %5
  br i1 %18, label %64, label %19

19:                                               ; preds = %16
  %20 = icmp eq i64 %17, 0
  br i1 %20, label %36, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %class.VmaVector.0, %class.VmaVector.0* %0, i64 0, i32 0, i32 0
  %23 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, align 8
  %24 = mul i64 %17, 12
  %25 = icmp eq %struct.VkAllocationCallbacks* %23, null
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 1
  %28 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %27, align 8
  %29 = icmp eq i8* (i8*, i64, i64, i32)* %28, null
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* %28(i8* %32, i64 %24, i64 4, i32 1) #15
  br label %36

34:                                               ; preds = %26, %21
  %35 = tail call noalias i8* @aligned_alloc(i64 4, i64 %24) #15
  br label %36

36:                                               ; preds = %34, %30, %19
  %37 = phi i8* [ null, %19 ], [ %33, %30 ], [ %35, %34 ]
  %38 = getelementptr inbounds %class.VmaVector.0, %class.VmaVector.0* %0, i64 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = icmp ugt i64 %39, %1
  %41 = select i1 %40, i64 %1, i64 %39
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %class.VmaVector.0, %class.VmaVector.0* %0, i64 0, i32 1
  %45 = bitcast %"struct.VmaJsonWriter::StackItem"** %44 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = mul i64 %41, 12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %37, i8* align 4 %46, i64 %47, i1 false)
  br label %48

48:                                               ; preds = %36, %43
  %49 = getelementptr inbounds %class.VmaVector.0, %class.VmaVector.0* %0, i64 0, i32 0, i32 0
  %50 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %49, align 8
  %51 = getelementptr inbounds %class.VmaVector.0, %class.VmaVector.0* %0, i64 0, i32 1
  %52 = bitcast %"struct.VmaJsonWriter::StackItem"** %51 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq %struct.VkAllocationCallbacks* %50, null
  br i1 %54, label %62, label %55

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 3
  %57 = load void (i8*, i8*)*, void (i8*, i8*)** %56, align 8
  %58 = icmp eq void (i8*, i8*)* %57, null
  br i1 %58, label %62, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  tail call void %57(i8* %61, i8* %53) #15
  br label %63

62:                                               ; preds = %55, %48
  tail call void @free(i8* %53) #15
  br label %63

63:                                               ; preds = %59, %62
  store i64 %17, i64* %4, align 8
  store i8* %37, i8** %52, align 8
  br label %64

64:                                               ; preds = %16, %63
  %65 = getelementptr inbounds %class.VmaVector.0, %class.VmaVector.0* %0, i64 0, i32 2
  store i64 %1, i64* %65, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* @_ZN16VmaPoolAllocatorI11VmaListItemI16VmaSuballocationEE14CreateNewBlockEv(%class.VmaPoolAllocator.15*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.VmaPoolAllocator.15, %class.VmaPoolAllocator.15* %0, i64 0, i32 2
  %3 = getelementptr inbounds %class.VmaPoolAllocator.15, %class.VmaPoolAllocator.15* %0, i64 0, i32 2, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.VmaPoolAllocator.15, %class.VmaPoolAllocator.15* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  br label %17

9:                                                ; preds = %1
  %10 = getelementptr inbounds %class.VmaPoolAllocator.15, %class.VmaPoolAllocator.15* %0, i64 0, i32 2, i32 1
  %11 = load %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"*, %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"** %10, align 8
  %12 = add i64 %4, -1
  %13 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %11, i64 %12, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = mul i32 %14, 3
  %16 = lshr i32 %15, 1
  br label %17

17:                                               ; preds = %9, %6
  %18 = phi i32 [ %8, %6 ], [ %16, %9 ]
  %19 = getelementptr inbounds %class.VmaPoolAllocator.15, %class.VmaPoolAllocator.15* %0, i64 0, i32 0
  %20 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %19, align 8
  %21 = zext i32 %18 to i64
  %22 = mul nuw nsw i64 %21, 48
  %23 = icmp eq %struct.VkAllocationCallbacks* %20, null
  br i1 %23, label %32, label %24

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %20, i64 0, i32 1
  %26 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %25, align 8
  %27 = icmp eq i8* (i8*, i64, i64, i32)* %26, null
  br i1 %27, label %32, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %20, i64 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = tail call i8* %26(i8* %30, i64 %22, i64 8, i32 1) #15
  br label %34

32:                                               ; preds = %24, %17
  %33 = tail call noalias i8* @aligned_alloc(i64 8, i64 %22) #15
  br label %34

34:                                               ; preds = %28, %32
  %35 = phi i8* [ %31, %28 ], [ %33, %32 ]
  %36 = bitcast i8* %35 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*
  %37 = load i64, i64* %3, align 8
  %38 = add i64 %37, 1
  tail call void @_ZN9VmaVectorIN16VmaPoolAllocatorI11VmaListItemI16VmaSuballocationEE9ItemBlockE15VmaStlAllocatorIS5_EE6resizeEmb(%class.VmaVector.16* %2, i64 %38, i1 zeroext false) #15
  %39 = getelementptr inbounds %class.VmaPoolAllocator.15, %class.VmaPoolAllocator.15* %0, i64 0, i32 2, i32 1
  %40 = load %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"*, %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"** %39, align 8
  %41 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %40, i64 %37
  %42 = bitcast %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %41 to i8**
  store i8* %35, i8** %42, align 8
  %43 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %40, i64 %37, i32 1
  store i32 %18, i32* %43, align 8
  %44 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %40, i64 %37, i32 2
  store i32 0, i32* %44, align 4
  %45 = add i32 %18, -1
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %65, label %47

47:                                               ; preds = %34
  %48 = zext i32 %45 to i64
  %49 = add nsw i64 %48, -1
  %50 = and i64 %48, 3
  %51 = icmp ult i64 %49, 3
  br i1 %51, label %54, label %52

52:                                               ; preds = %47
  %53 = sub nsw i64 %48, %50
  br label %72

54:                                               ; preds = %72, %47
  %55 = phi i64 [ 0, %47 ], [ %84, %72 ]
  %56 = icmp eq i64 %50, 0
  br i1 %56, label %65, label %57

57:                                               ; preds = %54, %57
  %58 = phi i64 [ %60, %57 ], [ %55, %54 ]
  %59 = phi i64 [ %63, %57 ], [ %50, %54 ]
  %60 = add nuw nsw i64 %58, 1
  %61 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %36, i64 %58, i32 0
  %62 = trunc i64 %60 to i32
  store i32 %62, i32* %61, align 8
  %63 = add i64 %59, -1
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %57, !llvm.loop !7

65:                                               ; preds = %54, %57, %34
  %66 = phi i64 [ 0, %34 ], [ %48, %57 ], [ %48, %54 ]
  %67 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %36, i64 %66, i32 0
  store i32 -1, i32* %67, align 8
  %68 = load %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"*, %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"** %39, align 8
  %69 = load i64, i64* %3, align 8
  %70 = add i64 %69, -1
  %71 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %68, i64 %70
  ret %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %71

72:                                               ; preds = %72, %52
  %73 = phi i64 [ 0, %52 ], [ %84, %72 ]
  %74 = phi i64 [ %53, %52 ], [ %87, %72 ]
  %75 = or i64 %73, 1
  %76 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %36, i64 %73, i32 0
  %77 = trunc i64 %75 to i32
  store i32 %77, i32* %76, align 8
  %78 = or i64 %73, 2
  %79 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %36, i64 %75, i32 0
  %80 = trunc i64 %78 to i32
  store i32 %80, i32* %79, align 8
  %81 = or i64 %73, 3
  %82 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %36, i64 %78, i32 0
  %83 = trunc i64 %81 to i32
  store i32 %83, i32* %82, align 8
  %84 = add nuw nsw i64 %73, 4
  %85 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %36, i64 %81, i32 0
  %86 = trunc i64 %84 to i32
  store i32 %86, i32* %85, align 8
  %87 = add i64 %74, -4
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %54, label %72
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9VmaVectorIN7VmaListI16VmaSuballocation15VmaStlAllocatorIS1_EE8iteratorES2_IS5_EE6resizeEmb(%class.VmaVector.18*, i64, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.VmaVector.18, %class.VmaVector.18* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = mul i64 %5, 3
  %9 = lshr i64 %8, 1
  %10 = icmp ult i64 %8, 16
  %11 = select i1 %10, i64 8, i64 %9
  %12 = icmp ugt i64 %11, %1
  %13 = select i1 %12, i64 %11, i64 %1
  br label %16

14:                                               ; preds = %3
  %15 = select i1 %2, i64 %1, i64 %5
  br label %16

16:                                               ; preds = %14, %7
  %17 = phi i64 [ %13, %7 ], [ %15, %14 ]
  %18 = icmp eq i64 %17, %5
  br i1 %18, label %64, label %19

19:                                               ; preds = %16
  %20 = icmp eq i64 %17, 0
  br i1 %20, label %36, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %class.VmaVector.18, %class.VmaVector.18* %0, i64 0, i32 0, i32 0
  %23 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, align 8
  %24 = shl i64 %17, 4
  %25 = icmp eq %struct.VkAllocationCallbacks* %23, null
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 1
  %28 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %27, align 8
  %29 = icmp eq i8* (i8*, i64, i64, i32)* %28, null
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* %28(i8* %32, i64 %24, i64 8, i32 1) #15
  br label %36

34:                                               ; preds = %26, %21
  %35 = tail call noalias i8* @aligned_alloc(i64 8, i64 %24) #15
  br label %36

36:                                               ; preds = %34, %30, %19
  %37 = phi i8* [ null, %19 ], [ %33, %30 ], [ %35, %34 ]
  %38 = getelementptr inbounds %class.VmaVector.18, %class.VmaVector.18* %0, i64 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = icmp ugt i64 %39, %1
  %41 = select i1 %40, i64 %1, i64 %39
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %class.VmaVector.18, %class.VmaVector.18* %0, i64 0, i32 1
  %45 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %44 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = shl i64 %41, 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %46, i64 %47, i1 false)
  br label %48

48:                                               ; preds = %36, %43
  %49 = getelementptr inbounds %class.VmaVector.18, %class.VmaVector.18* %0, i64 0, i32 0, i32 0
  %50 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %49, align 8
  %51 = getelementptr inbounds %class.VmaVector.18, %class.VmaVector.18* %0, i64 0, i32 1
  %52 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"** %51 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq %struct.VkAllocationCallbacks* %50, null
  br i1 %54, label %62, label %55

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 3
  %57 = load void (i8*, i8*)*, void (i8*, i8*)** %56, align 8
  %58 = icmp eq void (i8*, i8*)* %57, null
  br i1 %58, label %62, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  tail call void %57(i8* %61, i8* %53) #15
  br label %63

62:                                               ; preds = %55, %48
  tail call void @free(i8* %53) #15
  br label %63

63:                                               ; preds = %59, %62
  store i64 %17, i64* %4, align 8
  store i8* %37, i8** %52, align 8
  br label %64

64:                                               ; preds = %16, %63
  %65 = getelementptr inbounds %class.VmaVector.18, %class.VmaVector.18* %0, i64 0, i32 2
  store i64 %1, i64* %65, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %struct.VmaListItem* @_ZN10VmaRawListI16VmaSuballocationE12InsertBeforeEP11VmaListItemIS0_E(%class.VmaRawList*, %struct.VmaListItem*) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %struct.VmaListItem* %1, null
  br i1 %3, label %49, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %1, i64 0, i32 0
  %6 = load %struct.VmaListItem*, %struct.VmaListItem** %5, align 8
  %7 = getelementptr inbounds %class.VmaRawList, %class.VmaRawList* %0, i64 0, i32 1
  %8 = getelementptr inbounds %class.VmaRawList, %class.VmaRawList* %0, i64 0, i32 1, i32 2, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %class.VmaRawList, %class.VmaRawList* %0, i64 0, i32 1, i32 2, i32 1
  br label %11

11:                                               ; preds = %15, %4
  %12 = phi i64 [ %9, %4 ], [ %13, %15 ]
  %13 = add i64 %12, -1
  %14 = icmp eq i64 %12, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %11
  %16 = load %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"*, %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"** %10, align 8
  %17 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %16, i64 %13, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, -1
  br i1 %19, label %11, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %16, i64 %13, i32 0
  %22 = load %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %21, align 8
  %23 = zext i32 %18 to i64
  %24 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %22, i64 %23
  %25 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %24, i64 0, i32 0
  %26 = load i32, i32* %25, align 8
  store i32 %26, i32* %17, align 4
  br label %34

27:                                               ; preds = %11
  %28 = tail call dereferenceable(16) %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* @_ZN16VmaPoolAllocatorI11VmaListItemI16VmaSuballocationEE14CreateNewBlockEv(%class.VmaPoolAllocator.15* %7) #15
  %29 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %28, i64 0, i32 0
  %30 = load %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %29, align 8
  %31 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %30, i64 0, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %28, i64 0, i32 2
  store i32 %32, i32* %33, align 4
  br label %34

34:                                               ; preds = %20, %27
  %35 = phi %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* [ %24, %20 ], [ %30, %27 ]
  %36 = bitcast %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %35 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 48, i1 false) #15
  %37 = bitcast %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %35 to %struct.VmaListItem**
  store %struct.VmaListItem* %6, %struct.VmaListItem** %37, align 8
  %38 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %35, i64 0, i32 1, i64 4
  %39 = bitcast i8* %38 to %struct.VmaListItem**
  store %struct.VmaListItem* %1, %struct.VmaListItem** %39, align 8
  %40 = bitcast %struct.VmaListItem* %1 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"**
  store %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %35, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %40, align 8
  %41 = icmp eq %struct.VmaListItem* %6, null
  %42 = getelementptr inbounds %class.VmaRawList, %class.VmaRawList* %0, i64 0, i32 2
  %43 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %6, i64 0, i32 1
  %44 = select i1 %41, %struct.VmaListItem** %42, %struct.VmaListItem** %43
  %45 = bitcast %struct.VmaListItem** %44 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"**
  store %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %35, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %45, align 8
  %46 = getelementptr inbounds %class.VmaRawList, %class.VmaRawList* %0, i64 0, i32 4
  %47 = load i64, i64* %46, align 8
  %48 = add i64 %47, 1
  store i64 %48, i64* %46, align 8
  br label %104

49:                                               ; preds = %2
  %50 = getelementptr inbounds %class.VmaRawList, %class.VmaRawList* %0, i64 0, i32 1
  %51 = getelementptr inbounds %class.VmaRawList, %class.VmaRawList* %0, i64 0, i32 1, i32 2, i32 2
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %class.VmaRawList, %class.VmaRawList* %0, i64 0, i32 1, i32 2, i32 1
  br label %54

54:                                               ; preds = %58, %49
  %55 = phi i64 [ %52, %49 ], [ %56, %58 ]
  %56 = add i64 %55, -1
  %57 = icmp eq i64 %55, 0
  br i1 %57, label %70, label %58

58:                                               ; preds = %54
  %59 = load %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"*, %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"** %53, align 8
  %60 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %59, i64 %56, i32 2
  %61 = load i32, i32* %60, align 4
  %62 = icmp eq i32 %61, -1
  br i1 %62, label %54, label %63

63:                                               ; preds = %58
  %64 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %59, i64 %56, i32 0
  %65 = load %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %64, align 8
  %66 = zext i32 %61 to i64
  %67 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %65, i64 %66
  %68 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %67, i64 0, i32 0
  %69 = load i32, i32* %68, align 8
  store i32 %69, i32* %60, align 4
  br label %77

70:                                               ; preds = %54
  %71 = tail call dereferenceable(16) %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* @_ZN16VmaPoolAllocatorI11VmaListItemI16VmaSuballocationEE14CreateNewBlockEv(%class.VmaPoolAllocator.15* %50) #15
  %72 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %71, i64 0, i32 0
  %73 = load %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"*, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %72, align 8
  %74 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %73, i64 0, i32 0
  %75 = load i32, i32* %74, align 8
  %76 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock", %"struct.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::ItemBlock"* %71, i64 0, i32 2
  store i32 %75, i32* %76, align 4
  br label %77

77:                                               ; preds = %70, %63
  %78 = phi %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* [ %73, %70 ], [ %67, %63 ]
  %79 = bitcast %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %78 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %79, i8 0, i64 48, i1 false) #15
  %80 = getelementptr inbounds %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item", %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %78, i64 0, i32 1, i64 4
  %81 = bitcast i8* %80 to %struct.VmaListItem**
  store %struct.VmaListItem* null, %struct.VmaListItem** %81, align 8
  %82 = getelementptr inbounds %class.VmaRawList, %class.VmaRawList* %0, i64 0, i32 4
  %83 = load i64, i64* %82, align 8
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %91

85:                                               ; preds = %77
  %86 = bitcast %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %78 to %struct.VmaListItem**
  store %struct.VmaListItem* null, %struct.VmaListItem** %86, align 8
  %87 = getelementptr inbounds %class.VmaRawList, %class.VmaRawList* %0, i64 0, i32 2
  %88 = bitcast %struct.VmaListItem** %87 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"**
  store %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %78, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %88, align 8
  %89 = getelementptr inbounds %class.VmaRawList, %class.VmaRawList* %0, i64 0, i32 3
  %90 = bitcast %struct.VmaListItem** %89 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"**
  store %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %78, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %90, align 8
  br label %102

91:                                               ; preds = %77
  %92 = getelementptr inbounds %class.VmaRawList, %class.VmaRawList* %0, i64 0, i32 3
  %93 = bitcast %struct.VmaListItem** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = bitcast %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %78 to i64*
  store i64 %94, i64* %95, align 8
  %96 = load %struct.VmaListItem*, %struct.VmaListItem** %92, align 8
  %97 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %96, i64 0, i32 1
  %98 = bitcast %struct.VmaListItem** %97 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"**
  store %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %78, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %98, align 8
  %99 = bitcast %struct.VmaListItem** %92 to %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"**
  store %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %78, %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"** %99, align 8
  %100 = load i64, i64* %82, align 8
  %101 = add i64 %100, 1
  br label %102

102:                                              ; preds = %85, %91
  %103 = phi i64 [ %101, %91 ], [ 1, %85 ]
  store i64 %103, i64* %82, align 8
  br label %104

104:                                              ; preds = %102, %34
  %105 = phi %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* [ %35, %34 ], [ %78, %102 ]
  %106 = bitcast %"union.VmaPoolAllocator<VmaListItem<VmaSuballocation> >::Item"* %105 to %struct.VmaListItem*
  ret %struct.VmaListItem* %106
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %struct.VmaAllocation_T* @_ZN16VmaPoolAllocatorI15VmaAllocation_TE5AllocIJjbEEEPS0_DpT_(%class.VmaPoolAllocator*, i32, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %4 = zext i1 %2 to i8
  %5 = getelementptr inbounds %class.VmaPoolAllocator, %class.VmaPoolAllocator* %0, i64 0, i32 2, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %class.VmaPoolAllocator, %class.VmaPoolAllocator* %0, i64 0, i32 2, i32 1
  br label %8

8:                                                ; preds = %12, %3
  %9 = phi i64 [ %6, %3 ], [ %10, %12 ]
  %10 = add i64 %9, -1
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %37, label %12

12:                                               ; preds = %8
  %13 = load %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"*, %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"** %7, align 8
  %14 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %13, i64 %10, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, -1
  br i1 %16, label %8, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %13, i64 %10, i32 0
  %19 = load %"union.VmaPoolAllocator<VmaAllocation_T>::Item"*, %"union.VmaPoolAllocator<VmaAllocation_T>::Item"** %18, align 8
  %20 = zext i32 %15 to i64
  %21 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %19, i64 %20
  %22 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %21, i64 0, i32 0
  %23 = load i32, i32* %22, align 8
  store i32 %23, i32* %14, align 4
  %24 = bitcast %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %21 to i64*
  store i64 1, i64* %24, align 8
  %25 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %19, i64 %20, i32 1, i64 4
  %26 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %19, i64 %20, i32 1, i64 20
  %27 = bitcast i8* %26 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 16, i1 false) #15
  store i32 %1, i32* %27, align 4
  %28 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %19, i64 %20, i32 1, i64 24
  %29 = bitcast i8* %28 to i32*
  store i32 0, i32* %29, align 4
  %30 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %19, i64 %20, i32 1, i64 28
  store i8 0, i8* %30, align 8
  %31 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %19, i64 %20, i32 1, i64 29
  store i8 1, i8* %31, align 1
  %32 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %19, i64 %20, i32 1, i64 30
  store i8 0, i8* %32, align 2
  %33 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %19, i64 %20, i32 1, i64 31
  store i8 %4, i8* %33, align 1
  %34 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %19, i64 %20, i32 1, i64 60
  %35 = bitcast i8* %34 to i32*
  store i32 %1, i32* %35, align 8
  %36 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %19, i64 %20, i32 1, i64 64
  br label %57

37:                                               ; preds = %8
  %38 = tail call dereferenceable(16) %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* @_ZN16VmaPoolAllocatorI15VmaAllocation_TE14CreateNewBlockEv(%class.VmaPoolAllocator* %0)
  %39 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %38, i64 0, i32 0
  %40 = load %"union.VmaPoolAllocator<VmaAllocation_T>::Item"*, %"union.VmaPoolAllocator<VmaAllocation_T>::Item"** %39, align 8
  %41 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %40, i64 0, i32 0
  %42 = load i32, i32* %41, align 8
  %43 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %38, i64 0, i32 2
  store i32 %42, i32* %43, align 4
  %44 = bitcast %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %40 to i64*
  store i64 1, i64* %44, align 8
  %45 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %40, i64 0, i32 1, i64 4
  %46 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %40, i64 0, i32 1, i64 20
  %47 = bitcast i8* %46 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %45, i8 0, i64 16, i1 false) #15
  store i32 %1, i32* %47, align 4
  %48 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %40, i64 0, i32 1, i64 24
  %49 = bitcast i8* %48 to i32*
  store i32 0, i32* %49, align 4
  %50 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %40, i64 0, i32 1, i64 28
  store i8 0, i8* %50, align 8
  %51 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %40, i64 0, i32 1, i64 29
  store i8 1, i8* %51, align 1
  %52 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %40, i64 0, i32 1, i64 30
  store i8 0, i8* %52, align 2
  %53 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %40, i64 0, i32 1, i64 31
  store i8 %4, i8* %53, align 1
  %54 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %40, i64 0, i32 1, i64 60
  %55 = bitcast i8* %54 to i32*
  store i32 %1, i32* %55, align 8
  %56 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %40, i64 0, i32 1, i64 64
  br label %57

57:                                               ; preds = %17, %37
  %58 = phi i8* [ %36, %17 ], [ %56, %37 ]
  %59 = phi %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* [ %21, %17 ], [ %40, %37 ]
  %60 = bitcast i8* %58 to i32*
  store i32 0, i32* %60, align 4
  %61 = bitcast %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %59 to %struct.VmaAllocation_T*
  ret %struct.VmaAllocation_T* %61
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* @_ZN16VmaPoolAllocatorI15VmaAllocation_TE14CreateNewBlockEv(%class.VmaPoolAllocator*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.VmaPoolAllocator, %class.VmaPoolAllocator* %0, i64 0, i32 2
  %3 = getelementptr inbounds %class.VmaPoolAllocator, %class.VmaPoolAllocator* %0, i64 0, i32 2, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.VmaPoolAllocator, %class.VmaPoolAllocator* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  br label %17

9:                                                ; preds = %1
  %10 = getelementptr inbounds %class.VmaPoolAllocator, %class.VmaPoolAllocator* %0, i64 0, i32 2, i32 1
  %11 = load %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"*, %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"** %10, align 8
  %12 = add i64 %4, -1
  %13 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %11, i64 %12, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = mul i32 %14, 3
  %16 = lshr i32 %15, 1
  br label %17

17:                                               ; preds = %9, %6
  %18 = phi i32 [ %8, %6 ], [ %16, %9 ]
  %19 = getelementptr inbounds %class.VmaPoolAllocator, %class.VmaPoolAllocator* %0, i64 0, i32 0
  %20 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %19, align 8
  %21 = zext i32 %18 to i64
  %22 = mul nuw nsw i64 %21, 72
  %23 = icmp eq %struct.VkAllocationCallbacks* %20, null
  br i1 %23, label %32, label %24

24:                                               ; preds = %17
  %25 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %20, i64 0, i32 1
  %26 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %25, align 8
  %27 = icmp eq i8* (i8*, i64, i64, i32)* %26, null
  br i1 %27, label %32, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %20, i64 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = tail call i8* %26(i8* %30, i64 %22, i64 8, i32 1) #15
  br label %34

32:                                               ; preds = %24, %17
  %33 = tail call noalias i8* @aligned_alloc(i64 8, i64 %22) #15
  br label %34

34:                                               ; preds = %28, %32
  %35 = phi i8* [ %31, %28 ], [ %33, %32 ]
  %36 = bitcast i8* %35 to %"union.VmaPoolAllocator<VmaAllocation_T>::Item"*
  %37 = load i64, i64* %3, align 8
  %38 = add i64 %37, 1
  tail call void @_ZN9VmaVectorIN16VmaPoolAllocatorI15VmaAllocation_TE9ItemBlockE15VmaStlAllocatorIS3_EE6resizeEmb(%class.VmaVector.3* %2, i64 %38, i1 zeroext false) #15
  %39 = getelementptr inbounds %class.VmaPoolAllocator, %class.VmaPoolAllocator* %0, i64 0, i32 2, i32 1
  %40 = load %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"*, %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"** %39, align 8
  %41 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %40, i64 %37
  %42 = bitcast %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %41 to i8**
  store i8* %35, i8** %42, align 8
  %43 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %40, i64 %37, i32 1
  store i32 %18, i32* %43, align 8
  %44 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %40, i64 %37, i32 2
  store i32 0, i32* %44, align 4
  %45 = add i32 %18, -1
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %65, label %47

47:                                               ; preds = %34
  %48 = zext i32 %45 to i64
  %49 = add nsw i64 %48, -1
  %50 = and i64 %48, 3
  %51 = icmp ult i64 %49, 3
  br i1 %51, label %54, label %52

52:                                               ; preds = %47
  %53 = sub nsw i64 %48, %50
  br label %72

54:                                               ; preds = %72, %47
  %55 = phi i64 [ 0, %47 ], [ %84, %72 ]
  %56 = icmp eq i64 %50, 0
  br i1 %56, label %65, label %57

57:                                               ; preds = %54, %57
  %58 = phi i64 [ %60, %57 ], [ %55, %54 ]
  %59 = phi i64 [ %63, %57 ], [ %50, %54 ]
  %60 = add nuw nsw i64 %58, 1
  %61 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %36, i64 %58, i32 0
  %62 = trunc i64 %60 to i32
  store i32 %62, i32* %61, align 8
  %63 = add i64 %59, -1
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %57, !llvm.loop !8

65:                                               ; preds = %54, %57, %34
  %66 = phi i64 [ 0, %34 ], [ %48, %57 ], [ %48, %54 ]
  %67 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %36, i64 %66, i32 0
  store i32 -1, i32* %67, align 8
  %68 = load %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"*, %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"** %39, align 8
  %69 = load i64, i64* %3, align 8
  %70 = add i64 %69, -1
  %71 = getelementptr inbounds %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock", %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %68, i64 %70
  ret %"struct.VmaPoolAllocator<VmaAllocation_T>::ItemBlock"* %71

72:                                               ; preds = %72, %52
  %73 = phi i64 [ 0, %52 ], [ %84, %72 ]
  %74 = phi i64 [ %53, %52 ], [ %87, %72 ]
  %75 = or i64 %73, 1
  %76 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %36, i64 %73, i32 0
  %77 = trunc i64 %75 to i32
  store i32 %77, i32* %76, align 8
  %78 = or i64 %73, 2
  %79 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %36, i64 %75, i32 0
  %80 = trunc i64 %78 to i32
  store i32 %80, i32* %79, align 8
  %81 = or i64 %73, 3
  %82 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %36, i64 %78, i32 0
  %83 = trunc i64 %81 to i32
  store i32 %83, i32* %82, align 8
  %84 = add nuw nsw i64 %73, 4
  %85 = getelementptr inbounds %"union.VmaPoolAllocator<VmaAllocation_T>::Item", %"union.VmaPoolAllocator<VmaAllocation_T>::Item"* %36, i64 %81, i32 0
  %86 = trunc i64 %84 to i32
  store i32 %86, i32* %85, align 8
  %87 = add i64 %74, -4
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %54, label %72
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9VmaVectorIP20VmaDeviceMemoryBlock15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.13*, i64, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.VmaVector.13, %class.VmaVector.13* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = mul i64 %5, 3
  %9 = lshr i64 %8, 1
  %10 = icmp ult i64 %8, 16
  %11 = select i1 %10, i64 8, i64 %9
  %12 = icmp ugt i64 %11, %1
  %13 = select i1 %12, i64 %11, i64 %1
  br label %16

14:                                               ; preds = %3
  %15 = select i1 %2, i64 %1, i64 %5
  br label %16

16:                                               ; preds = %14, %7
  %17 = phi i64 [ %13, %7 ], [ %15, %14 ]
  %18 = icmp eq i64 %17, %5
  br i1 %18, label %64, label %19

19:                                               ; preds = %16
  %20 = icmp eq i64 %17, 0
  br i1 %20, label %36, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %class.VmaVector.13, %class.VmaVector.13* %0, i64 0, i32 0, i32 0
  %23 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, align 8
  %24 = shl i64 %17, 3
  %25 = icmp eq %struct.VkAllocationCallbacks* %23, null
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 1
  %28 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %27, align 8
  %29 = icmp eq i8* (i8*, i64, i64, i32)* %28, null
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* %28(i8* %32, i64 %24, i64 8, i32 1) #15
  br label %36

34:                                               ; preds = %26, %21
  %35 = tail call noalias i8* @aligned_alloc(i64 8, i64 %24) #15
  br label %36

36:                                               ; preds = %34, %30, %19
  %37 = phi i8* [ null, %19 ], [ %33, %30 ], [ %35, %34 ]
  %38 = getelementptr inbounds %class.VmaVector.13, %class.VmaVector.13* %0, i64 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = icmp ugt i64 %39, %1
  %41 = select i1 %40, i64 %1, i64 %39
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %class.VmaVector.13, %class.VmaVector.13* %0, i64 0, i32 1
  %45 = bitcast %class.VmaDeviceMemoryBlock*** %44 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = shl i64 %41, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %46, i64 %47, i1 false)
  br label %48

48:                                               ; preds = %36, %43
  %49 = getelementptr inbounds %class.VmaVector.13, %class.VmaVector.13* %0, i64 0, i32 0, i32 0
  %50 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %49, align 8
  %51 = getelementptr inbounds %class.VmaVector.13, %class.VmaVector.13* %0, i64 0, i32 1
  %52 = bitcast %class.VmaDeviceMemoryBlock*** %51 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq %struct.VkAllocationCallbacks* %50, null
  br i1 %54, label %62, label %55

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 3
  %57 = load void (i8*, i8*)*, void (i8*, i8*)** %56, align 8
  %58 = icmp eq void (i8*, i8*)* %57, null
  br i1 %58, label %62, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  tail call void %57(i8* %61, i8* %53) #15
  br label %63

62:                                               ; preds = %55, %48
  tail call void @free(i8* %53) #15
  br label %63

63:                                               ; preds = %59, %62
  store i64 %17, i64* %4, align 8
  store i8* %37, i8** %52, align 8
  br label %64

64:                                               ; preds = %16, %63
  %65 = getelementptr inbounds %class.VmaVector.13, %class.VmaVector.13* %0, i64 0, i32 2
  store i64 %1, i64* %65, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9VmaVectorIPN35VmaDefragmentationAlgorithm_Generic9BlockInfoE15VmaStlAllocatorIS2_EE6resizeEmb(%class.VmaVector.34*, i64, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.VmaVector.34, %class.VmaVector.34* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = mul i64 %5, 3
  %9 = lshr i64 %8, 1
  %10 = icmp ult i64 %8, 16
  %11 = select i1 %10, i64 8, i64 %9
  %12 = icmp ugt i64 %11, %1
  %13 = select i1 %12, i64 %11, i64 %1
  br label %16

14:                                               ; preds = %3
  %15 = select i1 %2, i64 %1, i64 %5
  br label %16

16:                                               ; preds = %14, %7
  %17 = phi i64 [ %13, %7 ], [ %15, %14 ]
  %18 = icmp eq i64 %17, %5
  br i1 %18, label %64, label %19

19:                                               ; preds = %16
  %20 = icmp eq i64 %17, 0
  br i1 %20, label %36, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %class.VmaVector.34, %class.VmaVector.34* %0, i64 0, i32 0, i32 0
  %23 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, align 8
  %24 = shl i64 %17, 3
  %25 = icmp eq %struct.VkAllocationCallbacks* %23, null
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 1
  %28 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %27, align 8
  %29 = icmp eq i8* (i8*, i64, i64, i32)* %28, null
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* %28(i8* %32, i64 %24, i64 8, i32 1) #15
  br label %36

34:                                               ; preds = %26, %21
  %35 = tail call noalias i8* @aligned_alloc(i64 8, i64 %24) #15
  br label %36

36:                                               ; preds = %34, %30, %19
  %37 = phi i8* [ null, %19 ], [ %33, %30 ], [ %35, %34 ]
  %38 = getelementptr inbounds %class.VmaVector.34, %class.VmaVector.34* %0, i64 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = icmp ugt i64 %39, %1
  %41 = select i1 %40, i64 %1, i64 %39
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %class.VmaVector.34, %class.VmaVector.34* %0, i64 0, i32 1
  %45 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*** %44 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = shl i64 %41, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %46, i64 %47, i1 false)
  br label %48

48:                                               ; preds = %36, %43
  %49 = getelementptr inbounds %class.VmaVector.34, %class.VmaVector.34* %0, i64 0, i32 0, i32 0
  %50 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %49, align 8
  %51 = getelementptr inbounds %class.VmaVector.34, %class.VmaVector.34* %0, i64 0, i32 1
  %52 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*** %51 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq %struct.VkAllocationCallbacks* %50, null
  br i1 %54, label %62, label %55

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 3
  %57 = load void (i8*, i8*)*, void (i8*, i8*)** %56, align 8
  %58 = icmp eq void (i8*, i8*)* %57, null
  br i1 %58, label %62, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  tail call void %57(i8* %61, i8* %53) #15
  br label %63

62:                                               ; preds = %55, %48
  tail call void @free(i8* %53) #15
  br label %63

63:                                               ; preds = %59, %62
  store i64 %17, i64* %4, align 8
  store i8* %37, i8** %52, align 8
  br label %64

64:                                               ; preds = %16, %63
  %65 = getelementptr inbounds %class.VmaVector.34, %class.VmaVector.34* %0, i64 0, i32 2
  store i64 %1, i64* %65, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__sortIRN35VmaDefragmentationAlgorithm_Generic16BlockPointerLessEPPNS1_9BlockInfoEEEvT0_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockPointerLess"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  br label %4

4:                                                ; preds = %449, %3
  %5 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %1, %3 ], [ %425, %449 ]
  %6 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %0, %3 ], [ %18, %449 ]
  %7 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %5 to i64
  %8 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %5, i64 -1
  %9 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %8 to i64*
  %10 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %8 to i64*
  %11 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %8 to i64*
  %12 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %8 to i64*
  %13 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %8 to i64*
  %14 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %5 to i64
  br label %15

15:                                               ; preds = %458, %4
  %16 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %6, %4 ], [ %459, %458 ]
  br label %17

17:                                               ; preds = %366, %15
  %18 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %16, %15 ], [ %351, %366 ]
  %19 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18 to i64
  %20 = sub i64 %7, %19
  %21 = ashr exact i64 %20, 3
  switch i64 %21, label %132 [
    i64 0, label %462
    i64 1, label %462
    i64 2, label %22
    i64 3, label %36
    i64 4, label %82
    i64 5, label %87
  ]

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %5, i64 -1
  %24 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %23, align 8
  %25 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, align 8
  %26 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %24, i64 0, i32 1
  %27 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %26, align 8
  %28 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %25, i64 0, i32 1
  %29 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %28, align 8
  %30 = icmp ult %class.VmaDeviceMemoryBlock* %27, %29
  br i1 %30, label %31, label %462

31:                                               ; preds = %22
  %32 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %24 to i64
  %33 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %25 to i64
  %34 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18 to i64*
  %35 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %23 to i64*
  store i64 %32, i64* %34, align 8
  store i64 %33, i64* %35, align 8
  br label %462

36:                                               ; preds = %17
  %37 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, i64 1
  %38 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %5, i64 -1
  %39 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %37, align 8
  %40 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, align 8
  %41 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %39, i64 0, i32 1
  %42 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %41, align 8
  %43 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %40, i64 0, i32 1
  %44 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %43, align 8
  %45 = icmp ult %class.VmaDeviceMemoryBlock* %42, %44
  %46 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %38, align 8
  %47 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %46, i64 0, i32 1
  %48 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %47, align 8
  %49 = icmp ult %class.VmaDeviceMemoryBlock* %48, %42
  %50 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %39 to i64
  %51 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %46 to i64
  %52 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %40 to i64
  br i1 %45, label %68, label %53

53:                                               ; preds = %36
  br i1 %49, label %54, label %462

54:                                               ; preds = %53
  %55 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %37 to i64*
  %56 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %38 to i64*
  store i64 %51, i64* %55, align 8
  store i64 %50, i64* %56, align 8
  %57 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %37, align 8
  %58 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, align 8
  %59 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %57, i64 0, i32 1
  %60 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %59, align 8
  %61 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %58, i64 0, i32 1
  %62 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %61, align 8
  %63 = icmp ult %class.VmaDeviceMemoryBlock* %60, %62
  br i1 %63, label %64, label %462

64:                                               ; preds = %54
  %65 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %57 to i64
  %66 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %58 to i64
  %67 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18 to i64*
  store i64 %65, i64* %67, align 8
  store i64 %66, i64* %55, align 8
  br label %462

68:                                               ; preds = %36
  %69 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18 to i64*
  br i1 %49, label %70, label %72

70:                                               ; preds = %68
  %71 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %38 to i64*
  store i64 %51, i64* %69, align 8
  store i64 %52, i64* %71, align 8
  br label %462

72:                                               ; preds = %68
  %73 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %37 to i64*
  store i64 %50, i64* %69, align 8
  store i64 %52, i64* %73, align 8
  %74 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %38, align 8
  %75 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %74, i64 0, i32 1
  %76 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %75, align 8
  %77 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %43, align 8
  %78 = icmp ult %class.VmaDeviceMemoryBlock* %76, %77
  br i1 %78, label %79, label %462

79:                                               ; preds = %72
  %80 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %74 to i64
  %81 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %38 to i64*
  store i64 %80, i64* %73, align 8
  store i64 %52, i64* %81, align 8
  br label %462

82:                                               ; preds = %17
  %83 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, i64 1
  %84 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, i64 2
  %85 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %5, i64 -1
  %86 = tail call i32 @_ZNSt3__17__sort4IRN35VmaDefragmentationAlgorithm_Generic16BlockPointerLessEPPNS1_9BlockInfoEEEjT0_S7_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %83, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %84, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %85, %"struct.VmaDefragmentationAlgorithm_Generic::BlockPointerLess"* dereferenceable(1) %2)
  br label %462

87:                                               ; preds = %17
  %88 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, i64 1
  %89 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, i64 2
  %90 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, i64 3
  %91 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %5, i64 -1
  %92 = tail call i32 @_ZNSt3__17__sort4IRN35VmaDefragmentationAlgorithm_Generic16BlockPointerLessEPPNS1_9BlockInfoEEEjT0_S7_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %88, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %89, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %90, %"struct.VmaDefragmentationAlgorithm_Generic::BlockPointerLess"* dereferenceable(1) %2) #15
  %93 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %91, align 8
  %94 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %90, align 8
  %95 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %93, i64 0, i32 1
  %96 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %95, align 8
  %97 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %94, i64 0, i32 1
  %98 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %97, align 8
  %99 = icmp ult %class.VmaDeviceMemoryBlock* %96, %98
  br i1 %99, label %100, label %462

100:                                              ; preds = %87
  %101 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %93 to i64
  %102 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %94 to i64
  %103 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %90 to i64*
  %104 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %91 to i64*
  store i64 %101, i64* %103, align 8
  store i64 %102, i64* %104, align 8
  %105 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %90, align 8
  %106 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %89, align 8
  %107 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %105, i64 0, i32 1
  %108 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %107, align 8
  %109 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %106, i64 0, i32 1
  %110 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %109, align 8
  %111 = icmp ult %class.VmaDeviceMemoryBlock* %108, %110
  br i1 %111, label %112, label %462

112:                                              ; preds = %100
  %113 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %105 to i64
  %114 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %106 to i64
  %115 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %89 to i64*
  store i64 %113, i64* %115, align 8
  store i64 %114, i64* %103, align 8
  %116 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %88, align 8
  %117 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %107, align 8
  %118 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %116, i64 0, i32 1
  %119 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %118, align 8
  %120 = icmp ult %class.VmaDeviceMemoryBlock* %117, %119
  br i1 %120, label %121, label %462

121:                                              ; preds = %112
  %122 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %116 to i64
  %123 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %88 to i64*
  store i64 %113, i64* %123, align 8
  store i64 %122, i64* %115, align 8
  %124 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, align 8
  %125 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %107, align 8
  %126 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %124, i64 0, i32 1
  %127 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %126, align 8
  %128 = icmp ult %class.VmaDeviceMemoryBlock* %125, %127
  br i1 %128, label %129, label %462

129:                                              ; preds = %121
  %130 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %124 to i64
  %131 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18 to i64*
  store i64 %113, i64* %131, align 8
  store i64 %130, i64* %123, align 8
  br label %462

132:                                              ; preds = %17
  %133 = icmp slt i64 %20, 248
  br i1 %133, label %134, label %208

134:                                              ; preds = %132
  %135 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, i64 2
  %136 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, i64 1
  %137 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %136, align 8
  %138 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, align 8
  %139 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %137, i64 0, i32 1
  %140 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %139, align 8
  %141 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %138, i64 0, i32 1
  %142 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %141, align 8
  %143 = icmp ult %class.VmaDeviceMemoryBlock* %140, %142
  %144 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %135, align 8
  %145 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %144, i64 0, i32 1
  %146 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %145, align 8
  %147 = icmp ult %class.VmaDeviceMemoryBlock* %146, %140
  %148 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %137 to i64
  %149 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %144 to i64
  %150 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %138 to i64
  br i1 %143, label %160, label %151

151:                                              ; preds = %134
  br i1 %147, label %152, label %171

152:                                              ; preds = %151
  %153 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %136 to i64*
  %154 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %135 to i64*
  store i64 %149, i64* %153, align 8
  store i64 %148, i64* %154, align 8
  %155 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %145, align 8
  %156 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %141, align 8
  %157 = icmp ult %class.VmaDeviceMemoryBlock* %155, %156
  br i1 %157, label %158, label %171

158:                                              ; preds = %152
  %159 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18 to i64*
  store i64 %149, i64* %159, align 8
  store i64 %150, i64* %153, align 8
  br label %171

160:                                              ; preds = %134
  %161 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18 to i64*
  br i1 %147, label %162, label %164

162:                                              ; preds = %160
  %163 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %135 to i64*
  store i64 %149, i64* %161, align 8
  store i64 %150, i64* %163, align 8
  br label %171

164:                                              ; preds = %160
  %165 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %136 to i64*
  store i64 %148, i64* %161, align 8
  store i64 %150, i64* %165, align 8
  %166 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %145, align 8
  %167 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %141, align 8
  %168 = icmp ult %class.VmaDeviceMemoryBlock* %166, %167
  br i1 %168, label %169, label %171

169:                                              ; preds = %164
  %170 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %135 to i64*
  store i64 %149, i64* %165, align 8
  store i64 %150, i64* %170, align 8
  br label %171

171:                                              ; preds = %169, %164, %162, %158, %152, %151
  %172 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* [ %144, %151 ], [ %137, %152 ], [ %137, %158 ], [ %138, %162 ], [ %144, %164 ], [ %138, %169 ]
  %173 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, i64 3
  %174 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %173, %5
  br i1 %174, label %462, label %175

175:                                              ; preds = %171, %206
  %176 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* [ %207, %206 ], [ %172, %171 ]
  %177 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %204, %206 ], [ %173, %171 ]
  %178 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %177, %206 ], [ %135, %171 ]
  %179 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %177, align 8
  %180 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %179, i64 0, i32 1
  %181 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %180, align 8
  %182 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %176, i64 0, i32 1
  %183 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %182, align 8
  %184 = icmp ult %class.VmaDeviceMemoryBlock* %181, %183
  %185 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %179 to i64
  br i1 %184, label %186, label %203

186:                                              ; preds = %175, %193
  %187 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %188, %193 ], [ %177, %175 ]
  %188 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %194, %193 ], [ %178, %175 ]
  %189 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %188 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %187 to i64*
  store i64 %190, i64* %191, align 8
  %192 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %188, %18
  br i1 %192, label %200, label %193

193:                                              ; preds = %186
  %194 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %188, i64 -1
  %195 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %194, align 8
  %196 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %180, align 8
  %197 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %195, i64 0, i32 1
  %198 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %197, align 8
  %199 = icmp ult %class.VmaDeviceMemoryBlock* %196, %198
  br i1 %199, label %186, label %200

200:                                              ; preds = %186, %193
  %201 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %188, %193 ], [ %18, %186 ]
  %202 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %201 to i64*
  store i64 %185, i64* %202, align 8
  br label %203

203:                                              ; preds = %200, %175
  %204 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %177, i64 1
  %205 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %204, %5
  br i1 %205, label %462, label %206

206:                                              ; preds = %203
  %207 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %177, align 8
  br label %175

208:                                              ; preds = %132
  %209 = icmp sgt i64 %20, 7992
  %210 = sdiv i64 %21, 2
  %211 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, i64 %210
  br i1 %209, label %212, label %265

212:                                              ; preds = %208
  %213 = sdiv i64 %21, 4
  %214 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, i64 %213
  %215 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %211, i64 %213
  %216 = tail call i32 @_ZNSt3__17__sort4IRN35VmaDefragmentationAlgorithm_Generic16BlockPointerLessEPPNS1_9BlockInfoEEEjT0_S7_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %214, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %211, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %215, %"struct.VmaDefragmentationAlgorithm_Generic::BlockPointerLess"* dereferenceable(1) %2) #15
  %217 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %8, align 8
  %218 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %215, align 8
  %219 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %217, i64 0, i32 1
  %220 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %219, align 8
  %221 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %218, i64 0, i32 1
  %222 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %221, align 8
  %223 = icmp ult %class.VmaDeviceMemoryBlock* %220, %222
  br i1 %223, label %224, label %306

224:                                              ; preds = %212
  %225 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %217 to i64
  %226 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %218 to i64
  %227 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %215 to i64*
  store i64 %225, i64* %227, align 8
  store i64 %226, i64* %12, align 8
  %228 = add i32 %216, 1
  %229 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %215, align 8
  %230 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %211, align 8
  %231 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %229, i64 0, i32 1
  %232 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %231, align 8
  %233 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %230, i64 0, i32 1
  %234 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %233, align 8
  %235 = icmp ult %class.VmaDeviceMemoryBlock* %232, %234
  br i1 %235, label %236, label %306

236:                                              ; preds = %224
  %237 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %229 to i64
  %238 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %230 to i64
  %239 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %211 to i64*
  store i64 %237, i64* %239, align 8
  store i64 %238, i64* %227, align 8
  %240 = add i32 %216, 2
  %241 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %211, align 8
  %242 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %214, align 8
  %243 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %241, i64 0, i32 1
  %244 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %243, align 8
  %245 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %242, i64 0, i32 1
  %246 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %245, align 8
  %247 = icmp ult %class.VmaDeviceMemoryBlock* %244, %246
  br i1 %247, label %248, label %306

248:                                              ; preds = %236
  %249 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %241 to i64
  %250 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %242 to i64
  %251 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %214 to i64*
  store i64 %249, i64* %251, align 8
  store i64 %250, i64* %239, align 8
  %252 = add i32 %216, 3
  %253 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %214, align 8
  %254 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, align 8
  %255 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %253, i64 0, i32 1
  %256 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %255, align 8
  %257 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %254, i64 0, i32 1
  %258 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %257, align 8
  %259 = icmp ult %class.VmaDeviceMemoryBlock* %256, %258
  br i1 %259, label %260, label %306

260:                                              ; preds = %248
  %261 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %253 to i64
  %262 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %254 to i64
  %263 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18 to i64*
  store i64 %261, i64* %263, align 8
  store i64 %262, i64* %251, align 8
  %264 = add i32 %216, 4
  br label %306

265:                                              ; preds = %208
  %266 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %211, align 8
  %267 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, align 8
  %268 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %266, i64 0, i32 1
  %269 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %268, align 8
  %270 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %267, i64 0, i32 1
  %271 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %270, align 8
  %272 = icmp ult %class.VmaDeviceMemoryBlock* %269, %271
  %273 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %8, align 8
  %274 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %273, i64 0, i32 1
  %275 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %274, align 8
  %276 = icmp ult %class.VmaDeviceMemoryBlock* %275, %269
  %277 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %266 to i64
  %278 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %273 to i64
  %279 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %267 to i64
  br i1 %272, label %294, label %280

280:                                              ; preds = %265
  br i1 %276, label %281, label %306

281:                                              ; preds = %280
  %282 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %211 to i64*
  store i64 %278, i64* %282, align 8
  store i64 %277, i64* %9, align 8
  %283 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %211, align 8
  %284 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, align 8
  %285 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %283, i64 0, i32 1
  %286 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %285, align 8
  %287 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %284, i64 0, i32 1
  %288 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %287, align 8
  %289 = icmp ult %class.VmaDeviceMemoryBlock* %286, %288
  br i1 %289, label %290, label %306

290:                                              ; preds = %281
  %291 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %283 to i64
  %292 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %284 to i64
  %293 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18 to i64*
  store i64 %291, i64* %293, align 8
  store i64 %292, i64* %282, align 8
  br label %306

294:                                              ; preds = %265
  %295 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18 to i64*
  br i1 %276, label %296, label %297

296:                                              ; preds = %294
  store i64 %278, i64* %295, align 8
  store i64 %279, i64* %11, align 8
  br label %306

297:                                              ; preds = %294
  %298 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %211 to i64*
  store i64 %277, i64* %295, align 8
  store i64 %279, i64* %298, align 8
  %299 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %8, align 8
  %300 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %299, i64 0, i32 1
  %301 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %300, align 8
  %302 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %270, align 8
  %303 = icmp ult %class.VmaDeviceMemoryBlock* %301, %302
  br i1 %303, label %304, label %306

304:                                              ; preds = %297
  %305 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %299 to i64
  store i64 %305, i64* %298, align 8
  store i64 %279, i64* %10, align 8
  br label %306

306:                                              ; preds = %304, %297, %296, %290, %281, %280, %260, %248, %236, %224, %212
  %307 = phi i32 [ %264, %260 ], [ %252, %248 ], [ %240, %236 ], [ %228, %224 ], [ %216, %212 ], [ 1, %296 ], [ 0, %280 ], [ 2, %290 ], [ 1, %281 ], [ 2, %304 ], [ 1, %297 ]
  %308 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, align 8
  %309 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %211, align 8
  %310 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %308, i64 0, i32 1
  %311 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %310, align 8
  %312 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %309, i64 0, i32 1
  %313 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %312, align 8
  %314 = icmp ult %class.VmaDeviceMemoryBlock* %311, %313
  br i1 %314, label %383, label %315

315:                                              ; preds = %306, %372
  %316 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %317, %372 ], [ %8, %306 ]
  %317 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %316, i64 -1
  %318 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, %317
  br i1 %318, label %319, label %372

319:                                              ; preds = %315
  %320 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, i64 1
  %321 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %8, align 8
  %322 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %321, i64 0, i32 1
  %323 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %322, align 8
  %324 = icmp ult %class.VmaDeviceMemoryBlock* %311, %323
  %325 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %321 to i64
  br i1 %324, label %341, label %326

326:                                              ; preds = %319
  %327 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %320, %8
  br i1 %327, label %462, label %328

328:                                              ; preds = %326, %338
  %329 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %339, %338 ], [ %320, %326 ]
  %330 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %329, align 8
  %331 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %330, i64 0, i32 1
  %332 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %331, align 8
  %333 = icmp ult %class.VmaDeviceMemoryBlock* %311, %332
  br i1 %333, label %334, label %338

334:                                              ; preds = %328
  %335 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %330 to i64
  %336 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %329 to i64*
  store i64 %325, i64* %336, align 8
  store i64 %335, i64* %13, align 8
  %337 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %329, i64 1
  br label %341

338:                                              ; preds = %328
  %339 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %329, i64 1
  %340 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %339, %8
  br i1 %340, label %462, label %328

341:                                              ; preds = %334, %319
  %342 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %320, %319 ], [ %337, %334 ]
  %343 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %342, %8
  br i1 %343, label %462, label %344

344:                                              ; preds = %341, %368
  %345 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %356, %368 ], [ %342, %341 ]
  %346 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %361, %368 ], [ %8, %341 ]
  %347 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, align 8
  %348 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %347, i64 0, i32 1
  %349 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %348, align 8
  br label %350

350:                                              ; preds = %350, %344
  %351 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %345, %344 ], [ %356, %350 ]
  %352 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %351, align 8
  %353 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %352, i64 0, i32 1
  %354 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %353, align 8
  %355 = icmp ult %class.VmaDeviceMemoryBlock* %349, %354
  %356 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %351, i64 1
  br i1 %355, label %357, label %350

357:                                              ; preds = %350
  %358 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %352 to i64
  br label %359

359:                                              ; preds = %357, %359
  %360 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %361, %359 ], [ %346, %357 ]
  %361 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %360, i64 -1
  %362 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %361, align 8
  %363 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %362, i64 0, i32 1
  %364 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %363, align 8
  %365 = icmp ult %class.VmaDeviceMemoryBlock* %349, %364
  br i1 %365, label %359, label %366

366:                                              ; preds = %359
  %367 = icmp ult %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %351, %361
  br i1 %367, label %368, label %17

368:                                              ; preds = %366
  %369 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %362 to i64
  %370 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %351 to i64*
  %371 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %361 to i64*
  store i64 %369, i64* %370, align 8
  store i64 %358, i64* %371, align 8
  br label %344

372:                                              ; preds = %315
  %373 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %317, align 8
  %374 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %373, i64 0, i32 1
  %375 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %374, align 8
  %376 = icmp ult %class.VmaDeviceMemoryBlock* %375, %313
  br i1 %376, label %377, label %315

377:                                              ; preds = %372
  %378 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %308 to i64
  %379 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %373 to i64
  %380 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18 to i64*
  %381 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %317 to i64*
  store i64 %379, i64* %380, align 8
  store i64 %378, i64* %381, align 8
  %382 = add i32 %307, 1
  br label %383

383:                                              ; preds = %306, %377
  %384 = phi i32 [ %382, %377 ], [ %307, %306 ]
  %385 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %317, %377 ], [ %8, %306 ]
  %386 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18 to i64
  %387 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, i64 1
  %388 = icmp ult %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %387, %385
  br i1 %388, label %389, label %422

389:                                              ; preds = %383, %415
  %390 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %421, %415 ], [ %211, %383 ]
  %391 = phi i32 [ %419, %415 ], [ %384, %383 ]
  %392 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %403, %415 ], [ %387, %383 ]
  %393 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %408, %415 ], [ %385, %383 ]
  %394 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %390, align 8
  %395 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %394, i64 0, i32 1
  %396 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %395, align 8
  br label %397

397:                                              ; preds = %397, %389
  %398 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %392, %389 ], [ %403, %397 ]
  %399 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %398, align 8
  %400 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %399, i64 0, i32 1
  %401 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %400, align 8
  %402 = icmp ult %class.VmaDeviceMemoryBlock* %401, %396
  %403 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %398, i64 1
  br i1 %402, label %397, label %404

404:                                              ; preds = %397
  %405 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %399 to i64
  br label %406

406:                                              ; preds = %404, %406
  %407 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %408, %406 ], [ %393, %404 ]
  %408 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %407, i64 -1
  %409 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %408, align 8
  %410 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %409, i64 0, i32 1
  %411 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %410, align 8
  %412 = icmp ult %class.VmaDeviceMemoryBlock* %411, %396
  br i1 %412, label %413, label %406

413:                                              ; preds = %406
  %414 = icmp ugt %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %398, %408
  br i1 %414, label %422, label %415

415:                                              ; preds = %413
  %416 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %409 to i64
  %417 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %398 to i64*
  %418 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %408 to i64*
  store i64 %416, i64* %417, align 8
  store i64 %405, i64* %418, align 8
  %419 = add i32 %391, 1
  %420 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %390, %398
  %421 = select i1 %420, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %408, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %390
  br label %389

422:                                              ; preds = %413, %383
  %423 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %211, %383 ], [ %390, %413 ]
  %424 = phi i32 [ %384, %383 ], [ %391, %413 ]
  %425 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %387, %383 ], [ %398, %413 ]
  %426 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %425, %423
  br i1 %426, label %441, label %427

427:                                              ; preds = %422
  %428 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %423, align 8
  %429 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %425, align 8
  %430 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %428, i64 0, i32 1
  %431 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %430, align 8
  %432 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %429, i64 0, i32 1
  %433 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %432, align 8
  %434 = icmp ult %class.VmaDeviceMemoryBlock* %431, %433
  br i1 %434, label %435, label %441

435:                                              ; preds = %427
  %436 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %428 to i64
  %437 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %429 to i64
  %438 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %425 to i64*
  %439 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %423 to i64*
  store i64 %436, i64* %438, align 8
  store i64 %437, i64* %439, align 8
  %440 = add i32 %424, 1
  br label %441

441:                                              ; preds = %422, %435, %427
  %442 = phi i32 [ %440, %435 ], [ %424, %427 ], [ %424, %422 ]
  %443 = icmp eq i32 %442, 0
  br i1 %443, label %444, label %451

444:                                              ; preds = %441
  %445 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRN35VmaDefragmentationAlgorithm_Generic16BlockPointerLessEPPNS1_9BlockInfoEEEbT0_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %425, %"struct.VmaDefragmentationAlgorithm_Generic::BlockPointerLess"* dereferenceable(1) %2)
  %446 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %425, i64 1
  %447 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRN35VmaDefragmentationAlgorithm_Generic16BlockPointerLessEPPNS1_9BlockInfoEEEbT0_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %446, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %5, %"struct.VmaDefragmentationAlgorithm_Generic::BlockPointerLess"* dereferenceable(1) %2)
  br i1 %447, label %448, label %450

448:                                              ; preds = %444
  br i1 %445, label %462, label %449

449:                                              ; preds = %448, %460
  br label %4

450:                                              ; preds = %444
  br i1 %445, label %458, label %451

451:                                              ; preds = %450, %441
  %452 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %425 to i64
  %453 = sub i64 %452, %386
  %454 = sub i64 %14, %452
  %455 = icmp slt i64 %453, %454
  br i1 %455, label %456, label %460

456:                                              ; preds = %451
  tail call void @_ZNSt3__16__sortIRN35VmaDefragmentationAlgorithm_Generic16BlockPointerLessEPPNS1_9BlockInfoEEEvT0_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %18, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %425, %"struct.VmaDefragmentationAlgorithm_Generic::BlockPointerLess"* dereferenceable(1) %2)
  %457 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %425, i64 1
  br label %458

458:                                              ; preds = %456, %450
  %459 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %446, %450 ], [ %457, %456 ]
  br label %15

460:                                              ; preds = %451
  %461 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %425, i64 1
  tail call void @_ZNSt3__16__sortIRN35VmaDefragmentationAlgorithm_Generic16BlockPointerLessEPPNS1_9BlockInfoEEEvT0_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %461, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %5, %"struct.VmaDefragmentationAlgorithm_Generic::BlockPointerLess"* dereferenceable(1) %2)
  br label %449

462:                                              ; preds = %448, %341, %17, %17, %326, %338, %203, %171, %129, %121, %112, %100, %87, %79, %72, %70, %64, %54, %53, %22, %31, %82
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort4IRN35VmaDefragmentationAlgorithm_Generic16BlockPointerLessEPPNS1_9BlockInfoEEEjT0_S7_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockPointerLess"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %6 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1, align 8
  %7 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, align 8
  %8 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %6, i64 0, i32 1
  %9 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %8, align 8
  %10 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %7, i64 0, i32 1
  %11 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %10, align 8
  %12 = icmp ult %class.VmaDeviceMemoryBlock* %9, %11
  %13 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2, align 8
  %14 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %13, i64 0, i32 1
  %15 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %14, align 8
  %16 = icmp ult %class.VmaDeviceMemoryBlock* %15, %9
  %17 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %6 to i64
  %18 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %13 to i64
  %19 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %7 to i64
  br i1 %12, label %37, label %20

20:                                               ; preds = %5
  br i1 %16, label %21, label %51

21:                                               ; preds = %20
  %22 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1 to i64*
  %23 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2 to i64*
  store i64 %18, i64* %22, align 8
  store i64 %17, i64* %23, align 8
  %24 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1, align 8
  %25 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, align 8
  %26 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %24, i64 0, i32 1
  %27 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %26, align 8
  %28 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %25, i64 0, i32 1
  %29 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %28, align 8
  %30 = icmp ult %class.VmaDeviceMemoryBlock* %27, %29
  br i1 %30, label %31, label %51

31:                                               ; preds = %21
  %32 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %24 to i64
  %33 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %25 to i64
  %34 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0 to i64*
  store i64 %32, i64* %34, align 8
  store i64 %33, i64* %22, align 8
  %35 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2, align 8
  %36 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %35 to i64
  br label %51

37:                                               ; preds = %5
  %38 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0 to i64*
  br i1 %16, label %39, label %41

39:                                               ; preds = %37
  %40 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2 to i64*
  store i64 %18, i64* %38, align 8
  store i64 %19, i64* %40, align 8
  br label %51

41:                                               ; preds = %37
  %42 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1 to i64*
  store i64 %17, i64* %38, align 8
  store i64 %19, i64* %42, align 8
  %43 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2, align 8
  %44 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %43, i64 0, i32 1
  %45 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %44, align 8
  %46 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %10, align 8
  %47 = icmp ult %class.VmaDeviceMemoryBlock* %45, %46
  %48 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %43 to i64
  br i1 %47, label %49, label %51

49:                                               ; preds = %41
  %50 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2 to i64*
  store i64 %48, i64* %42, align 8
  store i64 %19, i64* %50, align 8
  br label %51

51:                                               ; preds = %20, %21, %31, %39, %41, %49
  %52 = phi i64 [ %19, %39 ], [ %18, %20 ], [ %36, %31 ], [ %17, %21 ], [ %19, %49 ], [ %48, %41 ]
  %53 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* [ %7, %39 ], [ %13, %20 ], [ %35, %31 ], [ %6, %21 ], [ %7, %49 ], [ %43, %41 ]
  %54 = phi i32 [ 1, %39 ], [ 0, %20 ], [ 2, %31 ], [ 1, %21 ], [ 2, %49 ], [ 1, %41 ]
  %55 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %3, align 8
  %56 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %55, i64 0, i32 1
  %57 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %56, align 8
  %58 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %53, i64 0, i32 1
  %59 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %58, align 8
  %60 = icmp ult %class.VmaDeviceMemoryBlock* %57, %59
  br i1 %60, label %61, label %90

61:                                               ; preds = %51
  %62 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %55 to i64
  %63 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2 to i64*
  %64 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %3 to i64*
  store i64 %62, i64* %63, align 8
  store i64 %52, i64* %64, align 8
  %65 = add nuw nsw i32 %54, 1
  %66 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2, align 8
  %67 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1, align 8
  %68 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %66, i64 0, i32 1
  %69 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %68, align 8
  %70 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %67, i64 0, i32 1
  %71 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %70, align 8
  %72 = icmp ult %class.VmaDeviceMemoryBlock* %69, %71
  br i1 %72, label %73, label %90

73:                                               ; preds = %61
  %74 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %66 to i64
  %75 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %67 to i64
  %76 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1 to i64*
  store i64 %74, i64* %76, align 8
  store i64 %75, i64* %63, align 8
  %77 = add nuw nsw i32 %54, 2
  %78 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1, align 8
  %79 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, align 8
  %80 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %78, i64 0, i32 1
  %81 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %80, align 8
  %82 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %79, i64 0, i32 1
  %83 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %82, align 8
  %84 = icmp ult %class.VmaDeviceMemoryBlock* %81, %83
  br i1 %84, label %85, label %90

85:                                               ; preds = %73
  %86 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %78 to i64
  %87 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %79 to i64
  %88 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0 to i64*
  store i64 %86, i64* %88, align 8
  store i64 %87, i64* %76, align 8
  %89 = add nuw nsw i32 %54, 3
  br label %90

90:                                               ; preds = %61, %85, %73, %51
  %91 = phi i32 [ %89, %85 ], [ %77, %73 ], [ %65, %61 ], [ %54, %51 ]
  ret i32 %91
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRN35VmaDefragmentationAlgorithm_Generic16BlockPointerLessEPPNS1_9BlockInfoEEEbT0_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockPointerLess"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %4 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1 to i64
  %5 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 3
  switch i64 %7, label %118 [
    i64 0, label %199
    i64 1, label %199
    i64 2, label %8
    i64 3, label %22
    i64 4, label %68
    i64 5, label %73
  ]

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1, i64 -1
  %10 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %9, align 8
  %11 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, align 8
  %12 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %10, i64 0, i32 1
  %13 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %12, align 8
  %14 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %11, i64 0, i32 1
  %15 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %14, align 8
  %16 = icmp ult %class.VmaDeviceMemoryBlock* %13, %15
  br i1 %16, label %17, label %199

17:                                               ; preds = %8
  %18 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %10 to i64
  %19 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %11 to i64
  %20 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0 to i64*
  %21 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %9 to i64*
  store i64 %18, i64* %20, align 8
  store i64 %19, i64* %21, align 8
  br label %199

22:                                               ; preds = %3
  %23 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, i64 1
  %24 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1, i64 -1
  %25 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %23, align 8
  %26 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, align 8
  %27 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %25, i64 0, i32 1
  %28 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %27, align 8
  %29 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %26, i64 0, i32 1
  %30 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %29, align 8
  %31 = icmp ult %class.VmaDeviceMemoryBlock* %28, %30
  %32 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %24, align 8
  %33 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %32, i64 0, i32 1
  %34 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %33, align 8
  %35 = icmp ult %class.VmaDeviceMemoryBlock* %34, %28
  %36 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %25 to i64
  %37 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %32 to i64
  %38 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %26 to i64
  br i1 %31, label %54, label %39

39:                                               ; preds = %22
  br i1 %35, label %40, label %199

40:                                               ; preds = %39
  %41 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %23 to i64*
  %42 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %24 to i64*
  store i64 %37, i64* %41, align 8
  store i64 %36, i64* %42, align 8
  %43 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %23, align 8
  %44 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, align 8
  %45 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %43, i64 0, i32 1
  %46 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %45, align 8
  %47 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %44, i64 0, i32 1
  %48 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %47, align 8
  %49 = icmp ult %class.VmaDeviceMemoryBlock* %46, %48
  br i1 %49, label %50, label %199

50:                                               ; preds = %40
  %51 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %43 to i64
  %52 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %44 to i64
  %53 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0 to i64*
  store i64 %51, i64* %53, align 8
  store i64 %52, i64* %41, align 8
  br label %199

54:                                               ; preds = %22
  %55 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0 to i64*
  br i1 %35, label %56, label %58

56:                                               ; preds = %54
  %57 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %24 to i64*
  store i64 %37, i64* %55, align 8
  store i64 %38, i64* %57, align 8
  br label %199

58:                                               ; preds = %54
  %59 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %23 to i64*
  store i64 %36, i64* %55, align 8
  store i64 %38, i64* %59, align 8
  %60 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %24, align 8
  %61 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %60, i64 0, i32 1
  %62 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %61, align 8
  %63 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %29, align 8
  %64 = icmp ult %class.VmaDeviceMemoryBlock* %62, %63
  br i1 %64, label %65, label %199

65:                                               ; preds = %58
  %66 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %60 to i64
  %67 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %24 to i64*
  store i64 %66, i64* %59, align 8
  store i64 %38, i64* %67, align 8
  br label %199

68:                                               ; preds = %3
  %69 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, i64 1
  %70 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, i64 2
  %71 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1, i64 -1
  %72 = tail call i32 @_ZNSt3__17__sort4IRN35VmaDefragmentationAlgorithm_Generic16BlockPointerLessEPPNS1_9BlockInfoEEEjT0_S7_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %69, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %70, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %71, %"struct.VmaDefragmentationAlgorithm_Generic::BlockPointerLess"* dereferenceable(1) %2)
  br label %199

73:                                               ; preds = %3
  %74 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, i64 1
  %75 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, i64 2
  %76 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, i64 3
  %77 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1, i64 -1
  %78 = tail call i32 @_ZNSt3__17__sort4IRN35VmaDefragmentationAlgorithm_Generic16BlockPointerLessEPPNS1_9BlockInfoEEEjT0_S7_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %74, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %75, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %76, %"struct.VmaDefragmentationAlgorithm_Generic::BlockPointerLess"* dereferenceable(1) %2) #15
  %79 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %77, align 8
  %80 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %76, align 8
  %81 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %79, i64 0, i32 1
  %82 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %81, align 8
  %83 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %80, i64 0, i32 1
  %84 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %83, align 8
  %85 = icmp ult %class.VmaDeviceMemoryBlock* %82, %84
  br i1 %85, label %86, label %199

86:                                               ; preds = %73
  %87 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %79 to i64
  %88 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %80 to i64
  %89 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %76 to i64*
  %90 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %77 to i64*
  store i64 %87, i64* %89, align 8
  store i64 %88, i64* %90, align 8
  %91 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %76, align 8
  %92 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %75, align 8
  %93 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %91, i64 0, i32 1
  %94 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %93, align 8
  %95 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %92, i64 0, i32 1
  %96 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %95, align 8
  %97 = icmp ult %class.VmaDeviceMemoryBlock* %94, %96
  br i1 %97, label %98, label %199

98:                                               ; preds = %86
  %99 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %91 to i64
  %100 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %92 to i64
  %101 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %75 to i64*
  store i64 %99, i64* %101, align 8
  store i64 %100, i64* %89, align 8
  %102 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %74, align 8
  %103 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %93, align 8
  %104 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %102, i64 0, i32 1
  %105 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %104, align 8
  %106 = icmp ult %class.VmaDeviceMemoryBlock* %103, %105
  br i1 %106, label %107, label %199

107:                                              ; preds = %98
  %108 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %102 to i64
  %109 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %74 to i64*
  store i64 %99, i64* %109, align 8
  store i64 %108, i64* %101, align 8
  %110 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, align 8
  %111 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %93, align 8
  %112 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %110, i64 0, i32 1
  %113 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %112, align 8
  %114 = icmp ult %class.VmaDeviceMemoryBlock* %111, %113
  br i1 %114, label %115, label %199

115:                                              ; preds = %107
  %116 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %110 to i64
  %117 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0 to i64*
  store i64 %99, i64* %117, align 8
  store i64 %116, i64* %109, align 8
  br label %199

118:                                              ; preds = %3
  %119 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, i64 2
  %120 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, i64 1
  %121 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %120, align 8
  %122 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, align 8
  %123 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %121, i64 0, i32 1
  %124 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %123, align 8
  %125 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %122, i64 0, i32 1
  %126 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %125, align 8
  %127 = icmp ult %class.VmaDeviceMemoryBlock* %124, %126
  %128 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %119, align 8
  %129 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %128, i64 0, i32 1
  %130 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %129, align 8
  %131 = icmp ult %class.VmaDeviceMemoryBlock* %130, %124
  %132 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %121 to i64
  %133 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %128 to i64
  %134 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %122 to i64
  br i1 %127, label %144, label %135

135:                                              ; preds = %118
  br i1 %131, label %136, label %155

136:                                              ; preds = %135
  %137 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %120 to i64*
  %138 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %119 to i64*
  store i64 %133, i64* %137, align 8
  store i64 %132, i64* %138, align 8
  %139 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %129, align 8
  %140 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %125, align 8
  %141 = icmp ult %class.VmaDeviceMemoryBlock* %139, %140
  br i1 %141, label %142, label %155

142:                                              ; preds = %136
  %143 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0 to i64*
  store i64 %133, i64* %143, align 8
  store i64 %134, i64* %137, align 8
  br label %155

144:                                              ; preds = %118
  %145 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0 to i64*
  br i1 %131, label %146, label %148

146:                                              ; preds = %144
  %147 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %119 to i64*
  store i64 %133, i64* %145, align 8
  store i64 %134, i64* %147, align 8
  br label %155

148:                                              ; preds = %144
  %149 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %120 to i64*
  store i64 %132, i64* %145, align 8
  store i64 %134, i64* %149, align 8
  %150 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %129, align 8
  %151 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %125, align 8
  %152 = icmp ult %class.VmaDeviceMemoryBlock* %150, %151
  br i1 %152, label %153, label %155

153:                                              ; preds = %148
  %154 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %119 to i64*
  store i64 %133, i64* %149, align 8
  store i64 %134, i64* %154, align 8
  br label %155

155:                                              ; preds = %135, %136, %142, %146, %148, %153
  %156 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* [ %128, %135 ], [ %121, %136 ], [ %121, %142 ], [ %122, %146 ], [ %128, %148 ], [ %122, %153 ]
  %157 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, i64 3
  %158 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %157, %1
  br i1 %158, label %199, label %159

159:                                              ; preds = %155, %194
  %160 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* [ %195, %194 ], [ %156, %155 ]
  %161 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %192, %194 ], [ %157, %155 ]
  %162 = phi i32 [ %191, %194 ], [ 0, %155 ]
  %163 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %161, %194 ], [ %119, %155 ]
  %164 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %161, align 8
  %165 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %164, i64 0, i32 1
  %166 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %165, align 8
  %167 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %160, i64 0, i32 1
  %168 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %167, align 8
  %169 = icmp ult %class.VmaDeviceMemoryBlock* %166, %168
  %170 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %164 to i64
  br i1 %169, label %171, label %190

171:                                              ; preds = %159, %178
  %172 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %173, %178 ], [ %161, %159 ]
  %173 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %179, %178 ], [ %163, %159 ]
  %174 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %173 to i64*
  %175 = load i64, i64* %174, align 8
  %176 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %172 to i64*
  store i64 %175, i64* %176, align 8
  %177 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %173, %0
  br i1 %177, label %185, label %178

178:                                              ; preds = %171
  %179 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %173, i64 -1
  %180 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %179, align 8
  %181 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %165, align 8
  %182 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %180, i64 0, i32 1
  %183 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %182, align 8
  %184 = icmp ult %class.VmaDeviceMemoryBlock* %181, %183
  br i1 %184, label %171, label %185

185:                                              ; preds = %171, %178
  %186 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %173, %178 ], [ %0, %171 ]
  %187 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %186 to i64*
  store i64 %170, i64* %187, align 8
  %188 = add i32 %162, 1
  %189 = icmp eq i32 %188, 8
  br i1 %189, label %196, label %190

190:                                              ; preds = %185, %159
  %191 = phi i32 [ %188, %185 ], [ %162, %159 ]
  %192 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %161, i64 1
  %193 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %192, %1
  br i1 %193, label %199, label %194

194:                                              ; preds = %190
  %195 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %161, align 8
  br label %159

196:                                              ; preds = %185
  %197 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %161, i64 1
  %198 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %197, %1
  br label %199

199:                                              ; preds = %190, %196, %155, %115, %107, %98, %86, %73, %65, %58, %56, %50, %40, %39, %8, %17, %3, %3, %68
  %200 = phi i1 [ true, %68 ], [ true, %3 ], [ true, %3 ], [ true, %17 ], [ true, %8 ], [ true, %39 ], [ true, %40 ], [ true, %50 ], [ true, %56 ], [ true, %58 ], [ true, %65 ], [ true, %73 ], [ true, %86 ], [ true, %98 ], [ true, %107 ], [ true, %115 ], [ true, %155 ], [ %198, %196 ], [ true, %190 ]
  ret i1 %200
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9VmaVectorIN27VmaDefragmentationAlgorithm14AllocationInfoE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.36*, i64, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.VmaVector.36, %class.VmaVector.36* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = mul i64 %5, 3
  %9 = lshr i64 %8, 1
  %10 = icmp ult i64 %8, 16
  %11 = select i1 %10, i64 8, i64 %9
  %12 = icmp ugt i64 %11, %1
  %13 = select i1 %12, i64 %11, i64 %1
  br label %16

14:                                               ; preds = %3
  %15 = select i1 %2, i64 %1, i64 %5
  br label %16

16:                                               ; preds = %14, %7
  %17 = phi i64 [ %13, %7 ], [ %15, %14 ]
  %18 = icmp eq i64 %17, %5
  br i1 %18, label %64, label %19

19:                                               ; preds = %16
  %20 = icmp eq i64 %17, 0
  br i1 %20, label %36, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %class.VmaVector.36, %class.VmaVector.36* %0, i64 0, i32 0, i32 0
  %23 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, align 8
  %24 = shl i64 %17, 4
  %25 = icmp eq %struct.VkAllocationCallbacks* %23, null
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 1
  %28 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %27, align 8
  %29 = icmp eq i8* (i8*, i64, i64, i32)* %28, null
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* %28(i8* %32, i64 %24, i64 8, i32 1) #15
  br label %36

34:                                               ; preds = %26, %21
  %35 = tail call noalias i8* @aligned_alloc(i64 8, i64 %24) #15
  br label %36

36:                                               ; preds = %34, %30, %19
  %37 = phi i8* [ null, %19 ], [ %33, %30 ], [ %35, %34 ]
  %38 = getelementptr inbounds %class.VmaVector.36, %class.VmaVector.36* %0, i64 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = icmp ugt i64 %39, %1
  %41 = select i1 %40, i64 %1, i64 %39
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %class.VmaVector.36, %class.VmaVector.36* %0, i64 0, i32 1
  %45 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"** %44 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = shl i64 %41, 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %46, i64 %47, i1 false)
  br label %48

48:                                               ; preds = %36, %43
  %49 = getelementptr inbounds %class.VmaVector.36, %class.VmaVector.36* %0, i64 0, i32 0, i32 0
  %50 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %49, align 8
  %51 = getelementptr inbounds %class.VmaVector.36, %class.VmaVector.36* %0, i64 0, i32 1
  %52 = bitcast %"struct.VmaDefragmentationAlgorithm::AllocationInfo"** %51 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq %struct.VkAllocationCallbacks* %50, null
  br i1 %54, label %62, label %55

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 3
  %57 = load void (i8*, i8*)*, void (i8*, i8*)** %56, align 8
  %58 = icmp eq void (i8*, i8*)* %57, null
  br i1 %58, label %62, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  tail call void %57(i8* %61, i8* %53) #15
  br label %63

62:                                               ; preds = %55, %48
  tail call void @free(i8* %53) #15
  br label %63

63:                                               ; preds = %59, %62
  store i64 %17, i64* %4, align 8
  store i8* %37, i8** %52, align 8
  br label %64

64:                                               ; preds = %16, %63
  %65 = getelementptr inbounds %class.VmaVector.36, %class.VmaVector.36* %0, i64 0, i32 2
  store i64 %1, i64* %65, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.28*, i64, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.VmaVector.28, %class.VmaVector.28* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = mul i64 %5, 3
  %9 = lshr i64 %8, 1
  %10 = icmp ult i64 %8, 16
  %11 = select i1 %10, i64 8, i64 %9
  %12 = icmp ugt i64 %11, %1
  %13 = select i1 %12, i64 %11, i64 %1
  br label %16

14:                                               ; preds = %3
  %15 = select i1 %2, i64 %1, i64 %5
  br label %16

16:                                               ; preds = %14, %7
  %17 = phi i64 [ %13, %7 ], [ %15, %14 ]
  %18 = icmp eq i64 %17, %5
  br i1 %18, label %64, label %19

19:                                               ; preds = %16
  %20 = icmp eq i64 %17, 0
  br i1 %20, label %36, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %class.VmaVector.28, %class.VmaVector.28* %0, i64 0, i32 0, i32 0
  %23 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, align 8
  %24 = shl i64 %17, 6
  %25 = icmp eq %struct.VkAllocationCallbacks* %23, null
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 1
  %28 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %27, align 8
  %29 = icmp eq i8* (i8*, i64, i64, i32)* %28, null
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* %28(i8* %32, i64 %24, i64 8, i32 1) #15
  br label %36

34:                                               ; preds = %26, %21
  %35 = tail call noalias i8* @aligned_alloc(i64 8, i64 %24) #15
  br label %36

36:                                               ; preds = %34, %30, %19
  %37 = phi i8* [ null, %19 ], [ %33, %30 ], [ %35, %34 ]
  %38 = getelementptr inbounds %class.VmaVector.28, %class.VmaVector.28* %0, i64 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = icmp ugt i64 %39, %1
  %41 = select i1 %40, i64 %1, i64 %39
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %class.VmaVector.28, %class.VmaVector.28* %0, i64 0, i32 1
  %45 = bitcast %struct.VmaDefragmentationMove** %44 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = shl i64 %41, 6
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %46, i64 %47, i1 false)
  br label %48

48:                                               ; preds = %36, %43
  %49 = getelementptr inbounds %class.VmaVector.28, %class.VmaVector.28* %0, i64 0, i32 0, i32 0
  %50 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %49, align 8
  %51 = getelementptr inbounds %class.VmaVector.28, %class.VmaVector.28* %0, i64 0, i32 1
  %52 = bitcast %struct.VmaDefragmentationMove** %51 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq %struct.VkAllocationCallbacks* %50, null
  br i1 %54, label %62, label %55

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 3
  %57 = load void (i8*, i8*)*, void (i8*, i8*)** %56, align 8
  %58 = icmp eq void (i8*, i8*)* %57, null
  br i1 %58, label %62, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  tail call void %57(i8* %61, i8* %53) #15
  br label %63

62:                                               ; preds = %55, %48
  tail call void @free(i8* %53) #15
  br label %63

63:                                               ; preds = %59, %62
  store i64 %17, i64* %4, align 8
  store i8* %37, i8** %52, align 8
  br label %64

64:                                               ; preds = %16, %63
  %65 = getelementptr inbounds %class.VmaVector.28, %class.VmaVector.28* %0, i64 0, i32 2
  store i64 %1, i64* %65, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__sortIRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEvT0_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  br label %4

4:                                                ; preds = %490, %3
  %5 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %1, %3 ], [ %433, %490 ]
  %6 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %0, %3 ], [ %15, %490 ]
  %7 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %5 to i64
  %8 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %5, i64 -1
  %9 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %5, i64 -2
  %10 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %8 to i64*
  %11 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %5 to i64
  br label %12

12:                                               ; preds = %499, %4
  %13 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %6, %4 ], [ %500, %499 ]
  br label %14

14:                                               ; preds = %284, %12
  %15 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %13, %12 ], [ %216, %284 ]
  %16 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15 to i64
  %17 = sub i64 %7, %16
  %18 = ashr exact i64 %17, 3
  switch i64 %18, label %81 [
    i64 0, label %503
    i64 1, label %503
    i64 2, label %19
    i64 3, label %66
    i64 4, label %70
    i64 5, label %75
  ]

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %5, i64 -1
  %21 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %20, align 8
  %22 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, align 8
  %23 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %21, i64 0, i32 2
  %24 = load i8, i8* %23, align 8, !range !2
  %25 = icmp eq i8 %24, 0
  %26 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %22, i64 0, i32 2
  %27 = load i8, i8* %26, align 8, !range !2
  %28 = icmp eq i8 %27, 0
  %29 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %22 to i64
  %30 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %21 to i64
  br i1 %25, label %35, label %31

31:                                               ; preds = %19
  br i1 %28, label %32, label %36

32:                                               ; preds = %31
  %33 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15 to i64*
  %34 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %20 to i64*
  br label %61

35:                                               ; preds = %19
  br i1 %28, label %36, label %503

36:                                               ; preds = %31, %35
  %37 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %21, i64 0, i32 1
  %38 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %37, align 8
  %39 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %38, i64 0, i32 0
  %40 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %39, align 8
  %41 = bitcast %class.VmaBlockMetadata* %40 to i64 (%class.VmaBlockMetadata*)***
  %42 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %41, align 8
  %43 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %42, i64 5
  %44 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %43, align 8
  %45 = tail call i64 %44(%class.VmaBlockMetadata* %40) #15
  %46 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %22, i64 0, i32 1
  %47 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %46, align 8
  %48 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %47, i64 0, i32 0
  %49 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %48, align 8
  %50 = bitcast %class.VmaBlockMetadata* %49 to i64 (%class.VmaBlockMetadata*)***
  %51 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %50, align 8
  %52 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %51, i64 5
  %53 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %52, align 8
  %54 = tail call i64 %53(%class.VmaBlockMetadata* %49) #15
  %55 = icmp ult i64 %45, %54
  br i1 %55, label %56, label %503

56:                                               ; preds = %36
  %57 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %20 to i64*
  %60 = load i64, i64* %59, align 8
  br label %61

61:                                               ; preds = %32, %56
  %62 = phi i64* [ %34, %32 ], [ %59, %56 ]
  %63 = phi i64* [ %33, %32 ], [ %57, %56 ]
  %64 = phi i64 [ %30, %32 ], [ %60, %56 ]
  %65 = phi i64 [ %29, %32 ], [ %58, %56 ]
  store i64 %64, i64* %63, align 8
  store i64 %65, i64* %62, align 8
  br label %503

66:                                               ; preds = %14
  %67 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, i64 1
  %68 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %5, i64 -1
  %69 = tail call i32 @_ZNSt3__17__sort3IRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEjT0_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %67, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %68, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* dereferenceable(1) %2)
  br label %503

70:                                               ; preds = %14
  %71 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, i64 1
  %72 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, i64 2
  %73 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %5, i64 -1
  %74 = tail call i32 @_ZNSt3__17__sort4IRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEjT0_S7_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %71, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %72, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %73, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* dereferenceable(1) %2)
  br label %503

75:                                               ; preds = %14
  %76 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, i64 1
  %77 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, i64 2
  %78 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, i64 3
  %79 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %5, i64 -1
  %80 = tail call i32 @_ZNSt3__17__sort5IRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEjT0_S7_S7_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %76, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %77, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %78, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %79, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* dereferenceable(1) %2)
  br label %503

81:                                               ; preds = %14
  %82 = icmp slt i64 %17, 248
  br i1 %82, label %83, label %84

83:                                               ; preds = %81
  tail call void @_ZNSt3__118__insertion_sort_3IRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEvT0_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %5, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* dereferenceable(1) %2)
  br label %503

84:                                               ; preds = %81
  %85 = icmp sgt i64 %17, 7992
  %86 = sdiv i64 %18, 2
  %87 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, i64 %86
  br i1 %85, label %88, label %93

88:                                               ; preds = %84
  %89 = sdiv i64 %18, 4
  %90 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, i64 %89
  %91 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %87, i64 %89
  %92 = tail call i32 @_ZNSt3__17__sort5IRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEjT0_S7_S7_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %90, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %87, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %91, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %8, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* dereferenceable(1) %2)
  br label %95

93:                                               ; preds = %84
  %94 = tail call i32 @_ZNSt3__17__sort3IRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEjT0_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %87, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %8, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* dereferenceable(1) %2)
  br label %95

95:                                               ; preds = %93, %88
  %96 = phi i32 [ %92, %88 ], [ %94, %93 ]
  %97 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, align 8
  %98 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %87, align 8
  %99 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %97, i64 0, i32 2
  %100 = load i8, i8* %99, align 8, !range !2
  %101 = icmp eq i8 %100, 0
  %102 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %98, i64 0, i32 2
  %103 = load i8, i8* %102, align 8, !range !2
  %104 = icmp eq i8 %103, 0
  br i1 %101, label %106, label %105

105:                                              ; preds = %95
  br i1 %104, label %339, label %107

106:                                              ; preds = %95
  br i1 %104, label %107, label %127

107:                                              ; preds = %106, %105
  %108 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %97, i64 0, i32 1
  %109 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %108, align 8
  %110 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %109, i64 0, i32 0
  %111 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %110, align 8
  %112 = bitcast %class.VmaBlockMetadata* %111 to i64 (%class.VmaBlockMetadata*)***
  %113 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %112, align 8
  %114 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %113, i64 5
  %115 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %114, align 8
  %116 = tail call i64 %115(%class.VmaBlockMetadata* %111) #15
  %117 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %98, i64 0, i32 1
  %118 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %117, align 8
  %119 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %118, i64 0, i32 0
  %120 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %119, align 8
  %121 = bitcast %class.VmaBlockMetadata* %120 to i64 (%class.VmaBlockMetadata*)***
  %122 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %121, align 8
  %123 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %122, i64 5
  %124 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %123, align 8
  %125 = tail call i64 %124(%class.VmaBlockMetadata* %120) #15
  %126 = icmp ult i64 %116, %125
  br i1 %126, label %339, label %127

127:                                              ; preds = %107, %106
  %128 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, %9
  br i1 %128, label %129, label %292

129:                                              ; preds = %330, %127
  %130 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, i64 1
  %131 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, align 8
  %132 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %8, align 8
  %133 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %131, i64 0, i32 2
  %134 = load i8, i8* %133, align 8, !range !2
  %135 = icmp eq i8 %134, 0
  %136 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %132, i64 0, i32 2
  %137 = load i8, i8* %136, align 8, !range !2
  %138 = icmp eq i8 %137, 0
  br i1 %135, label %140, label %139

139:                                              ; preds = %129
  br i1 %138, label %209, label %141

140:                                              ; preds = %129
  br i1 %138, label %141, label %161

141:                                              ; preds = %140, %139
  %142 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %131, i64 0, i32 1
  %143 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %142, align 8
  %144 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %143, i64 0, i32 0
  %145 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %144, align 8
  %146 = bitcast %class.VmaBlockMetadata* %145 to i64 (%class.VmaBlockMetadata*)***
  %147 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %146, align 8
  %148 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %147, i64 5
  %149 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %148, align 8
  %150 = tail call i64 %149(%class.VmaBlockMetadata* %145) #15
  %151 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %132, i64 0, i32 1
  %152 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %151, align 8
  %153 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %152, i64 0, i32 0
  %154 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %153, align 8
  %155 = bitcast %class.VmaBlockMetadata* %154 to i64 (%class.VmaBlockMetadata*)***
  %156 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %155, align 8
  %157 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %156, i64 5
  %158 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %157, align 8
  %159 = tail call i64 %158(%class.VmaBlockMetadata* %154) #15
  %160 = icmp ult i64 %150, %159
  br i1 %160, label %209, label %161

161:                                              ; preds = %141, %140
  %162 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %130, %8
  br i1 %162, label %503, label %163

163:                                              ; preds = %161, %206
  %164 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %207, %206 ], [ %130, %161 ]
  %165 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, align 8
  %166 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %164, align 8
  %167 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %165, i64 0, i32 2
  %168 = load i8, i8* %167, align 8, !range !2
  %169 = icmp eq i8 %168, 0
  %170 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %166, i64 0, i32 2
  %171 = load i8, i8* %170, align 8, !range !2
  %172 = icmp eq i8 %171, 0
  br i1 %169, label %177, label %173

173:                                              ; preds = %163
  br i1 %172, label %174, label %178

174:                                              ; preds = %173
  %175 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %166 to i64
  %176 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %164 to i64*
  br label %201

177:                                              ; preds = %163
  br i1 %172, label %178, label %206

178:                                              ; preds = %173, %177
  %179 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %165, i64 0, i32 1
  %180 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %179, align 8
  %181 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %180, i64 0, i32 0
  %182 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %181, align 8
  %183 = bitcast %class.VmaBlockMetadata* %182 to i64 (%class.VmaBlockMetadata*)***
  %184 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %183, align 8
  %185 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %184, i64 5
  %186 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %185, align 8
  %187 = tail call i64 %186(%class.VmaBlockMetadata* %182) #15
  %188 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %166, i64 0, i32 1
  %189 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %188, align 8
  %190 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %189, i64 0, i32 0
  %191 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %190, align 8
  %192 = bitcast %class.VmaBlockMetadata* %191 to i64 (%class.VmaBlockMetadata*)***
  %193 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %192, align 8
  %194 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %193, i64 5
  %195 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %194, align 8
  %196 = tail call i64 %195(%class.VmaBlockMetadata* %191) #15
  %197 = icmp ult i64 %187, %196
  br i1 %197, label %198, label %206

198:                                              ; preds = %178
  %199 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %164 to i64*
  %200 = load i64, i64* %199, align 8
  br label %201

201:                                              ; preds = %174, %198
  %202 = phi i64* [ %176, %174 ], [ %199, %198 ]
  %203 = phi i64 [ %175, %174 ], [ %200, %198 ]
  %204 = load i64, i64* %10, align 8
  store i64 %204, i64* %202, align 8
  store i64 %203, i64* %10, align 8
  %205 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %164, i64 1
  br label %209

206:                                              ; preds = %177, %178
  %207 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %164, i64 1
  %208 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %207, %8
  br i1 %208, label %503, label %163

209:                                              ; preds = %139, %141, %201
  %210 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %205, %201 ], [ %130, %141 ], [ %130, %139 ]
  %211 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %210, %8
  br i1 %211, label %503, label %212

212:                                              ; preds = %209, %286
  %213 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %291, %286 ], [ %210, %209 ]
  %214 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %253, %286 ], [ %8, %209 ]
  br label %215

215:                                              ; preds = %248, %212
  %216 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %213, %212 ], [ %249, %248 ]
  %217 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, align 8
  %218 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %216, align 8
  %219 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %217, i64 0, i32 2
  %220 = load i8, i8* %219, align 8, !range !2
  %221 = icmp eq i8 %220, 0
  %222 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %218, i64 0, i32 2
  %223 = load i8, i8* %222, align 8, !range !2
  %224 = icmp eq i8 %223, 0
  br i1 %221, label %227, label %225

225:                                              ; preds = %215
  br i1 %224, label %226, label %228

226:                                              ; preds = %228, %225
  br label %250

227:                                              ; preds = %215
  br i1 %224, label %228, label %248

228:                                              ; preds = %227, %225
  %229 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %217, i64 0, i32 1
  %230 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %229, align 8
  %231 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %230, i64 0, i32 0
  %232 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %231, align 8
  %233 = bitcast %class.VmaBlockMetadata* %232 to i64 (%class.VmaBlockMetadata*)***
  %234 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %233, align 8
  %235 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %234, i64 5
  %236 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %235, align 8
  %237 = tail call i64 %236(%class.VmaBlockMetadata* %232) #15
  %238 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %218, i64 0, i32 1
  %239 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %238, align 8
  %240 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %239, i64 0, i32 0
  %241 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %240, align 8
  %242 = bitcast %class.VmaBlockMetadata* %241 to i64 (%class.VmaBlockMetadata*)***
  %243 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %242, align 8
  %244 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %243, i64 5
  %245 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %244, align 8
  %246 = tail call i64 %245(%class.VmaBlockMetadata* %241) #15
  %247 = icmp ult i64 %237, %246
  br i1 %247, label %226, label %248

248:                                              ; preds = %227, %228
  %249 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %216, i64 1
  br label %215

250:                                              ; preds = %283, %226
  %251 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %214, %226 ], [ %253, %283 ]
  %252 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, align 8
  %253 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %251, i64 -1
  %254 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %253, align 8
  %255 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %252, i64 0, i32 2
  %256 = load i8, i8* %255, align 8, !range !2
  %257 = icmp eq i8 %256, 0
  %258 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %254, i64 0, i32 2
  %259 = load i8, i8* %258, align 8, !range !2
  %260 = icmp eq i8 %259, 0
  br i1 %257, label %262, label %261

261:                                              ; preds = %250
  br i1 %260, label %283, label %263

262:                                              ; preds = %250
  br i1 %260, label %263, label %284

263:                                              ; preds = %262, %261
  %264 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %252, i64 0, i32 1
  %265 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %264, align 8
  %266 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %265, i64 0, i32 0
  %267 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %266, align 8
  %268 = bitcast %class.VmaBlockMetadata* %267 to i64 (%class.VmaBlockMetadata*)***
  %269 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %268, align 8
  %270 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %269, i64 5
  %271 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %270, align 8
  %272 = tail call i64 %271(%class.VmaBlockMetadata* %267) #15
  %273 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %254, i64 0, i32 1
  %274 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %273, align 8
  %275 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %274, i64 0, i32 0
  %276 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %275, align 8
  %277 = bitcast %class.VmaBlockMetadata* %276 to i64 (%class.VmaBlockMetadata*)***
  %278 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %277, align 8
  %279 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %278, i64 5
  %280 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %279, align 8
  %281 = tail call i64 %280(%class.VmaBlockMetadata* %276) #15
  %282 = icmp ult i64 %272, %281
  br i1 %282, label %283, label %284

283:                                              ; preds = %263, %261
  br label %250

284:                                              ; preds = %262, %263
  %285 = icmp ult %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %216, %253
  br i1 %285, label %286, label %14

286:                                              ; preds = %284
  %287 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %216 to i64*
  %288 = load i64, i64* %287, align 8
  %289 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %253 to i64*
  %290 = load i64, i64* %289, align 8
  store i64 %290, i64* %287, align 8
  store i64 %288, i64* %289, align 8
  %291 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %216, i64 1
  br label %212

292:                                              ; preds = %127, %330
  %293 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %331, %330 ], [ %9, %127 ]
  %294 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %293, align 8
  %295 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %87, align 8
  %296 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %294, i64 0, i32 2
  %297 = load i8, i8* %296, align 8, !range !2
  %298 = icmp eq i8 %297, 0
  %299 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %295, i64 0, i32 2
  %300 = load i8, i8* %299, align 8, !range !2
  %301 = icmp eq i8 %300, 0
  br i1 %298, label %306, label %302

302:                                              ; preds = %292
  br i1 %301, label %303, label %307

303:                                              ; preds = %302
  %304 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %294 to i64
  %305 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %293 to i64*
  br label %333

306:                                              ; preds = %292
  br i1 %301, label %307, label %330

307:                                              ; preds = %306, %302
  %308 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %294, i64 0, i32 1
  %309 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %308, align 8
  %310 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %309, i64 0, i32 0
  %311 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %310, align 8
  %312 = bitcast %class.VmaBlockMetadata* %311 to i64 (%class.VmaBlockMetadata*)***
  %313 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %312, align 8
  %314 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %313, i64 5
  %315 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %314, align 8
  %316 = tail call i64 %315(%class.VmaBlockMetadata* %311) #15
  %317 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %295, i64 0, i32 1
  %318 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %317, align 8
  %319 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %318, i64 0, i32 0
  %320 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %319, align 8
  %321 = bitcast %class.VmaBlockMetadata* %320 to i64 (%class.VmaBlockMetadata*)***
  %322 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %321, align 8
  %323 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %322, i64 5
  %324 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %323, align 8
  %325 = tail call i64 %324(%class.VmaBlockMetadata* %320) #15
  %326 = icmp ult i64 %316, %325
  br i1 %326, label %327, label %330

327:                                              ; preds = %307
  %328 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %293 to i64*
  %329 = load i64, i64* %328, align 8
  br label %333

330:                                              ; preds = %307, %306
  %331 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %293, i64 -1
  %332 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, %331
  br i1 %332, label %129, label %292

333:                                              ; preds = %303, %327
  %334 = phi i64* [ %305, %303 ], [ %328, %327 ]
  %335 = phi i64 [ %304, %303 ], [ %329, %327 ]
  %336 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15 to i64*
  %337 = load i64, i64* %336, align 8
  store i64 %335, i64* %336, align 8
  store i64 %337, i64* %334, align 8
  %338 = add i32 %96, 1
  br label %339

339:                                              ; preds = %105, %107, %333
  %340 = phi i32 [ %338, %333 ], [ %96, %107 ], [ %96, %105 ]
  %341 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %293, %333 ], [ %8, %107 ], [ %8, %105 ]
  %342 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15 to i64
  %343 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, i64 1
  %344 = icmp ult %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %343, %341
  br i1 %344, label %345, label %430

345:                                              ; preds = %339, %421
  %346 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %428, %421 ], [ %87, %339 ]
  %347 = phi i32 [ %426, %421 ], [ %340, %339 ]
  %348 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %429, %421 ], [ %343, %339 ]
  %349 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %387, %421 ], [ %341, %339 ]
  br label %350

350:                                              ; preds = %383, %345
  %351 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %348, %345 ], [ %384, %383 ]
  %352 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %351, align 8
  %353 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %346, align 8
  %354 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %352, i64 0, i32 2
  %355 = load i8, i8* %354, align 8, !range !2
  %356 = icmp eq i8 %355, 0
  %357 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %353, i64 0, i32 2
  %358 = load i8, i8* %357, align 8, !range !2
  %359 = icmp eq i8 %358, 0
  br i1 %356, label %361, label %360

360:                                              ; preds = %350
  br i1 %359, label %383, label %363

361:                                              ; preds = %350
  br i1 %359, label %363, label %362

362:                                              ; preds = %363, %361
  br label %385

363:                                              ; preds = %361, %360
  %364 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %352, i64 0, i32 1
  %365 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %364, align 8
  %366 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %365, i64 0, i32 0
  %367 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %366, align 8
  %368 = bitcast %class.VmaBlockMetadata* %367 to i64 (%class.VmaBlockMetadata*)***
  %369 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %368, align 8
  %370 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %369, i64 5
  %371 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %370, align 8
  %372 = tail call i64 %371(%class.VmaBlockMetadata* %367) #15
  %373 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %353, i64 0, i32 1
  %374 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %373, align 8
  %375 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %374, i64 0, i32 0
  %376 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %375, align 8
  %377 = bitcast %class.VmaBlockMetadata* %376 to i64 (%class.VmaBlockMetadata*)***
  %378 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %377, align 8
  %379 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %378, i64 5
  %380 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %379, align 8
  %381 = tail call i64 %380(%class.VmaBlockMetadata* %376) #15
  %382 = icmp ult i64 %372, %381
  br i1 %382, label %383, label %362

383:                                              ; preds = %360, %363
  %384 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %351, i64 1
  br label %350

385:                                              ; preds = %418, %362
  %386 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %349, %362 ], [ %387, %418 ]
  %387 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %386, i64 -1
  %388 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %387, align 8
  %389 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %346, align 8
  %390 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %388, i64 0, i32 2
  %391 = load i8, i8* %390, align 8, !range !2
  %392 = icmp eq i8 %391, 0
  %393 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %389, i64 0, i32 2
  %394 = load i8, i8* %393, align 8, !range !2
  %395 = icmp eq i8 %394, 0
  br i1 %392, label %397, label %396

396:                                              ; preds = %385
  br i1 %395, label %419, label %398

397:                                              ; preds = %385
  br i1 %395, label %398, label %418

398:                                              ; preds = %397, %396
  %399 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %388, i64 0, i32 1
  %400 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %399, align 8
  %401 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %400, i64 0, i32 0
  %402 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %401, align 8
  %403 = bitcast %class.VmaBlockMetadata* %402 to i64 (%class.VmaBlockMetadata*)***
  %404 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %403, align 8
  %405 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %404, i64 5
  %406 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %405, align 8
  %407 = tail call i64 %406(%class.VmaBlockMetadata* %402) #15
  %408 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %389, i64 0, i32 1
  %409 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %408, align 8
  %410 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %409, i64 0, i32 0
  %411 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %410, align 8
  %412 = bitcast %class.VmaBlockMetadata* %411 to i64 (%class.VmaBlockMetadata*)***
  %413 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %412, align 8
  %414 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %413, i64 5
  %415 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %414, align 8
  %416 = tail call i64 %415(%class.VmaBlockMetadata* %411) #15
  %417 = icmp ult i64 %407, %416
  br i1 %417, label %419, label %418

418:                                              ; preds = %398, %397
  br label %385

419:                                              ; preds = %396, %398
  %420 = icmp ugt %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %351, %387
  br i1 %420, label %430, label %421

421:                                              ; preds = %419
  %422 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %351 to i64*
  %423 = load i64, i64* %422, align 8
  %424 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %387 to i64*
  %425 = load i64, i64* %424, align 8
  store i64 %425, i64* %422, align 8
  store i64 %423, i64* %424, align 8
  %426 = add i32 %347, 1
  %427 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %346, %351
  %428 = select i1 %427, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %387, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %346
  %429 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %351, i64 1
  br label %345

430:                                              ; preds = %419, %339
  %431 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %87, %339 ], [ %346, %419 ]
  %432 = phi i32 [ %340, %339 ], [ %347, %419 ]
  %433 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %343, %339 ], [ %351, %419 ]
  %434 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %433, %431
  br i1 %434, label %482, label %435

435:                                              ; preds = %430
  %436 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %431, align 8
  %437 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %433, align 8
  %438 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %436, i64 0, i32 2
  %439 = load i8, i8* %438, align 8, !range !2
  %440 = icmp eq i8 %439, 0
  %441 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %437, i64 0, i32 2
  %442 = load i8, i8* %441, align 8, !range !2
  %443 = icmp eq i8 %442, 0
  %444 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %437 to i64
  %445 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %436 to i64
  br i1 %440, label %450, label %446

446:                                              ; preds = %435
  br i1 %443, label %447, label %451

447:                                              ; preds = %446
  %448 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %433 to i64*
  %449 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %431 to i64*
  br label %476

450:                                              ; preds = %435
  br i1 %443, label %451, label %482

451:                                              ; preds = %446, %450
  %452 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %436, i64 0, i32 1
  %453 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %452, align 8
  %454 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %453, i64 0, i32 0
  %455 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %454, align 8
  %456 = bitcast %class.VmaBlockMetadata* %455 to i64 (%class.VmaBlockMetadata*)***
  %457 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %456, align 8
  %458 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %457, i64 5
  %459 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %458, align 8
  %460 = tail call i64 %459(%class.VmaBlockMetadata* %455) #15
  %461 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %437, i64 0, i32 1
  %462 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %461, align 8
  %463 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %462, i64 0, i32 0
  %464 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %463, align 8
  %465 = bitcast %class.VmaBlockMetadata* %464 to i64 (%class.VmaBlockMetadata*)***
  %466 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %465, align 8
  %467 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %466, i64 5
  %468 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %467, align 8
  %469 = tail call i64 %468(%class.VmaBlockMetadata* %464) #15
  %470 = icmp ult i64 %460, %469
  br i1 %470, label %471, label %482

471:                                              ; preds = %451
  %472 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %433 to i64*
  %473 = load i64, i64* %472, align 8
  %474 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %431 to i64*
  %475 = load i64, i64* %474, align 8
  br label %476

476:                                              ; preds = %447, %471
  %477 = phi i64* [ %449, %447 ], [ %474, %471 ]
  %478 = phi i64* [ %448, %447 ], [ %472, %471 ]
  %479 = phi i64 [ %445, %447 ], [ %475, %471 ]
  %480 = phi i64 [ %444, %447 ], [ %473, %471 ]
  store i64 %479, i64* %478, align 8
  store i64 %480, i64* %477, align 8
  %481 = add i32 %432, 1
  br label %482

482:                                              ; preds = %450, %430, %476, %451
  %483 = phi i32 [ %481, %476 ], [ %432, %451 ], [ %432, %430 ], [ %432, %450 ]
  %484 = icmp eq i32 %483, 0
  br i1 %484, label %485, label %492

485:                                              ; preds = %482
  %486 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEbT0_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %433, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* dereferenceable(1) %2)
  %487 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %433, i64 1
  %488 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEbT0_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %487, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %5, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* dereferenceable(1) %2)
  br i1 %488, label %489, label %491

489:                                              ; preds = %485
  br i1 %486, label %503, label %490

490:                                              ; preds = %489, %501
  br label %4

491:                                              ; preds = %485
  br i1 %486, label %499, label %492

492:                                              ; preds = %491, %482
  %493 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %433 to i64
  %494 = sub i64 %493, %342
  %495 = sub i64 %11, %493
  %496 = icmp slt i64 %494, %495
  br i1 %496, label %497, label %501

497:                                              ; preds = %492
  tail call void @_ZNSt3__16__sortIRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEvT0_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %15, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %433, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* dereferenceable(1) %2)
  %498 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %433, i64 1
  br label %499

499:                                              ; preds = %497, %491
  %500 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %487, %491 ], [ %498, %497 ]
  br label %12

501:                                              ; preds = %492
  %502 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %433, i64 1
  tail call void @_ZNSt3__16__sortIRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEvT0_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %502, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %5, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* dereferenceable(1) %2)
  br label %490

503:                                              ; preds = %489, %209, %14, %14, %161, %206, %35, %36, %61, %66, %70, %75, %83
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort3IRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEjT0_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %5 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1, align 8
  %6 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, align 8
  %7 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %5, i64 0, i32 2
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  %10 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %6, i64 0, i32 2
  %11 = load i8, i8* %10, align 8, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %9, label %14, label %13

13:                                               ; preds = %4
  br i1 %12, label %39, label %15

14:                                               ; preds = %4
  br i1 %12, label %15, label %39

15:                                               ; preds = %14, %13
  %16 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %5, i64 0, i32 1
  %17 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %16, align 8
  %18 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %17, i64 0, i32 0
  %19 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %18, align 8
  %20 = bitcast %class.VmaBlockMetadata* %19 to i64 (%class.VmaBlockMetadata*)***
  %21 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %20, align 8
  %22 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %21, i64 5
  %23 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %22, align 8
  %24 = tail call i64 %23(%class.VmaBlockMetadata* %19) #15
  %25 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %6, i64 0, i32 1
  %26 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %25, align 8
  %27 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %26, i64 0, i32 0
  %28 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %27, align 8
  %29 = bitcast %class.VmaBlockMetadata* %28 to i64 (%class.VmaBlockMetadata*)***
  %30 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %29, align 8
  %31 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %30, i64 5
  %32 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %31, align 8
  %33 = tail call i64 %32(%class.VmaBlockMetadata* %28) #15
  %34 = icmp ult i64 %24, %33
  %35 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1, align 8
  %36 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %35, i64 0, i32 2
  %37 = load i8, i8* %36, align 8, !range !2
  %38 = icmp eq i8 %37, 0
  br label %39

39:                                               ; preds = %13, %14, %15
  %40 = phi i1 [ false, %13 ], [ true, %14 ], [ %38, %15 ]
  %41 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* [ %5, %13 ], [ %5, %14 ], [ %35, %15 ]
  %42 = phi i1 [ true, %13 ], [ false, %14 ], [ %34, %15 ]
  %43 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2, align 8
  %44 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %43, i64 0, i32 2
  %45 = load i8, i8* %44, align 8, !range !2
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %48, label %47

47:                                               ; preds = %39
  br i1 %40, label %69, label %49

48:                                               ; preds = %39
  br i1 %40, label %49, label %69

49:                                               ; preds = %48, %47
  %50 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %43, i64 0, i32 1
  %51 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %50, align 8
  %52 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %51, i64 0, i32 0
  %53 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %52, align 8
  %54 = bitcast %class.VmaBlockMetadata* %53 to i64 (%class.VmaBlockMetadata*)***
  %55 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %54, align 8
  %56 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %55, i64 5
  %57 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %56, align 8
  %58 = tail call i64 %57(%class.VmaBlockMetadata* %53) #15
  %59 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %41, i64 0, i32 1
  %60 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %59, align 8
  %61 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %60, i64 0, i32 0
  %62 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %61, align 8
  %63 = bitcast %class.VmaBlockMetadata* %62 to i64 (%class.VmaBlockMetadata*)***
  %64 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %63, align 8
  %65 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %64, i64 5
  %66 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %65, align 8
  %67 = tail call i64 %66(%class.VmaBlockMetadata* %62) #15
  %68 = icmp ult i64 %58, %67
  br label %69

69:                                               ; preds = %47, %48, %49
  %70 = phi i1 [ true, %47 ], [ false, %48 ], [ %68, %49 ]
  br i1 %42, label %119, label %71

71:                                               ; preds = %69
  br i1 %70, label %72, label %169

72:                                               ; preds = %71
  %73 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2 to i64*
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %73, align 8
  store i64 %74, i64* %75, align 8
  %77 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1, align 8
  %78 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, align 8
  %79 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %77, i64 0, i32 2
  %80 = load i8, i8* %79, align 8, !range !2
  %81 = icmp eq i8 %80, 0
  %82 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %78, i64 0, i32 2
  %83 = load i8, i8* %82, align 8, !range !2
  %84 = icmp eq i8 %83, 0
  %85 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %78 to i64
  %86 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %77 to i64
  br i1 %81, label %90, label %87

87:                                               ; preds = %72
  br i1 %84, label %88, label %91

88:                                               ; preds = %87
  %89 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0 to i64*
  br label %115

90:                                               ; preds = %72
  br i1 %84, label %91, label %169

91:                                               ; preds = %87, %90
  %92 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %77, i64 0, i32 1
  %93 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %92, align 8
  %94 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %93, i64 0, i32 0
  %95 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %94, align 8
  %96 = bitcast %class.VmaBlockMetadata* %95 to i64 (%class.VmaBlockMetadata*)***
  %97 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %96, align 8
  %98 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %97, i64 5
  %99 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %98, align 8
  %100 = tail call i64 %99(%class.VmaBlockMetadata* %95) #15
  %101 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %78, i64 0, i32 1
  %102 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %101, align 8
  %103 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %102, i64 0, i32 0
  %104 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %103, align 8
  %105 = bitcast %class.VmaBlockMetadata* %104 to i64 (%class.VmaBlockMetadata*)***
  %106 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %105, align 8
  %107 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %106, i64 5
  %108 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %107, align 8
  %109 = tail call i64 %108(%class.VmaBlockMetadata* %104) #15
  %110 = icmp ult i64 %100, %109
  br i1 %110, label %111, label %169

111:                                              ; preds = %91
  %112 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = load i64, i64* %73, align 8
  br label %115

115:                                              ; preds = %88, %111
  %116 = phi i64* [ %89, %88 ], [ %112, %111 ]
  %117 = phi i64 [ %86, %88 ], [ %114, %111 ]
  %118 = phi i64 [ %85, %88 ], [ %113, %111 ]
  store i64 %117, i64* %116, align 8
  store i64 %118, i64* %73, align 8
  br label %169

119:                                              ; preds = %69
  %120 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0 to i64*
  %121 = load i64, i64* %120, align 8
  br i1 %70, label %122, label %125

122:                                              ; preds = %119
  %123 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2 to i64*
  %124 = load i64, i64* %123, align 8
  store i64 %124, i64* %120, align 8
  store i64 %121, i64* %123, align 8
  br label %169

125:                                              ; preds = %119
  %126 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1 to i64*
  %127 = load i64, i64* %126, align 8
  store i64 %127, i64* %120, align 8
  store i64 %121, i64* %126, align 8
  %128 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2, align 8
  %129 = inttoptr i64 %121 to %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*
  %130 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %128, i64 0, i32 2
  %131 = load i8, i8* %130, align 8, !range !2
  %132 = icmp eq i8 %131, 0
  %133 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %129, i64 0, i32 2
  %134 = load i8, i8* %133, align 8, !range !2
  %135 = icmp eq i8 %134, 0
  %136 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %128 to i64
  br i1 %132, label %140, label %137

137:                                              ; preds = %125
  br i1 %135, label %138, label %141

138:                                              ; preds = %137
  %139 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2 to i64*
  br label %165

140:                                              ; preds = %125
  br i1 %135, label %141, label %169

141:                                              ; preds = %137, %140
  %142 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %128, i64 0, i32 1
  %143 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %142, align 8
  %144 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %143, i64 0, i32 0
  %145 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %144, align 8
  %146 = bitcast %class.VmaBlockMetadata* %145 to i64 (%class.VmaBlockMetadata*)***
  %147 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %146, align 8
  %148 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %147, i64 5
  %149 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %148, align 8
  %150 = tail call i64 %149(%class.VmaBlockMetadata* %145) #15
  %151 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %129, i64 0, i32 1
  %152 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %151, align 8
  %153 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %152, i64 0, i32 0
  %154 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %153, align 8
  %155 = bitcast %class.VmaBlockMetadata* %154 to i64 (%class.VmaBlockMetadata*)***
  %156 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %155, align 8
  %157 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %156, i64 5
  %158 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %157, align 8
  %159 = tail call i64 %158(%class.VmaBlockMetadata* %154) #15
  %160 = icmp ult i64 %150, %159
  br i1 %160, label %161, label %169

161:                                              ; preds = %141
  %162 = load i64, i64* %126, align 8
  %163 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2 to i64*
  %164 = load i64, i64* %163, align 8
  br label %165

165:                                              ; preds = %138, %161
  %166 = phi i64* [ %139, %138 ], [ %163, %161 ]
  %167 = phi i64 [ %136, %138 ], [ %164, %161 ]
  %168 = phi i64 [ %121, %138 ], [ %162, %161 ]
  store i64 %167, i64* %126, align 8
  store i64 %168, i64* %166, align 8
  br label %169

169:                                              ; preds = %140, %90, %141, %165, %91, %115, %71, %122
  %170 = phi i32 [ 1, %122 ], [ 0, %71 ], [ 2, %115 ], [ 1, %91 ], [ 2, %165 ], [ 1, %141 ], [ 1, %90 ], [ 1, %140 ]
  ret i32 %170
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort4IRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEjT0_S7_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %6 = tail call i32 @_ZNSt3__17__sort3IRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEjT0_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* dereferenceable(1) %4)
  %7 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %3, align 8
  %8 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2, align 8
  %9 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %7, i64 0, i32 2
  %10 = load i8, i8* %9, align 8, !range !2
  %11 = icmp eq i8 %10, 0
  %12 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %8, i64 0, i32 2
  %13 = load i8, i8* %12, align 8, !range !2
  %14 = icmp eq i8 %13, 0
  %15 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %8 to i64
  %16 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %7 to i64
  br i1 %11, label %21, label %17

17:                                               ; preds = %5
  br i1 %14, label %18, label %22

18:                                               ; preds = %17
  %19 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2 to i64*
  %20 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %3 to i64*
  br label %47

21:                                               ; preds = %5
  br i1 %14, label %22, label %139

22:                                               ; preds = %17, %21
  %23 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %7, i64 0, i32 1
  %24 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %23, align 8
  %25 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %24, i64 0, i32 0
  %26 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %25, align 8
  %27 = bitcast %class.VmaBlockMetadata* %26 to i64 (%class.VmaBlockMetadata*)***
  %28 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %27, align 8
  %29 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %28, i64 5
  %30 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %29, align 8
  %31 = tail call i64 %30(%class.VmaBlockMetadata* %26) #15
  %32 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %8, i64 0, i32 1
  %33 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %32, align 8
  %34 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %33, i64 0, i32 0
  %35 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %34, align 8
  %36 = bitcast %class.VmaBlockMetadata* %35 to i64 (%class.VmaBlockMetadata*)***
  %37 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %36, align 8
  %38 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %37, i64 5
  %39 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %38, align 8
  %40 = tail call i64 %39(%class.VmaBlockMetadata* %35) #15
  %41 = icmp ult i64 %31, %40
  br i1 %41, label %42, label %139

42:                                               ; preds = %22
  %43 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %3 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %18, %42
  %48 = phi i64* [ %20, %18 ], [ %45, %42 ]
  %49 = phi i64* [ %19, %18 ], [ %43, %42 ]
  %50 = phi i64 [ %16, %18 ], [ %46, %42 ]
  %51 = phi i64 [ %15, %18 ], [ %44, %42 ]
  store i64 %50, i64* %49, align 8
  store i64 %51, i64* %48, align 8
  %52 = add i32 %6, 1
  %53 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2, align 8
  %54 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1, align 8
  %55 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %53, i64 0, i32 2
  %56 = load i8, i8* %55, align 8, !range !2
  %57 = icmp eq i8 %56, 0
  %58 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %54, i64 0, i32 2
  %59 = load i8, i8* %58, align 8, !range !2
  %60 = icmp eq i8 %59, 0
  %61 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %54 to i64
  %62 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %53 to i64
  br i1 %57, label %66, label %63

63:                                               ; preds = %47
  br i1 %60, label %64, label %67

64:                                               ; preds = %63
  %65 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1 to i64*
  br label %91

66:                                               ; preds = %47
  br i1 %60, label %67, label %139

67:                                               ; preds = %63, %66
  %68 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %53, i64 0, i32 1
  %69 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %68, align 8
  %70 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %69, i64 0, i32 0
  %71 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %70, align 8
  %72 = bitcast %class.VmaBlockMetadata* %71 to i64 (%class.VmaBlockMetadata*)***
  %73 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %72, align 8
  %74 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %73, i64 5
  %75 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %74, align 8
  %76 = tail call i64 %75(%class.VmaBlockMetadata* %71) #15
  %77 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %54, i64 0, i32 1
  %78 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %77, align 8
  %79 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %78, i64 0, i32 0
  %80 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %79, align 8
  %81 = bitcast %class.VmaBlockMetadata* %80 to i64 (%class.VmaBlockMetadata*)***
  %82 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %81, align 8
  %83 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %82, i64 5
  %84 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %83, align 8
  %85 = tail call i64 %84(%class.VmaBlockMetadata* %80) #15
  %86 = icmp ult i64 %76, %85
  br i1 %86, label %87, label %139

87:                                               ; preds = %67
  %88 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = load i64, i64* %49, align 8
  br label %91

91:                                               ; preds = %64, %87
  %92 = phi i64* [ %65, %64 ], [ %88, %87 ]
  %93 = phi i64 [ %62, %64 ], [ %90, %87 ]
  %94 = phi i64 [ %61, %64 ], [ %89, %87 ]
  store i64 %93, i64* %92, align 8
  store i64 %94, i64* %49, align 8
  %95 = add i32 %6, 2
  %96 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1, align 8
  %97 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, align 8
  %98 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %96, i64 0, i32 2
  %99 = load i8, i8* %98, align 8, !range !2
  %100 = icmp eq i8 %99, 0
  %101 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %97, i64 0, i32 2
  %102 = load i8, i8* %101, align 8, !range !2
  %103 = icmp eq i8 %102, 0
  %104 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %97 to i64
  %105 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %96 to i64
  br i1 %100, label %109, label %106

106:                                              ; preds = %91
  br i1 %103, label %107, label %110

107:                                              ; preds = %106
  %108 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0 to i64*
  br label %134

109:                                              ; preds = %91
  br i1 %103, label %110, label %139

110:                                              ; preds = %106, %109
  %111 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %96, i64 0, i32 1
  %112 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %111, align 8
  %113 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %112, i64 0, i32 0
  %114 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %113, align 8
  %115 = bitcast %class.VmaBlockMetadata* %114 to i64 (%class.VmaBlockMetadata*)***
  %116 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %115, align 8
  %117 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %116, i64 5
  %118 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %117, align 8
  %119 = tail call i64 %118(%class.VmaBlockMetadata* %114) #15
  %120 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %97, i64 0, i32 1
  %121 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %120, align 8
  %122 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %121, i64 0, i32 0
  %123 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %122, align 8
  %124 = bitcast %class.VmaBlockMetadata* %123 to i64 (%class.VmaBlockMetadata*)***
  %125 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %124, align 8
  %126 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %125, i64 5
  %127 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %126, align 8
  %128 = tail call i64 %127(%class.VmaBlockMetadata* %123) #15
  %129 = icmp ult i64 %119, %128
  br i1 %129, label %130, label %139

130:                                              ; preds = %110
  %131 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = load i64, i64* %92, align 8
  br label %134

134:                                              ; preds = %107, %130
  %135 = phi i64* [ %108, %107 ], [ %131, %130 ]
  %136 = phi i64 [ %105, %107 ], [ %133, %130 ]
  %137 = phi i64 [ %104, %107 ], [ %132, %130 ]
  store i64 %136, i64* %135, align 8
  store i64 %137, i64* %92, align 8
  %138 = add i32 %6, 3
  br label %139

139:                                              ; preds = %109, %66, %21, %67, %134, %110, %22
  %140 = phi i32 [ %138, %134 ], [ %95, %110 ], [ %52, %67 ], [ %6, %22 ], [ %6, %21 ], [ %52, %66 ], [ %95, %109 ]
  ret i32 %140
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort5IRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEjT0_S7_S7_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %7 = tail call i32 @_ZNSt3__17__sort4IRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEjT0_S7_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %3, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* dereferenceable(1) %5)
  %8 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %4, align 8
  %9 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %3, align 8
  %10 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %8, i64 0, i32 2
  %11 = load i8, i8* %10, align 8, !range !2
  %12 = icmp eq i8 %11, 0
  %13 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %9, i64 0, i32 2
  %14 = load i8, i8* %13, align 8, !range !2
  %15 = icmp eq i8 %14, 0
  %16 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %9 to i64
  %17 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %8 to i64
  br i1 %12, label %22, label %18

18:                                               ; preds = %6
  br i1 %15, label %19, label %23

19:                                               ; preds = %18
  %20 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %3 to i64*
  %21 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %4 to i64*
  br label %48

22:                                               ; preds = %6
  br i1 %15, label %23, label %183

23:                                               ; preds = %18, %22
  %24 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %8, i64 0, i32 1
  %25 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %24, align 8
  %26 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %25, i64 0, i32 0
  %27 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %26, align 8
  %28 = bitcast %class.VmaBlockMetadata* %27 to i64 (%class.VmaBlockMetadata*)***
  %29 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %28, align 8
  %30 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %29, i64 5
  %31 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %30, align 8
  %32 = tail call i64 %31(%class.VmaBlockMetadata* %27) #15
  %33 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %9, i64 0, i32 1
  %34 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %33, align 8
  %35 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %34, i64 0, i32 0
  %36 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %35, align 8
  %37 = bitcast %class.VmaBlockMetadata* %36 to i64 (%class.VmaBlockMetadata*)***
  %38 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %37, align 8
  %39 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %38, i64 5
  %40 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %39, align 8
  %41 = tail call i64 %40(%class.VmaBlockMetadata* %36) #15
  %42 = icmp ult i64 %32, %41
  br i1 %42, label %43, label %183

43:                                               ; preds = %23
  %44 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %3 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %4 to i64*
  %47 = load i64, i64* %46, align 8
  br label %48

48:                                               ; preds = %19, %43
  %49 = phi i64* [ %21, %19 ], [ %46, %43 ]
  %50 = phi i64* [ %20, %19 ], [ %44, %43 ]
  %51 = phi i64 [ %17, %19 ], [ %47, %43 ]
  %52 = phi i64 [ %16, %19 ], [ %45, %43 ]
  store i64 %51, i64* %50, align 8
  store i64 %52, i64* %49, align 8
  %53 = add i32 %7, 1
  %54 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %3, align 8
  %55 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2, align 8
  %56 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %54, i64 0, i32 2
  %57 = load i8, i8* %56, align 8, !range !2
  %58 = icmp eq i8 %57, 0
  %59 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %55, i64 0, i32 2
  %60 = load i8, i8* %59, align 8, !range !2
  %61 = icmp eq i8 %60, 0
  %62 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %55 to i64
  %63 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %54 to i64
  br i1 %58, label %67, label %64

64:                                               ; preds = %48
  br i1 %61, label %65, label %68

65:                                               ; preds = %64
  %66 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2 to i64*
  br label %92

67:                                               ; preds = %48
  br i1 %61, label %68, label %183

68:                                               ; preds = %64, %67
  %69 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %54, i64 0, i32 1
  %70 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %69, align 8
  %71 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %70, i64 0, i32 0
  %72 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %71, align 8
  %73 = bitcast %class.VmaBlockMetadata* %72 to i64 (%class.VmaBlockMetadata*)***
  %74 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %73, align 8
  %75 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %74, i64 5
  %76 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %75, align 8
  %77 = tail call i64 %76(%class.VmaBlockMetadata* %72) #15
  %78 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %55, i64 0, i32 1
  %79 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %78, align 8
  %80 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %79, i64 0, i32 0
  %81 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %80, align 8
  %82 = bitcast %class.VmaBlockMetadata* %81 to i64 (%class.VmaBlockMetadata*)***
  %83 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %82, align 8
  %84 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %83, i64 5
  %85 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %84, align 8
  %86 = tail call i64 %85(%class.VmaBlockMetadata* %81) #15
  %87 = icmp ult i64 %77, %86
  br i1 %87, label %88, label %183

88:                                               ; preds = %68
  %89 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = load i64, i64* %50, align 8
  br label %92

92:                                               ; preds = %65, %88
  %93 = phi i64* [ %66, %65 ], [ %89, %88 ]
  %94 = phi i64 [ %63, %65 ], [ %91, %88 ]
  %95 = phi i64 [ %62, %65 ], [ %90, %88 ]
  store i64 %94, i64* %93, align 8
  store i64 %95, i64* %50, align 8
  %96 = add i32 %7, 2
  %97 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %2, align 8
  %98 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1, align 8
  %99 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %97, i64 0, i32 2
  %100 = load i8, i8* %99, align 8, !range !2
  %101 = icmp eq i8 %100, 0
  %102 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %98, i64 0, i32 2
  %103 = load i8, i8* %102, align 8, !range !2
  %104 = icmp eq i8 %103, 0
  %105 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %98 to i64
  %106 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %97 to i64
  br i1 %101, label %110, label %107

107:                                              ; preds = %92
  br i1 %104, label %108, label %111

108:                                              ; preds = %107
  %109 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1 to i64*
  br label %135

110:                                              ; preds = %92
  br i1 %104, label %111, label %183

111:                                              ; preds = %107, %110
  %112 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %97, i64 0, i32 1
  %113 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %112, align 8
  %114 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %113, i64 0, i32 0
  %115 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %114, align 8
  %116 = bitcast %class.VmaBlockMetadata* %115 to i64 (%class.VmaBlockMetadata*)***
  %117 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %116, align 8
  %118 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %117, i64 5
  %119 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %118, align 8
  %120 = tail call i64 %119(%class.VmaBlockMetadata* %115) #15
  %121 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %98, i64 0, i32 1
  %122 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %121, align 8
  %123 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %122, i64 0, i32 0
  %124 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %123, align 8
  %125 = bitcast %class.VmaBlockMetadata* %124 to i64 (%class.VmaBlockMetadata*)***
  %126 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %125, align 8
  %127 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %126, i64 5
  %128 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %127, align 8
  %129 = tail call i64 %128(%class.VmaBlockMetadata* %124) #15
  %130 = icmp ult i64 %120, %129
  br i1 %130, label %131, label %183

131:                                              ; preds = %111
  %132 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = load i64, i64* %93, align 8
  br label %135

135:                                              ; preds = %108, %131
  %136 = phi i64* [ %109, %108 ], [ %132, %131 ]
  %137 = phi i64 [ %106, %108 ], [ %134, %131 ]
  %138 = phi i64 [ %105, %108 ], [ %133, %131 ]
  store i64 %137, i64* %136, align 8
  store i64 %138, i64* %93, align 8
  %139 = add i32 %7, 3
  %140 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1, align 8
  %141 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, align 8
  %142 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %140, i64 0, i32 2
  %143 = load i8, i8* %142, align 8, !range !2
  %144 = icmp eq i8 %143, 0
  %145 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %141, i64 0, i32 2
  %146 = load i8, i8* %145, align 8, !range !2
  %147 = icmp eq i8 %146, 0
  %148 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %141 to i64
  %149 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %140 to i64
  br i1 %144, label %153, label %150

150:                                              ; preds = %135
  br i1 %147, label %151, label %154

151:                                              ; preds = %150
  %152 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0 to i64*
  br label %178

153:                                              ; preds = %135
  br i1 %147, label %154, label %183

154:                                              ; preds = %150, %153
  %155 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %140, i64 0, i32 1
  %156 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %155, align 8
  %157 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %156, i64 0, i32 0
  %158 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %157, align 8
  %159 = bitcast %class.VmaBlockMetadata* %158 to i64 (%class.VmaBlockMetadata*)***
  %160 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %159, align 8
  %161 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %160, i64 5
  %162 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %161, align 8
  %163 = tail call i64 %162(%class.VmaBlockMetadata* %158) #15
  %164 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %141, i64 0, i32 1
  %165 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %164, align 8
  %166 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %165, i64 0, i32 0
  %167 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %166, align 8
  %168 = bitcast %class.VmaBlockMetadata* %167 to i64 (%class.VmaBlockMetadata*)***
  %169 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %168, align 8
  %170 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %169, i64 5
  %171 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %170, align 8
  %172 = tail call i64 %171(%class.VmaBlockMetadata* %167) #15
  %173 = icmp ult i64 %163, %172
  br i1 %173, label %174, label %183

174:                                              ; preds = %154
  %175 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = load i64, i64* %136, align 8
  br label %178

178:                                              ; preds = %151, %174
  %179 = phi i64* [ %152, %151 ], [ %175, %174 ]
  %180 = phi i64 [ %149, %151 ], [ %177, %174 ]
  %181 = phi i64 [ %148, %151 ], [ %176, %174 ]
  store i64 %180, i64* %179, align 8
  store i64 %181, i64* %136, align 8
  %182 = add i32 %7, 4
  br label %183

183:                                              ; preds = %153, %110, %67, %22, %68, %154, %178, %111, %23
  %184 = phi i32 [ %182, %178 ], [ %139, %154 ], [ %96, %111 ], [ %53, %68 ], [ %7, %23 ], [ %7, %22 ], [ %53, %67 ], [ %96, %110 ], [ %139, %153 ]
  ret i32 %184
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__118__insertion_sort_3IRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEvT0_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %4 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, i64 2
  %5 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, i64 1
  %6 = tail call i32 @_ZNSt3__17__sort3IRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEjT0_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %5, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %4, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* dereferenceable(1) %2)
  %7 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, i64 3
  %8 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %7, %1
  br i1 %8, label %11, label %9

9:                                                ; preds = %3
  %10 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0 to i64*
  br label %12

11:                                               ; preds = %108, %3
  ret void

12:                                               ; preds = %9, %108
  %13 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %109, %108 ], [ %7, %9 ]
  %14 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %13, %108 ], [ %4, %9 ]
  %15 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %13, align 8
  %16 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %14, align 8
  %17 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %15, i64 0, i32 2
  %18 = load i8, i8* %17, align 8, !range !2
  %19 = icmp eq i8 %18, 0
  %20 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %16, i64 0, i32 2
  %21 = load i8, i8* %20, align 8, !range !2
  %22 = icmp eq i8 %21, 0
  %23 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %15 to i64
  %24 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %16 to i64
  br i1 %19, label %29, label %25

25:                                               ; preds = %12
  br i1 %22, label %26, label %30

26:                                               ; preds = %25
  %27 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %13 to i64*
  %28 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %14 to i64*
  br label %55

29:                                               ; preds = %12
  br i1 %22, label %30, label %108

30:                                               ; preds = %25, %29
  %31 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %15, i64 0, i32 1
  %32 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %31, align 8
  %33 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %32, i64 0, i32 0
  %34 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %33, align 8
  %35 = bitcast %class.VmaBlockMetadata* %34 to i64 (%class.VmaBlockMetadata*)***
  %36 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %35, align 8
  %37 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %36, i64 5
  %38 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %37, align 8
  %39 = tail call i64 %38(%class.VmaBlockMetadata* %34) #15
  %40 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %16, i64 0, i32 1
  %41 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %40, align 8
  %42 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %41, i64 0, i32 0
  %43 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %42, align 8
  %44 = bitcast %class.VmaBlockMetadata* %43 to i64 (%class.VmaBlockMetadata*)***
  %45 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %44, align 8
  %46 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %45, i64 5
  %47 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %46, align 8
  %48 = tail call i64 %47(%class.VmaBlockMetadata* %43) #15
  %49 = icmp ult i64 %39, %48
  br i1 %49, label %50, label %108

50:                                               ; preds = %30
  %51 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %13 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %14 to i64*
  %54 = load i64, i64* %53, align 8
  br label %55

55:                                               ; preds = %26, %50
  %56 = phi i64* [ %28, %26 ], [ %53, %50 ]
  %57 = phi i64* [ %27, %26 ], [ %51, %50 ]
  %58 = phi i64 [ %24, %26 ], [ %54, %50 ]
  %59 = phi i64 [ %23, %26 ], [ %52, %50 ]
  store i64 %58, i64* %57, align 8
  %60 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %14, %0
  br i1 %60, label %106, label %61

61:                                               ; preds = %55
  %62 = inttoptr i64 %59 to %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*
  %63 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %62, i64 0, i32 2
  %64 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %62, i64 0, i32 1
  br label %65

65:                                               ; preds = %61, %102
  %66 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %14, %61 ], [ %68, %102 ]
  %67 = phi i64* [ %56, %61 ], [ %103, %102 ]
  %68 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %66, i64 -1
  %69 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %68, align 8
  %70 = load i8, i8* %63, align 8, !range !2
  %71 = icmp eq i8 %70, 0
  %72 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %69, i64 0, i32 2
  %73 = load i8, i8* %72, align 8, !range !2
  %74 = icmp eq i8 %73, 0
  %75 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %69 to i64
  br i1 %71, label %79, label %76

76:                                               ; preds = %65
  br i1 %74, label %77, label %80

77:                                               ; preds = %76
  %78 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %68 to i64*
  br label %102

79:                                               ; preds = %65
  br i1 %74, label %80, label %106

80:                                               ; preds = %79, %76
  %81 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %64, align 8
  %82 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %81, i64 0, i32 0
  %83 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %82, align 8
  %84 = bitcast %class.VmaBlockMetadata* %83 to i64 (%class.VmaBlockMetadata*)***
  %85 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %84, align 8
  %86 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %85, i64 5
  %87 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %86, align 8
  %88 = tail call i64 %87(%class.VmaBlockMetadata* %83) #15
  %89 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %69, i64 0, i32 1
  %90 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %89, align 8
  %91 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %90, i64 0, i32 0
  %92 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %91, align 8
  %93 = bitcast %class.VmaBlockMetadata* %92 to i64 (%class.VmaBlockMetadata*)***
  %94 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %93, align 8
  %95 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %94, i64 5
  %96 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %95, align 8
  %97 = tail call i64 %96(%class.VmaBlockMetadata* %92) #15
  %98 = icmp ult i64 %88, %97
  br i1 %98, label %99, label %106

99:                                               ; preds = %80
  %100 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %68 to i64*
  %101 = load i64, i64* %100, align 8
  br label %102

102:                                              ; preds = %77, %99
  %103 = phi i64* [ %78, %77 ], [ %100, %99 ]
  %104 = phi i64 [ %75, %77 ], [ %101, %99 ]
  store i64 %104, i64* %67, align 8
  %105 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %68, %0
  br i1 %105, label %106, label %65

106:                                              ; preds = %80, %79, %102, %55
  %107 = phi i64* [ %56, %55 ], [ %10, %102 ], [ %67, %79 ], [ %67, %80 ]
  store i64 %59, i64* %107, align 8
  br label %108

108:                                              ; preds = %29, %106, %30
  %109 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %13, i64 1
  %110 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %109, %1
  br i1 %110, label %11, label %12
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEbT0_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"**, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %4 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1 to i64
  %5 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 3
  switch i64 %7, label %70 [
    i64 0, label %184
    i64 1, label %184
    i64 2, label %8
    i64 3, label %55
    i64 4, label %59
    i64 5, label %64
  ]

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1, i64 -1
  %10 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %9, align 8
  %11 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, align 8
  %12 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %10, i64 0, i32 2
  %13 = load i8, i8* %12, align 8, !range !2
  %14 = icmp eq i8 %13, 0
  %15 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %11, i64 0, i32 2
  %16 = load i8, i8* %15, align 8, !range !2
  %17 = icmp eq i8 %16, 0
  %18 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %11 to i64
  %19 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %10 to i64
  br i1 %14, label %24, label %20

20:                                               ; preds = %8
  br i1 %17, label %21, label %25

21:                                               ; preds = %20
  %22 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0 to i64*
  %23 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %9 to i64*
  br label %50

24:                                               ; preds = %8
  br i1 %17, label %25, label %184

25:                                               ; preds = %20, %24
  %26 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %10, i64 0, i32 1
  %27 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %26, align 8
  %28 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %27, i64 0, i32 0
  %29 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %28, align 8
  %30 = bitcast %class.VmaBlockMetadata* %29 to i64 (%class.VmaBlockMetadata*)***
  %31 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %30, align 8
  %32 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %31, i64 5
  %33 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %32, align 8
  %34 = tail call i64 %33(%class.VmaBlockMetadata* %29) #15
  %35 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %11, i64 0, i32 1
  %36 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %35, align 8
  %37 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %36, i64 0, i32 0
  %38 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %37, align 8
  %39 = bitcast %class.VmaBlockMetadata* %38 to i64 (%class.VmaBlockMetadata*)***
  %40 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %39, align 8
  %41 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %40, i64 5
  %42 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %41, align 8
  %43 = tail call i64 %42(%class.VmaBlockMetadata* %38) #15
  %44 = icmp ult i64 %34, %43
  br i1 %44, label %45, label %184

45:                                               ; preds = %25
  %46 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %9 to i64*
  %49 = load i64, i64* %48, align 8
  br label %50

50:                                               ; preds = %21, %45
  %51 = phi i64* [ %23, %21 ], [ %48, %45 ]
  %52 = phi i64* [ %22, %21 ], [ %46, %45 ]
  %53 = phi i64 [ %19, %21 ], [ %49, %45 ]
  %54 = phi i64 [ %18, %21 ], [ %47, %45 ]
  store i64 %53, i64* %52, align 8
  store i64 %54, i64* %51, align 8
  br label %184

55:                                               ; preds = %3
  %56 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, i64 1
  %57 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1, i64 -1
  %58 = tail call i32 @_ZNSt3__17__sort3IRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEjT0_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %56, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %57, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* dereferenceable(1) %2)
  br label %184

59:                                               ; preds = %3
  %60 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, i64 1
  %61 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, i64 2
  %62 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1, i64 -1
  %63 = tail call i32 @_ZNSt3__17__sort4IRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEjT0_S7_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %60, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %61, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %62, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* dereferenceable(1) %2)
  br label %184

64:                                               ; preds = %3
  %65 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, i64 1
  %66 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, i64 2
  %67 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, i64 3
  %68 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %1, i64 -1
  %69 = tail call i32 @_ZNSt3__17__sort5IRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEjT0_S7_S7_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %65, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %66, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %67, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %68, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* dereferenceable(1) %2)
  br label %184

70:                                               ; preds = %3
  %71 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, i64 2
  %72 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, i64 1
  %73 = tail call i32 @_ZNSt3__17__sort3IRN35VmaDefragmentationAlgorithm_Generic31BlockInfoCompareMoveDestinationEPPNS1_9BlockInfoEEEjT0_S7_S7_T_(%"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %72, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %71, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfoCompareMoveDestination"* dereferenceable(1) %2)
  %74 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0, i64 3
  %75 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %74, %1
  br i1 %75, label %184, label %76

76:                                               ; preds = %70
  %77 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %0 to i64*
  br label %78

78:                                               ; preds = %76, %177
  %79 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %179, %177 ], [ %74, %76 ]
  %80 = phi i32 [ %178, %177 ], [ 0, %76 ]
  %81 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %79, %177 ], [ %71, %76 ]
  %82 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %79, align 8
  %83 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %81, align 8
  %84 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %82, i64 0, i32 2
  %85 = load i8, i8* %84, align 8, !range !2
  %86 = icmp eq i8 %85, 0
  %87 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %83, i64 0, i32 2
  %88 = load i8, i8* %87, align 8, !range !2
  %89 = icmp eq i8 %88, 0
  %90 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %82 to i64
  %91 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %83 to i64
  br i1 %86, label %96, label %92

92:                                               ; preds = %78
  br i1 %89, label %93, label %97

93:                                               ; preds = %92
  %94 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %79 to i64*
  %95 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %81 to i64*
  br label %122

96:                                               ; preds = %78
  br i1 %89, label %97, label %177

97:                                               ; preds = %92, %96
  %98 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %82, i64 0, i32 1
  %99 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %98, align 8
  %100 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %99, i64 0, i32 0
  %101 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %100, align 8
  %102 = bitcast %class.VmaBlockMetadata* %101 to i64 (%class.VmaBlockMetadata*)***
  %103 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %102, align 8
  %104 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %103, i64 5
  %105 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %104, align 8
  %106 = tail call i64 %105(%class.VmaBlockMetadata* %101) #15
  %107 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %83, i64 0, i32 1
  %108 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %107, align 8
  %109 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %108, i64 0, i32 0
  %110 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %109, align 8
  %111 = bitcast %class.VmaBlockMetadata* %110 to i64 (%class.VmaBlockMetadata*)***
  %112 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %111, align 8
  %113 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %112, i64 5
  %114 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %113, align 8
  %115 = tail call i64 %114(%class.VmaBlockMetadata* %110) #15
  %116 = icmp ult i64 %106, %115
  br i1 %116, label %117, label %177

117:                                              ; preds = %97
  %118 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %79 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %81 to i64*
  %121 = load i64, i64* %120, align 8
  br label %122

122:                                              ; preds = %93, %117
  %123 = phi i64* [ %95, %93 ], [ %120, %117 ]
  %124 = phi i64* [ %94, %93 ], [ %118, %117 ]
  %125 = phi i64 [ %91, %93 ], [ %121, %117 ]
  %126 = phi i64 [ %90, %93 ], [ %119, %117 ]
  store i64 %125, i64* %124, align 8
  %127 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %81, %0
  br i1 %127, label %173, label %128

128:                                              ; preds = %122
  %129 = inttoptr i64 %126 to %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*
  %130 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %129, i64 0, i32 2
  %131 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %129, i64 0, i32 1
  br label %132

132:                                              ; preds = %128, %169
  %133 = phi %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** [ %81, %128 ], [ %135, %169 ]
  %134 = phi i64* [ %123, %128 ], [ %170, %169 ]
  %135 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %133, i64 -1
  %136 = load %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %135, align 8
  %137 = load i8, i8* %130, align 8, !range !2
  %138 = icmp eq i8 %137, 0
  %139 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %136, i64 0, i32 2
  %140 = load i8, i8* %139, align 8, !range !2
  %141 = icmp eq i8 %140, 0
  %142 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %136 to i64
  br i1 %138, label %146, label %143

143:                                              ; preds = %132
  br i1 %141, label %144, label %147

144:                                              ; preds = %143
  %145 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %135 to i64*
  br label %169

146:                                              ; preds = %132
  br i1 %141, label %147, label %173

147:                                              ; preds = %146, %143
  %148 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %131, align 8
  %149 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %148, i64 0, i32 0
  %150 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %149, align 8
  %151 = bitcast %class.VmaBlockMetadata* %150 to i64 (%class.VmaBlockMetadata*)***
  %152 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %151, align 8
  %153 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %152, i64 5
  %154 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %153, align 8
  %155 = tail call i64 %154(%class.VmaBlockMetadata* %150) #15
  %156 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"* %136, i64 0, i32 1
  %157 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %156, align 8
  %158 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %157, i64 0, i32 0
  %159 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %158, align 8
  %160 = bitcast %class.VmaBlockMetadata* %159 to i64 (%class.VmaBlockMetadata*)***
  %161 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %160, align 8
  %162 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %161, i64 5
  %163 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %162, align 8
  %164 = tail call i64 %163(%class.VmaBlockMetadata* %159) #15
  %165 = icmp ult i64 %155, %164
  br i1 %165, label %166, label %173

166:                                              ; preds = %147
  %167 = bitcast %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %135 to i64*
  %168 = load i64, i64* %167, align 8
  br label %169

169:                                              ; preds = %144, %166
  %170 = phi i64* [ %145, %144 ], [ %167, %166 ]
  %171 = phi i64 [ %142, %144 ], [ %168, %166 ]
  store i64 %171, i64* %134, align 8
  %172 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %135, %0
  br i1 %172, label %173, label %132

173:                                              ; preds = %147, %146, %169, %122
  %174 = phi i64* [ %123, %122 ], [ %77, %169 ], [ %134, %146 ], [ %134, %147 ]
  store i64 %126, i64* %174, align 8
  %175 = add i32 %80, 1
  %176 = icmp eq i32 %175, 8
  br i1 %176, label %181, label %177

177:                                              ; preds = %173, %96, %97
  %178 = phi i32 [ %175, %173 ], [ %80, %97 ], [ %80, %96 ]
  %179 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %79, i64 1
  %180 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %179, %1
  br i1 %180, label %184, label %78

181:                                              ; preds = %173
  %182 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %79, i64 1
  %183 = icmp eq %"struct.VmaDefragmentationAlgorithm_Generic::BlockInfo"** %182, %1
  br label %184

184:                                              ; preds = %177, %181, %70, %24, %25, %50, %3, %3, %64, %59, %55
  %185 = phi i1 [ true, %64 ], [ true, %59 ], [ true, %55 ], [ true, %3 ], [ true, %3 ], [ true, %50 ], [ true, %25 ], [ true, %24 ], [ true, %70 ], [ %183, %181 ], [ true, %177 ]
  ret i1 %185
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @"_ZNSt3__16__sortIRZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEmjjE3$_0PNS1_9BlockInfoEEEvT0_SC_T_"(%"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"*, %class.anon* readonly dereferenceable(8)) unnamed_addr #0 {
  %4 = bitcast %class.anon* %2 to %class.VmaDefragmentationAlgorithm**
  br label %5

5:                                                ; preds = %532, %3
  %6 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %1, %3 ], [ %486, %532 ]
  %7 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %0, %3 ], [ %15, %532 ]
  %8 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %6 to i64
  %9 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %6, i64 -1
  %10 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %9, i64 0, i32 0
  %11 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %6 to i64
  br label %12

12:                                               ; preds = %541, %5
  %13 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %7, %5 ], [ %542, %541 ]
  br label %14

14:                                               ; preds = %352, %12
  %15 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %13, %12 ], [ %285, %352 ]
  %16 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15 to i64
  %17 = sub i64 %8, %16
  %18 = ashr exact i64 %17, 3
  switch i64 %18, label %69 [
    i64 0, label %545
    i64 1, label %545
    i64 2, label %19
    i64 3, label %54
    i64 4, label %58
    i64 5, label %63
  ]

19:                                               ; preds = %14
  %20 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %4, align 8
  %21 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %20, i64 0, i32 2
  %22 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %21, align 8
  %23 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %6, i64 -1, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %22, i64 0, i32 16, i32 1
  %26 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %25, align 8
  %27 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %26, i64 %24
  %28 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %27, align 8
  %29 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %28, i64 0, i32 0
  %30 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %29, align 8
  %31 = bitcast %class.VmaBlockMetadata* %30 to i64 (%class.VmaBlockMetadata*)***
  %32 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %31, align 8
  %33 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %32, i64 5
  %34 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %33, align 8
  %35 = tail call i64 %34(%class.VmaBlockMetadata* %30) #15
  %36 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %21, align 8
  %37 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, i64 0, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %36, i64 0, i32 16, i32 1
  %40 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %39, align 8
  %41 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %40, i64 %38
  %42 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %41, align 8
  %43 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %42, i64 0, i32 0
  %44 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %43, align 8
  %45 = bitcast %class.VmaBlockMetadata* %44 to i64 (%class.VmaBlockMetadata*)***
  %46 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %45, align 8
  %47 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %46, i64 5
  %48 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %47, align 8
  %49 = tail call i64 %48(%class.VmaBlockMetadata* %44) #15
  %50 = icmp ult i64 %35, %49
  br i1 %50, label %51, label %545

51:                                               ; preds = %19
  %52 = load i64, i64* %37, align 8
  %53 = load i64, i64* %23, align 8
  store i64 %53, i64* %37, align 8
  store i64 %52, i64* %23, align 8
  br label %545

54:                                               ; preds = %14
  %55 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, i64 1
  %56 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %6, i64 -1
  %57 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEmjjE3$_0PNS1_9BlockInfoEEEjT0_SC_SC_T_"(%"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %55, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %56, %class.anon* dereferenceable(8) %2)
  br label %545

58:                                               ; preds = %14
  %59 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, i64 1
  %60 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, i64 2
  %61 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %6, i64 -1
  %62 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEmjjE3$_0PNS1_9BlockInfoEEEjT0_SC_SC_SC_T_"(%"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %59, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %60, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %61, %class.anon* dereferenceable(8) %2)
  br label %545

63:                                               ; preds = %14
  %64 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, i64 1
  %65 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, i64 2
  %66 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, i64 3
  %67 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %6, i64 -1
  %68 = tail call fastcc i32 @"_ZNSt3__17__sort5IRZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEmjjE3$_0PNS1_9BlockInfoEEEjT0_SC_SC_SC_SC_T_"(%"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %64, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %65, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %66, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %67, %class.anon* dereferenceable(8) %2)
  br label %545

69:                                               ; preds = %14
  %70 = icmp slt i64 %17, 248
  br i1 %70, label %71, label %157

71:                                               ; preds = %69
  %72 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, i64 2
  %73 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, i64 1
  %74 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEmjjE3$_0PNS1_9BlockInfoEEEjT0_SC_SC_T_"(%"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %73, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %72, %class.anon* dereferenceable(8) %2) #15
  %75 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, i64 3
  %76 = icmp eq %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %75, %6
  br i1 %76, label %545, label %77

77:                                               ; preds = %71, %154
  %78 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %155, %154 ], [ %75, %71 ]
  %79 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %78, %154 ], [ %72, %71 ]
  %80 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %4, align 8
  %81 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %80, i64 0, i32 2
  %82 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %81, align 8
  %83 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %78, i64 0, i32 0
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %82, i64 0, i32 16, i32 1
  %86 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %85, align 8
  %87 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %86, i64 %84
  %88 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %87, align 8
  %89 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %88, i64 0, i32 0
  %90 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %89, align 8
  %91 = bitcast %class.VmaBlockMetadata* %90 to i64 (%class.VmaBlockMetadata*)***
  %92 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %91, align 8
  %93 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %92, i64 5
  %94 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %93, align 8
  %95 = tail call i64 %94(%class.VmaBlockMetadata* %90) #15
  %96 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %81, align 8
  %97 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %79, i64 0, i32 0
  %98 = load i64, i64* %97, align 8
  %99 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %96, i64 0, i32 16, i32 1
  %100 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %99, align 8
  %101 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %100, i64 %98
  %102 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %101, align 8
  %103 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %102, i64 0, i32 0
  %104 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %103, align 8
  %105 = bitcast %class.VmaBlockMetadata* %104 to i64 (%class.VmaBlockMetadata*)***
  %106 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %105, align 8
  %107 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %106, i64 5
  %108 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %107, align 8
  %109 = tail call i64 %108(%class.VmaBlockMetadata* %104) #15
  %110 = icmp ult i64 %95, %109
  br i1 %110, label %111, label %154

111:                                              ; preds = %77
  %112 = load i64, i64* %83, align 8
  br label %113

113:                                              ; preds = %120, %111
  %114 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %78, %111 ], [ %115, %120 ]
  %115 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %79, %111 ], [ %121, %120 ]
  %116 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %115, i64 0, i32 0
  %117 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %114, i64 0, i32 0
  %118 = load i64, i64* %116, align 8
  store i64 %118, i64* %117, align 8
  %119 = icmp eq %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %115, %15
  br i1 %119, label %151, label %120

120:                                              ; preds = %113
  %121 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %115, i64 -1
  %122 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %4, align 8
  %123 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %122, i64 0, i32 2
  %124 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %123, align 8
  %125 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %124, i64 0, i32 16, i32 1
  %126 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %125, align 8
  %127 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %126, i64 %112
  %128 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %127, align 8
  %129 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %128, i64 0, i32 0
  %130 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %129, align 8
  %131 = bitcast %class.VmaBlockMetadata* %130 to i64 (%class.VmaBlockMetadata*)***
  %132 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %131, align 8
  %133 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %132, i64 5
  %134 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %133, align 8
  %135 = tail call i64 %134(%class.VmaBlockMetadata* %130) #15
  %136 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %123, align 8
  %137 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %121, i64 0, i32 0
  %138 = load i64, i64* %137, align 8
  %139 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %136, i64 0, i32 16, i32 1
  %140 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %139, align 8
  %141 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %140, i64 %138
  %142 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %141, align 8
  %143 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %142, i64 0, i32 0
  %144 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %143, align 8
  %145 = bitcast %class.VmaBlockMetadata* %144 to i64 (%class.VmaBlockMetadata*)***
  %146 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %145, align 8
  %147 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %146, i64 5
  %148 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %147, align 8
  %149 = tail call i64 %148(%class.VmaBlockMetadata* %144) #15
  %150 = icmp ult i64 %135, %149
  br i1 %150, label %113, label %151

151:                                              ; preds = %120, %113
  %152 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %15, %113 ], [ %115, %120 ]
  %153 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %152, i64 0, i32 0
  store i64 %112, i64* %153, align 8
  br label %154

154:                                              ; preds = %151, %77
  %155 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %78, i64 1
  %156 = icmp eq %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %155, %6
  br i1 %156, label %545, label %77

157:                                              ; preds = %69
  %158 = icmp sgt i64 %17, 7992
  %159 = sdiv i64 %18, 2
  %160 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, i64 %159
  br i1 %158, label %161, label %166

161:                                              ; preds = %157
  %162 = sdiv i64 %18, 4
  %163 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, i64 %162
  %164 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %160, i64 %162
  %165 = tail call fastcc i32 @"_ZNSt3__17__sort5IRZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEmjjE3$_0PNS1_9BlockInfoEEEjT0_SC_SC_SC_SC_T_"(%"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %163, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %160, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %164, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %9, %class.anon* dereferenceable(8) %2)
  br label %168

166:                                              ; preds = %157
  %167 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEmjjE3$_0PNS1_9BlockInfoEEEjT0_SC_SC_T_"(%"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %160, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %9, %class.anon* dereferenceable(8) %2)
  br label %168

168:                                              ; preds = %166, %161
  %169 = phi i32 [ %165, %161 ], [ %167, %166 ]
  %170 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %4, align 8
  %171 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %170, i64 0, i32 2
  %172 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %171, align 8
  %173 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, i64 0, i32 0
  %174 = load i64, i64* %173, align 8
  %175 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %172, i64 0, i32 16, i32 1
  %176 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %175, align 8
  %177 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %176, i64 %174
  %178 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %177, align 8
  %179 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %178, i64 0, i32 0
  %180 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %179, align 8
  %181 = bitcast %class.VmaBlockMetadata* %180 to i64 (%class.VmaBlockMetadata*)***
  %182 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %181, align 8
  %183 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %182, i64 5
  %184 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %183, align 8
  %185 = tail call i64 %184(%class.VmaBlockMetadata* %180) #15
  %186 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %171, align 8
  %187 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %160, i64 0, i32 0
  %188 = load i64, i64* %187, align 8
  %189 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %186, i64 0, i32 16, i32 1
  %190 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %189, align 8
  %191 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %190, i64 %188
  %192 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %191, align 8
  %193 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %192, i64 0, i32 0
  %194 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %193, align 8
  %195 = bitcast %class.VmaBlockMetadata* %194 to i64 (%class.VmaBlockMetadata*)***
  %196 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %195, align 8
  %197 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %196, i64 5
  %198 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %197, align 8
  %199 = tail call i64 %198(%class.VmaBlockMetadata* %194) #15
  %200 = icmp ult i64 %185, %199
  br i1 %200, label %394, label %201

201:                                              ; preds = %168, %358
  %202 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %203, %358 ], [ %9, %168 ]
  %203 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %202, i64 -1
  %204 = icmp eq %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, %203
  br i1 %204, label %205, label %358

205:                                              ; preds = %201
  %206 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, i64 1
  %207 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %4, align 8
  %208 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %207, i64 0, i32 2
  %209 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %208, align 8
  %210 = load i64, i64* %173, align 8
  %211 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %209, i64 0, i32 16, i32 1
  %212 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %211, align 8
  %213 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %212, i64 %210
  %214 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %213, align 8
  %215 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %214, i64 0, i32 0
  %216 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %215, align 8
  %217 = bitcast %class.VmaBlockMetadata* %216 to i64 (%class.VmaBlockMetadata*)***
  %218 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %217, align 8
  %219 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %218, i64 5
  %220 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %219, align 8
  %221 = tail call i64 %220(%class.VmaBlockMetadata* %216) #15
  %222 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %208, align 8
  %223 = load i64, i64* %10, align 8
  %224 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %222, i64 0, i32 16, i32 1
  %225 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %224, align 8
  %226 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %225, i64 %223
  %227 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %226, align 8
  %228 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %227, i64 0, i32 0
  %229 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %228, align 8
  %230 = bitcast %class.VmaBlockMetadata* %229 to i64 (%class.VmaBlockMetadata*)***
  %231 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %230, align 8
  %232 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %231, i64 5
  %233 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %232, align 8
  %234 = tail call i64 %233(%class.VmaBlockMetadata* %229) #15
  %235 = icmp ult i64 %221, %234
  br i1 %235, label %278, label %236

236:                                              ; preds = %205
  %237 = icmp eq %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %206, %9
  br i1 %237, label %545, label %238

238:                                              ; preds = %236, %275
  %239 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %276, %275 ], [ %206, %236 ]
  %240 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %4, align 8
  %241 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %240, i64 0, i32 2
  %242 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %241, align 8
  %243 = load i64, i64* %173, align 8
  %244 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %242, i64 0, i32 16, i32 1
  %245 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %244, align 8
  %246 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %245, i64 %243
  %247 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %246, align 8
  %248 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %247, i64 0, i32 0
  %249 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %248, align 8
  %250 = bitcast %class.VmaBlockMetadata* %249 to i64 (%class.VmaBlockMetadata*)***
  %251 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %250, align 8
  %252 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %251, i64 5
  %253 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %252, align 8
  %254 = tail call i64 %253(%class.VmaBlockMetadata* %249) #15
  %255 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %241, align 8
  %256 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %239, i64 0, i32 0
  %257 = load i64, i64* %256, align 8
  %258 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %255, i64 0, i32 16, i32 1
  %259 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %258, align 8
  %260 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %259, i64 %257
  %261 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %260, align 8
  %262 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %261, i64 0, i32 0
  %263 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %262, align 8
  %264 = bitcast %class.VmaBlockMetadata* %263 to i64 (%class.VmaBlockMetadata*)***
  %265 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %264, align 8
  %266 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %265, i64 5
  %267 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %266, align 8
  %268 = tail call i64 %267(%class.VmaBlockMetadata* %263) #15
  %269 = icmp ult i64 %254, %268
  br i1 %269, label %270, label %275

270:                                              ; preds = %238
  %271 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %239, i64 0, i32 0
  %272 = load i64, i64* %271, align 8
  %273 = load i64, i64* %10, align 8
  store i64 %273, i64* %271, align 8
  store i64 %272, i64* %10, align 8
  %274 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %239, i64 1
  br label %278

275:                                              ; preds = %238
  %276 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %239, i64 1
  %277 = icmp eq %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %276, %9
  br i1 %277, label %545, label %238

278:                                              ; preds = %270, %205
  %279 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %206, %205 ], [ %274, %270 ]
  %280 = icmp eq %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %279, %9
  br i1 %280, label %545, label %281

281:                                              ; preds = %278, %355
  %282 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %316, %355 ], [ %279, %278 ]
  %283 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %321, %355 ], [ %9, %278 ]
  br label %284

284:                                              ; preds = %284, %281
  %285 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %282, %281 ], [ %316, %284 ]
  %286 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %4, align 8
  %287 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %286, i64 0, i32 2
  %288 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %287, align 8
  %289 = load i64, i64* %173, align 8
  %290 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %288, i64 0, i32 16, i32 1
  %291 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %290, align 8
  %292 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %291, i64 %289
  %293 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %292, align 8
  %294 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %293, i64 0, i32 0
  %295 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %294, align 8
  %296 = bitcast %class.VmaBlockMetadata* %295 to i64 (%class.VmaBlockMetadata*)***
  %297 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %296, align 8
  %298 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %297, i64 5
  %299 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %298, align 8
  %300 = tail call i64 %299(%class.VmaBlockMetadata* %295) #15
  %301 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %287, align 8
  %302 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %285, i64 0, i32 0
  %303 = load i64, i64* %302, align 8
  %304 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %301, i64 0, i32 16, i32 1
  %305 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %304, align 8
  %306 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %305, i64 %303
  %307 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %306, align 8
  %308 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %307, i64 0, i32 0
  %309 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %308, align 8
  %310 = bitcast %class.VmaBlockMetadata* %309 to i64 (%class.VmaBlockMetadata*)***
  %311 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %310, align 8
  %312 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %311, i64 5
  %313 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %312, align 8
  %314 = tail call i64 %313(%class.VmaBlockMetadata* %309) #15
  %315 = icmp ult i64 %300, %314
  %316 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %285, i64 1
  br i1 %315, label %317, label %284

317:                                              ; preds = %284
  %318 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %285, i64 0, i32 0
  br label %319

319:                                              ; preds = %317, %319
  %320 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %321, %319 ], [ %283, %317 ]
  %321 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %320, i64 -1
  %322 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %4, align 8
  %323 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %322, i64 0, i32 2
  %324 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %323, align 8
  %325 = load i64, i64* %173, align 8
  %326 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %324, i64 0, i32 16, i32 1
  %327 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %326, align 8
  %328 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %327, i64 %325
  %329 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %328, align 8
  %330 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %329, i64 0, i32 0
  %331 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %330, align 8
  %332 = bitcast %class.VmaBlockMetadata* %331 to i64 (%class.VmaBlockMetadata*)***
  %333 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %332, align 8
  %334 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %333, i64 5
  %335 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %334, align 8
  %336 = tail call i64 %335(%class.VmaBlockMetadata* %331) #15
  %337 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %323, align 8
  %338 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %321, i64 0, i32 0
  %339 = load i64, i64* %338, align 8
  %340 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %337, i64 0, i32 16, i32 1
  %341 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %340, align 8
  %342 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %341, i64 %339
  %343 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %342, align 8
  %344 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %343, i64 0, i32 0
  %345 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %344, align 8
  %346 = bitcast %class.VmaBlockMetadata* %345 to i64 (%class.VmaBlockMetadata*)***
  %347 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %346, align 8
  %348 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %347, i64 5
  %349 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %348, align 8
  %350 = tail call i64 %349(%class.VmaBlockMetadata* %345) #15
  %351 = icmp ult i64 %336, %350
  br i1 %351, label %319, label %352

352:                                              ; preds = %319
  %353 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %321, i64 0, i32 0
  %354 = icmp ult %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %285, %321
  br i1 %354, label %355, label %14

355:                                              ; preds = %352
  %356 = load i64, i64* %318, align 8
  %357 = load i64, i64* %353, align 8
  store i64 %357, i64* %318, align 8
  store i64 %356, i64* %353, align 8
  br label %281

358:                                              ; preds = %201
  %359 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %4, align 8
  %360 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %359, i64 0, i32 2
  %361 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %360, align 8
  %362 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %203, i64 0, i32 0
  %363 = load i64, i64* %362, align 8
  %364 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %361, i64 0, i32 16, i32 1
  %365 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %364, align 8
  %366 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %365, i64 %363
  %367 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %366, align 8
  %368 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %367, i64 0, i32 0
  %369 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %368, align 8
  %370 = bitcast %class.VmaBlockMetadata* %369 to i64 (%class.VmaBlockMetadata*)***
  %371 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %370, align 8
  %372 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %371, i64 5
  %373 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %372, align 8
  %374 = tail call i64 %373(%class.VmaBlockMetadata* %369) #15
  %375 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %360, align 8
  %376 = load i64, i64* %187, align 8
  %377 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %375, i64 0, i32 16, i32 1
  %378 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %377, align 8
  %379 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %378, i64 %376
  %380 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %379, align 8
  %381 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %380, i64 0, i32 0
  %382 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %381, align 8
  %383 = bitcast %class.VmaBlockMetadata* %382 to i64 (%class.VmaBlockMetadata*)***
  %384 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %383, align 8
  %385 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %384, i64 5
  %386 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %385, align 8
  %387 = tail call i64 %386(%class.VmaBlockMetadata* %382) #15
  %388 = icmp ult i64 %374, %387
  br i1 %388, label %389, label %201

389:                                              ; preds = %358
  %390 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %203, i64 0, i32 0
  %391 = load i64, i64* %173, align 8
  %392 = load i64, i64* %390, align 8
  store i64 %392, i64* %173, align 8
  store i64 %391, i64* %390, align 8
  %393 = add i32 %169, 1
  br label %394

394:                                              ; preds = %168, %389
  %395 = phi i32 [ %393, %389 ], [ %169, %168 ]
  %396 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %203, %389 ], [ %9, %168 ]
  %397 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15 to i64
  %398 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, i64 1
  %399 = icmp ult %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %398, %396
  br i1 %399, label %400, label %483

400:                                              ; preds = %394, %477
  %401 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %482, %477 ], [ %160, %394 ]
  %402 = phi i32 [ %480, %477 ], [ %395, %394 ]
  %403 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %438, %477 ], [ %398, %394 ]
  %404 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %443, %477 ], [ %396, %394 ]
  %405 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %401, i64 0, i32 0
  br label %406

406:                                              ; preds = %406, %400
  %407 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %403, %400 ], [ %438, %406 ]
  %408 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %4, align 8
  %409 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %408, i64 0, i32 2
  %410 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %409, align 8
  %411 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %407, i64 0, i32 0
  %412 = load i64, i64* %411, align 8
  %413 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %410, i64 0, i32 16, i32 1
  %414 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %413, align 8
  %415 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %414, i64 %412
  %416 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %415, align 8
  %417 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %416, i64 0, i32 0
  %418 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %417, align 8
  %419 = bitcast %class.VmaBlockMetadata* %418 to i64 (%class.VmaBlockMetadata*)***
  %420 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %419, align 8
  %421 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %420, i64 5
  %422 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %421, align 8
  %423 = tail call i64 %422(%class.VmaBlockMetadata* %418) #15
  %424 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %409, align 8
  %425 = load i64, i64* %405, align 8
  %426 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %424, i64 0, i32 16, i32 1
  %427 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %426, align 8
  %428 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %427, i64 %425
  %429 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %428, align 8
  %430 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %429, i64 0, i32 0
  %431 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %430, align 8
  %432 = bitcast %class.VmaBlockMetadata* %431 to i64 (%class.VmaBlockMetadata*)***
  %433 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %432, align 8
  %434 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %433, i64 5
  %435 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %434, align 8
  %436 = tail call i64 %435(%class.VmaBlockMetadata* %431) #15
  %437 = icmp ult i64 %423, %436
  %438 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %407, i64 1
  br i1 %437, label %406, label %439

439:                                              ; preds = %406
  %440 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %407, i64 0, i32 0
  br label %441

441:                                              ; preds = %439, %441
  %442 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %443, %441 ], [ %404, %439 ]
  %443 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %442, i64 -1
  %444 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %4, align 8
  %445 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %444, i64 0, i32 2
  %446 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %445, align 8
  %447 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %443, i64 0, i32 0
  %448 = load i64, i64* %447, align 8
  %449 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %446, i64 0, i32 16, i32 1
  %450 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %449, align 8
  %451 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %450, i64 %448
  %452 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %451, align 8
  %453 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %452, i64 0, i32 0
  %454 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %453, align 8
  %455 = bitcast %class.VmaBlockMetadata* %454 to i64 (%class.VmaBlockMetadata*)***
  %456 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %455, align 8
  %457 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %456, i64 5
  %458 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %457, align 8
  %459 = tail call i64 %458(%class.VmaBlockMetadata* %454) #15
  %460 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %445, align 8
  %461 = load i64, i64* %405, align 8
  %462 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %460, i64 0, i32 16, i32 1
  %463 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %462, align 8
  %464 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %463, i64 %461
  %465 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %464, align 8
  %466 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %465, i64 0, i32 0
  %467 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %466, align 8
  %468 = bitcast %class.VmaBlockMetadata* %467 to i64 (%class.VmaBlockMetadata*)***
  %469 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %468, align 8
  %470 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %469, i64 5
  %471 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %470, align 8
  %472 = tail call i64 %471(%class.VmaBlockMetadata* %467) #15
  %473 = icmp ult i64 %459, %472
  br i1 %473, label %474, label %441

474:                                              ; preds = %441
  %475 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %443, i64 0, i32 0
  %476 = icmp ugt %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %407, %443
  br i1 %476, label %483, label %477

477:                                              ; preds = %474
  %478 = load i64, i64* %440, align 8
  %479 = load i64, i64* %475, align 8
  store i64 %479, i64* %440, align 8
  store i64 %478, i64* %475, align 8
  %480 = add i32 %402, 1
  %481 = icmp eq %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %401, %407
  %482 = select i1 %481, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %443, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %401
  br label %400

483:                                              ; preds = %474, %394
  %484 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %160, %394 ], [ %401, %474 ]
  %485 = phi i32 [ %395, %394 ], [ %402, %474 ]
  %486 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %398, %394 ], [ %407, %474 ]
  %487 = icmp eq %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %486, %484
  br i1 %487, label %524, label %488

488:                                              ; preds = %483
  %489 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %4, align 8
  %490 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %489, i64 0, i32 2
  %491 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %490, align 8
  %492 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %484, i64 0, i32 0
  %493 = load i64, i64* %492, align 8
  %494 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %491, i64 0, i32 16, i32 1
  %495 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %494, align 8
  %496 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %495, i64 %493
  %497 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %496, align 8
  %498 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %497, i64 0, i32 0
  %499 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %498, align 8
  %500 = bitcast %class.VmaBlockMetadata* %499 to i64 (%class.VmaBlockMetadata*)***
  %501 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %500, align 8
  %502 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %501, i64 5
  %503 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %502, align 8
  %504 = tail call i64 %503(%class.VmaBlockMetadata* %499) #15
  %505 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %490, align 8
  %506 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %486, i64 0, i32 0
  %507 = load i64, i64* %506, align 8
  %508 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %505, i64 0, i32 16, i32 1
  %509 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %508, align 8
  %510 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %509, i64 %507
  %511 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %510, align 8
  %512 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %511, i64 0, i32 0
  %513 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %512, align 8
  %514 = bitcast %class.VmaBlockMetadata* %513 to i64 (%class.VmaBlockMetadata*)***
  %515 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %514, align 8
  %516 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %515, i64 5
  %517 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %516, align 8
  %518 = tail call i64 %517(%class.VmaBlockMetadata* %513) #15
  %519 = icmp ult i64 %504, %518
  br i1 %519, label %520, label %524

520:                                              ; preds = %488
  %521 = load i64, i64* %506, align 8
  %522 = load i64, i64* %492, align 8
  store i64 %522, i64* %506, align 8
  store i64 %521, i64* %492, align 8
  %523 = add i32 %485, 1
  br label %524

524:                                              ; preds = %483, %520, %488
  %525 = phi i32 [ %523, %520 ], [ %485, %488 ], [ %485, %483 ]
  %526 = icmp eq i32 %525, 0
  br i1 %526, label %527, label %534

527:                                              ; preds = %524
  %528 = tail call fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEmjjE3$_0PNS1_9BlockInfoEEEbT0_SC_T_"(%"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %486, %class.anon* dereferenceable(8) %2)
  %529 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %486, i64 1
  %530 = tail call fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEmjjE3$_0PNS1_9BlockInfoEEEbT0_SC_T_"(%"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %529, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %6, %class.anon* dereferenceable(8) %2)
  br i1 %530, label %531, label %533

531:                                              ; preds = %527
  br i1 %528, label %545, label %532

532:                                              ; preds = %531, %543
  br label %5

533:                                              ; preds = %527
  br i1 %528, label %541, label %534

534:                                              ; preds = %533, %524
  %535 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %486 to i64
  %536 = sub i64 %535, %397
  %537 = sub i64 %11, %535
  %538 = icmp slt i64 %536, %537
  br i1 %538, label %539, label %543

539:                                              ; preds = %534
  tail call fastcc void @"_ZNSt3__16__sortIRZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEmjjE3$_0PNS1_9BlockInfoEEEvT0_SC_T_"(%"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %15, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %486, %class.anon* dereferenceable(8) %2)
  %540 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %486, i64 1
  br label %541

541:                                              ; preds = %539, %533
  %542 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %529, %533 ], [ %540, %539 ]
  br label %12

543:                                              ; preds = %534
  %544 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %486, i64 1
  tail call fastcc void @"_ZNSt3__16__sortIRZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEmjjE3$_0PNS1_9BlockInfoEEEvT0_SC_T_"(%"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %544, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %6, %class.anon* dereferenceable(8) %2)
  br label %532

545:                                              ; preds = %531, %278, %14, %14, %236, %275, %154, %71, %19, %51, %54, %58, %63
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @"_ZNSt3__17__sort3IRZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEmjjE3$_0PNS1_9BlockInfoEEEjT0_SC_SC_T_"(%"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* nocapture, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* nocapture, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* nocapture, %class.anon* nocapture readonly dereferenceable(8)) unnamed_addr #0 {
  %5 = bitcast %class.anon* %3 to %class.VmaDefragmentationAlgorithm**
  %6 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %5, align 8
  %7 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %6, i64 0, i32 2
  %8 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %7, align 8
  %9 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %1, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %8, i64 0, i32 16, i32 1
  %12 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %11, align 8
  %13 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %12, i64 %10
  %14 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %13, align 8
  %15 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %14, i64 0, i32 0
  %16 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %15, align 8
  %17 = bitcast %class.VmaBlockMetadata* %16 to i64 (%class.VmaBlockMetadata*)***
  %18 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %17, align 8
  %19 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %18, i64 5
  %20 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %19, align 8
  %21 = tail call i64 %20(%class.VmaBlockMetadata* %16) #15
  %22 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %7, align 8
  %23 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %0, i64 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %22, i64 0, i32 16, i32 1
  %26 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %25, align 8
  %27 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %26, i64 %24
  %28 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %27, align 8
  %29 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %28, i64 0, i32 0
  %30 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %29, align 8
  %31 = bitcast %class.VmaBlockMetadata* %30 to i64 (%class.VmaBlockMetadata*)***
  %32 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %31, align 8
  %33 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %32, i64 5
  %34 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %33, align 8
  %35 = tail call i64 %34(%class.VmaBlockMetadata* %30) #15
  %36 = icmp ult i64 %21, %35
  %37 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %5, align 8
  %38 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %37, i64 0, i32 2
  %39 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %38, align 8
  %40 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %2, i64 0, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %39, i64 0, i32 16, i32 1
  %43 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %42, align 8
  %44 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %43, i64 %41
  %45 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %44, align 8
  %46 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %45, i64 0, i32 0
  %47 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %46, align 8
  %48 = bitcast %class.VmaBlockMetadata* %47 to i64 (%class.VmaBlockMetadata*)***
  %49 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %48, align 8
  %50 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %49, i64 5
  %51 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %50, align 8
  %52 = tail call i64 %51(%class.VmaBlockMetadata* %47) #15
  %53 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %38, align 8
  %54 = load i64, i64* %9, align 8
  %55 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %53, i64 0, i32 16, i32 1
  %56 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %55, align 8
  %57 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %56, i64 %54
  %58 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %57, align 8
  %59 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %58, i64 0, i32 0
  %60 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %59, align 8
  %61 = bitcast %class.VmaBlockMetadata* %60 to i64 (%class.VmaBlockMetadata*)***
  %62 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %61, align 8
  %63 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %62, i64 5
  %64 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %63, align 8
  %65 = tail call i64 %64(%class.VmaBlockMetadata* %60) #15
  %66 = icmp ult i64 %52, %65
  br i1 %36, label %103, label %67

67:                                               ; preds = %4
  br i1 %66, label %68, label %141

68:                                               ; preds = %67
  %69 = load i64, i64* %9, align 8
  %70 = load i64, i64* %40, align 8
  store i64 %70, i64* %9, align 8
  store i64 %69, i64* %40, align 8
  %71 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %5, align 8
  %72 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %71, i64 0, i32 2
  %73 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %72, align 8
  %74 = load i64, i64* %9, align 8
  %75 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %73, i64 0, i32 16, i32 1
  %76 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %75, align 8
  %77 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %76, i64 %74
  %78 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %77, align 8
  %79 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %78, i64 0, i32 0
  %80 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %79, align 8
  %81 = bitcast %class.VmaBlockMetadata* %80 to i64 (%class.VmaBlockMetadata*)***
  %82 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %81, align 8
  %83 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %82, i64 5
  %84 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %83, align 8
  %85 = tail call i64 %84(%class.VmaBlockMetadata* %80) #15
  %86 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %72, align 8
  %87 = load i64, i64* %23, align 8
  %88 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %86, i64 0, i32 16, i32 1
  %89 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %88, align 8
  %90 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %89, i64 %87
  %91 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %90, align 8
  %92 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %91, i64 0, i32 0
  %93 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %92, align 8
  %94 = bitcast %class.VmaBlockMetadata* %93 to i64 (%class.VmaBlockMetadata*)***
  %95 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %94, align 8
  %96 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %95, i64 5
  %97 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %96, align 8
  %98 = tail call i64 %97(%class.VmaBlockMetadata* %93) #15
  %99 = icmp ult i64 %85, %98
  br i1 %99, label %100, label %141

100:                                              ; preds = %68
  %101 = load i64, i64* %23, align 8
  %102 = load i64, i64* %9, align 8
  store i64 %102, i64* %23, align 8
  store i64 %101, i64* %9, align 8
  br label %141

103:                                              ; preds = %4
  %104 = load i64, i64* %23, align 8
  br i1 %66, label %105, label %107

105:                                              ; preds = %103
  %106 = load i64, i64* %40, align 8
  store i64 %106, i64* %23, align 8
  store i64 %104, i64* %40, align 8
  br label %141

107:                                              ; preds = %103
  %108 = load i64, i64* %9, align 8
  store i64 %108, i64* %23, align 8
  store i64 %104, i64* %9, align 8
  %109 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %5, align 8
  %110 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %109, i64 0, i32 2
  %111 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %110, align 8
  %112 = load i64, i64* %40, align 8
  %113 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %111, i64 0, i32 16, i32 1
  %114 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %113, align 8
  %115 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %114, i64 %112
  %116 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %115, align 8
  %117 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %116, i64 0, i32 0
  %118 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %117, align 8
  %119 = bitcast %class.VmaBlockMetadata* %118 to i64 (%class.VmaBlockMetadata*)***
  %120 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %119, align 8
  %121 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %120, i64 5
  %122 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %121, align 8
  %123 = tail call i64 %122(%class.VmaBlockMetadata* %118) #15
  %124 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %110, align 8
  %125 = load i64, i64* %9, align 8
  %126 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %124, i64 0, i32 16, i32 1
  %127 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %126, align 8
  %128 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %127, i64 %125
  %129 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %128, align 8
  %130 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %129, i64 0, i32 0
  %131 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %130, align 8
  %132 = bitcast %class.VmaBlockMetadata* %131 to i64 (%class.VmaBlockMetadata*)***
  %133 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %132, align 8
  %134 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %133, i64 5
  %135 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %134, align 8
  %136 = tail call i64 %135(%class.VmaBlockMetadata* %131) #15
  %137 = icmp ult i64 %123, %136
  br i1 %137, label %138, label %141

138:                                              ; preds = %107
  %139 = load i64, i64* %9, align 8
  %140 = load i64, i64* %40, align 8
  store i64 %140, i64* %9, align 8
  store i64 %139, i64* %40, align 8
  br label %141

141:                                              ; preds = %107, %138, %68, %100, %67, %105
  %142 = phi i32 [ 1, %105 ], [ 0, %67 ], [ 2, %100 ], [ 1, %68 ], [ 2, %138 ], [ 1, %107 ]
  ret i32 %142
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @"_ZNSt3__17__sort4IRZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEmjjE3$_0PNS1_9BlockInfoEEEjT0_SC_SC_SC_T_"(%"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* nocapture, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* nocapture, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* nocapture, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* nocapture, %class.anon* nocapture readonly dereferenceable(8)) unnamed_addr #0 {
  %6 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEmjjE3$_0PNS1_9BlockInfoEEEjT0_SC_SC_T_"(%"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %0, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %1, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %2, %class.anon* dereferenceable(8) %4)
  %7 = bitcast %class.anon* %4 to %class.VmaDefragmentationAlgorithm**
  %8 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %7, align 8
  %9 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %8, i64 0, i32 2
  %10 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %9, align 8
  %11 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %3, i64 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %10, i64 0, i32 16, i32 1
  %14 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %13, align 8
  %15 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %14, i64 %12
  %16 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %15, align 8
  %17 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %16, i64 0, i32 0
  %18 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %17, align 8
  %19 = bitcast %class.VmaBlockMetadata* %18 to i64 (%class.VmaBlockMetadata*)***
  %20 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %19, align 8
  %21 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %20, i64 5
  %22 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %21, align 8
  %23 = tail call i64 %22(%class.VmaBlockMetadata* %18) #15
  %24 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %9, align 8
  %25 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %2, i64 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %24, i64 0, i32 16, i32 1
  %28 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %27, align 8
  %29 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %28, i64 %26
  %30 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %29, align 8
  %31 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %30, i64 0, i32 0
  %32 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %31, align 8
  %33 = bitcast %class.VmaBlockMetadata* %32 to i64 (%class.VmaBlockMetadata*)***
  %34 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %33, align 8
  %35 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %34, i64 5
  %36 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %35, align 8
  %37 = tail call i64 %36(%class.VmaBlockMetadata* %32) #15
  %38 = icmp ult i64 %23, %37
  br i1 %38, label %39, label %111

39:                                               ; preds = %5
  %40 = load i64, i64* %25, align 8
  %41 = load i64, i64* %11, align 8
  store i64 %41, i64* %25, align 8
  store i64 %40, i64* %11, align 8
  %42 = add i32 %6, 1
  %43 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %7, align 8
  %44 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %43, i64 0, i32 2
  %45 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %44, align 8
  %46 = load i64, i64* %25, align 8
  %47 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %45, i64 0, i32 16, i32 1
  %48 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %47, align 8
  %49 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %48, i64 %46
  %50 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %49, align 8
  %51 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %50, i64 0, i32 0
  %52 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %51, align 8
  %53 = bitcast %class.VmaBlockMetadata* %52 to i64 (%class.VmaBlockMetadata*)***
  %54 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %53, align 8
  %55 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %54, i64 5
  %56 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %55, align 8
  %57 = tail call i64 %56(%class.VmaBlockMetadata* %52) #15
  %58 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %44, align 8
  %59 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %1, i64 0, i32 0
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %58, i64 0, i32 16, i32 1
  %62 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %61, align 8
  %63 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %62, i64 %60
  %64 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %63, align 8
  %65 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %64, i64 0, i32 0
  %66 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %65, align 8
  %67 = bitcast %class.VmaBlockMetadata* %66 to i64 (%class.VmaBlockMetadata*)***
  %68 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %67, align 8
  %69 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %68, i64 5
  %70 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %69, align 8
  %71 = tail call i64 %70(%class.VmaBlockMetadata* %66) #15
  %72 = icmp ult i64 %57, %71
  br i1 %72, label %73, label %111

73:                                               ; preds = %39
  %74 = load i64, i64* %59, align 8
  %75 = load i64, i64* %25, align 8
  store i64 %75, i64* %59, align 8
  store i64 %74, i64* %25, align 8
  %76 = add i32 %6, 2
  %77 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %7, align 8
  %78 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %77, i64 0, i32 2
  %79 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %78, align 8
  %80 = load i64, i64* %59, align 8
  %81 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %79, i64 0, i32 16, i32 1
  %82 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %81, align 8
  %83 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %82, i64 %80
  %84 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %83, align 8
  %85 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %84, i64 0, i32 0
  %86 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %85, align 8
  %87 = bitcast %class.VmaBlockMetadata* %86 to i64 (%class.VmaBlockMetadata*)***
  %88 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %87, align 8
  %89 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %88, i64 5
  %90 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %89, align 8
  %91 = tail call i64 %90(%class.VmaBlockMetadata* %86) #15
  %92 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %78, align 8
  %93 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %0, i64 0, i32 0
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %92, i64 0, i32 16, i32 1
  %96 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %95, align 8
  %97 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %96, i64 %94
  %98 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %97, align 8
  %99 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %98, i64 0, i32 0
  %100 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %99, align 8
  %101 = bitcast %class.VmaBlockMetadata* %100 to i64 (%class.VmaBlockMetadata*)***
  %102 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %101, align 8
  %103 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %102, i64 5
  %104 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %103, align 8
  %105 = tail call i64 %104(%class.VmaBlockMetadata* %100) #15
  %106 = icmp ult i64 %91, %105
  br i1 %106, label %107, label %111

107:                                              ; preds = %73
  %108 = load i64, i64* %93, align 8
  %109 = load i64, i64* %59, align 8
  store i64 %109, i64* %93, align 8
  store i64 %108, i64* %59, align 8
  %110 = add i32 %6, 3
  br label %111

111:                                              ; preds = %39, %107, %73, %5
  %112 = phi i32 [ %110, %107 ], [ %76, %73 ], [ %42, %39 ], [ %6, %5 ]
  ret i32 %112
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @"_ZNSt3__17__sort5IRZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEmjjE3$_0PNS1_9BlockInfoEEEjT0_SC_SC_SC_SC_T_"(%"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* nocapture, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* nocapture, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* nocapture, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* nocapture, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* nocapture, %class.anon* nocapture readonly dereferenceable(8)) unnamed_addr #0 {
  %7 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEmjjE3$_0PNS1_9BlockInfoEEEjT0_SC_SC_SC_T_"(%"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %0, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %1, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %2, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %3, %class.anon* dereferenceable(8) %5)
  %8 = bitcast %class.anon* %5 to %class.VmaDefragmentationAlgorithm**
  %9 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %8, align 8
  %10 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %9, i64 0, i32 2
  %11 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %10, align 8
  %12 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %4, i64 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %11, i64 0, i32 16, i32 1
  %15 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %14, align 8
  %16 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %15, i64 %13
  %17 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %16, align 8
  %18 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %17, i64 0, i32 0
  %19 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %18, align 8
  %20 = bitcast %class.VmaBlockMetadata* %19 to i64 (%class.VmaBlockMetadata*)***
  %21 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %20, align 8
  %22 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %21, i64 5
  %23 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %22, align 8
  %24 = tail call i64 %23(%class.VmaBlockMetadata* %19) #15
  %25 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %10, align 8
  %26 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %3, i64 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %25, i64 0, i32 16, i32 1
  %29 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %28, align 8
  %30 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %29, i64 %27
  %31 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %30, align 8
  %32 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %31, i64 0, i32 0
  %33 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %32, align 8
  %34 = bitcast %class.VmaBlockMetadata* %33 to i64 (%class.VmaBlockMetadata*)***
  %35 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %34, align 8
  %36 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %35, i64 5
  %37 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %36, align 8
  %38 = tail call i64 %37(%class.VmaBlockMetadata* %33) #15
  %39 = icmp ult i64 %24, %38
  br i1 %39, label %40, label %146

40:                                               ; preds = %6
  %41 = load i64, i64* %26, align 8
  %42 = load i64, i64* %12, align 8
  store i64 %42, i64* %26, align 8
  store i64 %41, i64* %12, align 8
  %43 = add i32 %7, 1
  %44 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %8, align 8
  %45 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %44, i64 0, i32 2
  %46 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %45, align 8
  %47 = load i64, i64* %26, align 8
  %48 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %46, i64 0, i32 16, i32 1
  %49 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %48, align 8
  %50 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %49, i64 %47
  %51 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %50, align 8
  %52 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %51, i64 0, i32 0
  %53 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %52, align 8
  %54 = bitcast %class.VmaBlockMetadata* %53 to i64 (%class.VmaBlockMetadata*)***
  %55 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %54, align 8
  %56 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %55, i64 5
  %57 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %56, align 8
  %58 = tail call i64 %57(%class.VmaBlockMetadata* %53) #15
  %59 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %45, align 8
  %60 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %2, i64 0, i32 0
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %59, i64 0, i32 16, i32 1
  %63 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %62, align 8
  %64 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %63, i64 %61
  %65 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %64, align 8
  %66 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %65, i64 0, i32 0
  %67 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %66, align 8
  %68 = bitcast %class.VmaBlockMetadata* %67 to i64 (%class.VmaBlockMetadata*)***
  %69 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %68, align 8
  %70 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %69, i64 5
  %71 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %70, align 8
  %72 = tail call i64 %71(%class.VmaBlockMetadata* %67) #15
  %73 = icmp ult i64 %58, %72
  br i1 %73, label %74, label %146

74:                                               ; preds = %40
  %75 = load i64, i64* %60, align 8
  %76 = load i64, i64* %26, align 8
  store i64 %76, i64* %60, align 8
  store i64 %75, i64* %26, align 8
  %77 = add i32 %7, 2
  %78 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %8, align 8
  %79 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %78, i64 0, i32 2
  %80 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %79, align 8
  %81 = load i64, i64* %60, align 8
  %82 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %80, i64 0, i32 16, i32 1
  %83 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %82, align 8
  %84 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %83, i64 %81
  %85 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %84, align 8
  %86 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %85, i64 0, i32 0
  %87 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %86, align 8
  %88 = bitcast %class.VmaBlockMetadata* %87 to i64 (%class.VmaBlockMetadata*)***
  %89 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %88, align 8
  %90 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %89, i64 5
  %91 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %90, align 8
  %92 = tail call i64 %91(%class.VmaBlockMetadata* %87) #15
  %93 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %79, align 8
  %94 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %1, i64 0, i32 0
  %95 = load i64, i64* %94, align 8
  %96 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %93, i64 0, i32 16, i32 1
  %97 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %96, align 8
  %98 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %97, i64 %95
  %99 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %98, align 8
  %100 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %99, i64 0, i32 0
  %101 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %100, align 8
  %102 = bitcast %class.VmaBlockMetadata* %101 to i64 (%class.VmaBlockMetadata*)***
  %103 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %102, align 8
  %104 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %103, i64 5
  %105 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %104, align 8
  %106 = tail call i64 %105(%class.VmaBlockMetadata* %101) #15
  %107 = icmp ult i64 %92, %106
  br i1 %107, label %108, label %146

108:                                              ; preds = %74
  %109 = load i64, i64* %94, align 8
  %110 = load i64, i64* %60, align 8
  store i64 %110, i64* %94, align 8
  store i64 %109, i64* %60, align 8
  %111 = add i32 %7, 3
  %112 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %8, align 8
  %113 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %112, i64 0, i32 2
  %114 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %113, align 8
  %115 = load i64, i64* %94, align 8
  %116 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %114, i64 0, i32 16, i32 1
  %117 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %116, align 8
  %118 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %117, i64 %115
  %119 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %118, align 8
  %120 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %119, i64 0, i32 0
  %121 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %120, align 8
  %122 = bitcast %class.VmaBlockMetadata* %121 to i64 (%class.VmaBlockMetadata*)***
  %123 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %122, align 8
  %124 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %123, i64 5
  %125 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %124, align 8
  %126 = tail call i64 %125(%class.VmaBlockMetadata* %121) #15
  %127 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %113, align 8
  %128 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %0, i64 0, i32 0
  %129 = load i64, i64* %128, align 8
  %130 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %127, i64 0, i32 16, i32 1
  %131 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %130, align 8
  %132 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %131, i64 %129
  %133 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %132, align 8
  %134 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %133, i64 0, i32 0
  %135 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %134, align 8
  %136 = bitcast %class.VmaBlockMetadata* %135 to i64 (%class.VmaBlockMetadata*)***
  %137 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %136, align 8
  %138 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %137, i64 5
  %139 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %138, align 8
  %140 = tail call i64 %139(%class.VmaBlockMetadata* %135) #15
  %141 = icmp ult i64 %126, %140
  br i1 %141, label %142, label %146

142:                                              ; preds = %108
  %143 = load i64, i64* %128, align 8
  %144 = load i64, i64* %94, align 8
  store i64 %144, i64* %128, align 8
  store i64 %143, i64* %94, align 8
  %145 = add i32 %7, 4
  br label %146

146:                                              ; preds = %40, %108, %142, %74, %6
  %147 = phi i32 [ %145, %142 ], [ %111, %108 ], [ %77, %74 ], [ %43, %40 ], [ %7, %6 ]
  ret i32 %147
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEmjjE3$_0PNS1_9BlockInfoEEEbT0_SC_T_"(%"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"*, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"*, %class.anon* nocapture readonly dereferenceable(8)) unnamed_addr #0 {
  %4 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %1 to i64
  %5 = ptrtoint %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %0 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 3
  switch i64 %7, label %59 [
    i64 0, label %154
    i64 1, label %154
    i64 2, label %8
    i64 3, label %44
    i64 4, label %48
    i64 5, label %53
  ]

8:                                                ; preds = %3
  %9 = bitcast %class.anon* %2 to %class.VmaDefragmentationAlgorithm**
  %10 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %9, align 8
  %11 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %10, i64 0, i32 2
  %12 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %11, align 8
  %13 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %1, i64 -1, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %12, i64 0, i32 16, i32 1
  %16 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %15, align 8
  %17 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %16, i64 %14
  %18 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %17, align 8
  %19 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %18, i64 0, i32 0
  %20 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %19, align 8
  %21 = bitcast %class.VmaBlockMetadata* %20 to i64 (%class.VmaBlockMetadata*)***
  %22 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %21, align 8
  %23 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %22, i64 5
  %24 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %23, align 8
  %25 = tail call i64 %24(%class.VmaBlockMetadata* %20) #15
  %26 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %11, align 8
  %27 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %0, i64 0, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %26, i64 0, i32 16, i32 1
  %30 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %29, align 8
  %31 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %30, i64 %28
  %32 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %31, align 8
  %33 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %32, i64 0, i32 0
  %34 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %33, align 8
  %35 = bitcast %class.VmaBlockMetadata* %34 to i64 (%class.VmaBlockMetadata*)***
  %36 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %35, align 8
  %37 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %36, i64 5
  %38 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %37, align 8
  %39 = tail call i64 %38(%class.VmaBlockMetadata* %34) #15
  %40 = icmp ult i64 %25, %39
  br i1 %40, label %41, label %154

41:                                               ; preds = %8
  %42 = load i64, i64* %27, align 8
  %43 = load i64, i64* %13, align 8
  store i64 %43, i64* %27, align 8
  store i64 %42, i64* %13, align 8
  br label %154

44:                                               ; preds = %3
  %45 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %0, i64 1
  %46 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %1, i64 -1
  %47 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEmjjE3$_0PNS1_9BlockInfoEEEjT0_SC_SC_T_"(%"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %0, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %45, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %46, %class.anon* dereferenceable(8) %2)
  br label %154

48:                                               ; preds = %3
  %49 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %0, i64 1
  %50 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %0, i64 2
  %51 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %1, i64 -1
  %52 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEmjjE3$_0PNS1_9BlockInfoEEEjT0_SC_SC_SC_T_"(%"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %0, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %49, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %50, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %51, %class.anon* dereferenceable(8) %2)
  br label %154

53:                                               ; preds = %3
  %54 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %0, i64 1
  %55 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %0, i64 2
  %56 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %0, i64 3
  %57 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %1, i64 -1
  %58 = tail call fastcc i32 @"_ZNSt3__17__sort5IRZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEmjjE3$_0PNS1_9BlockInfoEEEjT0_SC_SC_SC_SC_T_"(%"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %0, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %54, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %55, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %56, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %57, %class.anon* dereferenceable(8) %2)
  br label %154

59:                                               ; preds = %3
  %60 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %0, i64 2
  %61 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %0, i64 1
  %62 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN32VmaDefragmentationAlgorithm_Fast10DefragmentER9VmaVectorI22VmaDefragmentationMove15VmaStlAllocatorIS3_EEmjjE3$_0PNS1_9BlockInfoEEEjT0_SC_SC_T_"(%"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %0, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %61, %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %60, %class.anon* dereferenceable(8) %2)
  %63 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %0, i64 3
  %64 = icmp eq %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %63, %1
  br i1 %64, label %154, label %65

65:                                               ; preds = %59
  %66 = bitcast %class.anon* %2 to %class.VmaDefragmentationAlgorithm**
  br label %67

67:                                               ; preds = %65, %147
  %68 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %63, %65 ], [ %149, %147 ]
  %69 = phi i32 [ 0, %65 ], [ %148, %147 ]
  %70 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %60, %65 ], [ %68, %147 ]
  %71 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %66, align 8
  %72 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %71, i64 0, i32 2
  %73 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %72, align 8
  %74 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %68, i64 0, i32 0
  %75 = load i64, i64* %74, align 8
  %76 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %73, i64 0, i32 16, i32 1
  %77 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %76, align 8
  %78 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %77, i64 %75
  %79 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %78, align 8
  %80 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %79, i64 0, i32 0
  %81 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %80, align 8
  %82 = bitcast %class.VmaBlockMetadata* %81 to i64 (%class.VmaBlockMetadata*)***
  %83 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %82, align 8
  %84 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %83, i64 5
  %85 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %84, align 8
  %86 = tail call i64 %85(%class.VmaBlockMetadata* %81) #15
  %87 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %72, align 8
  %88 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %70, i64 0, i32 0
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %87, i64 0, i32 16, i32 1
  %91 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %90, align 8
  %92 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %91, i64 %89
  %93 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %92, align 8
  %94 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %93, i64 0, i32 0
  %95 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %94, align 8
  %96 = bitcast %class.VmaBlockMetadata* %95 to i64 (%class.VmaBlockMetadata*)***
  %97 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %96, align 8
  %98 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %97, i64 5
  %99 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %98, align 8
  %100 = tail call i64 %99(%class.VmaBlockMetadata* %95) #15
  %101 = icmp ult i64 %86, %100
  br i1 %101, label %102, label %147

102:                                              ; preds = %67
  %103 = load i64, i64* %74, align 8
  br label %104

104:                                              ; preds = %111, %102
  %105 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %68, %102 ], [ %106, %111 ]
  %106 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %70, %102 ], [ %112, %111 ]
  %107 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %106, i64 0, i32 0
  %108 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %105, i64 0, i32 0
  %109 = load i64, i64* %107, align 8
  store i64 %109, i64* %108, align 8
  %110 = icmp eq %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %106, %0
  br i1 %110, label %142, label %111

111:                                              ; preds = %104
  %112 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %106, i64 -1
  %113 = load %class.VmaDefragmentationAlgorithm*, %class.VmaDefragmentationAlgorithm** %66, align 8
  %114 = getelementptr inbounds %class.VmaDefragmentationAlgorithm, %class.VmaDefragmentationAlgorithm* %113, i64 0, i32 2
  %115 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %114, align 8
  %116 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %115, i64 0, i32 16, i32 1
  %117 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %116, align 8
  %118 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %117, i64 %103
  %119 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %118, align 8
  %120 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %119, i64 0, i32 0
  %121 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %120, align 8
  %122 = bitcast %class.VmaBlockMetadata* %121 to i64 (%class.VmaBlockMetadata*)***
  %123 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %122, align 8
  %124 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %123, i64 5
  %125 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %124, align 8
  %126 = tail call i64 %125(%class.VmaBlockMetadata* %121) #15
  %127 = load %struct.VmaBlockVector*, %struct.VmaBlockVector** %114, align 8
  %128 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %112, i64 0, i32 0
  %129 = load i64, i64* %128, align 8
  %130 = getelementptr inbounds %struct.VmaBlockVector, %struct.VmaBlockVector* %127, i64 0, i32 16, i32 1
  %131 = load %class.VmaDeviceMemoryBlock**, %class.VmaDeviceMemoryBlock*** %130, align 8
  %132 = getelementptr inbounds %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %131, i64 %129
  %133 = load %class.VmaDeviceMemoryBlock*, %class.VmaDeviceMemoryBlock** %132, align 8
  %134 = getelementptr inbounds %class.VmaDeviceMemoryBlock, %class.VmaDeviceMemoryBlock* %133, i64 0, i32 0
  %135 = load %class.VmaBlockMetadata*, %class.VmaBlockMetadata** %134, align 8
  %136 = bitcast %class.VmaBlockMetadata* %135 to i64 (%class.VmaBlockMetadata*)***
  %137 = load i64 (%class.VmaBlockMetadata*)**, i64 (%class.VmaBlockMetadata*)*** %136, align 8
  %138 = getelementptr inbounds i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %137, i64 5
  %139 = load i64 (%class.VmaBlockMetadata*)*, i64 (%class.VmaBlockMetadata*)** %138, align 8
  %140 = tail call i64 %139(%class.VmaBlockMetadata* %135) #15
  %141 = icmp ult i64 %126, %140
  br i1 %141, label %104, label %142

142:                                              ; preds = %104, %111
  %143 = phi %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* [ %0, %104 ], [ %106, %111 ]
  %144 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %143, i64 0, i32 0
  store i64 %103, i64* %144, align 8
  %145 = add i32 %69, 1
  %146 = icmp eq i32 %145, 8
  br i1 %146, label %151, label %147

147:                                              ; preds = %142, %67
  %148 = phi i32 [ %145, %142 ], [ %69, %67 ]
  %149 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %68, i64 1
  %150 = icmp eq %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %149, %1
  br i1 %150, label %154, label %67

151:                                              ; preds = %142
  %152 = getelementptr inbounds %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo", %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %68, i64 1
  %153 = icmp eq %"struct.VmaDefragmentationAlgorithm_Fast::BlockInfo"* %152, %1
  br label %154

154:                                              ; preds = %147, %151, %59, %8, %41, %3, %3, %53, %48, %44
  %155 = phi i1 [ true, %53 ], [ true, %48 ], [ true, %44 ], [ true, %3 ], [ true, %3 ], [ true, %41 ], [ true, %8 ], [ true, %59 ], [ %153, %151 ], [ true, %147 ]
  ret i1 %155
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__sortIR28VmaSuballocationItemSizeLessPN7VmaListI16VmaSuballocation15VmaStlAllocatorIS4_EE8iteratorEEEvT0_SA_T_(%"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %struct.VmaSuballocationItemSizeLess* dereferenceable(1)) local_unnamed_addr #0 comdat {
  br label %4

4:                                                ; preds = %475, %3
  %5 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %1, %3 ], [ %444, %475 ]
  %6 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %0, %3 ], [ %31, %475 ]
  %7 = ptrtoint %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %5 to i64
  %8 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %5, i64 -1
  %9 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %5, i64 -1, i32 1
  %10 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %8 to i8*
  %11 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %8 to i64*
  %12 = bitcast %struct.VmaListItem** %9 to i64*
  %13 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %8 to i8*
  %14 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %8 to i64*
  %15 = bitcast %struct.VmaListItem** %9 to i64*
  %16 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %8 to i8*
  %17 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %8 to i64*
  %18 = bitcast %struct.VmaListItem** %9 to i64*
  %19 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %5, i64 -1, i32 1
  %20 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %8 to i8*
  %21 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %8 to i64*
  %22 = bitcast %struct.VmaListItem** %19 to i64*
  %23 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %5, i64 -1, i32 1
  %24 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %8 to i8*
  %25 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %8 to i64*
  %26 = bitcast %struct.VmaListItem** %23 to i64*
  %27 = ptrtoint %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %5 to i64
  br label %28

28:                                               ; preds = %484, %4
  %29 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %6, %4 ], [ %485, %484 ]
  br label %30

30:                                               ; preds = %371, %28
  %31 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %29, %28 ], [ %354, %371 ]
  %32 = ptrtoint %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31 to i64
  %33 = sub i64 %7, %32
  %34 = ashr exact i64 %33, 4
  switch i64 %34, label %185 [
    i64 0, label %488
    i64 1, label %488
    i64 2, label %35
    i64 3, label %54
    i64 4, label %115
    i64 5, label %120
  ]

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %5, i64 -1
  %37 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %5, i64 -1, i32 1
  %38 = load %struct.VmaListItem*, %struct.VmaListItem** %37, align 8
  %39 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 0, i32 1
  %40 = load %struct.VmaListItem*, %struct.VmaListItem** %39, align 8
  %41 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %38, i64 0, i32 2, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %40, i64 0, i32 2, i32 1
  %44 = load i64, i64* %43, align 8
  %45 = icmp ult i64 %42, %44
  br i1 %45, label %46, label %488

46:                                               ; preds = %35
  %47 = ptrtoint %struct.VmaListItem* %40 to i64
  %48 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31 to i8*
  %51 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %36 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 16, i1 false) #15
  %52 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %36 to i64*
  store i64 %49, i64* %52, align 8
  %53 = bitcast %struct.VmaListItem** %37 to i64*
  store i64 %47, i64* %53, align 8
  br label %488

54:                                               ; preds = %30
  %55 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 1
  %56 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %5, i64 -1
  %57 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 1, i32 1
  %58 = load %struct.VmaListItem*, %struct.VmaListItem** %57, align 8
  %59 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 0, i32 1
  %60 = load %struct.VmaListItem*, %struct.VmaListItem** %59, align 8
  %61 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %58, i64 0, i32 2, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %60, i64 0, i32 2, i32 1
  %64 = load i64, i64* %63, align 8
  %65 = icmp ult i64 %62, %64
  %66 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %5, i64 -1, i32 1
  %67 = load %struct.VmaListItem*, %struct.VmaListItem** %66, align 8
  %68 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %67, i64 0, i32 2, i32 1
  %69 = load i64, i64* %68, align 8
  %70 = icmp ult i64 %69, %62
  %71 = ptrtoint %struct.VmaListItem* %58 to i64
  %72 = ptrtoint %struct.VmaListItem* %60 to i64
  br i1 %65, label %94, label %73

73:                                               ; preds = %54
  br i1 %70, label %74, label %488

74:                                               ; preds = %73
  %75 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %55 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %55 to i8*
  %78 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %56 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 16, i1 false) #15
  %79 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %56 to i64*
  store i64 %76, i64* %79, align 8
  %80 = bitcast %struct.VmaListItem** %66 to i64*
  store i64 %71, i64* %80, align 8
  %81 = load %struct.VmaListItem*, %struct.VmaListItem** %57, align 8
  %82 = load %struct.VmaListItem*, %struct.VmaListItem** %59, align 8
  %83 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %81, i64 0, i32 2, i32 1
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %82, i64 0, i32 2, i32 1
  %86 = load i64, i64* %85, align 8
  %87 = icmp ult i64 %84, %86
  br i1 %87, label %88, label %488

88:                                               ; preds = %74
  %89 = ptrtoint %struct.VmaListItem* %82 to i64
  %90 = bitcast %struct.VmaListItem** %57 to i64*
  %91 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %93, i8* align 8 %77, i64 16, i1 false) #15
  store i64 %92, i64* %75, align 8
  store i64 %89, i64* %90, align 8
  br label %488

94:                                               ; preds = %54
  %95 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31 to i8*
  br i1 %70, label %98, label %102

98:                                               ; preds = %94
  %99 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %56 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %97, i8* align 8 %99, i64 16, i1 false) #15
  %100 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %56 to i64*
  store i64 %96, i64* %100, align 8
  %101 = bitcast %struct.VmaListItem** %66 to i64*
  store i64 %72, i64* %101, align 8
  br label %488

102:                                              ; preds = %94
  %103 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %97, i8* align 8 %103, i64 16, i1 false) #15
  %104 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %55 to i64*
  store i64 %96, i64* %104, align 8
  %105 = bitcast %struct.VmaListItem** %57 to i64*
  store i64 %72, i64* %105, align 8
  %106 = load %struct.VmaListItem*, %struct.VmaListItem** %66, align 8
  %107 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %106, i64 0, i32 2, i32 1
  %108 = load i64, i64* %107, align 8
  %109 = load i64, i64* %63, align 8
  %110 = icmp ult i64 %108, %109
  br i1 %110, label %111, label %488

111:                                              ; preds = %102
  %112 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %56 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %103, i8* align 8 %112, i64 16, i1 false) #15
  %113 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %56 to i64*
  store i64 %96, i64* %113, align 8
  %114 = bitcast %struct.VmaListItem** %66 to i64*
  store i64 %72, i64* %114, align 8
  br label %488

115:                                              ; preds = %30
  %116 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 1
  %117 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 2
  %118 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %5, i64 -1
  %119 = tail call i32 @_ZNSt3__17__sort4IR28VmaSuballocationItemSizeLessPN7VmaListI16VmaSuballocation15VmaStlAllocatorIS4_EE8iteratorEEEjT0_SA_SA_SA_T_(%"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %116, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %117, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %118, %struct.VmaSuballocationItemSizeLess* dereferenceable(1) %2)
  br label %488

120:                                              ; preds = %30
  %121 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 1
  %122 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 2
  %123 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 3
  %124 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %5, i64 -1
  %125 = tail call i32 @_ZNSt3__17__sort4IR28VmaSuballocationItemSizeLessPN7VmaListI16VmaSuballocation15VmaStlAllocatorIS4_EE8iteratorEEEjT0_SA_SA_SA_T_(%"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %121, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %122, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %123, %struct.VmaSuballocationItemSizeLess* dereferenceable(1) %2) #15
  %126 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %5, i64 -1, i32 1
  %127 = load %struct.VmaListItem*, %struct.VmaListItem** %126, align 8
  %128 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 3, i32 1
  %129 = load %struct.VmaListItem*, %struct.VmaListItem** %128, align 8
  %130 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %127, i64 0, i32 2, i32 1
  %131 = load i64, i64* %130, align 8
  %132 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %129, i64 0, i32 2, i32 1
  %133 = load i64, i64* %132, align 8
  %134 = icmp ult i64 %131, %133
  br i1 %134, label %135, label %488

135:                                              ; preds = %120
  %136 = ptrtoint %struct.VmaListItem* %129 to i64
  %137 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %123 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %123 to i8*
  %140 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %124 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %139, i8* align 8 %140, i64 16, i1 false) #15
  %141 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %124 to i64*
  store i64 %138, i64* %141, align 8
  %142 = bitcast %struct.VmaListItem** %126 to i64*
  store i64 %136, i64* %142, align 8
  %143 = load %struct.VmaListItem*, %struct.VmaListItem** %128, align 8
  %144 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 2, i32 1
  %145 = load %struct.VmaListItem*, %struct.VmaListItem** %144, align 8
  %146 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %143, i64 0, i32 2, i32 1
  %147 = load i64, i64* %146, align 8
  %148 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %145, i64 0, i32 2, i32 1
  %149 = load i64, i64* %148, align 8
  %150 = icmp ult i64 %147, %149
  br i1 %150, label %151, label %488

151:                                              ; preds = %135
  %152 = ptrtoint %struct.VmaListItem* %145 to i64
  %153 = bitcast %struct.VmaListItem** %128 to i64*
  %154 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %122 to i64*
  %155 = load i64, i64* %154, align 8
  %156 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %122 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %156, i8* align 8 %139, i64 16, i1 false) #15
  store i64 %155, i64* %137, align 8
  store i64 %152, i64* %153, align 8
  %157 = load %struct.VmaListItem*, %struct.VmaListItem** %144, align 8
  %158 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 1, i32 1
  %159 = load %struct.VmaListItem*, %struct.VmaListItem** %158, align 8
  %160 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %157, i64 0, i32 2, i32 1
  %161 = load i64, i64* %160, align 8
  %162 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %159, i64 0, i32 2, i32 1
  %163 = load i64, i64* %162, align 8
  %164 = icmp ult i64 %161, %163
  br i1 %164, label %165, label %488

165:                                              ; preds = %151
  %166 = ptrtoint %struct.VmaListItem* %159 to i64
  %167 = bitcast %struct.VmaListItem** %144 to i64*
  %168 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %121 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %121 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %170, i8* align 8 %156, i64 16, i1 false) #15
  store i64 %169, i64* %154, align 8
  store i64 %166, i64* %167, align 8
  %171 = load %struct.VmaListItem*, %struct.VmaListItem** %158, align 8
  %172 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 0, i32 1
  %173 = load %struct.VmaListItem*, %struct.VmaListItem** %172, align 8
  %174 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %171, i64 0, i32 2, i32 1
  %175 = load i64, i64* %174, align 8
  %176 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %173, i64 0, i32 2, i32 1
  %177 = load i64, i64* %176, align 8
  %178 = icmp ult i64 %175, %177
  br i1 %178, label %179, label %488

179:                                              ; preds = %165
  %180 = ptrtoint %struct.VmaListItem* %173 to i64
  %181 = bitcast %struct.VmaListItem** %158 to i64*
  %182 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31 to i64*
  %183 = load i64, i64* %182, align 8
  %184 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %184, i8* align 8 %170, i64 16, i1 false) #15
  store i64 %183, i64* %168, align 8
  store i64 %180, i64* %181, align 8
  br label %488

185:                                              ; preds = %30
  %186 = icmp slt i64 %33, 496
  br i1 %186, label %187, label %188

187:                                              ; preds = %185
  tail call void @_ZNSt3__118__insertion_sort_3IR28VmaSuballocationItemSizeLessPN7VmaListI16VmaSuballocation15VmaStlAllocatorIS4_EE8iteratorEEEvT0_SA_T_(%"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %5, %struct.VmaSuballocationItemSizeLess* dereferenceable(1) %2)
  br label %488

188:                                              ; preds = %185
  %189 = icmp sgt i64 %33, 15984
  %190 = sdiv i64 %34, 2
  %191 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 %190
  br i1 %189, label %192, label %256

192:                                              ; preds = %188
  %193 = sdiv i64 %34, 4
  %194 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 %193
  %195 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %191, i64 %193
  %196 = tail call i32 @_ZNSt3__17__sort4IR28VmaSuballocationItemSizeLessPN7VmaListI16VmaSuballocation15VmaStlAllocatorIS4_EE8iteratorEEEjT0_SA_SA_SA_T_(%"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %194, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %191, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %195, %struct.VmaSuballocationItemSizeLess* dereferenceable(1) %2) #15
  %197 = load %struct.VmaListItem*, %struct.VmaListItem** %19, align 8
  %198 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %195, i64 0, i32 1
  %199 = load %struct.VmaListItem*, %struct.VmaListItem** %198, align 8
  %200 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %197, i64 0, i32 2, i32 1
  %201 = load i64, i64* %200, align 8
  %202 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %199, i64 0, i32 2, i32 1
  %203 = load i64, i64* %202, align 8
  %204 = icmp ult i64 %201, %203
  br i1 %204, label %205, label %305

205:                                              ; preds = %192
  %206 = ptrtoint %struct.VmaListItem* %199 to i64
  %207 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %195 to i64*
  %208 = load i64, i64* %207, align 8
  %209 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %195 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %209, i8* align 8 %20, i64 16, i1 false) #15
  store i64 %208, i64* %21, align 8
  store i64 %206, i64* %22, align 8
  %210 = add i32 %196, 1
  %211 = load %struct.VmaListItem*, %struct.VmaListItem** %198, align 8
  %212 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 %190, i32 1
  %213 = load %struct.VmaListItem*, %struct.VmaListItem** %212, align 8
  %214 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %211, i64 0, i32 2, i32 1
  %215 = load i64, i64* %214, align 8
  %216 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %213, i64 0, i32 2, i32 1
  %217 = load i64, i64* %216, align 8
  %218 = icmp ult i64 %215, %217
  br i1 %218, label %219, label %305

219:                                              ; preds = %205
  %220 = ptrtoint %struct.VmaListItem* %213 to i64
  %221 = bitcast %struct.VmaListItem** %198 to i64*
  %222 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %191 to i64*
  %223 = load i64, i64* %222, align 8
  %224 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %191 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %224, i8* align 8 %209, i64 16, i1 false) #15
  store i64 %223, i64* %207, align 8
  store i64 %220, i64* %221, align 8
  %225 = add i32 %196, 2
  %226 = load %struct.VmaListItem*, %struct.VmaListItem** %212, align 8
  %227 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 %193, i32 1
  %228 = load %struct.VmaListItem*, %struct.VmaListItem** %227, align 8
  %229 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %226, i64 0, i32 2, i32 1
  %230 = load i64, i64* %229, align 8
  %231 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %228, i64 0, i32 2, i32 1
  %232 = load i64, i64* %231, align 8
  %233 = icmp ult i64 %230, %232
  br i1 %233, label %234, label %305

234:                                              ; preds = %219
  %235 = ptrtoint %struct.VmaListItem* %228 to i64
  %236 = bitcast %struct.VmaListItem** %212 to i64*
  %237 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %194 to i64*
  %238 = load i64, i64* %237, align 8
  %239 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %194 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %239, i8* align 8 %224, i64 16, i1 false) #15
  store i64 %238, i64* %222, align 8
  store i64 %235, i64* %236, align 8
  %240 = add i32 %196, 3
  %241 = load %struct.VmaListItem*, %struct.VmaListItem** %227, align 8
  %242 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 0, i32 1
  %243 = load %struct.VmaListItem*, %struct.VmaListItem** %242, align 8
  %244 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %241, i64 0, i32 2, i32 1
  %245 = load i64, i64* %244, align 8
  %246 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %243, i64 0, i32 2, i32 1
  %247 = load i64, i64* %246, align 8
  %248 = icmp ult i64 %245, %247
  br i1 %248, label %249, label %305

249:                                              ; preds = %234
  %250 = ptrtoint %struct.VmaListItem* %243 to i64
  %251 = bitcast %struct.VmaListItem** %227 to i64*
  %252 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31 to i64*
  %253 = load i64, i64* %252, align 8
  %254 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %254, i8* align 8 %239, i64 16, i1 false) #15
  store i64 %253, i64* %237, align 8
  store i64 %250, i64* %251, align 8
  %255 = add i32 %196, 4
  br label %305

256:                                              ; preds = %188
  %257 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 %190, i32 1
  %258 = load %struct.VmaListItem*, %struct.VmaListItem** %257, align 8
  %259 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 0, i32 1
  %260 = load %struct.VmaListItem*, %struct.VmaListItem** %259, align 8
  %261 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %258, i64 0, i32 2, i32 1
  %262 = load i64, i64* %261, align 8
  %263 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %260, i64 0, i32 2, i32 1
  %264 = load i64, i64* %263, align 8
  %265 = icmp ult i64 %262, %264
  %266 = load %struct.VmaListItem*, %struct.VmaListItem** %9, align 8
  %267 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %266, i64 0, i32 2, i32 1
  %268 = load i64, i64* %267, align 8
  %269 = icmp ult i64 %268, %262
  %270 = ptrtoint %struct.VmaListItem* %258 to i64
  %271 = ptrtoint %struct.VmaListItem* %260 to i64
  br i1 %265, label %290, label %272

272:                                              ; preds = %256
  br i1 %269, label %273, label %305

273:                                              ; preds = %272
  %274 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %191 to i64*
  %275 = load i64, i64* %274, align 8
  %276 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %191 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %276, i8* align 8 %10, i64 16, i1 false) #15
  store i64 %275, i64* %11, align 8
  store i64 %270, i64* %12, align 8
  %277 = load %struct.VmaListItem*, %struct.VmaListItem** %257, align 8
  %278 = load %struct.VmaListItem*, %struct.VmaListItem** %259, align 8
  %279 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %277, i64 0, i32 2, i32 1
  %280 = load i64, i64* %279, align 8
  %281 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %278, i64 0, i32 2, i32 1
  %282 = load i64, i64* %281, align 8
  %283 = icmp ult i64 %280, %282
  br i1 %283, label %284, label %305

284:                                              ; preds = %273
  %285 = ptrtoint %struct.VmaListItem* %278 to i64
  %286 = bitcast %struct.VmaListItem** %257 to i64*
  %287 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31 to i64*
  %288 = load i64, i64* %287, align 8
  %289 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %289, i8* align 8 %276, i64 16, i1 false) #15
  store i64 %288, i64* %274, align 8
  store i64 %285, i64* %286, align 8
  br label %305

290:                                              ; preds = %256
  %291 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31 to i64*
  %292 = load i64, i64* %291, align 8
  %293 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31 to i8*
  br i1 %269, label %294, label %295

294:                                              ; preds = %290
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %293, i8* align 8 %16, i64 16, i1 false) #15
  store i64 %292, i64* %17, align 8
  store i64 %271, i64* %18, align 8
  br label %305

295:                                              ; preds = %290
  %296 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %191 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %293, i8* align 8 %296, i64 16, i1 false) #15
  %297 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %191 to i64*
  store i64 %292, i64* %297, align 8
  %298 = bitcast %struct.VmaListItem** %257 to i64*
  store i64 %271, i64* %298, align 8
  %299 = load %struct.VmaListItem*, %struct.VmaListItem** %9, align 8
  %300 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %299, i64 0, i32 2, i32 1
  %301 = load i64, i64* %300, align 8
  %302 = load i64, i64* %263, align 8
  %303 = icmp ult i64 %301, %302
  br i1 %303, label %304, label %305

304:                                              ; preds = %295
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %296, i8* align 8 %13, i64 16, i1 false) #15
  store i64 %292, i64* %14, align 8
  store i64 %271, i64* %15, align 8
  br label %305

305:                                              ; preds = %304, %295, %294, %284, %273, %272, %249, %234, %219, %205, %192
  %306 = phi i32 [ %255, %249 ], [ %240, %234 ], [ %225, %219 ], [ %210, %205 ], [ %196, %192 ], [ 1, %294 ], [ 0, %272 ], [ 2, %284 ], [ 1, %273 ], [ 2, %304 ], [ 1, %295 ]
  %307 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 0, i32 1
  %308 = load %struct.VmaListItem*, %struct.VmaListItem** %307, align 8
  %309 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 %190, i32 1
  %310 = load %struct.VmaListItem*, %struct.VmaListItem** %309, align 8
  %311 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %308, i64 0, i32 2, i32 1
  %312 = load i64, i64* %311, align 8
  %313 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %310, i64 0, i32 2, i32 1
  %314 = load i64, i64* %313, align 8
  %315 = icmp ult i64 %312, %314
  br i1 %315, label %397, label %316

316:                                              ; preds = %305, %381
  %317 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %318, %381 ], [ %8, %305 ]
  %318 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %317, i64 -1
  %319 = icmp eq %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, %318
  br i1 %319, label %320, label %381

320:                                              ; preds = %316
  %321 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 1
  %322 = load %struct.VmaListItem*, %struct.VmaListItem** %23, align 8
  %323 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %322, i64 0, i32 2, i32 1
  %324 = load i64, i64* %323, align 8
  %325 = icmp ult i64 %312, %324
  br i1 %325, label %344, label %326

326:                                              ; preds = %320
  %327 = icmp eq %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %321, %8
  br i1 %327, label %488, label %328

328:                                              ; preds = %326, %341
  %329 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %342, %341 ], [ %321, %326 ]
  %330 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %329, i64 0, i32 1
  %331 = load %struct.VmaListItem*, %struct.VmaListItem** %330, align 8
  %332 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %331, i64 0, i32 2, i32 1
  %333 = load i64, i64* %332, align 8
  %334 = icmp ult i64 %312, %333
  br i1 %334, label %335, label %341

335:                                              ; preds = %328
  %336 = ptrtoint %struct.VmaListItem* %331 to i64
  %337 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %329 to i64*
  %338 = load i64, i64* %337, align 8
  %339 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %329 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %339, i8* align 8 %24, i64 16, i1 false) #15
  store i64 %338, i64* %25, align 8
  store i64 %336, i64* %26, align 8
  %340 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %329, i64 1
  br label %344

341:                                              ; preds = %328
  %342 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %329, i64 1
  %343 = icmp eq %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %342, %8
  br i1 %343, label %488, label %328

344:                                              ; preds = %335, %320
  %345 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %321, %320 ], [ %340, %335 ]
  %346 = icmp eq %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %345, %8
  br i1 %346, label %488, label %347

347:                                              ; preds = %344, %373
  %348 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %365, %373 ], [ %8, %344 ]
  %349 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %360, %373 ], [ %345, %344 ]
  %350 = load %struct.VmaListItem*, %struct.VmaListItem** %307, align 8
  %351 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %350, i64 0, i32 2, i32 1
  %352 = load i64, i64* %351, align 8
  br label %353

353:                                              ; preds = %353, %347
  %354 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %349, %347 ], [ %360, %353 ]
  %355 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %354, i64 0, i32 1
  %356 = load %struct.VmaListItem*, %struct.VmaListItem** %355, align 8
  %357 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %356, i64 0, i32 2, i32 1
  %358 = load i64, i64* %357, align 8
  %359 = icmp ult i64 %352, %358
  %360 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %354, i64 1
  br i1 %359, label %361, label %353

361:                                              ; preds = %353
  %362 = ptrtoint %struct.VmaListItem* %356 to i64
  br label %363

363:                                              ; preds = %361, %363
  %364 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %365, %363 ], [ %348, %361 ]
  %365 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %364, i64 -1
  %366 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %364, i64 -1, i32 1
  %367 = load %struct.VmaListItem*, %struct.VmaListItem** %366, align 8
  %368 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %367, i64 0, i32 2, i32 1
  %369 = load i64, i64* %368, align 8
  %370 = icmp ult i64 %352, %369
  br i1 %370, label %363, label %371

371:                                              ; preds = %363
  %372 = icmp ult %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %354, %365
  br i1 %372, label %373, label %30

373:                                              ; preds = %371
  %374 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %364, i64 -1, i32 1
  %375 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %354 to i64*
  %376 = load i64, i64* %375, align 8
  %377 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %354 to i8*
  %378 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %365 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %377, i8* align 8 %378, i64 16, i1 false) #15
  %379 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %365 to i64*
  store i64 %376, i64* %379, align 8
  %380 = bitcast %struct.VmaListItem** %374 to i64*
  store i64 %362, i64* %380, align 8
  br label %347

381:                                              ; preds = %316
  %382 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %317, i64 -1, i32 1
  %383 = load %struct.VmaListItem*, %struct.VmaListItem** %382, align 8
  %384 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %383, i64 0, i32 2, i32 1
  %385 = load i64, i64* %384, align 8
  %386 = icmp ult i64 %385, %314
  br i1 %386, label %387, label %316

387:                                              ; preds = %381
  %388 = ptrtoint %struct.VmaListItem* %308 to i64
  %389 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %317, i64 -1, i32 1
  %390 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31 to i64*
  %391 = load i64, i64* %390, align 8
  %392 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31 to i8*
  %393 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %318 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %392, i8* align 8 %393, i64 16, i1 false) #15
  %394 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %318 to i64*
  store i64 %391, i64* %394, align 8
  %395 = bitcast %struct.VmaListItem** %389 to i64*
  store i64 %388, i64* %395, align 8
  %396 = add i32 %306, 1
  br label %397

397:                                              ; preds = %305, %387
  %398 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %318, %387 ], [ %8, %305 ]
  %399 = phi i32 [ %396, %387 ], [ %306, %305 ]
  %400 = ptrtoint %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31 to i64
  %401 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, i64 1
  %402 = icmp ult %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %401, %398
  br i1 %402, label %403, label %443

403:                                              ; preds = %397, %432
  %404 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %424, %432 ], [ %398, %397 ]
  %405 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %419, %432 ], [ %401, %397 ]
  %406 = phi i32 [ %440, %432 ], [ %399, %397 ]
  %407 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %442, %432 ], [ %191, %397 ]
  %408 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %407, i64 0, i32 1
  %409 = load %struct.VmaListItem*, %struct.VmaListItem** %408, align 8
  %410 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %409, i64 0, i32 2, i32 1
  %411 = load i64, i64* %410, align 8
  br label %412

412:                                              ; preds = %412, %403
  %413 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %405, %403 ], [ %419, %412 ]
  %414 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %413, i64 0, i32 1
  %415 = load %struct.VmaListItem*, %struct.VmaListItem** %414, align 8
  %416 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %415, i64 0, i32 2, i32 1
  %417 = load i64, i64* %416, align 8
  %418 = icmp ult i64 %417, %411
  %419 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %413, i64 1
  br i1 %418, label %412, label %420

420:                                              ; preds = %412
  %421 = ptrtoint %struct.VmaListItem* %415 to i64
  br label %422

422:                                              ; preds = %420, %422
  %423 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %424, %422 ], [ %404, %420 ]
  %424 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %423, i64 -1
  %425 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %423, i64 -1, i32 1
  %426 = load %struct.VmaListItem*, %struct.VmaListItem** %425, align 8
  %427 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %426, i64 0, i32 2, i32 1
  %428 = load i64, i64* %427, align 8
  %429 = icmp ult i64 %428, %411
  br i1 %429, label %430, label %422

430:                                              ; preds = %422
  %431 = icmp ugt %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %413, %424
  br i1 %431, label %443, label %432

432:                                              ; preds = %430
  %433 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %423, i64 -1, i32 1
  %434 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %413 to i64*
  %435 = load i64, i64* %434, align 8
  %436 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %413 to i8*
  %437 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %424 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %436, i8* align 8 %437, i64 16, i1 false) #15
  %438 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %424 to i64*
  store i64 %435, i64* %438, align 8
  %439 = bitcast %struct.VmaListItem** %433 to i64*
  store i64 %421, i64* %439, align 8
  %440 = add i32 %406, 1
  %441 = icmp eq %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %407, %413
  %442 = select i1 %441, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %424, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %407
  br label %403

443:                                              ; preds = %430, %397
  %444 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %401, %397 ], [ %413, %430 ]
  %445 = phi i32 [ %399, %397 ], [ %406, %430 ]
  %446 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %191, %397 ], [ %407, %430 ]
  %447 = icmp eq %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %444, %446
  br i1 %447, label %467, label %448

448:                                              ; preds = %443
  %449 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %446, i64 0, i32 1
  %450 = load %struct.VmaListItem*, %struct.VmaListItem** %449, align 8
  %451 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %444, i64 0, i32 1
  %452 = load %struct.VmaListItem*, %struct.VmaListItem** %451, align 8
  %453 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %450, i64 0, i32 2, i32 1
  %454 = load i64, i64* %453, align 8
  %455 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %452, i64 0, i32 2, i32 1
  %456 = load i64, i64* %455, align 8
  %457 = icmp ult i64 %454, %456
  br i1 %457, label %458, label %467

458:                                              ; preds = %448
  %459 = ptrtoint %struct.VmaListItem* %452 to i64
  %460 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %444 to i64*
  %461 = load i64, i64* %460, align 8
  %462 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %444 to i8*
  %463 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %446 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %462, i8* align 8 %463, i64 16, i1 false) #15
  %464 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %446 to i64*
  store i64 %461, i64* %464, align 8
  %465 = bitcast %struct.VmaListItem** %449 to i64*
  store i64 %459, i64* %465, align 8
  %466 = add i32 %445, 1
  br label %467

467:                                              ; preds = %443, %458, %448
  %468 = phi i32 [ %466, %458 ], [ %445, %448 ], [ %445, %443 ]
  %469 = icmp eq i32 %468, 0
  br i1 %469, label %470, label %477

470:                                              ; preds = %467
  %471 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIR28VmaSuballocationItemSizeLessPN7VmaListI16VmaSuballocation15VmaStlAllocatorIS4_EE8iteratorEEEbT0_SA_T_(%"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %444, %struct.VmaSuballocationItemSizeLess* dereferenceable(1) %2)
  %472 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %444, i64 1
  %473 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIR28VmaSuballocationItemSizeLessPN7VmaListI16VmaSuballocation15VmaStlAllocatorIS4_EE8iteratorEEEbT0_SA_T_(%"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %472, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %5, %struct.VmaSuballocationItemSizeLess* dereferenceable(1) %2)
  br i1 %473, label %474, label %476

474:                                              ; preds = %470
  br i1 %471, label %488, label %475

475:                                              ; preds = %474, %486
  br label %4

476:                                              ; preds = %470
  br i1 %471, label %484, label %477

477:                                              ; preds = %476, %467
  %478 = ptrtoint %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %444 to i64
  %479 = sub i64 %478, %400
  %480 = sub i64 %27, %478
  %481 = icmp slt i64 %479, %480
  br i1 %481, label %482, label %486

482:                                              ; preds = %477
  tail call void @_ZNSt3__16__sortIR28VmaSuballocationItemSizeLessPN7VmaListI16VmaSuballocation15VmaStlAllocatorIS4_EE8iteratorEEEvT0_SA_T_(%"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %31, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %444, %struct.VmaSuballocationItemSizeLess* dereferenceable(1) %2)
  %483 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %444, i64 1
  br label %484

484:                                              ; preds = %482, %476
  %485 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %472, %476 ], [ %483, %482 ]
  br label %28

486:                                              ; preds = %477
  %487 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %444, i64 1
  tail call void @_ZNSt3__16__sortIR28VmaSuballocationItemSizeLessPN7VmaListI16VmaSuballocation15VmaStlAllocatorIS4_EE8iteratorEEEvT0_SA_T_(%"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %487, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %5, %struct.VmaSuballocationItemSizeLess* dereferenceable(1) %2)
  br label %475

488:                                              ; preds = %474, %344, %30, %30, %326, %341, %179, %165, %151, %135, %120, %111, %102, %98, %88, %74, %73, %35, %46, %115, %187
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort4IR28VmaSuballocationItemSizeLessPN7VmaListI16VmaSuballocation15VmaStlAllocatorIS4_EE8iteratorEEEjT0_SA_SA_SA_T_(%"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %struct.VmaSuballocationItemSizeLess* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %6 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %1, i64 0, i32 1
  %7 = load %struct.VmaListItem*, %struct.VmaListItem** %6, align 8
  %8 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 0, i32 1
  %9 = load %struct.VmaListItem*, %struct.VmaListItem** %8, align 8
  %10 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %7, i64 0, i32 2, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %9, i64 0, i32 2, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = icmp ult i64 %11, %13
  %15 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %2, i64 0, i32 1
  %16 = load %struct.VmaListItem*, %struct.VmaListItem** %15, align 8
  %17 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %16, i64 0, i32 2, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = icmp ult i64 %18, %11
  %20 = ptrtoint %struct.VmaListItem* %7 to i64
  %21 = ptrtoint %struct.VmaListItem* %9 to i64
  br i1 %14, label %46, label %22

22:                                               ; preds = %5
  %23 = ptrtoint %struct.VmaListItem* %16 to i64
  br i1 %19, label %24, label %68

24:                                               ; preds = %22
  %25 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %1 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %1 to i8*
  %28 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 16, i1 false) #15
  %29 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %2 to i64*
  store i64 %26, i64* %29, align 8
  %30 = bitcast %struct.VmaListItem** %15 to i64*
  store i64 %20, i64* %30, align 8
  %31 = load %struct.VmaListItem*, %struct.VmaListItem** %6, align 8
  %32 = load %struct.VmaListItem*, %struct.VmaListItem** %8, align 8
  %33 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %31, i64 0, i32 2, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %32, i64 0, i32 2, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = icmp ult i64 %34, %36
  br i1 %37, label %38, label %68

38:                                               ; preds = %24
  %39 = ptrtoint %struct.VmaListItem* %32 to i64
  %40 = bitcast %struct.VmaListItem** %6 to i64*
  %41 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %27, i64 16, i1 false) #15
  store i64 %42, i64* %25, align 8
  store i64 %39, i64* %40, align 8
  %44 = load %struct.VmaListItem*, %struct.VmaListItem** %15, align 8
  %45 = ptrtoint %struct.VmaListItem* %44 to i64
  br label %68

46:                                               ; preds = %5
  %47 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0 to i8*
  br i1 %19, label %50, label %54

50:                                               ; preds = %46
  %51 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %49, i8* align 8 %51, i64 16, i1 false) #15
  %52 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %2 to i64*
  store i64 %48, i64* %52, align 8
  %53 = bitcast %struct.VmaListItem** %15 to i64*
  store i64 %21, i64* %53, align 8
  br label %68

54:                                               ; preds = %46
  %55 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %49, i8* align 8 %55, i64 16, i1 false) #15
  %56 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %1 to i64*
  store i64 %48, i64* %56, align 8
  %57 = bitcast %struct.VmaListItem** %6 to i64*
  store i64 %21, i64* %57, align 8
  %58 = load %struct.VmaListItem*, %struct.VmaListItem** %15, align 8
  %59 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %58, i64 0, i32 2, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = load i64, i64* %12, align 8
  %62 = icmp ult i64 %60, %61
  %63 = ptrtoint %struct.VmaListItem* %58 to i64
  br i1 %62, label %64, label %68

64:                                               ; preds = %54
  %65 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %55, i8* align 8 %65, i64 16, i1 false) #15
  %66 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %2 to i64*
  store i64 %48, i64* %66, align 8
  %67 = bitcast %struct.VmaListItem** %15 to i64*
  store i64 %21, i64* %67, align 8
  br label %68

68:                                               ; preds = %22, %24, %38, %50, %54, %64
  %69 = phi i64 [ %21, %50 ], [ %23, %22 ], [ %45, %38 ], [ %20, %24 ], [ %21, %64 ], [ %63, %54 ]
  %70 = phi %struct.VmaListItem* [ %9, %50 ], [ %16, %22 ], [ %44, %38 ], [ %7, %24 ], [ %9, %64 ], [ %58, %54 ]
  %71 = phi i32 [ 1, %50 ], [ 0, %22 ], [ 2, %38 ], [ 1, %24 ], [ 2, %64 ], [ 1, %54 ]
  %72 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %3, i64 0, i32 1
  %73 = load %struct.VmaListItem*, %struct.VmaListItem** %72, align 8
  %74 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %73, i64 0, i32 2, i32 1
  %75 = load i64, i64* %74, align 8
  %76 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %70, i64 0, i32 2, i32 1
  %77 = load i64, i64* %76, align 8
  %78 = icmp ult i64 %75, %77
  br i1 %78, label %79, label %115

79:                                               ; preds = %68
  %80 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %2 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %2 to i8*
  %83 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %83, i64 16, i1 false) #15
  %84 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %3 to i64*
  store i64 %81, i64* %84, align 8
  %85 = bitcast %struct.VmaListItem** %72 to i64*
  store i64 %69, i64* %85, align 8
  %86 = add nuw nsw i32 %71, 1
  %87 = load %struct.VmaListItem*, %struct.VmaListItem** %15, align 8
  %88 = load %struct.VmaListItem*, %struct.VmaListItem** %6, align 8
  %89 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %87, i64 0, i32 2, i32 1
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %88, i64 0, i32 2, i32 1
  %92 = load i64, i64* %91, align 8
  %93 = icmp ult i64 %90, %92
  br i1 %93, label %94, label %115

94:                                               ; preds = %79
  %95 = ptrtoint %struct.VmaListItem* %88 to i64
  %96 = bitcast %struct.VmaListItem** %15 to i64*
  %97 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %1 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %82, i64 16, i1 false) #15
  store i64 %98, i64* %80, align 8
  store i64 %95, i64* %96, align 8
  %100 = add nuw nsw i32 %71, 2
  %101 = load %struct.VmaListItem*, %struct.VmaListItem** %6, align 8
  %102 = load %struct.VmaListItem*, %struct.VmaListItem** %8, align 8
  %103 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %101, i64 0, i32 2, i32 1
  %104 = load i64, i64* %103, align 8
  %105 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %102, i64 0, i32 2, i32 1
  %106 = load i64, i64* %105, align 8
  %107 = icmp ult i64 %104, %106
  br i1 %107, label %108, label %115

108:                                              ; preds = %94
  %109 = ptrtoint %struct.VmaListItem* %102 to i64
  %110 = bitcast %struct.VmaListItem** %6 to i64*
  %111 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0 to i64*
  %112 = load i64, i64* %111, align 8
  %113 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %113, i8* align 8 %99, i64 16, i1 false) #15
  store i64 %112, i64* %97, align 8
  store i64 %109, i64* %110, align 8
  %114 = add nuw nsw i32 %71, 3
  br label %115

115:                                              ; preds = %79, %108, %94, %68
  %116 = phi i32 [ %114, %108 ], [ %100, %94 ], [ %86, %79 ], [ %71, %68 ]
  ret i32 %116
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__118__insertion_sort_3IR28VmaSuballocationItemSizeLessPN7VmaListI16VmaSuballocation15VmaStlAllocatorIS4_EE8iteratorEEEvT0_SA_T_(%"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %struct.VmaSuballocationItemSizeLess* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %4 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 2
  %5 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 1
  %6 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 1, i32 1
  %7 = load %struct.VmaListItem*, %struct.VmaListItem** %6, align 8
  %8 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 0, i32 1
  %9 = load %struct.VmaListItem*, %struct.VmaListItem** %8, align 8
  %10 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %7, i64 0, i32 2, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %9, i64 0, i32 2, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = icmp ult i64 %11, %13
  %15 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 2, i32 1
  %16 = load %struct.VmaListItem*, %struct.VmaListItem** %15, align 8
  %17 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %16, i64 0, i32 2, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = icmp ult i64 %18, %11
  %20 = ptrtoint %struct.VmaListItem* %7 to i64
  %21 = ptrtoint %struct.VmaListItem* %9 to i64
  br i1 %14, label %40, label %22

22:                                               ; preds = %3
  br i1 %19, label %23, label %59

23:                                               ; preds = %22
  %24 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %5 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %5 to i8*
  %27 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 16, i1 false) #15
  %28 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %4 to i64*
  store i64 %25, i64* %28, align 8
  %29 = bitcast %struct.VmaListItem** %15 to i64*
  store i64 %20, i64* %29, align 8
  %30 = load %struct.VmaListItem*, %struct.VmaListItem** %6, align 8
  %31 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %30, i64 0, i32 2, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = load i64, i64* %12, align 8
  %34 = icmp ult i64 %32, %33
  br i1 %34, label %35, label %59

35:                                               ; preds = %23
  %36 = bitcast %struct.VmaListItem** %6 to i64*
  %37 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %26, i64 16, i1 false) #15
  store i64 %38, i64* %24, align 8
  store i64 %21, i64* %36, align 8
  br label %59

40:                                               ; preds = %3
  %41 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0 to i8*
  br i1 %19, label %44, label %48

44:                                               ; preds = %40
  %45 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %45, i64 16, i1 false) #15
  %46 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %4 to i64*
  store i64 %42, i64* %46, align 8
  %47 = bitcast %struct.VmaListItem** %15 to i64*
  store i64 %21, i64* %47, align 8
  br label %59

48:                                               ; preds = %40
  %49 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %49, i64 16, i1 false) #15
  %50 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %5 to i64*
  store i64 %42, i64* %50, align 8
  %51 = bitcast %struct.VmaListItem** %6 to i64*
  store i64 %21, i64* %51, align 8
  %52 = load i64, i64* %17, align 8
  %53 = load i64, i64* %12, align 8
  %54 = icmp ult i64 %52, %53
  br i1 %54, label %55, label %59

55:                                               ; preds = %48
  %56 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %49, i8* align 8 %56, i64 16, i1 false) #15
  %57 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %4 to i64*
  store i64 %42, i64* %57, align 8
  %58 = bitcast %struct.VmaListItem** %15 to i64*
  store i64 %21, i64* %58, align 8
  br label %59

59:                                               ; preds = %22, %23, %35, %44, %48, %55
  %60 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 3
  %61 = icmp eq %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %60, %1
  br i1 %61, label %62, label %63

62:                                               ; preds = %96, %59
  ret void

63:                                               ; preds = %59, %96
  %64 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %65, %96 ], [ %4, %59 ]
  %65 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %97, %96 ], [ %60, %59 ]
  %66 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %65, i64 0, i32 1
  %67 = load %struct.VmaListItem*, %struct.VmaListItem** %66, align 8
  %68 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %64, i64 0, i32 1
  %69 = load %struct.VmaListItem*, %struct.VmaListItem** %68, align 8
  %70 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %67, i64 0, i32 2, i32 1
  %71 = load i64, i64* %70, align 8
  %72 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %69, i64 0, i32 2, i32 1
  %73 = load i64, i64* %72, align 8
  %74 = icmp ult i64 %71, %73
  br i1 %74, label %75, label %96

75:                                               ; preds = %63
  %76 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %65 to i64*
  %77 = load i64, i64* %76, align 8
  br label %78

78:                                               ; preds = %84, %75
  %79 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %64, %75 ], [ %85, %84 ]
  %80 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %65, %75 ], [ %79, %84 ]
  %81 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %80 to i8*
  %82 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %79 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %81, i8* align 8 %82, i64 16, i1 false)
  %83 = icmp eq %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %79, %0
  br i1 %83, label %92, label %84

84:                                               ; preds = %78
  %85 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %79, i64 -1
  %86 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %79, i64 -1, i32 1
  %87 = load %struct.VmaListItem*, %struct.VmaListItem** %86, align 8
  %88 = load i64, i64* %70, align 8
  %89 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %87, i64 0, i32 2, i32 1
  %90 = load i64, i64* %89, align 8
  %91 = icmp ult i64 %88, %90
  br i1 %91, label %78, label %92

92:                                               ; preds = %78, %84
  %93 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %0, %78 ], [ %79, %84 ]
  %94 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %93 to i64*
  store i64 %77, i64* %94, align 8
  %95 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %93, i64 0, i32 1
  store %struct.VmaListItem* %67, %struct.VmaListItem** %95, align 8
  br label %96

96:                                               ; preds = %92, %63
  %97 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %65, i64 1
  %98 = icmp eq %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %97, %1
  br i1 %98, label %62, label %63
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIR28VmaSuballocationItemSizeLessPN7VmaListI16VmaSuballocation15VmaStlAllocatorIS4_EE8iteratorEEEbT0_SA_T_(%"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"*, %struct.VmaSuballocationItemSizeLess* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %4 = ptrtoint %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %1 to i64
  %5 = ptrtoint %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 4
  switch i64 %7, label %158 [
    i64 0, label %260
    i64 1, label %260
    i64 2, label %8
    i64 3, label %27
    i64 4, label %88
    i64 5, label %93
  ]

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %1, i64 -1, i32 1
  %10 = load %struct.VmaListItem*, %struct.VmaListItem** %9, align 8
  %11 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 0, i32 1
  %12 = load %struct.VmaListItem*, %struct.VmaListItem** %11, align 8
  %13 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %10, i64 0, i32 2, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %12, i64 0, i32 2, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ult i64 %14, %16
  br i1 %17, label %18, label %260

18:                                               ; preds = %8
  %19 = ptrtoint %struct.VmaListItem* %12 to i64
  %20 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %1, i64 -1
  %21 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0 to i8*
  %24 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 16, i1 false) #15
  %25 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %20 to i64*
  store i64 %22, i64* %25, align 8
  %26 = bitcast %struct.VmaListItem** %9 to i64*
  store i64 %19, i64* %26, align 8
  br label %260

27:                                               ; preds = %3
  %28 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 1
  %29 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %1, i64 -1
  %30 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 1, i32 1
  %31 = load %struct.VmaListItem*, %struct.VmaListItem** %30, align 8
  %32 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 0, i32 1
  %33 = load %struct.VmaListItem*, %struct.VmaListItem** %32, align 8
  %34 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %31, i64 0, i32 2, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %33, i64 0, i32 2, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = icmp ult i64 %35, %37
  %39 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %1, i64 -1, i32 1
  %40 = load %struct.VmaListItem*, %struct.VmaListItem** %39, align 8
  %41 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %40, i64 0, i32 2, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = icmp ult i64 %42, %35
  %44 = ptrtoint %struct.VmaListItem* %31 to i64
  %45 = ptrtoint %struct.VmaListItem* %33 to i64
  br i1 %38, label %67, label %46

46:                                               ; preds = %27
  br i1 %43, label %47, label %260

47:                                               ; preds = %46
  %48 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %28 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %28 to i8*
  %51 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %29 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 16, i1 false) #15
  %52 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %29 to i64*
  store i64 %49, i64* %52, align 8
  %53 = bitcast %struct.VmaListItem** %39 to i64*
  store i64 %44, i64* %53, align 8
  %54 = load %struct.VmaListItem*, %struct.VmaListItem** %30, align 8
  %55 = load %struct.VmaListItem*, %struct.VmaListItem** %32, align 8
  %56 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %54, i64 0, i32 2, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %55, i64 0, i32 2, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = icmp ult i64 %57, %59
  br i1 %60, label %61, label %260

61:                                               ; preds = %47
  %62 = ptrtoint %struct.VmaListItem* %55 to i64
  %63 = bitcast %struct.VmaListItem** %30 to i64*
  %64 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %50, i64 16, i1 false) #15
  store i64 %65, i64* %48, align 8
  store i64 %62, i64* %63, align 8
  br label %260

67:                                               ; preds = %27
  %68 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0 to i8*
  br i1 %43, label %71, label %75

71:                                               ; preds = %67
  %72 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %29 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %70, i8* align 8 %72, i64 16, i1 false) #15
  %73 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %29 to i64*
  store i64 %69, i64* %73, align 8
  %74 = bitcast %struct.VmaListItem** %39 to i64*
  store i64 %45, i64* %74, align 8
  br label %260

75:                                               ; preds = %67
  %76 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %70, i8* align 8 %76, i64 16, i1 false) #15
  %77 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %28 to i64*
  store i64 %69, i64* %77, align 8
  %78 = bitcast %struct.VmaListItem** %30 to i64*
  store i64 %45, i64* %78, align 8
  %79 = load %struct.VmaListItem*, %struct.VmaListItem** %39, align 8
  %80 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %79, i64 0, i32 2, i32 1
  %81 = load i64, i64* %80, align 8
  %82 = load i64, i64* %36, align 8
  %83 = icmp ult i64 %81, %82
  br i1 %83, label %84, label %260

84:                                               ; preds = %75
  %85 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %29 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %85, i64 16, i1 false) #15
  %86 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %29 to i64*
  store i64 %69, i64* %86, align 8
  %87 = bitcast %struct.VmaListItem** %39 to i64*
  store i64 %45, i64* %87, align 8
  br label %260

88:                                               ; preds = %3
  %89 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 1
  %90 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 2
  %91 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %1, i64 -1
  %92 = tail call i32 @_ZNSt3__17__sort4IR28VmaSuballocationItemSizeLessPN7VmaListI16VmaSuballocation15VmaStlAllocatorIS4_EE8iteratorEEEjT0_SA_SA_SA_T_(%"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %89, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %90, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %91, %struct.VmaSuballocationItemSizeLess* dereferenceable(1) %2)
  br label %260

93:                                               ; preds = %3
  %94 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 1
  %95 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 2
  %96 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 3
  %97 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %1, i64 -1
  %98 = tail call i32 @_ZNSt3__17__sort4IR28VmaSuballocationItemSizeLessPN7VmaListI16VmaSuballocation15VmaStlAllocatorIS4_EE8iteratorEEEjT0_SA_SA_SA_T_(%"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %94, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %95, %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %96, %struct.VmaSuballocationItemSizeLess* dereferenceable(1) %2) #15
  %99 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %1, i64 -1, i32 1
  %100 = load %struct.VmaListItem*, %struct.VmaListItem** %99, align 8
  %101 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 3, i32 1
  %102 = load %struct.VmaListItem*, %struct.VmaListItem** %101, align 8
  %103 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %100, i64 0, i32 2, i32 1
  %104 = load i64, i64* %103, align 8
  %105 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %102, i64 0, i32 2, i32 1
  %106 = load i64, i64* %105, align 8
  %107 = icmp ult i64 %104, %106
  br i1 %107, label %108, label %260

108:                                              ; preds = %93
  %109 = ptrtoint %struct.VmaListItem* %102 to i64
  %110 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %96 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %96 to i8*
  %113 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %97 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %112, i8* align 8 %113, i64 16, i1 false) #15
  %114 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %97 to i64*
  store i64 %111, i64* %114, align 8
  %115 = bitcast %struct.VmaListItem** %99 to i64*
  store i64 %109, i64* %115, align 8
  %116 = load %struct.VmaListItem*, %struct.VmaListItem** %101, align 8
  %117 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 2, i32 1
  %118 = load %struct.VmaListItem*, %struct.VmaListItem** %117, align 8
  %119 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %116, i64 0, i32 2, i32 1
  %120 = load i64, i64* %119, align 8
  %121 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %118, i64 0, i32 2, i32 1
  %122 = load i64, i64* %121, align 8
  %123 = icmp ult i64 %120, %122
  br i1 %123, label %124, label %260

124:                                              ; preds = %108
  %125 = ptrtoint %struct.VmaListItem* %118 to i64
  %126 = bitcast %struct.VmaListItem** %101 to i64*
  %127 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %95 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %95 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %129, i8* align 8 %112, i64 16, i1 false) #15
  store i64 %128, i64* %110, align 8
  store i64 %125, i64* %126, align 8
  %130 = load %struct.VmaListItem*, %struct.VmaListItem** %117, align 8
  %131 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 1, i32 1
  %132 = load %struct.VmaListItem*, %struct.VmaListItem** %131, align 8
  %133 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %130, i64 0, i32 2, i32 1
  %134 = load i64, i64* %133, align 8
  %135 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %132, i64 0, i32 2, i32 1
  %136 = load i64, i64* %135, align 8
  %137 = icmp ult i64 %134, %136
  br i1 %137, label %138, label %260

138:                                              ; preds = %124
  %139 = ptrtoint %struct.VmaListItem* %132 to i64
  %140 = bitcast %struct.VmaListItem** %117 to i64*
  %141 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %94 to i64*
  %142 = load i64, i64* %141, align 8
  %143 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %94 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %143, i8* align 8 %129, i64 16, i1 false) #15
  store i64 %142, i64* %127, align 8
  store i64 %139, i64* %140, align 8
  %144 = load %struct.VmaListItem*, %struct.VmaListItem** %131, align 8
  %145 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 0, i32 1
  %146 = load %struct.VmaListItem*, %struct.VmaListItem** %145, align 8
  %147 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %144, i64 0, i32 2, i32 1
  %148 = load i64, i64* %147, align 8
  %149 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %146, i64 0, i32 2, i32 1
  %150 = load i64, i64* %149, align 8
  %151 = icmp ult i64 %148, %150
  br i1 %151, label %152, label %260

152:                                              ; preds = %138
  %153 = ptrtoint %struct.VmaListItem* %146 to i64
  %154 = bitcast %struct.VmaListItem** %131 to i64*
  %155 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0 to i64*
  %156 = load i64, i64* %155, align 8
  %157 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %157, i8* align 8 %143, i64 16, i1 false) #15
  store i64 %156, i64* %141, align 8
  store i64 %153, i64* %154, align 8
  br label %260

158:                                              ; preds = %3
  %159 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 2
  %160 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 1
  %161 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 1, i32 1
  %162 = load %struct.VmaListItem*, %struct.VmaListItem** %161, align 8
  %163 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 0, i32 1
  %164 = load %struct.VmaListItem*, %struct.VmaListItem** %163, align 8
  %165 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %162, i64 0, i32 2, i32 1
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %164, i64 0, i32 2, i32 1
  %168 = load i64, i64* %167, align 8
  %169 = icmp ult i64 %166, %168
  %170 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 2, i32 1
  %171 = load %struct.VmaListItem*, %struct.VmaListItem** %170, align 8
  %172 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %171, i64 0, i32 2, i32 1
  %173 = load i64, i64* %172, align 8
  %174 = icmp ult i64 %173, %166
  %175 = ptrtoint %struct.VmaListItem* %162 to i64
  %176 = ptrtoint %struct.VmaListItem* %164 to i64
  br i1 %169, label %195, label %177

177:                                              ; preds = %158
  br i1 %174, label %178, label %214

178:                                              ; preds = %177
  %179 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %160 to i64*
  %180 = load i64, i64* %179, align 8
  %181 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %160 to i8*
  %182 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %159 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %181, i8* align 8 %182, i64 16, i1 false) #15
  %183 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %159 to i64*
  store i64 %180, i64* %183, align 8
  %184 = bitcast %struct.VmaListItem** %170 to i64*
  store i64 %175, i64* %184, align 8
  %185 = load %struct.VmaListItem*, %struct.VmaListItem** %161, align 8
  %186 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %185, i64 0, i32 2, i32 1
  %187 = load i64, i64* %186, align 8
  %188 = load i64, i64* %167, align 8
  %189 = icmp ult i64 %187, %188
  br i1 %189, label %190, label %214

190:                                              ; preds = %178
  %191 = bitcast %struct.VmaListItem** %161 to i64*
  %192 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0 to i64*
  %193 = load i64, i64* %192, align 8
  %194 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %194, i8* align 8 %181, i64 16, i1 false) #15
  store i64 %193, i64* %179, align 8
  store i64 %176, i64* %191, align 8
  br label %214

195:                                              ; preds = %158
  %196 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0 to i64*
  %197 = load i64, i64* %196, align 8
  %198 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0 to i8*
  br i1 %174, label %199, label %203

199:                                              ; preds = %195
  %200 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %159 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %198, i8* align 8 %200, i64 16, i1 false) #15
  %201 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %159 to i64*
  store i64 %197, i64* %201, align 8
  %202 = bitcast %struct.VmaListItem** %170 to i64*
  store i64 %176, i64* %202, align 8
  br label %214

203:                                              ; preds = %195
  %204 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %160 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %198, i8* align 8 %204, i64 16, i1 false) #15
  %205 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %160 to i64*
  store i64 %197, i64* %205, align 8
  %206 = bitcast %struct.VmaListItem** %161 to i64*
  store i64 %176, i64* %206, align 8
  %207 = load i64, i64* %172, align 8
  %208 = load i64, i64* %167, align 8
  %209 = icmp ult i64 %207, %208
  br i1 %209, label %210, label %214

210:                                              ; preds = %203
  %211 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %159 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %204, i8* align 8 %211, i64 16, i1 false) #15
  %212 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %159 to i64*
  store i64 %197, i64* %212, align 8
  %213 = bitcast %struct.VmaListItem** %170 to i64*
  store i64 %176, i64* %213, align 8
  br label %214

214:                                              ; preds = %177, %178, %190, %199, %203, %210
  %215 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %0, i64 3
  %216 = icmp eq %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %215, %1
  br i1 %216, label %260, label %217

217:                                              ; preds = %214, %253
  %218 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %220, %253 ], [ %159, %214 ]
  %219 = phi i32 [ %254, %253 ], [ 0, %214 ]
  %220 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %255, %253 ], [ %215, %214 ]
  %221 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %220, i64 0, i32 1
  %222 = load %struct.VmaListItem*, %struct.VmaListItem** %221, align 8
  %223 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %218, i64 0, i32 1
  %224 = load %struct.VmaListItem*, %struct.VmaListItem** %223, align 8
  %225 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %222, i64 0, i32 2, i32 1
  %226 = load i64, i64* %225, align 8
  %227 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %224, i64 0, i32 2, i32 1
  %228 = load i64, i64* %227, align 8
  %229 = icmp ult i64 %226, %228
  br i1 %229, label %230, label %253

230:                                              ; preds = %217
  %231 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %220 to i64*
  %232 = load i64, i64* %231, align 8
  br label %233

233:                                              ; preds = %239, %230
  %234 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %218, %230 ], [ %240, %239 ]
  %235 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %220, %230 ], [ %234, %239 ]
  %236 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %235 to i8*
  %237 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %234 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %236, i8* align 8 %237, i64 16, i1 false)
  %238 = icmp eq %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %234, %0
  br i1 %238, label %247, label %239

239:                                              ; preds = %233
  %240 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %234, i64 -1
  %241 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %234, i64 -1, i32 1
  %242 = load %struct.VmaListItem*, %struct.VmaListItem** %241, align 8
  %243 = load i64, i64* %225, align 8
  %244 = getelementptr inbounds %struct.VmaListItem, %struct.VmaListItem* %242, i64 0, i32 2, i32 1
  %245 = load i64, i64* %244, align 8
  %246 = icmp ult i64 %243, %245
  br i1 %246, label %233, label %247

247:                                              ; preds = %233, %239
  %248 = phi %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* [ %0, %233 ], [ %234, %239 ]
  %249 = bitcast %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %248 to i64*
  store i64 %232, i64* %249, align 8
  %250 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %248, i64 0, i32 1
  store %struct.VmaListItem* %222, %struct.VmaListItem** %250, align 8
  %251 = add i32 %219, 1
  %252 = icmp eq i32 %251, 8
  br i1 %252, label %257, label %253

253:                                              ; preds = %247, %217
  %254 = phi i32 [ %251, %247 ], [ %219, %217 ]
  %255 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %220, i64 1
  %256 = icmp eq %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %255, %1
  br i1 %256, label %260, label %217

257:                                              ; preds = %247
  %258 = getelementptr inbounds %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator", %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %220, i64 1
  %259 = icmp eq %"class.VmaList<VmaSuballocation, VmaStlAllocator<VmaSuballocation> >::iterator"* %258, %1
  br label %260

260:                                              ; preds = %253, %257, %214, %152, %138, %124, %108, %93, %84, %75, %71, %61, %47, %46, %8, %18, %3, %3, %88
  %261 = phi i1 [ true, %88 ], [ true, %3 ], [ true, %3 ], [ true, %18 ], [ true, %8 ], [ true, %46 ], [ true, %47 ], [ true, %61 ], [ true, %71 ], [ true, %75 ], [ true, %84 ], [ true, %93 ], [ true, %108 ], [ true, %124 ], [ true, %138 ], [ true, %152 ], [ true, %214 ], [ %259, %257 ], [ true, %253 ]
  ret i1 %261
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9VmaVectorIN36VmaBlockVectorDefragmentationContext9AllocInfoE15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.30*, i64, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.VmaVector.30, %class.VmaVector.30* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = mul i64 %5, 3
  %9 = lshr i64 %8, 1
  %10 = icmp ult i64 %8, 16
  %11 = select i1 %10, i64 8, i64 %9
  %12 = icmp ugt i64 %11, %1
  %13 = select i1 %12, i64 %11, i64 %1
  br label %16

14:                                               ; preds = %3
  %15 = select i1 %2, i64 %1, i64 %5
  br label %16

16:                                               ; preds = %14, %7
  %17 = phi i64 [ %13, %7 ], [ %15, %14 ]
  %18 = icmp eq i64 %17, %5
  br i1 %18, label %64, label %19

19:                                               ; preds = %16
  %20 = icmp eq i64 %17, 0
  br i1 %20, label %36, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %class.VmaVector.30, %class.VmaVector.30* %0, i64 0, i32 0, i32 0
  %23 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, align 8
  %24 = shl i64 %17, 4
  %25 = icmp eq %struct.VkAllocationCallbacks* %23, null
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 1
  %28 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %27, align 8
  %29 = icmp eq i8* (i8*, i64, i64, i32)* %28, null
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* %28(i8* %32, i64 %24, i64 8, i32 1) #15
  br label %36

34:                                               ; preds = %26, %21
  %35 = tail call noalias i8* @aligned_alloc(i64 8, i64 %24) #15
  br label %36

36:                                               ; preds = %34, %30, %19
  %37 = phi i8* [ null, %19 ], [ %33, %30 ], [ %35, %34 ]
  %38 = getelementptr inbounds %class.VmaVector.30, %class.VmaVector.30* %0, i64 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = icmp ugt i64 %39, %1
  %41 = select i1 %40, i64 %1, i64 %39
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %class.VmaVector.30, %class.VmaVector.30* %0, i64 0, i32 1
  %45 = bitcast %"struct.VmaBlockVectorDefragmentationContext::AllocInfo"** %44 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = shl i64 %41, 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %46, i64 %47, i1 false)
  br label %48

48:                                               ; preds = %36, %43
  %49 = getelementptr inbounds %class.VmaVector.30, %class.VmaVector.30* %0, i64 0, i32 0, i32 0
  %50 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %49, align 8
  %51 = getelementptr inbounds %class.VmaVector.30, %class.VmaVector.30* %0, i64 0, i32 1
  %52 = bitcast %"struct.VmaBlockVectorDefragmentationContext::AllocInfo"** %51 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq %struct.VkAllocationCallbacks* %50, null
  br i1 %54, label %62, label %55

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 3
  %57 = load void (i8*, i8*)*, void (i8*, i8*)** %56, align 8
  %58 = icmp eq void (i8*, i8*)* %57, null
  br i1 %58, label %62, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  tail call void %57(i8* %61, i8* %53) #15
  br label %63

62:                                               ; preds = %55, %48
  tail call void @free(i8* %53) #15
  br label %63

63:                                               ; preds = %59, %62
  store i64 %17, i64* %4, align 8
  store i8* %37, i8** %52, align 8
  br label %64

64:                                               ; preds = %16, %63
  %65 = getelementptr inbounds %class.VmaVector.30, %class.VmaVector.30* %0, i64 0, i32 2
  store i64 %1, i64* %65, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9VmaVectorIP36VmaBlockVectorDefragmentationContext15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.40*, i64, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.VmaVector.40, %class.VmaVector.40* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = mul i64 %5, 3
  %9 = lshr i64 %8, 1
  %10 = icmp ult i64 %8, 16
  %11 = select i1 %10, i64 8, i64 %9
  %12 = icmp ugt i64 %11, %1
  %13 = select i1 %12, i64 %11, i64 %1
  br label %16

14:                                               ; preds = %3
  %15 = select i1 %2, i64 %1, i64 %5
  br label %16

16:                                               ; preds = %14, %7
  %17 = phi i64 [ %13, %7 ], [ %15, %14 ]
  %18 = icmp eq i64 %17, %5
  br i1 %18, label %64, label %19

19:                                               ; preds = %16
  %20 = icmp eq i64 %17, 0
  br i1 %20, label %36, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %class.VmaVector.40, %class.VmaVector.40* %0, i64 0, i32 0, i32 0
  %23 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, align 8
  %24 = shl i64 %17, 3
  %25 = icmp eq %struct.VkAllocationCallbacks* %23, null
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 1
  %28 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %27, align 8
  %29 = icmp eq i8* (i8*, i64, i64, i32)* %28, null
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* %28(i8* %32, i64 %24, i64 8, i32 1) #15
  br label %36

34:                                               ; preds = %26, %21
  %35 = tail call noalias i8* @aligned_alloc(i64 8, i64 %24) #15
  br label %36

36:                                               ; preds = %34, %30, %19
  %37 = phi i8* [ null, %19 ], [ %33, %30 ], [ %35, %34 ]
  %38 = getelementptr inbounds %class.VmaVector.40, %class.VmaVector.40* %0, i64 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = icmp ugt i64 %39, %1
  %41 = select i1 %40, i64 %1, i64 %39
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %class.VmaVector.40, %class.VmaVector.40* %0, i64 0, i32 1
  %45 = bitcast %class.VmaBlockVectorDefragmentationContext*** %44 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = shl i64 %41, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %46, i64 %47, i1 false)
  br label %48

48:                                               ; preds = %36, %43
  %49 = getelementptr inbounds %class.VmaVector.40, %class.VmaVector.40* %0, i64 0, i32 0, i32 0
  %50 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %49, align 8
  %51 = getelementptr inbounds %class.VmaVector.40, %class.VmaVector.40* %0, i64 0, i32 1
  %52 = bitcast %class.VmaBlockVectorDefragmentationContext*** %51 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq %struct.VkAllocationCallbacks* %50, null
  br i1 %54, label %62, label %55

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 3
  %57 = load void (i8*, i8*)*, void (i8*, i8*)** %56, align 8
  %58 = icmp eq void (i8*, i8*)* %57, null
  br i1 %58, label %62, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  tail call void %57(i8* %61, i8* %53) #15
  br label %63

62:                                               ; preds = %55, %48
  tail call void @free(i8* %53) #15
  br label %63

63:                                               ; preds = %59, %62
  store i64 %17, i64* %4, align 8
  store i8* %37, i8** %52, align 8
  br label %64

64:                                               ; preds = %16, %63
  %65 = getelementptr inbounds %class.VmaVector.40, %class.VmaVector.40* %0, i64 0, i32 2
  store i64 %1, i64* %65, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9VmaVectorIP15VmaAllocation_T15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.5*, i64, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.VmaVector.5, %class.VmaVector.5* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = mul i64 %5, 3
  %9 = lshr i64 %8, 1
  %10 = icmp ult i64 %8, 16
  %11 = select i1 %10, i64 8, i64 %9
  %12 = icmp ugt i64 %11, %1
  %13 = select i1 %12, i64 %11, i64 %1
  br label %16

14:                                               ; preds = %3
  %15 = select i1 %2, i64 %1, i64 %5
  br label %16

16:                                               ; preds = %14, %7
  %17 = phi i64 [ %13, %7 ], [ %15, %14 ]
  %18 = icmp eq i64 %17, %5
  br i1 %18, label %64, label %19

19:                                               ; preds = %16
  %20 = icmp eq i64 %17, 0
  br i1 %20, label %36, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %class.VmaVector.5, %class.VmaVector.5* %0, i64 0, i32 0, i32 0
  %23 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, align 8
  %24 = shl i64 %17, 3
  %25 = icmp eq %struct.VkAllocationCallbacks* %23, null
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 1
  %28 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %27, align 8
  %29 = icmp eq i8* (i8*, i64, i64, i32)* %28, null
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* %28(i8* %32, i64 %24, i64 8, i32 1) #15
  br label %36

34:                                               ; preds = %26, %21
  %35 = tail call noalias i8* @aligned_alloc(i64 8, i64 %24) #15
  br label %36

36:                                               ; preds = %34, %30, %19
  %37 = phi i8* [ null, %19 ], [ %33, %30 ], [ %35, %34 ]
  %38 = getelementptr inbounds %class.VmaVector.5, %class.VmaVector.5* %0, i64 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = icmp ugt i64 %39, %1
  %41 = select i1 %40, i64 %1, i64 %39
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %class.VmaVector.5, %class.VmaVector.5* %0, i64 0, i32 1
  %45 = bitcast %struct.VmaAllocation_T*** %44 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = shl i64 %41, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %46, i64 %47, i1 false)
  br label %48

48:                                               ; preds = %36, %43
  %49 = getelementptr inbounds %class.VmaVector.5, %class.VmaVector.5* %0, i64 0, i32 0, i32 0
  %50 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %49, align 8
  %51 = getelementptr inbounds %class.VmaVector.5, %class.VmaVector.5* %0, i64 0, i32 1
  %52 = bitcast %struct.VmaAllocation_T*** %51 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq %struct.VkAllocationCallbacks* %50, null
  br i1 %54, label %62, label %55

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 3
  %57 = load void (i8*, i8*)*, void (i8*, i8*)** %56, align 8
  %58 = icmp eq void (i8*, i8*)* %57, null
  br i1 %58, label %62, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  tail call void %57(i8* %61, i8* %53) #15
  br label %63

62:                                               ; preds = %55, %48
  tail call void @free(i8* %53) #15
  br label %63

63:                                               ; preds = %59, %62
  store i64 %17, i64* %4, align 8
  store i8* %37, i8** %52, align 8
  br label %64

64:                                               ; preds = %16, %63
  %65 = getelementptr inbounds %class.VmaVector.5, %class.VmaVector.5* %0, i64 0, i32 2
  store i64 %1, i64* %65, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9VmaVectorIP9VmaPool_T15VmaStlAllocatorIS1_EE6resizeEmb(%class.VmaVector.11*, i64, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.VmaVector.11, %class.VmaVector.11* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = mul i64 %5, 3
  %9 = lshr i64 %8, 1
  %10 = icmp ult i64 %8, 16
  %11 = select i1 %10, i64 8, i64 %9
  %12 = icmp ugt i64 %11, %1
  %13 = select i1 %12, i64 %11, i64 %1
  br label %16

14:                                               ; preds = %3
  %15 = select i1 %2, i64 %1, i64 %5
  br label %16

16:                                               ; preds = %14, %7
  %17 = phi i64 [ %13, %7 ], [ %15, %14 ]
  %18 = icmp eq i64 %17, %5
  br i1 %18, label %64, label %19

19:                                               ; preds = %16
  %20 = icmp eq i64 %17, 0
  br i1 %20, label %36, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %class.VmaVector.11, %class.VmaVector.11* %0, i64 0, i32 0, i32 0
  %23 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, align 8
  %24 = shl i64 %17, 3
  %25 = icmp eq %struct.VkAllocationCallbacks* %23, null
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 1
  %28 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %27, align 8
  %29 = icmp eq i8* (i8*, i64, i64, i32)* %28, null
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* %28(i8* %32, i64 %24, i64 8, i32 1) #15
  br label %36

34:                                               ; preds = %26, %21
  %35 = tail call noalias i8* @aligned_alloc(i64 8, i64 %24) #15
  br label %36

36:                                               ; preds = %34, %30, %19
  %37 = phi i8* [ null, %19 ], [ %33, %30 ], [ %35, %34 ]
  %38 = getelementptr inbounds %class.VmaVector.11, %class.VmaVector.11* %0, i64 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = icmp ugt i64 %39, %1
  %41 = select i1 %40, i64 %1, i64 %39
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %class.VmaVector.11, %class.VmaVector.11* %0, i64 0, i32 1
  %45 = bitcast %struct.VmaPool_T*** %44 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = shl i64 %41, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %46, i64 %47, i1 false)
  br label %48

48:                                               ; preds = %36, %43
  %49 = getelementptr inbounds %class.VmaVector.11, %class.VmaVector.11* %0, i64 0, i32 0, i32 0
  %50 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %49, align 8
  %51 = getelementptr inbounds %class.VmaVector.11, %class.VmaVector.11* %0, i64 0, i32 1
  %52 = bitcast %struct.VmaPool_T*** %51 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq %struct.VkAllocationCallbacks* %50, null
  br i1 %54, label %62, label %55

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 3
  %57 = load void (i8*, i8*)*, void (i8*, i8*)** %56, align 8
  %58 = icmp eq void (i8*, i8*)* %57, null
  br i1 %58, label %62, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  tail call void %57(i8* %61, i8* %53) #15
  br label %63

62:                                               ; preds = %55, %48
  tail call void @free(i8* %53) #15
  br label %63

63:                                               ; preds = %59, %62
  store i64 %17, i64* %4, align 8
  store i8* %37, i8** %52, align 8
  br label %64

64:                                               ; preds = %16, %63
  %65 = getelementptr inbounds %class.VmaVector.11, %class.VmaVector.11* %0, i64 0, i32 2
  store i64 %1, i64* %65, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9VmaVectorI19VkMappedMemoryRange15VmaStlAllocatorIS0_EE6resizeEmb(%class.VmaVector.43*, i64, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.VmaVector.43, %class.VmaVector.43* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  br i1 %6, label %7, label %14

7:                                                ; preds = %3
  %8 = mul i64 %5, 3
  %9 = lshr i64 %8, 1
  %10 = icmp ult i64 %8, 16
  %11 = select i1 %10, i64 8, i64 %9
  %12 = icmp ugt i64 %11, %1
  %13 = select i1 %12, i64 %11, i64 %1
  br label %16

14:                                               ; preds = %3
  %15 = select i1 %2, i64 %1, i64 %5
  br label %16

16:                                               ; preds = %14, %7
  %17 = phi i64 [ %13, %7 ], [ %15, %14 ]
  %18 = icmp eq i64 %17, %5
  br i1 %18, label %64, label %19

19:                                               ; preds = %16
  %20 = icmp eq i64 %17, 0
  br i1 %20, label %36, label %21

21:                                               ; preds = %19
  %22 = getelementptr inbounds %class.VmaVector.43, %class.VmaVector.43* %0, i64 0, i32 0, i32 0
  %23 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %22, align 8
  %24 = mul i64 %17, 40
  %25 = icmp eq %struct.VkAllocationCallbacks* %23, null
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 1
  %28 = load i8* (i8*, i64, i64, i32)*, i8* (i8*, i64, i64, i32)** %27, align 8
  %29 = icmp eq i8* (i8*, i64, i64, i32)* %28, null
  br i1 %29, label %34, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %23, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* %28(i8* %32, i64 %24, i64 8, i32 1) #15
  br label %36

34:                                               ; preds = %26, %21
  %35 = tail call noalias i8* @aligned_alloc(i64 8, i64 %24) #15
  br label %36

36:                                               ; preds = %34, %30, %19
  %37 = phi i8* [ null, %19 ], [ %33, %30 ], [ %35, %34 ]
  %38 = getelementptr inbounds %class.VmaVector.43, %class.VmaVector.43* %0, i64 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = icmp ugt i64 %39, %1
  %41 = select i1 %40, i64 %1, i64 %39
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %36
  %44 = getelementptr inbounds %class.VmaVector.43, %class.VmaVector.43* %0, i64 0, i32 1
  %45 = bitcast %struct.VkMappedMemoryRange** %44 to i8**
  %46 = load i8*, i8** %45, align 8
  %47 = mul i64 %41, 40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %46, i64 %47, i1 false)
  br label %48

48:                                               ; preds = %36, %43
  %49 = getelementptr inbounds %class.VmaVector.43, %class.VmaVector.43* %0, i64 0, i32 0, i32 0
  %50 = load %struct.VkAllocationCallbacks*, %struct.VkAllocationCallbacks** %49, align 8
  %51 = getelementptr inbounds %class.VmaVector.43, %class.VmaVector.43* %0, i64 0, i32 1
  %52 = bitcast %struct.VkMappedMemoryRange** %51 to i8**
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq %struct.VkAllocationCallbacks* %50, null
  br i1 %54, label %62, label %55

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 3
  %57 = load void (i8*, i8*)*, void (i8*, i8*)** %56, align 8
  %58 = icmp eq void (i8*, i8*)* %57, null
  br i1 %58, label %62, label %59

59:                                               ; preds = %55
  %60 = getelementptr inbounds %struct.VkAllocationCallbacks, %struct.VkAllocationCallbacks* %50, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  tail call void %57(i8* %61, i8* %53) #15
  br label %63

62:                                               ; preds = %55, %48
  tail call void @free(i8* %53) #15
  br label %63

63:                                               ; preds = %59, %62
  store i64 %17, i64* %4, align 8
  store i8* %37, i8** %52, align 8
  br label %64

64:                                               ; preds = %16, %63
  %65 = getelementptr inbounds %class.VmaVector.43, %class.VmaVector.43* %0, i64 0, i32 2
  store i64 %1, i64* %65, align 8
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #14

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { cold noreturn nounwind }
attributes #14 = { nounwind readnone speculatable }
attributes #15 = { nounwind }
attributes #16 = { nounwind readonly }
attributes #17 = { builtin nounwind }
attributes #18 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = distinct !{!5, !4}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !4}
!8 = distinct !{!8, !4}
