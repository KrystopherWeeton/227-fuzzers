; ModuleID = '../../components/crash/content/browser/error_reporting/js_error_report_processor.cc'
source_filename = "../../components/crash/content/browser/error_reporting/js_error_report_processor.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::NoDestructor" = type { [8 x i8] }
%class.JsErrorReportProcessor = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }

@_ZTV22JsErrorReportProcessor = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%class.JsErrorReportProcessor*)* @_ZN22JsErrorReportProcessorD2Ev to i8*), i8* bitcast (void (%class.JsErrorReportProcessor*)* @_ZN22JsErrorReportProcessorD0Ev to i8*)] }, align 8
@_ZZN12_GLOBAL__N_110GetPointerEvE17default_processor = internal unnamed_addr global %"class.base::NoDestructor" zeroinitializer, align 8
@_ZGVZN12_GLOBAL__N_110GetPointerEvE17default_processor = internal global i64 0, align 8
@.str = private unnamed_addr constant [32 x i8] c"../../base/memory/ref_counted.h\00", align 1
@.str.1 = private unnamed_addr constant [27 x i8] c"ref_count_.Increment() > 0\00", align 1

@_ZN22JsErrorReportProcessorD1Ev = hidden unnamed_addr alias void (%class.JsErrorReportProcessor*), void (%class.JsErrorReportProcessor*)* @_ZN22JsErrorReportProcessorD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN22JsErrorReportProcessorC2Ev(%class.JsErrorReportProcessor* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.JsErrorReportProcessor, %class.JsErrorReportProcessor* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %2, align 4
  %3 = getelementptr inbounds %class.JsErrorReportProcessor, %class.JsErrorReportProcessor* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTV22JsErrorReportProcessor, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN22JsErrorReportProcessorD2Ev(%class.JsErrorReportProcessor* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN22JsErrorReportProcessorD0Ev(%class.JsErrorReportProcessor* nocapture readnone) unnamed_addr #2 align 2 {
  tail call void @llvm.trap() #9
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: nounwind ssp uwtable
define hidden %class.JsErrorReportProcessor* @_ZN22JsErrorReportProcessor3GetEv() local_unnamed_addr #4 align 2 {
  %1 = alloca %"class.logging::CheckError", align 8
  %2 = load atomic i8, i8* bitcast (i64* @_ZGVZN12_GLOBAL__N_110GetPointerEvE17default_processor to i8*) acquire, align 8
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %4, label %8, !prof !2

4:                                                ; preds = %0
  %5 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN12_GLOBAL__N_110GetPointerEvE17default_processor) #10
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %8, label %7

7:                                                ; preds = %4
  store %class.JsErrorReportProcessor* null, %class.JsErrorReportProcessor** bitcast (%"class.base::NoDestructor"* @_ZZN12_GLOBAL__N_110GetPointerEvE17default_processor to %class.JsErrorReportProcessor**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN12_GLOBAL__N_110GetPointerEvE17default_processor) #10
  br label %8

8:                                                ; preds = %0, %4, %7
  %9 = load %class.JsErrorReportProcessor*, %class.JsErrorReportProcessor** bitcast (%"class.base::NoDestructor"* @_ZZN12_GLOBAL__N_110GetPointerEvE17default_processor to %class.JsErrorReportProcessor**), align 8
  %10 = icmp eq %class.JsErrorReportProcessor* %9, null
  br i1 %10, label %18, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %class.JsErrorReportProcessor, %class.JsErrorReportProcessor* %9, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = atomicrmw add i32* %12, i32 1 monotonic
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %11
  %16 = bitcast %"class.logging::CheckError"* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %1, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0)) #10
  %17 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %1) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %1) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  br label %18

18:                                               ; preds = %8, %11, %15
  ret %class.JsErrorReportProcessor* %9
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22JsErrorReportProcessor10SetDefaultE13scoped_refptrIS_E(%class.JsErrorReportProcessor*) local_unnamed_addr #4 align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = icmp eq %class.JsErrorReportProcessor* %0, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %class.JsErrorReportProcessor, %class.JsErrorReportProcessor* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = atomicrmw add i32* %5, i32 1 monotonic
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %4
  %9 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0)) #10
  %10 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #10
  br label %11

11:                                               ; preds = %1, %4, %8
  %12 = load atomic i8, i8* bitcast (i64* @_ZGVZN12_GLOBAL__N_110GetPointerEvE17default_processor to i8*) acquire, align 8
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %18, !prof !2

14:                                               ; preds = %11
  %15 = call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN12_GLOBAL__N_110GetPointerEvE17default_processor) #10
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %18, label %17

17:                                               ; preds = %14
  store %class.JsErrorReportProcessor* null, %class.JsErrorReportProcessor** bitcast (%"class.base::NoDestructor"* @_ZZN12_GLOBAL__N_110GetPointerEvE17default_processor to %class.JsErrorReportProcessor**), align 8
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN12_GLOBAL__N_110GetPointerEvE17default_processor) #10
  br label %18

18:                                               ; preds = %11, %14, %17
  %19 = ptrtoint %class.JsErrorReportProcessor* %0 to i64
  %20 = load %class.JsErrorReportProcessor*, %class.JsErrorReportProcessor** bitcast (%"class.base::NoDestructor"* @_ZZN12_GLOBAL__N_110GetPointerEvE17default_processor to %class.JsErrorReportProcessor**), align 8
  store i64 %19, i64* bitcast (%"class.base::NoDestructor"* @_ZZN12_GLOBAL__N_110GetPointerEvE17default_processor to i64*), align 8
  %21 = icmp eq %class.JsErrorReportProcessor* %20, null
  br i1 %21, label %34, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %class.JsErrorReportProcessor, %class.JsErrorReportProcessor* %20, i64 0, i32 1
  %24 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = atomicrmw sub i32* %24, i32 1 acq_rel
  %26 = icmp eq i32 %25, 1
  br i1 %26, label %27, label %34

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %23, i64 -2
  %29 = bitcast %"class.base::RefCountedThreadSafe"* %28 to %class.JsErrorReportProcessor*
  %30 = bitcast %"class.base::RefCountedThreadSafe"* %28 to void (%class.JsErrorReportProcessor*)***
  %31 = load void (%class.JsErrorReportProcessor*)**, void (%class.JsErrorReportProcessor*)*** %30, align 8
  %32 = getelementptr inbounds void (%class.JsErrorReportProcessor*)*, void (%class.JsErrorReportProcessor*)** %31, i64 2
  %33 = load void (%class.JsErrorReportProcessor*)*, void (%class.JsErrorReportProcessor*)** %32, align 8
  call void %33(%class.JsErrorReportProcessor* nonnull %29) #10
  br label %34

34:                                               ; preds = %18, %22, %27
  br i1 %3, label %47, label %35

35:                                               ; preds = %34
  %36 = getelementptr inbounds %class.JsErrorReportProcessor, %class.JsErrorReportProcessor* %0, i64 0, i32 1
  %37 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %36, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = atomicrmw sub i32* %37, i32 1 acq_rel
  %39 = icmp eq i32 %38, 1
  br i1 %39, label %40, label %47

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %36, i64 -2
  %42 = bitcast %"class.base::RefCountedThreadSafe"* %41 to %class.JsErrorReportProcessor*
  %43 = bitcast %"class.base::RefCountedThreadSafe"* %41 to void (%class.JsErrorReportProcessor*)***
  %44 = load void (%class.JsErrorReportProcessor*)**, void (%class.JsErrorReportProcessor*)*** %43, align 8
  %45 = getelementptr inbounds void (%class.JsErrorReportProcessor*)*, void (%class.JsErrorReportProcessor*)** %44, i64 2
  %46 = load void (%class.JsErrorReportProcessor*)*, void (%class.JsErrorReportProcessor*)** %45, align 8
  call void %46(%class.JsErrorReportProcessor* nonnull %42) #10
  br label %47

47:                                               ; preds = %34, %35, %40
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #6

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #7

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #6

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind }
attributes #6 = { argmemonly nounwind }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
