; ModuleID = '../../third_party/skia/src/utils/SkEventTracer.cpp'
source_filename = "../../third_party/skia/src/utils/SkEventTracer.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%class.SkDefaultEventTracer = type { %class.SkEventTracer }
%class.SkEventTracer = type { i32 (...)** }

$_ZN13SkEventTracerD2Ev = comdat any

$_ZN20SkDefaultEventTracerD0Ev = comdat any

$_ZN20SkDefaultEventTracer23getCategoryGroupEnabledEPKc = comdat any

$_ZN20SkDefaultEventTracer20getCategoryGroupNameEPKh = comdat any

$_ZN20SkDefaultEventTracer13addTraceEventEcPKhPKcmiPS3_S1_PKmh = comdat any

$_ZN20SkDefaultEventTracer24updateTraceEventDurationEPKhPKcm = comdat any

$_ZTV20SkDefaultEventTracer = comdat any

$_ZZN20SkDefaultEventTracer23getCategoryGroupEnabledEPKcE2no = comdat any

$_ZZN20SkDefaultEventTracer20getCategoryGroupNameEPKhE4stub = comdat any

@_ZZN13SkEventTracer11GetInstanceEvE4once = internal global { { { i8 } } } zeroinitializer, align 1
@_ZZN13SkEventTracer11GetInstanceEvE13defaultTracer = internal unnamed_addr global %class.SkDefaultEventTracer* null, align 8
@_ZL11gUserTracer = internal global { { %class.SkEventTracer* } } zeroinitializer, align 8
@_ZTV20SkDefaultEventTracer = linkonce_odr hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkEventTracer*)* @_ZN13SkEventTracerD2Ev to i8*), i8* bitcast (void (%class.SkDefaultEventTracer*)* @_ZN20SkDefaultEventTracerD0Ev to i8*), i8* bitcast (i8* (%class.SkDefaultEventTracer*, i8*)* @_ZN20SkDefaultEventTracer23getCategoryGroupEnabledEPKc to i8*), i8* bitcast (i8* (%class.SkDefaultEventTracer*, i8*)* @_ZN20SkDefaultEventTracer20getCategoryGroupNameEPKh to i8*), i8* bitcast (i64 (%class.SkDefaultEventTracer*, i8, i8*, i8*, i64, i32, i8**, i8*, i64*, i8)* @_ZN20SkDefaultEventTracer13addTraceEventEcPKhPKcmiPS3_S1_PKmh to i8*), i8* bitcast (void (%class.SkDefaultEventTracer*, i8*, i8*, i64)* @_ZN20SkDefaultEventTracer24updateTraceEventDurationEPKhPKcm to i8*)] }, comdat, align 8
@_ZZN20SkDefaultEventTracer23getCategoryGroupEnabledEPKcE2no = linkonce_odr hidden global i8 0, comdat, align 1
@_ZZN20SkDefaultEventTracer20getCategoryGroupNameEPKhE4stub = linkonce_odr hidden local_unnamed_addr global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), comdat, align 8
@.str = private unnamed_addr constant [5 x i8] c"stub\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN13SkEventTracer11SetInstanceEPS_(%class.SkEventTracer*) local_unnamed_addr #0 align 2 {
  %2 = ptrtoint %class.SkEventTracer* %0 to i64
  %3 = cmpxchg i64* bitcast ({ { %class.SkEventTracer* } }* @_ZL11gUserTracer to i64*), i64 0, i64 %2 seq_cst seq_cst
  %4 = extractvalue { i64, i1 } %3, 1
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  %6 = icmp eq %class.SkEventTracer* %0, null
  br i1 %6, label %14, label %7

7:                                                ; preds = %5
  %8 = bitcast %class.SkEventTracer* %0 to void (%class.SkEventTracer*)***
  %9 = load void (%class.SkEventTracer*)**, void (%class.SkEventTracer*)*** %8, align 8
  %10 = getelementptr inbounds void (%class.SkEventTracer*)*, void (%class.SkEventTracer*)** %9, i64 1
  %11 = load void (%class.SkEventTracer*)*, void (%class.SkEventTracer*)** %10, align 8
  tail call void %11(%class.SkEventTracer* nonnull %0) #6
  br label %14

12:                                               ; preds = %1
  %13 = tail call i32 @atexit(void ()* nonnull @"_ZZN13SkEventTracer11SetInstanceEPS_EN3$_08__invokeEv") #6
  br label %14

14:                                               ; preds = %5, %7, %12
  %15 = phi i1 [ true, %12 ], [ false, %7 ], [ false, %5 ]
  ret i1 %15
}

; Function Attrs: nounwind
declare i32 @atexit(void ()*) local_unnamed_addr #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden %class.SkEventTracer* @_ZN13SkEventTracer11GetInstanceEv() local_unnamed_addr #2 align 2 {
  %1 = load atomic i64, i64* bitcast ({ { %class.SkEventTracer* } }* @_ZL11gUserTracer to i64*) acquire, align 8
  %2 = inttoptr i64 %1 to %class.SkEventTracer*
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %4, label %18

4:                                                ; preds = %0
  %5 = load atomic i8, i8* getelementptr inbounds ({ { { i8 } } }, { { { i8 } } }* @_ZZN13SkEventTracer11GetInstanceEvE4once, i64 0, i32 0, i32 0, i32 0) acquire, align 1
  switch i8 %5, label %6 [
    i8 2, label %16
    i8 0, label %7
  ]

6:                                                ; preds = %7, %4
  br label %13

7:                                                ; preds = %4
  %8 = cmpxchg i8* getelementptr inbounds ({ { { i8 } } }, { { { i8 } } }* @_ZZN13SkEventTracer11GetInstanceEvE4once, i64 0, i32 0, i32 0, i32 0), i8 0, i8 1 monotonic monotonic
  %9 = extractvalue { i8, i1 } %8, 1
  br i1 %9, label %10, label %6

10:                                               ; preds = %7
  %11 = tail call i8* @_Znwm(i64 8) #7
  %12 = bitcast i8* %11 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV20SkDefaultEventTracer, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  store i8* %11, i8** bitcast (%class.SkDefaultEventTracer** @_ZZN13SkEventTracer11GetInstanceEvE13defaultTracer to i8**), align 8
  store atomic i8 2, i8* getelementptr inbounds ({ { { i8 } } }, { { { i8 } } }* @_ZZN13SkEventTracer11GetInstanceEvE4once, i64 0, i32 0, i32 0, i32 0) release, align 1
  br label %16

13:                                               ; preds = %6, %13
  %14 = load atomic i8, i8* getelementptr inbounds ({ { { i8 } } }, { { { i8 } } }* @_ZZN13SkEventTracer11GetInstanceEvE4once, i64 0, i32 0, i32 0, i32 0) acquire, align 1
  %15 = icmp eq i8 %14, 2
  br i1 %15, label %16, label %13

16:                                               ; preds = %13, %4, %10
  %17 = load %class.SkEventTracer*, %class.SkEventTracer** bitcast (%class.SkDefaultEventTracer** @_ZZN13SkEventTracer11GetInstanceEvE13defaultTracer to %class.SkEventTracer**), align 8
  br label %18

18:                                               ; preds = %0, %16
  %19 = phi %class.SkEventTracer* [ %17, %16 ], [ %2, %0 ]
  ret %class.SkEventTracer* %19
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @"_ZZN13SkEventTracer11SetInstanceEPS_EN3$_08__invokeEv"() #3 align 2 {
  %1 = load atomic i64, i64* bitcast ({ { %class.SkEventTracer* } }* @_ZL11gUserTracer to i64*) seq_cst, align 8
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %9, label %3

3:                                                ; preds = %0
  %4 = inttoptr i64 %1 to %class.SkEventTracer*
  %5 = inttoptr i64 %1 to void (%class.SkEventTracer*)***
  %6 = load void (%class.SkEventTracer*)**, void (%class.SkEventTracer*)*** %5, align 8
  %7 = getelementptr inbounds void (%class.SkEventTracer*)*, void (%class.SkEventTracer*)** %6, i64 1
  %8 = load void (%class.SkEventTracer*)*, void (%class.SkEventTracer*)** %7, align 8
  tail call void %8(%class.SkEventTracer* nonnull %4) #6
  br label %9

9:                                                ; preds = %0, %3
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN13SkEventTracerD2Ev(%class.SkEventTracer*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN20SkDefaultEventTracerD0Ev(%class.SkDefaultEventTracer*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %class.SkDefaultEventTracer* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN20SkDefaultEventTracer23getCategoryGroupEnabledEPKc(%class.SkDefaultEventTracer*, i8*) unnamed_addr #0 comdat align 2 {
  ret i8* @_ZZN20SkDefaultEventTracer23getCategoryGroupEnabledEPKcE2no
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN20SkDefaultEventTracer20getCategoryGroupNameEPKh(%class.SkDefaultEventTracer*, i8*) unnamed_addr #0 comdat align 2 {
  %3 = load i8*, i8** @_ZZN20SkDefaultEventTracer20getCategoryGroupNameEPKhE4stub, align 8
  ret i8* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN20SkDefaultEventTracer13addTraceEventEcPKhPKcmiPS3_S1_PKmh(%class.SkDefaultEventTracer*, i8 signext, i8*, i8*, i64, i32, i8**, i8*, i64*, i8 zeroext) unnamed_addr #0 comdat align 2 {
  ret i64 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN20SkDefaultEventTracer24updateTraceEventDurationEPKhPKcm(%class.SkDefaultEventTracer*, i8*, i8*, i64) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
