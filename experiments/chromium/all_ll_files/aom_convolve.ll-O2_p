; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/aom_convolve.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/aom_convolve.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_convolve8_horiz_c(i8* nocapture readonly, i64, i8* nocapture, i64, i16*, i32, i16* nocapture readnone, i32, i32, i32) local_unnamed_addr #0 {
  %11 = ptrtoint i16* %4 to i64
  %12 = and i64 %11, -256
  %13 = inttoptr i64 %12 to [8 x i16]*
  %14 = sub i64 %11, %12
  %15 = lshr exact i64 %14, 4
  %16 = trunc i64 %15 to i32
  tail call fastcc void @convolve_horiz(i8* %0, i64 %1, i8* %2, i64 %3, [8 x i16]* %13, i32 %16, i32 %5, i32 %8, i32 %9)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @convolve_horiz(i8* nocapture readonly, i64, i8* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32) unnamed_addr #0 {
  %10 = icmp sgt i32 %8, 0
  br i1 %10, label %11, label %19

11:                                               ; preds = %9
  %12 = getelementptr inbounds i8, i8* %0, i64 -3
  %13 = icmp sgt i32 %7, 0
  %14 = zext i32 %7 to i64
  br label %15

15:                                               ; preds = %20, %11
  %16 = phi i8* [ %12, %11 ], [ %21, %20 ]
  %17 = phi i8* [ %2, %11 ], [ %22, %20 ]
  %18 = phi i32 [ 0, %11 ], [ %23, %20 ]
  br i1 %13, label %25, label %20

19:                                               ; preds = %20, %9
  ret void

20:                                               ; preds = %25, %15
  %21 = getelementptr inbounds i8, i8* %16, i64 %1
  %22 = getelementptr inbounds i8, i8* %17, i64 %3
  %23 = add nuw nsw i32 %18, 1
  %24 = icmp eq i32 %23, %8
  br i1 %24, label %19, label %15

25:                                               ; preds = %15, %25
  %26 = phi i64 [ %57, %25 ], [ 0, %15 ]
  %27 = phi i32 [ %56, %25 ], [ %5, %15 ]
  %28 = ashr i32 %27, 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %16, i64 %29
  %31 = and i32 %27, 15
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %32, i64 0
  %34 = bitcast i8* %30 to <8 x i8>*
  %35 = load <8 x i8>, <8 x i8>* %34, align 1
  %36 = zext <8 x i8> %35 to <8 x i32>
  %37 = bitcast i16* %33 to <8 x i16>*
  %38 = load <8 x i16>, <8 x i16>* %37, align 2
  %39 = sext <8 x i16> %38 to <8 x i32>
  %40 = mul nsw <8 x i32> %39, %36
  %41 = shufflevector <8 x i32> %40, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %42 = add nsw <8 x i32> %40, %41
  %43 = shufflevector <8 x i32> %42, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %44 = add nsw <8 x i32> %42, %43
  %45 = shufflevector <8 x i32> %44, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = add nsw <8 x i32> %44, %45
  %47 = extractelement <8 x i32> %46, i32 0
  %48 = add nsw i32 %47, 64
  %49 = ashr i32 %48, 7
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = icmp slt i32 %51, 255
  %53 = select i1 %52, i32 %51, i32 255
  %54 = trunc i32 %53 to i8
  %55 = getelementptr inbounds i8, i8* %17, i64 %26
  store i8 %54, i8* %55, align 1
  %56 = add nsw i32 %27, %6
  %57 = add nuw nsw i64 %26, 1
  %58 = icmp eq i64 %57, %14
  br i1 %58, label %20, label %25
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @aom_convolve8_vert_c(i8* nocapture readonly, i64, i8* nocapture, i64, i16* nocapture readnone, i32, i16*, i32, i32, i32) local_unnamed_addr #0 {
  %11 = ptrtoint i16* %6 to i64
  %12 = and i64 %11, -256
  %13 = inttoptr i64 %12 to [8 x i16]*
  %14 = sub i64 %11, %12
  %15 = lshr exact i64 %14, 4
  %16 = trunc i64 %15 to i32
  tail call fastcc void @convolve_vert(i8* %0, i64 %1, i8* %2, i64 %3, [8 x i16]* %13, i32 %16, i32 %7, i32 %8, i32 %9)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @convolve_vert(i8* nocapture readonly, i64, i8* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32) unnamed_addr #0 {
  %10 = icmp sgt i32 %7, 0
  br i1 %10, label %11, label %26

11:                                               ; preds = %9
  %12 = mul i64 %1, -3
  %13 = getelementptr inbounds i8, i8* %0, i64 %12
  %14 = icmp sgt i32 %8, 0
  %15 = shl nsw i64 %1, 1
  %16 = mul nsw i64 %1, 3
  %17 = shl nsw i64 %1, 2
  %18 = mul nsw i64 %1, 5
  %19 = mul nsw i64 %1, 6
  %20 = mul nsw i64 %1, 7
  %21 = zext i32 %8 to i64
  br label %22

22:                                               ; preds = %27, %11
  %23 = phi i8* [ %13, %11 ], [ %28, %27 ]
  %24 = phi i8* [ %2, %11 ], [ %29, %27 ]
  %25 = phi i32 [ 0, %11 ], [ %30, %27 ]
  br i1 %14, label %32, label %27

26:                                               ; preds = %27, %9
  ret void

27:                                               ; preds = %32, %22
  %28 = getelementptr inbounds i8, i8* %23, i64 1
  %29 = getelementptr inbounds i8, i8* %24, i64 1
  %30 = add nuw nsw i32 %25, 1
  %31 = icmp eq i32 %30, %7
  br i1 %31, label %26, label %22

32:                                               ; preds = %22, %32
  %33 = phi i64 [ %113, %32 ], [ 0, %22 ]
  %34 = phi i32 [ %112, %32 ], [ %5, %22 ]
  %35 = ashr i32 %34, 4
  %36 = sext i32 %35 to i64
  %37 = mul nsw i64 %36, %1
  %38 = getelementptr inbounds i8, i8* %23, i64 %37
  %39 = and i32 %34, 15
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %40, i64 0
  %42 = load i8, i8* %38, align 1
  %43 = zext i8 %42 to i32
  %44 = load i16, i16* %41, align 2
  %45 = sext i16 %44 to i32
  %46 = mul nsw i32 %45, %43
  %47 = getelementptr inbounds i8, i8* %38, i64 %1
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %40, i64 1
  %51 = load i16, i16* %50, align 2
  %52 = sext i16 %51 to i32
  %53 = mul nsw i32 %52, %49
  %54 = getelementptr inbounds i8, i8* %38, i64 %15
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %40, i64 2
  %58 = load i16, i16* %57, align 2
  %59 = sext i16 %58 to i32
  %60 = mul nsw i32 %59, %56
  %61 = getelementptr inbounds i8, i8* %38, i64 %16
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %40, i64 3
  %65 = load i16, i16* %64, align 2
  %66 = sext i16 %65 to i32
  %67 = mul nsw i32 %66, %63
  %68 = getelementptr inbounds i8, i8* %38, i64 %17
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %40, i64 4
  %72 = load i16, i16* %71, align 2
  %73 = sext i16 %72 to i32
  %74 = mul nsw i32 %73, %70
  %75 = getelementptr inbounds i8, i8* %38, i64 %18
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %40, i64 5
  %79 = load i16, i16* %78, align 2
  %80 = sext i16 %79 to i32
  %81 = mul nsw i32 %80, %77
  %82 = getelementptr inbounds i8, i8* %38, i64 %19
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %40, i64 6
  %86 = load i16, i16* %85, align 2
  %87 = sext i16 %86 to i32
  %88 = mul nsw i32 %87, %84
  %89 = getelementptr inbounds i8, i8* %38, i64 %20
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %40, i64 7
  %93 = load i16, i16* %92, align 2
  %94 = sext i16 %93 to i32
  %95 = mul nsw i32 %94, %91
  %96 = add nsw i32 %46, 64
  %97 = add nsw i32 %96, %53
  %98 = add nsw i32 %97, %60
  %99 = add nsw i32 %98, %67
  %100 = add nsw i32 %99, %74
  %101 = add nsw i32 %100, %81
  %102 = add nsw i32 %101, %88
  %103 = add nsw i32 %102, %95
  %104 = ashr i32 %103, 7
  %105 = icmp sgt i32 %104, 0
  %106 = select i1 %105, i32 %104, i32 0
  %107 = icmp slt i32 %106, 255
  %108 = select i1 %107, i32 %106, i32 255
  %109 = trunc i32 %108 to i8
  %110 = mul nsw i64 %33, %3
  %111 = getelementptr inbounds i8, i8* %24, i64 %110
  store i8 %109, i8* %111, align 1
  %112 = add nsw i32 %34, %6
  %113 = add nuw nsw i64 %33, 1
  %114 = icmp eq i64 %113, %21
  br i1 %114, label %27, label %32
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_convolve8_c(i8* nocapture readonly, i64, i8* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32, i32) local_unnamed_addr #2 {
  %12 = alloca [8640 x i8], align 16
  %13 = getelementptr inbounds [8640 x i8], [8640 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8640, i8* nonnull %13) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 8640, i1 false)
  %14 = add nsw i32 %10, -1
  %15 = mul nsw i32 %14, %8
  %16 = add nsw i32 %15, %7
  %17 = ashr i32 %16, 4
  %18 = add nsw i32 %17, 8
  %19 = mul i64 %1, -3
  %20 = getelementptr inbounds i8, i8* %0, i64 %19
  call fastcc void @convolve_horiz(i8* %20, i64 %1, i8* nonnull %13, i64 64, [8 x i16]* %4, i32 %5, i32 %6, i32 %9, i32 %18)
  %21 = getelementptr inbounds [8640 x i8], [8640 x i8]* %12, i64 0, i64 192
  call fastcc void @convolve_vert(i8* %21, i64 64, i8* %2, i64 %3, [8 x i16]* %4, i32 %7, i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 8640, i8* nonnull %13) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_scaled_2d_c(i8* nocapture readonly, i64, i8* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32, i32) local_unnamed_addr #2 {
  %12 = alloca [8640 x i8], align 16
  %13 = getelementptr inbounds [8640 x i8], [8640 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8640, i8* nonnull %13) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 8640, i1 false) #3
  %14 = add nsw i32 %10, -1
  %15 = mul nsw i32 %14, %8
  %16 = add nsw i32 %15, %7
  %17 = ashr i32 %16, 4
  %18 = add nsw i32 %17, 8
  %19 = mul i64 %1, -3
  %20 = getelementptr inbounds i8, i8* %0, i64 %19
  call fastcc void @convolve_horiz(i8* %20, i64 %1, i8* nonnull %13, i64 64, [8 x i16]* %4, i32 %5, i32 %6, i32 %9, i32 %18) #3
  %21 = getelementptr inbounds [8640 x i8], [8640 x i8]* %12, i64 0, i64 192
  call fastcc void @convolve_vert(i8* %21, i64 64, i8* %2, i64 %3, [8 x i16]* %4, i32 %7, i32 %8, i32 %9, i32 %10) #3
  call void @llvm.lifetime.end.p0i8(i64 8640, i8* nonnull %13) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_convolve_copy_c(i8* nocapture readonly, i64, i8* nocapture, i64, i32, i32) local_unnamed_addr #2 {
  %7 = icmp sgt i32 %5, 0
  br i1 %7, label %8, label %28

8:                                                ; preds = %6
  %9 = sext i32 %4 to i64
  %10 = add nsw i32 %5, -1
  %11 = and i32 %5, 7
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %23, label %13

13:                                               ; preds = %8, %13
  %14 = phi i32 [ %20, %13 ], [ %5, %8 ]
  %15 = phi i8* [ %18, %13 ], [ %0, %8 ]
  %16 = phi i8* [ %19, %13 ], [ %2, %8 ]
  %17 = phi i32 [ %21, %13 ], [ %11, %8 ]
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %15, i64 %9, i1 false)
  %18 = getelementptr inbounds i8, i8* %15, i64 %1
  %19 = getelementptr inbounds i8, i8* %16, i64 %3
  %20 = add nsw i32 %14, -1
  %21 = add i32 %17, -1
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %13, !llvm.loop !2

23:                                               ; preds = %13, %8
  %24 = phi i32 [ %5, %8 ], [ %20, %13 ]
  %25 = phi i8* [ %0, %8 ], [ %18, %13 ]
  %26 = phi i8* [ %2, %8 ], [ %19, %13 ]
  %27 = icmp ult i32 %10, 7
  br i1 %27, label %28, label %29

28:                                               ; preds = %23, %29, %6
  ret void

29:                                               ; preds = %23, %29
  %30 = phi i32 [ %49, %29 ], [ %24, %23 ]
  %31 = phi i8* [ %47, %29 ], [ %25, %23 ]
  %32 = phi i8* [ %48, %29 ], [ %26, %23 ]
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %32, i8* align 1 %31, i64 %9, i1 false)
  %33 = getelementptr inbounds i8, i8* %31, i64 %1
  %34 = getelementptr inbounds i8, i8* %32, i64 %3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %33, i64 %9, i1 false)
  %35 = getelementptr inbounds i8, i8* %33, i64 %1
  %36 = getelementptr inbounds i8, i8* %34, i64 %3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %35, i64 %9, i1 false)
  %37 = getelementptr inbounds i8, i8* %35, i64 %1
  %38 = getelementptr inbounds i8, i8* %36, i64 %3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %37, i64 %9, i1 false)
  %39 = getelementptr inbounds i8, i8* %37, i64 %1
  %40 = getelementptr inbounds i8, i8* %38, i64 %3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %40, i8* align 1 %39, i64 %9, i1 false)
  %41 = getelementptr inbounds i8, i8* %39, i64 %1
  %42 = getelementptr inbounds i8, i8* %40, i64 %3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %41, i64 %9, i1 false)
  %43 = getelementptr inbounds i8, i8* %41, i64 %1
  %44 = getelementptr inbounds i8, i8* %42, i64 %3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %43, i64 %9, i1 false)
  %45 = getelementptr inbounds i8, i8* %43, i64 %1
  %46 = getelementptr inbounds i8, i8* %44, i64 %3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %45, i64 %9, i1 false)
  %47 = getelementptr inbounds i8, i8* %45, i64 %1
  %48 = getelementptr inbounds i8, i8* %46, i64 %3
  %49 = add nsw i32 %30, -8
  %50 = icmp sgt i32 %49, 0
  br i1 %50, label %29, label %28
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
