; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/common/mfqe.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/common/mfqe.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP8Common = type { %struct.vpx_internal_error_info, [8 x i8], [128 x [2 x i16]], [128 x [2 x i16]], [128 x [2 x i16]], i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, [4 x %struct.yv12_buffer_config], [4 x i32], i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.modeinfo*, %struct.modeinfo*, %struct.modeinfo*, i32, [12 x i8], %struct.loop_filter_info_n, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES, %struct.frame_contexts, %struct.frame_contexts, i32, i32, i32, i32, %struct.postproc_state, i32, [12 x i8] }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.modeinfo = type { %struct.MB_MODE_INFO, [16 x %union.b_mode_info] }
%struct.MB_MODE_INFO = type { i8, i8, i8, i8, %union.int_mv, i8, i8, i8, i8 }
%union.int_mv = type { i32 }
%union.b_mode_info = type { i32 }
%struct.loop_filter_info_n = type { [64 x [16 x i8]], [64 x [16 x i8]], [64 x [16 x i8]], [4 x [16 x i8]], [4 x [4 x [4 x i8]]], [2 x [64 x i8]], [10 x i8], [6 x i8] }
%struct.ENTROPY_CONTEXT_PLANES = type { [4 x i8], [2 x i8], [2 x i8], i8 }
%struct.frame_contexts = type { [9 x i8], [4 x i8], [3 x i8], [3 x i8], [4 x [8 x [3 x [11 x i8]]]], [2 x %struct.mv_context] }
%struct.mv_context = type { [19 x i8] }
%struct.postproc_state = type { i32, i32, i32, i32, i32, i8* }
%struct.MV = type { i16, i16 }

@qualify_inter_mb.ndx = internal unnamed_addr constant [4 x [4 x i32]] [[4 x i32] [i32 0, i32 1, i32 4, i32 5], [4 x i32] [i32 2, i32 3, i32 6, i32 7], [4 x i32] [i32 8, i32 9, i32 12, i32 13], [4 x i32] [i32 10, i32 11, i32 14, i32 15]], align 16
@multiframe_quality_enhance_block.VP8_ZEROS = internal constant [16 x i8] zeroinitializer, align 16
@vpx_variance16x16 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i32*)*, align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp8_filter_by_weight16x16_c(i8* nocapture readonly, i32, i8* nocapture, i32, i32) local_unnamed_addr #0 {
  %6 = sub nsw i32 16, %4
  %7 = sext i32 %1 to i64
  %8 = sext i32 %3 to i64
  %9 = insertelement <16 x i32> undef, i32 %6, i32 0
  %10 = shufflevector <16 x i32> %9, <16 x i32> undef, <16 x i32> zeroinitializer
  %11 = insertelement <16 x i32> undef, i32 %4, i32 0
  %12 = shufflevector <16 x i32> %11, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %13

13:                                               ; preds = %72, %5
  %14 = phi i64 [ %77, %72 ], [ 0, %5 ]
  %15 = phi i32 [ %75, %72 ], [ 0, %5 ]
  %16 = phi i8* [ %73, %72 ], [ %0, %5 ]
  %17 = phi i8* [ %74, %72 ], [ %2, %5 ]
  %18 = mul i64 %14, %8
  %19 = mul i64 %14, %7
  %20 = add i64 %19, 16
  %21 = getelementptr i8, i8* %0, i64 %20
  %22 = getelementptr i8, i8* %0, i64 %19
  %23 = add i64 %18, 16
  %24 = getelementptr i8, i8* %2, i64 %23
  %25 = getelementptr i8, i8* %2, i64 %18
  %26 = icmp ult i8* %25, %21
  %27 = icmp ult i8* %22, %24
  %28 = and i1 %26, %27
  br i1 %28, label %43, label %29

29:                                               ; preds = %13
  %30 = bitcast i8* %16 to <16 x i8>*
  %31 = load <16 x i8>, <16 x i8>* %30, align 1, !alias.scope !2
  %32 = zext <16 x i8> %31 to <16 x i32>
  %33 = mul nsw <16 x i32> %12, %32
  %34 = bitcast i8* %17 to <16 x i8>*
  %35 = load <16 x i8>, <16 x i8>* %34, align 1, !alias.scope !5, !noalias !2
  %36 = zext <16 x i8> %35 to <16 x i32>
  %37 = mul nsw <16 x i32> %10, %36
  %38 = add <16 x i32> %33, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %39 = add <16 x i32> %38, %37
  %40 = lshr <16 x i32> %39, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %41 = trunc <16 x i32> %40 to <16 x i8>
  %42 = bitcast i8* %17 to <16 x i8>*
  store <16 x i8> %41, <16 x i8>* %42, align 1, !alias.scope !5, !noalias !2
  br label %72

43:                                               ; preds = %13, %43
  %44 = phi i64 [ %70, %43 ], [ 0, %13 ]
  %45 = getelementptr inbounds i8, i8* %16, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = mul nsw i32 %47, %4
  %49 = getelementptr inbounds i8, i8* %17, i64 %44
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = mul nsw i32 %6, %51
  %53 = add i32 %48, 8
  %54 = add i32 %53, %52
  %55 = lshr i32 %54, 4
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %49, align 1
  %57 = or i64 %44, 1
  %58 = getelementptr inbounds i8, i8* %16, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = mul nsw i32 %60, %4
  %62 = getelementptr inbounds i8, i8* %17, i64 %57
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = mul nsw i32 %6, %64
  %66 = add i32 %61, 8
  %67 = add i32 %66, %65
  %68 = lshr i32 %67, 4
  %69 = trunc i32 %68 to i8
  store i8 %69, i8* %62, align 1
  %70 = add nuw nsw i64 %44, 2
  %71 = icmp eq i64 %70, 16
  br i1 %71, label %72, label %43, !llvm.loop !7

72:                                               ; preds = %43, %29
  %73 = getelementptr inbounds i8, i8* %16, i64 %7
  %74 = getelementptr inbounds i8, i8* %17, i64 %8
  %75 = add nuw nsw i32 %15, 1
  %76 = icmp eq i32 %75, 16
  %77 = add i64 %14, 1
  br i1 %76, label %78, label %13

78:                                               ; preds = %72
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp8_filter_by_weight8x8_c(i8* nocapture readonly, i32, i8* nocapture, i32, i32) local_unnamed_addr #0 {
  %6 = sub nsw i32 16, %4
  %7 = sext i32 %1 to i64
  %8 = sext i32 %3 to i64
  %9 = icmp ne i32 %3, 1
  %10 = icmp ne i32 %1, 1
  %11 = or i1 %9, %10
  br i1 %11, label %12, label %114

12:                                               ; preds = %5, %12
  %13 = phi i32 [ %112, %12 ], [ 0, %5 ]
  %14 = phi i8* [ %110, %12 ], [ %0, %5 ]
  %15 = phi i8* [ %111, %12 ], [ %2, %5 ]
  %16 = load i8, i8* %14, align 1
  %17 = zext i8 %16 to i32
  %18 = mul nsw i32 %17, %4
  %19 = load i8, i8* %15, align 1
  %20 = zext i8 %19 to i32
  %21 = mul nsw i32 %6, %20
  %22 = add i32 %18, 8
  %23 = add i32 %22, %21
  %24 = lshr i32 %23, 4
  %25 = trunc i32 %24 to i8
  store i8 %25, i8* %15, align 1
  %26 = getelementptr inbounds i8, i8* %14, i64 1
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = mul nsw i32 %28, %4
  %30 = getelementptr inbounds i8, i8* %15, i64 1
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = mul nsw i32 %6, %32
  %34 = add i32 %29, 8
  %35 = add i32 %34, %33
  %36 = lshr i32 %35, 4
  %37 = trunc i32 %36 to i8
  store i8 %37, i8* %30, align 1
  %38 = getelementptr inbounds i8, i8* %14, i64 2
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = mul nsw i32 %40, %4
  %42 = getelementptr inbounds i8, i8* %15, i64 2
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = mul nsw i32 %6, %44
  %46 = add i32 %41, 8
  %47 = add i32 %46, %45
  %48 = lshr i32 %47, 4
  %49 = trunc i32 %48 to i8
  store i8 %49, i8* %42, align 1
  %50 = getelementptr inbounds i8, i8* %14, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = mul nsw i32 %52, %4
  %54 = getelementptr inbounds i8, i8* %15, i64 3
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = mul nsw i32 %6, %56
  %58 = add i32 %53, 8
  %59 = add i32 %58, %57
  %60 = lshr i32 %59, 4
  %61 = trunc i32 %60 to i8
  store i8 %61, i8* %54, align 1
  %62 = getelementptr inbounds i8, i8* %14, i64 4
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = mul nsw i32 %64, %4
  %66 = getelementptr inbounds i8, i8* %15, i64 4
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = mul nsw i32 %6, %68
  %70 = add i32 %65, 8
  %71 = add i32 %70, %69
  %72 = lshr i32 %71, 4
  %73 = trunc i32 %72 to i8
  store i8 %73, i8* %66, align 1
  %74 = getelementptr inbounds i8, i8* %14, i64 5
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = mul nsw i32 %76, %4
  %78 = getelementptr inbounds i8, i8* %15, i64 5
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = mul nsw i32 %6, %80
  %82 = add i32 %77, 8
  %83 = add i32 %82, %81
  %84 = lshr i32 %83, 4
  %85 = trunc i32 %84 to i8
  store i8 %85, i8* %78, align 1
  %86 = getelementptr inbounds i8, i8* %14, i64 6
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = mul nsw i32 %88, %4
  %90 = getelementptr inbounds i8, i8* %15, i64 6
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = mul nsw i32 %6, %92
  %94 = add i32 %89, 8
  %95 = add i32 %94, %93
  %96 = lshr i32 %95, 4
  %97 = trunc i32 %96 to i8
  store i8 %97, i8* %90, align 1
  %98 = getelementptr inbounds i8, i8* %14, i64 7
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = mul nsw i32 %100, %4
  %102 = getelementptr inbounds i8, i8* %15, i64 7
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = mul nsw i32 %6, %104
  %106 = add i32 %101, 8
  %107 = add i32 %106, %105
  %108 = lshr i32 %107, 4
  %109 = trunc i32 %108 to i8
  store i8 %109, i8* %102, align 1
  %110 = getelementptr inbounds i8, i8* %14, i64 %7
  %111 = getelementptr inbounds i8, i8* %15, i64 %8
  %112 = add nuw nsw i32 %13, 1
  %113 = icmp eq i32 %112, 8
  br i1 %113, label %219, label %12

114:                                              ; preds = %5
  %115 = getelementptr i8, i8* %2, i64 6
  %116 = load i8, i8* %115, align 1
  br label %117

117:                                              ; preds = %117, %114
  %118 = phi i8 [ %116, %114 ], [ %214, %117 ]
  %119 = phi i32 [ 0, %114 ], [ %217, %117 ]
  %120 = phi i8* [ %0, %114 ], [ %215, %117 ]
  %121 = phi i8* [ %2, %114 ], [ %216, %117 ]
  %122 = load i8, i8* %120, align 1
  %123 = zext i8 %122 to i32
  %124 = mul nsw i32 %123, %4
  %125 = load i8, i8* %121, align 1
  %126 = zext i8 %125 to i32
  %127 = mul nsw i32 %6, %126
  %128 = add i32 %124, 8
  %129 = add i32 %128, %127
  %130 = lshr i32 %129, 4
  %131 = trunc i32 %130 to i8
  store i8 %131, i8* %121, align 1
  %132 = getelementptr inbounds i8, i8* %120, i64 1
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = mul nsw i32 %134, %4
  %136 = getelementptr inbounds i8, i8* %121, i64 1
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = mul nsw i32 %6, %138
  %140 = add i32 %135, 8
  %141 = add i32 %140, %139
  %142 = lshr i32 %141, 4
  %143 = trunc i32 %142 to i8
  store i8 %143, i8* %136, align 1
  %144 = getelementptr inbounds i8, i8* %120, i64 2
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i32
  %147 = mul nsw i32 %146, %4
  %148 = getelementptr inbounds i8, i8* %121, i64 2
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = mul nsw i32 %6, %150
  %152 = add i32 %147, 8
  %153 = add i32 %152, %151
  %154 = lshr i32 %153, 4
  %155 = trunc i32 %154 to i8
  store i8 %155, i8* %148, align 1
  %156 = getelementptr inbounds i8, i8* %120, i64 3
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = mul nsw i32 %158, %4
  %160 = getelementptr inbounds i8, i8* %121, i64 3
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i32
  %163 = mul nsw i32 %6, %162
  %164 = add i32 %159, 8
  %165 = add i32 %164, %163
  %166 = lshr i32 %165, 4
  %167 = trunc i32 %166 to i8
  store i8 %167, i8* %160, align 1
  %168 = getelementptr inbounds i8, i8* %120, i64 4
  %169 = load i8, i8* %168, align 1
  %170 = zext i8 %169 to i32
  %171 = mul nsw i32 %170, %4
  %172 = getelementptr inbounds i8, i8* %121, i64 4
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i32
  %175 = mul nsw i32 %6, %174
  %176 = add i32 %171, 8
  %177 = add i32 %176, %175
  %178 = lshr i32 %177, 4
  %179 = trunc i32 %178 to i8
  store i8 %179, i8* %172, align 1
  %180 = getelementptr inbounds i8, i8* %120, i64 5
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %181 to i32
  %183 = mul nsw i32 %182, %4
  %184 = getelementptr inbounds i8, i8* %121, i64 5
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i32
  %187 = mul nsw i32 %6, %186
  %188 = add i32 %183, 8
  %189 = add i32 %188, %187
  %190 = lshr i32 %189, 4
  %191 = trunc i32 %190 to i8
  store i8 %191, i8* %184, align 1
  %192 = getelementptr inbounds i8, i8* %120, i64 6
  %193 = load i8, i8* %192, align 1
  %194 = zext i8 %193 to i32
  %195 = mul nsw i32 %194, %4
  %196 = getelementptr inbounds i8, i8* %121, i64 6
  %197 = zext i8 %118 to i32
  %198 = mul nsw i32 %6, %197
  %199 = add i32 %195, 8
  %200 = add i32 %199, %198
  %201 = lshr i32 %200, 4
  %202 = trunc i32 %201 to i8
  store i8 %202, i8* %196, align 1
  %203 = getelementptr inbounds i8, i8* %120, i64 7
  %204 = load i8, i8* %203, align 1
  %205 = zext i8 %204 to i32
  %206 = mul nsw i32 %205, %4
  %207 = getelementptr inbounds i8, i8* %121, i64 7
  %208 = load i8, i8* %207, align 1
  %209 = zext i8 %208 to i32
  %210 = mul nsw i32 %6, %209
  %211 = add i32 %206, 8
  %212 = add i32 %211, %210
  %213 = lshr i32 %212, 4
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %207, align 1
  %215 = getelementptr inbounds i8, i8* %120, i64 %7
  %216 = getelementptr inbounds i8, i8* %121, i64 %8
  %217 = add nuw nsw i32 %119, 1
  %218 = icmp eq i32 %217, 8
  br i1 %218, label %219, label %117

219:                                              ; preds = %117, %12
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp8_filter_by_weight4x4_c(i8* nocapture readonly, i32, i8* nocapture, i32, i32) local_unnamed_addr #0 {
  %6 = sub nsw i32 16, %4
  %7 = sext i32 %1 to i64
  %8 = sext i32 %3 to i64
  %9 = load i8, i8* %0, align 1
  %10 = zext i8 %9 to i32
  %11 = mul nsw i32 %10, %4
  %12 = load i8, i8* %2, align 1
  %13 = zext i8 %12 to i32
  %14 = mul nsw i32 %6, %13
  %15 = add i32 %11, 8
  %16 = add i32 %15, %14
  %17 = lshr i32 %16, 4
  %18 = trunc i32 %17 to i8
  store i8 %18, i8* %2, align 1
  %19 = getelementptr inbounds i8, i8* %0, i64 1
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = mul nsw i32 %21, %4
  %23 = getelementptr inbounds i8, i8* %2, i64 1
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = mul nsw i32 %6, %25
  %27 = add i32 %22, 8
  %28 = add i32 %27, %26
  %29 = lshr i32 %28, 4
  %30 = trunc i32 %29 to i8
  store i8 %30, i8* %23, align 1
  %31 = getelementptr inbounds i8, i8* %0, i64 2
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = mul nsw i32 %33, %4
  %35 = getelementptr inbounds i8, i8* %2, i64 2
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = mul nsw i32 %6, %37
  %39 = add i32 %34, 8
  %40 = add i32 %39, %38
  %41 = lshr i32 %40, 4
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %35, align 1
  %43 = getelementptr inbounds i8, i8* %0, i64 3
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = mul nsw i32 %45, %4
  %47 = getelementptr inbounds i8, i8* %2, i64 3
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = mul nsw i32 %6, %49
  %51 = add i32 %46, 8
  %52 = add i32 %51, %50
  %53 = lshr i32 %52, 4
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %47, align 1
  %55 = getelementptr inbounds i8, i8* %0, i64 %7
  %56 = getelementptr inbounds i8, i8* %2, i64 %8
  %57 = load i8, i8* %55, align 1
  %58 = zext i8 %57 to i32
  %59 = mul nsw i32 %58, %4
  %60 = load i8, i8* %56, align 1
  %61 = zext i8 %60 to i32
  %62 = mul nsw i32 %6, %61
  %63 = add i32 %59, 8
  %64 = add i32 %63, %62
  %65 = lshr i32 %64, 4
  %66 = trunc i32 %65 to i8
  store i8 %66, i8* %56, align 1
  %67 = getelementptr inbounds i8, i8* %55, i64 1
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = mul nsw i32 %69, %4
  %71 = getelementptr inbounds i8, i8* %56, i64 1
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = mul nsw i32 %6, %73
  %75 = add i32 %70, 8
  %76 = add i32 %75, %74
  %77 = lshr i32 %76, 4
  %78 = trunc i32 %77 to i8
  store i8 %78, i8* %71, align 1
  %79 = getelementptr inbounds i8, i8* %55, i64 2
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = mul nsw i32 %81, %4
  %83 = getelementptr inbounds i8, i8* %56, i64 2
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = mul nsw i32 %6, %85
  %87 = add i32 %82, 8
  %88 = add i32 %87, %86
  %89 = lshr i32 %88, 4
  %90 = trunc i32 %89 to i8
  store i8 %90, i8* %83, align 1
  %91 = getelementptr inbounds i8, i8* %55, i64 3
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = mul nsw i32 %93, %4
  %95 = getelementptr inbounds i8, i8* %56, i64 3
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = mul nsw i32 %6, %97
  %99 = add i32 %94, 8
  %100 = add i32 %99, %98
  %101 = lshr i32 %100, 4
  %102 = trunc i32 %101 to i8
  store i8 %102, i8* %95, align 1
  %103 = getelementptr inbounds i8, i8* %55, i64 %7
  %104 = getelementptr inbounds i8, i8* %56, i64 %8
  %105 = load i8, i8* %103, align 1
  %106 = zext i8 %105 to i32
  %107 = mul nsw i32 %106, %4
  %108 = load i8, i8* %104, align 1
  %109 = zext i8 %108 to i32
  %110 = mul nsw i32 %6, %109
  %111 = add i32 %107, 8
  %112 = add i32 %111, %110
  %113 = lshr i32 %112, 4
  %114 = trunc i32 %113 to i8
  store i8 %114, i8* %104, align 1
  %115 = getelementptr inbounds i8, i8* %103, i64 1
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i32
  %118 = mul nsw i32 %117, %4
  %119 = getelementptr inbounds i8, i8* %104, i64 1
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = mul nsw i32 %6, %121
  %123 = add i32 %118, 8
  %124 = add i32 %123, %122
  %125 = lshr i32 %124, 4
  %126 = trunc i32 %125 to i8
  store i8 %126, i8* %119, align 1
  %127 = getelementptr inbounds i8, i8* %103, i64 2
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = mul nsw i32 %129, %4
  %131 = getelementptr inbounds i8, i8* %104, i64 2
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  %134 = mul nsw i32 %6, %133
  %135 = add i32 %130, 8
  %136 = add i32 %135, %134
  %137 = lshr i32 %136, 4
  %138 = trunc i32 %137 to i8
  store i8 %138, i8* %131, align 1
  %139 = getelementptr inbounds i8, i8* %103, i64 3
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i32
  %142 = mul nsw i32 %141, %4
  %143 = getelementptr inbounds i8, i8* %104, i64 3
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i32
  %146 = mul nsw i32 %6, %145
  %147 = add i32 %142, 8
  %148 = add i32 %147, %146
  %149 = lshr i32 %148, 4
  %150 = trunc i32 %149 to i8
  store i8 %150, i8* %143, align 1
  %151 = getelementptr inbounds i8, i8* %103, i64 %7
  %152 = getelementptr inbounds i8, i8* %104, i64 %8
  %153 = load i8, i8* %151, align 1
  %154 = zext i8 %153 to i32
  %155 = mul nsw i32 %154, %4
  %156 = load i8, i8* %152, align 1
  %157 = zext i8 %156 to i32
  %158 = mul nsw i32 %6, %157
  %159 = add i32 %155, 8
  %160 = add i32 %159, %158
  %161 = lshr i32 %160, 4
  %162 = trunc i32 %161 to i8
  store i8 %162, i8* %152, align 1
  %163 = getelementptr inbounds i8, i8* %151, i64 1
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = mul nsw i32 %165, %4
  %167 = getelementptr inbounds i8, i8* %152, i64 1
  %168 = load i8, i8* %167, align 1
  %169 = zext i8 %168 to i32
  %170 = mul nsw i32 %6, %169
  %171 = add i32 %166, 8
  %172 = add i32 %171, %170
  %173 = lshr i32 %172, 4
  %174 = trunc i32 %173 to i8
  store i8 %174, i8* %167, align 1
  %175 = getelementptr inbounds i8, i8* %151, i64 2
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i32
  %178 = mul nsw i32 %177, %4
  %179 = getelementptr inbounds i8, i8* %152, i64 2
  %180 = load i8, i8* %179, align 1
  %181 = zext i8 %180 to i32
  %182 = mul nsw i32 %6, %181
  %183 = add i32 %178, 8
  %184 = add i32 %183, %182
  %185 = lshr i32 %184, 4
  %186 = trunc i32 %185 to i8
  store i8 %186, i8* %179, align 1
  %187 = getelementptr inbounds i8, i8* %151, i64 3
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i32
  %190 = mul nsw i32 %189, %4
  %191 = getelementptr inbounds i8, i8* %152, i64 3
  %192 = load i8, i8* %191, align 1
  %193 = zext i8 %192 to i32
  %194 = mul nsw i32 %6, %193
  %195 = add i32 %190, 8
  %196 = add i32 %195, %194
  %197 = lshr i32 %196, 4
  %198 = trunc i32 %197 to i8
  store i8 %198, i8* %191, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_multiframe_quality_enhance(%struct.VP8Common* nocapture readonly) local_unnamed_addr #1 {
  %2 = alloca <4 x i32>, align 16
  %3 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 10
  %4 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %3, align 8
  %5 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 23
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 41
  %8 = load %struct.modeinfo*, %struct.modeinfo** %7, align 16
  %9 = bitcast <4 x i32>* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #5
  %10 = getelementptr inbounds <4 x i32>, <4 x i32>* %2, i64 0, i64 0
  %11 = getelementptr inbounds <4 x i32>, <4 x i32>* %2, i64 0, i64 1
  %12 = getelementptr inbounds <4 x i32>, <4 x i32>* %2, i64 0, i64 2
  %13 = getelementptr inbounds <4 x i32>, <4 x i32>* %2, i64 0, i64 3
  %14 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 34
  %15 = bitcast <4 x i32>* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 16, i1 false)
  %16 = load i32, i32* %14, align 16
  %17 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 64, i32 2
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 27
  %20 = load i32, i32* %19, align 4
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %22, label %377

22:                                               ; preds = %1
  %23 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18, i32 15
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18, i32 14
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18, i32 13
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 15
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 14
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 13
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 28
  %36 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 4
  %37 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 9
  %38 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18, i32 4
  %39 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %0, i64 0, i32 18, i32 9
  %40 = load i32, i32* %35, align 8
  br label %41

41:                                               ; preds = %22, %340
  %42 = phi i32 [ %20, %22 ], [ %341, %340 ]
  %43 = phi i32 [ %40, %22 ], [ %342, %340 ]
  %44 = phi i8* [ %24, %22 ], [ %373, %340 ]
  %45 = phi i8* [ %26, %22 ], [ %372, %340 ]
  %46 = phi i8* [ %28, %22 ], [ %367, %340 ]
  %47 = phi i8* [ %30, %22 ], [ %362, %340 ]
  %48 = phi i8* [ %32, %22 ], [ %361, %340 ]
  %49 = phi i8* [ %34, %22 ], [ %355, %340 ]
  %50 = phi i32 [ 0, %22 ], [ %375, %340 ]
  %51 = phi %struct.modeinfo* [ %8, %22 ], [ %374, %340 ]
  %52 = icmp sgt i32 %43, 0
  br i1 %52, label %53, label %340

53:                                               ; preds = %41, %327
  %54 = phi i8* [ %333, %327 ], [ %44, %41 ]
  %55 = phi i8* [ %332, %327 ], [ %45, %41 ]
  %56 = phi i8* [ %331, %327 ], [ %46, %41 ]
  %57 = phi i8* [ %330, %327 ], [ %47, %41 ]
  %58 = phi i8* [ %329, %327 ], [ %48, %41 ]
  %59 = phi i8* [ %328, %327 ], [ %49, %41 ]
  %60 = phi i32 [ %335, %327 ], [ 0, %41 ]
  %61 = phi %struct.modeinfo* [ %334, %327 ], [ %51, %41 ]
  switch i32 %6, label %320 [
    i32 1, label %62
    i32 0, label %315
  ]

62:                                               ; preds = %53
  %63 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %61, i64 0, i32 0, i32 6
  %64 = load i8, i8* %63, align 1
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %67, label %66

66:                                               ; preds = %62
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %2, align 16
  br label %183

67:                                               ; preds = %62
  %68 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %61, i64 0, i32 0, i32 0
  %69 = load i8, i8* %68, align 4
  %70 = icmp eq i8 %69, 9
  br i1 %70, label %71, label %98

71:                                               ; preds = %67
  store i32 0, i32* %10, align 16
  br label %72

72:                                               ; preds = %95, %71
  %73 = phi i64 [ 0, %71 ], [ %96, %95 ]
  %74 = getelementptr inbounds <4 x i32>, <4 x i32>* %2, i64 0, i64 %73
  store i32 1, i32* %74, align 4
  %75 = load i32, i32* %10, align 16
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %95, label %77

77:                                               ; preds = %72
  %78 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* @qualify_inter_mb.ndx, i64 0, i64 %73, i64 0
  %79 = load i32, i32* %78, align 16
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %61, i64 0, i32 1, i64 %80
  %82 = bitcast %union.b_mode_info* %81 to i16*
  %83 = load i16, i16* %82, align 4
  %84 = icmp slt i16 %83, 3
  br i1 %84, label %85, label %90

85:                                               ; preds = %77
  %86 = bitcast %union.b_mode_info* %81 to %struct.MV*
  %87 = getelementptr inbounds %struct.MV, %struct.MV* %86, i64 0, i32 1
  %88 = load i16, i16* %87, align 2
  %89 = icmp slt i16 %88, 3
  br label %90

90:                                               ; preds = %85, %77
  %91 = phi i1 [ false, %77 ], [ %89, %85 ]
  %92 = zext i1 %91 to i32
  store i32 %92, i32* %74, align 4
  %93 = load i32, i32* %11, align 4
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %128

95:                                               ; preds = %179, %160, %141, %90, %72
  %96 = add nuw nsw i64 %73, 1
  %97 = icmp eq i64 %96, 4
  br i1 %97, label %123, label %72

98:                                               ; preds = %67
  %99 = icmp ugt i8 %69, 4
  br i1 %99, label %100, label %119

100:                                              ; preds = %98
  %101 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %61, i64 0, i32 0, i32 4
  %102 = bitcast %union.int_mv* %101 to i16*
  %103 = load i16, i16* %102, align 4
  %104 = sext i16 %103 to i32
  %105 = icmp slt i32 %104, 0
  %106 = sub nsw i32 0, %104
  %107 = select i1 %105, i32 %106, i32 %104
  %108 = icmp slt i32 %107, 3
  br i1 %108, label %109, label %119

109:                                              ; preds = %100
  %110 = bitcast %union.int_mv* %101 to %struct.MV*
  %111 = getelementptr inbounds %struct.MV, %struct.MV* %110, i64 0, i32 1
  %112 = load i16, i16* %111, align 2
  %113 = sext i16 %112 to i32
  %114 = icmp slt i32 %113, 0
  %115 = sub nsw i32 0, %113
  %116 = select i1 %114, i32 %115, i32 %113
  %117 = icmp slt i32 %116, 3
  %118 = zext i1 %117 to i32
  br label %119

119:                                              ; preds = %109, %100, %98
  %120 = phi i32 [ 0, %100 ], [ 0, %98 ], [ %118, %109 ]
  %121 = insertelement <4 x i32> undef, i32 %120, i32 0
  %122 = shufflevector <4 x i32> %121, <4 x i32> undef, <4 x i32> zeroinitializer
  store <4 x i32> %122, <4 x i32>* %2, align 16
  br label %183

123:                                              ; preds = %95
  %124 = load i32, i32* %10, align 16
  %125 = load i32, i32* %11, align 4
  %126 = load i32, i32* %12, align 8
  %127 = load i32, i32* %13, align 4
  br label %183

128:                                              ; preds = %90
  %129 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* @qualify_inter_mb.ndx, i64 0, i64 %73, i64 1
  %130 = load i32, i32* %129, align 4
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %61, i64 0, i32 1, i64 %131
  %133 = bitcast %union.b_mode_info* %132 to i16*
  %134 = load i16, i16* %133, align 4
  %135 = icmp slt i16 %134, 3
  br i1 %135, label %136, label %141

136:                                              ; preds = %128
  %137 = bitcast %union.b_mode_info* %132 to %struct.MV*
  %138 = getelementptr inbounds %struct.MV, %struct.MV* %137, i64 0, i32 1
  %139 = load i16, i16* %138, align 2
  %140 = icmp slt i16 %139, 3
  br label %141

141:                                              ; preds = %136, %128
  %142 = phi i1 [ false, %128 ], [ %140, %136 ]
  %143 = and i1 %91, %142
  %144 = zext i1 %143 to i32
  store i32 %144, i32* %74, align 4
  %145 = load i32, i32* %12, align 8
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %95, label %147

147:                                              ; preds = %141
  %148 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* @qualify_inter_mb.ndx, i64 0, i64 %73, i64 2
  %149 = load i32, i32* %148, align 8
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %61, i64 0, i32 1, i64 %150
  %152 = bitcast %union.b_mode_info* %151 to i16*
  %153 = load i16, i16* %152, align 4
  %154 = icmp slt i16 %153, 3
  br i1 %154, label %155, label %160

155:                                              ; preds = %147
  %156 = bitcast %union.b_mode_info* %151 to %struct.MV*
  %157 = getelementptr inbounds %struct.MV, %struct.MV* %156, i64 0, i32 1
  %158 = load i16, i16* %157, align 2
  %159 = icmp slt i16 %158, 3
  br label %160

160:                                              ; preds = %155, %147
  %161 = phi i1 [ false, %147 ], [ %159, %155 ]
  %162 = and i1 %143, %161
  %163 = zext i1 %162 to i32
  store i32 %163, i32* %74, align 4
  %164 = load i32, i32* %13, align 4
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %95, label %166

166:                                              ; preds = %160
  %167 = getelementptr inbounds [4 x [4 x i32]], [4 x [4 x i32]]* @qualify_inter_mb.ndx, i64 0, i64 %73, i64 3
  %168 = load i32, i32* %167, align 4
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %61, i64 0, i32 1, i64 %169
  %171 = bitcast %union.b_mode_info* %170 to i16*
  %172 = load i16, i16* %171, align 4
  %173 = icmp slt i16 %172, 3
  br i1 %173, label %174, label %179

174:                                              ; preds = %166
  %175 = bitcast %union.b_mode_info* %170 to %struct.MV*
  %176 = getelementptr inbounds %struct.MV, %struct.MV* %175, i64 0, i32 1
  %177 = load i16, i16* %176, align 2
  %178 = icmp slt i16 %177, 3
  br label %179

179:                                              ; preds = %174, %166
  %180 = phi i1 [ false, %166 ], [ %178, %174 ]
  %181 = and i1 %162, %180
  %182 = zext i1 %181 to i32
  store i32 %182, i32* %74, align 4
  br label %95

183:                                              ; preds = %123, %119, %66
  %184 = phi i32 [ %127, %123 ], [ %120, %119 ], [ 1, %66 ]
  %185 = phi i32 [ %126, %123 ], [ %120, %119 ], [ 1, %66 ]
  %186 = phi i32 [ %125, %123 ], [ %120, %119 ], [ 1, %66 ]
  %187 = phi i32 [ %124, %123 ], [ %120, %119 ], [ 1, %66 ]
  %188 = add i32 %185, %184
  %189 = add i32 %188, %186
  %190 = add i32 %189, %187
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %320, label %192

192:                                              ; preds = %183
  %193 = icmp slt i32 %190, 4
  br i1 %193, label %194, label %315

194:                                              ; preds = %192, %312
  %195 = phi i64 [ %313, %312 ], [ 0, %192 ]
  %196 = shl nuw nsw i64 %195, 1
  %197 = trunc i64 %195 to i32
  %198 = trunc i64 %195 to i32
  br label %199

199:                                              ; preds = %309, %194
  %200 = phi i64 [ 0, %194 ], [ %310, %309 ]
  %201 = add nuw nsw i64 %200, %196
  %202 = getelementptr inbounds <4 x i32>, <4 x i32>* %2, i64 0, i64 %201
  %203 = load i32, i32* %202, align 4
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %233, label %205

205:                                              ; preds = %199
  %206 = load i32, i32* %36, align 8
  %207 = mul nsw i32 %206, %197
  %208 = trunc i64 %200 to i32
  %209 = add nsw i32 %207, %208
  %210 = shl nsw i32 %209, 3
  %211 = sext i32 %210 to i64
  %212 = getelementptr inbounds i8, i8* %59, i64 %211
  %213 = load i32, i32* %37, align 4
  %214 = mul nsw i32 %213, %197
  %215 = add nsw i32 %214, %208
  %216 = shl nsw i32 %215, 2
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds i8, i8* %58, i64 %217
  %219 = getelementptr inbounds i8, i8* %57, i64 %217
  %220 = load i32, i32* %38, align 8
  %221 = mul nsw i32 %220, %197
  %222 = add nsw i32 %221, %208
  %223 = shl nsw i32 %222, 3
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds i8, i8* %56, i64 %224
  %226 = load i32, i32* %39, align 4
  %227 = mul nsw i32 %226, %197
  %228 = add nsw i32 %227, %208
  %229 = shl nsw i32 %228, 2
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds i8, i8* %55, i64 %230
  %232 = getelementptr inbounds i8, i8* %54, i64 %230
  tail call fastcc void @multiframe_quality_enhance_block(i32 8, i32 %16, i32 %18, i8* %212, i8* %218, i8* %219, i32 %206, i32 %213, i8* %225, i8* %231, i8* %232, i32 %220, i32 %226)
  br label %309

233:                                              ; preds = %199
  %234 = load i32, i32* %37, align 4
  %235 = mul nsw i32 %234, %198
  %236 = trunc i64 %200 to i32
  %237 = add nsw i32 %235, %236
  %238 = shl nsw i32 %237, 2
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds i8, i8* %58, i64 %239
  %241 = load i32, i32* %39, align 4
  %242 = mul nsw i32 %241, %198
  %243 = add nsw i32 %242, %236
  %244 = shl nsw i32 %243, 2
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds i8, i8* %55, i64 %245
  %247 = getelementptr inbounds i8, i8* %57, i64 %239
  %248 = getelementptr inbounds i8, i8* %54, i64 %245
  %249 = load i32, i32* %36, align 8
  %250 = mul nsw i32 %249, %198
  %251 = add nsw i32 %250, %236
  %252 = shl nsw i32 %251, 3
  %253 = sext i32 %252 to i64
  %254 = getelementptr inbounds i8, i8* %59, i64 %253
  %255 = load i32, i32* %38, align 8
  %256 = mul nsw i32 %255, %198
  %257 = add nsw i32 %256, %236
  %258 = shl nsw i32 %257, 3
  %259 = sext i32 %258 to i64
  %260 = getelementptr inbounds i8, i8* %56, i64 %259
  tail call void @vp8_copy_mem8x8_mmx(i8* %254, i32 %249, i8* %260, i32 %255) #5
  %261 = bitcast i8* %240 to i32*
  %262 = bitcast i8* %246 to i32*
  %263 = load i32, i32* %261, align 1
  store i32 %263, i32* %262, align 1
  %264 = bitcast i8* %247 to i32*
  %265 = bitcast i8* %248 to i32*
  %266 = load i32, i32* %264, align 1
  store i32 %266, i32* %265, align 1
  %267 = load i32, i32* %37, align 4
  %268 = sext i32 %267 to i64
  %269 = getelementptr inbounds i8, i8* %240, i64 %268
  %270 = load i32, i32* %39, align 4
  %271 = sext i32 %270 to i64
  %272 = getelementptr inbounds i8, i8* %246, i64 %271
  %273 = getelementptr inbounds i8, i8* %247, i64 %268
  %274 = getelementptr inbounds i8, i8* %248, i64 %271
  %275 = bitcast i8* %269 to i32*
  %276 = bitcast i8* %272 to i32*
  %277 = load i32, i32* %275, align 1
  store i32 %277, i32* %276, align 1
  %278 = bitcast i8* %273 to i32*
  %279 = bitcast i8* %274 to i32*
  %280 = load i32, i32* %278, align 1
  store i32 %280, i32* %279, align 1
  %281 = load i32, i32* %37, align 4
  %282 = sext i32 %281 to i64
  %283 = getelementptr inbounds i8, i8* %269, i64 %282
  %284 = load i32, i32* %39, align 4
  %285 = sext i32 %284 to i64
  %286 = getelementptr inbounds i8, i8* %272, i64 %285
  %287 = getelementptr inbounds i8, i8* %273, i64 %282
  %288 = getelementptr inbounds i8, i8* %274, i64 %285
  %289 = bitcast i8* %283 to i32*
  %290 = bitcast i8* %286 to i32*
  %291 = load i32, i32* %289, align 1
  store i32 %291, i32* %290, align 1
  %292 = bitcast i8* %287 to i32*
  %293 = bitcast i8* %288 to i32*
  %294 = load i32, i32* %292, align 1
  store i32 %294, i32* %293, align 1
  %295 = load i32, i32* %37, align 4
  %296 = sext i32 %295 to i64
  %297 = getelementptr inbounds i8, i8* %283, i64 %296
  %298 = load i32, i32* %39, align 4
  %299 = sext i32 %298 to i64
  %300 = getelementptr inbounds i8, i8* %286, i64 %299
  %301 = getelementptr inbounds i8, i8* %287, i64 %296
  %302 = getelementptr inbounds i8, i8* %288, i64 %299
  %303 = bitcast i8* %297 to i32*
  %304 = bitcast i8* %300 to i32*
  %305 = load i32, i32* %303, align 1
  store i32 %305, i32* %304, align 1
  %306 = bitcast i8* %301 to i32*
  %307 = bitcast i8* %302 to i32*
  %308 = load i32, i32* %306, align 1
  store i32 %308, i32* %307, align 1
  br label %309

309:                                              ; preds = %233, %205
  %310 = add nuw nsw i64 %200, 1
  %311 = icmp eq i64 %310, 2
  br i1 %311, label %312, label %199

312:                                              ; preds = %309
  %313 = add nuw nsw i64 %195, 1
  %314 = icmp eq i64 %313, 2
  br i1 %314, label %327, label %194

315:                                              ; preds = %53, %192
  %316 = load i32, i32* %36, align 8
  %317 = load i32, i32* %37, align 4
  %318 = load i32, i32* %38, align 8
  %319 = load i32, i32* %39, align 4
  tail call fastcc void @multiframe_quality_enhance_block(i32 16, i32 %16, i32 %18, i8* %59, i8* %58, i8* %57, i32 %316, i32 %317, i8* %56, i8* %55, i8* %54, i32 %318, i32 %319)
  br label %327

320:                                              ; preds = %53, %183
  %321 = load i32, i32* %36, align 8
  %322 = load i32, i32* %38, align 8
  tail call void @vp8_copy_mem16x16_sse2(i8* %59, i32 %321, i8* %56, i32 %322) #5
  %323 = load i32, i32* %37, align 4
  %324 = load i32, i32* %39, align 4
  tail call void @vp8_copy_mem8x8_mmx(i8* %58, i32 %323, i8* %55, i32 %324) #5
  %325 = load i32, i32* %37, align 4
  %326 = load i32, i32* %39, align 4
  tail call void @vp8_copy_mem8x8_mmx(i8* %57, i32 %325, i8* %54, i32 %326) #5
  br label %327

327:                                              ; preds = %312, %315, %320
  %328 = getelementptr inbounds i8, i8* %59, i64 16
  %329 = getelementptr inbounds i8, i8* %58, i64 8
  %330 = getelementptr inbounds i8, i8* %57, i64 8
  %331 = getelementptr inbounds i8, i8* %56, i64 16
  %332 = getelementptr inbounds i8, i8* %55, i64 8
  %333 = getelementptr inbounds i8, i8* %54, i64 8
  %334 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %61, i64 1
  %335 = add nuw nsw i32 %60, 1
  %336 = load i32, i32* %35, align 8
  %337 = icmp slt i32 %335, %336
  br i1 %337, label %53, label %338

338:                                              ; preds = %327
  %339 = load i32, i32* %19, align 4
  br label %340

340:                                              ; preds = %338, %41
  %341 = phi i32 [ %42, %41 ], [ %339, %338 ]
  %342 = phi i32 [ %43, %41 ], [ %336, %338 ]
  %343 = phi %struct.modeinfo* [ %51, %41 ], [ %334, %338 ]
  %344 = phi i8* [ %49, %41 ], [ %328, %338 ]
  %345 = phi i8* [ %48, %41 ], [ %329, %338 ]
  %346 = phi i8* [ %47, %41 ], [ %330, %338 ]
  %347 = phi i8* [ %46, %41 ], [ %331, %338 ]
  %348 = phi i8* [ %45, %41 ], [ %332, %338 ]
  %349 = phi i8* [ %44, %41 ], [ %333, %338 ]
  %350 = load i32, i32* %36, align 8
  %351 = shl nsw i32 %350, 4
  %352 = shl nsw i32 %342, 4
  %353 = sub nsw i32 %351, %352
  %354 = sext i32 %353 to i64
  %355 = getelementptr inbounds i8, i8* %344, i64 %354
  %356 = load i32, i32* %37, align 4
  %357 = shl nsw i32 %356, 3
  %358 = shl nsw i32 %342, 3
  %359 = sub nsw i32 %357, %358
  %360 = sext i32 %359 to i64
  %361 = getelementptr inbounds i8, i8* %345, i64 %360
  %362 = getelementptr inbounds i8, i8* %346, i64 %360
  %363 = load i32, i32* %38, align 8
  %364 = shl nsw i32 %363, 4
  %365 = sub nsw i32 %364, %352
  %366 = sext i32 %365 to i64
  %367 = getelementptr inbounds i8, i8* %347, i64 %366
  %368 = load i32, i32* %39, align 4
  %369 = shl nsw i32 %368, 3
  %370 = sub nsw i32 %369, %358
  %371 = sext i32 %370 to i64
  %372 = getelementptr inbounds i8, i8* %348, i64 %371
  %373 = getelementptr inbounds i8, i8* %349, i64 %371
  %374 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %343, i64 1
  %375 = add nuw nsw i32 %50, 1
  %376 = icmp slt i32 %375, %341
  br i1 %376, label %41, label %377

377:                                              ; preds = %340, %1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @multiframe_quality_enhance_block(i32, i32, i32, i8*, i8*, i8*, i32, i32, i8*, i8*, i8*, i32, i32) unnamed_addr #1 {
  %14 = alloca i32, align 4
  %15 = ashr i32 %0, 1
  %16 = sub nsw i32 %1, %2
  %17 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #5
  store i32 -1431655766, i32* %14, align 4
  %18 = icmp eq i32 %0, 16
  br i1 %18, label %19, label %40

19:                                               ; preds = %13
  %20 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** @vpx_variance16x16, align 8
  %21 = call i32 %20(i8* %8, i32 %11, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @multiframe_quality_enhance_block.VP8_ZEROS, i64 0, i64 0), i32 0, i32* nonnull %14) #5
  %22 = add i32 %21, 128
  %23 = lshr i32 %22, 8
  %24 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** @vpx_variance16x16, align 8
  %25 = call i32 %24(i8* %3, i32 %6, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @multiframe_quality_enhance_block.VP8_ZEROS, i64 0, i64 0), i32 0, i32* nonnull %14) #5
  %26 = add i32 %25, 128
  %27 = lshr i32 %26, 8
  %28 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** @vpx_variance16x16, align 8
  %29 = call i32 %28(i8* %3, i32 %6, i8* %8, i32 %11, i32* nonnull %14) #5
  %30 = load i32, i32* %14, align 4
  %31 = add i32 %30, 128
  %32 = lshr i32 %31, 8
  %33 = call i32 @vpx_variance8x8_sse2(i8* %4, i32 %7, i8* %9, i32 %12, i32* nonnull %14) #5
  %34 = load i32, i32* %14, align 4
  %35 = add i32 %34, 32
  %36 = lshr i32 %35, 6
  %37 = call i32 @vpx_variance8x8_sse2(i8* %5, i32 %7, i8* %10, i32 %12, i32* nonnull %14) #5
  %38 = load i32, i32* %14, align 4
  %39 = add i32 %38, 32
  br label %58

40:                                               ; preds = %13
  %41 = call i32 @vpx_variance8x8_sse2(i8* %8, i32 %11, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @multiframe_quality_enhance_block.VP8_ZEROS, i64 0, i64 0), i32 0, i32* nonnull %14) #5
  %42 = add i32 %41, 32
  %43 = lshr i32 %42, 6
  %44 = call i32 @vpx_variance8x8_sse2(i8* %3, i32 %6, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @multiframe_quality_enhance_block.VP8_ZEROS, i64 0, i64 0), i32 0, i32* nonnull %14) #5
  %45 = add i32 %44, 32
  %46 = lshr i32 %45, 6
  %47 = call i32 @vpx_variance8x8_sse2(i8* %3, i32 %6, i8* %8, i32 %11, i32* nonnull %14) #5
  %48 = load i32, i32* %14, align 4
  %49 = add i32 %48, 32
  %50 = lshr i32 %49, 6
  %51 = call i32 @vpx_variance4x4_sse2(i8* %4, i32 %7, i8* %9, i32 %12, i32* nonnull %14) #5
  %52 = load i32, i32* %14, align 4
  %53 = add i32 %52, 8
  %54 = lshr i32 %53, 4
  %55 = call i32 @vpx_variance4x4_sse2(i8* %5, i32 %7, i8* %10, i32 %12, i32* nonnull %14) #5
  %56 = load i32, i32* %14, align 4
  %57 = add i32 %56, 8
  br label %58

58:                                               ; preds = %40, %19
  %59 = phi i32 [ 4, %40 ], [ 6, %19 ]
  %60 = phi i32 [ %57, %40 ], [ %39, %19 ]
  %61 = phi i32 [ %46, %40 ], [ %27, %19 ]
  %62 = phi i32 [ %43, %40 ], [ %23, %19 ]
  %63 = phi i32 [ %50, %40 ], [ %32, %19 ]
  %64 = phi i32 [ %54, %40 ], [ %36, %19 ]
  %65 = lshr i32 %60, %59
  %66 = mul nuw nsw i32 %61, 5
  %67 = ashr i32 %16, 4
  %68 = lshr i32 %62, 1
  %69 = call i32 @llvm.ctlz.i32(i32 %68, i1 false), !range !9
  %70 = sub nuw nsw i32 32, %69
  %71 = add nsw i32 %70, %67
  %72 = icmp ugt i32 %62, %66
  br label %73

73:                                               ; preds = %58, %73
  %74 = phi i32 [ %76, %73 ], [ %2, %58 ]
  %75 = phi i32 [ %78, %73 ], [ %71, %58 ]
  %76 = ashr i32 %74, 2
  %77 = icmp eq i32 %76, 0
  %78 = add i32 %75, 1
  br i1 %77, label %79, label %73

79:                                               ; preds = %73
  %80 = mul i32 %75, %75
  %81 = icmp ult i32 %63, %80
  %82 = shl nuw nsw i32 %64, 2
  %83 = icmp ult i32 %82, %80
  %84 = and i1 %81, %83
  br i1 %84, label %85, label %147

85:                                               ; preds = %79
  %86 = shl nuw nsw i32 %65, 2
  %87 = icmp uge i32 %86, %80
  %88 = or i1 %72, %87
  br i1 %88, label %147, label %89

89:                                               ; preds = %85
  %90 = lshr i32 %63, 1
  %91 = call i32 @llvm.ctlz.i32(i32 %90, i1 false) #5, !range !10
  %92 = sub nuw nsw i32 33, %91
  %93 = lshr i32 %92, 1
  %94 = add nuw nsw i32 %93, 1
  %95 = and i32 %94, 1
  %96 = icmp eq i32 %93, 0
  br i1 %96, label %119, label %97

97:                                               ; preds = %89
  %98 = sub nuw nsw i32 %94, %95
  br label %99

99:                                               ; preds = %99, %97
  %100 = phi i32 [ %93, %97 ], [ %116, %99 ]
  %101 = phi i32 [ 0, %97 ], [ %115, %99 ]
  %102 = phi i32 [ %98, %97 ], [ %117, %99 ]
  %103 = shl i32 1, %100
  %104 = or i32 %103, %101
  %105 = mul i32 %104, %104
  %106 = icmp ugt i32 %105, %63
  %107 = select i1 %106, i32 %103, i32 0
  %108 = sub i32 %104, %107
  %109 = add nsw i32 %100, -1
  %110 = shl i32 1, %109
  %111 = or i32 %110, %108
  %112 = mul i32 %111, %111
  %113 = icmp ugt i32 %112, %63
  %114 = select i1 %113, i32 %110, i32 0
  %115 = sub i32 %111, %114
  %116 = add nsw i32 %100, -2
  %117 = add i32 %102, -2
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %99

119:                                              ; preds = %99, %89
  %120 = phi i32 [ undef, %89 ], [ %115, %99 ]
  %121 = phi i32 [ %93, %89 ], [ %116, %99 ]
  %122 = phi i32 [ 0, %89 ], [ %115, %99 ]
  %123 = icmp eq i32 %95, 0
  br i1 %123, label %131, label %124

124:                                              ; preds = %119
  %125 = shl i32 1, %121
  %126 = or i32 %125, %122
  %127 = mul i32 %126, %126
  %128 = icmp ugt i32 %127, %63
  %129 = select i1 %128, i32 %125, i32 0
  %130 = sub i32 %126, %129
  br label %131

131:                                              ; preds = %119, %124
  %132 = phi i32 [ %120, %119 ], [ %130, %124 ]
  %133 = mul i32 %132, %132
  %134 = add i32 %132, 1
  %135 = add i32 %134, %133
  %136 = icmp ule i32 %135, %63
  %137 = zext i1 %136 to i32
  %138 = add i32 %132, %137
  %139 = shl i32 %138, 4
  %140 = udiv i32 %139, %75
  %141 = ashr i32 %16, 5
  %142 = ashr i32 %140, %141
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %176, label %144

144:                                              ; preds = %131
  br i1 %18, label %145, label %146

145:                                              ; preds = %144
  call void @vp8_filter_by_weight16x16_sse2(i8* %3, i32 %6, i8* %8, i32 %11, i32 %142) #5
  call void @vp8_filter_by_weight8x8_sse2(i8* %4, i32 %7, i8* %9, i32 %12, i32 %142) #5
  call void @vp8_filter_by_weight8x8_sse2(i8* %5, i32 %7, i8* %10, i32 %12, i32 %142) #5
  br label %176

146:                                              ; preds = %144
  call void @vp8_filter_by_weight8x8_sse2(i8* %3, i32 %6, i8* %8, i32 %11, i32 %142) #5
  call void @vp8_filter_by_weight4x4_c(i8* %4, i32 %7, i8* %9, i32 %12, i32 %142) #5
  call void @vp8_filter_by_weight4x4_c(i8* %5, i32 %7, i8* %10, i32 %12, i32 %142) #5
  br label %176

147:                                              ; preds = %85, %79
  br i1 %18, label %148, label %149

148:                                              ; preds = %147
  call void @vp8_copy_mem16x16_sse2(i8* %3, i32 %6, i8* %8, i32 %11) #5
  call void @vp8_copy_mem8x8_mmx(i8* %4, i32 %7, i8* %9, i32 %12) #5
  call void @vp8_copy_mem8x8_mmx(i8* %5, i32 %7, i8* %10, i32 %12) #5
  br label %176

149:                                              ; preds = %147
  call void @vp8_copy_mem8x8_mmx(i8* %3, i32 %6, i8* %8, i32 %11) #5
  %150 = icmp sgt i32 %0, 1
  br i1 %150, label %151, label %176

151:                                              ; preds = %149
  %152 = sext i32 %15 to i64
  %153 = sext i32 %7 to i64
  %154 = sext i32 %12 to i64
  br label %160

155:                                              ; preds = %160
  br i1 %150, label %156, label %176

156:                                              ; preds = %155
  %157 = sext i32 %15 to i64
  %158 = sext i32 %7 to i64
  %159 = sext i32 %12 to i64
  br label %168

160:                                              ; preds = %151, %160
  %161 = phi i8* [ %9, %151 ], [ %166, %160 ]
  %162 = phi i8* [ %4, %151 ], [ %165, %160 ]
  %163 = phi i32 [ 0, %151 ], [ %164, %160 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %161, i8* align 1 %162, i64 %152, i1 false)
  %164 = add nuw nsw i32 %163, 1
  %165 = getelementptr inbounds i8, i8* %162, i64 %153
  %166 = getelementptr inbounds i8, i8* %161, i64 %154
  %167 = icmp slt i32 %164, %15
  br i1 %167, label %160, label %155

168:                                              ; preds = %156, %168
  %169 = phi i8* [ %10, %156 ], [ %174, %168 ]
  %170 = phi i8* [ %5, %156 ], [ %173, %168 ]
  %171 = phi i32 [ 0, %156 ], [ %172, %168 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %169, i8* align 1 %170, i64 %157, i1 false)
  %172 = add nuw nsw i32 %171, 1
  %173 = getelementptr inbounds i8, i8* %170, i64 %158
  %174 = getelementptr inbounds i8, i8* %169, i64 %159
  %175 = icmp slt i32 %172, %15
  br i1 %175, label %168, label %176

176:                                              ; preds = %168, %149, %155, %146, %145, %131, %148
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #5
  ret void
}

declare void @vp8_copy_mem8x8_mmx(i8*, i32, i8*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @vp8_copy_mem16x16_sse2(i8*, i32, i8*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @vpx_variance8x8_sse2(i8*, i32, i8*, i32, i32*) local_unnamed_addr #3

declare i32 @vpx_variance4x4_sse2(i8*, i32, i8*, i32, i32*) local_unnamed_addr #3

declare void @vp8_filter_by_weight16x16_sse2(i8*, i32, i8*, i32, i32) local_unnamed_addr #3

declare void @vp8_filter_by_weight8x8_sse2(i8*, i32, i8*, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = !{i32 7, i32 33}
!10 = !{i32 1, i32 33}
