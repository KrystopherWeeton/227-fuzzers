; ModuleID = '../../courgette/disassembler_elf_32.cc'
source_filename = "../../courgette/disassembler_elf_32.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::nothrow_t" = type { i8 }
%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.courgette::DisassemblerElf32::Elf32RvaVisitor_Rel32" = type { %"class.courgette::VectorRvaVisitor" }
%"class.courgette::VectorRvaVisitor" = type { %"class.courgette::RvaVisitor", %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter" }
%"class.courgette::RvaVisitor" = type { i32 (...)** }
%"class.std::__1::__wrap_iter" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.courgette::DisassemblerElf32::TypedRVA"* }
%"class.courgette::DisassemblerElf32::TypedRVA" = type { i32 (...)**, i32, i32, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::unique_ptr"* }
%"class.courgette::DisassemblerElf32" = type { %"class.courgette::Disassembler", %struct.Elf32_Ehdr*, i16, %"class.std::__1::vector.4", %"class.std::__1::vector.11", %struct.Elf32_Phdr*, i16, i8*, i64, %"class.std::__1::vector.18", %"class.std::__1::vector" }
%"class.courgette::Disassembler" = type { %"class.courgette::AddressTranslator", i8*, i64, i8*, i8* }
%"class.courgette::AddressTranslator" = type { i32 (...)** }
%struct.Elf32_Ehdr = type { [16 x i8], i16, i16, i32, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16 }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { %struct.Elf32_Shdr*, %struct.Elf32_Shdr*, %"class.std::__1::__compressed_pair.6" }
%struct.Elf32_Shdr = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %struct.Elf32_Shdr* }
%"class.std::__1::vector.11" = type { %"class.std::__1::__vector_base.12" }
%"class.std::__1::__vector_base.12" = type { i16*, i16*, %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { i16* }
%struct.Elf32_Phdr = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.std::__1::vector.18" = type { %"class.std::__1::__vector_base.19" }
%"class.std::__1::__vector_base.19" = type { i32*, i32*, %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { i32* }
%class.anon = type { %"class.std::__1::vector.4"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::vector.31" = type { %"class.std::__1::__vector_base.32" }
%"class.std::__1::__vector_base.32" = type { i64*, i64*, %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { i64* }
%"struct.std::__1::__less.66" = type { i8 }
%struct.Elf32_Rel = type { i32, i32 }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.courgette::Disassembler::RvaVisitor_Abs32" = type { %"class.courgette::VectorRvaVisitor.41", %"class.courgette::AddressTranslator"* }
%"class.courgette::VectorRvaVisitor.41" = type { %"class.courgette::RvaVisitor", %"class.std::__1::__wrap_iter.38", %"class.std::__1::__wrap_iter.38" }
%"class.std::__1::__wrap_iter.38" = type { i32* }
%"class.courgette::AssemblyProgram" = type { i32, i64, %"class.courgette::LabelManager", %"class.courgette::LabelManager", %"class.std::__1::vector.49", %"class.std::__1::vector.49" }
%"class.courgette::LabelManager" = type { %"class.std::__1::vector.42" }
%"class.std::__1::vector.42" = type { %"class.std::__1::__vector_base.43" }
%"class.std::__1::__vector_base.43" = type { %"class.courgette::Label"*, %"class.courgette::Label"*, %"class.std::__1::__compressed_pair.44" }
%"class.courgette::Label" = type { i32, i32, i32 }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.courgette::Label"* }
%"class.std::__1::vector.49" = type { %"class.std::__1::__vector_base.50" }
%"class.std::__1::__vector_base.50" = type { %"class.courgette::Label"**, %"class.courgette::Label"**, %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"class.courgette::Label"** }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.56" }
%"struct.std::__1::__atomic_base.56" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.courgette::InstructionReceptor" = type { i32 (...)** }
%"struct.std::__1::__less" = type { i8 }
%"class.std::__1::__wrap_iter.57" = type { i64* }
%"class.std::__1::__wrap_iter.39" = type { %"class.std::__1::unique_ptr"* }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>

$_ZNSt3__16vectorI10Elf32_ShdrNS_9allocatorIS1_EEE6assignIPKS1_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_ = comdat any

$_ZN9courgette17DisassemblerElf328TypedRVA15IsLessThanByRVAERKNSt3__110unique_ptrIS1_NS2_14default_deleteIS1_EEEES8_ = comdat any

$_ZN9courgette17DisassemblerElf328TypedRVA22IsLessThanByFileOffsetERKNSt3__110unique_ptrIS1_NS2_14default_deleteIS1_EEEES8_ = comdat any

$_ZN9courgette17DisassemblerElf3221Elf32RvaVisitor_Rel32D0Ev = comdat any

$_ZNK9courgette16VectorRvaVisitorINSt3__110unique_ptrINS_17DisassemblerElf328TypedRVAENS1_14default_deleteIS4_EEEEE9RemainingEv = comdat any

$_ZN9courgette16VectorRvaVisitorINSt3__110unique_ptrINS_17DisassemblerElf328TypedRVAENS1_14default_deleteIS4_EEEEE4NextEv = comdat any

$_ZN9courgette17DisassemblerElf32D2Ev = comdat any

$_ZN9courgette17DisassemblerElf32D0Ev = comdat any

$_ZNK9courgette17DisassemblerElf3210image_baseEv = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$_ZN9courgette16VectorRvaVisitorINSt3__110unique_ptrINS_17DisassemblerElf328TypedRVAENS1_14default_deleteIS4_EEEEED0Ev = comdat any

$_ZN9courgette10RvaVisitorD2Ev = comdat any

$_ZNSt3__16__sortIRPFbRKNS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEES9_EPS7_EEvT0_SE_T_ = comdat any

$_ZNSt3__17__sort4IRPFbRKNS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEES9_EPS7_EEjT0_SE_SE_SE_T_ = comdat any

$_ZNSt3__118__insertion_sort_3IRPFbRKNS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEES9_EPS7_EEvT0_SE_T_ = comdat any

$_ZNSt3__127__insertion_sort_incompleteIRPFbRKNS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEES9_EPS7_EEbT0_SE_T_ = comdat any

$_ZNSt3__16vectorINS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE8__appendEm = comdat any

$_ZN4base8internal7InvokerINS0_9BindStateIMN9courgette17DisassemblerElf32EKFbPNS3_15AssemblyProgramEPNS3_19InstructionReceptorEEJNS0_17UnretainedWrapperIS4_EES6_EEEFbS8_EE3RunEPNS0_13BindStateBaseES8_ = comdat any

$_ZN4base8internal9BindStateIMN9courgette17DisassemblerElf32EKFbPNS2_15AssemblyProgramEPNS2_19InstructionReceptorEEJNS0_17UnretainedWrapperIS3_EES5_EE7DestroyEPKNS0_13BindStateBaseE = comdat any

$_ZTVN9courgette16VectorRvaVisitorINSt3__110unique_ptrINS_17DisassemblerElf328TypedRVAENS1_14default_deleteIS4_EEEEEE = comdat any

@_ZTVN9courgette17DisassemblerElf3221Elf32RvaVisitor_Rel32E = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.courgette::RvaVisitor"*)* @_ZN9courgette10RvaVisitorD2Ev to i8*), i8* bitcast (void (%"class.courgette::DisassemblerElf32::Elf32RvaVisitor_Rel32"*)* @_ZN9courgette17DisassemblerElf3221Elf32RvaVisitor_Rel32D0Ev to i8*), i8* bitcast (i64 (%"class.courgette::VectorRvaVisitor"*)* @_ZNK9courgette16VectorRvaVisitorINSt3__110unique_ptrINS_17DisassemblerElf328TypedRVAENS1_14default_deleteIS4_EEEEE9RemainingEv to i8*), i8* bitcast (i32 (%"class.courgette::DisassemblerElf32::Elf32RvaVisitor_Rel32"*)* @_ZNK9courgette17DisassemblerElf3221Elf32RvaVisitor_Rel323GetEv to i8*), i8* bitcast (void (%"class.courgette::VectorRvaVisitor"*)* @_ZN9courgette16VectorRvaVisitorINSt3__110unique_ptrINS_17DisassemblerElf328TypedRVAENS1_14default_deleteIS4_EEEEE4NextEv to i8*)] }, align 8
@_ZTVN9courgette17DisassemblerElf32E = hidden unnamed_addr constant { [22 x i8*] } { [22 x i8*] [i8* null, i8* null, i8* bitcast (i32 (%"class.courgette::DisassemblerElf32"*, i64)* @_ZNK9courgette17DisassemblerElf3215FileOffsetToRVAEm to i8*), i8* bitcast (i64 (%"class.courgette::DisassemblerElf32"*, i32)* @_ZNK9courgette17DisassemblerElf3215RVAToFileOffsetEj to i8*), i8* bitcast (i8* (%"class.courgette::Disassembler"*, i64)* @_ZNK9courgette12Disassembler19FileOffsetToPointerEm to i8*), i8* bitcast (i8* (%"class.courgette::Disassembler"*, i32)* @_ZNK9courgette12Disassembler12RVAToPointerEj to i8*), i8* bitcast (i32 (%"class.courgette::DisassemblerElf32"*, i8*)* @_ZNK9courgette17DisassemblerElf3218PointerToTargetRVAEPKh to i8*), i8* bitcast (void (%"class.courgette::DisassemblerElf32"*)* @_ZN9courgette17DisassemblerElf32D2Ev to i8*), i8* bitcast (void (%"class.courgette::DisassemblerElf32"*)* @_ZN9courgette17DisassemblerElf32D0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i64 (%"class.courgette::DisassemblerElf32"*)* @_ZNK9courgette17DisassemblerElf3210image_baseEv to i8*), i8* bitcast (i1 (%"class.courgette::DisassemblerElf32"*)* @_ZN9courgette17DisassemblerElf3221ExtractAbs32LocationsEv to i8*), i8* bitcast (i1 (%"class.courgette::DisassemblerElf32"*)* @_ZN9courgette17DisassemblerElf3221ExtractRel32LocationsEv to i8*), i8* bitcast (%"class.courgette::RvaVisitor"* (%"class.courgette::DisassemblerElf32"*)* @_ZN9courgette17DisassemblerElf3227CreateAbs32TargetRvaVisitorEv to i8*), i8* bitcast (%"class.courgette::RvaVisitor"* (%"class.courgette::DisassemblerElf32"*)* @_ZN9courgette17DisassemblerElf3227CreateRel32TargetRvaVisitorEv to i8*), i8* bitcast (void (%"class.courgette::DisassemblerElf32"*, %"class.courgette::AssemblyProgram"*)* @_ZN9courgette17DisassemblerElf3226RemoveUnusedRel32LocationsEPNS_15AssemblyProgramE to i8*), i8* bitcast (i1 (%"class.courgette::DisassemblerElf32"*)* @_ZN9courgette17DisassemblerElf3211ParseHeaderEv to i8*), i8* bitcast (void (%"class.base::RepeatingCallback"*, %"class.courgette::DisassemblerElf32"*, %"class.courgette::AssemblyProgram"*)* @_ZN9courgette17DisassemblerElf3223GetInstructionGeneratorEPNS_15AssemblyProgramE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@.str = private unnamed_addr constant [10 x i8] c"Too small\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"No Magic Number\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"Not a supported architecture\00", align 1
@.str.3 = private unnamed_addr constant [41 x i8] c"Not an executable file or shared library\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"Unknown file version\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"Unexpected section header size\00", align 1
@.str.6 = private unnamed_addr constant [35 x i8] c"Out of bounds section header table\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"Out of bound section\00", align 1
@.str.8 = private unnamed_addr constant [35 x i8] c"Out of bounds program header table\00", align 1
@.str.9 = private unnamed_addr constant [21 x i8] c"Out of bound segment\00", align 1
@.str.10 = private unnamed_addr constant [23 x i8] c"Missing string section\00", align 1
@.str.11 = private unnamed_addr constant [35 x i8] c"Out of bounds string section index\00", align 1
@.str.12 = private unnamed_addr constant [23 x i8] c"Invalid string section\00", align 1
@.str.13 = private unnamed_addr constant [34 x i8] c"String section does not terminate\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c".text\00", align 1
@.str.15 = private unnamed_addr constant [39 x i8] c"../../courgette/disassembler_elf_32.cc\00", align 1
@.str.16 = private unnamed_addr constant [58 x i8] c"Warning: Found no rel32 addresses. Missing .text section?\00", align 1
@.str.17 = private unnamed_addr constant [52 x i8] c"Skipping relocation entry for unsupported section: \00", align 1
@.str.18 = private unnamed_addr constant [49 x i8] c"Relocation address in unrecognized ELF section: \00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"label\00", align 1
@.str.20 = private unnamed_addr constant [70 x i8] c"RVA(origin + (file_offset - origin_offset)) == (**current_rel)->rva()\00", align 1
@_ZSt7nothrow = external global %"struct.std::nothrow_t", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8
@_ZTVN9courgette16VectorRvaVisitorINSt3__110unique_ptrINS_17DisassemblerElf328TypedRVAENS1_14default_deleteIS4_EEEEEE = linkonce_odr hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.courgette::RvaVisitor"*)* @_ZN9courgette10RvaVisitorD2Ev to i8*), i8* bitcast (void (%"class.courgette::VectorRvaVisitor"*)* @_ZN9courgette16VectorRvaVisitorINSt3__110unique_ptrINS_17DisassemblerElf328TypedRVAENS1_14default_deleteIS4_EEEEED0Ev to i8*), i8* bitcast (i64 (%"class.courgette::VectorRvaVisitor"*)* @_ZNK9courgette16VectorRvaVisitorINSt3__110unique_ptrINS_17DisassemblerElf328TypedRVAENS1_14default_deleteIS4_EEEEE9RemainingEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.courgette::VectorRvaVisitor"*)* @_ZN9courgette16VectorRvaVisitorINSt3__110unique_ptrINS_17DisassemblerElf328TypedRVAENS1_14default_deleteIS4_EEEEE4NextEv to i8*)] }, comdat, align 8

@_ZN9courgette17DisassemblerElf3221Elf32RvaVisitor_Rel32C1ERKNSt3__16vectorINS2_10unique_ptrINS0_8TypedRVAENS2_14default_deleteIS5_EEEENS2_9allocatorIS8_EEEE = hidden unnamed_addr alias void (%"class.courgette::DisassemblerElf32::Elf32RvaVisitor_Rel32"*, %"class.std::__1::vector"*), void (%"class.courgette::DisassemblerElf32::Elf32RvaVisitor_Rel32"*, %"class.std::__1::vector"*)* @_ZN9courgette17DisassemblerElf3221Elf32RvaVisitor_Rel32C2ERKNSt3__16vectorINS2_10unique_ptrINS0_8TypedRVAENS2_14default_deleteIS5_EEEENS2_9allocatorIS8_EEEE

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN9courgette17DisassemblerElf3221Elf32RvaVisitor_Rel32C2ERKNSt3__16vectorINS2_10unique_ptrINS0_8TypedRVAENS2_14default_deleteIS5_EEEENS2_9allocatorIS8_EEEE(%"class.courgette::DisassemblerElf32::Elf32RvaVisitor_Rel32"* nocapture, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.courgette::DisassemblerElf32::Elf32RvaVisitor_Rel32", %"class.courgette::DisassemblerElf32::Elf32RvaVisitor_Rel32"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN9courgette16VectorRvaVisitorINSt3__110unique_ptrINS_17DisassemblerElf328TypedRVAENS1_14default_deleteIS4_EEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = bitcast %"class.std::__1::vector"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.courgette::DisassemblerElf32::Elf32RvaVisitor_Rel32", %"class.courgette::DisassemblerElf32::Elf32RvaVisitor_Rel32"* %0, i64 0, i32 0, i32 1, i32 0
  %7 = bitcast %"class.std::__1::unique_ptr"** %6 to i64*
  store i64 %5, i64* %7, align 8
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %9 = bitcast %"class.std::__1::unique_ptr"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.courgette::DisassemblerElf32::Elf32RvaVisitor_Rel32", %"class.courgette::DisassemblerElf32::Elf32RvaVisitor_Rel32"* %0, i64 0, i32 0, i32 2, i32 0
  %12 = bitcast %"class.std::__1::unique_ptr"** %11 to i64*
  store i64 %10, i64* %12, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN9courgette17DisassemblerElf3221Elf32RvaVisitor_Rel32E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK9courgette17DisassemblerElf3221Elf32RvaVisitor_Rel323GetEv(%"class.courgette::DisassemblerElf32::Elf32RvaVisitor_Rel32"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.courgette::DisassemblerElf32::Elf32RvaVisitor_Rel32", %"class.courgette::DisassemblerElf32::Elf32RvaVisitor_Rel32"* %0, i64 0, i32 0, i32 1, i32 0
  %3 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %3, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %4, align 8
  %6 = getelementptr inbounds %"class.courgette::DisassemblerElf32::TypedRVA", %"class.courgette::DisassemblerElf32::TypedRVA"* %5, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %"class.courgette::DisassemblerElf32::TypedRVA", %"class.courgette::DisassemblerElf32::TypedRVA"* %5, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = add i32 %9, %7
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9courgette17DisassemblerElf32C2EPKhm(%"class.courgette::DisassemblerElf32"*, i8*, i64) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 0
  tail call void @_ZN9courgette12DisassemblerC2EPKhm(%"class.courgette::Disassembler"* %4, i8* %1, i64 %2) #16
  %5 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [22 x i8*] }, { [22 x i8*] }* @_ZTVN9courgette17DisassemblerElf32E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 1
  store %struct.Elf32_Ehdr* null, %struct.Elf32_Ehdr** %6, align 8
  %7 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 2
  store i16 0, i16* %7, align 8
  %8 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 3
  %9 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 7
  store i8* null, i8** %9, align 8
  %10 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 9
  %11 = bitcast %"class.std::__1::vector.4"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 58, i1 false)
  %12 = bitcast %"class.std::__1::vector.18"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 48, i1 false)
  ret void
}

declare void @_ZN9courgette12DisassemblerC2EPKhm(%"class.courgette::Disassembler"*, i8*, i64) unnamed_addr #3

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZNK9courgette17DisassemblerElf3215FileOffsetToRVAEm(%"class.courgette::DisassemblerElf32"* nocapture readonly, i64) unnamed_addr #4 align 2 {
  %3 = trunc i64 %1 to i32
  %4 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 4, i32 0, i32 0
  %5 = load i16*, i16** %4, align 8
  %6 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 4, i32 0, i32 1
  %7 = load i16*, i16** %6, align 8
  %8 = icmp eq i16* %5, %7
  br i1 %8, label %37, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 3, i32 0, i32 0
  %11 = load %struct.Elf32_Shdr*, %struct.Elf32_Shdr** %10, align 8
  br label %12

12:                                               ; preds = %9, %28
  %13 = phi i16* [ %5, %9 ], [ %29, %28 ]
  %14 = load i16, i16* %13, align 2
  %15 = zext i16 %14 to i64
  %16 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %11, i64 %15, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 8
  br i1 %18, label %28, label %19

19:                                               ; preds = %12
  %20 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %11, i64 %15, i32 4
  %21 = load i32, i32* %20, align 4
  %22 = icmp ugt i32 %21, %3
  br i1 %22, label %28, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %11, i64 %15, i32 5
  %25 = load i32, i32* %24, align 4
  %26 = add i32 %25, %21
  %27 = icmp ugt i32 %26, %3
  br i1 %27, label %31, label %28

28:                                               ; preds = %12, %19, %23
  %29 = getelementptr inbounds i16, i16* %13, i64 1
  %30 = icmp eq i16* %29, %7
  br i1 %30, label %37, label %12

31:                                               ; preds = %23
  %32 = zext i16 %14 to i64
  %33 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %11, i64 %32, i32 3
  %34 = load i32, i32* %33, align 4
  %35 = sub i32 %3, %21
  %36 = add i32 %35, %34
  br label %37

37:                                               ; preds = %28, %2, %31
  %38 = phi i32 [ %36, %31 ], [ 0, %2 ], [ 0, %28 ]
  ret i32 %38
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK9courgette17DisassemblerElf3215RVAToFileOffsetEj(%"class.courgette::DisassemblerElf32"* nocapture readonly, i32) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 2
  %4 = load i16, i16* %3, align 8
  %5 = icmp eq i16 %4, 0
  br i1 %5, label %33, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 3, i32 0, i32 0
  %8 = load %struct.Elf32_Shdr*, %struct.Elf32_Shdr** %7, align 8
  %9 = zext i16 %4 to i64
  br label %10

10:                                               ; preds = %6, %24
  %11 = phi i64 [ 0, %6 ], [ %25, %24 ]
  %12 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %8, i64 %11, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 8
  br i1 %14, label %24, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %8, i64 %11, i32 3
  %17 = load i32, i32* %16, align 4
  %18 = icmp ugt i32 %17, %1
  br i1 %18, label %24, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %8, i64 %11, i32 5
  %21 = load i32, i32* %20, align 4
  %22 = add i32 %21, %17
  %23 = icmp ugt i32 %22, %1
  br i1 %23, label %27, label %24

24:                                               ; preds = %10, %15, %19
  %25 = add nuw nsw i64 %11, 1
  %26 = icmp ult i64 %25, %9
  br i1 %26, label %10, label %33

27:                                               ; preds = %19
  %28 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %8, i64 %11, i32 4
  %29 = load i32, i32* %28, align 4
  %30 = sub i32 %1, %17
  %31 = add i32 %30, %29
  %32 = zext i32 %31 to i64
  br label %33

33:                                               ; preds = %24, %2, %27
  %34 = phi i64 [ %32, %27 ], [ -1, %2 ], [ -1, %24 ]
  ret i64 %34
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK9courgette17DisassemblerElf3218PointerToTargetRVAEPKh(%"class.courgette::DisassemblerElf32"* nocapture readnone, i8* nocapture readonly) unnamed_addr #1 align 2 {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 4
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN9courgette17DisassemblerElf3211ParseHeaderEv(%"class.courgette::DisassemblerElf32"*) unnamed_addr #2 align 2 {
  %2 = alloca %class.anon, align 8
  %3 = alloca %"class.std::__1::vector.11", align 16
  %4 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = icmp ult i64 %6, 52
  br i1 %7, label %8, label %10

8:                                                ; preds = %1
  %9 = tail call zeroext i1 @_ZN9courgette12Disassembler3BadEPKc(%"class.courgette::Disassembler"* %4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0)) #16
  br label %320

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 1
  %14 = bitcast %struct.Elf32_Ehdr** %13 to i8**
  store i8* %12, i8** %14, align 8
  %15 = load i8, i8* %12, align 4
  %16 = icmp eq i8 %15, 127
  br i1 %16, label %17, label %29

17:                                               ; preds = %10
  %18 = getelementptr inbounds i8, i8* %12, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = icmp eq i8 %19, 69
  br i1 %20, label %21, label %29

21:                                               ; preds = %17
  %22 = getelementptr inbounds i8, i8* %12, i64 2
  %23 = load i8, i8* %22, align 2
  %24 = icmp eq i8 %23, 76
  br i1 %24, label %25, label %29

25:                                               ; preds = %21
  %26 = getelementptr inbounds i8, i8* %12, i64 3
  %27 = load i8, i8* %26, align 1
  %28 = icmp eq i8 %27, 70
  br i1 %28, label %31, label %29

29:                                               ; preds = %25, %21, %17, %10
  %30 = tail call zeroext i1 @_ZN9courgette12Disassembler3BadEPKc(%"class.courgette::Disassembler"* %4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0)) #16
  br label %320

31:                                               ; preds = %25
  %32 = getelementptr inbounds i8, i8* %12, i64 4
  %33 = load i8, i8* %32, align 4
  %34 = icmp eq i8 %33, 1
  br i1 %34, label %35, label %50

35:                                               ; preds = %31
  %36 = getelementptr inbounds i8, i8* %12, i64 5
  %37 = load i8, i8* %36, align 1
  %38 = icmp eq i8 %37, 1
  br i1 %38, label %39, label %50

39:                                               ; preds = %35
  %40 = getelementptr inbounds i8, i8* %12, i64 18
  %41 = bitcast i8* %40 to i16*
  %42 = load i16, i16* %41, align 2
  %43 = zext i16 %42 to i32
  %44 = bitcast %"class.courgette::DisassemblerElf32"* %0 to i32 (%"class.courgette::DisassemblerElf32"*)***
  %45 = load i32 (%"class.courgette::DisassemblerElf32"*)**, i32 (%"class.courgette::DisassemblerElf32"*)*** %44, align 8
  %46 = getelementptr inbounds i32 (%"class.courgette::DisassemblerElf32"*)*, i32 (%"class.courgette::DisassemblerElf32"*)** %45, i64 16
  %47 = load i32 (%"class.courgette::DisassemblerElf32"*)*, i32 (%"class.courgette::DisassemblerElf32"*)** %46, align 8
  %48 = tail call i32 %47(%"class.courgette::DisassemblerElf32"* %0) #16
  %49 = icmp eq i32 %48, %43
  br i1 %49, label %52, label %50

50:                                               ; preds = %39, %35, %31
  %51 = tail call zeroext i1 @_ZN9courgette12Disassembler3BadEPKc(%"class.courgette::Disassembler"* %4, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0)) #16
  br label %320

52:                                               ; preds = %39
  %53 = load %struct.Elf32_Ehdr*, %struct.Elf32_Ehdr** %13, align 8
  %54 = getelementptr inbounds %struct.Elf32_Ehdr, %struct.Elf32_Ehdr* %53, i64 0, i32 1
  %55 = load i16, i16* %54, align 4
  %56 = and i16 %55, -2
  %57 = icmp eq i16 %56, 2
  br i1 %57, label %60, label %58

58:                                               ; preds = %52
  %59 = tail call zeroext i1 @_ZN9courgette12Disassembler3BadEPKc(%"class.courgette::Disassembler"* %4, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.3, i64 0, i64 0)) #16
  br label %320

60:                                               ; preds = %52
  %61 = getelementptr inbounds %struct.Elf32_Ehdr, %struct.Elf32_Ehdr* %53, i64 0, i32 3
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, 1
  br i1 %63, label %64, label %68

64:                                               ; preds = %60
  %65 = getelementptr inbounds %struct.Elf32_Ehdr, %struct.Elf32_Ehdr* %53, i64 0, i32 0, i64 6
  %66 = load i8, i8* %65, align 2
  %67 = icmp eq i8 %66, 1
  br i1 %67, label %70, label %68

68:                                               ; preds = %64, %60
  %69 = tail call zeroext i1 @_ZN9courgette12Disassembler3BadEPKc(%"class.courgette::Disassembler"* %4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0)) #16
  br label %320

70:                                               ; preds = %64
  %71 = getelementptr inbounds %struct.Elf32_Ehdr, %struct.Elf32_Ehdr* %53, i64 0, i32 11
  %72 = load i16, i16* %71, align 2
  %73 = icmp eq i16 %72, 40
  br i1 %73, label %76, label %74

74:                                               ; preds = %70
  %75 = tail call zeroext i1 @_ZN9courgette12Disassembler3BadEPKc(%"class.courgette::Disassembler"* %4, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i64 0, i64 0)) #16
  br label %320

76:                                               ; preds = %70
  %77 = getelementptr inbounds %struct.Elf32_Ehdr, %struct.Elf32_Ehdr* %53, i64 0, i32 6
  %78 = load i32, i32* %77, align 4
  %79 = icmp ult i32 %78, 52
  br i1 %79, label %91, label %80

80:                                               ; preds = %76
  %81 = zext i32 %78 to i64
  %82 = load i64, i64* %5, align 8
  %83 = icmp ult i64 %82, %81
  br i1 %83, label %91, label %84

84:                                               ; preds = %80
  %85 = getelementptr inbounds %struct.Elf32_Ehdr, %struct.Elf32_Ehdr* %53, i64 0, i32 12
  %86 = load i16, i16* %85, align 4
  %87 = zext i16 %86 to i64
  %88 = sub i64 %82, %81
  %89 = udiv i64 %88, 40
  %90 = icmp ult i64 %89, %87
  br i1 %90, label %91, label %93

91:                                               ; preds = %84, %80, %76
  %92 = tail call zeroext i1 @_ZN9courgette12Disassembler3BadEPKc(%"class.courgette::Disassembler"* %4, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i64 0, i64 0)) #16
  br label %320

93:                                               ; preds = %84
  %94 = bitcast %"class.courgette::DisassemblerElf32"* %0 to i8* (%"class.courgette::Disassembler"*, i64)***
  %95 = load i8* (%"class.courgette::Disassembler"*, i64)**, i8* (%"class.courgette::Disassembler"*, i64)*** %94, align 8
  %96 = getelementptr inbounds i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %95, i64 2
  %97 = load i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %96, align 8
  %98 = tail call i8* %97(%"class.courgette::Disassembler"* %4, i64 %81) #16
  %99 = bitcast i8* %98 to %struct.Elf32_Shdr*
  %100 = load %struct.Elf32_Ehdr*, %struct.Elf32_Ehdr** %13, align 8
  %101 = getelementptr inbounds %struct.Elf32_Ehdr, %struct.Elf32_Ehdr* %100, i64 0, i32 12
  %102 = load i16, i16* %101, align 4
  %103 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 2
  store i16 %102, i16* %103, align 8
  %104 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 3
  %105 = zext i16 %102 to i64
  %106 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %99, i64 %105
  tail call void @_ZNSt3__16vectorI10Elf32_ShdrNS_9allocatorIS1_EEE6assignIPKS1_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.4"* %104, %struct.Elf32_Shdr* %99, %struct.Elf32_Shdr* %106)
  %107 = load i16, i16* %103, align 8
  %108 = icmp eq i16 %107, 0
  br i1 %108, label %109, label %112

109:                                              ; preds = %93
  %110 = bitcast %"class.std::__1::vector.4"* %104 to i64*
  %111 = load i64, i64* %110, align 8, !noalias !2
  br label %139

112:                                              ; preds = %93
  %113 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 3, i32 0, i32 0
  %114 = load %struct.Elf32_Shdr*, %struct.Elf32_Shdr** %113, align 8
  %115 = zext i16 %107 to i64
  %116 = ptrtoint %struct.Elf32_Shdr* %114 to i64
  br label %117

117:                                              ; preds = %134, %112
  %118 = phi i64 [ 0, %112 ], [ %135, %134 ]
  %119 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %114, i64 %118, i32 1
  %120 = load i32, i32* %119, align 4
  %121 = icmp eq i32 %120, 8
  br i1 %121, label %134, label %122

122:                                              ; preds = %117
  %123 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %114, i64 %118, i32 4
  %124 = load i32, i32* %123, align 4
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %114, i64 %118, i32 5
  %127 = load i32, i32* %126, align 4
  %128 = zext i32 %127 to i64
  %129 = load i64, i64* %5, align 8
  %130 = icmp uge i64 %129, %125
  %131 = sub i64 %129, %125
  %132 = icmp uge i64 %131, %128
  %133 = and i1 %130, %132
  br i1 %133, label %134, label %137

134:                                              ; preds = %122, %117
  %135 = add nuw nsw i64 %118, 1
  %136 = icmp eq i64 %135, %115
  br i1 %136, label %139, label %117

137:                                              ; preds = %122
  %138 = tail call zeroext i1 @_ZN9courgette12Disassembler3BadEPKc(%"class.courgette::Disassembler"* %4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0)) #16
  br label %320

139:                                              ; preds = %134, %109
  %140 = phi i64 [ %111, %109 ], [ %116, %134 ]
  %141 = bitcast %"class.std::__1::vector.11"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %141) #16
  %142 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 3, i32 0, i32 1
  %143 = bitcast %struct.Elf32_Shdr** %142 to i64*
  %144 = load i64, i64* %143, align 8, !noalias !2
  %145 = sub i64 %144, %140
  %146 = sdiv exact i64 %145, 40
  %147 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %3, i64 0, i32 0, i32 0
  %148 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %3, i64 0, i32 0, i32 1
  %149 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %141, i8 0, i64 24, i1 false) #16, !alias.scope !2
  %150 = icmp eq i64 %145, 0
  br i1 %150, label %172, label %151

151:                                              ; preds = %139
  %152 = icmp slt i64 %145, 0
  br i1 %152, label %153, label %155

153:                                              ; preds = %151
  %154 = bitcast %"class.std::__1::vector.11"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %154) #17
  unreachable

155:                                              ; preds = %151
  %156 = shl nsw i64 %146, 1
  %157 = tail call i8* @_Znwm(i64 %156) #18
  %158 = bitcast i8* %157 to i16*
  %159 = bitcast %"class.std::__1::vector.11"* %3 to i8**
  store i8* %157, i8** %159, align 16, !alias.scope !2
  %160 = getelementptr inbounds i16, i16* %158, i64 %146
  store i16* %160, i16** %149, align 16, !alias.scope !2
  %161 = bitcast i16** %148 to i64*
  %162 = ptrtoint i8* %157 to i64
  %163 = add nsw i64 %146, -1
  %164 = getelementptr i16, i16* %158, i64 %163
  %165 = ptrtoint i16* %164 to i64
  %166 = sub i64 2, %162
  %167 = add i64 %166, %165
  %168 = and i64 %167, -2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %157, i8 0, i64 %168, i1 false) #16, !noalias !2
  %169 = ptrtoint i16* %160 to i64
  store i64 %169, i64* %161, align 8, !alias.scope !2
  br label %196

170:                                              ; preds = %196
  %171 = load i16*, i16** %148, align 8, !alias.scope !2
  br label %172

172:                                              ; preds = %170, %139
  %173 = phi i16* [ %171, %170 ], [ null, %139 ]
  %174 = phi i16* [ %203, %170 ], [ null, %139 ]
  %175 = bitcast %class.anon* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %175) #16, !noalias !2
  %176 = ptrtoint i16* %174 to i64
  %177 = ptrtoint i16* %173 to i64
  %178 = getelementptr inbounds %class.anon, %class.anon* %2, i64 0, i32 0
  store %"class.std::__1::vector.4"* %104, %"class.std::__1::vector.4"** %178, align 8, !noalias !2
  %179 = sub i64 %177, %176
  %180 = ashr exact i64 %179, 1
  %181 = icmp sgt i64 %179, 256
  br i1 %181, label %182, label %193

182:                                              ; preds = %172
  %183 = icmp slt i64 %180, 4611686018427387903
  %184 = select i1 %183, i64 %180, i64 4611686018427387903
  br label %185

185:                                              ; preds = %190, %182
  %186 = phi i64 [ %191, %190 ], [ %184, %182 ]
  %187 = shl i64 %186, 1
  %188 = tail call noalias i8* @_ZnwmRKSt9nothrow_t(i64 %187, %"struct.std::nothrow_t"* nonnull dereferenceable(1) @_ZSt7nothrow) #16
  %189 = icmp eq i8* %188, null
  br i1 %189, label %190, label %194

190:                                              ; preds = %185
  %191 = lshr i64 %186, 1
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %193, label %185

193:                                              ; preds = %190, %172
  call fastcc void @"_ZNSt3__113__stable_sortIRZN9courgette12_GLOBAL__N_131GetSectionHeaderFileOffsetOrderERKNS_6vectorI10Elf32_ShdrNS_9allocatorIS4_EEEEE3$_0NS_11__wrap_iterIPtEEEEvT0_SF_T_NS_15iterator_traitsISF_E15difference_typeEPNSI_10value_typeEl"(i16* %174, i16* %173, %class.anon* nonnull dereferenceable(8) %2, i64 %180, i16* null, i64 0) #16
  br label %204

194:                                              ; preds = %185
  %195 = bitcast i8* %188 to i16*
  call fastcc void @"_ZNSt3__113__stable_sortIRZN9courgette12_GLOBAL__N_131GetSectionHeaderFileOffsetOrderERKNS_6vectorI10Elf32_ShdrNS_9allocatorIS4_EEEEE3$_0NS_11__wrap_iterIPtEEEEvT0_SF_T_NS_15iterator_traitsISF_E15difference_typeEPNSI_10value_typeEl"(i16* %174, i16* %173, %class.anon* nonnull dereferenceable(8) %2, i64 %180, i16* nonnull %195, i64 %186) #16
  call void @_ZdlPv(i8* nonnull %188) #18
  br label %204

196:                                              ; preds = %196, %155
  %197 = phi i16* [ %158, %155 ], [ %203, %196 ]
  %198 = phi i64 [ 0, %155 ], [ %201, %196 ]
  %199 = trunc i64 %198 to i16
  %200 = getelementptr inbounds i16, i16* %197, i64 %198
  store i16 %199, i16* %200, align 2
  %201 = add nuw i64 %198, 1
  %202 = icmp ult i64 %201, %146
  %203 = load i16*, i16** %147, align 16, !alias.scope !2
  br i1 %202, label %196, label %170

204:                                              ; preds = %193, %194
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %175) #16, !noalias !2
  %205 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 4
  %206 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %205, i64 0, i32 0, i32 0
  %207 = load i16*, i16** %206, align 8
  %208 = icmp eq i16* %207, null
  br i1 %208, label %215, label %209

209:                                              ; preds = %204
  %210 = ptrtoint i16* %207 to i64
  %211 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 4, i32 0, i32 1
  %212 = bitcast i16** %211 to i64*
  store i64 %210, i64* %212, align 8
  %213 = bitcast i16* %207 to i8*
  call void @_ZdlPv(i8* %213) #18
  %214 = bitcast %"class.std::__1::vector.11"* %205 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %214, i8 0, i64 24, i1 false) #16
  br label %215

215:                                              ; preds = %204, %209
  %216 = bitcast %"class.std::__1::vector.11"* %3 to <2 x i64>*
  %217 = load <2 x i64>, <2 x i64>* %216, align 16
  %218 = bitcast %"class.std::__1::vector.11"* %205 to <2 x i64>*
  store <2 x i64> %217, <2 x i64>* %218, align 8
  %219 = bitcast i16** %149 to i64*
  %220 = load i64, i64* %219, align 16
  %221 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %222 = bitcast i16** %221 to i64*
  store i64 %220, i64* %222, align 8
  %223 = load %struct.Elf32_Ehdr*, %struct.Elf32_Ehdr** %13, align 8
  %224 = getelementptr inbounds %struct.Elf32_Ehdr, %struct.Elf32_Ehdr* %223, i64 0, i32 5
  %225 = load i32, i32* %224, align 4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %141) #16
  %226 = getelementptr inbounds %struct.Elf32_Ehdr, %struct.Elf32_Ehdr* %223, i64 0, i32 5
  %227 = icmp ult i32 %225, 52
  br i1 %227, label %239, label %228

228:                                              ; preds = %215
  %229 = zext i32 %225 to i64
  %230 = getelementptr inbounds %struct.Elf32_Ehdr, %struct.Elf32_Ehdr* %223, i64 0, i32 10
  %231 = load i16, i16* %230, align 4
  %232 = load i64, i64* %5, align 8
  %233 = icmp ult i64 %232, %229
  br i1 %233, label %239, label %234

234:                                              ; preds = %228
  %235 = zext i16 %231 to i64
  %236 = sub i64 %232, %229
  %237 = lshr i64 %236, 5
  %238 = icmp ult i64 %237, %235
  br i1 %238, label %239, label %241

239:                                              ; preds = %234, %228, %215
  %240 = call zeroext i1 @_ZN9courgette12Disassembler3BadEPKc(%"class.courgette::Disassembler"* %4, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8, i64 0, i64 0)) #16
  br label %320

241:                                              ; preds = %234
  %242 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 6
  store i16 %231, i16* %242, align 8
  %243 = load i32, i32* %226, align 4
  %244 = zext i32 %243 to i64
  %245 = load i8* (%"class.courgette::Disassembler"*, i64)**, i8* (%"class.courgette::Disassembler"*, i64)*** %94, align 8
  %246 = getelementptr inbounds i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %245, i64 2
  %247 = load i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %246, align 8
  %248 = call i8* %247(%"class.courgette::Disassembler"* %4, i64 %244) #16
  %249 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 5
  %250 = bitcast %struct.Elf32_Phdr** %249 to i8**
  store i8* %248, i8** %250, align 8
  %251 = load i16, i16* %242, align 8
  %252 = icmp eq i16 %251, 0
  %253 = bitcast i8* %248 to %struct.Elf32_Phdr*
  br i1 %252, label %274, label %254

254:                                              ; preds = %241
  %255 = load i64, i64* %5, align 8
  %256 = zext i16 %251 to i64
  br label %259

257:                                              ; preds = %259
  %258 = icmp eq i64 %271, %256
  br i1 %258, label %274, label %259

259:                                              ; preds = %257, %254
  %260 = phi i64 [ 0, %254 ], [ %271, %257 ]
  %261 = getelementptr inbounds %struct.Elf32_Phdr, %struct.Elf32_Phdr* %253, i64 %260, i32 1
  %262 = load i32, i32* %261, align 4
  %263 = zext i32 %262 to i64
  %264 = getelementptr inbounds %struct.Elf32_Phdr, %struct.Elf32_Phdr* %253, i64 %260, i32 4
  %265 = load i32, i32* %264, align 4
  %266 = zext i32 %265 to i64
  %267 = icmp uge i64 %255, %263
  %268 = sub i64 %255, %263
  %269 = icmp uge i64 %268, %266
  %270 = and i1 %267, %269
  %271 = add nuw nsw i64 %260, 1
  br i1 %270, label %257, label %272

272:                                              ; preds = %259
  %273 = call zeroext i1 @_ZN9courgette12Disassembler3BadEPKc(%"class.courgette::Disassembler"* %4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9, i64 0, i64 0)) #16
  br label %320

274:                                              ; preds = %257, %241
  %275 = load %struct.Elf32_Ehdr*, %struct.Elf32_Ehdr** %13, align 8
  %276 = getelementptr inbounds %struct.Elf32_Ehdr, %struct.Elf32_Ehdr* %275, i64 0, i32 13
  %277 = load i16, i16* %276, align 2
  %278 = icmp eq i16 %277, 0
  br i1 %278, label %279, label %281

279:                                              ; preds = %274
  %280 = call zeroext i1 @_ZN9courgette12Disassembler3BadEPKc(%"class.courgette::Disassembler"* %4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0)) #16
  br label %320

281:                                              ; preds = %274
  %282 = getelementptr inbounds %struct.Elf32_Ehdr, %struct.Elf32_Ehdr* %275, i64 0, i32 12
  %283 = load i16, i16* %282, align 4
  %284 = icmp ult i16 %277, %283
  br i1 %284, label %287, label %285

285:                                              ; preds = %281
  %286 = call zeroext i1 @_ZN9courgette12Disassembler3BadEPKc(%"class.courgette::Disassembler"* %4, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.11, i64 0, i64 0)) #16
  br label %320

287:                                              ; preds = %281
  %288 = zext i16 %277 to i64
  %289 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 3, i32 0, i32 0
  %290 = load %struct.Elf32_Shdr*, %struct.Elf32_Shdr** %289, align 8
  %291 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %290, i64 %288, i32 1
  %292 = load i32, i32* %291, align 4
  %293 = icmp eq i32 %292, 3
  br i1 %293, label %296, label %294

294:                                              ; preds = %287
  %295 = call zeroext i1 @_ZN9courgette12Disassembler3BadEPKc(%"class.courgette::Disassembler"* %4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0)) #16
  br label %320

296:                                              ; preds = %287
  %297 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %290, i64 %288, i32 5
  %298 = load i32, i32* %297, align 4
  %299 = zext i32 %298 to i64
  %300 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 8
  store i64 %299, i64* %300, align 8
  %301 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %290, i64 %288, i32 4
  %302 = load i32, i32* %301, align 4
  %303 = zext i32 %302 to i64
  %304 = load i8* (%"class.courgette::Disassembler"*, i64)**, i8* (%"class.courgette::Disassembler"*, i64)*** %94, align 8
  %305 = getelementptr inbounds i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %304, i64 2
  %306 = load i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %305, align 8
  %307 = call i8* %306(%"class.courgette::Disassembler"* %4, i64 %303) #16
  %308 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 7
  store i8* %307, i8** %308, align 8
  %309 = load i64, i64* %300, align 8
  %310 = icmp eq i64 %309, 0
  br i1 %310, label %318, label %311

311:                                              ; preds = %296
  %312 = add i64 %309, -1
  %313 = getelementptr inbounds i8, i8* %307, i64 %312
  %314 = load i8, i8* %313, align 1
  %315 = icmp eq i8 %314, 0
  br i1 %315, label %318, label %316

316:                                              ; preds = %311
  %317 = call zeroext i1 @_ZN9courgette12Disassembler3BadEPKc(%"class.courgette::Disassembler"* %4, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.13, i64 0, i64 0)) #16
  br label %320

318:                                              ; preds = %311, %296
  call void @_ZN9courgette17DisassemblerElf3212UpdateLengthEv(%"class.courgette::DisassemblerElf32"* %0)
  %319 = call zeroext i1 @_ZN9courgette12Disassembler4GoodEv(%"class.courgette::Disassembler"* %4) #16
  br label %320

320:                                              ; preds = %137, %239, %272, %318, %316, %294, %285, %279, %91, %74, %68, %58, %50, %29, %8
  %321 = phi i1 [ %9, %8 ], [ %30, %29 ], [ %51, %50 ], [ %59, %58 ], [ %69, %68 ], [ %75, %74 ], [ %92, %91 ], [ %240, %239 ], [ %273, %272 ], [ %138, %137 ], [ %280, %279 ], [ %286, %285 ], [ %295, %294 ], [ %317, %316 ], [ %319, %318 ]
  ret i1 %321
}

declare zeroext i1 @_ZN9courgette12Disassembler3BadEPKc(%"class.courgette::Disassembler"*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI10Elf32_ShdrNS_9allocatorIS1_EEE6assignIPKS1_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.4"*, %struct.Elf32_Shdr*, %struct.Elf32_Shdr*) local_unnamed_addr #2 comdat align 2 {
  %4 = ptrtoint %struct.Elf32_Shdr* %2 to i64
  %5 = ptrtoint %struct.Elf32_Shdr* %1 to i64
  %6 = sub i64 %4, %5
  %7 = sdiv exact i64 %6, 40
  %8 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %struct.Elf32_Shdr** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.4"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = sdiv exact i64 %13, 40
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to %struct.Elf32_Shdr*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %struct.Elf32_Shdr** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = sdiv exact i64 %21, 40
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %1, i64 %22
  %25 = select i1 %23, %struct.Elf32_Shdr* %24, %struct.Elf32_Shdr* %2
  %26 = ptrtoint %struct.Elf32_Shdr* %25 to i64
  %27 = sub i64 %26, %5
  %28 = sdiv exact i64 %27, 40
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast %struct.Elf32_Shdr* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 %27, i1 false) #16
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = udiv exact i64 %36, 40
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast %struct.Elf32_Shdr* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 %36, i1 false) #16
  %42 = inttoptr i64 %35 to %struct.Elf32_Shdr*
  %43 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %42, i64 %39
  %44 = ptrtoint %struct.Elf32_Shdr* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %87

47:                                               ; preds = %33
  %48 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %16, i64 %28
  store %struct.Elf32_Shdr* %48, %struct.Elf32_Shdr** %18, align 8
  br label %87

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 1
  %53 = bitcast %struct.Elf32_Shdr** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #18
  %55 = bitcast %"class.std::__1::vector.4"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #16
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 461168601842738790
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector.4"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #17
  unreachable

61:                                               ; preds = %56
  %62 = sdiv exact i64 %57, 40
  %63 = icmp ult i64 %62, 230584300921369395
  br i1 %63, label %64, label %68

64:                                               ; preds = %61
  %65 = shl nsw i64 %62, 1
  %66 = icmp ult i64 %65, %7
  %67 = select i1 %66, i64 %7, i64 %65
  br label %68

68:                                               ; preds = %64, %61
  %69 = phi i64 [ %67, %64 ], [ 461168601842738790, %61 ]
  %70 = mul i64 %69, 40
  %71 = tail call i8* @_Znwm(i64 %70) #18
  %72 = bitcast i8* %71 to %struct.Elf32_Shdr*
  %73 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 1
  %74 = bitcast %struct.Elf32_Shdr** %73 to i8**
  store i8* %71, i8** %74, align 8
  %75 = bitcast %"class.std::__1::vector.4"* %0 to i8**
  store i8* %71, i8** %75, align 8
  %76 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %72, i64 %69
  store %struct.Elf32_Shdr* %76, %struct.Elf32_Shdr** %8, align 8
  %77 = bitcast %struct.Elf32_Shdr** %73 to i64*
  %78 = ptrtoint i8* %71 to i64
  %79 = icmp sgt i64 %6, 0
  br i1 %79, label %80, label %85

80:                                               ; preds = %68
  %81 = udiv exact i64 %6, 40
  %82 = bitcast %struct.Elf32_Shdr* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %71, i8* align 4 %82, i64 %6, i1 false) #16
  %83 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %72, i64 %81
  %84 = ptrtoint %struct.Elf32_Shdr* %83 to i64
  br label %85

85:                                               ; preds = %68, %80
  %86 = phi i64 [ %84, %80 ], [ %78, %68 ]
  store i64 %86, i64* %77, align 8
  br label %87

87:                                               ; preds = %45, %47, %85
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN9courgette17DisassemblerElf3218CheckSectionRangesEv(%"class.courgette::DisassemblerElf32"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 2
  %3 = load i16, i16* %2, align 8
  %4 = icmp eq i16 %3, 0
  br i1 %4, label %30, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 3, i32 0, i32 0
  %7 = load %struct.Elf32_Shdr*, %struct.Elf32_Shdr** %6, align 8
  %8 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 0, i32 2
  %9 = zext i16 %3 to i64
  br label %10

10:                                               ; preds = %5, %27
  %11 = phi i64 [ 0, %5 ], [ %28, %27 ]
  %12 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %7, i64 %11, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 8
  br i1 %14, label %27, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %7, i64 %11, i32 4
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %7, i64 %11, i32 5
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i64
  %22 = load i64, i64* %8, align 8
  %23 = icmp uge i64 %22, %18
  %24 = sub i64 %22, %18
  %25 = icmp uge i64 %24, %21
  %26 = and i1 %23, %25
  br i1 %26, label %27, label %30

27:                                               ; preds = %15, %10
  %28 = add nuw nsw i64 %11, 1
  %29 = icmp ult i64 %28, %9
  br i1 %29, label %10, label %30

30:                                               ; preds = %15, %27, %1
  %31 = phi i1 [ true, %1 ], [ true, %27 ], [ false, %15 ]
  ret i1 %31
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN9courgette17DisassemblerElf3225CheckProgramSegmentRangesEv(%"class.courgette::DisassemblerElf32"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 6
  %3 = load i16, i16* %2, align 8
  %4 = icmp eq i16 %3, 0
  br i1 %4, label %26, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 5
  %7 = load %struct.Elf32_Phdr*, %struct.Elf32_Phdr** %6, align 8
  %8 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = zext i16 %3 to i64
  br label %13

11:                                               ; preds = %13
  %12 = icmp ult i64 %25, %10
  br i1 %12, label %13, label %26

13:                                               ; preds = %5, %11
  %14 = phi i64 [ 0, %5 ], [ %25, %11 ]
  %15 = getelementptr inbounds %struct.Elf32_Phdr, %struct.Elf32_Phdr* %7, i64 %14, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %struct.Elf32_Phdr, %struct.Elf32_Phdr* %7, i64 %14, i32 4
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i64
  %21 = icmp uge i64 %9, %17
  %22 = sub i64 %9, %17
  %23 = icmp uge i64 %22, %20
  %24 = and i1 %21, %23
  %25 = add nuw nsw i64 %14, 1
  br i1 %24, label %11, label %26

26:                                               ; preds = %13, %11, %1
  %27 = phi i1 [ true, %1 ], [ true, %11 ], [ false, %13 ]
  ret i1 %27
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9courgette17DisassemblerElf3212UpdateLengthEv(%"class.courgette::DisassemblerElf32"*) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 2
  %3 = load i16, i16* %2, align 8
  %4 = icmp eq i16 %3, 0
  br i1 %4, label %30, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 3, i32 0, i32 0
  %7 = load %struct.Elf32_Shdr*, %struct.Elf32_Shdr** %6, align 8
  %8 = zext i16 %3 to i64
  %9 = and i64 %8, 1
  %10 = icmp eq i16 %3, 1
  br i1 %10, label %13, label %11

11:                                               ; preds = %5
  %12 = sub nsw i64 %8, %9
  br label %83

13:                                               ; preds = %148, %5
  %14 = phi i32 [ undef, %5 ], [ %149, %148 ]
  %15 = phi i64 [ 0, %5 ], [ %150, %148 ]
  %16 = phi i32 [ 0, %5 ], [ %149, %148 ]
  %17 = icmp eq i64 %9, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %7, i64 %15, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 8
  br i1 %21, label %30, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %7, i64 %15, i32 4
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %7, i64 %15, i32 5
  %26 = load i32, i32* %25, align 4
  %27 = add i32 %26, %24
  %28 = icmp ult i32 %16, %27
  %29 = select i1 %28, i32 %27, i32 %16
  br label %30

30:                                               ; preds = %13, %18, %22, %1
  %31 = phi i32 [ 0, %1 ], [ %14, %13 ], [ %16, %18 ], [ %29, %22 ]
  %32 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 6
  %33 = load i16, i16* %32, align 8
  %34 = icmp eq i16 %33, 0
  br i1 %34, label %104, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 5
  %37 = load %struct.Elf32_Phdr*, %struct.Elf32_Phdr** %36, align 8
  %38 = zext i16 %33 to i64
  %39 = icmp ult i16 %33, 9
  br i1 %39, label %40, label %43

40:                                               ; preds = %73, %35
  %41 = phi i64 [ 0, %35 ], [ %47, %73 ]
  %42 = phi i32 [ %31, %35 ], [ %82, %73 ]
  br label %128

43:                                               ; preds = %35
  %44 = and i64 %38, 7
  %45 = icmp eq i64 %44, 0
  %46 = select i1 %45, i64 8, i64 %44
  %47 = sub nsw i64 %38, %46
  %48 = insertelement <4 x i32> undef, i32 %31, i32 0
  %49 = shufflevector <4 x i32> %48, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %50

50:                                               ; preds = %50, %43
  %51 = phi i64 [ 0, %43 ], [ %71, %50 ]
  %52 = phi <4 x i32> [ %49, %43 ], [ %69, %50 ]
  %53 = phi <4 x i32> [ %49, %43 ], [ %70, %50 ]
  %54 = or i64 %51, 4
  %55 = getelementptr inbounds %struct.Elf32_Phdr, %struct.Elf32_Phdr* %37, i64 %51, i32 1
  %56 = getelementptr inbounds %struct.Elf32_Phdr, %struct.Elf32_Phdr* %37, i64 %54, i32 1
  %57 = bitcast i32* %55 to <32 x i32>*
  %58 = bitcast i32* %56 to <32 x i32>*
  %59 = load <32 x i32>, <32 x i32>* %57, align 4
  %60 = load <32 x i32>, <32 x i32>* %58, align 4
  %61 = shufflevector <32 x i32> %59, <32 x i32> undef, <4 x i32> <i32 0, i32 8, i32 16, i32 24>
  %62 = shufflevector <32 x i32> %60, <32 x i32> undef, <4 x i32> <i32 0, i32 8, i32 16, i32 24>
  %63 = shufflevector <32 x i32> %59, <32 x i32> undef, <4 x i32> <i32 3, i32 11, i32 19, i32 27>
  %64 = shufflevector <32 x i32> %60, <32 x i32> undef, <4 x i32> <i32 3, i32 11, i32 19, i32 27>
  %65 = add <4 x i32> %63, %61
  %66 = add <4 x i32> %64, %62
  %67 = icmp ult <4 x i32> %52, %65
  %68 = icmp ult <4 x i32> %53, %66
  %69 = select <4 x i1> %67, <4 x i32> %65, <4 x i32> %52
  %70 = select <4 x i1> %68, <4 x i32> %66, <4 x i32> %53
  %71 = add i64 %51, 8
  %72 = icmp eq i64 %71, %47
  br i1 %72, label %73, label %50, !llvm.loop !5

73:                                               ; preds = %50
  %74 = icmp ugt <4 x i32> %69, %70
  %75 = select <4 x i1> %74, <4 x i32> %69, <4 x i32> %70
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %77 = icmp ugt <4 x i32> %75, %76
  %78 = select <4 x i1> %77, <4 x i32> %75, <4 x i32> %76
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %80 = icmp ugt <4 x i32> %78, %79
  %81 = select <4 x i1> %80, <4 x i32> %78, <4 x i32> %79
  %82 = extractelement <4 x i32> %81, i32 0
  br label %40

83:                                               ; preds = %148, %11
  %84 = phi i64 [ 0, %11 ], [ %150, %148 ]
  %85 = phi i32 [ 0, %11 ], [ %149, %148 ]
  %86 = phi i64 [ %12, %11 ], [ %151, %148 ]
  %87 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %7, i64 %84, i32 1
  %88 = load i32, i32* %87, align 4
  %89 = icmp eq i32 %88, 8
  br i1 %89, label %98, label %90

90:                                               ; preds = %83
  %91 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %7, i64 %84, i32 4
  %92 = load i32, i32* %91, align 4
  %93 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %7, i64 %84, i32 5
  %94 = load i32, i32* %93, align 4
  %95 = add i32 %94, %92
  %96 = icmp ult i32 %85, %95
  %97 = select i1 %96, i32 %95, i32 %85
  br label %98

98:                                               ; preds = %83, %90
  %99 = phi i32 [ %85, %83 ], [ %97, %90 ]
  %100 = or i64 %84, 1
  %101 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %7, i64 %100, i32 1
  %102 = load i32, i32* %101, align 4
  %103 = icmp eq i32 %102, 8
  br i1 %103, label %148, label %140

104:                                              ; preds = %128, %30
  %105 = phi i32 [ %31, %30 ], [ %137, %128 ]
  %106 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 1
  %107 = load %struct.Elf32_Ehdr*, %struct.Elf32_Ehdr** %106, align 8
  %108 = getelementptr inbounds %struct.Elf32_Ehdr, %struct.Elf32_Ehdr* %107, i64 0, i32 6
  %109 = load i32, i32* %108, align 4
  %110 = getelementptr inbounds %struct.Elf32_Ehdr, %struct.Elf32_Ehdr* %107, i64 0, i32 12
  %111 = load i16, i16* %110, align 4
  %112 = zext i16 %111 to i32
  %113 = mul nuw nsw i32 %112, 40
  %114 = add i32 %113, %109
  %115 = icmp ult i32 %105, %114
  %116 = select i1 %115, i32 %114, i32 %105
  %117 = getelementptr inbounds %struct.Elf32_Ehdr, %struct.Elf32_Ehdr* %107, i64 0, i32 5
  %118 = load i32, i32* %117, align 4
  %119 = getelementptr inbounds %struct.Elf32_Ehdr, %struct.Elf32_Ehdr* %107, i64 0, i32 10
  %120 = load i16, i16* %119, align 4
  %121 = zext i16 %120 to i32
  %122 = shl nuw nsw i32 %121, 5
  %123 = add i32 %122, %118
  %124 = icmp ult i32 %116, %123
  %125 = select i1 %124, i32 %123, i32 %116
  %126 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 0
  %127 = zext i32 %125 to i64
  tail call void @_ZN9courgette12Disassembler12ReduceLengthEm(%"class.courgette::Disassembler"* %126, i64 %127) #16
  ret void

128:                                              ; preds = %40, %128
  %129 = phi i64 [ %138, %128 ], [ %41, %40 ]
  %130 = phi i32 [ %137, %128 ], [ %42, %40 ]
  %131 = getelementptr inbounds %struct.Elf32_Phdr, %struct.Elf32_Phdr* %37, i64 %129, i32 1
  %132 = load i32, i32* %131, align 4
  %133 = getelementptr inbounds %struct.Elf32_Phdr, %struct.Elf32_Phdr* %37, i64 %129, i32 4
  %134 = load i32, i32* %133, align 4
  %135 = add i32 %134, %132
  %136 = icmp ult i32 %130, %135
  %137 = select i1 %136, i32 %135, i32 %130
  %138 = add nuw nsw i64 %129, 1
  %139 = icmp ult i64 %138, %38
  br i1 %139, label %128, label %104, !llvm.loop !7

140:                                              ; preds = %98
  %141 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %7, i64 %100, i32 4
  %142 = load i32, i32* %141, align 4
  %143 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %7, i64 %100, i32 5
  %144 = load i32, i32* %143, align 4
  %145 = add i32 %144, %142
  %146 = icmp ult i32 %99, %145
  %147 = select i1 %146, i32 %145, i32 %99
  br label %148

148:                                              ; preds = %140, %98
  %149 = phi i32 [ %99, %98 ], [ %147, %140 ]
  %150 = add nuw nsw i64 %84, 2
  %151 = add i64 %86, -2
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %13, label %83
}

declare zeroext i1 @_ZN9courgette12Disassembler4GoodEv(%"class.courgette::Disassembler"*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK9courgette17DisassemblerElf3216IsValidTargetRVAEj(%"class.courgette::DisassemblerElf32"* nocapture readonly, i32) local_unnamed_addr #1 align 2 {
  %3 = icmp eq i32 %1, -1
  br i1 %3, label %29, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 6
  %6 = load i16, i16* %5, align 8
  %7 = icmp eq i16 %6, 0
  br i1 %7, label %29, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 5
  %10 = load %struct.Elf32_Phdr*, %struct.Elf32_Phdr** %9, align 8
  %11 = zext i16 %6 to i64
  br label %12

12:                                               ; preds = %8, %26
  %13 = phi i64 [ 0, %8 ], [ %27, %26 ]
  %14 = getelementptr inbounds %struct.Elf32_Phdr, %struct.Elf32_Phdr* %10, i64 %13, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %17, label %26

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.Elf32_Phdr, %struct.Elf32_Phdr* %10, i64 %13, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = icmp ugt i32 %19, %1
  br i1 %20, label %26, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.Elf32_Phdr, %struct.Elf32_Phdr* %10, i64 %13, i32 5
  %23 = load i32, i32* %22, align 4
  %24 = add i32 %23, %19
  %25 = icmp ugt i32 %24, %1
  br i1 %25, label %29, label %26

26:                                               ; preds = %21, %17, %12
  %27 = add nuw nsw i64 %13, 1
  %28 = icmp ult i64 %27, %11
  br i1 %28, label %12, label %29

29:                                               ; preds = %21, %26, %4, %2
  %30 = phi i1 [ false, %2 ], [ false, %4 ], [ true, %21 ], [ false, %26 ]
  ret i1 %30
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN9courgette17DisassemblerElf3211QuickDetectEPKhm16e_machine_values(i8* nocapture readonly, i64, i32) local_unnamed_addr #1 align 2 {
  %4 = icmp ult i64 %1, 52
  br i1 %4, label %54, label %5

5:                                                ; preds = %3
  %6 = load i8, i8* %0, align 4
  %7 = icmp eq i8 %6, 127
  br i1 %7, label %8, label %54

8:                                                ; preds = %5
  %9 = getelementptr inbounds i8, i8* %0, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 69
  br i1 %11, label %12, label %54

12:                                               ; preds = %8
  %13 = getelementptr inbounds i8, i8* %0, i64 2
  %14 = load i8, i8* %13, align 2
  %15 = icmp eq i8 %14, 76
  br i1 %15, label %16, label %54

16:                                               ; preds = %12
  %17 = getelementptr inbounds i8, i8* %0, i64 3
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %18, 70
  br i1 %19, label %20, label %54

20:                                               ; preds = %16
  %21 = getelementptr inbounds i8, i8* %0, i64 4
  %22 = load i8, i8* %21, align 4
  %23 = icmp eq i8 %22, 1
  br i1 %23, label %24, label %54

24:                                               ; preds = %20
  %25 = getelementptr inbounds i8, i8* %0, i64 5
  %26 = load i8, i8* %25, align 1
  %27 = icmp eq i8 %26, 1
  br i1 %27, label %28, label %54

28:                                               ; preds = %24
  %29 = getelementptr inbounds i8, i8* %0, i64 18
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = icmp eq i32 %32, %2
  br i1 %33, label %34, label %54

34:                                               ; preds = %28
  %35 = getelementptr inbounds i8, i8* %0, i64 16
  %36 = bitcast i8* %35 to i16*
  %37 = load i16, i16* %36, align 4
  %38 = and i16 %37, -2
  %39 = icmp eq i16 %38, 2
  br i1 %39, label %40, label %54

40:                                               ; preds = %34
  %41 = getelementptr inbounds i8, i8* %0, i64 20
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 1
  br i1 %44, label %45, label %54

45:                                               ; preds = %40
  %46 = getelementptr inbounds i8, i8* %0, i64 6
  %47 = load i8, i8* %46, align 2
  %48 = icmp eq i8 %47, 1
  br i1 %48, label %49, label %54

49:                                               ; preds = %45
  %50 = getelementptr inbounds i8, i8* %0, i64 46
  %51 = bitcast i8* %50 to i16*
  %52 = load i16, i16* %51, align 2
  %53 = icmp eq i16 %52, 40
  br label %54

54:                                               ; preds = %34, %16, %12, %8, %5, %28, %24, %20, %45, %40, %49, %3
  %55 = phi i1 [ false, %3 ], [ false, %16 ], [ false, %12 ], [ false, %8 ], [ false, %5 ], [ false, %28 ], [ false, %24 ], [ false, %20 ], [ false, %34 ], [ false, %45 ], [ false, %40 ], [ %53, %49 ]
  ret i1 %55
}

declare void @_ZN9courgette12Disassembler12ReduceLengthEm(%"class.courgette::Disassembler"*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK9courgette17DisassemblerElf3211SectionNameERK10Elf32_ShdrPNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(%"class.courgette::DisassemblerElf32"* nocapture readonly, %struct.Elf32_Shdr* nocapture readonly dereferenceable(40), %"class.std::__1::basic_string"*) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = zext i32 %5 to i64
  %7 = icmp eq i32 %5, 0
  br i1 %7, label %8, label %19

8:                                                ; preds = %3
  %9 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  %11 = load i8, i8* %10, align 1
  %12 = icmp slt i8 %11, 0
  br i1 %12, label %13, label %17

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  store i8 0, i8* %15, align 1
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 0, i64* %16, align 8
  br label %54

17:                                               ; preds = %8
  %18 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  store i8 0, i8* %18, align 1
  store i8 0, i8* %10, align 1
  br label %54

19:                                               ; preds = %3
  %20 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 8
  %21 = load i64, i64* %20, align 8
  %22 = icmp ugt i64 %21, %6
  br i1 %22, label %23, label %54

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 7
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 %6
  %27 = load i8, i8* %26, align 1
  %28 = tail call i1 @llvm.is.constant.i8(i8 %27) #16
  br i1 %28, label %29, label %52

29:                                               ; preds = %23
  %30 = tail call i64 @strlen(i8* %26) #16
  %31 = icmp ult i64 %30, 23
  br i1 %31, label %32, label %50

32:                                               ; preds = %29
  %33 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %34 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %33, i64 0, i32 1, i32 0
  %35 = load i8, i8* %34, align 1
  %36 = icmp slt i8 %35, 0
  br i1 %36, label %37, label %41

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %30, i64* %38, align 8
  %39 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load i8*, i8** %39, align 8
  br label %44

41:                                               ; preds = %32
  %42 = trunc i64 %30 to i8
  store i8 %42, i8* %34, align 1
  %43 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  br label %44

44:                                               ; preds = %41, %37
  %45 = phi i8* [ %40, %37 ], [ %43, %41 ]
  %46 = icmp eq i64 %30, 0
  br i1 %46, label %48, label %47

47:                                               ; preds = %44
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %45, i8* align 1 %26, i64 %30, i1 false) #16
  br label %48

48:                                               ; preds = %47, %44
  %49 = getelementptr inbounds i8, i8* %45, i64 %30
  store i8 0, i8* %49, align 1
  br label %54

50:                                               ; preds = %29
  %51 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* %2, i8* %26, i64 %30) #16
  br label %54

52:                                               ; preds = %23
  %53 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKc(%"class.std::__1::basic_string"* %2, i8* %26) #16
  br label %54

54:                                               ; preds = %52, %50, %48, %17, %13, %19
  %55 = phi i1 [ false, %19 ], [ true, %13 ], [ true, %17 ], [ true, %48 ], [ true, %50 ], [ true, %52 ]
  ret i1 %55
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK9courgette17DisassemblerElf3217RVAsToFileOffsetsERKNSt3__16vectorIjNS1_9allocatorIjEEEEPNS2_ImNS3_ImEEEE(%"class.courgette::DisassemblerElf32"*, %"class.std::__1::vector.18"* nocapture readonly dereferenceable(24), %"class.std::__1::vector.31"*) local_unnamed_addr #2 align 2 {
  %4 = bitcast %"class.std::__1::vector.31"* %2 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.31", %"class.std::__1::vector.31"* %2, i64 0, i32 0, i32 1
  %7 = bitcast i64** %6 to i64*
  store i64 %5, i64* %7, align 8
  %8 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %1, i64 0, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.18"* %1 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 2
  %15 = getelementptr inbounds %"class.std::__1::vector.31", %"class.std::__1::vector.31"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast i64** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %5
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, %14
  br i1 %20, label %21, label %34

21:                                               ; preds = %3
  %22 = icmp ugt i64 %14, 2305843009213693951
  br i1 %22, label %23, label %24

23:                                               ; preds = %21
  tail call void @abort() #17
  unreachable

24:                                               ; preds = %21
  %25 = shl i64 %13, 1
  %26 = tail call i8* @_Znwm(i64 %25) #18
  %27 = bitcast i8* %26 to i64*
  %28 = ptrtoint i8* %26 to i64
  %29 = getelementptr inbounds i64, i64* %27, i64 %14
  %30 = ptrtoint i64* %29 to i64
  store i64 %28, i64* %4, align 8
  store i64 %28, i64* %7, align 8
  store i64 %30, i64* %16, align 8
  %31 = icmp eq i64 %5, 0
  br i1 %31, label %34, label %32

32:                                               ; preds = %24
  %33 = inttoptr i64 %5 to i8*
  tail call void @_ZdlPv(i8* %33) #18
  br label %34

34:                                               ; preds = %3, %24, %32
  %35 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %1, i64 0, i32 0, i32 0
  %36 = load i32*, i32** %35, align 8
  %37 = load i32*, i32** %8, align 8
  %38 = icmp eq i32* %36, %37
  br i1 %38, label %113, label %39

39:                                               ; preds = %34
  %40 = bitcast %"class.courgette::DisassemblerElf32"* %0 to i64 (%"class.courgette::DisassemblerElf32"*, i32)***
  %41 = getelementptr inbounds %"class.std::__1::vector.31", %"class.std::__1::vector.31"* %2, i64 0, i32 0, i32 0
  br label %42

42:                                               ; preds = %39, %110
  %43 = phi i32* [ %36, %39 ], [ %111, %110 ]
  %44 = load i32, i32* %43, align 4
  %45 = load i64 (%"class.courgette::DisassemblerElf32"*, i32)**, i64 (%"class.courgette::DisassemblerElf32"*, i32)*** %40, align 8
  %46 = getelementptr inbounds i64 (%"class.courgette::DisassemblerElf32"*, i32)*, i64 (%"class.courgette::DisassemblerElf32"*, i32)** %45, i64 1
  %47 = load i64 (%"class.courgette::DisassemblerElf32"*, i32)*, i64 (%"class.courgette::DisassemblerElf32"*, i32)** %46, align 8
  %48 = tail call i64 %47(%"class.courgette::DisassemblerElf32"* %0, i32 %44) #16
  %49 = icmp eq i64 %48, -1
  br i1 %49, label %113, label %50

50:                                               ; preds = %42
  %51 = load i64*, i64** %6, align 8
  %52 = load i64*, i64** %15, align 8
  %53 = icmp eq i64* %51, %52
  %54 = ptrtoint i64* %52 to i64
  br i1 %53, label %58, label %55

55:                                               ; preds = %50
  store i64 %48, i64* %51, align 8
  %56 = getelementptr inbounds i64, i64* %51, i64 1
  %57 = ptrtoint i64* %56 to i64
  store i64 %57, i64* %7, align 8
  br label %110

58:                                               ; preds = %50
  %59 = ptrtoint i64* %51 to i64
  %60 = load i64, i64* %4, align 8
  %61 = sub i64 %59, %60
  %62 = ashr exact i64 %61, 3
  %63 = add nsw i64 %62, 1
  %64 = icmp ugt i64 %63, 2305843009213693951
  br i1 %64, label %65, label %67

65:                                               ; preds = %58
  %66 = bitcast %"class.std::__1::vector.31"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %66) #17
  unreachable

67:                                               ; preds = %58
  %68 = sub i64 %54, %60
  %69 = ashr exact i64 %68, 3
  %70 = icmp ult i64 %69, 1152921504606846975
  br i1 %70, label %71, label %79

71:                                               ; preds = %67
  %72 = ashr exact i64 %68, 2
  %73 = icmp ult i64 %72, %63
  %74 = select i1 %73, i64 %63, i64 %72
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %84, label %76

76:                                               ; preds = %71
  %77 = icmp ugt i64 %74, 2305843009213693951
  br i1 %77, label %78, label %79

78:                                               ; preds = %76
  tail call void @abort() #17
  unreachable

79:                                               ; preds = %76, %67
  %80 = phi i64 [ %74, %76 ], [ 2305843009213693951, %67 ]
  %81 = shl i64 %80, 3
  %82 = tail call i8* @_Znwm(i64 %81) #18
  %83 = bitcast i8* %82 to i64*
  br label %84

84:                                               ; preds = %79, %71
  %85 = phi i64 [ %80, %79 ], [ 0, %71 ]
  %86 = phi i64* [ %83, %79 ], [ null, %71 ]
  %87 = getelementptr inbounds i64, i64* %86, i64 %62
  %88 = getelementptr inbounds i64, i64* %86, i64 %85
  %89 = ptrtoint i64* %88 to i64
  store i64 %48, i64* %87, align 8
  %90 = getelementptr inbounds i64, i64* %87, i64 1
  %91 = ptrtoint i64* %90 to i64
  %92 = load i64*, i64** %41, align 8
  %93 = load i64, i64* %7, align 8
  %94 = ptrtoint i64* %92 to i64
  %95 = sub i64 %93, %94
  %96 = ashr exact i64 %95, 3
  %97 = sub nsw i64 0, %96
  %98 = getelementptr inbounds i64, i64* %87, i64 %97
  %99 = ptrtoint i64* %98 to i64
  %100 = icmp sgt i64 %95, 0
  br i1 %100, label %101, label %105

101:                                              ; preds = %84
  %102 = bitcast i64* %98 to i8*
  %103 = bitcast i64* %92 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %102, i8* align 8 %103, i64 %95, i1 false) #16
  %104 = load i64*, i64** %41, align 8
  br label %105

105:                                              ; preds = %101, %84
  %106 = phi i64* [ %92, %84 ], [ %104, %101 ]
  store i64 %99, i64* %4, align 8
  store i64 %91, i64* %7, align 8
  store i64 %89, i64* %16, align 8
  %107 = icmp eq i64* %106, null
  br i1 %107, label %110, label %108

108:                                              ; preds = %105
  %109 = bitcast i64* %106 to i8*
  tail call void @_ZdlPv(i8* %109) #18
  br label %110

110:                                              ; preds = %55, %105, %108
  %111 = getelementptr inbounds i32, i32* %43, i64 1
  %112 = icmp eq i32* %111, %37
  br i1 %112, label %113, label %42

113:                                              ; preds = %42, %110, %34
  %114 = phi i1 [ true, %34 ], [ true, %110 ], [ false, %42 ]
  ret i1 %114
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK9courgette17DisassemblerElf3217RVAsToFileOffsetsEPNSt3__16vectorINS1_10unique_ptrINS0_8TypedRVAENS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEE(%"class.courgette::DisassemblerElf32"*, %"class.std::__1::vector"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %4 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %6 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %5, align 8
  %7 = icmp eq %"class.std::__1::unique_ptr"* %4, %6
  br i1 %7, label %26, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.courgette::DisassemblerElf32"* %0 to i64 (%"class.courgette::DisassemblerElf32"*, i32)***
  br label %10

10:                                               ; preds = %8, %21
  %11 = phi %"class.std::__1::unique_ptr"* [ %4, %8 ], [ %24, %21 ]
  %12 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %11, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %12, align 8
  %14 = getelementptr inbounds %"class.courgette::DisassemblerElf32::TypedRVA", %"class.courgette::DisassemblerElf32::TypedRVA"* %13, i64 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = load i64 (%"class.courgette::DisassemblerElf32"*, i32)**, i64 (%"class.courgette::DisassemblerElf32"*, i32)*** %9, align 8
  %17 = getelementptr inbounds i64 (%"class.courgette::DisassemblerElf32"*, i32)*, i64 (%"class.courgette::DisassemblerElf32"*, i32)** %16, i64 1
  %18 = load i64 (%"class.courgette::DisassemblerElf32"*, i32)*, i64 (%"class.courgette::DisassemblerElf32"*, i32)** %17, align 8
  %19 = tail call i64 %18(%"class.courgette::DisassemblerElf32"* %0, i32 %15) #16
  %20 = icmp eq i64 %19, -1
  br i1 %20, label %26, label %21

21:                                               ; preds = %10
  %22 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %12, align 8
  %23 = getelementptr inbounds %"class.courgette::DisassemblerElf32::TypedRVA", %"class.courgette::DisassemblerElf32::TypedRVA"* %22, i64 0, i32 3
  store i64 %19, i64* %23, align 8
  %24 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %11, i64 1
  %25 = icmp eq %"class.std::__1::unique_ptr"* %24, %6
  br i1 %25, label %26, label %10

26:                                               ; preds = %10, %21, %2
  %27 = phi i1 [ true, %2 ], [ true, %21 ], [ false, %10 ]
  ret i1 %27
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN9courgette17DisassemblerElf3221ExtractAbs32LocationsEv(%"class.courgette::DisassemblerElf32"*) unnamed_addr #2 align 2 {
  %2 = alloca %"struct.std::__1::__less.66", align 1
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 9
  %5 = bitcast %"class.std::__1::vector.18"* %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 9, i32 0, i32 1
  %8 = bitcast i32** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 2
  %10 = load i16, i16* %9, align 8
  %11 = icmp eq i16 %10, 0
  %12 = inttoptr i64 %6 to i32*
  br i1 %11, label %167, label %13

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 3, i32 0, i32 0
  %15 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 0
  %16 = bitcast %"class.courgette::DisassemblerElf32"* %0 to i8* (%"class.courgette::Disassembler"*, i64)***
  %17 = bitcast i32* %3 to i8*
  %18 = bitcast %"class.courgette::DisassemblerElf32"* %0 to i1 (%"class.courgette::DisassemblerElf32"*, i64, i32*)***
  %19 = bitcast %"class.courgette::DisassemblerElf32"* %0 to i64 (%"class.courgette::DisassemblerElf32"*, i32)***
  %20 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 9, i32 0, i32 2, i32 0, i32 0
  %21 = bitcast i32** %20 to i64*
  %22 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %4, i64 0, i32 0, i32 0
  br label %23

23:                                               ; preds = %13, %159
  %24 = phi i64 [ 0, %13 ], [ %160, %159 ]
  %25 = load %struct.Elf32_Shdr*, %struct.Elf32_Shdr** %14, align 8
  %26 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %25, i64 %24, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 9
  br i1 %28, label %29, label %159

29:                                               ; preds = %23
  %30 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %25, i64 %24, i32 4
  %31 = load i32, i32* %30, align 4
  %32 = zext i32 %31 to i64
  %33 = load i8* (%"class.courgette::Disassembler"*, i64)**, i8* (%"class.courgette::Disassembler"*, i64)*** %16, align 8
  %34 = getelementptr inbounds i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %33, i64 2
  %35 = load i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %34, align 8
  %36 = call i8* %35(%"class.courgette::Disassembler"* %15, i64 %32) #16
  %37 = bitcast i8* %36 to %struct.Elf32_Rel*
  %38 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %25, i64 %24, i32 9
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i32 %39, 8
  br i1 %40, label %41, label %171

41:                                               ; preds = %29
  %42 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %25, i64 %24, i32 5
  %43 = load i32, i32* %42, align 4
  %44 = and i32 %43, 7
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %171

46:                                               ; preds = %41
  %47 = lshr i32 %43, 3
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %159, label %49

49:                                               ; preds = %46
  %50 = zext i32 %47 to i64
  br label %51

51:                                               ; preds = %49, %156
  %52 = phi i64 [ 0, %49 ], [ %157, %156 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #16
  store i32 -1431655766, i32* %3, align 4
  %53 = getelementptr inbounds %struct.Elf32_Rel, %struct.Elf32_Rel* %37, i64 %52
  %54 = bitcast %struct.Elf32_Rel* %53 to i64*
  %55 = load i64, i64* %54, align 4
  %56 = load i1 (%"class.courgette::DisassemblerElf32"*, i64, i32*)**, i1 (%"class.courgette::DisassemblerElf32"*, i64, i32*)*** %18, align 8
  %57 = getelementptr inbounds i1 (%"class.courgette::DisassemblerElf32"*, i64, i32*)*, i1 (%"class.courgette::DisassemblerElf32"*, i64, i32*)** %56, i64 17
  %58 = load i1 (%"class.courgette::DisassemblerElf32"*, i64, i32*)*, i1 (%"class.courgette::DisassemblerElf32"*, i64, i32*)** %57, align 8
  %59 = call zeroext i1 %58(%"class.courgette::DisassemblerElf32"* %0, i64 %55, i32* nonnull %3) #16
  br i1 %59, label %60, label %156

60:                                               ; preds = %51
  %61 = load i32, i32* %3, align 4
  %62 = load i64 (%"class.courgette::DisassemblerElf32"*, i32)**, i64 (%"class.courgette::DisassemblerElf32"*, i32)*** %19, align 8
  %63 = getelementptr inbounds i64 (%"class.courgette::DisassemblerElf32"*, i32)*, i64 (%"class.courgette::DisassemblerElf32"*, i32)** %62, i64 1
  %64 = load i64 (%"class.courgette::DisassemblerElf32"*, i32)*, i64 (%"class.courgette::DisassemblerElf32"*, i32)** %63, align 8
  %65 = call i64 %64(%"class.courgette::DisassemblerElf32"* %0, i32 %61) #16
  %66 = icmp eq i64 %65, -1
  br i1 %66, label %156, label %67

67:                                               ; preds = %60
  %68 = load i16, i16* %9, align 8
  %69 = icmp eq i16 %68, 0
  br i1 %69, label %156, label %70

70:                                               ; preds = %67
  %71 = load %struct.Elf32_Shdr*, %struct.Elf32_Shdr** %14, align 8
  %72 = zext i16 %68 to i64
  br label %73

73:                                               ; preds = %91, %70
  %74 = phi i64 [ 0, %70 ], [ %92, %91 ]
  %75 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %71, i64 %74, i32 4
  %76 = load i32, i32* %75, align 4
  %77 = zext i32 %76 to i64
  %78 = icmp ult i64 %65, %77
  br i1 %78, label %91, label %79

79:                                               ; preds = %73
  %80 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %71, i64 %74, i32 5
  %81 = load i32, i32* %80, align 4
  %82 = icmp ult i32 %81, 4
  br i1 %82, label %91, label %83

83:                                               ; preds = %79
  %84 = zext i32 %81 to i64
  %85 = add nsw i64 %77, -3
  %86 = add nsw i64 %85, %84
  %87 = icmp ult i64 %65, %86
  br i1 %87, label %88, label %91

88:                                               ; preds = %83
  %89 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %71, i64 %74, i32 1
  %90 = load i32, i32* %89, align 4
  switch i32 %90, label %91 [
    i32 9, label %94
    i32 1, label %94
  ]

91:                                               ; preds = %88, %83, %79, %73
  %92 = add nuw nsw i64 %74, 1
  %93 = icmp eq i64 %92, %72
  br i1 %93, label %156, label %73

94:                                               ; preds = %88, %88
  %95 = load i32*, i32** %7, align 8
  %96 = load i32*, i32** %20, align 8
  %97 = icmp eq i32* %95, %96
  %98 = ptrtoint i32* %96 to i64
  br i1 %97, label %103, label %99

99:                                               ; preds = %94
  %100 = load i32, i32* %3, align 4
  store i32 %100, i32* %95, align 4
  %101 = getelementptr inbounds i32, i32* %95, i64 1
  %102 = ptrtoint i32* %101 to i64
  store i64 %102, i64* %8, align 8
  br label %156

103:                                              ; preds = %94
  %104 = ptrtoint i32* %95 to i64
  %105 = load i64, i64* %5, align 8
  %106 = sub i64 %104, %105
  %107 = ashr exact i64 %106, 2
  %108 = add nsw i64 %107, 1
  %109 = icmp ugt i64 %108, 4611686018427387903
  br i1 %109, label %110, label %112

110:                                              ; preds = %103
  %111 = bitcast %"class.std::__1::vector.18"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %111) #17
  unreachable

112:                                              ; preds = %103
  %113 = sub i64 %98, %105
  %114 = ashr exact i64 %113, 2
  %115 = icmp ult i64 %114, 2305843009213693951
  br i1 %115, label %116, label %124

116:                                              ; preds = %112
  %117 = ashr exact i64 %113, 1
  %118 = icmp ult i64 %117, %108
  %119 = select i1 %118, i64 %108, i64 %117
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %129, label %121

121:                                              ; preds = %116
  %122 = icmp ugt i64 %119, 4611686018427387903
  br i1 %122, label %123, label %124

123:                                              ; preds = %121
  call void @abort() #17
  unreachable

124:                                              ; preds = %121, %112
  %125 = phi i64 [ %119, %121 ], [ 4611686018427387903, %112 ]
  %126 = shl i64 %125, 2
  %127 = call i8* @_Znwm(i64 %126) #18
  %128 = bitcast i8* %127 to i32*
  br label %129

129:                                              ; preds = %124, %116
  %130 = phi i64 [ %125, %124 ], [ 0, %116 ]
  %131 = phi i32* [ %128, %124 ], [ null, %116 ]
  %132 = getelementptr inbounds i32, i32* %131, i64 %107
  %133 = getelementptr inbounds i32, i32* %131, i64 %130
  %134 = ptrtoint i32* %133 to i64
  %135 = load i32, i32* %3, align 4
  store i32 %135, i32* %132, align 4
  %136 = getelementptr inbounds i32, i32* %132, i64 1
  %137 = ptrtoint i32* %136 to i64
  %138 = load i32*, i32** %22, align 8
  %139 = load i64, i64* %8, align 8
  %140 = ptrtoint i32* %138 to i64
  %141 = sub i64 %139, %140
  %142 = ashr exact i64 %141, 2
  %143 = sub nsw i64 0, %142
  %144 = getelementptr inbounds i32, i32* %132, i64 %143
  %145 = ptrtoint i32* %144 to i64
  %146 = icmp sgt i64 %141, 0
  br i1 %146, label %147, label %151

147:                                              ; preds = %129
  %148 = bitcast i32* %144 to i8*
  %149 = bitcast i32* %138 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %148, i8* align 4 %149, i64 %141, i1 false) #16
  %150 = load i32*, i32** %22, align 8
  br label %151

151:                                              ; preds = %147, %129
  %152 = phi i32* [ %138, %129 ], [ %150, %147 ]
  store i64 %145, i64* %5, align 8
  store i64 %137, i64* %8, align 8
  store i64 %134, i64* %21, align 8
  %153 = icmp eq i32* %152, null
  br i1 %153, label %156, label %154

154:                                              ; preds = %151
  %155 = bitcast i32* %152 to i8*
  call void @_ZdlPv(i8* %155) #18
  br label %156

156:                                              ; preds = %91, %67, %60, %154, %151, %99, %51
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #16
  %157 = add nuw nsw i64 %52, 1
  %158 = icmp ult i64 %157, %50
  br i1 %158, label %51, label %159

159:                                              ; preds = %156, %46, %23
  %160 = add nuw nsw i64 %24, 1
  %161 = load i16, i16* %9, align 8
  %162 = zext i16 %161 to i64
  %163 = icmp ult i64 %160, %162
  br i1 %163, label %23, label %164

164:                                              ; preds = %159
  %165 = load i32*, i32** %22, align 8
  %166 = load i32*, i32** %7, align 8
  br label %167

167:                                              ; preds = %164, %1
  %168 = phi i32* [ %166, %164 ], [ %12, %1 ]
  %169 = phi i32* [ %165, %164 ], [ %12, %1 ]
  %170 = getelementptr inbounds %"struct.std::__1::__less.66", %"struct.std::__1::__less.66"* %2, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %170) #16
  call void @_ZNSt3__16__sortIRNS_6__lessIjjEEPjEEvT0_S5_T_(i32* %169, i32* %168, %"struct.std::__1::__less.66"* nonnull dereferenceable(1) %2) #16
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %170) #16
  br label %171

171:                                              ; preds = %41, %29, %167
  %172 = phi i1 [ true, %167 ], [ false, %29 ], [ false, %41 ]
  ret i1 %172
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN9courgette17DisassemblerElf3212CheckSectionEj(%"class.courgette::DisassemblerElf32"*, i32) local_unnamed_addr #2 align 2 {
  %3 = bitcast %"class.courgette::DisassemblerElf32"* %0 to i64 (%"class.courgette::DisassemblerElf32"*, i32)***
  %4 = load i64 (%"class.courgette::DisassemblerElf32"*, i32)**, i64 (%"class.courgette::DisassemblerElf32"*, i32)*** %3, align 8
  %5 = getelementptr inbounds i64 (%"class.courgette::DisassemblerElf32"*, i32)*, i64 (%"class.courgette::DisassemblerElf32"*, i32)** %4, i64 1
  %6 = load i64 (%"class.courgette::DisassemblerElf32"*, i32)*, i64 (%"class.courgette::DisassemblerElf32"*, i32)** %5, align 8
  %7 = tail call i64 %6(%"class.courgette::DisassemblerElf32"* %0, i32 %1) #16
  %8 = icmp eq i64 %7, -1
  br i1 %8, label %38, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 2
  %11 = load i16, i16* %10, align 8
  %12 = icmp eq i16 %11, 0
  br i1 %12, label %38, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 3, i32 0, i32 0
  %15 = load %struct.Elf32_Shdr*, %struct.Elf32_Shdr** %14, align 8
  %16 = zext i16 %11 to i64
  br label %17

17:                                               ; preds = %13, %35
  %18 = phi i64 [ 0, %13 ], [ %36, %35 ]
  %19 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %15, i64 %18, i32 4
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i64
  %22 = icmp ult i64 %7, %21
  br i1 %22, label %35, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %15, i64 %18, i32 5
  %25 = load i32, i32* %24, align 4
  %26 = icmp ult i32 %25, 4
  br i1 %26, label %35, label %27

27:                                               ; preds = %23
  %28 = zext i32 %25 to i64
  %29 = add nsw i64 %21, -3
  %30 = add nsw i64 %29, %28
  %31 = icmp ult i64 %7, %30
  br i1 %31, label %32, label %35

32:                                               ; preds = %27
  %33 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %15, i64 %18, i32 1
  %34 = load i32, i32* %33, align 4
  switch i32 %34, label %35 [
    i32 9, label %38
    i32 1, label %38
  ]

35:                                               ; preds = %32, %23, %17, %27
  %36 = add nuw nsw i64 %18, 1
  %37 = icmp ult i64 %36, %16
  br i1 %37, label %17, label %38

38:                                               ; preds = %32, %32, %35, %9, %2
  %39 = phi i1 [ false, %2 ], [ false, %9 ], [ true, %32 ], [ true, %32 ], [ false, %35 ]
  ret i1 %39
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN9courgette17DisassemblerElf3221ExtractRel32LocationsEv(%"class.courgette::DisassemblerElf32"*) unnamed_addr #2 align 2 {
  %2 = alloca i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, align 8
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.logging::LogMessage", align 8
  %5 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 10, i32 0, i32 0
  %6 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %5, align 8
  %7 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 10, i32 0, i32 1
  %8 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %7, align 8
  %9 = icmp eq %"class.std::__1::unique_ptr"* %8, %6
  br i1 %9, label %23, label %10

10:                                               ; preds = %1, %21
  %11 = phi %"class.std::__1::unique_ptr"* [ %12, %21 ], [ %8, %1 ]
  %12 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %11, i64 -1
  %13 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %12, i64 0, i32 0, i32 0, i32 0
  %14 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %13, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %13, align 8
  %15 = icmp eq %"class.courgette::DisassemblerElf32::TypedRVA"* %14, null
  br i1 %15, label %21, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.courgette::DisassemblerElf32::TypedRVA"* %14 to void (%"class.courgette::DisassemblerElf32::TypedRVA"*)***
  %18 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)**, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %18, i64 1
  %20 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %19, align 8
  tail call void %20(%"class.courgette::DisassemblerElf32::TypedRVA"* nonnull %14) #16
  br label %21

21:                                               ; preds = %16, %10
  %22 = icmp eq %"class.std::__1::unique_ptr"* %12, %6
  br i1 %22, label %23, label %10

23:                                               ; preds = %21, %1
  store %"class.std::__1::unique_ptr"* %6, %"class.std::__1::unique_ptr"** %7, align 8
  %24 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 2
  %25 = load i16, i16* %24, align 8
  %26 = icmp eq i16 %25, 0
  br i1 %26, label %110, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 3, i32 0, i32 0
  %29 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %32 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 8
  %33 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 7
  %34 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %35 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %34, i64 0, i32 1, i32 0
  %36 = bitcast %"class.courgette::DisassemblerElf32"* %0 to i1 (%"class.courgette::DisassemblerElf32"*, %struct.Elf32_Shdr*)***
  br label %37

37:                                               ; preds = %27, %101
  %38 = phi i64 [ 0, %27 ], [ %103, %101 ]
  %39 = phi i8 [ 0, %27 ], [ %102, %101 ]
  %40 = load %struct.Elf32_Shdr*, %struct.Elf32_Shdr** %28, align 8
  %41 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %40, i64 %38
  %42 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %40, i64 %38, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 1
  br i1 %44, label %45, label %101

45:                                               ; preds = %37
  %46 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %40, i64 %38, i32 3
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %101, label %49

49:                                               ; preds = %45
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %29) #16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %29, i8 0, i64 24, i1 false) #16
  %50 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %41, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = zext i32 %51 to i64
  %53 = icmp eq i32 %51, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %49
  store i8 0, i8* %29, align 8
  store i8 0, i8* %35, align 1
  br label %76

55:                                               ; preds = %49
  %56 = load i64, i64* %32, align 8
  %57 = icmp ugt i64 %56, %52
  br i1 %57, label %58, label %93

58:                                               ; preds = %55
  %59 = load i8*, i8** %33, align 8
  %60 = getelementptr inbounds i8, i8* %59, i64 %52
  %61 = load i8, i8* %60, align 1
  %62 = call i1 @llvm.is.constant.i8(i8 %61) #16
  br i1 %62, label %63, label %74

63:                                               ; preds = %58
  %64 = call i64 @strlen(i8* %60) #16
  %65 = icmp ult i64 %64, 23
  br i1 %65, label %66, label %72

66:                                               ; preds = %63
  %67 = trunc i64 %64 to i8
  store i8 %67, i8* %35, align 1
  %68 = icmp eq i64 %64, 0
  br i1 %68, label %70, label %69

69:                                               ; preds = %66
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 8 %29, i8* align 1 %60, i64 %64, i1 false) #16
  br label %70

70:                                               ; preds = %69, %66
  %71 = getelementptr inbounds i8, i8* %29, i64 %64
  store i8 0, i8* %71, align 1
  br label %76

72:                                               ; preds = %63
  %73 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* nonnull %3, i8* %60, i64 %64) #16
  br label %76

74:                                               ; preds = %58
  %75 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* %60) #16
  br label %76

76:                                               ; preds = %54, %70, %72, %74
  %77 = load i8, i8* %35, align 1
  %78 = icmp slt i8 %77, 0
  %79 = load i64, i64* %31, align 8
  %80 = zext i8 %77 to i64
  %81 = select i1 %78, i64 %79, i64 %80
  %82 = icmp eq i64 %81, 5
  br i1 %82, label %83, label %93

83:                                               ; preds = %76
  %84 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* nonnull %3, i64 0, i64 -1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 0), i64 5) #16
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %93

86:                                               ; preds = %83
  %87 = load i1 (%"class.courgette::DisassemblerElf32"*, %struct.Elf32_Shdr*)**, i1 (%"class.courgette::DisassemblerElf32"*, %struct.Elf32_Shdr*)*** %36, align 8
  %88 = getelementptr inbounds i1 (%"class.courgette::DisassemblerElf32"*, %struct.Elf32_Shdr*)*, i1 (%"class.courgette::DisassemblerElf32"*, %struct.Elf32_Shdr*)** %87, i64 19
  %89 = load i1 (%"class.courgette::DisassemblerElf32"*, %struct.Elf32_Shdr*)*, i1 (%"class.courgette::DisassemblerElf32"*, %struct.Elf32_Shdr*)** %88, align 8
  %90 = call zeroext i1 %89(%"class.courgette::DisassemblerElf32"* %0, %struct.Elf32_Shdr* %41) #16
  %91 = xor i1 %90, true
  %92 = zext i1 %91 to i32
  br label %93

93:                                               ; preds = %83, %76, %55, %86
  %94 = phi i32 [ 4, %83 ], [ %92, %86 ], [ 1, %55 ], [ 4, %76 ]
  %95 = phi i8 [ %39, %83 ], [ 1, %86 ], [ %39, %55 ], [ %39, %76 ]
  %96 = load i8, i8* %35, align 1
  %97 = icmp slt i8 %96, 0
  br i1 %97, label %98, label %100

98:                                               ; preds = %93
  %99 = load i8*, i8** %30, align 8
  call void @_ZdlPv(i8* %99) #18
  br label %100

100:                                              ; preds = %98, %93
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %29) #16
  switch i32 %94, label %122 [
    i32 0, label %101
    i32 4, label %101
  ]

101:                                              ; preds = %45, %37, %100, %100
  %102 = phi i8 [ %95, %100 ], [ %95, %100 ], [ %39, %37 ], [ %39, %45 ]
  %103 = add nuw nsw i64 %38, 1
  %104 = load i16, i16* %24, align 8
  %105 = zext i16 %104 to i64
  %106 = icmp ult i64 %103, %105
  br i1 %106, label %37, label %107

107:                                              ; preds = %101
  %108 = and i8 %102, 1
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %110, label %118

110:                                              ; preds = %23, %107
  %111 = call i32 @_ZN7logging18GetVlogLevelHelperEPKcm(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.15, i64 0, i64 0), i64 39) #16
  %112 = icmp sgt i32 %111, 0
  br i1 %112, label %113, label %118

113:                                              ; preds = %110
  %114 = bitcast %"class.logging::LogMessage"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %114) #16
  call void @_ZN7logging10LogMessageC1EPKcii(%"class.logging::LogMessage"* nonnull %4, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.15, i64 0, i64 0), i32 392, i32 -1) #16
  %115 = getelementptr inbounds %"class.logging::LogMessage", %"class.logging::LogMessage"* %4, i64 0, i32 2
  %116 = bitcast %"class.std::__1::basic_ostringstream"* %115 to %"class.std::__1::basic_ostream"*
  %117 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %116, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.16, i64 0, i64 0), i64 57) #16
  call void @_ZN7logging10LogMessageD1Ev(%"class.logging::LogMessage"* nonnull %4) #16
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %114) #16
  br label %118

118:                                              ; preds = %113, %110, %107
  %119 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %5, align 8
  %120 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %7, align 8
  %121 = bitcast i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %121)
  store i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)* @_ZN9courgette17DisassemblerElf328TypedRVA15IsLessThanByRVAERKNSt3__110unique_ptrIS1_NS2_14default_deleteIS1_EEEES8_, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  call void @_ZNSt3__16__sortIRPFbRKNS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEES9_EPS7_EEvT0_SE_T_(%"class.std::__1::unique_ptr"* %119, %"class.std::__1::unique_ptr"* %120, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** nonnull dereferenceable(8) %2) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %121)
  br label %122

122:                                              ; preds = %100, %118
  %123 = phi i1 [ true, %118 ], [ false, %100 ]
  ret i1 %123
}

declare void @_ZN7logging10LogMessageC1EPKcii(%"class.logging::LogMessage"*, i8*, i32, i32) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10LogMessageD1Ev(%"class.logging::LogMessage"*) unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN9courgette17DisassemblerElf328TypedRVA15IsLessThanByRVAERKNSt3__110unique_ptrIS1_NS2_14default_deleteIS1_EEEES8_(%"class.std::__1::unique_ptr"* dereferenceable(8), %"class.std::__1::unique_ptr"* dereferenceable(8)) #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %3, align 8
  %5 = getelementptr inbounds %"class.courgette::DisassemblerElf32::TypedRVA", %"class.courgette::DisassemblerElf32::TypedRVA"* %4, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %1, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %7, align 8
  %9 = getelementptr inbounds %"class.courgette::DisassemblerElf32::TypedRVA", %"class.courgette::DisassemblerElf32::TypedRVA"* %8, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = icmp ult i32 %6, %10
  ret i1 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden nonnull %"class.courgette::RvaVisitor"* @_ZN9courgette17DisassemblerElf3227CreateAbs32TargetRvaVisitorEv(%"class.courgette::DisassemblerElf32"*) unnamed_addr #2 align 2 {
  %2 = tail call i8* @_Znwm(i64 32) #18
  %3 = bitcast i8* %2 to %"class.courgette::Disassembler::RvaVisitor_Abs32"*
  %4 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 9
  %5 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN9courgette12Disassembler16RvaVisitor_Abs32C1ERKNSt3__16vectorIjNS2_9allocatorIjEEEERKNS_17AddressTranslatorE(%"class.courgette::Disassembler::RvaVisitor_Abs32"* nonnull %3, %"class.std::__1::vector.18"* dereferenceable(24) %4, %"class.courgette::AddressTranslator"* dereferenceable(8) %5) #16
  %6 = bitcast i8* %2 to %"class.courgette::RvaVisitor"*
  ret %"class.courgette::RvaVisitor"* %6
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

declare void @_ZN9courgette12Disassembler16RvaVisitor_Abs32C1ERKNSt3__16vectorIjNS2_9allocatorIjEEEERKNS_17AddressTranslatorE(%"class.courgette::Disassembler::RvaVisitor_Abs32"*, %"class.std::__1::vector.18"* dereferenceable(24), %"class.courgette::AddressTranslator"* dereferenceable(8)) unnamed_addr #3

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias nonnull %"class.courgette::RvaVisitor"* @_ZN9courgette17DisassemblerElf3227CreateRel32TargetRvaVisitorEv(%"class.courgette::DisassemblerElf32"* nocapture readonly) unnamed_addr #8 align 2 {
  %2 = tail call i8* @_Znwm(i64 24) #18
  %3 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 10
  %4 = bitcast i8* %2 to i32 (...)***
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast %"class.std::__1::vector"* %3 to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 8
  %8 = bitcast i8* %5 to <2 x i64>*
  store <2 x i64> %7, <2 x i64>* %8, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN9courgette17DisassemblerElf3221Elf32RvaVisitor_Rel32E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %9 = bitcast i8* %2 to %"class.courgette::RvaVisitor"*
  ret %"class.courgette::RvaVisitor"* %9
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9courgette17DisassemblerElf3226RemoveUnusedRel32LocationsEPNS_15AssemblyProgramE(%"class.courgette::DisassemblerElf32"*, %"class.courgette::AssemblyProgram"*) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 10
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %4, align 8
  %6 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 10, i32 0, i32 1
  %7 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %6, align 8
  %8 = icmp eq %"class.std::__1::unique_ptr"* %5, %7
  %9 = ptrtoint %"class.std::__1::unique_ptr"* %5 to i64
  br i1 %8, label %14, label %47

10:                                               ; preds = %76
  %11 = bitcast %"class.std::__1::vector"* %3 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = ptrtoint %"class.std::__1::unique_ptr"* %77 to i64
  br label %14

14:                                               ; preds = %2, %10
  %15 = phi i64 [ %13, %10 ], [ %9, %2 ]
  %16 = phi i64 [ %12, %10 ], [ %9, %2 ]
  %17 = phi %"class.std::__1::unique_ptr"* [ %79, %10 ], [ %7, %2 ]
  %18 = ptrtoint %"class.std::__1::unique_ptr"* %17 to i64
  %19 = sub i64 %15, %16
  %20 = ashr exact i64 %19, 3
  %21 = sub i64 %18, %16
  %22 = ashr exact i64 %21, 3
  %23 = icmp ugt i64 %20, %22
  %24 = inttoptr i64 %16 to %"class.std::__1::unique_ptr"*
  br i1 %23, label %25, label %27

25:                                               ; preds = %14
  %26 = sub nsw i64 %20, %22
  tail call void @_ZNSt3__16vectorINS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE8__appendEm(%"class.std::__1::vector"* %3, i64 %26) #16
  br label %46

27:                                               ; preds = %14
  %28 = icmp ult i64 %20, %22
  br i1 %28, label %29, label %46

29:                                               ; preds = %27
  %30 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %24, i64 %20
  %31 = icmp eq %"class.std::__1::unique_ptr"* %30, %17
  br i1 %31, label %45, label %32

32:                                               ; preds = %29, %43
  %33 = phi %"class.std::__1::unique_ptr"* [ %34, %43 ], [ %17, %29 ]
  %34 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %33, i64 -1
  %35 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %34, i64 0, i32 0, i32 0, i32 0
  %36 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %35, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %35, align 8
  %37 = icmp eq %"class.courgette::DisassemblerElf32::TypedRVA"* %36, null
  br i1 %37, label %43, label %38

38:                                               ; preds = %32
  %39 = bitcast %"class.courgette::DisassemblerElf32::TypedRVA"* %36 to void (%"class.courgette::DisassemblerElf32::TypedRVA"*)***
  %40 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)**, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*** %39, align 8
  %41 = getelementptr inbounds void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %40, i64 1
  %42 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %41, align 8
  tail call void %42(%"class.courgette::DisassemblerElf32::TypedRVA"* nonnull %36) #16
  br label %43

43:                                               ; preds = %38, %32
  %44 = icmp eq %"class.std::__1::unique_ptr"* %34, %30
  br i1 %44, label %45, label %32

45:                                               ; preds = %43, %29
  store %"class.std::__1::unique_ptr"* %30, %"class.std::__1::unique_ptr"** %6, align 8
  br label %46

46:                                               ; preds = %25, %27, %45
  ret void

47:                                               ; preds = %2, %76
  %48 = phi %"class.std::__1::unique_ptr"* [ %77, %76 ], [ %5, %2 ]
  %49 = phi %"class.std::__1::unique_ptr"* [ %78, %76 ], [ %5, %2 ]
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %50, align 8
  %52 = getelementptr inbounds %"class.courgette::DisassemblerElf32::TypedRVA", %"class.courgette::DisassemblerElf32::TypedRVA"* %51, i64 0, i32 1
  %53 = load i32, i32* %52, align 8
  %54 = getelementptr inbounds %"class.courgette::DisassemblerElf32::TypedRVA", %"class.courgette::DisassemblerElf32::TypedRVA"* %51, i64 0, i32 2
  %55 = load i32, i32* %54, align 4
  %56 = add i32 %55, %53
  %57 = tail call %"class.courgette::Label"* @_ZN9courgette15AssemblyProgram14FindRel32LabelEj(%"class.courgette::AssemblyProgram"* %1, i32 %56) #16
  %58 = icmp eq %"class.courgette::Label"* %57, null
  br i1 %58, label %59, label %67

59:                                               ; preds = %47
  %60 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %50, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %50, align 8
  %61 = icmp eq %"class.courgette::DisassemblerElf32::TypedRVA"* %60, null
  br i1 %61, label %76, label %62

62:                                               ; preds = %59
  %63 = bitcast %"class.courgette::DisassemblerElf32::TypedRVA"* %60 to void (%"class.courgette::DisassemblerElf32::TypedRVA"*)***
  %64 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)**, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*** %63, align 8
  %65 = getelementptr inbounds void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %64, i64 1
  %66 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %65, align 8
  tail call void %66(%"class.courgette::DisassemblerElf32::TypedRVA"* nonnull %60) #16
  br label %76

67:                                               ; preds = %47
  %68 = icmp eq %"class.std::__1::unique_ptr"* %48, %49
  br i1 %68, label %74, label %69

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::unique_ptr"* %48 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = bitcast %"class.std::__1::unique_ptr"* %49 to i64*
  %73 = load i64, i64* %72, align 8
  store i64 %73, i64* %70, align 8
  store i64 %71, i64* %72, align 8
  br label %74

74:                                               ; preds = %67, %69
  %75 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %48, i64 1
  br label %76

76:                                               ; preds = %62, %59, %74
  %77 = phi %"class.std::__1::unique_ptr"* [ %75, %74 ], [ %48, %59 ], [ %48, %62 ]
  %78 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 1
  %79 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %6, align 8
  %80 = icmp eq %"class.std::__1::unique_ptr"* %78, %79
  br i1 %80, label %10, label %47
}

declare %"class.courgette::Label"* @_ZN9courgette15AssemblyProgram14FindRel32LabelEj(%"class.courgette::AssemblyProgram"*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9courgette17DisassemblerElf3223GetInstructionGeneratorEPNS_15AssemblyProgramE(%"class.base::RepeatingCallback"* noalias nocapture sret, %"class.courgette::DisassemblerElf32"*, %"class.courgette::AssemblyProgram"*) unnamed_addr #2 align 2 {
  %4 = ptrtoint %"class.courgette::AssemblyProgram"* %2 to i64
  %5 = ptrtoint %"class.courgette::DisassemblerElf32"* %1 to i64
  %6 = tail call i8* @_Znwm(i64 64) #18, !noalias !9
  %7 = bitcast i8* %6 to %"class.base::internal::BindStateBase"*
  tail call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %7, void ()* bitcast (i1 (%"class.base::internal::BindStateBase"*, %"class.courgette::InstructionReceptor"*)* @_ZN4base8internal7InvokerINS0_9BindStateIMN9courgette17DisassemblerElf32EKFbPNS3_15AssemblyProgramEPNS3_19InstructionReceptorEEJNS0_17UnretainedWrapperIS4_EES6_EEEFbS8_EE3RunEPNS0_13BindStateBaseES8_ to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIMN9courgette17DisassemblerElf32EKFbPNS2_15AssemblyProgramEPNS2_19InstructionReceptorEEJNS0_17UnretainedWrapperIS3_EES5_EE7DestroyEPKNS0_13BindStateBaseE) #16, !noalias !9
  %8 = getelementptr inbounds i8, i8* %6, i64 32
  %9 = bitcast i8* %8 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (i1 (%"class.courgette::DisassemblerElf32"*, %"class.courgette::AssemblyProgram"*, %"class.courgette::InstructionReceptor"*)* @_ZNK9courgette17DisassemblerElf329ParseFileEPNS_15AssemblyProgramEPNS_19InstructionReceptorE to i64), i64 0>, <2 x i64>* %9, align 8, !noalias !9
  %10 = getelementptr inbounds i8, i8* %6, i64 48
  %11 = bitcast i8* %10 to i64*
  store i64 %5, i64* %11, align 8, !noalias !9
  %12 = getelementptr inbounds i8, i8* %6, i64 56
  %13 = bitcast i8* %12 to i64*
  store i64 %4, i64* %13, align 8, !noalias !9
  %14 = bitcast %"class.base::RepeatingCallback"* %0 to i8**
  store i8* %6, i8** %14, align 8, !alias.scope !9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK9courgette17DisassemblerElf329ParseFileEPNS_15AssemblyProgramEPNS_19InstructionReceptorE(%"class.courgette::DisassemblerElf32"*, %"class.courgette::AssemblyProgram"*, %"class.courgette::InstructionReceptor"*) #2 align 2 {
  %4 = alloca i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, align 8
  %5 = alloca %"struct.std::__1::__less", align 1
  %6 = alloca i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, align 8
  %7 = alloca %"class.std::__1::vector.31", align 8
  %8 = alloca %"class.std::__1::__wrap_iter.57", align 8
  %9 = alloca %"class.std::__1::__wrap_iter.39", align 8
  %10 = alloca %"class.logging::LogMessage", align 8
  %11 = alloca %"class.logging::LogMessage", align 8
  %12 = bitcast %"class.std::__1::vector.31"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #16
  %13 = getelementptr inbounds %"class.std::__1::vector.31", %"class.std::__1::vector.31"* %7, i64 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.std::__1::vector.31", %"class.std::__1::vector.31"* %7, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 0, i64 24, i1 false) #16
  %15 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 9
  %16 = call zeroext i1 @_ZNK9courgette17DisassemblerElf3217RVAsToFileOffsetsERKNSt3__16vectorIjNS1_9allocatorIjEEEEPNS2_ImNS3_ImEEEE(%"class.courgette::DisassemblerElf32"* %0, %"class.std::__1::vector.18"* dereferenceable(24) %15, %"class.std::__1::vector.31"* nonnull %7)
  br i1 %16, label %17, label %215

17:                                               ; preds = %3
  %18 = load i64*, i64** %13, align 8
  %19 = load i64*, i64** %14, align 8
  %20 = getelementptr inbounds %"struct.std::__1::__less", %"struct.std::__1::__less"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %20) #16
  call void @_ZNSt3__16__sortIRNS_6__lessImmEEPmEEvT0_S5_T_(i64* %18, i64* %19, %"struct.std::__1::__less"* nonnull dereferenceable(1) %5) #16
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %20) #16
  %21 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 10, i32 0, i32 0
  %22 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %21, align 8
  %23 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 10, i32 0, i32 1
  %24 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %23, align 8
  %25 = icmp eq %"class.std::__1::unique_ptr"* %22, %24
  br i1 %25, label %47, label %26

26:                                               ; preds = %17
  %27 = bitcast %"class.courgette::DisassemblerElf32"* %0 to i64 (%"class.courgette::DisassemblerElf32"*, i32)***
  br label %28

28:                                               ; preds = %39, %26
  %29 = phi %"class.std::__1::unique_ptr"* [ %22, %26 ], [ %42, %39 ]
  %30 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %29, i64 0, i32 0, i32 0, i32 0
  %31 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %30, align 8
  %32 = getelementptr inbounds %"class.courgette::DisassemblerElf32::TypedRVA", %"class.courgette::DisassemblerElf32::TypedRVA"* %31, i64 0, i32 1
  %33 = load i32, i32* %32, align 8
  %34 = load i64 (%"class.courgette::DisassemblerElf32"*, i32)**, i64 (%"class.courgette::DisassemblerElf32"*, i32)*** %27, align 8
  %35 = getelementptr inbounds i64 (%"class.courgette::DisassemblerElf32"*, i32)*, i64 (%"class.courgette::DisassemblerElf32"*, i32)** %34, i64 1
  %36 = load i64 (%"class.courgette::DisassemblerElf32"*, i32)*, i64 (%"class.courgette::DisassemblerElf32"*, i32)** %35, align 8
  %37 = call i64 %36(%"class.courgette::DisassemblerElf32"* %0, i32 %33) #16
  %38 = icmp eq i64 %37, -1
  br i1 %38, label %215, label %39

39:                                               ; preds = %28
  %40 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %30, align 8
  %41 = getelementptr inbounds %"class.courgette::DisassemblerElf32::TypedRVA", %"class.courgette::DisassemblerElf32::TypedRVA"* %40, i64 0, i32 3
  store i64 %37, i64* %41, align 8
  %42 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %29, i64 1
  %43 = icmp eq %"class.std::__1::unique_ptr"* %42, %24
  br i1 %43, label %44, label %28

44:                                               ; preds = %39
  %45 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %21, align 8
  %46 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %23, align 8
  br label %47

47:                                               ; preds = %44, %17
  %48 = phi %"class.std::__1::unique_ptr"* [ %46, %44 ], [ %22, %17 ]
  %49 = phi %"class.std::__1::unique_ptr"* [ %45, %44 ], [ %22, %17 ]
  %50 = bitcast i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %50)
  store i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)* @_ZN9courgette17DisassemblerElf328TypedRVA22IsLessThanByFileOffsetERKNSt3__110unique_ptrIS1_NS2_14default_deleteIS1_EEEES8_, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %4, align 8
  call void @_ZNSt3__16__sortIRPFbRKNS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEES9_EPS7_EEvT0_SE_T_(%"class.std::__1::unique_ptr"* %49, %"class.std::__1::unique_ptr"* %48, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** nonnull dereferenceable(8) %4) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %50)
  %51 = bitcast %"class.std::__1::__wrap_iter.57"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #16
  %52 = getelementptr inbounds %"class.std::__1::__wrap_iter.57", %"class.std::__1::__wrap_iter.57"* %8, i64 0, i32 0
  %53 = bitcast %"class.std::__1::vector.31"* %7 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = bitcast %"class.std::__1::__wrap_iter.57"* %8 to i64*
  store i64 %54, i64* %55, align 8
  %56 = load i64*, i64** %14, align 8
  %57 = bitcast %"class.std::__1::__wrap_iter.39"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %57) #16
  %58 = bitcast %"class.std::__1::unique_ptr"** %21 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = bitcast %"class.std::__1::__wrap_iter.39"* %9 to i64*
  store i64 %59, i64* %60, align 8
  %61 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %23, align 8
  %62 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 4, i32 0, i32 0
  %63 = load i16*, i16** %62, align 8
  %64 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 4, i32 0, i32 1
  %65 = load i16*, i16** %64, align 8
  %66 = icmp eq i16* %63, %65
  br i1 %66, label %189, label %67

67:                                               ; preds = %47
  %68 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 3, i32 0, i32 0
  %69 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 0
  %70 = bitcast %"class.courgette::DisassemblerElf32"* %0 to i8* (%"class.courgette::Disassembler"*, i64)***
  %71 = bitcast %"class.courgette::InstructionReceptor"* %2 to i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)***
  %72 = bitcast %"class.logging::LogMessage"* %10 to i8*
  %73 = getelementptr inbounds %"class.logging::LogMessage", %"class.logging::LogMessage"* %10, i64 0, i32 2
  %74 = bitcast %"class.std::__1::basic_ostringstream"* %73 to %"class.std::__1::basic_ostream"*
  %75 = bitcast %"class.courgette::DisassemblerElf32"* %0 to i1 (%"class.courgette::DisassemblerElf32"*, %struct.Elf32_Shdr*, %"class.courgette::InstructionReceptor"*)***
  %76 = bitcast %"class.logging::LogMessage"* %11 to i8*
  %77 = getelementptr inbounds %"class.logging::LogMessage", %"class.logging::LogMessage"* %11, i64 0, i32 2
  %78 = bitcast %"class.std::__1::basic_ostringstream"* %77 to %"class.std::__1::basic_ostream"*
  br label %79

79:                                               ; preds = %67, %185
  %80 = phi i64 [ 0, %67 ], [ %186, %185 ]
  %81 = phi i16* [ %63, %67 ], [ %187, %185 ]
  %82 = load i16, i16* %81, align 2
  %83 = zext i16 %82 to i64
  %84 = load %struct.Elf32_Shdr*, %struct.Elf32_Shdr** %68, align 8
  %85 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %84, i64 %83
  %86 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %84, i64 %83, i32 1
  %87 = load i32, i32* %86, align 4
  %88 = icmp eq i32 %87, 8
  br i1 %88, label %185, label %89

89:                                               ; preds = %79
  %90 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %84, i64 %83, i32 4
  %91 = load i32, i32* %90, align 4
  %92 = zext i32 %91 to i64
  %93 = icmp ult i64 %80, %92
  br i1 %93, label %94, label %108

94:                                               ; preds = %89
  %95 = sub i64 %92, %80
  %96 = load i8* (%"class.courgette::Disassembler"*, i64)**, i8* (%"class.courgette::Disassembler"*, i64)*** %70, align 8
  %97 = getelementptr inbounds i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %96, i64 2
  %98 = load i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %97, align 8
  %99 = call i8* %98(%"class.courgette::Disassembler"* %69, i64 %80) #16
  %100 = load i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)**, i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)*** %71, align 8
  %101 = getelementptr inbounds i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)*, i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)** %100, i64 6
  %102 = load i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)*, i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)** %101, align 8
  %103 = call zeroext i1 %102(%"class.courgette::InstructionReceptor"* %2, i8* %99, i64 %95) #16
  br i1 %103, label %104, label %213

104:                                              ; preds = %94
  %105 = load i32, i32* %90, align 4
  %106 = load i32, i32* %86, align 4
  %107 = zext i32 %105 to i64
  br label %108

108:                                              ; preds = %104, %89
  %109 = phi i64 [ %107, %104 ], [ %92, %89 ]
  %110 = phi i32 [ %106, %104 ], [ %87, %89 ]
  %111 = phi i32 [ %105, %104 ], [ %91, %89 ]
  switch i32 %110, label %162 [
    i32 9, label %112
    i32 1, label %123
    i32 14, label %131
    i32 15, label %131
  ]

112:                                              ; preds = %108
  %113 = load i1 (%"class.courgette::DisassemblerElf32"*, %struct.Elf32_Shdr*, %"class.courgette::InstructionReceptor"*)**, i1 (%"class.courgette::DisassemblerElf32"*, %struct.Elf32_Shdr*, %"class.courgette::InstructionReceptor"*)*** %75, align 8
  %114 = getelementptr inbounds i1 (%"class.courgette::DisassemblerElf32"*, %struct.Elf32_Shdr*, %"class.courgette::InstructionReceptor"*)*, i1 (%"class.courgette::DisassemblerElf32"*, %struct.Elf32_Shdr*, %"class.courgette::InstructionReceptor"*)** %113, i64 18
  %115 = load i1 (%"class.courgette::DisassemblerElf32"*, %struct.Elf32_Shdr*, %"class.courgette::InstructionReceptor"*)*, i1 (%"class.courgette::DisassemblerElf32"*, %struct.Elf32_Shdr*, %"class.courgette::InstructionReceptor"*)** %114, align 8
  %116 = call zeroext i1 %115(%"class.courgette::DisassemblerElf32"* %0, %struct.Elf32_Shdr* %85, %"class.courgette::InstructionReceptor"* %2) #16
  br i1 %116, label %117, label %213

117:                                              ; preds = %112
  %118 = load i32, i32* %90, align 4
  %119 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %84, i64 %83, i32 5
  %120 = load i32, i32* %119, align 4
  %121 = add i32 %120, %118
  %122 = zext i32 %121 to i64
  br label %185

123:                                              ; preds = %108
  %124 = call zeroext i1 @_ZNK9courgette17DisassemblerElf3220ParseProgbitsSectionEPK10Elf32_ShdrPNSt3__111__wrap_iterIPmEES7_PNS5_IPNS4_10unique_ptrINS0_8TypedRVAENS4_14default_deleteISA_EEEEEESF_PNS_15AssemblyProgramEPNS_19InstructionReceptorE(%"class.courgette::DisassemblerElf32"* %0, %struct.Elf32_Shdr* %85, %"class.std::__1::__wrap_iter.57"* nonnull %8, i64* %56, %"class.std::__1::__wrap_iter.39"* nonnull %9, %"class.std::__1::unique_ptr"* %61, %"class.courgette::AssemblyProgram"* %1, %"class.courgette::InstructionReceptor"* %2)
  br i1 %124, label %125, label %213

125:                                              ; preds = %123
  %126 = load i32, i32* %90, align 4
  %127 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %84, i64 %83, i32 5
  %128 = load i32, i32* %127, align 4
  %129 = add i32 %128, %126
  %130 = zext i32 %129 to i64
  br label %185

131:                                              ; preds = %108, %108
  %132 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %84, i64 %83, i32 5
  %133 = load i64*, i64** %52, align 8
  %134 = icmp eq i64* %133, %56
  br i1 %134, label %185, label %135

135:                                              ; preds = %131
  %136 = load i64, i64* %133, align 8
  %137 = zext i32 %111 to i64
  %138 = icmp ult i64 %136, %137
  br i1 %138, label %182, label %139

139:                                              ; preds = %135, %157
  %140 = phi i64 [ %159, %157 ], [ %136, %135 ]
  %141 = phi i64* [ %155, %157 ], [ %133, %135 ]
  %142 = phi i32 [ %158, %157 ], [ %111, %135 ]
  %143 = load i32, i32* %132, align 4
  %144 = add i32 %143, %142
  %145 = zext i32 %144 to i64
  %146 = icmp ult i64 %140, %145
  br i1 %146, label %147, label %181

147:                                              ; preds = %139
  %148 = call i32 @_ZN7logging18GetVlogLevelHelperEPKcm(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.15, i64 0, i64 0), i64 39) #16
  %149 = icmp sgt i32 %148, 0
  br i1 %149, label %150, label %154

150:                                              ; preds = %147
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %72) #16
  call void @_ZN7logging10LogMessageC1EPKcii(%"class.logging::LogMessage"* nonnull %10, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.15, i64 0, i64 0), i32 499, i32 -1) #16
  %151 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %74, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.17, i64 0, i64 0), i64 51) #16
  %152 = load i32, i32* %86, align 4
  %153 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(%"class.std::__1::basic_ostream"* %151, i32 %152) #16
  call void @_ZN7logging10LogMessageD1Ev(%"class.logging::LogMessage"* nonnull %10) #16
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %72) #16
  br label %154

154:                                              ; preds = %147, %150
  %155 = getelementptr inbounds i64, i64* %141, i64 1
  %156 = icmp eq i64* %155, %56
  br i1 %156, label %184, label %157

157:                                              ; preds = %154
  %158 = load i32, i32* %90, align 4
  %159 = load i64, i64* %155, align 8
  %160 = zext i32 %158 to i64
  %161 = icmp ult i64 %159, %160
  br i1 %161, label %182, label %139

162:                                              ; preds = %108
  %163 = load i64*, i64** %52, align 8
  %164 = icmp eq i64* %163, %56
  br i1 %164, label %185, label %165

165:                                              ; preds = %162
  %166 = load i64, i64* %163, align 8
  %167 = icmp ult i64 %166, %109
  br i1 %167, label %185, label %168

168:                                              ; preds = %165
  %169 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %84, i64 %83, i32 5
  %170 = load i32, i32* %169, align 4
  %171 = add i32 %170, %111
  %172 = zext i32 %171 to i64
  %173 = icmp ult i64 %166, %172
  br i1 %173, label %174, label %185

174:                                              ; preds = %168
  %175 = call i32 @_ZN7logging18GetVlogLevelHelperEPKcm(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.15, i64 0, i64 0), i64 39) #16
  %176 = icmp sgt i32 %175, 0
  br i1 %176, label %177, label %185

177:                                              ; preds = %174
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %76) #16
  call void @_ZN7logging10LogMessageC1EPKcii(%"class.logging::LogMessage"* nonnull %11, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.15, i64 0, i64 0), i32 509, i32 -1) #16
  %178 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %78, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.18, i64 0, i64 0), i64 48) #16
  %179 = load i32, i32* %86, align 4
  %180 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(%"class.std::__1::basic_ostream"* %178, i32 %179) #16
  call void @_ZN7logging10LogMessageD1Ev(%"class.logging::LogMessage"* nonnull %11) #16
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %76) #16
  br label %185

181:                                              ; preds = %139
  store i64* %141, i64** %52, align 8
  br label %185

182:                                              ; preds = %157, %135
  %183 = phi i64* [ %133, %135 ], [ %155, %157 ]
  store i64* %183, i64** %52, align 8
  br label %185

184:                                              ; preds = %154
  store i64* %56, i64** %52, align 8
  br label %185

185:                                              ; preds = %131, %181, %182, %184, %162, %79, %165, %168, %125, %117, %174, %177
  %186 = phi i64 [ %109, %177 ], [ %109, %174 ], [ %122, %117 ], [ %130, %125 ], [ %109, %162 ], [ %109, %165 ], [ %109, %168 ], [ %80, %79 ], [ %109, %184 ], [ %109, %182 ], [ %109, %181 ], [ %109, %131 ]
  %187 = getelementptr inbounds i16, i16* %81, i64 1
  %188 = icmp eq i16* %187, %65
  br i1 %188, label %189, label %79

189:                                              ; preds = %185, %47
  %190 = phi i64 [ 0, %47 ], [ %186, %185 ]
  %191 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 0, i32 2
  %192 = load i64, i64* %191, align 8
  %193 = icmp ugt i64 %192, %190
  br i1 %193, label %194, label %207

194:                                              ; preds = %189
  %195 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 0
  %196 = sub i64 %192, %190
  %197 = bitcast %"class.courgette::DisassemblerElf32"* %0 to i8* (%"class.courgette::Disassembler"*, i64)***
  %198 = load i8* (%"class.courgette::Disassembler"*, i64)**, i8* (%"class.courgette::Disassembler"*, i64)*** %197, align 8
  %199 = getelementptr inbounds i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %198, i64 2
  %200 = load i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %199, align 8
  %201 = call i8* %200(%"class.courgette::Disassembler"* %195, i64 %190) #16
  %202 = bitcast %"class.courgette::InstructionReceptor"* %2 to i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)***
  %203 = load i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)**, i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)*** %202, align 8
  %204 = getelementptr inbounds i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)*, i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)** %203, i64 6
  %205 = load i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)*, i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)** %204, align 8
  %206 = call zeroext i1 %205(%"class.courgette::InstructionReceptor"* %2, i8* %201, i64 %196) #16
  br i1 %206, label %207, label %213

207:                                              ; preds = %189, %194
  %208 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %21, align 8
  %209 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %23, align 8
  %210 = bitcast i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %210)
  store i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)* @_ZN9courgette17DisassemblerElf328TypedRVA15IsLessThanByRVAERKNSt3__110unique_ptrIS1_NS2_14default_deleteIS1_EEEES8_, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %6, align 8
  call void @_ZNSt3__16__sortIRPFbRKNS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEES9_EPS7_EEvT0_SE_T_(%"class.std::__1::unique_ptr"* %208, %"class.std::__1::unique_ptr"* %209, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** nonnull dereferenceable(8) %6) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %210)
  %211 = load i64*, i64** %52, align 8
  %212 = icmp eq i64* %211, %56
  br label %213

213:                                              ; preds = %123, %112, %94, %194, %207
  %214 = phi i1 [ %212, %207 ], [ false, %194 ], [ false, %94 ], [ false, %112 ], [ false, %123 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %57) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #16
  br label %215

215:                                              ; preds = %28, %3, %213
  %216 = phi i1 [ %214, %213 ], [ false, %3 ], [ false, %28 ]
  %217 = load i64*, i64** %13, align 8
  %218 = icmp eq i64* %217, null
  br i1 %218, label %223, label %219

219:                                              ; preds = %215
  %220 = ptrtoint i64* %217 to i64
  %221 = bitcast i64** %14 to i64*
  store i64 %220, i64* %221, align 8
  %222 = bitcast i64* %217 to i8*
  call void @_ZdlPv(i8* %222) #18
  br label %223

223:                                              ; preds = %215, %219
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #16
  ret i1 %216
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN9courgette17DisassemblerElf328TypedRVA22IsLessThanByFileOffsetERKNSt3__110unique_ptrIS1_NS2_14default_deleteIS1_EEEES8_(%"class.std::__1::unique_ptr"* dereferenceable(8), %"class.std::__1::unique_ptr"* dereferenceable(8)) #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %3, align 8
  %5 = getelementptr inbounds %"class.courgette::DisassemblerElf32::TypedRVA", %"class.courgette::DisassemblerElf32::TypedRVA"* %4, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %1, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %7, align 8
  %9 = getelementptr inbounds %"class.courgette::DisassemblerElf32::TypedRVA", %"class.courgette::DisassemblerElf32::TypedRVA"* %8, i64 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = icmp ult i64 %6, %10
  ret i1 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK9courgette17DisassemblerElf3217ParseSimpleRegionEmmPNS_19InstructionReceptorE(%"class.courgette::DisassemblerElf32"*, i64, i64, %"class.courgette::InstructionReceptor"*) local_unnamed_addr #2 align 2 {
  %5 = icmp ugt i64 %2, %1
  br i1 %5, label %6, label %19

6:                                                ; preds = %4
  %7 = sub i64 %2, %1
  %8 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 0
  %9 = bitcast %"class.courgette::DisassemblerElf32"* %0 to i8* (%"class.courgette::Disassembler"*, i64)***
  %10 = load i8* (%"class.courgette::Disassembler"*, i64)**, i8* (%"class.courgette::Disassembler"*, i64)*** %9, align 8
  %11 = getelementptr inbounds i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %10, i64 2
  %12 = load i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %11, align 8
  %13 = tail call i8* %12(%"class.courgette::Disassembler"* %8, i64 %1) #16
  %14 = bitcast %"class.courgette::InstructionReceptor"* %3 to i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)***
  %15 = load i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)**, i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)*** %14, align 8
  %16 = getelementptr inbounds i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)*, i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)** %15, i64 6
  %17 = load i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)*, i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)** %16, align 8
  %18 = tail call zeroext i1 %17(%"class.courgette::InstructionReceptor"* %3, i8* %13, i64 %7) #16
  br label %19

19:                                               ; preds = %4, %6
  %20 = phi i1 [ %18, %6 ], [ true, %4 ]
  ret i1 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK9courgette17DisassemblerElf3220ParseProgbitsSectionEPK10Elf32_ShdrPNSt3__111__wrap_iterIPmEES7_PNS5_IPNS4_10unique_ptrINS0_8TypedRVAENS4_14default_deleteISA_EEEEEESF_PNS_15AssemblyProgramEPNS_19InstructionReceptorE(%"class.courgette::DisassemblerElf32"*, %struct.Elf32_Shdr* nocapture readonly, %"class.std::__1::__wrap_iter.57"* nocapture, i64*, %"class.std::__1::__wrap_iter.39"* nocapture, %"class.std::__1::unique_ptr"*, %"class.courgette::AssemblyProgram"*, %"class.courgette::InstructionReceptor"*) local_unnamed_addr #2 align 2 {
  %9 = alloca %"class.logging::CheckOpResult", align 8
  %10 = alloca %"class.logging::CheckError", align 8
  %11 = alloca %"class.logging::CheckOpResult", align 8
  %12 = alloca %"class.logging::CheckError", align 8
  %13 = alloca %"class.logging::CheckError", align 8
  %14 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %1, i64 0, i32 4
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %1, i64 0, i32 5
  %18 = load i32, i32* %17, align 4
  %19 = add i32 %18, %15
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %1, i64 0, i32 3
  %22 = load i32, i32* %21, align 4
  %23 = bitcast %"class.courgette::InstructionReceptor"* %7 to i1 (%"class.courgette::InstructionReceptor"*, i32)***
  %24 = load i1 (%"class.courgette::InstructionReceptor"*, i32)**, i1 (%"class.courgette::InstructionReceptor"*, i32)*** %23, align 8
  %25 = getelementptr inbounds i1 (%"class.courgette::InstructionReceptor"*, i32)*, i1 (%"class.courgette::InstructionReceptor"*, i32)** %24, i64 4
  %26 = load i1 (%"class.courgette::InstructionReceptor"*, i32)*, i1 (%"class.courgette::InstructionReceptor"*, i32)** %25, align 8
  %27 = tail call zeroext i1 %26(%"class.courgette::InstructionReceptor"* %7, i32 %22) #16
  br i1 %27, label %28, label %183

28:                                               ; preds = %8
  %29 = icmp ult i32 %15, %19
  br i1 %29, label %30, label %183

30:                                               ; preds = %28
  %31 = getelementptr inbounds %"class.std::__1::__wrap_iter.57", %"class.std::__1::__wrap_iter.57"* %2, i64 0, i32 0
  %32 = getelementptr inbounds %"class.std::__1::__wrap_iter.39", %"class.std::__1::__wrap_iter.39"* %4, i64 0, i32 0
  %33 = bitcast %"class.logging::CheckOpResult"* %11 to i8*
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %11, i64 0, i32 0
  %35 = bitcast %"class.logging::CheckOpResult"* %9 to i8*
  %36 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %9, i64 0, i32 0
  %37 = bitcast %"class.logging::CheckError"* %12 to i8*
  %38 = bitcast %"class.logging::CheckError"* %13 to i8*
  %39 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 0
  %40 = bitcast %"class.courgette::DisassemblerElf32"* %0 to i8* (%"class.courgette::Disassembler"*, i64)***
  %41 = bitcast %"class.courgette::DisassemblerElf32"* %0 to i32 (%"class.courgette::DisassemblerElf32"*, i8*)***
  %42 = bitcast %"class.logging::CheckError"* %10 to i8*
  %43 = bitcast %"class.courgette::InstructionReceptor"* %7 to i1 (%"class.courgette::InstructionReceptor"*, %"class.courgette::Label"*)***
  %44 = bitcast %"class.courgette::InstructionReceptor"* %7 to i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)***
  br label %45

45:                                               ; preds = %30, %180
  %46 = phi i64 [ %16, %30 ], [ %181, %180 ]
  %47 = load i64*, i64** %31, align 8
  %48 = icmp eq i64* %47, %3
  br i1 %48, label %52, label %49

49:                                               ; preds = %45
  %50 = load i64, i64* %47, align 8
  %51 = icmp ugt i64 %46, %50
  br i1 %51, label %183, label %52

52:                                               ; preds = %45, %49
  %53 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %32, align 8
  %54 = icmp eq %"class.std::__1::unique_ptr"* %53, %5
  br i1 %54, label %69, label %55

55:                                               ; preds = %52, %62
  %56 = phi %"class.std::__1::unique_ptr"* [ %63, %62 ], [ %53, %52 ]
  %57 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %56, i64 0, i32 0, i32 0, i32 0
  %58 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %57, align 8
  %59 = getelementptr inbounds %"class.courgette::DisassemblerElf32::TypedRVA", %"class.courgette::DisassemblerElf32::TypedRVA"* %58, i64 0, i32 3
  %60 = load i64, i64* %59, align 8
  %61 = icmp ugt i64 %46, %60
  br i1 %61, label %62, label %65

62:                                               ; preds = %55
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %56, i64 1
  store %"class.std::__1::unique_ptr"* %63, %"class.std::__1::unique_ptr"** %32, align 8
  %64 = icmp eq %"class.std::__1::unique_ptr"* %63, %5
  br i1 %64, label %65, label %55

65:                                               ; preds = %62, %55
  %66 = phi %"class.std::__1::unique_ptr"* [ %56, %55 ], [ %5, %62 ]
  %67 = phi i1 [ true, %55 ], [ false, %62 ]
  %68 = load i64*, i64** %31, align 8
  br label %69

69:                                               ; preds = %52, %65
  %70 = phi i64* [ %47, %52 ], [ %68, %65 ]
  %71 = phi %"class.std::__1::unique_ptr"* [ %5, %52 ], [ %66, %65 ]
  %72 = phi i1 [ false, %52 ], [ %67, %65 ]
  %73 = icmp ne i64* %70, %3
  br i1 %73, label %74, label %78

74:                                               ; preds = %69
  %75 = load i64, i64* %70, align 8
  %76 = icmp ult i64 %75, %20
  %77 = select i1 %76, i64 %75, i64 %20
  br label %78

78:                                               ; preds = %74, %69
  %79 = phi i64 [ %20, %69 ], [ %77, %74 ]
  br i1 %72, label %80, label %88

80:                                               ; preds = %78
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %71, i64 0, i32 0, i32 0, i32 0
  %82 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %81, align 8
  %83 = getelementptr inbounds %"class.courgette::DisassemblerElf32::TypedRVA", %"class.courgette::DisassemblerElf32::TypedRVA"* %82, i64 0, i32 3
  %84 = load i64, i64* %83, align 8
  %85 = add i64 %84, 3
  %86 = icmp ugt i64 %79, %85
  %87 = select i1 %86, i64 %84, i64 %79
  br label %88

88:                                               ; preds = %80, %78
  %89 = phi i64 [ %79, %78 ], [ %87, %80 ]
  %90 = icmp ugt i64 %89, %46
  br i1 %90, label %91, label %101

91:                                               ; preds = %88
  %92 = sub i64 %89, %46
  %93 = load i8* (%"class.courgette::Disassembler"*, i64)**, i8* (%"class.courgette::Disassembler"*, i64)*** %40, align 8
  %94 = getelementptr inbounds i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %93, i64 2
  %95 = load i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %94, align 8
  %96 = call i8* %95(%"class.courgette::Disassembler"* %39, i64 %46) #16
  %97 = load i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)**, i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)*** %44, align 8
  %98 = getelementptr inbounds i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)*, i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)** %97, i64 6
  %99 = load i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)*, i1 (%"class.courgette::InstructionReceptor"*, i8*, i64)** %98, align 8
  %100 = call zeroext i1 %99(%"class.courgette::InstructionReceptor"* %7, i8* %96, i64 %92) #16
  br i1 %100, label %180, label %183

101:                                              ; preds = %88
  br i1 %73, label %102, label %127

102:                                              ; preds = %101
  %103 = load i64, i64* %70, align 8
  %104 = icmp eq i64 %46, %103
  br i1 %104, label %105, label %127

105:                                              ; preds = %102
  %106 = load i8* (%"class.courgette::Disassembler"*, i64)**, i8* (%"class.courgette::Disassembler"*, i64)*** %40, align 8
  %107 = getelementptr inbounds i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %106, i64 2
  %108 = load i8* (%"class.courgette::Disassembler"*, i64)*, i8* (%"class.courgette::Disassembler"*, i64)** %107, align 8
  %109 = call i8* %108(%"class.courgette::Disassembler"* %39, i64 %46) #16
  %110 = load i32 (%"class.courgette::DisassemblerElf32"*, i8*)**, i32 (%"class.courgette::DisassemblerElf32"*, i8*)*** %41, align 8
  %111 = getelementptr inbounds i32 (%"class.courgette::DisassemblerElf32"*, i8*)*, i32 (%"class.courgette::DisassemblerElf32"*, i8*)** %110, i64 4
  %112 = load i32 (%"class.courgette::DisassemblerElf32"*, i8*)*, i32 (%"class.courgette::DisassemblerElf32"*, i8*)** %111, align 8
  %113 = call i32 %112(%"class.courgette::DisassemblerElf32"* %0, i8* %109) #16
  %114 = call %"class.courgette::Label"* @_ZN9courgette15AssemblyProgram14FindAbs32LabelEj(%"class.courgette::AssemblyProgram"* %6, i32 %113) #16
  %115 = icmp eq %"class.courgette::Label"* %114, null
  br i1 %115, label %116, label %118

116:                                              ; preds = %105
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #16
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %10, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.15, i64 0, i64 0), i32 582, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i64 0, i64 0)) #16
  %117 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %10) #16
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %10) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #16
  br label %118

118:                                              ; preds = %105, %116
  %119 = load i1 (%"class.courgette::InstructionReceptor"*, %"class.courgette::Label"*)**, i1 (%"class.courgette::InstructionReceptor"*, %"class.courgette::Label"*)*** %43, align 8
  %120 = getelementptr inbounds i1 (%"class.courgette::InstructionReceptor"*, %"class.courgette::Label"*)*, i1 (%"class.courgette::InstructionReceptor"*, %"class.courgette::Label"*)** %119, i64 8
  %121 = load i1 (%"class.courgette::InstructionReceptor"*, %"class.courgette::Label"*)*, i1 (%"class.courgette::InstructionReceptor"*, %"class.courgette::Label"*)** %120, align 8
  %122 = call zeroext i1 %121(%"class.courgette::InstructionReceptor"* %7, %"class.courgette::Label"* %114) #16
  br i1 %122, label %123, label %183

123:                                              ; preds = %118
  %124 = add i64 %46, 4
  %125 = load i64*, i64** %31, align 8
  %126 = getelementptr inbounds i64, i64* %125, i64 1
  store i64* %126, i64** %31, align 8
  br label %180

127:                                              ; preds = %102, %101
  br i1 %72, label %128, label %180

128:                                              ; preds = %127
  %129 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %71, i64 0, i32 0, i32 0, i32 0
  %130 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %129, align 8
  %131 = getelementptr inbounds %"class.courgette::DisassemblerElf32::TypedRVA", %"class.courgette::DisassemblerElf32::TypedRVA"* %130, i64 0, i32 3
  %132 = load i64, i64* %131, align 8
  %133 = icmp eq i64 %46, %132
  br i1 %133, label %134, label %180

134:                                              ; preds = %128
  %135 = getelementptr inbounds %"class.courgette::DisassemblerElf32::TypedRVA", %"class.courgette::DisassemblerElf32::TypedRVA"* %130, i64 0, i32 2
  %136 = load i32, i32* %135, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #16
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %137 = trunc i64 %46 to i32
  %138 = sub i32 %137, %15
  %139 = add i32 %138, %22
  %140 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %129, align 8
  %141 = getelementptr inbounds %"class.courgette::DisassemblerElf32::TypedRVA", %"class.courgette::DisassemblerElf32::TypedRVA"* %140, i64 0, i32 1
  %142 = load i32, i32* %141, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35)
  %143 = icmp eq i32 %139, %142
  br i1 %143, label %144, label %145

144:                                              ; preds = %134
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35)
  store i8* null, i8** %34, align 8
  br label %152

145:                                              ; preds = %134
  %146 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %139) #16
  %147 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %142) #16
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %9, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.20, i64 0, i64 0), i8* %146, i8* %147) #16
  %148 = load i8*, i8** %36, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35)
  store i8* %148, i8** %34, align 8
  %149 = icmp eq i8* %148, null
  br i1 %149, label %152, label %150

150:                                              ; preds = %145
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #16
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %12, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.15, i64 0, i64 0), i32 594, %"class.logging::CheckOpResult"* nonnull %11) #16
  %151 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %12) #16
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %12) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #16
  br label %152

152:                                              ; preds = %144, %145, %150
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #16
  %153 = add i32 %136, %139
  %154 = call %"class.courgette::Label"* @_ZN9courgette15AssemblyProgram14FindRel32LabelEj(%"class.courgette::AssemblyProgram"* %6, i32 %153) #16
  %155 = icmp eq %"class.courgette::Label"* %154, null
  br i1 %155, label %156, label %158

156:                                              ; preds = %152
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #16
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %13, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.15, i64 0, i64 0), i32 601, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i64 0, i64 0)) #16
  %157 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %13) #16
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %13) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #16
  br label %158

158:                                              ; preds = %152, %156
  %159 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %32, align 8
  %160 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %159, i64 0, i32 0, i32 0, i32 0
  %161 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %160, align 8
  %162 = bitcast %"class.courgette::DisassemblerElf32::TypedRVA"* %161 to i1 (%"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::Label"*, %"class.courgette::InstructionReceptor"*)***
  %163 = load i1 (%"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::Label"*, %"class.courgette::InstructionReceptor"*)**, i1 (%"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::Label"*, %"class.courgette::InstructionReceptor"*)*** %162, align 8
  %164 = getelementptr inbounds i1 (%"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::Label"*, %"class.courgette::InstructionReceptor"*)*, i1 (%"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::Label"*, %"class.courgette::InstructionReceptor"*)** %163, i64 3
  %165 = load i1 (%"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::Label"*, %"class.courgette::InstructionReceptor"*)*, i1 (%"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::Label"*, %"class.courgette::InstructionReceptor"*)** %164, align 8
  %166 = call zeroext i1 %165(%"class.courgette::DisassemblerElf32::TypedRVA"* %161, %"class.courgette::Label"* %154, %"class.courgette::InstructionReceptor"* %7) #16
  br i1 %166, label %167, label %183

167:                                              ; preds = %158
  %168 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %32, align 8
  %169 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %168, i64 0, i32 0, i32 0, i32 0
  %170 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %169, align 8
  %171 = bitcast %"class.courgette::DisassemblerElf32::TypedRVA"* %170 to i16 (%"class.courgette::DisassemblerElf32::TypedRVA"*)***
  %172 = load i16 (%"class.courgette::DisassemblerElf32::TypedRVA"*)**, i16 (%"class.courgette::DisassemblerElf32::TypedRVA"*)*** %171, align 8
  %173 = getelementptr inbounds i16 (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, i16 (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %172, i64 4
  %174 = load i16 (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, i16 (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %173, align 8
  %175 = call zeroext i16 %174(%"class.courgette::DisassemblerElf32::TypedRVA"* %170) #16
  %176 = zext i16 %175 to i64
  %177 = add i64 %46, %176
  %178 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %32, align 8
  %179 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %178, i64 1
  store %"class.std::__1::unique_ptr"* %179, %"class.std::__1::unique_ptr"** %32, align 8
  br label %180

180:                                              ; preds = %91, %127, %128, %167, %123
  %181 = phi i64 [ %124, %123 ], [ %177, %167 ], [ %46, %128 ], [ %46, %127 ], [ %89, %91 ]
  %182 = icmp ult i64 %181, %20
  br i1 %182, label %45, label %183

183:                                              ; preds = %49, %180, %91, %118, %158, %28, %8
  %184 = phi i1 [ false, %8 ], [ true, %28 ], [ false, %49 ], [ true, %180 ], [ false, %91 ], [ false, %118 ], [ false, %158 ]
  ret i1 %184
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(%"class.std::__1::basic_ostream"*, i32) local_unnamed_addr #3

declare %"class.courgette::Label"* @_ZN9courgette15AssemblyProgram14FindAbs32LabelEj(%"class.courgette::AssemblyProgram"*, i32) local_unnamed_addr #3

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9courgette17DisassemblerElf3221Elf32RvaVisitor_Rel32D0Ev(%"class.courgette::DisassemblerElf32::Elf32RvaVisitor_Rel32"*) unnamed_addr #2 comdat align 2 {
  %2 = bitcast %"class.courgette::DisassemblerElf32::Elf32RvaVisitor_Rel32"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK9courgette16VectorRvaVisitorINSt3__110unique_ptrINS_17DisassemblerElf328TypedRVAENS1_14default_deleteIS4_EEEEE9RemainingEv(%"class.courgette::VectorRvaVisitor"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.courgette::VectorRvaVisitor", %"class.courgette::VectorRvaVisitor"* %0, i64 0, i32 1, i32 0
  %3 = bitcast %"class.std::__1::unique_ptr"** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.courgette::VectorRvaVisitor", %"class.courgette::VectorRvaVisitor"* %0, i64 0, i32 2, i32 0
  %6 = bitcast %"class.std::__1::unique_ptr"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %7, %4
  %9 = ashr exact i64 %8, 3
  ret i64 %9
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9courgette16VectorRvaVisitorINSt3__110unique_ptrINS_17DisassemblerElf328TypedRVAENS1_14default_deleteIS4_EEEEE4NextEv(%"class.courgette::VectorRvaVisitor"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.courgette::VectorRvaVisitor", %"class.courgette::VectorRvaVisitor"* %0, i64 0, i32 1, i32 0
  %3 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %3, i64 1
  store %"class.std::__1::unique_ptr"* %4, %"class.std::__1::unique_ptr"** %2, align 8
  ret void
}

declare i8* @_ZNK9courgette12Disassembler19FileOffsetToPointerEm(%"class.courgette::Disassembler"*, i64) unnamed_addr #3

declare i8* @_ZNK9courgette12Disassembler12RVAToPointerEj(%"class.courgette::Disassembler"*, i32) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9courgette17DisassemblerElf32D2Ev(%"class.courgette::DisassemblerElf32"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [22 x i8*] }, { [22 x i8*] }* @_ZTVN9courgette17DisassemblerElf32E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 10
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %4, align 8
  %6 = icmp eq %"class.std::__1::unique_ptr"* %5, null
  br i1 %6, label %30, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.std::__1::unique_ptr"* %5 to i8*
  %9 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 10, i32 0, i32 1
  %10 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %9, align 8
  %11 = icmp eq %"class.std::__1::unique_ptr"* %10, %5
  br i1 %11, label %28, label %12

12:                                               ; preds = %7, %23
  %13 = phi %"class.std::__1::unique_ptr"* [ %14, %23 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 -1
  %15 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %14, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %15, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %15, align 8
  %17 = icmp eq %"class.courgette::DisassemblerElf32::TypedRVA"* %16, null
  br i1 %17, label %23, label %18

18:                                               ; preds = %12
  %19 = bitcast %"class.courgette::DisassemblerElf32::TypedRVA"* %16 to void (%"class.courgette::DisassemblerElf32::TypedRVA"*)***
  %20 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)**, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %20, i64 1
  %22 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %21, align 8
  tail call void %22(%"class.courgette::DisassemblerElf32::TypedRVA"* nonnull %16) #16
  br label %23

23:                                               ; preds = %18, %12
  %24 = icmp eq %"class.std::__1::unique_ptr"* %14, %5
  br i1 %24, label %25, label %12

25:                                               ; preds = %23
  %26 = bitcast %"class.std::__1::vector"* %3 to i8**
  %27 = load i8*, i8** %26, align 8
  br label %28

28:                                               ; preds = %25, %7
  %29 = phi i8* [ %27, %25 ], [ %8, %7 ]
  store %"class.std::__1::unique_ptr"* %5, %"class.std::__1::unique_ptr"** %9, align 8
  tail call void @_ZdlPv(i8* %29) #18
  br label %30

30:                                               ; preds = %1, %28
  %31 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 9, i32 0, i32 0
  %32 = load i32*, i32** %31, align 8
  %33 = icmp eq i32* %32, null
  br i1 %33, label %39, label %34

34:                                               ; preds = %30
  %35 = ptrtoint i32* %32 to i64
  %36 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 9, i32 0, i32 1
  %37 = bitcast i32** %36 to i64*
  store i64 %35, i64* %37, align 8
  %38 = bitcast i32* %32 to i8*
  tail call void @_ZdlPv(i8* %38) #18
  br label %39

39:                                               ; preds = %30, %34
  %40 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 4, i32 0, i32 0
  %41 = load i16*, i16** %40, align 8
  %42 = icmp eq i16* %41, null
  br i1 %42, label %48, label %43

43:                                               ; preds = %39
  %44 = ptrtoint i16* %41 to i64
  %45 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 4, i32 0, i32 1
  %46 = bitcast i16** %45 to i64*
  store i64 %44, i64* %46, align 8
  %47 = bitcast i16* %41 to i8*
  tail call void @_ZdlPv(i8* %47) #18
  br label %48

48:                                               ; preds = %39, %43
  %49 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 3, i32 0, i32 0
  %50 = load %struct.Elf32_Shdr*, %struct.Elf32_Shdr** %49, align 8
  %51 = icmp eq %struct.Elf32_Shdr* %50, null
  br i1 %51, label %57, label %52

52:                                               ; preds = %48
  %53 = ptrtoint %struct.Elf32_Shdr* %50 to i64
  %54 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 3, i32 0, i32 1
  %55 = bitcast %struct.Elf32_Shdr** %54 to i64*
  store i64 %53, i64* %55, align 8
  %56 = bitcast %struct.Elf32_Shdr* %50 to i8*
  tail call void @_ZdlPv(i8* %56) #18
  br label %57

57:                                               ; preds = %48, %52
  %58 = getelementptr inbounds %"class.courgette::DisassemblerElf32", %"class.courgette::DisassemblerElf32"* %0, i64 0, i32 0
  tail call void @_ZN9courgette12DisassemblerD2Ev(%"class.courgette::Disassembler"* %58) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9courgette17DisassemblerElf32D0Ev(%"class.courgette::DisassemblerElf32"*) unnamed_addr #2 comdat align 2 {
  tail call void @llvm.trap() #17
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK9courgette17DisassemblerElf3210image_baseEv(%"class.courgette::DisassemblerElf32"*) unnamed_addr #2 comdat align 2 {
  ret i64 0
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #9

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @"_ZNSt3__113__stable_sortIRZN9courgette12_GLOBAL__N_131GetSectionHeaderFileOffsetOrderERKNS_6vectorI10Elf32_ShdrNS_9allocatorIS4_EEEEE3$_0NS_11__wrap_iterIPtEEEEvT0_SF_T_NS_15iterator_traitsISF_E15difference_typeEPNSI_10value_typeEl"(i16*, i16*, %class.anon* dereferenceable(8), i64, i16*, i64) unnamed_addr #2 {
  switch i64 %3, label %23 [
    i64 0, label %409
    i64 1, label %409
    i64 2, label %7
  ]

7:                                                ; preds = %6
  %8 = getelementptr inbounds i16, i16* %1, i64 -1
  %9 = load i16, i16* %8, align 2
  %10 = load i16, i16* %0, align 2
  %11 = getelementptr inbounds %class.anon, %class.anon* %2, i64 0, i32 0
  %12 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %11, align 8
  %13 = zext i16 %9 to i64
  %14 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %12, i64 0, i32 0, i32 0
  %15 = load %struct.Elf32_Shdr*, %struct.Elf32_Shdr** %14, align 8
  %16 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %15, i64 %13, i32 4
  %17 = load i32, i32* %16, align 4
  %18 = zext i16 %10 to i64
  %19 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %15, i64 %18, i32 4
  %20 = load i32, i32* %19, align 4
  %21 = icmp ult i32 %17, %20
  br i1 %21, label %22, label %409

22:                                               ; preds = %7
  store i16 %9, i16* %0, align 2
  store i16 %10, i16* %8, align 2
  br label %409

23:                                               ; preds = %6
  %24 = icmp slt i64 %3, 129
  br i1 %24, label %25, label %57

25:                                               ; preds = %23
  %26 = icmp eq i16* %0, %1
  br i1 %26, label %409, label %27

27:                                               ; preds = %25
  %28 = getelementptr inbounds i16, i16* %0, i64 1
  %29 = icmp eq i16* %28, %1
  br i1 %29, label %409, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %class.anon, %class.anon* %2, i64 0, i32 0
  br label %32

32:                                               ; preds = %51, %30
  %33 = phi i16* [ %28, %30 ], [ %53, %51 ]
  %34 = load i16, i16* %33, align 2
  %35 = icmp eq i16* %33, %0
  br i1 %35, label %51, label %36

36:                                               ; preds = %32
  %37 = zext i16 %34 to i64
  br label %38

38:                                               ; preds = %55, %36
  %39 = phi i16* [ %33, %36 ], [ %40, %55 ]
  %40 = getelementptr inbounds i16, i16* %39, i64 -1
  %41 = load i16, i16* %40, align 2
  %42 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %31, align 8
  %43 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %42, i64 0, i32 0, i32 0
  %44 = load %struct.Elf32_Shdr*, %struct.Elf32_Shdr** %43, align 8
  %45 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %44, i64 %37, i32 4
  %46 = load i32, i32* %45, align 4
  %47 = zext i16 %41 to i64
  %48 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %44, i64 %47, i32 4
  %49 = load i32, i32* %48, align 4
  %50 = icmp ult i32 %46, %49
  br i1 %50, label %55, label %51

51:                                               ; preds = %55, %38, %32
  %52 = phi i16* [ %0, %32 ], [ %39, %38 ], [ %0, %55 ]
  store i16 %34, i16* %52, align 2
  %53 = getelementptr inbounds i16, i16* %33, i64 1
  %54 = icmp eq i16* %53, %1
  br i1 %54, label %409, label %32

55:                                               ; preds = %38
  store i16 %41, i16* %39, align 2
  %56 = icmp eq i16* %40, %0
  br i1 %56, label %51, label %38

57:                                               ; preds = %23
  %58 = lshr i64 %3, 1
  %59 = getelementptr inbounds i16, i16* %0, i64 %58
  %60 = icmp sgt i64 %3, %5
  br i1 %60, label %407, label %61

61:                                               ; preds = %57
  tail call fastcc void @"_ZNSt3__118__stable_sort_moveIRZN9courgette12_GLOBAL__N_131GetSectionHeaderFileOffsetOrderERKNS_6vectorI10Elf32_ShdrNS_9allocatorIS4_EEEEE3$_0NS_11__wrap_iterIPtEEEEvT0_SF_T_NS_15iterator_traitsISF_E15difference_typeEPNSI_10value_typeE"(i16* %0, i16* %59, %class.anon* dereferenceable(8) %2, i64 %58, i16* %4)
  %62 = sub nsw i64 %3, %58
  %63 = getelementptr inbounds i16, i16* %4, i64 %58
  tail call fastcc void @"_ZNSt3__118__stable_sort_moveIRZN9courgette12_GLOBAL__N_131GetSectionHeaderFileOffsetOrderERKNS_6vectorI10Elf32_ShdrNS_9allocatorIS4_EEEEE3$_0NS_11__wrap_iterIPtEEEEvT0_SF_T_NS_15iterator_traitsISF_E15difference_typeEPNSI_10value_typeE"(i16* %59, i16* %1, %class.anon* dereferenceable(8) %2, i64 %62, i16* %63)
  %64 = getelementptr inbounds i16, i16* %4, i64 %3
  %65 = getelementptr inbounds %class.anon, %class.anon* %2, i64 0, i32 0
  br label %195

66:                                               ; preds = %374
  %67 = ptrtoint i16* %375 to i64
  %68 = icmp eq i16* %375, %64
  br i1 %68, label %409, label %69

69:                                               ; preds = %66
  %70 = add i64 %3, -1
  %71 = getelementptr i16, i16* %4, i64 %70
  %72 = ptrtoint i16* %71 to i64
  %73 = sub i64 %72, %67
  %74 = lshr i64 %73, 1
  %75 = add nuw i64 %74, 1
  %76 = icmp ult i64 %75, 16
  br i1 %76, label %77, label %102

77:                                               ; preds = %193, %102, %69
  %78 = phi i16* [ %375, %102 ], [ %375, %69 ], [ %116, %193 ]
  %79 = phi i16* [ %377, %102 ], [ %377, %69 ], [ %117, %193 ]
  %80 = ptrtoint i16* %78 to i64
  %81 = add i64 %3, -1
  %82 = getelementptr i16, i16* %4, i64 %81
  %83 = ptrtoint i16* %82 to i64
  %84 = sub i64 %83, %80
  %85 = lshr i64 %84, 1
  %86 = add nuw i64 %85, 1
  %87 = and i64 %86, 7
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %98, label %89

89:                                               ; preds = %77, %89
  %90 = phi i16* [ %94, %89 ], [ %78, %77 ]
  %91 = phi i16* [ %95, %89 ], [ %79, %77 ]
  %92 = phi i64 [ %96, %89 ], [ %87, %77 ]
  %93 = load i16, i16* %90, align 2
  store i16 %93, i16* %91, align 2
  %94 = getelementptr inbounds i16, i16* %90, i64 1
  %95 = getelementptr inbounds i16, i16* %91, i64 1
  %96 = add i64 %92, -1
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %98, label %89, !llvm.loop !14

98:                                               ; preds = %89, %77
  %99 = phi i16* [ %78, %77 ], [ %94, %89 ]
  %100 = phi i16* [ %79, %77 ], [ %95, %89 ]
  %101 = icmp ult i64 %84, 14
  br i1 %101, label %409, label %379

102:                                              ; preds = %69
  %103 = add i64 %3, -1
  %104 = getelementptr i16, i16* %4, i64 %103
  %105 = ptrtoint i16* %104 to i64
  %106 = sub i64 %105, %67
  %107 = lshr i64 %106, 1
  %108 = add nuw i64 %107, 1
  %109 = getelementptr i16, i16* %377, i64 %108
  %110 = getelementptr i16, i16* %375, i64 %108
  %111 = icmp ult i16* %377, %110
  %112 = icmp ult i16* %375, %109
  %113 = and i1 %111, %112
  br i1 %113, label %77, label %114

114:                                              ; preds = %102
  %115 = and i64 %75, -16
  %116 = getelementptr i16, i16* %375, i64 %115
  %117 = getelementptr i16, i16* %377, i64 %115
  %118 = add i64 %115, -16
  %119 = lshr exact i64 %118, 4
  %120 = add nuw nsw i64 %119, 1
  %121 = and i64 %120, 3
  %122 = icmp ult i64 %118, 48
  br i1 %122, label %174, label %123

123:                                              ; preds = %114
  %124 = sub nsw i64 %120, %121
  br label %125

125:                                              ; preds = %125, %123
  %126 = phi i64 [ 0, %123 ], [ %171, %125 ]
  %127 = phi i64 [ %124, %123 ], [ %172, %125 ]
  %128 = getelementptr i16, i16* %375, i64 %126
  %129 = getelementptr i16, i16* %377, i64 %126
  %130 = bitcast i16* %128 to <8 x i16>*
  %131 = load <8 x i16>, <8 x i16>* %130, align 2, !alias.scope !16
  %132 = getelementptr i16, i16* %128, i64 8
  %133 = bitcast i16* %132 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 2, !alias.scope !16
  %135 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %131, <8 x i16>* %135, align 2, !alias.scope !19, !noalias !16
  %136 = getelementptr i16, i16* %129, i64 8
  %137 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %137, align 2, !alias.scope !19, !noalias !16
  %138 = or i64 %126, 16
  %139 = getelementptr i16, i16* %375, i64 %138
  %140 = getelementptr i16, i16* %377, i64 %138
  %141 = bitcast i16* %139 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 2, !alias.scope !16
  %143 = getelementptr i16, i16* %139, i64 8
  %144 = bitcast i16* %143 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2, !alias.scope !16
  %146 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %146, align 2, !alias.scope !19, !noalias !16
  %147 = getelementptr i16, i16* %140, i64 8
  %148 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %145, <8 x i16>* %148, align 2, !alias.scope !19, !noalias !16
  %149 = or i64 %126, 32
  %150 = getelementptr i16, i16* %375, i64 %149
  %151 = getelementptr i16, i16* %377, i64 %149
  %152 = bitcast i16* %150 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 2, !alias.scope !16
  %154 = getelementptr i16, i16* %150, i64 8
  %155 = bitcast i16* %154 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 2, !alias.scope !16
  %157 = bitcast i16* %151 to <8 x i16>*
  store <8 x i16> %153, <8 x i16>* %157, align 2, !alias.scope !19, !noalias !16
  %158 = getelementptr i16, i16* %151, i64 8
  %159 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %159, align 2, !alias.scope !19, !noalias !16
  %160 = or i64 %126, 48
  %161 = getelementptr i16, i16* %375, i64 %160
  %162 = getelementptr i16, i16* %377, i64 %160
  %163 = bitcast i16* %161 to <8 x i16>*
  %164 = load <8 x i16>, <8 x i16>* %163, align 2, !alias.scope !16
  %165 = getelementptr i16, i16* %161, i64 8
  %166 = bitcast i16* %165 to <8 x i16>*
  %167 = load <8 x i16>, <8 x i16>* %166, align 2, !alias.scope !16
  %168 = bitcast i16* %162 to <8 x i16>*
  store <8 x i16> %164, <8 x i16>* %168, align 2, !alias.scope !19, !noalias !16
  %169 = getelementptr i16, i16* %162, i64 8
  %170 = bitcast i16* %169 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %170, align 2, !alias.scope !19, !noalias !16
  %171 = add i64 %126, 64
  %172 = add i64 %127, -4
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %174, label %125, !llvm.loop !21

174:                                              ; preds = %125, %114
  %175 = phi i64 [ 0, %114 ], [ %171, %125 ]
  %176 = icmp eq i64 %121, 0
  br i1 %176, label %193, label %177

177:                                              ; preds = %174, %177
  %178 = phi i64 [ %190, %177 ], [ %175, %174 ]
  %179 = phi i64 [ %191, %177 ], [ %121, %174 ]
  %180 = getelementptr i16, i16* %375, i64 %178
  %181 = getelementptr i16, i16* %377, i64 %178
  %182 = bitcast i16* %180 to <8 x i16>*
  %183 = load <8 x i16>, <8 x i16>* %182, align 2, !alias.scope !16
  %184 = getelementptr i16, i16* %180, i64 8
  %185 = bitcast i16* %184 to <8 x i16>*
  %186 = load <8 x i16>, <8 x i16>* %185, align 2, !alias.scope !16
  %187 = bitcast i16* %181 to <8 x i16>*
  store <8 x i16> %183, <8 x i16>* %187, align 2, !alias.scope !19, !noalias !16
  %188 = getelementptr i16, i16* %181, i64 8
  %189 = bitcast i16* %188 to <8 x i16>*
  store <8 x i16> %186, <8 x i16>* %189, align 2, !alias.scope !19, !noalias !16
  %190 = add i64 %178, 16
  %191 = add i64 %179, -1
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %193, label %177, !llvm.loop !22

193:                                              ; preds = %177, %174
  %194 = icmp eq i64 %75, %115
  br i1 %194, label %409, label %77

195:                                              ; preds = %374, %61
  %196 = phi i16* [ %4, %61 ], [ %376, %374 ]
  %197 = phi i16* [ %63, %61 ], [ %375, %374 ]
  %198 = phi i16* [ %0, %61 ], [ %377, %374 ]
  %199 = icmp eq i16* %197, %64
  br i1 %199, label %200, label %357

200:                                              ; preds = %195
  %201 = ptrtoint i16* %196 to i64
  %202 = icmp eq i16* %196, %63
  br i1 %202, label %409, label %203

203:                                              ; preds = %200
  %204 = add nsw i64 %58, -1
  %205 = getelementptr i16, i16* %4, i64 %204
  %206 = ptrtoint i16* %205 to i64
  %207 = sub i64 %206, %201
  %208 = lshr i64 %207, 1
  %209 = add nuw i64 %208, 1
  %210 = icmp ult i64 %209, 16
  br i1 %210, label %304, label %211

211:                                              ; preds = %203
  %212 = add nsw i64 %58, -1
  %213 = getelementptr i16, i16* %4, i64 %212
  %214 = ptrtoint i16* %213 to i64
  %215 = sub i64 %214, %201
  %216 = lshr i64 %215, 1
  %217 = add nuw i64 %216, 1
  %218 = getelementptr i16, i16* %198, i64 %217
  %219 = getelementptr i16, i16* %196, i64 %217
  %220 = icmp ult i16* %198, %219
  %221 = icmp ult i16* %196, %218
  %222 = and i1 %220, %221
  br i1 %222, label %304, label %223

223:                                              ; preds = %211
  %224 = and i64 %209, -16
  %225 = getelementptr i16, i16* %196, i64 %224
  %226 = getelementptr i16, i16* %198, i64 %224
  %227 = add i64 %224, -16
  %228 = lshr exact i64 %227, 4
  %229 = add nuw nsw i64 %228, 1
  %230 = and i64 %229, 3
  %231 = icmp ult i64 %227, 48
  br i1 %231, label %283, label %232

232:                                              ; preds = %223
  %233 = sub nsw i64 %229, %230
  br label %234

234:                                              ; preds = %234, %232
  %235 = phi i64 [ 0, %232 ], [ %280, %234 ]
  %236 = phi i64 [ %233, %232 ], [ %281, %234 ]
  %237 = getelementptr i16, i16* %196, i64 %235
  %238 = getelementptr i16, i16* %198, i64 %235
  %239 = bitcast i16* %237 to <8 x i16>*
  %240 = load <8 x i16>, <8 x i16>* %239, align 2, !alias.scope !23
  %241 = getelementptr i16, i16* %237, i64 8
  %242 = bitcast i16* %241 to <8 x i16>*
  %243 = load <8 x i16>, <8 x i16>* %242, align 2, !alias.scope !23
  %244 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %240, <8 x i16>* %244, align 2, !alias.scope !26, !noalias !23
  %245 = getelementptr i16, i16* %238, i64 8
  %246 = bitcast i16* %245 to <8 x i16>*
  store <8 x i16> %243, <8 x i16>* %246, align 2, !alias.scope !26, !noalias !23
  %247 = or i64 %235, 16
  %248 = getelementptr i16, i16* %196, i64 %247
  %249 = getelementptr i16, i16* %198, i64 %247
  %250 = bitcast i16* %248 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2, !alias.scope !23
  %252 = getelementptr i16, i16* %248, i64 8
  %253 = bitcast i16* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2, !alias.scope !23
  %255 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %255, align 2, !alias.scope !26, !noalias !23
  %256 = getelementptr i16, i16* %249, i64 8
  %257 = bitcast i16* %256 to <8 x i16>*
  store <8 x i16> %254, <8 x i16>* %257, align 2, !alias.scope !26, !noalias !23
  %258 = or i64 %235, 32
  %259 = getelementptr i16, i16* %196, i64 %258
  %260 = getelementptr i16, i16* %198, i64 %258
  %261 = bitcast i16* %259 to <8 x i16>*
  %262 = load <8 x i16>, <8 x i16>* %261, align 2, !alias.scope !23
  %263 = getelementptr i16, i16* %259, i64 8
  %264 = bitcast i16* %263 to <8 x i16>*
  %265 = load <8 x i16>, <8 x i16>* %264, align 2, !alias.scope !23
  %266 = bitcast i16* %260 to <8 x i16>*
  store <8 x i16> %262, <8 x i16>* %266, align 2, !alias.scope !26, !noalias !23
  %267 = getelementptr i16, i16* %260, i64 8
  %268 = bitcast i16* %267 to <8 x i16>*
  store <8 x i16> %265, <8 x i16>* %268, align 2, !alias.scope !26, !noalias !23
  %269 = or i64 %235, 48
  %270 = getelementptr i16, i16* %196, i64 %269
  %271 = getelementptr i16, i16* %198, i64 %269
  %272 = bitcast i16* %270 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 2, !alias.scope !23
  %274 = getelementptr i16, i16* %270, i64 8
  %275 = bitcast i16* %274 to <8 x i16>*
  %276 = load <8 x i16>, <8 x i16>* %275, align 2, !alias.scope !23
  %277 = bitcast i16* %271 to <8 x i16>*
  store <8 x i16> %273, <8 x i16>* %277, align 2, !alias.scope !26, !noalias !23
  %278 = getelementptr i16, i16* %271, i64 8
  %279 = bitcast i16* %278 to <8 x i16>*
  store <8 x i16> %276, <8 x i16>* %279, align 2, !alias.scope !26, !noalias !23
  %280 = add i64 %235, 64
  %281 = add i64 %236, -4
  %282 = icmp eq i64 %281, 0
  br i1 %282, label %283, label %234, !llvm.loop !28

283:                                              ; preds = %234, %223
  %284 = phi i64 [ 0, %223 ], [ %280, %234 ]
  %285 = icmp eq i64 %230, 0
  br i1 %285, label %302, label %286

286:                                              ; preds = %283, %286
  %287 = phi i64 [ %299, %286 ], [ %284, %283 ]
  %288 = phi i64 [ %300, %286 ], [ %230, %283 ]
  %289 = getelementptr i16, i16* %196, i64 %287
  %290 = getelementptr i16, i16* %198, i64 %287
  %291 = bitcast i16* %289 to <8 x i16>*
  %292 = load <8 x i16>, <8 x i16>* %291, align 2, !alias.scope !23
  %293 = getelementptr i16, i16* %289, i64 8
  %294 = bitcast i16* %293 to <8 x i16>*
  %295 = load <8 x i16>, <8 x i16>* %294, align 2, !alias.scope !23
  %296 = bitcast i16* %290 to <8 x i16>*
  store <8 x i16> %292, <8 x i16>* %296, align 2, !alias.scope !26, !noalias !23
  %297 = getelementptr i16, i16* %290, i64 8
  %298 = bitcast i16* %297 to <8 x i16>*
  store <8 x i16> %295, <8 x i16>* %298, align 2, !alias.scope !26, !noalias !23
  %299 = add i64 %287, 16
  %300 = add i64 %288, -1
  %301 = icmp eq i64 %300, 0
  br i1 %301, label %302, label %286, !llvm.loop !29

302:                                              ; preds = %286, %283
  %303 = icmp eq i64 %209, %224
  br i1 %303, label %409, label %304

304:                                              ; preds = %302, %211, %203
  %305 = phi i16* [ %196, %211 ], [ %196, %203 ], [ %225, %302 ]
  %306 = phi i16* [ %198, %211 ], [ %198, %203 ], [ %226, %302 ]
  %307 = ptrtoint i16* %305 to i64
  %308 = add nsw i64 %58, -1
  %309 = getelementptr i16, i16* %4, i64 %308
  %310 = ptrtoint i16* %309 to i64
  %311 = sub i64 %310, %307
  %312 = lshr i64 %311, 1
  %313 = add nuw i64 %312, 1
  %314 = and i64 %313, 7
  %315 = icmp eq i64 %314, 0
  br i1 %315, label %325, label %316

316:                                              ; preds = %304, %316
  %317 = phi i16* [ %321, %316 ], [ %305, %304 ]
  %318 = phi i16* [ %322, %316 ], [ %306, %304 ]
  %319 = phi i64 [ %323, %316 ], [ %314, %304 ]
  %320 = load i16, i16* %317, align 2
  store i16 %320, i16* %318, align 2
  %321 = getelementptr inbounds i16, i16* %317, i64 1
  %322 = getelementptr inbounds i16, i16* %318, i64 1
  %323 = add i64 %319, -1
  %324 = icmp eq i64 %323, 0
  br i1 %324, label %325, label %316, !llvm.loop !30

325:                                              ; preds = %316, %304
  %326 = phi i16* [ %305, %304 ], [ %321, %316 ]
  %327 = phi i16* [ %306, %304 ], [ %322, %316 ]
  %328 = icmp ult i64 %311, 14
  br i1 %328, label %409, label %329

329:                                              ; preds = %325, %329
  %330 = phi i16* [ %354, %329 ], [ %326, %325 ]
  %331 = phi i16* [ %355, %329 ], [ %327, %325 ]
  %332 = load i16, i16* %330, align 2
  store i16 %332, i16* %331, align 2
  %333 = getelementptr inbounds i16, i16* %330, i64 1
  %334 = getelementptr inbounds i16, i16* %331, i64 1
  %335 = load i16, i16* %333, align 2
  store i16 %335, i16* %334, align 2
  %336 = getelementptr inbounds i16, i16* %330, i64 2
  %337 = getelementptr inbounds i16, i16* %331, i64 2
  %338 = load i16, i16* %336, align 2
  store i16 %338, i16* %337, align 2
  %339 = getelementptr inbounds i16, i16* %330, i64 3
  %340 = getelementptr inbounds i16, i16* %331, i64 3
  %341 = load i16, i16* %339, align 2
  store i16 %341, i16* %340, align 2
  %342 = getelementptr inbounds i16, i16* %330, i64 4
  %343 = getelementptr inbounds i16, i16* %331, i64 4
  %344 = load i16, i16* %342, align 2
  store i16 %344, i16* %343, align 2
  %345 = getelementptr inbounds i16, i16* %330, i64 5
  %346 = getelementptr inbounds i16, i16* %331, i64 5
  %347 = load i16, i16* %345, align 2
  store i16 %347, i16* %346, align 2
  %348 = getelementptr inbounds i16, i16* %330, i64 6
  %349 = getelementptr inbounds i16, i16* %331, i64 6
  %350 = load i16, i16* %348, align 2
  store i16 %350, i16* %349, align 2
  %351 = getelementptr inbounds i16, i16* %330, i64 7
  %352 = getelementptr inbounds i16, i16* %331, i64 7
  %353 = load i16, i16* %351, align 2
  store i16 %353, i16* %352, align 2
  %354 = getelementptr inbounds i16, i16* %330, i64 8
  %355 = getelementptr inbounds i16, i16* %331, i64 8
  %356 = icmp eq i16* %354, %63
  br i1 %356, label %409, label %329, !llvm.loop !31

357:                                              ; preds = %195
  %358 = load i16, i16* %197, align 2
  %359 = load i16, i16* %196, align 2
  %360 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %65, align 8
  %361 = zext i16 %358 to i64
  %362 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %360, i64 0, i32 0, i32 0
  %363 = load %struct.Elf32_Shdr*, %struct.Elf32_Shdr** %362, align 8
  %364 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %363, i64 %361, i32 4
  %365 = load i32, i32* %364, align 4
  %366 = zext i16 %359 to i64
  %367 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %363, i64 %366, i32 4
  %368 = load i32, i32* %367, align 4
  %369 = icmp ult i32 %365, %368
  br i1 %369, label %370, label %372

370:                                              ; preds = %357
  store i16 %358, i16* %198, align 2
  %371 = getelementptr inbounds i16, i16* %197, i64 1
  br label %374

372:                                              ; preds = %357
  store i16 %359, i16* %198, align 2
  %373 = getelementptr inbounds i16, i16* %196, i64 1
  br label %374

374:                                              ; preds = %372, %370
  %375 = phi i16* [ %371, %370 ], [ %197, %372 ]
  %376 = phi i16* [ %196, %370 ], [ %373, %372 ]
  %377 = getelementptr inbounds i16, i16* %198, i64 1
  %378 = icmp eq i16* %376, %63
  br i1 %378, label %66, label %195

379:                                              ; preds = %98, %379
  %380 = phi i16* [ %404, %379 ], [ %99, %98 ]
  %381 = phi i16* [ %405, %379 ], [ %100, %98 ]
  %382 = load i16, i16* %380, align 2
  store i16 %382, i16* %381, align 2
  %383 = getelementptr inbounds i16, i16* %380, i64 1
  %384 = getelementptr inbounds i16, i16* %381, i64 1
  %385 = load i16, i16* %383, align 2
  store i16 %385, i16* %384, align 2
  %386 = getelementptr inbounds i16, i16* %380, i64 2
  %387 = getelementptr inbounds i16, i16* %381, i64 2
  %388 = load i16, i16* %386, align 2
  store i16 %388, i16* %387, align 2
  %389 = getelementptr inbounds i16, i16* %380, i64 3
  %390 = getelementptr inbounds i16, i16* %381, i64 3
  %391 = load i16, i16* %389, align 2
  store i16 %391, i16* %390, align 2
  %392 = getelementptr inbounds i16, i16* %380, i64 4
  %393 = getelementptr inbounds i16, i16* %381, i64 4
  %394 = load i16, i16* %392, align 2
  store i16 %394, i16* %393, align 2
  %395 = getelementptr inbounds i16, i16* %380, i64 5
  %396 = getelementptr inbounds i16, i16* %381, i64 5
  %397 = load i16, i16* %395, align 2
  store i16 %397, i16* %396, align 2
  %398 = getelementptr inbounds i16, i16* %380, i64 6
  %399 = getelementptr inbounds i16, i16* %381, i64 6
  %400 = load i16, i16* %398, align 2
  store i16 %400, i16* %399, align 2
  %401 = getelementptr inbounds i16, i16* %380, i64 7
  %402 = getelementptr inbounds i16, i16* %381, i64 7
  %403 = load i16, i16* %401, align 2
  store i16 %403, i16* %402, align 2
  %404 = getelementptr inbounds i16, i16* %380, i64 8
  %405 = getelementptr inbounds i16, i16* %381, i64 8
  %406 = icmp eq i16* %404, %64
  br i1 %406, label %409, label %379, !llvm.loop !32

407:                                              ; preds = %57
  tail call fastcc void @"_ZNSt3__113__stable_sortIRZN9courgette12_GLOBAL__N_131GetSectionHeaderFileOffsetOrderERKNS_6vectorI10Elf32_ShdrNS_9allocatorIS4_EEEEE3$_0NS_11__wrap_iterIPtEEEEvT0_SF_T_NS_15iterator_traitsISF_E15difference_typeEPNSI_10value_typeEl"(i16* %0, i16* %59, %class.anon* dereferenceable(8) %2, i64 %58, i16* %4, i64 %5)
  %408 = sub nsw i64 %3, %58
  tail call fastcc void @"_ZNSt3__113__stable_sortIRZN9courgette12_GLOBAL__N_131GetSectionHeaderFileOffsetOrderERKNS_6vectorI10Elf32_ShdrNS_9allocatorIS4_EEEEE3$_0NS_11__wrap_iterIPtEEEEvT0_SF_T_NS_15iterator_traitsISF_E15difference_typeEPNSI_10value_typeEl"(i16* %59, i16* %1, %class.anon* dereferenceable(8) %2, i64 %408, i16* %4, i64 %5)
  tail call fastcc void @"_ZNSt3__115__inplace_mergeIRZN9courgette12_GLOBAL__N_131GetSectionHeaderFileOffsetOrderERKNS_6vectorI10Elf32_ShdrNS_9allocatorIS4_EEEEE3$_0NS_11__wrap_iterIPtEEEEvT0_SF_SF_T_NS_15iterator_traitsISF_E15difference_typeESJ_PNSI_10value_typeEl"(i16* %0, i16* %59, i16* %1, %class.anon* dereferenceable(8) %2, i64 %58, i64 %408, i16* %4, i64 %5)
  ret void

409:                                              ; preds = %98, %379, %325, %329, %51, %193, %302, %200, %66, %27, %25, %7, %22, %6, %6
  ret void
}

; Function Attrs: nobuiltin nofree nounwind
declare noalias i8* @_ZnwmRKSt9nothrow_t(i64, %"struct.std::nothrow_t"* dereferenceable(1)) local_unnamed_addr #11

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #12

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @"_ZNSt3__118__stable_sort_moveIRZN9courgette12_GLOBAL__N_131GetSectionHeaderFileOffsetOrderERKNS_6vectorI10Elf32_ShdrNS_9allocatorIS4_EEEEE3$_0NS_11__wrap_iterIPtEEEEvT0_SF_T_NS_15iterator_traitsISF_E15difference_typeEPNSI_10value_typeE"(i16*, i16*, %class.anon* dereferenceable(8), i64, i16*) unnamed_addr #2 {
  switch i64 %3, label %29 [
    i64 0, label %431
    i64 1, label %6
    i64 2, label %8
  ]

6:                                                ; preds = %5
  %7 = load i16, i16* %0, align 2
  store i16 %7, i16* %4, align 2
  br label %431

8:                                                ; preds = %5
  %9 = getelementptr inbounds i16, i16* %1, i64 -1
  %10 = load i16, i16* %9, align 2
  %11 = load i16, i16* %0, align 2
  %12 = getelementptr inbounds %class.anon, %class.anon* %2, i64 0, i32 0
  %13 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %12, align 8
  %14 = zext i16 %10 to i64
  %15 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %13, i64 0, i32 0, i32 0
  %16 = load %struct.Elf32_Shdr*, %struct.Elf32_Shdr** %15, align 8
  %17 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %16, i64 %14, i32 4
  %18 = load i32, i32* %17, align 4
  %19 = zext i16 %11 to i64
  %20 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %16, i64 %19, i32 4
  %21 = load i32, i32* %20, align 4
  %22 = icmp ult i32 %18, %21
  br i1 %22, label %23, label %26

23:                                               ; preds = %8
  store i16 %10, i16* %4, align 2
  %24 = getelementptr inbounds i16, i16* %4, i64 1
  %25 = load i16, i16* %0, align 2
  store i16 %25, i16* %24, align 2
  br label %431

26:                                               ; preds = %8
  store i16 %11, i16* %4, align 2
  %27 = getelementptr inbounds i16, i16* %4, i64 1
  %28 = load i16, i16* %9, align 2
  store i16 %28, i16* %27, align 2
  br label %431

29:                                               ; preds = %5
  %30 = icmp slt i64 %3, 9
  br i1 %30, label %31, label %83

31:                                               ; preds = %29
  %32 = icmp eq i16* %0, %1
  br i1 %32, label %431, label %33

33:                                               ; preds = %31
  %34 = load i16, i16* %0, align 2
  store i16 %34, i16* %4, align 2
  %35 = getelementptr inbounds i16, i16* %0, i64 1
  %36 = icmp eq i16* %35, %1
  br i1 %36, label %431, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %class.anon, %class.anon* %2, i64 0, i32 0
  br label %39

39:                                               ; preds = %81, %37
  %40 = phi i16 [ %34, %37 ], [ %82, %81 ]
  %41 = phi i16* [ %35, %37 ], [ %79, %81 ]
  %42 = phi i16* [ %4, %37 ], [ %43, %81 ]
  %43 = getelementptr inbounds i16, i16* %42, i64 1
  %44 = load i16, i16* %41, align 2
  %45 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %38, align 8
  %46 = zext i16 %44 to i64
  %47 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %45, i64 0, i32 0, i32 0
  %48 = load %struct.Elf32_Shdr*, %struct.Elf32_Shdr** %47, align 8
  %49 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %48, i64 %46, i32 4
  %50 = load i32, i32* %49, align 4
  %51 = zext i16 %40 to i64
  %52 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %48, i64 %51, i32 4
  %53 = load i32, i32* %52, align 4
  %54 = icmp ult i32 %50, %53
  br i1 %54, label %55, label %77

55:                                               ; preds = %39
  store i16 %40, i16* %43, align 2
  %56 = icmp eq i16* %42, %4
  br i1 %56, label %74, label %57

57:                                               ; preds = %55, %72
  %58 = phi i16* [ %60, %72 ], [ %42, %55 ]
  %59 = load i16, i16* %41, align 2
  %60 = getelementptr inbounds i16, i16* %58, i64 -1
  %61 = load i16, i16* %60, align 2
  %62 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %38, align 8
  %63 = zext i16 %59 to i64
  %64 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %62, i64 0, i32 0, i32 0
  %65 = load %struct.Elf32_Shdr*, %struct.Elf32_Shdr** %64, align 8
  %66 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %65, i64 %63, i32 4
  %67 = load i32, i32* %66, align 4
  %68 = zext i16 %61 to i64
  %69 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %65, i64 %68, i32 4
  %70 = load i32, i32* %69, align 4
  %71 = icmp ult i32 %67, %70
  br i1 %71, label %72, label %74

72:                                               ; preds = %57
  store i16 %61, i16* %58, align 2
  %73 = icmp eq i16* %60, %4
  br i1 %73, label %74, label %57

74:                                               ; preds = %72, %57, %55
  %75 = phi i16* [ %4, %55 ], [ %58, %57 ], [ %4, %72 ]
  %76 = load i16, i16* %41, align 2
  store i16 %76, i16* %75, align 2
  br label %78

77:                                               ; preds = %39
  store i16 %44, i16* %43, align 2
  br label %78

78:                                               ; preds = %77, %74
  %79 = getelementptr inbounds i16, i16* %41, i64 1
  %80 = icmp eq i16* %79, %1
  br i1 %80, label %431, label %81

81:                                               ; preds = %78
  %82 = load i16, i16* %43, align 2
  br label %39

83:                                               ; preds = %29
  %84 = lshr i64 %3, 1
  %85 = getelementptr inbounds i16, i16* %0, i64 %84
  tail call fastcc void @"_ZNSt3__113__stable_sortIRZN9courgette12_GLOBAL__N_131GetSectionHeaderFileOffsetOrderERKNS_6vectorI10Elf32_ShdrNS_9allocatorIS4_EEEEE3$_0NS_11__wrap_iterIPtEEEEvT0_SF_T_NS_15iterator_traitsISF_E15difference_typeEPNSI_10value_typeEl"(i16* %0, i16* %85, %class.anon* dereferenceable(8) %2, i64 %84, i16* %4, i64 %84)
  %86 = sub nsw i64 %3, %84
  %87 = getelementptr inbounds i16, i16* %4, i64 %84
  tail call fastcc void @"_ZNSt3__113__stable_sortIRZN9courgette12_GLOBAL__N_131GetSectionHeaderFileOffsetOrderERKNS_6vectorI10Elf32_ShdrNS_9allocatorIS4_EEEEE3$_0NS_11__wrap_iterIPtEEEEvT0_SF_T_NS_15iterator_traitsISF_E15difference_typeEPNSI_10value_typeEl"(i16* %85, i16* %1, %class.anon* dereferenceable(8) %2, i64 %86, i16* %87, i64 %86)
  %88 = icmp eq i64 %84, 0
  br i1 %88, label %91, label %89

89:                                               ; preds = %83
  %90 = getelementptr inbounds %class.anon, %class.anon* %2, i64 0, i32 0
  br label %247

91:                                               ; preds = %426, %83
  %92 = phi i16* [ %85, %83 ], [ %427, %426 ]
  %93 = phi i16* [ %4, %83 ], [ %429, %426 ]
  %94 = ptrtoint i16* %92 to i64
  %95 = icmp eq i16* %92, %1
  br i1 %95, label %431, label %96

96:                                               ; preds = %91
  %97 = getelementptr i16, i16* %1, i64 -1
  %98 = ptrtoint i16* %97 to i64
  %99 = sub i64 %98, %94
  %100 = lshr i64 %99, 1
  %101 = add nuw i64 %100, 1
  %102 = icmp ult i64 %101, 16
  br i1 %102, label %195, label %103

103:                                              ; preds = %96
  %104 = getelementptr i16, i16* %1, i64 -1
  %105 = ptrtoint i16* %104 to i64
  %106 = sub i64 %105, %94
  %107 = lshr i64 %106, 1
  %108 = add nuw i64 %107, 1
  %109 = getelementptr i16, i16* %93, i64 %108
  %110 = getelementptr i16, i16* %92, i64 %108
  %111 = icmp ult i16* %93, %110
  %112 = icmp ult i16* %92, %109
  %113 = and i1 %111, %112
  br i1 %113, label %195, label %114

114:                                              ; preds = %103
  %115 = and i64 %101, -16
  %116 = getelementptr i16, i16* %93, i64 %115
  %117 = getelementptr i16, i16* %92, i64 %115
  %118 = add i64 %115, -16
  %119 = lshr exact i64 %118, 4
  %120 = add nuw nsw i64 %119, 1
  %121 = and i64 %120, 3
  %122 = icmp ult i64 %118, 48
  br i1 %122, label %174, label %123

123:                                              ; preds = %114
  %124 = sub nsw i64 %120, %121
  br label %125

125:                                              ; preds = %125, %123
  %126 = phi i64 [ 0, %123 ], [ %171, %125 ]
  %127 = phi i64 [ %124, %123 ], [ %172, %125 ]
  %128 = getelementptr i16, i16* %93, i64 %126
  %129 = getelementptr i16, i16* %92, i64 %126
  %130 = bitcast i16* %129 to <8 x i16>*
  %131 = load <8 x i16>, <8 x i16>* %130, align 2, !alias.scope !33
  %132 = getelementptr i16, i16* %129, i64 8
  %133 = bitcast i16* %132 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 2, !alias.scope !33
  %135 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %131, <8 x i16>* %135, align 2, !alias.scope !36, !noalias !33
  %136 = getelementptr i16, i16* %128, i64 8
  %137 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %137, align 2, !alias.scope !36, !noalias !33
  %138 = or i64 %126, 16
  %139 = getelementptr i16, i16* %93, i64 %138
  %140 = getelementptr i16, i16* %92, i64 %138
  %141 = bitcast i16* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 2, !alias.scope !33
  %143 = getelementptr i16, i16* %140, i64 8
  %144 = bitcast i16* %143 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2, !alias.scope !33
  %146 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %146, align 2, !alias.scope !36, !noalias !33
  %147 = getelementptr i16, i16* %139, i64 8
  %148 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %145, <8 x i16>* %148, align 2, !alias.scope !36, !noalias !33
  %149 = or i64 %126, 32
  %150 = getelementptr i16, i16* %93, i64 %149
  %151 = getelementptr i16, i16* %92, i64 %149
  %152 = bitcast i16* %151 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 2, !alias.scope !33
  %154 = getelementptr i16, i16* %151, i64 8
  %155 = bitcast i16* %154 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 2, !alias.scope !33
  %157 = bitcast i16* %150 to <8 x i16>*
  store <8 x i16> %153, <8 x i16>* %157, align 2, !alias.scope !36, !noalias !33
  %158 = getelementptr i16, i16* %150, i64 8
  %159 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %159, align 2, !alias.scope !36, !noalias !33
  %160 = or i64 %126, 48
  %161 = getelementptr i16, i16* %93, i64 %160
  %162 = getelementptr i16, i16* %92, i64 %160
  %163 = bitcast i16* %162 to <8 x i16>*
  %164 = load <8 x i16>, <8 x i16>* %163, align 2, !alias.scope !33
  %165 = getelementptr i16, i16* %162, i64 8
  %166 = bitcast i16* %165 to <8 x i16>*
  %167 = load <8 x i16>, <8 x i16>* %166, align 2, !alias.scope !33
  %168 = bitcast i16* %161 to <8 x i16>*
  store <8 x i16> %164, <8 x i16>* %168, align 2, !alias.scope !36, !noalias !33
  %169 = getelementptr i16, i16* %161, i64 8
  %170 = bitcast i16* %169 to <8 x i16>*
  store <8 x i16> %167, <8 x i16>* %170, align 2, !alias.scope !36, !noalias !33
  %171 = add i64 %126, 64
  %172 = add i64 %127, -4
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %174, label %125, !llvm.loop !38

174:                                              ; preds = %125, %114
  %175 = phi i64 [ 0, %114 ], [ %171, %125 ]
  %176 = icmp eq i64 %121, 0
  br i1 %176, label %193, label %177

177:                                              ; preds = %174, %177
  %178 = phi i64 [ %190, %177 ], [ %175, %174 ]
  %179 = phi i64 [ %191, %177 ], [ %121, %174 ]
  %180 = getelementptr i16, i16* %93, i64 %178
  %181 = getelementptr i16, i16* %92, i64 %178
  %182 = bitcast i16* %181 to <8 x i16>*
  %183 = load <8 x i16>, <8 x i16>* %182, align 2, !alias.scope !33
  %184 = getelementptr i16, i16* %181, i64 8
  %185 = bitcast i16* %184 to <8 x i16>*
  %186 = load <8 x i16>, <8 x i16>* %185, align 2, !alias.scope !33
  %187 = bitcast i16* %180 to <8 x i16>*
  store <8 x i16> %183, <8 x i16>* %187, align 2, !alias.scope !36, !noalias !33
  %188 = getelementptr i16, i16* %180, i64 8
  %189 = bitcast i16* %188 to <8 x i16>*
  store <8 x i16> %186, <8 x i16>* %189, align 2, !alias.scope !36, !noalias !33
  %190 = add i64 %178, 16
  %191 = add i64 %179, -1
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %193, label %177, !llvm.loop !39

193:                                              ; preds = %177, %174
  %194 = icmp eq i64 %101, %115
  br i1 %194, label %431, label %195

195:                                              ; preds = %193, %103, %96
  %196 = phi i16* [ %93, %103 ], [ %93, %96 ], [ %116, %193 ]
  %197 = phi i16* [ %92, %103 ], [ %92, %96 ], [ %117, %193 ]
  %198 = ptrtoint i16* %197 to i64
  %199 = getelementptr i16, i16* %1, i64 -1
  %200 = ptrtoint i16* %199 to i64
  %201 = sub i64 %200, %198
  %202 = lshr i64 %201, 1
  %203 = add nuw i64 %202, 1
  %204 = and i64 %203, 7
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %215, label %206

206:                                              ; preds = %195, %206
  %207 = phi i16* [ %212, %206 ], [ %196, %195 ]
  %208 = phi i16* [ %211, %206 ], [ %197, %195 ]
  %209 = phi i64 [ %213, %206 ], [ %204, %195 ]
  %210 = load i16, i16* %208, align 2
  store i16 %210, i16* %207, align 2
  %211 = getelementptr inbounds i16, i16* %208, i64 1
  %212 = getelementptr inbounds i16, i16* %207, i64 1
  %213 = add i64 %209, -1
  %214 = icmp eq i64 %213, 0
  br i1 %214, label %215, label %206, !llvm.loop !40

215:                                              ; preds = %206, %195
  %216 = phi i16* [ %196, %195 ], [ %212, %206 ]
  %217 = phi i16* [ %197, %195 ], [ %211, %206 ]
  %218 = icmp ult i64 %201, 14
  br i1 %218, label %431, label %219

219:                                              ; preds = %215, %219
  %220 = phi i16* [ %245, %219 ], [ %216, %215 ]
  %221 = phi i16* [ %244, %219 ], [ %217, %215 ]
  %222 = load i16, i16* %221, align 2
  store i16 %222, i16* %220, align 2
  %223 = getelementptr inbounds i16, i16* %221, i64 1
  %224 = getelementptr inbounds i16, i16* %220, i64 1
  %225 = load i16, i16* %223, align 2
  store i16 %225, i16* %224, align 2
  %226 = getelementptr inbounds i16, i16* %221, i64 2
  %227 = getelementptr inbounds i16, i16* %220, i64 2
  %228 = load i16, i16* %226, align 2
  store i16 %228, i16* %227, align 2
  %229 = getelementptr inbounds i16, i16* %221, i64 3
  %230 = getelementptr inbounds i16, i16* %220, i64 3
  %231 = load i16, i16* %229, align 2
  store i16 %231, i16* %230, align 2
  %232 = getelementptr inbounds i16, i16* %221, i64 4
  %233 = getelementptr inbounds i16, i16* %220, i64 4
  %234 = load i16, i16* %232, align 2
  store i16 %234, i16* %233, align 2
  %235 = getelementptr inbounds i16, i16* %221, i64 5
  %236 = getelementptr inbounds i16, i16* %220, i64 5
  %237 = load i16, i16* %235, align 2
  store i16 %237, i16* %236, align 2
  %238 = getelementptr inbounds i16, i16* %221, i64 6
  %239 = getelementptr inbounds i16, i16* %220, i64 6
  %240 = load i16, i16* %238, align 2
  store i16 %240, i16* %239, align 2
  %241 = getelementptr inbounds i16, i16* %221, i64 7
  %242 = getelementptr inbounds i16, i16* %220, i64 7
  %243 = load i16, i16* %241, align 2
  store i16 %243, i16* %242, align 2
  %244 = getelementptr inbounds i16, i16* %221, i64 8
  %245 = getelementptr inbounds i16, i16* %220, i64 8
  %246 = icmp eq i16* %244, %1
  br i1 %246, label %431, label %219, !llvm.loop !41

247:                                              ; preds = %426, %89
  %248 = phi i16* [ %4, %89 ], [ %429, %426 ]
  %249 = phi i16* [ %0, %89 ], [ %428, %426 ]
  %250 = phi i16* [ %85, %89 ], [ %427, %426 ]
  %251 = icmp eq i16* %250, %1
  br i1 %251, label %252, label %409

252:                                              ; preds = %247
  %253 = ptrtoint i16* %249 to i64
  %254 = icmp eq i16* %249, %85
  br i1 %254, label %431, label %255

255:                                              ; preds = %252
  %256 = add nsw i64 %84, -1
  %257 = getelementptr i16, i16* %0, i64 %256
  %258 = ptrtoint i16* %257 to i64
  %259 = sub i64 %258, %253
  %260 = lshr i64 %259, 1
  %261 = add nuw i64 %260, 1
  %262 = icmp ult i64 %261, 16
  br i1 %262, label %356, label %263

263:                                              ; preds = %255
  %264 = add nsw i64 %84, -1
  %265 = getelementptr i16, i16* %0, i64 %264
  %266 = ptrtoint i16* %265 to i64
  %267 = sub i64 %266, %253
  %268 = lshr i64 %267, 1
  %269 = add nuw i64 %268, 1
  %270 = getelementptr i16, i16* %248, i64 %269
  %271 = getelementptr i16, i16* %249, i64 %269
  %272 = icmp ult i16* %248, %271
  %273 = icmp ult i16* %249, %270
  %274 = and i1 %272, %273
  br i1 %274, label %356, label %275

275:                                              ; preds = %263
  %276 = and i64 %261, -16
  %277 = getelementptr i16, i16* %248, i64 %276
  %278 = getelementptr i16, i16* %249, i64 %276
  %279 = add i64 %276, -16
  %280 = lshr exact i64 %279, 4
  %281 = add nuw nsw i64 %280, 1
  %282 = and i64 %281, 3
  %283 = icmp ult i64 %279, 48
  br i1 %283, label %335, label %284

284:                                              ; preds = %275
  %285 = sub nsw i64 %281, %282
  br label %286

286:                                              ; preds = %286, %284
  %287 = phi i64 [ 0, %284 ], [ %332, %286 ]
  %288 = phi i64 [ %285, %284 ], [ %333, %286 ]
  %289 = getelementptr i16, i16* %248, i64 %287
  %290 = getelementptr i16, i16* %249, i64 %287
  %291 = bitcast i16* %290 to <8 x i16>*
  %292 = load <8 x i16>, <8 x i16>* %291, align 2, !alias.scope !42
  %293 = getelementptr i16, i16* %290, i64 8
  %294 = bitcast i16* %293 to <8 x i16>*
  %295 = load <8 x i16>, <8 x i16>* %294, align 2, !alias.scope !42
  %296 = bitcast i16* %289 to <8 x i16>*
  store <8 x i16> %292, <8 x i16>* %296, align 2, !alias.scope !45, !noalias !42
  %297 = getelementptr i16, i16* %289, i64 8
  %298 = bitcast i16* %297 to <8 x i16>*
  store <8 x i16> %295, <8 x i16>* %298, align 2, !alias.scope !45, !noalias !42
  %299 = or i64 %287, 16
  %300 = getelementptr i16, i16* %248, i64 %299
  %301 = getelementptr i16, i16* %249, i64 %299
  %302 = bitcast i16* %301 to <8 x i16>*
  %303 = load <8 x i16>, <8 x i16>* %302, align 2, !alias.scope !42
  %304 = getelementptr i16, i16* %301, i64 8
  %305 = bitcast i16* %304 to <8 x i16>*
  %306 = load <8 x i16>, <8 x i16>* %305, align 2, !alias.scope !42
  %307 = bitcast i16* %300 to <8 x i16>*
  store <8 x i16> %303, <8 x i16>* %307, align 2, !alias.scope !45, !noalias !42
  %308 = getelementptr i16, i16* %300, i64 8
  %309 = bitcast i16* %308 to <8 x i16>*
  store <8 x i16> %306, <8 x i16>* %309, align 2, !alias.scope !45, !noalias !42
  %310 = or i64 %287, 32
  %311 = getelementptr i16, i16* %248, i64 %310
  %312 = getelementptr i16, i16* %249, i64 %310
  %313 = bitcast i16* %312 to <8 x i16>*
  %314 = load <8 x i16>, <8 x i16>* %313, align 2, !alias.scope !42
  %315 = getelementptr i16, i16* %312, i64 8
  %316 = bitcast i16* %315 to <8 x i16>*
  %317 = load <8 x i16>, <8 x i16>* %316, align 2, !alias.scope !42
  %318 = bitcast i16* %311 to <8 x i16>*
  store <8 x i16> %314, <8 x i16>* %318, align 2, !alias.scope !45, !noalias !42
  %319 = getelementptr i16, i16* %311, i64 8
  %320 = bitcast i16* %319 to <8 x i16>*
  store <8 x i16> %317, <8 x i16>* %320, align 2, !alias.scope !45, !noalias !42
  %321 = or i64 %287, 48
  %322 = getelementptr i16, i16* %248, i64 %321
  %323 = getelementptr i16, i16* %249, i64 %321
  %324 = bitcast i16* %323 to <8 x i16>*
  %325 = load <8 x i16>, <8 x i16>* %324, align 2, !alias.scope !42
  %326 = getelementptr i16, i16* %323, i64 8
  %327 = bitcast i16* %326 to <8 x i16>*
  %328 = load <8 x i16>, <8 x i16>* %327, align 2, !alias.scope !42
  %329 = bitcast i16* %322 to <8 x i16>*
  store <8 x i16> %325, <8 x i16>* %329, align 2, !alias.scope !45, !noalias !42
  %330 = getelementptr i16, i16* %322, i64 8
  %331 = bitcast i16* %330 to <8 x i16>*
  store <8 x i16> %328, <8 x i16>* %331, align 2, !alias.scope !45, !noalias !42
  %332 = add i64 %287, 64
  %333 = add i64 %288, -4
  %334 = icmp eq i64 %333, 0
  br i1 %334, label %335, label %286, !llvm.loop !47

335:                                              ; preds = %286, %275
  %336 = phi i64 [ 0, %275 ], [ %332, %286 ]
  %337 = icmp eq i64 %282, 0
  br i1 %337, label %354, label %338

338:                                              ; preds = %335, %338
  %339 = phi i64 [ %351, %338 ], [ %336, %335 ]
  %340 = phi i64 [ %352, %338 ], [ %282, %335 ]
  %341 = getelementptr i16, i16* %248, i64 %339
  %342 = getelementptr i16, i16* %249, i64 %339
  %343 = bitcast i16* %342 to <8 x i16>*
  %344 = load <8 x i16>, <8 x i16>* %343, align 2, !alias.scope !42
  %345 = getelementptr i16, i16* %342, i64 8
  %346 = bitcast i16* %345 to <8 x i16>*
  %347 = load <8 x i16>, <8 x i16>* %346, align 2, !alias.scope !42
  %348 = bitcast i16* %341 to <8 x i16>*
  store <8 x i16> %344, <8 x i16>* %348, align 2, !alias.scope !45, !noalias !42
  %349 = getelementptr i16, i16* %341, i64 8
  %350 = bitcast i16* %349 to <8 x i16>*
  store <8 x i16> %347, <8 x i16>* %350, align 2, !alias.scope !45, !noalias !42
  %351 = add i64 %339, 16
  %352 = add i64 %340, -1
  %353 = icmp eq i64 %352, 0
  br i1 %353, label %354, label %338, !llvm.loop !48

354:                                              ; preds = %338, %335
  %355 = icmp eq i64 %261, %276
  br i1 %355, label %431, label %356

356:                                              ; preds = %354, %263, %255
  %357 = phi i16* [ %248, %263 ], [ %248, %255 ], [ %277, %354 ]
  %358 = phi i16* [ %249, %263 ], [ %249, %255 ], [ %278, %354 ]
  %359 = ptrtoint i16* %358 to i64
  %360 = add nsw i64 %84, -1
  %361 = getelementptr i16, i16* %0, i64 %360
  %362 = ptrtoint i16* %361 to i64
  %363 = sub i64 %362, %359
  %364 = lshr i64 %363, 1
  %365 = add nuw i64 %364, 1
  %366 = and i64 %365, 7
  %367 = icmp eq i64 %366, 0
  br i1 %367, label %377, label %368

368:                                              ; preds = %356, %368
  %369 = phi i16* [ %374, %368 ], [ %357, %356 ]
  %370 = phi i16* [ %373, %368 ], [ %358, %356 ]
  %371 = phi i64 [ %375, %368 ], [ %366, %356 ]
  %372 = load i16, i16* %370, align 2
  store i16 %372, i16* %369, align 2
  %373 = getelementptr inbounds i16, i16* %370, i64 1
  %374 = getelementptr inbounds i16, i16* %369, i64 1
  %375 = add i64 %371, -1
  %376 = icmp eq i64 %375, 0
  br i1 %376, label %377, label %368, !llvm.loop !49

377:                                              ; preds = %368, %356
  %378 = phi i16* [ %357, %356 ], [ %374, %368 ]
  %379 = phi i16* [ %358, %356 ], [ %373, %368 ]
  %380 = icmp ult i64 %363, 14
  br i1 %380, label %431, label %381

381:                                              ; preds = %377, %381
  %382 = phi i16* [ %407, %381 ], [ %378, %377 ]
  %383 = phi i16* [ %406, %381 ], [ %379, %377 ]
  %384 = load i16, i16* %383, align 2
  store i16 %384, i16* %382, align 2
  %385 = getelementptr inbounds i16, i16* %383, i64 1
  %386 = getelementptr inbounds i16, i16* %382, i64 1
  %387 = load i16, i16* %385, align 2
  store i16 %387, i16* %386, align 2
  %388 = getelementptr inbounds i16, i16* %383, i64 2
  %389 = getelementptr inbounds i16, i16* %382, i64 2
  %390 = load i16, i16* %388, align 2
  store i16 %390, i16* %389, align 2
  %391 = getelementptr inbounds i16, i16* %383, i64 3
  %392 = getelementptr inbounds i16, i16* %382, i64 3
  %393 = load i16, i16* %391, align 2
  store i16 %393, i16* %392, align 2
  %394 = getelementptr inbounds i16, i16* %383, i64 4
  %395 = getelementptr inbounds i16, i16* %382, i64 4
  %396 = load i16, i16* %394, align 2
  store i16 %396, i16* %395, align 2
  %397 = getelementptr inbounds i16, i16* %383, i64 5
  %398 = getelementptr inbounds i16, i16* %382, i64 5
  %399 = load i16, i16* %397, align 2
  store i16 %399, i16* %398, align 2
  %400 = getelementptr inbounds i16, i16* %383, i64 6
  %401 = getelementptr inbounds i16, i16* %382, i64 6
  %402 = load i16, i16* %400, align 2
  store i16 %402, i16* %401, align 2
  %403 = getelementptr inbounds i16, i16* %383, i64 7
  %404 = getelementptr inbounds i16, i16* %382, i64 7
  %405 = load i16, i16* %403, align 2
  store i16 %405, i16* %404, align 2
  %406 = getelementptr inbounds i16, i16* %383, i64 8
  %407 = getelementptr inbounds i16, i16* %382, i64 8
  %408 = icmp eq i16* %406, %85
  br i1 %408, label %431, label %381, !llvm.loop !50

409:                                              ; preds = %247
  %410 = load i16, i16* %250, align 2
  %411 = load i16, i16* %249, align 2
  %412 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %90, align 8
  %413 = zext i16 %410 to i64
  %414 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %412, i64 0, i32 0, i32 0
  %415 = load %struct.Elf32_Shdr*, %struct.Elf32_Shdr** %414, align 8
  %416 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %415, i64 %413, i32 4
  %417 = load i32, i32* %416, align 4
  %418 = zext i16 %411 to i64
  %419 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %415, i64 %418, i32 4
  %420 = load i32, i32* %419, align 4
  %421 = icmp ult i32 %417, %420
  br i1 %421, label %422, label %424

422:                                              ; preds = %409
  store i16 %410, i16* %248, align 2
  %423 = getelementptr inbounds i16, i16* %250, i64 1
  br label %426

424:                                              ; preds = %409
  store i16 %411, i16* %248, align 2
  %425 = getelementptr inbounds i16, i16* %249, i64 1
  br label %426

426:                                              ; preds = %424, %422
  %427 = phi i16* [ %423, %422 ], [ %250, %424 ]
  %428 = phi i16* [ %249, %422 ], [ %425, %424 ]
  %429 = getelementptr inbounds i16, i16* %248, i64 1
  %430 = icmp eq i16* %428, %85
  br i1 %430, label %91, label %247

431:                                              ; preds = %377, %381, %215, %219, %78, %354, %193, %252, %91, %33, %31, %23, %26, %5, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @"_ZNSt3__115__inplace_mergeIRZN9courgette12_GLOBAL__N_131GetSectionHeaderFileOffsetOrderERKNS_6vectorI10Elf32_ShdrNS_9allocatorIS4_EEEEE3$_0NS_11__wrap_iterIPtEEEEvT0_SF_SF_T_NS_15iterator_traitsISF_E15difference_typeESJ_PNSI_10value_typeEl"(i16*, i16*, i16*, %class.anon* readonly dereferenceable(8), i64, i64, i16*, i64) unnamed_addr #2 {
  %9 = ptrtoint i16* %6 to i64
  %10 = icmp eq i64 %5, 0
  br i1 %10, label %927, label %11

11:                                               ; preds = %8
  %12 = ptrtoint i16* %1 to i64
  %13 = ptrtoint i16* %0 to i64
  %14 = getelementptr inbounds %class.anon, %class.anon* %3, i64 0, i32 0
  br label %15

15:                                               ; preds = %11, %920
  %16 = phi i16* [ %2, %11 ], [ %925, %920 ]
  %17 = phi i64 [ %4, %11 ], [ %924, %920 ]
  %18 = phi i64 [ %5, %11 ], [ %923, %920 ]
  %19 = phi i64 [ %12, %11 ], [ %922, %920 ]
  %20 = phi i64 [ %13, %11 ], [ %921, %920 ]
  %21 = icmp sgt i64 %17, %7
  %22 = icmp sgt i64 %18, %7
  %23 = and i1 %22, %21
  br i1 %23, label %24, label %35

24:                                               ; preds = %15
  %25 = icmp eq i64 %17, 0
  br i1 %25, label %927, label %26

26:                                               ; preds = %24
  %27 = inttoptr i64 %19 to i16*
  %28 = load i16, i16* %27, align 2
  %29 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %14, align 8
  %30 = zext i16 %28 to i64
  %31 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %29, i64 0, i32 0, i32 0
  %32 = load %struct.Elf32_Shdr*, %struct.Elf32_Shdr** %31, align 8
  %33 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %32, i64 %30, i32 4
  %34 = load i32, i32* %33, align 4
  br label %573

35:                                               ; preds = %15
  %36 = inttoptr i64 %20 to i16*
  %37 = inttoptr i64 %20 to i8*
  %38 = inttoptr i64 %19 to i16*
  %39 = inttoptr i64 %19 to i8*
  %40 = icmp sgt i64 %17, %18
  br i1 %40, label %172, label %41

41:                                               ; preds = %35
  %42 = icmp eq i16* %36, %38
  br i1 %42, label %927, label %43

43:                                               ; preds = %41
  %44 = getelementptr i16, i16* %38, i64 -1
  %45 = bitcast i16* %44 to i8*
  %46 = sub i64 0, %20
  %47 = getelementptr i8, i8* %45, i64 %46
  %48 = ptrtoint i8* %47 to i64
  %49 = lshr i64 %48, 1
  %50 = add nuw i64 %49, 1
  %51 = icmp ult i64 %50, 16
  br i1 %51, label %52, label %77

52:                                               ; preds = %170, %77, %43
  %53 = phi i16* [ %6, %77 ], [ %6, %43 ], [ %93, %170 ]
  %54 = phi i16* [ %36, %77 ], [ %36, %43 ], [ %94, %170 ]
  %55 = ptrtoint i16* %54 to i64
  %56 = getelementptr i16, i16* %38, i64 -1
  %57 = ptrtoint i16* %56 to i64
  %58 = sub i64 %57, %55
  %59 = lshr i64 %58, 1
  %60 = add nuw i64 %59, 1
  %61 = and i64 %60, 7
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %72, label %63

63:                                               ; preds = %52, %63
  %64 = phi i16* [ %69, %63 ], [ %53, %52 ]
  %65 = phi i16* [ %68, %63 ], [ %54, %52 ]
  %66 = phi i64 [ %70, %63 ], [ %61, %52 ]
  %67 = load i16, i16* %65, align 2
  store i16 %67, i16* %64, align 2
  %68 = getelementptr inbounds i16, i16* %65, i64 1
  %69 = getelementptr inbounds i16, i16* %64, i64 1
  %70 = add i64 %66, -1
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %63, !llvm.loop !51

72:                                               ; preds = %63, %52
  %73 = phi i16* [ undef, %52 ], [ %69, %63 ]
  %74 = phi i16* [ %53, %52 ], [ %69, %63 ]
  %75 = phi i16* [ %54, %52 ], [ %68, %63 ]
  %76 = icmp ult i64 %58, 14
  br i1 %76, label %303, label %341

77:                                               ; preds = %43
  %78 = getelementptr i16, i16* %38, i64 -1
  %79 = bitcast i16* %78 to i8*
  %80 = sub i64 0, %20
  %81 = getelementptr i8, i8* %79, i64 %80
  %82 = ptrtoint i8* %81 to i64
  %83 = lshr i64 %82, 1
  %84 = add nuw i64 %83, 1
  %85 = getelementptr i16, i16* %6, i64 %84
  %86 = bitcast i16* %85 to i8*
  %87 = getelementptr i16, i16* %36, i64 %84
  %88 = icmp ugt i16* %87, %6
  %89 = icmp ult i8* %37, %86
  %90 = and i1 %88, %89
  br i1 %90, label %52, label %91

91:                                               ; preds = %77
  %92 = and i64 %50, -16
  %93 = getelementptr i16, i16* %6, i64 %92
  %94 = getelementptr i16, i16* %36, i64 %92
  %95 = add i64 %92, -16
  %96 = lshr exact i64 %95, 4
  %97 = add nuw nsw i64 %96, 1
  %98 = and i64 %97, 3
  %99 = icmp ult i64 %95, 48
  br i1 %99, label %151, label %100

100:                                              ; preds = %91
  %101 = sub nsw i64 %97, %98
  br label %102

102:                                              ; preds = %102, %100
  %103 = phi i64 [ 0, %100 ], [ %148, %102 ]
  %104 = phi i64 [ %101, %100 ], [ %149, %102 ]
  %105 = getelementptr i16, i16* %6, i64 %103
  %106 = getelementptr i16, i16* %36, i64 %103
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !52
  %109 = getelementptr i16, i16* %106, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !52
  %112 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %112, align 2, !alias.scope !55, !noalias !52
  %113 = getelementptr i16, i16* %105, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %114, align 2, !alias.scope !55, !noalias !52
  %115 = or i64 %103, 16
  %116 = getelementptr i16, i16* %6, i64 %115
  %117 = getelementptr i16, i16* %36, i64 %115
  %118 = bitcast i16* %117 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 2, !alias.scope !52
  %120 = getelementptr i16, i16* %117, i64 8
  %121 = bitcast i16* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 2, !alias.scope !52
  %123 = bitcast i16* %116 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %123, align 2, !alias.scope !55, !noalias !52
  %124 = getelementptr i16, i16* %116, i64 8
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %122, <8 x i16>* %125, align 2, !alias.scope !55, !noalias !52
  %126 = or i64 %103, 32
  %127 = getelementptr i16, i16* %6, i64 %126
  %128 = getelementptr i16, i16* %36, i64 %126
  %129 = bitcast i16* %128 to <8 x i16>*
  %130 = load <8 x i16>, <8 x i16>* %129, align 2, !alias.scope !52
  %131 = getelementptr i16, i16* %128, i64 8
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 2, !alias.scope !52
  %134 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %134, align 2, !alias.scope !55, !noalias !52
  %135 = getelementptr i16, i16* %127, i64 8
  %136 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> %133, <8 x i16>* %136, align 2, !alias.scope !55, !noalias !52
  %137 = or i64 %103, 48
  %138 = getelementptr i16, i16* %6, i64 %137
  %139 = getelementptr i16, i16* %36, i64 %137
  %140 = bitcast i16* %139 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 2, !alias.scope !52
  %142 = getelementptr i16, i16* %139, i64 8
  %143 = bitcast i16* %142 to <8 x i16>*
  %144 = load <8 x i16>, <8 x i16>* %143, align 2, !alias.scope !52
  %145 = bitcast i16* %138 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %145, align 2, !alias.scope !55, !noalias !52
  %146 = getelementptr i16, i16* %138, i64 8
  %147 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> %144, <8 x i16>* %147, align 2, !alias.scope !55, !noalias !52
  %148 = add i64 %103, 64
  %149 = add i64 %104, -4
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %151, label %102, !llvm.loop !57

151:                                              ; preds = %102, %91
  %152 = phi i64 [ 0, %91 ], [ %148, %102 ]
  %153 = icmp eq i64 %98, 0
  br i1 %153, label %170, label %154

154:                                              ; preds = %151, %154
  %155 = phi i64 [ %167, %154 ], [ %152, %151 ]
  %156 = phi i64 [ %168, %154 ], [ %98, %151 ]
  %157 = getelementptr i16, i16* %6, i64 %155
  %158 = getelementptr i16, i16* %36, i64 %155
  %159 = bitcast i16* %158 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 2, !alias.scope !52
  %161 = getelementptr i16, i16* %158, i64 8
  %162 = bitcast i16* %161 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 2, !alias.scope !52
  %164 = bitcast i16* %157 to <8 x i16>*
  store <8 x i16> %160, <8 x i16>* %164, align 2, !alias.scope !55, !noalias !52
  %165 = getelementptr i16, i16* %157, i64 8
  %166 = bitcast i16* %165 to <8 x i16>*
  store <8 x i16> %163, <8 x i16>* %166, align 2, !alias.scope !55, !noalias !52
  %167 = add i64 %155, 16
  %168 = add i64 %156, -1
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %170, label %154, !llvm.loop !58

170:                                              ; preds = %154, %151
  %171 = icmp eq i64 %50, %92
  br i1 %171, label %303, label %52

172:                                              ; preds = %35
  %173 = icmp eq i16* %16, %38
  br i1 %173, label %927, label %174

174:                                              ; preds = %172
  %175 = getelementptr i16, i16* %16, i64 -1
  %176 = bitcast i16* %175 to i8*
  %177 = sub i64 0, %19
  %178 = getelementptr i8, i8* %176, i64 %177
  %179 = ptrtoint i8* %178 to i64
  %180 = lshr i64 %179, 1
  %181 = add nuw i64 %180, 1
  %182 = icmp ult i64 %181, 16
  br i1 %182, label %183, label %208

183:                                              ; preds = %301, %208, %174
  %184 = phi i16* [ %6, %208 ], [ %6, %174 ], [ %224, %301 ]
  %185 = phi i16* [ %38, %208 ], [ %38, %174 ], [ %225, %301 ]
  %186 = ptrtoint i16* %185 to i64
  %187 = getelementptr i16, i16* %16, i64 -1
  %188 = ptrtoint i16* %187 to i64
  %189 = sub i64 %188, %186
  %190 = lshr i64 %189, 1
  %191 = add nuw i64 %190, 1
  %192 = and i64 %191, 7
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %203, label %194

194:                                              ; preds = %183, %194
  %195 = phi i16* [ %200, %194 ], [ %184, %183 ]
  %196 = phi i16* [ %199, %194 ], [ %185, %183 ]
  %197 = phi i64 [ %201, %194 ], [ %192, %183 ]
  %198 = load i16, i16* %196, align 2
  store i16 %198, i16* %195, align 2
  %199 = getelementptr inbounds i16, i16* %196, i64 1
  %200 = getelementptr inbounds i16, i16* %195, i64 1
  %201 = add i64 %197, -1
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %203, label %194, !llvm.loop !59

203:                                              ; preds = %194, %183
  %204 = phi i16* [ undef, %183 ], [ %200, %194 ]
  %205 = phi i16* [ %184, %183 ], [ %200, %194 ]
  %206 = phi i16* [ %185, %183 ], [ %199, %194 ]
  %207 = icmp ult i64 %189, 14
  br i1 %207, label %369, label %545

208:                                              ; preds = %174
  %209 = getelementptr i16, i16* %16, i64 -1
  %210 = bitcast i16* %209 to i8*
  %211 = sub i64 0, %19
  %212 = getelementptr i8, i8* %210, i64 %211
  %213 = ptrtoint i8* %212 to i64
  %214 = lshr i64 %213, 1
  %215 = add nuw i64 %214, 1
  %216 = getelementptr i16, i16* %6, i64 %215
  %217 = bitcast i16* %216 to i8*
  %218 = getelementptr i16, i16* %38, i64 %215
  %219 = icmp ugt i16* %218, %6
  %220 = icmp ult i8* %39, %217
  %221 = and i1 %219, %220
  br i1 %221, label %183, label %222

222:                                              ; preds = %208
  %223 = and i64 %181, -16
  %224 = getelementptr i16, i16* %6, i64 %223
  %225 = getelementptr i16, i16* %38, i64 %223
  %226 = add i64 %223, -16
  %227 = lshr exact i64 %226, 4
  %228 = add nuw nsw i64 %227, 1
  %229 = and i64 %228, 3
  %230 = icmp ult i64 %226, 48
  br i1 %230, label %282, label %231

231:                                              ; preds = %222
  %232 = sub nsw i64 %228, %229
  br label %233

233:                                              ; preds = %233, %231
  %234 = phi i64 [ 0, %231 ], [ %279, %233 ]
  %235 = phi i64 [ %232, %231 ], [ %280, %233 ]
  %236 = getelementptr i16, i16* %6, i64 %234
  %237 = getelementptr i16, i16* %38, i64 %234
  %238 = bitcast i16* %237 to <8 x i16>*
  %239 = load <8 x i16>, <8 x i16>* %238, align 2, !alias.scope !60
  %240 = getelementptr i16, i16* %237, i64 8
  %241 = bitcast i16* %240 to <8 x i16>*
  %242 = load <8 x i16>, <8 x i16>* %241, align 2, !alias.scope !60
  %243 = bitcast i16* %236 to <8 x i16>*
  store <8 x i16> %239, <8 x i16>* %243, align 2, !alias.scope !63, !noalias !60
  %244 = getelementptr i16, i16* %236, i64 8
  %245 = bitcast i16* %244 to <8 x i16>*
  store <8 x i16> %242, <8 x i16>* %245, align 2, !alias.scope !63, !noalias !60
  %246 = or i64 %234, 16
  %247 = getelementptr i16, i16* %6, i64 %246
  %248 = getelementptr i16, i16* %38, i64 %246
  %249 = bitcast i16* %248 to <8 x i16>*
  %250 = load <8 x i16>, <8 x i16>* %249, align 2, !alias.scope !60
  %251 = getelementptr i16, i16* %248, i64 8
  %252 = bitcast i16* %251 to <8 x i16>*
  %253 = load <8 x i16>, <8 x i16>* %252, align 2, !alias.scope !60
  %254 = bitcast i16* %247 to <8 x i16>*
  store <8 x i16> %250, <8 x i16>* %254, align 2, !alias.scope !63, !noalias !60
  %255 = getelementptr i16, i16* %247, i64 8
  %256 = bitcast i16* %255 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %256, align 2, !alias.scope !63, !noalias !60
  %257 = or i64 %234, 32
  %258 = getelementptr i16, i16* %6, i64 %257
  %259 = getelementptr i16, i16* %38, i64 %257
  %260 = bitcast i16* %259 to <8 x i16>*
  %261 = load <8 x i16>, <8 x i16>* %260, align 2, !alias.scope !60
  %262 = getelementptr i16, i16* %259, i64 8
  %263 = bitcast i16* %262 to <8 x i16>*
  %264 = load <8 x i16>, <8 x i16>* %263, align 2, !alias.scope !60
  %265 = bitcast i16* %258 to <8 x i16>*
  store <8 x i16> %261, <8 x i16>* %265, align 2, !alias.scope !63, !noalias !60
  %266 = getelementptr i16, i16* %258, i64 8
  %267 = bitcast i16* %266 to <8 x i16>*
  store <8 x i16> %264, <8 x i16>* %267, align 2, !alias.scope !63, !noalias !60
  %268 = or i64 %234, 48
  %269 = getelementptr i16, i16* %6, i64 %268
  %270 = getelementptr i16, i16* %38, i64 %268
  %271 = bitcast i16* %270 to <8 x i16>*
  %272 = load <8 x i16>, <8 x i16>* %271, align 2, !alias.scope !60
  %273 = getelementptr i16, i16* %270, i64 8
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 2, !alias.scope !60
  %276 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %272, <8 x i16>* %276, align 2, !alias.scope !63, !noalias !60
  %277 = getelementptr i16, i16* %269, i64 8
  %278 = bitcast i16* %277 to <8 x i16>*
  store <8 x i16> %275, <8 x i16>* %278, align 2, !alias.scope !63, !noalias !60
  %279 = add i64 %234, 64
  %280 = add i64 %235, -4
  %281 = icmp eq i64 %280, 0
  br i1 %281, label %282, label %233, !llvm.loop !65

282:                                              ; preds = %233, %222
  %283 = phi i64 [ 0, %222 ], [ %279, %233 ]
  %284 = icmp eq i64 %229, 0
  br i1 %284, label %301, label %285

285:                                              ; preds = %282, %285
  %286 = phi i64 [ %298, %285 ], [ %283, %282 ]
  %287 = phi i64 [ %299, %285 ], [ %229, %282 ]
  %288 = getelementptr i16, i16* %6, i64 %286
  %289 = getelementptr i16, i16* %38, i64 %286
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 2, !alias.scope !60
  %292 = getelementptr i16, i16* %289, i64 8
  %293 = bitcast i16* %292 to <8 x i16>*
  %294 = load <8 x i16>, <8 x i16>* %293, align 2, !alias.scope !60
  %295 = bitcast i16* %288 to <8 x i16>*
  store <8 x i16> %291, <8 x i16>* %295, align 2, !alias.scope !63, !noalias !60
  %296 = getelementptr i16, i16* %288, i64 8
  %297 = bitcast i16* %296 to <8 x i16>*
  store <8 x i16> %294, <8 x i16>* %297, align 2, !alias.scope !63, !noalias !60
  %298 = add i64 %286, 16
  %299 = add i64 %287, -1
  %300 = icmp eq i64 %299, 0
  br i1 %300, label %301, label %285, !llvm.loop !66

301:                                              ; preds = %285, %282
  %302 = icmp eq i64 %181, %223
  br i1 %302, label %369, label %183

303:                                              ; preds = %72, %341, %170
  %304 = phi i16* [ %93, %170 ], [ %73, %72 ], [ %367, %341 ]
  %305 = icmp eq i16* %304, %6
  br i1 %305, label %927, label %306

306:                                              ; preds = %303, %336
  %307 = phi i16* [ %338, %336 ], [ %6, %303 ]
  %308 = phi i16* [ %339, %336 ], [ %36, %303 ]
  %309 = phi i16* [ %337, %336 ], [ %38, %303 ]
  %310 = icmp eq i16* %309, %16
  br i1 %310, label %311, label %319

311:                                              ; preds = %306
  %312 = ptrtoint i16* %304 to i64
  %313 = ptrtoint i16* %307 to i64
  %314 = sub i64 %312, %313
  %315 = icmp eq i64 %314, 0
  br i1 %315, label %927, label %316

316:                                              ; preds = %311
  %317 = bitcast i16* %308 to i8*
  %318 = bitcast i16* %307 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %317, i8* align 2 %318, i64 %314, i1 false) #16
  br label %927

319:                                              ; preds = %306
  %320 = load i16, i16* %309, align 2
  %321 = load i16, i16* %307, align 2
  %322 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %14, align 8
  %323 = zext i16 %320 to i64
  %324 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %322, i64 0, i32 0, i32 0
  %325 = load %struct.Elf32_Shdr*, %struct.Elf32_Shdr** %324, align 8
  %326 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %325, i64 %323, i32 4
  %327 = load i32, i32* %326, align 4
  %328 = zext i16 %321 to i64
  %329 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %325, i64 %328, i32 4
  %330 = load i32, i32* %329, align 4
  %331 = icmp ult i32 %327, %330
  br i1 %331, label %332, label %334

332:                                              ; preds = %319
  store i16 %320, i16* %308, align 2
  %333 = getelementptr inbounds i16, i16* %309, i64 1
  br label %336

334:                                              ; preds = %319
  store i16 %321, i16* %308, align 2
  %335 = getelementptr inbounds i16, i16* %307, i64 1
  br label %336

336:                                              ; preds = %334, %332
  %337 = phi i16* [ %333, %332 ], [ %309, %334 ]
  %338 = phi i16* [ %307, %332 ], [ %335, %334 ]
  %339 = getelementptr inbounds i16, i16* %308, i64 1
  %340 = icmp eq i16* %338, %304
  br i1 %340, label %927, label %306

341:                                              ; preds = %72, %341
  %342 = phi i16* [ %367, %341 ], [ %74, %72 ]
  %343 = phi i16* [ %366, %341 ], [ %75, %72 ]
  %344 = load i16, i16* %343, align 2
  store i16 %344, i16* %342, align 2
  %345 = getelementptr inbounds i16, i16* %343, i64 1
  %346 = getelementptr inbounds i16, i16* %342, i64 1
  %347 = load i16, i16* %345, align 2
  store i16 %347, i16* %346, align 2
  %348 = getelementptr inbounds i16, i16* %343, i64 2
  %349 = getelementptr inbounds i16, i16* %342, i64 2
  %350 = load i16, i16* %348, align 2
  store i16 %350, i16* %349, align 2
  %351 = getelementptr inbounds i16, i16* %343, i64 3
  %352 = getelementptr inbounds i16, i16* %342, i64 3
  %353 = load i16, i16* %351, align 2
  store i16 %353, i16* %352, align 2
  %354 = getelementptr inbounds i16, i16* %343, i64 4
  %355 = getelementptr inbounds i16, i16* %342, i64 4
  %356 = load i16, i16* %354, align 2
  store i16 %356, i16* %355, align 2
  %357 = getelementptr inbounds i16, i16* %343, i64 5
  %358 = getelementptr inbounds i16, i16* %342, i64 5
  %359 = load i16, i16* %357, align 2
  store i16 %359, i16* %358, align 2
  %360 = getelementptr inbounds i16, i16* %343, i64 6
  %361 = getelementptr inbounds i16, i16* %342, i64 6
  %362 = load i16, i16* %360, align 2
  store i16 %362, i16* %361, align 2
  %363 = getelementptr inbounds i16, i16* %343, i64 7
  %364 = getelementptr inbounds i16, i16* %342, i64 7
  %365 = load i16, i16* %363, align 2
  store i16 %365, i16* %364, align 2
  %366 = getelementptr inbounds i16, i16* %343, i64 8
  %367 = getelementptr inbounds i16, i16* %342, i64 8
  %368 = icmp eq i16* %366, %38
  br i1 %368, label %303, label %341, !llvm.loop !67

369:                                              ; preds = %203, %545, %301
  %370 = phi i16* [ %224, %301 ], [ %204, %203 ], [ %571, %545 ]
  %371 = icmp eq i16* %370, %6
  br i1 %371, label %927, label %372

372:                                              ; preds = %369, %525
  %373 = phi i16* [ %540, %525 ], [ %16, %369 ]
  %374 = phi i16* [ %543, %525 ], [ %370, %369 ]
  %375 = phi i16* [ %542, %525 ], [ %38, %369 ]
  %376 = icmp eq i16* %375, %36
  br i1 %376, label %377, label %525

377:                                              ; preds = %372
  %378 = getelementptr i16, i16* %374, i64 -1
  %379 = ptrtoint i16* %378 to i64
  %380 = sub i64 %379, %9
  %381 = lshr i64 %380, 1
  %382 = add nuw i64 %381, 1
  %383 = icmp ult i64 %382, 16
  br i1 %383, label %474, label %384

384:                                              ; preds = %377
  %385 = getelementptr i16, i16* %374, i64 -1
  %386 = ptrtoint i16* %385 to i64
  %387 = sub i64 %386, %9
  %388 = lshr i64 %387, 1
  %389 = xor i64 %388, -1
  %390 = getelementptr i16, i16* %373, i64 %389
  %391 = getelementptr i16, i16* %374, i64 %389
  %392 = icmp ult i16* %390, %374
  %393 = icmp ult i16* %391, %373
  %394 = and i1 %392, %393
  br i1 %394, label %474, label %395

395:                                              ; preds = %384
  %396 = and i64 %382, -16
  %397 = sub i64 0, %396
  %398 = getelementptr i16, i16* %374, i64 %397
  %399 = sub i64 0, %396
  %400 = getelementptr i16, i16* %373, i64 %399
  %401 = add i64 %396, -16
  %402 = lshr exact i64 %401, 4
  %403 = add nuw nsw i64 %402, 1
  %404 = and i64 %403, 1
  %405 = icmp eq i64 %401, 0
  br i1 %405, label %452, label %406

406:                                              ; preds = %395
  %407 = sub nuw nsw i64 %403, %404
  %408 = getelementptr i16, i16* %374, i64 -1
  %409 = getelementptr i16, i16* %373, i64 -1
  %410 = getelementptr i16, i16* %374, i64 -1
  %411 = getelementptr i16, i16* %373, i64 -1
  br label %412

412:                                              ; preds = %412, %406
  %413 = phi i64 [ 0, %406 ], [ %447, %412 ]
  %414 = phi i64 [ %407, %406 ], [ %448, %412 ]
  %415 = sub i64 0, %413
  %416 = sub i64 0, %413
  %417 = getelementptr inbounds i16, i16* %408, i64 %415
  %418 = getelementptr inbounds i16, i16* %417, i64 -7
  %419 = bitcast i16* %418 to <8 x i16>*
  %420 = load <8 x i16>, <8 x i16>* %419, align 2, !alias.scope !68
  %421 = getelementptr inbounds i16, i16* %417, i64 -8
  %422 = getelementptr inbounds i16, i16* %421, i64 -7
  %423 = bitcast i16* %422 to <8 x i16>*
  %424 = load <8 x i16>, <8 x i16>* %423, align 2, !alias.scope !68
  %425 = getelementptr inbounds i16, i16* %409, i64 %416
  %426 = getelementptr inbounds i16, i16* %425, i64 -7
  %427 = bitcast i16* %426 to <8 x i16>*
  store <8 x i16> %420, <8 x i16>* %427, align 2, !alias.scope !71, !noalias !68
  %428 = getelementptr inbounds i16, i16* %425, i64 -8
  %429 = getelementptr inbounds i16, i16* %428, i64 -7
  %430 = bitcast i16* %429 to <8 x i16>*
  store <8 x i16> %424, <8 x i16>* %430, align 2, !alias.scope !71, !noalias !68
  %431 = sub nuw nsw i64 -16, %413
  %432 = sub nuw nsw i64 -16, %413
  %433 = getelementptr inbounds i16, i16* %410, i64 %431
  %434 = getelementptr inbounds i16, i16* %433, i64 -7
  %435 = bitcast i16* %434 to <8 x i16>*
  %436 = load <8 x i16>, <8 x i16>* %435, align 2, !alias.scope !68
  %437 = getelementptr inbounds i16, i16* %433, i64 -8
  %438 = getelementptr inbounds i16, i16* %437, i64 -7
  %439 = bitcast i16* %438 to <8 x i16>*
  %440 = load <8 x i16>, <8 x i16>* %439, align 2, !alias.scope !68
  %441 = getelementptr inbounds i16, i16* %411, i64 %432
  %442 = getelementptr inbounds i16, i16* %441, i64 -7
  %443 = bitcast i16* %442 to <8 x i16>*
  store <8 x i16> %436, <8 x i16>* %443, align 2, !alias.scope !71, !noalias !68
  %444 = getelementptr inbounds i16, i16* %441, i64 -8
  %445 = getelementptr inbounds i16, i16* %444, i64 -7
  %446 = bitcast i16* %445 to <8 x i16>*
  store <8 x i16> %440, <8 x i16>* %446, align 2, !alias.scope !71, !noalias !68
  %447 = add i64 %413, 32
  %448 = add i64 %414, -2
  %449 = icmp eq i64 %448, 0
  br i1 %449, label %450, label %412, !llvm.loop !73

450:                                              ; preds = %412
  %451 = sub nuw nsw i64 -32, %413
  br label %452

452:                                              ; preds = %450, %395
  %453 = phi i64 [ 0, %395 ], [ %451, %450 ]
  %454 = icmp eq i64 %404, 0
  br i1 %454, label %472, label %455

455:                                              ; preds = %452
  %456 = getelementptr i16, i16* %374, i64 -1
  %457 = getelementptr i16, i16* %373, i64 -1
  %458 = getelementptr inbounds i16, i16* %456, i64 %453
  %459 = getelementptr inbounds i16, i16* %458, i64 -7
  %460 = bitcast i16* %459 to <8 x i16>*
  %461 = load <8 x i16>, <8 x i16>* %460, align 2, !alias.scope !68
  %462 = getelementptr inbounds i16, i16* %458, i64 -8
  %463 = getelementptr inbounds i16, i16* %462, i64 -7
  %464 = bitcast i16* %463 to <8 x i16>*
  %465 = load <8 x i16>, <8 x i16>* %464, align 2, !alias.scope !68
  %466 = getelementptr inbounds i16, i16* %457, i64 %453
  %467 = getelementptr inbounds i16, i16* %466, i64 -7
  %468 = bitcast i16* %467 to <8 x i16>*
  store <8 x i16> %461, <8 x i16>* %468, align 2, !alias.scope !71, !noalias !68
  %469 = getelementptr inbounds i16, i16* %466, i64 -8
  %470 = getelementptr inbounds i16, i16* %469, i64 -7
  %471 = bitcast i16* %470 to <8 x i16>*
  store <8 x i16> %465, <8 x i16>* %471, align 2, !alias.scope !71, !noalias !68
  br label %472

472:                                              ; preds = %452, %455
  %473 = icmp eq i64 %382, %396
  br i1 %473, label %927, label %474

474:                                              ; preds = %472, %384, %377
  %475 = phi i16* [ %374, %384 ], [ %374, %377 ], [ %398, %472 ]
  %476 = phi i16* [ %373, %384 ], [ %373, %377 ], [ %400, %472 ]
  %477 = getelementptr i16, i16* %475, i64 -1
  %478 = ptrtoint i16* %477 to i64
  %479 = sub i64 %478, %9
  %480 = lshr i64 %479, 1
  %481 = add nuw i64 %480, 1
  %482 = and i64 %481, 7
  %483 = icmp eq i64 %482, 0
  br i1 %483, label %493, label %484

484:                                              ; preds = %474, %484
  %485 = phi i16* [ %488, %484 ], [ %475, %474 ]
  %486 = phi i16* [ %490, %484 ], [ %476, %474 ]
  %487 = phi i64 [ %491, %484 ], [ %482, %474 ]
  %488 = getelementptr inbounds i16, i16* %485, i64 -1
  %489 = load i16, i16* %488, align 2
  %490 = getelementptr inbounds i16, i16* %486, i64 -1
  store i16 %489, i16* %490, align 2
  %491 = add i64 %487, -1
  %492 = icmp eq i64 %491, 0
  br i1 %492, label %493, label %484, !llvm.loop !74

493:                                              ; preds = %484, %474
  %494 = phi i16* [ %475, %474 ], [ %488, %484 ]
  %495 = phi i16* [ %476, %474 ], [ %490, %484 ]
  %496 = icmp ult i64 %479, 14
  br i1 %496, label %927, label %497

497:                                              ; preds = %493, %497
  %498 = phi i16* [ %521, %497 ], [ %494, %493 ]
  %499 = phi i16* [ %523, %497 ], [ %495, %493 ]
  %500 = getelementptr inbounds i16, i16* %498, i64 -1
  %501 = load i16, i16* %500, align 2
  %502 = getelementptr inbounds i16, i16* %499, i64 -1
  store i16 %501, i16* %502, align 2
  %503 = getelementptr inbounds i16, i16* %498, i64 -2
  %504 = load i16, i16* %503, align 2
  %505 = getelementptr inbounds i16, i16* %499, i64 -2
  store i16 %504, i16* %505, align 2
  %506 = getelementptr inbounds i16, i16* %498, i64 -3
  %507 = load i16, i16* %506, align 2
  %508 = getelementptr inbounds i16, i16* %499, i64 -3
  store i16 %507, i16* %508, align 2
  %509 = getelementptr inbounds i16, i16* %498, i64 -4
  %510 = load i16, i16* %509, align 2
  %511 = getelementptr inbounds i16, i16* %499, i64 -4
  store i16 %510, i16* %511, align 2
  %512 = getelementptr inbounds i16, i16* %498, i64 -5
  %513 = load i16, i16* %512, align 2
  %514 = getelementptr inbounds i16, i16* %499, i64 -5
  store i16 %513, i16* %514, align 2
  %515 = getelementptr inbounds i16, i16* %498, i64 -6
  %516 = load i16, i16* %515, align 2
  %517 = getelementptr inbounds i16, i16* %499, i64 -6
  store i16 %516, i16* %517, align 2
  %518 = getelementptr inbounds i16, i16* %498, i64 -7
  %519 = load i16, i16* %518, align 2
  %520 = getelementptr inbounds i16, i16* %499, i64 -7
  store i16 %519, i16* %520, align 2
  %521 = getelementptr inbounds i16, i16* %498, i64 -8
  %522 = load i16, i16* %521, align 2
  %523 = getelementptr inbounds i16, i16* %499, i64 -8
  store i16 %522, i16* %523, align 2
  %524 = icmp eq i16* %521, %6
  br i1 %524, label %927, label %497, !llvm.loop !75

525:                                              ; preds = %372
  %526 = getelementptr inbounds i16, i16* %375, i64 -1
  %527 = getelementptr inbounds i16, i16* %374, i64 -1
  %528 = load i16, i16* %527, align 2
  %529 = load i16, i16* %526, align 2
  %530 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %14, align 8
  %531 = zext i16 %528 to i64
  %532 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %530, i64 0, i32 0, i32 0
  %533 = load %struct.Elf32_Shdr*, %struct.Elf32_Shdr** %532, align 8
  %534 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %533, i64 %531, i32 4
  %535 = load i32, i32* %534, align 4
  %536 = zext i16 %529 to i64
  %537 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %533, i64 %536, i32 4
  %538 = load i32, i32* %537, align 4
  %539 = icmp ult i32 %535, %538
  %540 = getelementptr inbounds i16, i16* %373, i64 -1
  %541 = select i1 %539, i16 %529, i16 %528
  %542 = select i1 %539, i16* %526, i16* %375
  %543 = select i1 %539, i16* %374, i16* %527
  store i16 %541, i16* %540, align 2
  %544 = icmp eq i16* %543, %6
  br i1 %544, label %927, label %372

545:                                              ; preds = %203, %545
  %546 = phi i16* [ %571, %545 ], [ %205, %203 ]
  %547 = phi i16* [ %570, %545 ], [ %206, %203 ]
  %548 = load i16, i16* %547, align 2
  store i16 %548, i16* %546, align 2
  %549 = getelementptr inbounds i16, i16* %547, i64 1
  %550 = getelementptr inbounds i16, i16* %546, i64 1
  %551 = load i16, i16* %549, align 2
  store i16 %551, i16* %550, align 2
  %552 = getelementptr inbounds i16, i16* %547, i64 2
  %553 = getelementptr inbounds i16, i16* %546, i64 2
  %554 = load i16, i16* %552, align 2
  store i16 %554, i16* %553, align 2
  %555 = getelementptr inbounds i16, i16* %547, i64 3
  %556 = getelementptr inbounds i16, i16* %546, i64 3
  %557 = load i16, i16* %555, align 2
  store i16 %557, i16* %556, align 2
  %558 = getelementptr inbounds i16, i16* %547, i64 4
  %559 = getelementptr inbounds i16, i16* %546, i64 4
  %560 = load i16, i16* %558, align 2
  store i16 %560, i16* %559, align 2
  %561 = getelementptr inbounds i16, i16* %547, i64 5
  %562 = getelementptr inbounds i16, i16* %546, i64 5
  %563 = load i16, i16* %561, align 2
  store i16 %563, i16* %562, align 2
  %564 = getelementptr inbounds i16, i16* %547, i64 6
  %565 = getelementptr inbounds i16, i16* %546, i64 6
  %566 = load i16, i16* %564, align 2
  store i16 %566, i16* %565, align 2
  %567 = getelementptr inbounds i16, i16* %547, i64 7
  %568 = getelementptr inbounds i16, i16* %546, i64 7
  %569 = load i16, i16* %567, align 2
  store i16 %569, i16* %568, align 2
  %570 = getelementptr inbounds i16, i16* %547, i64 8
  %571 = getelementptr inbounds i16, i16* %546, i64 8
  %572 = icmp eq i16* %570, %16
  br i1 %572, label %369, label %545, !llvm.loop !76

573:                                              ; preds = %26, %582
  %574 = phi i64 [ %17, %26 ], [ %585, %582 ]
  %575 = phi i64 [ %20, %26 ], [ %584, %582 ]
  %576 = inttoptr i64 %575 to i16*
  %577 = load i16, i16* %576, align 2
  %578 = zext i16 %577 to i64
  %579 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %32, i64 %578, i32 4
  %580 = load i32, i32* %579, align 4
  %581 = icmp ult i32 %34, %580
  br i1 %581, label %587, label %582

582:                                              ; preds = %573
  %583 = getelementptr inbounds i16, i16* %576, i64 1
  %584 = ptrtoint i16* %583 to i64
  %585 = add nsw i64 %574, -1
  %586 = icmp eq i64 %585, 0
  br i1 %586, label %927, label %573

587:                                              ; preds = %573
  %588 = inttoptr i64 %575 to i16*
  %589 = icmp slt i64 %574, %18
  br i1 %589, label %590, label %623

590:                                              ; preds = %587
  %591 = sdiv i64 %18, 2
  %592 = getelementptr inbounds i16, i16* %27, i64 %591
  %593 = ptrtoint i16* %592 to i64
  %594 = sub i64 %19, %575
  %595 = icmp eq i64 %594, 0
  br i1 %595, label %618, label %596

596:                                              ; preds = %590
  %597 = ashr exact i64 %594, 1
  %598 = load i16, i16* %592, align 2
  %599 = zext i16 %598 to i64
  %600 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %32, i64 %599, i32 4
  %601 = load i32, i32* %600, align 4
  br label %602

602:                                              ; preds = %602, %596
  %603 = phi i16* [ %588, %596 ], [ %616, %602 ]
  %604 = phi i64 [ %597, %596 ], [ %615, %602 ]
  %605 = lshr i64 %604, 1
  %606 = getelementptr inbounds i16, i16* %603, i64 %605
  %607 = load i16, i16* %606, align 2
  %608 = zext i16 %607 to i64
  %609 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %32, i64 %608, i32 4
  %610 = load i32, i32* %609, align 4
  %611 = icmp ult i32 %601, %610
  %612 = getelementptr inbounds i16, i16* %606, i64 1
  %613 = xor i64 %605, -1
  %614 = add i64 %604, %613
  %615 = select i1 %611, i64 %605, i64 %614
  %616 = select i1 %611, i16* %603, i16* %612
  %617 = icmp eq i64 %615, 0
  br i1 %617, label %618, label %602

618:                                              ; preds = %602, %590
  %619 = phi i16* [ %588, %590 ], [ %616, %602 ]
  %620 = ptrtoint i16* %619 to i64
  %621 = sub i64 %620, %575
  %622 = ashr exact i64 %621, 1
  br label %662

623:                                              ; preds = %587
  %624 = icmp eq i64 %574, 1
  br i1 %624, label %625, label %628

625:                                              ; preds = %623
  %626 = inttoptr i64 %19 to i16*
  %627 = inttoptr i64 %575 to i16*
  store i16 %28, i16* %627, align 2
  store i16 %577, i16* %626, align 2
  br label %927

628:                                              ; preds = %623
  %629 = sdiv i64 %574, 2
  %630 = getelementptr inbounds i16, i16* %588, i64 %629
  %631 = ptrtoint i16* %630 to i64
  %632 = ptrtoint i16* %16 to i64
  %633 = sub i64 %632, %19
  %634 = icmp eq i64 %633, 0
  br i1 %634, label %657, label %635

635:                                              ; preds = %628
  %636 = ashr exact i64 %633, 1
  %637 = load i16, i16* %630, align 2
  %638 = zext i16 %637 to i64
  %639 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %32, i64 %638, i32 4
  %640 = load i32, i32* %639, align 4
  br label %641

641:                                              ; preds = %641, %635
  %642 = phi i16* [ %27, %635 ], [ %655, %641 ]
  %643 = phi i64 [ %636, %635 ], [ %654, %641 ]
  %644 = lshr i64 %643, 1
  %645 = getelementptr inbounds i16, i16* %642, i64 %644
  %646 = load i16, i16* %645, align 2
  %647 = zext i16 %646 to i64
  %648 = getelementptr inbounds %struct.Elf32_Shdr, %struct.Elf32_Shdr* %32, i64 %647, i32 4
  %649 = load i32, i32* %648, align 4
  %650 = icmp ult i32 %649, %640
  %651 = getelementptr inbounds i16, i16* %645, i64 1
  %652 = xor i64 %644, -1
  %653 = add i64 %643, %652
  %654 = select i1 %650, i64 %653, i64 %644
  %655 = select i1 %650, i16* %651, i16* %642
  %656 = icmp eq i64 %654, 0
  br i1 %656, label %657, label %641

657:                                              ; preds = %641, %628
  %658 = phi i16* [ %27, %628 ], [ %655, %641 ]
  %659 = ptrtoint i16* %658 to i64
  %660 = sub i64 %659, %19
  %661 = ashr exact i64 %660, 1
  br label %662

662:                                              ; preds = %657, %618
  %663 = phi i64 [ %620, %618 ], [ %631, %657 ]
  %664 = phi i64 [ %593, %618 ], [ %659, %657 ]
  %665 = phi i64 [ %591, %618 ], [ %661, %657 ]
  %666 = phi i64 [ %622, %618 ], [ %629, %657 ]
  %667 = sub nsw i64 %574, %666
  %668 = sub nsw i64 %18, %665
  %669 = inttoptr i64 %663 to i16*
  %670 = inttoptr i64 %664 to i16*
  %671 = inttoptr i64 %663 to i8*
  %672 = inttoptr i64 %19 to i8*
  %673 = icmp eq i16* %669, %27
  br i1 %673, label %912, label %674

674:                                              ; preds = %662
  %675 = icmp eq i16* %27, %670
  br i1 %675, label %912, label %676

676:                                              ; preds = %674
  %677 = getelementptr inbounds i16, i16* %669, i64 1
  %678 = icmp eq i16* %677, %27
  br i1 %678, label %679, label %687

679:                                              ; preds = %676
  %680 = load i16, i16* %669, align 2
  %681 = sub i64 %664, %19
  %682 = ashr exact i64 %681, 1
  %683 = icmp eq i64 %681, 0
  br i1 %683, label %685, label %684

684:                                              ; preds = %679
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %671, i8* align 2 %672, i64 %681, i1 false) #16
  br label %685

685:                                              ; preds = %684, %679
  %686 = getelementptr inbounds i16, i16* %669, i64 %682
  store i16 %680, i16* %686, align 2
  br label %912

687:                                              ; preds = %676
  %688 = getelementptr inbounds i16, i16* %27, i64 1
  %689 = icmp eq i16* %688, %670
  br i1 %689, label %690, label %703

690:                                              ; preds = %687
  %691 = getelementptr inbounds i16, i16* %670, i64 -1
  %692 = load i16, i16* %691, align 2
  %693 = ptrtoint i16* %691 to i64
  %694 = sub i64 %693, %663
  %695 = icmp eq i64 %694, 0
  br i1 %695, label %701, label %696

696:                                              ; preds = %690
  %697 = ashr exact i64 %694, 1
  %698 = sub nsw i64 0, %697
  %699 = getelementptr inbounds i16, i16* %670, i64 %698
  %700 = bitcast i16* %699 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %700, i8* align 2 %671, i64 %694, i1 false) #16
  br label %701

701:                                              ; preds = %696, %690
  %702 = phi i16* [ %699, %696 ], [ %670, %690 ]
  store i16 %692, i16* %669, align 2
  br label %912

703:                                              ; preds = %687
  %704 = sub i64 %19, %663
  %705 = ashr exact i64 %704, 1
  %706 = sub i64 %664, %19
  %707 = ashr exact i64 %706, 1
  %708 = icmp eq i64 %705, %707
  br i1 %708, label %709, label %854

709:                                              ; preds = %703
  %710 = load i16, i16* %669, align 2
  store i16 %28, i16* %669, align 2
  store i16 %710, i16* %27, align 2
  %711 = getelementptr inbounds i16, i16* %669, i64 1
  %712 = getelementptr inbounds i16, i16* %27, i64 1
  %713 = icmp eq i16* %711, %27
  br i1 %713, label %912, label %714

714:                                              ; preds = %709
  %715 = getelementptr i16, i16* %27, i64 -2
  %716 = bitcast i16* %715 to i8*
  %717 = sub i64 0, %663
  %718 = getelementptr i8, i8* %716, i64 %717
  %719 = ptrtoint i8* %718 to i64
  %720 = lshr i64 %719, 1
  %721 = add nuw i64 %720, 1
  %722 = icmp ult i64 %721, 16
  br i1 %722, label %809, label %723

723:                                              ; preds = %714
  %724 = getelementptr i16, i16* %669, i64 2
  %725 = getelementptr i16, i16* %27, i64 -2
  %726 = bitcast i16* %725 to i8*
  %727 = sub i64 0, %663
  %728 = getelementptr i8, i8* %726, i64 %727
  %729 = ptrtoint i8* %728 to i64
  %730 = lshr i64 %729, 1
  %731 = getelementptr i16, i16* %724, i64 %730
  %732 = getelementptr i16, i16* %27, i64 2
  %733 = getelementptr i16, i16* %732, i64 %730
  %734 = icmp ult i16* %711, %733
  %735 = icmp ult i16* %712, %731
  %736 = and i1 %734, %735
  br i1 %736, label %809, label %737

737:                                              ; preds = %723
  %738 = and i64 %721, -16
  %739 = getelementptr i16, i16* %712, i64 %738
  %740 = getelementptr i16, i16* %711, i64 %738
  %741 = add i64 %738, -16
  %742 = lshr exact i64 %741, 4
  %743 = add nuw nsw i64 %742, 1
  %744 = and i64 %743, 1
  %745 = icmp eq i64 %741, 0
  br i1 %745, label %787, label %746

746:                                              ; preds = %737
  %747 = sub nuw nsw i64 %743, %744
  br label %748

748:                                              ; preds = %748, %746
  %749 = phi i64 [ 0, %746 ], [ %784, %748 ]
  %750 = phi i64 [ %747, %746 ], [ %785, %748 ]
  %751 = getelementptr i16, i16* %712, i64 %749
  %752 = getelementptr i16, i16* %711, i64 %749
  %753 = bitcast i16* %751 to <8 x i16>*
  %754 = load <8 x i16>, <8 x i16>* %753, align 2, !alias.scope !77
  %755 = getelementptr i16, i16* %751, i64 8
  %756 = bitcast i16* %755 to <8 x i16>*
  %757 = load <8 x i16>, <8 x i16>* %756, align 2, !alias.scope !77
  %758 = bitcast i16* %752 to <8 x i16>*
  %759 = load <8 x i16>, <8 x i16>* %758, align 2, !alias.scope !80, !noalias !77
  %760 = getelementptr i16, i16* %752, i64 8
  %761 = bitcast i16* %760 to <8 x i16>*
  %762 = load <8 x i16>, <8 x i16>* %761, align 2, !alias.scope !80, !noalias !77
  %763 = bitcast i16* %752 to <8 x i16>*
  store <8 x i16> %754, <8 x i16>* %763, align 2, !alias.scope !80, !noalias !77
  %764 = bitcast i16* %760 to <8 x i16>*
  store <8 x i16> %757, <8 x i16>* %764, align 2, !alias.scope !80, !noalias !77
  %765 = bitcast i16* %751 to <8 x i16>*
  store <8 x i16> %759, <8 x i16>* %765, align 2, !alias.scope !77
  %766 = bitcast i16* %755 to <8 x i16>*
  store <8 x i16> %762, <8 x i16>* %766, align 2, !alias.scope !77
  %767 = or i64 %749, 16
  %768 = getelementptr i16, i16* %712, i64 %767
  %769 = getelementptr i16, i16* %711, i64 %767
  %770 = bitcast i16* %768 to <8 x i16>*
  %771 = load <8 x i16>, <8 x i16>* %770, align 2, !alias.scope !77
  %772 = getelementptr i16, i16* %768, i64 8
  %773 = bitcast i16* %772 to <8 x i16>*
  %774 = load <8 x i16>, <8 x i16>* %773, align 2, !alias.scope !77
  %775 = bitcast i16* %769 to <8 x i16>*
  %776 = load <8 x i16>, <8 x i16>* %775, align 2, !alias.scope !80, !noalias !77
  %777 = getelementptr i16, i16* %769, i64 8
  %778 = bitcast i16* %777 to <8 x i16>*
  %779 = load <8 x i16>, <8 x i16>* %778, align 2, !alias.scope !80, !noalias !77
  %780 = bitcast i16* %769 to <8 x i16>*
  store <8 x i16> %771, <8 x i16>* %780, align 2, !alias.scope !80, !noalias !77
  %781 = bitcast i16* %777 to <8 x i16>*
  store <8 x i16> %774, <8 x i16>* %781, align 2, !alias.scope !80, !noalias !77
  %782 = bitcast i16* %768 to <8 x i16>*
  store <8 x i16> %776, <8 x i16>* %782, align 2, !alias.scope !77
  %783 = bitcast i16* %772 to <8 x i16>*
  store <8 x i16> %779, <8 x i16>* %783, align 2, !alias.scope !77
  %784 = add i64 %749, 32
  %785 = add i64 %750, -2
  %786 = icmp eq i64 %785, 0
  br i1 %786, label %787, label %748, !llvm.loop !82

787:                                              ; preds = %748, %737
  %788 = phi i64 [ 0, %737 ], [ %784, %748 ]
  %789 = icmp eq i64 %744, 0
  br i1 %789, label %807, label %790

790:                                              ; preds = %787
  %791 = getelementptr i16, i16* %712, i64 %788
  %792 = getelementptr i16, i16* %711, i64 %788
  %793 = bitcast i16* %791 to <8 x i16>*
  %794 = load <8 x i16>, <8 x i16>* %793, align 2, !alias.scope !77
  %795 = getelementptr i16, i16* %791, i64 8
  %796 = bitcast i16* %795 to <8 x i16>*
  %797 = load <8 x i16>, <8 x i16>* %796, align 2, !alias.scope !77
  %798 = bitcast i16* %792 to <8 x i16>*
  %799 = load <8 x i16>, <8 x i16>* %798, align 2, !alias.scope !80, !noalias !77
  %800 = getelementptr i16, i16* %792, i64 8
  %801 = bitcast i16* %800 to <8 x i16>*
  %802 = load <8 x i16>, <8 x i16>* %801, align 2, !alias.scope !80, !noalias !77
  %803 = bitcast i16* %792 to <8 x i16>*
  store <8 x i16> %794, <8 x i16>* %803, align 2, !alias.scope !80, !noalias !77
  %804 = bitcast i16* %800 to <8 x i16>*
  store <8 x i16> %797, <8 x i16>* %804, align 2, !alias.scope !80, !noalias !77
  %805 = bitcast i16* %791 to <8 x i16>*
  store <8 x i16> %799, <8 x i16>* %805, align 2, !alias.scope !77
  %806 = bitcast i16* %795 to <8 x i16>*
  store <8 x i16> %802, <8 x i16>* %806, align 2, !alias.scope !77
  br label %807

807:                                              ; preds = %787, %790
  %808 = icmp eq i64 %721, %738
  br i1 %808, label %912, label %809

809:                                              ; preds = %807, %723, %714
  %810 = phi i16* [ %712, %723 ], [ %712, %714 ], [ %739, %807 ]
  %811 = phi i16* [ %711, %723 ], [ %711, %714 ], [ %740, %807 ]
  %812 = ptrtoint i16* %811 to i64
  %813 = getelementptr i16, i16* %27, i64 -1
  %814 = ptrtoint i16* %813 to i64
  %815 = sub i64 %814, %812
  %816 = lshr i64 %815, 1
  %817 = add nuw i64 %816, 1
  %818 = and i64 %817, 3
  %819 = icmp eq i64 %818, 0
  br i1 %819, label %830, label %820

820:                                              ; preds = %809, %820
  %821 = phi i16* [ %827, %820 ], [ %810, %809 ]
  %822 = phi i16* [ %826, %820 ], [ %811, %809 ]
  %823 = phi i64 [ %828, %820 ], [ %818, %809 ]
  %824 = load i16, i16* %821, align 2
  %825 = load i16, i16* %822, align 2
  store i16 %824, i16* %822, align 2
  store i16 %825, i16* %821, align 2
  %826 = getelementptr inbounds i16, i16* %822, i64 1
  %827 = getelementptr inbounds i16, i16* %821, i64 1
  %828 = add i64 %823, -1
  %829 = icmp eq i64 %828, 0
  br i1 %829, label %830, label %820, !llvm.loop !83

830:                                              ; preds = %820, %809
  %831 = phi i16* [ %810, %809 ], [ %827, %820 ]
  %832 = phi i16* [ %811, %809 ], [ %826, %820 ]
  %833 = icmp ult i64 %815, 6
  br i1 %833, label %912, label %834

834:                                              ; preds = %830, %834
  %835 = phi i16* [ %852, %834 ], [ %831, %830 ]
  %836 = phi i16* [ %851, %834 ], [ %832, %830 ]
  %837 = load i16, i16* %835, align 2
  %838 = load i16, i16* %836, align 2
  store i16 %837, i16* %836, align 2
  store i16 %838, i16* %835, align 2
  %839 = getelementptr inbounds i16, i16* %836, i64 1
  %840 = getelementptr inbounds i16, i16* %835, i64 1
  %841 = load i16, i16* %840, align 2
  %842 = load i16, i16* %839, align 2
  store i16 %841, i16* %839, align 2
  store i16 %842, i16* %840, align 2
  %843 = getelementptr inbounds i16, i16* %836, i64 2
  %844 = getelementptr inbounds i16, i16* %835, i64 2
  %845 = load i16, i16* %844, align 2
  %846 = load i16, i16* %843, align 2
  store i16 %845, i16* %843, align 2
  store i16 %846, i16* %844, align 2
  %847 = getelementptr inbounds i16, i16* %836, i64 3
  %848 = getelementptr inbounds i16, i16* %835, i64 3
  %849 = load i16, i16* %848, align 2
  %850 = load i16, i16* %847, align 2
  store i16 %849, i16* %847, align 2
  store i16 %850, i16* %848, align 2
  %851 = getelementptr inbounds i16, i16* %836, i64 4
  %852 = getelementptr inbounds i16, i16* %835, i64 4
  %853 = icmp eq i16* %851, %27
  br i1 %853, label %912, label %834, !llvm.loop !84

854:                                              ; preds = %703, %854
  %855 = phi i64 [ %857, %854 ], [ %707, %703 ]
  %856 = phi i64 [ %855, %854 ], [ %705, %703 ]
  %857 = srem i64 %856, %855
  %858 = icmp eq i64 %857, 0
  br i1 %858, label %859, label %854

859:                                              ; preds = %854
  %860 = icmp eq i64 %855, 0
  br i1 %860, label %888, label %861

861:                                              ; preds = %859
  %862 = getelementptr inbounds i16, i16* %669, i64 %855
  %863 = shl nsw i64 %855, 1
  %864 = add i64 %863, -2
  %865 = and i64 %864, 2
  %866 = icmp eq i64 %865, 0
  br i1 %866, label %867, label %885

867:                                              ; preds = %861
  %868 = getelementptr inbounds i16, i16* %862, i64 -1
  %869 = load i16, i16* %868, align 2
  %870 = getelementptr inbounds i16, i16* %868, i64 %705
  br label %871

871:                                              ; preds = %871, %867
  %872 = phi i16* [ %868, %867 ], [ %873, %871 ]
  %873 = phi i16* [ %870, %867 ], [ %882, %871 ]
  %874 = ptrtoint i16* %873 to i64
  %875 = load i16, i16* %873, align 2
  store i16 %875, i16* %872, align 2
  %876 = sub i64 %664, %874
  %877 = ashr exact i64 %876, 1
  %878 = icmp slt i64 %705, %877
  %879 = getelementptr inbounds i16, i16* %873, i64 %705
  %880 = sub nsw i64 %705, %877
  %881 = getelementptr inbounds i16, i16* %669, i64 %880
  %882 = select i1 %878, i16* %879, i16* %881
  %883 = icmp eq i16* %882, %868
  br i1 %883, label %884, label %871

884:                                              ; preds = %871
  store i16 %869, i16* %873, align 2
  br label %885

885:                                              ; preds = %884, %861
  %886 = phi i16* [ %868, %884 ], [ %862, %861 ]
  %887 = icmp eq i64 %864, 0
  br i1 %887, label %888, label %890

888:                                              ; preds = %885, %941, %859
  %889 = getelementptr inbounds i16, i16* %669, i64 %707
  br label %912

890:                                              ; preds = %885, %941
  %891 = phi i16* [ %909, %941 ], [ %886, %885 ]
  %892 = getelementptr inbounds i16, i16* %891, i64 -1
  %893 = load i16, i16* %892, align 2
  %894 = getelementptr inbounds i16, i16* %892, i64 %705
  br label %895

895:                                              ; preds = %895, %890
  %896 = phi i16* [ %892, %890 ], [ %897, %895 ]
  %897 = phi i16* [ %894, %890 ], [ %906, %895 ]
  %898 = ptrtoint i16* %897 to i64
  %899 = load i16, i16* %897, align 2
  store i16 %899, i16* %896, align 2
  %900 = sub i64 %664, %898
  %901 = ashr exact i64 %900, 1
  %902 = icmp slt i64 %705, %901
  %903 = getelementptr inbounds i16, i16* %897, i64 %705
  %904 = sub nsw i64 %705, %901
  %905 = getelementptr inbounds i16, i16* %669, i64 %904
  %906 = select i1 %902, i16* %903, i16* %905
  %907 = icmp eq i16* %906, %892
  br i1 %907, label %908, label %895

908:                                              ; preds = %895
  store i16 %893, i16* %897, align 2
  %909 = getelementptr inbounds i16, i16* %891, i64 -2
  %910 = load i16, i16* %909, align 2
  %911 = getelementptr inbounds i16, i16* %909, i64 %705
  br label %928

912:                                              ; preds = %830, %834, %709, %807, %662, %674, %685, %701, %888
  %913 = phi i16* [ %669, %674 ], [ %670, %662 ], [ %686, %685 ], [ %702, %701 ], [ %889, %888 ], [ %27, %807 ], [ %27, %709 ], [ %27, %834 ], [ %27, %830 ]
  %914 = add nsw i64 %666, %665
  %915 = add nsw i64 %667, %668
  %916 = icmp slt i64 %914, %915
  br i1 %916, label %917, label %919

917:                                              ; preds = %912
  %918 = ptrtoint i16* %913 to i64
  tail call fastcc void @"_ZNSt3__115__inplace_mergeIRZN9courgette12_GLOBAL__N_131GetSectionHeaderFileOffsetOrderERKNS_6vectorI10Elf32_ShdrNS_9allocatorIS4_EEEEE3$_0NS_11__wrap_iterIPtEEEEvT0_SF_SF_T_NS_15iterator_traitsISF_E15difference_typeESJ_PNSI_10value_typeEl"(i16* %588, i16* %669, i16* %913, %class.anon* dereferenceable(8) %3, i64 %666, i64 %665, i16* %6, i64 %7)
  br label %920

919:                                              ; preds = %912
  tail call fastcc void @"_ZNSt3__115__inplace_mergeIRZN9courgette12_GLOBAL__N_131GetSectionHeaderFileOffsetOrderERKNS_6vectorI10Elf32_ShdrNS_9allocatorIS4_EEEEE3$_0NS_11__wrap_iterIPtEEEEvT0_SF_SF_T_NS_15iterator_traitsISF_E15difference_typeESJ_PNSI_10value_typeEl"(i16* %913, i16* %670, i16* %16, %class.anon* dereferenceable(8) %3, i64 %667, i64 %668, i16* %6, i64 %7)
  br label %920

920:                                              ; preds = %917, %919
  %921 = phi i64 [ %918, %917 ], [ %575, %919 ]
  %922 = phi i64 [ %664, %917 ], [ %663, %919 ]
  %923 = phi i64 [ %668, %917 ], [ %665, %919 ]
  %924 = phi i64 [ %667, %917 ], [ %666, %919 ]
  %925 = phi i16* [ %16, %917 ], [ %913, %919 ]
  %926 = icmp eq i64 %923, 0
  br i1 %926, label %927, label %15

927:                                              ; preds = %920, %24, %582, %336, %525, %493, %497, %472, %8, %625, %369, %316, %311, %303, %172, %41
  ret void

928:                                              ; preds = %928, %908
  %929 = phi i16* [ %909, %908 ], [ %930, %928 ]
  %930 = phi i16* [ %911, %908 ], [ %939, %928 ]
  %931 = ptrtoint i16* %930 to i64
  %932 = load i16, i16* %930, align 2
  store i16 %932, i16* %929, align 2
  %933 = sub i64 %664, %931
  %934 = ashr exact i64 %933, 1
  %935 = icmp slt i64 %705, %934
  %936 = getelementptr inbounds i16, i16* %930, i64 %705
  %937 = sub nsw i64 %705, %934
  %938 = getelementptr inbounds i16, i16* %669, i64 %937
  %939 = select i1 %935, i16* %936, i16* %938
  %940 = icmp eq i16* %939, %909
  br i1 %940, label %941, label %928

941:                                              ; preds = %928
  store i16 %910, i16* %930, align 2
  %942 = icmp eq i16* %909, %669
  br i1 %942, label %888, label %890
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #5

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN9courgette12DisassemblerD2Ev(%"class.courgette::Disassembler"*) unnamed_addr #6

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #13

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #2 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #16
  %7 = load i8, i8* %6, align 8, !range !85
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #16
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #16
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #16
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #16
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #16
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #16
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #16
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #2 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #16
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #16
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #18
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #16
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #16
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #18
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #16
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #16
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #6

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #3

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #14

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9courgette16VectorRvaVisitorINSt3__110unique_ptrINS_17DisassemblerElf328TypedRVAENS1_14default_deleteIS4_EEEEED0Ev(%"class.courgette::VectorRvaVisitor"*) unnamed_addr #2 comdat align 2 {
  tail call void @llvm.trap() #17
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9courgette10RvaVisitorD2Ev(%"class.courgette::RvaVisitor"*) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i8(i8) #15

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #3

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #3

declare void @_ZNSt3__16__sortIRNS_6__lessIjjEEPjEEvT0_S5_T_(i32*, i32*, %"struct.std::__1::__less.66"* dereferenceable(1)) local_unnamed_addr #3

declare i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"*, i64, i64, i8*, i64) local_unnamed_addr #3

declare i32 @_ZN7logging18GetVlogLevelHelperEPKcm(i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__sortIRPFbRKNS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEES9_EPS7_EEvT0_SE_T_(%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** dereferenceable(8)) local_unnamed_addr #2 comdat {
  br label %4

4:                                                ; preds = %285, %3
  %5 = phi %"class.std::__1::unique_ptr"* [ %1, %3 ], [ %266, %285 ]
  %6 = phi %"class.std::__1::unique_ptr"* [ %0, %3 ], [ %18, %285 ]
  %7 = ptrtoint %"class.std::__1::unique_ptr"* %5 to i64
  %8 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %5, i64 -1
  %9 = bitcast %"class.std::__1::unique_ptr"* %8 to i64*
  %10 = bitcast %"class.std::__1::unique_ptr"* %8 to i64*
  %11 = bitcast %"class.std::__1::unique_ptr"* %8 to i64*
  %12 = bitcast %"class.std::__1::unique_ptr"* %8 to i64*
  %13 = bitcast %"class.std::__1::unique_ptr"* %8 to i64*
  %14 = ptrtoint %"class.std::__1::unique_ptr"* %5 to i64
  br label %15

15:                                               ; preds = %294, %4
  %16 = phi %"class.std::__1::unique_ptr"* [ %6, %4 ], [ %295, %294 ]
  br label %17

17:                                               ; preds = %216, %15
  %18 = phi %"class.std::__1::unique_ptr"* [ %16, %15 ], [ %207, %216 ]
  %19 = ptrtoint %"class.std::__1::unique_ptr"* %18 to i64
  %20 = sub i64 %7, %19
  %21 = ashr exact i64 %20, 3
  switch i64 %21, label %105 [
    i64 0, label %298
    i64 1, label %298
    i64 2, label %22
    i64 3, label %31
    i64 4, label %66
    i64 5, label %71
  ]

22:                                               ; preds = %17
  %23 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %24 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %5, i64 -1
  %25 = tail call zeroext i1 %23(%"class.std::__1::unique_ptr"* dereferenceable(8) %24, %"class.std::__1::unique_ptr"* dereferenceable(8) %18) #16
  br i1 %25, label %26, label %298

26:                                               ; preds = %22
  %27 = bitcast %"class.std::__1::unique_ptr"* %18 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast %"class.std::__1::unique_ptr"* %24 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %27, align 8
  store i64 %28, i64* %29, align 8
  br label %298

31:                                               ; preds = %17
  %32 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %18, i64 1
  %33 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %5, i64 -1
  %34 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %35 = tail call zeroext i1 %34(%"class.std::__1::unique_ptr"* dereferenceable(8) %32, %"class.std::__1::unique_ptr"* dereferenceable(8) %18) #16
  %36 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %37 = tail call zeroext i1 %36(%"class.std::__1::unique_ptr"* dereferenceable(8) %33, %"class.std::__1::unique_ptr"* dereferenceable(8) %32) #16
  br i1 %35, label %51, label %38

38:                                               ; preds = %31
  br i1 %37, label %39, label %298

39:                                               ; preds = %38
  %40 = bitcast %"class.std::__1::unique_ptr"* %32 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = bitcast %"class.std::__1::unique_ptr"* %33 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %40, align 8
  store i64 %41, i64* %42, align 8
  %44 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %45 = tail call zeroext i1 %44(%"class.std::__1::unique_ptr"* dereferenceable(8) %32, %"class.std::__1::unique_ptr"* dereferenceable(8) %18) #16
  br i1 %45, label %46, label %298

46:                                               ; preds = %39
  %47 = bitcast %"class.std::__1::unique_ptr"* %18 to <2 x i64>*
  %48 = load <2 x i64>, <2 x i64>* %47, align 8
  %49 = shufflevector <2 x i64> %48, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %50 = bitcast %"class.std::__1::unique_ptr"* %18 to <2 x i64>*
  store <2 x i64> %49, <2 x i64>* %50, align 8
  br label %298

51:                                               ; preds = %31
  %52 = bitcast %"class.std::__1::unique_ptr"* %18 to i64*
  %53 = load i64, i64* %52, align 8
  br i1 %37, label %54, label %57

54:                                               ; preds = %51
  %55 = bitcast %"class.std::__1::unique_ptr"* %33 to i64*
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %52, align 8
  store i64 %53, i64* %55, align 8
  br label %298

57:                                               ; preds = %51
  %58 = bitcast %"class.std::__1::unique_ptr"* %32 to i64*
  %59 = load i64, i64* %58, align 8
  store i64 %59, i64* %52, align 8
  store i64 %53, i64* %58, align 8
  %60 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %61 = tail call zeroext i1 %60(%"class.std::__1::unique_ptr"* dereferenceable(8) %33, %"class.std::__1::unique_ptr"* dereferenceable(8) %32) #16
  br i1 %61, label %62, label %298

62:                                               ; preds = %57
  %63 = load i64, i64* %58, align 8
  %64 = bitcast %"class.std::__1::unique_ptr"* %33 to i64*
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %58, align 8
  store i64 %63, i64* %64, align 8
  br label %298

66:                                               ; preds = %17
  %67 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %18, i64 1
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %18, i64 2
  %69 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %5, i64 -1
  %70 = tail call i32 @_ZNSt3__17__sort4IRPFbRKNS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEES9_EPS7_EEjT0_SE_SE_SE_T_(%"class.std::__1::unique_ptr"* %18, %"class.std::__1::unique_ptr"* %67, %"class.std::__1::unique_ptr"* %68, %"class.std::__1::unique_ptr"* %69, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** dereferenceable(8) %2)
  br label %298

71:                                               ; preds = %17
  %72 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %18, i64 1
  %73 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %18, i64 2
  %74 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %18, i64 3
  %75 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %5, i64 -1
  %76 = tail call i32 @_ZNSt3__17__sort4IRPFbRKNS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEES9_EPS7_EEjT0_SE_SE_SE_T_(%"class.std::__1::unique_ptr"* %18, %"class.std::__1::unique_ptr"* %72, %"class.std::__1::unique_ptr"* %73, %"class.std::__1::unique_ptr"* %74, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** dereferenceable(8) %2) #16
  %77 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %78 = tail call zeroext i1 %77(%"class.std::__1::unique_ptr"* dereferenceable(8) %75, %"class.std::__1::unique_ptr"* dereferenceable(8) %74) #16
  br i1 %78, label %79, label %298

79:                                               ; preds = %71
  %80 = bitcast %"class.std::__1::unique_ptr"* %74 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = bitcast %"class.std::__1::unique_ptr"* %75 to i64*
  %83 = load i64, i64* %82, align 8
  store i64 %83, i64* %80, align 8
  store i64 %81, i64* %82, align 8
  %84 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %85 = tail call zeroext i1 %84(%"class.std::__1::unique_ptr"* dereferenceable(8) %74, %"class.std::__1::unique_ptr"* dereferenceable(8) %73) #16
  br i1 %85, label %86, label %298

86:                                               ; preds = %79
  %87 = bitcast %"class.std::__1::unique_ptr"* %73 to <2 x i64>*
  %88 = load <2 x i64>, <2 x i64>* %87, align 8
  %89 = shufflevector <2 x i64> %88, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %90 = bitcast %"class.std::__1::unique_ptr"* %73 to <2 x i64>*
  store <2 x i64> %89, <2 x i64>* %90, align 8
  %91 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %92 = tail call zeroext i1 %91(%"class.std::__1::unique_ptr"* dereferenceable(8) %73, %"class.std::__1::unique_ptr"* dereferenceable(8) %72) #16
  br i1 %92, label %93, label %298

93:                                               ; preds = %86
  %94 = bitcast %"class.std::__1::unique_ptr"* %72 to <2 x i64>*
  %95 = load <2 x i64>, <2 x i64>* %94, align 8
  %96 = shufflevector <2 x i64> %95, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %97 = bitcast %"class.std::__1::unique_ptr"* %72 to <2 x i64>*
  store <2 x i64> %96, <2 x i64>* %97, align 8
  %98 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %99 = tail call zeroext i1 %98(%"class.std::__1::unique_ptr"* dereferenceable(8) %72, %"class.std::__1::unique_ptr"* dereferenceable(8) %18) #16
  br i1 %99, label %100, label %298

100:                                              ; preds = %93
  %101 = bitcast %"class.std::__1::unique_ptr"* %18 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 8
  %103 = shufflevector <2 x i64> %102, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %104 = bitcast %"class.std::__1::unique_ptr"* %18 to <2 x i64>*
  store <2 x i64> %103, <2 x i64>* %104, align 8
  br label %298

105:                                              ; preds = %17
  %106 = icmp slt i64 %20, 56
  br i1 %106, label %107, label %108

107:                                              ; preds = %105
  tail call void @_ZNSt3__118__insertion_sort_3IRPFbRKNS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEES9_EPS7_EEvT0_SE_T_(%"class.std::__1::unique_ptr"* %18, %"class.std::__1::unique_ptr"* %5, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** dereferenceable(8) %2)
  br label %298

108:                                              ; preds = %105
  %109 = icmp sgt i64 %20, 7992
  %110 = sdiv i64 %21, 2
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %18, i64 %110
  br i1 %109, label %112, label %145

112:                                              ; preds = %108
  %113 = sdiv i64 %21, 4
  %114 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %18, i64 %113
  %115 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %111, i64 %113
  %116 = tail call i32 @_ZNSt3__17__sort4IRPFbRKNS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEES9_EPS7_EEjT0_SE_SE_SE_T_(%"class.std::__1::unique_ptr"* %18, %"class.std::__1::unique_ptr"* %114, %"class.std::__1::unique_ptr"* %111, %"class.std::__1::unique_ptr"* %115, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** dereferenceable(8) %2) #16
  %117 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %118 = tail call zeroext i1 %117(%"class.std::__1::unique_ptr"* dereferenceable(8) %8, %"class.std::__1::unique_ptr"* dereferenceable(8) %115) #16
  br i1 %118, label %119, label %174

119:                                              ; preds = %112
  %120 = bitcast %"class.std::__1::unique_ptr"* %115 to i64*
  %121 = load i64, i64* %120, align 8
  %122 = load i64, i64* %12, align 8
  store i64 %122, i64* %120, align 8
  store i64 %121, i64* %12, align 8
  %123 = add i32 %116, 1
  %124 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %125 = tail call zeroext i1 %124(%"class.std::__1::unique_ptr"* dereferenceable(8) %115, %"class.std::__1::unique_ptr"* dereferenceable(8) %111) #16
  br i1 %125, label %126, label %174

126:                                              ; preds = %119
  %127 = bitcast %"class.std::__1::unique_ptr"* %111 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = load i64, i64* %120, align 8
  store i64 %129, i64* %127, align 8
  store i64 %128, i64* %120, align 8
  %130 = add i32 %116, 2
  %131 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %132 = tail call zeroext i1 %131(%"class.std::__1::unique_ptr"* dereferenceable(8) %111, %"class.std::__1::unique_ptr"* dereferenceable(8) %114) #16
  br i1 %132, label %133, label %174

133:                                              ; preds = %126
  %134 = bitcast %"class.std::__1::unique_ptr"* %114 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = load i64, i64* %127, align 8
  store i64 %136, i64* %134, align 8
  store i64 %135, i64* %127, align 8
  %137 = add i32 %116, 3
  %138 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %139 = tail call zeroext i1 %138(%"class.std::__1::unique_ptr"* dereferenceable(8) %114, %"class.std::__1::unique_ptr"* dereferenceable(8) %18) #16
  br i1 %139, label %140, label %174

140:                                              ; preds = %133
  %141 = bitcast %"class.std::__1::unique_ptr"* %18 to i64*
  %142 = load i64, i64* %141, align 8
  %143 = load i64, i64* %134, align 8
  store i64 %143, i64* %141, align 8
  store i64 %142, i64* %134, align 8
  %144 = add i32 %116, 4
  br label %174

145:                                              ; preds = %108
  %146 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %147 = tail call zeroext i1 %146(%"class.std::__1::unique_ptr"* dereferenceable(8) %111, %"class.std::__1::unique_ptr"* dereferenceable(8) %18) #16
  %148 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %149 = tail call zeroext i1 %148(%"class.std::__1::unique_ptr"* dereferenceable(8) %8, %"class.std::__1::unique_ptr"* dereferenceable(8) %111) #16
  br i1 %147, label %161, label %150

150:                                              ; preds = %145
  br i1 %149, label %151, label %174

151:                                              ; preds = %150
  %152 = bitcast %"class.std::__1::unique_ptr"* %111 to i64*
  %153 = load i64, i64* %152, align 8
  %154 = load i64, i64* %9, align 8
  store i64 %154, i64* %152, align 8
  store i64 %153, i64* %9, align 8
  %155 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %156 = tail call zeroext i1 %155(%"class.std::__1::unique_ptr"* dereferenceable(8) %111, %"class.std::__1::unique_ptr"* dereferenceable(8) %18) #16
  br i1 %156, label %157, label %174

157:                                              ; preds = %151
  %158 = bitcast %"class.std::__1::unique_ptr"* %18 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = load i64, i64* %152, align 8
  store i64 %160, i64* %158, align 8
  store i64 %159, i64* %152, align 8
  br label %174

161:                                              ; preds = %145
  %162 = bitcast %"class.std::__1::unique_ptr"* %18 to i64*
  %163 = load i64, i64* %162, align 8
  br i1 %149, label %164, label %166

164:                                              ; preds = %161
  %165 = load i64, i64* %11, align 8
  store i64 %165, i64* %162, align 8
  store i64 %163, i64* %11, align 8
  br label %174

166:                                              ; preds = %161
  %167 = bitcast %"class.std::__1::unique_ptr"* %111 to i64*
  %168 = load i64, i64* %167, align 8
  store i64 %168, i64* %162, align 8
  store i64 %163, i64* %167, align 8
  %169 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %170 = tail call zeroext i1 %169(%"class.std::__1::unique_ptr"* dereferenceable(8) %8, %"class.std::__1::unique_ptr"* dereferenceable(8) %111) #16
  br i1 %170, label %171, label %174

171:                                              ; preds = %166
  %172 = load i64, i64* %167, align 8
  %173 = load i64, i64* %10, align 8
  store i64 %173, i64* %167, align 8
  store i64 %172, i64* %10, align 8
  br label %174

174:                                              ; preds = %171, %166, %164, %157, %151, %150, %140, %133, %126, %119, %112
  %175 = phi i32 [ %144, %140 ], [ %137, %133 ], [ %130, %126 ], [ %123, %119 ], [ %116, %112 ], [ 1, %164 ], [ 0, %150 ], [ 2, %157 ], [ 1, %151 ], [ 2, %171 ], [ 1, %166 ]
  %176 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %177 = tail call zeroext i1 %176(%"class.std::__1::unique_ptr"* dereferenceable(8) %18, %"class.std::__1::unique_ptr"* dereferenceable(8) %111) #16
  br i1 %177, label %232, label %178

178:                                              ; preds = %174, %223
  %179 = phi %"class.std::__1::unique_ptr"* [ %180, %223 ], [ %8, %174 ]
  %180 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %179, i64 -1
  %181 = icmp eq %"class.std::__1::unique_ptr"* %18, %180
  br i1 %181, label %182, label %223

182:                                              ; preds = %178
  %183 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %18, i64 1
  %184 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %185 = tail call zeroext i1 %184(%"class.std::__1::unique_ptr"* dereferenceable(8) %18, %"class.std::__1::unique_ptr"* dereferenceable(8) %8) #16
  br i1 %185, label %200, label %186

186:                                              ; preds = %182
  %187 = icmp eq %"class.std::__1::unique_ptr"* %183, %8
  br i1 %187, label %298, label %188

188:                                              ; preds = %186, %197
  %189 = phi %"class.std::__1::unique_ptr"* [ %198, %197 ], [ %183, %186 ]
  %190 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %191 = tail call zeroext i1 %190(%"class.std::__1::unique_ptr"* dereferenceable(8) %18, %"class.std::__1::unique_ptr"* dereferenceable(8) %189) #16
  br i1 %191, label %192, label %197

192:                                              ; preds = %188
  %193 = bitcast %"class.std::__1::unique_ptr"* %189 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = load i64, i64* %13, align 8
  store i64 %195, i64* %193, align 8
  store i64 %194, i64* %13, align 8
  %196 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %189, i64 1
  br label %200

197:                                              ; preds = %188
  %198 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %189, i64 1
  %199 = icmp eq %"class.std::__1::unique_ptr"* %198, %8
  br i1 %199, label %298, label %188

200:                                              ; preds = %192, %182
  %201 = phi %"class.std::__1::unique_ptr"* [ %183, %182 ], [ %196, %192 ]
  %202 = icmp eq %"class.std::__1::unique_ptr"* %201, %8
  br i1 %202, label %298, label %203

203:                                              ; preds = %200, %218
  %204 = phi %"class.std::__1::unique_ptr"* [ %210, %218 ], [ %201, %200 ]
  %205 = phi %"class.std::__1::unique_ptr"* [ %214, %218 ], [ %8, %200 ]
  br label %206

206:                                              ; preds = %206, %203
  %207 = phi %"class.std::__1::unique_ptr"* [ %204, %203 ], [ %210, %206 ]
  %208 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %209 = tail call zeroext i1 %208(%"class.std::__1::unique_ptr"* dereferenceable(8) %18, %"class.std::__1::unique_ptr"* dereferenceable(8) %207) #16
  %210 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %207, i64 1
  br i1 %209, label %211, label %206

211:                                              ; preds = %206, %211
  %212 = phi %"class.std::__1::unique_ptr"* [ %214, %211 ], [ %205, %206 ]
  %213 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %214 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %212, i64 -1
  %215 = tail call zeroext i1 %213(%"class.std::__1::unique_ptr"* dereferenceable(8) %18, %"class.std::__1::unique_ptr"* dereferenceable(8) %214) #16
  br i1 %215, label %211, label %216

216:                                              ; preds = %211
  %217 = icmp ult %"class.std::__1::unique_ptr"* %207, %214
  br i1 %217, label %218, label %17

218:                                              ; preds = %216
  %219 = bitcast %"class.std::__1::unique_ptr"* %207 to i64*
  %220 = load i64, i64* %219, align 8
  %221 = bitcast %"class.std::__1::unique_ptr"* %214 to i64*
  %222 = load i64, i64* %221, align 8
  store i64 %222, i64* %219, align 8
  store i64 %220, i64* %221, align 8
  br label %203

223:                                              ; preds = %178
  %224 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %225 = tail call zeroext i1 %224(%"class.std::__1::unique_ptr"* dereferenceable(8) %180, %"class.std::__1::unique_ptr"* dereferenceable(8) %111) #16
  br i1 %225, label %226, label %178

226:                                              ; preds = %223
  %227 = bitcast %"class.std::__1::unique_ptr"* %18 to i64*
  %228 = load i64, i64* %227, align 8
  %229 = bitcast %"class.std::__1::unique_ptr"* %180 to i64*
  %230 = load i64, i64* %229, align 8
  store i64 %230, i64* %227, align 8
  store i64 %228, i64* %229, align 8
  %231 = add i32 %175, 1
  br label %232

232:                                              ; preds = %174, %226
  %233 = phi i32 [ %231, %226 ], [ %175, %174 ]
  %234 = phi %"class.std::__1::unique_ptr"* [ %180, %226 ], [ %8, %174 ]
  %235 = ptrtoint %"class.std::__1::unique_ptr"* %18 to i64
  %236 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %18, i64 1
  %237 = icmp ult %"class.std::__1::unique_ptr"* %236, %234
  br i1 %237, label %238, label %263

238:                                              ; preds = %232, %255
  %239 = phi %"class.std::__1::unique_ptr"* [ %262, %255 ], [ %111, %232 ]
  %240 = phi i32 [ %260, %255 ], [ %233, %232 ]
  %241 = phi %"class.std::__1::unique_ptr"* [ %247, %255 ], [ %236, %232 ]
  %242 = phi %"class.std::__1::unique_ptr"* [ %251, %255 ], [ %234, %232 ]
  br label %243

243:                                              ; preds = %243, %238
  %244 = phi %"class.std::__1::unique_ptr"* [ %241, %238 ], [ %247, %243 ]
  %245 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %246 = tail call zeroext i1 %245(%"class.std::__1::unique_ptr"* dereferenceable(8) %244, %"class.std::__1::unique_ptr"* dereferenceable(8) %239) #16
  %247 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %244, i64 1
  br i1 %246, label %243, label %248

248:                                              ; preds = %243, %248
  %249 = phi %"class.std::__1::unique_ptr"* [ %251, %248 ], [ %242, %243 ]
  %250 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %251 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %249, i64 -1
  %252 = tail call zeroext i1 %250(%"class.std::__1::unique_ptr"* dereferenceable(8) %251, %"class.std::__1::unique_ptr"* dereferenceable(8) %239) #16
  br i1 %252, label %253, label %248

253:                                              ; preds = %248
  %254 = icmp ugt %"class.std::__1::unique_ptr"* %244, %251
  br i1 %254, label %263, label %255

255:                                              ; preds = %253
  %256 = bitcast %"class.std::__1::unique_ptr"* %244 to i64*
  %257 = load i64, i64* %256, align 8
  %258 = bitcast %"class.std::__1::unique_ptr"* %251 to i64*
  %259 = load i64, i64* %258, align 8
  store i64 %259, i64* %256, align 8
  store i64 %257, i64* %258, align 8
  %260 = add i32 %240, 1
  %261 = icmp eq %"class.std::__1::unique_ptr"* %239, %244
  %262 = select i1 %261, %"class.std::__1::unique_ptr"* %251, %"class.std::__1::unique_ptr"* %239
  br label %238

263:                                              ; preds = %253, %232
  %264 = phi %"class.std::__1::unique_ptr"* [ %111, %232 ], [ %239, %253 ]
  %265 = phi i32 [ %233, %232 ], [ %240, %253 ]
  %266 = phi %"class.std::__1::unique_ptr"* [ %236, %232 ], [ %244, %253 ]
  %267 = icmp eq %"class.std::__1::unique_ptr"* %266, %264
  br i1 %267, label %277, label %268

268:                                              ; preds = %263
  %269 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %270 = tail call zeroext i1 %269(%"class.std::__1::unique_ptr"* dereferenceable(8) %264, %"class.std::__1::unique_ptr"* dereferenceable(8) %266) #16
  br i1 %270, label %271, label %277

271:                                              ; preds = %268
  %272 = bitcast %"class.std::__1::unique_ptr"* %266 to i64*
  %273 = load i64, i64* %272, align 8
  %274 = bitcast %"class.std::__1::unique_ptr"* %264 to i64*
  %275 = load i64, i64* %274, align 8
  store i64 %275, i64* %272, align 8
  store i64 %273, i64* %274, align 8
  %276 = add i32 %265, 1
  br label %277

277:                                              ; preds = %263, %271, %268
  %278 = phi i32 [ %276, %271 ], [ %265, %268 ], [ %265, %263 ]
  %279 = icmp eq i32 %278, 0
  br i1 %279, label %280, label %287

280:                                              ; preds = %277
  %281 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbRKNS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEES9_EPS7_EEbT0_SE_T_(%"class.std::__1::unique_ptr"* %18, %"class.std::__1::unique_ptr"* %266, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** dereferenceable(8) %2)
  %282 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %266, i64 1
  %283 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbRKNS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEES9_EPS7_EEbT0_SE_T_(%"class.std::__1::unique_ptr"* %282, %"class.std::__1::unique_ptr"* %5, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** dereferenceable(8) %2)
  br i1 %283, label %284, label %286

284:                                              ; preds = %280
  br i1 %281, label %298, label %285

285:                                              ; preds = %284, %296
  br label %4

286:                                              ; preds = %280
  br i1 %281, label %294, label %287

287:                                              ; preds = %286, %277
  %288 = ptrtoint %"class.std::__1::unique_ptr"* %266 to i64
  %289 = sub i64 %288, %235
  %290 = sub i64 %14, %288
  %291 = icmp slt i64 %289, %290
  br i1 %291, label %292, label %296

292:                                              ; preds = %287
  tail call void @_ZNSt3__16__sortIRPFbRKNS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEES9_EPS7_EEvT0_SE_T_(%"class.std::__1::unique_ptr"* %18, %"class.std::__1::unique_ptr"* %266, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** dereferenceable(8) %2)
  %293 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %266, i64 1
  br label %294

294:                                              ; preds = %292, %286
  %295 = phi %"class.std::__1::unique_ptr"* [ %282, %286 ], [ %293, %292 ]
  br label %15

296:                                              ; preds = %287
  %297 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %266, i64 1
  tail call void @_ZNSt3__16__sortIRPFbRKNS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEES9_EPS7_EEvT0_SE_T_(%"class.std::__1::unique_ptr"* %297, %"class.std::__1::unique_ptr"* %5, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** dereferenceable(8) %2)
  br label %285

298:                                              ; preds = %284, %200, %17, %17, %186, %197, %100, %93, %86, %79, %71, %62, %57, %54, %46, %39, %38, %22, %26, %66, %107
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort4IRPFbRKNS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEES9_EPS7_EEjT0_SE_SE_SE_T_(%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** dereferenceable(8)) local_unnamed_addr #2 comdat {
  %6 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %4, align 8
  %7 = tail call zeroext i1 %6(%"class.std::__1::unique_ptr"* dereferenceable(8) %1, %"class.std::__1::unique_ptr"* dereferenceable(8) %0) #16
  %8 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %4, align 8
  %9 = tail call zeroext i1 %8(%"class.std::__1::unique_ptr"* dereferenceable(8) %2, %"class.std::__1::unique_ptr"* dereferenceable(8) %1) #16
  br i1 %7, label %22, label %10

10:                                               ; preds = %5
  br i1 %9, label %11, label %37

11:                                               ; preds = %10
  %12 = bitcast %"class.std::__1::unique_ptr"* %1 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.std::__1::unique_ptr"* %2 to i64*
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* %12, align 8
  store i64 %13, i64* %14, align 8
  %16 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %4, align 8
  %17 = tail call zeroext i1 %16(%"class.std::__1::unique_ptr"* dereferenceable(8) %1, %"class.std::__1::unique_ptr"* dereferenceable(8) %0) #16
  br i1 %17, label %18, label %37

18:                                               ; preds = %11
  %19 = bitcast %"class.std::__1::unique_ptr"* %0 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = load i64, i64* %12, align 8
  store i64 %21, i64* %19, align 8
  store i64 %20, i64* %12, align 8
  br label %37

22:                                               ; preds = %5
  %23 = bitcast %"class.std::__1::unique_ptr"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  br i1 %9, label %25, label %28

25:                                               ; preds = %22
  %26 = bitcast %"class.std::__1::unique_ptr"* %2 to i64*
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %23, align 8
  store i64 %24, i64* %26, align 8
  br label %37

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::unique_ptr"* %1 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %23, align 8
  store i64 %24, i64* %29, align 8
  %31 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %4, align 8
  %32 = tail call zeroext i1 %31(%"class.std::__1::unique_ptr"* dereferenceable(8) %2, %"class.std::__1::unique_ptr"* dereferenceable(8) %1) #16
  br i1 %32, label %33, label %37

33:                                               ; preds = %28
  %34 = load i64, i64* %29, align 8
  %35 = bitcast %"class.std::__1::unique_ptr"* %2 to i64*
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %29, align 8
  store i64 %34, i64* %35, align 8
  br label %37

37:                                               ; preds = %10, %11, %18, %25, %28, %33
  %38 = phi i32 [ 1, %25 ], [ 0, %10 ], [ 2, %18 ], [ 1, %11 ], [ 2, %33 ], [ 1, %28 ]
  %39 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %4, align 8
  %40 = tail call zeroext i1 %39(%"class.std::__1::unique_ptr"* dereferenceable(8) %3, %"class.std::__1::unique_ptr"* dereferenceable(8) %2) #16
  br i1 %40, label %41, label %61

41:                                               ; preds = %37
  %42 = bitcast %"class.std::__1::unique_ptr"* %2 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = bitcast %"class.std::__1::unique_ptr"* %3 to i64*
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %42, align 8
  store i64 %43, i64* %44, align 8
  %46 = add nuw nsw i32 %38, 1
  %47 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %4, align 8
  %48 = tail call zeroext i1 %47(%"class.std::__1::unique_ptr"* dereferenceable(8) %2, %"class.std::__1::unique_ptr"* dereferenceable(8) %1) #16
  br i1 %48, label %49, label %61

49:                                               ; preds = %41
  %50 = bitcast %"class.std::__1::unique_ptr"* %1 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = load i64, i64* %42, align 8
  store i64 %52, i64* %50, align 8
  store i64 %51, i64* %42, align 8
  %53 = add nuw nsw i32 %38, 2
  %54 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %4, align 8
  %55 = tail call zeroext i1 %54(%"class.std::__1::unique_ptr"* dereferenceable(8) %1, %"class.std::__1::unique_ptr"* dereferenceable(8) %0) #16
  br i1 %55, label %56, label %61

56:                                               ; preds = %49
  %57 = bitcast %"class.std::__1::unique_ptr"* %0 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = load i64, i64* %50, align 8
  store i64 %59, i64* %57, align 8
  store i64 %58, i64* %50, align 8
  %60 = add nuw nsw i32 %38, 3
  br label %61

61:                                               ; preds = %41, %56, %49, %37
  %62 = phi i32 [ %60, %56 ], [ %53, %49 ], [ %46, %41 ], [ %38, %37 ]
  ret i32 %62
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__118__insertion_sort_3IRPFbRKNS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEES9_EPS7_EEvT0_SE_T_(%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** dereferenceable(8)) local_unnamed_addr #2 comdat {
  %4 = alloca %"class.std::__1::unique_ptr", align 8
  %5 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %0, i64 2
  %6 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %0, i64 1
  %7 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %8 = tail call zeroext i1 %7(%"class.std::__1::unique_ptr"* dereferenceable(8) %6, %"class.std::__1::unique_ptr"* dereferenceable(8) %0) #16
  %9 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %10 = tail call zeroext i1 %9(%"class.std::__1::unique_ptr"* dereferenceable(8) %5, %"class.std::__1::unique_ptr"* dereferenceable(8) %6) #16
  br i1 %8, label %24, label %11

11:                                               ; preds = %3
  br i1 %10, label %12, label %40

12:                                               ; preds = %11
  %13 = bitcast %"class.std::__1::unique_ptr"* %6 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 8
  %15 = shufflevector <2 x i64> %14, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %16 = bitcast %"class.std::__1::unique_ptr"* %6 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 8
  %17 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %18 = tail call zeroext i1 %17(%"class.std::__1::unique_ptr"* dereferenceable(8) %6, %"class.std::__1::unique_ptr"* dereferenceable(8) %0) #16
  br i1 %18, label %19, label %40

19:                                               ; preds = %12
  %20 = bitcast %"class.std::__1::unique_ptr"* %0 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 8
  %22 = shufflevector <2 x i64> %21, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %23 = bitcast %"class.std::__1::unique_ptr"* %0 to <2 x i64>*
  store <2 x i64> %22, <2 x i64>* %23, align 8
  br label %40

24:                                               ; preds = %3
  %25 = bitcast %"class.std::__1::unique_ptr"* %0 to i64*
  %26 = load i64, i64* %25, align 8
  br i1 %10, label %27, label %30

27:                                               ; preds = %24
  %28 = bitcast %"class.std::__1::unique_ptr"* %5 to i64*
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* %25, align 8
  store i64 %26, i64* %28, align 8
  br label %40

30:                                               ; preds = %24
  %31 = bitcast %"class.std::__1::unique_ptr"* %6 to i64*
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %25, align 8
  store i64 %26, i64* %31, align 8
  %33 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %34 = tail call zeroext i1 %33(%"class.std::__1::unique_ptr"* dereferenceable(8) %5, %"class.std::__1::unique_ptr"* dereferenceable(8) %6) #16
  br i1 %34, label %35, label %40

35:                                               ; preds = %30
  %36 = bitcast %"class.std::__1::unique_ptr"* %6 to <2 x i64>*
  %37 = load <2 x i64>, <2 x i64>* %36, align 8
  %38 = shufflevector <2 x i64> %37, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %39 = bitcast %"class.std::__1::unique_ptr"* %6 to <2 x i64>*
  store <2 x i64> %38, <2 x i64>* %39, align 8
  br label %40

40:                                               ; preds = %11, %12, %19, %27, %30, %35
  %41 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %0, i64 3
  %42 = icmp eq %"class.std::__1::unique_ptr"* %41, %1
  br i1 %42, label %47, label %43

43:                                               ; preds = %40
  %44 = bitcast %"class.std::__1::unique_ptr"* %4 to i8*
  %45 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %4, i64 0, i32 0, i32 0, i32 0
  %46 = bitcast %"class.std::__1::unique_ptr"* %4 to i64*
  br label %48

47:                                               ; preds = %99, %40
  ret void

48:                                               ; preds = %43, %99
  %49 = phi %"class.std::__1::unique_ptr"* [ %41, %43 ], [ %100, %99 ]
  %50 = phi %"class.std::__1::unique_ptr"* [ %5, %43 ], [ %49, %99 ]
  %51 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %52 = call zeroext i1 %51(%"class.std::__1::unique_ptr"* dereferenceable(8) %49, %"class.std::__1::unique_ptr"* dereferenceable(8) %50) #16
  br i1 %52, label %53, label %99

53:                                               ; preds = %48
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #16
  %54 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 0, i32 0, i32 0, i32 0
  %55 = bitcast %"class.std::__1::unique_ptr"* %49 to i64*
  %56 = load i64, i64* %55, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %54, align 8
  store i64 %56, i64* %46, align 8
  br label %57

57:                                               ; preds = %74, %53
  %58 = phi %"class.std::__1::unique_ptr"* [ %49, %53 ], [ %59, %74 ]
  %59 = phi %"class.std::__1::unique_ptr"* [ %50, %53 ], [ %76, %74 ]
  %60 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %59, i64 0, i32 0, i32 0, i32 0
  %61 = bitcast %"class.std::__1::unique_ptr"* %59 to i64*
  %62 = load i64, i64* %61, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %60, align 8
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %58, i64 0, i32 0, i32 0, i32 0
  %64 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %63, align 8
  %65 = bitcast %"class.std::__1::unique_ptr"* %58 to i64*
  store i64 %62, i64* %65, align 8
  %66 = icmp eq %"class.courgette::DisassemblerElf32::TypedRVA"* %64, null
  br i1 %66, label %72, label %67

67:                                               ; preds = %57
  %68 = bitcast %"class.courgette::DisassemblerElf32::TypedRVA"* %64 to void (%"class.courgette::DisassemblerElf32::TypedRVA"*)***
  %69 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)**, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*** %68, align 8
  %70 = getelementptr inbounds void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %69, i64 1
  %71 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %70, align 8
  call void %71(%"class.courgette::DisassemblerElf32::TypedRVA"* nonnull %64) #16
  br label %72

72:                                               ; preds = %57, %67
  %73 = icmp eq %"class.std::__1::unique_ptr"* %59, %0
  br i1 %73, label %78, label %74

74:                                               ; preds = %72
  %75 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %76 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %59, i64 -1
  %77 = call zeroext i1 %75(%"class.std::__1::unique_ptr"* nonnull dereferenceable(8) %4, %"class.std::__1::unique_ptr"* dereferenceable(8) %76) #16
  br i1 %77, label %57, label %78

78:                                               ; preds = %72, %74
  %79 = phi %"class.std::__1::unique_ptr"* [ %59, %74 ], [ %0, %72 ]
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %79, i64 0, i32 0, i32 0, i32 0
  %81 = bitcast %"class.std::__1::unique_ptr"* %79 to i64*
  %82 = load i64, i64* %46, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %45, align 8
  %83 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %80, align 8
  store i64 %82, i64* %81, align 8
  %84 = icmp eq %"class.courgette::DisassemblerElf32::TypedRVA"* %83, null
  br i1 %84, label %90, label %85

85:                                               ; preds = %78
  %86 = bitcast %"class.courgette::DisassemblerElf32::TypedRVA"* %83 to void (%"class.courgette::DisassemblerElf32::TypedRVA"*)***
  %87 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)**, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*** %86, align 8
  %88 = getelementptr inbounds void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %87, i64 1
  %89 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %88, align 8
  call void %89(%"class.courgette::DisassemblerElf32::TypedRVA"* nonnull %83) #16
  br label %90

90:                                               ; preds = %78, %85
  %91 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %45, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %45, align 8
  %92 = icmp eq %"class.courgette::DisassemblerElf32::TypedRVA"* %91, null
  br i1 %92, label %98, label %93

93:                                               ; preds = %90
  %94 = bitcast %"class.courgette::DisassemblerElf32::TypedRVA"* %91 to void (%"class.courgette::DisassemblerElf32::TypedRVA"*)***
  %95 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)**, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*** %94, align 8
  %96 = getelementptr inbounds void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %95, i64 1
  %97 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %96, align 8
  call void %97(%"class.courgette::DisassemblerElf32::TypedRVA"* nonnull %91) #16
  br label %98

98:                                               ; preds = %90, %93
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #16
  br label %99

99:                                               ; preds = %98, %48
  %100 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 1
  %101 = icmp eq %"class.std::__1::unique_ptr"* %100, %1
  br i1 %101, label %47, label %48
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbRKNS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEES9_EPS7_EEbT0_SE_T_(%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** dereferenceable(8)) local_unnamed_addr #2 comdat {
  %4 = alloca %"class.std::__1::unique_ptr", align 8
  %5 = ptrtoint %"class.std::__1::unique_ptr"* %1 to i64
  %6 = ptrtoint %"class.std::__1::unique_ptr"* %0 to i64
  %7 = sub i64 %5, %6
  %8 = ashr exact i64 %7, 3
  switch i64 %8, label %92 [
    i64 0, label %196
    i64 1, label %196
    i64 2, label %9
    i64 3, label %18
    i64 4, label %53
    i64 5, label %58
  ]

9:                                                ; preds = %3
  %10 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %11 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %1, i64 -1
  %12 = tail call zeroext i1 %10(%"class.std::__1::unique_ptr"* dereferenceable(8) %11, %"class.std::__1::unique_ptr"* dereferenceable(8) %0) #16
  br i1 %12, label %13, label %196

13:                                               ; preds = %9
  %14 = bitcast %"class.std::__1::unique_ptr"* %0 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.std::__1::unique_ptr"* %11 to i64*
  %17 = load i64, i64* %16, align 8
  store i64 %17, i64* %14, align 8
  store i64 %15, i64* %16, align 8
  br label %196

18:                                               ; preds = %3
  %19 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %0, i64 1
  %20 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %1, i64 -1
  %21 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %22 = tail call zeroext i1 %21(%"class.std::__1::unique_ptr"* dereferenceable(8) %19, %"class.std::__1::unique_ptr"* dereferenceable(8) %0) #16
  %23 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %24 = tail call zeroext i1 %23(%"class.std::__1::unique_ptr"* dereferenceable(8) %20, %"class.std::__1::unique_ptr"* dereferenceable(8) %19) #16
  br i1 %22, label %38, label %25

25:                                               ; preds = %18
  br i1 %24, label %26, label %196

26:                                               ; preds = %25
  %27 = bitcast %"class.std::__1::unique_ptr"* %19 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast %"class.std::__1::unique_ptr"* %20 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %27, align 8
  store i64 %28, i64* %29, align 8
  %31 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %32 = tail call zeroext i1 %31(%"class.std::__1::unique_ptr"* dereferenceable(8) %19, %"class.std::__1::unique_ptr"* dereferenceable(8) %0) #16
  br i1 %32, label %33, label %196

33:                                               ; preds = %26
  %34 = bitcast %"class.std::__1::unique_ptr"* %0 to <2 x i64>*
  %35 = load <2 x i64>, <2 x i64>* %34, align 8
  %36 = shufflevector <2 x i64> %35, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %37 = bitcast %"class.std::__1::unique_ptr"* %0 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %37, align 8
  br label %196

38:                                               ; preds = %18
  %39 = bitcast %"class.std::__1::unique_ptr"* %0 to i64*
  %40 = load i64, i64* %39, align 8
  br i1 %24, label %41, label %44

41:                                               ; preds = %38
  %42 = bitcast %"class.std::__1::unique_ptr"* %20 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %39, align 8
  store i64 %40, i64* %42, align 8
  br label %196

44:                                               ; preds = %38
  %45 = bitcast %"class.std::__1::unique_ptr"* %19 to i64*
  %46 = load i64, i64* %45, align 8
  store i64 %46, i64* %39, align 8
  store i64 %40, i64* %45, align 8
  %47 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %48 = tail call zeroext i1 %47(%"class.std::__1::unique_ptr"* dereferenceable(8) %20, %"class.std::__1::unique_ptr"* dereferenceable(8) %19) #16
  br i1 %48, label %49, label %196

49:                                               ; preds = %44
  %50 = load i64, i64* %45, align 8
  %51 = bitcast %"class.std::__1::unique_ptr"* %20 to i64*
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %45, align 8
  store i64 %50, i64* %51, align 8
  br label %196

53:                                               ; preds = %3
  %54 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %0, i64 1
  %55 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %0, i64 2
  %56 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %1, i64 -1
  %57 = tail call i32 @_ZNSt3__17__sort4IRPFbRKNS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEES9_EPS7_EEjT0_SE_SE_SE_T_(%"class.std::__1::unique_ptr"* %0, %"class.std::__1::unique_ptr"* %54, %"class.std::__1::unique_ptr"* %55, %"class.std::__1::unique_ptr"* %56, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** dereferenceable(8) %2)
  br label %196

58:                                               ; preds = %3
  %59 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %0, i64 1
  %60 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %0, i64 2
  %61 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %0, i64 3
  %62 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %1, i64 -1
  %63 = tail call i32 @_ZNSt3__17__sort4IRPFbRKNS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEES9_EPS7_EEjT0_SE_SE_SE_T_(%"class.std::__1::unique_ptr"* %0, %"class.std::__1::unique_ptr"* %59, %"class.std::__1::unique_ptr"* %60, %"class.std::__1::unique_ptr"* %61, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** dereferenceable(8) %2) #16
  %64 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %65 = tail call zeroext i1 %64(%"class.std::__1::unique_ptr"* dereferenceable(8) %62, %"class.std::__1::unique_ptr"* dereferenceable(8) %61) #16
  br i1 %65, label %66, label %196

66:                                               ; preds = %58
  %67 = bitcast %"class.std::__1::unique_ptr"* %61 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = bitcast %"class.std::__1::unique_ptr"* %62 to i64*
  %70 = load i64, i64* %69, align 8
  store i64 %70, i64* %67, align 8
  store i64 %68, i64* %69, align 8
  %71 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %72 = tail call zeroext i1 %71(%"class.std::__1::unique_ptr"* dereferenceable(8) %61, %"class.std::__1::unique_ptr"* dereferenceable(8) %60) #16
  br i1 %72, label %73, label %196

73:                                               ; preds = %66
  %74 = bitcast %"class.std::__1::unique_ptr"* %60 to <2 x i64>*
  %75 = load <2 x i64>, <2 x i64>* %74, align 8
  %76 = shufflevector <2 x i64> %75, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %77 = bitcast %"class.std::__1::unique_ptr"* %60 to <2 x i64>*
  store <2 x i64> %76, <2 x i64>* %77, align 8
  %78 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %79 = tail call zeroext i1 %78(%"class.std::__1::unique_ptr"* dereferenceable(8) %60, %"class.std::__1::unique_ptr"* dereferenceable(8) %59) #16
  br i1 %79, label %80, label %196

80:                                               ; preds = %73
  %81 = bitcast %"class.std::__1::unique_ptr"* %59 to <2 x i64>*
  %82 = load <2 x i64>, <2 x i64>* %81, align 8
  %83 = shufflevector <2 x i64> %82, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %84 = bitcast %"class.std::__1::unique_ptr"* %59 to <2 x i64>*
  store <2 x i64> %83, <2 x i64>* %84, align 8
  %85 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %86 = tail call zeroext i1 %85(%"class.std::__1::unique_ptr"* dereferenceable(8) %59, %"class.std::__1::unique_ptr"* dereferenceable(8) %0) #16
  br i1 %86, label %87, label %196

87:                                               ; preds = %80
  %88 = bitcast %"class.std::__1::unique_ptr"* %0 to <2 x i64>*
  %89 = load <2 x i64>, <2 x i64>* %88, align 8
  %90 = shufflevector <2 x i64> %89, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %91 = bitcast %"class.std::__1::unique_ptr"* %0 to <2 x i64>*
  store <2 x i64> %90, <2 x i64>* %91, align 8
  br label %196

92:                                               ; preds = %3
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %0, i64 2
  %94 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %0, i64 1
  %95 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %96 = tail call zeroext i1 %95(%"class.std::__1::unique_ptr"* dereferenceable(8) %94, %"class.std::__1::unique_ptr"* dereferenceable(8) %0) #16
  %97 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %98 = tail call zeroext i1 %97(%"class.std::__1::unique_ptr"* dereferenceable(8) %93, %"class.std::__1::unique_ptr"* dereferenceable(8) %94) #16
  br i1 %96, label %112, label %99

99:                                               ; preds = %92
  br i1 %98, label %100, label %128

100:                                              ; preds = %99
  %101 = bitcast %"class.std::__1::unique_ptr"* %94 to <2 x i64>*
  %102 = load <2 x i64>, <2 x i64>* %101, align 8
  %103 = shufflevector <2 x i64> %102, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %104 = bitcast %"class.std::__1::unique_ptr"* %94 to <2 x i64>*
  store <2 x i64> %103, <2 x i64>* %104, align 8
  %105 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %106 = tail call zeroext i1 %105(%"class.std::__1::unique_ptr"* dereferenceable(8) %94, %"class.std::__1::unique_ptr"* dereferenceable(8) %0) #16
  br i1 %106, label %107, label %128

107:                                              ; preds = %100
  %108 = bitcast %"class.std::__1::unique_ptr"* %0 to <2 x i64>*
  %109 = load <2 x i64>, <2 x i64>* %108, align 8
  %110 = shufflevector <2 x i64> %109, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %111 = bitcast %"class.std::__1::unique_ptr"* %0 to <2 x i64>*
  store <2 x i64> %110, <2 x i64>* %111, align 8
  br label %128

112:                                              ; preds = %92
  %113 = bitcast %"class.std::__1::unique_ptr"* %0 to i64*
  %114 = load i64, i64* %113, align 8
  br i1 %98, label %115, label %118

115:                                              ; preds = %112
  %116 = bitcast %"class.std::__1::unique_ptr"* %93 to i64*
  %117 = load i64, i64* %116, align 8
  store i64 %117, i64* %113, align 8
  store i64 %114, i64* %116, align 8
  br label %128

118:                                              ; preds = %112
  %119 = bitcast %"class.std::__1::unique_ptr"* %94 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %113, align 8
  store i64 %114, i64* %119, align 8
  %121 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %122 = tail call zeroext i1 %121(%"class.std::__1::unique_ptr"* dereferenceable(8) %93, %"class.std::__1::unique_ptr"* dereferenceable(8) %94) #16
  br i1 %122, label %123, label %128

123:                                              ; preds = %118
  %124 = bitcast %"class.std::__1::unique_ptr"* %94 to <2 x i64>*
  %125 = load <2 x i64>, <2 x i64>* %124, align 8
  %126 = shufflevector <2 x i64> %125, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %127 = bitcast %"class.std::__1::unique_ptr"* %94 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %127, align 8
  br label %128

128:                                              ; preds = %99, %100, %107, %115, %118, %123
  %129 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %0, i64 3
  %130 = icmp eq %"class.std::__1::unique_ptr"* %129, %1
  br i1 %130, label %196, label %131

131:                                              ; preds = %128
  %132 = bitcast %"class.std::__1::unique_ptr"* %4 to i8*
  %133 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %4, i64 0, i32 0, i32 0, i32 0
  %134 = bitcast %"class.std::__1::unique_ptr"* %4 to i64*
  br label %135

135:                                              ; preds = %131, %189
  %136 = phi %"class.std::__1::unique_ptr"* [ %129, %131 ], [ %191, %189 ]
  %137 = phi i32 [ 0, %131 ], [ %190, %189 ]
  %138 = phi %"class.std::__1::unique_ptr"* [ %93, %131 ], [ %136, %189 ]
  %139 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %140 = call zeroext i1 %139(%"class.std::__1::unique_ptr"* dereferenceable(8) %136, %"class.std::__1::unique_ptr"* dereferenceable(8) %138) #16
  br i1 %140, label %141, label %189

141:                                              ; preds = %135
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %132) #16
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %136, i64 0, i32 0, i32 0, i32 0
  %143 = bitcast %"class.std::__1::unique_ptr"* %136 to i64*
  %144 = load i64, i64* %143, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %142, align 8
  store i64 %144, i64* %134, align 8
  br label %145

145:                                              ; preds = %162, %141
  %146 = phi %"class.std::__1::unique_ptr"* [ %136, %141 ], [ %147, %162 ]
  %147 = phi %"class.std::__1::unique_ptr"* [ %138, %141 ], [ %164, %162 ]
  %148 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %147, i64 0, i32 0, i32 0, i32 0
  %149 = bitcast %"class.std::__1::unique_ptr"* %147 to i64*
  %150 = load i64, i64* %149, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %148, align 8
  %151 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %146, i64 0, i32 0, i32 0, i32 0
  %152 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %151, align 8
  %153 = bitcast %"class.std::__1::unique_ptr"* %146 to i64*
  store i64 %150, i64* %153, align 8
  %154 = icmp eq %"class.courgette::DisassemblerElf32::TypedRVA"* %152, null
  br i1 %154, label %160, label %155

155:                                              ; preds = %145
  %156 = bitcast %"class.courgette::DisassemblerElf32::TypedRVA"* %152 to void (%"class.courgette::DisassemblerElf32::TypedRVA"*)***
  %157 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)**, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*** %156, align 8
  %158 = getelementptr inbounds void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %157, i64 1
  %159 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %158, align 8
  call void %159(%"class.courgette::DisassemblerElf32::TypedRVA"* nonnull %152) #16
  br label %160

160:                                              ; preds = %145, %155
  %161 = icmp eq %"class.std::__1::unique_ptr"* %147, %0
  br i1 %161, label %166, label %162

162:                                              ; preds = %160
  %163 = load i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)*, i1 (%"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*)** %2, align 8
  %164 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %147, i64 -1
  %165 = call zeroext i1 %163(%"class.std::__1::unique_ptr"* nonnull dereferenceable(8) %4, %"class.std::__1::unique_ptr"* dereferenceable(8) %164) #16
  br i1 %165, label %145, label %166

166:                                              ; preds = %160, %162
  %167 = phi %"class.std::__1::unique_ptr"* [ %147, %162 ], [ %0, %160 ]
  %168 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %167, i64 0, i32 0, i32 0, i32 0
  %169 = bitcast %"class.std::__1::unique_ptr"* %167 to i64*
  %170 = load i64, i64* %134, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %133, align 8
  %171 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %168, align 8
  store i64 %170, i64* %169, align 8
  %172 = icmp eq %"class.courgette::DisassemblerElf32::TypedRVA"* %171, null
  br i1 %172, label %178, label %173

173:                                              ; preds = %166
  %174 = bitcast %"class.courgette::DisassemblerElf32::TypedRVA"* %171 to void (%"class.courgette::DisassemblerElf32::TypedRVA"*)***
  %175 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)**, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*** %174, align 8
  %176 = getelementptr inbounds void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %175, i64 1
  %177 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %176, align 8
  call void %177(%"class.courgette::DisassemblerElf32::TypedRVA"* nonnull %171) #16
  br label %178

178:                                              ; preds = %166, %173
  %179 = add i32 %137, 1
  %180 = icmp eq i32 %179, 8
  %181 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %133, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %133, align 8
  %182 = icmp eq %"class.courgette::DisassemblerElf32::TypedRVA"* %181, null
  br i1 %182, label %188, label %183

183:                                              ; preds = %178
  %184 = bitcast %"class.courgette::DisassemblerElf32::TypedRVA"* %181 to void (%"class.courgette::DisassemblerElf32::TypedRVA"*)***
  %185 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)**, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*** %184, align 8
  %186 = getelementptr inbounds void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %185, i64 1
  %187 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %186, align 8
  call void %187(%"class.courgette::DisassemblerElf32::TypedRVA"* nonnull %181) #16
  br label %188

188:                                              ; preds = %178, %183
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %132) #16
  br i1 %180, label %193, label %189

189:                                              ; preds = %188, %135
  %190 = phi i32 [ %179, %188 ], [ %137, %135 ]
  %191 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %136, i64 1
  %192 = icmp eq %"class.std::__1::unique_ptr"* %191, %1
  br i1 %192, label %196, label %135

193:                                              ; preds = %188
  %194 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %136, i64 1
  %195 = icmp eq %"class.std::__1::unique_ptr"* %194, %1
  br label %196

196:                                              ; preds = %189, %193, %128, %87, %80, %73, %66, %58, %49, %44, %41, %33, %26, %25, %9, %13, %3, %3, %53
  %197 = phi i1 [ true, %53 ], [ true, %3 ], [ true, %3 ], [ true, %13 ], [ true, %9 ], [ true, %25 ], [ true, %26 ], [ true, %33 ], [ true, %41 ], [ true, %44 ], [ true, %49 ], [ true, %58 ], [ true, %66 ], [ true, %73 ], [ true, %80 ], [ true, %87 ], [ true, %128 ], [ %195, %193 ], [ true, %189 ]
  ret i1 %197
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrIN9courgette17DisassemblerElf328TypedRVAENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::unique_ptr"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::unique_ptr"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.std::__1::unique_ptr"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 %18, i32 0, i32 0, i32 0
  %20 = bitcast %"class.courgette::DisassemblerElf32::TypedRVA"** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 8
  %25 = and i64 %24, -8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #16
  %26 = ptrtoint %"class.std::__1::unique_ptr"* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %217

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 3
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 2305843009213693951
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #17
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 3
  %41 = icmp ult i64 %40, 1152921504606846975
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 2
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 2305843009213693951
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #17
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 2305843009213693951, %38 ]
  %52 = shl i64 %51, 3
  %53 = tail call i8* @_Znwm(i64 %52) #18
  %54 = bitcast i8* %53 to %"class.std::__1::unique_ptr"*
  br label %55

55:                                               ; preds = %42, %50
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi %"class.std::__1::unique_ptr"* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %57, i64 %33
  %59 = ptrtoint %"class.std::__1::unique_ptr"* %58 to i64
  %60 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %57, i64 %56
  %61 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %58, i64 %1
  %62 = shl nsw i64 %1, 3
  %63 = add i64 %62, -8
  %64 = lshr exact i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %79, label %68

68:                                               ; preds = %55, %68
  %69 = phi %"class.std::__1::unique_ptr"* [ %73, %68 ], [ %58, %55 ]
  %70 = phi i64 [ %74, %68 ], [ %59, %55 ]
  %71 = phi i64 [ %75, %68 ], [ %66, %55 ]
  %72 = inttoptr i64 %70 to i64*
  store i64 0, i64* %72, align 8
  %73 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %69, i64 1
  %74 = ptrtoint %"class.std::__1::unique_ptr"* %73 to i64
  %75 = add i64 %71, -1
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %68, !llvm.loop !86

77:                                               ; preds = %68
  %78 = ptrtoint %"class.std::__1::unique_ptr"* %73 to i64
  br label %79

79:                                               ; preds = %55, %77
  %80 = phi %"class.std::__1::unique_ptr"* [ %58, %55 ], [ %73, %77 ]
  %81 = phi i64 [ %59, %55 ], [ %78, %77 ]
  %82 = icmp ult i64 %63, 56
  br i1 %82, label %104, label %83

83:                                               ; preds = %79, %83
  %84 = phi %"class.std::__1::unique_ptr"* [ %101, %83 ], [ %80, %79 ]
  %85 = phi i64 [ %102, %83 ], [ %81, %79 ]
  %86 = inttoptr i64 %85 to i64*
  store i64 0, i64* %86, align 8
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %84, i64 1
  %88 = bitcast %"class.std::__1::unique_ptr"* %87 to i64*
  store i64 0, i64* %88, align 8
  %89 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %84, i64 2
  %90 = bitcast %"class.std::__1::unique_ptr"* %89 to i64*
  store i64 0, i64* %90, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %84, i64 3
  %92 = bitcast %"class.std::__1::unique_ptr"* %91 to i64*
  store i64 0, i64* %92, align 8
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %84, i64 4
  %94 = bitcast %"class.std::__1::unique_ptr"* %93 to i64*
  store i64 0, i64* %94, align 8
  %95 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %84, i64 5
  %96 = bitcast %"class.std::__1::unique_ptr"* %95 to i64*
  store i64 0, i64* %96, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %84, i64 6
  %98 = bitcast %"class.std::__1::unique_ptr"* %97 to i64*
  store i64 0, i64* %98, align 8
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %84, i64 7
  %100 = bitcast %"class.std::__1::unique_ptr"* %99 to i64*
  store i64 0, i64* %100, align 8
  %101 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %84, i64 8
  %102 = ptrtoint %"class.std::__1::unique_ptr"* %101 to i64
  %103 = icmp eq %"class.std::__1::unique_ptr"* %61, %101
  br i1 %103, label %104, label %83

104:                                              ; preds = %83, %79
  %105 = ptrtoint %"class.std::__1::unique_ptr"* %60 to i64
  %106 = ptrtoint %"class.std::__1::unique_ptr"* %61 to i64
  %107 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %108 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %107, align 8
  %109 = ptrtoint %"class.std::__1::unique_ptr"* %108 to i64
  %110 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %6, align 8
  %111 = icmp eq %"class.std::__1::unique_ptr"* %110, %108
  br i1 %111, label %194, label %112

112:                                              ; preds = %104
  %113 = getelementptr %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %110, i64 -1, i32 0, i32 0, i32 0
  %114 = ptrtoint %"class.courgette::DisassemblerElf32::TypedRVA"** %113 to i64
  %115 = sub i64 %114, %109
  %116 = lshr i64 %115, 3
  %117 = add nuw nsw i64 %116, 1
  %118 = and i64 %117, 7
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %132, label %120

120:                                              ; preds = %112, %120
  %121 = phi %"class.std::__1::unique_ptr"* [ %124, %120 ], [ %58, %112 ]
  %122 = phi %"class.std::__1::unique_ptr"* [ %125, %120 ], [ %110, %112 ]
  %123 = phi i64 [ %130, %120 ], [ %118, %112 ]
  %124 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %121, i64 -1
  %125 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %122, i64 -1
  %126 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %125, i64 0, i32 0, i32 0, i32 0
  %127 = bitcast %"class.std::__1::unique_ptr"* %125 to i64*
  %128 = load i64, i64* %127, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %126, align 8
  %129 = bitcast %"class.std::__1::unique_ptr"* %124 to i64*
  store i64 %128, i64* %129, align 8
  %130 = add i64 %123, -1
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %120, !llvm.loop !87

132:                                              ; preds = %120, %112
  %133 = phi %"class.std::__1::unique_ptr"* [ undef, %112 ], [ %124, %120 ]
  %134 = phi %"class.std::__1::unique_ptr"* [ %58, %112 ], [ %124, %120 ]
  %135 = phi %"class.std::__1::unique_ptr"* [ %110, %112 ], [ %125, %120 ]
  %136 = icmp ult i64 %115, 56
  br i1 %136, label %189, label %137

137:                                              ; preds = %132, %137
  %138 = phi %"class.std::__1::unique_ptr"* [ %182, %137 ], [ %134, %132 ]
  %139 = phi %"class.std::__1::unique_ptr"* [ %183, %137 ], [ %135, %132 ]
  %140 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %138, i64 -1
  %141 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %139, i64 -1
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %141, i64 0, i32 0, i32 0, i32 0
  %143 = bitcast %"class.std::__1::unique_ptr"* %141 to i64*
  %144 = load i64, i64* %143, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %142, align 8
  %145 = bitcast %"class.std::__1::unique_ptr"* %140 to i64*
  store i64 %144, i64* %145, align 8
  %146 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %138, i64 -2
  %147 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %139, i64 -2
  %148 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %147, i64 0, i32 0, i32 0, i32 0
  %149 = bitcast %"class.std::__1::unique_ptr"* %147 to i64*
  %150 = load i64, i64* %149, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %148, align 8
  %151 = bitcast %"class.std::__1::unique_ptr"* %146 to i64*
  store i64 %150, i64* %151, align 8
  %152 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %138, i64 -3
  %153 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %139, i64 -3
  %154 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %153, i64 0, i32 0, i32 0, i32 0
  %155 = bitcast %"class.std::__1::unique_ptr"* %153 to i64*
  %156 = load i64, i64* %155, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %154, align 8
  %157 = bitcast %"class.std::__1::unique_ptr"* %152 to i64*
  store i64 %156, i64* %157, align 8
  %158 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %138, i64 -4
  %159 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %139, i64 -4
  %160 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %159, i64 0, i32 0, i32 0, i32 0
  %161 = bitcast %"class.std::__1::unique_ptr"* %159 to i64*
  %162 = load i64, i64* %161, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %160, align 8
  %163 = bitcast %"class.std::__1::unique_ptr"* %158 to i64*
  store i64 %162, i64* %163, align 8
  %164 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %138, i64 -5
  %165 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %139, i64 -5
  %166 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %165, i64 0, i32 0, i32 0, i32 0
  %167 = bitcast %"class.std::__1::unique_ptr"* %165 to i64*
  %168 = load i64, i64* %167, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %166, align 8
  %169 = bitcast %"class.std::__1::unique_ptr"* %164 to i64*
  store i64 %168, i64* %169, align 8
  %170 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %138, i64 -6
  %171 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %139, i64 -6
  %172 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %171, i64 0, i32 0, i32 0, i32 0
  %173 = bitcast %"class.std::__1::unique_ptr"* %171 to i64*
  %174 = load i64, i64* %173, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %172, align 8
  %175 = bitcast %"class.std::__1::unique_ptr"* %170 to i64*
  store i64 %174, i64* %175, align 8
  %176 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %138, i64 -7
  %177 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %139, i64 -7
  %178 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %177, i64 0, i32 0, i32 0, i32 0
  %179 = bitcast %"class.std::__1::unique_ptr"* %177 to i64*
  %180 = load i64, i64* %179, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %178, align 8
  %181 = bitcast %"class.std::__1::unique_ptr"* %176 to i64*
  store i64 %180, i64* %181, align 8
  %182 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %138, i64 -8
  %183 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %139, i64 -8
  %184 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %183, i64 0, i32 0, i32 0, i32 0
  %185 = bitcast %"class.std::__1::unique_ptr"* %183 to i64*
  %186 = load i64, i64* %185, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %184, align 8
  %187 = bitcast %"class.std::__1::unique_ptr"* %182 to i64*
  store i64 %186, i64* %187, align 8
  %188 = icmp eq %"class.std::__1::unique_ptr"* %183, %108
  br i1 %188, label %189, label %137

189:                                              ; preds = %137, %132
  %190 = phi %"class.std::__1::unique_ptr"* [ %133, %132 ], [ %182, %137 ]
  %191 = ptrtoint %"class.std::__1::unique_ptr"* %190 to i64
  %192 = load i64, i64* %30, align 8
  %193 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %6, align 8
  br label %194

194:                                              ; preds = %104, %189
  %195 = phi %"class.std::__1::unique_ptr"* [ %193, %189 ], [ %108, %104 ]
  %196 = phi i64 [ %191, %189 ], [ %59, %104 ]
  %197 = phi i64 [ %192, %189 ], [ %109, %104 ]
  store i64 %196, i64* %30, align 8
  store i64 %106, i64* %7, align 8
  store i64 %105, i64* %4, align 8
  %198 = inttoptr i64 %197 to %"class.std::__1::unique_ptr"*
  %199 = icmp eq %"class.std::__1::unique_ptr"* %195, %198
  br i1 %199, label %213, label %200

200:                                              ; preds = %194, %211
  %201 = phi %"class.std::__1::unique_ptr"* [ %202, %211 ], [ %195, %194 ]
  %202 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %201, i64 -1
  %203 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %202, i64 0, i32 0, i32 0, i32 0
  %204 = load %"class.courgette::DisassemblerElf32::TypedRVA"*, %"class.courgette::DisassemblerElf32::TypedRVA"** %203, align 8
  store %"class.courgette::DisassemblerElf32::TypedRVA"* null, %"class.courgette::DisassemblerElf32::TypedRVA"** %203, align 8
  %205 = icmp eq %"class.courgette::DisassemblerElf32::TypedRVA"* %204, null
  br i1 %205, label %211, label %206

206:                                              ; preds = %200
  %207 = bitcast %"class.courgette::DisassemblerElf32::TypedRVA"* %204 to void (%"class.courgette::DisassemblerElf32::TypedRVA"*)***
  %208 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)**, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*** %207, align 8
  %209 = getelementptr inbounds void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %208, i64 1
  %210 = load void (%"class.courgette::DisassemblerElf32::TypedRVA"*)*, void (%"class.courgette::DisassemblerElf32::TypedRVA"*)** %209, align 8
  tail call void %210(%"class.courgette::DisassemblerElf32::TypedRVA"* nonnull %204) #16
  br label %211

211:                                              ; preds = %206, %200
  %212 = icmp eq %"class.std::__1::unique_ptr"* %202, %198
  br i1 %212, label %213, label %200

213:                                              ; preds = %211, %194
  %214 = icmp eq i64 %197, 0
  br i1 %214, label %217, label %215

215:                                              ; preds = %213
  %216 = inttoptr i64 %197 to i8*
  tail call void @_ZdlPv(i8* %216) #18
  br label %217

217:                                              ; preds = %215, %213, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4base8internal7InvokerINS0_9BindStateIMN9courgette17DisassemblerElf32EKFbPNS3_15AssemblyProgramEPNS3_19InstructionReceptorEEJNS0_17UnretainedWrapperIS4_EES6_EEEFbS8_EE3RunEPNS0_13BindStateBaseES8_(%"class.base::internal::BindStateBase"*, %"class.courgette::InstructionReceptor"*) #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %5 = bitcast void (%"class.base::internal::BindStateBase"*)** %4 to i8**
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %4, i64 1
  %8 = bitcast void (%"class.base::internal::BindStateBase"*)** %7 to %"class.courgette::AssemblyProgram"**
  %9 = bitcast %"class.base::internal::BindStateBase"* %3 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %12 = bitcast void ()** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds i8, i8* %6, i64 %13
  %15 = bitcast i8* %14 to %"class.courgette::DisassemblerElf32"*
  %16 = and i64 %10, 1
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %25, label %18

18:                                               ; preds = %2
  %19 = bitcast i8* %14 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = add i64 %10, -1
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = bitcast i8* %22 to i1 (%"class.courgette::DisassemblerElf32"*, %"class.courgette::AssemblyProgram"*, %"class.courgette::InstructionReceptor"*)**
  %24 = load i1 (%"class.courgette::DisassemblerElf32"*, %"class.courgette::AssemblyProgram"*, %"class.courgette::InstructionReceptor"*)*, i1 (%"class.courgette::DisassemblerElf32"*, %"class.courgette::AssemblyProgram"*, %"class.courgette::InstructionReceptor"*)** %23, align 8
  br label %27

25:                                               ; preds = %2
  %26 = inttoptr i64 %10 to i1 (%"class.courgette::DisassemblerElf32"*, %"class.courgette::AssemblyProgram"*, %"class.courgette::InstructionReceptor"*)*
  br label %27

27:                                               ; preds = %18, %25
  %28 = phi i1 (%"class.courgette::DisassemblerElf32"*, %"class.courgette::AssemblyProgram"*, %"class.courgette::InstructionReceptor"*)* [ %24, %18 ], [ %26, %25 ]
  %29 = load %"class.courgette::AssemblyProgram"*, %"class.courgette::AssemblyProgram"** %8, align 8
  %30 = tail call zeroext i1 %28(%"class.courgette::DisassemblerElf32"* %15, %"class.courgette::AssemblyProgram"* %29, %"class.courgette::InstructionReceptor"* %1) #16
  ret i1 %30
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9BindStateIMN9courgette17DisassemblerElf32EKFbPNS2_15AssemblyProgramEPNS2_19InstructionReceptorEEJNS0_17UnretainedWrapperIS3_EES5_EE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #2 comdat align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #18
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #3

declare void @_ZNSt3__16__sortIRNS_6__lessImmEEPmEEvT0_S5_T_(i64*, i64*, %"struct.std::__1::__less"* dereferenceable(1)) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { cold noreturn nounwind }
attributes #14 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { nounwind readnone }
attributes #16 = { nounwind }
attributes #17 = { noreturn nounwind }
attributes #18 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN9courgette12_GLOBAL__N_131GetSectionHeaderFileOffsetOrderERKNSt3__16vectorI10Elf32_ShdrNS1_9allocatorIS3_EEEE: argument 0"}
!4 = distinct !{!4, !"_ZN9courgette12_GLOBAL__N_131GetSectionHeaderFileOffsetOrderERKNSt3__16vectorI10Elf32_ShdrNS1_9allocatorIS3_EEEE"}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.isvectorized", i32 1}
!7 = distinct !{!7, !8, !6}
!8 = !{!"llvm.loop.unroll.runtime.disable"}
!9 = !{!10, !12}
!10 = distinct !{!10, !11, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEMN9courgette17DisassemblerElf32EKFbPNS3_15AssemblyProgramEPNS3_19InstructionReceptorEEJNS0_17UnretainedWrapperIS4_EERS6_EEEDcOT0_DpOT1_: argument 0"}
!11 = distinct !{!11, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEMN9courgette17DisassemblerElf32EKFbPNS3_15AssemblyProgramEPNS3_19InstructionReceptorEEJNS0_17UnretainedWrapperIS4_EERS6_EEEDcOT0_DpOT1_"}
!12 = distinct !{!12, !13, !"_ZN4base13BindRepeatingIMN9courgette17DisassemblerElf32EKFbPNS1_15AssemblyProgramEPNS1_19InstructionReceptorEEJNS_8internal17UnretainedWrapperIS2_EERS4_EEENS_17RepeatingCallbackINS9_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSF_DpOSG_: argument 0"}
!13 = distinct !{!13, !"_ZN4base13BindRepeatingIMN9courgette17DisassemblerElf32EKFbPNS1_15AssemblyProgramEPNS1_19InstructionReceptorEEJNS_8internal17UnretainedWrapperIS2_EERS4_EEENS_17RepeatingCallbackINS9_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSF_DpOSG_"}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.unroll.disable"}
!16 = !{!17}
!17 = distinct !{!17, !18}
!18 = distinct !{!18, !"LVerDomain"}
!19 = !{!20}
!20 = distinct !{!20, !18}
!21 = distinct !{!21, !6}
!22 = distinct !{!22, !15}
!23 = !{!24}
!24 = distinct !{!24, !25}
!25 = distinct !{!25, !"LVerDomain"}
!26 = !{!27}
!27 = distinct !{!27, !25}
!28 = distinct !{!28, !6}
!29 = distinct !{!29, !15}
!30 = distinct !{!30, !15}
!31 = distinct !{!31, !6}
!32 = distinct !{!32, !6}
!33 = !{!34}
!34 = distinct !{!34, !35}
!35 = distinct !{!35, !"LVerDomain"}
!36 = !{!37}
!37 = distinct !{!37, !35}
!38 = distinct !{!38, !6}
!39 = distinct !{!39, !15}
!40 = distinct !{!40, !15}
!41 = distinct !{!41, !6}
!42 = !{!43}
!43 = distinct !{!43, !44}
!44 = distinct !{!44, !"LVerDomain"}
!45 = !{!46}
!46 = distinct !{!46, !44}
!47 = distinct !{!47, !6}
!48 = distinct !{!48, !15}
!49 = distinct !{!49, !15}
!50 = distinct !{!50, !6}
!51 = distinct !{!51, !15}
!52 = !{!53}
!53 = distinct !{!53, !54}
!54 = distinct !{!54, !"LVerDomain"}
!55 = !{!56}
!56 = distinct !{!56, !54}
!57 = distinct !{!57, !6}
!58 = distinct !{!58, !15}
!59 = distinct !{!59, !15}
!60 = !{!61}
!61 = distinct !{!61, !62}
!62 = distinct !{!62, !"LVerDomain"}
!63 = !{!64}
!64 = distinct !{!64, !62}
!65 = distinct !{!65, !6}
!66 = distinct !{!66, !15}
!67 = distinct !{!67, !6}
!68 = !{!69}
!69 = distinct !{!69, !70}
!70 = distinct !{!70, !"LVerDomain"}
!71 = !{!72}
!72 = distinct !{!72, !70}
!73 = distinct !{!73, !6}
!74 = distinct !{!74, !15}
!75 = distinct !{!75, !6}
!76 = distinct !{!76, !6}
!77 = !{!78}
!78 = distinct !{!78, !79}
!79 = distinct !{!79, !"LVerDomain"}
!80 = !{!81}
!81 = distinct !{!81, !79}
!82 = distinct !{!82, !6}
!83 = distinct !{!83, !15}
!84 = distinct !{!84, !6}
!85 = !{i8 0, i8 2}
!86 = distinct !{!86, !15}
!87 = distinct !{!87, !15}
